// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26755 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26851 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26875 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26859 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// export globalGameSaveCounter ; every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// every 0 0$1 do
10975: GO 10977
10977: DISABLE
// begin globalGameSaveCounter := 0 ;
10978: LD_ADDR_EXP 14
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10986: LD_STRING setGameSaveCounter(0)
10988: PPUSH
10989: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10993: LD_STRING initStreamRollete();
10995: PPUSH
10996: CALL_OW 559
// InitStreamMode ;
11000: CALL 12326 0 0
// DefineStreamItems ( false ) ;
11004: LD_INT 0
11006: PPUSH
11007: CALL 12790 0 1
// end ;
11011: END
// export function SOS_MapStart ( ) ; begin
11012: LD_INT 0
11014: PPUSH
// if streamModeActive then
11015: LD_EXP 15
11019: IFFALSE 11028
// DefineStreamItems ( true ) ;
11021: LD_INT 1
11023: PPUSH
11024: CALL 12790 0 1
// UpdateLuaVariables ( ) ;
11028: CALL 11045 0 0
// UpdateFactoryWaypoints ( ) ;
11032: CALL 25659 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11036: CALL 25916 0 0
// end ;
11040: LD_VAR 0 1
11044: RET
// function UpdateLuaVariables ( ) ; begin
11045: LD_INT 0
11047: PPUSH
// if globalGameSaveCounter then
11048: LD_EXP 14
11052: IFFALSE 11086
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11054: LD_ADDR_EXP 14
11058: PUSH
11059: LD_EXP 14
11063: PPUSH
11064: CALL 69726 0 1
11068: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11069: LD_STRING setGameSaveCounter(
11071: PUSH
11072: LD_EXP 14
11076: STR
11077: PUSH
11078: LD_STRING )
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11086: LD_STRING setGameDifficulty(
11088: PUSH
11089: LD_OWVAR 67
11093: STR
11094: PUSH
11095: LD_STRING )
11097: STR
11098: PPUSH
11099: CALL_OW 559
// end ;
11103: LD_VAR 0 1
11107: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11108: LD_INT 0
11110: PPUSH
// if p2 = stream_mode then
11111: LD_VAR 0 2
11115: PUSH
11116: LD_INT 100
11118: EQUAL
11119: IFFALSE 12122
// begin if not StreamModeActive then
11121: LD_EXP 15
11125: NOT
11126: IFFALSE 11136
// StreamModeActive := true ;
11128: LD_ADDR_EXP 15
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 0 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 0
11143: EQUAL
11144: IFFALSE 11150
// InitStreamMode ;
11146: CALL 12326 0 0
// if p3 = 1 then
11150: LD_VAR 0 3
11154: PUSH
11155: LD_INT 1
11157: EQUAL
11158: IFFALSE 11168
// sRocket := true ;
11160: LD_ADDR_EXP 20
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
// if p3 = 2 then
11168: LD_VAR 0 3
11172: PUSH
11173: LD_INT 2
11175: EQUAL
11176: IFFALSE 11186
// sSpeed := true ;
11178: LD_ADDR_EXP 19
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// if p3 = 3 then
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 3
11193: EQUAL
11194: IFFALSE 11204
// sEngine := true ;
11196: LD_ADDR_EXP 21
11200: PUSH
11201: LD_INT 1
11203: ST_TO_ADDR
// if p3 = 4 then
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 4
11211: EQUAL
11212: IFFALSE 11222
// sSpec := true ;
11214: LD_ADDR_EXP 18
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if p3 = 5 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 5
11229: EQUAL
11230: IFFALSE 11240
// sLevel := true ;
11232: LD_ADDR_EXP 22
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// if p3 = 6 then
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 6
11247: EQUAL
11248: IFFALSE 11258
// sArmoury := true ;
11250: LD_ADDR_EXP 23
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// if p3 = 7 then
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 7
11265: EQUAL
11266: IFFALSE 11276
// sRadar := true ;
11268: LD_ADDR_EXP 24
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// if p3 = 8 then
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 8
11283: EQUAL
11284: IFFALSE 11294
// sBunker := true ;
11286: LD_ADDR_EXP 25
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 9 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 9
11301: EQUAL
11302: IFFALSE 11312
// sHack := true ;
11304: LD_ADDR_EXP 26
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if p3 = 10 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 10
11319: EQUAL
11320: IFFALSE 11330
// sFire := true ;
11322: LD_ADDR_EXP 27
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
// if p3 = 11 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 11
11337: EQUAL
11338: IFFALSE 11348
// sRefresh := true ;
11340: LD_ADDR_EXP 28
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 12 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 12
11355: EQUAL
11356: IFFALSE 11366
// sExp := true ;
11358: LD_ADDR_EXP 29
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 13 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 13
11373: EQUAL
11374: IFFALSE 11384
// sDepot := true ;
11376: LD_ADDR_EXP 30
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 14 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 14
11391: EQUAL
11392: IFFALSE 11402
// sFlag := true ;
11394: LD_ADDR_EXP 31
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 15 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 15
11409: EQUAL
11410: IFFALSE 11420
// sKamikadze := true ;
11412: LD_ADDR_EXP 39
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 16 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 16
11427: EQUAL
11428: IFFALSE 11438
// sTroll := true ;
11430: LD_ADDR_EXP 40
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 17 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 17
11445: EQUAL
11446: IFFALSE 11456
// sSlow := true ;
11448: LD_ADDR_EXP 41
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 18 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 18
11463: EQUAL
11464: IFFALSE 11474
// sLack := true ;
11466: LD_ADDR_EXP 42
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 19 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 19
11481: EQUAL
11482: IFFALSE 11492
// sTank := true ;
11484: LD_ADDR_EXP 44
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 20 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 20
11499: EQUAL
11500: IFFALSE 11510
// sRemote := true ;
11502: LD_ADDR_EXP 45
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 21 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 21
11517: EQUAL
11518: IFFALSE 11528
// sPowell := true ;
11520: LD_ADDR_EXP 46
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 22 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 22
11535: EQUAL
11536: IFFALSE 11546
// sTeleport := true ;
11538: LD_ADDR_EXP 49
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 23 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 23
11553: EQUAL
11554: IFFALSE 11564
// sOilTower := true ;
11556: LD_ADDR_EXP 51
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 24 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 24
11571: EQUAL
11572: IFFALSE 11582
// sShovel := true ;
11574: LD_ADDR_EXP 52
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 25 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 25
11589: EQUAL
11590: IFFALSE 11600
// sSheik := true ;
11592: LD_ADDR_EXP 53
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 26 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 26
11607: EQUAL
11608: IFFALSE 11618
// sEarthquake := true ;
11610: LD_ADDR_EXP 55
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 27 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 27
11625: EQUAL
11626: IFFALSE 11636
// sAI := true ;
11628: LD_ADDR_EXP 56
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 28 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 28
11643: EQUAL
11644: IFFALSE 11654
// sCargo := true ;
11646: LD_ADDR_EXP 59
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 29 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 29
11661: EQUAL
11662: IFFALSE 11672
// sDLaser := true ;
11664: LD_ADDR_EXP 60
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 30 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 30
11679: EQUAL
11680: IFFALSE 11690
// sExchange := true ;
11682: LD_ADDR_EXP 61
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 31 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 31
11697: EQUAL
11698: IFFALSE 11708
// sFac := true ;
11700: LD_ADDR_EXP 62
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 32 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 32
11715: EQUAL
11716: IFFALSE 11726
// sPower := true ;
11718: LD_ADDR_EXP 63
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 33 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 33
11733: EQUAL
11734: IFFALSE 11744
// sRandom := true ;
11736: LD_ADDR_EXP 64
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 34 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 34
11751: EQUAL
11752: IFFALSE 11762
// sShield := true ;
11754: LD_ADDR_EXP 65
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 35 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 35
11769: EQUAL
11770: IFFALSE 11780
// sTime := true ;
11772: LD_ADDR_EXP 66
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 36 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 36
11787: EQUAL
11788: IFFALSE 11798
// sTools := true ;
11790: LD_ADDR_EXP 67
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 101 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 101
11805: EQUAL
11806: IFFALSE 11816
// sSold := true ;
11808: LD_ADDR_EXP 32
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 102 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 102
11823: EQUAL
11824: IFFALSE 11834
// sDiff := true ;
11826: LD_ADDR_EXP 33
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 103 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 103
11841: EQUAL
11842: IFFALSE 11852
// sFog := true ;
11844: LD_ADDR_EXP 36
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 104 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 104
11859: EQUAL
11860: IFFALSE 11870
// sReset := true ;
11862: LD_ADDR_EXP 37
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 105 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 105
11877: EQUAL
11878: IFFALSE 11888
// sSun := true ;
11880: LD_ADDR_EXP 38
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 106 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 106
11895: EQUAL
11896: IFFALSE 11906
// sTiger := true ;
11898: LD_ADDR_EXP 34
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 107 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 107
11913: EQUAL
11914: IFFALSE 11924
// sBomb := true ;
11916: LD_ADDR_EXP 35
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 108 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 108
11931: EQUAL
11932: IFFALSE 11942
// sWound := true ;
11934: LD_ADDR_EXP 43
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 109 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 109
11949: EQUAL
11950: IFFALSE 11960
// sBetray := true ;
11952: LD_ADDR_EXP 47
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 110 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 110
11967: EQUAL
11968: IFFALSE 11978
// sContamin := true ;
11970: LD_ADDR_EXP 48
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 111 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 111
11985: EQUAL
11986: IFFALSE 11996
// sOil := true ;
11988: LD_ADDR_EXP 50
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 112 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 112
12003: EQUAL
12004: IFFALSE 12014
// sStu := true ;
12006: LD_ADDR_EXP 54
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 113 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 113
12021: EQUAL
12022: IFFALSE 12032
// sBazooka := true ;
12024: LD_ADDR_EXP 57
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 114 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 114
12039: EQUAL
12040: IFFALSE 12050
// sMortar := true ;
12042: LD_ADDR_EXP 58
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 115 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 115
12057: EQUAL
12058: IFFALSE 12068
// sRanger := true ;
12060: LD_ADDR_EXP 68
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 116 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 116
12075: EQUAL
12076: IFFALSE 12086
// sComputer := true ;
12078: LD_ADDR_EXP 69
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 117 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 117
12093: EQUAL
12094: IFFALSE 12104
// s30 := true ;
12096: LD_ADDR_EXP 70
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 118 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 118
12111: EQUAL
12112: IFFALSE 12122
// s60 := true ;
12114: LD_ADDR_EXP 71
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ; if p2 = hack_mode then
12122: LD_VAR 0 2
12126: PUSH
12127: LD_INT 101
12129: EQUAL
12130: IFFALSE 12258
// begin case p3 of 1 :
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12152
12145: POP
// hHackUnlimitedResources ; 2 :
12146: CALL 24405 0 0
12150: GO 12258
12152: LD_INT 2
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 12167
12160: POP
// hHackSetLevel10 ; 3 :
12161: CALL 24538 0 0
12165: GO 12258
12167: LD_INT 3
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12182
12175: POP
// hHackSetLevel10YourUnits ; 4 :
12176: CALL 24623 0 0
12180: GO 12258
12182: LD_INT 4
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12197
12190: POP
// hHackInvincible ; 5 :
12191: CALL 25071 0 0
12195: GO 12258
12197: LD_INT 5
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12212
12205: POP
// hHackInvisible ; 6 :
12206: CALL 25182 0 0
12210: GO 12258
12212: LD_INT 6
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12227
12220: POP
// hHackChangeYourSide ; 7 :
12221: CALL 25239 0 0
12225: GO 12258
12227: LD_INT 7
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12242
12235: POP
// hHackChangeUnitSide ; 8 :
12236: CALL 25281 0 0
12240: GO 12258
12242: LD_INT 8
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12257
12250: POP
// hHackFog ; end ;
12251: CALL 25382 0 0
12255: GO 12258
12257: POP
// end ; if p2 = game_save_mode then
12258: LD_VAR 0 2
12262: PUSH
12263: LD_INT 102
12265: EQUAL
12266: IFFALSE 12321
// begin if p3 = 1 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 1
12275: EQUAL
12276: IFFALSE 12288
// globalGameSaveCounter := p4 ;
12278: LD_ADDR_EXP 14
12282: PUSH
12283: LD_VAR 0 4
12287: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 2
12295: EQUAL
12296: PUSH
12297: LD_EXP 14
12301: AND
12302: IFFALSE 12321
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12304: LD_STRING setGameSaveCounter(
12306: PUSH
12307: LD_EXP 14
12311: STR
12312: PUSH
12313: LD_STRING )
12315: STR
12316: PPUSH
12317: CALL_OW 559
// end ; end ;
12321: LD_VAR 0 7
12325: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12326: LD_INT 0
12328: PPUSH
// streamModeActive := false ;
12329: LD_ADDR_EXP 15
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// normalCounter := 36 ;
12337: LD_ADDR_EXP 16
12341: PUSH
12342: LD_INT 36
12344: ST_TO_ADDR
// hardcoreCounter := 18 ;
12345: LD_ADDR_EXP 17
12349: PUSH
12350: LD_INT 18
12352: ST_TO_ADDR
// sRocket := false ;
12353: LD_ADDR_EXP 20
12357: PUSH
12358: LD_INT 0
12360: ST_TO_ADDR
// sSpeed := false ;
12361: LD_ADDR_EXP 19
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// sEngine := false ;
12369: LD_ADDR_EXP 21
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// sSpec := false ;
12377: LD_ADDR_EXP 18
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// sLevel := false ;
12385: LD_ADDR_EXP 22
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// sArmoury := false ;
12393: LD_ADDR_EXP 23
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sRadar := false ;
12401: LD_ADDR_EXP 24
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sBunker := false ;
12409: LD_ADDR_EXP 25
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sHack := false ;
12417: LD_ADDR_EXP 26
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sFire := false ;
12425: LD_ADDR_EXP 27
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sRefresh := false ;
12433: LD_ADDR_EXP 28
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sExp := false ;
12441: LD_ADDR_EXP 29
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sDepot := false ;
12449: LD_ADDR_EXP 30
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sFlag := false ;
12457: LD_ADDR_EXP 31
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sKamikadze := false ;
12465: LD_ADDR_EXP 39
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sTroll := false ;
12473: LD_ADDR_EXP 40
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sSlow := false ;
12481: LD_ADDR_EXP 41
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sLack := false ;
12489: LD_ADDR_EXP 42
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sTank := false ;
12497: LD_ADDR_EXP 44
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sRemote := false ;
12505: LD_ADDR_EXP 45
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sPowell := false ;
12513: LD_ADDR_EXP 46
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sTeleport := false ;
12521: LD_ADDR_EXP 49
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sOilTower := false ;
12529: LD_ADDR_EXP 51
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sShovel := false ;
12537: LD_ADDR_EXP 52
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sSheik := false ;
12545: LD_ADDR_EXP 53
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sEarthquake := false ;
12553: LD_ADDR_EXP 55
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sAI := false ;
12561: LD_ADDR_EXP 56
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sCargo := false ;
12569: LD_ADDR_EXP 59
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sDLaser := false ;
12577: LD_ADDR_EXP 60
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sExchange := false ;
12585: LD_ADDR_EXP 61
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sFac := false ;
12593: LD_ADDR_EXP 62
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sPower := false ;
12601: LD_ADDR_EXP 63
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sRandom := false ;
12609: LD_ADDR_EXP 64
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sShield := false ;
12617: LD_ADDR_EXP 65
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sTime := false ;
12625: LD_ADDR_EXP 66
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTools := false ;
12633: LD_ADDR_EXP 67
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sSold := false ;
12641: LD_ADDR_EXP 32
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sDiff := false ;
12649: LD_ADDR_EXP 33
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sFog := false ;
12657: LD_ADDR_EXP 36
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sReset := false ;
12665: LD_ADDR_EXP 37
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sSun := false ;
12673: LD_ADDR_EXP 38
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sTiger := false ;
12681: LD_ADDR_EXP 34
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sBomb := false ;
12689: LD_ADDR_EXP 35
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sWound := false ;
12697: LD_ADDR_EXP 43
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sBetray := false ;
12705: LD_ADDR_EXP 47
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sContamin := false ;
12713: LD_ADDR_EXP 48
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sOil := false ;
12721: LD_ADDR_EXP 50
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sStu := false ;
12729: LD_ADDR_EXP 54
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sBazooka := false ;
12737: LD_ADDR_EXP 57
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sMortar := false ;
12745: LD_ADDR_EXP 58
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sRanger := false ;
12753: LD_ADDR_EXP 68
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sComputer := false ;
12761: LD_ADDR_EXP 69
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// s30 := false ;
12769: LD_ADDR_EXP 70
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// s60 := false ;
12777: LD_ADDR_EXP 71
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// end ;
12785: LD_VAR 0 1
12789: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
// result := [ ] ;
12799: LD_ADDR_VAR 0 2
12803: PUSH
12804: EMPTY
12805: ST_TO_ADDR
// if campaign_id = 1 then
12806: LD_OWVAR 69
12810: PUSH
12811: LD_INT 1
12813: EQUAL
12814: IFFALSE 15980
// begin case mission_number of 1 :
12816: LD_OWVAR 70
12820: PUSH
12821: LD_INT 1
12823: DOUBLE
12824: EQUAL
12825: IFTRUE 12829
12827: GO 12905
12829: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 4
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: LD_INT 12
12846: PUSH
12847: LD_INT 15
12849: PUSH
12850: LD_INT 16
12852: PUSH
12853: LD_INT 22
12855: PUSH
12856: LD_INT 23
12858: PUSH
12859: LD_INT 26
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 101
12875: PUSH
12876: LD_INT 102
12878: PUSH
12879: LD_INT 106
12881: PUSH
12882: LD_INT 116
12884: PUSH
12885: LD_INT 117
12887: PUSH
12888: LD_INT 118
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: ST_TO_ADDR
12903: GO 15978
12905: LD_INT 2
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 12997
12913: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 4
12924: PUSH
12925: LD_INT 11
12927: PUSH
12928: LD_INT 12
12930: PUSH
12931: LD_INT 15
12933: PUSH
12934: LD_INT 16
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 26
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 101
12959: PUSH
12960: LD_INT 102
12962: PUSH
12963: LD_INT 105
12965: PUSH
12966: LD_INT 106
12968: PUSH
12969: LD_INT 108
12971: PUSH
12972: LD_INT 116
12974: PUSH
12975: LD_INT 117
12977: PUSH
12978: LD_INT 118
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: ST_TO_ADDR
12995: GO 15978
12997: LD_INT 3
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13093
13005: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_INT 2
13013: PUSH
13014: LD_INT 4
13016: PUSH
13017: LD_INT 5
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_INT 26
13037: PUSH
13038: LD_INT 36
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 101
13055: PUSH
13056: LD_INT 102
13058: PUSH
13059: LD_INT 105
13061: PUSH
13062: LD_INT 106
13064: PUSH
13065: LD_INT 108
13067: PUSH
13068: LD_INT 116
13070: PUSH
13071: LD_INT 117
13073: PUSH
13074: LD_INT 118
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 15978
13093: LD_INT 4
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13197
13101: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13102: LD_ADDR_VAR 0 2
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 8
13118: PUSH
13119: LD_INT 11
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: LD_INT 15
13127: PUSH
13128: LD_INT 16
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 26
13139: PUSH
13140: LD_INT 36
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 101
13159: PUSH
13160: LD_INT 102
13162: PUSH
13163: LD_INT 105
13165: PUSH
13166: LD_INT 106
13168: PUSH
13169: LD_INT 108
13171: PUSH
13172: LD_INT 116
13174: PUSH
13175: LD_INT 117
13177: PUSH
13178: LD_INT 118
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 15978
13197: LD_INT 5
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13317
13205: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 11
13228: PUSH
13229: LD_INT 12
13231: PUSH
13232: LD_INT 15
13234: PUSH
13235: LD_INT 16
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_INT 23
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 26
13249: PUSH
13250: LD_INT 36
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 101
13271: PUSH
13272: LD_INT 102
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 109
13286: PUSH
13287: LD_INT 112
13289: PUSH
13290: LD_INT 116
13292: PUSH
13293: LD_INT 117
13295: PUSH
13296: LD_INT 118
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 15978
13317: LD_INT 6
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13457
13325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: LD_INT 4
13336: PUSH
13337: LD_INT 5
13339: PUSH
13340: LD_INT 6
13342: PUSH
13343: LD_INT 8
13345: PUSH
13346: LD_INT 11
13348: PUSH
13349: LD_INT 12
13351: PUSH
13352: LD_INT 15
13354: PUSH
13355: LD_INT 16
13357: PUSH
13358: LD_INT 20
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_INT 23
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 26
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 31
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 36
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 109
13426: PUSH
13427: LD_INT 112
13429: PUSH
13430: LD_INT 116
13432: PUSH
13433: LD_INT 117
13435: PUSH
13436: LD_INT 118
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 15978
13457: LD_INT 7
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13577
13465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13466: LD_ADDR_VAR 0 2
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: LD_INT 7
13482: PUSH
13483: LD_INT 11
13485: PUSH
13486: LD_INT 12
13488: PUSH
13489: LD_INT 15
13491: PUSH
13492: LD_INT 16
13494: PUSH
13495: LD_INT 20
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 23
13506: PUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 101
13531: PUSH
13532: LD_INT 102
13534: PUSH
13535: LD_INT 103
13537: PUSH
13538: LD_INT 105
13540: PUSH
13541: LD_INT 106
13543: PUSH
13544: LD_INT 108
13546: PUSH
13547: LD_INT 112
13549: PUSH
13550: LD_INT 116
13552: PUSH
13553: LD_INT 117
13555: PUSH
13556: LD_INT 118
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: ST_TO_ADDR
13575: GO 15978
13577: LD_INT 8
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13725
13585: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: LD_INT 6
13602: PUSH
13603: LD_INT 7
13605: PUSH
13606: LD_INT 8
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: LD_INT 15
13617: PUSH
13618: LD_INT 16
13620: PUSH
13621: LD_INT 20
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_INT 23
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 26
13638: PUSH
13639: LD_INT 30
13641: PUSH
13642: LD_INT 31
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: LD_INT 36
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 103
13681: PUSH
13682: LD_INT 105
13684: PUSH
13685: LD_INT 106
13687: PUSH
13688: LD_INT 108
13690: PUSH
13691: LD_INT 109
13693: PUSH
13694: LD_INT 112
13696: PUSH
13697: LD_INT 116
13699: PUSH
13700: LD_INT 117
13702: PUSH
13703: LD_INT 118
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: ST_TO_ADDR
13723: GO 15978
13725: LD_INT 9
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13881
13733: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13734: LD_ADDR_VAR 0 2
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: LD_INT 4
13744: PUSH
13745: LD_INT 5
13747: PUSH
13748: LD_INT 6
13750: PUSH
13751: LD_INT 7
13753: PUSH
13754: LD_INT 8
13756: PUSH
13757: LD_INT 11
13759: PUSH
13760: LD_INT 12
13762: PUSH
13763: LD_INT 15
13765: PUSH
13766: LD_INT 16
13768: PUSH
13769: LD_INT 20
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_INT 23
13780: PUSH
13781: LD_INT 25
13783: PUSH
13784: LD_INT 26
13786: PUSH
13787: LD_INT 28
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 31
13795: PUSH
13796: LD_INT 32
13798: PUSH
13799: LD_INT 36
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 101
13827: PUSH
13828: LD_INT 102
13830: PUSH
13831: LD_INT 103
13833: PUSH
13834: LD_INT 105
13836: PUSH
13837: LD_INT 106
13839: PUSH
13840: LD_INT 108
13842: PUSH
13843: LD_INT 109
13845: PUSH
13846: LD_INT 112
13848: PUSH
13849: LD_INT 114
13851: PUSH
13852: LD_INT 116
13854: PUSH
13855: LD_INT 117
13857: PUSH
13858: LD_INT 118
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 15978
13881: LD_INT 10
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 14085
13889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13890: LD_ADDR_VAR 0 2
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 4
13900: PUSH
13901: LD_INT 5
13903: PUSH
13904: LD_INT 6
13906: PUSH
13907: LD_INT 7
13909: PUSH
13910: LD_INT 8
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: LD_INT 10
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 13
13927: PUSH
13928: LD_INT 14
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 16
13936: PUSH
13937: LD_INT 17
13939: PUSH
13940: LD_INT 18
13942: PUSH
13943: LD_INT 19
13945: PUSH
13946: LD_INT 20
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 22
13954: PUSH
13955: LD_INT 23
13957: PUSH
13958: LD_INT 24
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 26
13966: PUSH
13967: LD_INT 28
13969: PUSH
13970: LD_INT 30
13972: PUSH
13973: LD_INT 31
13975: PUSH
13976: LD_INT 32
13978: PUSH
13979: LD_INT 36
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 103
14021: PUSH
14022: LD_INT 104
14024: PUSH
14025: LD_INT 105
14027: PUSH
14028: LD_INT 106
14030: PUSH
14031: LD_INT 107
14033: PUSH
14034: LD_INT 108
14036: PUSH
14037: LD_INT 109
14039: PUSH
14040: LD_INT 110
14042: PUSH
14043: LD_INT 111
14045: PUSH
14046: LD_INT 112
14048: PUSH
14049: LD_INT 114
14051: PUSH
14052: LD_INT 116
14054: PUSH
14055: LD_INT 117
14057: PUSH
14058: LD_INT 118
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: ST_TO_ADDR
14083: GO 15978
14085: LD_INT 11
14087: DOUBLE
14088: EQUAL
14089: IFTRUE 14093
14091: GO 14297
14093: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 4
14107: PUSH
14108: LD_INT 5
14110: PUSH
14111: LD_INT 6
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 8
14119: PUSH
14120: LD_INT 9
14122: PUSH
14123: LD_INT 10
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 13
14134: PUSH
14135: LD_INT 14
14137: PUSH
14138: LD_INT 15
14140: PUSH
14141: LD_INT 16
14143: PUSH
14144: LD_INT 17
14146: PUSH
14147: LD_INT 18
14149: PUSH
14150: LD_INT 19
14152: PUSH
14153: LD_INT 20
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 23
14164: PUSH
14165: LD_INT 24
14167: PUSH
14168: LD_INT 25
14170: PUSH
14171: LD_INT 26
14173: PUSH
14174: LD_INT 28
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 31
14182: PUSH
14183: LD_INT 32
14185: PUSH
14186: LD_INT 34
14188: PUSH
14189: LD_INT 36
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 101
14227: PUSH
14228: LD_INT 102
14230: PUSH
14231: LD_INT 103
14233: PUSH
14234: LD_INT 104
14236: PUSH
14237: LD_INT 105
14239: PUSH
14240: LD_INT 106
14242: PUSH
14243: LD_INT 107
14245: PUSH
14246: LD_INT 108
14248: PUSH
14249: LD_INT 109
14251: PUSH
14252: LD_INT 110
14254: PUSH
14255: LD_INT 111
14257: PUSH
14258: LD_INT 112
14260: PUSH
14261: LD_INT 114
14263: PUSH
14264: LD_INT 116
14266: PUSH
14267: LD_INT 117
14269: PUSH
14270: LD_INT 118
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: ST_TO_ADDR
14295: GO 15978
14297: LD_INT 12
14299: DOUBLE
14300: EQUAL
14301: IFTRUE 14305
14303: GO 14525
14305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14306: LD_ADDR_VAR 0 2
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: LD_INT 4
14322: PUSH
14323: LD_INT 5
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: LD_INT 7
14331: PUSH
14332: LD_INT 8
14334: PUSH
14335: LD_INT 9
14337: PUSH
14338: LD_INT 10
14340: PUSH
14341: LD_INT 11
14343: PUSH
14344: LD_INT 12
14346: PUSH
14347: LD_INT 13
14349: PUSH
14350: LD_INT 14
14352: PUSH
14353: LD_INT 15
14355: PUSH
14356: LD_INT 16
14358: PUSH
14359: LD_INT 17
14361: PUSH
14362: LD_INT 18
14364: PUSH
14365: LD_INT 19
14367: PUSH
14368: LD_INT 20
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_INT 23
14379: PUSH
14380: LD_INT 24
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 26
14388: PUSH
14389: LD_INT 27
14391: PUSH
14392: LD_INT 28
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 31
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: LD_INT 33
14406: PUSH
14407: LD_INT 34
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 101
14451: PUSH
14452: LD_INT 102
14454: PUSH
14455: LD_INT 103
14457: PUSH
14458: LD_INT 104
14460: PUSH
14461: LD_INT 105
14463: PUSH
14464: LD_INT 106
14466: PUSH
14467: LD_INT 107
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 109
14475: PUSH
14476: LD_INT 110
14478: PUSH
14479: LD_INT 111
14481: PUSH
14482: LD_INT 112
14484: PUSH
14485: LD_INT 113
14487: PUSH
14488: LD_INT 114
14490: PUSH
14491: LD_INT 116
14493: PUSH
14494: LD_INT 117
14496: PUSH
14497: LD_INT 118
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 15978
14525: LD_INT 13
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14741
14533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14534: LD_ADDR_VAR 0 2
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: LD_INT 3
14547: PUSH
14548: LD_INT 4
14550: PUSH
14551: LD_INT 5
14553: PUSH
14554: LD_INT 8
14556: PUSH
14557: LD_INT 9
14559: PUSH
14560: LD_INT 10
14562: PUSH
14563: LD_INT 11
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 14
14571: PUSH
14572: LD_INT 15
14574: PUSH
14575: LD_INT 16
14577: PUSH
14578: LD_INT 17
14580: PUSH
14581: LD_INT 18
14583: PUSH
14584: LD_INT 19
14586: PUSH
14587: LD_INT 20
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 22
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 24
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 26
14607: PUSH
14608: LD_INT 27
14610: PUSH
14611: LD_INT 28
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: LD_INT 32
14622: PUSH
14623: LD_INT 33
14625: PUSH
14626: LD_INT 34
14628: PUSH
14629: LD_INT 36
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 101
14667: PUSH
14668: LD_INT 102
14670: PUSH
14671: LD_INT 103
14673: PUSH
14674: LD_INT 104
14676: PUSH
14677: LD_INT 105
14679: PUSH
14680: LD_INT 106
14682: PUSH
14683: LD_INT 107
14685: PUSH
14686: LD_INT 108
14688: PUSH
14689: LD_INT 109
14691: PUSH
14692: LD_INT 110
14694: PUSH
14695: LD_INT 111
14697: PUSH
14698: LD_INT 112
14700: PUSH
14701: LD_INT 113
14703: PUSH
14704: LD_INT 114
14706: PUSH
14707: LD_INT 116
14709: PUSH
14710: LD_INT 117
14712: PUSH
14713: LD_INT 118
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 15978
14741: LD_INT 14
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14973
14749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 3
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 7
14775: PUSH
14776: LD_INT 8
14778: PUSH
14779: LD_INT 9
14781: PUSH
14782: LD_INT 10
14784: PUSH
14785: LD_INT 11
14787: PUSH
14788: LD_INT 12
14790: PUSH
14791: LD_INT 13
14793: PUSH
14794: LD_INT 14
14796: PUSH
14797: LD_INT 15
14799: PUSH
14800: LD_INT 16
14802: PUSH
14803: LD_INT 17
14805: PUSH
14806: LD_INT 18
14808: PUSH
14809: LD_INT 19
14811: PUSH
14812: LD_INT 20
14814: PUSH
14815: LD_INT 21
14817: PUSH
14818: LD_INT 22
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 24
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 26
14832: PUSH
14833: LD_INT 27
14835: PUSH
14836: LD_INT 28
14838: PUSH
14839: LD_INT 29
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 31
14847: PUSH
14848: LD_INT 32
14850: PUSH
14851: LD_INT 33
14853: PUSH
14854: LD_INT 34
14856: PUSH
14857: LD_INT 36
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 101
14899: PUSH
14900: LD_INT 102
14902: PUSH
14903: LD_INT 103
14905: PUSH
14906: LD_INT 104
14908: PUSH
14909: LD_INT 105
14911: PUSH
14912: LD_INT 106
14914: PUSH
14915: LD_INT 107
14917: PUSH
14918: LD_INT 108
14920: PUSH
14921: LD_INT 109
14923: PUSH
14924: LD_INT 110
14926: PUSH
14927: LD_INT 111
14929: PUSH
14930: LD_INT 112
14932: PUSH
14933: LD_INT 113
14935: PUSH
14936: LD_INT 114
14938: PUSH
14939: LD_INT 116
14941: PUSH
14942: LD_INT 117
14944: PUSH
14945: LD_INT 118
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: ST_TO_ADDR
14971: GO 15978
14973: LD_INT 15
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15205
14981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 5
15001: PUSH
15002: LD_INT 6
15004: PUSH
15005: LD_INT 7
15007: PUSH
15008: LD_INT 8
15010: PUSH
15011: LD_INT 9
15013: PUSH
15014: LD_INT 10
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 12
15022: PUSH
15023: LD_INT 13
15025: PUSH
15026: LD_INT 14
15028: PUSH
15029: LD_INT 15
15031: PUSH
15032: LD_INT 16
15034: PUSH
15035: LD_INT 17
15037: PUSH
15038: LD_INT 18
15040: PUSH
15041: LD_INT 19
15043: PUSH
15044: LD_INT 20
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 23
15055: PUSH
15056: LD_INT 24
15058: PUSH
15059: LD_INT 25
15061: PUSH
15062: LD_INT 26
15064: PUSH
15065: LD_INT 27
15067: PUSH
15068: LD_INT 28
15070: PUSH
15071: LD_INT 29
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 31
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: LD_INT 33
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: LD_INT 36
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 101
15131: PUSH
15132: LD_INT 102
15134: PUSH
15135: LD_INT 103
15137: PUSH
15138: LD_INT 104
15140: PUSH
15141: LD_INT 105
15143: PUSH
15144: LD_INT 106
15146: PUSH
15147: LD_INT 107
15149: PUSH
15150: LD_INT 108
15152: PUSH
15153: LD_INT 109
15155: PUSH
15156: LD_INT 110
15158: PUSH
15159: LD_INT 111
15161: PUSH
15162: LD_INT 112
15164: PUSH
15165: LD_INT 113
15167: PUSH
15168: LD_INT 114
15170: PUSH
15171: LD_INT 116
15173: PUSH
15174: LD_INT 117
15176: PUSH
15177: LD_INT 118
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: ST_TO_ADDR
15203: GO 15978
15205: LD_INT 16
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15349
15213: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: LD_INT 4
15224: PUSH
15225: LD_INT 5
15227: PUSH
15228: LD_INT 7
15230: PUSH
15231: LD_INT 11
15233: PUSH
15234: LD_INT 12
15236: PUSH
15237: LD_INT 15
15239: PUSH
15240: LD_INT 16
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_INT 23
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 26
15260: PUSH
15261: LD_INT 30
15263: PUSH
15264: LD_INT 31
15266: PUSH
15267: LD_INT 32
15269: PUSH
15270: LD_INT 33
15272: PUSH
15273: LD_INT 34
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 101
15299: PUSH
15300: LD_INT 102
15302: PUSH
15303: LD_INT 103
15305: PUSH
15306: LD_INT 106
15308: PUSH
15309: LD_INT 108
15311: PUSH
15312: LD_INT 112
15314: PUSH
15315: LD_INT 113
15317: PUSH
15318: LD_INT 114
15320: PUSH
15321: LD_INT 116
15323: PUSH
15324: LD_INT 117
15326: PUSH
15327: LD_INT 118
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: ST_TO_ADDR
15347: GO 15978
15349: LD_INT 17
15351: DOUBLE
15352: EQUAL
15353: IFTRUE 15357
15355: GO 15581
15357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 3
15371: PUSH
15372: LD_INT 4
15374: PUSH
15375: LD_INT 5
15377: PUSH
15378: LD_INT 6
15380: PUSH
15381: LD_INT 7
15383: PUSH
15384: LD_INT 8
15386: PUSH
15387: LD_INT 9
15389: PUSH
15390: LD_INT 10
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 12
15398: PUSH
15399: LD_INT 13
15401: PUSH
15402: LD_INT 14
15404: PUSH
15405: LD_INT 15
15407: PUSH
15408: LD_INT 16
15410: PUSH
15411: LD_INT 17
15413: PUSH
15414: LD_INT 18
15416: PUSH
15417: LD_INT 19
15419: PUSH
15420: LD_INT 20
15422: PUSH
15423: LD_INT 21
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 23
15431: PUSH
15432: LD_INT 24
15434: PUSH
15435: LD_INT 25
15437: PUSH
15438: LD_INT 26
15440: PUSH
15441: LD_INT 27
15443: PUSH
15444: LD_INT 28
15446: PUSH
15447: LD_INT 29
15449: PUSH
15450: LD_INT 30
15452: PUSH
15453: LD_INT 31
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: LD_INT 33
15461: PUSH
15462: LD_INT 34
15464: PUSH
15465: LD_INT 36
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 101
15507: PUSH
15508: LD_INT 102
15510: PUSH
15511: LD_INT 103
15513: PUSH
15514: LD_INT 104
15516: PUSH
15517: LD_INT 105
15519: PUSH
15520: LD_INT 106
15522: PUSH
15523: LD_INT 107
15525: PUSH
15526: LD_INT 108
15528: PUSH
15529: LD_INT 109
15531: PUSH
15532: LD_INT 110
15534: PUSH
15535: LD_INT 111
15537: PUSH
15538: LD_INT 112
15540: PUSH
15541: LD_INT 113
15543: PUSH
15544: LD_INT 114
15546: PUSH
15547: LD_INT 116
15549: PUSH
15550: LD_INT 117
15552: PUSH
15553: LD_INT 118
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15978
15581: LD_INT 18
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15737
15589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: LD_INT 5
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: LD_INT 11
15609: PUSH
15610: LD_INT 12
15612: PUSH
15613: LD_INT 15
15615: PUSH
15616: LD_INT 16
15618: PUSH
15619: LD_INT 20
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 26
15636: PUSH
15637: LD_INT 30
15639: PUSH
15640: LD_INT 31
15642: PUSH
15643: LD_INT 32
15645: PUSH
15646: LD_INT 33
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 35
15654: PUSH
15655: LD_INT 36
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 101
15683: PUSH
15684: LD_INT 102
15686: PUSH
15687: LD_INT 103
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: LD_INT 108
15695: PUSH
15696: LD_INT 112
15698: PUSH
15699: LD_INT 113
15701: PUSH
15702: LD_INT 114
15704: PUSH
15705: LD_INT 115
15707: PUSH
15708: LD_INT 116
15710: PUSH
15711: LD_INT 117
15713: PUSH
15714: LD_INT 118
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: ST_TO_ADDR
15735: GO 15978
15737: LD_INT 19
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15977
15745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 3
15759: PUSH
15760: LD_INT 4
15762: PUSH
15763: LD_INT 5
15765: PUSH
15766: LD_INT 6
15768: PUSH
15769: LD_INT 7
15771: PUSH
15772: LD_INT 8
15774: PUSH
15775: LD_INT 9
15777: PUSH
15778: LD_INT 10
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 13
15789: PUSH
15790: LD_INT 14
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: LD_INT 16
15798: PUSH
15799: LD_INT 17
15801: PUSH
15802: LD_INT 18
15804: PUSH
15805: LD_INT 19
15807: PUSH
15808: LD_INT 20
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 24
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 26
15828: PUSH
15829: LD_INT 27
15831: PUSH
15832: LD_INT 28
15834: PUSH
15835: LD_INT 29
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 33
15849: PUSH
15850: LD_INT 34
15852: PUSH
15853: LD_INT 35
15855: PUSH
15856: LD_INT 36
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 101
15899: PUSH
15900: LD_INT 102
15902: PUSH
15903: LD_INT 103
15905: PUSH
15906: LD_INT 104
15908: PUSH
15909: LD_INT 105
15911: PUSH
15912: LD_INT 106
15914: PUSH
15915: LD_INT 107
15917: PUSH
15918: LD_INT 108
15920: PUSH
15921: LD_INT 109
15923: PUSH
15924: LD_INT 110
15926: PUSH
15927: LD_INT 111
15929: PUSH
15930: LD_INT 112
15932: PUSH
15933: LD_INT 113
15935: PUSH
15936: LD_INT 114
15938: PUSH
15939: LD_INT 115
15941: PUSH
15942: LD_INT 116
15944: PUSH
15945: LD_INT 117
15947: PUSH
15948: LD_INT 118
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: ST_TO_ADDR
15975: GO 15978
15977: POP
// end else
15978: GO 16209
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: LD_INT 6
16002: PUSH
16003: LD_INT 7
16005: PUSH
16006: LD_INT 8
16008: PUSH
16009: LD_INT 9
16011: PUSH
16012: LD_INT 10
16014: PUSH
16015: LD_INT 11
16017: PUSH
16018: LD_INT 12
16020: PUSH
16021: LD_INT 13
16023: PUSH
16024: LD_INT 14
16026: PUSH
16027: LD_INT 15
16029: PUSH
16030: LD_INT 16
16032: PUSH
16033: LD_INT 17
16035: PUSH
16036: LD_INT 18
16038: PUSH
16039: LD_INT 19
16041: PUSH
16042: LD_INT 20
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_INT 23
16053: PUSH
16054: LD_INT 24
16056: PUSH
16057: LD_INT 25
16059: PUSH
16060: LD_INT 26
16062: PUSH
16063: LD_INT 27
16065: PUSH
16066: LD_INT 28
16068: PUSH
16069: LD_INT 29
16071: PUSH
16072: LD_INT 30
16074: PUSH
16075: LD_INT 31
16077: PUSH
16078: LD_INT 32
16080: PUSH
16081: LD_INT 33
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 35
16089: PUSH
16090: LD_INT 36
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 101
16133: PUSH
16134: LD_INT 102
16136: PUSH
16137: LD_INT 103
16139: PUSH
16140: LD_INT 104
16142: PUSH
16143: LD_INT 105
16145: PUSH
16146: LD_INT 106
16148: PUSH
16149: LD_INT 107
16151: PUSH
16152: LD_INT 108
16154: PUSH
16155: LD_INT 109
16157: PUSH
16158: LD_INT 110
16160: PUSH
16161: LD_INT 111
16163: PUSH
16164: LD_INT 112
16166: PUSH
16167: LD_INT 113
16169: PUSH
16170: LD_INT 114
16172: PUSH
16173: LD_INT 115
16175: PUSH
16176: LD_INT 116
16178: PUSH
16179: LD_INT 117
16181: PUSH
16182: LD_INT 118
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: ST_TO_ADDR
// if result then
16209: LD_VAR 0 2
16213: IFFALSE 16999
// begin normal :=  ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_STRING 
16222: ST_TO_ADDR
// hardcore :=  ;
16223: LD_ADDR_VAR 0 6
16227: PUSH
16228: LD_STRING 
16230: ST_TO_ADDR
// active :=  ;
16231: LD_ADDR_VAR 0 7
16235: PUSH
16236: LD_STRING 
16238: ST_TO_ADDR
// for i = 1 to normalCounter do
16239: LD_ADDR_VAR 0 8
16243: PUSH
16244: DOUBLE
16245: LD_INT 1
16247: DEC
16248: ST_TO_ADDR
16249: LD_EXP 16
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16356
// begin tmp := 0 ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_STRING 0
16264: ST_TO_ADDR
// if result [ 1 ] then
16265: LD_VAR 0 2
16269: PUSH
16270: LD_INT 1
16272: ARRAY
16273: IFFALSE 16338
// if result [ 1 ] [ 1 ] = i then
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PUSH
16288: LD_VAR 0 8
16292: EQUAL
16293: IFFALSE 16338
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_VAR 0 2
16312: PUSH
16313: LD_INT 1
16315: ARRAY
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 3
16324: PPUSH
16325: CALL_OW 1
16329: ST_TO_ADDR
// tmp := 1 ;
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_STRING 1
16337: ST_TO_ADDR
// end ; normal := normal & tmp ;
16338: LD_ADDR_VAR 0 5
16342: PUSH
16343: LD_VAR 0 5
16347: PUSH
16348: LD_VAR 0 3
16352: STR
16353: ST_TO_ADDR
// end ;
16354: GO 16254
16356: POP
16357: POP
// for i = 1 to hardcoreCounter do
16358: LD_ADDR_VAR 0 8
16362: PUSH
16363: DOUBLE
16364: LD_INT 1
16366: DEC
16367: ST_TO_ADDR
16368: LD_EXP 17
16372: PUSH
16373: FOR_TO
16374: IFFALSE 16479
// begin tmp := 0 ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_STRING 0
16383: ST_TO_ADDR
// if result [ 2 ] then
16384: LD_VAR 0 2
16388: PUSH
16389: LD_INT 2
16391: ARRAY
16392: IFFALSE 16461
// if result [ 2 ] [ 1 ] = 100 + i then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 2
16401: ARRAY
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PUSH
16407: LD_INT 100
16409: PUSH
16410: LD_VAR 0 8
16414: PLUS
16415: EQUAL
16416: IFFALSE 16461
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16418: LD_ADDR_VAR 0 2
16422: PUSH
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_VAR 0 2
16435: PUSH
16436: LD_INT 2
16438: ARRAY
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 3
16447: PPUSH
16448: CALL_OW 1
16452: ST_TO_ADDR
// tmp := 1 ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_STRING 1
16460: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16461: LD_ADDR_VAR 0 6
16465: PUSH
16466: LD_VAR 0 6
16470: PUSH
16471: LD_VAR 0 3
16475: STR
16476: ST_TO_ADDR
// end ;
16477: GO 16373
16479: POP
16480: POP
// if isGameLoad then
16481: LD_VAR 0 1
16485: IFFALSE 16960
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: LD_EXP 20
16496: PUSH
16497: LD_EXP 19
16501: PUSH
16502: LD_EXP 21
16506: PUSH
16507: LD_EXP 18
16511: PUSH
16512: LD_EXP 22
16516: PUSH
16517: LD_EXP 23
16521: PUSH
16522: LD_EXP 24
16526: PUSH
16527: LD_EXP 25
16531: PUSH
16532: LD_EXP 26
16536: PUSH
16537: LD_EXP 27
16541: PUSH
16542: LD_EXP 28
16546: PUSH
16547: LD_EXP 29
16551: PUSH
16552: LD_EXP 30
16556: PUSH
16557: LD_EXP 31
16561: PUSH
16562: LD_EXP 39
16566: PUSH
16567: LD_EXP 40
16571: PUSH
16572: LD_EXP 41
16576: PUSH
16577: LD_EXP 42
16581: PUSH
16582: LD_EXP 44
16586: PUSH
16587: LD_EXP 45
16591: PUSH
16592: LD_EXP 46
16596: PUSH
16597: LD_EXP 49
16601: PUSH
16602: LD_EXP 51
16606: PUSH
16607: LD_EXP 52
16611: PUSH
16612: LD_EXP 53
16616: PUSH
16617: LD_EXP 55
16621: PUSH
16622: LD_EXP 56
16626: PUSH
16627: LD_EXP 59
16631: PUSH
16632: LD_EXP 60
16636: PUSH
16637: LD_EXP 61
16641: PUSH
16642: LD_EXP 62
16646: PUSH
16647: LD_EXP 63
16651: PUSH
16652: LD_EXP 64
16656: PUSH
16657: LD_EXP 65
16661: PUSH
16662: LD_EXP 66
16666: PUSH
16667: LD_EXP 67
16671: PUSH
16672: LD_EXP 32
16676: PUSH
16677: LD_EXP 33
16681: PUSH
16682: LD_EXP 36
16686: PUSH
16687: LD_EXP 37
16691: PUSH
16692: LD_EXP 38
16696: PUSH
16697: LD_EXP 34
16701: PUSH
16702: LD_EXP 35
16706: PUSH
16707: LD_EXP 43
16711: PUSH
16712: LD_EXP 47
16716: PUSH
16717: LD_EXP 48
16721: PUSH
16722: LD_EXP 50
16726: PUSH
16727: LD_EXP 54
16731: PUSH
16732: LD_EXP 57
16736: PUSH
16737: LD_EXP 58
16741: PUSH
16742: LD_EXP 68
16746: PUSH
16747: LD_EXP 69
16751: PUSH
16752: LD_EXP 70
16756: PUSH
16757: LD_EXP 71
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
// tmp :=  ;
16818: LD_ADDR_VAR 0 3
16822: PUSH
16823: LD_STRING 
16825: ST_TO_ADDR
// for i = 1 to normalCounter do
16826: LD_ADDR_VAR 0 8
16830: PUSH
16831: DOUBLE
16832: LD_INT 1
16834: DEC
16835: ST_TO_ADDR
16836: LD_EXP 16
16840: PUSH
16841: FOR_TO
16842: IFFALSE 16878
// begin if flags [ i ] then
16844: LD_VAR 0 4
16848: PUSH
16849: LD_VAR 0 8
16853: ARRAY
16854: IFFALSE 16876
// tmp := tmp & i & ; ;
16856: LD_ADDR_VAR 0 3
16860: PUSH
16861: LD_VAR 0 3
16865: PUSH
16866: LD_VAR 0 8
16870: STR
16871: PUSH
16872: LD_STRING ;
16874: STR
16875: ST_TO_ADDR
// end ;
16876: GO 16841
16878: POP
16879: POP
// for i = 1 to hardcoreCounter do
16880: LD_ADDR_VAR 0 8
16884: PUSH
16885: DOUBLE
16886: LD_INT 1
16888: DEC
16889: ST_TO_ADDR
16890: LD_EXP 17
16894: PUSH
16895: FOR_TO
16896: IFFALSE 16942
// begin if flags [ normalCounter + i ] then
16898: LD_VAR 0 4
16902: PUSH
16903: LD_EXP 16
16907: PUSH
16908: LD_VAR 0 8
16912: PLUS
16913: ARRAY
16914: IFFALSE 16940
// tmp := tmp & ( 100 + i ) & ; ;
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 100
16928: PUSH
16929: LD_VAR 0 8
16933: PLUS
16934: STR
16935: PUSH
16936: LD_STRING ;
16938: STR
16939: ST_TO_ADDR
// end ;
16940: GO 16895
16942: POP
16943: POP
// if tmp then
16944: LD_VAR 0 3
16948: IFFALSE 16960
// active := tmp ;
16950: LD_ADDR_VAR 0 7
16954: PUSH
16955: LD_VAR 0 3
16959: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16960: LD_STRING getStreamItemsFromMission("
16962: PUSH
16963: LD_VAR 0 5
16967: STR
16968: PUSH
16969: LD_STRING ","
16971: STR
16972: PUSH
16973: LD_VAR 0 6
16977: STR
16978: PUSH
16979: LD_STRING ","
16981: STR
16982: PUSH
16983: LD_VAR 0 7
16987: STR
16988: PUSH
16989: LD_STRING ")
16991: STR
16992: PPUSH
16993: CALL_OW 559
// end else
16997: GO 17006
// ToLua ( getStreamItemsFromMission("","","") ) ;
16999: LD_STRING getStreamItemsFromMission("","","")
17001: PPUSH
17002: CALL_OW 559
// end ;
17006: LD_VAR 0 2
17010: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17011: LD_EXP 15
17015: PUSH
17016: LD_EXP 20
17020: AND
17021: IFFALSE 17145
17023: GO 17025
17025: DISABLE
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin enable ;
17030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_OWVAR 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 34
17053: PUSH
17054: LD_INT 7
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 34
17063: PUSH
17064: LD_INT 45
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 34
17073: PUSH
17074: LD_INT 28
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 34
17083: PUSH
17084: LD_INT 47
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 69
17106: ST_TO_ADDR
// if not tmp then
17107: LD_VAR 0 2
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17145
// for i in tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: LD_VAR 0 2
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17143
// begin SetLives ( i , 0 ) ;
17129: LD_VAR 0 1
17133: PPUSH
17134: LD_INT 0
17136: PPUSH
17137: CALL_OW 234
// end ;
17141: GO 17126
17143: POP
17144: POP
// end ;
17145: PPOPN 2
17147: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17148: LD_EXP 15
17152: PUSH
17153: LD_EXP 21
17157: AND
17158: IFFALSE 17242
17160: GO 17162
17162: DISABLE
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
// begin enable ;
17167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17168: LD_ADDR_VAR 0 2
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_OWVAR 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 32
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// begin SetLives ( i , 0 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 234
// end ;
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17245: LD_EXP 15
17249: PUSH
17250: LD_EXP 18
17254: AND
17255: IFFALSE 17348
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
// begin enable ;
17263: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_OWVAR 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: LD_INT 25
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 25
17296: PUSH
17297: LD_INT 9
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17346
// begin SetClass ( i , 1 ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 336
// end ;
17344: GO 17329
17346: POP
17347: POP
// end ;
17348: PPOPN 1
17350: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17351: LD_EXP 15
17355: PUSH
17356: LD_EXP 19
17360: AND
17361: PUSH
17362: LD_OWVAR 65
17366: PUSH
17367: LD_INT 7
17369: LESS
17370: AND
17371: IFFALSE 17385
17373: GO 17375
17375: DISABLE
// begin enable ;
17376: ENABLE
// game_speed := 7 ;
17377: LD_ADDR_OWVAR 65
17381: PUSH
17382: LD_INT 7
17384: ST_TO_ADDR
// end ;
17385: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17386: LD_EXP 15
17390: PUSH
17391: LD_EXP 22
17395: AND
17396: IFFALSE 17598
17398: GO 17400
17400: DISABLE
17401: LD_INT 0
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_INT 81
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 3
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17598
// if tmp > 5 then
17451: LD_VAR 0 3
17455: PUSH
17456: LD_INT 5
17458: GREATER
17459: IFFALSE 17471
// k := 5 else
17461: LD_ADDR_VAR 0 2
17465: PUSH
17466: LD_INT 5
17468: ST_TO_ADDR
17469: GO 17481
// k := tmp ;
17471: LD_ADDR_VAR 0 2
17475: PUSH
17476: LD_VAR 0 3
17480: ST_TO_ADDR
// for i := 1 to k do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_VAR 0 2
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17596
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17499: LD_VAR 0 3
17503: PUSH
17504: LD_VAR 0 1
17508: ARRAY
17509: PPUSH
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 4
17517: MOD
17518: PUSH
17519: LD_INT 1
17521: PLUS
17522: PPUSH
17523: CALL_OW 259
17527: PUSH
17528: LD_INT 10
17530: LESS
17531: IFFALSE 17594
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17533: LD_VAR 0 3
17537: PUSH
17538: LD_VAR 0 1
17542: ARRAY
17543: PPUSH
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 4
17551: MOD
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_VAR 0 1
17566: ARRAY
17567: PPUSH
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 4
17575: MOD
17576: PUSH
17577: LD_INT 1
17579: PLUS
17580: PPUSH
17581: CALL_OW 259
17585: PUSH
17586: LD_INT 1
17588: PLUS
17589: PPUSH
17590: CALL_OW 237
17594: GO 17496
17596: POP
17597: POP
// end ;
17598: PPOPN 3
17600: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17601: LD_EXP 15
17605: PUSH
17606: LD_EXP 23
17610: AND
17611: IFFALSE 17631
17613: GO 17615
17615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17616: LD_INT 4
17618: PPUSH
17619: LD_OWVAR 2
17623: PPUSH
17624: LD_INT 0
17626: PPUSH
17627: CALL_OW 324
17631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17632: LD_EXP 15
17636: PUSH
17637: LD_EXP 52
17641: AND
17642: IFFALSE 17662
17644: GO 17646
17646: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17647: LD_INT 19
17649: PPUSH
17650: LD_OWVAR 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 324
17662: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17663: LD_EXP 15
17667: PUSH
17668: LD_EXP 24
17672: AND
17673: IFFALSE 17775
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
// begin enable ;
17682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: PUSH
17703: LD_INT 34
17705: PUSH
17706: LD_INT 11
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 34
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17775
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17773
// begin SetLives ( i , 0 ) ;
17759: LD_VAR 0 1
17763: PPUSH
17764: LD_INT 0
17766: PPUSH
17767: CALL_OW 234
// end ;
17771: GO 17756
17773: POP
17774: POP
// end ;
17775: PPOPN 2
17777: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17778: LD_EXP 15
17782: PUSH
17783: LD_EXP 25
17787: AND
17788: IFFALSE 17808
17790: GO 17792
17792: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17793: LD_INT 32
17795: PPUSH
17796: LD_OWVAR 2
17800: PPUSH
17801: LD_INT 0
17803: PPUSH
17804: CALL_OW 324
17808: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17809: LD_EXP 15
17813: PUSH
17814: LD_EXP 26
17818: AND
17819: IFFALSE 18000
17821: GO 17823
17823: DISABLE
17824: LD_INT 0
17826: PPUSH
17827: PPUSH
17828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_OWVAR 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 33
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: ST_TO_ADDR
// if not tmp then
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17874
// exit ;
17872: GO 18000
// side := 0 ;
17874: LD_ADDR_VAR 0 3
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// for i := 1 to 8 do
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: DOUBLE
17888: LD_INT 1
17890: DEC
17891: ST_TO_ADDR
17892: LD_INT 8
17894: PUSH
17895: FOR_TO
17896: IFFALSE 17944
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17898: LD_OWVAR 2
17902: PUSH
17903: LD_VAR 0 1
17907: NONEQUAL
17908: PUSH
17909: LD_OWVAR 2
17913: PPUSH
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 81
17923: PUSH
17924: LD_INT 2
17926: EQUAL
17927: AND
17928: IFFALSE 17942
// begin side := i ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 1
17939: ST_TO_ADDR
// break ;
17940: GO 17944
// end ;
17942: GO 17895
17944: POP
17945: POP
// if not side then
17946: LD_VAR 0 3
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18000
// for i := 1 to tmp do
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: DOUBLE
17961: LD_INT 1
17963: DEC
17964: ST_TO_ADDR
17965: LD_VAR 0 2
17969: PUSH
17970: FOR_TO
17971: IFFALSE 17998
// if Prob ( 60 ) then
17973: LD_INT 60
17975: PPUSH
17976: CALL_OW 13
17980: IFFALSE 17996
// SetSide ( i , side ) ;
17982: LD_VAR 0 1
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: CALL_OW 235
17996: GO 17970
17998: POP
17999: POP
// end ;
18000: PPOPN 3
18002: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18003: LD_EXP 15
18007: PUSH
18008: LD_EXP 28
18012: AND
18013: IFFALSE 18132
18015: GO 18017
18017: DISABLE
18018: LD_INT 0
18020: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18021: LD_ADDR_VAR 0 1
18025: PUSH
18026: LD_INT 22
18028: PUSH
18029: LD_OWVAR 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: LD_INT 23
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18130
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 257
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: LD_INT 4
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: IN
18106: IFFALSE 18128
// SetClass ( un , rand ( 1 , 4 ) ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_INT 4
18118: PPUSH
18119: CALL_OW 12
18123: PPUSH
18124: CALL_OW 336
18128: GO 18075
18130: POP
18131: POP
// end ;
18132: PPOPN 1
18134: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18135: LD_EXP 15
18139: PUSH
18140: LD_EXP 27
18144: AND
18145: IFFALSE 18224
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_INT 22
18160: PUSH
18161: LD_OWVAR 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 69
18188: ST_TO_ADDR
// if not tmp then
18189: LD_VAR 0 1
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18198: LD_VAR 0 1
18202: PUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 12
18215: ARRAY
18216: PPUSH
18217: LD_INT 100
18219: PPUSH
18220: CALL_OW 234
// end ;
18224: PPOPN 1
18226: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18227: LD_EXP 15
18231: PUSH
18232: LD_EXP 29
18236: AND
18237: IFFALSE 18335
18239: GO 18241
18241: DISABLE
18242: LD_INT 0
18244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: LD_INT 22
18252: PUSH
18253: LD_OWVAR 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 21
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 69
18280: ST_TO_ADDR
// if not tmp then
18281: LD_VAR 0 1
18285: NOT
18286: IFFALSE 18290
// exit ;
18288: GO 18335
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: PPUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 12
18307: ARRAY
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 4
18314: PPUSH
18315: CALL_OW 12
18319: PPUSH
18320: LD_INT 3000
18322: PPUSH
18323: LD_INT 9000
18325: PPUSH
18326: CALL_OW 12
18330: PPUSH
18331: CALL_OW 492
// end ;
18335: PPOPN 1
18337: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18338: LD_EXP 15
18342: PUSH
18343: LD_EXP 30
18347: AND
18348: IFFALSE 18368
18350: GO 18352
18352: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18353: LD_INT 1
18355: PPUSH
18356: LD_OWVAR 2
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 324
18368: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18369: LD_EXP 15
18373: PUSH
18374: LD_EXP 31
18378: AND
18379: IFFALSE 18462
18381: GO 18383
18383: DISABLE
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18388: LD_ADDR_VAR 0 2
18392: PUSH
18393: LD_INT 22
18395: PUSH
18396: LD_OWVAR 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 3
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: ST_TO_ADDR
// if not tmp then
18424: LD_VAR 0 2
18428: NOT
18429: IFFALSE 18433
// exit ;
18431: GO 18462
// for i in tmp do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: FOR_IN
18444: IFFALSE 18460
// SetBLevel ( i , 10 ) ;
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_INT 10
18453: PPUSH
18454: CALL_OW 241
18458: GO 18443
18460: POP
18461: POP
// end ;
18462: PPOPN 2
18464: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18465: LD_EXP 15
18469: PUSH
18470: LD_EXP 32
18474: AND
18475: IFFALSE 18586
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 25
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 3
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18586
// un := tmp [ rand ( 1 , tmp ) ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_VAR 0 3
18539: PUSH
18540: LD_INT 1
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: CALL_OW 12
18552: ARRAY
18553: ST_TO_ADDR
// if Crawls ( un ) then
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 318
18563: IFFALSE 18574
// ComWalk ( un ) ;
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 5
18581: PPUSH
18582: CALL_OW 336
// end ;
18586: PPOPN 3
18588: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18589: LD_EXP 15
18593: PUSH
18594: LD_EXP 33
18598: AND
18599: PUSH
18600: LD_OWVAR 67
18604: PUSH
18605: LD_INT 4
18607: LESS
18608: AND
18609: IFFALSE 18628
18611: GO 18613
18613: DISABLE
// begin Difficulty := Difficulty + 1 ;
18614: LD_ADDR_OWVAR 67
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 1
18626: PLUS
18627: ST_TO_ADDR
// end ;
18628: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18629: LD_EXP 15
18633: PUSH
18634: LD_EXP 34
18638: AND
18639: IFFALSE 18742
18641: GO 18643
18643: DISABLE
18644: LD_INT 0
18646: PPUSH
// begin for i := 1 to 5 do
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: DOUBLE
18653: LD_INT 1
18655: DEC
18656: ST_TO_ADDR
18657: LD_INT 5
18659: PUSH
18660: FOR_TO
18661: IFFALSE 18740
// begin uc_nation := nation_nature ;
18663: LD_ADDR_OWVAR 21
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// uc_side := 0 ;
18671: LD_ADDR_OWVAR 20
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18679: LD_ADDR_OWVAR 29
18683: PUSH
18684: LD_INT 12
18686: PUSH
18687: LD_INT 12
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: ST_TO_ADDR
// hc_agressivity := 20 ;
18694: LD_ADDR_OWVAR 35
18698: PUSH
18699: LD_INT 20
18701: ST_TO_ADDR
// hc_class := class_tiger ;
18702: LD_ADDR_OWVAR 28
18706: PUSH
18707: LD_INT 14
18709: ST_TO_ADDR
// hc_gallery :=  ;
18710: LD_ADDR_OWVAR 33
18714: PUSH
18715: LD_STRING 
18717: ST_TO_ADDR
// hc_name :=  ;
18718: LD_ADDR_OWVAR 26
18722: PUSH
18723: LD_STRING 
18725: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18726: CALL_OW 44
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL_OW 51
// end ;
18738: GO 18660
18740: POP
18741: POP
// end ;
18742: PPOPN 1
18744: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18745: LD_EXP 15
18749: PUSH
18750: LD_EXP 35
18754: AND
18755: IFFALSE 18764
18757: GO 18759
18759: DISABLE
// StreamSibBomb ;
18760: CALL 18765 0 0
18764: END
// export function StreamSibBomb ; var i , x , y ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
// result := false ;
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: LD_INT 0
18778: ST_TO_ADDR
// for i := 1 to 16 do
18779: LD_ADDR_VAR 0 2
18783: PUSH
18784: DOUBLE
18785: LD_INT 1
18787: DEC
18788: ST_TO_ADDR
18789: LD_INT 16
18791: PUSH
18792: FOR_TO
18793: IFFALSE 18992
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: LD_INT 10
18802: PUSH
18803: LD_INT 20
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 40
18811: PUSH
18812: LD_INT 50
18814: PUSH
18815: LD_INT 60
18817: PUSH
18818: LD_INT 70
18820: PUSH
18821: LD_INT 80
18823: PUSH
18824: LD_INT 90
18826: PUSH
18827: LD_INT 100
18829: PUSH
18830: LD_INT 110
18832: PUSH
18833: LD_INT 120
18835: PUSH
18836: LD_INT 130
18838: PUSH
18839: LD_INT 140
18841: PUSH
18842: LD_INT 150
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 15
18867: PPUSH
18868: CALL_OW 12
18872: ARRAY
18873: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18874: LD_ADDR_VAR 0 4
18878: PUSH
18879: LD_INT 10
18881: PUSH
18882: LD_INT 20
18884: PUSH
18885: LD_INT 30
18887: PUSH
18888: LD_INT 40
18890: PUSH
18891: LD_INT 50
18893: PUSH
18894: LD_INT 60
18896: PUSH
18897: LD_INT 70
18899: PUSH
18900: LD_INT 80
18902: PUSH
18903: LD_INT 90
18905: PUSH
18906: LD_INT 100
18908: PUSH
18909: LD_INT 110
18911: PUSH
18912: LD_INT 120
18914: PUSH
18915: LD_INT 130
18917: PUSH
18918: LD_INT 140
18920: PUSH
18921: LD_INT 150
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PPUSH
18944: LD_INT 15
18946: PPUSH
18947: CALL_OW 12
18951: ARRAY
18952: ST_TO_ADDR
// if ValidHex ( x , y ) then
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_VAR 0 4
18962: PPUSH
18963: CALL_OW 488
18967: IFFALSE 18990
// begin result := [ x , y ] ;
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 3
18978: PUSH
18979: LD_VAR 0 4
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// break ;
18988: GO 18992
// end ; end ;
18990: GO 18792
18992: POP
18993: POP
// if result then
18994: LD_VAR 0 1
18998: IFFALSE 19058
// begin ToLua ( playSibBomb() ) ;
19000: LD_STRING playSibBomb()
19002: PPUSH
19003: CALL_OW 559
// wait ( 0 0$14 ) ;
19007: LD_INT 490
19009: PPUSH
19010: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19014: LD_VAR 0 1
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: PPUSH
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 2
19030: ARRAY
19031: PPUSH
19032: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: ARRAY
19044: PPUSH
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 2
19052: ARRAY
19053: PPUSH
19054: CALL_OW 429
// end ; end ;
19058: LD_VAR 0 1
19062: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19063: LD_EXP 15
19067: PUSH
19068: LD_EXP 37
19072: AND
19073: IFFALSE 19085
19075: GO 19077
19077: DISABLE
// YouLost (  ) ;
19078: LD_STRING 
19080: PPUSH
19081: CALL_OW 104
19085: END
// every 0 0$1 trigger StreamModeActive and sFog do
19086: LD_EXP 15
19090: PUSH
19091: LD_EXP 36
19095: AND
19096: IFFALSE 19110
19098: GO 19100
19100: DISABLE
// FogOff ( your_side ) ;
19101: LD_OWVAR 2
19105: PPUSH
19106: CALL_OW 344
19110: END
// every 0 0$1 trigger StreamModeActive and sSun do
19111: LD_EXP 15
19115: PUSH
19116: LD_EXP 38
19120: AND
19121: IFFALSE 19149
19123: GO 19125
19125: DISABLE
// begin solar_recharge_percent := 0 ;
19126: LD_ADDR_OWVAR 79
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19134: LD_INT 10500
19136: PPUSH
19137: CALL_OW 67
// solar_recharge_percent := 100 ;
19141: LD_ADDR_OWVAR 79
19145: PUSH
19146: LD_INT 100
19148: ST_TO_ADDR
// end ;
19149: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19150: LD_EXP 15
19154: PUSH
19155: LD_EXP 39
19159: AND
19160: IFFALSE 19399
19162: GO 19164
19164: DISABLE
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
// begin tmp := [ ] ;
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: EMPTY
19176: ST_TO_ADDR
// for i := 1 to 6 do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_INT 6
19189: PUSH
19190: FOR_TO
19191: IFFALSE 19296
// begin uc_nation := nation_nature ;
19193: LD_ADDR_OWVAR 21
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// uc_side := 0 ;
19201: LD_ADDR_OWVAR 20
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19209: LD_ADDR_OWVAR 29
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: ST_TO_ADDR
// hc_agressivity := 20 ;
19224: LD_ADDR_OWVAR 35
19228: PUSH
19229: LD_INT 20
19231: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19232: LD_ADDR_OWVAR 28
19236: PUSH
19237: LD_INT 17
19239: ST_TO_ADDR
// hc_gallery :=  ;
19240: LD_ADDR_OWVAR 33
19244: PUSH
19245: LD_STRING 
19247: ST_TO_ADDR
// hc_name :=  ;
19248: LD_ADDR_OWVAR 26
19252: PUSH
19253: LD_STRING 
19255: ST_TO_ADDR
// un := CreateHuman ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: CALL_OW 44
19265: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL_OW 51
// tmp := tmp ^ un ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_VAR 0 3
19287: PUSH
19288: LD_VAR 0 2
19292: ADD
19293: ST_TO_ADDR
// end ;
19294: GO 19190
19296: POP
19297: POP
// repeat wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// for un in tmp do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_VAR 0 3
19314: PUSH
19315: FOR_IN
19316: IFFALSE 19390
// begin if IsDead ( un ) then
19318: LD_VAR 0 2
19322: PPUSH
19323: CALL_OW 301
19327: IFFALSE 19347
// begin tmp := tmp diff un ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_VAR 0 2
19343: DIFF
19344: ST_TO_ADDR
// continue ;
19345: GO 19315
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19347: LD_VAR 0 2
19351: PPUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: PPUSH
19374: LD_VAR 0 2
19378: PPUSH
19379: CALL_OW 74
19383: PPUSH
19384: CALL_OW 115
// end ;
19388: GO 19315
19390: POP
19391: POP
// until not tmp ;
19392: LD_VAR 0 3
19396: NOT
19397: IFFALSE 19298
// end ;
19399: PPOPN 3
19401: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19402: LD_EXP 15
19406: PUSH
19407: LD_EXP 40
19411: AND
19412: IFFALSE 19466
19414: GO 19416
19416: DISABLE
// begin ToLua ( displayTroll(); ) ;
19417: LD_STRING displayTroll();
19419: PPUSH
19420: CALL_OW 559
// wait ( 3 3$00 ) ;
19424: LD_INT 6300
19426: PPUSH
19427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19431: LD_STRING hideTroll();
19433: PPUSH
19434: CALL_OW 559
// wait ( 1 1$00 ) ;
19438: LD_INT 2100
19440: PPUSH
19441: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19445: LD_STRING displayTroll();
19447: PPUSH
19448: CALL_OW 559
// wait ( 1 1$00 ) ;
19452: LD_INT 2100
19454: PPUSH
19455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19459: LD_STRING hideTroll();
19461: PPUSH
19462: CALL_OW 559
// end ;
19466: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19467: LD_EXP 15
19471: PUSH
19472: LD_EXP 41
19476: AND
19477: IFFALSE 19540
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
// begin p := 0 ;
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_INT 0
19492: ST_TO_ADDR
// repeat game_speed := 1 ;
19493: LD_ADDR_OWVAR 65
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19501: LD_INT 35
19503: PPUSH
19504: CALL_OW 67
// p := p + 1 ;
19508: LD_ADDR_VAR 0 1
19512: PUSH
19513: LD_VAR 0 1
19517: PUSH
19518: LD_INT 1
19520: PLUS
19521: ST_TO_ADDR
// until p >= 60 ;
19522: LD_VAR 0 1
19526: PUSH
19527: LD_INT 60
19529: GREATEREQUAL
19530: IFFALSE 19493
// game_speed := 4 ;
19532: LD_ADDR_OWVAR 65
19536: PUSH
19537: LD_INT 4
19539: ST_TO_ADDR
// end ;
19540: PPOPN 1
19542: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19543: LD_EXP 15
19547: PUSH
19548: LD_EXP 42
19552: AND
19553: IFFALSE 19699
19555: GO 19557
19557: DISABLE
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_INT 22
19569: PUSH
19570: LD_OWVAR 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 30
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: ST_TO_ADDR
// if not depot then
19616: LD_VAR 0 1
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19699
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_VAR 0 1
19634: PUSH
19635: LD_INT 1
19637: PPUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 12
19647: ARRAY
19648: PPUSH
19649: CALL_OW 274
19653: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 2
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19684: LD_VAR 0 2
19688: PPUSH
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 0
19694: PPUSH
19695: CALL_OW 277
// end ;
19699: PPOPN 2
19701: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19702: LD_EXP 15
19706: PUSH
19707: LD_EXP 43
19711: AND
19712: IFFALSE 19809
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_OWVAR 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 21
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 23
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL_OW 69
19773: ST_TO_ADDR
// if not tmp then
19774: LD_VAR 0 1
19778: NOT
19779: IFFALSE 19783
// exit ;
19781: GO 19809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19783: LD_VAR 0 1
19787: PUSH
19788: LD_INT 1
19790: PPUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 12
19800: ARRAY
19801: PPUSH
19802: LD_INT 200
19804: PPUSH
19805: CALL_OW 234
// end ;
19809: PPOPN 1
19811: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19812: LD_EXP 15
19816: PUSH
19817: LD_EXP 44
19821: AND
19822: IFFALSE 19901
19824: GO 19826
19826: DISABLE
19827: LD_INT 0
19829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_OWVAR 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: ST_TO_ADDR
// if not tmp then
19866: LD_VAR 0 1
19870: NOT
19871: IFFALSE 19875
// exit ;
19873: GO 19901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19875: LD_VAR 0 1
19879: PUSH
19880: LD_INT 1
19882: PPUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 12
19892: ARRAY
19893: PPUSH
19894: LD_INT 60
19896: PPUSH
19897: CALL_OW 234
// end ;
19901: PPOPN 1
19903: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19904: LD_EXP 15
19908: PUSH
19909: LD_EXP 45
19913: AND
19914: IFFALSE 20013
19916: GO 19918
19918: DISABLE
19919: LD_INT 0
19921: PPUSH
19922: PPUSH
// begin enable ;
19923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19924: LD_ADDR_VAR 0 1
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_OWVAR 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 61
19943: PUSH
19944: EMPTY
19945: LIST
19946: PUSH
19947: LD_INT 33
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: PPUSH
19962: CALL_OW 69
19966: ST_TO_ADDR
// if not tmp then
19967: LD_VAR 0 1
19971: NOT
19972: IFFALSE 19976
// exit ;
19974: GO 20013
// for i in tmp do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_VAR 0 1
19985: PUSH
19986: FOR_IN
19987: IFFALSE 20011
// if IsControledBy ( i ) then
19989: LD_VAR 0 2
19993: PPUSH
19994: CALL_OW 312
19998: IFFALSE 20009
// ComUnlink ( i ) ;
20000: LD_VAR 0 2
20004: PPUSH
20005: CALL_OW 136
20009: GO 19986
20011: POP
20012: POP
// end ;
20013: PPOPN 2
20015: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20016: LD_EXP 15
20020: PUSH
20021: LD_EXP 46
20025: AND
20026: IFFALSE 20166
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
// begin ToLua ( displayPowell(); ) ;
20035: LD_STRING displayPowell();
20037: PPUSH
20038: CALL_OW 559
// uc_side := 0 ;
20042: LD_ADDR_OWVAR 20
20046: PUSH
20047: LD_INT 0
20049: ST_TO_ADDR
// uc_nation := 2 ;
20050: LD_ADDR_OWVAR 21
20054: PUSH
20055: LD_INT 2
20057: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20058: LD_ADDR_OWVAR 37
20062: PUSH
20063: LD_INT 14
20065: ST_TO_ADDR
// vc_engine := engine_siberite ;
20066: LD_ADDR_OWVAR 39
20070: PUSH
20071: LD_INT 3
20073: ST_TO_ADDR
// vc_control := control_apeman ;
20074: LD_ADDR_OWVAR 38
20078: PUSH
20079: LD_INT 5
20081: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20082: LD_ADDR_OWVAR 40
20086: PUSH
20087: LD_INT 29
20089: ST_TO_ADDR
// un := CreateVehicle ;
20090: LD_ADDR_VAR 0 2
20094: PUSH
20095: CALL_OW 45
20099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20112: LD_INT 35
20114: PPUSH
20115: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20119: LD_VAR 0 2
20123: PPUSH
20124: LD_INT 22
20126: PUSH
20127: LD_OWVAR 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: PPUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 74
20150: PPUSH
20151: CALL_OW 115
// until IsDead ( un ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: CALL_OW 301
20164: IFFALSE 20112
// end ;
20166: PPOPN 2
20168: END
// every 0 0$1 trigger StreamModeActive and sStu do
20169: LD_EXP 15
20173: PUSH
20174: LD_EXP 54
20178: AND
20179: IFFALSE 20195
20181: GO 20183
20183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20184: LD_STRING displayStucuk();
20186: PPUSH
20187: CALL_OW 559
// ResetFog ;
20191: CALL_OW 335
// end ;
20195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20196: LD_EXP 15
20200: PUSH
20201: LD_EXP 47
20205: AND
20206: IFFALSE 20347
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
20214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20215: LD_ADDR_VAR 0 2
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_OWVAR 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 21
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PPUSH
20246: CALL_OW 69
20250: ST_TO_ADDR
// if not tmp then
20251: LD_VAR 0 2
20255: NOT
20256: IFFALSE 20260
// exit ;
20258: GO 20347
// un := tmp [ rand ( 1 , tmp ) ] ;
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: CALL_OW 12
20282: ARRAY
20283: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 0
20291: PPUSH
20292: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_OWVAR 3
20305: PUSH
20306: LD_VAR 0 1
20310: DIFF
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 74
20321: PPUSH
20322: CALL_OW 115
// wait ( 0 0$20 ) ;
20326: LD_INT 700
20328: PPUSH
20329: CALL_OW 67
// SetSide ( un , your_side ) ;
20333: LD_VAR 0 1
20337: PPUSH
20338: LD_OWVAR 2
20342: PPUSH
20343: CALL_OW 235
// end ;
20347: PPOPN 2
20349: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20350: LD_EXP 15
20354: PUSH
20355: LD_EXP 48
20359: AND
20360: IFFALSE 20466
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20368: LD_ADDR_VAR 0 1
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_OWVAR 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 30
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: ST_TO_ADDR
// if not depot then
20422: LD_VAR 0 1
20426: NOT
20427: IFFALSE 20431
// exit ;
20429: GO 20466
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20431: LD_VAR 0 1
20435: PUSH
20436: LD_INT 1
20438: ARRAY
20439: PPUSH
20440: CALL_OW 250
20444: PPUSH
20445: LD_VAR 0 1
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PPUSH
20454: CALL_OW 251
20458: PPUSH
20459: LD_INT 70
20461: PPUSH
20462: CALL_OW 495
// end ;
20466: PPOPN 1
20468: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20469: LD_EXP 15
20473: PUSH
20474: LD_EXP 49
20478: AND
20479: IFFALSE 20690
20481: GO 20483
20483: DISABLE
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
20490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 21
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 69
20526: ST_TO_ADDR
// if not tmp then
20527: LD_VAR 0 5
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20690
// for i in tmp do
20536: LD_ADDR_VAR 0 1
20540: PUSH
20541: LD_VAR 0 5
20545: PUSH
20546: FOR_IN
20547: IFFALSE 20688
// begin d := rand ( 0 , 5 ) ;
20549: LD_ADDR_VAR 0 4
20553: PUSH
20554: LD_INT 0
20556: PPUSH
20557: LD_INT 5
20559: PPUSH
20560: CALL_OW 12
20564: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 250
20579: PPUSH
20580: LD_VAR 0 4
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 12
20590: PPUSH
20591: CALL_OW 12
20595: PPUSH
20596: CALL_OW 272
20600: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20601: LD_ADDR_VAR 0 3
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 251
20615: PPUSH
20616: LD_VAR 0 4
20620: PPUSH
20621: LD_INT 3
20623: PPUSH
20624: LD_INT 12
20626: PPUSH
20627: CALL_OW 12
20631: PPUSH
20632: CALL_OW 273
20636: ST_TO_ADDR
// if ValidHex ( x , y ) then
20637: LD_VAR 0 2
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: CALL_OW 488
20651: IFFALSE 20686
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: LD_INT 6
20673: PPUSH
20674: CALL_OW 12
20678: PPUSH
20679: LD_INT 1
20681: PPUSH
20682: CALL_OW 483
// end ;
20686: GO 20546
20688: POP
20689: POP
// end ;
20690: PPOPN 5
20692: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20693: LD_EXP 15
20697: PUSH
20698: LD_EXP 50
20702: AND
20703: IFFALSE 20797
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
20711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20712: LD_ADDR_VAR 0 2
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_OWVAR 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 32
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: ST_TO_ADDR
// if not tmp then
20759: LD_VAR 0 2
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20797
// for i in tmp do
20768: LD_ADDR_VAR 0 1
20772: PUSH
20773: LD_VAR 0 2
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20795
// SetFuel ( i , 0 ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 0
20788: PPUSH
20789: CALL_OW 240
20793: GO 20778
20795: POP
20796: POP
// end ;
20797: PPOPN 2
20799: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20800: LD_EXP 15
20804: PUSH
20805: LD_EXP 51
20809: AND
20810: IFFALSE 20876
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_OWVAR 2
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 30
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: ST_TO_ADDR
// if not tmp then
20854: LD_VAR 0 1
20858: NOT
20859: IFFALSE 20863
// exit ;
20861: GO 20876
// DestroyUnit ( tmp [ 1 ] ) ;
20863: LD_VAR 0 1
20867: PUSH
20868: LD_INT 1
20870: ARRAY
20871: PPUSH
20872: CALL_OW 65
// end ;
20876: PPOPN 1
20878: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20879: LD_EXP 15
20883: PUSH
20884: LD_EXP 53
20888: AND
20889: IFFALSE 21018
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
// begin uc_side := 0 ;
20897: LD_ADDR_OWVAR 20
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// uc_nation := nation_arabian ;
20905: LD_ADDR_OWVAR 21
20909: PUSH
20910: LD_INT 2
20912: ST_TO_ADDR
// hc_gallery :=  ;
20913: LD_ADDR_OWVAR 33
20917: PUSH
20918: LD_STRING 
20920: ST_TO_ADDR
// hc_name :=  ;
20921: LD_ADDR_OWVAR 26
20925: PUSH
20926: LD_STRING 
20928: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20929: LD_INT 1
20931: PPUSH
20932: LD_INT 11
20934: PPUSH
20935: LD_INT 10
20937: PPUSH
20938: CALL_OW 380
// un := CreateHuman ;
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: CALL_OW 44
20951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20952: LD_VAR 0 1
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20964: LD_INT 35
20966: PPUSH
20967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 22
20978: PUSH
20979: LD_OWVAR 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: PPUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 74
21002: PPUSH
21003: CALL_OW 115
// until IsDead ( un ) ;
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 301
21016: IFFALSE 20964
// end ;
21018: PPOPN 1
21020: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21021: LD_EXP 15
21025: PUSH
21026: LD_EXP 55
21030: AND
21031: IFFALSE 21043
21033: GO 21035
21035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21036: LD_STRING earthquake(getX(game), 0, 32)
21038: PPUSH
21039: CALL_OW 559
21043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21044: LD_EXP 15
21048: PUSH
21049: LD_EXP 56
21053: AND
21054: IFFALSE 21145
21056: GO 21058
21058: DISABLE
21059: LD_INT 0
21061: PPUSH
// begin enable ;
21062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_OWVAR 2
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 33
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 1
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21119: LD_VAR 0 1
21123: PUSH
21124: LD_INT 1
21126: PPUSH
21127: LD_VAR 0 1
21131: PPUSH
21132: CALL_OW 12
21136: ARRAY
21137: PPUSH
21138: LD_INT 1
21140: PPUSH
21141: CALL_OW 234
// end ;
21145: PPOPN 1
21147: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21148: LD_EXP 15
21152: PUSH
21153: LD_EXP 57
21157: AND
21158: IFFALSE 21299
21160: GO 21162
21162: DISABLE
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
21167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: LD_INT 22
21175: PUSH
21176: LD_OWVAR 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 25
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: ST_TO_ADDR
// if not tmp then
21204: LD_VAR 0 3
21208: NOT
21209: IFFALSE 21213
// exit ;
21211: GO 21299
// un := tmp [ rand ( 1 , tmp ) ] ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: CALL_OW 12
21235: ARRAY
21236: ST_TO_ADDR
// if Crawls ( un ) then
21237: LD_VAR 0 2
21241: PPUSH
21242: CALL_OW 318
21246: IFFALSE 21257
// ComWalk ( un ) ;
21248: LD_VAR 0 2
21252: PPUSH
21253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_INT 9
21264: PPUSH
21265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21269: LD_INT 28
21271: PPUSH
21272: LD_OWVAR 2
21276: PPUSH
21277: LD_INT 2
21279: PPUSH
21280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21284: LD_INT 29
21286: PPUSH
21287: LD_OWVAR 2
21291: PPUSH
21292: LD_INT 2
21294: PPUSH
21295: CALL_OW 322
// end ;
21299: PPOPN 3
21301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21302: LD_EXP 15
21306: PUSH
21307: LD_EXP 58
21311: AND
21312: IFFALSE 21423
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 25
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 69
21357: ST_TO_ADDR
// if not tmp then
21358: LD_VAR 0 3
21362: NOT
21363: IFFALSE 21367
// exit ;
21365: GO 21423
// un := tmp [ rand ( 1 , tmp ) ] ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: CALL_OW 12
21389: ARRAY
21390: ST_TO_ADDR
// if Crawls ( un ) then
21391: LD_VAR 0 2
21395: PPUSH
21396: CALL_OW 318
21400: IFFALSE 21411
// ComWalk ( un ) ;
21402: LD_VAR 0 2
21406: PPUSH
21407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 8
21418: PPUSH
21419: CALL_OW 336
// end ;
21423: PPOPN 3
21425: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21426: LD_EXP 15
21430: PUSH
21431: LD_EXP 59
21435: AND
21436: IFFALSE 21580
21438: GO 21440
21440: DISABLE
21441: LD_INT 0
21443: PPUSH
21444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_OWVAR 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 21
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 34
21477: PUSH
21478: LD_INT 12
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 51
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 34
21497: PUSH
21498: LD_INT 32
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: ST_TO_ADDR
// if not tmp then
21521: LD_VAR 0 2
21525: NOT
21526: IFFALSE 21530
// exit ;
21528: GO 21580
// for i in tmp do
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_VAR 0 2
21539: PUSH
21540: FOR_IN
21541: IFFALSE 21578
// if GetCargo ( i , mat_artifact ) = 0 then
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_INT 4
21550: PPUSH
21551: CALL_OW 289
21555: PUSH
21556: LD_INT 0
21558: EQUAL
21559: IFFALSE 21576
// SetCargo ( i , mat_siberit , 100 ) ;
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_INT 3
21568: PPUSH
21569: LD_INT 100
21571: PPUSH
21572: CALL_OW 290
21576: GO 21540
21578: POP
21579: POP
// end ;
21580: PPOPN 2
21582: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21583: LD_EXP 15
21587: PUSH
21588: LD_EXP 60
21592: AND
21593: IFFALSE 21776
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PPUSH
21619: CALL_OW 69
21623: ST_TO_ADDR
// if not tmp then
21624: LD_VAR 0 2
21628: NOT
21629: IFFALSE 21633
// exit ;
21631: GO 21776
// for i := 1 to 2 do
21633: LD_ADDR_VAR 0 1
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_INT 2
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21774
// begin uc_side := your_side ;
21649: LD_ADDR_OWVAR 20
21653: PUSH
21654: LD_OWVAR 2
21658: ST_TO_ADDR
// uc_nation := nation_american ;
21659: LD_ADDR_OWVAR 21
21663: PUSH
21664: LD_INT 1
21666: ST_TO_ADDR
// vc_chassis := us_morphling ;
21667: LD_ADDR_OWVAR 37
21671: PUSH
21672: LD_INT 5
21674: ST_TO_ADDR
// vc_engine := engine_siberite ;
21675: LD_ADDR_OWVAR 39
21679: PUSH
21680: LD_INT 3
21682: ST_TO_ADDR
// vc_control := control_computer ;
21683: LD_ADDR_OWVAR 38
21687: PUSH
21688: LD_INT 3
21690: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21691: LD_ADDR_OWVAR 40
21695: PUSH
21696: LD_INT 10
21698: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21699: LD_VAR 0 2
21703: PUSH
21704: LD_INT 1
21706: ARRAY
21707: PPUSH
21708: CALL_OW 310
21712: NOT
21713: IFFALSE 21760
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21715: CALL_OW 45
21719: PPUSH
21720: LD_VAR 0 2
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PPUSH
21729: CALL_OW 250
21733: PPUSH
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PPUSH
21743: CALL_OW 251
21747: PPUSH
21748: LD_INT 12
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 50
21758: GO 21772
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21760: CALL_OW 45
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: CALL_OW 51
// end ;
21772: GO 21646
21774: POP
21775: POP
// end ;
21776: PPOPN 2
21778: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21779: LD_EXP 15
21783: PUSH
21784: LD_EXP 61
21788: AND
21789: IFFALSE 22011
21791: GO 21793
21793: DISABLE
21794: LD_INT 0
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
21800: PPUSH
21801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21802: LD_ADDR_VAR 0 6
21806: PUSH
21807: LD_INT 22
21809: PUSH
21810: LD_OWVAR 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 3
21831: PUSH
21832: LD_INT 23
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 69
21855: ST_TO_ADDR
// if not tmp then
21856: LD_VAR 0 6
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 22011
// s1 := rand ( 1 , 4 ) ;
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 1
21872: PPUSH
21873: LD_INT 4
21875: PPUSH
21876: CALL_OW 12
21880: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21881: LD_ADDR_VAR 0 4
21885: PUSH
21886: LD_VAR 0 6
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: PPUSH
21895: LD_VAR 0 2
21899: PPUSH
21900: CALL_OW 259
21904: ST_TO_ADDR
// if s1 = 1 then
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: EQUAL
21913: IFFALSE 21933
// s2 := rand ( 2 , 4 ) else
21915: LD_ADDR_VAR 0 3
21919: PUSH
21920: LD_INT 2
21922: PPUSH
21923: LD_INT 4
21925: PPUSH
21926: CALL_OW 12
21930: ST_TO_ADDR
21931: GO 21941
// s2 := 1 ;
21933: LD_ADDR_VAR 0 3
21937: PUSH
21938: LD_INT 1
21940: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21941: LD_ADDR_VAR 0 5
21945: PUSH
21946: LD_VAR 0 6
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: CALL_OW 259
21964: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21965: LD_VAR 0 6
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: LD_VAR 0 2
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21988: LD_VAR 0 6
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: LD_VAR 0 4
22006: PPUSH
22007: CALL_OW 237
// end ;
22011: PPOPN 6
22013: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22014: LD_EXP 15
22018: PUSH
22019: LD_EXP 62
22023: AND
22024: IFFALSE 22103
22026: GO 22028
22028: DISABLE
22029: LD_INT 0
22031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22032: LD_ADDR_VAR 0 1
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_OWVAR 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// if not tmp then
22068: LD_VAR 0 1
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 22103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22077: LD_VAR 0 1
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 12
22094: ARRAY
22095: PPUSH
22096: LD_INT 1
22098: PPUSH
22099: CALL_OW 234
// end ;
22103: PPOPN 1
22105: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22106: LD_EXP 15
22110: PUSH
22111: LD_EXP 63
22115: AND
22116: IFFALSE 22228
22118: GO 22120
22120: DISABLE
22121: LD_INT 0
22123: PPUSH
22124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_OWVAR 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 27
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 30
22157: PUSH
22158: LD_INT 26
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 28
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: ST_TO_ADDR
// if not tmp then
22190: LD_VAR 0 2
22194: NOT
22195: IFFALSE 22199
// exit ;
22197: GO 22228
// for i in tmp do
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_VAR 0 2
22208: PUSH
22209: FOR_IN
22210: IFFALSE 22226
// SetLives ( i , 1 ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 234
22224: GO 22209
22226: POP
22227: POP
// end ;
22228: PPOPN 2
22230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22231: LD_EXP 15
22235: PUSH
22236: LD_EXP 64
22240: AND
22241: IFFALSE 22528
22243: GO 22245
22245: DISABLE
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
22250: PPUSH
// begin i := rand ( 1 , 7 ) ;
22251: LD_ADDR_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PPUSH
22259: LD_INT 7
22261: PPUSH
22262: CALL_OW 12
22266: ST_TO_ADDR
// case i of 1 :
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 1
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22290
22280: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22281: LD_STRING earthquake(getX(game), 0, 32)
22283: PPUSH
22284: CALL_OW 559
22288: GO 22528
22290: LD_INT 2
22292: DOUBLE
22293: EQUAL
22294: IFTRUE 22298
22296: GO 22312
22298: POP
// begin ToLua ( displayStucuk(); ) ;
22299: LD_STRING displayStucuk();
22301: PPUSH
22302: CALL_OW 559
// ResetFog ;
22306: CALL_OW 335
// end ; 3 :
22310: GO 22528
22312: LD_INT 3
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22424
22320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22321: LD_ADDR_VAR 0 2
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_OWVAR 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 25
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 2
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22528
// un := tmp [ rand ( 1 , tmp ) ] ;
22366: LD_ADDR_VAR 0 3
22370: PUSH
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: PPUSH
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 12
22388: ARRAY
22389: ST_TO_ADDR
// if Crawls ( un ) then
22390: LD_VAR 0 3
22394: PPUSH
22395: CALL_OW 318
22399: IFFALSE 22410
// ComWalk ( un ) ;
22401: LD_VAR 0 3
22405: PPUSH
22406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 8
22417: PPUSH
22418: CALL_OW 336
// end ; 4 :
22422: GO 22528
22424: LD_INT 4
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22506
22432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_OWVAR 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 30
22452: PUSH
22453: LD_INT 29
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 69
22468: ST_TO_ADDR
// if not tmp then
22469: LD_VAR 0 2
22473: NOT
22474: IFFALSE 22478
// exit ;
22476: GO 22528
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 1
22485: ARRAY
22486: PPUSH
22487: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22491: LD_VAR 0 2
22495: PUSH
22496: LD_INT 1
22498: ARRAY
22499: PPUSH
22500: CALL_OW 65
// end ; 5 .. 7 :
22504: GO 22528
22506: LD_INT 5
22508: DOUBLE
22509: GREATEREQUAL
22510: IFFALSE 22518
22512: LD_INT 7
22514: DOUBLE
22515: LESSEQUAL
22516: IFTRUE 22520
22518: GO 22527
22520: POP
// StreamSibBomb ; end ;
22521: CALL 18765 0 0
22525: GO 22528
22527: POP
// end ;
22528: PPOPN 3
22530: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22531: LD_EXP 15
22535: PUSH
22536: LD_EXP 65
22540: AND
22541: IFFALSE 22697
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
22550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 81
22558: PUSH
22559: LD_OWVAR 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 21
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 21
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// if not tmp then
22605: LD_VAR 0 2
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22697
// p := 0 ;
22614: LD_ADDR_VAR 0 3
22618: PUSH
22619: LD_INT 0
22621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22622: LD_INT 35
22624: PPUSH
22625: CALL_OW 67
// p := p + 1 ;
22629: LD_ADDR_VAR 0 3
22633: PUSH
22634: LD_VAR 0 3
22638: PUSH
22639: LD_INT 1
22641: PLUS
22642: ST_TO_ADDR
// for i in tmp do
22643: LD_ADDR_VAR 0 1
22647: PUSH
22648: LD_VAR 0 2
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22685
// if GetLives ( i ) < 1000 then
22656: LD_VAR 0 1
22660: PPUSH
22661: CALL_OW 256
22665: PUSH
22666: LD_INT 1000
22668: LESS
22669: IFFALSE 22683
// SetLives ( i , 1000 ) ;
22671: LD_VAR 0 1
22675: PPUSH
22676: LD_INT 1000
22678: PPUSH
22679: CALL_OW 234
22683: GO 22653
22685: POP
22686: POP
// until p > 20 ;
22687: LD_VAR 0 3
22691: PUSH
22692: LD_INT 20
22694: GREATER
22695: IFFALSE 22622
// end ;
22697: PPOPN 3
22699: END
// every 0 0$1 trigger StreamModeActive and sTime do
22700: LD_EXP 15
22704: PUSH
22705: LD_EXP 66
22709: AND
22710: IFFALSE 22745
22712: GO 22714
22714: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22715: LD_INT 28
22717: PPUSH
22718: LD_OWVAR 2
22722: PPUSH
22723: LD_INT 2
22725: PPUSH
22726: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22730: LD_INT 30
22732: PPUSH
22733: LD_OWVAR 2
22737: PPUSH
22738: LD_INT 2
22740: PPUSH
22741: CALL_OW 322
// end ;
22745: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22746: LD_EXP 15
22750: PUSH
22751: LD_EXP 67
22755: AND
22756: IFFALSE 22877
22758: GO 22760
22760: DISABLE
22761: LD_INT 0
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 21
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: LD_INT 23
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PPUSH
22814: CALL_OW 69
22818: ST_TO_ADDR
// if not tmp then
22819: LD_VAR 0 2
22823: NOT
22824: IFFALSE 22828
// exit ;
22826: GO 22877
// for i in tmp do
22828: LD_ADDR_VAR 0 1
22832: PUSH
22833: LD_VAR 0 2
22837: PUSH
22838: FOR_IN
22839: IFFALSE 22875
// begin if Crawls ( i ) then
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 318
22850: IFFALSE 22861
// ComWalk ( i ) ;
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 138
// SetClass ( i , 2 ) ;
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_INT 2
22868: PPUSH
22869: CALL_OW 336
// end ;
22873: GO 22838
22875: POP
22876: POP
// end ;
22877: PPOPN 2
22879: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22880: LD_EXP 15
22884: PUSH
22885: LD_EXP 68
22889: AND
22890: IFFALSE 23178
22892: GO 22894
22894: DISABLE
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
22899: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22900: LD_OWVAR 2
22904: PPUSH
22905: LD_INT 9
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: LD_INT 1
22913: PPUSH
22914: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22918: LD_INT 9
22920: PPUSH
22921: LD_OWVAR 2
22925: PPUSH
22926: CALL_OW 343
// uc_side := 9 ;
22930: LD_ADDR_OWVAR 20
22934: PUSH
22935: LD_INT 9
22937: ST_TO_ADDR
// uc_nation := 2 ;
22938: LD_ADDR_OWVAR 21
22942: PUSH
22943: LD_INT 2
22945: ST_TO_ADDR
// hc_name := Dark Warrior ;
22946: LD_ADDR_OWVAR 26
22950: PUSH
22951: LD_STRING Dark Warrior
22953: ST_TO_ADDR
// hc_gallery :=  ;
22954: LD_ADDR_OWVAR 33
22958: PUSH
22959: LD_STRING 
22961: ST_TO_ADDR
// hc_noskilllimit := true ;
22962: LD_ADDR_OWVAR 76
22966: PUSH
22967: LD_INT 1
22969: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22970: LD_ADDR_OWVAR 31
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 30
22980: PUSH
22981: LD_INT 30
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// un := CreateHuman ;
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: CALL_OW 44
23002: ST_TO_ADDR
// hc_noskilllimit := false ;
23003: LD_ADDR_OWVAR 76
23007: PUSH
23008: LD_INT 0
23010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: CALL_OW 51
// ToLua ( playRanger() ) ;
23023: LD_STRING playRanger()
23025: PPUSH
23026: CALL_OW 559
// p := 0 ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 0
23037: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23038: LD_INT 35
23040: PPUSH
23041: CALL_OW 67
// p := p + 1 ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: LD_INT 1
23057: PLUS
23058: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23059: LD_VAR 0 3
23063: PPUSH
23064: CALL_OW 256
23068: PUSH
23069: LD_INT 1000
23071: LESS
23072: IFFALSE 23086
// SetLives ( un , 1000 ) ;
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_INT 1000
23081: PPUSH
23082: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_INT 81
23093: PUSH
23094: LD_OWVAR 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 91
23105: PUSH
23106: LD_VAR 0 3
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: CALL_OW 74
23137: PPUSH
23138: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23142: LD_VAR 0 2
23146: PUSH
23147: LD_INT 80
23149: GREATER
23150: PUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: CALL_OW 301
23160: OR
23161: IFFALSE 23038
// if un then
23163: LD_VAR 0 3
23167: IFFALSE 23178
// RemoveUnit ( un ) ;
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 64
// end ;
23178: PPOPN 3
23180: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23181: LD_EXP 69
23185: IFFALSE 23301
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
23194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23195: LD_ADDR_VAR 0 2
23199: PUSH
23200: LD_INT 81
23202: PUSH
23203: LD_OWVAR 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PPUSH
23226: CALL_OW 69
23230: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23231: LD_STRING playComputer()
23233: PPUSH
23234: CALL_OW 559
// if not tmp then
23238: LD_VAR 0 2
23242: NOT
23243: IFFALSE 23247
// exit ;
23245: GO 23301
// for i in tmp do
23247: LD_ADDR_VAR 0 1
23251: PUSH
23252: LD_VAR 0 2
23256: PUSH
23257: FOR_IN
23258: IFFALSE 23299
// for j := 1 to 4 do
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_INT 4
23272: PUSH
23273: FOR_TO
23274: IFFALSE 23295
// SetSkill ( i , j , 10 ) ;
23276: LD_VAR 0 1
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: LD_INT 10
23288: PPUSH
23289: CALL_OW 237
23293: GO 23273
23295: POP
23296: POP
23297: GO 23257
23299: POP
23300: POP
// end ;
23301: PPOPN 3
23303: END
// every 0 0$1 trigger s30 do var i , tmp ;
23304: LD_EXP 70
23308: IFFALSE 23377
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_OWVAR 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: ST_TO_ADDR
// if not tmp then
23339: LD_VAR 0 2
23343: NOT
23344: IFFALSE 23348
// exit ;
23346: GO 23377
// for i in tmp do
23348: LD_ADDR_VAR 0 1
23352: PUSH
23353: LD_VAR 0 2
23357: PUSH
23358: FOR_IN
23359: IFFALSE 23375
// SetLives ( i , 300 ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 300
23368: PPUSH
23369: CALL_OW 234
23373: GO 23358
23375: POP
23376: POP
// end ;
23377: PPOPN 2
23379: END
// every 0 0$1 trigger s60 do var i , tmp ;
23380: LD_EXP 71
23384: IFFALSE 23453
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: ST_TO_ADDR
// if not tmp then
23415: LD_VAR 0 2
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23453
// for i in tmp do
23424: LD_ADDR_VAR 0 1
23428: PUSH
23429: LD_VAR 0 2
23433: PUSH
23434: FOR_IN
23435: IFFALSE 23451
// SetLives ( i , 600 ) ;
23437: LD_VAR 0 1
23441: PPUSH
23442: LD_INT 600
23444: PPUSH
23445: CALL_OW 234
23449: GO 23434
23451: POP
23452: POP
// end ;
23453: PPOPN 2
23455: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23456: LD_INT 0
23458: PPUSH
// case cmd of 301 :
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 301
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23504
23472: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23473: LD_VAR 0 6
23477: PPUSH
23478: LD_VAR 0 7
23482: PPUSH
23483: LD_VAR 0 8
23487: PPUSH
23488: LD_VAR 0 4
23492: PPUSH
23493: LD_VAR 0 5
23497: PPUSH
23498: CALL 24713 0 5
23502: GO 23625
23504: LD_INT 302
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23549
23512: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23513: LD_VAR 0 6
23517: PPUSH
23518: LD_VAR 0 7
23522: PPUSH
23523: LD_VAR 0 8
23527: PPUSH
23528: LD_VAR 0 9
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: LD_VAR 0 5
23542: PPUSH
23543: CALL 24804 0 6
23547: GO 23625
23549: LD_INT 303
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23594
23557: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23558: LD_VAR 0 6
23562: PPUSH
23563: LD_VAR 0 7
23567: PPUSH
23568: LD_VAR 0 8
23572: PPUSH
23573: LD_VAR 0 9
23577: PPUSH
23578: LD_VAR 0 4
23582: PPUSH
23583: LD_VAR 0 5
23587: PPUSH
23588: CALL 23630 0 6
23592: GO 23625
23594: LD_INT 304
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23624
23602: POP
// hHackTeleport ( unit , x , y ) ; end ;
23603: LD_VAR 0 2
23607: PPUSH
23608: LD_VAR 0 4
23612: PPUSH
23613: LD_VAR 0 5
23617: PPUSH
23618: CALL 25397 0 3
23622: GO 23625
23624: POP
// end ;
23625: LD_VAR 0 12
23629: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23630: LD_INT 0
23632: PPUSH
23633: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23634: LD_VAR 0 1
23638: PUSH
23639: LD_INT 1
23641: LESS
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: LD_INT 3
23650: GREATER
23651: OR
23652: PUSH
23653: LD_VAR 0 5
23657: PPUSH
23658: LD_VAR 0 6
23662: PPUSH
23663: CALL_OW 428
23667: OR
23668: IFFALSE 23672
// exit ;
23670: GO 24400
// uc_side := your_side ;
23672: LD_ADDR_OWVAR 20
23676: PUSH
23677: LD_OWVAR 2
23681: ST_TO_ADDR
// uc_nation := nation ;
23682: LD_ADDR_OWVAR 21
23686: PUSH
23687: LD_VAR 0 1
23691: ST_TO_ADDR
// bc_level = 1 ;
23692: LD_ADDR_OWVAR 43
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
// case btype of 1 :
23700: LD_VAR 0 2
23704: PUSH
23705: LD_INT 1
23707: DOUBLE
23708: EQUAL
23709: IFTRUE 23713
23711: GO 23724
23713: POP
// bc_type := b_depot ; 2 :
23714: LD_ADDR_OWVAR 42
23718: PUSH
23719: LD_INT 0
23721: ST_TO_ADDR
23722: GO 24344
23724: LD_INT 2
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23743
23732: POP
// bc_type := b_warehouse ; 3 :
23733: LD_ADDR_OWVAR 42
23737: PUSH
23738: LD_INT 1
23740: ST_TO_ADDR
23741: GO 24344
23743: LD_INT 3
23745: DOUBLE
23746: EQUAL
23747: IFTRUE 23751
23749: GO 23762
23751: POP
// bc_type := b_lab ; 4 .. 9 :
23752: LD_ADDR_OWVAR 42
23756: PUSH
23757: LD_INT 6
23759: ST_TO_ADDR
23760: GO 24344
23762: LD_INT 4
23764: DOUBLE
23765: GREATEREQUAL
23766: IFFALSE 23774
23768: LD_INT 9
23770: DOUBLE
23771: LESSEQUAL
23772: IFTRUE 23776
23774: GO 23836
23776: POP
// begin bc_type := b_lab_half ;
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 7
23784: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23785: LD_ADDR_OWVAR 44
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 15
23801: PUSH
23802: LD_INT 14
23804: PUSH
23805: LD_INT 13
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_INT 3
23823: MINUS
23824: ARRAY
23825: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23826: LD_ADDR_OWVAR 45
23830: PUSH
23831: LD_INT 9
23833: ST_TO_ADDR
// end ; 10 .. 13 :
23834: GO 24344
23836: LD_INT 10
23838: DOUBLE
23839: GREATEREQUAL
23840: IFFALSE 23848
23842: LD_INT 13
23844: DOUBLE
23845: LESSEQUAL
23846: IFTRUE 23850
23848: GO 23927
23850: POP
// begin bc_type := b_lab_full ;
23851: LD_ADDR_OWVAR 42
23855: PUSH
23856: LD_INT 8
23858: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23859: LD_ADDR_OWVAR 44
23863: PUSH
23864: LD_INT 10
23866: PUSH
23867: LD_INT 12
23869: PUSH
23870: LD_INT 14
23872: PUSH
23873: LD_INT 13
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: PUSH
23882: LD_VAR 0 2
23886: PUSH
23887: LD_INT 9
23889: MINUS
23890: ARRAY
23891: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23892: LD_ADDR_OWVAR 45
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: LD_INT 15
23902: PUSH
23903: LD_INT 12
23905: PUSH
23906: LD_INT 15
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: LD_VAR 0 2
23919: PUSH
23920: LD_INT 9
23922: MINUS
23923: ARRAY
23924: ST_TO_ADDR
// end ; 14 :
23925: GO 24344
23927: LD_INT 14
23929: DOUBLE
23930: EQUAL
23931: IFTRUE 23935
23933: GO 23946
23935: POP
// bc_type := b_workshop ; 15 :
23936: LD_ADDR_OWVAR 42
23940: PUSH
23941: LD_INT 2
23943: ST_TO_ADDR
23944: GO 24344
23946: LD_INT 15
23948: DOUBLE
23949: EQUAL
23950: IFTRUE 23954
23952: GO 23965
23954: POP
// bc_type := b_factory ; 16 :
23955: LD_ADDR_OWVAR 42
23959: PUSH
23960: LD_INT 3
23962: ST_TO_ADDR
23963: GO 24344
23965: LD_INT 16
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 23984
23973: POP
// bc_type := b_ext_gun ; 17 :
23974: LD_ADDR_OWVAR 42
23978: PUSH
23979: LD_INT 17
23981: ST_TO_ADDR
23982: GO 24344
23984: LD_INT 17
23986: DOUBLE
23987: EQUAL
23988: IFTRUE 23992
23990: GO 24020
23992: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23993: LD_ADDR_OWVAR 42
23997: PUSH
23998: LD_INT 19
24000: PUSH
24001: LD_INT 23
24003: PUSH
24004: LD_INT 19
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_VAR 0 1
24016: ARRAY
24017: ST_TO_ADDR
24018: GO 24344
24020: LD_INT 18
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24039
24028: POP
// bc_type := b_ext_radar ; 19 :
24029: LD_ADDR_OWVAR 42
24033: PUSH
24034: LD_INT 20
24036: ST_TO_ADDR
24037: GO 24344
24039: LD_INT 19
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24058
24047: POP
// bc_type := b_ext_radio ; 20 :
24048: LD_ADDR_OWVAR 42
24052: PUSH
24053: LD_INT 22
24055: ST_TO_ADDR
24056: GO 24344
24058: LD_INT 20
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24077
24066: POP
// bc_type := b_ext_siberium ; 21 :
24067: LD_ADDR_OWVAR 42
24071: PUSH
24072: LD_INT 21
24074: ST_TO_ADDR
24075: GO 24344
24077: LD_INT 21
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24096
24085: POP
// bc_type := b_ext_computer ; 22 :
24086: LD_ADDR_OWVAR 42
24090: PUSH
24091: LD_INT 24
24093: ST_TO_ADDR
24094: GO 24344
24096: LD_INT 22
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24115
24104: POP
// bc_type := b_ext_track ; 23 :
24105: LD_ADDR_OWVAR 42
24109: PUSH
24110: LD_INT 16
24112: ST_TO_ADDR
24113: GO 24344
24115: LD_INT 23
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24134
24123: POP
// bc_type := b_ext_laser ; 24 :
24124: LD_ADDR_OWVAR 42
24128: PUSH
24129: LD_INT 25
24131: ST_TO_ADDR
24132: GO 24344
24134: LD_INT 24
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24153
24142: POP
// bc_type := b_control_tower ; 25 :
24143: LD_ADDR_OWVAR 42
24147: PUSH
24148: LD_INT 36
24150: ST_TO_ADDR
24151: GO 24344
24153: LD_INT 25
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24172
24161: POP
// bc_type := b_breastwork ; 26 :
24162: LD_ADDR_OWVAR 42
24166: PUSH
24167: LD_INT 31
24169: ST_TO_ADDR
24170: GO 24344
24172: LD_INT 26
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24191
24180: POP
// bc_type := b_bunker ; 27 :
24181: LD_ADDR_OWVAR 42
24185: PUSH
24186: LD_INT 32
24188: ST_TO_ADDR
24189: GO 24344
24191: LD_INT 27
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24210
24199: POP
// bc_type := b_turret ; 28 :
24200: LD_ADDR_OWVAR 42
24204: PUSH
24205: LD_INT 33
24207: ST_TO_ADDR
24208: GO 24344
24210: LD_INT 28
24212: DOUBLE
24213: EQUAL
24214: IFTRUE 24218
24216: GO 24229
24218: POP
// bc_type := b_armoury ; 29 :
24219: LD_ADDR_OWVAR 42
24223: PUSH
24224: LD_INT 4
24226: ST_TO_ADDR
24227: GO 24344
24229: LD_INT 29
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24248
24237: POP
// bc_type := b_barracks ; 30 :
24238: LD_ADDR_OWVAR 42
24242: PUSH
24243: LD_INT 5
24245: ST_TO_ADDR
24246: GO 24344
24248: LD_INT 30
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24267
24256: POP
// bc_type := b_solar_power ; 31 :
24257: LD_ADDR_OWVAR 42
24261: PUSH
24262: LD_INT 27
24264: ST_TO_ADDR
24265: GO 24344
24267: LD_INT 31
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24286
24275: POP
// bc_type := b_oil_power ; 32 :
24276: LD_ADDR_OWVAR 42
24280: PUSH
24281: LD_INT 26
24283: ST_TO_ADDR
24284: GO 24344
24286: LD_INT 32
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24305
24294: POP
// bc_type := b_siberite_power ; 33 :
24295: LD_ADDR_OWVAR 42
24299: PUSH
24300: LD_INT 28
24302: ST_TO_ADDR
24303: GO 24344
24305: LD_INT 33
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24324
24313: POP
// bc_type := b_oil_mine ; 34 :
24314: LD_ADDR_OWVAR 42
24318: PUSH
24319: LD_INT 29
24321: ST_TO_ADDR
24322: GO 24344
24324: LD_INT 34
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24343
24332: POP
// bc_type := b_siberite_mine ; end ;
24333: LD_ADDR_OWVAR 42
24337: PUSH
24338: LD_INT 30
24340: ST_TO_ADDR
24341: GO 24344
24343: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24344: LD_ADDR_VAR 0 8
24348: PUSH
24349: LD_VAR 0 5
24353: PPUSH
24354: LD_VAR 0 6
24358: PPUSH
24359: LD_VAR 0 3
24363: PPUSH
24364: CALL_OW 47
24368: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24369: LD_OWVAR 42
24373: PUSH
24374: LD_INT 32
24376: PUSH
24377: LD_INT 33
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: IN
24384: IFFALSE 24400
// PlaceWeaponTurret ( b , weapon ) ;
24386: LD_VAR 0 8
24390: PPUSH
24391: LD_VAR 0 4
24395: PPUSH
24396: CALL_OW 431
// end ;
24400: LD_VAR 0 7
24404: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24411: LD_ADDR_VAR 0 4
24415: PUSH
24416: LD_INT 22
24418: PUSH
24419: LD_OWVAR 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PPUSH
24460: CALL_OW 69
24464: ST_TO_ADDR
// if not tmp then
24465: LD_VAR 0 4
24469: NOT
24470: IFFALSE 24474
// exit ;
24472: GO 24533
// for i in tmp do
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_VAR 0 4
24483: PUSH
24484: FOR_IN
24485: IFFALSE 24531
// for j = 1 to 3 do
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: DOUBLE
24493: LD_INT 1
24495: DEC
24496: ST_TO_ADDR
24497: LD_INT 3
24499: PUSH
24500: FOR_TO
24501: IFFALSE 24527
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: CALL_OW 274
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: LD_INT 99999
24520: PPUSH
24521: CALL_OW 277
24525: GO 24500
24527: POP
24528: POP
24529: GO 24484
24531: POP
24532: POP
// end ;
24533: LD_VAR 0 1
24537: RET
// export function hHackSetLevel10 ; var i , j ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
24542: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PPUSH
24558: CALL_OW 69
24562: PUSH
24563: FOR_IN
24564: IFFALSE 24616
// if IsSelected ( i ) then
24566: LD_VAR 0 2
24570: PPUSH
24571: CALL_OW 306
24575: IFFALSE 24614
// begin for j := 1 to 4 do
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: DOUBLE
24583: LD_INT 1
24585: DEC
24586: ST_TO_ADDR
24587: LD_INT 4
24589: PUSH
24590: FOR_TO
24591: IFFALSE 24612
// SetSkill ( i , j , 10 ) ;
24593: LD_VAR 0 2
24597: PPUSH
24598: LD_VAR 0 3
24602: PPUSH
24603: LD_INT 10
24605: PPUSH
24606: CALL_OW 237
24610: GO 24590
24612: POP
24613: POP
// end ;
24614: GO 24563
24616: POP
24617: POP
// end ;
24618: LD_VAR 0 1
24622: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
24627: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_INT 22
24635: PUSH
24636: LD_OWVAR 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 21
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PPUSH
24659: CALL_OW 69
24663: PUSH
24664: FOR_IN
24665: IFFALSE 24706
// begin for j := 1 to 4 do
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: DOUBLE
24673: LD_INT 1
24675: DEC
24676: ST_TO_ADDR
24677: LD_INT 4
24679: PUSH
24680: FOR_TO
24681: IFFALSE 24702
// SetSkill ( i , j , 10 ) ;
24683: LD_VAR 0 2
24687: PPUSH
24688: LD_VAR 0 3
24692: PPUSH
24693: LD_INT 10
24695: PPUSH
24696: CALL_OW 237
24700: GO 24680
24702: POP
24703: POP
// end ;
24704: GO 24664
24706: POP
24707: POP
// end ;
24708: LD_VAR 0 1
24712: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24713: LD_INT 0
24715: PPUSH
// uc_side := your_side ;
24716: LD_ADDR_OWVAR 20
24720: PUSH
24721: LD_OWVAR 2
24725: ST_TO_ADDR
// uc_nation := nation ;
24726: LD_ADDR_OWVAR 21
24730: PUSH
24731: LD_VAR 0 1
24735: ST_TO_ADDR
// InitHc ;
24736: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24740: LD_INT 0
24742: PPUSH
24743: LD_VAR 0 2
24747: PPUSH
24748: LD_VAR 0 3
24752: PPUSH
24753: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24757: LD_VAR 0 4
24761: PPUSH
24762: LD_VAR 0 5
24766: PPUSH
24767: CALL_OW 428
24771: PUSH
24772: LD_INT 0
24774: EQUAL
24775: IFFALSE 24799
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24777: CALL_OW 44
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: LD_VAR 0 5
24791: PPUSH
24792: LD_INT 1
24794: PPUSH
24795: CALL_OW 48
// end ;
24799: LD_VAR 0 6
24803: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24804: LD_INT 0
24806: PPUSH
24807: PPUSH
// uc_side := your_side ;
24808: LD_ADDR_OWVAR 20
24812: PUSH
24813: LD_OWVAR 2
24817: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24818: LD_VAR 0 1
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 3
24831: PUSH
24832: LD_INT 4
24834: PUSH
24835: LD_INT 5
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: IN
24845: IFFALSE 24857
// uc_nation := nation_american else
24847: LD_ADDR_OWVAR 21
24851: PUSH
24852: LD_INT 1
24854: ST_TO_ADDR
24855: GO 24900
// if chassis in [ 11 , 12 , 13 , 14 ] then
24857: LD_VAR 0 1
24861: PUSH
24862: LD_INT 11
24864: PUSH
24865: LD_INT 12
24867: PUSH
24868: LD_INT 13
24870: PUSH
24871: LD_INT 14
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: IN
24880: IFFALSE 24892
// uc_nation := nation_arabian else
24882: LD_ADDR_OWVAR 21
24886: PUSH
24887: LD_INT 2
24889: ST_TO_ADDR
24890: GO 24900
// uc_nation := nation_russian ;
24892: LD_ADDR_OWVAR 21
24896: PUSH
24897: LD_INT 3
24899: ST_TO_ADDR
// vc_chassis := chassis ;
24900: LD_ADDR_OWVAR 37
24904: PUSH
24905: LD_VAR 0 1
24909: ST_TO_ADDR
// vc_engine := engine ;
24910: LD_ADDR_OWVAR 39
24914: PUSH
24915: LD_VAR 0 2
24919: ST_TO_ADDR
// vc_control := control ;
24920: LD_ADDR_OWVAR 38
24924: PUSH
24925: LD_VAR 0 3
24929: ST_TO_ADDR
// vc_weapon := weapon ;
24930: LD_ADDR_OWVAR 40
24934: PUSH
24935: LD_VAR 0 4
24939: ST_TO_ADDR
// un := CreateVehicle ;
24940: LD_ADDR_VAR 0 8
24944: PUSH
24945: CALL_OW 45
24949: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24950: LD_VAR 0 8
24954: PPUSH
24955: LD_INT 0
24957: PPUSH
24958: LD_INT 5
24960: PPUSH
24961: CALL_OW 12
24965: PPUSH
24966: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24970: LD_VAR 0 8
24974: PPUSH
24975: LD_VAR 0 5
24979: PPUSH
24980: LD_VAR 0 6
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 48
// end ;
24992: LD_VAR 0 7
24996: RET
// export hInvincible ; every 1 do
24997: GO 24999
24999: DISABLE
// hInvincible := [ ] ;
25000: LD_ADDR_EXP 72
25004: PUSH
25005: EMPTY
25006: ST_TO_ADDR
25007: END
// every 10 do var i ;
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
// begin enable ;
25014: ENABLE
// if not hInvincible then
25015: LD_EXP 72
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25068
// for i in hInvincible do
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_EXP 72
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25066
// if GetLives ( i ) < 1000 then
25037: LD_VAR 0 1
25041: PPUSH
25042: CALL_OW 256
25046: PUSH
25047: LD_INT 1000
25049: LESS
25050: IFFALSE 25064
// SetLives ( i , 1000 ) ;
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_INT 1000
25059: PPUSH
25060: CALL_OW 234
25064: GO 25034
25066: POP
25067: POP
// end ;
25068: PPOPN 1
25070: END
// export function hHackInvincible ; var i ; begin
25071: LD_INT 0
25073: PPUSH
25074: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 21
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PPUSH
25108: CALL_OW 69
25112: PUSH
25113: FOR_IN
25114: IFFALSE 25175
// if IsSelected ( i ) then
25116: LD_VAR 0 2
25120: PPUSH
25121: CALL_OW 306
25125: IFFALSE 25173
// begin if i in hInvincible then
25127: LD_VAR 0 2
25131: PUSH
25132: LD_EXP 72
25136: IN
25137: IFFALSE 25157
// hInvincible := hInvincible diff i else
25139: LD_ADDR_EXP 72
25143: PUSH
25144: LD_EXP 72
25148: PUSH
25149: LD_VAR 0 2
25153: DIFF
25154: ST_TO_ADDR
25155: GO 25173
// hInvincible := hInvincible union i ;
25157: LD_ADDR_EXP 72
25161: PUSH
25162: LD_EXP 72
25166: PUSH
25167: LD_VAR 0 2
25171: UNION
25172: ST_TO_ADDR
// end ;
25173: GO 25113
25175: POP
25176: POP
// end ;
25177: LD_VAR 0 1
25181: RET
// export function hHackInvisible ; var i , j ; begin
25182: LD_INT 0
25184: PPUSH
25185: PPUSH
25186: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_INT 21
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25232
// if IsSelected ( i ) then
25210: LD_VAR 0 2
25214: PPUSH
25215: CALL_OW 306
25219: IFFALSE 25230
// ComForceInvisible ( i ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: CALL_OW 496
25230: GO 25207
25232: POP
25233: POP
// end ;
25234: LD_VAR 0 1
25238: RET
// export function hHackChangeYourSide ; begin
25239: LD_INT 0
25241: PPUSH
// if your_side = 8 then
25242: LD_OWVAR 2
25246: PUSH
25247: LD_INT 8
25249: EQUAL
25250: IFFALSE 25262
// your_side := 0 else
25252: LD_ADDR_OWVAR 2
25256: PUSH
25257: LD_INT 0
25259: ST_TO_ADDR
25260: GO 25276
// your_side := your_side + 1 ;
25262: LD_ADDR_OWVAR 2
25266: PUSH
25267: LD_OWVAR 2
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: ST_TO_ADDR
// end ;
25276: LD_VAR 0 1
25280: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25281: LD_INT 0
25283: PPUSH
25284: PPUSH
25285: PPUSH
// for i in all_units do
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_OWVAR 3
25295: PUSH
25296: FOR_IN
25297: IFFALSE 25375
// if IsSelected ( i ) then
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL_OW 306
25308: IFFALSE 25373
// begin j := GetSide ( i ) ;
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 255
25324: ST_TO_ADDR
// if j = 8 then
25325: LD_VAR 0 3
25329: PUSH
25330: LD_INT 8
25332: EQUAL
25333: IFFALSE 25345
// j := 0 else
25335: LD_ADDR_VAR 0 3
25339: PUSH
25340: LD_INT 0
25342: ST_TO_ADDR
25343: GO 25359
// j := j + 1 ;
25345: LD_ADDR_VAR 0 3
25349: PUSH
25350: LD_VAR 0 3
25354: PUSH
25355: LD_INT 1
25357: PLUS
25358: ST_TO_ADDR
// SetSide ( i , j ) ;
25359: LD_VAR 0 2
25363: PPUSH
25364: LD_VAR 0 3
25368: PPUSH
25369: CALL_OW 235
// end ;
25373: GO 25296
25375: POP
25376: POP
// end ;
25377: LD_VAR 0 1
25381: RET
// export function hHackFog ; begin
25382: LD_INT 0
25384: PPUSH
// FogOff ( true ) ;
25385: LD_INT 1
25387: PPUSH
25388: CALL_OW 344
// end ;
25392: LD_VAR 0 1
25396: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25397: LD_INT 0
25399: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25400: LD_VAR 0 1
25404: PPUSH
25405: LD_VAR 0 2
25409: PPUSH
25410: LD_VAR 0 3
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL_OW 483
// CenterOnXY ( x , y ) ;
25425: LD_VAR 0 2
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: CALL_OW 84
// end ;
25439: LD_VAR 0 4
25443: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25448: LD_VAR 0 1
25452: NOT
25453: PUSH
25454: LD_VAR 0 2
25458: PPUSH
25459: LD_VAR 0 3
25463: PPUSH
25464: CALL_OW 488
25468: NOT
25469: OR
25470: PUSH
25471: LD_VAR 0 1
25475: PPUSH
25476: CALL_OW 266
25480: PUSH
25481: LD_INT 3
25483: NONEQUAL
25484: PUSH
25485: LD_VAR 0 1
25489: PPUSH
25490: CALL_OW 247
25494: PUSH
25495: LD_INT 1
25497: EQUAL
25498: NOT
25499: AND
25500: OR
25501: IFFALSE 25505
// exit ;
25503: GO 25654
// if GetType ( factory ) = unit_human then
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 247
25514: PUSH
25515: LD_INT 1
25517: EQUAL
25518: IFFALSE 25535
// factory := IsInUnit ( factory ) ;
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 310
25534: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 266
25544: PUSH
25545: LD_INT 3
25547: NONEQUAL
25548: IFFALSE 25552
// exit ;
25550: GO 25654
// if HexInfo ( x , y ) = factory then
25552: LD_VAR 0 2
25556: PPUSH
25557: LD_VAR 0 3
25561: PPUSH
25562: CALL_OW 428
25566: PUSH
25567: LD_VAR 0 1
25571: EQUAL
25572: IFFALSE 25599
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25574: LD_ADDR_EXP 73
25578: PUSH
25579: LD_EXP 73
25583: PPUSH
25584: LD_VAR 0 1
25588: PPUSH
25589: LD_INT 0
25591: PPUSH
25592: CALL_OW 1
25596: ST_TO_ADDR
25597: GO 25650
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25599: LD_ADDR_EXP 73
25603: PUSH
25604: LD_EXP 73
25608: PPUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 255
25623: PUSH
25624: LD_VAR 0 1
25628: PUSH
25629: LD_VAR 0 2
25633: PUSH
25634: LD_VAR 0 3
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: PPUSH
25645: CALL_OW 1
25649: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25650: CALL 25659 0 0
// end ;
25654: LD_VAR 0 4
25658: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25659: LD_INT 0
25661: PPUSH
25662: PPUSH
25663: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25664: LD_STRING resetFactoryWaypoint();
25666: PPUSH
25667: CALL_OW 559
// if factoryWaypoints then
25671: LD_EXP 73
25675: IFFALSE 25801
// begin list := PrepareArray ( factoryWaypoints ) ;
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: LD_EXP 73
25686: PPUSH
25687: CALL 72123 0 1
25691: ST_TO_ADDR
// for i := 1 to list do
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: DOUBLE
25698: LD_INT 1
25700: DEC
25701: ST_TO_ADDR
25702: LD_VAR 0 3
25706: PUSH
25707: FOR_TO
25708: IFFALSE 25799
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25710: LD_STRING setFactoryWaypointXY(
25712: PUSH
25713: LD_VAR 0 3
25717: PUSH
25718: LD_VAR 0 2
25722: ARRAY
25723: PUSH
25724: LD_INT 1
25726: ARRAY
25727: STR
25728: PUSH
25729: LD_STRING ,
25731: STR
25732: PUSH
25733: LD_VAR 0 3
25737: PUSH
25738: LD_VAR 0 2
25742: ARRAY
25743: PUSH
25744: LD_INT 2
25746: ARRAY
25747: STR
25748: PUSH
25749: LD_STRING ,
25751: STR
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: LD_VAR 0 2
25762: ARRAY
25763: PUSH
25764: LD_INT 3
25766: ARRAY
25767: STR
25768: PUSH
25769: LD_STRING ,
25771: STR
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: ARRAY
25783: PUSH
25784: LD_INT 4
25786: ARRAY
25787: STR
25788: PUSH
25789: LD_STRING )
25791: STR
25792: PPUSH
25793: CALL_OW 559
25797: GO 25707
25799: POP
25800: POP
// end ; end ;
25801: LD_VAR 0 1
25805: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25806: LD_INT 0
25808: PPUSH
// if HexInfo ( x , y ) = warehouse then
25809: LD_VAR 0 2
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: CALL_OW 428
25823: PUSH
25824: LD_VAR 0 1
25828: EQUAL
25829: IFFALSE 25856
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25831: LD_ADDR_EXP 74
25835: PUSH
25836: LD_EXP 74
25840: PPUSH
25841: LD_VAR 0 1
25845: PPUSH
25846: LD_INT 0
25848: PPUSH
25849: CALL_OW 1
25853: ST_TO_ADDR
25854: GO 25907
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25856: LD_ADDR_EXP 74
25860: PUSH
25861: LD_EXP 74
25865: PPUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 255
25880: PUSH
25881: LD_VAR 0 1
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PPUSH
25902: CALL_OW 1
25906: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25907: CALL 25916 0 0
// end ;
25911: LD_VAR 0 4
25915: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25921: LD_STRING resetWarehouseGatheringPoints();
25923: PPUSH
25924: CALL_OW 559
// if warehouseGatheringPoints then
25928: LD_EXP 74
25932: IFFALSE 26058
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: LD_EXP 74
25943: PPUSH
25944: CALL 72123 0 1
25948: ST_TO_ADDR
// for i := 1 to list do
25949: LD_ADDR_VAR 0 2
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_VAR 0 3
25963: PUSH
25964: FOR_TO
25965: IFFALSE 26056
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25967: LD_STRING setWarehouseGatheringPointXY(
25969: PUSH
25970: LD_VAR 0 3
25974: PUSH
25975: LD_VAR 0 2
25979: ARRAY
25980: PUSH
25981: LD_INT 1
25983: ARRAY
25984: STR
25985: PUSH
25986: LD_STRING ,
25988: STR
25989: PUSH
25990: LD_VAR 0 3
25994: PUSH
25995: LD_VAR 0 2
25999: ARRAY
26000: PUSH
26001: LD_INT 2
26003: ARRAY
26004: STR
26005: PUSH
26006: LD_STRING ,
26008: STR
26009: PUSH
26010: LD_VAR 0 3
26014: PUSH
26015: LD_VAR 0 2
26019: ARRAY
26020: PUSH
26021: LD_INT 3
26023: ARRAY
26024: STR
26025: PUSH
26026: LD_STRING ,
26028: STR
26029: PUSH
26030: LD_VAR 0 3
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 4
26043: ARRAY
26044: STR
26045: PUSH
26046: LD_STRING )
26048: STR
26049: PPUSH
26050: CALL_OW 559
26054: GO 25964
26056: POP
26057: POP
// end ; end ;
26058: LD_VAR 0 1
26062: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26063: LD_EXP 74
26067: IFFALSE 26752
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
26077: PPUSH
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
// begin enable ;
26083: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26084: LD_ADDR_VAR 0 3
26088: PUSH
26089: LD_EXP 74
26093: PPUSH
26094: CALL 72123 0 1
26098: ST_TO_ADDR
// if not list then
26099: LD_VAR 0 3
26103: NOT
26104: IFFALSE 26108
// exit ;
26106: GO 26752
// for i := 1 to list do
26108: LD_ADDR_VAR 0 1
26112: PUSH
26113: DOUBLE
26114: LD_INT 1
26116: DEC
26117: ST_TO_ADDR
26118: LD_VAR 0 3
26122: PUSH
26123: FOR_TO
26124: IFFALSE 26750
// begin depot := list [ i ] [ 2 ] ;
26126: LD_ADDR_VAR 0 8
26130: PUSH
26131: LD_VAR 0 3
26135: PUSH
26136: LD_VAR 0 1
26140: ARRAY
26141: PUSH
26142: LD_INT 2
26144: ARRAY
26145: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_VAR 0 3
26155: PUSH
26156: LD_VAR 0 1
26160: ARRAY
26161: PUSH
26162: LD_INT 1
26164: ARRAY
26165: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26166: LD_VAR 0 8
26170: PPUSH
26171: CALL_OW 301
26175: PUSH
26176: LD_VAR 0 5
26180: PUSH
26181: LD_VAR 0 8
26185: PPUSH
26186: CALL_OW 255
26190: NONEQUAL
26191: OR
26192: IFFALSE 26221
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26194: LD_ADDR_EXP 74
26198: PUSH
26199: LD_EXP 74
26203: PPUSH
26204: LD_VAR 0 8
26208: PPUSH
26209: LD_INT 0
26211: PPUSH
26212: CALL_OW 1
26216: ST_TO_ADDR
// exit ;
26217: POP
26218: POP
26219: GO 26752
// end ; x := list [ i ] [ 3 ] ;
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 1
26235: ARRAY
26236: PUSH
26237: LD_INT 3
26239: ARRAY
26240: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26241: LD_ADDR_VAR 0 7
26245: PUSH
26246: LD_VAR 0 3
26250: PUSH
26251: LD_VAR 0 1
26255: ARRAY
26256: PUSH
26257: LD_INT 4
26259: ARRAY
26260: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26261: LD_ADDR_VAR 0 9
26265: PUSH
26266: LD_VAR 0 6
26270: PPUSH
26271: LD_VAR 0 7
26275: PPUSH
26276: LD_INT 16
26278: PPUSH
26279: CALL 70711 0 3
26283: ST_TO_ADDR
// if not cratesNearbyPoint then
26284: LD_VAR 0 9
26288: NOT
26289: IFFALSE 26295
// exit ;
26291: POP
26292: POP
26293: GO 26752
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26295: LD_ADDR_VAR 0 4
26299: PUSH
26300: LD_INT 22
26302: PUSH
26303: LD_VAR 0 5
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 60
26317: PUSH
26318: EMPTY
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 91
26327: PUSH
26328: LD_VAR 0 8
26332: PUSH
26333: LD_INT 6
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 25
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 16
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: PUSH
26380: LD_VAR 0 8
26384: PPUSH
26385: CALL_OW 313
26389: PPUSH
26390: LD_INT 3
26392: PUSH
26393: LD_INT 60
26395: PUSH
26396: EMPTY
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 25
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 25
26418: PUSH
26419: LD_INT 16
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PPUSH
26435: CALL_OW 72
26439: UNION
26440: ST_TO_ADDR
// if tmp then
26441: LD_VAR 0 4
26445: IFFALSE 26525
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26447: LD_ADDR_VAR 0 4
26451: PUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_INT 3
26459: PPUSH
26460: CALL 68680 0 2
26464: ST_TO_ADDR
// for j in tmp do
26465: LD_ADDR_VAR 0 2
26469: PUSH
26470: LD_VAR 0 4
26474: PUSH
26475: FOR_IN
26476: IFFALSE 26519
// begin if IsInUnit ( j ) then
26478: LD_VAR 0 2
26482: PPUSH
26483: CALL_OW 310
26487: IFFALSE 26498
// ComExit ( j ) ;
26489: LD_VAR 0 2
26493: PPUSH
26494: CALL 68763 0 1
// AddComCollect ( j , x , y ) ;
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_VAR 0 6
26507: PPUSH
26508: LD_VAR 0 7
26512: PPUSH
26513: CALL_OW 177
// end ;
26517: GO 26475
26519: POP
26520: POP
// exit ;
26521: POP
26522: POP
26523: GO 26752
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26525: LD_ADDR_VAR 0 4
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: LD_VAR 0 5
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 91
26544: PUSH
26545: LD_VAR 0 8
26549: PUSH
26550: LD_INT 8
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: LD_INT 34
26563: PUSH
26564: LD_INT 12
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 34
26573: PUSH
26574: LD_INT 51
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 34
26583: PUSH
26584: LD_INT 32
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 34
26593: PUSH
26594: LD_INT 89
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PPUSH
26613: CALL_OW 69
26617: ST_TO_ADDR
// if tmp then
26618: LD_VAR 0 4
26622: IFFALSE 26748
// begin for j in tmp do
26624: LD_ADDR_VAR 0 2
26628: PUSH
26629: LD_VAR 0 4
26633: PUSH
26634: FOR_IN
26635: IFFALSE 26746
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26637: LD_VAR 0 2
26641: PPUSH
26642: CALL_OW 262
26646: PUSH
26647: LD_INT 3
26649: EQUAL
26650: PUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: CALL_OW 261
26660: PUSH
26661: LD_INT 20
26663: GREATER
26664: OR
26665: PUSH
26666: LD_VAR 0 2
26670: PPUSH
26671: CALL_OW 314
26675: NOT
26676: AND
26677: PUSH
26678: LD_VAR 0 2
26682: PPUSH
26683: CALL_OW 263
26687: PUSH
26688: LD_INT 1
26690: NONEQUAL
26691: PUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: CALL_OW 311
26701: OR
26702: AND
26703: IFFALSE 26744
// begin ComCollect ( j , x , y ) ;
26705: LD_VAR 0 2
26709: PPUSH
26710: LD_VAR 0 6
26714: PPUSH
26715: LD_VAR 0 7
26719: PPUSH
26720: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26724: LD_VAR 0 2
26728: PPUSH
26729: LD_VAR 0 8
26733: PPUSH
26734: CALL_OW 172
// exit ;
26738: POP
26739: POP
26740: POP
26741: POP
26742: GO 26752
// end ;
26744: GO 26634
26746: POP
26747: POP
// end ; end ;
26748: GO 26123
26750: POP
26751: POP
// end ; end_of_file
26752: PPOPN 9
26754: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 264
26770: PUSH
26771: LD_INT 91
26773: EQUAL
26774: IFFALSE 26846
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26776: LD_INT 68
26778: PPUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 255
26788: PPUSH
26789: CALL_OW 321
26793: PUSH
26794: LD_INT 2
26796: EQUAL
26797: IFFALSE 26809
// eff := 70 else
26799: LD_ADDR_VAR 0 4
26803: PUSH
26804: LD_INT 70
26806: ST_TO_ADDR
26807: GO 26817
// eff := 30 ;
26809: LD_ADDR_VAR 0 4
26813: PUSH
26814: LD_INT 30
26816: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 250
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL_OW 251
26836: PPUSH
26837: LD_VAR 0 4
26841: PPUSH
26842: CALL_OW 495
// end ; end ;
26846: LD_VAR 0 2
26850: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26851: LD_INT 0
26853: PPUSH
// end ;
26854: LD_VAR 0 4
26858: RET
// export function SOS_Command ( cmd ) ; begin
26859: LD_INT 0
26861: PPUSH
// end ;
26862: LD_VAR 0 2
26866: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26867: LD_INT 0
26869: PPUSH
// end ;
26870: LD_VAR 0 6
26874: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// if not vehicle or not factory then
26879: LD_VAR 0 1
26883: NOT
26884: PUSH
26885: LD_VAR 0 2
26889: NOT
26890: OR
26891: IFFALSE 26895
// exit ;
26893: GO 27126
// if factoryWaypoints >= factory then
26895: LD_EXP 73
26899: PUSH
26900: LD_VAR 0 2
26904: GREATEREQUAL
26905: IFFALSE 27126
// if factoryWaypoints [ factory ] then
26907: LD_EXP 73
26911: PUSH
26912: LD_VAR 0 2
26916: ARRAY
26917: IFFALSE 27126
// begin if GetControl ( vehicle ) = control_manual then
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 263
26928: PUSH
26929: LD_INT 1
26931: EQUAL
26932: IFFALSE 27013
// begin driver := IsDrivenBy ( vehicle ) ;
26934: LD_ADDR_VAR 0 4
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 311
26948: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26949: LD_VAR 0 4
26953: PPUSH
26954: LD_EXP 73
26958: PUSH
26959: LD_VAR 0 2
26963: ARRAY
26964: PUSH
26965: LD_INT 3
26967: ARRAY
26968: PPUSH
26969: LD_EXP 73
26973: PUSH
26974: LD_VAR 0 2
26978: ARRAY
26979: PUSH
26980: LD_INT 4
26982: ARRAY
26983: PPUSH
26984: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26988: LD_VAR 0 4
26992: PPUSH
26993: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26997: LD_VAR 0 4
27001: PPUSH
27002: LD_VAR 0 2
27006: PPUSH
27007: CALL_OW 180
// end else
27011: GO 27126
// if GetControl ( vehicle ) = control_remote then
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 263
27022: PUSH
27023: LD_INT 2
27025: EQUAL
27026: IFFALSE 27087
// begin wait ( 0 0$2 ) ;
27028: LD_INT 70
27030: PPUSH
27031: CALL_OW 67
// if Connect ( vehicle ) then
27035: LD_VAR 0 1
27039: PPUSH
27040: CALL 38984 0 1
27044: IFFALSE 27085
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27046: LD_VAR 0 1
27050: PPUSH
27051: LD_EXP 73
27055: PUSH
27056: LD_VAR 0 2
27060: ARRAY
27061: PUSH
27062: LD_INT 3
27064: ARRAY
27065: PPUSH
27066: LD_EXP 73
27070: PUSH
27071: LD_VAR 0 2
27075: ARRAY
27076: PUSH
27077: LD_INT 4
27079: ARRAY
27080: PPUSH
27081: CALL_OW 171
// end else
27085: GO 27126
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_EXP 73
27096: PUSH
27097: LD_VAR 0 2
27101: ARRAY
27102: PUSH
27103: LD_INT 3
27105: ARRAY
27106: PPUSH
27107: LD_EXP 73
27111: PUSH
27112: LD_VAR 0 2
27116: ARRAY
27117: PUSH
27118: LD_INT 4
27120: ARRAY
27121: PPUSH
27122: CALL_OW 171
// end ; end ;
27126: LD_VAR 0 3
27130: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27131: LD_INT 0
27133: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 250
27141: EQUAL
27142: PUSH
27143: LD_VAR 0 2
27147: PPUSH
27148: CALL_OW 264
27152: PUSH
27153: LD_INT 81
27155: EQUAL
27156: AND
27157: IFFALSE 27178
// MinerPlaceMine ( unit , x , y ) ;
27159: LD_VAR 0 2
27163: PPUSH
27164: LD_VAR 0 4
27168: PPUSH
27169: LD_VAR 0 5
27173: PPUSH
27174: CALL 29563 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 251
27185: EQUAL
27186: PUSH
27187: LD_VAR 0 2
27191: PPUSH
27192: CALL_OW 264
27196: PUSH
27197: LD_INT 81
27199: EQUAL
27200: AND
27201: IFFALSE 27222
// MinerDetonateMine ( unit , x , y ) ;
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 4
27212: PPUSH
27213: LD_VAR 0 5
27217: PPUSH
27218: CALL 29838 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27222: LD_VAR 0 1
27226: PUSH
27227: LD_INT 252
27229: EQUAL
27230: PUSH
27231: LD_VAR 0 2
27235: PPUSH
27236: CALL_OW 264
27240: PUSH
27241: LD_INT 81
27243: EQUAL
27244: AND
27245: IFFALSE 27266
// MinerCreateMinefield ( unit , x , y ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: LD_VAR 0 4
27256: PPUSH
27257: LD_VAR 0 5
27261: PPUSH
27262: CALL 30255 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 253
27273: EQUAL
27274: PUSH
27275: LD_VAR 0 2
27279: PPUSH
27280: CALL_OW 257
27284: PUSH
27285: LD_INT 5
27287: EQUAL
27288: AND
27289: IFFALSE 27310
// ComBinocular ( unit , x , y ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: LD_VAR 0 5
27305: PPUSH
27306: CALL 30624 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27310: LD_VAR 0 1
27314: PUSH
27315: LD_INT 254
27317: EQUAL
27318: PUSH
27319: LD_VAR 0 2
27323: PPUSH
27324: CALL_OW 264
27328: PUSH
27329: LD_INT 99
27331: EQUAL
27332: AND
27333: PUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 263
27343: PUSH
27344: LD_INT 3
27346: EQUAL
27347: AND
27348: IFFALSE 27364
// HackDestroyVehicle ( unit , selectedUnit ) ;
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL 28927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27364: LD_VAR 0 1
27368: PUSH
27369: LD_INT 255
27371: EQUAL
27372: PUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL_OW 264
27382: PUSH
27383: LD_INT 14
27385: PUSH
27386: LD_INT 53
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: IN
27393: AND
27394: PUSH
27395: LD_VAR 0 4
27399: PPUSH
27400: LD_VAR 0 5
27404: PPUSH
27405: CALL_OW 488
27409: AND
27410: IFFALSE 27434
// CutTreeXYR ( unit , x , y , 12 ) ;
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_VAR 0 4
27421: PPUSH
27422: LD_VAR 0 5
27426: PPUSH
27427: LD_INT 12
27429: PPUSH
27430: CALL 27497 0 4
// if cmd = 256 then
27434: LD_VAR 0 1
27438: PUSH
27439: LD_INT 256
27441: EQUAL
27442: IFFALSE 27463
// SetFactoryWaypoint ( unit , x , y ) ;
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 4
27453: PPUSH
27454: LD_VAR 0 5
27458: PPUSH
27459: CALL 25444 0 3
// if cmd = 257 then
27463: LD_VAR 0 1
27467: PUSH
27468: LD_INT 257
27470: EQUAL
27471: IFFALSE 27492
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_VAR 0 4
27482: PPUSH
27483: LD_VAR 0 5
27487: PPUSH
27488: CALL 25806 0 3
// end ;
27492: LD_VAR 0 6
27496: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27508: LD_VAR 0 1
27512: NOT
27513: PUSH
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 3
27523: PPUSH
27524: CALL_OW 488
27528: NOT
27529: OR
27530: PUSH
27531: LD_VAR 0 4
27535: NOT
27536: OR
27537: IFFALSE 27541
// exit ;
27539: GO 27881
// list := [ ] ;
27541: LD_ADDR_VAR 0 13
27545: PUSH
27546: EMPTY
27547: ST_TO_ADDR
// if x - r < 0 then
27548: LD_VAR 0 2
27552: PUSH
27553: LD_VAR 0 4
27557: MINUS
27558: PUSH
27559: LD_INT 0
27561: LESS
27562: IFFALSE 27574
// min_x := 0 else
27564: LD_ADDR_VAR 0 7
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
27572: GO 27590
// min_x := x - r ;
27574: LD_ADDR_VAR 0 7
27578: PUSH
27579: LD_VAR 0 2
27583: PUSH
27584: LD_VAR 0 4
27588: MINUS
27589: ST_TO_ADDR
// if y - r < 0 then
27590: LD_VAR 0 3
27594: PUSH
27595: LD_VAR 0 4
27599: MINUS
27600: PUSH
27601: LD_INT 0
27603: LESS
27604: IFFALSE 27616
// min_y := 0 else
27606: LD_ADDR_VAR 0 8
27610: PUSH
27611: LD_INT 0
27613: ST_TO_ADDR
27614: GO 27632
// min_y := y - r ;
27616: LD_ADDR_VAR 0 8
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: LD_VAR 0 4
27630: MINUS
27631: ST_TO_ADDR
// max_x := x + r ;
27632: LD_ADDR_VAR 0 9
27636: PUSH
27637: LD_VAR 0 2
27641: PUSH
27642: LD_VAR 0 4
27646: PLUS
27647: ST_TO_ADDR
// max_y := y + r ;
27648: LD_ADDR_VAR 0 10
27652: PUSH
27653: LD_VAR 0 3
27657: PUSH
27658: LD_VAR 0 4
27662: PLUS
27663: ST_TO_ADDR
// for _x = min_x to max_x do
27664: LD_ADDR_VAR 0 11
27668: PUSH
27669: DOUBLE
27670: LD_VAR 0 7
27674: DEC
27675: ST_TO_ADDR
27676: LD_VAR 0 9
27680: PUSH
27681: FOR_TO
27682: IFFALSE 27799
// for _y = min_y to max_y do
27684: LD_ADDR_VAR 0 12
27688: PUSH
27689: DOUBLE
27690: LD_VAR 0 8
27694: DEC
27695: ST_TO_ADDR
27696: LD_VAR 0 10
27700: PUSH
27701: FOR_TO
27702: IFFALSE 27795
// begin if not ValidHex ( _x , _y ) then
27704: LD_VAR 0 11
27708: PPUSH
27709: LD_VAR 0 12
27713: PPUSH
27714: CALL_OW 488
27718: NOT
27719: IFFALSE 27723
// continue ;
27721: GO 27701
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27723: LD_VAR 0 11
27727: PPUSH
27728: LD_VAR 0 12
27732: PPUSH
27733: CALL_OW 351
27737: PUSH
27738: LD_VAR 0 11
27742: PPUSH
27743: LD_VAR 0 12
27747: PPUSH
27748: CALL_OW 554
27752: AND
27753: IFFALSE 27793
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27755: LD_ADDR_VAR 0 13
27759: PUSH
27760: LD_VAR 0 13
27764: PPUSH
27765: LD_VAR 0 13
27769: PUSH
27770: LD_INT 1
27772: PLUS
27773: PPUSH
27774: LD_VAR 0 11
27778: PUSH
27779: LD_VAR 0 12
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 2
27792: ST_TO_ADDR
// end ;
27793: GO 27701
27795: POP
27796: POP
27797: GO 27681
27799: POP
27800: POP
// if not list then
27801: LD_VAR 0 13
27805: NOT
27806: IFFALSE 27810
// exit ;
27808: GO 27881
// for i in list do
27810: LD_ADDR_VAR 0 6
27814: PUSH
27815: LD_VAR 0 13
27819: PUSH
27820: FOR_IN
27821: IFFALSE 27879
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27823: LD_VAR 0 1
27827: PPUSH
27828: LD_STRING M
27830: PUSH
27831: LD_VAR 0 6
27835: PUSH
27836: LD_INT 1
27838: ARRAY
27839: PUSH
27840: LD_VAR 0 6
27844: PUSH
27845: LD_INT 2
27847: ARRAY
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: PUSH
27870: EMPTY
27871: LIST
27872: PPUSH
27873: CALL_OW 447
27877: GO 27820
27879: POP
27880: POP
// end ;
27881: LD_VAR 0 5
27885: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27886: LD_EXP 76
27890: NOT
27891: IFFALSE 27941
27893: GO 27895
27895: DISABLE
// begin initHack := true ;
27896: LD_ADDR_EXP 76
27900: PUSH
27901: LD_INT 1
27903: ST_TO_ADDR
// hackTanks := [ ] ;
27904: LD_ADDR_EXP 77
27908: PUSH
27909: EMPTY
27910: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27911: LD_ADDR_EXP 78
27915: PUSH
27916: EMPTY
27917: ST_TO_ADDR
// hackLimit := 3 ;
27918: LD_ADDR_EXP 79
27922: PUSH
27923: LD_INT 3
27925: ST_TO_ADDR
// hackDist := 12 ;
27926: LD_ADDR_EXP 80
27930: PUSH
27931: LD_INT 12
27933: ST_TO_ADDR
// hackCounter := [ ] ;
27934: LD_ADDR_EXP 81
27938: PUSH
27939: EMPTY
27940: ST_TO_ADDR
// end ;
27941: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27942: LD_EXP 76
27946: PUSH
27947: LD_INT 34
27949: PUSH
27950: LD_INT 99
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PPUSH
27957: CALL_OW 69
27961: AND
27962: IFFALSE 28215
27964: GO 27966
27966: DISABLE
27967: LD_INT 0
27969: PPUSH
27970: PPUSH
// begin enable ;
27971: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27972: LD_ADDR_VAR 0 1
27976: PUSH
27977: LD_INT 34
27979: PUSH
27980: LD_INT 99
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PPUSH
27987: CALL_OW 69
27991: PUSH
27992: FOR_IN
27993: IFFALSE 28213
// begin if not i in hackTanks then
27995: LD_VAR 0 1
27999: PUSH
28000: LD_EXP 77
28004: IN
28005: NOT
28006: IFFALSE 28089
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28008: LD_ADDR_EXP 77
28012: PUSH
28013: LD_EXP 77
28017: PPUSH
28018: LD_EXP 77
28022: PUSH
28023: LD_INT 1
28025: PLUS
28026: PPUSH
28027: LD_VAR 0 1
28031: PPUSH
28032: CALL_OW 1
28036: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28037: LD_ADDR_EXP 78
28041: PUSH
28042: LD_EXP 78
28046: PPUSH
28047: LD_EXP 78
28051: PUSH
28052: LD_INT 1
28054: PLUS
28055: PPUSH
28056: EMPTY
28057: PPUSH
28058: CALL_OW 1
28062: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28063: LD_ADDR_EXP 81
28067: PUSH
28068: LD_EXP 81
28072: PPUSH
28073: LD_EXP 81
28077: PUSH
28078: LD_INT 1
28080: PLUS
28081: PPUSH
28082: EMPTY
28083: PPUSH
28084: CALL_OW 1
28088: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 302
28098: NOT
28099: IFFALSE 28112
// begin HackUnlinkAll ( i ) ;
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL 28218 0 1
// continue ;
28110: GO 27992
// end ; HackCheckCapturedStatus ( i ) ;
28112: LD_VAR 0 1
28116: PPUSH
28117: CALL 28661 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28121: LD_ADDR_VAR 0 2
28125: PUSH
28126: LD_INT 81
28128: PUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 255
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 33
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 91
28155: PUSH
28156: LD_VAR 0 1
28160: PUSH
28161: LD_EXP 80
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 50
28173: PUSH
28174: EMPTY
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: PPUSH
28183: CALL_OW 69
28187: ST_TO_ADDR
// if not tmp then
28188: LD_VAR 0 2
28192: NOT
28193: IFFALSE 28197
// continue ;
28195: GO 27992
// HackLink ( i , tmp ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_VAR 0 2
28206: PPUSH
28207: CALL 28354 0 2
// end ;
28211: GO 27992
28213: POP
28214: POP
// end ;
28215: PPOPN 2
28217: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28218: LD_INT 0
28220: PPUSH
28221: PPUSH
28222: PPUSH
// if not hack in hackTanks then
28223: LD_VAR 0 1
28227: PUSH
28228: LD_EXP 77
28232: IN
28233: NOT
28234: IFFALSE 28238
// exit ;
28236: GO 28349
// index := GetElementIndex ( hackTanks , hack ) ;
28238: LD_ADDR_VAR 0 4
28242: PUSH
28243: LD_EXP 77
28247: PPUSH
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL 35791 0 2
28257: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28258: LD_EXP 78
28262: PUSH
28263: LD_VAR 0 4
28267: ARRAY
28268: IFFALSE 28349
// begin for i in hackTanksCaptured [ index ] do
28270: LD_ADDR_VAR 0 3
28274: PUSH
28275: LD_EXP 78
28279: PUSH
28280: LD_VAR 0 4
28284: ARRAY
28285: PUSH
28286: FOR_IN
28287: IFFALSE 28313
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28289: LD_VAR 0 3
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PPUSH
28298: LD_VAR 0 3
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: PPUSH
28307: CALL_OW 235
28311: GO 28286
28313: POP
28314: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28315: LD_ADDR_EXP 78
28319: PUSH
28320: LD_EXP 78
28324: PPUSH
28325: LD_VAR 0 4
28329: PPUSH
28330: EMPTY
28331: PPUSH
28332: CALL_OW 1
28336: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28337: LD_VAR 0 1
28341: PPUSH
28342: LD_INT 0
28344: PPUSH
28345: CALL_OW 505
// end ; end ;
28349: LD_VAR 0 2
28353: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
28358: PPUSH
// if not hack in hackTanks or not vehicles then
28359: LD_VAR 0 1
28363: PUSH
28364: LD_EXP 77
28368: IN
28369: NOT
28370: PUSH
28371: LD_VAR 0 2
28375: NOT
28376: OR
28377: IFFALSE 28381
// exit ;
28379: GO 28656
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28381: LD_ADDR_VAR 0 2
28385: PUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: LD_VAR 0 2
28395: PPUSH
28396: LD_INT 1
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: CALL 36441 0 4
28406: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28407: LD_ADDR_VAR 0 5
28411: PUSH
28412: LD_EXP 77
28416: PPUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL 35791 0 2
28426: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28427: LD_EXP 78
28431: PUSH
28432: LD_VAR 0 5
28436: ARRAY
28437: PUSH
28438: LD_EXP 79
28442: LESS
28443: IFFALSE 28632
// begin for i := 1 to vehicles do
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: DOUBLE
28451: LD_INT 1
28453: DEC
28454: ST_TO_ADDR
28455: LD_VAR 0 2
28459: PUSH
28460: FOR_TO
28461: IFFALSE 28630
// begin if hackTanksCaptured [ index ] = hackLimit then
28463: LD_EXP 78
28467: PUSH
28468: LD_VAR 0 5
28472: ARRAY
28473: PUSH
28474: LD_EXP 79
28478: EQUAL
28479: IFFALSE 28483
// break ;
28481: GO 28630
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28483: LD_ADDR_EXP 81
28487: PUSH
28488: LD_EXP 81
28492: PPUSH
28493: LD_VAR 0 5
28497: PPUSH
28498: LD_EXP 81
28502: PUSH
28503: LD_VAR 0 5
28507: ARRAY
28508: PUSH
28509: LD_INT 1
28511: PLUS
28512: PPUSH
28513: CALL_OW 1
28517: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28518: LD_ADDR_EXP 78
28522: PUSH
28523: LD_EXP 78
28527: PPUSH
28528: LD_VAR 0 5
28532: PUSH
28533: LD_EXP 78
28537: PUSH
28538: LD_VAR 0 5
28542: ARRAY
28543: PUSH
28544: LD_INT 1
28546: PLUS
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PPUSH
28552: LD_VAR 0 2
28556: PUSH
28557: LD_VAR 0 4
28561: ARRAY
28562: PUSH
28563: LD_VAR 0 2
28567: PUSH
28568: LD_VAR 0 4
28572: ARRAY
28573: PPUSH
28574: CALL_OW 255
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PPUSH
28583: CALL 36006 0 3
28587: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28588: LD_VAR 0 2
28592: PUSH
28593: LD_VAR 0 4
28597: ARRAY
28598: PPUSH
28599: LD_VAR 0 1
28603: PPUSH
28604: CALL_OW 255
28608: PPUSH
28609: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28613: LD_VAR 0 2
28617: PUSH
28618: LD_VAR 0 4
28622: ARRAY
28623: PPUSH
28624: CALL_OW 141
// end ;
28628: GO 28460
28630: POP
28631: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28632: LD_VAR 0 1
28636: PPUSH
28637: LD_EXP 78
28641: PUSH
28642: LD_VAR 0 5
28646: ARRAY
28647: PUSH
28648: LD_INT 0
28650: PLUS
28651: PPUSH
28652: CALL_OW 505
// end ;
28656: LD_VAR 0 3
28660: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28661: LD_INT 0
28663: PPUSH
28664: PPUSH
28665: PPUSH
28666: PPUSH
// if not hack in hackTanks then
28667: LD_VAR 0 1
28671: PUSH
28672: LD_EXP 77
28676: IN
28677: NOT
28678: IFFALSE 28682
// exit ;
28680: GO 28922
// index := GetElementIndex ( hackTanks , hack ) ;
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: LD_EXP 77
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL 35791 0 2
28701: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28702: LD_ADDR_VAR 0 3
28706: PUSH
28707: DOUBLE
28708: LD_EXP 78
28712: PUSH
28713: LD_VAR 0 4
28717: ARRAY
28718: INC
28719: ST_TO_ADDR
28720: LD_INT 1
28722: PUSH
28723: FOR_DOWNTO
28724: IFFALSE 28896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28726: LD_ADDR_VAR 0 5
28730: PUSH
28731: LD_EXP 78
28735: PUSH
28736: LD_VAR 0 4
28740: ARRAY
28741: PUSH
28742: LD_VAR 0 3
28746: ARRAY
28747: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28748: LD_VAR 0 5
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: CALL_OW 302
28761: NOT
28762: PUSH
28763: LD_VAR 0 5
28767: PUSH
28768: LD_INT 1
28770: ARRAY
28771: PPUSH
28772: CALL_OW 255
28776: PUSH
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 255
28786: NONEQUAL
28787: OR
28788: IFFALSE 28894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28790: LD_VAR 0 5
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PPUSH
28799: CALL_OW 305
28803: PUSH
28804: LD_VAR 0 5
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: CALL_OW 255
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 255
28827: EQUAL
28828: AND
28829: IFFALSE 28853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28831: LD_VAR 0 5
28835: PUSH
28836: LD_INT 1
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 5
28844: PUSH
28845: LD_INT 2
28847: ARRAY
28848: PPUSH
28849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28853: LD_ADDR_EXP 78
28857: PUSH
28858: LD_EXP 78
28862: PPUSH
28863: LD_VAR 0 4
28867: PPUSH
28868: LD_EXP 78
28872: PUSH
28873: LD_VAR 0 4
28877: ARRAY
28878: PPUSH
28879: LD_VAR 0 3
28883: PPUSH
28884: CALL_OW 3
28888: PPUSH
28889: CALL_OW 1
28893: ST_TO_ADDR
// end ; end ;
28894: GO 28723
28896: POP
28897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28898: LD_VAR 0 1
28902: PPUSH
28903: LD_EXP 78
28907: PUSH
28908: LD_VAR 0 4
28912: ARRAY
28913: PUSH
28914: LD_INT 0
28916: PLUS
28917: PPUSH
28918: CALL_OW 505
// end ;
28922: LD_VAR 0 2
28926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
// if not hack in hackTanks then
28933: LD_VAR 0 1
28937: PUSH
28938: LD_EXP 77
28942: IN
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 29033
// index := GetElementIndex ( hackTanks , hack ) ;
28948: LD_ADDR_VAR 0 5
28952: PUSH
28953: LD_EXP 77
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL 35791 0 2
28967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28968: LD_ADDR_VAR 0 4
28972: PUSH
28973: DOUBLE
28974: LD_INT 1
28976: DEC
28977: ST_TO_ADDR
28978: LD_EXP 78
28982: PUSH
28983: LD_VAR 0 5
28987: ARRAY
28988: PUSH
28989: FOR_TO
28990: IFFALSE 29031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28992: LD_EXP 78
28996: PUSH
28997: LD_VAR 0 5
29001: ARRAY
29002: PUSH
29003: LD_VAR 0 4
29007: ARRAY
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PUSH
29013: LD_VAR 0 2
29017: EQUAL
29018: IFFALSE 29029
// KillUnit ( vehicle ) ;
29020: LD_VAR 0 2
29024: PPUSH
29025: CALL_OW 66
29029: GO 28989
29031: POP
29032: POP
// end ;
29033: LD_VAR 0 3
29037: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29038: LD_EXP 82
29042: NOT
29043: IFFALSE 29078
29045: GO 29047
29047: DISABLE
// begin initMiner := true ;
29048: LD_ADDR_EXP 82
29052: PUSH
29053: LD_INT 1
29055: ST_TO_ADDR
// minersList := [ ] ;
29056: LD_ADDR_EXP 83
29060: PUSH
29061: EMPTY
29062: ST_TO_ADDR
// minerMinesList := [ ] ;
29063: LD_ADDR_EXP 84
29067: PUSH
29068: EMPTY
29069: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29070: LD_ADDR_EXP 85
29074: PUSH
29075: LD_INT 5
29077: ST_TO_ADDR
// end ;
29078: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29079: LD_EXP 82
29083: PUSH
29084: LD_INT 34
29086: PUSH
29087: LD_INT 81
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PPUSH
29094: CALL_OW 69
29098: AND
29099: IFFALSE 29560
29101: GO 29103
29103: DISABLE
29104: LD_INT 0
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
// begin enable ;
29110: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29111: LD_ADDR_VAR 0 1
29115: PUSH
29116: LD_INT 34
29118: PUSH
29119: LD_INT 81
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PPUSH
29126: CALL_OW 69
29130: PUSH
29131: FOR_IN
29132: IFFALSE 29204
// begin if not i in minersList then
29134: LD_VAR 0 1
29138: PUSH
29139: LD_EXP 83
29143: IN
29144: NOT
29145: IFFALSE 29202
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29147: LD_ADDR_EXP 83
29151: PUSH
29152: LD_EXP 83
29156: PPUSH
29157: LD_EXP 83
29161: PUSH
29162: LD_INT 1
29164: PLUS
29165: PPUSH
29166: LD_VAR 0 1
29170: PPUSH
29171: CALL_OW 1
29175: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29176: LD_ADDR_EXP 84
29180: PUSH
29181: LD_EXP 84
29185: PPUSH
29186: LD_EXP 84
29190: PUSH
29191: LD_INT 1
29193: PLUS
29194: PPUSH
29195: EMPTY
29196: PPUSH
29197: CALL_OW 1
29201: ST_TO_ADDR
// end end ;
29202: GO 29131
29204: POP
29205: POP
// for i := minerMinesList downto 1 do
29206: LD_ADDR_VAR 0 1
29210: PUSH
29211: DOUBLE
29212: LD_EXP 84
29216: INC
29217: ST_TO_ADDR
29218: LD_INT 1
29220: PUSH
29221: FOR_DOWNTO
29222: IFFALSE 29558
// begin if IsLive ( minersList [ i ] ) then
29224: LD_EXP 83
29228: PUSH
29229: LD_VAR 0 1
29233: ARRAY
29234: PPUSH
29235: CALL_OW 300
29239: IFFALSE 29267
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29241: LD_EXP 83
29245: PUSH
29246: LD_VAR 0 1
29250: ARRAY
29251: PPUSH
29252: LD_EXP 84
29256: PUSH
29257: LD_VAR 0 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 505
// if not minerMinesList [ i ] then
29267: LD_EXP 84
29271: PUSH
29272: LD_VAR 0 1
29276: ARRAY
29277: NOT
29278: IFFALSE 29282
// continue ;
29280: GO 29221
// for j := minerMinesList [ i ] downto 1 do
29282: LD_ADDR_VAR 0 2
29286: PUSH
29287: DOUBLE
29288: LD_EXP 84
29292: PUSH
29293: LD_VAR 0 1
29297: ARRAY
29298: INC
29299: ST_TO_ADDR
29300: LD_INT 1
29302: PUSH
29303: FOR_DOWNTO
29304: IFFALSE 29554
// begin side := GetSide ( minersList [ i ] ) ;
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_EXP 83
29315: PUSH
29316: LD_VAR 0 1
29320: ARRAY
29321: PPUSH
29322: CALL_OW 255
29326: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29327: LD_ADDR_VAR 0 4
29331: PUSH
29332: LD_EXP 84
29336: PUSH
29337: LD_VAR 0 1
29341: ARRAY
29342: PUSH
29343: LD_VAR 0 2
29347: ARRAY
29348: PUSH
29349: LD_INT 1
29351: ARRAY
29352: PPUSH
29353: LD_EXP 84
29357: PUSH
29358: LD_VAR 0 1
29362: ARRAY
29363: PUSH
29364: LD_VAR 0 2
29368: ARRAY
29369: PUSH
29370: LD_INT 2
29372: ARRAY
29373: PPUSH
29374: CALL_OW 428
29378: ST_TO_ADDR
// if not tmp then
29379: LD_VAR 0 4
29383: NOT
29384: IFFALSE 29388
// continue ;
29386: GO 29303
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29388: LD_VAR 0 4
29392: PUSH
29393: LD_INT 81
29395: PUSH
29396: LD_VAR 0 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PPUSH
29405: CALL_OW 69
29409: IN
29410: PUSH
29411: LD_EXP 84
29415: PUSH
29416: LD_VAR 0 1
29420: ARRAY
29421: PUSH
29422: LD_VAR 0 2
29426: ARRAY
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: LD_EXP 84
29436: PUSH
29437: LD_VAR 0 1
29441: ARRAY
29442: PUSH
29443: LD_VAR 0 2
29447: ARRAY
29448: PUSH
29449: LD_INT 2
29451: ARRAY
29452: PPUSH
29453: CALL_OW 458
29457: AND
29458: IFFALSE 29552
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29460: LD_EXP 84
29464: PUSH
29465: LD_VAR 0 1
29469: ARRAY
29470: PUSH
29471: LD_VAR 0 2
29475: ARRAY
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: LD_EXP 84
29485: PUSH
29486: LD_VAR 0 1
29490: ARRAY
29491: PUSH
29492: LD_VAR 0 2
29496: ARRAY
29497: PUSH
29498: LD_INT 2
29500: ARRAY
29501: PPUSH
29502: LD_VAR 0 3
29506: PPUSH
29507: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29511: LD_ADDR_EXP 84
29515: PUSH
29516: LD_EXP 84
29520: PPUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: LD_EXP 84
29530: PUSH
29531: LD_VAR 0 1
29535: ARRAY
29536: PPUSH
29537: LD_VAR 0 2
29541: PPUSH
29542: CALL_OW 3
29546: PPUSH
29547: CALL_OW 1
29551: ST_TO_ADDR
// end ; end ;
29552: GO 29303
29554: POP
29555: POP
// end ;
29556: GO 29221
29558: POP
29559: POP
// end ;
29560: PPOPN 4
29562: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29563: LD_INT 0
29565: PPUSH
29566: PPUSH
// result := false ;
29567: LD_ADDR_VAR 0 4
29571: PUSH
29572: LD_INT 0
29574: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 264
29584: PUSH
29585: LD_INT 81
29587: EQUAL
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 29833
// index := GetElementIndex ( minersList , unit ) ;
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_EXP 83
29602: PPUSH
29603: LD_VAR 0 1
29607: PPUSH
29608: CALL 35791 0 2
29612: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29613: LD_EXP 84
29617: PUSH
29618: LD_VAR 0 5
29622: ARRAY
29623: PUSH
29624: LD_EXP 85
29628: GREATEREQUAL
29629: IFFALSE 29633
// exit ;
29631: GO 29833
// ComMoveXY ( unit , x , y ) ;
29633: LD_VAR 0 1
29637: PPUSH
29638: LD_VAR 0 2
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29652: LD_INT 35
29654: PPUSH
29655: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29659: LD_VAR 0 1
29663: PPUSH
29664: LD_VAR 0 2
29668: PPUSH
29669: LD_VAR 0 3
29673: PPUSH
29674: CALL 67175 0 3
29678: NOT
29679: PUSH
29680: LD_VAR 0 1
29684: PPUSH
29685: CALL_OW 314
29689: AND
29690: IFFALSE 29694
// exit ;
29692: GO 29833
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29694: LD_VAR 0 2
29698: PPUSH
29699: LD_VAR 0 3
29703: PPUSH
29704: CALL_OW 428
29708: PUSH
29709: LD_VAR 0 1
29713: EQUAL
29714: PUSH
29715: LD_VAR 0 1
29719: PPUSH
29720: CALL_OW 314
29724: NOT
29725: AND
29726: IFFALSE 29652
// PlaySoundXY ( x , y , PlantMine ) ;
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_STRING PlantMine
29740: PPUSH
29741: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 255
29764: PPUSH
29765: LD_INT 0
29767: PPUSH
29768: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29772: LD_ADDR_EXP 84
29776: PUSH
29777: LD_EXP 84
29781: PPUSH
29782: LD_VAR 0 5
29786: PUSH
29787: LD_EXP 84
29791: PUSH
29792: LD_VAR 0 5
29796: ARRAY
29797: PUSH
29798: LD_INT 1
29800: PLUS
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PPUSH
29806: LD_VAR 0 2
29810: PUSH
29811: LD_VAR 0 3
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PPUSH
29820: CALL 36006 0 3
29824: ST_TO_ADDR
// result := true ;
29825: LD_ADDR_VAR 0 4
29829: PUSH
29830: LD_INT 1
29832: ST_TO_ADDR
// end ;
29833: LD_VAR 0 4
29837: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
29842: PPUSH
// if not unit in minersList then
29843: LD_VAR 0 1
29847: PUSH
29848: LD_EXP 83
29852: IN
29853: NOT
29854: IFFALSE 29858
// exit ;
29856: GO 30250
// index := GetElementIndex ( minersList , unit ) ;
29858: LD_ADDR_VAR 0 6
29862: PUSH
29863: LD_EXP 83
29867: PPUSH
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL 35791 0 2
29877: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29878: LD_ADDR_VAR 0 5
29882: PUSH
29883: DOUBLE
29884: LD_EXP 84
29888: PUSH
29889: LD_VAR 0 6
29893: ARRAY
29894: INC
29895: ST_TO_ADDR
29896: LD_INT 1
29898: PUSH
29899: FOR_DOWNTO
29900: IFFALSE 30061
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29902: LD_EXP 84
29906: PUSH
29907: LD_VAR 0 6
29911: ARRAY
29912: PUSH
29913: LD_VAR 0 5
29917: ARRAY
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PUSH
29923: LD_VAR 0 2
29927: EQUAL
29928: PUSH
29929: LD_EXP 84
29933: PUSH
29934: LD_VAR 0 6
29938: ARRAY
29939: PUSH
29940: LD_VAR 0 5
29944: ARRAY
29945: PUSH
29946: LD_INT 2
29948: ARRAY
29949: PUSH
29950: LD_VAR 0 3
29954: EQUAL
29955: AND
29956: IFFALSE 30059
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29958: LD_EXP 84
29962: PUSH
29963: LD_VAR 0 6
29967: ARRAY
29968: PUSH
29969: LD_VAR 0 5
29973: ARRAY
29974: PUSH
29975: LD_INT 1
29977: ARRAY
29978: PPUSH
29979: LD_EXP 84
29983: PUSH
29984: LD_VAR 0 6
29988: ARRAY
29989: PUSH
29990: LD_VAR 0 5
29994: ARRAY
29995: PUSH
29996: LD_INT 2
29998: ARRAY
29999: PPUSH
30000: LD_VAR 0 1
30004: PPUSH
30005: CALL_OW 255
30009: PPUSH
30010: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30014: LD_ADDR_EXP 84
30018: PUSH
30019: LD_EXP 84
30023: PPUSH
30024: LD_VAR 0 6
30028: PPUSH
30029: LD_EXP 84
30033: PUSH
30034: LD_VAR 0 6
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 5
30044: PPUSH
30045: CALL_OW 3
30049: PPUSH
30050: CALL_OW 1
30054: ST_TO_ADDR
// exit ;
30055: POP
30056: POP
30057: GO 30250
// end ; end ;
30059: GO 29899
30061: POP
30062: POP
// for i := minerMinesList [ index ] downto 1 do
30063: LD_ADDR_VAR 0 5
30067: PUSH
30068: DOUBLE
30069: LD_EXP 84
30073: PUSH
30074: LD_VAR 0 6
30078: ARRAY
30079: INC
30080: ST_TO_ADDR
30081: LD_INT 1
30083: PUSH
30084: FOR_DOWNTO
30085: IFFALSE 30248
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30087: LD_EXP 84
30091: PUSH
30092: LD_VAR 0 6
30096: ARRAY
30097: PUSH
30098: LD_VAR 0 5
30102: ARRAY
30103: PUSH
30104: LD_INT 1
30106: ARRAY
30107: PPUSH
30108: LD_EXP 84
30112: PUSH
30113: LD_VAR 0 6
30117: ARRAY
30118: PUSH
30119: LD_VAR 0 5
30123: ARRAY
30124: PUSH
30125: LD_INT 2
30127: ARRAY
30128: PPUSH
30129: LD_VAR 0 2
30133: PPUSH
30134: LD_VAR 0 3
30138: PPUSH
30139: CALL_OW 298
30143: PUSH
30144: LD_INT 6
30146: LESS
30147: IFFALSE 30246
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30149: LD_EXP 84
30153: PUSH
30154: LD_VAR 0 6
30158: ARRAY
30159: PUSH
30160: LD_VAR 0 5
30164: ARRAY
30165: PUSH
30166: LD_INT 1
30168: ARRAY
30169: PPUSH
30170: LD_EXP 84
30174: PUSH
30175: LD_VAR 0 6
30179: ARRAY
30180: PUSH
30181: LD_VAR 0 5
30185: ARRAY
30186: PUSH
30187: LD_INT 2
30189: ARRAY
30190: PPUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: CALL_OW 255
30200: PPUSH
30201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30205: LD_ADDR_EXP 84
30209: PUSH
30210: LD_EXP 84
30214: PPUSH
30215: LD_VAR 0 6
30219: PPUSH
30220: LD_EXP 84
30224: PUSH
30225: LD_VAR 0 6
30229: ARRAY
30230: PPUSH
30231: LD_VAR 0 5
30235: PPUSH
30236: CALL_OW 3
30240: PPUSH
30241: CALL_OW 1
30245: ST_TO_ADDR
// end ; end ;
30246: GO 30084
30248: POP
30249: POP
// end ;
30250: LD_VAR 0 4
30254: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30255: LD_INT 0
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30266: LD_VAR 0 1
30270: PPUSH
30271: CALL_OW 264
30275: PUSH
30276: LD_INT 81
30278: EQUAL
30279: NOT
30280: PUSH
30281: LD_VAR 0 1
30285: PUSH
30286: LD_EXP 83
30290: IN
30291: NOT
30292: OR
30293: IFFALSE 30297
// exit ;
30295: GO 30619
// index := GetElementIndex ( minersList , unit ) ;
30297: LD_ADDR_VAR 0 6
30301: PUSH
30302: LD_EXP 83
30306: PPUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL 35791 0 2
30316: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30317: LD_ADDR_VAR 0 8
30321: PUSH
30322: LD_EXP 85
30326: PUSH
30327: LD_EXP 84
30331: PUSH
30332: LD_VAR 0 6
30336: ARRAY
30337: MINUS
30338: ST_TO_ADDR
// if not minesFreeAmount then
30339: LD_VAR 0 8
30343: NOT
30344: IFFALSE 30348
// exit ;
30346: GO 30619
// tmp := [ ] ;
30348: LD_ADDR_VAR 0 7
30352: PUSH
30353: EMPTY
30354: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30355: LD_ADDR_VAR 0 5
30359: PUSH
30360: DOUBLE
30361: LD_INT 1
30363: DEC
30364: ST_TO_ADDR
30365: LD_VAR 0 8
30369: PUSH
30370: FOR_TO
30371: IFFALSE 30566
// begin _d := rand ( 0 , 5 ) ;
30373: LD_ADDR_VAR 0 11
30377: PUSH
30378: LD_INT 0
30380: PPUSH
30381: LD_INT 5
30383: PPUSH
30384: CALL_OW 12
30388: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30389: LD_ADDR_VAR 0 12
30393: PUSH
30394: LD_INT 2
30396: PPUSH
30397: LD_INT 6
30399: PPUSH
30400: CALL_OW 12
30404: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30405: LD_ADDR_VAR 0 9
30409: PUSH
30410: LD_VAR 0 2
30414: PPUSH
30415: LD_VAR 0 11
30419: PPUSH
30420: LD_VAR 0 12
30424: PPUSH
30425: CALL_OW 272
30429: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30430: LD_ADDR_VAR 0 10
30434: PUSH
30435: LD_VAR 0 3
30439: PPUSH
30440: LD_VAR 0 11
30444: PPUSH
30445: LD_VAR 0 12
30449: PPUSH
30450: CALL_OW 273
30454: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30455: LD_VAR 0 9
30459: PPUSH
30460: LD_VAR 0 10
30464: PPUSH
30465: CALL_OW 488
30469: PUSH
30470: LD_VAR 0 9
30474: PUSH
30475: LD_VAR 0 10
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_VAR 0 7
30488: IN
30489: NOT
30490: AND
30491: PUSH
30492: LD_VAR 0 9
30496: PPUSH
30497: LD_VAR 0 10
30501: PPUSH
30502: CALL_OW 458
30506: NOT
30507: AND
30508: IFFALSE 30550
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30510: LD_ADDR_VAR 0 7
30514: PUSH
30515: LD_VAR 0 7
30519: PPUSH
30520: LD_VAR 0 7
30524: PUSH
30525: LD_INT 1
30527: PLUS
30528: PPUSH
30529: LD_VAR 0 9
30533: PUSH
30534: LD_VAR 0 10
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PPUSH
30543: CALL_OW 1
30547: ST_TO_ADDR
30548: GO 30564
// i := i - 1 ;
30550: LD_ADDR_VAR 0 5
30554: PUSH
30555: LD_VAR 0 5
30559: PUSH
30560: LD_INT 1
30562: MINUS
30563: ST_TO_ADDR
// end ;
30564: GO 30370
30566: POP
30567: POP
// for i in tmp do
30568: LD_ADDR_VAR 0 5
30572: PUSH
30573: LD_VAR 0 7
30577: PUSH
30578: FOR_IN
30579: IFFALSE 30617
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_VAR 0 5
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: LD_VAR 0 5
30599: PUSH
30600: LD_INT 2
30602: ARRAY
30603: PPUSH
30604: CALL 29563 0 3
30608: NOT
30609: IFFALSE 30615
// exit ;
30611: POP
30612: POP
30613: GO 30619
30615: GO 30578
30617: POP
30618: POP
// end ;
30619: LD_VAR 0 4
30623: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
30628: PPUSH
30629: PPUSH
30630: PPUSH
30631: PPUSH
30632: PPUSH
// if not GetClass ( unit ) = class_sniper then
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 257
30642: PUSH
30643: LD_INT 5
30645: EQUAL
30646: NOT
30647: IFFALSE 30651
// exit ;
30649: GO 31039
// dist := 8 ;
30651: LD_ADDR_VAR 0 5
30655: PUSH
30656: LD_INT 8
30658: ST_TO_ADDR
// viewRange := 12 ;
30659: LD_ADDR_VAR 0 7
30663: PUSH
30664: LD_INT 12
30666: ST_TO_ADDR
// side := GetSide ( unit ) ;
30667: LD_ADDR_VAR 0 6
30671: PUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 255
30681: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30682: LD_INT 61
30684: PPUSH
30685: LD_VAR 0 6
30689: PPUSH
30690: CALL_OW 321
30694: PUSH
30695: LD_INT 2
30697: EQUAL
30698: IFFALSE 30708
// viewRange := 16 ;
30700: LD_ADDR_VAR 0 7
30704: PUSH
30705: LD_INT 16
30707: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30708: LD_VAR 0 1
30712: PPUSH
30713: LD_VAR 0 2
30717: PPUSH
30718: LD_VAR 0 3
30722: PPUSH
30723: CALL_OW 297
30727: PUSH
30728: LD_VAR 0 5
30732: GREATER
30733: IFFALSE 30812
// begin ComMoveXY ( unit , x , y ) ;
30735: LD_VAR 0 1
30739: PPUSH
30740: LD_VAR 0 2
30744: PPUSH
30745: LD_VAR 0 3
30749: PPUSH
30750: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30754: LD_INT 35
30756: PPUSH
30757: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30761: LD_VAR 0 1
30765: PPUSH
30766: LD_VAR 0 2
30770: PPUSH
30771: LD_VAR 0 3
30775: PPUSH
30776: CALL 67175 0 3
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 31039
// until GetDistUnitXY ( unit , x , y ) < dist ;
30785: LD_VAR 0 1
30789: PPUSH
30790: LD_VAR 0 2
30794: PPUSH
30795: LD_VAR 0 3
30799: PPUSH
30800: CALL_OW 297
30804: PUSH
30805: LD_VAR 0 5
30809: LESS
30810: IFFALSE 30754
// end ; ComTurnXY ( unit , x , y ) ;
30812: LD_VAR 0 1
30816: PPUSH
30817: LD_VAR 0 2
30821: PPUSH
30822: LD_VAR 0 3
30826: PPUSH
30827: CALL_OW 118
// wait ( 5 ) ;
30831: LD_INT 5
30833: PPUSH
30834: CALL_OW 67
// _d := GetDir ( unit ) ;
30838: LD_ADDR_VAR 0 10
30842: PUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 254
30852: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30853: LD_ADDR_VAR 0 8
30857: PUSH
30858: LD_VAR 0 1
30862: PPUSH
30863: CALL_OW 250
30867: PPUSH
30868: LD_VAR 0 10
30872: PPUSH
30873: LD_VAR 0 5
30877: PPUSH
30878: CALL_OW 272
30882: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30883: LD_ADDR_VAR 0 9
30887: PUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL_OW 251
30897: PPUSH
30898: LD_VAR 0 10
30902: PPUSH
30903: LD_VAR 0 5
30907: PPUSH
30908: CALL_OW 273
30912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30913: LD_VAR 0 8
30917: PPUSH
30918: LD_VAR 0 9
30922: PPUSH
30923: CALL_OW 488
30927: NOT
30928: IFFALSE 30932
// exit ;
30930: GO 31039
// ComAnimCustom ( unit , 1 ) ;
30932: LD_VAR 0 1
30936: PPUSH
30937: LD_INT 1
30939: PPUSH
30940: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30944: LD_VAR 0 8
30948: PPUSH
30949: LD_VAR 0 9
30953: PPUSH
30954: LD_VAR 0 6
30958: PPUSH
30959: LD_VAR 0 7
30963: PPUSH
30964: CALL_OW 330
// repeat wait ( 1 ) ;
30968: LD_INT 1
30970: PPUSH
30971: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 316
30984: PUSH
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 314
30994: OR
30995: PUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 302
31005: NOT
31006: OR
31007: PUSH
31008: LD_VAR 0 1
31012: PPUSH
31013: CALL_OW 301
31017: OR
31018: IFFALSE 30968
// RemoveSeeing ( _x , _y , side ) ;
31020: LD_VAR 0 8
31024: PPUSH
31025: LD_VAR 0 9
31029: PPUSH
31030: LD_VAR 0 6
31034: PPUSH
31035: CALL_OW 331
// end ; end_of_file
31039: LD_VAR 0 4
31043: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31044: LD_INT 0
31046: PPUSH
31047: PPUSH
// if exist_mode then
31048: LD_VAR 0 2
31052: IFFALSE 31077
// unit := CreateCharacter ( prefix & ident ) else
31054: LD_ADDR_VAR 0 5
31058: PUSH
31059: LD_VAR 0 3
31063: PUSH
31064: LD_VAR 0 1
31068: STR
31069: PPUSH
31070: CALL_OW 34
31074: ST_TO_ADDR
31075: GO 31092
// unit := NewCharacter ( ident ) ;
31077: LD_ADDR_VAR 0 5
31081: PUSH
31082: LD_VAR 0 1
31086: PPUSH
31087: CALL_OW 25
31091: ST_TO_ADDR
// result := unit ;
31092: LD_ADDR_VAR 0 4
31096: PUSH
31097: LD_VAR 0 5
31101: ST_TO_ADDR
// end ;
31102: LD_VAR 0 4
31106: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31107: LD_INT 0
31109: PPUSH
31110: PPUSH
// if not side or not nation then
31111: LD_VAR 0 1
31115: NOT
31116: PUSH
31117: LD_VAR 0 2
31121: NOT
31122: OR
31123: IFFALSE 31127
// exit ;
31125: GO 31895
// case nation of nation_american :
31127: LD_VAR 0 2
31131: PUSH
31132: LD_INT 1
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31354
31140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31141: LD_ADDR_VAR 0 4
31145: PUSH
31146: LD_INT 35
31148: PUSH
31149: LD_INT 45
31151: PUSH
31152: LD_INT 46
31154: PUSH
31155: LD_INT 47
31157: PUSH
31158: LD_INT 82
31160: PUSH
31161: LD_INT 83
31163: PUSH
31164: LD_INT 84
31166: PUSH
31167: LD_INT 85
31169: PUSH
31170: LD_INT 86
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 6
31181: PUSH
31182: LD_INT 15
31184: PUSH
31185: LD_INT 16
31187: PUSH
31188: LD_INT 7
31190: PUSH
31191: LD_INT 12
31193: PUSH
31194: LD_INT 13
31196: PUSH
31197: LD_INT 10
31199: PUSH
31200: LD_INT 14
31202: PUSH
31203: LD_INT 20
31205: PUSH
31206: LD_INT 21
31208: PUSH
31209: LD_INT 22
31211: PUSH
31212: LD_INT 25
31214: PUSH
31215: LD_INT 32
31217: PUSH
31218: LD_INT 27
31220: PUSH
31221: LD_INT 36
31223: PUSH
31224: LD_INT 69
31226: PUSH
31227: LD_INT 39
31229: PUSH
31230: LD_INT 34
31232: PUSH
31233: LD_INT 40
31235: PUSH
31236: LD_INT 48
31238: PUSH
31239: LD_INT 49
31241: PUSH
31242: LD_INT 50
31244: PUSH
31245: LD_INT 51
31247: PUSH
31248: LD_INT 52
31250: PUSH
31251: LD_INT 53
31253: PUSH
31254: LD_INT 54
31256: PUSH
31257: LD_INT 55
31259: PUSH
31260: LD_INT 56
31262: PUSH
31263: LD_INT 57
31265: PUSH
31266: LD_INT 58
31268: PUSH
31269: LD_INT 59
31271: PUSH
31272: LD_INT 60
31274: PUSH
31275: LD_INT 61
31277: PUSH
31278: LD_INT 62
31280: PUSH
31281: LD_INT 80
31283: PUSH
31284: LD_INT 82
31286: PUSH
31287: LD_INT 83
31289: PUSH
31290: LD_INT 84
31292: PUSH
31293: LD_INT 85
31295: PUSH
31296: LD_INT 86
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
31352: GO 31819
31354: LD_INT 2
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 31588
31362: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31363: LD_ADDR_VAR 0 4
31367: PUSH
31368: LD_INT 35
31370: PUSH
31371: LD_INT 45
31373: PUSH
31374: LD_INT 46
31376: PUSH
31377: LD_INT 47
31379: PUSH
31380: LD_INT 82
31382: PUSH
31383: LD_INT 83
31385: PUSH
31386: LD_INT 84
31388: PUSH
31389: LD_INT 85
31391: PUSH
31392: LD_INT 87
31394: PUSH
31395: LD_INT 70
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 11
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: LD_INT 4
31409: PUSH
31410: LD_INT 5
31412: PUSH
31413: LD_INT 6
31415: PUSH
31416: LD_INT 15
31418: PUSH
31419: LD_INT 18
31421: PUSH
31422: LD_INT 7
31424: PUSH
31425: LD_INT 17
31427: PUSH
31428: LD_INT 8
31430: PUSH
31431: LD_INT 20
31433: PUSH
31434: LD_INT 21
31436: PUSH
31437: LD_INT 22
31439: PUSH
31440: LD_INT 72
31442: PUSH
31443: LD_INT 26
31445: PUSH
31446: LD_INT 69
31448: PUSH
31449: LD_INT 39
31451: PUSH
31452: LD_INT 40
31454: PUSH
31455: LD_INT 41
31457: PUSH
31458: LD_INT 42
31460: PUSH
31461: LD_INT 43
31463: PUSH
31464: LD_INT 48
31466: PUSH
31467: LD_INT 49
31469: PUSH
31470: LD_INT 50
31472: PUSH
31473: LD_INT 51
31475: PUSH
31476: LD_INT 52
31478: PUSH
31479: LD_INT 53
31481: PUSH
31482: LD_INT 54
31484: PUSH
31485: LD_INT 55
31487: PUSH
31488: LD_INT 56
31490: PUSH
31491: LD_INT 60
31493: PUSH
31494: LD_INT 61
31496: PUSH
31497: LD_INT 62
31499: PUSH
31500: LD_INT 66
31502: PUSH
31503: LD_INT 67
31505: PUSH
31506: LD_INT 68
31508: PUSH
31509: LD_INT 81
31511: PUSH
31512: LD_INT 82
31514: PUSH
31515: LD_INT 83
31517: PUSH
31518: LD_INT 84
31520: PUSH
31521: LD_INT 85
31523: PUSH
31524: LD_INT 87
31526: PUSH
31527: LD_INT 88
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
31586: GO 31819
31588: LD_INT 3
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31818
31596: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31597: LD_ADDR_VAR 0 4
31601: PUSH
31602: LD_INT 46
31604: PUSH
31605: LD_INT 47
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 82
31616: PUSH
31617: LD_INT 83
31619: PUSH
31620: LD_INT 84
31622: PUSH
31623: LD_INT 85
31625: PUSH
31626: LD_INT 86
31628: PUSH
31629: LD_INT 11
31631: PUSH
31632: LD_INT 9
31634: PUSH
31635: LD_INT 20
31637: PUSH
31638: LD_INT 19
31640: PUSH
31641: LD_INT 21
31643: PUSH
31644: LD_INT 24
31646: PUSH
31647: LD_INT 22
31649: PUSH
31650: LD_INT 25
31652: PUSH
31653: LD_INT 28
31655: PUSH
31656: LD_INT 29
31658: PUSH
31659: LD_INT 30
31661: PUSH
31662: LD_INT 31
31664: PUSH
31665: LD_INT 37
31667: PUSH
31668: LD_INT 38
31670: PUSH
31671: LD_INT 32
31673: PUSH
31674: LD_INT 27
31676: PUSH
31677: LD_INT 33
31679: PUSH
31680: LD_INT 69
31682: PUSH
31683: LD_INT 39
31685: PUSH
31686: LD_INT 34
31688: PUSH
31689: LD_INT 40
31691: PUSH
31692: LD_INT 71
31694: PUSH
31695: LD_INT 23
31697: PUSH
31698: LD_INT 44
31700: PUSH
31701: LD_INT 48
31703: PUSH
31704: LD_INT 49
31706: PUSH
31707: LD_INT 50
31709: PUSH
31710: LD_INT 51
31712: PUSH
31713: LD_INT 52
31715: PUSH
31716: LD_INT 53
31718: PUSH
31719: LD_INT 54
31721: PUSH
31722: LD_INT 55
31724: PUSH
31725: LD_INT 56
31727: PUSH
31728: LD_INT 57
31730: PUSH
31731: LD_INT 58
31733: PUSH
31734: LD_INT 59
31736: PUSH
31737: LD_INT 63
31739: PUSH
31740: LD_INT 64
31742: PUSH
31743: LD_INT 65
31745: PUSH
31746: LD_INT 82
31748: PUSH
31749: LD_INT 83
31751: PUSH
31752: LD_INT 84
31754: PUSH
31755: LD_INT 85
31757: PUSH
31758: LD_INT 86
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
31816: GO 31819
31818: POP
// if state > - 1 and state < 3 then
31819: LD_VAR 0 3
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: GREATER
31828: PUSH
31829: LD_VAR 0 3
31833: PUSH
31834: LD_INT 3
31836: LESS
31837: AND
31838: IFFALSE 31895
// for i in result do
31840: LD_ADDR_VAR 0 5
31844: PUSH
31845: LD_VAR 0 4
31849: PUSH
31850: FOR_IN
31851: IFFALSE 31893
// if GetTech ( i , side ) <> state then
31853: LD_VAR 0 5
31857: PPUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 321
31867: PUSH
31868: LD_VAR 0 3
31872: NONEQUAL
31873: IFFALSE 31891
// result := result diff i ;
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: LD_VAR 0 4
31884: PUSH
31885: LD_VAR 0 5
31889: DIFF
31890: ST_TO_ADDR
31891: GO 31850
31893: POP
31894: POP
// end ;
31895: LD_VAR 0 4
31899: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31900: LD_INT 0
31902: PPUSH
31903: PPUSH
31904: PPUSH
// result := true ;
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 1
31912: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_VAR 0 2
31922: PPUSH
31923: CALL_OW 480
31927: ST_TO_ADDR
// if not tmp then
31928: LD_VAR 0 5
31932: NOT
31933: IFFALSE 31937
// exit ;
31935: GO 31986
// for i in tmp do
31937: LD_ADDR_VAR 0 4
31941: PUSH
31942: LD_VAR 0 5
31946: PUSH
31947: FOR_IN
31948: IFFALSE 31984
// if GetTech ( i , side ) <> state_researched then
31950: LD_VAR 0 4
31954: PPUSH
31955: LD_VAR 0 1
31959: PPUSH
31960: CALL_OW 321
31964: PUSH
31965: LD_INT 2
31967: NONEQUAL
31968: IFFALSE 31982
// begin result := false ;
31970: LD_ADDR_VAR 0 3
31974: PUSH
31975: LD_INT 0
31977: ST_TO_ADDR
// exit ;
31978: POP
31979: POP
31980: GO 31986
// end ;
31982: GO 31947
31984: POP
31985: POP
// end ;
31986: LD_VAR 0 3
31990: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32006: LD_VAR 0 1
32010: NOT
32011: PUSH
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 257
32021: PUSH
32022: LD_INT 9
32024: NONEQUAL
32025: OR
32026: IFFALSE 32030
// exit ;
32028: GO 32603
// side := GetSide ( unit ) ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 255
32044: ST_TO_ADDR
// tech_space := tech_spacanom ;
32045: LD_ADDR_VAR 0 12
32049: PUSH
32050: LD_INT 29
32052: ST_TO_ADDR
// tech_time := tech_taurad ;
32053: LD_ADDR_VAR 0 13
32057: PUSH
32058: LD_INT 28
32060: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32061: LD_ADDR_VAR 0 11
32065: PUSH
32066: LD_VAR 0 1
32070: PPUSH
32071: CALL_OW 310
32075: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32076: LD_VAR 0 11
32080: PPUSH
32081: CALL_OW 247
32085: PUSH
32086: LD_INT 2
32088: EQUAL
32089: IFFALSE 32093
// exit ;
32091: GO 32603
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32093: LD_ADDR_VAR 0 8
32097: PUSH
32098: LD_INT 81
32100: PUSH
32101: LD_VAR 0 9
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: LD_INT 21
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PPUSH
32131: CALL_OW 69
32135: ST_TO_ADDR
// if not tmp then
32136: LD_VAR 0 8
32140: NOT
32141: IFFALSE 32145
// exit ;
32143: GO 32603
// if in_unit then
32145: LD_VAR 0 11
32149: IFFALSE 32173
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32151: LD_ADDR_VAR 0 10
32155: PUSH
32156: LD_VAR 0 8
32160: PPUSH
32161: LD_VAR 0 11
32165: PPUSH
32166: CALL_OW 74
32170: ST_TO_ADDR
32171: GO 32193
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32173: LD_ADDR_VAR 0 10
32177: PUSH
32178: LD_VAR 0 8
32182: PPUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: CALL_OW 74
32192: ST_TO_ADDR
// if not enemy then
32193: LD_VAR 0 10
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32603
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32202: LD_VAR 0 11
32206: PUSH
32207: LD_VAR 0 11
32211: PPUSH
32212: LD_VAR 0 10
32216: PPUSH
32217: CALL_OW 296
32221: PUSH
32222: LD_INT 13
32224: GREATER
32225: AND
32226: PUSH
32227: LD_VAR 0 1
32231: PPUSH
32232: LD_VAR 0 10
32236: PPUSH
32237: CALL_OW 296
32241: PUSH
32242: LD_INT 12
32244: GREATER
32245: OR
32246: IFFALSE 32250
// exit ;
32248: GO 32603
// missile := [ 1 ] ;
32250: LD_ADDR_VAR 0 14
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32261: LD_VAR 0 9
32265: PPUSH
32266: LD_VAR 0 12
32270: PPUSH
32271: CALL_OW 325
32275: IFFALSE 32304
// missile := Replace ( missile , missile + 1 , 2 ) ;
32277: LD_ADDR_VAR 0 14
32281: PUSH
32282: LD_VAR 0 14
32286: PPUSH
32287: LD_VAR 0 14
32291: PUSH
32292: LD_INT 1
32294: PLUS
32295: PPUSH
32296: LD_INT 2
32298: PPUSH
32299: CALL_OW 1
32303: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32304: LD_VAR 0 9
32308: PPUSH
32309: LD_VAR 0 13
32313: PPUSH
32314: CALL_OW 325
32318: PUSH
32319: LD_VAR 0 10
32323: PPUSH
32324: CALL_OW 255
32328: PPUSH
32329: LD_VAR 0 13
32333: PPUSH
32334: CALL_OW 325
32338: NOT
32339: AND
32340: IFFALSE 32369
// missile := Replace ( missile , missile + 1 , 3 ) ;
32342: LD_ADDR_VAR 0 14
32346: PUSH
32347: LD_VAR 0 14
32351: PPUSH
32352: LD_VAR 0 14
32356: PUSH
32357: LD_INT 1
32359: PLUS
32360: PPUSH
32361: LD_INT 3
32363: PPUSH
32364: CALL_OW 1
32368: ST_TO_ADDR
// if missile < 2 then
32369: LD_VAR 0 14
32373: PUSH
32374: LD_INT 2
32376: LESS
32377: IFFALSE 32381
// exit ;
32379: GO 32603
// x := GetX ( enemy ) ;
32381: LD_ADDR_VAR 0 4
32385: PUSH
32386: LD_VAR 0 10
32390: PPUSH
32391: CALL_OW 250
32395: ST_TO_ADDR
// y := GetY ( enemy ) ;
32396: LD_ADDR_VAR 0 5
32400: PUSH
32401: LD_VAR 0 10
32405: PPUSH
32406: CALL_OW 251
32410: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32411: LD_ADDR_VAR 0 6
32415: PUSH
32416: LD_VAR 0 4
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PPUSH
32425: LD_INT 1
32427: PPUSH
32428: CALL_OW 12
32432: PLUS
32433: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32434: LD_ADDR_VAR 0 7
32438: PUSH
32439: LD_VAR 0 5
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PPUSH
32448: LD_INT 1
32450: PPUSH
32451: CALL_OW 12
32455: PLUS
32456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32457: LD_VAR 0 6
32461: PPUSH
32462: LD_VAR 0 7
32466: PPUSH
32467: CALL_OW 488
32471: NOT
32472: IFFALSE 32494
// begin _x := x ;
32474: LD_ADDR_VAR 0 6
32478: PUSH
32479: LD_VAR 0 4
32483: ST_TO_ADDR
// _y := y ;
32484: LD_ADDR_VAR 0 7
32488: PUSH
32489: LD_VAR 0 5
32493: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_INT 1
32501: PPUSH
32502: LD_VAR 0 14
32506: PPUSH
32507: CALL_OW 12
32511: ST_TO_ADDR
// case i of 1 :
32512: LD_VAR 0 3
32516: PUSH
32517: LD_INT 1
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32542
32525: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32526: LD_VAR 0 1
32530: PPUSH
32531: LD_VAR 0 10
32535: PPUSH
32536: CALL_OW 115
32540: GO 32603
32542: LD_INT 2
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32572
32550: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32551: LD_VAR 0 1
32555: PPUSH
32556: LD_VAR 0 6
32560: PPUSH
32561: LD_VAR 0 7
32565: PPUSH
32566: CALL_OW 153
32570: GO 32603
32572: LD_INT 3
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32602
32580: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32581: LD_VAR 0 1
32585: PPUSH
32586: LD_VAR 0 6
32590: PPUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: CALL_OW 154
32600: GO 32603
32602: POP
// end ;
32603: LD_VAR 0 2
32607: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32608: LD_INT 0
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
32614: PPUSH
32615: PPUSH
// if not unit or not building then
32616: LD_VAR 0 1
32620: NOT
32621: PUSH
32622: LD_VAR 0 2
32626: NOT
32627: OR
32628: IFFALSE 32632
// exit ;
32630: GO 32790
// x := GetX ( building ) ;
32632: LD_ADDR_VAR 0 5
32636: PUSH
32637: LD_VAR 0 2
32641: PPUSH
32642: CALL_OW 250
32646: ST_TO_ADDR
// y := GetY ( building ) ;
32647: LD_ADDR_VAR 0 6
32651: PUSH
32652: LD_VAR 0 2
32656: PPUSH
32657: CALL_OW 251
32661: ST_TO_ADDR
// for i = 0 to 5 do
32662: LD_ADDR_VAR 0 4
32666: PUSH
32667: DOUBLE
32668: LD_INT 0
32670: DEC
32671: ST_TO_ADDR
32672: LD_INT 5
32674: PUSH
32675: FOR_TO
32676: IFFALSE 32788
// begin _x := ShiftX ( x , i , 3 ) ;
32678: LD_ADDR_VAR 0 7
32682: PUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: LD_VAR 0 4
32692: PPUSH
32693: LD_INT 3
32695: PPUSH
32696: CALL_OW 272
32700: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32701: LD_ADDR_VAR 0 8
32705: PUSH
32706: LD_VAR 0 6
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: LD_INT 3
32718: PPUSH
32719: CALL_OW 273
32723: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32724: LD_VAR 0 7
32728: PPUSH
32729: LD_VAR 0 8
32733: PPUSH
32734: CALL_OW 488
32738: NOT
32739: IFFALSE 32743
// continue ;
32741: GO 32675
// if HexInfo ( _x , _y ) = 0 then
32743: LD_VAR 0 7
32747: PPUSH
32748: LD_VAR 0 8
32752: PPUSH
32753: CALL_OW 428
32757: PUSH
32758: LD_INT 0
32760: EQUAL
32761: IFFALSE 32786
// begin ComMoveXY ( unit , _x , _y ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_VAR 0 7
32772: PPUSH
32773: LD_VAR 0 8
32777: PPUSH
32778: CALL_OW 111
// exit ;
32782: POP
32783: POP
32784: GO 32790
// end ; end ;
32786: GO 32675
32788: POP
32789: POP
// end ;
32790: LD_VAR 0 3
32794: RET
// export function ScanBase ( side , base_area ) ; begin
32795: LD_INT 0
32797: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: LD_VAR 0 2
32807: PPUSH
32808: LD_INT 81
32810: PUSH
32811: LD_VAR 0 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PPUSH
32820: CALL_OW 70
32824: ST_TO_ADDR
// end ;
32825: LD_VAR 0 3
32829: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
32835: PPUSH
// result := false ;
32836: LD_ADDR_VAR 0 2
32840: PUSH
32841: LD_INT 0
32843: ST_TO_ADDR
// side := GetSide ( unit ) ;
32844: LD_ADDR_VAR 0 3
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: CALL_OW 255
32858: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32859: LD_ADDR_VAR 0 4
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 248
32873: ST_TO_ADDR
// case nat of 1 :
32874: LD_VAR 0 4
32878: PUSH
32879: LD_INT 1
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32898
32887: POP
// tech := tech_lassight ; 2 :
32888: LD_ADDR_VAR 0 5
32892: PUSH
32893: LD_INT 12
32895: ST_TO_ADDR
32896: GO 32937
32898: LD_INT 2
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32917
32906: POP
// tech := tech_mortar ; 3 :
32907: LD_ADDR_VAR 0 5
32911: PUSH
32912: LD_INT 41
32914: ST_TO_ADDR
32915: GO 32937
32917: LD_INT 3
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32936
32925: POP
// tech := tech_bazooka ; end ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_INT 44
32933: ST_TO_ADDR
32934: GO 32937
32936: POP
// if Researched ( side , tech ) then
32937: LD_VAR 0 3
32941: PPUSH
32942: LD_VAR 0 5
32946: PPUSH
32947: CALL_OW 325
32951: IFFALSE 32978
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32953: LD_ADDR_VAR 0 2
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 8
32963: PUSH
32964: LD_INT 9
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: PUSH
32972: LD_VAR 0 4
32976: ARRAY
32977: ST_TO_ADDR
// end ;
32978: LD_VAR 0 2
32982: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32983: LD_INT 0
32985: PPUSH
32986: PPUSH
32987: PPUSH
// if not mines then
32988: LD_VAR 0 2
32992: NOT
32993: IFFALSE 32997
// exit ;
32995: GO 33141
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32997: LD_ADDR_VAR 0 5
33001: PUSH
33002: LD_INT 81
33004: PUSH
33005: LD_VAR 0 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 21
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PPUSH
33035: CALL_OW 69
33039: ST_TO_ADDR
// for i in mines do
33040: LD_ADDR_VAR 0 4
33044: PUSH
33045: LD_VAR 0 2
33049: PUSH
33050: FOR_IN
33051: IFFALSE 33139
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33053: LD_VAR 0 4
33057: PUSH
33058: LD_INT 1
33060: ARRAY
33061: PPUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_INT 2
33069: ARRAY
33070: PPUSH
33071: CALL_OW 458
33075: NOT
33076: IFFALSE 33080
// continue ;
33078: GO 33050
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33080: LD_VAR 0 4
33084: PUSH
33085: LD_INT 1
33087: ARRAY
33088: PPUSH
33089: LD_VAR 0 4
33093: PUSH
33094: LD_INT 2
33096: ARRAY
33097: PPUSH
33098: CALL_OW 428
33102: PUSH
33103: LD_VAR 0 5
33107: IN
33108: IFFALSE 33137
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PPUSH
33119: LD_VAR 0 4
33123: PUSH
33124: LD_INT 2
33126: ARRAY
33127: PPUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL_OW 456
// end ;
33137: GO 33050
33139: POP
33140: POP
// end ;
33141: LD_VAR 0 3
33145: RET
// export function Count ( array ) ; begin
33146: LD_INT 0
33148: PPUSH
// result := array + 0 ;
33149: LD_ADDR_VAR 0 2
33153: PUSH
33154: LD_VAR 0 1
33158: PUSH
33159: LD_INT 0
33161: PLUS
33162: ST_TO_ADDR
// end ;
33163: LD_VAR 0 2
33167: RET
// export function IsEmpty ( building ) ; begin
33168: LD_INT 0
33170: PPUSH
// if not building then
33171: LD_VAR 0 1
33175: NOT
33176: IFFALSE 33180
// exit ;
33178: GO 33223
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33180: LD_ADDR_VAR 0 2
33184: PUSH
33185: LD_VAR 0 1
33189: PUSH
33190: LD_INT 22
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 255
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 58
33209: PUSH
33210: EMPTY
33211: LIST
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PPUSH
33217: CALL_OW 69
33221: IN
33222: ST_TO_ADDR
// end ;
33223: LD_VAR 0 2
33227: RET
// export function IsNotFull ( building ) ; var places ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
// if not building then
33232: LD_VAR 0 1
33236: NOT
33237: IFFALSE 33241
// exit ;
33239: GO 33269
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33241: LD_ADDR_VAR 0 2
33245: PUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_INT 3
33253: PUSH
33254: LD_INT 62
33256: PUSH
33257: EMPTY
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PPUSH
33264: CALL_OW 72
33268: ST_TO_ADDR
// end ;
33269: LD_VAR 0 2
33273: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33274: LD_INT 0
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
// tmp := [ ] ;
33280: LD_ADDR_VAR 0 3
33284: PUSH
33285: EMPTY
33286: ST_TO_ADDR
// list := [ ] ;
33287: LD_ADDR_VAR 0 5
33291: PUSH
33292: EMPTY
33293: ST_TO_ADDR
// for i = 16 to 25 do
33294: LD_ADDR_VAR 0 4
33298: PUSH
33299: DOUBLE
33300: LD_INT 16
33302: DEC
33303: ST_TO_ADDR
33304: LD_INT 25
33306: PUSH
33307: FOR_TO
33308: IFFALSE 33381
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_VAR 0 3
33319: PUSH
33320: LD_INT 22
33322: PUSH
33323: LD_VAR 0 1
33327: PPUSH
33328: CALL_OW 255
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 91
33339: PUSH
33340: LD_VAR 0 1
33344: PUSH
33345: LD_INT 6
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 30
33355: PUSH
33356: LD_VAR 0 4
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: PPUSH
33373: CALL_OW 69
33377: ADD
33378: ST_TO_ADDR
33379: GO 33307
33381: POP
33382: POP
// for i = 1 to tmp do
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_VAR 0 3
33397: PUSH
33398: FOR_TO
33399: IFFALSE 33487
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33401: LD_ADDR_VAR 0 5
33405: PUSH
33406: LD_VAR 0 5
33410: PUSH
33411: LD_VAR 0 3
33415: PUSH
33416: LD_VAR 0 4
33420: ARRAY
33421: PPUSH
33422: CALL_OW 266
33426: PUSH
33427: LD_VAR 0 3
33431: PUSH
33432: LD_VAR 0 4
33436: ARRAY
33437: PPUSH
33438: CALL_OW 250
33442: PUSH
33443: LD_VAR 0 3
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PPUSH
33454: CALL_OW 251
33458: PUSH
33459: LD_VAR 0 3
33463: PUSH
33464: LD_VAR 0 4
33468: ARRAY
33469: PPUSH
33470: CALL_OW 254
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: PUSH
33481: EMPTY
33482: LIST
33483: ADD
33484: ST_TO_ADDR
33485: GO 33398
33487: POP
33488: POP
// result := list ;
33489: LD_ADDR_VAR 0 2
33493: PUSH
33494: LD_VAR 0 5
33498: ST_TO_ADDR
// end ;
33499: LD_VAR 0 2
33503: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
// if not factory then
33513: LD_VAR 0 1
33517: NOT
33518: IFFALSE 33522
// exit ;
33520: GO 34115
// if control = control_apeman then
33522: LD_VAR 0 4
33526: PUSH
33527: LD_INT 5
33529: EQUAL
33530: IFFALSE 33639
// begin tmp := UnitsInside ( factory ) ;
33532: LD_ADDR_VAR 0 8
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 313
33546: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33547: LD_VAR 0 8
33551: PPUSH
33552: LD_INT 25
33554: PUSH
33555: LD_INT 12
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PPUSH
33562: CALL_OW 72
33566: NOT
33567: IFFALSE 33577
// control := control_manual ;
33569: LD_ADDR_VAR 0 4
33573: PUSH
33574: LD_INT 1
33576: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33577: LD_ADDR_VAR 0 8
33581: PUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL 33274 0 1
33591: ST_TO_ADDR
// if tmp then
33592: LD_VAR 0 8
33596: IFFALSE 33639
// begin for i in tmp do
33598: LD_ADDR_VAR 0 7
33602: PUSH
33603: LD_VAR 0 8
33607: PUSH
33608: FOR_IN
33609: IFFALSE 33637
// if i [ 1 ] = b_ext_radio then
33611: LD_VAR 0 7
33615: PUSH
33616: LD_INT 1
33618: ARRAY
33619: PUSH
33620: LD_INT 22
33622: EQUAL
33623: IFFALSE 33635
// begin control := control_remote ;
33625: LD_ADDR_VAR 0 4
33629: PUSH
33630: LD_INT 2
33632: ST_TO_ADDR
// break ;
33633: GO 33637
// end ;
33635: GO 33608
33637: POP
33638: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33639: LD_VAR 0 1
33643: PPUSH
33644: LD_VAR 0 2
33648: PPUSH
33649: LD_VAR 0 3
33653: PPUSH
33654: LD_VAR 0 4
33658: PPUSH
33659: LD_VAR 0 5
33663: PPUSH
33664: CALL_OW 448
33668: IFFALSE 33703
// begin result := [ chassis , engine , control , weapon ] ;
33670: LD_ADDR_VAR 0 6
33674: PUSH
33675: LD_VAR 0 2
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_VAR 0 4
33689: PUSH
33690: LD_VAR 0 5
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
// exit ;
33701: GO 34115
// end ; _chassis := AvailableChassisList ( factory ) ;
33703: LD_ADDR_VAR 0 9
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 475
33717: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33718: LD_ADDR_VAR 0 11
33722: PUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: CALL_OW 476
33732: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33733: LD_ADDR_VAR 0 12
33737: PUSH
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL_OW 477
33747: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33748: LD_ADDR_VAR 0 10
33752: PUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 478
33762: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33763: LD_VAR 0 9
33767: NOT
33768: PUSH
33769: LD_VAR 0 11
33773: NOT
33774: OR
33775: PUSH
33776: LD_VAR 0 12
33780: NOT
33781: OR
33782: PUSH
33783: LD_VAR 0 10
33787: NOT
33788: OR
33789: IFFALSE 33824
// begin result := [ chassis , engine , control , weapon ] ;
33791: LD_ADDR_VAR 0 6
33795: PUSH
33796: LD_VAR 0 2
33800: PUSH
33801: LD_VAR 0 3
33805: PUSH
33806: LD_VAR 0 4
33810: PUSH
33811: LD_VAR 0 5
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// exit ;
33822: GO 34115
// end ; if not chassis in _chassis then
33824: LD_VAR 0 2
33828: PUSH
33829: LD_VAR 0 9
33833: IN
33834: NOT
33835: IFFALSE 33861
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33837: LD_ADDR_VAR 0 2
33841: PUSH
33842: LD_VAR 0 9
33846: PUSH
33847: LD_INT 1
33849: PPUSH
33850: LD_VAR 0 9
33854: PPUSH
33855: CALL_OW 12
33859: ARRAY
33860: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33861: LD_VAR 0 2
33865: PPUSH
33866: LD_VAR 0 3
33870: PPUSH
33871: CALL 34120 0 2
33875: NOT
33876: IFFALSE 33935
// repeat engine := _engine [ 1 ] ;
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_VAR 0 11
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33892: LD_ADDR_VAR 0 11
33896: PUSH
33897: LD_VAR 0 11
33901: PPUSH
33902: LD_INT 1
33904: PPUSH
33905: CALL_OW 3
33909: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33910: LD_VAR 0 2
33914: PPUSH
33915: LD_VAR 0 3
33919: PPUSH
33920: CALL 34120 0 2
33924: PUSH
33925: LD_VAR 0 11
33929: PUSH
33930: EMPTY
33931: EQUAL
33932: OR
33933: IFFALSE 33878
// if not control in _control then
33935: LD_VAR 0 4
33939: PUSH
33940: LD_VAR 0 12
33944: IN
33945: NOT
33946: IFFALSE 33972
// control := _control [ rand ( 1 , _control ) ] ;
33948: LD_ADDR_VAR 0 4
33952: PUSH
33953: LD_VAR 0 12
33957: PUSH
33958: LD_INT 1
33960: PPUSH
33961: LD_VAR 0 12
33965: PPUSH
33966: CALL_OW 12
33970: ARRAY
33971: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_VAR 0 5
33981: PPUSH
33982: CALL 34340 0 2
33986: NOT
33987: IFFALSE 34046
// repeat weapon := _weapon [ 1 ] ;
33989: LD_ADDR_VAR 0 5
33993: PUSH
33994: LD_VAR 0 10
33998: PUSH
33999: LD_INT 1
34001: ARRAY
34002: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34003: LD_ADDR_VAR 0 10
34007: PUSH
34008: LD_VAR 0 10
34012: PPUSH
34013: LD_INT 1
34015: PPUSH
34016: CALL_OW 3
34020: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34021: LD_VAR 0 2
34025: PPUSH
34026: LD_VAR 0 5
34030: PPUSH
34031: CALL 34340 0 2
34035: PUSH
34036: LD_VAR 0 10
34040: PUSH
34041: EMPTY
34042: EQUAL
34043: OR
34044: IFFALSE 33989
// result := [ ] ;
34046: LD_ADDR_VAR 0 6
34050: PUSH
34051: EMPTY
34052: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34053: LD_VAR 0 1
34057: PPUSH
34058: LD_VAR 0 2
34062: PPUSH
34063: LD_VAR 0 3
34067: PPUSH
34068: LD_VAR 0 4
34072: PPUSH
34073: LD_VAR 0 5
34077: PPUSH
34078: CALL_OW 448
34082: IFFALSE 34115
// result := [ chassis , engine , control , weapon ] ;
34084: LD_ADDR_VAR 0 6
34088: PUSH
34089: LD_VAR 0 2
34093: PUSH
34094: LD_VAR 0 3
34098: PUSH
34099: LD_VAR 0 4
34103: PUSH
34104: LD_VAR 0 5
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
// end ;
34115: LD_VAR 0 6
34119: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34120: LD_INT 0
34122: PPUSH
// if not chassis or not engine then
34123: LD_VAR 0 1
34127: NOT
34128: PUSH
34129: LD_VAR 0 2
34133: NOT
34134: OR
34135: IFFALSE 34139
// exit ;
34137: GO 34335
// case engine of engine_solar :
34139: LD_VAR 0 2
34143: PUSH
34144: LD_INT 2
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34152
34150: GO 34190
34152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34153: LD_ADDR_VAR 0 3
34157: PUSH
34158: LD_INT 11
34160: PUSH
34161: LD_INT 12
34163: PUSH
34164: LD_INT 13
34166: PUSH
34167: LD_INT 14
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
34188: GO 34319
34190: LD_INT 1
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34260
34198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 11
34206: PUSH
34207: LD_INT 12
34209: PUSH
34210: LD_INT 13
34212: PUSH
34213: LD_INT 14
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 23
34236: PUSH
34237: LD_INT 22
34239: PUSH
34240: LD_INT 24
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
34258: GO 34319
34260: LD_INT 3
34262: DOUBLE
34263: EQUAL
34264: IFTRUE 34268
34266: GO 34318
34268: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_INT 13
34276: PUSH
34277: LD_INT 14
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: LD_INT 4
34288: PUSH
34289: LD_INT 5
34291: PUSH
34292: LD_INT 21
34294: PUSH
34295: LD_INT 22
34297: PUSH
34298: LD_INT 23
34300: PUSH
34301: LD_INT 24
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34319
34318: POP
// result := ( chassis in result ) ;
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_VAR 0 1
34328: PUSH
34329: LD_VAR 0 3
34333: IN
34334: ST_TO_ADDR
// end ;
34335: LD_VAR 0 3
34339: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34340: LD_INT 0
34342: PPUSH
// if not chassis or not weapon then
34343: LD_VAR 0 1
34347: NOT
34348: PUSH
34349: LD_VAR 0 2
34353: NOT
34354: OR
34355: IFFALSE 34359
// exit ;
34357: GO 35419
// case weapon of us_machine_gun :
34359: LD_VAR 0 2
34363: PUSH
34364: LD_INT 2
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34372
34370: GO 34402
34372: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34373: LD_ADDR_VAR 0 3
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: LD_INT 4
34389: PUSH
34390: LD_INT 5
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
34400: GO 35403
34402: LD_INT 3
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34440
34410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
34438: GO 35403
34440: LD_INT 11
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34448
34446: GO 34478
34448: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34449: LD_ADDR_VAR 0 3
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 3
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: LD_INT 5
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 35403
34478: LD_INT 4
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34512
34486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: LD_INT 5
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: ST_TO_ADDR
34510: GO 35403
34512: LD_INT 5
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34546
34520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 4
34534: PUSH
34535: LD_INT 5
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
34544: GO 35403
34546: LD_INT 9
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34554
34552: GO 34580
34554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34555: LD_ADDR_VAR 0 3
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: LD_INT 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
34578: GO 35403
34580: LD_INT 7
34582: DOUBLE
34583: EQUAL
34584: IFTRUE 34588
34586: GO 34614
34588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 4
34602: PUSH
34603: LD_INT 5
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: ST_TO_ADDR
34612: GO 35403
34614: LD_INT 12
34616: DOUBLE
34617: EQUAL
34618: IFTRUE 34622
34620: GO 34648
34622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34623: LD_ADDR_VAR 0 3
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 5
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
34646: GO 35403
34648: LD_INT 13
34650: DOUBLE
34651: EQUAL
34652: IFTRUE 34656
34654: GO 34682
34656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: LD_INT 4
34670: PUSH
34671: LD_INT 5
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
34680: GO 35403
34682: LD_INT 14
34684: DOUBLE
34685: EQUAL
34686: IFTRUE 34690
34688: GO 34708
34690: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34691: LD_ADDR_VAR 0 3
34695: PUSH
34696: LD_INT 4
34698: PUSH
34699: LD_INT 5
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: ST_TO_ADDR
34706: GO 35403
34708: LD_INT 6
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34734
34716: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 4
34724: PUSH
34725: LD_INT 5
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: ST_TO_ADDR
34732: GO 35403
34734: LD_INT 10
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34760
34742: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_INT 4
34750: PUSH
34751: LD_INT 5
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: ST_TO_ADDR
34758: GO 35403
34760: LD_INT 22
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34794
34768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_INT 11
34776: PUSH
34777: LD_INT 12
34779: PUSH
34780: LD_INT 13
34782: PUSH
34783: LD_INT 14
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: ST_TO_ADDR
34792: GO 35403
34794: LD_INT 23
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34828
34802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 11
34810: PUSH
34811: LD_INT 12
34813: PUSH
34814: LD_INT 13
34816: PUSH
34817: LD_INT 14
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
34826: GO 35403
34828: LD_INT 24
34830: DOUBLE
34831: EQUAL
34832: IFTRUE 34836
34834: GO 34862
34836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34837: LD_ADDR_VAR 0 3
34841: PUSH
34842: LD_INT 11
34844: PUSH
34845: LD_INT 12
34847: PUSH
34848: LD_INT 13
34850: PUSH
34851: LD_INT 14
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
34860: GO 35403
34862: LD_INT 30
34864: DOUBLE
34865: EQUAL
34866: IFTRUE 34870
34868: GO 34896
34870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34871: LD_ADDR_VAR 0 3
34875: PUSH
34876: LD_INT 11
34878: PUSH
34879: LD_INT 12
34881: PUSH
34882: LD_INT 13
34884: PUSH
34885: LD_INT 14
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: ST_TO_ADDR
34894: GO 35403
34896: LD_INT 25
34898: DOUBLE
34899: EQUAL
34900: IFTRUE 34904
34902: GO 34922
34904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34905: LD_ADDR_VAR 0 3
34909: PUSH
34910: LD_INT 13
34912: PUSH
34913: LD_INT 14
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: ST_TO_ADDR
34920: GO 35403
34922: LD_INT 27
34924: DOUBLE
34925: EQUAL
34926: IFTRUE 34930
34928: GO 34948
34930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34931: LD_ADDR_VAR 0 3
34935: PUSH
34936: LD_INT 13
34938: PUSH
34939: LD_INT 14
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: ST_TO_ADDR
34946: GO 35403
34948: LD_INT 92
34950: DOUBLE
34951: EQUAL
34952: IFTRUE 34956
34954: GO 34982
34956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_INT 11
34964: PUSH
34965: LD_INT 12
34967: PUSH
34968: LD_INT 13
34970: PUSH
34971: LD_INT 14
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
34980: GO 35403
34982: LD_INT 28
34984: DOUBLE
34985: EQUAL
34986: IFTRUE 34990
34988: GO 35008
34990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34991: LD_ADDR_VAR 0 3
34995: PUSH
34996: LD_INT 13
34998: PUSH
34999: LD_INT 14
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: ST_TO_ADDR
35006: GO 35403
35008: LD_INT 29
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35034
35016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 13
35024: PUSH
35025: LD_INT 14
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: ST_TO_ADDR
35032: GO 35403
35034: LD_INT 31
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35060
35042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_INT 13
35050: PUSH
35051: LD_INT 14
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: ST_TO_ADDR
35058: GO 35403
35060: LD_INT 26
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35068
35066: GO 35086
35068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35069: LD_ADDR_VAR 0 3
35073: PUSH
35074: LD_INT 13
35076: PUSH
35077: LD_INT 14
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: ST_TO_ADDR
35084: GO 35403
35086: LD_INT 42
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 35120
35094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_INT 21
35102: PUSH
35103: LD_INT 22
35105: PUSH
35106: LD_INT 23
35108: PUSH
35109: LD_INT 24
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: ST_TO_ADDR
35118: GO 35403
35120: LD_INT 43
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35154
35128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35129: LD_ADDR_VAR 0 3
35133: PUSH
35134: LD_INT 21
35136: PUSH
35137: LD_INT 22
35139: PUSH
35140: LD_INT 23
35142: PUSH
35143: LD_INT 24
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
35152: GO 35403
35154: LD_INT 44
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35188
35162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_INT 21
35170: PUSH
35171: LD_INT 22
35173: PUSH
35174: LD_INT 23
35176: PUSH
35177: LD_INT 24
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
35186: GO 35403
35188: LD_INT 45
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35196
35194: GO 35222
35196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35197: LD_ADDR_VAR 0 3
35201: PUSH
35202: LD_INT 21
35204: PUSH
35205: LD_INT 22
35207: PUSH
35208: LD_INT 23
35210: PUSH
35211: LD_INT 24
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
35220: GO 35403
35222: LD_INT 49
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35230
35228: GO 35256
35230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35231: LD_ADDR_VAR 0 3
35235: PUSH
35236: LD_INT 21
35238: PUSH
35239: LD_INT 22
35241: PUSH
35242: LD_INT 23
35244: PUSH
35245: LD_INT 24
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
35254: GO 35403
35256: LD_INT 51
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35264
35262: GO 35290
35264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_INT 21
35272: PUSH
35273: LD_INT 22
35275: PUSH
35276: LD_INT 23
35278: PUSH
35279: LD_INT 24
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: ST_TO_ADDR
35288: GO 35403
35290: LD_INT 52
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35298
35296: GO 35324
35298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35299: LD_ADDR_VAR 0 3
35303: PUSH
35304: LD_INT 21
35306: PUSH
35307: LD_INT 22
35309: PUSH
35310: LD_INT 23
35312: PUSH
35313: LD_INT 24
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: ST_TO_ADDR
35322: GO 35403
35324: LD_INT 53
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35332
35330: GO 35350
35332: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 23
35340: PUSH
35341: LD_INT 24
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: ST_TO_ADDR
35348: GO 35403
35350: LD_INT 46
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35358
35356: GO 35376
35358: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 23
35366: PUSH
35367: LD_INT 24
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: ST_TO_ADDR
35374: GO 35403
35376: LD_INT 47
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35402
35384: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35385: LD_ADDR_VAR 0 3
35389: PUSH
35390: LD_INT 23
35392: PUSH
35393: LD_INT 24
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: ST_TO_ADDR
35400: GO 35403
35402: POP
// result := ( chassis in result ) ;
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_VAR 0 1
35412: PUSH
35413: LD_VAR 0 3
35417: IN
35418: ST_TO_ADDR
// end ;
35419: LD_VAR 0 3
35423: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35424: LD_INT 0
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
// result := array ;
35433: LD_ADDR_VAR 0 5
35437: PUSH
35438: LD_VAR 0 1
35442: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35443: LD_VAR 0 1
35447: NOT
35448: PUSH
35449: LD_VAR 0 2
35453: NOT
35454: OR
35455: PUSH
35456: LD_VAR 0 3
35460: NOT
35461: OR
35462: PUSH
35463: LD_VAR 0 2
35467: PUSH
35468: LD_VAR 0 1
35472: GREATER
35473: OR
35474: PUSH
35475: LD_VAR 0 3
35479: PUSH
35480: LD_VAR 0 1
35484: GREATER
35485: OR
35486: IFFALSE 35490
// exit ;
35488: GO 35786
// if direction then
35490: LD_VAR 0 4
35494: IFFALSE 35558
// begin d := 1 ;
35496: LD_ADDR_VAR 0 9
35500: PUSH
35501: LD_INT 1
35503: ST_TO_ADDR
// if i_from > i_to then
35504: LD_VAR 0 2
35508: PUSH
35509: LD_VAR 0 3
35513: GREATER
35514: IFFALSE 35540
// length := ( array - i_from ) + i_to else
35516: LD_ADDR_VAR 0 11
35520: PUSH
35521: LD_VAR 0 1
35525: PUSH
35526: LD_VAR 0 2
35530: MINUS
35531: PUSH
35532: LD_VAR 0 3
35536: PLUS
35537: ST_TO_ADDR
35538: GO 35556
// length := i_to - i_from ;
35540: LD_ADDR_VAR 0 11
35544: PUSH
35545: LD_VAR 0 3
35549: PUSH
35550: LD_VAR 0 2
35554: MINUS
35555: ST_TO_ADDR
// end else
35556: GO 35619
// begin d := - 1 ;
35558: LD_ADDR_VAR 0 9
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: ST_TO_ADDR
// if i_from > i_to then
35567: LD_VAR 0 2
35571: PUSH
35572: LD_VAR 0 3
35576: GREATER
35577: IFFALSE 35597
// length := i_from - i_to else
35579: LD_ADDR_VAR 0 11
35583: PUSH
35584: LD_VAR 0 2
35588: PUSH
35589: LD_VAR 0 3
35593: MINUS
35594: ST_TO_ADDR
35595: GO 35619
// length := ( array - i_to ) + i_from ;
35597: LD_ADDR_VAR 0 11
35601: PUSH
35602: LD_VAR 0 1
35606: PUSH
35607: LD_VAR 0 3
35611: MINUS
35612: PUSH
35613: LD_VAR 0 2
35617: PLUS
35618: ST_TO_ADDR
// end ; if not length then
35619: LD_VAR 0 11
35623: NOT
35624: IFFALSE 35628
// exit ;
35626: GO 35786
// tmp := array ;
35628: LD_ADDR_VAR 0 10
35632: PUSH
35633: LD_VAR 0 1
35637: ST_TO_ADDR
// for i = 1 to length do
35638: LD_ADDR_VAR 0 6
35642: PUSH
35643: DOUBLE
35644: LD_INT 1
35646: DEC
35647: ST_TO_ADDR
35648: LD_VAR 0 11
35652: PUSH
35653: FOR_TO
35654: IFFALSE 35774
// begin for j = 1 to array do
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: DOUBLE
35662: LD_INT 1
35664: DEC
35665: ST_TO_ADDR
35666: LD_VAR 0 1
35670: PUSH
35671: FOR_TO
35672: IFFALSE 35760
// begin k := j + d ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_VAR 0 7
35683: PUSH
35684: LD_VAR 0 9
35688: PLUS
35689: ST_TO_ADDR
// if k > array then
35690: LD_VAR 0 8
35694: PUSH
35695: LD_VAR 0 1
35699: GREATER
35700: IFFALSE 35710
// k := 1 ;
35702: LD_ADDR_VAR 0 8
35706: PUSH
35707: LD_INT 1
35709: ST_TO_ADDR
// if not k then
35710: LD_VAR 0 8
35714: NOT
35715: IFFALSE 35727
// k := array ;
35717: LD_ADDR_VAR 0 8
35721: PUSH
35722: LD_VAR 0 1
35726: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35727: LD_ADDR_VAR 0 10
35731: PUSH
35732: LD_VAR 0 10
35736: PPUSH
35737: LD_VAR 0 8
35741: PPUSH
35742: LD_VAR 0 1
35746: PUSH
35747: LD_VAR 0 7
35751: ARRAY
35752: PPUSH
35753: CALL_OW 1
35757: ST_TO_ADDR
// end ;
35758: GO 35671
35760: POP
35761: POP
// array := tmp ;
35762: LD_ADDR_VAR 0 1
35766: PUSH
35767: LD_VAR 0 10
35771: ST_TO_ADDR
// end ;
35772: GO 35653
35774: POP
35775: POP
// result := array ;
35776: LD_ADDR_VAR 0 5
35780: PUSH
35781: LD_VAR 0 1
35785: ST_TO_ADDR
// end ;
35786: LD_VAR 0 5
35790: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35791: LD_INT 0
35793: PPUSH
35794: PPUSH
// result := 0 ;
35795: LD_ADDR_VAR 0 3
35799: PUSH
35800: LD_INT 0
35802: ST_TO_ADDR
// if not array or not value in array then
35803: LD_VAR 0 1
35807: NOT
35808: PUSH
35809: LD_VAR 0 2
35813: PUSH
35814: LD_VAR 0 1
35818: IN
35819: NOT
35820: OR
35821: IFFALSE 35825
// exit ;
35823: GO 35879
// for i = 1 to array do
35825: LD_ADDR_VAR 0 4
35829: PUSH
35830: DOUBLE
35831: LD_INT 1
35833: DEC
35834: ST_TO_ADDR
35835: LD_VAR 0 1
35839: PUSH
35840: FOR_TO
35841: IFFALSE 35877
// if value = array [ i ] then
35843: LD_VAR 0 2
35847: PUSH
35848: LD_VAR 0 1
35852: PUSH
35853: LD_VAR 0 4
35857: ARRAY
35858: EQUAL
35859: IFFALSE 35875
// begin result := i ;
35861: LD_ADDR_VAR 0 3
35865: PUSH
35866: LD_VAR 0 4
35870: ST_TO_ADDR
// exit ;
35871: POP
35872: POP
35873: GO 35879
// end ;
35875: GO 35840
35877: POP
35878: POP
// end ;
35879: LD_VAR 0 3
35883: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35884: LD_INT 0
35886: PPUSH
// vc_chassis := chassis ;
35887: LD_ADDR_OWVAR 37
35891: PUSH
35892: LD_VAR 0 1
35896: ST_TO_ADDR
// vc_engine := engine ;
35897: LD_ADDR_OWVAR 39
35901: PUSH
35902: LD_VAR 0 2
35906: ST_TO_ADDR
// vc_control := control ;
35907: LD_ADDR_OWVAR 38
35911: PUSH
35912: LD_VAR 0 3
35916: ST_TO_ADDR
// vc_weapon := weapon ;
35917: LD_ADDR_OWVAR 40
35921: PUSH
35922: LD_VAR 0 4
35926: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35927: LD_ADDR_OWVAR 41
35931: PUSH
35932: LD_VAR 0 5
35936: ST_TO_ADDR
// end ;
35937: LD_VAR 0 6
35941: RET
// export function WantPlant ( unit ) ; var task ; begin
35942: LD_INT 0
35944: PPUSH
35945: PPUSH
// result := false ;
35946: LD_ADDR_VAR 0 2
35950: PUSH
35951: LD_INT 0
35953: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 437
35968: ST_TO_ADDR
// if task then
35969: LD_VAR 0 3
35973: IFFALSE 36001
// if task [ 1 ] [ 1 ] = p then
35975: LD_VAR 0 3
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: PUSH
35984: LD_INT 1
35986: ARRAY
35987: PUSH
35988: LD_STRING p
35990: EQUAL
35991: IFFALSE 36001
// result := true ;
35993: LD_ADDR_VAR 0 2
35997: PUSH
35998: LD_INT 1
36000: ST_TO_ADDR
// end ;
36001: LD_VAR 0 2
36005: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36006: LD_INT 0
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
// if pos < 1 then
36012: LD_VAR 0 2
36016: PUSH
36017: LD_INT 1
36019: LESS
36020: IFFALSE 36024
// exit ;
36022: GO 36327
// if pos = 1 then
36024: LD_VAR 0 2
36028: PUSH
36029: LD_INT 1
36031: EQUAL
36032: IFFALSE 36065
// result := Replace ( arr , pos [ 1 ] , value ) else
36034: LD_ADDR_VAR 0 4
36038: PUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: LD_VAR 0 2
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: PPUSH
36053: LD_VAR 0 3
36057: PPUSH
36058: CALL_OW 1
36062: ST_TO_ADDR
36063: GO 36327
// begin tmp := arr ;
36065: LD_ADDR_VAR 0 6
36069: PUSH
36070: LD_VAR 0 1
36074: ST_TO_ADDR
// s_arr := [ tmp ] ;
36075: LD_ADDR_VAR 0 7
36079: PUSH
36080: LD_VAR 0 6
36084: PUSH
36085: EMPTY
36086: LIST
36087: ST_TO_ADDR
// for i = 1 to pos - 1 do
36088: LD_ADDR_VAR 0 5
36092: PUSH
36093: DOUBLE
36094: LD_INT 1
36096: DEC
36097: ST_TO_ADDR
36098: LD_VAR 0 2
36102: PUSH
36103: LD_INT 1
36105: MINUS
36106: PUSH
36107: FOR_TO
36108: IFFALSE 36153
// begin tmp := tmp [ pos [ i ] ] ;
36110: LD_ADDR_VAR 0 6
36114: PUSH
36115: LD_VAR 0 6
36119: PUSH
36120: LD_VAR 0 2
36124: PUSH
36125: LD_VAR 0 5
36129: ARRAY
36130: ARRAY
36131: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36132: LD_ADDR_VAR 0 7
36136: PUSH
36137: LD_VAR 0 7
36141: PUSH
36142: LD_VAR 0 6
36146: PUSH
36147: EMPTY
36148: LIST
36149: ADD
36150: ST_TO_ADDR
// end ;
36151: GO 36107
36153: POP
36154: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36155: LD_ADDR_VAR 0 6
36159: PUSH
36160: LD_VAR 0 6
36164: PPUSH
36165: LD_VAR 0 2
36169: PUSH
36170: LD_VAR 0 2
36174: ARRAY
36175: PPUSH
36176: LD_VAR 0 3
36180: PPUSH
36181: CALL_OW 1
36185: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36186: LD_ADDR_VAR 0 7
36190: PUSH
36191: LD_VAR 0 7
36195: PPUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 6
36205: PPUSH
36206: CALL_OW 1
36210: ST_TO_ADDR
// for i = s_arr downto 2 do
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: DOUBLE
36217: LD_VAR 0 7
36221: INC
36222: ST_TO_ADDR
36223: LD_INT 2
36225: PUSH
36226: FOR_DOWNTO
36227: IFFALSE 36311
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36229: LD_ADDR_VAR 0 6
36233: PUSH
36234: LD_VAR 0 7
36238: PUSH
36239: LD_VAR 0 5
36243: PUSH
36244: LD_INT 1
36246: MINUS
36247: ARRAY
36248: PPUSH
36249: LD_VAR 0 2
36253: PUSH
36254: LD_VAR 0 5
36258: PUSH
36259: LD_INT 1
36261: MINUS
36262: ARRAY
36263: PPUSH
36264: LD_VAR 0 7
36268: PUSH
36269: LD_VAR 0 5
36273: ARRAY
36274: PPUSH
36275: CALL_OW 1
36279: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36280: LD_ADDR_VAR 0 7
36284: PUSH
36285: LD_VAR 0 7
36289: PPUSH
36290: LD_VAR 0 5
36294: PUSH
36295: LD_INT 1
36297: MINUS
36298: PPUSH
36299: LD_VAR 0 6
36303: PPUSH
36304: CALL_OW 1
36308: ST_TO_ADDR
// end ;
36309: GO 36226
36311: POP
36312: POP
// result := s_arr [ 1 ] ;
36313: LD_ADDR_VAR 0 4
36317: PUSH
36318: LD_VAR 0 7
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: ST_TO_ADDR
// end ; end ;
36327: LD_VAR 0 4
36331: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36332: LD_INT 0
36334: PPUSH
36335: PPUSH
// if not list then
36336: LD_VAR 0 1
36340: NOT
36341: IFFALSE 36345
// exit ;
36343: GO 36436
// i := list [ pos1 ] ;
36345: LD_ADDR_VAR 0 5
36349: PUSH
36350: LD_VAR 0 1
36354: PUSH
36355: LD_VAR 0 2
36359: ARRAY
36360: ST_TO_ADDR
// if not i then
36361: LD_VAR 0 5
36365: NOT
36366: IFFALSE 36370
// exit ;
36368: GO 36436
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36370: LD_ADDR_VAR 0 1
36374: PUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: LD_VAR 0 2
36384: PPUSH
36385: LD_VAR 0 1
36389: PUSH
36390: LD_VAR 0 3
36394: ARRAY
36395: PPUSH
36396: CALL_OW 1
36400: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36401: LD_ADDR_VAR 0 1
36405: PUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_VAR 0 3
36415: PPUSH
36416: LD_VAR 0 5
36420: PPUSH
36421: CALL_OW 1
36425: ST_TO_ADDR
// result := list ;
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: LD_VAR 0 1
36435: ST_TO_ADDR
// end ;
36436: LD_VAR 0 4
36440: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36441: LD_INT 0
36443: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36444: LD_ADDR_VAR 0 5
36448: PUSH
36449: LD_VAR 0 1
36453: PPUSH
36454: CALL_OW 250
36458: PPUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 251
36468: PPUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: LD_VAR 0 3
36478: PPUSH
36479: LD_VAR 0 4
36483: PPUSH
36484: CALL 36494 0 5
36488: ST_TO_ADDR
// end ;
36489: LD_VAR 0 5
36493: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36494: LD_INT 0
36496: PPUSH
36497: PPUSH
36498: PPUSH
36499: PPUSH
// if not list then
36500: LD_VAR 0 3
36504: NOT
36505: IFFALSE 36509
// exit ;
36507: GO 36897
// result := [ ] ;
36509: LD_ADDR_VAR 0 6
36513: PUSH
36514: EMPTY
36515: ST_TO_ADDR
// for i in list do
36516: LD_ADDR_VAR 0 7
36520: PUSH
36521: LD_VAR 0 3
36525: PUSH
36526: FOR_IN
36527: IFFALSE 36729
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36529: LD_ADDR_VAR 0 9
36533: PUSH
36534: LD_VAR 0 7
36538: PPUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: LD_VAR 0 2
36548: PPUSH
36549: CALL_OW 297
36553: ST_TO_ADDR
// if not result then
36554: LD_VAR 0 6
36558: NOT
36559: IFFALSE 36585
// result := [ [ i , tmp ] ] else
36561: LD_ADDR_VAR 0 6
36565: PUSH
36566: LD_VAR 0 7
36570: PUSH
36571: LD_VAR 0 9
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: ST_TO_ADDR
36583: GO 36727
// begin if result [ result ] [ 2 ] < tmp then
36585: LD_VAR 0 6
36589: PUSH
36590: LD_VAR 0 6
36594: ARRAY
36595: PUSH
36596: LD_INT 2
36598: ARRAY
36599: PUSH
36600: LD_VAR 0 9
36604: LESS
36605: IFFALSE 36647
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36607: LD_ADDR_VAR 0 6
36611: PUSH
36612: LD_VAR 0 6
36616: PPUSH
36617: LD_VAR 0 6
36621: PUSH
36622: LD_INT 1
36624: PLUS
36625: PPUSH
36626: LD_VAR 0 7
36630: PUSH
36631: LD_VAR 0 9
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PPUSH
36640: CALL_OW 2
36644: ST_TO_ADDR
36645: GO 36727
// for j = 1 to result do
36647: LD_ADDR_VAR 0 8
36651: PUSH
36652: DOUBLE
36653: LD_INT 1
36655: DEC
36656: ST_TO_ADDR
36657: LD_VAR 0 6
36661: PUSH
36662: FOR_TO
36663: IFFALSE 36725
// begin if tmp < result [ j ] [ 2 ] then
36665: LD_VAR 0 9
36669: PUSH
36670: LD_VAR 0 6
36674: PUSH
36675: LD_VAR 0 8
36679: ARRAY
36680: PUSH
36681: LD_INT 2
36683: ARRAY
36684: LESS
36685: IFFALSE 36723
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36687: LD_ADDR_VAR 0 6
36691: PUSH
36692: LD_VAR 0 6
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_VAR 0 7
36706: PUSH
36707: LD_VAR 0 9
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PPUSH
36716: CALL_OW 2
36720: ST_TO_ADDR
// break ;
36721: GO 36725
// end ; end ;
36723: GO 36662
36725: POP
36726: POP
// end ; end ;
36727: GO 36526
36729: POP
36730: POP
// if result and not asc then
36731: LD_VAR 0 6
36735: PUSH
36736: LD_VAR 0 4
36740: NOT
36741: AND
36742: IFFALSE 36817
// begin tmp := result ;
36744: LD_ADDR_VAR 0 9
36748: PUSH
36749: LD_VAR 0 6
36753: ST_TO_ADDR
// for i = tmp downto 1 do
36754: LD_ADDR_VAR 0 7
36758: PUSH
36759: DOUBLE
36760: LD_VAR 0 9
36764: INC
36765: ST_TO_ADDR
36766: LD_INT 1
36768: PUSH
36769: FOR_DOWNTO
36770: IFFALSE 36815
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36772: LD_ADDR_VAR 0 6
36776: PUSH
36777: LD_VAR 0 6
36781: PPUSH
36782: LD_VAR 0 9
36786: PUSH
36787: LD_VAR 0 7
36791: MINUS
36792: PUSH
36793: LD_INT 1
36795: PLUS
36796: PPUSH
36797: LD_VAR 0 9
36801: PUSH
36802: LD_VAR 0 7
36806: ARRAY
36807: PPUSH
36808: CALL_OW 1
36812: ST_TO_ADDR
36813: GO 36769
36815: POP
36816: POP
// end ; tmp := [ ] ;
36817: LD_ADDR_VAR 0 9
36821: PUSH
36822: EMPTY
36823: ST_TO_ADDR
// if mode then
36824: LD_VAR 0 5
36828: IFFALSE 36897
// begin for i = 1 to result do
36830: LD_ADDR_VAR 0 7
36834: PUSH
36835: DOUBLE
36836: LD_INT 1
36838: DEC
36839: ST_TO_ADDR
36840: LD_VAR 0 6
36844: PUSH
36845: FOR_TO
36846: IFFALSE 36885
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36848: LD_ADDR_VAR 0 9
36852: PUSH
36853: LD_VAR 0 9
36857: PPUSH
36858: LD_VAR 0 7
36862: PPUSH
36863: LD_VAR 0 6
36867: PUSH
36868: LD_VAR 0 7
36872: ARRAY
36873: PUSH
36874: LD_INT 1
36876: ARRAY
36877: PPUSH
36878: CALL_OW 1
36882: ST_TO_ADDR
36883: GO 36845
36885: POP
36886: POP
// result := tmp ;
36887: LD_ADDR_VAR 0 6
36891: PUSH
36892: LD_VAR 0 9
36896: ST_TO_ADDR
// end ; end ;
36897: LD_VAR 0 6
36901: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// if not x or not y then
36932: LD_VAR 0 2
36936: NOT
36937: PUSH
36938: LD_VAR 0 3
36942: NOT
36943: OR
36944: IFFALSE 36948
// exit ;
36946: GO 38598
// if not range then
36948: LD_VAR 0 4
36952: NOT
36953: IFFALSE 36963
// range := 10 ;
36955: LD_ADDR_VAR 0 4
36959: PUSH
36960: LD_INT 10
36962: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36963: LD_ADDR_VAR 0 8
36967: PUSH
36968: LD_INT 81
36970: PUSH
36971: LD_VAR 0 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 92
36982: PUSH
36983: LD_VAR 0 2
36987: PUSH
36988: LD_VAR 0 3
36992: PUSH
36993: LD_VAR 0 4
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: LD_INT 21
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: PPUSH
37026: CALL_OW 69
37030: ST_TO_ADDR
// if not tmp then
37031: LD_VAR 0 8
37035: NOT
37036: IFFALSE 37040
// exit ;
37038: GO 38598
// for i in tmp do
37040: LD_ADDR_VAR 0 6
37044: PUSH
37045: LD_VAR 0 8
37049: PUSH
37050: FOR_IN
37051: IFFALSE 38573
// begin points := [ 0 , 0 , 0 ] ;
37053: LD_ADDR_VAR 0 9
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// bpoints := 1 ;
37072: LD_ADDR_VAR 0 10
37076: PUSH
37077: LD_INT 1
37079: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37080: LD_VAR 0 6
37084: PPUSH
37085: CALL_OW 247
37089: PUSH
37090: LD_INT 1
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37676
37098: POP
// begin if GetClass ( i ) = 1 then
37099: LD_VAR 0 6
37103: PPUSH
37104: CALL_OW 257
37108: PUSH
37109: LD_INT 1
37111: EQUAL
37112: IFFALSE 37133
// points := [ 10 , 5 , 3 ] ;
37114: LD_ADDR_VAR 0 9
37118: PUSH
37119: LD_INT 10
37121: PUSH
37122: LD_INT 5
37124: PUSH
37125: LD_INT 3
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37133: LD_VAR 0 6
37137: PPUSH
37138: CALL_OW 257
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: LD_INT 4
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: IN
37157: IFFALSE 37178
// points := [ 3 , 2 , 1 ] ;
37159: LD_ADDR_VAR 0 9
37163: PUSH
37164: LD_INT 3
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37178: LD_VAR 0 6
37182: PPUSH
37183: CALL_OW 257
37187: PUSH
37188: LD_INT 5
37190: EQUAL
37191: IFFALSE 37212
// points := [ 130 , 5 , 2 ] ;
37193: LD_ADDR_VAR 0 9
37197: PUSH
37198: LD_INT 130
37200: PUSH
37201: LD_INT 5
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37212: LD_VAR 0 6
37216: PPUSH
37217: CALL_OW 257
37221: PUSH
37222: LD_INT 8
37224: EQUAL
37225: IFFALSE 37246
// points := [ 35 , 35 , 30 ] ;
37227: LD_ADDR_VAR 0 9
37231: PUSH
37232: LD_INT 35
37234: PUSH
37235: LD_INT 35
37237: PUSH
37238: LD_INT 30
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37246: LD_VAR 0 6
37250: PPUSH
37251: CALL_OW 257
37255: PUSH
37256: LD_INT 9
37258: EQUAL
37259: IFFALSE 37280
// points := [ 20 , 55 , 40 ] ;
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_INT 20
37268: PUSH
37269: LD_INT 55
37271: PUSH
37272: LD_INT 40
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37280: LD_VAR 0 6
37284: PPUSH
37285: CALL_OW 257
37289: PUSH
37290: LD_INT 12
37292: PUSH
37293: LD_INT 16
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: IN
37300: IFFALSE 37321
// points := [ 5 , 3 , 2 ] ;
37302: LD_ADDR_VAR 0 9
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37321: LD_VAR 0 6
37325: PPUSH
37326: CALL_OW 257
37330: PUSH
37331: LD_INT 17
37333: EQUAL
37334: IFFALSE 37355
// points := [ 100 , 50 , 75 ] ;
37336: LD_ADDR_VAR 0 9
37340: PUSH
37341: LD_INT 100
37343: PUSH
37344: LD_INT 50
37346: PUSH
37347: LD_INT 75
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 257
37364: PUSH
37365: LD_INT 15
37367: EQUAL
37368: IFFALSE 37389
// points := [ 10 , 5 , 3 ] ;
37370: LD_ADDR_VAR 0 9
37374: PUSH
37375: LD_INT 10
37377: PUSH
37378: LD_INT 5
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37389: LD_VAR 0 6
37393: PPUSH
37394: CALL_OW 257
37398: PUSH
37399: LD_INT 14
37401: EQUAL
37402: IFFALSE 37423
// points := [ 10 , 0 , 0 ] ;
37404: LD_ADDR_VAR 0 9
37408: PUSH
37409: LD_INT 10
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37423: LD_VAR 0 6
37427: PPUSH
37428: CALL_OW 257
37432: PUSH
37433: LD_INT 11
37435: EQUAL
37436: IFFALSE 37457
// points := [ 30 , 10 , 5 ] ;
37438: LD_ADDR_VAR 0 9
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: LD_INT 10
37448: PUSH
37449: LD_INT 5
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37457: LD_VAR 0 1
37461: PPUSH
37462: LD_INT 5
37464: PPUSH
37465: CALL_OW 321
37469: PUSH
37470: LD_INT 2
37472: EQUAL
37473: IFFALSE 37490
// bpoints := bpoints * 1.8 ;
37475: LD_ADDR_VAR 0 10
37479: PUSH
37480: LD_VAR 0 10
37484: PUSH
37485: LD_REAL  1.80000000000000E+0000
37488: MUL
37489: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37490: LD_VAR 0 6
37494: PPUSH
37495: CALL_OW 257
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: LD_INT 4
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: IN
37518: PUSH
37519: LD_VAR 0 1
37523: PPUSH
37524: LD_INT 51
37526: PPUSH
37527: CALL_OW 321
37531: PUSH
37532: LD_INT 2
37534: EQUAL
37535: AND
37536: IFFALSE 37553
// bpoints := bpoints * 1.2 ;
37538: LD_ADDR_VAR 0 10
37542: PUSH
37543: LD_VAR 0 10
37547: PUSH
37548: LD_REAL  1.20000000000000E+0000
37551: MUL
37552: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37553: LD_VAR 0 6
37557: PPUSH
37558: CALL_OW 257
37562: PUSH
37563: LD_INT 5
37565: PUSH
37566: LD_INT 7
37568: PUSH
37569: LD_INT 9
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: IN
37577: PUSH
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_INT 52
37585: PPUSH
37586: CALL_OW 321
37590: PUSH
37591: LD_INT 2
37593: EQUAL
37594: AND
37595: IFFALSE 37612
// bpoints := bpoints * 1.5 ;
37597: LD_ADDR_VAR 0 10
37601: PUSH
37602: LD_VAR 0 10
37606: PUSH
37607: LD_REAL  1.50000000000000E+0000
37610: MUL
37611: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37612: LD_VAR 0 1
37616: PPUSH
37617: LD_INT 66
37619: PPUSH
37620: CALL_OW 321
37624: PUSH
37625: LD_INT 2
37627: EQUAL
37628: IFFALSE 37645
// bpoints := bpoints * 1.1 ;
37630: LD_ADDR_VAR 0 10
37634: PUSH
37635: LD_VAR 0 10
37639: PUSH
37640: LD_REAL  1.10000000000000E+0000
37643: MUL
37644: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37645: LD_ADDR_VAR 0 10
37649: PUSH
37650: LD_VAR 0 10
37654: PUSH
37655: LD_VAR 0 6
37659: PPUSH
37660: LD_INT 1
37662: PPUSH
37663: CALL_OW 259
37667: PUSH
37668: LD_REAL  1.15000000000000E+0000
37671: MUL
37672: MUL
37673: ST_TO_ADDR
// end ; unit_vehicle :
37674: GO 38502
37676: LD_INT 2
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37684
37682: GO 38490
37684: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37685: LD_VAR 0 6
37689: PPUSH
37690: CALL_OW 264
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 42
37700: PUSH
37701: LD_INT 24
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: IN
37709: IFFALSE 37730
// points := [ 25 , 5 , 3 ] ;
37711: LD_ADDR_VAR 0 9
37715: PUSH
37716: LD_INT 25
37718: PUSH
37719: LD_INT 5
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37730: LD_VAR 0 6
37734: PPUSH
37735: CALL_OW 264
37739: PUSH
37740: LD_INT 4
37742: PUSH
37743: LD_INT 43
37745: PUSH
37746: LD_INT 25
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: IN
37754: IFFALSE 37775
// points := [ 40 , 15 , 5 ] ;
37756: LD_ADDR_VAR 0 9
37760: PUSH
37761: LD_INT 40
37763: PUSH
37764: LD_INT 15
37766: PUSH
37767: LD_INT 5
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37775: LD_VAR 0 6
37779: PPUSH
37780: CALL_OW 264
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 23
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: IN
37795: IFFALSE 37816
// points := [ 7 , 25 , 8 ] ;
37797: LD_ADDR_VAR 0 9
37801: PUSH
37802: LD_INT 7
37804: PUSH
37805: LD_INT 25
37807: PUSH
37808: LD_INT 8
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37816: LD_VAR 0 6
37820: PPUSH
37821: CALL_OW 264
37825: PUSH
37826: LD_INT 5
37828: PUSH
37829: LD_INT 27
37831: PUSH
37832: LD_INT 44
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: IN
37840: IFFALSE 37861
// points := [ 14 , 50 , 16 ] ;
37842: LD_ADDR_VAR 0 9
37846: PUSH
37847: LD_INT 14
37849: PUSH
37850: LD_INT 50
37852: PUSH
37853: LD_INT 16
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37861: LD_VAR 0 6
37865: PPUSH
37866: CALL_OW 264
37870: PUSH
37871: LD_INT 6
37873: PUSH
37874: LD_INT 46
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: IN
37881: IFFALSE 37902
// points := [ 32 , 120 , 70 ] ;
37883: LD_ADDR_VAR 0 9
37887: PUSH
37888: LD_INT 32
37890: PUSH
37891: LD_INT 120
37893: PUSH
37894: LD_INT 70
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37902: LD_VAR 0 6
37906: PPUSH
37907: CALL_OW 264
37911: PUSH
37912: LD_INT 7
37914: PUSH
37915: LD_INT 28
37917: PUSH
37918: LD_INT 45
37920: PUSH
37921: LD_INT 92
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: IN
37930: IFFALSE 37951
// points := [ 35 , 20 , 45 ] ;
37932: LD_ADDR_VAR 0 9
37936: PUSH
37937: LD_INT 35
37939: PUSH
37940: LD_INT 20
37942: PUSH
37943: LD_INT 45
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37951: LD_VAR 0 6
37955: PPUSH
37956: CALL_OW 264
37960: PUSH
37961: LD_INT 47
37963: PUSH
37964: EMPTY
37965: LIST
37966: IN
37967: IFFALSE 37988
// points := [ 67 , 45 , 75 ] ;
37969: LD_ADDR_VAR 0 9
37973: PUSH
37974: LD_INT 67
37976: PUSH
37977: LD_INT 45
37979: PUSH
37980: LD_INT 75
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37988: LD_VAR 0 6
37992: PPUSH
37993: CALL_OW 264
37997: PUSH
37998: LD_INT 26
38000: PUSH
38001: EMPTY
38002: LIST
38003: IN
38004: IFFALSE 38025
// points := [ 120 , 30 , 80 ] ;
38006: LD_ADDR_VAR 0 9
38010: PUSH
38011: LD_INT 120
38013: PUSH
38014: LD_INT 30
38016: PUSH
38017: LD_INT 80
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38025: LD_VAR 0 6
38029: PPUSH
38030: CALL_OW 264
38034: PUSH
38035: LD_INT 22
38037: PUSH
38038: EMPTY
38039: LIST
38040: IN
38041: IFFALSE 38062
// points := [ 40 , 1 , 1 ] ;
38043: LD_ADDR_VAR 0 9
38047: PUSH
38048: LD_INT 40
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38062: LD_VAR 0 6
38066: PPUSH
38067: CALL_OW 264
38071: PUSH
38072: LD_INT 29
38074: PUSH
38075: EMPTY
38076: LIST
38077: IN
38078: IFFALSE 38099
// points := [ 70 , 200 , 400 ] ;
38080: LD_ADDR_VAR 0 9
38084: PUSH
38085: LD_INT 70
38087: PUSH
38088: LD_INT 200
38090: PUSH
38091: LD_INT 400
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38099: LD_VAR 0 6
38103: PPUSH
38104: CALL_OW 264
38108: PUSH
38109: LD_INT 14
38111: PUSH
38112: LD_INT 53
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: IN
38119: IFFALSE 38140
// points := [ 40 , 10 , 20 ] ;
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_INT 40
38128: PUSH
38129: LD_INT 10
38131: PUSH
38132: LD_INT 20
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38140: LD_VAR 0 6
38144: PPUSH
38145: CALL_OW 264
38149: PUSH
38150: LD_INT 9
38152: PUSH
38153: EMPTY
38154: LIST
38155: IN
38156: IFFALSE 38177
// points := [ 5 , 70 , 20 ] ;
38158: LD_ADDR_VAR 0 9
38162: PUSH
38163: LD_INT 5
38165: PUSH
38166: LD_INT 70
38168: PUSH
38169: LD_INT 20
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38177: LD_VAR 0 6
38181: PPUSH
38182: CALL_OW 264
38186: PUSH
38187: LD_INT 10
38189: PUSH
38190: EMPTY
38191: LIST
38192: IN
38193: IFFALSE 38214
// points := [ 35 , 110 , 70 ] ;
38195: LD_ADDR_VAR 0 9
38199: PUSH
38200: LD_INT 35
38202: PUSH
38203: LD_INT 110
38205: PUSH
38206: LD_INT 70
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38214: LD_VAR 0 6
38218: PPUSH
38219: CALL_OW 265
38223: PUSH
38224: LD_INT 25
38226: EQUAL
38227: IFFALSE 38248
// points := [ 80 , 65 , 100 ] ;
38229: LD_ADDR_VAR 0 9
38233: PUSH
38234: LD_INT 80
38236: PUSH
38237: LD_INT 65
38239: PUSH
38240: LD_INT 100
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38248: LD_VAR 0 6
38252: PPUSH
38253: CALL_OW 263
38257: PUSH
38258: LD_INT 1
38260: EQUAL
38261: IFFALSE 38296
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38263: LD_ADDR_VAR 0 10
38267: PUSH
38268: LD_VAR 0 10
38272: PUSH
38273: LD_VAR 0 6
38277: PPUSH
38278: CALL_OW 311
38282: PPUSH
38283: LD_INT 3
38285: PPUSH
38286: CALL_OW 259
38290: PUSH
38291: LD_INT 4
38293: MUL
38294: MUL
38295: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38296: LD_VAR 0 6
38300: PPUSH
38301: CALL_OW 263
38305: PUSH
38306: LD_INT 2
38308: EQUAL
38309: IFFALSE 38360
// begin j := IsControledBy ( i ) ;
38311: LD_ADDR_VAR 0 7
38315: PUSH
38316: LD_VAR 0 6
38320: PPUSH
38321: CALL_OW 312
38325: ST_TO_ADDR
// if j then
38326: LD_VAR 0 7
38330: IFFALSE 38360
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38332: LD_ADDR_VAR 0 10
38336: PUSH
38337: LD_VAR 0 10
38341: PUSH
38342: LD_VAR 0 7
38346: PPUSH
38347: LD_INT 3
38349: PPUSH
38350: CALL_OW 259
38354: PUSH
38355: LD_INT 3
38357: MUL
38358: MUL
38359: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 264
38369: PUSH
38370: LD_INT 5
38372: PUSH
38373: LD_INT 6
38375: PUSH
38376: LD_INT 46
38378: PUSH
38379: LD_INT 44
38381: PUSH
38382: LD_INT 47
38384: PUSH
38385: LD_INT 45
38387: PUSH
38388: LD_INT 28
38390: PUSH
38391: LD_INT 7
38393: PUSH
38394: LD_INT 27
38396: PUSH
38397: LD_INT 29
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: IN
38412: PUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: LD_INT 52
38420: PPUSH
38421: CALL_OW 321
38425: PUSH
38426: LD_INT 2
38428: EQUAL
38429: AND
38430: IFFALSE 38447
// bpoints := bpoints * 1.2 ;
38432: LD_ADDR_VAR 0 10
38436: PUSH
38437: LD_VAR 0 10
38441: PUSH
38442: LD_REAL  1.20000000000000E+0000
38445: MUL
38446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 264
38456: PUSH
38457: LD_INT 6
38459: PUSH
38460: LD_INT 46
38462: PUSH
38463: LD_INT 47
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: IN
38471: IFFALSE 38488
// bpoints := bpoints * 1.2 ;
38473: LD_ADDR_VAR 0 10
38477: PUSH
38478: LD_VAR 0 10
38482: PUSH
38483: LD_REAL  1.20000000000000E+0000
38486: MUL
38487: ST_TO_ADDR
// end ; unit_building :
38488: GO 38502
38490: LD_INT 3
38492: DOUBLE
38493: EQUAL
38494: IFTRUE 38498
38496: GO 38501
38498: POP
// ; end ;
38499: GO 38502
38501: POP
// for j = 1 to 3 do
38502: LD_ADDR_VAR 0 7
38506: PUSH
38507: DOUBLE
38508: LD_INT 1
38510: DEC
38511: ST_TO_ADDR
38512: LD_INT 3
38514: PUSH
38515: FOR_TO
38516: IFFALSE 38569
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 5
38527: PPUSH
38528: LD_VAR 0 7
38532: PPUSH
38533: LD_VAR 0 5
38537: PUSH
38538: LD_VAR 0 7
38542: ARRAY
38543: PUSH
38544: LD_VAR 0 9
38548: PUSH
38549: LD_VAR 0 7
38553: ARRAY
38554: PUSH
38555: LD_VAR 0 10
38559: MUL
38560: PLUS
38561: PPUSH
38562: CALL_OW 1
38566: ST_TO_ADDR
38567: GO 38515
38569: POP
38570: POP
// end ;
38571: GO 37050
38573: POP
38574: POP
// result := Replace ( result , 4 , tmp ) ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_VAR 0 5
38584: PPUSH
38585: LD_INT 4
38587: PPUSH
38588: LD_VAR 0 8
38592: PPUSH
38593: CALL_OW 1
38597: ST_TO_ADDR
// end ;
38598: LD_VAR 0 5
38602: RET
// export function DangerAtRange ( unit , range ) ; begin
38603: LD_INT 0
38605: PPUSH
// if not unit then
38606: LD_VAR 0 1
38610: NOT
38611: IFFALSE 38615
// exit ;
38613: GO 38660
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38615: LD_ADDR_VAR 0 3
38619: PUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 255
38629: PPUSH
38630: LD_VAR 0 1
38634: PPUSH
38635: CALL_OW 250
38639: PPUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 251
38649: PPUSH
38650: LD_VAR 0 2
38654: PPUSH
38655: CALL 36902 0 4
38659: ST_TO_ADDR
// end ;
38660: LD_VAR 0 3
38664: RET
// export function DangerInArea ( side , area ) ; begin
38665: LD_INT 0
38667: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_VAR 0 2
38677: PPUSH
38678: LD_INT 81
38680: PUSH
38681: LD_VAR 0 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 70
38694: ST_TO_ADDR
// end ;
38695: LD_VAR 0 3
38699: RET
// export function IsExtension ( b ) ; begin
38700: LD_INT 0
38702: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38703: LD_ADDR_VAR 0 2
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_INT 23
38715: PUSH
38716: LD_INT 20
38718: PUSH
38719: LD_INT 22
38721: PUSH
38722: LD_INT 17
38724: PUSH
38725: LD_INT 24
38727: PUSH
38728: LD_INT 21
38730: PUSH
38731: LD_INT 19
38733: PUSH
38734: LD_INT 16
38736: PUSH
38737: LD_INT 25
38739: PUSH
38740: LD_INT 18
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: IN
38755: ST_TO_ADDR
// end ;
38756: LD_VAR 0 2
38760: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38761: LD_INT 0
38763: PPUSH
38764: PPUSH
38765: PPUSH
// result := [ ] ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: EMPTY
38772: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38773: LD_ADDR_VAR 0 5
38777: PUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: LD_INT 21
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PPUSH
38793: CALL_OW 70
38797: ST_TO_ADDR
// if not tmp then
38798: LD_VAR 0 5
38802: NOT
38803: IFFALSE 38807
// exit ;
38805: GO 38871
// if checkLink then
38807: LD_VAR 0 3
38811: IFFALSE 38861
// begin for i in tmp do
38813: LD_ADDR_VAR 0 6
38817: PUSH
38818: LD_VAR 0 5
38822: PUSH
38823: FOR_IN
38824: IFFALSE 38859
// if GetBase ( i ) <> base then
38826: LD_VAR 0 6
38830: PPUSH
38831: CALL_OW 274
38835: PUSH
38836: LD_VAR 0 1
38840: NONEQUAL
38841: IFFALSE 38857
// ComLinkToBase ( base , i ) ;
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_VAR 0 6
38852: PPUSH
38853: CALL_OW 169
38857: GO 38823
38859: POP
38860: POP
// end ; result := tmp ;
38861: LD_ADDR_VAR 0 4
38865: PUSH
38866: LD_VAR 0 5
38870: ST_TO_ADDR
// end ;
38871: LD_VAR 0 4
38875: RET
// export function ComComplete ( units , b ) ; var i ; begin
38876: LD_INT 0
38878: PPUSH
38879: PPUSH
// if not units then
38880: LD_VAR 0 1
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 38979
// for i in units do
38889: LD_ADDR_VAR 0 4
38893: PUSH
38894: LD_VAR 0 1
38898: PUSH
38899: FOR_IN
38900: IFFALSE 38977
// if BuildingStatus ( b ) = bs_build then
38902: LD_VAR 0 2
38906: PPUSH
38907: CALL_OW 461
38911: PUSH
38912: LD_INT 1
38914: EQUAL
38915: IFFALSE 38975
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38917: LD_VAR 0 4
38921: PPUSH
38922: LD_STRING h
38924: PUSH
38925: LD_VAR 0 2
38929: PPUSH
38930: CALL_OW 250
38934: PUSH
38935: LD_VAR 0 2
38939: PPUSH
38940: CALL_OW 251
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: PPUSH
38971: CALL_OW 446
38975: GO 38899
38977: POP
38978: POP
// end ;
38979: LD_VAR 0 3
38983: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38984: LD_INT 0
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38992: LD_VAR 0 1
38996: NOT
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 263
39007: PUSH
39008: LD_INT 2
39010: NONEQUAL
39011: OR
39012: IFFALSE 39016
// exit ;
39014: GO 39332
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39016: LD_ADDR_VAR 0 6
39020: PUSH
39021: LD_INT 22
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 255
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 30
39043: PUSH
39044: LD_INT 36
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 34
39053: PUSH
39054: LD_INT 31
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: LIST
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PPUSH
39070: CALL_OW 69
39074: ST_TO_ADDR
// if not tmp then
39075: LD_VAR 0 6
39079: NOT
39080: IFFALSE 39084
// exit ;
39082: GO 39332
// result := [ ] ;
39084: LD_ADDR_VAR 0 2
39088: PUSH
39089: EMPTY
39090: ST_TO_ADDR
// for i in tmp do
39091: LD_ADDR_VAR 0 3
39095: PUSH
39096: LD_VAR 0 6
39100: PUSH
39101: FOR_IN
39102: IFFALSE 39173
// begin t := UnitsInside ( i ) ;
39104: LD_ADDR_VAR 0 4
39108: PUSH
39109: LD_VAR 0 3
39113: PPUSH
39114: CALL_OW 313
39118: ST_TO_ADDR
// if t then
39119: LD_VAR 0 4
39123: IFFALSE 39171
// for j in t do
39125: LD_ADDR_VAR 0 7
39129: PUSH
39130: LD_VAR 0 4
39134: PUSH
39135: FOR_IN
39136: IFFALSE 39169
// result := Replace ( result , result + 1 , j ) ;
39138: LD_ADDR_VAR 0 2
39142: PUSH
39143: LD_VAR 0 2
39147: PPUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 1
39155: PLUS
39156: PPUSH
39157: LD_VAR 0 7
39161: PPUSH
39162: CALL_OW 1
39166: ST_TO_ADDR
39167: GO 39135
39169: POP
39170: POP
// end ;
39171: GO 39101
39173: POP
39174: POP
// if not result then
39175: LD_VAR 0 2
39179: NOT
39180: IFFALSE 39184
// exit ;
39182: GO 39332
// mech := result [ 1 ] ;
39184: LD_ADDR_VAR 0 5
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_INT 1
39196: ARRAY
39197: ST_TO_ADDR
// if result > 1 then
39198: LD_VAR 0 2
39202: PUSH
39203: LD_INT 1
39205: GREATER
39206: IFFALSE 39318
// begin for i = 2 to result do
39208: LD_ADDR_VAR 0 3
39212: PUSH
39213: DOUBLE
39214: LD_INT 2
39216: DEC
39217: ST_TO_ADDR
39218: LD_VAR 0 2
39222: PUSH
39223: FOR_TO
39224: IFFALSE 39316
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39226: LD_ADDR_VAR 0 4
39230: PUSH
39231: LD_VAR 0 2
39235: PUSH
39236: LD_VAR 0 3
39240: ARRAY
39241: PPUSH
39242: LD_INT 3
39244: PPUSH
39245: CALL_OW 259
39249: PUSH
39250: LD_VAR 0 2
39254: PUSH
39255: LD_VAR 0 3
39259: ARRAY
39260: PPUSH
39261: CALL_OW 432
39265: MINUS
39266: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39267: LD_VAR 0 4
39271: PUSH
39272: LD_VAR 0 5
39276: PPUSH
39277: LD_INT 3
39279: PPUSH
39280: CALL_OW 259
39284: PUSH
39285: LD_VAR 0 5
39289: PPUSH
39290: CALL_OW 432
39294: MINUS
39295: GREATEREQUAL
39296: IFFALSE 39314
// mech := result [ i ] ;
39298: LD_ADDR_VAR 0 5
39302: PUSH
39303: LD_VAR 0 2
39307: PUSH
39308: LD_VAR 0 3
39312: ARRAY
39313: ST_TO_ADDR
// end ;
39314: GO 39223
39316: POP
39317: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39318: LD_VAR 0 1
39322: PPUSH
39323: LD_VAR 0 5
39327: PPUSH
39328: CALL_OW 135
// end ;
39332: LD_VAR 0 2
39336: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39337: LD_INT 0
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
// result := [ ] ;
39352: LD_ADDR_VAR 0 7
39356: PUSH
39357: EMPTY
39358: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 266
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: IN
39379: NOT
39380: IFFALSE 39384
// exit ;
39382: GO 41018
// if name then
39384: LD_VAR 0 3
39388: IFFALSE 39404
// SetBName ( base_dep , name ) ;
39390: LD_VAR 0 1
39394: PPUSH
39395: LD_VAR 0 3
39399: PPUSH
39400: CALL_OW 500
// base := GetBase ( base_dep ) ;
39404: LD_ADDR_VAR 0 15
39408: PUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 274
39418: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39419: LD_ADDR_VAR 0 16
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 255
39433: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39434: LD_ADDR_VAR 0 17
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 248
39448: ST_TO_ADDR
// if sources then
39449: LD_VAR 0 5
39453: IFFALSE 39500
// for i = 1 to 3 do
39455: LD_ADDR_VAR 0 8
39459: PUSH
39460: DOUBLE
39461: LD_INT 1
39463: DEC
39464: ST_TO_ADDR
39465: LD_INT 3
39467: PUSH
39468: FOR_TO
39469: IFFALSE 39498
// AddResourceType ( base , i , sources [ i ] ) ;
39471: LD_VAR 0 15
39475: PPUSH
39476: LD_VAR 0 8
39480: PPUSH
39481: LD_VAR 0 5
39485: PUSH
39486: LD_VAR 0 8
39490: ARRAY
39491: PPUSH
39492: CALL_OW 276
39496: GO 39468
39498: POP
39499: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39500: LD_ADDR_VAR 0 18
39504: PUSH
39505: LD_VAR 0 15
39509: PPUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_INT 1
39517: PPUSH
39518: CALL 38761 0 3
39522: ST_TO_ADDR
// InitHc ;
39523: CALL_OW 19
// InitUc ;
39527: CALL_OW 18
// uc_side := side ;
39531: LD_ADDR_OWVAR 20
39535: PUSH
39536: LD_VAR 0 16
39540: ST_TO_ADDR
// uc_nation := nation ;
39541: LD_ADDR_OWVAR 21
39545: PUSH
39546: LD_VAR 0 17
39550: ST_TO_ADDR
// if buildings then
39551: LD_VAR 0 18
39555: IFFALSE 40877
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39557: LD_ADDR_VAR 0 19
39561: PUSH
39562: LD_VAR 0 18
39566: PPUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 30
39572: PUSH
39573: LD_INT 29
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 30
39582: PUSH
39583: LD_INT 30
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: LIST
39594: PPUSH
39595: CALL_OW 72
39599: ST_TO_ADDR
// if tmp then
39600: LD_VAR 0 19
39604: IFFALSE 39652
// for i in tmp do
39606: LD_ADDR_VAR 0 8
39610: PUSH
39611: LD_VAR 0 19
39615: PUSH
39616: FOR_IN
39617: IFFALSE 39650
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39619: LD_VAR 0 8
39623: PPUSH
39624: CALL_OW 250
39628: PPUSH
39629: LD_VAR 0 8
39633: PPUSH
39634: CALL_OW 251
39638: PPUSH
39639: LD_VAR 0 16
39643: PPUSH
39644: CALL_OW 441
39648: GO 39616
39650: POP
39651: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39652: LD_VAR 0 18
39656: PPUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 30
39662: PUSH
39663: LD_INT 32
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 30
39672: PUSH
39673: LD_INT 33
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PPUSH
39685: CALL_OW 72
39689: IFFALSE 39777
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39691: LD_ADDR_VAR 0 8
39695: PUSH
39696: LD_VAR 0 18
39700: PPUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 32
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 33
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PPUSH
39729: CALL_OW 72
39733: PUSH
39734: FOR_IN
39735: IFFALSE 39775
// begin if not GetBWeapon ( i ) then
39737: LD_VAR 0 8
39741: PPUSH
39742: CALL_OW 269
39746: NOT
39747: IFFALSE 39773
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39749: LD_VAR 0 8
39753: PPUSH
39754: LD_VAR 0 8
39758: PPUSH
39759: LD_VAR 0 2
39763: PPUSH
39764: CALL 41023 0 2
39768: PPUSH
39769: CALL_OW 431
// end ;
39773: GO 39734
39775: POP
39776: POP
// end ; for i = 1 to personel do
39777: LD_ADDR_VAR 0 8
39781: PUSH
39782: DOUBLE
39783: LD_INT 1
39785: DEC
39786: ST_TO_ADDR
39787: LD_VAR 0 6
39791: PUSH
39792: FOR_TO
39793: IFFALSE 40857
// begin if i > 4 then
39795: LD_VAR 0 8
39799: PUSH
39800: LD_INT 4
39802: GREATER
39803: IFFALSE 39807
// break ;
39805: GO 40857
// case i of 1 :
39807: LD_VAR 0 8
39811: PUSH
39812: LD_INT 1
39814: DOUBLE
39815: EQUAL
39816: IFTRUE 39820
39818: GO 39900
39820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39821: LD_ADDR_VAR 0 12
39825: PUSH
39826: LD_VAR 0 18
39830: PPUSH
39831: LD_INT 22
39833: PUSH
39834: LD_VAR 0 16
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 58
39845: PUSH
39846: EMPTY
39847: LIST
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 32
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 30
39864: PUSH
39865: LD_INT 4
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 30
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: PPUSH
39893: CALL_OW 72
39897: ST_TO_ADDR
39898: GO 40122
39900: LD_INT 2
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39908
39906: GO 39970
39908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39909: LD_ADDR_VAR 0 12
39913: PUSH
39914: LD_VAR 0 18
39918: PPUSH
39919: LD_INT 22
39921: PUSH
39922: LD_VAR 0 16
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 30
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 30
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 72
39967: ST_TO_ADDR
39968: GO 40122
39970: LD_INT 3
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40040
39978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39979: LD_ADDR_VAR 0 12
39983: PUSH
39984: LD_VAR 0 18
39988: PPUSH
39989: LD_INT 22
39991: PUSH
39992: LD_VAR 0 16
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 30
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 30
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: LIST
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PPUSH
40033: CALL_OW 72
40037: ST_TO_ADDR
40038: GO 40122
40040: LD_INT 4
40042: DOUBLE
40043: EQUAL
40044: IFTRUE 40048
40046: GO 40121
40048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40049: LD_ADDR_VAR 0 12
40053: PUSH
40054: LD_VAR 0 18
40058: PPUSH
40059: LD_INT 22
40061: PUSH
40062: LD_VAR 0 16
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: LD_INT 30
40076: PUSH
40077: LD_INT 6
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 30
40086: PUSH
40087: LD_INT 7
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 30
40096: PUSH
40097: LD_INT 8
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 72
40118: ST_TO_ADDR
40119: GO 40122
40121: POP
// if i = 1 then
40122: LD_VAR 0 8
40126: PUSH
40127: LD_INT 1
40129: EQUAL
40130: IFFALSE 40241
// begin tmp := [ ] ;
40132: LD_ADDR_VAR 0 19
40136: PUSH
40137: EMPTY
40138: ST_TO_ADDR
// for j in f do
40139: LD_ADDR_VAR 0 9
40143: PUSH
40144: LD_VAR 0 12
40148: PUSH
40149: FOR_IN
40150: IFFALSE 40223
// if GetBType ( j ) = b_bunker then
40152: LD_VAR 0 9
40156: PPUSH
40157: CALL_OW 266
40161: PUSH
40162: LD_INT 32
40164: EQUAL
40165: IFFALSE 40192
// tmp := Insert ( tmp , 1 , j ) else
40167: LD_ADDR_VAR 0 19
40171: PUSH
40172: LD_VAR 0 19
40176: PPUSH
40177: LD_INT 1
40179: PPUSH
40180: LD_VAR 0 9
40184: PPUSH
40185: CALL_OW 2
40189: ST_TO_ADDR
40190: GO 40221
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40192: LD_ADDR_VAR 0 19
40196: PUSH
40197: LD_VAR 0 19
40201: PPUSH
40202: LD_VAR 0 19
40206: PUSH
40207: LD_INT 1
40209: PLUS
40210: PPUSH
40211: LD_VAR 0 9
40215: PPUSH
40216: CALL_OW 2
40220: ST_TO_ADDR
40221: GO 40149
40223: POP
40224: POP
// if tmp then
40225: LD_VAR 0 19
40229: IFFALSE 40241
// f := tmp ;
40231: LD_ADDR_VAR 0 12
40235: PUSH
40236: LD_VAR 0 19
40240: ST_TO_ADDR
// end ; x := personel [ i ] ;
40241: LD_ADDR_VAR 0 13
40245: PUSH
40246: LD_VAR 0 6
40250: PUSH
40251: LD_VAR 0 8
40255: ARRAY
40256: ST_TO_ADDR
// if x = - 1 then
40257: LD_VAR 0 13
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: EQUAL
40266: IFFALSE 40475
// begin for j in f do
40268: LD_ADDR_VAR 0 9
40272: PUSH
40273: LD_VAR 0 12
40277: PUSH
40278: FOR_IN
40279: IFFALSE 40471
// repeat InitHc ;
40281: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40285: LD_VAR 0 9
40289: PPUSH
40290: CALL_OW 266
40294: PUSH
40295: LD_INT 5
40297: EQUAL
40298: IFFALSE 40368
// begin if UnitsInside ( j ) < 3 then
40300: LD_VAR 0 9
40304: PPUSH
40305: CALL_OW 313
40309: PUSH
40310: LD_INT 3
40312: LESS
40313: IFFALSE 40349
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40315: LD_INT 0
40317: PPUSH
40318: LD_INT 5
40320: PUSH
40321: LD_INT 8
40323: PUSH
40324: LD_INT 9
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: PUSH
40332: LD_VAR 0 17
40336: ARRAY
40337: PPUSH
40338: LD_VAR 0 4
40342: PPUSH
40343: CALL_OW 380
40347: GO 40366
// PrepareHuman ( false , i , skill ) ;
40349: LD_INT 0
40351: PPUSH
40352: LD_VAR 0 8
40356: PPUSH
40357: LD_VAR 0 4
40361: PPUSH
40362: CALL_OW 380
// end else
40366: GO 40385
// PrepareHuman ( false , i , skill ) ;
40368: LD_INT 0
40370: PPUSH
40371: LD_VAR 0 8
40375: PPUSH
40376: LD_VAR 0 4
40380: PPUSH
40381: CALL_OW 380
// un := CreateHuman ;
40385: LD_ADDR_VAR 0 14
40389: PUSH
40390: CALL_OW 44
40394: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40395: LD_ADDR_VAR 0 7
40399: PUSH
40400: LD_VAR 0 7
40404: PPUSH
40405: LD_INT 1
40407: PPUSH
40408: LD_VAR 0 14
40412: PPUSH
40413: CALL_OW 2
40417: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40418: LD_VAR 0 14
40422: PPUSH
40423: LD_VAR 0 9
40427: PPUSH
40428: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40432: LD_VAR 0 9
40436: PPUSH
40437: CALL_OW 313
40441: PUSH
40442: LD_INT 6
40444: EQUAL
40445: PUSH
40446: LD_VAR 0 9
40450: PPUSH
40451: CALL_OW 266
40455: PUSH
40456: LD_INT 32
40458: PUSH
40459: LD_INT 31
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: IN
40466: OR
40467: IFFALSE 40281
40469: GO 40278
40471: POP
40472: POP
// end else
40473: GO 40855
// for j = 1 to x do
40475: LD_ADDR_VAR 0 9
40479: PUSH
40480: DOUBLE
40481: LD_INT 1
40483: DEC
40484: ST_TO_ADDR
40485: LD_VAR 0 13
40489: PUSH
40490: FOR_TO
40491: IFFALSE 40853
// begin InitHc ;
40493: CALL_OW 19
// if not f then
40497: LD_VAR 0 12
40501: NOT
40502: IFFALSE 40591
// begin PrepareHuman ( false , i , skill ) ;
40504: LD_INT 0
40506: PPUSH
40507: LD_VAR 0 8
40511: PPUSH
40512: LD_VAR 0 4
40516: PPUSH
40517: CALL_OW 380
// un := CreateHuman ;
40521: LD_ADDR_VAR 0 14
40525: PUSH
40526: CALL_OW 44
40530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40531: LD_ADDR_VAR 0 7
40535: PUSH
40536: LD_VAR 0 7
40540: PPUSH
40541: LD_INT 1
40543: PPUSH
40544: LD_VAR 0 14
40548: PPUSH
40549: CALL_OW 2
40553: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40554: LD_VAR 0 14
40558: PPUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 250
40568: PPUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: CALL_OW 251
40578: PPUSH
40579: LD_INT 10
40581: PPUSH
40582: LD_INT 0
40584: PPUSH
40585: CALL_OW 50
// continue ;
40589: GO 40490
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40591: LD_VAR 0 12
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: PPUSH
40600: CALL_OW 313
40604: PUSH
40605: LD_VAR 0 12
40609: PUSH
40610: LD_INT 1
40612: ARRAY
40613: PPUSH
40614: CALL_OW 266
40618: PUSH
40619: LD_INT 32
40621: PUSH
40622: LD_INT 31
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: IN
40629: AND
40630: PUSH
40631: LD_VAR 0 12
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: CALL_OW 313
40644: PUSH
40645: LD_INT 6
40647: EQUAL
40648: OR
40649: IFFALSE 40669
// f := Delete ( f , 1 ) ;
40651: LD_ADDR_VAR 0 12
40655: PUSH
40656: LD_VAR 0 12
40660: PPUSH
40661: LD_INT 1
40663: PPUSH
40664: CALL_OW 3
40668: ST_TO_ADDR
// if not f then
40669: LD_VAR 0 12
40673: NOT
40674: IFFALSE 40692
// begin x := x + 2 ;
40676: LD_ADDR_VAR 0 13
40680: PUSH
40681: LD_VAR 0 13
40685: PUSH
40686: LD_INT 2
40688: PLUS
40689: ST_TO_ADDR
// continue ;
40690: GO 40490
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40692: LD_VAR 0 12
40696: PUSH
40697: LD_INT 1
40699: ARRAY
40700: PPUSH
40701: CALL_OW 266
40705: PUSH
40706: LD_INT 5
40708: EQUAL
40709: IFFALSE 40783
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40711: LD_VAR 0 12
40715: PUSH
40716: LD_INT 1
40718: ARRAY
40719: PPUSH
40720: CALL_OW 313
40724: PUSH
40725: LD_INT 3
40727: LESS
40728: IFFALSE 40764
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40730: LD_INT 0
40732: PPUSH
40733: LD_INT 5
40735: PUSH
40736: LD_INT 8
40738: PUSH
40739: LD_INT 9
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: LD_VAR 0 17
40751: ARRAY
40752: PPUSH
40753: LD_VAR 0 4
40757: PPUSH
40758: CALL_OW 380
40762: GO 40781
// PrepareHuman ( false , i , skill ) ;
40764: LD_INT 0
40766: PPUSH
40767: LD_VAR 0 8
40771: PPUSH
40772: LD_VAR 0 4
40776: PPUSH
40777: CALL_OW 380
// end else
40781: GO 40800
// PrepareHuman ( false , i , skill ) ;
40783: LD_INT 0
40785: PPUSH
40786: LD_VAR 0 8
40790: PPUSH
40791: LD_VAR 0 4
40795: PPUSH
40796: CALL_OW 380
// un := CreateHuman ;
40800: LD_ADDR_VAR 0 14
40804: PUSH
40805: CALL_OW 44
40809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40810: LD_ADDR_VAR 0 7
40814: PUSH
40815: LD_VAR 0 7
40819: PPUSH
40820: LD_INT 1
40822: PPUSH
40823: LD_VAR 0 14
40827: PPUSH
40828: CALL_OW 2
40832: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40833: LD_VAR 0 14
40837: PPUSH
40838: LD_VAR 0 12
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: PPUSH
40847: CALL_OW 52
// end ;
40851: GO 40490
40853: POP
40854: POP
// end ;
40855: GO 39792
40857: POP
40858: POP
// result := result ^ buildings ;
40859: LD_ADDR_VAR 0 7
40863: PUSH
40864: LD_VAR 0 7
40868: PUSH
40869: LD_VAR 0 18
40873: ADD
40874: ST_TO_ADDR
// end else
40875: GO 41018
// begin for i = 1 to personel do
40877: LD_ADDR_VAR 0 8
40881: PUSH
40882: DOUBLE
40883: LD_INT 1
40885: DEC
40886: ST_TO_ADDR
40887: LD_VAR 0 6
40891: PUSH
40892: FOR_TO
40893: IFFALSE 41016
// begin if i > 4 then
40895: LD_VAR 0 8
40899: PUSH
40900: LD_INT 4
40902: GREATER
40903: IFFALSE 40907
// break ;
40905: GO 41016
// x := personel [ i ] ;
40907: LD_ADDR_VAR 0 13
40911: PUSH
40912: LD_VAR 0 6
40916: PUSH
40917: LD_VAR 0 8
40921: ARRAY
40922: ST_TO_ADDR
// if x = - 1 then
40923: LD_VAR 0 13
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: EQUAL
40932: IFFALSE 40936
// continue ;
40934: GO 40892
// PrepareHuman ( false , i , skill ) ;
40936: LD_INT 0
40938: PPUSH
40939: LD_VAR 0 8
40943: PPUSH
40944: LD_VAR 0 4
40948: PPUSH
40949: CALL_OW 380
// un := CreateHuman ;
40953: LD_ADDR_VAR 0 14
40957: PUSH
40958: CALL_OW 44
40962: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40963: LD_VAR 0 14
40967: PPUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 250
40977: PPUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 251
40987: PPUSH
40988: LD_INT 10
40990: PPUSH
40991: LD_INT 0
40993: PPUSH
40994: CALL_OW 50
// result := result ^ un ;
40998: LD_ADDR_VAR 0 7
41002: PUSH
41003: LD_VAR 0 7
41007: PUSH
41008: LD_VAR 0 14
41012: ADD
41013: ST_TO_ADDR
// end ;
41014: GO 40892
41016: POP
41017: POP
// end ; end ;
41018: LD_VAR 0 7
41022: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41023: LD_INT 0
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
// result := false ;
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_INT 0
41048: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41049: LD_VAR 0 1
41053: NOT
41054: PUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 266
41064: PUSH
41065: LD_INT 32
41067: PUSH
41068: LD_INT 33
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: IN
41075: NOT
41076: OR
41077: IFFALSE 41081
// exit ;
41079: GO 42190
// nat := GetNation ( tower ) ;
41081: LD_ADDR_VAR 0 12
41085: PUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 248
41095: ST_TO_ADDR
// side := GetSide ( tower ) ;
41096: LD_ADDR_VAR 0 16
41100: PUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: CALL_OW 255
41110: ST_TO_ADDR
// x := GetX ( tower ) ;
41111: LD_ADDR_VAR 0 10
41115: PUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 250
41125: ST_TO_ADDR
// y := GetY ( tower ) ;
41126: LD_ADDR_VAR 0 11
41130: PUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 251
41140: ST_TO_ADDR
// if not x or not y then
41141: LD_VAR 0 10
41145: NOT
41146: PUSH
41147: LD_VAR 0 11
41151: NOT
41152: OR
41153: IFFALSE 41157
// exit ;
41155: GO 42190
// weapon := 0 ;
41157: LD_ADDR_VAR 0 18
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// fac_list := [ ] ;
41165: LD_ADDR_VAR 0 17
41169: PUSH
41170: EMPTY
41171: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41172: LD_ADDR_VAR 0 6
41176: PUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 274
41186: PPUSH
41187: LD_VAR 0 2
41191: PPUSH
41192: LD_INT 0
41194: PPUSH
41195: CALL 38761 0 3
41199: PPUSH
41200: LD_INT 30
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PPUSH
41210: CALL_OW 72
41214: ST_TO_ADDR
// if not factories then
41215: LD_VAR 0 6
41219: NOT
41220: IFFALSE 41224
// exit ;
41222: GO 42190
// for i in factories do
41224: LD_ADDR_VAR 0 8
41228: PUSH
41229: LD_VAR 0 6
41233: PUSH
41234: FOR_IN
41235: IFFALSE 41260
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41237: LD_ADDR_VAR 0 17
41241: PUSH
41242: LD_VAR 0 17
41246: PUSH
41247: LD_VAR 0 8
41251: PPUSH
41252: CALL_OW 478
41256: UNION
41257: ST_TO_ADDR
41258: GO 41234
41260: POP
41261: POP
// if not fac_list then
41262: LD_VAR 0 17
41266: NOT
41267: IFFALSE 41271
// exit ;
41269: GO 42190
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41271: LD_ADDR_VAR 0 5
41275: PUSH
41276: LD_INT 4
41278: PUSH
41279: LD_INT 5
41281: PUSH
41282: LD_INT 9
41284: PUSH
41285: LD_INT 10
41287: PUSH
41288: LD_INT 6
41290: PUSH
41291: LD_INT 7
41293: PUSH
41294: LD_INT 11
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 27
41308: PUSH
41309: LD_INT 28
41311: PUSH
41312: LD_INT 26
41314: PUSH
41315: LD_INT 30
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 43
41326: PUSH
41327: LD_INT 44
41329: PUSH
41330: LD_INT 46
41332: PUSH
41333: LD_INT 45
41335: PUSH
41336: LD_INT 47
41338: PUSH
41339: LD_INT 49
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: PUSH
41355: LD_VAR 0 12
41359: ARRAY
41360: ST_TO_ADDR
// list := list isect fac_list ;
41361: LD_ADDR_VAR 0 5
41365: PUSH
41366: LD_VAR 0 5
41370: PUSH
41371: LD_VAR 0 17
41375: ISECT
41376: ST_TO_ADDR
// if not list then
41377: LD_VAR 0 5
41381: NOT
41382: IFFALSE 41386
// exit ;
41384: GO 42190
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41386: LD_VAR 0 12
41390: PUSH
41391: LD_INT 3
41393: EQUAL
41394: PUSH
41395: LD_INT 49
41397: PUSH
41398: LD_VAR 0 5
41402: IN
41403: AND
41404: PUSH
41405: LD_INT 31
41407: PPUSH
41408: LD_VAR 0 16
41412: PPUSH
41413: CALL_OW 321
41417: PUSH
41418: LD_INT 2
41420: EQUAL
41421: AND
41422: IFFALSE 41482
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41424: LD_INT 22
41426: PUSH
41427: LD_VAR 0 16
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 35
41438: PUSH
41439: LD_INT 49
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 91
41448: PUSH
41449: LD_VAR 0 1
41453: PUSH
41454: LD_INT 10
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: PPUSH
41467: CALL_OW 69
41471: NOT
41472: IFFALSE 41482
// weapon := ru_time_lapser ;
41474: LD_ADDR_VAR 0 18
41478: PUSH
41479: LD_INT 49
41481: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41482: LD_VAR 0 12
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: IN
41497: PUSH
41498: LD_INT 11
41500: PUSH
41501: LD_VAR 0 5
41505: IN
41506: PUSH
41507: LD_INT 30
41509: PUSH
41510: LD_VAR 0 5
41514: IN
41515: OR
41516: AND
41517: PUSH
41518: LD_INT 6
41520: PPUSH
41521: LD_VAR 0 16
41525: PPUSH
41526: CALL_OW 321
41530: PUSH
41531: LD_INT 2
41533: EQUAL
41534: AND
41535: IFFALSE 41700
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41537: LD_INT 22
41539: PUSH
41540: LD_VAR 0 16
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: LD_INT 35
41554: PUSH
41555: LD_INT 11
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 35
41564: PUSH
41565: LD_INT 30
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 91
41579: PUSH
41580: LD_VAR 0 1
41584: PUSH
41585: LD_INT 18
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: PPUSH
41598: CALL_OW 69
41602: NOT
41603: PUSH
41604: LD_INT 22
41606: PUSH
41607: LD_VAR 0 16
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 30
41621: PUSH
41622: LD_INT 32
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 30
41631: PUSH
41632: LD_INT 33
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 91
41646: PUSH
41647: LD_VAR 0 1
41651: PUSH
41652: LD_INT 12
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: PUSH
41665: EMPTY
41666: LIST
41667: PPUSH
41668: CALL_OW 69
41672: PUSH
41673: LD_INT 2
41675: GREATER
41676: AND
41677: IFFALSE 41700
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41679: LD_ADDR_VAR 0 18
41683: PUSH
41684: LD_INT 11
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_VAR 0 12
41698: ARRAY
41699: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41700: LD_VAR 0 18
41704: NOT
41705: PUSH
41706: LD_INT 40
41708: PPUSH
41709: LD_VAR 0 16
41713: PPUSH
41714: CALL_OW 321
41718: PUSH
41719: LD_INT 2
41721: EQUAL
41722: AND
41723: PUSH
41724: LD_INT 7
41726: PUSH
41727: LD_VAR 0 5
41731: IN
41732: PUSH
41733: LD_INT 28
41735: PUSH
41736: LD_VAR 0 5
41740: IN
41741: OR
41742: PUSH
41743: LD_INT 45
41745: PUSH
41746: LD_VAR 0 5
41750: IN
41751: OR
41752: AND
41753: IFFALSE 42007
// begin hex := GetHexInfo ( x , y ) ;
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: LD_VAR 0 10
41764: PPUSH
41765: LD_VAR 0 11
41769: PPUSH
41770: CALL_OW 546
41774: ST_TO_ADDR
// if hex [ 1 ] then
41775: LD_VAR 0 4
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: IFFALSE 41787
// exit ;
41785: GO 42190
// height := hex [ 2 ] ;
41787: LD_ADDR_VAR 0 15
41791: PUSH
41792: LD_VAR 0 4
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41801: LD_ADDR_VAR 0 14
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: LD_INT 5
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
// for i in tmp do
41824: LD_ADDR_VAR 0 8
41828: PUSH
41829: LD_VAR 0 14
41833: PUSH
41834: FOR_IN
41835: IFFALSE 42005
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41837: LD_ADDR_VAR 0 9
41841: PUSH
41842: LD_VAR 0 10
41846: PPUSH
41847: LD_VAR 0 8
41851: PPUSH
41852: LD_INT 5
41854: PPUSH
41855: CALL_OW 272
41859: PUSH
41860: LD_VAR 0 11
41864: PPUSH
41865: LD_VAR 0 8
41869: PPUSH
41870: LD_INT 5
41872: PPUSH
41873: CALL_OW 273
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41882: LD_VAR 0 9
41886: PUSH
41887: LD_INT 1
41889: ARRAY
41890: PPUSH
41891: LD_VAR 0 9
41895: PUSH
41896: LD_INT 2
41898: ARRAY
41899: PPUSH
41900: CALL_OW 488
41904: IFFALSE 42003
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 9
41915: PUSH
41916: LD_INT 1
41918: ARRAY
41919: PPUSH
41920: LD_VAR 0 9
41924: PUSH
41925: LD_INT 2
41927: ARRAY
41928: PPUSH
41929: CALL_OW 546
41933: ST_TO_ADDR
// if hex [ 1 ] then
41934: LD_VAR 0 4
41938: PUSH
41939: LD_INT 1
41941: ARRAY
41942: IFFALSE 41946
// continue ;
41944: GO 41834
// h := hex [ 2 ] ;
41946: LD_ADDR_VAR 0 13
41950: PUSH
41951: LD_VAR 0 4
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: ST_TO_ADDR
// if h + 7 < height then
41960: LD_VAR 0 13
41964: PUSH
41965: LD_INT 7
41967: PLUS
41968: PUSH
41969: LD_VAR 0 15
41973: LESS
41974: IFFALSE 42003
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41976: LD_ADDR_VAR 0 18
41980: PUSH
41981: LD_INT 7
41983: PUSH
41984: LD_INT 28
41986: PUSH
41987: LD_INT 45
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: PUSH
41995: LD_VAR 0 12
41999: ARRAY
42000: ST_TO_ADDR
// break ;
42001: GO 42005
// end ; end ; end ;
42003: GO 41834
42005: POP
42006: POP
// end ; if not weapon then
42007: LD_VAR 0 18
42011: NOT
42012: IFFALSE 42072
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42014: LD_ADDR_VAR 0 5
42018: PUSH
42019: LD_VAR 0 5
42023: PUSH
42024: LD_INT 11
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: LD_INT 49
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: DIFF
42038: ST_TO_ADDR
// if not list then
42039: LD_VAR 0 5
42043: NOT
42044: IFFALSE 42048
// exit ;
42046: GO 42190
// weapon := list [ rand ( 1 , list ) ] ;
42048: LD_ADDR_VAR 0 18
42052: PUSH
42053: LD_VAR 0 5
42057: PUSH
42058: LD_INT 1
42060: PPUSH
42061: LD_VAR 0 5
42065: PPUSH
42066: CALL_OW 12
42070: ARRAY
42071: ST_TO_ADDR
// end ; if weapon then
42072: LD_VAR 0 18
42076: IFFALSE 42190
// begin tmp := CostOfWeapon ( weapon ) ;
42078: LD_ADDR_VAR 0 14
42082: PUSH
42083: LD_VAR 0 18
42087: PPUSH
42088: CALL_OW 451
42092: ST_TO_ADDR
// j := GetBase ( tower ) ;
42093: LD_ADDR_VAR 0 9
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 274
42107: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42108: LD_VAR 0 9
42112: PPUSH
42113: LD_INT 1
42115: PPUSH
42116: CALL_OW 275
42120: PUSH
42121: LD_VAR 0 14
42125: PUSH
42126: LD_INT 1
42128: ARRAY
42129: GREATEREQUAL
42130: PUSH
42131: LD_VAR 0 9
42135: PPUSH
42136: LD_INT 2
42138: PPUSH
42139: CALL_OW 275
42143: PUSH
42144: LD_VAR 0 14
42148: PUSH
42149: LD_INT 2
42151: ARRAY
42152: GREATEREQUAL
42153: AND
42154: PUSH
42155: LD_VAR 0 9
42159: PPUSH
42160: LD_INT 3
42162: PPUSH
42163: CALL_OW 275
42167: PUSH
42168: LD_VAR 0 14
42172: PUSH
42173: LD_INT 3
42175: ARRAY
42176: GREATEREQUAL
42177: AND
42178: IFFALSE 42190
// result := weapon ;
42180: LD_ADDR_VAR 0 3
42184: PUSH
42185: LD_VAR 0 18
42189: ST_TO_ADDR
// end ; end ;
42190: LD_VAR 0 3
42194: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
// result := true ;
42199: LD_ADDR_VAR 0 3
42203: PUSH
42204: LD_INT 1
42206: ST_TO_ADDR
// if array1 = array2 then
42207: LD_VAR 0 1
42211: PUSH
42212: LD_VAR 0 2
42216: EQUAL
42217: IFFALSE 42277
// begin for i = 1 to array1 do
42219: LD_ADDR_VAR 0 4
42223: PUSH
42224: DOUBLE
42225: LD_INT 1
42227: DEC
42228: ST_TO_ADDR
42229: LD_VAR 0 1
42233: PUSH
42234: FOR_TO
42235: IFFALSE 42273
// if array1 [ i ] <> array2 [ i ] then
42237: LD_VAR 0 1
42241: PUSH
42242: LD_VAR 0 4
42246: ARRAY
42247: PUSH
42248: LD_VAR 0 2
42252: PUSH
42253: LD_VAR 0 4
42257: ARRAY
42258: NONEQUAL
42259: IFFALSE 42271
// begin result := false ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_INT 0
42268: ST_TO_ADDR
// break ;
42269: GO 42273
// end ;
42271: GO 42234
42273: POP
42274: POP
// end else
42275: GO 42285
// result := false ;
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_INT 0
42284: ST_TO_ADDR
// end ;
42285: LD_VAR 0 3
42289: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42290: LD_INT 0
42292: PPUSH
42293: PPUSH
// if not array1 or not array2 then
42294: LD_VAR 0 1
42298: NOT
42299: PUSH
42300: LD_VAR 0 2
42304: NOT
42305: OR
42306: IFFALSE 42310
// exit ;
42308: GO 42374
// result := true ;
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_INT 1
42317: ST_TO_ADDR
// for i = 1 to array1 do
42318: LD_ADDR_VAR 0 4
42322: PUSH
42323: DOUBLE
42324: LD_INT 1
42326: DEC
42327: ST_TO_ADDR
42328: LD_VAR 0 1
42332: PUSH
42333: FOR_TO
42334: IFFALSE 42372
// if array1 [ i ] <> array2 [ i ] then
42336: LD_VAR 0 1
42340: PUSH
42341: LD_VAR 0 4
42345: ARRAY
42346: PUSH
42347: LD_VAR 0 2
42351: PUSH
42352: LD_VAR 0 4
42356: ARRAY
42357: NONEQUAL
42358: IFFALSE 42370
// begin result := false ;
42360: LD_ADDR_VAR 0 3
42364: PUSH
42365: LD_INT 0
42367: ST_TO_ADDR
// break ;
42368: GO 42372
// end ;
42370: GO 42333
42372: POP
42373: POP
// end ;
42374: LD_VAR 0 3
42378: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42379: LD_INT 0
42381: PPUSH
42382: PPUSH
42383: PPUSH
// pom := GetBase ( fac ) ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 274
42398: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42399: LD_ADDR_VAR 0 4
42403: PUSH
42404: LD_VAR 0 2
42408: PUSH
42409: LD_INT 1
42411: ARRAY
42412: PPUSH
42413: LD_VAR 0 2
42417: PUSH
42418: LD_INT 2
42420: ARRAY
42421: PPUSH
42422: LD_VAR 0 2
42426: PUSH
42427: LD_INT 3
42429: ARRAY
42430: PPUSH
42431: LD_VAR 0 2
42435: PUSH
42436: LD_INT 4
42438: ARRAY
42439: PPUSH
42440: CALL_OW 449
42444: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42445: LD_ADDR_VAR 0 3
42449: PUSH
42450: LD_VAR 0 5
42454: PPUSH
42455: LD_INT 1
42457: PPUSH
42458: CALL_OW 275
42462: PUSH
42463: LD_VAR 0 4
42467: PUSH
42468: LD_INT 1
42470: ARRAY
42471: GREATEREQUAL
42472: PUSH
42473: LD_VAR 0 5
42477: PPUSH
42478: LD_INT 2
42480: PPUSH
42481: CALL_OW 275
42485: PUSH
42486: LD_VAR 0 4
42490: PUSH
42491: LD_INT 2
42493: ARRAY
42494: GREATEREQUAL
42495: AND
42496: PUSH
42497: LD_VAR 0 5
42501: PPUSH
42502: LD_INT 3
42504: PPUSH
42505: CALL_OW 275
42509: PUSH
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 3
42517: ARRAY
42518: GREATEREQUAL
42519: AND
42520: ST_TO_ADDR
// end ;
42521: LD_VAR 0 3
42525: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42526: LD_INT 0
42528: PPUSH
42529: PPUSH
42530: PPUSH
42531: PPUSH
// pom := GetBase ( building ) ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 274
42546: ST_TO_ADDR
// if not pom then
42547: LD_VAR 0 3
42551: NOT
42552: IFFALSE 42556
// exit ;
42554: GO 42726
// btype := GetBType ( building ) ;
42556: LD_ADDR_VAR 0 5
42560: PUSH
42561: LD_VAR 0 1
42565: PPUSH
42566: CALL_OW 266
42570: ST_TO_ADDR
// if btype = b_armoury then
42571: LD_VAR 0 5
42575: PUSH
42576: LD_INT 4
42578: EQUAL
42579: IFFALSE 42589
// btype := b_barracks ;
42581: LD_ADDR_VAR 0 5
42585: PUSH
42586: LD_INT 5
42588: ST_TO_ADDR
// if btype = b_depot then
42589: LD_VAR 0 5
42593: PUSH
42594: LD_INT 0
42596: EQUAL
42597: IFFALSE 42607
// btype := b_warehouse ;
42599: LD_ADDR_VAR 0 5
42603: PUSH
42604: LD_INT 1
42606: ST_TO_ADDR
// if btype = b_workshop then
42607: LD_VAR 0 5
42611: PUSH
42612: LD_INT 2
42614: EQUAL
42615: IFFALSE 42625
// btype := b_factory ;
42617: LD_ADDR_VAR 0 5
42621: PUSH
42622: LD_INT 3
42624: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42625: LD_ADDR_VAR 0 4
42629: PUSH
42630: LD_VAR 0 5
42634: PPUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 248
42644: PPUSH
42645: CALL_OW 450
42649: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42650: LD_ADDR_VAR 0 2
42654: PUSH
42655: LD_VAR 0 3
42659: PPUSH
42660: LD_INT 1
42662: PPUSH
42663: CALL_OW 275
42667: PUSH
42668: LD_VAR 0 4
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: GREATEREQUAL
42677: PUSH
42678: LD_VAR 0 3
42682: PPUSH
42683: LD_INT 2
42685: PPUSH
42686: CALL_OW 275
42690: PUSH
42691: LD_VAR 0 4
42695: PUSH
42696: LD_INT 2
42698: ARRAY
42699: GREATEREQUAL
42700: AND
42701: PUSH
42702: LD_VAR 0 3
42706: PPUSH
42707: LD_INT 3
42709: PPUSH
42710: CALL_OW 275
42714: PUSH
42715: LD_VAR 0 4
42719: PUSH
42720: LD_INT 3
42722: ARRAY
42723: GREATEREQUAL
42724: AND
42725: ST_TO_ADDR
// end ;
42726: LD_VAR 0 2
42730: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42731: LD_INT 0
42733: PPUSH
42734: PPUSH
42735: PPUSH
// pom := GetBase ( building ) ;
42736: LD_ADDR_VAR 0 4
42740: PUSH
42741: LD_VAR 0 1
42745: PPUSH
42746: CALL_OW 274
42750: ST_TO_ADDR
// if not pom then
42751: LD_VAR 0 4
42755: NOT
42756: IFFALSE 42760
// exit ;
42758: GO 42861
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42760: LD_ADDR_VAR 0 5
42764: PUSH
42765: LD_VAR 0 2
42769: PPUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: CALL_OW 248
42779: PPUSH
42780: CALL_OW 450
42784: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42785: LD_ADDR_VAR 0 3
42789: PUSH
42790: LD_VAR 0 4
42794: PPUSH
42795: LD_INT 1
42797: PPUSH
42798: CALL_OW 275
42802: PUSH
42803: LD_VAR 0 5
42807: PUSH
42808: LD_INT 1
42810: ARRAY
42811: GREATEREQUAL
42812: PUSH
42813: LD_VAR 0 4
42817: PPUSH
42818: LD_INT 2
42820: PPUSH
42821: CALL_OW 275
42825: PUSH
42826: LD_VAR 0 5
42830: PUSH
42831: LD_INT 2
42833: ARRAY
42834: GREATEREQUAL
42835: AND
42836: PUSH
42837: LD_VAR 0 4
42841: PPUSH
42842: LD_INT 3
42844: PPUSH
42845: CALL_OW 275
42849: PUSH
42850: LD_VAR 0 5
42854: PUSH
42855: LD_INT 3
42857: ARRAY
42858: GREATEREQUAL
42859: AND
42860: ST_TO_ADDR
// end ;
42861: LD_VAR 0 3
42865: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42866: LD_INT 0
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
// result := false ;
42879: LD_ADDR_VAR 0 8
42883: PUSH
42884: LD_INT 0
42886: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42887: LD_VAR 0 5
42891: NOT
42892: PUSH
42893: LD_VAR 0 1
42897: NOT
42898: OR
42899: PUSH
42900: LD_VAR 0 2
42904: NOT
42905: OR
42906: PUSH
42907: LD_VAR 0 3
42911: NOT
42912: OR
42913: IFFALSE 42917
// exit ;
42915: GO 43731
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42917: LD_ADDR_VAR 0 14
42921: PUSH
42922: LD_VAR 0 1
42926: PPUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: LD_VAR 0 3
42936: PPUSH
42937: LD_VAR 0 4
42941: PPUSH
42942: LD_VAR 0 5
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: PPUSH
42951: CALL_OW 248
42955: PPUSH
42956: LD_INT 0
42958: PPUSH
42959: CALL 44984 0 6
42963: ST_TO_ADDR
// if not hexes then
42964: LD_VAR 0 14
42968: NOT
42969: IFFALSE 42973
// exit ;
42971: GO 43731
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42973: LD_ADDR_VAR 0 17
42977: PUSH
42978: LD_VAR 0 5
42982: PPUSH
42983: LD_INT 22
42985: PUSH
42986: LD_VAR 0 13
42990: PPUSH
42991: CALL_OW 255
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: LD_INT 30
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 30
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PPUSH
43032: CALL_OW 72
43036: ST_TO_ADDR
// for i = 1 to hexes do
43037: LD_ADDR_VAR 0 9
43041: PUSH
43042: DOUBLE
43043: LD_INT 1
43045: DEC
43046: ST_TO_ADDR
43047: LD_VAR 0 14
43051: PUSH
43052: FOR_TO
43053: IFFALSE 43729
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43055: LD_ADDR_VAR 0 13
43059: PUSH
43060: LD_VAR 0 14
43064: PUSH
43065: LD_VAR 0 9
43069: ARRAY
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PPUSH
43075: LD_VAR 0 14
43079: PUSH
43080: LD_VAR 0 9
43084: ARRAY
43085: PUSH
43086: LD_INT 2
43088: ARRAY
43089: PPUSH
43090: CALL_OW 428
43094: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43095: LD_VAR 0 14
43099: PUSH
43100: LD_VAR 0 9
43104: ARRAY
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: PPUSH
43110: LD_VAR 0 14
43114: PUSH
43115: LD_VAR 0 9
43119: ARRAY
43120: PUSH
43121: LD_INT 2
43123: ARRAY
43124: PPUSH
43125: CALL_OW 351
43129: PUSH
43130: LD_VAR 0 14
43134: PUSH
43135: LD_VAR 0 9
43139: ARRAY
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: PPUSH
43145: LD_VAR 0 14
43149: PUSH
43150: LD_VAR 0 9
43154: ARRAY
43155: PUSH
43156: LD_INT 2
43158: ARRAY
43159: PPUSH
43160: CALL_OW 488
43164: NOT
43165: OR
43166: PUSH
43167: LD_VAR 0 13
43171: PPUSH
43172: CALL_OW 247
43176: PUSH
43177: LD_INT 3
43179: EQUAL
43180: OR
43181: IFFALSE 43187
// exit ;
43183: POP
43184: POP
43185: GO 43731
// if not tmp then
43187: LD_VAR 0 13
43191: NOT
43192: IFFALSE 43196
// continue ;
43194: GO 43052
// result := true ;
43196: LD_ADDR_VAR 0 8
43200: PUSH
43201: LD_INT 1
43203: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43204: LD_VAR 0 6
43208: PUSH
43209: LD_VAR 0 13
43213: PPUSH
43214: CALL_OW 247
43218: PUSH
43219: LD_INT 2
43221: EQUAL
43222: AND
43223: PUSH
43224: LD_VAR 0 13
43228: PPUSH
43229: CALL_OW 263
43233: PUSH
43234: LD_INT 1
43236: EQUAL
43237: AND
43238: IFFALSE 43402
// begin if IsDrivenBy ( tmp ) then
43240: LD_VAR 0 13
43244: PPUSH
43245: CALL_OW 311
43249: IFFALSE 43253
// continue ;
43251: GO 43052
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43253: LD_VAR 0 6
43257: PPUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 60
43263: PUSH
43264: EMPTY
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 55
43276: PUSH
43277: EMPTY
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: CALL_OW 72
43292: IFFALSE 43400
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43294: LD_ADDR_VAR 0 18
43298: PUSH
43299: LD_VAR 0 6
43303: PPUSH
43304: LD_INT 3
43306: PUSH
43307: LD_INT 60
43309: PUSH
43310: EMPTY
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 55
43322: PUSH
43323: EMPTY
43324: LIST
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PPUSH
43334: CALL_OW 72
43338: PUSH
43339: LD_INT 1
43341: ARRAY
43342: ST_TO_ADDR
// if IsInUnit ( driver ) then
43343: LD_VAR 0 18
43347: PPUSH
43348: CALL_OW 310
43352: IFFALSE 43363
// ComExit ( driver ) ;
43354: LD_VAR 0 18
43358: PPUSH
43359: CALL 68763 0 1
// AddComEnterUnit ( driver , tmp ) ;
43363: LD_VAR 0 18
43367: PPUSH
43368: LD_VAR 0 13
43372: PPUSH
43373: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43377: LD_VAR 0 18
43381: PPUSH
43382: LD_VAR 0 7
43386: PPUSH
43387: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43391: LD_VAR 0 18
43395: PPUSH
43396: CALL_OW 181
// end ; continue ;
43400: GO 43052
// end ; if not cleaners or not tmp in cleaners then
43402: LD_VAR 0 6
43406: NOT
43407: PUSH
43408: LD_VAR 0 13
43412: PUSH
43413: LD_VAR 0 6
43417: IN
43418: NOT
43419: OR
43420: IFFALSE 43727
// begin if dep then
43422: LD_VAR 0 17
43426: IFFALSE 43562
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43428: LD_ADDR_VAR 0 16
43432: PUSH
43433: LD_VAR 0 17
43437: PUSH
43438: LD_INT 1
43440: ARRAY
43441: PPUSH
43442: CALL_OW 250
43446: PPUSH
43447: LD_VAR 0 17
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: PPUSH
43456: CALL_OW 254
43460: PPUSH
43461: LD_INT 5
43463: PPUSH
43464: CALL_OW 272
43468: PUSH
43469: LD_VAR 0 17
43473: PUSH
43474: LD_INT 1
43476: ARRAY
43477: PPUSH
43478: CALL_OW 251
43482: PPUSH
43483: LD_VAR 0 17
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: PPUSH
43492: CALL_OW 254
43496: PPUSH
43497: LD_INT 5
43499: PPUSH
43500: CALL_OW 273
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43509: LD_VAR 0 16
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PPUSH
43518: LD_VAR 0 16
43522: PUSH
43523: LD_INT 2
43525: ARRAY
43526: PPUSH
43527: CALL_OW 488
43531: IFFALSE 43562
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43533: LD_VAR 0 13
43537: PPUSH
43538: LD_VAR 0 16
43542: PUSH
43543: LD_INT 1
43545: ARRAY
43546: PPUSH
43547: LD_VAR 0 16
43551: PUSH
43552: LD_INT 2
43554: ARRAY
43555: PPUSH
43556: CALL_OW 111
// continue ;
43560: GO 43052
// end ; end ; r := GetDir ( tmp ) ;
43562: LD_ADDR_VAR 0 15
43566: PUSH
43567: LD_VAR 0 13
43571: PPUSH
43572: CALL_OW 254
43576: ST_TO_ADDR
// if r = 5 then
43577: LD_VAR 0 15
43581: PUSH
43582: LD_INT 5
43584: EQUAL
43585: IFFALSE 43595
// r := 0 ;
43587: LD_ADDR_VAR 0 15
43591: PUSH
43592: LD_INT 0
43594: ST_TO_ADDR
// for j = r to 5 do
43595: LD_ADDR_VAR 0 10
43599: PUSH
43600: DOUBLE
43601: LD_VAR 0 15
43605: DEC
43606: ST_TO_ADDR
43607: LD_INT 5
43609: PUSH
43610: FOR_TO
43611: IFFALSE 43725
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43613: LD_ADDR_VAR 0 11
43617: PUSH
43618: LD_VAR 0 13
43622: PPUSH
43623: CALL_OW 250
43627: PPUSH
43628: LD_VAR 0 10
43632: PPUSH
43633: LD_INT 2
43635: PPUSH
43636: CALL_OW 272
43640: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43641: LD_ADDR_VAR 0 12
43645: PUSH
43646: LD_VAR 0 13
43650: PPUSH
43651: CALL_OW 251
43655: PPUSH
43656: LD_VAR 0 10
43660: PPUSH
43661: LD_INT 2
43663: PPUSH
43664: CALL_OW 273
43668: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43669: LD_VAR 0 11
43673: PPUSH
43674: LD_VAR 0 12
43678: PPUSH
43679: CALL_OW 488
43683: PUSH
43684: LD_VAR 0 11
43688: PPUSH
43689: LD_VAR 0 12
43693: PPUSH
43694: CALL_OW 428
43698: NOT
43699: AND
43700: IFFALSE 43723
// begin ComMoveXY ( tmp , _x , _y ) ;
43702: LD_VAR 0 13
43706: PPUSH
43707: LD_VAR 0 11
43711: PPUSH
43712: LD_VAR 0 12
43716: PPUSH
43717: CALL_OW 111
// break ;
43721: GO 43725
// end ; end ;
43723: GO 43610
43725: POP
43726: POP
// end ; end ;
43727: GO 43052
43729: POP
43730: POP
// end ;
43731: LD_VAR 0 8
43735: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43736: LD_INT 0
43738: PPUSH
// result := true ;
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 1
43746: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43747: LD_VAR 0 2
43751: PUSH
43752: LD_INT 24
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43766
43758: LD_INT 33
43760: DOUBLE
43761: EQUAL
43762: IFTRUE 43766
43764: GO 43791
43766: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43767: LD_ADDR_VAR 0 3
43771: PUSH
43772: LD_INT 32
43774: PPUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 321
43784: PUSH
43785: LD_INT 2
43787: EQUAL
43788: ST_TO_ADDR
43789: GO 44107
43791: LD_INT 20
43793: DOUBLE
43794: EQUAL
43795: IFTRUE 43799
43797: GO 43824
43799: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43800: LD_ADDR_VAR 0 3
43804: PUSH
43805: LD_INT 6
43807: PPUSH
43808: LD_VAR 0 1
43812: PPUSH
43813: CALL_OW 321
43817: PUSH
43818: LD_INT 2
43820: EQUAL
43821: ST_TO_ADDR
43822: GO 44107
43824: LD_INT 22
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43838
43830: LD_INT 36
43832: DOUBLE
43833: EQUAL
43834: IFTRUE 43838
43836: GO 43863
43838: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_INT 15
43846: PPUSH
43847: LD_VAR 0 1
43851: PPUSH
43852: CALL_OW 321
43856: PUSH
43857: LD_INT 2
43859: EQUAL
43860: ST_TO_ADDR
43861: GO 44107
43863: LD_INT 30
43865: DOUBLE
43866: EQUAL
43867: IFTRUE 43871
43869: GO 43896
43871: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43872: LD_ADDR_VAR 0 3
43876: PUSH
43877: LD_INT 20
43879: PPUSH
43880: LD_VAR 0 1
43884: PPUSH
43885: CALL_OW 321
43889: PUSH
43890: LD_INT 2
43892: EQUAL
43893: ST_TO_ADDR
43894: GO 44107
43896: LD_INT 28
43898: DOUBLE
43899: EQUAL
43900: IFTRUE 43910
43902: LD_INT 21
43904: DOUBLE
43905: EQUAL
43906: IFTRUE 43910
43908: GO 43935
43910: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_INT 21
43918: PPUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: CALL_OW 321
43928: PUSH
43929: LD_INT 2
43931: EQUAL
43932: ST_TO_ADDR
43933: GO 44107
43935: LD_INT 16
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43943
43941: GO 43968
43943: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43944: LD_ADDR_VAR 0 3
43948: PUSH
43949: LD_INT 84
43951: PPUSH
43952: LD_VAR 0 1
43956: PPUSH
43957: CALL_OW 321
43961: PUSH
43962: LD_INT 2
43964: EQUAL
43965: ST_TO_ADDR
43966: GO 44107
43968: LD_INT 19
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43982
43974: LD_INT 23
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44007
43982: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_INT 83
43990: PPUSH
43991: LD_VAR 0 1
43995: PPUSH
43996: CALL_OW 321
44000: PUSH
44001: LD_INT 2
44003: EQUAL
44004: ST_TO_ADDR
44005: GO 44107
44007: LD_INT 17
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44015
44013: GO 44040
44015: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_INT 39
44023: PPUSH
44024: LD_VAR 0 1
44028: PPUSH
44029: CALL_OW 321
44033: PUSH
44034: LD_INT 2
44036: EQUAL
44037: ST_TO_ADDR
44038: GO 44107
44040: LD_INT 18
44042: DOUBLE
44043: EQUAL
44044: IFTRUE 44048
44046: GO 44073
44048: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44049: LD_ADDR_VAR 0 3
44053: PUSH
44054: LD_INT 40
44056: PPUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 321
44066: PUSH
44067: LD_INT 2
44069: EQUAL
44070: ST_TO_ADDR
44071: GO 44107
44073: LD_INT 27
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44081
44079: GO 44106
44081: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44082: LD_ADDR_VAR 0 3
44086: PUSH
44087: LD_INT 35
44089: PPUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: CALL_OW 321
44099: PUSH
44100: LD_INT 2
44102: EQUAL
44103: ST_TO_ADDR
44104: GO 44107
44106: POP
// end ;
44107: LD_VAR 0 3
44111: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44112: LD_INT 0
44114: PPUSH
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
44121: PPUSH
44122: PPUSH
44123: PPUSH
44124: PPUSH
// result := false ;
44125: LD_ADDR_VAR 0 6
44129: PUSH
44130: LD_INT 0
44132: ST_TO_ADDR
// if btype = b_depot then
44133: LD_VAR 0 2
44137: PUSH
44138: LD_INT 0
44140: EQUAL
44141: IFFALSE 44153
// begin result := true ;
44143: LD_ADDR_VAR 0 6
44147: PUSH
44148: LD_INT 1
44150: ST_TO_ADDR
// exit ;
44151: GO 44979
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44153: LD_VAR 0 1
44157: NOT
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: CALL_OW 266
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: IN
44179: NOT
44180: OR
44181: PUSH
44182: LD_VAR 0 2
44186: NOT
44187: OR
44188: PUSH
44189: LD_VAR 0 5
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: LD_INT 4
44208: PUSH
44209: LD_INT 5
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: IN
44220: NOT
44221: OR
44222: PUSH
44223: LD_VAR 0 3
44227: PPUSH
44228: LD_VAR 0 4
44232: PPUSH
44233: CALL_OW 488
44237: NOT
44238: OR
44239: IFFALSE 44243
// exit ;
44241: GO 44979
// side := GetSide ( depot ) ;
44243: LD_ADDR_VAR 0 9
44247: PUSH
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 255
44257: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44258: LD_VAR 0 9
44262: PPUSH
44263: LD_VAR 0 2
44267: PPUSH
44268: CALL 43736 0 2
44272: NOT
44273: IFFALSE 44277
// exit ;
44275: GO 44979
// pom := GetBase ( depot ) ;
44277: LD_ADDR_VAR 0 10
44281: PUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 274
44291: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44292: LD_ADDR_VAR 0 11
44296: PUSH
44297: LD_VAR 0 2
44301: PPUSH
44302: LD_VAR 0 1
44306: PPUSH
44307: CALL_OW 248
44311: PPUSH
44312: CALL_OW 450
44316: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44317: LD_VAR 0 10
44321: PPUSH
44322: LD_INT 1
44324: PPUSH
44325: CALL_OW 275
44329: PUSH
44330: LD_VAR 0 11
44334: PUSH
44335: LD_INT 1
44337: ARRAY
44338: GREATEREQUAL
44339: PUSH
44340: LD_VAR 0 10
44344: PPUSH
44345: LD_INT 2
44347: PPUSH
44348: CALL_OW 275
44352: PUSH
44353: LD_VAR 0 11
44357: PUSH
44358: LD_INT 2
44360: ARRAY
44361: GREATEREQUAL
44362: AND
44363: PUSH
44364: LD_VAR 0 10
44368: PPUSH
44369: LD_INT 3
44371: PPUSH
44372: CALL_OW 275
44376: PUSH
44377: LD_VAR 0 11
44381: PUSH
44382: LD_INT 3
44384: ARRAY
44385: GREATEREQUAL
44386: AND
44387: NOT
44388: IFFALSE 44392
// exit ;
44390: GO 44979
// if GetBType ( depot ) = b_depot then
44392: LD_VAR 0 1
44396: PPUSH
44397: CALL_OW 266
44401: PUSH
44402: LD_INT 0
44404: EQUAL
44405: IFFALSE 44417
// dist := 28 else
44407: LD_ADDR_VAR 0 14
44411: PUSH
44412: LD_INT 28
44414: ST_TO_ADDR
44415: GO 44425
// dist := 36 ;
44417: LD_ADDR_VAR 0 14
44421: PUSH
44422: LD_INT 36
44424: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44425: LD_VAR 0 1
44429: PPUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: LD_VAR 0 4
44439: PPUSH
44440: CALL_OW 297
44444: PUSH
44445: LD_VAR 0 14
44449: GREATER
44450: IFFALSE 44454
// exit ;
44452: GO 44979
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44454: LD_ADDR_VAR 0 12
44458: PUSH
44459: LD_VAR 0 2
44463: PPUSH
44464: LD_VAR 0 3
44468: PPUSH
44469: LD_VAR 0 4
44473: PPUSH
44474: LD_VAR 0 5
44478: PPUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 248
44488: PPUSH
44489: LD_INT 0
44491: PPUSH
44492: CALL 44984 0 6
44496: ST_TO_ADDR
// if not hexes then
44497: LD_VAR 0 12
44501: NOT
44502: IFFALSE 44506
// exit ;
44504: GO 44979
// hex := GetHexInfo ( x , y ) ;
44506: LD_ADDR_VAR 0 15
44510: PUSH
44511: LD_VAR 0 3
44515: PPUSH
44516: LD_VAR 0 4
44520: PPUSH
44521: CALL_OW 546
44525: ST_TO_ADDR
// if hex [ 1 ] then
44526: LD_VAR 0 15
44530: PUSH
44531: LD_INT 1
44533: ARRAY
44534: IFFALSE 44538
// exit ;
44536: GO 44979
// height := hex [ 2 ] ;
44538: LD_ADDR_VAR 0 13
44542: PUSH
44543: LD_VAR 0 15
44547: PUSH
44548: LD_INT 2
44550: ARRAY
44551: ST_TO_ADDR
// for i = 1 to hexes do
44552: LD_ADDR_VAR 0 7
44556: PUSH
44557: DOUBLE
44558: LD_INT 1
44560: DEC
44561: ST_TO_ADDR
44562: LD_VAR 0 12
44566: PUSH
44567: FOR_TO
44568: IFFALSE 44898
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44570: LD_VAR 0 12
44574: PUSH
44575: LD_VAR 0 7
44579: ARRAY
44580: PUSH
44581: LD_INT 1
44583: ARRAY
44584: PPUSH
44585: LD_VAR 0 12
44589: PUSH
44590: LD_VAR 0 7
44594: ARRAY
44595: PUSH
44596: LD_INT 2
44598: ARRAY
44599: PPUSH
44600: CALL_OW 488
44604: NOT
44605: PUSH
44606: LD_VAR 0 12
44610: PUSH
44611: LD_VAR 0 7
44615: ARRAY
44616: PUSH
44617: LD_INT 1
44619: ARRAY
44620: PPUSH
44621: LD_VAR 0 12
44625: PUSH
44626: LD_VAR 0 7
44630: ARRAY
44631: PUSH
44632: LD_INT 2
44634: ARRAY
44635: PPUSH
44636: CALL_OW 428
44640: PUSH
44641: LD_INT 0
44643: GREATER
44644: OR
44645: PUSH
44646: LD_VAR 0 12
44650: PUSH
44651: LD_VAR 0 7
44655: ARRAY
44656: PUSH
44657: LD_INT 1
44659: ARRAY
44660: PPUSH
44661: LD_VAR 0 12
44665: PUSH
44666: LD_VAR 0 7
44670: ARRAY
44671: PUSH
44672: LD_INT 2
44674: ARRAY
44675: PPUSH
44676: CALL_OW 351
44680: OR
44681: IFFALSE 44687
// exit ;
44683: POP
44684: POP
44685: GO 44979
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44687: LD_ADDR_VAR 0 8
44691: PUSH
44692: LD_VAR 0 12
44696: PUSH
44697: LD_VAR 0 7
44701: ARRAY
44702: PUSH
44703: LD_INT 1
44705: ARRAY
44706: PPUSH
44707: LD_VAR 0 12
44711: PUSH
44712: LD_VAR 0 7
44716: ARRAY
44717: PUSH
44718: LD_INT 2
44720: ARRAY
44721: PPUSH
44722: CALL_OW 546
44726: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44727: LD_VAR 0 8
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PUSH
44736: LD_VAR 0 8
44740: PUSH
44741: LD_INT 2
44743: ARRAY
44744: PUSH
44745: LD_VAR 0 13
44749: PUSH
44750: LD_INT 2
44752: PLUS
44753: GREATER
44754: OR
44755: PUSH
44756: LD_VAR 0 8
44760: PUSH
44761: LD_INT 2
44763: ARRAY
44764: PUSH
44765: LD_VAR 0 13
44769: PUSH
44770: LD_INT 2
44772: MINUS
44773: LESS
44774: OR
44775: PUSH
44776: LD_VAR 0 8
44780: PUSH
44781: LD_INT 3
44783: ARRAY
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 8
44790: PUSH
44791: LD_INT 9
44793: PUSH
44794: LD_INT 10
44796: PUSH
44797: LD_INT 11
44799: PUSH
44800: LD_INT 12
44802: PUSH
44803: LD_INT 13
44805: PUSH
44806: LD_INT 16
44808: PUSH
44809: LD_INT 17
44811: PUSH
44812: LD_INT 18
44814: PUSH
44815: LD_INT 19
44817: PUSH
44818: LD_INT 20
44820: PUSH
44821: LD_INT 21
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: IN
44839: NOT
44840: OR
44841: PUSH
44842: LD_VAR 0 8
44846: PUSH
44847: LD_INT 5
44849: ARRAY
44850: NOT
44851: OR
44852: PUSH
44853: LD_VAR 0 8
44857: PUSH
44858: LD_INT 6
44860: ARRAY
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 7
44870: PUSH
44871: LD_INT 9
44873: PUSH
44874: LD_INT 10
44876: PUSH
44877: LD_INT 11
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: IN
44888: NOT
44889: OR
44890: IFFALSE 44896
// exit ;
44892: POP
44893: POP
44894: GO 44979
// end ;
44896: GO 44567
44898: POP
44899: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44900: LD_VAR 0 9
44904: PPUSH
44905: LD_VAR 0 3
44909: PPUSH
44910: LD_VAR 0 4
44914: PPUSH
44915: LD_INT 20
44917: PPUSH
44918: CALL 36902 0 4
44922: PUSH
44923: LD_INT 4
44925: ARRAY
44926: IFFALSE 44930
// exit ;
44928: GO 44979
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44930: LD_VAR 0 2
44934: PUSH
44935: LD_INT 29
44937: PUSH
44938: LD_INT 30
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: IN
44945: PUSH
44946: LD_VAR 0 3
44950: PPUSH
44951: LD_VAR 0 4
44955: PPUSH
44956: LD_VAR 0 9
44960: PPUSH
44961: CALL_OW 440
44965: NOT
44966: AND
44967: IFFALSE 44971
// exit ;
44969: GO 44979
// result := true ;
44971: LD_ADDR_VAR 0 6
44975: PUSH
44976: LD_INT 1
44978: ST_TO_ADDR
// end ;
44979: LD_VAR 0 6
44983: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44984: LD_INT 0
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
// result = [ ] ;
45044: LD_ADDR_VAR 0 7
45048: PUSH
45049: EMPTY
45050: ST_TO_ADDR
// temp_list = [ ] ;
45051: LD_ADDR_VAR 0 9
45055: PUSH
45056: EMPTY
45057: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45058: LD_VAR 0 4
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 4
45077: PUSH
45078: LD_INT 5
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: IN
45089: NOT
45090: PUSH
45091: LD_VAR 0 1
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: IN
45106: PUSH
45107: LD_VAR 0 5
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: IN
45126: NOT
45127: AND
45128: OR
45129: IFFALSE 45133
// exit ;
45131: GO 63524
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45133: LD_VAR 0 1
45137: PUSH
45138: LD_INT 6
45140: PUSH
45141: LD_INT 7
45143: PUSH
45144: LD_INT 8
45146: PUSH
45147: LD_INT 13
45149: PUSH
45150: LD_INT 12
45152: PUSH
45153: LD_INT 15
45155: PUSH
45156: LD_INT 11
45158: PUSH
45159: LD_INT 14
45161: PUSH
45162: LD_INT 10
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: IN
45176: IFFALSE 45186
// btype = b_lab ;
45178: LD_ADDR_VAR 0 1
45182: PUSH
45183: LD_INT 6
45185: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45186: LD_VAR 0 6
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: IN
45205: NOT
45206: PUSH
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 6
45226: PUSH
45227: LD_INT 36
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: LD_INT 5
45235: PUSH
45236: LD_INT 31
45238: PUSH
45239: LD_INT 32
45241: PUSH
45242: LD_INT 33
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: IN
45258: NOT
45259: PUSH
45260: LD_VAR 0 6
45264: PUSH
45265: LD_INT 1
45267: EQUAL
45268: AND
45269: OR
45270: PUSH
45271: LD_VAR 0 1
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: IN
45286: NOT
45287: PUSH
45288: LD_VAR 0 6
45292: PUSH
45293: LD_INT 2
45295: EQUAL
45296: AND
45297: OR
45298: IFFALSE 45308
// mode = 0 ;
45300: LD_ADDR_VAR 0 6
45304: PUSH
45305: LD_INT 0
45307: ST_TO_ADDR
// case mode of 0 :
45308: LD_VAR 0 6
45312: PUSH
45313: LD_INT 0
45315: DOUBLE
45316: EQUAL
45317: IFTRUE 45321
45319: GO 56774
45321: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45322: LD_ADDR_VAR 0 11
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45515: LD_ADDR_VAR 0 12
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45711: LD_ADDR_VAR 0 13
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45910: LD_ADDR_VAR 0 14
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46106: LD_ADDR_VAR 0 15
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46299: LD_ADDR_VAR 0 16
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46492: LD_ADDR_VAR 0 17
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46722: LD_ADDR_VAR 0 18
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46952: LD_ADDR_VAR 0 19
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47182: LD_ADDR_VAR 0 20
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47412: LD_ADDR_VAR 0 21
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47642: LD_ADDR_VAR 0 22
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47872: LD_ADDR_VAR 0 23
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 3
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48152: LD_ADDR_VAR 0 24
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48428: LD_ADDR_VAR 0 25
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48702: LD_ADDR_VAR 0 26
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48978: LD_ADDR_VAR 0 27
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49258: LD_ADDR_VAR 0 28
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49540: LD_ADDR_VAR 0 29
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49819: LD_ADDR_VAR 0 30
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50097: LD_ADDR_VAR 0 31
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50375: LD_ADDR_VAR 0 32
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 3
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50653: LD_ADDR_VAR 0 33
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50932: LD_ADDR_VAR 0 34
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 3
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51212: LD_ADDR_VAR 0 35
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51324: LD_ADDR_VAR 0 36
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51436: LD_ADDR_VAR 0 37
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51548: LD_ADDR_VAR 0 38
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51660: LD_ADDR_VAR 0 39
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51772: LD_ADDR_VAR 0 40
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51884: LD_ADDR_VAR 0 41
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 3
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52234: LD_ADDR_VAR 0 42
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52584: LD_ADDR_VAR 0 43
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 3
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52932: LD_ADDR_VAR 0 44
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53282: LD_ADDR_VAR 0 45
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53632: LD_ADDR_VAR 0 46
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53980: LD_ADDR_VAR 0 47
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54131: LD_ADDR_VAR 0 48
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54278: LD_ADDR_VAR 0 49
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54422: LD_ADDR_VAR 0 50
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54566: LD_ADDR_VAR 0 51
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54713: LD_ADDR_VAR 0 52
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54864: LD_ADDR_VAR 0 53
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55094: LD_ADDR_VAR 0 54
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55324: LD_ADDR_VAR 0 55
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55554: LD_ADDR_VAR 0 56
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55784: LD_ADDR_VAR 0 57
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56014: LD_ADDR_VAR 0 58
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56244: LD_ADDR_VAR 0 59
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56332: LD_ADDR_VAR 0 60
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56420: LD_ADDR_VAR 0 61
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56508: LD_ADDR_VAR 0 62
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56596: LD_ADDR_VAR 0 63
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56684: LD_ADDR_VAR 0 64
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// end ; 1 :
56772: GO 62669
56774: LD_INT 1
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56782
56780: GO 59405
56782: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56783: LD_ADDR_VAR 0 11
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56827: LD_ADDR_VAR 0 12
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56868: LD_ADDR_VAR 0 13
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56908: LD_ADDR_VAR 0 14
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56949: LD_ADDR_VAR 0 15
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56993: LD_ADDR_VAR 0 16
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 3
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57039: LD_ADDR_VAR 0 17
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57083: LD_ADDR_VAR 0 18
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57124: LD_ADDR_VAR 0 19
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57164: LD_ADDR_VAR 0 20
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57205: LD_ADDR_VAR 0 21
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57249: LD_ADDR_VAR 0 22
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: LD_INT 3
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57295: LD_ADDR_VAR 0 23
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 3
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57339: LD_ADDR_VAR 0 24
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57380: LD_ADDR_VAR 0 25
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 4
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 4
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57420: LD_ADDR_VAR 0 26
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57461: LD_ADDR_VAR 0 27
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 4
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57505: LD_ADDR_VAR 0 28
57509: PUSH
57510: LD_INT 3
57512: NEG
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57551: LD_ADDR_VAR 0 29
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 4
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 5
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 5
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 4
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 6
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 6
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 5
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57706: LD_ADDR_VAR 0 30
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 4
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 6
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 6
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57849: LD_ADDR_VAR 0 31
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 4
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 6
57946: PUSH
57947: LD_INT 5
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 6
57956: PUSH
57957: LD_INT 6
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 5
57966: PUSH
57967: LD_INT 6
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57988: LD_ADDR_VAR 0 32
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 5
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 5
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 4
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 6
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 6
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58131: LD_ADDR_VAR 0 33
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 4
58206: NEG
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 5
58217: NEG
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 5
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 5
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 6
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 6
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58286: LD_ADDR_VAR 0 34
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 4
58365: NEG
58366: PUSH
58367: LD_INT 5
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 5
58377: NEG
58378: PUSH
58379: LD_INT 4
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 5
58389: NEG
58390: PUSH
58391: LD_INT 5
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 5
58401: NEG
58402: PUSH
58403: LD_INT 6
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 6
58413: NEG
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 6
58425: NEG
58426: PUSH
58427: LD_INT 6
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58449: LD_ADDR_VAR 0 41
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58493: LD_ADDR_VAR 0 42
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58534: LD_ADDR_VAR 0 43
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58574: LD_ADDR_VAR 0 44
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58615: LD_ADDR_VAR 0 45
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58659: LD_ADDR_VAR 0 46
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58705: LD_ADDR_VAR 0 47
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58738: LD_ADDR_VAR 0 48
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58769: LD_ADDR_VAR 0 49
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58798: LD_ADDR_VAR 0 50
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 3
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58827: LD_ADDR_VAR 0 51
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58858: LD_ADDR_VAR 0 52
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58891: LD_ADDR_VAR 0 53
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58935: LD_ADDR_VAR 0 54
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58976: LD_ADDR_VAR 0 55
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59016: LD_ADDR_VAR 0 56
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59057: LD_ADDR_VAR 0 57
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59101: LD_ADDR_VAR 0 58
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59147: LD_ADDR_VAR 0 59
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59191: LD_ADDR_VAR 0 60
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59232: LD_ADDR_VAR 0 61
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59272: LD_ADDR_VAR 0 62
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59313: LD_ADDR_VAR 0 63
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59357: LD_ADDR_VAR 0 64
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// end ; 2 :
59403: GO 62669
59405: LD_INT 2
59407: DOUBLE
59408: EQUAL
59409: IFTRUE 59413
59411: GO 62668
59413: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59414: LD_ADDR_VAR 0 29
59418: PUSH
59419: LD_INT 4
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 5
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 5
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: LD_INT 4
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: LD_INT 4
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 4
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 4
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 5
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 5
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 4
59753: NEG
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: LD_INT 4
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: LD_INT 5
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 5
59859: NEG
59860: PUSH
59861: LD_INT 4
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 5
59871: NEG
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: LD_INT 5
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59952: LD_ADDR_VAR 0 30
59956: PUSH
59957: LD_INT 4
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 5
59979: PUSH
59980: LD_INT 4
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 5
59989: PUSH
59990: LD_INT 5
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 4
59999: PUSH
60000: LD_INT 5
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 5
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 4
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 4
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 4
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: NEG
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 4
60316: NEG
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 4
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 4
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 5
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60499: LD_ADDR_VAR 0 31
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 4
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 4
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 5
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 5
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 5
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: LD_INT 3
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 4
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 4
60701: NEG
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 4
60713: NEG
60714: PUSH
60715: LD_INT 5
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 5
60761: NEG
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 5
60773: NEG
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: LD_INT 5
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 5
60797: NEG
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 5
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 5
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 4
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61049: LD_ADDR_VAR 0 32
61053: PUSH
61054: LD_INT 4
61056: NEG
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 5
61112: NEG
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: NEG
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: LD_INT 4
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 4
61218: NEG
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 4
61230: NEG
61231: PUSH
61232: LD_INT 4
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 4
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 4
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 5
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 5
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 5
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 4
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 5
61481: PUSH
61482: LD_INT 4
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 5
61491: PUSH
61492: LD_INT 5
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 4
61501: PUSH
61502: LD_INT 5
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 4
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 3
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 5
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: LD_INT 5
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61596: LD_ADDR_VAR 0 33
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: LD_INT 4
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: NEG
61616: PUSH
61617: LD_INT 5
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: NEG
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: LD_INT 3
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 4
61651: NEG
61652: PUSH
61653: LD_INT 3
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 5
61663: NEG
61664: PUSH
61665: LD_INT 4
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 5
61675: NEG
61676: PUSH
61677: LD_INT 5
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: LD_INT 5
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 5
61699: NEG
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 2
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 4
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 5
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 5
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 4
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 5
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 4
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 4
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 4
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 4
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 5
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62134: LD_ADDR_VAR 0 34
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 4
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 5
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 4
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: LD_INT 4
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 5
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: LD_INT 3
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: NEG
62232: PUSH
62233: LD_INT 5
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 3
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 4
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 4
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 4
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 4
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 5
62356: PUSH
62357: LD_INT 4
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 5
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: LD_INT 5
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 4
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 3
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 5
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 4
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 4
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 5
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 5
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 5
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// end ; end ;
62666: GO 62669
62668: POP
// case btype of b_depot , b_warehouse :
62669: LD_VAR 0 1
62673: PUSH
62674: LD_INT 0
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62688
62680: LD_INT 1
62682: DOUBLE
62683: EQUAL
62684: IFTRUE 62688
62686: GO 62889
62688: POP
// case nation of nation_american :
62689: LD_VAR 0 5
62693: PUSH
62694: LD_INT 1
62696: DOUBLE
62697: EQUAL
62698: IFTRUE 62702
62700: GO 62758
62702: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62703: LD_ADDR_VAR 0 9
62707: PUSH
62708: LD_VAR 0 11
62712: PUSH
62713: LD_VAR 0 12
62717: PUSH
62718: LD_VAR 0 13
62722: PUSH
62723: LD_VAR 0 14
62727: PUSH
62728: LD_VAR 0 15
62732: PUSH
62733: LD_VAR 0 16
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: PUSH
62746: LD_VAR 0 4
62750: PUSH
62751: LD_INT 1
62753: PLUS
62754: ARRAY
62755: ST_TO_ADDR
62756: GO 62887
62758: LD_INT 2
62760: DOUBLE
62761: EQUAL
62762: IFTRUE 62766
62764: GO 62822
62766: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62767: LD_ADDR_VAR 0 9
62771: PUSH
62772: LD_VAR 0 17
62776: PUSH
62777: LD_VAR 0 18
62781: PUSH
62782: LD_VAR 0 19
62786: PUSH
62787: LD_VAR 0 20
62791: PUSH
62792: LD_VAR 0 21
62796: PUSH
62797: LD_VAR 0 22
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: LD_VAR 0 4
62814: PUSH
62815: LD_INT 1
62817: PLUS
62818: ARRAY
62819: ST_TO_ADDR
62820: GO 62887
62822: LD_INT 3
62824: DOUBLE
62825: EQUAL
62826: IFTRUE 62830
62828: GO 62886
62830: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62831: LD_ADDR_VAR 0 9
62835: PUSH
62836: LD_VAR 0 23
62840: PUSH
62841: LD_VAR 0 24
62845: PUSH
62846: LD_VAR 0 25
62850: PUSH
62851: LD_VAR 0 26
62855: PUSH
62856: LD_VAR 0 27
62860: PUSH
62861: LD_VAR 0 28
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: PUSH
62874: LD_VAR 0 4
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: ARRAY
62883: ST_TO_ADDR
62884: GO 62887
62886: POP
62887: GO 63442
62889: LD_INT 2
62891: DOUBLE
62892: EQUAL
62893: IFTRUE 62903
62895: LD_INT 3
62897: DOUBLE
62898: EQUAL
62899: IFTRUE 62903
62901: GO 62959
62903: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62904: LD_ADDR_VAR 0 9
62908: PUSH
62909: LD_VAR 0 29
62913: PUSH
62914: LD_VAR 0 30
62918: PUSH
62919: LD_VAR 0 31
62923: PUSH
62924: LD_VAR 0 32
62928: PUSH
62929: LD_VAR 0 33
62933: PUSH
62934: LD_VAR 0 34
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: PUSH
62947: LD_VAR 0 4
62951: PUSH
62952: LD_INT 1
62954: PLUS
62955: ARRAY
62956: ST_TO_ADDR
62957: GO 63442
62959: LD_INT 16
62961: DOUBLE
62962: EQUAL
62963: IFTRUE 63021
62965: LD_INT 17
62967: DOUBLE
62968: EQUAL
62969: IFTRUE 63021
62971: LD_INT 18
62973: DOUBLE
62974: EQUAL
62975: IFTRUE 63021
62977: LD_INT 19
62979: DOUBLE
62980: EQUAL
62981: IFTRUE 63021
62983: LD_INT 22
62985: DOUBLE
62986: EQUAL
62987: IFTRUE 63021
62989: LD_INT 20
62991: DOUBLE
62992: EQUAL
62993: IFTRUE 63021
62995: LD_INT 21
62997: DOUBLE
62998: EQUAL
62999: IFTRUE 63021
63001: LD_INT 23
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63021
63007: LD_INT 24
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63021
63013: LD_INT 25
63015: DOUBLE
63016: EQUAL
63017: IFTRUE 63021
63019: GO 63077
63021: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63022: LD_ADDR_VAR 0 9
63026: PUSH
63027: LD_VAR 0 35
63031: PUSH
63032: LD_VAR 0 36
63036: PUSH
63037: LD_VAR 0 37
63041: PUSH
63042: LD_VAR 0 38
63046: PUSH
63047: LD_VAR 0 39
63051: PUSH
63052: LD_VAR 0 40
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: PUSH
63065: LD_VAR 0 4
63069: PUSH
63070: LD_INT 1
63072: PLUS
63073: ARRAY
63074: ST_TO_ADDR
63075: GO 63442
63077: LD_INT 6
63079: DOUBLE
63080: EQUAL
63081: IFTRUE 63133
63083: LD_INT 7
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63133
63089: LD_INT 8
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63133
63095: LD_INT 13
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63133
63101: LD_INT 12
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63133
63107: LD_INT 15
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63133
63113: LD_INT 11
63115: DOUBLE
63116: EQUAL
63117: IFTRUE 63133
63119: LD_INT 14
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63133
63125: LD_INT 10
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63133
63131: GO 63189
63133: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63134: LD_ADDR_VAR 0 9
63138: PUSH
63139: LD_VAR 0 41
63143: PUSH
63144: LD_VAR 0 42
63148: PUSH
63149: LD_VAR 0 43
63153: PUSH
63154: LD_VAR 0 44
63158: PUSH
63159: LD_VAR 0 45
63163: PUSH
63164: LD_VAR 0 46
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: PUSH
63177: LD_VAR 0 4
63181: PUSH
63182: LD_INT 1
63184: PLUS
63185: ARRAY
63186: ST_TO_ADDR
63187: GO 63442
63189: LD_INT 36
63191: DOUBLE
63192: EQUAL
63193: IFTRUE 63197
63195: GO 63253
63197: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63198: LD_ADDR_VAR 0 9
63202: PUSH
63203: LD_VAR 0 47
63207: PUSH
63208: LD_VAR 0 48
63212: PUSH
63213: LD_VAR 0 49
63217: PUSH
63218: LD_VAR 0 50
63222: PUSH
63223: LD_VAR 0 51
63227: PUSH
63228: LD_VAR 0 52
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: PUSH
63241: LD_VAR 0 4
63245: PUSH
63246: LD_INT 1
63248: PLUS
63249: ARRAY
63250: ST_TO_ADDR
63251: GO 63442
63253: LD_INT 4
63255: DOUBLE
63256: EQUAL
63257: IFTRUE 63279
63259: LD_INT 5
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63279
63265: LD_INT 34
63267: DOUBLE
63268: EQUAL
63269: IFTRUE 63279
63271: LD_INT 37
63273: DOUBLE
63274: EQUAL
63275: IFTRUE 63279
63277: GO 63335
63279: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63280: LD_ADDR_VAR 0 9
63284: PUSH
63285: LD_VAR 0 53
63289: PUSH
63290: LD_VAR 0 54
63294: PUSH
63295: LD_VAR 0 55
63299: PUSH
63300: LD_VAR 0 56
63304: PUSH
63305: LD_VAR 0 57
63309: PUSH
63310: LD_VAR 0 58
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: PUSH
63323: LD_VAR 0 4
63327: PUSH
63328: LD_INT 1
63330: PLUS
63331: ARRAY
63332: ST_TO_ADDR
63333: GO 63442
63335: LD_INT 31
63337: DOUBLE
63338: EQUAL
63339: IFTRUE 63385
63341: LD_INT 32
63343: DOUBLE
63344: EQUAL
63345: IFTRUE 63385
63347: LD_INT 33
63349: DOUBLE
63350: EQUAL
63351: IFTRUE 63385
63353: LD_INT 27
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63385
63359: LD_INT 26
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63385
63365: LD_INT 28
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63385
63371: LD_INT 29
63373: DOUBLE
63374: EQUAL
63375: IFTRUE 63385
63377: LD_INT 30
63379: DOUBLE
63380: EQUAL
63381: IFTRUE 63385
63383: GO 63441
63385: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63386: LD_ADDR_VAR 0 9
63390: PUSH
63391: LD_VAR 0 59
63395: PUSH
63396: LD_VAR 0 60
63400: PUSH
63401: LD_VAR 0 61
63405: PUSH
63406: LD_VAR 0 62
63410: PUSH
63411: LD_VAR 0 63
63415: PUSH
63416: LD_VAR 0 64
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: PUSH
63429: LD_VAR 0 4
63433: PUSH
63434: LD_INT 1
63436: PLUS
63437: ARRAY
63438: ST_TO_ADDR
63439: GO 63442
63441: POP
// temp_list2 = [ ] ;
63442: LD_ADDR_VAR 0 10
63446: PUSH
63447: EMPTY
63448: ST_TO_ADDR
// for i in temp_list do
63449: LD_ADDR_VAR 0 8
63453: PUSH
63454: LD_VAR 0 9
63458: PUSH
63459: FOR_IN
63460: IFFALSE 63512
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63462: LD_ADDR_VAR 0 10
63466: PUSH
63467: LD_VAR 0 10
63471: PUSH
63472: LD_VAR 0 8
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: LD_VAR 0 2
63485: PLUS
63486: PUSH
63487: LD_VAR 0 8
63491: PUSH
63492: LD_INT 2
63494: ARRAY
63495: PUSH
63496: LD_VAR 0 3
63500: PLUS
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: ADD
63509: ST_TO_ADDR
63510: GO 63459
63512: POP
63513: POP
// result = temp_list2 ;
63514: LD_ADDR_VAR 0 7
63518: PUSH
63519: LD_VAR 0 10
63523: ST_TO_ADDR
// end ;
63524: LD_VAR 0 7
63528: RET
// export function EnemyInRange ( unit , dist ) ; begin
63529: LD_INT 0
63531: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63532: LD_ADDR_VAR 0 3
63536: PUSH
63537: LD_VAR 0 1
63541: PPUSH
63542: CALL_OW 255
63546: PPUSH
63547: LD_VAR 0 1
63551: PPUSH
63552: CALL_OW 250
63556: PPUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 251
63566: PPUSH
63567: LD_VAR 0 2
63571: PPUSH
63572: CALL 36902 0 4
63576: PUSH
63577: LD_INT 4
63579: ARRAY
63580: ST_TO_ADDR
// end ;
63581: LD_VAR 0 3
63585: RET
// export function PlayerSeeMe ( unit ) ; begin
63586: LD_INT 0
63588: PPUSH
// result := See ( your_side , unit ) ;
63589: LD_ADDR_VAR 0 2
63593: PUSH
63594: LD_OWVAR 2
63598: PPUSH
63599: LD_VAR 0 1
63603: PPUSH
63604: CALL_OW 292
63608: ST_TO_ADDR
// end ;
63609: LD_VAR 0 2
63613: RET
// export function ReverseDir ( unit ) ; begin
63614: LD_INT 0
63616: PPUSH
// if not unit then
63617: LD_VAR 0 1
63621: NOT
63622: IFFALSE 63626
// exit ;
63624: GO 63649
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63626: LD_ADDR_VAR 0 2
63630: PUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 254
63640: PUSH
63641: LD_INT 3
63643: PLUS
63644: PUSH
63645: LD_INT 6
63647: MOD
63648: ST_TO_ADDR
// end ;
63649: LD_VAR 0 2
63653: RET
// export function ReverseArray ( array ) ; var i ; begin
63654: LD_INT 0
63656: PPUSH
63657: PPUSH
// if not array then
63658: LD_VAR 0 1
63662: NOT
63663: IFFALSE 63667
// exit ;
63665: GO 63722
// result := [ ] ;
63667: LD_ADDR_VAR 0 2
63671: PUSH
63672: EMPTY
63673: ST_TO_ADDR
// for i := array downto 1 do
63674: LD_ADDR_VAR 0 3
63678: PUSH
63679: DOUBLE
63680: LD_VAR 0 1
63684: INC
63685: ST_TO_ADDR
63686: LD_INT 1
63688: PUSH
63689: FOR_DOWNTO
63690: IFFALSE 63720
// result := Join ( result , array [ i ] ) ;
63692: LD_ADDR_VAR 0 2
63696: PUSH
63697: LD_VAR 0 2
63701: PPUSH
63702: LD_VAR 0 1
63706: PUSH
63707: LD_VAR 0 3
63711: ARRAY
63712: PPUSH
63713: CALL 68365 0 2
63717: ST_TO_ADDR
63718: GO 63689
63720: POP
63721: POP
// end ;
63722: LD_VAR 0 2
63726: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63727: LD_INT 0
63729: PPUSH
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
// if not unit or not hexes then
63735: LD_VAR 0 1
63739: NOT
63740: PUSH
63741: LD_VAR 0 2
63745: NOT
63746: OR
63747: IFFALSE 63751
// exit ;
63749: GO 63874
// dist := 9999 ;
63751: LD_ADDR_VAR 0 5
63755: PUSH
63756: LD_INT 9999
63758: ST_TO_ADDR
// for i = 1 to hexes do
63759: LD_ADDR_VAR 0 4
63763: PUSH
63764: DOUBLE
63765: LD_INT 1
63767: DEC
63768: ST_TO_ADDR
63769: LD_VAR 0 2
63773: PUSH
63774: FOR_TO
63775: IFFALSE 63862
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63777: LD_ADDR_VAR 0 6
63781: PUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: LD_VAR 0 2
63791: PUSH
63792: LD_VAR 0 4
63796: ARRAY
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PPUSH
63802: LD_VAR 0 2
63806: PUSH
63807: LD_VAR 0 4
63811: ARRAY
63812: PUSH
63813: LD_INT 2
63815: ARRAY
63816: PPUSH
63817: CALL_OW 297
63821: ST_TO_ADDR
// if tdist < dist then
63822: LD_VAR 0 6
63826: PUSH
63827: LD_VAR 0 5
63831: LESS
63832: IFFALSE 63860
// begin hex := hexes [ i ] ;
63834: LD_ADDR_VAR 0 8
63838: PUSH
63839: LD_VAR 0 2
63843: PUSH
63844: LD_VAR 0 4
63848: ARRAY
63849: ST_TO_ADDR
// dist := tdist ;
63850: LD_ADDR_VAR 0 5
63854: PUSH
63855: LD_VAR 0 6
63859: ST_TO_ADDR
// end ; end ;
63860: GO 63774
63862: POP
63863: POP
// result := hex ;
63864: LD_ADDR_VAR 0 3
63868: PUSH
63869: LD_VAR 0 8
63873: ST_TO_ADDR
// end ;
63874: LD_VAR 0 3
63878: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63879: LD_INT 0
63881: PPUSH
63882: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63883: LD_VAR 0 1
63887: NOT
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 21
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 23
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PPUSH
63918: CALL_OW 69
63922: IN
63923: NOT
63924: OR
63925: IFFALSE 63929
// exit ;
63927: GO 63976
// for i = 1 to 3 do
63929: LD_ADDR_VAR 0 3
63933: PUSH
63934: DOUBLE
63935: LD_INT 1
63937: DEC
63938: ST_TO_ADDR
63939: LD_INT 3
63941: PUSH
63942: FOR_TO
63943: IFFALSE 63974
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63945: LD_VAR 0 1
63949: PPUSH
63950: CALL_OW 250
63954: PPUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: CALL_OW 251
63964: PPUSH
63965: LD_INT 1
63967: PPUSH
63968: CALL_OW 453
63972: GO 63942
63974: POP
63975: POP
// end ;
63976: LD_VAR 0 2
63980: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63981: LD_INT 0
63983: PPUSH
63984: PPUSH
63985: PPUSH
63986: PPUSH
63987: PPUSH
63988: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63989: LD_VAR 0 1
63993: NOT
63994: PUSH
63995: LD_VAR 0 2
63999: NOT
64000: OR
64001: PUSH
64002: LD_VAR 0 1
64006: PPUSH
64007: CALL_OW 314
64011: OR
64012: IFFALSE 64016
// exit ;
64014: GO 64483
// if GetLives ( i ) < 250 then
64016: LD_VAR 0 4
64020: PPUSH
64021: CALL_OW 256
64025: PUSH
64026: LD_INT 250
64028: LESS
64029: IFFALSE 64042
// begin ComAutodestruct ( i ) ;
64031: LD_VAR 0 4
64035: PPUSH
64036: CALL 63879 0 1
// exit ;
64040: GO 64483
// end ; x := GetX ( enemy_unit ) ;
64042: LD_ADDR_VAR 0 7
64046: PUSH
64047: LD_VAR 0 2
64051: PPUSH
64052: CALL_OW 250
64056: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64057: LD_ADDR_VAR 0 8
64061: PUSH
64062: LD_VAR 0 2
64066: PPUSH
64067: CALL_OW 251
64071: ST_TO_ADDR
// if not x or not y then
64072: LD_VAR 0 7
64076: NOT
64077: PUSH
64078: LD_VAR 0 8
64082: NOT
64083: OR
64084: IFFALSE 64088
// exit ;
64086: GO 64483
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64088: LD_ADDR_VAR 0 6
64092: PUSH
64093: LD_VAR 0 7
64097: PPUSH
64098: LD_INT 0
64100: PPUSH
64101: LD_INT 4
64103: PPUSH
64104: CALL_OW 272
64108: PUSH
64109: LD_VAR 0 8
64113: PPUSH
64114: LD_INT 0
64116: PPUSH
64117: LD_INT 4
64119: PPUSH
64120: CALL_OW 273
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_VAR 0 7
64133: PPUSH
64134: LD_INT 1
64136: PPUSH
64137: LD_INT 4
64139: PPUSH
64140: CALL_OW 272
64144: PUSH
64145: LD_VAR 0 8
64149: PPUSH
64150: LD_INT 1
64152: PPUSH
64153: LD_INT 4
64155: PPUSH
64156: CALL_OW 273
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_VAR 0 7
64169: PPUSH
64170: LD_INT 2
64172: PPUSH
64173: LD_INT 4
64175: PPUSH
64176: CALL_OW 272
64180: PUSH
64181: LD_VAR 0 8
64185: PPUSH
64186: LD_INT 2
64188: PPUSH
64189: LD_INT 4
64191: PPUSH
64192: CALL_OW 273
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_VAR 0 7
64205: PPUSH
64206: LD_INT 3
64208: PPUSH
64209: LD_INT 4
64211: PPUSH
64212: CALL_OW 272
64216: PUSH
64217: LD_VAR 0 8
64221: PPUSH
64222: LD_INT 3
64224: PPUSH
64225: LD_INT 4
64227: PPUSH
64228: CALL_OW 273
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_VAR 0 7
64241: PPUSH
64242: LD_INT 4
64244: PPUSH
64245: LD_INT 4
64247: PPUSH
64248: CALL_OW 272
64252: PUSH
64253: LD_VAR 0 8
64257: PPUSH
64258: LD_INT 4
64260: PPUSH
64261: LD_INT 4
64263: PPUSH
64264: CALL_OW 273
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_VAR 0 7
64277: PPUSH
64278: LD_INT 5
64280: PPUSH
64281: LD_INT 4
64283: PPUSH
64284: CALL_OW 272
64288: PUSH
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_INT 5
64296: PPUSH
64297: LD_INT 4
64299: PPUSH
64300: CALL_OW 273
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// for i = tmp downto 1 do
64317: LD_ADDR_VAR 0 4
64321: PUSH
64322: DOUBLE
64323: LD_VAR 0 6
64327: INC
64328: ST_TO_ADDR
64329: LD_INT 1
64331: PUSH
64332: FOR_DOWNTO
64333: IFFALSE 64434
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64335: LD_VAR 0 6
64339: PUSH
64340: LD_VAR 0 4
64344: ARRAY
64345: PUSH
64346: LD_INT 1
64348: ARRAY
64349: PPUSH
64350: LD_VAR 0 6
64354: PUSH
64355: LD_VAR 0 4
64359: ARRAY
64360: PUSH
64361: LD_INT 2
64363: ARRAY
64364: PPUSH
64365: CALL_OW 488
64369: NOT
64370: PUSH
64371: LD_VAR 0 6
64375: PUSH
64376: LD_VAR 0 4
64380: ARRAY
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_VAR 0 6
64390: PUSH
64391: LD_VAR 0 4
64395: ARRAY
64396: PUSH
64397: LD_INT 2
64399: ARRAY
64400: PPUSH
64401: CALL_OW 428
64405: PUSH
64406: LD_INT 0
64408: NONEQUAL
64409: OR
64410: IFFALSE 64432
// tmp := Delete ( tmp , i ) ;
64412: LD_ADDR_VAR 0 6
64416: PUSH
64417: LD_VAR 0 6
64421: PPUSH
64422: LD_VAR 0 4
64426: PPUSH
64427: CALL_OW 3
64431: ST_TO_ADDR
64432: GO 64332
64434: POP
64435: POP
// j := GetClosestHex ( unit , tmp ) ;
64436: LD_ADDR_VAR 0 5
64440: PUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: LD_VAR 0 6
64450: PPUSH
64451: CALL 63727 0 2
64455: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64456: LD_VAR 0 1
64460: PPUSH
64461: LD_VAR 0 5
64465: PUSH
64466: LD_INT 1
64468: ARRAY
64469: PPUSH
64470: LD_VAR 0 5
64474: PUSH
64475: LD_INT 2
64477: ARRAY
64478: PPUSH
64479: CALL_OW 111
// end ;
64483: LD_VAR 0 3
64487: RET
// export function PrepareApemanSoldier ( ) ; begin
64488: LD_INT 0
64490: PPUSH
// uc_nation := 0 ;
64491: LD_ADDR_OWVAR 21
64495: PUSH
64496: LD_INT 0
64498: ST_TO_ADDR
// hc_sex := sex_male ;
64499: LD_ADDR_OWVAR 27
64503: PUSH
64504: LD_INT 1
64506: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64507: LD_ADDR_OWVAR 28
64511: PUSH
64512: LD_INT 15
64514: ST_TO_ADDR
// hc_gallery :=  ;
64515: LD_ADDR_OWVAR 33
64519: PUSH
64520: LD_STRING 
64522: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64523: LD_ADDR_OWVAR 31
64527: PUSH
64528: LD_INT 0
64530: PPUSH
64531: LD_INT 3
64533: PPUSH
64534: CALL_OW 12
64538: PUSH
64539: LD_INT 0
64541: PPUSH
64542: LD_INT 3
64544: PPUSH
64545: CALL_OW 12
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// end ;
64562: LD_VAR 0 1
64566: RET
// export function PrepareApemanEngineer ( ) ; begin
64567: LD_INT 0
64569: PPUSH
// uc_nation := 0 ;
64570: LD_ADDR_OWVAR 21
64574: PUSH
64575: LD_INT 0
64577: ST_TO_ADDR
// hc_sex := sex_male ;
64578: LD_ADDR_OWVAR 27
64582: PUSH
64583: LD_INT 1
64585: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64586: LD_ADDR_OWVAR 28
64590: PUSH
64591: LD_INT 16
64593: ST_TO_ADDR
// hc_gallery :=  ;
64594: LD_ADDR_OWVAR 33
64598: PUSH
64599: LD_STRING 
64601: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64602: LD_ADDR_OWVAR 31
64606: PUSH
64607: LD_INT 0
64609: PPUSH
64610: LD_INT 3
64612: PPUSH
64613: CALL_OW 12
64617: PUSH
64618: LD_INT 0
64620: PPUSH
64621: LD_INT 3
64623: PPUSH
64624: CALL_OW 12
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// end ;
64641: LD_VAR 0 1
64645: RET
// export function PrepareApeman ( agressivity ) ; begin
64646: LD_INT 0
64648: PPUSH
// uc_side := 0 ;
64649: LD_ADDR_OWVAR 20
64653: PUSH
64654: LD_INT 0
64656: ST_TO_ADDR
// uc_nation := 0 ;
64657: LD_ADDR_OWVAR 21
64661: PUSH
64662: LD_INT 0
64664: ST_TO_ADDR
// hc_sex := sex_male ;
64665: LD_ADDR_OWVAR 27
64669: PUSH
64670: LD_INT 1
64672: ST_TO_ADDR
// hc_class := class_apeman ;
64673: LD_ADDR_OWVAR 28
64677: PUSH
64678: LD_INT 12
64680: ST_TO_ADDR
// hc_gallery :=  ;
64681: LD_ADDR_OWVAR 33
64685: PUSH
64686: LD_STRING 
64688: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64689: LD_ADDR_OWVAR 35
64693: PUSH
64694: LD_VAR 0 1
64698: NEG
64699: PPUSH
64700: LD_VAR 0 1
64704: PPUSH
64705: CALL_OW 12
64709: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64710: LD_ADDR_OWVAR 31
64714: PUSH
64715: LD_INT 0
64717: PPUSH
64718: LD_INT 3
64720: PPUSH
64721: CALL_OW 12
64725: PUSH
64726: LD_INT 0
64728: PPUSH
64729: LD_INT 3
64731: PPUSH
64732: CALL_OW 12
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: ST_TO_ADDR
// end ;
64749: LD_VAR 0 2
64753: RET
// export function PrepareTiger ( agressivity ) ; begin
64754: LD_INT 0
64756: PPUSH
// uc_side := 0 ;
64757: LD_ADDR_OWVAR 20
64761: PUSH
64762: LD_INT 0
64764: ST_TO_ADDR
// uc_nation := 0 ;
64765: LD_ADDR_OWVAR 21
64769: PUSH
64770: LD_INT 0
64772: ST_TO_ADDR
// hc_class := class_tiger ;
64773: LD_ADDR_OWVAR 28
64777: PUSH
64778: LD_INT 14
64780: ST_TO_ADDR
// hc_gallery :=  ;
64781: LD_ADDR_OWVAR 33
64785: PUSH
64786: LD_STRING 
64788: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64789: LD_ADDR_OWVAR 35
64793: PUSH
64794: LD_VAR 0 1
64798: NEG
64799: PPUSH
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 12
64809: ST_TO_ADDR
// end ;
64810: LD_VAR 0 2
64814: RET
// export function PrepareEnchidna ( ) ; begin
64815: LD_INT 0
64817: PPUSH
// uc_side := 0 ;
64818: LD_ADDR_OWVAR 20
64822: PUSH
64823: LD_INT 0
64825: ST_TO_ADDR
// uc_nation := 0 ;
64826: LD_ADDR_OWVAR 21
64830: PUSH
64831: LD_INT 0
64833: ST_TO_ADDR
// hc_class := class_baggie ;
64834: LD_ADDR_OWVAR 28
64838: PUSH
64839: LD_INT 13
64841: ST_TO_ADDR
// hc_gallery :=  ;
64842: LD_ADDR_OWVAR 33
64846: PUSH
64847: LD_STRING 
64849: ST_TO_ADDR
// end ;
64850: LD_VAR 0 1
64854: RET
// export function PrepareFrog ( ) ; begin
64855: LD_INT 0
64857: PPUSH
// uc_side := 0 ;
64858: LD_ADDR_OWVAR 20
64862: PUSH
64863: LD_INT 0
64865: ST_TO_ADDR
// uc_nation := 0 ;
64866: LD_ADDR_OWVAR 21
64870: PUSH
64871: LD_INT 0
64873: ST_TO_ADDR
// hc_class := class_frog ;
64874: LD_ADDR_OWVAR 28
64878: PUSH
64879: LD_INT 19
64881: ST_TO_ADDR
// hc_gallery :=  ;
64882: LD_ADDR_OWVAR 33
64886: PUSH
64887: LD_STRING 
64889: ST_TO_ADDR
// end ;
64890: LD_VAR 0 1
64894: RET
// export function PrepareFish ( ) ; begin
64895: LD_INT 0
64897: PPUSH
// uc_side := 0 ;
64898: LD_ADDR_OWVAR 20
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
// uc_nation := 0 ;
64906: LD_ADDR_OWVAR 21
64910: PUSH
64911: LD_INT 0
64913: ST_TO_ADDR
// hc_class := class_fish ;
64914: LD_ADDR_OWVAR 28
64918: PUSH
64919: LD_INT 20
64921: ST_TO_ADDR
// hc_gallery :=  ;
64922: LD_ADDR_OWVAR 33
64926: PUSH
64927: LD_STRING 
64929: ST_TO_ADDR
// end ;
64930: LD_VAR 0 1
64934: RET
// export function PrepareBird ( ) ; begin
64935: LD_INT 0
64937: PPUSH
// uc_side := 0 ;
64938: LD_ADDR_OWVAR 20
64942: PUSH
64943: LD_INT 0
64945: ST_TO_ADDR
// uc_nation := 0 ;
64946: LD_ADDR_OWVAR 21
64950: PUSH
64951: LD_INT 0
64953: ST_TO_ADDR
// hc_class := class_phororhacos ;
64954: LD_ADDR_OWVAR 28
64958: PUSH
64959: LD_INT 18
64961: ST_TO_ADDR
// hc_gallery :=  ;
64962: LD_ADDR_OWVAR 33
64966: PUSH
64967: LD_STRING 
64969: ST_TO_ADDR
// end ;
64970: LD_VAR 0 1
64974: RET
// export function PrepareHorse ( ) ; begin
64975: LD_INT 0
64977: PPUSH
// uc_side := 0 ;
64978: LD_ADDR_OWVAR 20
64982: PUSH
64983: LD_INT 0
64985: ST_TO_ADDR
// uc_nation := 0 ;
64986: LD_ADDR_OWVAR 21
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// hc_class := class_horse ;
64994: LD_ADDR_OWVAR 28
64998: PUSH
64999: LD_INT 21
65001: ST_TO_ADDR
// hc_gallery :=  ;
65002: LD_ADDR_OWVAR 33
65006: PUSH
65007: LD_STRING 
65009: ST_TO_ADDR
// end ;
65010: LD_VAR 0 1
65014: RET
// export function PrepareMastodont ( ) ; begin
65015: LD_INT 0
65017: PPUSH
// uc_side := 0 ;
65018: LD_ADDR_OWVAR 20
65022: PUSH
65023: LD_INT 0
65025: ST_TO_ADDR
// uc_nation := 0 ;
65026: LD_ADDR_OWVAR 21
65030: PUSH
65031: LD_INT 0
65033: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65034: LD_ADDR_OWVAR 37
65038: PUSH
65039: LD_INT 31
65041: ST_TO_ADDR
// vc_control := control_rider ;
65042: LD_ADDR_OWVAR 38
65046: PUSH
65047: LD_INT 4
65049: ST_TO_ADDR
// end ;
65050: LD_VAR 0 1
65054: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65055: LD_INT 0
65057: PPUSH
65058: PPUSH
65059: PPUSH
// uc_side = 0 ;
65060: LD_ADDR_OWVAR 20
65064: PUSH
65065: LD_INT 0
65067: ST_TO_ADDR
// uc_nation = 0 ;
65068: LD_ADDR_OWVAR 21
65072: PUSH
65073: LD_INT 0
65075: ST_TO_ADDR
// InitHc_All ( ) ;
65076: CALL_OW 584
// InitVc ;
65080: CALL_OW 20
// if mastodonts then
65084: LD_VAR 0 6
65088: IFFALSE 65155
// for i = 1 to mastodonts do
65090: LD_ADDR_VAR 0 11
65094: PUSH
65095: DOUBLE
65096: LD_INT 1
65098: DEC
65099: ST_TO_ADDR
65100: LD_VAR 0 6
65104: PUSH
65105: FOR_TO
65106: IFFALSE 65153
// begin vc_chassis := 31 ;
65108: LD_ADDR_OWVAR 37
65112: PUSH
65113: LD_INT 31
65115: ST_TO_ADDR
// vc_control := control_rider ;
65116: LD_ADDR_OWVAR 38
65120: PUSH
65121: LD_INT 4
65123: ST_TO_ADDR
// animal := CreateVehicle ;
65124: LD_ADDR_VAR 0 12
65128: PUSH
65129: CALL_OW 45
65133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65134: LD_VAR 0 12
65138: PPUSH
65139: LD_VAR 0 8
65143: PPUSH
65144: LD_INT 0
65146: PPUSH
65147: CALL 67283 0 3
// end ;
65151: GO 65105
65153: POP
65154: POP
// if horses then
65155: LD_VAR 0 5
65159: IFFALSE 65226
// for i = 1 to horses do
65161: LD_ADDR_VAR 0 11
65165: PUSH
65166: DOUBLE
65167: LD_INT 1
65169: DEC
65170: ST_TO_ADDR
65171: LD_VAR 0 5
65175: PUSH
65176: FOR_TO
65177: IFFALSE 65224
// begin hc_class := 21 ;
65179: LD_ADDR_OWVAR 28
65183: PUSH
65184: LD_INT 21
65186: ST_TO_ADDR
// hc_gallery :=  ;
65187: LD_ADDR_OWVAR 33
65191: PUSH
65192: LD_STRING 
65194: ST_TO_ADDR
// animal := CreateHuman ;
65195: LD_ADDR_VAR 0 12
65199: PUSH
65200: CALL_OW 44
65204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65205: LD_VAR 0 12
65209: PPUSH
65210: LD_VAR 0 8
65214: PPUSH
65215: LD_INT 0
65217: PPUSH
65218: CALL 67283 0 3
// end ;
65222: GO 65176
65224: POP
65225: POP
// if birds then
65226: LD_VAR 0 1
65230: IFFALSE 65297
// for i = 1 to birds do
65232: LD_ADDR_VAR 0 11
65236: PUSH
65237: DOUBLE
65238: LD_INT 1
65240: DEC
65241: ST_TO_ADDR
65242: LD_VAR 0 1
65246: PUSH
65247: FOR_TO
65248: IFFALSE 65295
// begin hc_class := 18 ;
65250: LD_ADDR_OWVAR 28
65254: PUSH
65255: LD_INT 18
65257: ST_TO_ADDR
// hc_gallery =  ;
65258: LD_ADDR_OWVAR 33
65262: PUSH
65263: LD_STRING 
65265: ST_TO_ADDR
// animal := CreateHuman ;
65266: LD_ADDR_VAR 0 12
65270: PUSH
65271: CALL_OW 44
65275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65276: LD_VAR 0 12
65280: PPUSH
65281: LD_VAR 0 8
65285: PPUSH
65286: LD_INT 0
65288: PPUSH
65289: CALL 67283 0 3
// end ;
65293: GO 65247
65295: POP
65296: POP
// if tigers then
65297: LD_VAR 0 2
65301: IFFALSE 65385
// for i = 1 to tigers do
65303: LD_ADDR_VAR 0 11
65307: PUSH
65308: DOUBLE
65309: LD_INT 1
65311: DEC
65312: ST_TO_ADDR
65313: LD_VAR 0 2
65317: PUSH
65318: FOR_TO
65319: IFFALSE 65383
// begin hc_class = class_tiger ;
65321: LD_ADDR_OWVAR 28
65325: PUSH
65326: LD_INT 14
65328: ST_TO_ADDR
// hc_gallery =  ;
65329: LD_ADDR_OWVAR 33
65333: PUSH
65334: LD_STRING 
65336: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65337: LD_ADDR_OWVAR 35
65341: PUSH
65342: LD_INT 7
65344: NEG
65345: PPUSH
65346: LD_INT 7
65348: PPUSH
65349: CALL_OW 12
65353: ST_TO_ADDR
// animal := CreateHuman ;
65354: LD_ADDR_VAR 0 12
65358: PUSH
65359: CALL_OW 44
65363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65364: LD_VAR 0 12
65368: PPUSH
65369: LD_VAR 0 8
65373: PPUSH
65374: LD_INT 0
65376: PPUSH
65377: CALL 67283 0 3
// end ;
65381: GO 65318
65383: POP
65384: POP
// if apemans then
65385: LD_VAR 0 3
65389: IFFALSE 65512
// for i = 1 to apemans do
65391: LD_ADDR_VAR 0 11
65395: PUSH
65396: DOUBLE
65397: LD_INT 1
65399: DEC
65400: ST_TO_ADDR
65401: LD_VAR 0 3
65405: PUSH
65406: FOR_TO
65407: IFFALSE 65510
// begin hc_class = class_apeman ;
65409: LD_ADDR_OWVAR 28
65413: PUSH
65414: LD_INT 12
65416: ST_TO_ADDR
// hc_gallery =  ;
65417: LD_ADDR_OWVAR 33
65421: PUSH
65422: LD_STRING 
65424: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65425: LD_ADDR_OWVAR 35
65429: PUSH
65430: LD_INT 2
65432: NEG
65433: PPUSH
65434: LD_INT 2
65436: PPUSH
65437: CALL_OW 12
65441: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65442: LD_ADDR_OWVAR 31
65446: PUSH
65447: LD_INT 1
65449: PPUSH
65450: LD_INT 3
65452: PPUSH
65453: CALL_OW 12
65457: PUSH
65458: LD_INT 1
65460: PPUSH
65461: LD_INT 3
65463: PPUSH
65464: CALL_OW 12
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// animal := CreateHuman ;
65481: LD_ADDR_VAR 0 12
65485: PUSH
65486: CALL_OW 44
65490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65491: LD_VAR 0 12
65495: PPUSH
65496: LD_VAR 0 8
65500: PPUSH
65501: LD_INT 0
65503: PPUSH
65504: CALL 67283 0 3
// end ;
65508: GO 65406
65510: POP
65511: POP
// if enchidnas then
65512: LD_VAR 0 4
65516: IFFALSE 65583
// for i = 1 to enchidnas do
65518: LD_ADDR_VAR 0 11
65522: PUSH
65523: DOUBLE
65524: LD_INT 1
65526: DEC
65527: ST_TO_ADDR
65528: LD_VAR 0 4
65532: PUSH
65533: FOR_TO
65534: IFFALSE 65581
// begin hc_class = 13 ;
65536: LD_ADDR_OWVAR 28
65540: PUSH
65541: LD_INT 13
65543: ST_TO_ADDR
// hc_gallery =  ;
65544: LD_ADDR_OWVAR 33
65548: PUSH
65549: LD_STRING 
65551: ST_TO_ADDR
// animal := CreateHuman ;
65552: LD_ADDR_VAR 0 12
65556: PUSH
65557: CALL_OW 44
65561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65562: LD_VAR 0 12
65566: PPUSH
65567: LD_VAR 0 8
65571: PPUSH
65572: LD_INT 0
65574: PPUSH
65575: CALL 67283 0 3
// end ;
65579: GO 65533
65581: POP
65582: POP
// if fishes then
65583: LD_VAR 0 7
65587: IFFALSE 65654
// for i = 1 to fishes do
65589: LD_ADDR_VAR 0 11
65593: PUSH
65594: DOUBLE
65595: LD_INT 1
65597: DEC
65598: ST_TO_ADDR
65599: LD_VAR 0 7
65603: PUSH
65604: FOR_TO
65605: IFFALSE 65652
// begin hc_class = 20 ;
65607: LD_ADDR_OWVAR 28
65611: PUSH
65612: LD_INT 20
65614: ST_TO_ADDR
// hc_gallery =  ;
65615: LD_ADDR_OWVAR 33
65619: PUSH
65620: LD_STRING 
65622: ST_TO_ADDR
// animal := CreateHuman ;
65623: LD_ADDR_VAR 0 12
65627: PUSH
65628: CALL_OW 44
65632: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65633: LD_VAR 0 12
65637: PPUSH
65638: LD_VAR 0 9
65642: PPUSH
65643: LD_INT 0
65645: PPUSH
65646: CALL 67283 0 3
// end ;
65650: GO 65604
65652: POP
65653: POP
// end ;
65654: LD_VAR 0 10
65658: RET
// export function WantHeal ( sci , unit ) ; begin
65659: LD_INT 0
65661: PPUSH
// if GetTaskList ( sci ) > 0 then
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 437
65671: PUSH
65672: LD_INT 0
65674: GREATER
65675: IFFALSE 65745
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65677: LD_VAR 0 1
65681: PPUSH
65682: CALL_OW 437
65686: PUSH
65687: LD_INT 1
65689: ARRAY
65690: PUSH
65691: LD_INT 1
65693: ARRAY
65694: PUSH
65695: LD_STRING l
65697: EQUAL
65698: PUSH
65699: LD_VAR 0 1
65703: PPUSH
65704: CALL_OW 437
65708: PUSH
65709: LD_INT 1
65711: ARRAY
65712: PUSH
65713: LD_INT 4
65715: ARRAY
65716: PUSH
65717: LD_VAR 0 2
65721: EQUAL
65722: AND
65723: IFFALSE 65735
// result := true else
65725: LD_ADDR_VAR 0 3
65729: PUSH
65730: LD_INT 1
65732: ST_TO_ADDR
65733: GO 65743
// result := false ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_INT 0
65742: ST_TO_ADDR
// end else
65743: GO 65753
// result := false ;
65745: LD_ADDR_VAR 0 3
65749: PUSH
65750: LD_INT 0
65752: ST_TO_ADDR
// end ;
65753: LD_VAR 0 3
65757: RET
// export function HealTarget ( sci ) ; begin
65758: LD_INT 0
65760: PPUSH
// if not sci then
65761: LD_VAR 0 1
65765: NOT
65766: IFFALSE 65770
// exit ;
65768: GO 65835
// result := 0 ;
65770: LD_ADDR_VAR 0 2
65774: PUSH
65775: LD_INT 0
65777: ST_TO_ADDR
// if GetTaskList ( sci ) then
65778: LD_VAR 0 1
65782: PPUSH
65783: CALL_OW 437
65787: IFFALSE 65835
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65789: LD_VAR 0 1
65793: PPUSH
65794: CALL_OW 437
65798: PUSH
65799: LD_INT 1
65801: ARRAY
65802: PUSH
65803: LD_INT 1
65805: ARRAY
65806: PUSH
65807: LD_STRING l
65809: EQUAL
65810: IFFALSE 65835
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 437
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_INT 4
65833: ARRAY
65834: ST_TO_ADDR
// end ;
65835: LD_VAR 0 2
65839: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65840: LD_INT 0
65842: PPUSH
65843: PPUSH
65844: PPUSH
65845: PPUSH
// if not base_units then
65846: LD_VAR 0 1
65850: NOT
65851: IFFALSE 65855
// exit ;
65853: GO 65942
// result := false ;
65855: LD_ADDR_VAR 0 2
65859: PUSH
65860: LD_INT 0
65862: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65863: LD_ADDR_VAR 0 5
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_INT 21
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PPUSH
65883: CALL_OW 72
65887: ST_TO_ADDR
// if not tmp then
65888: LD_VAR 0 5
65892: NOT
65893: IFFALSE 65897
// exit ;
65895: GO 65942
// for i in tmp do
65897: LD_ADDR_VAR 0 3
65901: PUSH
65902: LD_VAR 0 5
65906: PUSH
65907: FOR_IN
65908: IFFALSE 65940
// begin result := EnemyInRange ( i , 22 ) ;
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_VAR 0 3
65919: PPUSH
65920: LD_INT 22
65922: PPUSH
65923: CALL 63529 0 2
65927: ST_TO_ADDR
// if result then
65928: LD_VAR 0 2
65932: IFFALSE 65938
// exit ;
65934: POP
65935: POP
65936: GO 65942
// end ;
65938: GO 65907
65940: POP
65941: POP
// end ;
65942: LD_VAR 0 2
65946: RET
// export function FilterByTag ( units , tag ) ; begin
65947: LD_INT 0
65949: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65950: LD_ADDR_VAR 0 3
65954: PUSH
65955: LD_VAR 0 1
65959: PPUSH
65960: LD_INT 120
65962: PUSH
65963: LD_VAR 0 2
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PPUSH
65972: CALL_OW 72
65976: ST_TO_ADDR
// end ;
65977: LD_VAR 0 3
65981: RET
// export function IsDriver ( un ) ; begin
65982: LD_INT 0
65984: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65985: LD_ADDR_VAR 0 2
65989: PUSH
65990: LD_VAR 0 1
65994: PUSH
65995: LD_INT 55
65997: PUSH
65998: EMPTY
65999: LIST
66000: PPUSH
66001: CALL_OW 69
66005: IN
66006: ST_TO_ADDR
// end ;
66007: LD_VAR 0 2
66011: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66012: LD_INT 0
66014: PPUSH
66015: PPUSH
// list := [ ] ;
66016: LD_ADDR_VAR 0 5
66020: PUSH
66021: EMPTY
66022: ST_TO_ADDR
// case d of 0 :
66023: LD_VAR 0 3
66027: PUSH
66028: LD_INT 0
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66036
66034: GO 66169
66036: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66037: LD_ADDR_VAR 0 5
66041: PUSH
66042: LD_VAR 0 1
66046: PUSH
66047: LD_INT 4
66049: MINUS
66050: PUSH
66051: LD_VAR 0 2
66055: PUSH
66056: LD_INT 4
66058: MINUS
66059: PUSH
66060: LD_INT 2
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: PUSH
66068: LD_VAR 0 1
66072: PUSH
66073: LD_INT 3
66075: MINUS
66076: PUSH
66077: LD_VAR 0 2
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: LD_VAR 0 1
66094: PUSH
66095: LD_INT 4
66097: PLUS
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: LD_INT 4
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: PUSH
66112: LD_VAR 0 1
66116: PUSH
66117: LD_INT 3
66119: PLUS
66120: PUSH
66121: LD_VAR 0 2
66125: PUSH
66126: LD_INT 3
66128: PLUS
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: PUSH
66138: LD_VAR 0 1
66142: PUSH
66143: LD_VAR 0 2
66147: PUSH
66148: LD_INT 4
66150: PLUS
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// end ; 1 :
66167: GO 66867
66169: LD_INT 1
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66177
66175: GO 66310
66177: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66178: LD_ADDR_VAR 0 5
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 4
66195: MINUS
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_VAR 0 1
66209: PUSH
66210: LD_INT 3
66212: MINUS
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 3
66221: MINUS
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: PUSH
66231: LD_VAR 0 1
66235: PUSH
66236: LD_INT 4
66238: MINUS
66239: PUSH
66240: LD_VAR 0 2
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: PUSH
66253: LD_VAR 0 1
66257: PUSH
66258: LD_VAR 0 2
66262: PUSH
66263: LD_INT 3
66265: PLUS
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: PUSH
66275: LD_VAR 0 1
66279: PUSH
66280: LD_INT 4
66282: PLUS
66283: PUSH
66284: LD_VAR 0 2
66288: PUSH
66289: LD_INT 4
66291: PLUS
66292: PUSH
66293: LD_INT 5
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: ST_TO_ADDR
// end ; 2 :
66308: GO 66867
66310: LD_INT 2
66312: DOUBLE
66313: EQUAL
66314: IFTRUE 66318
66316: GO 66447
66318: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66319: LD_ADDR_VAR 0 5
66323: PUSH
66324: LD_VAR 0 1
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 3
66336: MINUS
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: LD_VAR 0 1
66350: PUSH
66351: LD_INT 4
66353: PLUS
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: LD_INT 4
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 1
66372: PUSH
66373: LD_VAR 0 2
66377: PUSH
66378: LD_INT 4
66380: PLUS
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: LD_VAR 0 1
66394: PUSH
66395: LD_INT 3
66397: MINUS
66398: PUSH
66399: LD_VAR 0 2
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: PUSH
66412: LD_VAR 0 1
66416: PUSH
66417: LD_INT 4
66419: MINUS
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 4
66428: MINUS
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// end ; 3 :
66445: GO 66867
66447: LD_INT 3
66449: DOUBLE
66450: EQUAL
66451: IFTRUE 66455
66453: GO 66588
66455: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: LD_INT 3
66468: PLUS
66469: PUSH
66470: LD_VAR 0 2
66474: PUSH
66475: LD_INT 4
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 4
66490: PLUS
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: LD_INT 4
66499: PLUS
66500: PUSH
66501: LD_INT 5
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_INT 4
66516: MINUS
66517: PUSH
66518: LD_VAR 0 2
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: LIST
66530: PUSH
66531: LD_VAR 0 1
66535: PUSH
66536: LD_VAR 0 2
66540: PUSH
66541: LD_INT 4
66543: MINUS
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: PUSH
66553: LD_VAR 0 1
66557: PUSH
66558: LD_INT 3
66560: MINUS
66561: PUSH
66562: LD_VAR 0 2
66566: PUSH
66567: LD_INT 3
66569: MINUS
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: ST_TO_ADDR
// end ; 4 :
66586: GO 66867
66588: LD_INT 4
66590: DOUBLE
66591: EQUAL
66592: IFTRUE 66596
66594: GO 66729
66596: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66597: LD_ADDR_VAR 0 5
66601: PUSH
66602: LD_VAR 0 1
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: LD_INT 4
66614: PLUS
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: PUSH
66624: LD_VAR 0 1
66628: PUSH
66629: LD_INT 3
66631: PLUS
66632: PUSH
66633: LD_VAR 0 2
66637: PUSH
66638: LD_INT 3
66640: PLUS
66641: PUSH
66642: LD_INT 5
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: PUSH
66650: LD_VAR 0 1
66654: PUSH
66655: LD_INT 4
66657: PLUS
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: LD_INT 4
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 1
66676: PUSH
66677: LD_VAR 0 2
66681: PUSH
66682: LD_INT 3
66684: MINUS
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_INT 4
66701: MINUS
66702: PUSH
66703: LD_VAR 0 2
66707: PUSH
66708: LD_INT 4
66710: MINUS
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: ST_TO_ADDR
// end ; 5 :
66727: GO 66867
66729: LD_INT 5
66731: DOUBLE
66732: EQUAL
66733: IFTRUE 66737
66735: GO 66866
66737: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66738: LD_ADDR_VAR 0 5
66742: PUSH
66743: LD_VAR 0 1
66747: PUSH
66748: LD_INT 4
66750: MINUS
66751: PUSH
66752: LD_VAR 0 2
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: PUSH
66765: LD_VAR 0 1
66769: PUSH
66770: LD_VAR 0 2
66774: PUSH
66775: LD_INT 4
66777: MINUS
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: LD_INT 4
66794: PLUS
66795: PUSH
66796: LD_VAR 0 2
66800: PUSH
66801: LD_INT 4
66803: PLUS
66804: PUSH
66805: LD_INT 5
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: LD_INT 3
66820: PLUS
66821: PUSH
66822: LD_VAR 0 2
66826: PUSH
66827: LD_INT 4
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: LD_VAR 0 2
66844: PUSH
66845: LD_INT 3
66847: PLUS
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: ST_TO_ADDR
// end ; end ;
66864: GO 66867
66866: POP
// result := list ;
66867: LD_ADDR_VAR 0 4
66871: PUSH
66872: LD_VAR 0 5
66876: ST_TO_ADDR
// end ;
66877: LD_VAR 0 4
66881: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66882: LD_INT 0
66884: PPUSH
66885: PPUSH
66886: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66887: LD_VAR 0 1
66891: NOT
66892: PUSH
66893: LD_VAR 0 2
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 2
66903: PUSH
66904: LD_INT 3
66906: PUSH
66907: LD_INT 4
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: IN
66916: NOT
66917: OR
66918: IFFALSE 66922
// exit ;
66920: GO 67005
// tmp := [ ] ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: EMPTY
66928: ST_TO_ADDR
// for i in units do
66929: LD_ADDR_VAR 0 4
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: FOR_IN
66940: IFFALSE 66974
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66942: LD_ADDR_VAR 0 5
66946: PUSH
66947: LD_VAR 0 5
66951: PPUSH
66952: LD_VAR 0 4
66956: PPUSH
66957: LD_VAR 0 2
66961: PPUSH
66962: CALL_OW 259
66966: PPUSH
66967: CALL 68365 0 2
66971: ST_TO_ADDR
66972: GO 66939
66974: POP
66975: POP
// if not tmp then
66976: LD_VAR 0 5
66980: NOT
66981: IFFALSE 66985
// exit ;
66983: GO 67005
// result := SortListByListDesc ( units , tmp ) ;
66985: LD_ADDR_VAR 0 3
66989: PUSH
66990: LD_VAR 0 1
66994: PPUSH
66995: LD_VAR 0 5
66999: PPUSH
67000: CALL_OW 77
67004: ST_TO_ADDR
// end ;
67005: LD_VAR 0 3
67009: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67010: LD_INT 0
67012: PPUSH
67013: PPUSH
67014: PPUSH
// result := false ;
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: LD_INT 0
67022: ST_TO_ADDR
// if not building then
67023: LD_VAR 0 2
67027: NOT
67028: IFFALSE 67032
// exit ;
67030: GO 67170
// x := GetX ( building ) ;
67032: LD_ADDR_VAR 0 4
67036: PUSH
67037: LD_VAR 0 2
67041: PPUSH
67042: CALL_OW 250
67046: ST_TO_ADDR
// y := GetY ( building ) ;
67047: LD_ADDR_VAR 0 5
67051: PUSH
67052: LD_VAR 0 2
67056: PPUSH
67057: CALL_OW 251
67061: ST_TO_ADDR
// if not x or not y then
67062: LD_VAR 0 4
67066: NOT
67067: PUSH
67068: LD_VAR 0 5
67072: NOT
67073: OR
67074: IFFALSE 67078
// exit ;
67076: GO 67170
// if GetTaskList ( unit ) then
67078: LD_VAR 0 1
67082: PPUSH
67083: CALL_OW 437
67087: IFFALSE 67170
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67089: LD_STRING e
67091: PUSH
67092: LD_VAR 0 1
67096: PPUSH
67097: CALL_OW 437
67101: PUSH
67102: LD_INT 1
67104: ARRAY
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: EQUAL
67110: PUSH
67111: LD_VAR 0 4
67115: PUSH
67116: LD_VAR 0 1
67120: PPUSH
67121: CALL_OW 437
67125: PUSH
67126: LD_INT 1
67128: ARRAY
67129: PUSH
67130: LD_INT 2
67132: ARRAY
67133: EQUAL
67134: AND
67135: PUSH
67136: LD_VAR 0 5
67140: PUSH
67141: LD_VAR 0 1
67145: PPUSH
67146: CALL_OW 437
67150: PUSH
67151: LD_INT 1
67153: ARRAY
67154: PUSH
67155: LD_INT 3
67157: ARRAY
67158: EQUAL
67159: AND
67160: IFFALSE 67170
// result := true end ;
67162: LD_ADDR_VAR 0 3
67166: PUSH
67167: LD_INT 1
67169: ST_TO_ADDR
// end ;
67170: LD_VAR 0 3
67174: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67175: LD_INT 0
67177: PPUSH
// result := false ;
67178: LD_ADDR_VAR 0 4
67182: PUSH
67183: LD_INT 0
67185: ST_TO_ADDR
// if GetTaskList ( unit ) then
67186: LD_VAR 0 1
67190: PPUSH
67191: CALL_OW 437
67195: IFFALSE 67278
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67197: LD_STRING M
67199: PUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL_OW 437
67209: PUSH
67210: LD_INT 1
67212: ARRAY
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: EQUAL
67218: PUSH
67219: LD_VAR 0 2
67223: PUSH
67224: LD_VAR 0 1
67228: PPUSH
67229: CALL_OW 437
67233: PUSH
67234: LD_INT 1
67236: ARRAY
67237: PUSH
67238: LD_INT 2
67240: ARRAY
67241: EQUAL
67242: AND
67243: PUSH
67244: LD_VAR 0 3
67248: PUSH
67249: LD_VAR 0 1
67253: PPUSH
67254: CALL_OW 437
67258: PUSH
67259: LD_INT 1
67261: ARRAY
67262: PUSH
67263: LD_INT 3
67265: ARRAY
67266: EQUAL
67267: AND
67268: IFFALSE 67278
// result := true ;
67270: LD_ADDR_VAR 0 4
67274: PUSH
67275: LD_INT 1
67277: ST_TO_ADDR
// end ; end ;
67278: LD_VAR 0 4
67282: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67283: LD_INT 0
67285: PPUSH
67286: PPUSH
67287: PPUSH
67288: PPUSH
// if not unit or not area then
67289: LD_VAR 0 1
67293: NOT
67294: PUSH
67295: LD_VAR 0 2
67299: NOT
67300: OR
67301: IFFALSE 67305
// exit ;
67303: GO 67468
// tmp := AreaToList ( area , i ) ;
67305: LD_ADDR_VAR 0 6
67309: PUSH
67310: LD_VAR 0 2
67314: PPUSH
67315: LD_VAR 0 5
67319: PPUSH
67320: CALL_OW 517
67324: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67325: LD_ADDR_VAR 0 5
67329: PUSH
67330: DOUBLE
67331: LD_INT 1
67333: DEC
67334: ST_TO_ADDR
67335: LD_VAR 0 6
67339: PUSH
67340: LD_INT 1
67342: ARRAY
67343: PUSH
67344: FOR_TO
67345: IFFALSE 67466
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67347: LD_ADDR_VAR 0 7
67351: PUSH
67352: LD_VAR 0 6
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: PUSH
67361: LD_VAR 0 5
67365: ARRAY
67366: PUSH
67367: LD_VAR 0 6
67371: PUSH
67372: LD_INT 2
67374: ARRAY
67375: PUSH
67376: LD_VAR 0 5
67380: ARRAY
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67386: LD_INT 92
67388: PUSH
67389: LD_VAR 0 7
67393: PUSH
67394: LD_INT 1
67396: ARRAY
67397: PUSH
67398: LD_VAR 0 7
67402: PUSH
67403: LD_INT 2
67405: ARRAY
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: PPUSH
67416: CALL_OW 69
67420: PUSH
67421: LD_INT 0
67423: EQUAL
67424: IFFALSE 67464
// begin PlaceUnitArea ( unit , area , mode ) ;
67426: LD_VAR 0 1
67430: PPUSH
67431: LD_VAR 0 2
67435: PPUSH
67436: LD_VAR 0 3
67440: PPUSH
67441: CALL_OW 49
// result := IsPlaced ( unit ) ;
67445: LD_ADDR_VAR 0 4
67449: PUSH
67450: LD_VAR 0 1
67454: PPUSH
67455: CALL_OW 305
67459: ST_TO_ADDR
// exit ;
67460: POP
67461: POP
67462: GO 67468
// end ; end ;
67464: GO 67344
67466: POP
67467: POP
// end ;
67468: LD_VAR 0 4
67472: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67473: LD_INT 0
67475: PPUSH
67476: PPUSH
67477: PPUSH
// if not side or side > 8 then
67478: LD_VAR 0 1
67482: NOT
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: LD_INT 8
67491: GREATER
67492: OR
67493: IFFALSE 67497
// exit ;
67495: GO 67684
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67497: LD_ADDR_VAR 0 4
67501: PUSH
67502: LD_INT 22
67504: PUSH
67505: LD_VAR 0 1
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 21
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PPUSH
67528: CALL_OW 69
67532: ST_TO_ADDR
// if not tmp then
67533: LD_VAR 0 4
67537: NOT
67538: IFFALSE 67542
// exit ;
67540: GO 67684
// enable_addtolog := true ;
67542: LD_ADDR_OWVAR 81
67546: PUSH
67547: LD_INT 1
67549: ST_TO_ADDR
// AddToLog ( [ ) ;
67550: LD_STRING [
67552: PPUSH
67553: CALL_OW 561
// for i in tmp do
67557: LD_ADDR_VAR 0 3
67561: PUSH
67562: LD_VAR 0 4
67566: PUSH
67567: FOR_IN
67568: IFFALSE 67675
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67570: LD_STRING [
67572: PUSH
67573: LD_VAR 0 3
67577: PPUSH
67578: CALL_OW 266
67582: STR
67583: PUSH
67584: LD_STRING , 
67586: STR
67587: PUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: CALL_OW 250
67597: STR
67598: PUSH
67599: LD_STRING , 
67601: STR
67602: PUSH
67603: LD_VAR 0 3
67607: PPUSH
67608: CALL_OW 251
67612: STR
67613: PUSH
67614: LD_STRING , 
67616: STR
67617: PUSH
67618: LD_VAR 0 3
67622: PPUSH
67623: CALL_OW 254
67627: STR
67628: PUSH
67629: LD_STRING , 
67631: STR
67632: PUSH
67633: LD_VAR 0 3
67637: PPUSH
67638: LD_INT 1
67640: PPUSH
67641: CALL_OW 268
67645: STR
67646: PUSH
67647: LD_STRING , 
67649: STR
67650: PUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 2
67658: PPUSH
67659: CALL_OW 268
67663: STR
67664: PUSH
67665: LD_STRING ],
67667: STR
67668: PPUSH
67669: CALL_OW 561
// end ;
67673: GO 67567
67675: POP
67676: POP
// AddToLog ( ]; ) ;
67677: LD_STRING ];
67679: PPUSH
67680: CALL_OW 561
// end ;
67684: LD_VAR 0 2
67688: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
67695: PPUSH
// if not area or not rate or not max then
67696: LD_VAR 0 1
67700: NOT
67701: PUSH
67702: LD_VAR 0 2
67706: NOT
67707: OR
67708: PUSH
67709: LD_VAR 0 4
67713: NOT
67714: OR
67715: IFFALSE 67719
// exit ;
67717: GO 67908
// while 1 do
67719: LD_INT 1
67721: IFFALSE 67908
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67723: LD_ADDR_VAR 0 9
67727: PUSH
67728: LD_VAR 0 1
67732: PPUSH
67733: LD_INT 1
67735: PPUSH
67736: CALL_OW 287
67740: PUSH
67741: LD_INT 10
67743: MUL
67744: ST_TO_ADDR
// r := rate / 10 ;
67745: LD_ADDR_VAR 0 7
67749: PUSH
67750: LD_VAR 0 2
67754: PUSH
67755: LD_INT 10
67757: DIVREAL
67758: ST_TO_ADDR
// time := 1 1$00 ;
67759: LD_ADDR_VAR 0 8
67763: PUSH
67764: LD_INT 2100
67766: ST_TO_ADDR
// if amount < min then
67767: LD_VAR 0 9
67771: PUSH
67772: LD_VAR 0 3
67776: LESS
67777: IFFALSE 67795
// r := r * 2 else
67779: LD_ADDR_VAR 0 7
67783: PUSH
67784: LD_VAR 0 7
67788: PUSH
67789: LD_INT 2
67791: MUL
67792: ST_TO_ADDR
67793: GO 67821
// if amount > max then
67795: LD_VAR 0 9
67799: PUSH
67800: LD_VAR 0 4
67804: GREATER
67805: IFFALSE 67821
// r := r / 2 ;
67807: LD_ADDR_VAR 0 7
67811: PUSH
67812: LD_VAR 0 7
67816: PUSH
67817: LD_INT 2
67819: DIVREAL
67820: ST_TO_ADDR
// time := time / r ;
67821: LD_ADDR_VAR 0 8
67825: PUSH
67826: LD_VAR 0 8
67830: PUSH
67831: LD_VAR 0 7
67835: DIVREAL
67836: ST_TO_ADDR
// if time < 0 then
67837: LD_VAR 0 8
67841: PUSH
67842: LD_INT 0
67844: LESS
67845: IFFALSE 67862
// time := time * - 1 ;
67847: LD_ADDR_VAR 0 8
67851: PUSH
67852: LD_VAR 0 8
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: MUL
67861: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67862: LD_VAR 0 8
67866: PUSH
67867: LD_INT 35
67869: PPUSH
67870: LD_INT 875
67872: PPUSH
67873: CALL_OW 12
67877: PLUS
67878: PPUSH
67879: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67883: LD_INT 1
67885: PPUSH
67886: LD_INT 5
67888: PPUSH
67889: CALL_OW 12
67893: PPUSH
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 55
// end ;
67906: GO 67719
// end ;
67908: LD_VAR 0 5
67912: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67913: LD_INT 0
67915: PPUSH
67916: PPUSH
67917: PPUSH
67918: PPUSH
67919: PPUSH
67920: PPUSH
67921: PPUSH
67922: PPUSH
// if not turrets or not factories then
67923: LD_VAR 0 1
67927: NOT
67928: PUSH
67929: LD_VAR 0 2
67933: NOT
67934: OR
67935: IFFALSE 67939
// exit ;
67937: GO 68246
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67939: LD_ADDR_VAR 0 10
67943: PUSH
67944: LD_INT 5
67946: PUSH
67947: LD_INT 6
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: PUSH
67957: LD_INT 4
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 3
67966: PUSH
67967: LD_INT 5
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 24
67981: PUSH
67982: LD_INT 25
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 23
67991: PUSH
67992: LD_INT 27
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 42
68005: PUSH
68006: LD_INT 43
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 44
68015: PUSH
68016: LD_INT 46
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 45
68025: PUSH
68026: LD_INT 47
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: ST_TO_ADDR
// result := [ ] ;
68043: LD_ADDR_VAR 0 3
68047: PUSH
68048: EMPTY
68049: ST_TO_ADDR
// for i in turrets do
68050: LD_ADDR_VAR 0 4
68054: PUSH
68055: LD_VAR 0 1
68059: PUSH
68060: FOR_IN
68061: IFFALSE 68244
// begin nat := GetNation ( i ) ;
68063: LD_ADDR_VAR 0 7
68067: PUSH
68068: LD_VAR 0 4
68072: PPUSH
68073: CALL_OW 248
68077: ST_TO_ADDR
// weapon := 0 ;
68078: LD_ADDR_VAR 0 8
68082: PUSH
68083: LD_INT 0
68085: ST_TO_ADDR
// if not nat then
68086: LD_VAR 0 7
68090: NOT
68091: IFFALSE 68095
// continue ;
68093: GO 68060
// for j in list [ nat ] do
68095: LD_ADDR_VAR 0 5
68099: PUSH
68100: LD_VAR 0 10
68104: PUSH
68105: LD_VAR 0 7
68109: ARRAY
68110: PUSH
68111: FOR_IN
68112: IFFALSE 68153
// if GetBWeapon ( i ) = j [ 1 ] then
68114: LD_VAR 0 4
68118: PPUSH
68119: CALL_OW 269
68123: PUSH
68124: LD_VAR 0 5
68128: PUSH
68129: LD_INT 1
68131: ARRAY
68132: EQUAL
68133: IFFALSE 68151
// begin weapon := j [ 2 ] ;
68135: LD_ADDR_VAR 0 8
68139: PUSH
68140: LD_VAR 0 5
68144: PUSH
68145: LD_INT 2
68147: ARRAY
68148: ST_TO_ADDR
// break ;
68149: GO 68153
// end ;
68151: GO 68111
68153: POP
68154: POP
// if not weapon then
68155: LD_VAR 0 8
68159: NOT
68160: IFFALSE 68164
// continue ;
68162: GO 68060
// for k in factories do
68164: LD_ADDR_VAR 0 6
68168: PUSH
68169: LD_VAR 0 2
68173: PUSH
68174: FOR_IN
68175: IFFALSE 68240
// begin weapons := AvailableWeaponList ( k ) ;
68177: LD_ADDR_VAR 0 9
68181: PUSH
68182: LD_VAR 0 6
68186: PPUSH
68187: CALL_OW 478
68191: ST_TO_ADDR
// if not weapons then
68192: LD_VAR 0 9
68196: NOT
68197: IFFALSE 68201
// continue ;
68199: GO 68174
// if weapon in weapons then
68201: LD_VAR 0 8
68205: PUSH
68206: LD_VAR 0 9
68210: IN
68211: IFFALSE 68238
// begin result := [ i , weapon ] ;
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_VAR 0 4
68222: PUSH
68223: LD_VAR 0 8
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// exit ;
68232: POP
68233: POP
68234: POP
68235: POP
68236: GO 68246
// end ; end ;
68238: GO 68174
68240: POP
68241: POP
// end ;
68242: GO 68060
68244: POP
68245: POP
// end ;
68246: LD_VAR 0 3
68250: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68251: LD_INT 0
68253: PPUSH
// if not side or side > 8 then
68254: LD_VAR 0 3
68258: NOT
68259: PUSH
68260: LD_VAR 0 3
68264: PUSH
68265: LD_INT 8
68267: GREATER
68268: OR
68269: IFFALSE 68273
// exit ;
68271: GO 68332
// if not range then
68273: LD_VAR 0 4
68277: NOT
68278: IFFALSE 68289
// range := - 12 ;
68280: LD_ADDR_VAR 0 4
68284: PUSH
68285: LD_INT 12
68287: NEG
68288: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68289: LD_VAR 0 1
68293: PPUSH
68294: LD_VAR 0 2
68298: PPUSH
68299: LD_VAR 0 3
68303: PPUSH
68304: LD_VAR 0 4
68308: PPUSH
68309: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68313: LD_VAR 0 1
68317: PPUSH
68318: LD_VAR 0 2
68322: PPUSH
68323: LD_VAR 0 3
68327: PPUSH
68328: CALL_OW 331
// end ;
68332: LD_VAR 0 5
68336: RET
// export function Video ( mode ) ; begin
68337: LD_INT 0
68339: PPUSH
// ingame_video = mode ;
68340: LD_ADDR_OWVAR 52
68344: PUSH
68345: LD_VAR 0 1
68349: ST_TO_ADDR
// interface_hidden = mode ;
68350: LD_ADDR_OWVAR 54
68354: PUSH
68355: LD_VAR 0 1
68359: ST_TO_ADDR
// end ;
68360: LD_VAR 0 2
68364: RET
// export function Join ( array , element ) ; begin
68365: LD_INT 0
68367: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68368: LD_ADDR_VAR 0 3
68372: PUSH
68373: LD_VAR 0 1
68377: PPUSH
68378: LD_VAR 0 1
68382: PUSH
68383: LD_INT 1
68385: PLUS
68386: PPUSH
68387: LD_VAR 0 2
68391: PPUSH
68392: CALL_OW 1
68396: ST_TO_ADDR
// end ;
68397: LD_VAR 0 3
68401: RET
// export function JoinUnion ( array , element ) ; begin
68402: LD_INT 0
68404: PPUSH
// result := array union element ;
68405: LD_ADDR_VAR 0 3
68409: PUSH
68410: LD_VAR 0 1
68414: PUSH
68415: LD_VAR 0 2
68419: UNION
68420: ST_TO_ADDR
// end ;
68421: LD_VAR 0 3
68425: RET
// export function GetBehemoths ( side ) ; begin
68426: LD_INT 0
68428: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68429: LD_ADDR_VAR 0 2
68433: PUSH
68434: LD_INT 22
68436: PUSH
68437: LD_VAR 0 1
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 31
68448: PUSH
68449: LD_INT 25
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PPUSH
68460: CALL_OW 69
68464: ST_TO_ADDR
// end ;
68465: LD_VAR 0 2
68469: RET
// export function Shuffle ( array ) ; var i , index ; begin
68470: LD_INT 0
68472: PPUSH
68473: PPUSH
68474: PPUSH
// result := [ ] ;
68475: LD_ADDR_VAR 0 2
68479: PUSH
68480: EMPTY
68481: ST_TO_ADDR
// if not array then
68482: LD_VAR 0 1
68486: NOT
68487: IFFALSE 68491
// exit ;
68489: GO 68590
// Randomize ;
68491: CALL_OW 10
// for i = array downto 1 do
68495: LD_ADDR_VAR 0 3
68499: PUSH
68500: DOUBLE
68501: LD_VAR 0 1
68505: INC
68506: ST_TO_ADDR
68507: LD_INT 1
68509: PUSH
68510: FOR_DOWNTO
68511: IFFALSE 68588
// begin index := rand ( 1 , array ) ;
68513: LD_ADDR_VAR 0 4
68517: PUSH
68518: LD_INT 1
68520: PPUSH
68521: LD_VAR 0 1
68525: PPUSH
68526: CALL_OW 12
68530: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68531: LD_ADDR_VAR 0 2
68535: PUSH
68536: LD_VAR 0 2
68540: PPUSH
68541: LD_VAR 0 2
68545: PUSH
68546: LD_INT 1
68548: PLUS
68549: PPUSH
68550: LD_VAR 0 1
68554: PUSH
68555: LD_VAR 0 4
68559: ARRAY
68560: PPUSH
68561: CALL_OW 2
68565: ST_TO_ADDR
// array := Delete ( array , index ) ;
68566: LD_ADDR_VAR 0 1
68570: PUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: LD_VAR 0 4
68580: PPUSH
68581: CALL_OW 3
68585: ST_TO_ADDR
// end ;
68586: GO 68510
68588: POP
68589: POP
// end ;
68590: LD_VAR 0 2
68594: RET
// export function GetBaseMaterials ( base ) ; begin
68595: LD_INT 0
68597: PPUSH
// result := [ 0 , 0 , 0 ] ;
68598: LD_ADDR_VAR 0 2
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: ST_TO_ADDR
// if not base then
68617: LD_VAR 0 1
68621: NOT
68622: IFFALSE 68626
// exit ;
68624: GO 68675
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68626: LD_ADDR_VAR 0 2
68630: PUSH
68631: LD_VAR 0 1
68635: PPUSH
68636: LD_INT 1
68638: PPUSH
68639: CALL_OW 275
68643: PUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: LD_INT 2
68651: PPUSH
68652: CALL_OW 275
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: LD_INT 3
68664: PPUSH
68665: CALL_OW 275
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: ST_TO_ADDR
// end ;
68675: LD_VAR 0 2
68679: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68680: LD_INT 0
68682: PPUSH
68683: PPUSH
// result := array ;
68684: LD_ADDR_VAR 0 3
68688: PUSH
68689: LD_VAR 0 1
68693: ST_TO_ADDR
// if size >= result then
68694: LD_VAR 0 2
68698: PUSH
68699: LD_VAR 0 3
68703: GREATEREQUAL
68704: IFFALSE 68708
// exit ;
68706: GO 68758
// if size then
68708: LD_VAR 0 2
68712: IFFALSE 68758
// for i := array downto size do
68714: LD_ADDR_VAR 0 4
68718: PUSH
68719: DOUBLE
68720: LD_VAR 0 1
68724: INC
68725: ST_TO_ADDR
68726: LD_VAR 0 2
68730: PUSH
68731: FOR_DOWNTO
68732: IFFALSE 68756
// result := Delete ( result , result ) ;
68734: LD_ADDR_VAR 0 3
68738: PUSH
68739: LD_VAR 0 3
68743: PPUSH
68744: LD_VAR 0 3
68748: PPUSH
68749: CALL_OW 3
68753: ST_TO_ADDR
68754: GO 68731
68756: POP
68757: POP
// end ;
68758: LD_VAR 0 3
68762: RET
// export function ComExit ( unit ) ; var tmp ; begin
68763: LD_INT 0
68765: PPUSH
68766: PPUSH
// if not IsInUnit ( unit ) then
68767: LD_VAR 0 1
68771: PPUSH
68772: CALL_OW 310
68776: NOT
68777: IFFALSE 68781
// exit ;
68779: GO 68841
// tmp := IsInUnit ( unit ) ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_VAR 0 1
68790: PPUSH
68791: CALL_OW 310
68795: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68796: LD_VAR 0 3
68800: PPUSH
68801: CALL_OW 247
68805: PUSH
68806: LD_INT 2
68808: EQUAL
68809: IFFALSE 68822
// ComExitVehicle ( unit ) else
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL_OW 121
68820: GO 68831
// ComExitBuilding ( unit ) ;
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL_OW 122
// result := tmp ;
68831: LD_ADDR_VAR 0 2
68835: PUSH
68836: LD_VAR 0 3
68840: ST_TO_ADDR
// end ;
68841: LD_VAR 0 2
68845: RET
// export function ComExitAll ( units ) ; var i ; begin
68846: LD_INT 0
68848: PPUSH
68849: PPUSH
// if not units then
68850: LD_VAR 0 1
68854: NOT
68855: IFFALSE 68859
// exit ;
68857: GO 68885
// for i in units do
68859: LD_ADDR_VAR 0 3
68863: PUSH
68864: LD_VAR 0 1
68868: PUSH
68869: FOR_IN
68870: IFFALSE 68883
// ComExit ( i ) ;
68872: LD_VAR 0 3
68876: PPUSH
68877: CALL 68763 0 1
68881: GO 68869
68883: POP
68884: POP
// end ;
68885: LD_VAR 0 2
68889: RET
// export function ResetHc ; begin
68890: LD_INT 0
68892: PPUSH
// InitHc ;
68893: CALL_OW 19
// hc_importance := 0 ;
68897: LD_ADDR_OWVAR 32
68901: PUSH
68902: LD_INT 0
68904: ST_TO_ADDR
// end ;
68905: LD_VAR 0 1
68909: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68910: LD_INT 0
68912: PPUSH
68913: PPUSH
68914: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68915: LD_ADDR_VAR 0 6
68919: PUSH
68920: LD_VAR 0 1
68924: PUSH
68925: LD_VAR 0 3
68929: PLUS
68930: PUSH
68931: LD_INT 2
68933: DIV
68934: ST_TO_ADDR
// if _x < 0 then
68935: LD_VAR 0 6
68939: PUSH
68940: LD_INT 0
68942: LESS
68943: IFFALSE 68960
// _x := _x * - 1 ;
68945: LD_ADDR_VAR 0 6
68949: PUSH
68950: LD_VAR 0 6
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: MUL
68959: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68960: LD_ADDR_VAR 0 7
68964: PUSH
68965: LD_VAR 0 2
68969: PUSH
68970: LD_VAR 0 4
68974: PLUS
68975: PUSH
68976: LD_INT 2
68978: DIV
68979: ST_TO_ADDR
// if _y < 0 then
68980: LD_VAR 0 7
68984: PUSH
68985: LD_INT 0
68987: LESS
68988: IFFALSE 69005
// _y := _y * - 1 ;
68990: LD_ADDR_VAR 0 7
68994: PUSH
68995: LD_VAR 0 7
68999: PUSH
69000: LD_INT 1
69002: NEG
69003: MUL
69004: ST_TO_ADDR
// result := [ _x , _y ] ;
69005: LD_ADDR_VAR 0 5
69009: PUSH
69010: LD_VAR 0 6
69014: PUSH
69015: LD_VAR 0 7
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: ST_TO_ADDR
// end ;
69024: LD_VAR 0 5
69028: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69029: LD_INT 0
69031: PPUSH
69032: PPUSH
69033: PPUSH
69034: PPUSH
// task := GetTaskList ( unit ) ;
69035: LD_ADDR_VAR 0 7
69039: PUSH
69040: LD_VAR 0 1
69044: PPUSH
69045: CALL_OW 437
69049: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69050: LD_VAR 0 7
69054: NOT
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: LD_VAR 0 2
69065: PPUSH
69066: CALL_OW 308
69070: NOT
69071: AND
69072: IFFALSE 69076
// exit ;
69074: GO 69194
// if IsInArea ( unit , area ) then
69076: LD_VAR 0 1
69080: PPUSH
69081: LD_VAR 0 2
69085: PPUSH
69086: CALL_OW 308
69090: IFFALSE 69108
// begin ComMoveToArea ( unit , goAway ) ;
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: CALL_OW 113
// exit ;
69106: GO 69194
// end ; if task [ 1 ] [ 1 ] <> M then
69108: LD_VAR 0 7
69112: PUSH
69113: LD_INT 1
69115: ARRAY
69116: PUSH
69117: LD_INT 1
69119: ARRAY
69120: PUSH
69121: LD_STRING M
69123: NONEQUAL
69124: IFFALSE 69128
// exit ;
69126: GO 69194
// x := task [ 1 ] [ 2 ] ;
69128: LD_ADDR_VAR 0 5
69132: PUSH
69133: LD_VAR 0 7
69137: PUSH
69138: LD_INT 1
69140: ARRAY
69141: PUSH
69142: LD_INT 2
69144: ARRAY
69145: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69146: LD_ADDR_VAR 0 6
69150: PUSH
69151: LD_VAR 0 7
69155: PUSH
69156: LD_INT 1
69158: ARRAY
69159: PUSH
69160: LD_INT 3
69162: ARRAY
69163: ST_TO_ADDR
// if InArea ( x , y , area ) then
69164: LD_VAR 0 5
69168: PPUSH
69169: LD_VAR 0 6
69173: PPUSH
69174: LD_VAR 0 2
69178: PPUSH
69179: CALL_OW 309
69183: IFFALSE 69194
// ComStop ( unit ) ;
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 141
// end ;
69194: LD_VAR 0 4
69198: RET
// export function Abs ( value ) ; begin
69199: LD_INT 0
69201: PPUSH
// result := value ;
69202: LD_ADDR_VAR 0 2
69206: PUSH
69207: LD_VAR 0 1
69211: ST_TO_ADDR
// if value < 0 then
69212: LD_VAR 0 1
69216: PUSH
69217: LD_INT 0
69219: LESS
69220: IFFALSE 69237
// result := value * - 1 ;
69222: LD_ADDR_VAR 0 2
69226: PUSH
69227: LD_VAR 0 1
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: MUL
69236: ST_TO_ADDR
// end ;
69237: LD_VAR 0 2
69241: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69242: LD_INT 0
69244: PPUSH
69245: PPUSH
69246: PPUSH
69247: PPUSH
69248: PPUSH
69249: PPUSH
69250: PPUSH
69251: PPUSH
// if not unit or not building then
69252: LD_VAR 0 1
69256: NOT
69257: PUSH
69258: LD_VAR 0 2
69262: NOT
69263: OR
69264: IFFALSE 69268
// exit ;
69266: GO 69494
// x := GetX ( building ) ;
69268: LD_ADDR_VAR 0 4
69272: PUSH
69273: LD_VAR 0 2
69277: PPUSH
69278: CALL_OW 250
69282: ST_TO_ADDR
// y := GetY ( building ) ;
69283: LD_ADDR_VAR 0 6
69287: PUSH
69288: LD_VAR 0 2
69292: PPUSH
69293: CALL_OW 251
69297: ST_TO_ADDR
// d := GetDir ( building ) ;
69298: LD_ADDR_VAR 0 8
69302: PUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: CALL_OW 254
69312: ST_TO_ADDR
// r := 4 ;
69313: LD_ADDR_VAR 0 9
69317: PUSH
69318: LD_INT 4
69320: ST_TO_ADDR
// for i := 1 to 5 do
69321: LD_ADDR_VAR 0 10
69325: PUSH
69326: DOUBLE
69327: LD_INT 1
69329: DEC
69330: ST_TO_ADDR
69331: LD_INT 5
69333: PUSH
69334: FOR_TO
69335: IFFALSE 69492
// begin _x := ShiftX ( x , d , r + i ) ;
69337: LD_ADDR_VAR 0 5
69341: PUSH
69342: LD_VAR 0 4
69346: PPUSH
69347: LD_VAR 0 8
69351: PPUSH
69352: LD_VAR 0 9
69356: PUSH
69357: LD_VAR 0 10
69361: PLUS
69362: PPUSH
69363: CALL_OW 272
69367: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69368: LD_ADDR_VAR 0 7
69372: PUSH
69373: LD_VAR 0 6
69377: PPUSH
69378: LD_VAR 0 8
69382: PPUSH
69383: LD_VAR 0 9
69387: PUSH
69388: LD_VAR 0 10
69392: PLUS
69393: PPUSH
69394: CALL_OW 273
69398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69399: LD_VAR 0 5
69403: PPUSH
69404: LD_VAR 0 7
69408: PPUSH
69409: CALL_OW 488
69413: PUSH
69414: LD_VAR 0 5
69418: PPUSH
69419: LD_VAR 0 7
69423: PPUSH
69424: CALL_OW 428
69428: PPUSH
69429: CALL_OW 247
69433: PUSH
69434: LD_INT 3
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: IN
69444: NOT
69445: AND
69446: IFFALSE 69490
// begin ComMoveXY ( unit , _x , _y ) ;
69448: LD_VAR 0 1
69452: PPUSH
69453: LD_VAR 0 5
69457: PPUSH
69458: LD_VAR 0 7
69462: PPUSH
69463: CALL_OW 111
// result := [ _x , _y ] ;
69467: LD_ADDR_VAR 0 3
69471: PUSH
69472: LD_VAR 0 5
69476: PUSH
69477: LD_VAR 0 7
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: ST_TO_ADDR
// exit ;
69486: POP
69487: POP
69488: GO 69494
// end ; end ;
69490: GO 69334
69492: POP
69493: POP
// end ;
69494: LD_VAR 0 3
69498: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69499: LD_INT 0
69501: PPUSH
69502: PPUSH
69503: PPUSH
// result := 0 ;
69504: LD_ADDR_VAR 0 3
69508: PUSH
69509: LD_INT 0
69511: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69512: LD_VAR 0 1
69516: PUSH
69517: LD_INT 0
69519: LESS
69520: PUSH
69521: LD_VAR 0 1
69525: PUSH
69526: LD_INT 8
69528: GREATER
69529: OR
69530: PUSH
69531: LD_VAR 0 2
69535: PUSH
69536: LD_INT 0
69538: LESS
69539: OR
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_INT 8
69548: GREATER
69549: OR
69550: IFFALSE 69554
// exit ;
69552: GO 69629
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69554: LD_ADDR_VAR 0 4
69558: PUSH
69559: LD_INT 22
69561: PUSH
69562: LD_VAR 0 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PPUSH
69571: CALL_OW 69
69575: PUSH
69576: FOR_IN
69577: IFFALSE 69627
// begin un := UnitShoot ( i ) ;
69579: LD_ADDR_VAR 0 5
69583: PUSH
69584: LD_VAR 0 4
69588: PPUSH
69589: CALL_OW 504
69593: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69594: LD_VAR 0 5
69598: PPUSH
69599: CALL_OW 255
69603: PUSH
69604: LD_VAR 0 1
69608: EQUAL
69609: IFFALSE 69625
// begin result := un ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 5
69620: ST_TO_ADDR
// exit ;
69621: POP
69622: POP
69623: GO 69629
// end ; end ;
69625: GO 69576
69627: POP
69628: POP
// end ;
69629: LD_VAR 0 3
69633: RET
// export function GetCargoBay ( units ) ; begin
69634: LD_INT 0
69636: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69637: LD_ADDR_VAR 0 2
69641: PUSH
69642: LD_VAR 0 1
69646: PPUSH
69647: LD_INT 2
69649: PUSH
69650: LD_INT 34
69652: PUSH
69653: LD_INT 12
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 34
69662: PUSH
69663: LD_INT 51
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 34
69672: PUSH
69673: LD_INT 32
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 34
69682: PUSH
69683: LD_INT 89
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: PPUSH
69697: CALL_OW 72
69701: ST_TO_ADDR
// end ;
69702: LD_VAR 0 2
69706: RET
// export function Negate ( value ) ; begin
69707: LD_INT 0
69709: PPUSH
// result := not value ;
69710: LD_ADDR_VAR 0 2
69714: PUSH
69715: LD_VAR 0 1
69719: NOT
69720: ST_TO_ADDR
// end ;
69721: LD_VAR 0 2
69725: RET
// export function Inc ( value ) ; begin
69726: LD_INT 0
69728: PPUSH
// result := value + 1 ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: LD_VAR 0 1
69738: PUSH
69739: LD_INT 1
69741: PLUS
69742: ST_TO_ADDR
// end ;
69743: LD_VAR 0 2
69747: RET
// export function Dec ( value ) ; begin
69748: LD_INT 0
69750: PPUSH
// result := value - 1 ;
69751: LD_ADDR_VAR 0 2
69755: PUSH
69756: LD_VAR 0 1
69760: PUSH
69761: LD_INT 1
69763: MINUS
69764: ST_TO_ADDR
// end ;
69765: LD_VAR 0 2
69769: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69770: LD_INT 0
69772: PPUSH
69773: PPUSH
69774: PPUSH
69775: PPUSH
69776: PPUSH
69777: PPUSH
69778: PPUSH
69779: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69780: LD_VAR 0 1
69784: PPUSH
69785: LD_VAR 0 2
69789: PPUSH
69790: CALL_OW 488
69794: NOT
69795: PUSH
69796: LD_VAR 0 3
69800: PPUSH
69801: LD_VAR 0 4
69805: PPUSH
69806: CALL_OW 488
69810: NOT
69811: OR
69812: IFFALSE 69825
// begin result := - 1 ;
69814: LD_ADDR_VAR 0 5
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: ST_TO_ADDR
// exit ;
69823: GO 70060
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69825: LD_ADDR_VAR 0 12
69829: PUSH
69830: LD_VAR 0 1
69834: PPUSH
69835: LD_VAR 0 2
69839: PPUSH
69840: LD_VAR 0 3
69844: PPUSH
69845: LD_VAR 0 4
69849: PPUSH
69850: CALL 68910 0 4
69854: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69855: LD_ADDR_VAR 0 11
69859: PUSH
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_VAR 0 2
69869: PPUSH
69870: LD_VAR 0 12
69874: PUSH
69875: LD_INT 1
69877: ARRAY
69878: PPUSH
69879: LD_VAR 0 12
69883: PUSH
69884: LD_INT 2
69886: ARRAY
69887: PPUSH
69888: CALL_OW 298
69892: ST_TO_ADDR
// distance := 9999 ;
69893: LD_ADDR_VAR 0 10
69897: PUSH
69898: LD_INT 9999
69900: ST_TO_ADDR
// for i := 0 to 5 do
69901: LD_ADDR_VAR 0 6
69905: PUSH
69906: DOUBLE
69907: LD_INT 0
69909: DEC
69910: ST_TO_ADDR
69911: LD_INT 5
69913: PUSH
69914: FOR_TO
69915: IFFALSE 70058
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69917: LD_ADDR_VAR 0 7
69921: PUSH
69922: LD_VAR 0 1
69926: PPUSH
69927: LD_VAR 0 6
69931: PPUSH
69932: LD_VAR 0 11
69936: PPUSH
69937: CALL_OW 272
69941: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69942: LD_ADDR_VAR 0 8
69946: PUSH
69947: LD_VAR 0 2
69951: PPUSH
69952: LD_VAR 0 6
69956: PPUSH
69957: LD_VAR 0 11
69961: PPUSH
69962: CALL_OW 273
69966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69967: LD_VAR 0 7
69971: PPUSH
69972: LD_VAR 0 8
69976: PPUSH
69977: CALL_OW 488
69981: NOT
69982: IFFALSE 69986
// continue ;
69984: GO 69914
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69986: LD_ADDR_VAR 0 9
69990: PUSH
69991: LD_VAR 0 12
69995: PUSH
69996: LD_INT 1
69998: ARRAY
69999: PPUSH
70000: LD_VAR 0 12
70004: PUSH
70005: LD_INT 2
70007: ARRAY
70008: PPUSH
70009: LD_VAR 0 7
70013: PPUSH
70014: LD_VAR 0 8
70018: PPUSH
70019: CALL_OW 298
70023: ST_TO_ADDR
// if tmp < distance then
70024: LD_VAR 0 9
70028: PUSH
70029: LD_VAR 0 10
70033: LESS
70034: IFFALSE 70056
// begin result := i ;
70036: LD_ADDR_VAR 0 5
70040: PUSH
70041: LD_VAR 0 6
70045: ST_TO_ADDR
// distance := tmp ;
70046: LD_ADDR_VAR 0 10
70050: PUSH
70051: LD_VAR 0 9
70055: ST_TO_ADDR
// end ; end ;
70056: GO 69914
70058: POP
70059: POP
// end ;
70060: LD_VAR 0 5
70064: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70065: LD_INT 0
70067: PPUSH
70068: PPUSH
// if not driver or not IsInUnit ( driver ) then
70069: LD_VAR 0 1
70073: NOT
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: CALL_OW 310
70084: NOT
70085: OR
70086: IFFALSE 70090
// exit ;
70088: GO 70180
// vehicle := IsInUnit ( driver ) ;
70090: LD_ADDR_VAR 0 3
70094: PUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL_OW 310
70104: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70105: LD_VAR 0 1
70109: PPUSH
70110: LD_STRING \
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: PUSH
70140: LD_STRING E
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: LD_VAR 0 3
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PPUSH
70176: CALL_OW 446
// end ;
70180: LD_VAR 0 2
70184: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70185: LD_INT 0
70187: PPUSH
70188: PPUSH
// if not driver or not IsInUnit ( driver ) then
70189: LD_VAR 0 1
70193: NOT
70194: PUSH
70195: LD_VAR 0 1
70199: PPUSH
70200: CALL_OW 310
70204: NOT
70205: OR
70206: IFFALSE 70210
// exit ;
70208: GO 70300
// vehicle := IsInUnit ( driver ) ;
70210: LD_ADDR_VAR 0 3
70214: PUSH
70215: LD_VAR 0 1
70219: PPUSH
70220: CALL_OW 310
70224: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70225: LD_VAR 0 1
70229: PPUSH
70230: LD_STRING \
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: PUSH
70260: LD_STRING E
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_VAR 0 3
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: LD_INT 0
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PPUSH
70296: CALL_OW 447
// end ;
70300: LD_VAR 0 2
70304: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70305: LD_INT 0
70307: PPUSH
70308: PPUSH
70309: PPUSH
// tmp := [ ] ;
70310: LD_ADDR_VAR 0 5
70314: PUSH
70315: EMPTY
70316: ST_TO_ADDR
// for i in units do
70317: LD_ADDR_VAR 0 4
70321: PUSH
70322: LD_VAR 0 1
70326: PUSH
70327: FOR_IN
70328: IFFALSE 70366
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70330: LD_ADDR_VAR 0 5
70334: PUSH
70335: LD_VAR 0 5
70339: PPUSH
70340: LD_VAR 0 5
70344: PUSH
70345: LD_INT 1
70347: PLUS
70348: PPUSH
70349: LD_VAR 0 4
70353: PPUSH
70354: CALL_OW 256
70358: PPUSH
70359: CALL_OW 2
70363: ST_TO_ADDR
70364: GO 70327
70366: POP
70367: POP
// if not tmp then
70368: LD_VAR 0 5
70372: NOT
70373: IFFALSE 70377
// exit ;
70375: GO 70425
// if asc then
70377: LD_VAR 0 2
70381: IFFALSE 70405
// result := SortListByListAsc ( units , tmp ) else
70383: LD_ADDR_VAR 0 3
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: LD_VAR 0 5
70397: PPUSH
70398: CALL_OW 76
70402: ST_TO_ADDR
70403: GO 70425
// result := SortListByListDesc ( units , tmp ) ;
70405: LD_ADDR_VAR 0 3
70409: PUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 5
70419: PPUSH
70420: CALL_OW 77
70424: ST_TO_ADDR
// end ;
70425: LD_VAR 0 3
70429: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70430: LD_INT 0
70432: PPUSH
70433: PPUSH
// task := GetTaskList ( mech ) ;
70434: LD_ADDR_VAR 0 4
70438: PUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: CALL_OW 437
70448: ST_TO_ADDR
// if not task then
70449: LD_VAR 0 4
70453: NOT
70454: IFFALSE 70458
// exit ;
70456: GO 70500
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70458: LD_ADDR_VAR 0 3
70462: PUSH
70463: LD_VAR 0 4
70467: PUSH
70468: LD_INT 1
70470: ARRAY
70471: PUSH
70472: LD_INT 1
70474: ARRAY
70475: PUSH
70476: LD_STRING r
70478: EQUAL
70479: PUSH
70480: LD_VAR 0 4
70484: PUSH
70485: LD_INT 1
70487: ARRAY
70488: PUSH
70489: LD_INT 4
70491: ARRAY
70492: PUSH
70493: LD_VAR 0 2
70497: EQUAL
70498: AND
70499: ST_TO_ADDR
// end ;
70500: LD_VAR 0 3
70504: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70505: LD_INT 0
70507: PPUSH
// SetDir ( unit , d ) ;
70508: LD_VAR 0 1
70512: PPUSH
70513: LD_VAR 0 4
70517: PPUSH
70518: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70522: LD_VAR 0 1
70526: PPUSH
70527: LD_VAR 0 2
70531: PPUSH
70532: LD_VAR 0 3
70536: PPUSH
70537: LD_VAR 0 5
70541: PPUSH
70542: CALL_OW 48
// end ;
70546: LD_VAR 0 6
70550: RET
// export function ToNaturalNumber ( number ) ; begin
70551: LD_INT 0
70553: PPUSH
// result := number div 1 ;
70554: LD_ADDR_VAR 0 2
70558: PUSH
70559: LD_VAR 0 1
70563: PUSH
70564: LD_INT 1
70566: DIV
70567: ST_TO_ADDR
// if number < 0 then
70568: LD_VAR 0 1
70572: PUSH
70573: LD_INT 0
70575: LESS
70576: IFFALSE 70586
// result := 0 ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_INT 0
70585: ST_TO_ADDR
// end ;
70586: LD_VAR 0 2
70590: RET
// export function SortByClass ( units , class ) ; var un ; begin
70591: LD_INT 0
70593: PPUSH
70594: PPUSH
// if not units or not class then
70595: LD_VAR 0 1
70599: NOT
70600: PUSH
70601: LD_VAR 0 2
70605: NOT
70606: OR
70607: IFFALSE 70611
// exit ;
70609: GO 70706
// result := [ ] ;
70611: LD_ADDR_VAR 0 3
70615: PUSH
70616: EMPTY
70617: ST_TO_ADDR
// for un in units do
70618: LD_ADDR_VAR 0 4
70622: PUSH
70623: LD_VAR 0 1
70627: PUSH
70628: FOR_IN
70629: IFFALSE 70704
// if GetClass ( un ) = class then
70631: LD_VAR 0 4
70635: PPUSH
70636: CALL_OW 257
70640: PUSH
70641: LD_VAR 0 2
70645: EQUAL
70646: IFFALSE 70673
// result := Insert ( result , 1 , un ) else
70648: LD_ADDR_VAR 0 3
70652: PUSH
70653: LD_VAR 0 3
70657: PPUSH
70658: LD_INT 1
70660: PPUSH
70661: LD_VAR 0 4
70665: PPUSH
70666: CALL_OW 2
70670: ST_TO_ADDR
70671: GO 70702
// result := Replace ( result , result + 1 , un ) ;
70673: LD_ADDR_VAR 0 3
70677: PUSH
70678: LD_VAR 0 3
70682: PPUSH
70683: LD_VAR 0 3
70687: PUSH
70688: LD_INT 1
70690: PLUS
70691: PPUSH
70692: LD_VAR 0 4
70696: PPUSH
70697: CALL_OW 1
70701: ST_TO_ADDR
70702: GO 70628
70704: POP
70705: POP
// end ;
70706: LD_VAR 0 3
70710: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70711: LD_INT 0
70713: PPUSH
70714: PPUSH
70715: PPUSH
70716: PPUSH
70717: PPUSH
70718: PPUSH
70719: PPUSH
// result := [ ] ;
70720: LD_ADDR_VAR 0 4
70724: PUSH
70725: EMPTY
70726: ST_TO_ADDR
// if x - r < 0 then
70727: LD_VAR 0 1
70731: PUSH
70732: LD_VAR 0 3
70736: MINUS
70737: PUSH
70738: LD_INT 0
70740: LESS
70741: IFFALSE 70753
// min_x := 0 else
70743: LD_ADDR_VAR 0 8
70747: PUSH
70748: LD_INT 0
70750: ST_TO_ADDR
70751: GO 70769
// min_x := x - r ;
70753: LD_ADDR_VAR 0 8
70757: PUSH
70758: LD_VAR 0 1
70762: PUSH
70763: LD_VAR 0 3
70767: MINUS
70768: ST_TO_ADDR
// if y - r < 0 then
70769: LD_VAR 0 2
70773: PUSH
70774: LD_VAR 0 3
70778: MINUS
70779: PUSH
70780: LD_INT 0
70782: LESS
70783: IFFALSE 70795
// min_y := 0 else
70785: LD_ADDR_VAR 0 7
70789: PUSH
70790: LD_INT 0
70792: ST_TO_ADDR
70793: GO 70811
// min_y := y - r ;
70795: LD_ADDR_VAR 0 7
70799: PUSH
70800: LD_VAR 0 2
70804: PUSH
70805: LD_VAR 0 3
70809: MINUS
70810: ST_TO_ADDR
// max_x := x + r ;
70811: LD_ADDR_VAR 0 9
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: LD_VAR 0 3
70825: PLUS
70826: ST_TO_ADDR
// max_y := y + r ;
70827: LD_ADDR_VAR 0 10
70831: PUSH
70832: LD_VAR 0 2
70836: PUSH
70837: LD_VAR 0 3
70841: PLUS
70842: ST_TO_ADDR
// for _x = min_x to max_x do
70843: LD_ADDR_VAR 0 5
70847: PUSH
70848: DOUBLE
70849: LD_VAR 0 8
70853: DEC
70854: ST_TO_ADDR
70855: LD_VAR 0 9
70859: PUSH
70860: FOR_TO
70861: IFFALSE 70962
// for _y = min_y to max_y do
70863: LD_ADDR_VAR 0 6
70867: PUSH
70868: DOUBLE
70869: LD_VAR 0 7
70873: DEC
70874: ST_TO_ADDR
70875: LD_VAR 0 10
70879: PUSH
70880: FOR_TO
70881: IFFALSE 70958
// begin if not ValidHex ( _x , _y ) then
70883: LD_VAR 0 5
70887: PPUSH
70888: LD_VAR 0 6
70892: PPUSH
70893: CALL_OW 488
70897: NOT
70898: IFFALSE 70902
// continue ;
70900: GO 70880
// if GetResourceTypeXY ( _x , _y ) then
70902: LD_VAR 0 5
70906: PPUSH
70907: LD_VAR 0 6
70911: PPUSH
70912: CALL_OW 283
70916: IFFALSE 70956
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70918: LD_ADDR_VAR 0 4
70922: PUSH
70923: LD_VAR 0 4
70927: PPUSH
70928: LD_VAR 0 4
70932: PUSH
70933: LD_INT 1
70935: PLUS
70936: PPUSH
70937: LD_VAR 0 5
70941: PUSH
70942: LD_VAR 0 6
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PPUSH
70951: CALL_OW 1
70955: ST_TO_ADDR
// end ;
70956: GO 70880
70958: POP
70959: POP
70960: GO 70860
70962: POP
70963: POP
// end ;
70964: LD_VAR 0 4
70968: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70969: LD_INT 0
70971: PPUSH
70972: PPUSH
70973: PPUSH
70974: PPUSH
70975: PPUSH
70976: PPUSH
70977: PPUSH
70978: PPUSH
// if not units then
70979: LD_VAR 0 1
70983: NOT
70984: IFFALSE 70988
// exit ;
70986: GO 71512
// result := UnitFilter ( units , [ f_ok ] ) ;
70988: LD_ADDR_VAR 0 3
70992: PUSH
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_INT 50
71000: PUSH
71001: EMPTY
71002: LIST
71003: PPUSH
71004: CALL_OW 72
71008: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71009: LD_ADDR_VAR 0 8
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: LD_INT 1
71021: ARRAY
71022: PPUSH
71023: CALL_OW 255
71027: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71028: LD_ADDR_VAR 0 10
71032: PUSH
71033: LD_INT 29
71035: PUSH
71036: LD_INT 91
71038: PUSH
71039: LD_INT 49
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: LIST
71046: ST_TO_ADDR
// if not result then
71047: LD_VAR 0 3
71051: NOT
71052: IFFALSE 71056
// exit ;
71054: GO 71512
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71056: LD_ADDR_VAR 0 5
71060: PUSH
71061: LD_INT 81
71063: PUSH
71064: LD_VAR 0 8
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PPUSH
71073: CALL_OW 69
71077: ST_TO_ADDR
// for i in result do
71078: LD_ADDR_VAR 0 4
71082: PUSH
71083: LD_VAR 0 3
71087: PUSH
71088: FOR_IN
71089: IFFALSE 71510
// begin tag := GetTag ( i ) + 1 ;
71091: LD_ADDR_VAR 0 9
71095: PUSH
71096: LD_VAR 0 4
71100: PPUSH
71101: CALL_OW 110
71105: PUSH
71106: LD_INT 1
71108: PLUS
71109: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71110: LD_ADDR_VAR 0 7
71114: PUSH
71115: LD_VAR 0 4
71119: PPUSH
71120: CALL_OW 250
71124: PPUSH
71125: LD_VAR 0 4
71129: PPUSH
71130: CALL_OW 251
71134: PPUSH
71135: LD_INT 6
71137: PPUSH
71138: CALL 70711 0 3
71142: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71143: LD_VAR 0 4
71147: PPUSH
71148: CALL_OW 247
71152: PUSH
71153: LD_INT 2
71155: EQUAL
71156: PUSH
71157: LD_VAR 0 7
71161: AND
71162: PUSH
71163: LD_VAR 0 4
71167: PPUSH
71168: CALL_OW 264
71172: PUSH
71173: LD_VAR 0 10
71177: IN
71178: NOT
71179: AND
71180: IFFALSE 71219
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71182: LD_VAR 0 4
71186: PPUSH
71187: LD_VAR 0 7
71191: PUSH
71192: LD_INT 1
71194: ARRAY
71195: PUSH
71196: LD_INT 1
71198: ARRAY
71199: PPUSH
71200: LD_VAR 0 7
71204: PUSH
71205: LD_INT 1
71207: ARRAY
71208: PUSH
71209: LD_INT 2
71211: ARRAY
71212: PPUSH
71213: CALL_OW 116
71217: GO 71508
// if path > tag then
71219: LD_VAR 0 2
71223: PUSH
71224: LD_VAR 0 9
71228: GREATER
71229: IFFALSE 71437
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71231: LD_ADDR_VAR 0 6
71235: PUSH
71236: LD_VAR 0 5
71240: PPUSH
71241: LD_INT 91
71243: PUSH
71244: LD_VAR 0 4
71248: PUSH
71249: LD_INT 8
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: PPUSH
71257: CALL_OW 72
71261: ST_TO_ADDR
// if nearEnemy then
71262: LD_VAR 0 6
71266: IFFALSE 71335
// begin if GetWeapon ( i ) = ru_time_lapser then
71268: LD_VAR 0 4
71272: PPUSH
71273: CALL_OW 264
71277: PUSH
71278: LD_INT 49
71280: EQUAL
71281: IFFALSE 71309
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71283: LD_VAR 0 4
71287: PPUSH
71288: LD_VAR 0 6
71292: PPUSH
71293: LD_VAR 0 4
71297: PPUSH
71298: CALL_OW 74
71302: PPUSH
71303: CALL_OW 112
71307: GO 71333
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 6
71318: PPUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: CALL_OW 74
71328: PPUSH
71329: CALL 72437 0 2
// end else
71333: GO 71435
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71335: LD_VAR 0 4
71339: PPUSH
71340: LD_VAR 0 2
71344: PUSH
71345: LD_VAR 0 9
71349: ARRAY
71350: PUSH
71351: LD_INT 1
71353: ARRAY
71354: PPUSH
71355: LD_VAR 0 2
71359: PUSH
71360: LD_VAR 0 9
71364: ARRAY
71365: PUSH
71366: LD_INT 2
71368: ARRAY
71369: PPUSH
71370: CALL_OW 297
71374: PUSH
71375: LD_INT 6
71377: GREATER
71378: IFFALSE 71421
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71380: LD_VAR 0 4
71384: PPUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_VAR 0 9
71394: ARRAY
71395: PUSH
71396: LD_INT 1
71398: ARRAY
71399: PPUSH
71400: LD_VAR 0 2
71404: PUSH
71405: LD_VAR 0 9
71409: ARRAY
71410: PUSH
71411: LD_INT 2
71413: ARRAY
71414: PPUSH
71415: CALL_OW 114
71419: GO 71435
// SetTag ( i , tag ) ;
71421: LD_VAR 0 4
71425: PPUSH
71426: LD_VAR 0 9
71430: PPUSH
71431: CALL_OW 109
// end else
71435: GO 71508
// if enemy then
71437: LD_VAR 0 5
71441: IFFALSE 71508
// begin if GetWeapon ( i ) = ru_time_lapser then
71443: LD_VAR 0 4
71447: PPUSH
71448: CALL_OW 264
71452: PUSH
71453: LD_INT 49
71455: EQUAL
71456: IFFALSE 71484
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71458: LD_VAR 0 4
71462: PPUSH
71463: LD_VAR 0 5
71467: PPUSH
71468: LD_VAR 0 4
71472: PPUSH
71473: CALL_OW 74
71477: PPUSH
71478: CALL_OW 112
71482: GO 71508
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71484: LD_VAR 0 4
71488: PPUSH
71489: LD_VAR 0 5
71493: PPUSH
71494: LD_VAR 0 4
71498: PPUSH
71499: CALL_OW 74
71503: PPUSH
71504: CALL 72437 0 2
// end ; end ;
71508: GO 71088
71510: POP
71511: POP
// end ;
71512: LD_VAR 0 3
71516: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
71521: PPUSH
// if not unit or IsInUnit ( unit ) then
71522: LD_VAR 0 1
71526: NOT
71527: PUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 310
71537: OR
71538: IFFALSE 71542
// exit ;
71540: GO 71633
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71542: LD_ADDR_VAR 0 4
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: CALL_OW 250
71556: PPUSH
71557: LD_VAR 0 2
71561: PPUSH
71562: LD_INT 1
71564: PPUSH
71565: CALL_OW 272
71569: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71570: LD_ADDR_VAR 0 5
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: CALL_OW 251
71584: PPUSH
71585: LD_VAR 0 2
71589: PPUSH
71590: LD_INT 1
71592: PPUSH
71593: CALL_OW 273
71597: ST_TO_ADDR
// if ValidHex ( x , y ) then
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 5
71607: PPUSH
71608: CALL_OW 488
71612: IFFALSE 71633
// ComTurnXY ( unit , x , y ) ;
71614: LD_VAR 0 1
71618: PPUSH
71619: LD_VAR 0 4
71623: PPUSH
71624: LD_VAR 0 5
71628: PPUSH
71629: CALL_OW 118
// end ;
71633: LD_VAR 0 3
71637: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
// result := false ;
71642: LD_ADDR_VAR 0 3
71646: PUSH
71647: LD_INT 0
71649: ST_TO_ADDR
// if not units then
71650: LD_VAR 0 2
71654: NOT
71655: IFFALSE 71659
// exit ;
71657: GO 71704
// for i in units do
71659: LD_ADDR_VAR 0 4
71663: PUSH
71664: LD_VAR 0 2
71668: PUSH
71669: FOR_IN
71670: IFFALSE 71702
// if See ( side , i ) then
71672: LD_VAR 0 1
71676: PPUSH
71677: LD_VAR 0 4
71681: PPUSH
71682: CALL_OW 292
71686: IFFALSE 71700
// begin result := true ;
71688: LD_ADDR_VAR 0 3
71692: PUSH
71693: LD_INT 1
71695: ST_TO_ADDR
// exit ;
71696: POP
71697: POP
71698: GO 71704
// end ;
71700: GO 71669
71702: POP
71703: POP
// end ;
71704: LD_VAR 0 3
71708: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
71713: PPUSH
71714: PPUSH
// if not unit or not points then
71715: LD_VAR 0 1
71719: NOT
71720: PUSH
71721: LD_VAR 0 2
71725: NOT
71726: OR
71727: IFFALSE 71731
// exit ;
71729: GO 71821
// dist := 99999 ;
71731: LD_ADDR_VAR 0 5
71735: PUSH
71736: LD_INT 99999
71738: ST_TO_ADDR
// for i in points do
71739: LD_ADDR_VAR 0 4
71743: PUSH
71744: LD_VAR 0 2
71748: PUSH
71749: FOR_IN
71750: IFFALSE 71819
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71752: LD_ADDR_VAR 0 6
71756: PUSH
71757: LD_VAR 0 1
71761: PPUSH
71762: LD_VAR 0 4
71766: PUSH
71767: LD_INT 1
71769: ARRAY
71770: PPUSH
71771: LD_VAR 0 4
71775: PUSH
71776: LD_INT 2
71778: ARRAY
71779: PPUSH
71780: CALL_OW 297
71784: ST_TO_ADDR
// if tmpDist < dist then
71785: LD_VAR 0 6
71789: PUSH
71790: LD_VAR 0 5
71794: LESS
71795: IFFALSE 71817
// begin result := i ;
71797: LD_ADDR_VAR 0 3
71801: PUSH
71802: LD_VAR 0 4
71806: ST_TO_ADDR
// dist := tmpDist ;
71807: LD_ADDR_VAR 0 5
71811: PUSH
71812: LD_VAR 0 6
71816: ST_TO_ADDR
// end ; end ;
71817: GO 71749
71819: POP
71820: POP
// end ;
71821: LD_VAR 0 3
71825: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71826: LD_INT 0
71828: PPUSH
// uc_side := side ;
71829: LD_ADDR_OWVAR 20
71833: PUSH
71834: LD_VAR 0 1
71838: ST_TO_ADDR
// uc_nation := 3 ;
71839: LD_ADDR_OWVAR 21
71843: PUSH
71844: LD_INT 3
71846: ST_TO_ADDR
// vc_chassis := 25 ;
71847: LD_ADDR_OWVAR 37
71851: PUSH
71852: LD_INT 25
71854: ST_TO_ADDR
// vc_engine := engine_siberite ;
71855: LD_ADDR_OWVAR 39
71859: PUSH
71860: LD_INT 3
71862: ST_TO_ADDR
// vc_control := control_computer ;
71863: LD_ADDR_OWVAR 38
71867: PUSH
71868: LD_INT 3
71870: ST_TO_ADDR
// vc_weapon := 59 ;
71871: LD_ADDR_OWVAR 40
71875: PUSH
71876: LD_INT 59
71878: ST_TO_ADDR
// result := CreateVehicle ;
71879: LD_ADDR_VAR 0 5
71883: PUSH
71884: CALL_OW 45
71888: ST_TO_ADDR
// SetDir ( result , d ) ;
71889: LD_VAR 0 5
71893: PPUSH
71894: LD_VAR 0 4
71898: PPUSH
71899: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71903: LD_VAR 0 5
71907: PPUSH
71908: LD_VAR 0 2
71912: PPUSH
71913: LD_VAR 0 3
71917: PPUSH
71918: LD_INT 0
71920: PPUSH
71921: CALL_OW 48
// end ;
71925: LD_VAR 0 5
71929: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71930: LD_INT 0
71932: PPUSH
71933: PPUSH
71934: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71935: LD_ADDR_VAR 0 2
71939: PUSH
71940: LD_INT 0
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: LD_INT 0
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71958: LD_VAR 0 1
71962: NOT
71963: PUSH
71964: LD_VAR 0 1
71968: PPUSH
71969: CALL_OW 264
71973: PUSH
71974: LD_INT 12
71976: PUSH
71977: LD_INT 51
71979: PUSH
71980: LD_INT 32
71982: PUSH
71983: LD_INT 89
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: IN
71992: NOT
71993: OR
71994: IFFALSE 71998
// exit ;
71996: GO 72096
// for i := 1 to 3 do
71998: LD_ADDR_VAR 0 3
72002: PUSH
72003: DOUBLE
72004: LD_INT 1
72006: DEC
72007: ST_TO_ADDR
72008: LD_INT 3
72010: PUSH
72011: FOR_TO
72012: IFFALSE 72094
// begin tmp := GetCargo ( cargo , i ) ;
72014: LD_ADDR_VAR 0 4
72018: PUSH
72019: LD_VAR 0 1
72023: PPUSH
72024: LD_VAR 0 3
72028: PPUSH
72029: CALL_OW 289
72033: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72034: LD_ADDR_VAR 0 2
72038: PUSH
72039: LD_VAR 0 2
72043: PPUSH
72044: LD_VAR 0 3
72048: PPUSH
72049: LD_VAR 0 4
72053: PPUSH
72054: CALL_OW 1
72058: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72059: LD_ADDR_VAR 0 2
72063: PUSH
72064: LD_VAR 0 2
72068: PPUSH
72069: LD_INT 4
72071: PPUSH
72072: LD_VAR 0 2
72076: PUSH
72077: LD_INT 4
72079: ARRAY
72080: PUSH
72081: LD_VAR 0 4
72085: PLUS
72086: PPUSH
72087: CALL_OW 1
72091: ST_TO_ADDR
// end ;
72092: GO 72011
72094: POP
72095: POP
// end ;
72096: LD_VAR 0 2
72100: RET
// export function Length ( array ) ; begin
72101: LD_INT 0
72103: PPUSH
// result := array + 0 ;
72104: LD_ADDR_VAR 0 2
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 0
72116: PLUS
72117: ST_TO_ADDR
// end ;
72118: LD_VAR 0 2
72122: RET
// export function PrepareArray ( array ) ; begin
72123: LD_INT 0
72125: PPUSH
// result := array diff 0 ;
72126: LD_ADDR_VAR 0 2
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_INT 0
72138: DIFF
72139: ST_TO_ADDR
// if not result [ 1 ] then
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 1
72147: ARRAY
72148: NOT
72149: IFFALSE 72169
// result := Delete ( result , 1 ) ;
72151: LD_ADDR_VAR 0 2
72155: PUSH
72156: LD_VAR 0 2
72160: PPUSH
72161: LD_INT 1
72163: PPUSH
72164: CALL_OW 3
72168: ST_TO_ADDR
// end ;
72169: LD_VAR 0 2
72173: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72174: LD_INT 0
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
// sibRocketRange := 25 ;
72180: LD_ADDR_VAR 0 6
72184: PUSH
72185: LD_INT 25
72187: ST_TO_ADDR
// result := false ;
72188: LD_ADDR_VAR 0 4
72192: PUSH
72193: LD_INT 0
72195: ST_TO_ADDR
// for i := 0 to 5 do
72196: LD_ADDR_VAR 0 5
72200: PUSH
72201: DOUBLE
72202: LD_INT 0
72204: DEC
72205: ST_TO_ADDR
72206: LD_INT 5
72208: PUSH
72209: FOR_TO
72210: IFFALSE 72277
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_VAR 0 5
72221: PPUSH
72222: LD_VAR 0 6
72226: PPUSH
72227: CALL_OW 272
72231: PPUSH
72232: LD_VAR 0 2
72236: PPUSH
72237: LD_VAR 0 5
72241: PPUSH
72242: LD_VAR 0 6
72246: PPUSH
72247: CALL_OW 273
72251: PPUSH
72252: LD_VAR 0 3
72256: PPUSH
72257: CALL_OW 309
72261: IFFALSE 72275
// begin result := true ;
72263: LD_ADDR_VAR 0 4
72267: PUSH
72268: LD_INT 1
72270: ST_TO_ADDR
// exit ;
72271: POP
72272: POP
72273: GO 72279
// end ;
72275: GO 72209
72277: POP
72278: POP
// end ;
72279: LD_VAR 0 4
72283: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72284: LD_INT 0
72286: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72287: LD_VAR 0 1
72291: PPUSH
72292: LD_VAR 0 2
72296: PPUSH
72297: LD_INT 0
72299: PPUSH
72300: LD_INT 0
72302: PPUSH
72303: LD_INT 1
72305: PPUSH
72306: LD_INT 0
72308: PPUSH
72309: CALL_OW 587
// end ;
72313: LD_VAR 0 3
72317: RET
// export function CenterOnNow ( unit ) ; begin
72318: LD_INT 0
72320: PPUSH
// result := IsInUnit ( unit ) ;
72321: LD_ADDR_VAR 0 2
72325: PUSH
72326: LD_VAR 0 1
72330: PPUSH
72331: CALL_OW 310
72335: ST_TO_ADDR
// if not result then
72336: LD_VAR 0 2
72340: NOT
72341: IFFALSE 72353
// result := unit ;
72343: LD_ADDR_VAR 0 2
72347: PUSH
72348: LD_VAR 0 1
72352: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72353: LD_VAR 0 1
72357: PPUSH
72358: CALL_OW 87
// end ;
72362: LD_VAR 0 2
72366: RET
// export function ComMoveHex ( unit , hex ) ; begin
72367: LD_INT 0
72369: PPUSH
// if not hex then
72370: LD_VAR 0 2
72374: NOT
72375: IFFALSE 72379
// exit ;
72377: GO 72432
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 1
72386: ARRAY
72387: PPUSH
72388: LD_VAR 0 2
72392: PUSH
72393: LD_INT 2
72395: ARRAY
72396: PPUSH
72397: CALL_OW 428
72401: IFFALSE 72405
// exit ;
72403: GO 72432
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72405: LD_VAR 0 1
72409: PPUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_INT 1
72417: ARRAY
72418: PPUSH
72419: LD_VAR 0 2
72423: PUSH
72424: LD_INT 2
72426: ARRAY
72427: PPUSH
72428: CALL_OW 111
// end ;
72432: LD_VAR 0 3
72436: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72437: LD_INT 0
72439: PPUSH
72440: PPUSH
72441: PPUSH
// if not unit or not enemy then
72442: LD_VAR 0 1
72446: NOT
72447: PUSH
72448: LD_VAR 0 2
72452: NOT
72453: OR
72454: IFFALSE 72458
// exit ;
72456: GO 72582
// x := GetX ( enemy ) ;
72458: LD_ADDR_VAR 0 4
72462: PUSH
72463: LD_VAR 0 2
72467: PPUSH
72468: CALL_OW 250
72472: ST_TO_ADDR
// y := GetY ( enemy ) ;
72473: LD_ADDR_VAR 0 5
72477: PUSH
72478: LD_VAR 0 2
72482: PPUSH
72483: CALL_OW 251
72487: ST_TO_ADDR
// if ValidHex ( x , y ) then
72488: LD_VAR 0 4
72492: PPUSH
72493: LD_VAR 0 5
72497: PPUSH
72498: CALL_OW 488
72502: IFFALSE 72582
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72504: LD_VAR 0 2
72508: PPUSH
72509: CALL_OW 247
72513: PUSH
72514: LD_INT 3
72516: PUSH
72517: LD_INT 2
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: IN
72524: PUSH
72525: LD_VAR 0 1
72529: PPUSH
72530: CALL_OW 255
72534: PPUSH
72535: LD_VAR 0 2
72539: PPUSH
72540: CALL_OW 292
72544: AND
72545: IFFALSE 72563
// ComAttackUnit ( unit , enemy ) else
72547: LD_VAR 0 1
72551: PPUSH
72552: LD_VAR 0 2
72556: PPUSH
72557: CALL_OW 115
72561: GO 72582
// ComAgressiveMove ( unit , x , y ) ;
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_VAR 0 4
72572: PPUSH
72573: LD_VAR 0 5
72577: PPUSH
72578: CALL_OW 114
// end ; end_of_file
72582: LD_VAR 0 3
72586: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72587: LD_VAR 0 1
72591: PUSH
72592: LD_INT 200
72594: DOUBLE
72595: GREATEREQUAL
72596: IFFALSE 72604
72598: LD_INT 299
72600: DOUBLE
72601: LESSEQUAL
72602: IFTRUE 72606
72604: GO 72638
72606: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72607: LD_VAR 0 1
72611: PPUSH
72612: LD_VAR 0 2
72616: PPUSH
72617: LD_VAR 0 3
72621: PPUSH
72622: LD_VAR 0 4
72626: PPUSH
72627: LD_VAR 0 5
72631: PPUSH
72632: CALL 27131 0 5
72636: GO 72715
72638: LD_INT 300
72640: DOUBLE
72641: GREATEREQUAL
72642: IFFALSE 72650
72644: LD_INT 399
72646: DOUBLE
72647: LESSEQUAL
72648: IFTRUE 72652
72650: GO 72714
72652: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72653: LD_VAR 0 1
72657: PPUSH
72658: LD_VAR 0 2
72662: PPUSH
72663: LD_VAR 0 3
72667: PPUSH
72668: LD_VAR 0 4
72672: PPUSH
72673: LD_VAR 0 5
72677: PPUSH
72678: LD_VAR 0 6
72682: PPUSH
72683: LD_VAR 0 7
72687: PPUSH
72688: LD_VAR 0 8
72692: PPUSH
72693: LD_VAR 0 9
72697: PPUSH
72698: LD_VAR 0 10
72702: PPUSH
72703: LD_VAR 0 11
72707: PPUSH
72708: CALL 23456 0 11
72712: GO 72715
72714: POP
// end ;
72715: PPOPN 11
72717: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72718: LD_VAR 0 1
72722: PPUSH
72723: LD_VAR 0 2
72727: PPUSH
72728: LD_VAR 0 3
72732: PPUSH
72733: LD_VAR 0 4
72737: PPUSH
72738: LD_VAR 0 5
72742: PPUSH
72743: CALL 26867 0 5
// end ; end_of_file
72747: PPOPN 5
72749: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72750: LD_VAR 0 1
72754: PPUSH
72755: LD_VAR 0 2
72759: PPUSH
72760: LD_VAR 0 3
72764: PPUSH
72765: LD_VAR 0 4
72769: PPUSH
72770: LD_VAR 0 5
72774: PPUSH
72775: LD_VAR 0 6
72779: PPUSH
72780: CALL 11108 0 6
// end ;
72784: PPOPN 6
72786: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72787: LD_INT 0
72789: PPUSH
// begin if not units then
72790: LD_VAR 0 1
72794: NOT
72795: IFFALSE 72799
// exit ;
72797: GO 72799
// end ;
72799: PPOPN 7
72801: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72802: CALL 11012 0 0
// end ;
72806: PPOPN 1
72808: END
