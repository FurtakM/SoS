// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9175 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// game_started := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// points := 0 ;
2675: LD_ADDR_EXP 2
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// waveNumber := 0 ;
2683: LD_ADDR_EXP 5
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// timeToNextAttack := 0 ;
2691: LD_ADDR_EXP 4
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// graveyard := [ ] ;
2699: LD_ADDR_EXP 8
2703: PUSH
2704: EMPTY
2705: ST_TO_ADDR
// base_x := 1 ;
2706: LD_ADDR_EXP 9
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// base_y := 1 ;
2714: LD_ADDR_EXP 10
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if difficultyLevel > 2 then
2722: LD_EXP 3
2726: PUSH
2727: LD_INT 2
2729: GREATER
2730: IFFALSE 2745
// SetTech ( 5 , 7 , state_researched ) ;
2732: LD_INT 5
2734: PPUSH
2735: LD_INT 7
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: CALL_OW 322
// if not playerNation then
2745: LD_EXP 6
2749: NOT
2750: IFFALSE 2776
// begin points := 100 ;
2752: LD_ADDR_EXP 2
2756: PUSH
2757: LD_INT 100
2759: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2760: LD_ADDR_EXP 6
2764: PUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// end ; your_side := playerNation ;
2776: LD_ADDR_OWVAR 2
2780: PUSH
2781: LD_EXP 6
2785: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2786: LD_OWVAR 2
2790: PPUSH
2791: LD_INT 4
2793: PPUSH
2794: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2798: LD_INT 25
2800: PUSH
2801: LD_INT 20
2803: PUSH
2804: LD_INT 15
2806: PUSH
2807: LD_INT 10
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_EXP 3
2820: ARRAY
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 2
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 1
2877: PUSH
2878: LD_INT 2
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_INT 88
2891: PPUSH
2892: LD_INT 76
2894: PPUSH
2895: LD_INT 6
2897: PPUSH
2898: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2902: LD_EXP 6
2906: PPUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: LD_INT 5
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_EXP 3
2929: ARRAY
2930: PPUSH
2931: LD_INT 24
2933: PUSH
2934: LD_INT 16
2936: PUSH
2937: LD_INT 12
2939: PUSH
2940: LD_INT 8
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 88
2957: PPUSH
2958: LD_INT 76
2960: PPUSH
2961: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2965: LD_INT 88
2967: PPUSH
2968: LD_INT 76
2970: PPUSH
2971: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2975: LD_INT 90
2977: PPUSH
2978: LD_INT 79
2980: PPUSH
2981: LD_OWVAR 2
2985: PPUSH
2986: LD_INT 50
2988: NEG
2989: PPUSH
2990: CALL_OW 330
// if debug then
2994: LD_EXP 1
2998: IFFALSE 3009
// FogOff ( your_side ) ;
3000: LD_OWVAR 2
3004: PPUSH
3005: CALL_OW 344
// end ;
3009: LD_VAR 0 1
3013: RET
// every 0 0$01 trigger game_started do var i ;
3014: LD_EXP 7
3018: IFFALSE 3252
3020: GO 3022
3022: DISABLE
3023: LD_INT 0
3025: PPUSH
// begin while ( game_started ) do
3026: LD_EXP 7
3030: IFFALSE 3252
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3032: LD_INT 22
3034: PUSH
3035: LD_INT 7
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 5
3049: LESS
3050: PUSH
3051: LD_EXP 4
3055: PUSH
3056: LD_INT 0
3058: LESSEQUAL
3059: AND
3060: IFFALSE 3243
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3062: LD_INT 22
3064: PUSH
3065: LD_INT 4
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: IFFALSE 3114
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: FOR_IN
3099: IFFALSE 3112
// RemoveUnit ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 64
3110: GO 3098
3112: POP
3113: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3114: LD_EXP 5
3118: PUSH
3119: LD_INT 3
3121: MOD
3122: PUSH
3123: LD_INT 0
3125: EQUAL
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: LD_INT 10
3134: MOD
3135: PUSH
3136: LD_INT 0
3138: EQUAL
3139: OR
3140: PUSH
3141: LD_EXP 5
3145: PUSH
3146: LD_INT 0
3148: GREATER
3149: AND
3150: IFFALSE 3156
// InitBonus ;
3152: CALL 9272 0 0
// if waveNumber mod 10 = 0 then
3156: LD_EXP 5
3160: PUSH
3161: LD_INT 10
3163: MOD
3164: PUSH
3165: LD_INT 0
3167: EQUAL
3168: IFFALSE 3174
// SaveForQuickRestart ;
3170: CALL_OW 22
// if waveNumber = 100 then
3174: LD_EXP 5
3178: PUSH
3179: LD_INT 100
3181: EQUAL
3182: IFFALSE 3195
// begin FogOff ( your_side ) ;
3184: LD_OWVAR 2
3188: PPUSH
3189: CALL_OW 344
// break ;
3193: GO 3252
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3195: LD_ADDR_EXP 4
3199: PUSH
3200: LD_INT 3150
3202: PPUSH
3203: LD_INT 5250
3205: PPUSH
3206: CALL_OW 12
3210: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3211: LD_EXP 4
3215: PPUSH
3216: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3220: LD_ADDR_EXP 5
3224: PUSH
3225: LD_EXP 5
3229: PUSH
3230: LD_INT 1
3232: PLUS
3233: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3234: LD_EXP 5
3238: PPUSH
3239: CALL 4273 0 1
// end ; Wait ( 0 0$01 ) ;
3243: LD_INT 35
3245: PPUSH
3246: CALL_OW 67
// end ;
3250: GO 3026
// end ;
3252: PPOPN 1
3254: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3255: LD_EXP 4
3259: PUSH
3260: LD_INT 0
3262: GREATER
3263: IFFALSE 3283
3265: GO 3267
3267: DISABLE
// begin enable ;
3268: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3269: LD_ADDR_EXP 4
3273: PUSH
3274: LD_EXP 4
3278: PUSH
3279: LD_INT 35
3281: MINUS
3282: ST_TO_ADDR
// end ; end_of_file
3283: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3284: LD_VAR 0 1
3288: PUSH
3289: LD_EXP 13
3293: IN
3294: NOT
3295: IFFALSE 3326
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3297: LD_ADDR_EXP 13
3301: PUSH
3302: LD_EXP 13
3306: PPUSH
3307: LD_EXP 13
3311: PUSH
3312: LD_INT 1
3314: PLUS
3315: PPUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 2
3325: ST_TO_ADDR
// end ;
3326: PPOPN 1
3328: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 26772 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_OWVAR 2
3352: EQUAL
3353: PUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 247
3363: PUSH
3364: LD_INT 1
3366: EQUAL
3367: AND
3368: IFFALSE 3399
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3370: LD_ADDR_EXP 8
3374: PUSH
3375: LD_EXP 8
3379: PPUSH
3380: LD_EXP 8
3384: PUSH
3385: LD_INT 1
3387: PLUS
3388: PPUSH
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL_OW 2
3398: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3399: LD_VAR 0 1
3403: PPUSH
3404: CALL_OW 255
3408: PUSH
3409: LD_INT 7
3411: EQUAL
3412: IFFALSE 3786
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3414: LD_VAR 0 1
3418: PUSH
3419: LD_INT 34
3421: PUSH
3422: LD_INT 91
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PPUSH
3429: CALL_OW 69
3433: IN
3434: IFFALSE 3479
// begin if Rand ( 1 , 100 ) <= 70 then
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 100
3441: PPUSH
3442: CALL_OW 12
3446: PUSH
3447: LD_INT 70
3449: LESSEQUAL
3450: IFFALSE 3479
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: CALL_OW 250
3461: PPUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 251
3471: PPUSH
3472: LD_INT 10
3474: PPUSH
3475: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 247
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3631
3497: POP
// begin case GetClass ( un ) of class_apeman :
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 12
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3526
3516: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3517: LD_INT 2
3519: PPUSH
3520: CALL 471 0 1
3524: GO 3629
3526: LD_INT 15
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3544
3534: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3535: LD_INT 5
3537: PPUSH
3538: CALL 471 0 1
3542: GO 3629
3544: LD_INT 17
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3562
3552: POP
// AddPoints ( 30 ) ; class_soldier :
3553: LD_INT 30
3555: PPUSH
3556: CALL 471 0 1
3560: GO 3629
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3580
3570: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3571: LD_INT 50
3573: PPUSH
3574: CALL 471 0 1
3578: GO 3629
3580: LD_INT 9
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3600
3586: LD_INT 5
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3600
3592: LD_INT 8
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3610
3600: POP
// AddPoints ( 75 ) ; class_mechanic :
3601: LD_INT 75
3603: PPUSH
3604: CALL 471 0 1
3608: GO 3629
3610: LD_INT 3
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3628
3618: POP
// AddPoints ( 60 ) ; end ;
3619: LD_INT 60
3621: PPUSH
3622: CALL 471 0 1
3626: GO 3629
3628: POP
// end ; unit_vehicle :
3629: GO 3786
3631: LD_INT 2
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3785
3639: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 265
3649: PUSH
3650: LD_INT 12
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3670
3656: LD_INT 1
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3670
3662: LD_INT 11
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3680
3670: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3671: LD_INT 100
3673: PPUSH
3674: CALL 471 0 1
3678: GO 3783
3680: LD_INT 13
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3718
3686: LD_INT 14
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3718
3692: LD_INT 2
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3718
3698: LD_INT 3
3700: DOUBLE
3701: EQUAL
3702: IFTRUE 3718
3704: LD_INT 21
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3718
3710: LD_INT 22
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3728
3718: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3719: LD_INT 250
3721: PPUSH
3722: CALL 471 0 1
3726: GO 3783
3728: LD_INT 4
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3754
3734: LD_INT 5
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3754
3740: LD_INT 23
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3754
3746: LD_INT 24
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3764
3754: POP
// AddPoints ( 500 ) ; 25 :
3755: LD_INT 500
3757: PPUSH
3758: CALL 471 0 1
3762: GO 3783
3764: LD_INT 25
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3782
3772: POP
// AddPoints ( 1250 ) ; end ;
3773: LD_INT 1250
3775: PPUSH
3776: CALL 471 0 1
3780: GO 3783
3782: POP
// end ; end ;
3783: GO 3786
3785: POP
// end ; end ;
3786: PPOPN 1
3788: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 266
3798: PUSH
3799: LD_INT 0
3801: EQUAL
3802: IFFALSE 3852
// begin base_x := GetX ( b ) ;
3804: LD_ADDR_EXP 9
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 250
3818: ST_TO_ADDR
// base_y := GetY ( b ) ;
3819: LD_ADDR_EXP 10
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 251
3833: ST_TO_ADDR
// base := b ;
3834: LD_ADDR_EXP 11
3838: PUSH
3839: LD_VAR 0 1
3843: ST_TO_ADDR
// game_started := true ;
3844: LD_ADDR_EXP 7
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// end ; end ;
3852: PPOPN 1
3854: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3855: LD_VAR 0 1
3859: PPUSH
3860: CALL_OW 255
3864: PUSH
3865: LD_OWVAR 2
3869: EQUAL
3870: IFFALSE 3874
// exit ;
3872: GO 4021
// if GetType ( un ) = unit_vehicle then
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: IFFALSE 3940
// begin KillUnit ( un ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 264
3921: PUSH
3922: LD_INT 49
3924: PUSH
3925: EMPTY
3926: LIST
3927: IN
3928: OR
3929: IFFALSE 3940
// ExplodeVehicle ( un ) ;
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3940: LD_VAR 0 1
3944: PPUSH
3945: CALL_OW 247
3949: PUSH
3950: LD_INT 1
3952: EQUAL
3953: IFFALSE 4021
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 248
3964: PUSH
3965: LD_INT 2
3967: EQUAL
3968: PUSH
3969: LD_INT 5
3971: PPUSH
3972: LD_INT 7
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: NONEQUAL
3983: AND
3984: PUSH
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 248
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: IN
4009: OR
4010: IFFALSE 4021
// KillUnit ( un ) ;
4012: LD_VAR 0 1
4016: PPUSH
4017: CALL_OW 66
// end ; end ;
4021: PPOPN 1
4023: END
// every 0 0$1 do
4024: GO 4026
4026: DISABLE
// begin enable ;
4027: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4028: LD_INT 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 22
4036: PUSH
4037: LD_OWVAR 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 513
// end ;
4050: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4051: LD_EXP 7
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_OWVAR 2
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: AND
4091: IFFALSE 4103
4093: GO 4095
4095: DISABLE
// YouLost ( die ) ;
4096: LD_STRING die
4098: PPUSH
4099: CALL_OW 104
4103: END
// every 0 0$21 trigger tick <= 15 15$00 do
4104: LD_OWVAR 1
4108: PUSH
4109: LD_INT 31500
4111: LESSEQUAL
4112: IFFALSE 4139
4114: GO 4116
4116: DISABLE
// begin enable ;
4117: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4118: LD_INT 1
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: CALL_OW 55
// end ;
4139: END
// every 0 0$51 trigger tick > 15 15$00 do
4140: LD_OWVAR 1
4144: PUSH
4145: LD_INT 31500
4147: GREATER
4148: IFFALSE 4195
4150: GO 4152
4152: DISABLE
// begin enable ;
4153: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4154: LD_INT 22
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 0
4171: EQUAL
4172: IFFALSE 4195
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: CALL_OW 12
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 55
// end ;
4195: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 308
4208: IFFALSE 4219
// KillUnit ( building ) ;
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 66
// end ;
4219: PPOPN 2
4221: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_VAR 0 2
4231: PPUSH
4232: LD_VAR 0 3
4236: PPUSH
4237: CALL 26868 0 3
// end ;
4241: PPOPN 3
4243: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 2
4253: PPUSH
4254: CALL 26892 0 2
// end ;
4258: PPOPN 2
4260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4261: LD_VAR 0 1
4265: PPUSH
4266: CALL 26876 0 1
// end ; end_of_file
4270: PPOPN 1
4272: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
4281: PPUSH
4282: PPUSH
4283: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4284: LD_ADDR_VAR 0 7
4288: PUSH
4289: LD_INT 1
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// uc_side := 7 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 7
4306: ST_TO_ADDR
// l := 0 ;
4307: LD_ADDR_VAR 0 9
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// case num of 1 :
4315: LD_VAR 0 1
4319: PUSH
4320: LD_INT 1
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4347
4328: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 12
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: CALL 6676 0 2
4344: ST_TO_ADDR
4345: GO 6485
4347: LD_INT 2
4349: DOUBLE
4350: EQUAL
4351: IFTRUE 4355
4353: GO 4374
4355: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL 6747 0 2
4371: ST_TO_ADDR
4372: GO 6485
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4401
4382: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 12
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: CALL 6818 0 2
4398: ST_TO_ADDR
4399: GO 6485
4401: LD_INT 4
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4428
4409: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: LD_INT 7
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL 6897 0 2
4425: ST_TO_ADDR
4426: GO 6485
4428: LD_INT 5
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4455
4436: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 7
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL 7293 0 2
4452: ST_TO_ADDR
4453: GO 6485
4455: LD_INT 6
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4482
4463: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 6
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL 7713 0 2
4479: ST_TO_ADDR
4480: GO 6485
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4509
4490: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 15
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL 8133 0 2
4506: ST_TO_ADDR
4507: GO 6485
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4536
4517: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 7
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL 8234 0 2
4533: ST_TO_ADDR
4534: GO 6485
4536: LD_INT 9
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4575
4544: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL 8234 0 2
4560: PUSH
4561: LD_INT 7
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL 7293 0 2
4571: ADD
4572: ST_TO_ADDR
4573: GO 6485
4575: LD_INT 10
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4614
4583: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 9
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: CALL 8133 0 2
4599: PUSH
4600: LD_INT 14
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL 6818 0 2
4610: ADD
4611: ST_TO_ADDR
4612: GO 6485
4614: LD_INT 11
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4670
4620: LD_INT 21
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4670
4626: LD_INT 31
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4670
4632: LD_INT 41
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4670
4638: LD_INT 51
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4670
4644: LD_INT 61
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4670
4650: LD_INT 71
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4670
4656: LD_INT 81
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4670
4662: LD_INT 91
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4779
4670: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4671: LD_ADDR_VAR 0 2
4675: PUSH
4676: LD_INT 20
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 40
4684: PUSH
4685: LD_INT 45
4687: PUSH
4688: LD_INT 50
4690: PUSH
4691: LD_INT 60
4693: PUSH
4694: LD_INT 70
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 100
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: ARRAY
4723: PPUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: LD_INT 6
4738: PUSH
4739: LD_INT 7
4741: PUSH
4742: LD_INT 8
4744: PUSH
4745: LD_INT 9
4747: PUSH
4748: LD_INT 10
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_INT 10
4769: DIV
4770: ARRAY
4771: PPUSH
4772: CALL 6676 0 2
4776: ST_TO_ADDR
4777: GO 6485
4779: LD_INT 12
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4835
4785: LD_INT 22
4787: DOUBLE
4788: EQUAL
4789: IFTRUE 4835
4791: LD_INT 32
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4835
4797: LD_INT 42
4799: DOUBLE
4800: EQUAL
4801: IFTRUE 4835
4803: LD_INT 52
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4835
4809: LD_INT 62
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4835
4815: LD_INT 72
4817: DOUBLE
4818: EQUAL
4819: IFTRUE 4835
4821: LD_INT 82
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4835
4827: LD_INT 92
4829: DOUBLE
4830: EQUAL
4831: IFTRUE 4835
4833: GO 4944
4835: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: LD_INT 16
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 28
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 39
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: LD_INT 56
4861: PUSH
4862: LD_INT 66
4864: PUSH
4865: LD_INT 80
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_VAR 0 1
4883: PUSH
4884: LD_INT 10
4886: DIV
4887: ARRAY
4888: PPUSH
4889: LD_INT 2
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: LD_INT 7
4906: PUSH
4907: LD_INT 8
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 10
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_VAR 0 1
4931: PUSH
4932: LD_INT 10
4934: DIV
4935: ARRAY
4936: PPUSH
4937: CALL 6747 0 2
4941: ST_TO_ADDR
4942: GO 6485
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 5000
4950: LD_INT 23
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 5000
4956: LD_INT 33
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 5000
4962: LD_INT 43
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 5000
4968: LD_INT 53
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 5000
4974: LD_INT 63
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 5000
4980: LD_INT 73
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 5000
4986: LD_INT 83
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 5000
4992: LD_INT 93
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5109
5000: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 18
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 27
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 39
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 57
5029: PUSH
5030: LD_INT 65
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_VAR 0 1
5048: PUSH
5049: LD_INT 10
5051: DIV
5052: ARRAY
5053: PPUSH
5054: LD_INT 2
5056: PUSH
5057: LD_INT 3
5059: PUSH
5060: LD_INT 4
5062: PUSH
5063: LD_INT 5
5065: PUSH
5066: LD_INT 6
5068: PUSH
5069: LD_INT 7
5071: PUSH
5072: LD_INT 8
5074: PUSH
5075: LD_INT 9
5077: PUSH
5078: LD_INT 10
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: LD_INT 10
5099: DIV
5100: ARRAY
5101: PPUSH
5102: CALL 6818 0 2
5106: ST_TO_ADDR
5107: GO 6485
5109: LD_INT 14
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5165
5115: LD_INT 24
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5165
5121: LD_INT 34
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5165
5127: LD_INT 44
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5165
5133: LD_INT 54
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5165
5139: LD_INT 64
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5165
5145: LD_INT 74
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5165
5151: LD_INT 84
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5165
5157: LD_INT 94
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5274
5165: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: LD_INT 9
5173: PUSH
5174: LD_INT 15
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 30
5182: PUSH
5183: LD_INT 39
5185: PUSH
5186: LD_INT 45
5188: PUSH
5189: LD_INT 56
5191: PUSH
5192: LD_INT 60
5194: PUSH
5195: LD_INT 65
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_VAR 0 1
5213: PUSH
5214: LD_INT 10
5216: DIV
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PUSH
5222: LD_INT 3
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 5
5230: PUSH
5231: LD_INT 6
5233: PUSH
5234: LD_INT 7
5236: PUSH
5237: LD_INT 8
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 10
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 10
5264: DIV
5265: ARRAY
5266: PPUSH
5267: CALL 6897 0 2
5271: ST_TO_ADDR
5272: GO 6485
5274: LD_INT 15
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5330
5280: LD_INT 25
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5330
5286: LD_INT 35
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5330
5292: LD_INT 45
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5330
5298: LD_INT 55
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5330
5304: LD_INT 65
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5330
5310: LD_INT 75
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5330
5316: LD_INT 85
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5330
5322: LD_INT 95
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5439
5330: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 11
5341: PUSH
5342: LD_INT 15
5344: PUSH
5345: LD_INT 20
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 30
5353: PUSH
5354: LD_INT 35
5356: PUSH
5357: LD_INT 40
5359: PUSH
5360: LD_INT 45
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 10
5381: DIV
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: LD_INT 5
5395: PUSH
5396: LD_INT 6
5398: PUSH
5399: LD_INT 7
5401: PUSH
5402: LD_INT 8
5404: PUSH
5405: LD_INT 9
5407: PUSH
5408: LD_INT 10
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 10
5429: DIV
5430: ARRAY
5431: PPUSH
5432: CALL 7293 0 2
5436: ST_TO_ADDR
5437: GO 6485
5439: LD_INT 16
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5495
5445: LD_INT 26
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5495
5451: LD_INT 36
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5495
5457: LD_INT 46
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5495
5463: LD_INT 56
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5495
5469: LD_INT 66
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5495
5475: LD_INT 76
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5495
5481: LD_INT 86
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5495
5487: LD_INT 96
5489: DOUBLE
5490: EQUAL
5491: IFTRUE 5495
5493: GO 5604
5495: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_INT 9
5503: PUSH
5504: LD_INT 12
5506: PUSH
5507: LD_INT 15
5509: PUSH
5510: LD_INT 18
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: LD_INT 27
5521: PUSH
5522: LD_INT 30
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 10
5546: DIV
5547: ARRAY
5548: PPUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 6
5563: PUSH
5564: LD_INT 7
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: LD_INT 9
5572: PUSH
5573: LD_INT 10
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 10
5594: DIV
5595: ARRAY
5596: PPUSH
5597: CALL 7713 0 2
5601: ST_TO_ADDR
5602: GO 6485
5604: LD_INT 17
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5660
5610: LD_INT 27
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5660
5616: LD_INT 37
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5660
5622: LD_INT 47
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5660
5628: LD_INT 57
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5660
5634: LD_INT 67
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5660
5640: LD_INT 77
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5660
5646: LD_INT 87
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5660
5652: LD_INT 97
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5769
5660: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 18
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 26
5683: PUSH
5684: LD_INT 28
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 35
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 10
5711: DIV
5712: ARRAY
5713: PPUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: LD_INT 6
5728: PUSH
5729: LD_INT 7
5731: PUSH
5732: LD_INT 8
5734: PUSH
5735: LD_INT 9
5737: PUSH
5738: LD_INT 10
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: LD_INT 10
5759: DIV
5760: ARRAY
5761: PPUSH
5762: CALL 8133 0 2
5766: ST_TO_ADDR
5767: GO 6485
5769: LD_INT 18
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5825
5775: LD_INT 28
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5825
5781: LD_INT 38
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5825
5787: LD_INT 48
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5825
5793: LD_INT 58
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5825
5799: LD_INT 68
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5825
5805: LD_INT 78
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5825
5811: LD_INT 88
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5825
5817: LD_INT 98
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5934
5825: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: LD_INT 12
5836: PUSH
5837: LD_INT 15
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 27
5851: PUSH
5852: LD_INT 30
5854: PUSH
5855: LD_INT 33
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_VAR 0 1
5873: PUSH
5874: LD_INT 10
5876: DIV
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 9
5902: PUSH
5903: LD_INT 10
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: LD_INT 10
5924: DIV
5925: ARRAY
5926: PPUSH
5927: CALL 8234 0 2
5931: ST_TO_ADDR
5932: GO 6485
5934: LD_INT 19
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5990
5940: LD_INT 29
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5990
5946: LD_INT 39
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5990
5952: LD_INT 49
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5990
5958: LD_INT 59
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5990
5964: LD_INT 69
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5990
5970: LD_INT 79
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5990
5976: LD_INT 89
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5990
5982: LD_INT 99
5984: DOUBLE
5985: EQUAL
5986: IFTRUE 5990
5988: GO 6201
5990: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5991: LD_ADDR_VAR 0 2
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 7
6001: PUSH
6002: LD_INT 10
6004: PUSH
6005: LD_INT 13
6007: PUSH
6008: LD_INT 14
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 19
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_INT 10
6041: DIV
6042: ARRAY
6043: PPUSH
6044: LD_INT 2
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: LD_INT 4
6052: PUSH
6053: LD_INT 5
6055: PUSH
6056: LD_INT 6
6058: PUSH
6059: LD_INT 7
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: LD_INT 9
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 10
6089: DIV
6090: ARRAY
6091: PPUSH
6092: CALL 8234 0 2
6096: PUSH
6097: LD_INT 4
6099: PUSH
6100: LD_INT 7
6102: PUSH
6103: LD_INT 10
6105: PUSH
6106: LD_INT 13
6108: PUSH
6109: LD_INT 14
6111: PUSH
6112: LD_INT 17
6114: PUSH
6115: LD_INT 19
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 10
6142: DIV
6143: ARRAY
6144: PPUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: LD_INT 6
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 8
6165: PUSH
6166: LD_INT 9
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 10
6190: DIV
6191: ARRAY
6192: PPUSH
6193: CALL 7293 0 2
6197: ADD
6198: ST_TO_ADDR
6199: GO 6485
6201: LD_INT 20
6203: DOUBLE
6204: EQUAL
6205: IFTRUE 6257
6207: LD_INT 30
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6257
6213: LD_INT 40
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6257
6219: LD_INT 50
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6257
6225: LD_INT 60
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6257
6231: LD_INT 70
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6257
6237: LD_INT 80
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6257
6243: LD_INT 90
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6257
6249: LD_INT 100
6251: DOUBLE
6252: EQUAL
6253: IFTRUE 6257
6255: GO 6484
6257: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 7
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 17
6280: PUSH
6281: LD_INT 19
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 10
6308: DIVREAL
6309: PUSH
6310: LD_INT 1
6312: MINUS
6313: ARRAY
6314: PPUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: LD_INT 7
6332: PUSH
6333: LD_INT 8
6335: PUSH
6336: LD_INT 9
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 10
6360: DIVREAL
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: ARRAY
6366: PPUSH
6367: CALL 8133 0 2
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 10
6380: PUSH
6381: LD_INT 13
6383: PUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 17
6389: PUSH
6390: LD_INT 19
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 10
6417: DIVREAL
6418: PUSH
6419: LD_INT 1
6421: MINUS
6422: ARRAY
6423: PPUSH
6424: LD_INT 2
6426: PUSH
6427: LD_INT 3
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: LD_INT 6
6438: PUSH
6439: LD_INT 7
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: LD_INT 9
6447: PUSH
6448: LD_INT 10
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 1
6466: PUSH
6467: LD_INT 10
6469: DIVREAL
6470: PUSH
6471: LD_INT 1
6473: MINUS
6474: ARRAY
6475: PPUSH
6476: CALL 7713 0 2
6480: ADD
6481: ST_TO_ADDR
6482: GO 6485
6484: POP
// for i in result do
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6669
// begin a := rand ( 1 , 2 ) ;
6498: LD_ADDR_VAR 0 8
6502: PUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: CALL_OW 12
6513: ST_TO_ADDR
// if a = 1 then
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 1
6521: EQUAL
6522: IFFALSE 6538
// SetDir ( i , 3 ) else
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 233
6536: GO 6550
// SetDir ( i , 5 ) ;
6538: LD_VAR 0 3
6542: PPUSH
6543: LD_INT 5
6545: PPUSH
6546: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_VAR 0 7
6559: PUSH
6560: LD_VAR 0 8
6564: ARRAY
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if GetControl ( i ) = control_manual then
6573: LD_VAR 0 3
6577: PPUSH
6578: CALL_OW 263
6582: PUSH
6583: LD_INT 1
6585: EQUAL
6586: IFFALSE 6632
// begin uc_nation := GetNation ( i ) ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 248
6602: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_VAR 0 5
6613: PPUSH
6614: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6618: CALL_OW 44
6622: PPUSH
6623: LD_VAR 0 3
6627: PPUSH
6628: CALL_OW 52
// end ; l := l + 1 ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// if l mod 10 = 0 then
6646: LD_VAR 0 9
6650: PUSH
6651: LD_INT 10
6653: MOD
6654: PUSH
6655: LD_INT 0
6657: EQUAL
6658: IFFALSE 6667
// Wait ( 0 0$02 ) ;
6660: LD_INT 70
6662: PPUSH
6663: CALL_OW 67
// end ;
6667: GO 6495
6669: POP
6670: POP
// end ;
6671: LD_VAR 0 2
6675: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6676: LD_INT 0
6678: PPUSH
6679: PPUSH
6680: PPUSH
// uc_nation := nation_nature ;
6681: LD_ADDR_OWVAR 21
6685: PUSH
6686: LD_INT 0
6688: ST_TO_ADDR
// for i = 1 to n do
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: DOUBLE
6695: LD_INT 1
6697: DEC
6698: ST_TO_ADDR
6699: LD_VAR 0 1
6703: PUSH
6704: FOR_TO
6705: IFFALSE 6740
// begin PrepareHuman ( false , class_apeman , skill ) ;
6707: LD_INT 0
6709: PPUSH
6710: LD_INT 12
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: CALL_OW 380
// result := result ^ CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_VAR 0 3
6731: PUSH
6732: CALL_OW 44
6736: ADD
6737: ST_TO_ADDR
// end ;
6738: GO 6704
6740: POP
6741: POP
// end ;
6742: LD_VAR 0 3
6746: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// uc_nation := nation_nature ;
6752: LD_ADDR_OWVAR 21
6756: PUSH
6757: LD_INT 0
6759: ST_TO_ADDR
// for i = 1 to n do
6760: LD_ADDR_VAR 0 4
6764: PUSH
6765: DOUBLE
6766: LD_INT 1
6768: DEC
6769: ST_TO_ADDR
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_TO
6776: IFFALSE 6811
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 15
6783: PPUSH
6784: LD_VAR 0 2
6788: PPUSH
6789: CALL_OW 380
// result := result ^ CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 3
6802: PUSH
6803: CALL_OW 44
6807: ADD
6808: ST_TO_ADDR
// end ;
6809: GO 6775
6811: POP
6812: POP
// end ;
6813: LD_VAR 0 3
6817: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
// for i = 1 to n do
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: DOUBLE
6829: LD_INT 1
6831: DEC
6832: ST_TO_ADDR
6833: LD_VAR 0 1
6837: PUSH
6838: FOR_TO
6839: IFFALSE 6890
// begin uc_nation := rand ( 1 , 3 ) ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 3
6851: PPUSH
6852: CALL_OW 12
6856: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 380
// result := result ^ CreateHuman ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: CALL_OW 44
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6838
6890: POP
6891: POP
// end ;
6892: LD_VAR 0 3
6896: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
// for i = 1 to n do
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 1
6920: PUSH
6921: FOR_TO
6922: IFFALSE 7286
// begin uc_nation := rand ( 1 , 3 ) ;
6924: LD_ADDR_OWVAR 21
6928: PUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 12
6939: ST_TO_ADDR
// case uc_nation of 1 :
6940: LD_OWVAR 21
6944: PUSH
6945: LD_INT 1
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7016
6953: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6984: LD_ADDR_VAR 0 8
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7151
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7087
7024: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_INT 12
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7040: LD_ADDR_VAR 0 7
7044: PUSH
7045: LD_INT 23
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7055: LD_ADDR_VAR 0 8
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
// end ; 3 :
7085: GO 7151
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7150
7095: POP
// begin chassis := [ ru_medium_wheeled ] ;
7096: LD_ADDR_VAR 0 6
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: EMPTY
7105: LIST
7106: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7107: LD_ADDR_VAR 0 7
7111: PUSH
7112: LD_INT 42
7114: PUSH
7115: LD_INT 44
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 3
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: ST_TO_ADDR
// end ; end ;
7148: GO 7151
7150: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7151: LD_ADDR_OWVAR 37
7155: PUSH
7156: LD_VAR 0 6
7160: PUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 6
7168: PPUSH
7169: CALL_OW 12
7173: ARRAY
7174: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7175: LD_ADDR_OWVAR 39
7179: PUSH
7180: LD_VAR 0 9
7184: PUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_VAR 0 9
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7199: LD_ADDR_OWVAR 38
7203: PUSH
7204: LD_VAR 0 8
7208: PUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_VAR 0 8
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7223: LD_ADDR_OWVAR 40
7227: PUSH
7228: LD_VAR 0 7
7232: PUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: CALL_OW 12
7245: ARRAY
7246: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7247: LD_ADDR_OWVAR 41
7251: PUSH
7252: LD_INT 100
7254: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_VAR 0 3
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: CALL_OW 45
7278: PPUSH
7279: CALL_OW 2
7283: ST_TO_ADDR
// end ;
7284: GO 6921
7286: POP
7287: POP
// end ;
7288: LD_VAR 0 3
7292: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
// for i = 1 to n do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_VAR 0 1
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7706
// begin uc_nation := rand ( 1 , 3 ) ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_INT 3
7330: PPUSH
7331: CALL_OW 12
7335: ST_TO_ADDR
// case uc_nation of 1 :
7336: LD_OWVAR 21
7340: PUSH
7341: LD_INT 1
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7420
7349: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7365: LD_ADDR_VAR 0 7
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7384: LD_ADDR_VAR 0 8
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: LD_INT 3
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: ST_TO_ADDR
// end ; 2 :
7418: GO 7571
7420: LD_INT 2
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7499
7428: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7429: LD_ADDR_VAR 0 6
7433: PUSH
7434: LD_INT 13
7436: PUSH
7437: LD_INT 14
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 27
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: LD_INT 5
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 3 :
7497: GO 7571
7499: LD_INT 3
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7570
7507: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_INT 44
7530: PUSH
7531: LD_INT 43
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7553: LD_ADDR_VAR 0 9
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// end ; end ;
7568: GO 7571
7570: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7571: LD_ADDR_OWVAR 37
7575: PUSH
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 12
7593: ARRAY
7594: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7595: LD_ADDR_OWVAR 39
7599: PUSH
7600: LD_VAR 0 9
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_VAR 0 9
7612: PPUSH
7613: CALL_OW 12
7617: ARRAY
7618: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7619: LD_ADDR_OWVAR 38
7623: PUSH
7624: LD_VAR 0 8
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_VAR 0 8
7636: PPUSH
7637: CALL_OW 12
7641: ARRAY
7642: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: PPUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: CALL_OW 12
7665: ARRAY
7666: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7667: LD_ADDR_OWVAR 41
7671: PUSH
7672: LD_INT 100
7674: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_VAR 0 3
7684: PPUSH
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: PPUSH
7694: CALL_OW 45
7698: PPUSH
7699: CALL_OW 2
7703: ST_TO_ADDR
// end ;
7704: GO 7317
7706: POP
7707: POP
// end ;
7708: LD_VAR 0 3
7712: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// for i = 1 to n do
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_TO
7738: IFFALSE 8126
// begin uc_nation := rand ( 1 , 3 ) ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_INT 1
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 12
7755: ST_TO_ADDR
// case uc_nation of 1 :
7756: LD_OWVAR 21
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7836
7769: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_INT 4
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7785: LD_ADDR_VAR 0 7
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 9
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7804: LD_ADDR_VAR 0 8
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7819: LD_ADDR_VAR 0 9
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// end ; 2 :
7834: GO 7991
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7919
7844: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 13
7852: PUSH
7853: LD_INT 14
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: LD_INT 27
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 28
7873: PUSH
7874: LD_INT 29
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7883: LD_ADDR_VAR 0 8
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// end ; 3 :
7917: GO 7991
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7990
7927: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7928: LD_ADDR_VAR 0 6
7932: PUSH
7933: LD_INT 23
7935: PUSH
7936: LD_INT 24
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: LD_INT 46
7950: PUSH
7951: LD_INT 45
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_INT 1
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// end ; end ;
7988: GO 7991
7990: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7991: LD_ADDR_OWVAR 37
7995: PUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_VAR 0 6
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8015: LD_ADDR_OWVAR 39
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 9
8032: PPUSH
8033: CALL_OW 12
8037: ARRAY
8038: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8039: LD_ADDR_OWVAR 38
8043: PUSH
8044: LD_VAR 0 8
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 8
8056: PPUSH
8057: CALL_OW 12
8061: ARRAY
8062: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8063: LD_ADDR_OWVAR 40
8067: PUSH
8068: LD_VAR 0 7
8072: PUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 12
8085: ARRAY
8086: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8087: LD_ADDR_OWVAR 41
8091: PUSH
8092: LD_INT 100
8094: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: PPUSH
8114: CALL_OW 45
8118: PPUSH
8119: CALL_OW 2
8123: ST_TO_ADDR
// end ;
8124: GO 7737
8126: POP
8127: POP
// end ;
8128: LD_VAR 0 3
8132: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
// for i = 1 to n do
8137: LD_ADDR_VAR 0 4
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 1
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8227
// begin uc_nation := rand ( 1 , 3 ) ;
8155: LD_ADDR_OWVAR 21
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 8
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 380
// result := result ^ CreateHuman ;
8209: LD_ADDR_VAR 0 3
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: CALL_OW 44
8223: ADD
8224: ST_TO_ADDR
// end ;
8225: GO 8152
8227: POP
8228: POP
// end ;
8229: LD_VAR 0 3
8233: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// for i = 1 to n do
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 1
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8651
// begin uc_nation := rand ( 1 , 3 ) ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 3
8271: PPUSH
8272: CALL_OW 12
8276: ST_TO_ADDR
// case uc_nation of 1 :
8277: LD_OWVAR 21
8281: PUSH
8282: LD_INT 1
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8361
8290: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 4
8298: PUSH
8299: LD_INT 5
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8306: LD_ADDR_VAR 0 7
8310: PUSH
8311: LD_INT 6
8313: PUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 97
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8329: LD_ADDR_VAR 0 8
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// end ; 2 :
8359: GO 8516
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8440
8369: POP
// begin chassis := [ ar_half_tracked ] ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 14
8377: PUSH
8378: EMPTY
8379: LIST
8380: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8381: LD_ADDR_VAR 0 7
8385: PUSH
8386: LD_INT 91
8388: PUSH
8389: LD_INT 26
8391: PUSH
8392: LD_INT 28
8394: PUSH
8395: LD_INT 29
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8404: LD_ADDR_VAR 0 8
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// end ; 3 :
8438: GO 8516
8440: LD_INT 3
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8515
8448: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8449: LD_ADDR_VAR 0 6
8453: PUSH
8454: LD_INT 23
8456: PUSH
8457: LD_INT 24
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8464: LD_ADDR_VAR 0 7
8468: PUSH
8469: LD_INT 46
8471: PUSH
8472: LD_INT 45
8474: PUSH
8475: LD_INT 49
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// end ; end ;
8513: GO 8516
8515: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8516: LD_ADDR_OWVAR 37
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_VAR 0 9
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_VAR 0 8
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_VAR 0 8
8581: PPUSH
8582: CALL_OW 12
8586: ARRAY
8587: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8588: LD_ADDR_OWVAR 40
8592: PUSH
8593: LD_VAR 0 7
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_VAR 0 7
8605: PPUSH
8606: CALL_OW 12
8610: ARRAY
8611: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8612: LD_ADDR_OWVAR 41
8616: PUSH
8617: LD_INT 100
8619: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_VAR 0 3
8634: PUSH
8635: LD_INT 1
8637: PLUS
8638: PPUSH
8639: CALL_OW 45
8643: PPUSH
8644: CALL_OW 2
8648: ST_TO_ADDR
// end ;
8649: GO 8258
8651: POP
8652: POP
// end ; end_of_file
8653: LD_VAR 0 3
8657: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8658: LD_INT 22
8660: PUSH
8661: LD_INT 7
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: IFFALSE 9172
8674: GO 8676
8676: DISABLE
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
// begin enable ;
8682: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// for i in tmp do
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_VAR 0 3
8712: PUSH
8713: FOR_IN
8714: IFFALSE 9170
// begin case GetType ( i ) of unit_human :
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 247
8725: PUSH
8726: LD_INT 1
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8933
8734: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 256
8744: PUSH
8745: LD_INT 250
8747: LESS
8748: PUSH
8749: LD_INT 5
8751: PPUSH
8752: LD_INT 7
8754: PPUSH
8755: CALL_OW 321
8759: PUSH
8760: LD_INT 2
8762: NONEQUAL
8763: AND
8764: IFFALSE 8768
// continue ;
8766: GO 8713
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 257
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 17
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: LD_INT 5
8795: PUSH
8796: LD_INT 6
8798: PUSH
8799: LD_INT 7
8801: PUSH
8802: LD_INT 8
8804: PUSH
8805: LD_INT 9
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: IN
8820: IFFALSE 8858
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 22
8829: PUSH
8830: LD_OWVAR 2
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PPUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 74
8853: PPUSH
8854: CALL_OW 115
// if GetClass ( i ) = 3 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 257
8867: PUSH
8868: LD_INT 3
8870: EQUAL
8871: IFFALSE 8931
// if IsInUnit ( i ) then
8873: LD_VAR 0 1
8877: PPUSH
8878: CALL_OW 310
8882: IFFALSE 8922
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 22
8891: PUSH
8892: LD_OWVAR 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 74
8915: PPUSH
8916: CALL_OW 115
8920: GO 8931
// ComEspace ( i ) ;
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL 1933 0 1
// end ; unit_vehicle :
8931: GO 9168
8933: LD_INT 2
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 9167
8941: POP
// begin if GetLives ( i ) > 250 then
8942: LD_VAR 0 1
8946: PPUSH
8947: CALL_OW 256
8951: PUSH
8952: LD_INT 250
8954: GREATER
8955: IFFALSE 9165
// begin if GetWeapon ( i ) = us_artillery then
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 264
8966: PUSH
8967: LD_INT 97
8969: EQUAL
8970: IFFALSE 9038
// begin if IsInArea ( i , zoneOut ) then
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 308
8984: IFFALSE 9000
// ComMoveToArea ( i , zoneBorder ) else
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 9
8993: PPUSH
8994: CALL_OW 113
8998: GO 9036
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: LD_INT 22
9007: PUSH
9008: LD_OWVAR 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 69
9021: PPUSH
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 74
9031: PPUSH
9032: CALL_OW 115
// end else
9036: GO 9165
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 264
9047: PUSH
9048: LD_INT 11
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 98
9056: PUSH
9057: LD_INT 49
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9096
// begin if IsInArea ( i , zoneOut ) then
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_INT 4
9075: PPUSH
9076: CALL_OW 308
9080: IFFALSE 9094
// ComSpecMove ( i , specPos ) ;
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_INT 8
9089: PPUSH
9090: CALL 1979 0 2
// end else
9094: GO 9165
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 264
9105: PUSH
9106: LD_INT 91
9108: PUSH
9109: LD_INT 29
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: IN
9116: IFFALSE 9129
// ComSpecAttack ( i ) else
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL 2407 0 1
9127: GO 9165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 115
// end ; end ; end ;
9165: GO 9168
9167: POP
// end ;
9168: GO 8713
9170: POP
9171: POP
// end ; end_of_file
9172: PPOPN 3
9174: END
// export function InitDisplay ; begin
9175: LD_INT 0
9177: PPUSH
// while true do
9178: LD_INT 1
9180: IFFALSE 9267
// begin if waveNumber < 100 then
9182: LD_EXP 5
9186: PUSH
9187: LD_INT 100
9189: LESS
9190: IFFALSE 9241
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9192: LD_ADDR_OWVAR 47
9196: PUSH
9197: LD_STRING #Tick
9199: PUSH
9200: LD_OWVAR 1
9204: PUSH
9205: LD_STRING #Points
9207: PUSH
9208: LD_EXP 2
9212: PUSH
9213: LD_STRING #Attack
9215: PUSH
9216: LD_EXP 4
9220: PUSH
9221: LD_STRING #Wave
9223: PUSH
9224: LD_EXP 5
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9258
// Display_Strings := [ #Win , points ] ;
9241: LD_ADDR_OWVAR 47
9245: PUSH
9246: LD_STRING #Win
9248: PUSH
9249: LD_EXP 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// end ;
9265: GO 9178
// end ; end_of_file
9267: LD_VAR 0 1
9271: RET
// export function InitBonus ; var i , chance ; begin
9272: LD_INT 0
9274: PPUSH
9275: PPUSH
9276: PPUSH
// chance := rand ( 1 , 99 ) ;
9277: LD_ADDR_VAR 0 3
9281: PUSH
9282: LD_INT 1
9284: PPUSH
9285: LD_INT 99
9287: PPUSH
9288: CALL_OW 12
9292: ST_TO_ADDR
// case chance of 1 .. 10 :
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: GREATEREQUAL
9302: IFFALSE 9310
9304: LD_INT 10
9306: DOUBLE
9307: LESSEQUAL
9308: IFTRUE 9312
9310: GO 9323
9312: POP
// i := 5 ; 11 .. 25 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 5
9320: ST_TO_ADDR
9321: GO 9424
9323: LD_INT 11
9325: DOUBLE
9326: GREATEREQUAL
9327: IFFALSE 9335
9329: LD_INT 25
9331: DOUBLE
9332: LESSEQUAL
9333: IFTRUE 9337
9335: GO 9348
9337: POP
// i := 3 ; 26 .. 40 :
9338: LD_ADDR_VAR 0 2
9342: PUSH
9343: LD_INT 3
9345: ST_TO_ADDR
9346: GO 9424
9348: LD_INT 26
9350: DOUBLE
9351: GREATEREQUAL
9352: IFFALSE 9360
9354: LD_INT 40
9356: DOUBLE
9357: LESSEQUAL
9358: IFTRUE 9362
9360: GO 9373
9362: POP
// i := 2 ; 41 .. 60 :
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_INT 2
9370: ST_TO_ADDR
9371: GO 9424
9373: LD_INT 41
9375: DOUBLE
9376: GREATEREQUAL
9377: IFFALSE 9385
9379: LD_INT 60
9381: DOUBLE
9382: LESSEQUAL
9383: IFTRUE 9387
9385: GO 9398
9387: POP
// i := 4 ; 61 .. 99 :
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 4
9395: ST_TO_ADDR
9396: GO 9424
9398: LD_INT 61
9400: DOUBLE
9401: GREATEREQUAL
9402: IFFALSE 9410
9404: LD_INT 99
9406: DOUBLE
9407: LESSEQUAL
9408: IFTRUE 9412
9410: GO 9423
9412: POP
// i := 1 ; end ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
9421: GO 9424
9423: POP
// case i of 1 :
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9526
9437: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9438: LD_INT 22
9440: PUSH
9441: LD_OWVAR 2
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: LD_INT 25
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 15
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 17
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: PUSH
9509: LD_INT 10
9511: GREATEREQUAL
9512: IFFALSE 9520
// BonusIV else
9514: CALL 10099 0 0
9518: GO 9524
// BonusI ;
9520: CALL 9604 0 0
// end ; 2 :
9524: GO 9599
9526: LD_INT 2
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9541
9534: POP
// begin BonusII ;
9535: CALL 9777 0 0
// end ; 3 :
9539: GO 9599
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9556
9549: POP
// begin BonusIII ;
9550: CALL 9925 0 0
// end ; 4 :
9554: GO 9599
9556: LD_INT 4
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9571
9564: POP
// begin BonusIV ;
9565: CALL 10099 0 0
// end ; 5 :
9569: GO 9599
9571: LD_INT 5
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9598
9579: POP
// begin if graveyard then
9580: LD_EXP 8
9584: IFFALSE 9592
// BonusV else
9586: CALL 10517 0 0
9590: GO 9596
// BonusIII ;
9592: CALL 9925 0 0
// end ; end ;
9596: GO 9599
9598: POP
// end ;
9599: LD_VAR 0 1
9603: RET
// export function BonusI ; var i ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
// case Query ( AddGift1 ) of 1 :
9608: LD_STRING AddGift1
9610: PPUSH
9611: CALL_OW 97
9615: PUSH
9616: LD_INT 1
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9703
9624: POP
// begin for i = 1 to 3 do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_INT 3
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9699
// begin uc_side := your_side ;
9641: LD_ADDR_OWVAR 20
9645: PUSH
9646: LD_OWVAR 2
9650: ST_TO_ADDR
// uc_nation := 0 ;
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 12
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9672: CALL_OW 44
9676: PPUSH
9677: LD_EXP 9
9681: PPUSH
9682: LD_EXP 10
9686: PPUSH
9687: LD_INT 15
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 50
// end ;
9697: GO 9638
9699: POP
9700: POP
// end ; 2 :
9701: GO 9772
9703: LD_INT 2
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9753
9711: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9712: LD_EXP 11
9716: PPUSH
9717: CALL_OW 274
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: LD_EXP 11
9729: PPUSH
9730: CALL_OW 274
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: CALL_OW 275
9742: PUSH
9743: LD_INT 100
9745: PLUS
9746: PPUSH
9747: CALL_OW 277
// end ; 3 :
9751: GO 9772
9753: LD_INT 3
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9771
9761: POP
// begin SetTeamExp ( 2 ) ;
9762: LD_INT 2
9764: PPUSH
9765: CALL 940 0 1
// end ; end ;
9769: GO 9772
9771: POP
// end ;
9772: LD_VAR 0 1
9776: RET
// export function BonusII ; var i ; begin
9777: LD_INT 0
9779: PPUSH
9780: PPUSH
// case Query ( AddGift2 ) of 1 :
9781: LD_STRING AddGift2
9783: PPUSH
9784: CALL_OW 97
9788: PUSH
9789: LD_INT 1
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9839
9797: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9798: LD_EXP 11
9802: PPUSH
9803: CALL_OW 274
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_EXP 11
9815: PPUSH
9816: CALL_OW 274
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 275
9828: PUSH
9829: LD_INT 500
9831: PLUS
9832: PPUSH
9833: CALL_OW 277
// end ; 2 :
9837: GO 9920
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9857
9847: POP
// begin SetTeamExp ( 3 ) ;
9848: LD_INT 3
9850: PPUSH
9851: CALL 940 0 1
// end ; 3 :
9855: GO 9920
9857: LD_INT 3
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9919
9865: POP
// begin uc_side = your_side ;
9866: LD_ADDR_OWVAR 20
9870: PUSH
9871: LD_OWVAR 2
9875: ST_TO_ADDR
// uc_nation = nation_russian ;
9876: LD_ADDR_OWVAR 21
9880: PUSH
9881: LD_INT 3
9883: ST_TO_ADDR
// vc_chassis = 25 ;
9884: LD_ADDR_OWVAR 37
9888: PUSH
9889: LD_INT 25
9891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9892: CALL_OW 45
9896: PPUSH
9897: LD_EXP 9
9901: PPUSH
9902: LD_EXP 10
9906: PPUSH
9907: LD_INT 15
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 50
// end ; end ;
9917: GO 9920
9919: POP
// end ;
9920: LD_VAR 0 1
9924: RET
// export function BonusIII ; var i ; begin
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// case Query ( AddGift3 ) of 1 :
9929: LD_STRING AddGift3
9931: PPUSH
9932: CALL_OW 97
9936: PUSH
9937: LD_INT 1
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9987
9945: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9946: LD_EXP 11
9950: PPUSH
9951: CALL_OW 274
9955: PPUSH
9956: LD_INT 1
9958: PPUSH
9959: LD_EXP 11
9963: PPUSH
9964: CALL_OW 274
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 275
9976: PUSH
9977: LD_INT 1000
9979: PLUS
9980: PPUSH
9981: CALL_OW 277
// end ; 2 :
9985: GO 10094
9987: LD_INT 2
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10007
9995: POP
// begin PrepareGuards ( waveNumber ) ;
9996: LD_EXP 5
10000: PPUSH
10001: CALL 1086 0 1
// end ; 3 :
10005: GO 10094
10007: LD_INT 3
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10093
10015: POP
// begin uc_side = your_side ;
10016: LD_ADDR_OWVAR 20
10020: PUSH
10021: LD_OWVAR 2
10025: ST_TO_ADDR
// uc_nation = nation_american ;
10026: LD_ADDR_OWVAR 21
10030: PUSH
10031: LD_INT 1
10033: ST_TO_ADDR
// vc_chassis = us_morphling ;
10034: LD_ADDR_OWVAR 37
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_engine := engine_siberite ;
10042: LD_ADDR_OWVAR 39
10046: PUSH
10047: LD_INT 3
10049: ST_TO_ADDR
// vc_control := control_computer ;
10050: LD_ADDR_OWVAR 38
10054: PUSH
10055: LD_INT 3
10057: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10058: LD_ADDR_OWVAR 40
10062: PUSH
10063: LD_INT 8
10065: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10066: CALL_OW 45
10070: PPUSH
10071: LD_EXP 9
10075: PPUSH
10076: LD_EXP 10
10080: PPUSH
10081: LD_INT 15
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 50
// end ; end ;
10091: GO 10094
10093: POP
// end ;
10094: LD_VAR 0 1
10098: RET
// export function BonusIV ; var i ; begin
10099: LD_INT 0
10101: PPUSH
10102: PPUSH
// case Query ( AddGift4 ) of 1 :
10103: LD_STRING AddGift4
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10443
10119: POP
// begin i := rand ( 1 , 3 ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ST_TO_ADDR
// uc_side := your_side ;
10136: LD_ADDR_OWVAR 20
10140: PUSH
10141: LD_OWVAR 2
10145: ST_TO_ADDR
// case i of 1 :
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10246
10159: POP
// begin uc_nation := nation_arabian ;
10160: LD_ADDR_OWVAR 21
10164: PUSH
10165: LD_INT 2
10167: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10168: LD_ADDR_OWVAR 37
10172: PUSH
10173: LD_INT 14
10175: ST_TO_ADDR
// vc_engine := engine_combustion ;
10176: LD_ADDR_OWVAR 39
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// vc_control := control_manual ;
10184: LD_ADDR_OWVAR 38
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10192: LD_ADDR_OWVAR 40
10196: PUSH
10197: LD_INT 27
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10219: CALL_OW 45
10223: PPUSH
10224: LD_EXP 9
10228: PPUSH
10229: LD_EXP 10
10233: PPUSH
10234: LD_INT 15
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 50
// end ; 2 :
10244: GO 10441
10246: LD_INT 2
10248: DOUBLE
10249: EQUAL
10250: IFTRUE 10254
10252: GO 10345
10254: POP
// begin uc_nation := nation_american ;
10255: LD_ADDR_OWVAR 21
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
// vc_chassis := us_morphling ;
10263: LD_ADDR_OWVAR 37
10267: PUSH
10268: LD_INT 5
10270: ST_TO_ADDR
// vc_engine := engine_siberite ;
10271: LD_ADDR_OWVAR 39
10275: PUSH
10276: LD_INT 3
10278: ST_TO_ADDR
// vc_control := control_computer ;
10279: LD_ADDR_OWVAR 38
10283: PUSH
10284: LD_INT 3
10286: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10287: LD_ADDR_OWVAR 40
10291: PUSH
10292: LD_INT 12
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 7
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 12
10316: ARRAY
10317: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10318: CALL_OW 45
10322: PPUSH
10323: LD_EXP 9
10327: PPUSH
10328: LD_EXP 10
10332: PPUSH
10333: LD_INT 15
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 50
// end ; 3 :
10343: GO 10441
10345: LD_INT 3
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10440
10353: POP
// begin uc_nation := nation_russian ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 3
10361: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10362: LD_ADDR_OWVAR 37
10366: PUSH
10367: LD_INT 22
10369: ST_TO_ADDR
// vc_engine := engine_combustion ;
10370: LD_ADDR_OWVAR 39
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// vc_control := control_manual ;
10378: LD_ADDR_OWVAR 38
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10386: LD_ADDR_OWVAR 40
10390: PUSH
10391: LD_INT 45
10393: PUSH
10394: LD_INT 44
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 2
10406: PPUSH
10407: CALL_OW 12
10411: ARRAY
10412: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10413: CALL_OW 45
10417: PPUSH
10418: LD_EXP 9
10422: PPUSH
10423: LD_EXP 10
10427: PPUSH
10428: LD_INT 15
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 50
// end ; end ;
10438: GO 10441
10440: POP
// end ; 2 :
10441: GO 10512
10443: LD_INT 2
10445: DOUBLE
10446: EQUAL
10447: IFTRUE 10451
10449: GO 10493
10451: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 274
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 11
10469: PPUSH
10470: CALL_OW 274
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 275
10482: PUSH
10483: LD_INT 100
10485: PLUS
10486: PPUSH
10487: CALL_OW 277
// end ; 3 :
10491: GO 10512
10493: LD_INT 3
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10511
10501: POP
// begin SetTeamExp ( 2 ) ;
10502: LD_INT 2
10504: PPUSH
10505: CALL 940 0 1
// end ; end ;
10509: GO 10512
10511: POP
// end ;
10512: LD_VAR 0 1
10516: RET
// export function BonusV ; var i , j ; begin
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// case Query ( AddGift5 ) of 1 :
10522: LD_STRING AddGift5
10524: PPUSH
10525: CALL_OW 97
10529: PUSH
10530: LD_INT 1
10532: DOUBLE
10533: EQUAL
10534: IFTRUE 10538
10536: GO 10882
10538: POP
// begin for j = 1 to 3 do
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: DOUBLE
10545: LD_INT 1
10547: DEC
10548: ST_TO_ADDR
10549: LD_INT 3
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10878
// begin i := rand ( 1 , 3 ) ;
10555: LD_ADDR_VAR 0 2
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 3
10565: PPUSH
10566: CALL_OW 12
10570: ST_TO_ADDR
// uc_side := your_side ;
10571: LD_ADDR_OWVAR 20
10575: PUSH
10576: LD_OWVAR 2
10580: ST_TO_ADDR
// case i of 1 :
10581: LD_VAR 0 2
10585: PUSH
10586: LD_INT 1
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10681
10594: POP
// begin uc_nation := nation_arabian ;
10595: LD_ADDR_OWVAR 21
10599: PUSH
10600: LD_INT 2
10602: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10603: LD_ADDR_OWVAR 37
10607: PUSH
10608: LD_INT 14
10610: ST_TO_ADDR
// vc_engine := engine_combustion ;
10611: LD_ADDR_OWVAR 39
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// vc_control := control_manual ;
10619: LD_ADDR_OWVAR 38
10623: PUSH
10624: LD_INT 1
10626: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10627: LD_ADDR_OWVAR 40
10631: PUSH
10632: LD_INT 27
10634: PUSH
10635: LD_INT 28
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 12
10652: ARRAY
10653: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10654: CALL_OW 45
10658: PPUSH
10659: LD_EXP 9
10663: PPUSH
10664: LD_EXP 10
10668: PPUSH
10669: LD_INT 15
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 50
// end ; 2 :
10679: GO 10876
10681: LD_INT 2
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10780
10689: POP
// begin uc_nation := nation_american ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// vc_chassis := us_morphling ;
10698: LD_ADDR_OWVAR 37
10702: PUSH
10703: LD_INT 5
10705: ST_TO_ADDR
// vc_engine := engine_siberite ;
10706: LD_ADDR_OWVAR 39
10710: PUSH
10711: LD_INT 3
10713: ST_TO_ADDR
// vc_control := control_computer ;
10714: LD_ADDR_OWVAR 38
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10722: LD_ADDR_OWVAR 40
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_INT 7
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_INT 3
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10753: CALL_OW 45
10757: PPUSH
10758: LD_EXP 9
10762: PPUSH
10763: LD_EXP 10
10767: PPUSH
10768: LD_INT 15
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 50
// end ; 3 :
10778: GO 10876
10780: LD_INT 3
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10875
10788: POP
// begin uc_nation := nation_russian ;
10789: LD_ADDR_OWVAR 21
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10797: LD_ADDR_OWVAR 37
10801: PUSH
10802: LD_INT 22
10804: ST_TO_ADDR
// vc_engine := engine_combustion ;
10805: LD_ADDR_OWVAR 39
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// vc_control := control_manual ;
10813: LD_ADDR_OWVAR 38
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10821: LD_ADDR_OWVAR 40
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 44
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 2
10841: PPUSH
10842: CALL_OW 12
10846: ARRAY
10847: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10848: CALL_OW 45
10852: PPUSH
10853: LD_EXP 9
10857: PPUSH
10858: LD_EXP 10
10862: PPUSH
10863: LD_INT 15
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 50
// end ; end ;
10873: GO 10876
10875: POP
// end ;
10876: GO 10552
10878: POP
10879: POP
// end ; 2 :
10880: GO 10948
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 10932
10890: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10891: LD_EXP 11
10895: PPUSH
10896: CALL_OW 274
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_EXP 11
10908: PPUSH
10909: CALL_OW 274
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 275
10921: PUSH
10922: LD_INT 500
10924: PLUS
10925: PPUSH
10926: CALL_OW 277
// end ; 3 :
10930: GO 10948
10932: LD_INT 3
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 10947
10940: POP
// begin GetBack ( ) ;
10941: CALL 1746 0 0
// end ; end ;
10945: GO 10948
10947: POP
// end ; end_of_file end_of_file
10948: LD_VAR 0 1
10952: RET
// export globalGameSaveCounter ; every 0 0$1 do
10953: GO 10955
10955: DISABLE
// begin enable ;
10956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10957: LD_STRING updateTimer(
10959: PUSH
10960: LD_OWVAR 1
10964: STR
10965: PUSH
10966: LD_STRING );
10968: STR
10969: PPUSH
10970: CALL_OW 559
// end ;
10974: END
// every 0 0$1 do
10975: GO 10977
10977: DISABLE
// begin globalGameSaveCounter := 0 ;
10978: LD_ADDR_EXP 14
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10986: LD_STRING setGameSaveCounter(0)
10988: PPUSH
10989: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10993: LD_STRING initStreamRollete();
10995: PPUSH
10996: CALL_OW 559
// InitStreamMode ;
11000: CALL 12343 0 0
// DefineStreamItems ( false ) ;
11004: LD_INT 0
11006: PPUSH
11007: CALL 12807 0 1
// end ;
11011: END
// export function SOS_MapStart ( ) ; begin
11012: LD_INT 0
11014: PPUSH
// if streamModeActive then
11015: LD_EXP 15
11019: IFFALSE 11028
// DefineStreamItems ( true ) ;
11021: LD_INT 1
11023: PPUSH
11024: CALL 12807 0 1
// UpdateLuaVariables ( ) ;
11028: CALL 11045 0 0
// UpdateFactoryWaypoints ( ) ;
11032: CALL 25676 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11036: CALL 25933 0 0
// end ;
11040: LD_VAR 0 1
11044: RET
// function UpdateLuaVariables ( ) ; begin
11045: LD_INT 0
11047: PPUSH
// if globalGameSaveCounter then
11048: LD_EXP 14
11052: IFFALSE 11086
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11054: LD_ADDR_EXP 14
11058: PUSH
11059: LD_EXP 14
11063: PPUSH
11064: CALL 70718 0 1
11068: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11069: LD_STRING setGameSaveCounter(
11071: PUSH
11072: LD_EXP 14
11076: STR
11077: PUSH
11078: LD_STRING )
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11086: LD_STRING setGameDifficulty(
11088: PUSH
11089: LD_OWVAR 67
11093: STR
11094: PUSH
11095: LD_STRING )
11097: STR
11098: PPUSH
11099: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11103: LD_STRING displayDifficulty(
11105: PUSH
11106: LD_OWVAR 67
11110: STR
11111: PUSH
11112: LD_STRING )
11114: STR
11115: PPUSH
11116: CALL_OW 559
// end ;
11120: LD_VAR 0 1
11124: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11125: LD_INT 0
11127: PPUSH
// if p2 = stream_mode then
11128: LD_VAR 0 2
11132: PUSH
11133: LD_INT 100
11135: EQUAL
11136: IFFALSE 12139
// begin if not StreamModeActive then
11138: LD_EXP 15
11142: NOT
11143: IFFALSE 11153
// StreamModeActive := true ;
11145: LD_ADDR_EXP 15
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// if p3 = 0 then
11153: LD_VAR 0 3
11157: PUSH
11158: LD_INT 0
11160: EQUAL
11161: IFFALSE 11167
// InitStreamMode ;
11163: CALL 12343 0 0
// if p3 = 1 then
11167: LD_VAR 0 3
11171: PUSH
11172: LD_INT 1
11174: EQUAL
11175: IFFALSE 11185
// sRocket := true ;
11177: LD_ADDR_EXP 20
11181: PUSH
11182: LD_INT 1
11184: ST_TO_ADDR
// if p3 = 2 then
11185: LD_VAR 0 3
11189: PUSH
11190: LD_INT 2
11192: EQUAL
11193: IFFALSE 11203
// sSpeed := true ;
11195: LD_ADDR_EXP 19
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// if p3 = 3 then
11203: LD_VAR 0 3
11207: PUSH
11208: LD_INT 3
11210: EQUAL
11211: IFFALSE 11221
// sEngine := true ;
11213: LD_ADDR_EXP 21
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// if p3 = 4 then
11221: LD_VAR 0 3
11225: PUSH
11226: LD_INT 4
11228: EQUAL
11229: IFFALSE 11239
// sSpec := true ;
11231: LD_ADDR_EXP 18
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// if p3 = 5 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 5
11246: EQUAL
11247: IFFALSE 11257
// sLevel := true ;
11249: LD_ADDR_EXP 22
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 6 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 6
11264: EQUAL
11265: IFFALSE 11275
// sArmoury := true ;
11267: LD_ADDR_EXP 23
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 7 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 7
11282: EQUAL
11283: IFFALSE 11293
// sRadar := true ;
11285: LD_ADDR_EXP 24
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 8 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 8
11300: EQUAL
11301: IFFALSE 11311
// sBunker := true ;
11303: LD_ADDR_EXP 25
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 9 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 9
11318: EQUAL
11319: IFFALSE 11329
// sHack := true ;
11321: LD_ADDR_EXP 26
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 10 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 10
11336: EQUAL
11337: IFFALSE 11347
// sFire := true ;
11339: LD_ADDR_EXP 27
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 11 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 11
11354: EQUAL
11355: IFFALSE 11365
// sRefresh := true ;
11357: LD_ADDR_EXP 28
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 12 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 12
11372: EQUAL
11373: IFFALSE 11383
// sExp := true ;
11375: LD_ADDR_EXP 29
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 13 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 13
11390: EQUAL
11391: IFFALSE 11401
// sDepot := true ;
11393: LD_ADDR_EXP 30
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 14 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 14
11408: EQUAL
11409: IFFALSE 11419
// sFlag := true ;
11411: LD_ADDR_EXP 31
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 15 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 15
11426: EQUAL
11427: IFFALSE 11437
// sKamikadze := true ;
11429: LD_ADDR_EXP 39
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 16 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 16
11444: EQUAL
11445: IFFALSE 11455
// sTroll := true ;
11447: LD_ADDR_EXP 40
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 17 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 17
11462: EQUAL
11463: IFFALSE 11473
// sSlow := true ;
11465: LD_ADDR_EXP 41
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 18 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 18
11480: EQUAL
11481: IFFALSE 11491
// sLack := true ;
11483: LD_ADDR_EXP 42
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 19 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 19
11498: EQUAL
11499: IFFALSE 11509
// sTank := true ;
11501: LD_ADDR_EXP 44
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 20 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 20
11516: EQUAL
11517: IFFALSE 11527
// sRemote := true ;
11519: LD_ADDR_EXP 45
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 21 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 21
11534: EQUAL
11535: IFFALSE 11545
// sPowell := true ;
11537: LD_ADDR_EXP 46
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 22 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 22
11552: EQUAL
11553: IFFALSE 11563
// sTeleport := true ;
11555: LD_ADDR_EXP 49
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 23 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 23
11570: EQUAL
11571: IFFALSE 11581
// sOilTower := true ;
11573: LD_ADDR_EXP 51
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 24 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 24
11588: EQUAL
11589: IFFALSE 11599
// sShovel := true ;
11591: LD_ADDR_EXP 52
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 25 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 25
11606: EQUAL
11607: IFFALSE 11617
// sSheik := true ;
11609: LD_ADDR_EXP 53
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 26 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 26
11624: EQUAL
11625: IFFALSE 11635
// sEarthquake := true ;
11627: LD_ADDR_EXP 55
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 27 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 27
11642: EQUAL
11643: IFFALSE 11653
// sAI := true ;
11645: LD_ADDR_EXP 56
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 28 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 28
11660: EQUAL
11661: IFFALSE 11671
// sCargo := true ;
11663: LD_ADDR_EXP 59
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 29 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 29
11678: EQUAL
11679: IFFALSE 11689
// sDLaser := true ;
11681: LD_ADDR_EXP 60
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 30 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 30
11696: EQUAL
11697: IFFALSE 11707
// sExchange := true ;
11699: LD_ADDR_EXP 61
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 31 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 31
11714: EQUAL
11715: IFFALSE 11725
// sFac := true ;
11717: LD_ADDR_EXP 62
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 32 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 32
11732: EQUAL
11733: IFFALSE 11743
// sPower := true ;
11735: LD_ADDR_EXP 63
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 33 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 33
11750: EQUAL
11751: IFFALSE 11761
// sRandom := true ;
11753: LD_ADDR_EXP 64
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 34 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 34
11768: EQUAL
11769: IFFALSE 11779
// sShield := true ;
11771: LD_ADDR_EXP 65
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 35 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 35
11786: EQUAL
11787: IFFALSE 11797
// sTime := true ;
11789: LD_ADDR_EXP 66
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 36 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 36
11804: EQUAL
11805: IFFALSE 11815
// sTools := true ;
11807: LD_ADDR_EXP 67
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 101 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 101
11822: EQUAL
11823: IFFALSE 11833
// sSold := true ;
11825: LD_ADDR_EXP 32
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 102 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 102
11840: EQUAL
11841: IFFALSE 11851
// sDiff := true ;
11843: LD_ADDR_EXP 33
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 103 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 103
11858: EQUAL
11859: IFFALSE 11869
// sFog := true ;
11861: LD_ADDR_EXP 36
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 104 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 104
11876: EQUAL
11877: IFFALSE 11887
// sReset := true ;
11879: LD_ADDR_EXP 37
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 105 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 105
11894: EQUAL
11895: IFFALSE 11905
// sSun := true ;
11897: LD_ADDR_EXP 38
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 106 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 106
11912: EQUAL
11913: IFFALSE 11923
// sTiger := true ;
11915: LD_ADDR_EXP 34
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 107 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 107
11930: EQUAL
11931: IFFALSE 11941
// sBomb := true ;
11933: LD_ADDR_EXP 35
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 108 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 108
11948: EQUAL
11949: IFFALSE 11959
// sWound := true ;
11951: LD_ADDR_EXP 43
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 109 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 109
11966: EQUAL
11967: IFFALSE 11977
// sBetray := true ;
11969: LD_ADDR_EXP 47
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 110 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 110
11984: EQUAL
11985: IFFALSE 11995
// sContamin := true ;
11987: LD_ADDR_EXP 48
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 111 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 111
12002: EQUAL
12003: IFFALSE 12013
// sOil := true ;
12005: LD_ADDR_EXP 50
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 112 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 112
12020: EQUAL
12021: IFFALSE 12031
// sStu := true ;
12023: LD_ADDR_EXP 54
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 113 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 113
12038: EQUAL
12039: IFFALSE 12049
// sBazooka := true ;
12041: LD_ADDR_EXP 57
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 114 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 114
12056: EQUAL
12057: IFFALSE 12067
// sMortar := true ;
12059: LD_ADDR_EXP 58
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 115 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 115
12074: EQUAL
12075: IFFALSE 12085
// sRanger := true ;
12077: LD_ADDR_EXP 68
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 116 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 116
12092: EQUAL
12093: IFFALSE 12103
// sComputer := true ;
12095: LD_ADDR_EXP 69
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 117 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 117
12110: EQUAL
12111: IFFALSE 12121
// s30 := true ;
12113: LD_ADDR_EXP 70
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 118 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 118
12128: EQUAL
12129: IFFALSE 12139
// s60 := true ;
12131: LD_ADDR_EXP 71
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// end ; if p2 = hack_mode then
12139: LD_VAR 0 2
12143: PUSH
12144: LD_INT 101
12146: EQUAL
12147: IFFALSE 12275
// begin case p3 of 1 :
12149: LD_VAR 0 3
12153: PUSH
12154: LD_INT 1
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12169
12162: POP
// hHackUnlimitedResources ; 2 :
12163: CALL 24422 0 0
12167: GO 12275
12169: LD_INT 2
12171: DOUBLE
12172: EQUAL
12173: IFTRUE 12177
12175: GO 12184
12177: POP
// hHackSetLevel10 ; 3 :
12178: CALL 24555 0 0
12182: GO 12275
12184: LD_INT 3
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12199
12192: POP
// hHackSetLevel10YourUnits ; 4 :
12193: CALL 24640 0 0
12197: GO 12275
12199: LD_INT 4
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12214
12207: POP
// hHackInvincible ; 5 :
12208: CALL 25088 0 0
12212: GO 12275
12214: LD_INT 5
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12229
12222: POP
// hHackInvisible ; 6 :
12223: CALL 25199 0 0
12227: GO 12275
12229: LD_INT 6
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12244
12237: POP
// hHackChangeYourSide ; 7 :
12238: CALL 25256 0 0
12242: GO 12275
12244: LD_INT 7
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12259
12252: POP
// hHackChangeUnitSide ; 8 :
12253: CALL 25298 0 0
12257: GO 12275
12259: LD_INT 8
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12274
12267: POP
// hHackFog ; end ;
12268: CALL 25399 0 0
12272: GO 12275
12274: POP
// end ; if p2 = game_save_mode then
12275: LD_VAR 0 2
12279: PUSH
12280: LD_INT 102
12282: EQUAL
12283: IFFALSE 12338
// begin if p3 = 1 then
12285: LD_VAR 0 3
12289: PUSH
12290: LD_INT 1
12292: EQUAL
12293: IFFALSE 12305
// globalGameSaveCounter := p4 ;
12295: LD_ADDR_EXP 14
12299: PUSH
12300: LD_VAR 0 4
12304: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 2
12312: EQUAL
12313: PUSH
12314: LD_EXP 14
12318: AND
12319: IFFALSE 12338
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12321: LD_STRING setGameSaveCounter(
12323: PUSH
12324: LD_EXP 14
12328: STR
12329: PUSH
12330: LD_STRING )
12332: STR
12333: PPUSH
12334: CALL_OW 559
// end ; end ;
12338: LD_VAR 0 7
12342: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12343: LD_INT 0
12345: PPUSH
// streamModeActive := false ;
12346: LD_ADDR_EXP 15
12350: PUSH
12351: LD_INT 0
12353: ST_TO_ADDR
// normalCounter := 36 ;
12354: LD_ADDR_EXP 16
12358: PUSH
12359: LD_INT 36
12361: ST_TO_ADDR
// hardcoreCounter := 18 ;
12362: LD_ADDR_EXP 17
12366: PUSH
12367: LD_INT 18
12369: ST_TO_ADDR
// sRocket := false ;
12370: LD_ADDR_EXP 20
12374: PUSH
12375: LD_INT 0
12377: ST_TO_ADDR
// sSpeed := false ;
12378: LD_ADDR_EXP 19
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// sEngine := false ;
12386: LD_ADDR_EXP 21
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// sSpec := false ;
12394: LD_ADDR_EXP 18
12398: PUSH
12399: LD_INT 0
12401: ST_TO_ADDR
// sLevel := false ;
12402: LD_ADDR_EXP 22
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// sArmoury := false ;
12410: LD_ADDR_EXP 23
12414: PUSH
12415: LD_INT 0
12417: ST_TO_ADDR
// sRadar := false ;
12418: LD_ADDR_EXP 24
12422: PUSH
12423: LD_INT 0
12425: ST_TO_ADDR
// sBunker := false ;
12426: LD_ADDR_EXP 25
12430: PUSH
12431: LD_INT 0
12433: ST_TO_ADDR
// sHack := false ;
12434: LD_ADDR_EXP 26
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// sFire := false ;
12442: LD_ADDR_EXP 27
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// sRefresh := false ;
12450: LD_ADDR_EXP 28
12454: PUSH
12455: LD_INT 0
12457: ST_TO_ADDR
// sExp := false ;
12458: LD_ADDR_EXP 29
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// sDepot := false ;
12466: LD_ADDR_EXP 30
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
// sFlag := false ;
12474: LD_ADDR_EXP 31
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// sKamikadze := false ;
12482: LD_ADDR_EXP 39
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// sTroll := false ;
12490: LD_ADDR_EXP 40
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// sSlow := false ;
12498: LD_ADDR_EXP 41
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// sLack := false ;
12506: LD_ADDR_EXP 42
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// sTank := false ;
12514: LD_ADDR_EXP 44
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// sRemote := false ;
12522: LD_ADDR_EXP 45
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// sPowell := false ;
12530: LD_ADDR_EXP 46
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// sTeleport := false ;
12538: LD_ADDR_EXP 49
12542: PUSH
12543: LD_INT 0
12545: ST_TO_ADDR
// sOilTower := false ;
12546: LD_ADDR_EXP 51
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// sShovel := false ;
12554: LD_ADDR_EXP 52
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// sSheik := false ;
12562: LD_ADDR_EXP 53
12566: PUSH
12567: LD_INT 0
12569: ST_TO_ADDR
// sEarthquake := false ;
12570: LD_ADDR_EXP 55
12574: PUSH
12575: LD_INT 0
12577: ST_TO_ADDR
// sAI := false ;
12578: LD_ADDR_EXP 56
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sCargo := false ;
12586: LD_ADDR_EXP 59
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sDLaser := false ;
12594: LD_ADDR_EXP 60
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sExchange := false ;
12602: LD_ADDR_EXP 61
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sFac := false ;
12610: LD_ADDR_EXP 62
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sPower := false ;
12618: LD_ADDR_EXP 63
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sRandom := false ;
12626: LD_ADDR_EXP 64
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sShield := false ;
12634: LD_ADDR_EXP 65
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sTime := false ;
12642: LD_ADDR_EXP 66
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sTools := false ;
12650: LD_ADDR_EXP 67
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sSold := false ;
12658: LD_ADDR_EXP 32
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sDiff := false ;
12666: LD_ADDR_EXP 33
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sFog := false ;
12674: LD_ADDR_EXP 36
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sReset := false ;
12682: LD_ADDR_EXP 37
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sSun := false ;
12690: LD_ADDR_EXP 38
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sTiger := false ;
12698: LD_ADDR_EXP 34
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sBomb := false ;
12706: LD_ADDR_EXP 35
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sWound := false ;
12714: LD_ADDR_EXP 43
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sBetray := false ;
12722: LD_ADDR_EXP 47
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sContamin := false ;
12730: LD_ADDR_EXP 48
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sOil := false ;
12738: LD_ADDR_EXP 50
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sStu := false ;
12746: LD_ADDR_EXP 54
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sBazooka := false ;
12754: LD_ADDR_EXP 57
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sMortar := false ;
12762: LD_ADDR_EXP 58
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sRanger := false ;
12770: LD_ADDR_EXP 68
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sComputer := false ;
12778: LD_ADDR_EXP 69
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// s30 := false ;
12786: LD_ADDR_EXP 70
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// s60 := false ;
12794: LD_ADDR_EXP 71
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// end ;
12802: LD_VAR 0 1
12806: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12807: LD_INT 0
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
12814: PPUSH
12815: PPUSH
// result := [ ] ;
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: EMPTY
12822: ST_TO_ADDR
// if campaign_id = 1 then
12823: LD_OWVAR 69
12827: PUSH
12828: LD_INT 1
12830: EQUAL
12831: IFFALSE 15997
// begin case mission_number of 1 :
12833: LD_OWVAR 70
12837: PUSH
12838: LD_INT 1
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12922
12846: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 4
12857: PUSH
12858: LD_INT 11
12860: PUSH
12861: LD_INT 12
12863: PUSH
12864: LD_INT 15
12866: PUSH
12867: LD_INT 16
12869: PUSH
12870: LD_INT 22
12872: PUSH
12873: LD_INT 23
12875: PUSH
12876: LD_INT 26
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 101
12892: PUSH
12893: LD_INT 102
12895: PUSH
12896: LD_INT 106
12898: PUSH
12899: LD_INT 116
12901: PUSH
12902: LD_INT 117
12904: PUSH
12905: LD_INT 118
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: ST_TO_ADDR
12920: GO 15995
12922: LD_INT 2
12924: DOUBLE
12925: EQUAL
12926: IFTRUE 12930
12928: GO 13014
12930: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_INT 2
12938: PUSH
12939: LD_INT 4
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: LD_INT 12
12947: PUSH
12948: LD_INT 15
12950: PUSH
12951: LD_INT 16
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_INT 23
12959: PUSH
12960: LD_INT 26
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 101
12976: PUSH
12977: LD_INT 102
12979: PUSH
12980: LD_INT 105
12982: PUSH
12983: LD_INT 106
12985: PUSH
12986: LD_INT 108
12988: PUSH
12989: LD_INT 116
12991: PUSH
12992: LD_INT 117
12994: PUSH
12995: LD_INT 118
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: ST_TO_ADDR
13012: GO 15995
13014: LD_INT 3
13016: DOUBLE
13017: EQUAL
13018: IFTRUE 13022
13020: GO 13110
13022: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13023: LD_ADDR_VAR 0 2
13027: PUSH
13028: LD_INT 2
13030: PUSH
13031: LD_INT 4
13033: PUSH
13034: LD_INT 5
13036: PUSH
13037: LD_INT 11
13039: PUSH
13040: LD_INT 12
13042: PUSH
13043: LD_INT 15
13045: PUSH
13046: LD_INT 16
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 36
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 101
13072: PUSH
13073: LD_INT 102
13075: PUSH
13076: LD_INT 105
13078: PUSH
13079: LD_INT 106
13081: PUSH
13082: LD_INT 108
13084: PUSH
13085: LD_INT 116
13087: PUSH
13088: LD_INT 117
13090: PUSH
13091: LD_INT 118
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 15995
13110: LD_INT 4
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13214
13118: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13119: LD_ADDR_VAR 0 2
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: LD_INT 4
13129: PUSH
13130: LD_INT 5
13132: PUSH
13133: LD_INT 8
13135: PUSH
13136: LD_INT 11
13138: PUSH
13139: LD_INT 12
13141: PUSH
13142: LD_INT 15
13144: PUSH
13145: LD_INT 16
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_INT 23
13153: PUSH
13154: LD_INT 26
13156: PUSH
13157: LD_INT 36
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 101
13176: PUSH
13177: LD_INT 102
13179: PUSH
13180: LD_INT 105
13182: PUSH
13183: LD_INT 106
13185: PUSH
13186: LD_INT 108
13188: PUSH
13189: LD_INT 116
13191: PUSH
13192: LD_INT 117
13194: PUSH
13195: LD_INT 118
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: ST_TO_ADDR
13212: GO 15995
13214: LD_INT 5
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13334
13222: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13223: LD_ADDR_VAR 0 2
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 4
13233: PUSH
13234: LD_INT 5
13236: PUSH
13237: LD_INT 6
13239: PUSH
13240: LD_INT 8
13242: PUSH
13243: LD_INT 11
13245: PUSH
13246: LD_INT 12
13248: PUSH
13249: LD_INT 15
13251: PUSH
13252: LD_INT 16
13254: PUSH
13255: LD_INT 22
13257: PUSH
13258: LD_INT 23
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 26
13266: PUSH
13267: LD_INT 36
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 105
13294: PUSH
13295: LD_INT 106
13297: PUSH
13298: LD_INT 108
13300: PUSH
13301: LD_INT 109
13303: PUSH
13304: LD_INT 112
13306: PUSH
13307: LD_INT 116
13309: PUSH
13310: LD_INT 117
13312: PUSH
13313: LD_INT 118
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: ST_TO_ADDR
13332: GO 15995
13334: LD_INT 6
13336: DOUBLE
13337: EQUAL
13338: IFTRUE 13342
13340: GO 13474
13342: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13343: LD_ADDR_VAR 0 2
13347: PUSH
13348: LD_INT 2
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: LD_INT 5
13356: PUSH
13357: LD_INT 6
13359: PUSH
13360: LD_INT 8
13362: PUSH
13363: LD_INT 11
13365: PUSH
13366: LD_INT 12
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 20
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_INT 23
13386: PUSH
13387: LD_INT 25
13389: PUSH
13390: LD_INT 26
13392: PUSH
13393: LD_INT 30
13395: PUSH
13396: LD_INT 31
13398: PUSH
13399: LD_INT 32
13401: PUSH
13402: LD_INT 36
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 101
13428: PUSH
13429: LD_INT 102
13431: PUSH
13432: LD_INT 105
13434: PUSH
13435: LD_INT 106
13437: PUSH
13438: LD_INT 108
13440: PUSH
13441: LD_INT 109
13443: PUSH
13444: LD_INT 112
13446: PUSH
13447: LD_INT 116
13449: PUSH
13450: LD_INT 117
13452: PUSH
13453: LD_INT 118
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
13472: GO 15995
13474: LD_INT 7
13476: DOUBLE
13477: EQUAL
13478: IFTRUE 13482
13480: GO 13594
13482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13483: LD_ADDR_VAR 0 2
13487: PUSH
13488: LD_INT 2
13490: PUSH
13491: LD_INT 4
13493: PUSH
13494: LD_INT 5
13496: PUSH
13497: LD_INT 7
13499: PUSH
13500: LD_INT 11
13502: PUSH
13503: LD_INT 12
13505: PUSH
13506: LD_INT 15
13508: PUSH
13509: LD_INT 16
13511: PUSH
13512: LD_INT 20
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 23
13523: PUSH
13524: LD_INT 25
13526: PUSH
13527: LD_INT 26
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 101
13548: PUSH
13549: LD_INT 102
13551: PUSH
13552: LD_INT 103
13554: PUSH
13555: LD_INT 105
13557: PUSH
13558: LD_INT 106
13560: PUSH
13561: LD_INT 108
13563: PUSH
13564: LD_INT 112
13566: PUSH
13567: LD_INT 116
13569: PUSH
13570: LD_INT 117
13572: PUSH
13573: LD_INT 118
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 15995
13594: LD_INT 8
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13742
13602: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 4
13613: PUSH
13614: LD_INT 5
13616: PUSH
13617: LD_INT 6
13619: PUSH
13620: LD_INT 7
13622: PUSH
13623: LD_INT 8
13625: PUSH
13626: LD_INT 11
13628: PUSH
13629: LD_INT 12
13631: PUSH
13632: LD_INT 15
13634: PUSH
13635: LD_INT 16
13637: PUSH
13638: LD_INT 20
13640: PUSH
13641: LD_INT 21
13643: PUSH
13644: LD_INT 22
13646: PUSH
13647: LD_INT 23
13649: PUSH
13650: LD_INT 25
13652: PUSH
13653: LD_INT 26
13655: PUSH
13656: LD_INT 30
13658: PUSH
13659: LD_INT 31
13661: PUSH
13662: LD_INT 32
13664: PUSH
13665: LD_INT 36
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 101
13692: PUSH
13693: LD_INT 102
13695: PUSH
13696: LD_INT 103
13698: PUSH
13699: LD_INT 105
13701: PUSH
13702: LD_INT 106
13704: PUSH
13705: LD_INT 108
13707: PUSH
13708: LD_INT 109
13710: PUSH
13711: LD_INT 112
13713: PUSH
13714: LD_INT 116
13716: PUSH
13717: LD_INT 117
13719: PUSH
13720: LD_INT 118
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: ST_TO_ADDR
13740: GO 15995
13742: LD_INT 9
13744: DOUBLE
13745: EQUAL
13746: IFTRUE 13750
13748: GO 13898
13750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: LD_INT 4
13761: PUSH
13762: LD_INT 5
13764: PUSH
13765: LD_INT 6
13767: PUSH
13768: LD_INT 7
13770: PUSH
13771: LD_INT 8
13773: PUSH
13774: LD_INT 11
13776: PUSH
13777: LD_INT 12
13779: PUSH
13780: LD_INT 15
13782: PUSH
13783: LD_INT 16
13785: PUSH
13786: LD_INT 20
13788: PUSH
13789: LD_INT 21
13791: PUSH
13792: LD_INT 22
13794: PUSH
13795: LD_INT 23
13797: PUSH
13798: LD_INT 25
13800: PUSH
13801: LD_INT 26
13803: PUSH
13804: LD_INT 28
13806: PUSH
13807: LD_INT 30
13809: PUSH
13810: LD_INT 31
13812: PUSH
13813: LD_INT 32
13815: PUSH
13816: LD_INT 36
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 101
13844: PUSH
13845: LD_INT 102
13847: PUSH
13848: LD_INT 103
13850: PUSH
13851: LD_INT 105
13853: PUSH
13854: LD_INT 106
13856: PUSH
13857: LD_INT 108
13859: PUSH
13860: LD_INT 109
13862: PUSH
13863: LD_INT 112
13865: PUSH
13866: LD_INT 114
13868: PUSH
13869: LD_INT 116
13871: PUSH
13872: LD_INT 117
13874: PUSH
13875: LD_INT 118
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: ST_TO_ADDR
13896: GO 15995
13898: LD_INT 10
13900: DOUBLE
13901: EQUAL
13902: IFTRUE 13906
13904: GO 14102
13906: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13907: LD_ADDR_VAR 0 2
13911: PUSH
13912: LD_INT 2
13914: PUSH
13915: LD_INT 4
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: LD_INT 6
13923: PUSH
13924: LD_INT 7
13926: PUSH
13927: LD_INT 8
13929: PUSH
13930: LD_INT 9
13932: PUSH
13933: LD_INT 10
13935: PUSH
13936: LD_INT 11
13938: PUSH
13939: LD_INT 12
13941: PUSH
13942: LD_INT 13
13944: PUSH
13945: LD_INT 14
13947: PUSH
13948: LD_INT 15
13950: PUSH
13951: LD_INT 16
13953: PUSH
13954: LD_INT 17
13956: PUSH
13957: LD_INT 18
13959: PUSH
13960: LD_INT 19
13962: PUSH
13963: LD_INT 20
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 22
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 24
13977: PUSH
13978: LD_INT 25
13980: PUSH
13981: LD_INT 26
13983: PUSH
13984: LD_INT 28
13986: PUSH
13987: LD_INT 30
13989: PUSH
13990: LD_INT 31
13992: PUSH
13993: LD_INT 32
13995: PUSH
13996: LD_INT 36
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 101
14032: PUSH
14033: LD_INT 102
14035: PUSH
14036: LD_INT 103
14038: PUSH
14039: LD_INT 104
14041: PUSH
14042: LD_INT 105
14044: PUSH
14045: LD_INT 106
14047: PUSH
14048: LD_INT 107
14050: PUSH
14051: LD_INT 108
14053: PUSH
14054: LD_INT 109
14056: PUSH
14057: LD_INT 110
14059: PUSH
14060: LD_INT 111
14062: PUSH
14063: LD_INT 112
14065: PUSH
14066: LD_INT 114
14068: PUSH
14069: LD_INT 116
14071: PUSH
14072: LD_INT 117
14074: PUSH
14075: LD_INT 118
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: ST_TO_ADDR
14100: GO 15995
14102: LD_INT 11
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14314
14110: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: LD_INT 5
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 7
14133: PUSH
14134: LD_INT 8
14136: PUSH
14137: LD_INT 9
14139: PUSH
14140: LD_INT 10
14142: PUSH
14143: LD_INT 11
14145: PUSH
14146: LD_INT 12
14148: PUSH
14149: LD_INT 13
14151: PUSH
14152: LD_INT 14
14154: PUSH
14155: LD_INT 15
14157: PUSH
14158: LD_INT 16
14160: PUSH
14161: LD_INT 17
14163: PUSH
14164: LD_INT 18
14166: PUSH
14167: LD_INT 19
14169: PUSH
14170: LD_INT 20
14172: PUSH
14173: LD_INT 21
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_INT 23
14181: PUSH
14182: LD_INT 24
14184: PUSH
14185: LD_INT 25
14187: PUSH
14188: LD_INT 26
14190: PUSH
14191: LD_INT 28
14193: PUSH
14194: LD_INT 30
14196: PUSH
14197: LD_INT 31
14199: PUSH
14200: LD_INT 32
14202: PUSH
14203: LD_INT 34
14205: PUSH
14206: LD_INT 36
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 101
14244: PUSH
14245: LD_INT 102
14247: PUSH
14248: LD_INT 103
14250: PUSH
14251: LD_INT 104
14253: PUSH
14254: LD_INT 105
14256: PUSH
14257: LD_INT 106
14259: PUSH
14260: LD_INT 107
14262: PUSH
14263: LD_INT 108
14265: PUSH
14266: LD_INT 109
14268: PUSH
14269: LD_INT 110
14271: PUSH
14272: LD_INT 111
14274: PUSH
14275: LD_INT 112
14277: PUSH
14278: LD_INT 114
14280: PUSH
14281: LD_INT 116
14283: PUSH
14284: LD_INT 117
14286: PUSH
14287: LD_INT 118
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: ST_TO_ADDR
14312: GO 15995
14314: LD_INT 12
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 14542
14322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 4
14339: PUSH
14340: LD_INT 5
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: LD_INT 7
14348: PUSH
14349: LD_INT 8
14351: PUSH
14352: LD_INT 9
14354: PUSH
14355: LD_INT 10
14357: PUSH
14358: LD_INT 11
14360: PUSH
14361: LD_INT 12
14363: PUSH
14364: LD_INT 13
14366: PUSH
14367: LD_INT 14
14369: PUSH
14370: LD_INT 15
14372: PUSH
14373: LD_INT 16
14375: PUSH
14376: LD_INT 17
14378: PUSH
14379: LD_INT 18
14381: PUSH
14382: LD_INT 19
14384: PUSH
14385: LD_INT 20
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 26
14405: PUSH
14406: LD_INT 27
14408: PUSH
14409: LD_INT 28
14411: PUSH
14412: LD_INT 30
14414: PUSH
14415: LD_INT 31
14417: PUSH
14418: LD_INT 32
14420: PUSH
14421: LD_INT 33
14423: PUSH
14424: LD_INT 34
14426: PUSH
14427: LD_INT 36
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 101
14468: PUSH
14469: LD_INT 102
14471: PUSH
14472: LD_INT 103
14474: PUSH
14475: LD_INT 104
14477: PUSH
14478: LD_INT 105
14480: PUSH
14481: LD_INT 106
14483: PUSH
14484: LD_INT 107
14486: PUSH
14487: LD_INT 108
14489: PUSH
14490: LD_INT 109
14492: PUSH
14493: LD_INT 110
14495: PUSH
14496: LD_INT 111
14498: PUSH
14499: LD_INT 112
14501: PUSH
14502: LD_INT 113
14504: PUSH
14505: LD_INT 114
14507: PUSH
14508: LD_INT 116
14510: PUSH
14511: LD_INT 117
14513: PUSH
14514: LD_INT 118
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 15995
14542: LD_INT 13
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14758
14550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: LD_INT 1
14558: PUSH
14559: LD_INT 2
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: LD_INT 4
14567: PUSH
14568: LD_INT 5
14570: PUSH
14571: LD_INT 8
14573: PUSH
14574: LD_INT 9
14576: PUSH
14577: LD_INT 10
14579: PUSH
14580: LD_INT 11
14582: PUSH
14583: LD_INT 12
14585: PUSH
14586: LD_INT 14
14588: PUSH
14589: LD_INT 15
14591: PUSH
14592: LD_INT 16
14594: PUSH
14595: LD_INT 17
14597: PUSH
14598: LD_INT 18
14600: PUSH
14601: LD_INT 19
14603: PUSH
14604: LD_INT 20
14606: PUSH
14607: LD_INT 21
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 23
14615: PUSH
14616: LD_INT 24
14618: PUSH
14619: LD_INT 25
14621: PUSH
14622: LD_INT 26
14624: PUSH
14625: LD_INT 27
14627: PUSH
14628: LD_INT 28
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: LD_INT 32
14639: PUSH
14640: LD_INT 33
14642: PUSH
14643: LD_INT 34
14645: PUSH
14646: LD_INT 36
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 101
14684: PUSH
14685: LD_INT 102
14687: PUSH
14688: LD_INT 103
14690: PUSH
14691: LD_INT 104
14693: PUSH
14694: LD_INT 105
14696: PUSH
14697: LD_INT 106
14699: PUSH
14700: LD_INT 107
14702: PUSH
14703: LD_INT 108
14705: PUSH
14706: LD_INT 109
14708: PUSH
14709: LD_INT 110
14711: PUSH
14712: LD_INT 111
14714: PUSH
14715: LD_INT 112
14717: PUSH
14718: LD_INT 113
14720: PUSH
14721: LD_INT 114
14723: PUSH
14724: LD_INT 116
14726: PUSH
14727: LD_INT 117
14729: PUSH
14730: LD_INT 118
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 15995
14758: LD_INT 14
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14990
14766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: LD_INT 3
14780: PUSH
14781: LD_INT 4
14783: PUSH
14784: LD_INT 5
14786: PUSH
14787: LD_INT 6
14789: PUSH
14790: LD_INT 7
14792: PUSH
14793: LD_INT 8
14795: PUSH
14796: LD_INT 9
14798: PUSH
14799: LD_INT 10
14801: PUSH
14802: LD_INT 11
14804: PUSH
14805: LD_INT 12
14807: PUSH
14808: LD_INT 13
14810: PUSH
14811: LD_INT 14
14813: PUSH
14814: LD_INT 15
14816: PUSH
14817: LD_INT 16
14819: PUSH
14820: LD_INT 17
14822: PUSH
14823: LD_INT 18
14825: PUSH
14826: LD_INT 19
14828: PUSH
14829: LD_INT 20
14831: PUSH
14832: LD_INT 21
14834: PUSH
14835: LD_INT 22
14837: PUSH
14838: LD_INT 23
14840: PUSH
14841: LD_INT 24
14843: PUSH
14844: LD_INT 25
14846: PUSH
14847: LD_INT 26
14849: PUSH
14850: LD_INT 27
14852: PUSH
14853: LD_INT 28
14855: PUSH
14856: LD_INT 29
14858: PUSH
14859: LD_INT 30
14861: PUSH
14862: LD_INT 31
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: LD_INT 33
14870: PUSH
14871: LD_INT 34
14873: PUSH
14874: LD_INT 36
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 101
14916: PUSH
14917: LD_INT 102
14919: PUSH
14920: LD_INT 103
14922: PUSH
14923: LD_INT 104
14925: PUSH
14926: LD_INT 105
14928: PUSH
14929: LD_INT 106
14931: PUSH
14932: LD_INT 107
14934: PUSH
14935: LD_INT 108
14937: PUSH
14938: LD_INT 109
14940: PUSH
14941: LD_INT 110
14943: PUSH
14944: LD_INT 111
14946: PUSH
14947: LD_INT 112
14949: PUSH
14950: LD_INT 113
14952: PUSH
14953: LD_INT 114
14955: PUSH
14956: LD_INT 116
14958: PUSH
14959: LD_INT 117
14961: PUSH
14962: LD_INT 118
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: ST_TO_ADDR
14988: GO 15995
14990: LD_INT 15
14992: DOUBLE
14993: EQUAL
14994: IFTRUE 14998
14996: GO 15222
14998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: LD_INT 2
15009: PUSH
15010: LD_INT 3
15012: PUSH
15013: LD_INT 4
15015: PUSH
15016: LD_INT 5
15018: PUSH
15019: LD_INT 6
15021: PUSH
15022: LD_INT 7
15024: PUSH
15025: LD_INT 8
15027: PUSH
15028: LD_INT 9
15030: PUSH
15031: LD_INT 10
15033: PUSH
15034: LD_INT 11
15036: PUSH
15037: LD_INT 12
15039: PUSH
15040: LD_INT 13
15042: PUSH
15043: LD_INT 14
15045: PUSH
15046: LD_INT 15
15048: PUSH
15049: LD_INT 16
15051: PUSH
15052: LD_INT 17
15054: PUSH
15055: LD_INT 18
15057: PUSH
15058: LD_INT 19
15060: PUSH
15061: LD_INT 20
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 22
15069: PUSH
15070: LD_INT 23
15072: PUSH
15073: LD_INT 24
15075: PUSH
15076: LD_INT 25
15078: PUSH
15079: LD_INT 26
15081: PUSH
15082: LD_INT 27
15084: PUSH
15085: LD_INT 28
15087: PUSH
15088: LD_INT 29
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: LD_INT 34
15105: PUSH
15106: LD_INT 36
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 101
15148: PUSH
15149: LD_INT 102
15151: PUSH
15152: LD_INT 103
15154: PUSH
15155: LD_INT 104
15157: PUSH
15158: LD_INT 105
15160: PUSH
15161: LD_INT 106
15163: PUSH
15164: LD_INT 107
15166: PUSH
15167: LD_INT 108
15169: PUSH
15170: LD_INT 109
15172: PUSH
15173: LD_INT 110
15175: PUSH
15176: LD_INT 111
15178: PUSH
15179: LD_INT 112
15181: PUSH
15182: LD_INT 113
15184: PUSH
15185: LD_INT 114
15187: PUSH
15188: LD_INT 116
15190: PUSH
15191: LD_INT 117
15193: PUSH
15194: LD_INT 118
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: ST_TO_ADDR
15220: GO 15995
15222: LD_INT 16
15224: DOUBLE
15225: EQUAL
15226: IFTRUE 15230
15228: GO 15366
15230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15231: LD_ADDR_VAR 0 2
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: LD_INT 4
15241: PUSH
15242: LD_INT 5
15244: PUSH
15245: LD_INT 7
15247: PUSH
15248: LD_INT 11
15250: PUSH
15251: LD_INT 12
15253: PUSH
15254: LD_INT 15
15256: PUSH
15257: LD_INT 16
15259: PUSH
15260: LD_INT 20
15262: PUSH
15263: LD_INT 21
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_INT 23
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 26
15277: PUSH
15278: LD_INT 30
15280: PUSH
15281: LD_INT 31
15283: PUSH
15284: LD_INT 32
15286: PUSH
15287: LD_INT 33
15289: PUSH
15290: LD_INT 34
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 106
15325: PUSH
15326: LD_INT 108
15328: PUSH
15329: LD_INT 112
15331: PUSH
15332: LD_INT 113
15334: PUSH
15335: LD_INT 114
15337: PUSH
15338: LD_INT 116
15340: PUSH
15341: LD_INT 117
15343: PUSH
15344: LD_INT 118
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
15364: GO 15995
15366: LD_INT 17
15368: DOUBLE
15369: EQUAL
15370: IFTRUE 15374
15372: GO 15598
15374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 4
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: LD_INT 6
15397: PUSH
15398: LD_INT 7
15400: PUSH
15401: LD_INT 8
15403: PUSH
15404: LD_INT 9
15406: PUSH
15407: LD_INT 10
15409: PUSH
15410: LD_INT 11
15412: PUSH
15413: LD_INT 12
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 15
15424: PUSH
15425: LD_INT 16
15427: PUSH
15428: LD_INT 17
15430: PUSH
15431: LD_INT 18
15433: PUSH
15434: LD_INT 19
15436: PUSH
15437: LD_INT 20
15439: PUSH
15440: LD_INT 21
15442: PUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 23
15448: PUSH
15449: LD_INT 24
15451: PUSH
15452: LD_INT 25
15454: PUSH
15455: LD_INT 26
15457: PUSH
15458: LD_INT 27
15460: PUSH
15461: LD_INT 28
15463: PUSH
15464: LD_INT 29
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 31
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 33
15478: PUSH
15479: LD_INT 34
15481: PUSH
15482: LD_INT 36
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 101
15524: PUSH
15525: LD_INT 102
15527: PUSH
15528: LD_INT 103
15530: PUSH
15531: LD_INT 104
15533: PUSH
15534: LD_INT 105
15536: PUSH
15537: LD_INT 106
15539: PUSH
15540: LD_INT 107
15542: PUSH
15543: LD_INT 108
15545: PUSH
15546: LD_INT 109
15548: PUSH
15549: LD_INT 110
15551: PUSH
15552: LD_INT 111
15554: PUSH
15555: LD_INT 112
15557: PUSH
15558: LD_INT 113
15560: PUSH
15561: LD_INT 114
15563: PUSH
15564: LD_INT 116
15566: PUSH
15567: LD_INT 117
15569: PUSH
15570: LD_INT 118
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 15995
15598: LD_INT 18
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15754
15606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: LD_INT 7
15623: PUSH
15624: LD_INT 11
15626: PUSH
15627: LD_INT 12
15629: PUSH
15630: LD_INT 15
15632: PUSH
15633: LD_INT 16
15635: PUSH
15636: LD_INT 20
15638: PUSH
15639: LD_INT 21
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_INT 23
15647: PUSH
15648: LD_INT 25
15650: PUSH
15651: LD_INT 26
15653: PUSH
15654: LD_INT 30
15656: PUSH
15657: LD_INT 31
15659: PUSH
15660: LD_INT 32
15662: PUSH
15663: LD_INT 33
15665: PUSH
15666: LD_INT 34
15668: PUSH
15669: LD_INT 35
15671: PUSH
15672: LD_INT 36
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 101
15700: PUSH
15701: LD_INT 102
15703: PUSH
15704: LD_INT 103
15706: PUSH
15707: LD_INT 106
15709: PUSH
15710: LD_INT 108
15712: PUSH
15713: LD_INT 112
15715: PUSH
15716: LD_INT 113
15718: PUSH
15719: LD_INT 114
15721: PUSH
15722: LD_INT 115
15724: PUSH
15725: LD_INT 116
15727: PUSH
15728: LD_INT 117
15730: PUSH
15731: LD_INT 118
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: ST_TO_ADDR
15752: GO 15995
15754: LD_INT 19
15756: DOUBLE
15757: EQUAL
15758: IFTRUE 15762
15760: GO 15994
15762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15763: LD_ADDR_VAR 0 2
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 4
15779: PUSH
15780: LD_INT 5
15782: PUSH
15783: LD_INT 6
15785: PUSH
15786: LD_INT 7
15788: PUSH
15789: LD_INT 8
15791: PUSH
15792: LD_INT 9
15794: PUSH
15795: LD_INT 10
15797: PUSH
15798: LD_INT 11
15800: PUSH
15801: LD_INT 12
15803: PUSH
15804: LD_INT 13
15806: PUSH
15807: LD_INT 14
15809: PUSH
15810: LD_INT 15
15812: PUSH
15813: LD_INT 16
15815: PUSH
15816: LD_INT 17
15818: PUSH
15819: LD_INT 18
15821: PUSH
15822: LD_INT 19
15824: PUSH
15825: LD_INT 20
15827: PUSH
15828: LD_INT 21
15830: PUSH
15831: LD_INT 22
15833: PUSH
15834: LD_INT 23
15836: PUSH
15837: LD_INT 24
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 26
15845: PUSH
15846: LD_INT 27
15848: PUSH
15849: LD_INT 28
15851: PUSH
15852: LD_INT 29
15854: PUSH
15855: LD_INT 30
15857: PUSH
15858: LD_INT 31
15860: PUSH
15861: LD_INT 32
15863: PUSH
15864: LD_INT 33
15866: PUSH
15867: LD_INT 34
15869: PUSH
15870: LD_INT 35
15872: PUSH
15873: LD_INT 36
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 101
15916: PUSH
15917: LD_INT 102
15919: PUSH
15920: LD_INT 103
15922: PUSH
15923: LD_INT 104
15925: PUSH
15926: LD_INT 105
15928: PUSH
15929: LD_INT 106
15931: PUSH
15932: LD_INT 107
15934: PUSH
15935: LD_INT 108
15937: PUSH
15938: LD_INT 109
15940: PUSH
15941: LD_INT 110
15943: PUSH
15944: LD_INT 111
15946: PUSH
15947: LD_INT 112
15949: PUSH
15950: LD_INT 113
15952: PUSH
15953: LD_INT 114
15955: PUSH
15956: LD_INT 115
15958: PUSH
15959: LD_INT 116
15961: PUSH
15962: LD_INT 117
15964: PUSH
15965: LD_INT 118
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 15995
15994: POP
// end else
15995: GO 16226
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15997: LD_ADDR_VAR 0 2
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: LD_INT 2
16007: PUSH
16008: LD_INT 3
16010: PUSH
16011: LD_INT 4
16013: PUSH
16014: LD_INT 5
16016: PUSH
16017: LD_INT 6
16019: PUSH
16020: LD_INT 7
16022: PUSH
16023: LD_INT 8
16025: PUSH
16026: LD_INT 9
16028: PUSH
16029: LD_INT 10
16031: PUSH
16032: LD_INT 11
16034: PUSH
16035: LD_INT 12
16037: PUSH
16038: LD_INT 13
16040: PUSH
16041: LD_INT 14
16043: PUSH
16044: LD_INT 15
16046: PUSH
16047: LD_INT 16
16049: PUSH
16050: LD_INT 17
16052: PUSH
16053: LD_INT 18
16055: PUSH
16056: LD_INT 19
16058: PUSH
16059: LD_INT 20
16061: PUSH
16062: LD_INT 21
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_INT 23
16070: PUSH
16071: LD_INT 24
16073: PUSH
16074: LD_INT 25
16076: PUSH
16077: LD_INT 26
16079: PUSH
16080: LD_INT 27
16082: PUSH
16083: LD_INT 28
16085: PUSH
16086: LD_INT 29
16088: PUSH
16089: LD_INT 30
16091: PUSH
16092: LD_INT 31
16094: PUSH
16095: LD_INT 32
16097: PUSH
16098: LD_INT 33
16100: PUSH
16101: LD_INT 34
16103: PUSH
16104: LD_INT 35
16106: PUSH
16107: LD_INT 36
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 101
16150: PUSH
16151: LD_INT 102
16153: PUSH
16154: LD_INT 103
16156: PUSH
16157: LD_INT 104
16159: PUSH
16160: LD_INT 105
16162: PUSH
16163: LD_INT 106
16165: PUSH
16166: LD_INT 107
16168: PUSH
16169: LD_INT 108
16171: PUSH
16172: LD_INT 109
16174: PUSH
16175: LD_INT 110
16177: PUSH
16178: LD_INT 111
16180: PUSH
16181: LD_INT 112
16183: PUSH
16184: LD_INT 113
16186: PUSH
16187: LD_INT 114
16189: PUSH
16190: LD_INT 115
16192: PUSH
16193: LD_INT 116
16195: PUSH
16196: LD_INT 117
16198: PUSH
16199: LD_INT 118
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: ST_TO_ADDR
// if result then
16226: LD_VAR 0 2
16230: IFFALSE 17016
// begin normal :=  ;
16232: LD_ADDR_VAR 0 5
16236: PUSH
16237: LD_STRING 
16239: ST_TO_ADDR
// hardcore :=  ;
16240: LD_ADDR_VAR 0 6
16244: PUSH
16245: LD_STRING 
16247: ST_TO_ADDR
// active :=  ;
16248: LD_ADDR_VAR 0 7
16252: PUSH
16253: LD_STRING 
16255: ST_TO_ADDR
// for i = 1 to normalCounter do
16256: LD_ADDR_VAR 0 8
16260: PUSH
16261: DOUBLE
16262: LD_INT 1
16264: DEC
16265: ST_TO_ADDR
16266: LD_EXP 16
16270: PUSH
16271: FOR_TO
16272: IFFALSE 16373
// begin tmp := 0 ;
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_STRING 0
16281: ST_TO_ADDR
// if result [ 1 ] then
16282: LD_VAR 0 2
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: IFFALSE 16355
// if result [ 1 ] [ 1 ] = i then
16292: LD_VAR 0 2
16296: PUSH
16297: LD_INT 1
16299: ARRAY
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PUSH
16305: LD_VAR 0 8
16309: EQUAL
16310: IFFALSE 16355
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16312: LD_ADDR_VAR 0 2
16316: PUSH
16317: LD_VAR 0 2
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: LD_VAR 0 2
16329: PUSH
16330: LD_INT 1
16332: ARRAY
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: CALL_OW 3
16341: PPUSH
16342: CALL_OW 1
16346: ST_TO_ADDR
// tmp := 1 ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_STRING 1
16354: ST_TO_ADDR
// end ; normal := normal & tmp ;
16355: LD_ADDR_VAR 0 5
16359: PUSH
16360: LD_VAR 0 5
16364: PUSH
16365: LD_VAR 0 3
16369: STR
16370: ST_TO_ADDR
// end ;
16371: GO 16271
16373: POP
16374: POP
// for i = 1 to hardcoreCounter do
16375: LD_ADDR_VAR 0 8
16379: PUSH
16380: DOUBLE
16381: LD_INT 1
16383: DEC
16384: ST_TO_ADDR
16385: LD_EXP 17
16389: PUSH
16390: FOR_TO
16391: IFFALSE 16496
// begin tmp := 0 ;
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_STRING 0
16400: ST_TO_ADDR
// if result [ 2 ] then
16401: LD_VAR 0 2
16405: PUSH
16406: LD_INT 2
16408: ARRAY
16409: IFFALSE 16478
// if result [ 2 ] [ 1 ] = 100 + i then
16411: LD_VAR 0 2
16415: PUSH
16416: LD_INT 2
16418: ARRAY
16419: PUSH
16420: LD_INT 1
16422: ARRAY
16423: PUSH
16424: LD_INT 100
16426: PUSH
16427: LD_VAR 0 8
16431: PLUS
16432: EQUAL
16433: IFFALSE 16478
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16435: LD_ADDR_VAR 0 2
16439: PUSH
16440: LD_VAR 0 2
16444: PPUSH
16445: LD_INT 2
16447: PPUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 2
16455: ARRAY
16456: PPUSH
16457: LD_INT 1
16459: PPUSH
16460: CALL_OW 3
16464: PPUSH
16465: CALL_OW 1
16469: ST_TO_ADDR
// tmp := 1 ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_STRING 1
16477: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_VAR 0 6
16487: PUSH
16488: LD_VAR 0 3
16492: STR
16493: ST_TO_ADDR
// end ;
16494: GO 16390
16496: POP
16497: POP
// if isGameLoad then
16498: LD_VAR 0 1
16502: IFFALSE 16977
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16504: LD_ADDR_VAR 0 4
16508: PUSH
16509: LD_EXP 20
16513: PUSH
16514: LD_EXP 19
16518: PUSH
16519: LD_EXP 21
16523: PUSH
16524: LD_EXP 18
16528: PUSH
16529: LD_EXP 22
16533: PUSH
16534: LD_EXP 23
16538: PUSH
16539: LD_EXP 24
16543: PUSH
16544: LD_EXP 25
16548: PUSH
16549: LD_EXP 26
16553: PUSH
16554: LD_EXP 27
16558: PUSH
16559: LD_EXP 28
16563: PUSH
16564: LD_EXP 29
16568: PUSH
16569: LD_EXP 30
16573: PUSH
16574: LD_EXP 31
16578: PUSH
16579: LD_EXP 39
16583: PUSH
16584: LD_EXP 40
16588: PUSH
16589: LD_EXP 41
16593: PUSH
16594: LD_EXP 42
16598: PUSH
16599: LD_EXP 44
16603: PUSH
16604: LD_EXP 45
16608: PUSH
16609: LD_EXP 46
16613: PUSH
16614: LD_EXP 49
16618: PUSH
16619: LD_EXP 51
16623: PUSH
16624: LD_EXP 52
16628: PUSH
16629: LD_EXP 53
16633: PUSH
16634: LD_EXP 55
16638: PUSH
16639: LD_EXP 56
16643: PUSH
16644: LD_EXP 59
16648: PUSH
16649: LD_EXP 60
16653: PUSH
16654: LD_EXP 61
16658: PUSH
16659: LD_EXP 62
16663: PUSH
16664: LD_EXP 63
16668: PUSH
16669: LD_EXP 64
16673: PUSH
16674: LD_EXP 65
16678: PUSH
16679: LD_EXP 66
16683: PUSH
16684: LD_EXP 67
16688: PUSH
16689: LD_EXP 32
16693: PUSH
16694: LD_EXP 33
16698: PUSH
16699: LD_EXP 36
16703: PUSH
16704: LD_EXP 37
16708: PUSH
16709: LD_EXP 38
16713: PUSH
16714: LD_EXP 34
16718: PUSH
16719: LD_EXP 35
16723: PUSH
16724: LD_EXP 43
16728: PUSH
16729: LD_EXP 47
16733: PUSH
16734: LD_EXP 48
16738: PUSH
16739: LD_EXP 50
16743: PUSH
16744: LD_EXP 54
16748: PUSH
16749: LD_EXP 57
16753: PUSH
16754: LD_EXP 58
16758: PUSH
16759: LD_EXP 68
16763: PUSH
16764: LD_EXP 69
16768: PUSH
16769: LD_EXP 70
16773: PUSH
16774: LD_EXP 71
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: ST_TO_ADDR
// tmp :=  ;
16835: LD_ADDR_VAR 0 3
16839: PUSH
16840: LD_STRING 
16842: ST_TO_ADDR
// for i = 1 to normalCounter do
16843: LD_ADDR_VAR 0 8
16847: PUSH
16848: DOUBLE
16849: LD_INT 1
16851: DEC
16852: ST_TO_ADDR
16853: LD_EXP 16
16857: PUSH
16858: FOR_TO
16859: IFFALSE 16895
// begin if flags [ i ] then
16861: LD_VAR 0 4
16865: PUSH
16866: LD_VAR 0 8
16870: ARRAY
16871: IFFALSE 16893
// tmp := tmp & i & ; ;
16873: LD_ADDR_VAR 0 3
16877: PUSH
16878: LD_VAR 0 3
16882: PUSH
16883: LD_VAR 0 8
16887: STR
16888: PUSH
16889: LD_STRING ;
16891: STR
16892: ST_TO_ADDR
// end ;
16893: GO 16858
16895: POP
16896: POP
// for i = 1 to hardcoreCounter do
16897: LD_ADDR_VAR 0 8
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_EXP 17
16911: PUSH
16912: FOR_TO
16913: IFFALSE 16959
// begin if flags [ normalCounter + i ] then
16915: LD_VAR 0 4
16919: PUSH
16920: LD_EXP 16
16924: PUSH
16925: LD_VAR 0 8
16929: PLUS
16930: ARRAY
16931: IFFALSE 16957
// tmp := tmp & ( 100 + i ) & ; ;
16933: LD_ADDR_VAR 0 3
16937: PUSH
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 100
16945: PUSH
16946: LD_VAR 0 8
16950: PLUS
16951: STR
16952: PUSH
16953: LD_STRING ;
16955: STR
16956: ST_TO_ADDR
// end ;
16957: GO 16912
16959: POP
16960: POP
// if tmp then
16961: LD_VAR 0 3
16965: IFFALSE 16977
// active := tmp ;
16967: LD_ADDR_VAR 0 7
16971: PUSH
16972: LD_VAR 0 3
16976: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16977: LD_STRING getStreamItemsFromMission("
16979: PUSH
16980: LD_VAR 0 5
16984: STR
16985: PUSH
16986: LD_STRING ","
16988: STR
16989: PUSH
16990: LD_VAR 0 6
16994: STR
16995: PUSH
16996: LD_STRING ","
16998: STR
16999: PUSH
17000: LD_VAR 0 7
17004: STR
17005: PUSH
17006: LD_STRING ")
17008: STR
17009: PPUSH
17010: CALL_OW 559
// end else
17014: GO 17023
// ToLua ( getStreamItemsFromMission("","","") ) ;
17016: LD_STRING getStreamItemsFromMission("","","")
17018: PPUSH
17019: CALL_OW 559
// end ;
17023: LD_VAR 0 2
17027: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17028: LD_EXP 15
17032: PUSH
17033: LD_EXP 20
17037: AND
17038: IFFALSE 17162
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
17046: PPUSH
// begin enable ;
17047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17048: LD_ADDR_VAR 0 2
17052: PUSH
17053: LD_INT 22
17055: PUSH
17056: LD_OWVAR 2
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 2
17067: PUSH
17068: LD_INT 34
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 34
17080: PUSH
17081: LD_INT 45
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 34
17090: PUSH
17091: LD_INT 28
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 34
17100: PUSH
17101: LD_INT 47
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PPUSH
17119: CALL_OW 69
17123: ST_TO_ADDR
// if not tmp then
17124: LD_VAR 0 2
17128: NOT
17129: IFFALSE 17133
// exit ;
17131: GO 17162
// for i in tmp do
17133: LD_ADDR_VAR 0 1
17137: PUSH
17138: LD_VAR 0 2
17142: PUSH
17143: FOR_IN
17144: IFFALSE 17160
// begin SetLives ( i , 0 ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_INT 0
17153: PPUSH
17154: CALL_OW 234
// end ;
17158: GO 17143
17160: POP
17161: POP
// end ;
17162: PPOPN 2
17164: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17165: LD_EXP 15
17169: PUSH
17170: LD_EXP 21
17174: AND
17175: IFFALSE 17259
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin enable ;
17184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 32
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 69
17220: ST_TO_ADDR
// if not tmp then
17221: LD_VAR 0 2
17225: NOT
17226: IFFALSE 17230
// exit ;
17228: GO 17259
// for i in tmp do
17230: LD_ADDR_VAR 0 1
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: FOR_IN
17241: IFFALSE 17257
// begin SetLives ( i , 0 ) ;
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_INT 0
17250: PPUSH
17251: CALL_OW 234
// end ;
17255: GO 17240
17257: POP
17258: POP
// end ;
17259: PPOPN 2
17261: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17262: LD_EXP 15
17266: PUSH
17267: LD_EXP 18
17271: AND
17272: IFFALSE 17365
17274: GO 17276
17276: DISABLE
17277: LD_INT 0
17279: PPUSH
// begin enable ;
17280: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17281: LD_ADDR_VAR 0 1
17285: PUSH
17286: LD_INT 22
17288: PUSH
17289: LD_OWVAR 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 25
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 25
17313: PUSH
17314: LD_INT 9
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 25
17323: PUSH
17324: LD_INT 8
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: PUSH
17346: FOR_IN
17347: IFFALSE 17363
// begin SetClass ( i , 1 ) ;
17349: LD_VAR 0 1
17353: PPUSH
17354: LD_INT 1
17356: PPUSH
17357: CALL_OW 336
// end ;
17361: GO 17346
17363: POP
17364: POP
// end ;
17365: PPOPN 1
17367: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17368: LD_EXP 15
17372: PUSH
17373: LD_EXP 19
17377: AND
17378: PUSH
17379: LD_OWVAR 65
17383: PUSH
17384: LD_INT 7
17386: LESS
17387: AND
17388: IFFALSE 17402
17390: GO 17392
17392: DISABLE
// begin enable ;
17393: ENABLE
// game_speed := 7 ;
17394: LD_ADDR_OWVAR 65
17398: PUSH
17399: LD_INT 7
17401: ST_TO_ADDR
// end ;
17402: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17403: LD_EXP 15
17407: PUSH
17408: LD_EXP 22
17412: AND
17413: IFFALSE 17615
17415: GO 17417
17417: DISABLE
17418: LD_INT 0
17420: PPUSH
17421: PPUSH
17422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17423: LD_ADDR_VAR 0 3
17427: PUSH
17428: LD_INT 81
17430: PUSH
17431: LD_OWVAR 2
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 21
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 69
17458: ST_TO_ADDR
// if not tmp then
17459: LD_VAR 0 3
17463: NOT
17464: IFFALSE 17468
// exit ;
17466: GO 17615
// if tmp > 5 then
17468: LD_VAR 0 3
17472: PUSH
17473: LD_INT 5
17475: GREATER
17476: IFFALSE 17488
// k := 5 else
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: LD_INT 5
17485: ST_TO_ADDR
17486: GO 17498
// k := tmp ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_VAR 0 3
17497: ST_TO_ADDR
// for i := 1 to k do
17498: LD_ADDR_VAR 0 1
17502: PUSH
17503: DOUBLE
17504: LD_INT 1
17506: DEC
17507: ST_TO_ADDR
17508: LD_VAR 0 2
17512: PUSH
17513: FOR_TO
17514: IFFALSE 17613
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17516: LD_VAR 0 3
17520: PUSH
17521: LD_VAR 0 1
17525: ARRAY
17526: PPUSH
17527: LD_VAR 0 1
17531: PUSH
17532: LD_INT 4
17534: MOD
17535: PUSH
17536: LD_INT 1
17538: PLUS
17539: PPUSH
17540: CALL_OW 259
17544: PUSH
17545: LD_INT 10
17547: LESS
17548: IFFALSE 17611
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17550: LD_VAR 0 3
17554: PUSH
17555: LD_VAR 0 1
17559: ARRAY
17560: PPUSH
17561: LD_VAR 0 1
17565: PUSH
17566: LD_INT 4
17568: MOD
17569: PUSH
17570: LD_INT 1
17572: PLUS
17573: PPUSH
17574: LD_VAR 0 3
17578: PUSH
17579: LD_VAR 0 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 1
17589: PUSH
17590: LD_INT 4
17592: MOD
17593: PUSH
17594: LD_INT 1
17596: PLUS
17597: PPUSH
17598: CALL_OW 259
17602: PUSH
17603: LD_INT 1
17605: PLUS
17606: PPUSH
17607: CALL_OW 237
17611: GO 17513
17613: POP
17614: POP
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17618: LD_EXP 15
17622: PUSH
17623: LD_EXP 23
17627: AND
17628: IFFALSE 17648
17630: GO 17632
17632: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17633: LD_INT 4
17635: PPUSH
17636: LD_OWVAR 2
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: CALL_OW 324
17648: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17649: LD_EXP 15
17653: PUSH
17654: LD_EXP 52
17658: AND
17659: IFFALSE 17679
17661: GO 17663
17663: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17664: LD_INT 19
17666: PPUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 324
17679: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17680: LD_EXP 15
17684: PUSH
17685: LD_EXP 24
17689: AND
17690: IFFALSE 17792
17692: GO 17694
17694: DISABLE
17695: LD_INT 0
17697: PPUSH
17698: PPUSH
// begin enable ;
17699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17700: LD_ADDR_VAR 0 2
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_OWVAR 2
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: LD_INT 34
17722: PUSH
17723: LD_INT 11
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 34
17732: PUSH
17733: LD_INT 30
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: ST_TO_ADDR
// if not tmp then
17754: LD_VAR 0 2
17758: NOT
17759: IFFALSE 17763
// exit ;
17761: GO 17792
// for i in tmp do
17763: LD_ADDR_VAR 0 1
17767: PUSH
17768: LD_VAR 0 2
17772: PUSH
17773: FOR_IN
17774: IFFALSE 17790
// begin SetLives ( i , 0 ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 0
17783: PPUSH
17784: CALL_OW 234
// end ;
17788: GO 17773
17790: POP
17791: POP
// end ;
17792: PPOPN 2
17794: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17795: LD_EXP 15
17799: PUSH
17800: LD_EXP 25
17804: AND
17805: IFFALSE 17825
17807: GO 17809
17809: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17810: LD_INT 32
17812: PPUSH
17813: LD_OWVAR 2
17817: PPUSH
17818: LD_INT 0
17820: PPUSH
17821: CALL_OW 324
17825: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17826: LD_EXP 15
17830: PUSH
17831: LD_EXP 26
17835: AND
17836: IFFALSE 18017
17838: GO 17840
17840: DISABLE
17841: LD_INT 0
17843: PPUSH
17844: PPUSH
17845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_INT 22
17853: PUSH
17854: LD_OWVAR 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 33
17865: PUSH
17866: LD_INT 3
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PPUSH
17877: CALL_OW 69
17881: ST_TO_ADDR
// if not tmp then
17882: LD_VAR 0 2
17886: NOT
17887: IFFALSE 17891
// exit ;
17889: GO 18017
// side := 0 ;
17891: LD_ADDR_VAR 0 3
17895: PUSH
17896: LD_INT 0
17898: ST_TO_ADDR
// for i := 1 to 8 do
17899: LD_ADDR_VAR 0 1
17903: PUSH
17904: DOUBLE
17905: LD_INT 1
17907: DEC
17908: ST_TO_ADDR
17909: LD_INT 8
17911: PUSH
17912: FOR_TO
17913: IFFALSE 17961
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17915: LD_OWVAR 2
17919: PUSH
17920: LD_VAR 0 1
17924: NONEQUAL
17925: PUSH
17926: LD_OWVAR 2
17930: PPUSH
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 81
17940: PUSH
17941: LD_INT 2
17943: EQUAL
17944: AND
17945: IFFALSE 17959
// begin side := i ;
17947: LD_ADDR_VAR 0 3
17951: PUSH
17952: LD_VAR 0 1
17956: ST_TO_ADDR
// break ;
17957: GO 17961
// end ;
17959: GO 17912
17961: POP
17962: POP
// if not side then
17963: LD_VAR 0 3
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 18017
// for i := 1 to tmp do
17972: LD_ADDR_VAR 0 1
17976: PUSH
17977: DOUBLE
17978: LD_INT 1
17980: DEC
17981: ST_TO_ADDR
17982: LD_VAR 0 2
17986: PUSH
17987: FOR_TO
17988: IFFALSE 18015
// if Prob ( 60 ) then
17990: LD_INT 60
17992: PPUSH
17993: CALL_OW 13
17997: IFFALSE 18013
// SetSide ( i , side ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: CALL_OW 235
18013: GO 17987
18015: POP
18016: POP
// end ;
18017: PPOPN 3
18019: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18020: LD_EXP 15
18024: PUSH
18025: LD_EXP 28
18029: AND
18030: IFFALSE 18149
18032: GO 18034
18034: DISABLE
18035: LD_INT 0
18037: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18038: LD_ADDR_VAR 0 1
18042: PUSH
18043: LD_INT 22
18045: PUSH
18046: LD_OWVAR 2
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: LD_INT 23
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: PUSH
18092: FOR_IN
18093: IFFALSE 18147
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 257
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: LD_INT 3
18113: PUSH
18114: LD_INT 4
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: IN
18123: IFFALSE 18145
// SetClass ( un , rand ( 1 , 4 ) ) ;
18125: LD_VAR 0 1
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: LD_INT 4
18135: PPUSH
18136: CALL_OW 12
18140: PPUSH
18141: CALL_OW 336
18145: GO 18092
18147: POP
18148: POP
// end ;
18149: PPOPN 1
18151: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18152: LD_EXP 15
18156: PUSH
18157: LD_EXP 27
18161: AND
18162: IFFALSE 18241
18164: GO 18166
18166: DISABLE
18167: LD_INT 0
18169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18170: LD_ADDR_VAR 0 1
18174: PUSH
18175: LD_INT 22
18177: PUSH
18178: LD_OWVAR 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 21
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PPUSH
18201: CALL_OW 69
18205: ST_TO_ADDR
// if not tmp then
18206: LD_VAR 0 1
18210: NOT
18211: IFFALSE 18215
// exit ;
18213: GO 18241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18215: LD_VAR 0 1
18219: PUSH
18220: LD_INT 1
18222: PPUSH
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 12
18232: ARRAY
18233: PPUSH
18234: LD_INT 100
18236: PPUSH
18237: CALL_OW 234
// end ;
18241: PPOPN 1
18243: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18244: LD_EXP 15
18248: PUSH
18249: LD_EXP 29
18253: AND
18254: IFFALSE 18352
18256: GO 18258
18258: DISABLE
18259: LD_INT 0
18261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18262: LD_ADDR_VAR 0 1
18266: PUSH
18267: LD_INT 22
18269: PUSH
18270: LD_OWVAR 2
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: ST_TO_ADDR
// if not tmp then
18298: LD_VAR 0 1
18302: NOT
18303: IFFALSE 18307
// exit ;
18305: GO 18352
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18307: LD_VAR 0 1
18311: PUSH
18312: LD_INT 1
18314: PPUSH
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 12
18324: ARRAY
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_INT 4
18331: PPUSH
18332: CALL_OW 12
18336: PPUSH
18337: LD_INT 3000
18339: PPUSH
18340: LD_INT 9000
18342: PPUSH
18343: CALL_OW 12
18347: PPUSH
18348: CALL_OW 492
// end ;
18352: PPOPN 1
18354: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18355: LD_EXP 15
18359: PUSH
18360: LD_EXP 30
18364: AND
18365: IFFALSE 18385
18367: GO 18369
18369: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18370: LD_INT 1
18372: PPUSH
18373: LD_OWVAR 2
18377: PPUSH
18378: LD_INT 0
18380: PPUSH
18381: CALL_OW 324
18385: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18386: LD_EXP 15
18390: PUSH
18391: LD_EXP 31
18395: AND
18396: IFFALSE 18479
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_INT 22
18412: PUSH
18413: LD_OWVAR 2
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 3
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: ST_TO_ADDR
// if not tmp then
18441: LD_VAR 0 2
18445: NOT
18446: IFFALSE 18450
// exit ;
18448: GO 18479
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 2
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18477
// SetBLevel ( i , 10 ) ;
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 10
18470: PPUSH
18471: CALL_OW 241
18475: GO 18460
18477: POP
18478: POP
// end ;
18479: PPOPN 2
18481: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18482: LD_EXP 15
18486: PUSH
18487: LD_EXP 32
18491: AND
18492: IFFALSE 18603
18494: GO 18496
18496: DISABLE
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
18501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18502: LD_ADDR_VAR 0 3
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_OWVAR 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 25
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 69
18537: ST_TO_ADDR
// if not tmp then
18538: LD_VAR 0 3
18542: NOT
18543: IFFALSE 18547
// exit ;
18545: GO 18603
// un := tmp [ rand ( 1 , tmp ) ] ;
18547: LD_ADDR_VAR 0 2
18551: PUSH
18552: LD_VAR 0 3
18556: PUSH
18557: LD_INT 1
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: CALL_OW 12
18569: ARRAY
18570: ST_TO_ADDR
// if Crawls ( un ) then
18571: LD_VAR 0 2
18575: PPUSH
18576: CALL_OW 318
18580: IFFALSE 18591
// ComWalk ( un ) ;
18582: LD_VAR 0 2
18586: PPUSH
18587: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_INT 5
18598: PPUSH
18599: CALL_OW 336
// end ;
18603: PPOPN 3
18605: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18606: LD_EXP 15
18610: PUSH
18611: LD_EXP 33
18615: AND
18616: PUSH
18617: LD_OWVAR 67
18621: PUSH
18622: LD_INT 4
18624: LESS
18625: AND
18626: IFFALSE 18645
18628: GO 18630
18630: DISABLE
// begin Difficulty := Difficulty + 1 ;
18631: LD_ADDR_OWVAR 67
18635: PUSH
18636: LD_OWVAR 67
18640: PUSH
18641: LD_INT 1
18643: PLUS
18644: ST_TO_ADDR
// end ;
18645: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18646: LD_EXP 15
18650: PUSH
18651: LD_EXP 34
18655: AND
18656: IFFALSE 18759
18658: GO 18660
18660: DISABLE
18661: LD_INT 0
18663: PPUSH
// begin for i := 1 to 5 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 5
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18757
// begin uc_nation := nation_nature ;
18680: LD_ADDR_OWVAR 21
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// uc_side := 0 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18696: LD_ADDR_OWVAR 29
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: ST_TO_ADDR
// hc_agressivity := 20 ;
18711: LD_ADDR_OWVAR 35
18715: PUSH
18716: LD_INT 20
18718: ST_TO_ADDR
// hc_class := class_tiger ;
18719: LD_ADDR_OWVAR 28
18723: PUSH
18724: LD_INT 14
18726: ST_TO_ADDR
// hc_gallery :=  ;
18727: LD_ADDR_OWVAR 33
18731: PUSH
18732: LD_STRING 
18734: ST_TO_ADDR
// hc_name :=  ;
18735: LD_ADDR_OWVAR 26
18739: PUSH
18740: LD_STRING 
18742: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18743: CALL_OW 44
18747: PPUSH
18748: LD_INT 0
18750: PPUSH
18751: CALL_OW 51
// end ;
18755: GO 18677
18757: POP
18758: POP
// end ;
18759: PPOPN 1
18761: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18762: LD_EXP 15
18766: PUSH
18767: LD_EXP 35
18771: AND
18772: IFFALSE 18781
18774: GO 18776
18776: DISABLE
// StreamSibBomb ;
18777: CALL 18782 0 0
18781: END
// export function StreamSibBomb ; var i , x , y ; begin
18782: LD_INT 0
18784: PPUSH
18785: PPUSH
18786: PPUSH
18787: PPUSH
// result := false ;
18788: LD_ADDR_VAR 0 1
18792: PUSH
18793: LD_INT 0
18795: ST_TO_ADDR
// for i := 1 to 16 do
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: DOUBLE
18802: LD_INT 1
18804: DEC
18805: ST_TO_ADDR
18806: LD_INT 16
18808: PUSH
18809: FOR_TO
18810: IFFALSE 19009
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_INT 10
18819: PUSH
18820: LD_INT 20
18822: PUSH
18823: LD_INT 30
18825: PUSH
18826: LD_INT 40
18828: PUSH
18829: LD_INT 50
18831: PUSH
18832: LD_INT 60
18834: PUSH
18835: LD_INT 70
18837: PUSH
18838: LD_INT 80
18840: PUSH
18841: LD_INT 90
18843: PUSH
18844: LD_INT 100
18846: PUSH
18847: LD_INT 110
18849: PUSH
18850: LD_INT 120
18852: PUSH
18853: LD_INT 130
18855: PUSH
18856: LD_INT 140
18858: PUSH
18859: LD_INT 150
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_INT 15
18884: PPUSH
18885: CALL_OW 12
18889: ARRAY
18890: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18891: LD_ADDR_VAR 0 4
18895: PUSH
18896: LD_INT 10
18898: PUSH
18899: LD_INT 20
18901: PUSH
18902: LD_INT 30
18904: PUSH
18905: LD_INT 40
18907: PUSH
18908: LD_INT 50
18910: PUSH
18911: LD_INT 60
18913: PUSH
18914: LD_INT 70
18916: PUSH
18917: LD_INT 80
18919: PUSH
18920: LD_INT 90
18922: PUSH
18923: LD_INT 100
18925: PUSH
18926: LD_INT 110
18928: PUSH
18929: LD_INT 120
18931: PUSH
18932: LD_INT 130
18934: PUSH
18935: LD_INT 140
18937: PUSH
18938: LD_INT 150
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: PPUSH
18961: LD_INT 15
18963: PPUSH
18964: CALL_OW 12
18968: ARRAY
18969: ST_TO_ADDR
// if ValidHex ( x , y ) then
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_VAR 0 4
18979: PPUSH
18980: CALL_OW 488
18984: IFFALSE 19007
// begin result := [ x , y ] ;
18986: LD_ADDR_VAR 0 1
18990: PUSH
18991: LD_VAR 0 3
18995: PUSH
18996: LD_VAR 0 4
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: ST_TO_ADDR
// break ;
19005: GO 19009
// end ; end ;
19007: GO 18809
19009: POP
19010: POP
// if result then
19011: LD_VAR 0 1
19015: IFFALSE 19075
// begin ToLua ( playSibBomb() ) ;
19017: LD_STRING playSibBomb()
19019: PPUSH
19020: CALL_OW 559
// wait ( 0 0$14 ) ;
19024: LD_INT 490
19026: PPUSH
19027: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19031: LD_VAR 0 1
19035: PUSH
19036: LD_INT 1
19038: ARRAY
19039: PPUSH
19040: LD_VAR 0 1
19044: PUSH
19045: LD_INT 2
19047: ARRAY
19048: PPUSH
19049: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 1
19060: ARRAY
19061: PPUSH
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 2
19069: ARRAY
19070: PPUSH
19071: CALL_OW 429
// end ; end ;
19075: LD_VAR 0 1
19079: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19080: LD_EXP 15
19084: PUSH
19085: LD_EXP 37
19089: AND
19090: IFFALSE 19102
19092: GO 19094
19094: DISABLE
// YouLost (  ) ;
19095: LD_STRING 
19097: PPUSH
19098: CALL_OW 104
19102: END
// every 0 0$1 trigger StreamModeActive and sFog do
19103: LD_EXP 15
19107: PUSH
19108: LD_EXP 36
19112: AND
19113: IFFALSE 19127
19115: GO 19117
19117: DISABLE
// FogOff ( your_side ) ;
19118: LD_OWVAR 2
19122: PPUSH
19123: CALL_OW 344
19127: END
// every 0 0$1 trigger StreamModeActive and sSun do
19128: LD_EXP 15
19132: PUSH
19133: LD_EXP 38
19137: AND
19138: IFFALSE 19166
19140: GO 19142
19142: DISABLE
// begin solar_recharge_percent := 0 ;
19143: LD_ADDR_OWVAR 79
19147: PUSH
19148: LD_INT 0
19150: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19151: LD_INT 10500
19153: PPUSH
19154: CALL_OW 67
// solar_recharge_percent := 100 ;
19158: LD_ADDR_OWVAR 79
19162: PUSH
19163: LD_INT 100
19165: ST_TO_ADDR
// end ;
19166: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19167: LD_EXP 15
19171: PUSH
19172: LD_EXP 39
19176: AND
19177: IFFALSE 19416
19179: GO 19181
19181: DISABLE
19182: LD_INT 0
19184: PPUSH
19185: PPUSH
19186: PPUSH
// begin tmp := [ ] ;
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: EMPTY
19193: ST_TO_ADDR
// for i := 1 to 6 do
19194: LD_ADDR_VAR 0 1
19198: PUSH
19199: DOUBLE
19200: LD_INT 1
19202: DEC
19203: ST_TO_ADDR
19204: LD_INT 6
19206: PUSH
19207: FOR_TO
19208: IFFALSE 19313
// begin uc_nation := nation_nature ;
19210: LD_ADDR_OWVAR 21
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// uc_side := 0 ;
19218: LD_ADDR_OWVAR 20
19222: PUSH
19223: LD_INT 0
19225: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19226: LD_ADDR_OWVAR 29
19230: PUSH
19231: LD_INT 12
19233: PUSH
19234: LD_INT 12
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: ST_TO_ADDR
// hc_agressivity := 20 ;
19241: LD_ADDR_OWVAR 35
19245: PUSH
19246: LD_INT 20
19248: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19249: LD_ADDR_OWVAR 28
19253: PUSH
19254: LD_INT 17
19256: ST_TO_ADDR
// hc_gallery :=  ;
19257: LD_ADDR_OWVAR 33
19261: PUSH
19262: LD_STRING 
19264: ST_TO_ADDR
// hc_name :=  ;
19265: LD_ADDR_OWVAR 26
19269: PUSH
19270: LD_STRING 
19272: ST_TO_ADDR
// un := CreateHuman ;
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: CALL_OW 44
19282: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19283: LD_VAR 0 2
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 51
// tmp := tmp ^ un ;
19295: LD_ADDR_VAR 0 3
19299: PUSH
19300: LD_VAR 0 3
19304: PUSH
19305: LD_VAR 0 2
19309: ADD
19310: ST_TO_ADDR
// end ;
19311: GO 19207
19313: POP
19314: POP
// repeat wait ( 0 0$1 ) ;
19315: LD_INT 35
19317: PPUSH
19318: CALL_OW 67
// for un in tmp do
19322: LD_ADDR_VAR 0 2
19326: PUSH
19327: LD_VAR 0 3
19331: PUSH
19332: FOR_IN
19333: IFFALSE 19407
// begin if IsDead ( un ) then
19335: LD_VAR 0 2
19339: PPUSH
19340: CALL_OW 301
19344: IFFALSE 19364
// begin tmp := tmp diff un ;
19346: LD_ADDR_VAR 0 3
19350: PUSH
19351: LD_VAR 0 3
19355: PUSH
19356: LD_VAR 0 2
19360: DIFF
19361: ST_TO_ADDR
// continue ;
19362: GO 19332
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19364: LD_VAR 0 2
19368: PPUSH
19369: LD_INT 3
19371: PUSH
19372: LD_INT 22
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 69
19390: PPUSH
19391: LD_VAR 0 2
19395: PPUSH
19396: CALL_OW 74
19400: PPUSH
19401: CALL_OW 115
// end ;
19405: GO 19332
19407: POP
19408: POP
// until not tmp ;
19409: LD_VAR 0 3
19413: NOT
19414: IFFALSE 19315
// end ;
19416: PPOPN 3
19418: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19419: LD_EXP 15
19423: PUSH
19424: LD_EXP 40
19428: AND
19429: IFFALSE 19483
19431: GO 19433
19433: DISABLE
// begin ToLua ( displayTroll(); ) ;
19434: LD_STRING displayTroll();
19436: PPUSH
19437: CALL_OW 559
// wait ( 3 3$00 ) ;
19441: LD_INT 6300
19443: PPUSH
19444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19448: LD_STRING hideTroll();
19450: PPUSH
19451: CALL_OW 559
// wait ( 1 1$00 ) ;
19455: LD_INT 2100
19457: PPUSH
19458: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19462: LD_STRING displayTroll();
19464: PPUSH
19465: CALL_OW 559
// wait ( 1 1$00 ) ;
19469: LD_INT 2100
19471: PPUSH
19472: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19476: LD_STRING hideTroll();
19478: PPUSH
19479: CALL_OW 559
// end ;
19483: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19484: LD_EXP 15
19488: PUSH
19489: LD_EXP 41
19493: AND
19494: IFFALSE 19557
19496: GO 19498
19498: DISABLE
19499: LD_INT 0
19501: PPUSH
// begin p := 0 ;
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_INT 0
19509: ST_TO_ADDR
// repeat game_speed := 1 ;
19510: LD_ADDR_OWVAR 65
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19518: LD_INT 35
19520: PPUSH
19521: CALL_OW 67
// p := p + 1 ;
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: PLUS
19538: ST_TO_ADDR
// until p >= 60 ;
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 60
19546: GREATEREQUAL
19547: IFFALSE 19510
// game_speed := 4 ;
19549: LD_ADDR_OWVAR 65
19553: PUSH
19554: LD_INT 4
19556: ST_TO_ADDR
// end ;
19557: PPOPN 1
19559: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19560: LD_EXP 15
19564: PUSH
19565: LD_EXP 42
19569: AND
19570: IFFALSE 19716
19572: GO 19574
19574: DISABLE
19575: LD_INT 0
19577: PPUSH
19578: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_OWVAR 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 30
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 30
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PPUSH
19628: CALL_OW 69
19632: ST_TO_ADDR
// if not depot then
19633: LD_VAR 0 1
19637: NOT
19638: IFFALSE 19642
// exit ;
19640: GO 19716
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19642: LD_ADDR_VAR 0 2
19646: PUSH
19647: LD_VAR 0 1
19651: PUSH
19652: LD_INT 1
19654: PPUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 12
19664: ARRAY
19665: PPUSH
19666: CALL_OW 274
19670: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19671: LD_VAR 0 2
19675: PPUSH
19676: LD_INT 1
19678: PPUSH
19679: LD_INT 0
19681: PPUSH
19682: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19686: LD_VAR 0 2
19690: PPUSH
19691: LD_INT 2
19693: PPUSH
19694: LD_INT 0
19696: PPUSH
19697: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19701: LD_VAR 0 2
19705: PPUSH
19706: LD_INT 3
19708: PPUSH
19709: LD_INT 0
19711: PPUSH
19712: CALL_OW 277
// end ;
19716: PPOPN 2
19718: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19719: LD_EXP 15
19723: PUSH
19724: LD_EXP 43
19728: AND
19729: IFFALSE 19826
19731: GO 19733
19733: DISABLE
19734: LD_INT 0
19736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19737: LD_ADDR_VAR 0 1
19741: PUSH
19742: LD_INT 22
19744: PUSH
19745: LD_OWVAR 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 21
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 3
19766: PUSH
19767: LD_INT 23
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: ST_TO_ADDR
// if not tmp then
19791: LD_VAR 0 1
19795: NOT
19796: IFFALSE 19800
// exit ;
19798: GO 19826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19800: LD_VAR 0 1
19804: PUSH
19805: LD_INT 1
19807: PPUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 12
19817: ARRAY
19818: PPUSH
19819: LD_INT 200
19821: PPUSH
19822: CALL_OW 234
// end ;
19826: PPOPN 1
19828: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19829: LD_EXP 15
19833: PUSH
19834: LD_EXP 44
19838: AND
19839: IFFALSE 19918
19841: GO 19843
19843: DISABLE
19844: LD_INT 0
19846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_OWVAR 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 21
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: ST_TO_ADDR
// if not tmp then
19883: LD_VAR 0 1
19887: NOT
19888: IFFALSE 19892
// exit ;
19890: GO 19918
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 1
19899: PPUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 12
19909: ARRAY
19910: PPUSH
19911: LD_INT 60
19913: PPUSH
19914: CALL_OW 234
// end ;
19918: PPOPN 1
19920: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19921: LD_EXP 15
19925: PUSH
19926: LD_EXP 45
19930: AND
19931: IFFALSE 20030
19933: GO 19935
19935: DISABLE
19936: LD_INT 0
19938: PPUSH
19939: PPUSH
// begin enable ;
19940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: LD_INT 22
19948: PUSH
19949: LD_OWVAR 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 61
19960: PUSH
19961: EMPTY
19962: LIST
19963: PUSH
19964: LD_INT 33
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: ST_TO_ADDR
// if not tmp then
19984: LD_VAR 0 1
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20030
// for i in tmp do
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: LD_VAR 0 1
20002: PUSH
20003: FOR_IN
20004: IFFALSE 20028
// if IsControledBy ( i ) then
20006: LD_VAR 0 2
20010: PPUSH
20011: CALL_OW 312
20015: IFFALSE 20026
// ComUnlink ( i ) ;
20017: LD_VAR 0 2
20021: PPUSH
20022: CALL_OW 136
20026: GO 20003
20028: POP
20029: POP
// end ;
20030: PPOPN 2
20032: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20033: LD_EXP 15
20037: PUSH
20038: LD_EXP 46
20042: AND
20043: IFFALSE 20183
20045: GO 20047
20047: DISABLE
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
// begin ToLua ( displayPowell(); ) ;
20052: LD_STRING displayPowell();
20054: PPUSH
20055: CALL_OW 559
// uc_side := 0 ;
20059: LD_ADDR_OWVAR 20
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// uc_nation := 2 ;
20067: LD_ADDR_OWVAR 21
20071: PUSH
20072: LD_INT 2
20074: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20075: LD_ADDR_OWVAR 37
20079: PUSH
20080: LD_INT 14
20082: ST_TO_ADDR
// vc_engine := engine_siberite ;
20083: LD_ADDR_OWVAR 39
20087: PUSH
20088: LD_INT 3
20090: ST_TO_ADDR
// vc_control := control_apeman ;
20091: LD_ADDR_OWVAR 38
20095: PUSH
20096: LD_INT 5
20098: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20099: LD_ADDR_OWVAR 40
20103: PUSH
20104: LD_INT 29
20106: ST_TO_ADDR
// un := CreateVehicle ;
20107: LD_ADDR_VAR 0 2
20111: PUSH
20112: CALL_OW 45
20116: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20117: LD_VAR 0 2
20121: PPUSH
20122: LD_INT 1
20124: PPUSH
20125: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20129: LD_INT 35
20131: PPUSH
20132: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20136: LD_VAR 0 2
20140: PPUSH
20141: LD_INT 22
20143: PUSH
20144: LD_OWVAR 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: PPUSH
20158: LD_VAR 0 2
20162: PPUSH
20163: CALL_OW 74
20167: PPUSH
20168: CALL_OW 115
// until IsDead ( un ) ;
20172: LD_VAR 0 2
20176: PPUSH
20177: CALL_OW 301
20181: IFFALSE 20129
// end ;
20183: PPOPN 2
20185: END
// every 0 0$1 trigger StreamModeActive and sStu do
20186: LD_EXP 15
20190: PUSH
20191: LD_EXP 54
20195: AND
20196: IFFALSE 20212
20198: GO 20200
20200: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20201: LD_STRING displayStucuk();
20203: PPUSH
20204: CALL_OW 559
// ResetFog ;
20208: CALL_OW 335
// end ;
20212: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20213: LD_EXP 15
20217: PUSH
20218: LD_EXP 47
20222: AND
20223: IFFALSE 20364
20225: GO 20227
20227: DISABLE
20228: LD_INT 0
20230: PPUSH
20231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_INT 22
20239: PUSH
20240: LD_OWVAR 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 21
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 2
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20364
// un := tmp [ rand ( 1 , tmp ) ] ;
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: LD_VAR 0 2
20286: PUSH
20287: LD_INT 1
20289: PPUSH
20290: LD_VAR 0 2
20294: PPUSH
20295: CALL_OW 12
20299: ARRAY
20300: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_INT 0
20308: PPUSH
20309: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20313: LD_VAR 0 1
20317: PPUSH
20318: LD_OWVAR 3
20322: PUSH
20323: LD_VAR 0 1
20327: DIFF
20328: PPUSH
20329: LD_VAR 0 1
20333: PPUSH
20334: CALL_OW 74
20338: PPUSH
20339: CALL_OW 115
// wait ( 0 0$20 ) ;
20343: LD_INT 700
20345: PPUSH
20346: CALL_OW 67
// SetSide ( un , your_side ) ;
20350: LD_VAR 0 1
20354: PPUSH
20355: LD_OWVAR 2
20359: PPUSH
20360: CALL_OW 235
// end ;
20364: PPOPN 2
20366: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20367: LD_EXP 15
20371: PUSH
20372: LD_EXP 48
20376: AND
20377: IFFALSE 20483
20379: GO 20381
20381: DISABLE
20382: LD_INT 0
20384: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20385: LD_ADDR_VAR 0 1
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_OWVAR 2
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 30
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 30
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: ST_TO_ADDR
// if not depot then
20439: LD_VAR 0 1
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20483
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20448: LD_VAR 0 1
20452: PUSH
20453: LD_INT 1
20455: ARRAY
20456: PPUSH
20457: CALL_OW 250
20461: PPUSH
20462: LD_VAR 0 1
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: CALL_OW 251
20475: PPUSH
20476: LD_INT 70
20478: PPUSH
20479: CALL_OW 495
// end ;
20483: PPOPN 1
20485: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20486: LD_EXP 15
20490: PUSH
20491: LD_EXP 49
20495: AND
20496: IFFALSE 20707
20498: GO 20500
20500: DISABLE
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20508: LD_ADDR_VAR 0 5
20512: PUSH
20513: LD_INT 22
20515: PUSH
20516: LD_OWVAR 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 69
20543: ST_TO_ADDR
// if not tmp then
20544: LD_VAR 0 5
20548: NOT
20549: IFFALSE 20553
// exit ;
20551: GO 20707
// for i in tmp do
20553: LD_ADDR_VAR 0 1
20557: PUSH
20558: LD_VAR 0 5
20562: PUSH
20563: FOR_IN
20564: IFFALSE 20705
// begin d := rand ( 0 , 5 ) ;
20566: LD_ADDR_VAR 0 4
20570: PUSH
20571: LD_INT 0
20573: PPUSH
20574: LD_INT 5
20576: PPUSH
20577: CALL_OW 12
20581: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20582: LD_ADDR_VAR 0 2
20586: PUSH
20587: LD_VAR 0 1
20591: PPUSH
20592: CALL_OW 250
20596: PPUSH
20597: LD_VAR 0 4
20601: PPUSH
20602: LD_INT 3
20604: PPUSH
20605: LD_INT 12
20607: PPUSH
20608: CALL_OW 12
20612: PPUSH
20613: CALL_OW 272
20617: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20618: LD_ADDR_VAR 0 3
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 251
20632: PPUSH
20633: LD_VAR 0 4
20637: PPUSH
20638: LD_INT 3
20640: PPUSH
20641: LD_INT 12
20643: PPUSH
20644: CALL_OW 12
20648: PPUSH
20649: CALL_OW 273
20653: ST_TO_ADDR
// if ValidHex ( x , y ) then
20654: LD_VAR 0 2
20658: PPUSH
20659: LD_VAR 0 3
20663: PPUSH
20664: CALL_OW 488
20668: IFFALSE 20703
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20670: LD_VAR 0 1
20674: PPUSH
20675: LD_VAR 0 2
20679: PPUSH
20680: LD_VAR 0 3
20684: PPUSH
20685: LD_INT 3
20687: PPUSH
20688: LD_INT 6
20690: PPUSH
20691: CALL_OW 12
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 483
// end ;
20703: GO 20563
20705: POP
20706: POP
// end ;
20707: PPOPN 5
20709: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20710: LD_EXP 15
20714: PUSH
20715: LD_EXP 50
20719: AND
20720: IFFALSE 20814
20722: GO 20724
20724: DISABLE
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20729: LD_ADDR_VAR 0 2
20733: PUSH
20734: LD_INT 22
20736: PUSH
20737: LD_OWVAR 2
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 32
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 21
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: PPUSH
20771: CALL_OW 69
20775: ST_TO_ADDR
// if not tmp then
20776: LD_VAR 0 2
20780: NOT
20781: IFFALSE 20785
// exit ;
20783: GO 20814
// for i in tmp do
20785: LD_ADDR_VAR 0 1
20789: PUSH
20790: LD_VAR 0 2
20794: PUSH
20795: FOR_IN
20796: IFFALSE 20812
// SetFuel ( i , 0 ) ;
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_INT 0
20805: PPUSH
20806: CALL_OW 240
20810: GO 20795
20812: POP
20813: POP
// end ;
20814: PPOPN 2
20816: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20817: LD_EXP 15
20821: PUSH
20822: LD_EXP 51
20826: AND
20827: IFFALSE 20893
20829: GO 20831
20831: DISABLE
20832: LD_INT 0
20834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: LD_INT 22
20842: PUSH
20843: LD_OWVAR 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 30
20854: PUSH
20855: LD_INT 29
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: ST_TO_ADDR
// if not tmp then
20871: LD_VAR 0 1
20875: NOT
20876: IFFALSE 20880
// exit ;
20878: GO 20893
// DestroyUnit ( tmp [ 1 ] ) ;
20880: LD_VAR 0 1
20884: PUSH
20885: LD_INT 1
20887: ARRAY
20888: PPUSH
20889: CALL_OW 65
// end ;
20893: PPOPN 1
20895: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20896: LD_EXP 15
20900: PUSH
20901: LD_EXP 53
20905: AND
20906: IFFALSE 21035
20908: GO 20910
20910: DISABLE
20911: LD_INT 0
20913: PPUSH
// begin uc_side := 0 ;
20914: LD_ADDR_OWVAR 20
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// uc_nation := nation_arabian ;
20922: LD_ADDR_OWVAR 21
20926: PUSH
20927: LD_INT 2
20929: ST_TO_ADDR
// hc_gallery :=  ;
20930: LD_ADDR_OWVAR 33
20934: PUSH
20935: LD_STRING 
20937: ST_TO_ADDR
// hc_name :=  ;
20938: LD_ADDR_OWVAR 26
20942: PUSH
20943: LD_STRING 
20945: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20946: LD_INT 1
20948: PPUSH
20949: LD_INT 11
20951: PPUSH
20952: LD_INT 10
20954: PPUSH
20955: CALL_OW 380
// un := CreateHuman ;
20959: LD_ADDR_VAR 0 1
20963: PUSH
20964: CALL_OW 44
20968: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20969: LD_VAR 0 1
20973: PPUSH
20974: LD_INT 1
20976: PPUSH
20977: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20981: LD_INT 35
20983: PPUSH
20984: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_INT 22
20995: PUSH
20996: LD_OWVAR 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: PPUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 74
21019: PPUSH
21020: CALL_OW 115
// until IsDead ( un ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: CALL_OW 301
21033: IFFALSE 20981
// end ;
21035: PPOPN 1
21037: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21038: LD_EXP 15
21042: PUSH
21043: LD_EXP 55
21047: AND
21048: IFFALSE 21060
21050: GO 21052
21052: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21053: LD_STRING earthquake(getX(game), 0, 32)
21055: PPUSH
21056: CALL_OW 559
21060: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21061: LD_EXP 15
21065: PUSH
21066: LD_EXP 56
21070: AND
21071: IFFALSE 21162
21073: GO 21075
21075: DISABLE
21076: LD_INT 0
21078: PPUSH
// begin enable ;
21079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21080: LD_ADDR_VAR 0 1
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 33
21109: PUSH
21110: LD_INT 3
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: ST_TO_ADDR
// if not tmp then
21127: LD_VAR 0 1
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21136: LD_VAR 0 1
21140: PUSH
21141: LD_INT 1
21143: PPUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: CALL_OW 12
21153: ARRAY
21154: PPUSH
21155: LD_INT 1
21157: PPUSH
21158: CALL_OW 234
// end ;
21162: PPOPN 1
21164: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21165: LD_EXP 15
21169: PUSH
21170: LD_EXP 57
21174: AND
21175: IFFALSE 21316
21177: GO 21179
21179: DISABLE
21180: LD_INT 0
21182: PPUSH
21183: PPUSH
21184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: LD_INT 22
21192: PUSH
21193: LD_OWVAR 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 25
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 3
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21316
// un := tmp [ rand ( 1 , tmp ) ] ;
21230: LD_ADDR_VAR 0 2
21234: PUSH
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 1
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: CALL_OW 12
21252: ARRAY
21253: ST_TO_ADDR
// if Crawls ( un ) then
21254: LD_VAR 0 2
21258: PPUSH
21259: CALL_OW 318
21263: IFFALSE 21274
// ComWalk ( un ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21274: LD_VAR 0 2
21278: PPUSH
21279: LD_INT 9
21281: PPUSH
21282: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21286: LD_INT 28
21288: PPUSH
21289: LD_OWVAR 2
21293: PPUSH
21294: LD_INT 2
21296: PPUSH
21297: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21301: LD_INT 29
21303: PPUSH
21304: LD_OWVAR 2
21308: PPUSH
21309: LD_INT 2
21311: PPUSH
21312: CALL_OW 322
// end ;
21316: PPOPN 3
21318: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21319: LD_EXP 15
21323: PUSH
21324: LD_EXP 58
21328: AND
21329: IFFALSE 21440
21331: GO 21333
21333: DISABLE
21334: LD_INT 0
21336: PPUSH
21337: PPUSH
21338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21339: LD_ADDR_VAR 0 3
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_OWVAR 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PPUSH
21370: CALL_OW 69
21374: ST_TO_ADDR
// if not tmp then
21375: LD_VAR 0 3
21379: NOT
21380: IFFALSE 21384
// exit ;
21382: GO 21440
// un := tmp [ rand ( 1 , tmp ) ] ;
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: LD_VAR 0 3
21393: PUSH
21394: LD_INT 1
21396: PPUSH
21397: LD_VAR 0 3
21401: PPUSH
21402: CALL_OW 12
21406: ARRAY
21407: ST_TO_ADDR
// if Crawls ( un ) then
21408: LD_VAR 0 2
21412: PPUSH
21413: CALL_OW 318
21417: IFFALSE 21428
// ComWalk ( un ) ;
21419: LD_VAR 0 2
21423: PPUSH
21424: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21428: LD_VAR 0 2
21432: PPUSH
21433: LD_INT 8
21435: PPUSH
21436: CALL_OW 336
// end ;
21440: PPOPN 3
21442: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21443: LD_EXP 15
21447: PUSH
21448: LD_EXP 59
21452: AND
21453: IFFALSE 21597
21455: GO 21457
21457: DISABLE
21458: LD_INT 0
21460: PPUSH
21461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 22
21469: PUSH
21470: LD_OWVAR 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 34
21494: PUSH
21495: LD_INT 12
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 51
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 34
21514: PUSH
21515: LD_INT 32
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: PPUSH
21533: CALL_OW 69
21537: ST_TO_ADDR
// if not tmp then
21538: LD_VAR 0 2
21542: NOT
21543: IFFALSE 21547
// exit ;
21545: GO 21597
// for i in tmp do
21547: LD_ADDR_VAR 0 1
21551: PUSH
21552: LD_VAR 0 2
21556: PUSH
21557: FOR_IN
21558: IFFALSE 21595
// if GetCargo ( i , mat_artifact ) = 0 then
21560: LD_VAR 0 1
21564: PPUSH
21565: LD_INT 4
21567: PPUSH
21568: CALL_OW 289
21572: PUSH
21573: LD_INT 0
21575: EQUAL
21576: IFFALSE 21593
// SetCargo ( i , mat_siberit , 100 ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_INT 3
21585: PPUSH
21586: LD_INT 100
21588: PPUSH
21589: CALL_OW 290
21593: GO 21557
21595: POP
21596: POP
// end ;
21597: PPOPN 2
21599: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21600: LD_EXP 15
21604: PUSH
21605: LD_EXP 60
21609: AND
21610: IFFALSE 21793
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_OWVAR 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PPUSH
21636: CALL_OW 69
21640: ST_TO_ADDR
// if not tmp then
21641: LD_VAR 0 2
21645: NOT
21646: IFFALSE 21650
// exit ;
21648: GO 21793
// for i := 1 to 2 do
21650: LD_ADDR_VAR 0 1
21654: PUSH
21655: DOUBLE
21656: LD_INT 1
21658: DEC
21659: ST_TO_ADDR
21660: LD_INT 2
21662: PUSH
21663: FOR_TO
21664: IFFALSE 21791
// begin uc_side := your_side ;
21666: LD_ADDR_OWVAR 20
21670: PUSH
21671: LD_OWVAR 2
21675: ST_TO_ADDR
// uc_nation := nation_american ;
21676: LD_ADDR_OWVAR 21
21680: PUSH
21681: LD_INT 1
21683: ST_TO_ADDR
// vc_chassis := us_morphling ;
21684: LD_ADDR_OWVAR 37
21688: PUSH
21689: LD_INT 5
21691: ST_TO_ADDR
// vc_engine := engine_siberite ;
21692: LD_ADDR_OWVAR 39
21696: PUSH
21697: LD_INT 3
21699: ST_TO_ADDR
// vc_control := control_computer ;
21700: LD_ADDR_OWVAR 38
21704: PUSH
21705: LD_INT 3
21707: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21708: LD_ADDR_OWVAR 40
21712: PUSH
21713: LD_INT 10
21715: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21716: LD_VAR 0 2
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PPUSH
21725: CALL_OW 310
21729: NOT
21730: IFFALSE 21777
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21732: CALL_OW 45
21736: PPUSH
21737: LD_VAR 0 2
21741: PUSH
21742: LD_INT 1
21744: ARRAY
21745: PPUSH
21746: CALL_OW 250
21750: PPUSH
21751: LD_VAR 0 2
21755: PUSH
21756: LD_INT 1
21758: ARRAY
21759: PPUSH
21760: CALL_OW 251
21764: PPUSH
21765: LD_INT 12
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: CALL_OW 50
21775: GO 21789
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21777: CALL_OW 45
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: CALL_OW 51
// end ;
21789: GO 21663
21791: POP
21792: POP
// end ;
21793: PPOPN 2
21795: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21796: LD_EXP 15
21800: PUSH
21801: LD_EXP 61
21805: AND
21806: IFFALSE 22028
21808: GO 21810
21810: DISABLE
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
21816: PPUSH
21817: PPUSH
21818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21819: LD_ADDR_VAR 0 6
21823: PUSH
21824: LD_INT 22
21826: PUSH
21827: LD_OWVAR 2
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 21
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: LD_INT 23
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: PPUSH
21868: CALL_OW 69
21872: ST_TO_ADDR
// if not tmp then
21873: LD_VAR 0 6
21877: NOT
21878: IFFALSE 21882
// exit ;
21880: GO 22028
// s1 := rand ( 1 , 4 ) ;
21882: LD_ADDR_VAR 0 2
21886: PUSH
21887: LD_INT 1
21889: PPUSH
21890: LD_INT 4
21892: PPUSH
21893: CALL_OW 12
21897: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21898: LD_ADDR_VAR 0 4
21902: PUSH
21903: LD_VAR 0 6
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: LD_VAR 0 2
21916: PPUSH
21917: CALL_OW 259
21921: ST_TO_ADDR
// if s1 = 1 then
21922: LD_VAR 0 2
21926: PUSH
21927: LD_INT 1
21929: EQUAL
21930: IFFALSE 21950
// s2 := rand ( 2 , 4 ) else
21932: LD_ADDR_VAR 0 3
21936: PUSH
21937: LD_INT 2
21939: PPUSH
21940: LD_INT 4
21942: PPUSH
21943: CALL_OW 12
21947: ST_TO_ADDR
21948: GO 21958
// s2 := 1 ;
21950: LD_ADDR_VAR 0 3
21954: PUSH
21955: LD_INT 1
21957: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21958: LD_ADDR_VAR 0 5
21962: PUSH
21963: LD_VAR 0 6
21967: PUSH
21968: LD_INT 1
21970: ARRAY
21971: PPUSH
21972: LD_VAR 0 3
21976: PPUSH
21977: CALL_OW 259
21981: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21982: LD_VAR 0 6
21986: PUSH
21987: LD_INT 1
21989: ARRAY
21990: PPUSH
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_VAR 0 5
22000: PPUSH
22001: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22005: LD_VAR 0 6
22009: PUSH
22010: LD_INT 1
22012: ARRAY
22013: PPUSH
22014: LD_VAR 0 3
22018: PPUSH
22019: LD_VAR 0 4
22023: PPUSH
22024: CALL_OW 237
// end ;
22028: PPOPN 6
22030: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22031: LD_EXP 15
22035: PUSH
22036: LD_EXP 62
22040: AND
22041: IFFALSE 22120
22043: GO 22045
22045: DISABLE
22046: LD_INT 0
22048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 30
22068: PUSH
22069: LD_INT 3
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PPUSH
22080: CALL_OW 69
22084: ST_TO_ADDR
// if not tmp then
22085: LD_VAR 0 1
22089: NOT
22090: IFFALSE 22094
// exit ;
22092: GO 22120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22094: LD_VAR 0 1
22098: PUSH
22099: LD_INT 1
22101: PPUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 12
22111: ARRAY
22112: PPUSH
22113: LD_INT 1
22115: PPUSH
22116: CALL_OW 234
// end ;
22120: PPOPN 1
22122: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22123: LD_EXP 15
22127: PUSH
22128: LD_EXP 63
22132: AND
22133: IFFALSE 22245
22135: GO 22137
22137: DISABLE
22138: LD_INT 0
22140: PPUSH
22141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22142: LD_ADDR_VAR 0 2
22146: PUSH
22147: LD_INT 22
22149: PUSH
22150: LD_OWVAR 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 30
22164: PUSH
22165: LD_INT 27
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 30
22174: PUSH
22175: LD_INT 26
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 30
22184: PUSH
22185: LD_INT 28
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 69
22206: ST_TO_ADDR
// if not tmp then
22207: LD_VAR 0 2
22211: NOT
22212: IFFALSE 22216
// exit ;
22214: GO 22245
// for i in tmp do
22216: LD_ADDR_VAR 0 1
22220: PUSH
22221: LD_VAR 0 2
22225: PUSH
22226: FOR_IN
22227: IFFALSE 22243
// SetLives ( i , 1 ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 234
22241: GO 22226
22243: POP
22244: POP
// end ;
22245: PPOPN 2
22247: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22248: LD_EXP 15
22252: PUSH
22253: LD_EXP 64
22257: AND
22258: IFFALSE 22545
22260: GO 22262
22262: DISABLE
22263: LD_INT 0
22265: PPUSH
22266: PPUSH
22267: PPUSH
// begin i := rand ( 1 , 7 ) ;
22268: LD_ADDR_VAR 0 1
22272: PUSH
22273: LD_INT 1
22275: PPUSH
22276: LD_INT 7
22278: PPUSH
22279: CALL_OW 12
22283: ST_TO_ADDR
// case i of 1 :
22284: LD_VAR 0 1
22288: PUSH
22289: LD_INT 1
22291: DOUBLE
22292: EQUAL
22293: IFTRUE 22297
22295: GO 22307
22297: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22298: LD_STRING earthquake(getX(game), 0, 32)
22300: PPUSH
22301: CALL_OW 559
22305: GO 22545
22307: LD_INT 2
22309: DOUBLE
22310: EQUAL
22311: IFTRUE 22315
22313: GO 22329
22315: POP
// begin ToLua ( displayStucuk(); ) ;
22316: LD_STRING displayStucuk();
22318: PPUSH
22319: CALL_OW 559
// ResetFog ;
22323: CALL_OW 335
// end ; 3 :
22327: GO 22545
22329: LD_INT 3
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22441
22337: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22338: LD_ADDR_VAR 0 2
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_OWVAR 2
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 25
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PPUSH
22369: CALL_OW 69
22373: ST_TO_ADDR
// if not tmp then
22374: LD_VAR 0 2
22378: NOT
22379: IFFALSE 22383
// exit ;
22381: GO 22545
// un := tmp [ rand ( 1 , tmp ) ] ;
22383: LD_ADDR_VAR 0 3
22387: PUSH
22388: LD_VAR 0 2
22392: PUSH
22393: LD_INT 1
22395: PPUSH
22396: LD_VAR 0 2
22400: PPUSH
22401: CALL_OW 12
22405: ARRAY
22406: ST_TO_ADDR
// if Crawls ( un ) then
22407: LD_VAR 0 3
22411: PPUSH
22412: CALL_OW 318
22416: IFFALSE 22427
// ComWalk ( un ) ;
22418: LD_VAR 0 3
22422: PPUSH
22423: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22427: LD_VAR 0 3
22431: PPUSH
22432: LD_INT 8
22434: PPUSH
22435: CALL_OW 336
// end ; 4 :
22439: GO 22545
22441: LD_INT 4
22443: DOUBLE
22444: EQUAL
22445: IFTRUE 22449
22447: GO 22523
22449: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22450: LD_ADDR_VAR 0 2
22454: PUSH
22455: LD_INT 22
22457: PUSH
22458: LD_OWVAR 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 30
22469: PUSH
22470: LD_INT 29
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 69
22485: ST_TO_ADDR
// if not tmp then
22486: LD_VAR 0 2
22490: NOT
22491: IFFALSE 22495
// exit ;
22493: GO 22545
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22495: LD_VAR 0 2
22499: PUSH
22500: LD_INT 1
22502: ARRAY
22503: PPUSH
22504: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22508: LD_VAR 0 2
22512: PUSH
22513: LD_INT 1
22515: ARRAY
22516: PPUSH
22517: CALL_OW 65
// end ; 5 .. 7 :
22521: GO 22545
22523: LD_INT 5
22525: DOUBLE
22526: GREATEREQUAL
22527: IFFALSE 22535
22529: LD_INT 7
22531: DOUBLE
22532: LESSEQUAL
22533: IFTRUE 22537
22535: GO 22544
22537: POP
// StreamSibBomb ; end ;
22538: CALL 18782 0 0
22542: GO 22545
22544: POP
// end ;
22545: PPOPN 3
22547: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22548: LD_EXP 15
22552: PUSH
22553: LD_EXP 65
22557: AND
22558: IFFALSE 22714
22560: GO 22562
22562: DISABLE
22563: LD_INT 0
22565: PPUSH
22566: PPUSH
22567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22568: LD_ADDR_VAR 0 2
22572: PUSH
22573: LD_INT 81
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 21
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 21
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PPUSH
22617: CALL_OW 69
22621: ST_TO_ADDR
// if not tmp then
22622: LD_VAR 0 2
22626: NOT
22627: IFFALSE 22631
// exit ;
22629: GO 22714
// p := 0 ;
22631: LD_ADDR_VAR 0 3
22635: PUSH
22636: LD_INT 0
22638: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22639: LD_INT 35
22641: PPUSH
22642: CALL_OW 67
// p := p + 1 ;
22646: LD_ADDR_VAR 0 3
22650: PUSH
22651: LD_VAR 0 3
22655: PUSH
22656: LD_INT 1
22658: PLUS
22659: ST_TO_ADDR
// for i in tmp do
22660: LD_ADDR_VAR 0 1
22664: PUSH
22665: LD_VAR 0 2
22669: PUSH
22670: FOR_IN
22671: IFFALSE 22702
// if GetLives ( i ) < 1000 then
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 256
22682: PUSH
22683: LD_INT 1000
22685: LESS
22686: IFFALSE 22700
// SetLives ( i , 1000 ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_INT 1000
22695: PPUSH
22696: CALL_OW 234
22700: GO 22670
22702: POP
22703: POP
// until p > 20 ;
22704: LD_VAR 0 3
22708: PUSH
22709: LD_INT 20
22711: GREATER
22712: IFFALSE 22639
// end ;
22714: PPOPN 3
22716: END
// every 0 0$1 trigger StreamModeActive and sTime do
22717: LD_EXP 15
22721: PUSH
22722: LD_EXP 66
22726: AND
22727: IFFALSE 22762
22729: GO 22731
22731: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22732: LD_INT 28
22734: PPUSH
22735: LD_OWVAR 2
22739: PPUSH
22740: LD_INT 2
22742: PPUSH
22743: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22747: LD_INT 30
22749: PPUSH
22750: LD_OWVAR 2
22754: PPUSH
22755: LD_INT 2
22757: PPUSH
22758: CALL_OW 322
// end ;
22762: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22763: LD_EXP 15
22767: PUSH
22768: LD_EXP 67
22772: AND
22773: IFFALSE 22894
22775: GO 22777
22777: DISABLE
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22782: LD_ADDR_VAR 0 2
22786: PUSH
22787: LD_INT 22
22789: PUSH
22790: LD_OWVAR 2
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 21
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 3
22811: PUSH
22812: LD_INT 23
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: PPUSH
22831: CALL_OW 69
22835: ST_TO_ADDR
// if not tmp then
22836: LD_VAR 0 2
22840: NOT
22841: IFFALSE 22845
// exit ;
22843: GO 22894
// for i in tmp do
22845: LD_ADDR_VAR 0 1
22849: PUSH
22850: LD_VAR 0 2
22854: PUSH
22855: FOR_IN
22856: IFFALSE 22892
// begin if Crawls ( i ) then
22858: LD_VAR 0 1
22862: PPUSH
22863: CALL_OW 318
22867: IFFALSE 22878
// ComWalk ( i ) ;
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 138
// SetClass ( i , 2 ) ;
22878: LD_VAR 0 1
22882: PPUSH
22883: LD_INT 2
22885: PPUSH
22886: CALL_OW 336
// end ;
22890: GO 22855
22892: POP
22893: POP
// end ;
22894: PPOPN 2
22896: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22897: LD_EXP 15
22901: PUSH
22902: LD_EXP 68
22906: AND
22907: IFFALSE 23195
22909: GO 22911
22911: DISABLE
22912: LD_INT 0
22914: PPUSH
22915: PPUSH
22916: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22917: LD_OWVAR 2
22921: PPUSH
22922: LD_INT 9
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22935: LD_INT 9
22937: PPUSH
22938: LD_OWVAR 2
22942: PPUSH
22943: CALL_OW 343
// uc_side := 9 ;
22947: LD_ADDR_OWVAR 20
22951: PUSH
22952: LD_INT 9
22954: ST_TO_ADDR
// uc_nation := 2 ;
22955: LD_ADDR_OWVAR 21
22959: PUSH
22960: LD_INT 2
22962: ST_TO_ADDR
// hc_name := Dark Warrior ;
22963: LD_ADDR_OWVAR 26
22967: PUSH
22968: LD_STRING Dark Warrior
22970: ST_TO_ADDR
// hc_gallery :=  ;
22971: LD_ADDR_OWVAR 33
22975: PUSH
22976: LD_STRING 
22978: ST_TO_ADDR
// hc_noskilllimit := true ;
22979: LD_ADDR_OWVAR 76
22983: PUSH
22984: LD_INT 1
22986: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22987: LD_ADDR_OWVAR 31
22991: PUSH
22992: LD_INT 30
22994: PUSH
22995: LD_INT 30
22997: PUSH
22998: LD_INT 30
23000: PUSH
23001: LD_INT 30
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// un := CreateHuman ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: CALL_OW 44
23019: ST_TO_ADDR
// hc_noskilllimit := false ;
23020: LD_ADDR_OWVAR 76
23024: PUSH
23025: LD_INT 0
23027: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23028: LD_VAR 0 3
23032: PPUSH
23033: LD_INT 1
23035: PPUSH
23036: CALL_OW 51
// ToLua ( playRanger() ) ;
23040: LD_STRING playRanger()
23042: PPUSH
23043: CALL_OW 559
// p := 0 ;
23047: LD_ADDR_VAR 0 2
23051: PUSH
23052: LD_INT 0
23054: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23055: LD_INT 35
23057: PPUSH
23058: CALL_OW 67
// p := p + 1 ;
23062: LD_ADDR_VAR 0 2
23066: PUSH
23067: LD_VAR 0 2
23071: PUSH
23072: LD_INT 1
23074: PLUS
23075: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23076: LD_VAR 0 3
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 1000
23088: LESS
23089: IFFALSE 23103
// SetLives ( un , 1000 ) ;
23091: LD_VAR 0 3
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23103: LD_VAR 0 3
23107: PPUSH
23108: LD_INT 81
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 91
23122: PUSH
23123: LD_VAR 0 3
23127: PUSH
23128: LD_INT 30
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PPUSH
23140: CALL_OW 69
23144: PPUSH
23145: LD_VAR 0 3
23149: PPUSH
23150: CALL_OW 74
23154: PPUSH
23155: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23159: LD_VAR 0 2
23163: PUSH
23164: LD_INT 80
23166: GREATER
23167: PUSH
23168: LD_VAR 0 3
23172: PPUSH
23173: CALL_OW 301
23177: OR
23178: IFFALSE 23055
// if un then
23180: LD_VAR 0 3
23184: IFFALSE 23195
// RemoveUnit ( un ) ;
23186: LD_VAR 0 3
23190: PPUSH
23191: CALL_OW 64
// end ;
23195: PPOPN 3
23197: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23198: LD_EXP 69
23202: IFFALSE 23318
23204: GO 23206
23206: DISABLE
23207: LD_INT 0
23209: PPUSH
23210: PPUSH
23211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: LD_INT 81
23219: PUSH
23220: LD_OWVAR 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 21
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PPUSH
23243: CALL_OW 69
23247: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23248: LD_STRING playComputer()
23250: PPUSH
23251: CALL_OW 559
// if not tmp then
23255: LD_VAR 0 2
23259: NOT
23260: IFFALSE 23264
// exit ;
23262: GO 23318
// for i in tmp do
23264: LD_ADDR_VAR 0 1
23268: PUSH
23269: LD_VAR 0 2
23273: PUSH
23274: FOR_IN
23275: IFFALSE 23316
// for j := 1 to 4 do
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: DOUBLE
23283: LD_INT 1
23285: DEC
23286: ST_TO_ADDR
23287: LD_INT 4
23289: PUSH
23290: FOR_TO
23291: IFFALSE 23312
// SetSkill ( i , j , 10 ) ;
23293: LD_VAR 0 1
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_INT 10
23305: PPUSH
23306: CALL_OW 237
23310: GO 23290
23312: POP
23313: POP
23314: GO 23274
23316: POP
23317: POP
// end ;
23318: PPOPN 3
23320: END
// every 0 0$1 trigger s30 do var i , tmp ;
23321: LD_EXP 70
23325: IFFALSE 23394
23327: GO 23329
23329: DISABLE
23330: LD_INT 0
23332: PPUSH
23333: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 22
23341: PUSH
23342: LD_OWVAR 2
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PPUSH
23351: CALL_OW 69
23355: ST_TO_ADDR
// if not tmp then
23356: LD_VAR 0 2
23360: NOT
23361: IFFALSE 23365
// exit ;
23363: GO 23394
// for i in tmp do
23365: LD_ADDR_VAR 0 1
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: FOR_IN
23376: IFFALSE 23392
// SetLives ( i , 300 ) ;
23378: LD_VAR 0 1
23382: PPUSH
23383: LD_INT 300
23385: PPUSH
23386: CALL_OW 234
23390: GO 23375
23392: POP
23393: POP
// end ;
23394: PPOPN 2
23396: END
// every 0 0$1 trigger s60 do var i , tmp ;
23397: LD_EXP 71
23401: IFFALSE 23470
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
23409: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23410: LD_ADDR_VAR 0 2
23414: PUSH
23415: LD_INT 22
23417: PUSH
23418: LD_OWVAR 2
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PPUSH
23427: CALL_OW 69
23431: ST_TO_ADDR
// if not tmp then
23432: LD_VAR 0 2
23436: NOT
23437: IFFALSE 23441
// exit ;
23439: GO 23470
// for i in tmp do
23441: LD_ADDR_VAR 0 1
23445: PUSH
23446: LD_VAR 0 2
23450: PUSH
23451: FOR_IN
23452: IFFALSE 23468
// SetLives ( i , 600 ) ;
23454: LD_VAR 0 1
23458: PPUSH
23459: LD_INT 600
23461: PPUSH
23462: CALL_OW 234
23466: GO 23451
23468: POP
23469: POP
// end ;
23470: PPOPN 2
23472: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23473: LD_INT 0
23475: PPUSH
// case cmd of 301 :
23476: LD_VAR 0 1
23480: PUSH
23481: LD_INT 301
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23521
23489: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23490: LD_VAR 0 6
23494: PPUSH
23495: LD_VAR 0 7
23499: PPUSH
23500: LD_VAR 0 8
23504: PPUSH
23505: LD_VAR 0 4
23509: PPUSH
23510: LD_VAR 0 5
23514: PPUSH
23515: CALL 24730 0 5
23519: GO 23642
23521: LD_INT 302
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23566
23529: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23530: LD_VAR 0 6
23534: PPUSH
23535: LD_VAR 0 7
23539: PPUSH
23540: LD_VAR 0 8
23544: PPUSH
23545: LD_VAR 0 9
23549: PPUSH
23550: LD_VAR 0 4
23554: PPUSH
23555: LD_VAR 0 5
23559: PPUSH
23560: CALL 24821 0 6
23564: GO 23642
23566: LD_INT 303
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23611
23574: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23575: LD_VAR 0 6
23579: PPUSH
23580: LD_VAR 0 7
23584: PPUSH
23585: LD_VAR 0 8
23589: PPUSH
23590: LD_VAR 0 9
23594: PPUSH
23595: LD_VAR 0 4
23599: PPUSH
23600: LD_VAR 0 5
23604: PPUSH
23605: CALL 23647 0 6
23609: GO 23642
23611: LD_INT 304
23613: DOUBLE
23614: EQUAL
23615: IFTRUE 23619
23617: GO 23641
23619: POP
// hHackTeleport ( unit , x , y ) ; end ;
23620: LD_VAR 0 2
23624: PPUSH
23625: LD_VAR 0 4
23629: PPUSH
23630: LD_VAR 0 5
23634: PPUSH
23635: CALL 25414 0 3
23639: GO 23642
23641: POP
// end ;
23642: LD_VAR 0 12
23646: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23647: LD_INT 0
23649: PPUSH
23650: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23651: LD_VAR 0 1
23655: PUSH
23656: LD_INT 1
23658: LESS
23659: PUSH
23660: LD_VAR 0 1
23664: PUSH
23665: LD_INT 3
23667: GREATER
23668: OR
23669: PUSH
23670: LD_VAR 0 5
23674: PPUSH
23675: LD_VAR 0 6
23679: PPUSH
23680: CALL_OW 428
23684: OR
23685: IFFALSE 23689
// exit ;
23687: GO 24417
// uc_side := your_side ;
23689: LD_ADDR_OWVAR 20
23693: PUSH
23694: LD_OWVAR 2
23698: ST_TO_ADDR
// uc_nation := nation ;
23699: LD_ADDR_OWVAR 21
23703: PUSH
23704: LD_VAR 0 1
23708: ST_TO_ADDR
// bc_level = 1 ;
23709: LD_ADDR_OWVAR 43
23713: PUSH
23714: LD_INT 1
23716: ST_TO_ADDR
// case btype of 1 :
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23741
23730: POP
// bc_type := b_depot ; 2 :
23731: LD_ADDR_OWVAR 42
23735: PUSH
23736: LD_INT 0
23738: ST_TO_ADDR
23739: GO 24361
23741: LD_INT 2
23743: DOUBLE
23744: EQUAL
23745: IFTRUE 23749
23747: GO 23760
23749: POP
// bc_type := b_warehouse ; 3 :
23750: LD_ADDR_OWVAR 42
23754: PUSH
23755: LD_INT 1
23757: ST_TO_ADDR
23758: GO 24361
23760: LD_INT 3
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23779
23768: POP
// bc_type := b_lab ; 4 .. 9 :
23769: LD_ADDR_OWVAR 42
23773: PUSH
23774: LD_INT 6
23776: ST_TO_ADDR
23777: GO 24361
23779: LD_INT 4
23781: DOUBLE
23782: GREATEREQUAL
23783: IFFALSE 23791
23785: LD_INT 9
23787: DOUBLE
23788: LESSEQUAL
23789: IFTRUE 23793
23791: GO 23853
23793: POP
// begin bc_type := b_lab_half ;
23794: LD_ADDR_OWVAR 42
23798: PUSH
23799: LD_INT 7
23801: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23802: LD_ADDR_OWVAR 44
23806: PUSH
23807: LD_INT 10
23809: PUSH
23810: LD_INT 11
23812: PUSH
23813: LD_INT 12
23815: PUSH
23816: LD_INT 15
23818: PUSH
23819: LD_INT 14
23821: PUSH
23822: LD_INT 13
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: LD_VAR 0 2
23837: PUSH
23838: LD_INT 3
23840: MINUS
23841: ARRAY
23842: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23843: LD_ADDR_OWVAR 45
23847: PUSH
23848: LD_INT 9
23850: ST_TO_ADDR
// end ; 10 .. 13 :
23851: GO 24361
23853: LD_INT 10
23855: DOUBLE
23856: GREATEREQUAL
23857: IFFALSE 23865
23859: LD_INT 13
23861: DOUBLE
23862: LESSEQUAL
23863: IFTRUE 23867
23865: GO 23944
23867: POP
// begin bc_type := b_lab_full ;
23868: LD_ADDR_OWVAR 42
23872: PUSH
23873: LD_INT 8
23875: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23876: LD_ADDR_OWVAR 44
23880: PUSH
23881: LD_INT 10
23883: PUSH
23884: LD_INT 12
23886: PUSH
23887: LD_INT 14
23889: PUSH
23890: LD_INT 13
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: LD_VAR 0 2
23903: PUSH
23904: LD_INT 9
23906: MINUS
23907: ARRAY
23908: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23909: LD_ADDR_OWVAR 45
23913: PUSH
23914: LD_INT 11
23916: PUSH
23917: LD_INT 15
23919: PUSH
23920: LD_INT 12
23922: PUSH
23923: LD_INT 15
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: PUSH
23932: LD_VAR 0 2
23936: PUSH
23937: LD_INT 9
23939: MINUS
23940: ARRAY
23941: ST_TO_ADDR
// end ; 14 :
23942: GO 24361
23944: LD_INT 14
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23963
23952: POP
// bc_type := b_workshop ; 15 :
23953: LD_ADDR_OWVAR 42
23957: PUSH
23958: LD_INT 2
23960: ST_TO_ADDR
23961: GO 24361
23963: LD_INT 15
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23982
23971: POP
// bc_type := b_factory ; 16 :
23972: LD_ADDR_OWVAR 42
23976: PUSH
23977: LD_INT 3
23979: ST_TO_ADDR
23980: GO 24361
23982: LD_INT 16
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24001
23990: POP
// bc_type := b_ext_gun ; 17 :
23991: LD_ADDR_OWVAR 42
23995: PUSH
23996: LD_INT 17
23998: ST_TO_ADDR
23999: GO 24361
24001: LD_INT 17
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24037
24009: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24010: LD_ADDR_OWVAR 42
24014: PUSH
24015: LD_INT 19
24017: PUSH
24018: LD_INT 23
24020: PUSH
24021: LD_INT 19
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: PUSH
24029: LD_VAR 0 1
24033: ARRAY
24034: ST_TO_ADDR
24035: GO 24361
24037: LD_INT 18
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24056
24045: POP
// bc_type := b_ext_radar ; 19 :
24046: LD_ADDR_OWVAR 42
24050: PUSH
24051: LD_INT 20
24053: ST_TO_ADDR
24054: GO 24361
24056: LD_INT 19
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24075
24064: POP
// bc_type := b_ext_radio ; 20 :
24065: LD_ADDR_OWVAR 42
24069: PUSH
24070: LD_INT 22
24072: ST_TO_ADDR
24073: GO 24361
24075: LD_INT 20
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24094
24083: POP
// bc_type := b_ext_siberium ; 21 :
24084: LD_ADDR_OWVAR 42
24088: PUSH
24089: LD_INT 21
24091: ST_TO_ADDR
24092: GO 24361
24094: LD_INT 21
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24113
24102: POP
// bc_type := b_ext_computer ; 22 :
24103: LD_ADDR_OWVAR 42
24107: PUSH
24108: LD_INT 24
24110: ST_TO_ADDR
24111: GO 24361
24113: LD_INT 22
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24132
24121: POP
// bc_type := b_ext_track ; 23 :
24122: LD_ADDR_OWVAR 42
24126: PUSH
24127: LD_INT 16
24129: ST_TO_ADDR
24130: GO 24361
24132: LD_INT 23
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24151
24140: POP
// bc_type := b_ext_laser ; 24 :
24141: LD_ADDR_OWVAR 42
24145: PUSH
24146: LD_INT 25
24148: ST_TO_ADDR
24149: GO 24361
24151: LD_INT 24
24153: DOUBLE
24154: EQUAL
24155: IFTRUE 24159
24157: GO 24170
24159: POP
// bc_type := b_control_tower ; 25 :
24160: LD_ADDR_OWVAR 42
24164: PUSH
24165: LD_INT 36
24167: ST_TO_ADDR
24168: GO 24361
24170: LD_INT 25
24172: DOUBLE
24173: EQUAL
24174: IFTRUE 24178
24176: GO 24189
24178: POP
// bc_type := b_breastwork ; 26 :
24179: LD_ADDR_OWVAR 42
24183: PUSH
24184: LD_INT 31
24186: ST_TO_ADDR
24187: GO 24361
24189: LD_INT 26
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 24208
24197: POP
// bc_type := b_bunker ; 27 :
24198: LD_ADDR_OWVAR 42
24202: PUSH
24203: LD_INT 32
24205: ST_TO_ADDR
24206: GO 24361
24208: LD_INT 27
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24227
24216: POP
// bc_type := b_turret ; 28 :
24217: LD_ADDR_OWVAR 42
24221: PUSH
24222: LD_INT 33
24224: ST_TO_ADDR
24225: GO 24361
24227: LD_INT 28
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24246
24235: POP
// bc_type := b_armoury ; 29 :
24236: LD_ADDR_OWVAR 42
24240: PUSH
24241: LD_INT 4
24243: ST_TO_ADDR
24244: GO 24361
24246: LD_INT 29
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24265
24254: POP
// bc_type := b_barracks ; 30 :
24255: LD_ADDR_OWVAR 42
24259: PUSH
24260: LD_INT 5
24262: ST_TO_ADDR
24263: GO 24361
24265: LD_INT 30
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24284
24273: POP
// bc_type := b_solar_power ; 31 :
24274: LD_ADDR_OWVAR 42
24278: PUSH
24279: LD_INT 27
24281: ST_TO_ADDR
24282: GO 24361
24284: LD_INT 31
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24303
24292: POP
// bc_type := b_oil_power ; 32 :
24293: LD_ADDR_OWVAR 42
24297: PUSH
24298: LD_INT 26
24300: ST_TO_ADDR
24301: GO 24361
24303: LD_INT 32
24305: DOUBLE
24306: EQUAL
24307: IFTRUE 24311
24309: GO 24322
24311: POP
// bc_type := b_siberite_power ; 33 :
24312: LD_ADDR_OWVAR 42
24316: PUSH
24317: LD_INT 28
24319: ST_TO_ADDR
24320: GO 24361
24322: LD_INT 33
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24341
24330: POP
// bc_type := b_oil_mine ; 34 :
24331: LD_ADDR_OWVAR 42
24335: PUSH
24336: LD_INT 29
24338: ST_TO_ADDR
24339: GO 24361
24341: LD_INT 34
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24360
24349: POP
// bc_type := b_siberite_mine ; end ;
24350: LD_ADDR_OWVAR 42
24354: PUSH
24355: LD_INT 30
24357: ST_TO_ADDR
24358: GO 24361
24360: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24361: LD_ADDR_VAR 0 8
24365: PUSH
24366: LD_VAR 0 5
24370: PPUSH
24371: LD_VAR 0 6
24375: PPUSH
24376: LD_VAR 0 3
24380: PPUSH
24381: CALL_OW 47
24385: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24386: LD_OWVAR 42
24390: PUSH
24391: LD_INT 32
24393: PUSH
24394: LD_INT 33
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: IN
24401: IFFALSE 24417
// PlaceWeaponTurret ( b , weapon ) ;
24403: LD_VAR 0 8
24407: PPUSH
24408: LD_VAR 0 4
24412: PPUSH
24413: CALL_OW 431
// end ;
24417: LD_VAR 0 7
24421: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24422: LD_INT 0
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24428: LD_ADDR_VAR 0 4
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_OWVAR 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 30
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 30
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PPUSH
24477: CALL_OW 69
24481: ST_TO_ADDR
// if not tmp then
24482: LD_VAR 0 4
24486: NOT
24487: IFFALSE 24491
// exit ;
24489: GO 24550
// for i in tmp do
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_VAR 0 4
24500: PUSH
24501: FOR_IN
24502: IFFALSE 24548
// for j = 1 to 3 do
24504: LD_ADDR_VAR 0 3
24508: PUSH
24509: DOUBLE
24510: LD_INT 1
24512: DEC
24513: ST_TO_ADDR
24514: LD_INT 3
24516: PUSH
24517: FOR_TO
24518: IFFALSE 24544
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24520: LD_VAR 0 2
24524: PPUSH
24525: CALL_OW 274
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: LD_INT 99999
24537: PPUSH
24538: CALL_OW 277
24542: GO 24517
24544: POP
24545: POP
24546: GO 24501
24548: POP
24549: POP
// end ;
24550: LD_VAR 0 1
24554: RET
// export function hHackSetLevel10 ; var i , j ; begin
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
24559: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24560: LD_ADDR_VAR 0 2
24564: PUSH
24565: LD_INT 21
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: PUSH
24580: FOR_IN
24581: IFFALSE 24633
// if IsSelected ( i ) then
24583: LD_VAR 0 2
24587: PPUSH
24588: CALL_OW 306
24592: IFFALSE 24631
// begin for j := 1 to 4 do
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: DOUBLE
24600: LD_INT 1
24602: DEC
24603: ST_TO_ADDR
24604: LD_INT 4
24606: PUSH
24607: FOR_TO
24608: IFFALSE 24629
// SetSkill ( i , j , 10 ) ;
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_INT 10
24622: PPUSH
24623: CALL_OW 237
24627: GO 24607
24629: POP
24630: POP
// end ;
24631: GO 24580
24633: POP
24634: POP
// end ;
24635: LD_VAR 0 1
24639: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24640: LD_INT 0
24642: PPUSH
24643: PPUSH
24644: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24645: LD_ADDR_VAR 0 2
24649: PUSH
24650: LD_INT 22
24652: PUSH
24653: LD_OWVAR 2
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 21
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL_OW 69
24680: PUSH
24681: FOR_IN
24682: IFFALSE 24723
// begin for j := 1 to 4 do
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: DOUBLE
24690: LD_INT 1
24692: DEC
24693: ST_TO_ADDR
24694: LD_INT 4
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24719
// SetSkill ( i , j , 10 ) ;
24700: LD_VAR 0 2
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: LD_INT 10
24712: PPUSH
24713: CALL_OW 237
24717: GO 24697
24719: POP
24720: POP
// end ;
24721: GO 24681
24723: POP
24724: POP
// end ;
24725: LD_VAR 0 1
24729: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24730: LD_INT 0
24732: PPUSH
// uc_side := your_side ;
24733: LD_ADDR_OWVAR 20
24737: PUSH
24738: LD_OWVAR 2
24742: ST_TO_ADDR
// uc_nation := nation ;
24743: LD_ADDR_OWVAR 21
24747: PUSH
24748: LD_VAR 0 1
24752: ST_TO_ADDR
// InitHc ;
24753: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24757: LD_INT 0
24759: PPUSH
24760: LD_VAR 0 2
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24774: LD_VAR 0 4
24778: PPUSH
24779: LD_VAR 0 5
24783: PPUSH
24784: CALL_OW 428
24788: PUSH
24789: LD_INT 0
24791: EQUAL
24792: IFFALSE 24816
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24794: CALL_OW 44
24798: PPUSH
24799: LD_VAR 0 4
24803: PPUSH
24804: LD_VAR 0 5
24808: PPUSH
24809: LD_INT 1
24811: PPUSH
24812: CALL_OW 48
// end ;
24816: LD_VAR 0 6
24820: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24821: LD_INT 0
24823: PPUSH
24824: PPUSH
// uc_side := your_side ;
24825: LD_ADDR_OWVAR 20
24829: PUSH
24830: LD_OWVAR 2
24834: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24835: LD_VAR 0 1
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: LD_INT 4
24851: PUSH
24852: LD_INT 5
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: IN
24862: IFFALSE 24874
// uc_nation := nation_american else
24864: LD_ADDR_OWVAR 21
24868: PUSH
24869: LD_INT 1
24871: ST_TO_ADDR
24872: GO 24917
// if chassis in [ 11 , 12 , 13 , 14 ] then
24874: LD_VAR 0 1
24878: PUSH
24879: LD_INT 11
24881: PUSH
24882: LD_INT 12
24884: PUSH
24885: LD_INT 13
24887: PUSH
24888: LD_INT 14
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: IN
24897: IFFALSE 24909
// uc_nation := nation_arabian else
24899: LD_ADDR_OWVAR 21
24903: PUSH
24904: LD_INT 2
24906: ST_TO_ADDR
24907: GO 24917
// uc_nation := nation_russian ;
24909: LD_ADDR_OWVAR 21
24913: PUSH
24914: LD_INT 3
24916: ST_TO_ADDR
// vc_chassis := chassis ;
24917: LD_ADDR_OWVAR 37
24921: PUSH
24922: LD_VAR 0 1
24926: ST_TO_ADDR
// vc_engine := engine ;
24927: LD_ADDR_OWVAR 39
24931: PUSH
24932: LD_VAR 0 2
24936: ST_TO_ADDR
// vc_control := control ;
24937: LD_ADDR_OWVAR 38
24941: PUSH
24942: LD_VAR 0 3
24946: ST_TO_ADDR
// vc_weapon := weapon ;
24947: LD_ADDR_OWVAR 40
24951: PUSH
24952: LD_VAR 0 4
24956: ST_TO_ADDR
// un := CreateVehicle ;
24957: LD_ADDR_VAR 0 8
24961: PUSH
24962: CALL_OW 45
24966: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24967: LD_VAR 0 8
24971: PPUSH
24972: LD_INT 0
24974: PPUSH
24975: LD_INT 5
24977: PPUSH
24978: CALL_OW 12
24982: PPUSH
24983: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24987: LD_VAR 0 8
24991: PPUSH
24992: LD_VAR 0 5
24996: PPUSH
24997: LD_VAR 0 6
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 48
// end ;
25009: LD_VAR 0 7
25013: RET
// export hInvincible ; every 1 do
25014: GO 25016
25016: DISABLE
// hInvincible := [ ] ;
25017: LD_ADDR_EXP 72
25021: PUSH
25022: EMPTY
25023: ST_TO_ADDR
25024: END
// every 10 do var i ;
25025: GO 25027
25027: DISABLE
25028: LD_INT 0
25030: PPUSH
// begin enable ;
25031: ENABLE
// if not hInvincible then
25032: LD_EXP 72
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25085
// for i in hInvincible do
25041: LD_ADDR_VAR 0 1
25045: PUSH
25046: LD_EXP 72
25050: PUSH
25051: FOR_IN
25052: IFFALSE 25083
// if GetLives ( i ) < 1000 then
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 256
25063: PUSH
25064: LD_INT 1000
25066: LESS
25067: IFFALSE 25081
// SetLives ( i , 1000 ) ;
25069: LD_VAR 0 1
25073: PPUSH
25074: LD_INT 1000
25076: PPUSH
25077: CALL_OW 234
25081: GO 25051
25083: POP
25084: POP
// end ;
25085: PPOPN 1
25087: END
// export function hHackInvincible ; var i ; begin
25088: LD_INT 0
25090: PPUSH
25091: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25192
// if IsSelected ( i ) then
25133: LD_VAR 0 2
25137: PPUSH
25138: CALL_OW 306
25142: IFFALSE 25190
// begin if i in hInvincible then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_EXP 72
25153: IN
25154: IFFALSE 25174
// hInvincible := hInvincible diff i else
25156: LD_ADDR_EXP 72
25160: PUSH
25161: LD_EXP 72
25165: PUSH
25166: LD_VAR 0 2
25170: DIFF
25171: ST_TO_ADDR
25172: GO 25190
// hInvincible := hInvincible union i ;
25174: LD_ADDR_EXP 72
25178: PUSH
25179: LD_EXP 72
25183: PUSH
25184: LD_VAR 0 2
25188: UNION
25189: ST_TO_ADDR
// end ;
25190: GO 25130
25192: POP
25193: POP
// end ;
25194: LD_VAR 0 1
25198: RET
// export function hHackInvisible ; var i , j ; begin
25199: LD_INT 0
25201: PPUSH
25202: PPUSH
25203: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25204: LD_ADDR_VAR 0 2
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PPUSH
25219: CALL_OW 69
25223: PUSH
25224: FOR_IN
25225: IFFALSE 25249
// if IsSelected ( i ) then
25227: LD_VAR 0 2
25231: PPUSH
25232: CALL_OW 306
25236: IFFALSE 25247
// ComForceInvisible ( i ) ;
25238: LD_VAR 0 2
25242: PPUSH
25243: CALL_OW 496
25247: GO 25224
25249: POP
25250: POP
// end ;
25251: LD_VAR 0 1
25255: RET
// export function hHackChangeYourSide ; begin
25256: LD_INT 0
25258: PPUSH
// if your_side = 8 then
25259: LD_OWVAR 2
25263: PUSH
25264: LD_INT 8
25266: EQUAL
25267: IFFALSE 25279
// your_side := 0 else
25269: LD_ADDR_OWVAR 2
25273: PUSH
25274: LD_INT 0
25276: ST_TO_ADDR
25277: GO 25293
// your_side := your_side + 1 ;
25279: LD_ADDR_OWVAR 2
25283: PUSH
25284: LD_OWVAR 2
25288: PUSH
25289: LD_INT 1
25291: PLUS
25292: ST_TO_ADDR
// end ;
25293: LD_VAR 0 1
25297: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25298: LD_INT 0
25300: PPUSH
25301: PPUSH
25302: PPUSH
// for i in all_units do
25303: LD_ADDR_VAR 0 2
25307: PUSH
25308: LD_OWVAR 3
25312: PUSH
25313: FOR_IN
25314: IFFALSE 25392
// if IsSelected ( i ) then
25316: LD_VAR 0 2
25320: PPUSH
25321: CALL_OW 306
25325: IFFALSE 25390
// begin j := GetSide ( i ) ;
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_VAR 0 2
25336: PPUSH
25337: CALL_OW 255
25341: ST_TO_ADDR
// if j = 8 then
25342: LD_VAR 0 3
25346: PUSH
25347: LD_INT 8
25349: EQUAL
25350: IFFALSE 25362
// j := 0 else
25352: LD_ADDR_VAR 0 3
25356: PUSH
25357: LD_INT 0
25359: ST_TO_ADDR
25360: GO 25376
// j := j + 1 ;
25362: LD_ADDR_VAR 0 3
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_INT 1
25374: PLUS
25375: ST_TO_ADDR
// SetSide ( i , j ) ;
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_VAR 0 3
25385: PPUSH
25386: CALL_OW 235
// end ;
25390: GO 25313
25392: POP
25393: POP
// end ;
25394: LD_VAR 0 1
25398: RET
// export function hHackFog ; begin
25399: LD_INT 0
25401: PPUSH
// FogOff ( true ) ;
25402: LD_INT 1
25404: PPUSH
25405: CALL_OW 344
// end ;
25409: LD_VAR 0 1
25413: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25414: LD_INT 0
25416: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_VAR 0 2
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: LD_INT 1
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 483
// CenterOnXY ( x , y ) ;
25442: LD_VAR 0 2
25446: PPUSH
25447: LD_VAR 0 3
25451: PPUSH
25452: CALL_OW 84
// end ;
25456: LD_VAR 0 4
25460: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25465: LD_VAR 0 1
25469: NOT
25470: PUSH
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: CALL_OW 488
25485: NOT
25486: OR
25487: PUSH
25488: LD_VAR 0 1
25492: PPUSH
25493: CALL_OW 266
25497: PUSH
25498: LD_INT 3
25500: NONEQUAL
25501: PUSH
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 247
25511: PUSH
25512: LD_INT 1
25514: EQUAL
25515: NOT
25516: AND
25517: OR
25518: IFFALSE 25522
// exit ;
25520: GO 25671
// if GetType ( factory ) = unit_human then
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 247
25531: PUSH
25532: LD_INT 1
25534: EQUAL
25535: IFFALSE 25552
// factory := IsInUnit ( factory ) ;
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 310
25551: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25552: LD_VAR 0 1
25556: PPUSH
25557: CALL_OW 266
25561: PUSH
25562: LD_INT 3
25564: NONEQUAL
25565: IFFALSE 25569
// exit ;
25567: GO 25671
// if HexInfo ( x , y ) = factory then
25569: LD_VAR 0 2
25573: PPUSH
25574: LD_VAR 0 3
25578: PPUSH
25579: CALL_OW 428
25583: PUSH
25584: LD_VAR 0 1
25588: EQUAL
25589: IFFALSE 25616
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25591: LD_ADDR_EXP 73
25595: PUSH
25596: LD_EXP 73
25600: PPUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: LD_INT 0
25608: PPUSH
25609: CALL_OW 1
25613: ST_TO_ADDR
25614: GO 25667
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25616: LD_ADDR_EXP 73
25620: PUSH
25621: LD_EXP 73
25625: PPUSH
25626: LD_VAR 0 1
25630: PPUSH
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 255
25640: PUSH
25641: LD_VAR 0 1
25645: PUSH
25646: LD_VAR 0 2
25650: PUSH
25651: LD_VAR 0 3
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 1
25666: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25667: CALL 25676 0 0
// end ;
25671: LD_VAR 0 4
25675: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25676: LD_INT 0
25678: PPUSH
25679: PPUSH
25680: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25681: LD_STRING resetFactoryWaypoint();
25683: PPUSH
25684: CALL_OW 559
// if factoryWaypoints then
25688: LD_EXP 73
25692: IFFALSE 25818
// begin list := PrepareArray ( factoryWaypoints ) ;
25694: LD_ADDR_VAR 0 3
25698: PUSH
25699: LD_EXP 73
25703: PPUSH
25704: CALL 73115 0 1
25708: ST_TO_ADDR
// for i := 1 to list do
25709: LD_ADDR_VAR 0 2
25713: PUSH
25714: DOUBLE
25715: LD_INT 1
25717: DEC
25718: ST_TO_ADDR
25719: LD_VAR 0 3
25723: PUSH
25724: FOR_TO
25725: IFFALSE 25816
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25727: LD_STRING setFactoryWaypointXY(
25729: PUSH
25730: LD_VAR 0 3
25734: PUSH
25735: LD_VAR 0 2
25739: ARRAY
25740: PUSH
25741: LD_INT 1
25743: ARRAY
25744: STR
25745: PUSH
25746: LD_STRING ,
25748: STR
25749: PUSH
25750: LD_VAR 0 3
25754: PUSH
25755: LD_VAR 0 2
25759: ARRAY
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: STR
25765: PUSH
25766: LD_STRING ,
25768: STR
25769: PUSH
25770: LD_VAR 0 3
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: PUSH
25781: LD_INT 3
25783: ARRAY
25784: STR
25785: PUSH
25786: LD_STRING ,
25788: STR
25789: PUSH
25790: LD_VAR 0 3
25794: PUSH
25795: LD_VAR 0 2
25799: ARRAY
25800: PUSH
25801: LD_INT 4
25803: ARRAY
25804: STR
25805: PUSH
25806: LD_STRING )
25808: STR
25809: PPUSH
25810: CALL_OW 559
25814: GO 25724
25816: POP
25817: POP
// end ; end ;
25818: LD_VAR 0 1
25822: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25823: LD_INT 0
25825: PPUSH
// if HexInfo ( x , y ) = warehouse then
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_VAR 0 3
25835: PPUSH
25836: CALL_OW 428
25840: PUSH
25841: LD_VAR 0 1
25845: EQUAL
25846: IFFALSE 25873
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25848: LD_ADDR_EXP 74
25852: PUSH
25853: LD_EXP 74
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_INT 0
25865: PPUSH
25866: CALL_OW 1
25870: ST_TO_ADDR
25871: GO 25924
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25873: LD_ADDR_EXP 74
25877: PUSH
25878: LD_EXP 74
25882: PPUSH
25883: LD_VAR 0 1
25887: PPUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 255
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_VAR 0 2
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: PPUSH
25919: CALL_OW 1
25923: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25924: CALL 25933 0 0
// end ;
25928: LD_VAR 0 4
25932: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25933: LD_INT 0
25935: PPUSH
25936: PPUSH
25937: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25938: LD_STRING resetWarehouseGatheringPoints();
25940: PPUSH
25941: CALL_OW 559
// if warehouseGatheringPoints then
25945: LD_EXP 74
25949: IFFALSE 26075
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25951: LD_ADDR_VAR 0 3
25955: PUSH
25956: LD_EXP 74
25960: PPUSH
25961: CALL 73115 0 1
25965: ST_TO_ADDR
// for i := 1 to list do
25966: LD_ADDR_VAR 0 2
25970: PUSH
25971: DOUBLE
25972: LD_INT 1
25974: DEC
25975: ST_TO_ADDR
25976: LD_VAR 0 3
25980: PUSH
25981: FOR_TO
25982: IFFALSE 26073
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25984: LD_STRING setWarehouseGatheringPointXY(
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 2
25996: ARRAY
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: STR
26002: PUSH
26003: LD_STRING ,
26005: STR
26006: PUSH
26007: LD_VAR 0 3
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: PUSH
26018: LD_INT 2
26020: ARRAY
26021: STR
26022: PUSH
26023: LD_STRING ,
26025: STR
26026: PUSH
26027: LD_VAR 0 3
26031: PUSH
26032: LD_VAR 0 2
26036: ARRAY
26037: PUSH
26038: LD_INT 3
26040: ARRAY
26041: STR
26042: PUSH
26043: LD_STRING ,
26045: STR
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 2
26056: ARRAY
26057: PUSH
26058: LD_INT 4
26060: ARRAY
26061: STR
26062: PUSH
26063: LD_STRING )
26065: STR
26066: PPUSH
26067: CALL_OW 559
26071: GO 25981
26073: POP
26074: POP
// end ; end ;
26075: LD_VAR 0 1
26079: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26080: LD_EXP 74
26084: IFFALSE 26769
26086: GO 26088
26088: DISABLE
26089: LD_INT 0
26091: PPUSH
26092: PPUSH
26093: PPUSH
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
// begin enable ;
26100: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_EXP 74
26110: PPUSH
26111: CALL 73115 0 1
26115: ST_TO_ADDR
// if not list then
26116: LD_VAR 0 3
26120: NOT
26121: IFFALSE 26125
// exit ;
26123: GO 26769
// for i := 1 to list do
26125: LD_ADDR_VAR 0 1
26129: PUSH
26130: DOUBLE
26131: LD_INT 1
26133: DEC
26134: ST_TO_ADDR
26135: LD_VAR 0 3
26139: PUSH
26140: FOR_TO
26141: IFFALSE 26767
// begin depot := list [ i ] [ 2 ] ;
26143: LD_ADDR_VAR 0 8
26147: PUSH
26148: LD_VAR 0 3
26152: PUSH
26153: LD_VAR 0 1
26157: ARRAY
26158: PUSH
26159: LD_INT 2
26161: ARRAY
26162: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26163: LD_ADDR_VAR 0 5
26167: PUSH
26168: LD_VAR 0 3
26172: PUSH
26173: LD_VAR 0 1
26177: ARRAY
26178: PUSH
26179: LD_INT 1
26181: ARRAY
26182: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26183: LD_VAR 0 8
26187: PPUSH
26188: CALL_OW 301
26192: PUSH
26193: LD_VAR 0 5
26197: PUSH
26198: LD_VAR 0 8
26202: PPUSH
26203: CALL_OW 255
26207: NONEQUAL
26208: OR
26209: IFFALSE 26238
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26211: LD_ADDR_EXP 74
26215: PUSH
26216: LD_EXP 74
26220: PPUSH
26221: LD_VAR 0 8
26225: PPUSH
26226: LD_INT 0
26228: PPUSH
26229: CALL_OW 1
26233: ST_TO_ADDR
// exit ;
26234: POP
26235: POP
26236: GO 26769
// end ; x := list [ i ] [ 3 ] ;
26238: LD_ADDR_VAR 0 6
26242: PUSH
26243: LD_VAR 0 3
26247: PUSH
26248: LD_VAR 0 1
26252: ARRAY
26253: PUSH
26254: LD_INT 3
26256: ARRAY
26257: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26258: LD_ADDR_VAR 0 7
26262: PUSH
26263: LD_VAR 0 3
26267: PUSH
26268: LD_VAR 0 1
26272: ARRAY
26273: PUSH
26274: LD_INT 4
26276: ARRAY
26277: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26278: LD_ADDR_VAR 0 9
26282: PUSH
26283: LD_VAR 0 6
26287: PPUSH
26288: LD_VAR 0 7
26292: PPUSH
26293: LD_INT 16
26295: PPUSH
26296: CALL 71703 0 3
26300: ST_TO_ADDR
// if not cratesNearbyPoint then
26301: LD_VAR 0 9
26305: NOT
26306: IFFALSE 26312
// exit ;
26308: POP
26309: POP
26310: GO 26769
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26312: LD_ADDR_VAR 0 4
26316: PUSH
26317: LD_INT 22
26319: PUSH
26320: LD_VAR 0 5
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 3
26331: PUSH
26332: LD_INT 60
26334: PUSH
26335: EMPTY
26336: LIST
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 91
26344: PUSH
26345: LD_VAR 0 8
26349: PUSH
26350: LD_INT 6
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 25
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 25
26373: PUSH
26374: LD_INT 16
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: PPUSH
26392: CALL_OW 69
26396: PUSH
26397: LD_VAR 0 8
26401: PPUSH
26402: CALL_OW 313
26406: PPUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 60
26412: PUSH
26413: EMPTY
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 25
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 25
26435: PUSH
26436: LD_INT 16
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 72
26456: UNION
26457: ST_TO_ADDR
// if tmp then
26458: LD_VAR 0 4
26462: IFFALSE 26542
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26464: LD_ADDR_VAR 0 4
26468: PUSH
26469: LD_VAR 0 4
26473: PPUSH
26474: LD_INT 3
26476: PPUSH
26477: CALL 69672 0 2
26481: ST_TO_ADDR
// for j in tmp do
26482: LD_ADDR_VAR 0 2
26486: PUSH
26487: LD_VAR 0 4
26491: PUSH
26492: FOR_IN
26493: IFFALSE 26536
// begin if IsInUnit ( j ) then
26495: LD_VAR 0 2
26499: PPUSH
26500: CALL_OW 310
26504: IFFALSE 26515
// ComExit ( j ) ;
26506: LD_VAR 0 2
26510: PPUSH
26511: CALL 69755 0 1
// AddComCollect ( j , x , y ) ;
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_VAR 0 6
26524: PPUSH
26525: LD_VAR 0 7
26529: PPUSH
26530: CALL_OW 177
// end ;
26534: GO 26492
26536: POP
26537: POP
// exit ;
26538: POP
26539: POP
26540: GO 26769
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26542: LD_ADDR_VAR 0 4
26546: PUSH
26547: LD_INT 22
26549: PUSH
26550: LD_VAR 0 5
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 91
26561: PUSH
26562: LD_VAR 0 8
26566: PUSH
26567: LD_INT 8
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 34
26580: PUSH
26581: LD_INT 12
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 34
26590: PUSH
26591: LD_INT 51
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 34
26600: PUSH
26601: LD_INT 32
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 34
26610: PUSH
26611: LD_INT 89
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: PPUSH
26630: CALL_OW 69
26634: ST_TO_ADDR
// if tmp then
26635: LD_VAR 0 4
26639: IFFALSE 26765
// begin for j in tmp do
26641: LD_ADDR_VAR 0 2
26645: PUSH
26646: LD_VAR 0 4
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26763
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26654: LD_VAR 0 2
26658: PPUSH
26659: CALL_OW 262
26663: PUSH
26664: LD_INT 3
26666: EQUAL
26667: PUSH
26668: LD_VAR 0 2
26672: PPUSH
26673: CALL_OW 261
26677: PUSH
26678: LD_INT 20
26680: GREATER
26681: OR
26682: PUSH
26683: LD_VAR 0 2
26687: PPUSH
26688: CALL_OW 314
26692: NOT
26693: AND
26694: PUSH
26695: LD_VAR 0 2
26699: PPUSH
26700: CALL_OW 263
26704: PUSH
26705: LD_INT 1
26707: NONEQUAL
26708: PUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: CALL_OW 311
26718: OR
26719: AND
26720: IFFALSE 26761
// begin ComCollect ( j , x , y ) ;
26722: LD_VAR 0 2
26726: PPUSH
26727: LD_VAR 0 6
26731: PPUSH
26732: LD_VAR 0 7
26736: PPUSH
26737: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26741: LD_VAR 0 2
26745: PPUSH
26746: LD_VAR 0 8
26750: PPUSH
26751: CALL_OW 172
// exit ;
26755: POP
26756: POP
26757: POP
26758: POP
26759: GO 26769
// end ;
26761: GO 26651
26763: POP
26764: POP
// end ; end ;
26765: GO 26140
26767: POP
26768: POP
// end ; end_of_file
26769: PPOPN 9
26771: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26772: LD_INT 0
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL_OW 264
26787: PUSH
26788: LD_INT 91
26790: EQUAL
26791: IFFALSE 26863
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26793: LD_INT 68
26795: PPUSH
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL_OW 255
26805: PPUSH
26806: CALL_OW 321
26810: PUSH
26811: LD_INT 2
26813: EQUAL
26814: IFFALSE 26826
// eff := 70 else
26816: LD_ADDR_VAR 0 4
26820: PUSH
26821: LD_INT 70
26823: ST_TO_ADDR
26824: GO 26834
// eff := 30 ;
26826: LD_ADDR_VAR 0 4
26830: PUSH
26831: LD_INT 30
26833: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 250
26843: PPUSH
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 251
26853: PPUSH
26854: LD_VAR 0 4
26858: PPUSH
26859: CALL_OW 495
// end ; end ;
26863: LD_VAR 0 2
26867: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26868: LD_INT 0
26870: PPUSH
// end ;
26871: LD_VAR 0 4
26875: RET
// export function SOS_Command ( cmd ) ; begin
26876: LD_INT 0
26878: PPUSH
// end ;
26879: LD_VAR 0 2
26883: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26884: LD_INT 0
26886: PPUSH
// end ;
26887: LD_VAR 0 6
26891: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26892: LD_INT 0
26894: PPUSH
26895: PPUSH
// if not vehicle or not factory then
26896: LD_VAR 0 1
26900: NOT
26901: PUSH
26902: LD_VAR 0 2
26906: NOT
26907: OR
26908: IFFALSE 26912
// exit ;
26910: GO 27143
// if factoryWaypoints >= factory then
26912: LD_EXP 73
26916: PUSH
26917: LD_VAR 0 2
26921: GREATEREQUAL
26922: IFFALSE 27143
// if factoryWaypoints [ factory ] then
26924: LD_EXP 73
26928: PUSH
26929: LD_VAR 0 2
26933: ARRAY
26934: IFFALSE 27143
// begin if GetControl ( vehicle ) = control_manual then
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 263
26945: PUSH
26946: LD_INT 1
26948: EQUAL
26949: IFFALSE 27030
// begin driver := IsDrivenBy ( vehicle ) ;
26951: LD_ADDR_VAR 0 4
26955: PUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL_OW 311
26965: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26966: LD_VAR 0 4
26970: PPUSH
26971: LD_EXP 73
26975: PUSH
26976: LD_VAR 0 2
26980: ARRAY
26981: PUSH
26982: LD_INT 3
26984: ARRAY
26985: PPUSH
26986: LD_EXP 73
26990: PUSH
26991: LD_VAR 0 2
26995: ARRAY
26996: PUSH
26997: LD_INT 4
26999: ARRAY
27000: PPUSH
27001: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27005: LD_VAR 0 4
27009: PPUSH
27010: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27014: LD_VAR 0 4
27018: PPUSH
27019: LD_VAR 0 2
27023: PPUSH
27024: CALL_OW 180
// end else
27028: GO 27143
// if GetControl ( vehicle ) = control_remote then
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL_OW 263
27039: PUSH
27040: LD_INT 2
27042: EQUAL
27043: IFFALSE 27104
// begin wait ( 0 0$2 ) ;
27045: LD_INT 70
27047: PPUSH
27048: CALL_OW 67
// if Connect ( vehicle ) then
27052: LD_VAR 0 1
27056: PPUSH
27057: CALL 39974 0 1
27061: IFFALSE 27102
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27063: LD_VAR 0 1
27067: PPUSH
27068: LD_EXP 73
27072: PUSH
27073: LD_VAR 0 2
27077: ARRAY
27078: PUSH
27079: LD_INT 3
27081: ARRAY
27082: PPUSH
27083: LD_EXP 73
27087: PUSH
27088: LD_VAR 0 2
27092: ARRAY
27093: PUSH
27094: LD_INT 4
27096: ARRAY
27097: PPUSH
27098: CALL_OW 171
// end else
27102: GO 27143
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27104: LD_VAR 0 1
27108: PPUSH
27109: LD_EXP 73
27113: PUSH
27114: LD_VAR 0 2
27118: ARRAY
27119: PUSH
27120: LD_INT 3
27122: ARRAY
27123: PPUSH
27124: LD_EXP 73
27128: PUSH
27129: LD_VAR 0 2
27133: ARRAY
27134: PUSH
27135: LD_INT 4
27137: ARRAY
27138: PPUSH
27139: CALL_OW 171
// end ; end ;
27143: LD_VAR 0 3
27147: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27148: LD_INT 0
27150: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27151: LD_VAR 0 1
27155: PUSH
27156: LD_INT 250
27158: EQUAL
27159: PUSH
27160: LD_VAR 0 2
27164: PPUSH
27165: CALL_OW 264
27169: PUSH
27170: LD_INT 81
27172: EQUAL
27173: AND
27174: IFFALSE 27195
// MinerPlaceMine ( unit , x , y ) ;
27176: LD_VAR 0 2
27180: PPUSH
27181: LD_VAR 0 4
27185: PPUSH
27186: LD_VAR 0 5
27190: PPUSH
27191: CALL 30185 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27195: LD_VAR 0 1
27199: PUSH
27200: LD_INT 251
27202: EQUAL
27203: PUSH
27204: LD_VAR 0 2
27208: PPUSH
27209: CALL_OW 264
27213: PUSH
27214: LD_INT 81
27216: EQUAL
27217: AND
27218: IFFALSE 27239
// MinerDetonateMine ( unit , x , y ) ;
27220: LD_VAR 0 2
27224: PPUSH
27225: LD_VAR 0 4
27229: PPUSH
27230: LD_VAR 0 5
27234: PPUSH
27235: CALL 30460 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27239: LD_VAR 0 1
27243: PUSH
27244: LD_INT 252
27246: EQUAL
27247: PUSH
27248: LD_VAR 0 2
27252: PPUSH
27253: CALL_OW 264
27257: PUSH
27258: LD_INT 81
27260: EQUAL
27261: AND
27262: IFFALSE 27283
// MinerCreateMinefield ( unit , x , y ) ;
27264: LD_VAR 0 2
27268: PPUSH
27269: LD_VAR 0 4
27273: PPUSH
27274: LD_VAR 0 5
27278: PPUSH
27279: CALL 30877 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 253
27290: EQUAL
27291: PUSH
27292: LD_VAR 0 2
27296: PPUSH
27297: CALL_OW 257
27301: PUSH
27302: LD_INT 5
27304: EQUAL
27305: AND
27306: IFFALSE 27327
// ComBinocular ( unit , x , y ) ;
27308: LD_VAR 0 2
27312: PPUSH
27313: LD_VAR 0 4
27317: PPUSH
27318: LD_VAR 0 5
27322: PPUSH
27323: CALL 31246 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27327: LD_VAR 0 1
27331: PUSH
27332: LD_INT 254
27334: EQUAL
27335: PUSH
27336: LD_VAR 0 2
27340: PPUSH
27341: CALL_OW 264
27345: PUSH
27346: LD_INT 99
27348: EQUAL
27349: AND
27350: PUSH
27351: LD_VAR 0 3
27355: PPUSH
27356: CALL_OW 263
27360: PUSH
27361: LD_INT 3
27363: EQUAL
27364: AND
27365: IFFALSE 27381
// HackDestroyVehicle ( unit , selectedUnit ) ;
27367: LD_VAR 0 2
27371: PPUSH
27372: LD_VAR 0 3
27376: PPUSH
27377: CALL 29549 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27381: LD_VAR 0 1
27385: PUSH
27386: LD_INT 255
27388: EQUAL
27389: PUSH
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 264
27399: PUSH
27400: LD_INT 14
27402: PUSH
27403: LD_INT 53
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: IN
27410: AND
27411: PUSH
27412: LD_VAR 0 4
27416: PPUSH
27417: LD_VAR 0 5
27421: PPUSH
27422: CALL_OW 488
27426: AND
27427: IFFALSE 27451
// CutTreeXYR ( unit , x , y , 12 ) ;
27429: LD_VAR 0 2
27433: PPUSH
27434: LD_VAR 0 4
27438: PPUSH
27439: LD_VAR 0 5
27443: PPUSH
27444: LD_INT 12
27446: PPUSH
27447: CALL 27546 0 4
// if cmd = 256 then
27451: LD_VAR 0 1
27455: PUSH
27456: LD_INT 256
27458: EQUAL
27459: IFFALSE 27480
// SetFactoryWaypoint ( unit , x , y ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_VAR 0 4
27470: PPUSH
27471: LD_VAR 0 5
27475: PPUSH
27476: CALL 25461 0 3
// if cmd = 257 then
27480: LD_VAR 0 1
27484: PUSH
27485: LD_INT 257
27487: EQUAL
27488: IFFALSE 27509
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_VAR 0 4
27499: PPUSH
27500: LD_VAR 0 5
27504: PPUSH
27505: CALL 25823 0 3
// if cmd = 258 then
27509: LD_VAR 0 1
27513: PUSH
27514: LD_INT 258
27516: EQUAL
27517: IFFALSE 27541
// BurnTreeXYR ( unit , x , y , 8 ) ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 4
27528: PPUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: LD_INT 8
27536: PPUSH
27537: CALL 27940 0 4
// end ;
27541: LD_VAR 0 6
27545: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 302
27566: NOT
27567: PUSH
27568: LD_VAR 0 2
27572: PPUSH
27573: LD_VAR 0 3
27577: PPUSH
27578: CALL_OW 488
27582: NOT
27583: OR
27584: PUSH
27585: LD_VAR 0 4
27589: NOT
27590: OR
27591: IFFALSE 27595
// exit ;
27593: GO 27935
// list := [ ] ;
27595: LD_ADDR_VAR 0 13
27599: PUSH
27600: EMPTY
27601: ST_TO_ADDR
// if x - r < 0 then
27602: LD_VAR 0 2
27606: PUSH
27607: LD_VAR 0 4
27611: MINUS
27612: PUSH
27613: LD_INT 0
27615: LESS
27616: IFFALSE 27628
// min_x := 0 else
27618: LD_ADDR_VAR 0 7
27622: PUSH
27623: LD_INT 0
27625: ST_TO_ADDR
27626: GO 27644
// min_x := x - r ;
27628: LD_ADDR_VAR 0 7
27632: PUSH
27633: LD_VAR 0 2
27637: PUSH
27638: LD_VAR 0 4
27642: MINUS
27643: ST_TO_ADDR
// if y - r < 0 then
27644: LD_VAR 0 3
27648: PUSH
27649: LD_VAR 0 4
27653: MINUS
27654: PUSH
27655: LD_INT 0
27657: LESS
27658: IFFALSE 27670
// min_y := 0 else
27660: LD_ADDR_VAR 0 8
27664: PUSH
27665: LD_INT 0
27667: ST_TO_ADDR
27668: GO 27686
// min_y := y - r ;
27670: LD_ADDR_VAR 0 8
27674: PUSH
27675: LD_VAR 0 3
27679: PUSH
27680: LD_VAR 0 4
27684: MINUS
27685: ST_TO_ADDR
// max_x := x + r ;
27686: LD_ADDR_VAR 0 9
27690: PUSH
27691: LD_VAR 0 2
27695: PUSH
27696: LD_VAR 0 4
27700: PLUS
27701: ST_TO_ADDR
// max_y := y + r ;
27702: LD_ADDR_VAR 0 10
27706: PUSH
27707: LD_VAR 0 3
27711: PUSH
27712: LD_VAR 0 4
27716: PLUS
27717: ST_TO_ADDR
// for _x = min_x to max_x do
27718: LD_ADDR_VAR 0 11
27722: PUSH
27723: DOUBLE
27724: LD_VAR 0 7
27728: DEC
27729: ST_TO_ADDR
27730: LD_VAR 0 9
27734: PUSH
27735: FOR_TO
27736: IFFALSE 27853
// for _y = min_y to max_y do
27738: LD_ADDR_VAR 0 12
27742: PUSH
27743: DOUBLE
27744: LD_VAR 0 8
27748: DEC
27749: ST_TO_ADDR
27750: LD_VAR 0 10
27754: PUSH
27755: FOR_TO
27756: IFFALSE 27849
// begin if not ValidHex ( _x , _y ) then
27758: LD_VAR 0 11
27762: PPUSH
27763: LD_VAR 0 12
27767: PPUSH
27768: CALL_OW 488
27772: NOT
27773: IFFALSE 27777
// continue ;
27775: GO 27755
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27777: LD_VAR 0 11
27781: PPUSH
27782: LD_VAR 0 12
27786: PPUSH
27787: CALL_OW 351
27791: PUSH
27792: LD_VAR 0 11
27796: PPUSH
27797: LD_VAR 0 12
27801: PPUSH
27802: CALL_OW 554
27806: AND
27807: IFFALSE 27847
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27809: LD_ADDR_VAR 0 13
27813: PUSH
27814: LD_VAR 0 13
27818: PPUSH
27819: LD_VAR 0 13
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: LD_VAR 0 11
27832: PUSH
27833: LD_VAR 0 12
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PPUSH
27842: CALL_OW 2
27846: ST_TO_ADDR
// end ;
27847: GO 27755
27849: POP
27850: POP
27851: GO 27735
27853: POP
27854: POP
// if not list then
27855: LD_VAR 0 13
27859: NOT
27860: IFFALSE 27864
// exit ;
27862: GO 27935
// for i in list do
27864: LD_ADDR_VAR 0 6
27868: PUSH
27869: LD_VAR 0 13
27873: PUSH
27874: FOR_IN
27875: IFFALSE 27933
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27877: LD_VAR 0 1
27881: PPUSH
27882: LD_STRING M
27884: PUSH
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PUSH
27894: LD_VAR 0 6
27898: PUSH
27899: LD_INT 2
27901: ARRAY
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: PUSH
27924: EMPTY
27925: LIST
27926: PPUSH
27927: CALL_OW 447
27931: GO 27874
27933: POP
27934: POP
// end ;
27935: LD_VAR 0 5
27939: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 302
27961: NOT
27962: PUSH
27963: LD_VAR 0 2
27967: PPUSH
27968: LD_VAR 0 3
27972: PPUSH
27973: CALL_OW 488
27977: NOT
27978: OR
27979: PUSH
27980: LD_VAR 0 4
27984: NOT
27985: OR
27986: IFFALSE 27990
// exit ;
27988: GO 28503
// list := [ ] ;
27990: LD_ADDR_VAR 0 13
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// if x - r < 0 then
27997: LD_VAR 0 2
28001: PUSH
28002: LD_VAR 0 4
28006: MINUS
28007: PUSH
28008: LD_INT 0
28010: LESS
28011: IFFALSE 28023
// min_x := 0 else
28013: LD_ADDR_VAR 0 7
28017: PUSH
28018: LD_INT 0
28020: ST_TO_ADDR
28021: GO 28039
// min_x := x - r ;
28023: LD_ADDR_VAR 0 7
28027: PUSH
28028: LD_VAR 0 2
28032: PUSH
28033: LD_VAR 0 4
28037: MINUS
28038: ST_TO_ADDR
// if y - r < 0 then
28039: LD_VAR 0 3
28043: PUSH
28044: LD_VAR 0 4
28048: MINUS
28049: PUSH
28050: LD_INT 0
28052: LESS
28053: IFFALSE 28065
// min_y := 0 else
28055: LD_ADDR_VAR 0 8
28059: PUSH
28060: LD_INT 0
28062: ST_TO_ADDR
28063: GO 28081
// min_y := y - r ;
28065: LD_ADDR_VAR 0 8
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: LD_VAR 0 4
28079: MINUS
28080: ST_TO_ADDR
// max_x := x + r ;
28081: LD_ADDR_VAR 0 9
28085: PUSH
28086: LD_VAR 0 2
28090: PUSH
28091: LD_VAR 0 4
28095: PLUS
28096: ST_TO_ADDR
// max_y := y + r ;
28097: LD_ADDR_VAR 0 10
28101: PUSH
28102: LD_VAR 0 3
28106: PUSH
28107: LD_VAR 0 4
28111: PLUS
28112: ST_TO_ADDR
// for _x = min_x to max_x do
28113: LD_ADDR_VAR 0 11
28117: PUSH
28118: DOUBLE
28119: LD_VAR 0 7
28123: DEC
28124: ST_TO_ADDR
28125: LD_VAR 0 9
28129: PUSH
28130: FOR_TO
28131: IFFALSE 28248
// for _y = min_y to max_y do
28133: LD_ADDR_VAR 0 12
28137: PUSH
28138: DOUBLE
28139: LD_VAR 0 8
28143: DEC
28144: ST_TO_ADDR
28145: LD_VAR 0 10
28149: PUSH
28150: FOR_TO
28151: IFFALSE 28244
// begin if not ValidHex ( _x , _y ) then
28153: LD_VAR 0 11
28157: PPUSH
28158: LD_VAR 0 12
28162: PPUSH
28163: CALL_OW 488
28167: NOT
28168: IFFALSE 28172
// continue ;
28170: GO 28150
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28172: LD_VAR 0 11
28176: PPUSH
28177: LD_VAR 0 12
28181: PPUSH
28182: CALL_OW 351
28186: PUSH
28187: LD_VAR 0 11
28191: PPUSH
28192: LD_VAR 0 12
28196: PPUSH
28197: CALL_OW 554
28201: AND
28202: IFFALSE 28242
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28204: LD_ADDR_VAR 0 13
28208: PUSH
28209: LD_VAR 0 13
28213: PPUSH
28214: LD_VAR 0 13
28218: PUSH
28219: LD_INT 1
28221: PLUS
28222: PPUSH
28223: LD_VAR 0 11
28227: PUSH
28228: LD_VAR 0 12
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PPUSH
28237: CALL_OW 2
28241: ST_TO_ADDR
// end ;
28242: GO 28150
28244: POP
28245: POP
28246: GO 28130
28248: POP
28249: POP
// if not list then
28250: LD_VAR 0 13
28254: NOT
28255: IFFALSE 28259
// exit ;
28257: GO 28503
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28259: LD_ADDR_VAR 0 13
28263: PUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: LD_VAR 0 13
28273: PPUSH
28274: LD_INT 1
28276: PPUSH
28277: LD_INT 1
28279: PPUSH
28280: CALL 37116 0 4
28284: ST_TO_ADDR
// ComStop ( flame ) ;
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 141
// for i in list do
28294: LD_ADDR_VAR 0 6
28298: PUSH
28299: LD_VAR 0 13
28303: PUSH
28304: FOR_IN
28305: IFFALSE 28336
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_VAR 0 6
28316: PUSH
28317: LD_INT 1
28319: ARRAY
28320: PPUSH
28321: LD_VAR 0 6
28325: PUSH
28326: LD_INT 2
28328: ARRAY
28329: PPUSH
28330: CALL_OW 176
28334: GO 28304
28336: POP
28337: POP
// repeat wait ( 0 0$1 ) ;
28338: LD_INT 35
28340: PPUSH
28341: CALL_OW 67
// task := GetTaskList ( flame ) ;
28345: LD_ADDR_VAR 0 14
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 437
28359: ST_TO_ADDR
// if not task then
28360: LD_VAR 0 14
28364: NOT
28365: IFFALSE 28369
// exit ;
28367: GO 28503
// if task [ 1 ] [ 1 ] <> | then
28369: LD_VAR 0 14
28373: PUSH
28374: LD_INT 1
28376: ARRAY
28377: PUSH
28378: LD_INT 1
28380: ARRAY
28381: PUSH
28382: LD_STRING |
28384: NONEQUAL
28385: IFFALSE 28389
// exit ;
28387: GO 28503
// _x := task [ 1 ] [ 2 ] ;
28389: LD_ADDR_VAR 0 11
28393: PUSH
28394: LD_VAR 0 14
28398: PUSH
28399: LD_INT 1
28401: ARRAY
28402: PUSH
28403: LD_INT 2
28405: ARRAY
28406: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28407: LD_ADDR_VAR 0 12
28411: PUSH
28412: LD_VAR 0 14
28416: PUSH
28417: LD_INT 1
28419: ARRAY
28420: PUSH
28421: LD_INT 3
28423: ARRAY
28424: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28425: LD_VAR 0 11
28429: PPUSH
28430: LD_VAR 0 12
28434: PPUSH
28435: CALL_OW 351
28439: NOT
28440: PUSH
28441: LD_VAR 0 11
28445: PPUSH
28446: LD_VAR 0 12
28450: PPUSH
28451: CALL_OW 554
28455: NOT
28456: OR
28457: IFFALSE 28491
// begin task := Delete ( task , 1 ) ;
28459: LD_ADDR_VAR 0 14
28463: PUSH
28464: LD_VAR 0 14
28468: PPUSH
28469: LD_INT 1
28471: PPUSH
28472: CALL_OW 3
28476: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28477: LD_VAR 0 1
28481: PPUSH
28482: LD_VAR 0 14
28486: PPUSH
28487: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 314
28500: NOT
28501: IFFALSE 28338
// end ;
28503: LD_VAR 0 5
28507: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28508: LD_EXP 76
28512: NOT
28513: IFFALSE 28563
28515: GO 28517
28517: DISABLE
// begin initHack := true ;
28518: LD_ADDR_EXP 76
28522: PUSH
28523: LD_INT 1
28525: ST_TO_ADDR
// hackTanks := [ ] ;
28526: LD_ADDR_EXP 77
28530: PUSH
28531: EMPTY
28532: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28533: LD_ADDR_EXP 78
28537: PUSH
28538: EMPTY
28539: ST_TO_ADDR
// hackLimit := 3 ;
28540: LD_ADDR_EXP 79
28544: PUSH
28545: LD_INT 3
28547: ST_TO_ADDR
// hackDist := 12 ;
28548: LD_ADDR_EXP 80
28552: PUSH
28553: LD_INT 12
28555: ST_TO_ADDR
// hackCounter := [ ] ;
28556: LD_ADDR_EXP 81
28560: PUSH
28561: EMPTY
28562: ST_TO_ADDR
// end ;
28563: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28564: LD_EXP 76
28568: PUSH
28569: LD_INT 34
28571: PUSH
28572: LD_INT 99
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PPUSH
28579: CALL_OW 69
28583: AND
28584: IFFALSE 28837
28586: GO 28588
28588: DISABLE
28589: LD_INT 0
28591: PPUSH
28592: PPUSH
// begin enable ;
28593: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28594: LD_ADDR_VAR 0 1
28598: PUSH
28599: LD_INT 34
28601: PUSH
28602: LD_INT 99
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PPUSH
28609: CALL_OW 69
28613: PUSH
28614: FOR_IN
28615: IFFALSE 28835
// begin if not i in hackTanks then
28617: LD_VAR 0 1
28621: PUSH
28622: LD_EXP 77
28626: IN
28627: NOT
28628: IFFALSE 28711
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28630: LD_ADDR_EXP 77
28634: PUSH
28635: LD_EXP 77
28639: PPUSH
28640: LD_EXP 77
28644: PUSH
28645: LD_INT 1
28647: PLUS
28648: PPUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 1
28658: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28659: LD_ADDR_EXP 78
28663: PUSH
28664: LD_EXP 78
28668: PPUSH
28669: LD_EXP 78
28673: PUSH
28674: LD_INT 1
28676: PLUS
28677: PPUSH
28678: EMPTY
28679: PPUSH
28680: CALL_OW 1
28684: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28685: LD_ADDR_EXP 81
28689: PUSH
28690: LD_EXP 81
28694: PPUSH
28695: LD_EXP 81
28699: PUSH
28700: LD_INT 1
28702: PLUS
28703: PPUSH
28704: EMPTY
28705: PPUSH
28706: CALL_OW 1
28710: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 302
28720: NOT
28721: IFFALSE 28734
// begin HackUnlinkAll ( i ) ;
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL 28840 0 1
// continue ;
28732: GO 28614
// end ; HackCheckCapturedStatus ( i ) ;
28734: LD_VAR 0 1
28738: PPUSH
28739: CALL 29283 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28743: LD_ADDR_VAR 0 2
28747: PUSH
28748: LD_INT 81
28750: PUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 255
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 33
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 91
28777: PUSH
28778: LD_VAR 0 1
28782: PUSH
28783: LD_EXP 80
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 50
28795: PUSH
28796: EMPTY
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 69
28809: ST_TO_ADDR
// if not tmp then
28810: LD_VAR 0 2
28814: NOT
28815: IFFALSE 28819
// continue ;
28817: GO 28614
// HackLink ( i , tmp ) ;
28819: LD_VAR 0 1
28823: PPUSH
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL 28976 0 2
// end ;
28833: GO 28614
28835: POP
28836: POP
// end ;
28837: PPOPN 2
28839: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28840: LD_INT 0
28842: PPUSH
28843: PPUSH
28844: PPUSH
// if not hack in hackTanks then
28845: LD_VAR 0 1
28849: PUSH
28850: LD_EXP 77
28854: IN
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28971
// index := GetElementIndex ( hackTanks , hack ) ;
28860: LD_ADDR_VAR 0 4
28864: PUSH
28865: LD_EXP 77
28869: PPUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL 36413 0 2
28879: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28880: LD_EXP 78
28884: PUSH
28885: LD_VAR 0 4
28889: ARRAY
28890: IFFALSE 28971
// begin for i in hackTanksCaptured [ index ] do
28892: LD_ADDR_VAR 0 3
28896: PUSH
28897: LD_EXP 78
28901: PUSH
28902: LD_VAR 0 4
28906: ARRAY
28907: PUSH
28908: FOR_IN
28909: IFFALSE 28935
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28911: LD_VAR 0 3
28915: PUSH
28916: LD_INT 1
28918: ARRAY
28919: PPUSH
28920: LD_VAR 0 3
28924: PUSH
28925: LD_INT 2
28927: ARRAY
28928: PPUSH
28929: CALL_OW 235
28933: GO 28908
28935: POP
28936: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28937: LD_ADDR_EXP 78
28941: PUSH
28942: LD_EXP 78
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: EMPTY
28953: PPUSH
28954: CALL_OW 1
28958: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28959: LD_VAR 0 1
28963: PPUSH
28964: LD_INT 0
28966: PPUSH
28967: CALL_OW 505
// end ; end ;
28971: LD_VAR 0 2
28975: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28976: LD_INT 0
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not hack in hackTanks or not vehicles then
28981: LD_VAR 0 1
28985: PUSH
28986: LD_EXP 77
28990: IN
28991: NOT
28992: PUSH
28993: LD_VAR 0 2
28997: NOT
28998: OR
28999: IFFALSE 29003
// exit ;
29001: GO 29278
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29003: LD_ADDR_VAR 0 2
29007: PUSH
29008: LD_VAR 0 1
29012: PPUSH
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_INT 1
29023: PPUSH
29024: CALL 37063 0 4
29028: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29029: LD_ADDR_VAR 0 5
29033: PUSH
29034: LD_EXP 77
29038: PPUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL 36413 0 2
29048: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29049: LD_EXP 78
29053: PUSH
29054: LD_VAR 0 5
29058: ARRAY
29059: PUSH
29060: LD_EXP 79
29064: LESS
29065: IFFALSE 29254
// begin for i := 1 to vehicles do
29067: LD_ADDR_VAR 0 4
29071: PUSH
29072: DOUBLE
29073: LD_INT 1
29075: DEC
29076: ST_TO_ADDR
29077: LD_VAR 0 2
29081: PUSH
29082: FOR_TO
29083: IFFALSE 29252
// begin if hackTanksCaptured [ index ] = hackLimit then
29085: LD_EXP 78
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_EXP 79
29100: EQUAL
29101: IFFALSE 29105
// break ;
29103: GO 29252
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29105: LD_ADDR_EXP 81
29109: PUSH
29110: LD_EXP 81
29114: PPUSH
29115: LD_VAR 0 5
29119: PPUSH
29120: LD_EXP 81
29124: PUSH
29125: LD_VAR 0 5
29129: ARRAY
29130: PUSH
29131: LD_INT 1
29133: PLUS
29134: PPUSH
29135: CALL_OW 1
29139: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29140: LD_ADDR_EXP 78
29144: PUSH
29145: LD_EXP 78
29149: PPUSH
29150: LD_VAR 0 5
29154: PUSH
29155: LD_EXP 78
29159: PUSH
29160: LD_VAR 0 5
29164: ARRAY
29165: PUSH
29166: LD_INT 1
29168: PLUS
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PPUSH
29174: LD_VAR 0 2
29178: PUSH
29179: LD_VAR 0 4
29183: ARRAY
29184: PUSH
29185: LD_VAR 0 2
29189: PUSH
29190: LD_VAR 0 4
29194: ARRAY
29195: PPUSH
29196: CALL_OW 255
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL 36628 0 3
29209: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29210: LD_VAR 0 2
29214: PUSH
29215: LD_VAR 0 4
29219: ARRAY
29220: PPUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 255
29230: PPUSH
29231: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29235: LD_VAR 0 2
29239: PUSH
29240: LD_VAR 0 4
29244: ARRAY
29245: PPUSH
29246: CALL_OW 141
// end ;
29250: GO 29082
29252: POP
29253: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29254: LD_VAR 0 1
29258: PPUSH
29259: LD_EXP 78
29263: PUSH
29264: LD_VAR 0 5
29268: ARRAY
29269: PUSH
29270: LD_INT 0
29272: PLUS
29273: PPUSH
29274: CALL_OW 505
// end ;
29278: LD_VAR 0 3
29282: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29283: LD_INT 0
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// if not hack in hackTanks then
29289: LD_VAR 0 1
29293: PUSH
29294: LD_EXP 77
29298: IN
29299: NOT
29300: IFFALSE 29304
// exit ;
29302: GO 29544
// index := GetElementIndex ( hackTanks , hack ) ;
29304: LD_ADDR_VAR 0 4
29308: PUSH
29309: LD_EXP 77
29313: PPUSH
29314: LD_VAR 0 1
29318: PPUSH
29319: CALL 36413 0 2
29323: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: DOUBLE
29330: LD_EXP 78
29334: PUSH
29335: LD_VAR 0 4
29339: ARRAY
29340: INC
29341: ST_TO_ADDR
29342: LD_INT 1
29344: PUSH
29345: FOR_DOWNTO
29346: IFFALSE 29518
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29348: LD_ADDR_VAR 0 5
29352: PUSH
29353: LD_EXP 78
29357: PUSH
29358: LD_VAR 0 4
29362: ARRAY
29363: PUSH
29364: LD_VAR 0 3
29368: ARRAY
29369: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29370: LD_VAR 0 5
29374: PUSH
29375: LD_INT 1
29377: ARRAY
29378: PPUSH
29379: CALL_OW 302
29383: NOT
29384: PUSH
29385: LD_VAR 0 5
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: PPUSH
29394: CALL_OW 255
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 255
29408: NONEQUAL
29409: OR
29410: IFFALSE 29516
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29412: LD_VAR 0 5
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: CALL_OW 305
29425: PUSH
29426: LD_VAR 0 5
29430: PUSH
29431: LD_INT 1
29433: ARRAY
29434: PPUSH
29435: CALL_OW 255
29439: PUSH
29440: LD_VAR 0 1
29444: PPUSH
29445: CALL_OW 255
29449: EQUAL
29450: AND
29451: IFFALSE 29475
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29453: LD_VAR 0 5
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: LD_VAR 0 5
29466: PUSH
29467: LD_INT 2
29469: ARRAY
29470: PPUSH
29471: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29475: LD_ADDR_EXP 78
29479: PUSH
29480: LD_EXP 78
29484: PPUSH
29485: LD_VAR 0 4
29489: PPUSH
29490: LD_EXP 78
29494: PUSH
29495: LD_VAR 0 4
29499: ARRAY
29500: PPUSH
29501: LD_VAR 0 3
29505: PPUSH
29506: CALL_OW 3
29510: PPUSH
29511: CALL_OW 1
29515: ST_TO_ADDR
// end ; end ;
29516: GO 29345
29518: POP
29519: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29520: LD_VAR 0 1
29524: PPUSH
29525: LD_EXP 78
29529: PUSH
29530: LD_VAR 0 4
29534: ARRAY
29535: PUSH
29536: LD_INT 0
29538: PLUS
29539: PPUSH
29540: CALL_OW 505
// end ;
29544: LD_VAR 0 2
29548: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29549: LD_INT 0
29551: PPUSH
29552: PPUSH
29553: PPUSH
29554: PPUSH
// if not hack in hackTanks then
29555: LD_VAR 0 1
29559: PUSH
29560: LD_EXP 77
29564: IN
29565: NOT
29566: IFFALSE 29570
// exit ;
29568: GO 29655
// index := GetElementIndex ( hackTanks , hack ) ;
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: LD_EXP 77
29579: PPUSH
29580: LD_VAR 0 1
29584: PPUSH
29585: CALL 36413 0 2
29589: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: DOUBLE
29596: LD_INT 1
29598: DEC
29599: ST_TO_ADDR
29600: LD_EXP 78
29604: PUSH
29605: LD_VAR 0 5
29609: ARRAY
29610: PUSH
29611: FOR_TO
29612: IFFALSE 29653
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29614: LD_EXP 78
29618: PUSH
29619: LD_VAR 0 5
29623: ARRAY
29624: PUSH
29625: LD_VAR 0 4
29629: ARRAY
29630: PUSH
29631: LD_INT 1
29633: ARRAY
29634: PUSH
29635: LD_VAR 0 2
29639: EQUAL
29640: IFFALSE 29651
// KillUnit ( vehicle ) ;
29642: LD_VAR 0 2
29646: PPUSH
29647: CALL_OW 66
29651: GO 29611
29653: POP
29654: POP
// end ;
29655: LD_VAR 0 3
29659: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29660: LD_EXP 82
29664: NOT
29665: IFFALSE 29700
29667: GO 29669
29669: DISABLE
// begin initMiner := true ;
29670: LD_ADDR_EXP 82
29674: PUSH
29675: LD_INT 1
29677: ST_TO_ADDR
// minersList := [ ] ;
29678: LD_ADDR_EXP 83
29682: PUSH
29683: EMPTY
29684: ST_TO_ADDR
// minerMinesList := [ ] ;
29685: LD_ADDR_EXP 84
29689: PUSH
29690: EMPTY
29691: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29692: LD_ADDR_EXP 85
29696: PUSH
29697: LD_INT 5
29699: ST_TO_ADDR
// end ;
29700: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29701: LD_EXP 82
29705: PUSH
29706: LD_INT 34
29708: PUSH
29709: LD_INT 81
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 69
29720: AND
29721: IFFALSE 30182
29723: GO 29725
29725: DISABLE
29726: LD_INT 0
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
// begin enable ;
29732: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29733: LD_ADDR_VAR 0 1
29737: PUSH
29738: LD_INT 34
29740: PUSH
29741: LD_INT 81
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: PUSH
29753: FOR_IN
29754: IFFALSE 29826
// begin if not i in minersList then
29756: LD_VAR 0 1
29760: PUSH
29761: LD_EXP 83
29765: IN
29766: NOT
29767: IFFALSE 29824
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29769: LD_ADDR_EXP 83
29773: PUSH
29774: LD_EXP 83
29778: PPUSH
29779: LD_EXP 83
29783: PUSH
29784: LD_INT 1
29786: PLUS
29787: PPUSH
29788: LD_VAR 0 1
29792: PPUSH
29793: CALL_OW 1
29797: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29798: LD_ADDR_EXP 84
29802: PUSH
29803: LD_EXP 84
29807: PPUSH
29808: LD_EXP 84
29812: PUSH
29813: LD_INT 1
29815: PLUS
29816: PPUSH
29817: EMPTY
29818: PPUSH
29819: CALL_OW 1
29823: ST_TO_ADDR
// end end ;
29824: GO 29753
29826: POP
29827: POP
// for i := minerMinesList downto 1 do
29828: LD_ADDR_VAR 0 1
29832: PUSH
29833: DOUBLE
29834: LD_EXP 84
29838: INC
29839: ST_TO_ADDR
29840: LD_INT 1
29842: PUSH
29843: FOR_DOWNTO
29844: IFFALSE 30180
// begin if IsLive ( minersList [ i ] ) then
29846: LD_EXP 83
29850: PUSH
29851: LD_VAR 0 1
29855: ARRAY
29856: PPUSH
29857: CALL_OW 300
29861: IFFALSE 29889
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29863: LD_EXP 83
29867: PUSH
29868: LD_VAR 0 1
29872: ARRAY
29873: PPUSH
29874: LD_EXP 84
29878: PUSH
29879: LD_VAR 0 1
29883: ARRAY
29884: PPUSH
29885: CALL_OW 505
// if not minerMinesList [ i ] then
29889: LD_EXP 84
29893: PUSH
29894: LD_VAR 0 1
29898: ARRAY
29899: NOT
29900: IFFALSE 29904
// continue ;
29902: GO 29843
// for j := minerMinesList [ i ] downto 1 do
29904: LD_ADDR_VAR 0 2
29908: PUSH
29909: DOUBLE
29910: LD_EXP 84
29914: PUSH
29915: LD_VAR 0 1
29919: ARRAY
29920: INC
29921: ST_TO_ADDR
29922: LD_INT 1
29924: PUSH
29925: FOR_DOWNTO
29926: IFFALSE 30176
// begin side := GetSide ( minersList [ i ] ) ;
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_EXP 83
29937: PUSH
29938: LD_VAR 0 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 255
29948: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29949: LD_ADDR_VAR 0 4
29953: PUSH
29954: LD_EXP 84
29958: PUSH
29959: LD_VAR 0 1
29963: ARRAY
29964: PUSH
29965: LD_VAR 0 2
29969: ARRAY
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: LD_EXP 84
29979: PUSH
29980: LD_VAR 0 1
29984: ARRAY
29985: PUSH
29986: LD_VAR 0 2
29990: ARRAY
29991: PUSH
29992: LD_INT 2
29994: ARRAY
29995: PPUSH
29996: CALL_OW 428
30000: ST_TO_ADDR
// if not tmp then
30001: LD_VAR 0 4
30005: NOT
30006: IFFALSE 30010
// continue ;
30008: GO 29925
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30010: LD_VAR 0 4
30014: PUSH
30015: LD_INT 81
30017: PUSH
30018: LD_VAR 0 3
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: IN
30032: PUSH
30033: LD_EXP 84
30037: PUSH
30038: LD_VAR 0 1
30042: ARRAY
30043: PUSH
30044: LD_VAR 0 2
30048: ARRAY
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: LD_EXP 84
30058: PUSH
30059: LD_VAR 0 1
30063: ARRAY
30064: PUSH
30065: LD_VAR 0 2
30069: ARRAY
30070: PUSH
30071: LD_INT 2
30073: ARRAY
30074: PPUSH
30075: CALL_OW 458
30079: AND
30080: IFFALSE 30174
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30082: LD_EXP 84
30086: PUSH
30087: LD_VAR 0 1
30091: ARRAY
30092: PUSH
30093: LD_VAR 0 2
30097: ARRAY
30098: PUSH
30099: LD_INT 1
30101: ARRAY
30102: PPUSH
30103: LD_EXP 84
30107: PUSH
30108: LD_VAR 0 1
30112: ARRAY
30113: PUSH
30114: LD_VAR 0 2
30118: ARRAY
30119: PUSH
30120: LD_INT 2
30122: ARRAY
30123: PPUSH
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30133: LD_ADDR_EXP 84
30137: PUSH
30138: LD_EXP 84
30142: PPUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: LD_EXP 84
30152: PUSH
30153: LD_VAR 0 1
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: CALL_OW 3
30168: PPUSH
30169: CALL_OW 1
30173: ST_TO_ADDR
// end ; end ;
30174: GO 29925
30176: POP
30177: POP
// end ;
30178: GO 29843
30180: POP
30181: POP
// end ;
30182: PPOPN 4
30184: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
// result := false ;
30189: LD_ADDR_VAR 0 4
30193: PUSH
30194: LD_INT 0
30196: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 264
30206: PUSH
30207: LD_INT 81
30209: EQUAL
30210: NOT
30211: IFFALSE 30215
// exit ;
30213: GO 30455
// index := GetElementIndex ( minersList , unit ) ;
30215: LD_ADDR_VAR 0 5
30219: PUSH
30220: LD_EXP 83
30224: PPUSH
30225: LD_VAR 0 1
30229: PPUSH
30230: CALL 36413 0 2
30234: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30235: LD_EXP 84
30239: PUSH
30240: LD_VAR 0 5
30244: ARRAY
30245: PUSH
30246: LD_EXP 85
30250: GREATEREQUAL
30251: IFFALSE 30255
// exit ;
30253: GO 30455
// ComMoveXY ( unit , x , y ) ;
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30274: LD_INT 35
30276: PPUSH
30277: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30281: LD_VAR 0 1
30285: PPUSH
30286: LD_VAR 0 2
30290: PPUSH
30291: LD_VAR 0 3
30295: PPUSH
30296: CALL 68154 0 3
30300: NOT
30301: PUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL_OW 314
30311: AND
30312: IFFALSE 30316
// exit ;
30314: GO 30455
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30316: LD_VAR 0 2
30320: PPUSH
30321: LD_VAR 0 3
30325: PPUSH
30326: CALL_OW 428
30330: PUSH
30331: LD_VAR 0 1
30335: EQUAL
30336: PUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 314
30346: NOT
30347: AND
30348: IFFALSE 30274
// PlaySoundXY ( x , y , PlantMine ) ;
30350: LD_VAR 0 2
30354: PPUSH
30355: LD_VAR 0 3
30359: PPUSH
30360: LD_STRING PlantMine
30362: PPUSH
30363: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30367: LD_VAR 0 2
30371: PPUSH
30372: LD_VAR 0 3
30376: PPUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: CALL_OW 255
30386: PPUSH
30387: LD_INT 0
30389: PPUSH
30390: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30394: LD_ADDR_EXP 84
30398: PUSH
30399: LD_EXP 84
30403: PPUSH
30404: LD_VAR 0 5
30408: PUSH
30409: LD_EXP 84
30413: PUSH
30414: LD_VAR 0 5
30418: ARRAY
30419: PUSH
30420: LD_INT 1
30422: PLUS
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: LD_VAR 0 2
30432: PUSH
30433: LD_VAR 0 3
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PPUSH
30442: CALL 36628 0 3
30446: ST_TO_ADDR
// result := true ;
30447: LD_ADDR_VAR 0 4
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// end ;
30455: LD_VAR 0 4
30459: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30460: LD_INT 0
30462: PPUSH
30463: PPUSH
30464: PPUSH
// if not unit in minersList then
30465: LD_VAR 0 1
30469: PUSH
30470: LD_EXP 83
30474: IN
30475: NOT
30476: IFFALSE 30480
// exit ;
30478: GO 30872
// index := GetElementIndex ( minersList , unit ) ;
30480: LD_ADDR_VAR 0 6
30484: PUSH
30485: LD_EXP 83
30489: PPUSH
30490: LD_VAR 0 1
30494: PPUSH
30495: CALL 36413 0 2
30499: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30500: LD_ADDR_VAR 0 5
30504: PUSH
30505: DOUBLE
30506: LD_EXP 84
30510: PUSH
30511: LD_VAR 0 6
30515: ARRAY
30516: INC
30517: ST_TO_ADDR
30518: LD_INT 1
30520: PUSH
30521: FOR_DOWNTO
30522: IFFALSE 30683
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30524: LD_EXP 84
30528: PUSH
30529: LD_VAR 0 6
30533: ARRAY
30534: PUSH
30535: LD_VAR 0 5
30539: ARRAY
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PUSH
30545: LD_VAR 0 2
30549: EQUAL
30550: PUSH
30551: LD_EXP 84
30555: PUSH
30556: LD_VAR 0 6
30560: ARRAY
30561: PUSH
30562: LD_VAR 0 5
30566: ARRAY
30567: PUSH
30568: LD_INT 2
30570: ARRAY
30571: PUSH
30572: LD_VAR 0 3
30576: EQUAL
30577: AND
30578: IFFALSE 30681
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30580: LD_EXP 84
30584: PUSH
30585: LD_VAR 0 6
30589: ARRAY
30590: PUSH
30591: LD_VAR 0 5
30595: ARRAY
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PPUSH
30601: LD_EXP 84
30605: PUSH
30606: LD_VAR 0 6
30610: ARRAY
30611: PUSH
30612: LD_VAR 0 5
30616: ARRAY
30617: PUSH
30618: LD_INT 2
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 255
30631: PPUSH
30632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30636: LD_ADDR_EXP 84
30640: PUSH
30641: LD_EXP 84
30645: PPUSH
30646: LD_VAR 0 6
30650: PPUSH
30651: LD_EXP 84
30655: PUSH
30656: LD_VAR 0 6
30660: ARRAY
30661: PPUSH
30662: LD_VAR 0 5
30666: PPUSH
30667: CALL_OW 3
30671: PPUSH
30672: CALL_OW 1
30676: ST_TO_ADDR
// exit ;
30677: POP
30678: POP
30679: GO 30872
// end ; end ;
30681: GO 30521
30683: POP
30684: POP
// for i := minerMinesList [ index ] downto 1 do
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: DOUBLE
30691: LD_EXP 84
30695: PUSH
30696: LD_VAR 0 6
30700: ARRAY
30701: INC
30702: ST_TO_ADDR
30703: LD_INT 1
30705: PUSH
30706: FOR_DOWNTO
30707: IFFALSE 30870
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30709: LD_EXP 84
30713: PUSH
30714: LD_VAR 0 6
30718: ARRAY
30719: PUSH
30720: LD_VAR 0 5
30724: ARRAY
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: LD_EXP 84
30734: PUSH
30735: LD_VAR 0 6
30739: ARRAY
30740: PUSH
30741: LD_VAR 0 5
30745: ARRAY
30746: PUSH
30747: LD_INT 2
30749: ARRAY
30750: PPUSH
30751: LD_VAR 0 2
30755: PPUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: CALL_OW 298
30765: PUSH
30766: LD_INT 6
30768: LESS
30769: IFFALSE 30868
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30771: LD_EXP 84
30775: PUSH
30776: LD_VAR 0 6
30780: ARRAY
30781: PUSH
30782: LD_VAR 0 5
30786: ARRAY
30787: PUSH
30788: LD_INT 1
30790: ARRAY
30791: PPUSH
30792: LD_EXP 84
30796: PUSH
30797: LD_VAR 0 6
30801: ARRAY
30802: PUSH
30803: LD_VAR 0 5
30807: ARRAY
30808: PUSH
30809: LD_INT 2
30811: ARRAY
30812: PPUSH
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 255
30822: PPUSH
30823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30827: LD_ADDR_EXP 84
30831: PUSH
30832: LD_EXP 84
30836: PPUSH
30837: LD_VAR 0 6
30841: PPUSH
30842: LD_EXP 84
30846: PUSH
30847: LD_VAR 0 6
30851: ARRAY
30852: PPUSH
30853: LD_VAR 0 5
30857: PPUSH
30858: CALL_OW 3
30862: PPUSH
30863: CALL_OW 1
30867: ST_TO_ADDR
// end ; end ;
30868: GO 30706
30870: POP
30871: POP
// end ;
30872: LD_VAR 0 4
30876: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL_OW 264
30897: PUSH
30898: LD_INT 81
30900: EQUAL
30901: NOT
30902: PUSH
30903: LD_VAR 0 1
30907: PUSH
30908: LD_EXP 83
30912: IN
30913: NOT
30914: OR
30915: IFFALSE 30919
// exit ;
30917: GO 31241
// index := GetElementIndex ( minersList , unit ) ;
30919: LD_ADDR_VAR 0 6
30923: PUSH
30924: LD_EXP 83
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL 36413 0 2
30938: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: LD_EXP 85
30948: PUSH
30949: LD_EXP 84
30953: PUSH
30954: LD_VAR 0 6
30958: ARRAY
30959: MINUS
30960: ST_TO_ADDR
// if not minesFreeAmount then
30961: LD_VAR 0 8
30965: NOT
30966: IFFALSE 30970
// exit ;
30968: GO 31241
// tmp := [ ] ;
30970: LD_ADDR_VAR 0 7
30974: PUSH
30975: EMPTY
30976: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30977: LD_ADDR_VAR 0 5
30981: PUSH
30982: DOUBLE
30983: LD_INT 1
30985: DEC
30986: ST_TO_ADDR
30987: LD_VAR 0 8
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31188
// begin _d := rand ( 0 , 5 ) ;
30995: LD_ADDR_VAR 0 11
30999: PUSH
31000: LD_INT 0
31002: PPUSH
31003: LD_INT 5
31005: PPUSH
31006: CALL_OW 12
31010: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31011: LD_ADDR_VAR 0 12
31015: PUSH
31016: LD_INT 2
31018: PPUSH
31019: LD_INT 6
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31027: LD_ADDR_VAR 0 9
31031: PUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 11
31041: PPUSH
31042: LD_VAR 0 12
31046: PPUSH
31047: CALL_OW 272
31051: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31052: LD_ADDR_VAR 0 10
31056: PUSH
31057: LD_VAR 0 3
31061: PPUSH
31062: LD_VAR 0 11
31066: PPUSH
31067: LD_VAR 0 12
31071: PPUSH
31072: CALL_OW 273
31076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31077: LD_VAR 0 9
31081: PPUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: CALL_OW 488
31091: PUSH
31092: LD_VAR 0 9
31096: PUSH
31097: LD_VAR 0 10
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_VAR 0 7
31110: IN
31111: NOT
31112: AND
31113: PUSH
31114: LD_VAR 0 9
31118: PPUSH
31119: LD_VAR 0 10
31123: PPUSH
31124: CALL_OW 458
31128: NOT
31129: AND
31130: IFFALSE 31172
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31132: LD_ADDR_VAR 0 7
31136: PUSH
31137: LD_VAR 0 7
31141: PPUSH
31142: LD_VAR 0 7
31146: PUSH
31147: LD_INT 1
31149: PLUS
31150: PPUSH
31151: LD_VAR 0 9
31155: PUSH
31156: LD_VAR 0 10
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
31170: GO 31186
// i := i - 1 ;
31172: LD_ADDR_VAR 0 5
31176: PUSH
31177: LD_VAR 0 5
31181: PUSH
31182: LD_INT 1
31184: MINUS
31185: ST_TO_ADDR
// end ;
31186: GO 30992
31188: POP
31189: POP
// for i in tmp do
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_VAR 0 7
31199: PUSH
31200: FOR_IN
31201: IFFALSE 31239
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31203: LD_VAR 0 1
31207: PPUSH
31208: LD_VAR 0 5
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PPUSH
31217: LD_VAR 0 5
31221: PUSH
31222: LD_INT 2
31224: ARRAY
31225: PPUSH
31226: CALL 30185 0 3
31230: NOT
31231: IFFALSE 31237
// exit ;
31233: POP
31234: POP
31235: GO 31241
31237: GO 31200
31239: POP
31240: POP
// end ;
31241: LD_VAR 0 4
31245: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
// if not GetClass ( unit ) = class_sniper then
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 257
31264: PUSH
31265: LD_INT 5
31267: EQUAL
31268: NOT
31269: IFFALSE 31273
// exit ;
31271: GO 31661
// dist := 8 ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_INT 8
31280: ST_TO_ADDR
// viewRange := 12 ;
31281: LD_ADDR_VAR 0 7
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
// side := GetSide ( unit ) ;
31289: LD_ADDR_VAR 0 6
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 255
31303: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31304: LD_INT 61
31306: PPUSH
31307: LD_VAR 0 6
31311: PPUSH
31312: CALL_OW 321
31316: PUSH
31317: LD_INT 2
31319: EQUAL
31320: IFFALSE 31330
// viewRange := 16 ;
31322: LD_ADDR_VAR 0 7
31326: PUSH
31327: LD_INT 16
31329: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31330: LD_VAR 0 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: LD_VAR 0 3
31344: PPUSH
31345: CALL_OW 297
31349: PUSH
31350: LD_VAR 0 5
31354: GREATER
31355: IFFALSE 31434
// begin ComMoveXY ( unit , x , y ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_VAR 0 2
31366: PPUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31376: LD_INT 35
31378: PPUSH
31379: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31383: LD_VAR 0 1
31387: PPUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: LD_VAR 0 3
31397: PPUSH
31398: CALL 68154 0 3
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31661
// until GetDistUnitXY ( unit , x , y ) < dist ;
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 2
31416: PPUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 297
31426: PUSH
31427: LD_VAR 0 5
31431: LESS
31432: IFFALSE 31376
// end ; ComTurnXY ( unit , x , y ) ;
31434: LD_VAR 0 1
31438: PPUSH
31439: LD_VAR 0 2
31443: PPUSH
31444: LD_VAR 0 3
31448: PPUSH
31449: CALL_OW 118
// wait ( 5 ) ;
31453: LD_INT 5
31455: PPUSH
31456: CALL_OW 67
// _d := GetDir ( unit ) ;
31460: LD_ADDR_VAR 0 10
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 254
31474: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31475: LD_ADDR_VAR 0 8
31479: PUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 250
31489: PPUSH
31490: LD_VAR 0 10
31494: PPUSH
31495: LD_VAR 0 5
31499: PPUSH
31500: CALL_OW 272
31504: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 251
31519: PPUSH
31520: LD_VAR 0 10
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: CALL_OW 273
31534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_VAR 0 9
31544: PPUSH
31545: CALL_OW 488
31549: NOT
31550: IFFALSE 31554
// exit ;
31552: GO 31661
// ComAnimCustom ( unit , 1 ) ;
31554: LD_VAR 0 1
31558: PPUSH
31559: LD_INT 1
31561: PPUSH
31562: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31566: LD_VAR 0 8
31570: PPUSH
31571: LD_VAR 0 9
31575: PPUSH
31576: LD_VAR 0 6
31580: PPUSH
31581: LD_VAR 0 7
31585: PPUSH
31586: CALL_OW 330
// repeat wait ( 1 ) ;
31590: LD_INT 1
31592: PPUSH
31593: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31597: LD_VAR 0 1
31601: PPUSH
31602: CALL_OW 316
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 314
31616: OR
31617: PUSH
31618: LD_VAR 0 1
31622: PPUSH
31623: CALL_OW 302
31627: NOT
31628: OR
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 301
31639: OR
31640: IFFALSE 31590
// RemoveSeeing ( _x , _y , side ) ;
31642: LD_VAR 0 8
31646: PPUSH
31647: LD_VAR 0 9
31651: PPUSH
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 331
// end ; end_of_file
31661: LD_VAR 0 4
31665: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// if exist_mode then
31670: LD_VAR 0 2
31674: IFFALSE 31699
// unit := CreateCharacter ( prefix & ident ) else
31676: LD_ADDR_VAR 0 5
31680: PUSH
31681: LD_VAR 0 3
31685: PUSH
31686: LD_VAR 0 1
31690: STR
31691: PPUSH
31692: CALL_OW 34
31696: ST_TO_ADDR
31697: GO 31714
// unit := NewCharacter ( ident ) ;
31699: LD_ADDR_VAR 0 5
31703: PUSH
31704: LD_VAR 0 1
31708: PPUSH
31709: CALL_OW 25
31713: ST_TO_ADDR
// result := unit ;
31714: LD_ADDR_VAR 0 4
31718: PUSH
31719: LD_VAR 0 5
31723: ST_TO_ADDR
// end ;
31724: LD_VAR 0 4
31728: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31729: LD_INT 0
31731: PPUSH
31732: PPUSH
// if not side or not nation then
31733: LD_VAR 0 1
31737: NOT
31738: PUSH
31739: LD_VAR 0 2
31743: NOT
31744: OR
31745: IFFALSE 31749
// exit ;
31747: GO 32517
// case nation of nation_american :
31749: LD_VAR 0 2
31753: PUSH
31754: LD_INT 1
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31976
31762: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31763: LD_ADDR_VAR 0 4
31767: PUSH
31768: LD_INT 35
31770: PUSH
31771: LD_INT 45
31773: PUSH
31774: LD_INT 46
31776: PUSH
31777: LD_INT 47
31779: PUSH
31780: LD_INT 82
31782: PUSH
31783: LD_INT 83
31785: PUSH
31786: LD_INT 84
31788: PUSH
31789: LD_INT 85
31791: PUSH
31792: LD_INT 86
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 6
31803: PUSH
31804: LD_INT 15
31806: PUSH
31807: LD_INT 16
31809: PUSH
31810: LD_INT 7
31812: PUSH
31813: LD_INT 12
31815: PUSH
31816: LD_INT 13
31818: PUSH
31819: LD_INT 10
31821: PUSH
31822: LD_INT 14
31824: PUSH
31825: LD_INT 20
31827: PUSH
31828: LD_INT 21
31830: PUSH
31831: LD_INT 22
31833: PUSH
31834: LD_INT 25
31836: PUSH
31837: LD_INT 32
31839: PUSH
31840: LD_INT 27
31842: PUSH
31843: LD_INT 36
31845: PUSH
31846: LD_INT 69
31848: PUSH
31849: LD_INT 39
31851: PUSH
31852: LD_INT 34
31854: PUSH
31855: LD_INT 40
31857: PUSH
31858: LD_INT 48
31860: PUSH
31861: LD_INT 49
31863: PUSH
31864: LD_INT 50
31866: PUSH
31867: LD_INT 51
31869: PUSH
31870: LD_INT 52
31872: PUSH
31873: LD_INT 53
31875: PUSH
31876: LD_INT 54
31878: PUSH
31879: LD_INT 55
31881: PUSH
31882: LD_INT 56
31884: PUSH
31885: LD_INT 57
31887: PUSH
31888: LD_INT 58
31890: PUSH
31891: LD_INT 59
31893: PUSH
31894: LD_INT 60
31896: PUSH
31897: LD_INT 61
31899: PUSH
31900: LD_INT 62
31902: PUSH
31903: LD_INT 80
31905: PUSH
31906: LD_INT 82
31908: PUSH
31909: LD_INT 83
31911: PUSH
31912: LD_INT 84
31914: PUSH
31915: LD_INT 85
31917: PUSH
31918: LD_INT 86
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
31974: GO 32441
31976: LD_INT 2
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 32210
31984: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31985: LD_ADDR_VAR 0 4
31989: PUSH
31990: LD_INT 35
31992: PUSH
31993: LD_INT 45
31995: PUSH
31996: LD_INT 46
31998: PUSH
31999: LD_INT 47
32001: PUSH
32002: LD_INT 82
32004: PUSH
32005: LD_INT 83
32007: PUSH
32008: LD_INT 84
32010: PUSH
32011: LD_INT 85
32013: PUSH
32014: LD_INT 87
32016: PUSH
32017: LD_INT 70
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 11
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: LD_INT 4
32031: PUSH
32032: LD_INT 5
32034: PUSH
32035: LD_INT 6
32037: PUSH
32038: LD_INT 15
32040: PUSH
32041: LD_INT 18
32043: PUSH
32044: LD_INT 7
32046: PUSH
32047: LD_INT 17
32049: PUSH
32050: LD_INT 8
32052: PUSH
32053: LD_INT 20
32055: PUSH
32056: LD_INT 21
32058: PUSH
32059: LD_INT 22
32061: PUSH
32062: LD_INT 72
32064: PUSH
32065: LD_INT 26
32067: PUSH
32068: LD_INT 69
32070: PUSH
32071: LD_INT 39
32073: PUSH
32074: LD_INT 40
32076: PUSH
32077: LD_INT 41
32079: PUSH
32080: LD_INT 42
32082: PUSH
32083: LD_INT 43
32085: PUSH
32086: LD_INT 48
32088: PUSH
32089: LD_INT 49
32091: PUSH
32092: LD_INT 50
32094: PUSH
32095: LD_INT 51
32097: PUSH
32098: LD_INT 52
32100: PUSH
32101: LD_INT 53
32103: PUSH
32104: LD_INT 54
32106: PUSH
32107: LD_INT 55
32109: PUSH
32110: LD_INT 56
32112: PUSH
32113: LD_INT 60
32115: PUSH
32116: LD_INT 61
32118: PUSH
32119: LD_INT 62
32121: PUSH
32122: LD_INT 66
32124: PUSH
32125: LD_INT 67
32127: PUSH
32128: LD_INT 68
32130: PUSH
32131: LD_INT 81
32133: PUSH
32134: LD_INT 82
32136: PUSH
32137: LD_INT 83
32139: PUSH
32140: LD_INT 84
32142: PUSH
32143: LD_INT 85
32145: PUSH
32146: LD_INT 87
32148: PUSH
32149: LD_INT 88
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
32208: GO 32441
32210: LD_INT 3
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32440
32218: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32219: LD_ADDR_VAR 0 4
32223: PUSH
32224: LD_INT 46
32226: PUSH
32227: LD_INT 47
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 82
32238: PUSH
32239: LD_INT 83
32241: PUSH
32242: LD_INT 84
32244: PUSH
32245: LD_INT 85
32247: PUSH
32248: LD_INT 86
32250: PUSH
32251: LD_INT 11
32253: PUSH
32254: LD_INT 9
32256: PUSH
32257: LD_INT 20
32259: PUSH
32260: LD_INT 19
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 24
32268: PUSH
32269: LD_INT 22
32271: PUSH
32272: LD_INT 25
32274: PUSH
32275: LD_INT 28
32277: PUSH
32278: LD_INT 29
32280: PUSH
32281: LD_INT 30
32283: PUSH
32284: LD_INT 31
32286: PUSH
32287: LD_INT 37
32289: PUSH
32290: LD_INT 38
32292: PUSH
32293: LD_INT 32
32295: PUSH
32296: LD_INT 27
32298: PUSH
32299: LD_INT 33
32301: PUSH
32302: LD_INT 69
32304: PUSH
32305: LD_INT 39
32307: PUSH
32308: LD_INT 34
32310: PUSH
32311: LD_INT 40
32313: PUSH
32314: LD_INT 71
32316: PUSH
32317: LD_INT 23
32319: PUSH
32320: LD_INT 44
32322: PUSH
32323: LD_INT 48
32325: PUSH
32326: LD_INT 49
32328: PUSH
32329: LD_INT 50
32331: PUSH
32332: LD_INT 51
32334: PUSH
32335: LD_INT 52
32337: PUSH
32338: LD_INT 53
32340: PUSH
32341: LD_INT 54
32343: PUSH
32344: LD_INT 55
32346: PUSH
32347: LD_INT 56
32349: PUSH
32350: LD_INT 57
32352: PUSH
32353: LD_INT 58
32355: PUSH
32356: LD_INT 59
32358: PUSH
32359: LD_INT 63
32361: PUSH
32362: LD_INT 64
32364: PUSH
32365: LD_INT 65
32367: PUSH
32368: LD_INT 82
32370: PUSH
32371: LD_INT 83
32373: PUSH
32374: LD_INT 84
32376: PUSH
32377: LD_INT 85
32379: PUSH
32380: LD_INT 86
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 32441
32440: POP
// if state > - 1 and state < 3 then
32441: LD_VAR 0 3
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: GREATER
32450: PUSH
32451: LD_VAR 0 3
32455: PUSH
32456: LD_INT 3
32458: LESS
32459: AND
32460: IFFALSE 32517
// for i in result do
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_VAR 0 4
32471: PUSH
32472: FOR_IN
32473: IFFALSE 32515
// if GetTech ( i , side ) <> state then
32475: LD_VAR 0 5
32479: PPUSH
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 321
32489: PUSH
32490: LD_VAR 0 3
32494: NONEQUAL
32495: IFFALSE 32513
// result := result diff i ;
32497: LD_ADDR_VAR 0 4
32501: PUSH
32502: LD_VAR 0 4
32506: PUSH
32507: LD_VAR 0 5
32511: DIFF
32512: ST_TO_ADDR
32513: GO 32472
32515: POP
32516: POP
// end ;
32517: LD_VAR 0 4
32521: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32522: LD_INT 0
32524: PPUSH
32525: PPUSH
32526: PPUSH
// result := true ;
32527: LD_ADDR_VAR 0 3
32531: PUSH
32532: LD_INT 1
32534: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_VAR 0 2
32544: PPUSH
32545: CALL_OW 480
32549: ST_TO_ADDR
// if not tmp then
32550: LD_VAR 0 5
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32608
// for i in tmp do
32559: LD_ADDR_VAR 0 4
32563: PUSH
32564: LD_VAR 0 5
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32606
// if GetTech ( i , side ) <> state_researched then
32572: LD_VAR 0 4
32576: PPUSH
32577: LD_VAR 0 1
32581: PPUSH
32582: CALL_OW 321
32586: PUSH
32587: LD_INT 2
32589: NONEQUAL
32590: IFFALSE 32604
// begin result := false ;
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 0
32599: ST_TO_ADDR
// exit ;
32600: POP
32601: POP
32602: GO 32608
// end ;
32604: GO 32569
32606: POP
32607: POP
// end ;
32608: LD_VAR 0 3
32612: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32613: LD_INT 0
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
32622: PPUSH
32623: PPUSH
32624: PPUSH
32625: PPUSH
32626: PPUSH
32627: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32628: LD_VAR 0 1
32632: NOT
32633: PUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 257
32643: PUSH
32644: LD_INT 9
32646: NONEQUAL
32647: OR
32648: IFFALSE 32652
// exit ;
32650: GO 33225
// side := GetSide ( unit ) ;
32652: LD_ADDR_VAR 0 9
32656: PUSH
32657: LD_VAR 0 1
32661: PPUSH
32662: CALL_OW 255
32666: ST_TO_ADDR
// tech_space := tech_spacanom ;
32667: LD_ADDR_VAR 0 12
32671: PUSH
32672: LD_INT 29
32674: ST_TO_ADDR
// tech_time := tech_taurad ;
32675: LD_ADDR_VAR 0 13
32679: PUSH
32680: LD_INT 28
32682: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32683: LD_ADDR_VAR 0 11
32687: PUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 310
32697: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32698: LD_VAR 0 11
32702: PPUSH
32703: CALL_OW 247
32707: PUSH
32708: LD_INT 2
32710: EQUAL
32711: IFFALSE 32715
// exit ;
32713: GO 33225
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32715: LD_ADDR_VAR 0 8
32719: PUSH
32720: LD_INT 81
32722: PUSH
32723: LD_VAR 0 9
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: LD_INT 21
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PPUSH
32753: CALL_OW 69
32757: ST_TO_ADDR
// if not tmp then
32758: LD_VAR 0 8
32762: NOT
32763: IFFALSE 32767
// exit ;
32765: GO 33225
// if in_unit then
32767: LD_VAR 0 11
32771: IFFALSE 32795
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32773: LD_ADDR_VAR 0 10
32777: PUSH
32778: LD_VAR 0 8
32782: PPUSH
32783: LD_VAR 0 11
32787: PPUSH
32788: CALL_OW 74
32792: ST_TO_ADDR
32793: GO 32815
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32795: LD_ADDR_VAR 0 10
32799: PUSH
32800: LD_VAR 0 8
32804: PPUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 74
32814: ST_TO_ADDR
// if not enemy then
32815: LD_VAR 0 10
32819: NOT
32820: IFFALSE 32824
// exit ;
32822: GO 33225
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32824: LD_VAR 0 11
32828: PUSH
32829: LD_VAR 0 11
32833: PPUSH
32834: LD_VAR 0 10
32838: PPUSH
32839: CALL_OW 296
32843: PUSH
32844: LD_INT 13
32846: GREATER
32847: AND
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: LD_VAR 0 10
32858: PPUSH
32859: CALL_OW 296
32863: PUSH
32864: LD_INT 12
32866: GREATER
32867: OR
32868: IFFALSE 32872
// exit ;
32870: GO 33225
// missile := [ 1 ] ;
32872: LD_ADDR_VAR 0 14
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32883: LD_VAR 0 9
32887: PPUSH
32888: LD_VAR 0 12
32892: PPUSH
32893: CALL_OW 325
32897: IFFALSE 32926
// missile := Replace ( missile , missile + 1 , 2 ) ;
32899: LD_ADDR_VAR 0 14
32903: PUSH
32904: LD_VAR 0 14
32908: PPUSH
32909: LD_VAR 0 14
32913: PUSH
32914: LD_INT 1
32916: PLUS
32917: PPUSH
32918: LD_INT 2
32920: PPUSH
32921: CALL_OW 1
32925: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32926: LD_VAR 0 9
32930: PPUSH
32931: LD_VAR 0 13
32935: PPUSH
32936: CALL_OW 325
32940: PUSH
32941: LD_VAR 0 10
32945: PPUSH
32946: CALL_OW 255
32950: PPUSH
32951: LD_VAR 0 13
32955: PPUSH
32956: CALL_OW 325
32960: NOT
32961: AND
32962: IFFALSE 32991
// missile := Replace ( missile , missile + 1 , 3 ) ;
32964: LD_ADDR_VAR 0 14
32968: PUSH
32969: LD_VAR 0 14
32973: PPUSH
32974: LD_VAR 0 14
32978: PUSH
32979: LD_INT 1
32981: PLUS
32982: PPUSH
32983: LD_INT 3
32985: PPUSH
32986: CALL_OW 1
32990: ST_TO_ADDR
// if missile < 2 then
32991: LD_VAR 0 14
32995: PUSH
32996: LD_INT 2
32998: LESS
32999: IFFALSE 33003
// exit ;
33001: GO 33225
// x := GetX ( enemy ) ;
33003: LD_ADDR_VAR 0 4
33007: PUSH
33008: LD_VAR 0 10
33012: PPUSH
33013: CALL_OW 250
33017: ST_TO_ADDR
// y := GetY ( enemy ) ;
33018: LD_ADDR_VAR 0 5
33022: PUSH
33023: LD_VAR 0 10
33027: PPUSH
33028: CALL_OW 251
33032: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33033: LD_ADDR_VAR 0 6
33037: PUSH
33038: LD_VAR 0 4
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PPUSH
33047: LD_INT 1
33049: PPUSH
33050: CALL_OW 12
33054: PLUS
33055: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33056: LD_ADDR_VAR 0 7
33060: PUSH
33061: LD_VAR 0 5
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PPUSH
33070: LD_INT 1
33072: PPUSH
33073: CALL_OW 12
33077: PLUS
33078: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33079: LD_VAR 0 6
33083: PPUSH
33084: LD_VAR 0 7
33088: PPUSH
33089: CALL_OW 488
33093: NOT
33094: IFFALSE 33116
// begin _x := x ;
33096: LD_ADDR_VAR 0 6
33100: PUSH
33101: LD_VAR 0 4
33105: ST_TO_ADDR
// _y := y ;
33106: LD_ADDR_VAR 0 7
33110: PUSH
33111: LD_VAR 0 5
33115: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33116: LD_ADDR_VAR 0 3
33120: PUSH
33121: LD_INT 1
33123: PPUSH
33124: LD_VAR 0 14
33128: PPUSH
33129: CALL_OW 12
33133: ST_TO_ADDR
// case i of 1 :
33134: LD_VAR 0 3
33138: PUSH
33139: LD_INT 1
33141: DOUBLE
33142: EQUAL
33143: IFTRUE 33147
33145: GO 33164
33147: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33148: LD_VAR 0 1
33152: PPUSH
33153: LD_VAR 0 10
33157: PPUSH
33158: CALL_OW 115
33162: GO 33225
33164: LD_INT 2
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33194
33172: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33173: LD_VAR 0 1
33177: PPUSH
33178: LD_VAR 0 6
33182: PPUSH
33183: LD_VAR 0 7
33187: PPUSH
33188: CALL_OW 153
33192: GO 33225
33194: LD_INT 3
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33224
33202: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33203: LD_VAR 0 1
33207: PPUSH
33208: LD_VAR 0 6
33212: PPUSH
33213: LD_VAR 0 7
33217: PPUSH
33218: CALL_OW 154
33222: GO 33225
33224: POP
// end ;
33225: LD_VAR 0 2
33229: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
// if not unit or not building then
33238: LD_VAR 0 1
33242: NOT
33243: PUSH
33244: LD_VAR 0 2
33248: NOT
33249: OR
33250: IFFALSE 33254
// exit ;
33252: GO 33412
// x := GetX ( building ) ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: LD_VAR 0 2
33263: PPUSH
33264: CALL_OW 250
33268: ST_TO_ADDR
// y := GetY ( building ) ;
33269: LD_ADDR_VAR 0 6
33273: PUSH
33274: LD_VAR 0 2
33278: PPUSH
33279: CALL_OW 251
33283: ST_TO_ADDR
// for i = 0 to 5 do
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: DOUBLE
33290: LD_INT 0
33292: DEC
33293: ST_TO_ADDR
33294: LD_INT 5
33296: PUSH
33297: FOR_TO
33298: IFFALSE 33410
// begin _x := ShiftX ( x , i , 3 ) ;
33300: LD_ADDR_VAR 0 7
33304: PUSH
33305: LD_VAR 0 5
33309: PPUSH
33310: LD_VAR 0 4
33314: PPUSH
33315: LD_INT 3
33317: PPUSH
33318: CALL_OW 272
33322: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33323: LD_ADDR_VAR 0 8
33327: PUSH
33328: LD_VAR 0 6
33332: PPUSH
33333: LD_VAR 0 4
33337: PPUSH
33338: LD_INT 3
33340: PPUSH
33341: CALL_OW 273
33345: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33346: LD_VAR 0 7
33350: PPUSH
33351: LD_VAR 0 8
33355: PPUSH
33356: CALL_OW 488
33360: NOT
33361: IFFALSE 33365
// continue ;
33363: GO 33297
// if HexInfo ( _x , _y ) = 0 then
33365: LD_VAR 0 7
33369: PPUSH
33370: LD_VAR 0 8
33374: PPUSH
33375: CALL_OW 428
33379: PUSH
33380: LD_INT 0
33382: EQUAL
33383: IFFALSE 33408
// begin ComMoveXY ( unit , _x , _y ) ;
33385: LD_VAR 0 1
33389: PPUSH
33390: LD_VAR 0 7
33394: PPUSH
33395: LD_VAR 0 8
33399: PPUSH
33400: CALL_OW 111
// exit ;
33404: POP
33405: POP
33406: GO 33412
// end ; end ;
33408: GO 33297
33410: POP
33411: POP
// end ;
33412: LD_VAR 0 3
33416: RET
// export function ScanBase ( side , base_area ) ; begin
33417: LD_INT 0
33419: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_VAR 0 2
33429: PPUSH
33430: LD_INT 81
33432: PUSH
33433: LD_VAR 0 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PPUSH
33442: CALL_OW 70
33446: ST_TO_ADDR
// end ;
33447: LD_VAR 0 3
33451: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33452: LD_INT 0
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
// result := false ;
33458: LD_ADDR_VAR 0 2
33462: PUSH
33463: LD_INT 0
33465: ST_TO_ADDR
// side := GetSide ( unit ) ;
33466: LD_ADDR_VAR 0 3
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 255
33480: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 248
33495: ST_TO_ADDR
// case nat of 1 :
33496: LD_VAR 0 4
33500: PUSH
33501: LD_INT 1
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33520
33509: POP
// tech := tech_lassight ; 2 :
33510: LD_ADDR_VAR 0 5
33514: PUSH
33515: LD_INT 12
33517: ST_TO_ADDR
33518: GO 33559
33520: LD_INT 2
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33539
33528: POP
// tech := tech_mortar ; 3 :
33529: LD_ADDR_VAR 0 5
33533: PUSH
33534: LD_INT 41
33536: ST_TO_ADDR
33537: GO 33559
33539: LD_INT 3
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33558
33547: POP
// tech := tech_bazooka ; end ;
33548: LD_ADDR_VAR 0 5
33552: PUSH
33553: LD_INT 44
33555: ST_TO_ADDR
33556: GO 33559
33558: POP
// if Researched ( side , tech ) then
33559: LD_VAR 0 3
33563: PPUSH
33564: LD_VAR 0 5
33568: PPUSH
33569: CALL_OW 325
33573: IFFALSE 33600
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33575: LD_ADDR_VAR 0 2
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 8
33585: PUSH
33586: LD_INT 9
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: PUSH
33594: LD_VAR 0 4
33598: ARRAY
33599: ST_TO_ADDR
// end ;
33600: LD_VAR 0 2
33604: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33605: LD_INT 0
33607: PPUSH
33608: PPUSH
33609: PPUSH
// if not mines then
33610: LD_VAR 0 2
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 33763
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33619: LD_ADDR_VAR 0 5
33623: PUSH
33624: LD_INT 81
33626: PUSH
33627: LD_VAR 0 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: LD_INT 21
33641: PUSH
33642: LD_INT 3
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PPUSH
33657: CALL_OW 69
33661: ST_TO_ADDR
// for i in mines do
33662: LD_ADDR_VAR 0 4
33666: PUSH
33667: LD_VAR 0 2
33671: PUSH
33672: FOR_IN
33673: IFFALSE 33761
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33675: LD_VAR 0 4
33679: PUSH
33680: LD_INT 1
33682: ARRAY
33683: PPUSH
33684: LD_VAR 0 4
33688: PUSH
33689: LD_INT 2
33691: ARRAY
33692: PPUSH
33693: CALL_OW 458
33697: NOT
33698: IFFALSE 33702
// continue ;
33700: GO 33672
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33702: LD_VAR 0 4
33706: PUSH
33707: LD_INT 1
33709: ARRAY
33710: PPUSH
33711: LD_VAR 0 4
33715: PUSH
33716: LD_INT 2
33718: ARRAY
33719: PPUSH
33720: CALL_OW 428
33724: PUSH
33725: LD_VAR 0 5
33729: IN
33730: IFFALSE 33759
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33732: LD_VAR 0 4
33736: PUSH
33737: LD_INT 1
33739: ARRAY
33740: PPUSH
33741: LD_VAR 0 4
33745: PUSH
33746: LD_INT 2
33748: ARRAY
33749: PPUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 456
// end ;
33759: GO 33672
33761: POP
33762: POP
// end ;
33763: LD_VAR 0 3
33767: RET
// export function Count ( array ) ; begin
33768: LD_INT 0
33770: PPUSH
// result := array + 0 ;
33771: LD_ADDR_VAR 0 2
33775: PUSH
33776: LD_VAR 0 1
33780: PUSH
33781: LD_INT 0
33783: PLUS
33784: ST_TO_ADDR
// end ;
33785: LD_VAR 0 2
33789: RET
// export function IsEmpty ( building ) ; begin
33790: LD_INT 0
33792: PPUSH
// if not building then
33793: LD_VAR 0 1
33797: NOT
33798: IFFALSE 33802
// exit ;
33800: GO 33845
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_VAR 0 1
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 255
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 58
33831: PUSH
33832: EMPTY
33833: LIST
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PPUSH
33839: CALL_OW 69
33843: IN
33844: ST_TO_ADDR
// end ;
33845: LD_VAR 0 2
33849: RET
// export function IsNotFull ( building ) ; var places ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
// if not building then
33854: LD_VAR 0 1
33858: NOT
33859: IFFALSE 33863
// exit ;
33861: GO 33891
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33863: LD_ADDR_VAR 0 2
33867: PUSH
33868: LD_VAR 0 1
33872: PPUSH
33873: LD_INT 3
33875: PUSH
33876: LD_INT 62
33878: PUSH
33879: EMPTY
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PPUSH
33886: CALL_OW 72
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 2
33895: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33896: LD_INT 0
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
// tmp := [ ] ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: EMPTY
33908: ST_TO_ADDR
// list := [ ] ;
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: EMPTY
33915: ST_TO_ADDR
// for i = 16 to 25 do
33916: LD_ADDR_VAR 0 4
33920: PUSH
33921: DOUBLE
33922: LD_INT 16
33924: DEC
33925: ST_TO_ADDR
33926: LD_INT 25
33928: PUSH
33929: FOR_TO
33930: IFFALSE 34003
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_VAR 0 3
33941: PUSH
33942: LD_INT 22
33944: PUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 255
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 91
33961: PUSH
33962: LD_VAR 0 1
33966: PUSH
33967: LD_INT 6
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 30
33977: PUSH
33978: LD_VAR 0 4
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: EMPTY
33993: LIST
33994: PPUSH
33995: CALL_OW 69
33999: ADD
34000: ST_TO_ADDR
34001: GO 33929
34003: POP
34004: POP
// for i = 1 to tmp do
34005: LD_ADDR_VAR 0 4
34009: PUSH
34010: DOUBLE
34011: LD_INT 1
34013: DEC
34014: ST_TO_ADDR
34015: LD_VAR 0 3
34019: PUSH
34020: FOR_TO
34021: IFFALSE 34109
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_VAR 0 5
34032: PUSH
34033: LD_VAR 0 3
34037: PUSH
34038: LD_VAR 0 4
34042: ARRAY
34043: PPUSH
34044: CALL_OW 266
34048: PUSH
34049: LD_VAR 0 3
34053: PUSH
34054: LD_VAR 0 4
34058: ARRAY
34059: PPUSH
34060: CALL_OW 250
34064: PUSH
34065: LD_VAR 0 3
34069: PUSH
34070: LD_VAR 0 4
34074: ARRAY
34075: PPUSH
34076: CALL_OW 251
34080: PUSH
34081: LD_VAR 0 3
34085: PUSH
34086: LD_VAR 0 4
34090: ARRAY
34091: PPUSH
34092: CALL_OW 254
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: ADD
34106: ST_TO_ADDR
34107: GO 34020
34109: POP
34110: POP
// result := list ;
34111: LD_ADDR_VAR 0 2
34115: PUSH
34116: LD_VAR 0 5
34120: ST_TO_ADDR
// end ;
34121: LD_VAR 0 2
34125: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34126: LD_INT 0
34128: PPUSH
34129: PPUSH
34130: PPUSH
34131: PPUSH
34132: PPUSH
34133: PPUSH
34134: PPUSH
// if not factory then
34135: LD_VAR 0 1
34139: NOT
34140: IFFALSE 34144
// exit ;
34142: GO 34737
// if control = control_apeman then
34144: LD_VAR 0 4
34148: PUSH
34149: LD_INT 5
34151: EQUAL
34152: IFFALSE 34261
// begin tmp := UnitsInside ( factory ) ;
34154: LD_ADDR_VAR 0 8
34158: PUSH
34159: LD_VAR 0 1
34163: PPUSH
34164: CALL_OW 313
34168: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34169: LD_VAR 0 8
34173: PPUSH
34174: LD_INT 25
34176: PUSH
34177: LD_INT 12
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PPUSH
34184: CALL_OW 72
34188: NOT
34189: IFFALSE 34199
// control := control_manual ;
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: LD_INT 1
34198: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34199: LD_ADDR_VAR 0 8
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL 33896 0 1
34213: ST_TO_ADDR
// if tmp then
34214: LD_VAR 0 8
34218: IFFALSE 34261
// begin for i in tmp do
34220: LD_ADDR_VAR 0 7
34224: PUSH
34225: LD_VAR 0 8
34229: PUSH
34230: FOR_IN
34231: IFFALSE 34259
// if i [ 1 ] = b_ext_radio then
34233: LD_VAR 0 7
34237: PUSH
34238: LD_INT 1
34240: ARRAY
34241: PUSH
34242: LD_INT 22
34244: EQUAL
34245: IFFALSE 34257
// begin control := control_remote ;
34247: LD_ADDR_VAR 0 4
34251: PUSH
34252: LD_INT 2
34254: ST_TO_ADDR
// break ;
34255: GO 34259
// end ;
34257: GO 34230
34259: POP
34260: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34261: LD_VAR 0 1
34265: PPUSH
34266: LD_VAR 0 2
34270: PPUSH
34271: LD_VAR 0 3
34275: PPUSH
34276: LD_VAR 0 4
34280: PPUSH
34281: LD_VAR 0 5
34285: PPUSH
34286: CALL_OW 448
34290: IFFALSE 34325
// begin result := [ chassis , engine , control , weapon ] ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 2
34301: PUSH
34302: LD_VAR 0 3
34306: PUSH
34307: LD_VAR 0 4
34311: PUSH
34312: LD_VAR 0 5
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// exit ;
34323: GO 34737
// end ; _chassis := AvailableChassisList ( factory ) ;
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 475
34339: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34340: LD_ADDR_VAR 0 11
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 476
34354: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34355: LD_ADDR_VAR 0 12
34359: PUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 477
34369: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34370: LD_ADDR_VAR 0 10
34374: PUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 478
34384: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34385: LD_VAR 0 9
34389: NOT
34390: PUSH
34391: LD_VAR 0 11
34395: NOT
34396: OR
34397: PUSH
34398: LD_VAR 0 12
34402: NOT
34403: OR
34404: PUSH
34405: LD_VAR 0 10
34409: NOT
34410: OR
34411: IFFALSE 34446
// begin result := [ chassis , engine , control , weapon ] ;
34413: LD_ADDR_VAR 0 6
34417: PUSH
34418: LD_VAR 0 2
34422: PUSH
34423: LD_VAR 0 3
34427: PUSH
34428: LD_VAR 0 4
34432: PUSH
34433: LD_VAR 0 5
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// exit ;
34444: GO 34737
// end ; if not chassis in _chassis then
34446: LD_VAR 0 2
34450: PUSH
34451: LD_VAR 0 9
34455: IN
34456: NOT
34457: IFFALSE 34483
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: LD_VAR 0 9
34468: PUSH
34469: LD_INT 1
34471: PPUSH
34472: LD_VAR 0 9
34476: PPUSH
34477: CALL_OW 12
34481: ARRAY
34482: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34483: LD_VAR 0 2
34487: PPUSH
34488: LD_VAR 0 3
34492: PPUSH
34493: CALL 34742 0 2
34497: NOT
34498: IFFALSE 34557
// repeat engine := _engine [ 1 ] ;
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_VAR 0 11
34509: PUSH
34510: LD_INT 1
34512: ARRAY
34513: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34514: LD_ADDR_VAR 0 11
34518: PUSH
34519: LD_VAR 0 11
34523: PPUSH
34524: LD_INT 1
34526: PPUSH
34527: CALL_OW 3
34531: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34532: LD_VAR 0 2
34536: PPUSH
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL 34742 0 2
34546: PUSH
34547: LD_VAR 0 11
34551: PUSH
34552: EMPTY
34553: EQUAL
34554: OR
34555: IFFALSE 34500
// if not control in _control then
34557: LD_VAR 0 4
34561: PUSH
34562: LD_VAR 0 12
34566: IN
34567: NOT
34568: IFFALSE 34594
// control := _control [ rand ( 1 , _control ) ] ;
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_VAR 0 12
34579: PUSH
34580: LD_INT 1
34582: PPUSH
34583: LD_VAR 0 12
34587: PPUSH
34588: CALL_OW 12
34592: ARRAY
34593: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34594: LD_VAR 0 2
34598: PPUSH
34599: LD_VAR 0 5
34603: PPUSH
34604: CALL 34962 0 2
34608: NOT
34609: IFFALSE 34668
// repeat weapon := _weapon [ 1 ] ;
34611: LD_ADDR_VAR 0 5
34615: PUSH
34616: LD_VAR 0 10
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34625: LD_ADDR_VAR 0 10
34629: PUSH
34630: LD_VAR 0 10
34634: PPUSH
34635: LD_INT 1
34637: PPUSH
34638: CALL_OW 3
34642: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34643: LD_VAR 0 2
34647: PPUSH
34648: LD_VAR 0 5
34652: PPUSH
34653: CALL 34962 0 2
34657: PUSH
34658: LD_VAR 0 10
34662: PUSH
34663: EMPTY
34664: EQUAL
34665: OR
34666: IFFALSE 34611
// result := [ ] ;
34668: LD_ADDR_VAR 0 6
34672: PUSH
34673: EMPTY
34674: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_VAR 0 2
34684: PPUSH
34685: LD_VAR 0 3
34689: PPUSH
34690: LD_VAR 0 4
34694: PPUSH
34695: LD_VAR 0 5
34699: PPUSH
34700: CALL_OW 448
34704: IFFALSE 34737
// result := [ chassis , engine , control , weapon ] ;
34706: LD_ADDR_VAR 0 6
34710: PUSH
34711: LD_VAR 0 2
34715: PUSH
34716: LD_VAR 0 3
34720: PUSH
34721: LD_VAR 0 4
34725: PUSH
34726: LD_VAR 0 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: ST_TO_ADDR
// end ;
34737: LD_VAR 0 6
34741: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34742: LD_INT 0
34744: PPUSH
// if not chassis or not engine then
34745: LD_VAR 0 1
34749: NOT
34750: PUSH
34751: LD_VAR 0 2
34755: NOT
34756: OR
34757: IFFALSE 34761
// exit ;
34759: GO 34957
// case engine of engine_solar :
34761: LD_VAR 0 2
34765: PUSH
34766: LD_INT 2
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34812
34774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 11
34782: PUSH
34783: LD_INT 12
34785: PUSH
34786: LD_INT 13
34788: PUSH
34789: LD_INT 14
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: ST_TO_ADDR
34810: GO 34941
34812: LD_INT 1
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 34882
34820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_INT 11
34828: PUSH
34829: LD_INT 12
34831: PUSH
34832: LD_INT 13
34834: PUSH
34835: LD_INT 14
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 5
34852: PUSH
34853: LD_INT 21
34855: PUSH
34856: LD_INT 23
34858: PUSH
34859: LD_INT 22
34861: PUSH
34862: LD_INT 24
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
34880: GO 34941
34882: LD_INT 3
34884: DOUBLE
34885: EQUAL
34886: IFTRUE 34890
34888: GO 34940
34890: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: LD_INT 14
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: LD_INT 5
34913: PUSH
34914: LD_INT 21
34916: PUSH
34917: LD_INT 22
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 24
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
34938: GO 34941
34940: POP
// result := ( chassis in result ) ;
34941: LD_ADDR_VAR 0 3
34945: PUSH
34946: LD_VAR 0 1
34950: PUSH
34951: LD_VAR 0 3
34955: IN
34956: ST_TO_ADDR
// end ;
34957: LD_VAR 0 3
34961: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34962: LD_INT 0
34964: PPUSH
// if not chassis or not weapon then
34965: LD_VAR 0 1
34969: NOT
34970: PUSH
34971: LD_VAR 0 2
34975: NOT
34976: OR
34977: IFFALSE 34981
// exit ;
34979: GO 36041
// case weapon of us_machine_gun :
34981: LD_VAR 0 2
34985: PUSH
34986: LD_INT 2
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35024
34994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: ST_TO_ADDR
35022: GO 36025
35024: LD_INT 3
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35062
35032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 36025
35062: LD_INT 11
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35100
35070: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 4
35087: PUSH
35088: LD_INT 5
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
35098: GO 36025
35100: LD_INT 4
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35134
35108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 3
35119: PUSH
35120: LD_INT 4
35122: PUSH
35123: LD_INT 5
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: ST_TO_ADDR
35132: GO 36025
35134: LD_INT 5
35136: DOUBLE
35137: EQUAL
35138: IFTRUE 35142
35140: GO 35168
35142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35143: LD_ADDR_VAR 0 3
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: LD_INT 4
35156: PUSH
35157: LD_INT 5
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
35166: GO 36025
35168: LD_INT 9
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35176
35174: GO 35202
35176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35177: LD_ADDR_VAR 0 3
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 4
35190: PUSH
35191: LD_INT 5
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
35200: GO 36025
35202: LD_INT 7
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35210
35208: GO 35236
35210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35211: LD_ADDR_VAR 0 3
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: LD_INT 4
35224: PUSH
35225: LD_INT 5
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
35234: GO 36025
35236: LD_INT 12
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35270
35244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
35268: GO 36025
35270: LD_INT 13
35272: DOUBLE
35273: EQUAL
35274: IFTRUE 35278
35276: GO 35304
35278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 5
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
35302: GO 36025
35304: LD_INT 14
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35312
35310: GO 35330
35312: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 4
35320: PUSH
35321: LD_INT 5
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: ST_TO_ADDR
35328: GO 36025
35330: LD_INT 6
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35338
35336: GO 35356
35338: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: LD_INT 5
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: ST_TO_ADDR
35354: GO 36025
35356: LD_INT 10
35358: DOUBLE
35359: EQUAL
35360: IFTRUE 35364
35362: GO 35382
35364: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 4
35372: PUSH
35373: LD_INT 5
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: ST_TO_ADDR
35380: GO 36025
35382: LD_INT 22
35384: DOUBLE
35385: EQUAL
35386: IFTRUE 35390
35388: GO 35416
35390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35391: LD_ADDR_VAR 0 3
35395: PUSH
35396: LD_INT 11
35398: PUSH
35399: LD_INT 12
35401: PUSH
35402: LD_INT 13
35404: PUSH
35405: LD_INT 14
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
35414: GO 36025
35416: LD_INT 23
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35450
35424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35425: LD_ADDR_VAR 0 3
35429: PUSH
35430: LD_INT 11
35432: PUSH
35433: LD_INT 12
35435: PUSH
35436: LD_INT 13
35438: PUSH
35439: LD_INT 14
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
35448: GO 36025
35450: LD_INT 24
35452: DOUBLE
35453: EQUAL
35454: IFTRUE 35458
35456: GO 35484
35458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_INT 11
35466: PUSH
35467: LD_INT 12
35469: PUSH
35470: LD_INT 13
35472: PUSH
35473: LD_INT 14
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: ST_TO_ADDR
35482: GO 36025
35484: LD_INT 30
35486: DOUBLE
35487: EQUAL
35488: IFTRUE 35492
35490: GO 35518
35492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35493: LD_ADDR_VAR 0 3
35497: PUSH
35498: LD_INT 11
35500: PUSH
35501: LD_INT 12
35503: PUSH
35504: LD_INT 13
35506: PUSH
35507: LD_INT 14
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: ST_TO_ADDR
35516: GO 36025
35518: LD_INT 25
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35526
35524: GO 35544
35526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_INT 13
35534: PUSH
35535: LD_INT 14
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: ST_TO_ADDR
35542: GO 36025
35544: LD_INT 27
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35552
35550: GO 35570
35552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 13
35560: PUSH
35561: LD_INT 14
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: ST_TO_ADDR
35568: GO 36025
35570: LD_INT 92
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35578
35576: GO 35604
35578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35579: LD_ADDR_VAR 0 3
35583: PUSH
35584: LD_INT 11
35586: PUSH
35587: LD_INT 12
35589: PUSH
35590: LD_INT 13
35592: PUSH
35593: LD_INT 14
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
35602: GO 36025
35604: LD_INT 28
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35612
35610: GO 35630
35612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_INT 13
35620: PUSH
35621: LD_INT 14
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: ST_TO_ADDR
35628: GO 36025
35630: LD_INT 29
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35656
35638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: LD_INT 13
35646: PUSH
35647: LD_INT 14
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: ST_TO_ADDR
35654: GO 36025
35656: LD_INT 31
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35664
35662: GO 35682
35664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 13
35672: PUSH
35673: LD_INT 14
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: ST_TO_ADDR
35680: GO 36025
35682: LD_INT 26
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35708
35690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35691: LD_ADDR_VAR 0 3
35695: PUSH
35696: LD_INT 13
35698: PUSH
35699: LD_INT 14
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: ST_TO_ADDR
35706: GO 36025
35708: LD_INT 42
35710: DOUBLE
35711: EQUAL
35712: IFTRUE 35716
35714: GO 35742
35716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_INT 21
35724: PUSH
35725: LD_INT 22
35727: PUSH
35728: LD_INT 23
35730: PUSH
35731: LD_INT 24
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: ST_TO_ADDR
35740: GO 36025
35742: LD_INT 43
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35776
35750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_INT 21
35758: PUSH
35759: LD_INT 22
35761: PUSH
35762: LD_INT 23
35764: PUSH
35765: LD_INT 24
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
35774: GO 36025
35776: LD_INT 44
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35784
35782: GO 35810
35784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_INT 21
35792: PUSH
35793: LD_INT 22
35795: PUSH
35796: LD_INT 23
35798: PUSH
35799: LD_INT 24
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
35808: GO 36025
35810: LD_INT 45
35812: DOUBLE
35813: EQUAL
35814: IFTRUE 35818
35816: GO 35844
35818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35819: LD_ADDR_VAR 0 3
35823: PUSH
35824: LD_INT 21
35826: PUSH
35827: LD_INT 22
35829: PUSH
35830: LD_INT 23
35832: PUSH
35833: LD_INT 24
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
35842: GO 36025
35844: LD_INT 49
35846: DOUBLE
35847: EQUAL
35848: IFTRUE 35852
35850: GO 35878
35852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_INT 21
35860: PUSH
35861: LD_INT 22
35863: PUSH
35864: LD_INT 23
35866: PUSH
35867: LD_INT 24
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: ST_TO_ADDR
35876: GO 36025
35878: LD_INT 51
35880: DOUBLE
35881: EQUAL
35882: IFTRUE 35886
35884: GO 35912
35886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35887: LD_ADDR_VAR 0 3
35891: PUSH
35892: LD_INT 21
35894: PUSH
35895: LD_INT 22
35897: PUSH
35898: LD_INT 23
35900: PUSH
35901: LD_INT 24
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
35910: GO 36025
35912: LD_INT 52
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35920
35918: GO 35946
35920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_INT 21
35928: PUSH
35929: LD_INT 22
35931: PUSH
35932: LD_INT 23
35934: PUSH
35935: LD_INT 24
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
35944: GO 36025
35946: LD_INT 53
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35954
35952: GO 35972
35954: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: LD_INT 23
35962: PUSH
35963: LD_INT 24
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: ST_TO_ADDR
35970: GO 36025
35972: LD_INT 46
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35980
35978: GO 35998
35980: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_INT 23
35988: PUSH
35989: LD_INT 24
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: ST_TO_ADDR
35996: GO 36025
35998: LD_INT 47
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 36024
36006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_INT 23
36014: PUSH
36015: LD_INT 24
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: ST_TO_ADDR
36022: GO 36025
36024: POP
// result := ( chassis in result ) ;
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 1
36034: PUSH
36035: LD_VAR 0 3
36039: IN
36040: ST_TO_ADDR
// end ;
36041: LD_VAR 0 3
36045: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36046: LD_INT 0
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
// result := array ;
36055: LD_ADDR_VAR 0 5
36059: PUSH
36060: LD_VAR 0 1
36064: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36065: LD_VAR 0 1
36069: NOT
36070: PUSH
36071: LD_VAR 0 2
36075: NOT
36076: OR
36077: PUSH
36078: LD_VAR 0 3
36082: NOT
36083: OR
36084: PUSH
36085: LD_VAR 0 2
36089: PUSH
36090: LD_VAR 0 1
36094: GREATER
36095: OR
36096: PUSH
36097: LD_VAR 0 3
36101: PUSH
36102: LD_VAR 0 1
36106: GREATER
36107: OR
36108: IFFALSE 36112
// exit ;
36110: GO 36408
// if direction then
36112: LD_VAR 0 4
36116: IFFALSE 36180
// begin d := 1 ;
36118: LD_ADDR_VAR 0 9
36122: PUSH
36123: LD_INT 1
36125: ST_TO_ADDR
// if i_from > i_to then
36126: LD_VAR 0 2
36130: PUSH
36131: LD_VAR 0 3
36135: GREATER
36136: IFFALSE 36162
// length := ( array - i_from ) + i_to else
36138: LD_ADDR_VAR 0 11
36142: PUSH
36143: LD_VAR 0 1
36147: PUSH
36148: LD_VAR 0 2
36152: MINUS
36153: PUSH
36154: LD_VAR 0 3
36158: PLUS
36159: ST_TO_ADDR
36160: GO 36178
// length := i_to - i_from ;
36162: LD_ADDR_VAR 0 11
36166: PUSH
36167: LD_VAR 0 3
36171: PUSH
36172: LD_VAR 0 2
36176: MINUS
36177: ST_TO_ADDR
// end else
36178: GO 36241
// begin d := - 1 ;
36180: LD_ADDR_VAR 0 9
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: ST_TO_ADDR
// if i_from > i_to then
36189: LD_VAR 0 2
36193: PUSH
36194: LD_VAR 0 3
36198: GREATER
36199: IFFALSE 36219
// length := i_from - i_to else
36201: LD_ADDR_VAR 0 11
36205: PUSH
36206: LD_VAR 0 2
36210: PUSH
36211: LD_VAR 0 3
36215: MINUS
36216: ST_TO_ADDR
36217: GO 36241
// length := ( array - i_to ) + i_from ;
36219: LD_ADDR_VAR 0 11
36223: PUSH
36224: LD_VAR 0 1
36228: PUSH
36229: LD_VAR 0 3
36233: MINUS
36234: PUSH
36235: LD_VAR 0 2
36239: PLUS
36240: ST_TO_ADDR
// end ; if not length then
36241: LD_VAR 0 11
36245: NOT
36246: IFFALSE 36250
// exit ;
36248: GO 36408
// tmp := array ;
36250: LD_ADDR_VAR 0 10
36254: PUSH
36255: LD_VAR 0 1
36259: ST_TO_ADDR
// for i = 1 to length do
36260: LD_ADDR_VAR 0 6
36264: PUSH
36265: DOUBLE
36266: LD_INT 1
36268: DEC
36269: ST_TO_ADDR
36270: LD_VAR 0 11
36274: PUSH
36275: FOR_TO
36276: IFFALSE 36396
// begin for j = 1 to array do
36278: LD_ADDR_VAR 0 7
36282: PUSH
36283: DOUBLE
36284: LD_INT 1
36286: DEC
36287: ST_TO_ADDR
36288: LD_VAR 0 1
36292: PUSH
36293: FOR_TO
36294: IFFALSE 36382
// begin k := j + d ;
36296: LD_ADDR_VAR 0 8
36300: PUSH
36301: LD_VAR 0 7
36305: PUSH
36306: LD_VAR 0 9
36310: PLUS
36311: ST_TO_ADDR
// if k > array then
36312: LD_VAR 0 8
36316: PUSH
36317: LD_VAR 0 1
36321: GREATER
36322: IFFALSE 36332
// k := 1 ;
36324: LD_ADDR_VAR 0 8
36328: PUSH
36329: LD_INT 1
36331: ST_TO_ADDR
// if not k then
36332: LD_VAR 0 8
36336: NOT
36337: IFFALSE 36349
// k := array ;
36339: LD_ADDR_VAR 0 8
36343: PUSH
36344: LD_VAR 0 1
36348: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36349: LD_ADDR_VAR 0 10
36353: PUSH
36354: LD_VAR 0 10
36358: PPUSH
36359: LD_VAR 0 8
36363: PPUSH
36364: LD_VAR 0 1
36368: PUSH
36369: LD_VAR 0 7
36373: ARRAY
36374: PPUSH
36375: CALL_OW 1
36379: ST_TO_ADDR
// end ;
36380: GO 36293
36382: POP
36383: POP
// array := tmp ;
36384: LD_ADDR_VAR 0 1
36388: PUSH
36389: LD_VAR 0 10
36393: ST_TO_ADDR
// end ;
36394: GO 36275
36396: POP
36397: POP
// result := array ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: LD_VAR 0 1
36407: ST_TO_ADDR
// end ;
36408: LD_VAR 0 5
36412: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36413: LD_INT 0
36415: PPUSH
36416: PPUSH
// result := 0 ;
36417: LD_ADDR_VAR 0 3
36421: PUSH
36422: LD_INT 0
36424: ST_TO_ADDR
// if not array or not value in array then
36425: LD_VAR 0 1
36429: NOT
36430: PUSH
36431: LD_VAR 0 2
36435: PUSH
36436: LD_VAR 0 1
36440: IN
36441: NOT
36442: OR
36443: IFFALSE 36447
// exit ;
36445: GO 36501
// for i = 1 to array do
36447: LD_ADDR_VAR 0 4
36451: PUSH
36452: DOUBLE
36453: LD_INT 1
36455: DEC
36456: ST_TO_ADDR
36457: LD_VAR 0 1
36461: PUSH
36462: FOR_TO
36463: IFFALSE 36499
// if value = array [ i ] then
36465: LD_VAR 0 2
36469: PUSH
36470: LD_VAR 0 1
36474: PUSH
36475: LD_VAR 0 4
36479: ARRAY
36480: EQUAL
36481: IFFALSE 36497
// begin result := i ;
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_VAR 0 4
36492: ST_TO_ADDR
// exit ;
36493: POP
36494: POP
36495: GO 36501
// end ;
36497: GO 36462
36499: POP
36500: POP
// end ;
36501: LD_VAR 0 3
36505: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36506: LD_INT 0
36508: PPUSH
// vc_chassis := chassis ;
36509: LD_ADDR_OWVAR 37
36513: PUSH
36514: LD_VAR 0 1
36518: ST_TO_ADDR
// vc_engine := engine ;
36519: LD_ADDR_OWVAR 39
36523: PUSH
36524: LD_VAR 0 2
36528: ST_TO_ADDR
// vc_control := control ;
36529: LD_ADDR_OWVAR 38
36533: PUSH
36534: LD_VAR 0 3
36538: ST_TO_ADDR
// vc_weapon := weapon ;
36539: LD_ADDR_OWVAR 40
36543: PUSH
36544: LD_VAR 0 4
36548: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36549: LD_ADDR_OWVAR 41
36553: PUSH
36554: LD_VAR 0 5
36558: ST_TO_ADDR
// end ;
36559: LD_VAR 0 6
36563: RET
// export function WantPlant ( unit ) ; var task ; begin
36564: LD_INT 0
36566: PPUSH
36567: PPUSH
// result := false ;
36568: LD_ADDR_VAR 0 2
36572: PUSH
36573: LD_INT 0
36575: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 437
36590: ST_TO_ADDR
// if task then
36591: LD_VAR 0 3
36595: IFFALSE 36623
// if task [ 1 ] [ 1 ] = p then
36597: LD_VAR 0 3
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: PUSH
36610: LD_STRING p
36612: EQUAL
36613: IFFALSE 36623
// result := true ;
36615: LD_ADDR_VAR 0 2
36619: PUSH
36620: LD_INT 1
36622: ST_TO_ADDR
// end ;
36623: LD_VAR 0 2
36627: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36628: LD_INT 0
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
// if pos < 1 then
36634: LD_VAR 0 2
36638: PUSH
36639: LD_INT 1
36641: LESS
36642: IFFALSE 36646
// exit ;
36644: GO 36949
// if pos = 1 then
36646: LD_VAR 0 2
36650: PUSH
36651: LD_INT 1
36653: EQUAL
36654: IFFALSE 36687
// result := Replace ( arr , pos [ 1 ] , value ) else
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PPUSH
36675: LD_VAR 0 3
36679: PPUSH
36680: CALL_OW 1
36684: ST_TO_ADDR
36685: GO 36949
// begin tmp := arr ;
36687: LD_ADDR_VAR 0 6
36691: PUSH
36692: LD_VAR 0 1
36696: ST_TO_ADDR
// s_arr := [ tmp ] ;
36697: LD_ADDR_VAR 0 7
36701: PUSH
36702: LD_VAR 0 6
36706: PUSH
36707: EMPTY
36708: LIST
36709: ST_TO_ADDR
// for i = 1 to pos - 1 do
36710: LD_ADDR_VAR 0 5
36714: PUSH
36715: DOUBLE
36716: LD_INT 1
36718: DEC
36719: ST_TO_ADDR
36720: LD_VAR 0 2
36724: PUSH
36725: LD_INT 1
36727: MINUS
36728: PUSH
36729: FOR_TO
36730: IFFALSE 36775
// begin tmp := tmp [ pos [ i ] ] ;
36732: LD_ADDR_VAR 0 6
36736: PUSH
36737: LD_VAR 0 6
36741: PUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_VAR 0 5
36751: ARRAY
36752: ARRAY
36753: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36754: LD_ADDR_VAR 0 7
36758: PUSH
36759: LD_VAR 0 7
36763: PUSH
36764: LD_VAR 0 6
36768: PUSH
36769: EMPTY
36770: LIST
36771: ADD
36772: ST_TO_ADDR
// end ;
36773: GO 36729
36775: POP
36776: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36777: LD_ADDR_VAR 0 6
36781: PUSH
36782: LD_VAR 0 6
36786: PPUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_VAR 0 2
36796: ARRAY
36797: PPUSH
36798: LD_VAR 0 3
36802: PPUSH
36803: CALL_OW 1
36807: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36808: LD_ADDR_VAR 0 7
36812: PUSH
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_VAR 0 6
36827: PPUSH
36828: CALL_OW 1
36832: ST_TO_ADDR
// for i = s_arr downto 2 do
36833: LD_ADDR_VAR 0 5
36837: PUSH
36838: DOUBLE
36839: LD_VAR 0 7
36843: INC
36844: ST_TO_ADDR
36845: LD_INT 2
36847: PUSH
36848: FOR_DOWNTO
36849: IFFALSE 36933
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36851: LD_ADDR_VAR 0 6
36855: PUSH
36856: LD_VAR 0 7
36860: PUSH
36861: LD_VAR 0 5
36865: PUSH
36866: LD_INT 1
36868: MINUS
36869: ARRAY
36870: PPUSH
36871: LD_VAR 0 2
36875: PUSH
36876: LD_VAR 0 5
36880: PUSH
36881: LD_INT 1
36883: MINUS
36884: ARRAY
36885: PPUSH
36886: LD_VAR 0 7
36890: PUSH
36891: LD_VAR 0 5
36895: ARRAY
36896: PPUSH
36897: CALL_OW 1
36901: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36902: LD_ADDR_VAR 0 7
36906: PUSH
36907: LD_VAR 0 7
36911: PPUSH
36912: LD_VAR 0 5
36916: PUSH
36917: LD_INT 1
36919: MINUS
36920: PPUSH
36921: LD_VAR 0 6
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
// end ;
36931: GO 36848
36933: POP
36934: POP
// result := s_arr [ 1 ] ;
36935: LD_ADDR_VAR 0 4
36939: PUSH
36940: LD_VAR 0 7
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: ST_TO_ADDR
// end ; end ;
36949: LD_VAR 0 4
36953: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36954: LD_INT 0
36956: PPUSH
36957: PPUSH
// if not list then
36958: LD_VAR 0 1
36962: NOT
36963: IFFALSE 36967
// exit ;
36965: GO 37058
// i := list [ pos1 ] ;
36967: LD_ADDR_VAR 0 5
36971: PUSH
36972: LD_VAR 0 1
36976: PUSH
36977: LD_VAR 0 2
36981: ARRAY
36982: ST_TO_ADDR
// if not i then
36983: LD_VAR 0 5
36987: NOT
36988: IFFALSE 36992
// exit ;
36990: GO 37058
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36992: LD_ADDR_VAR 0 1
36996: PUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: LD_VAR 0 2
37006: PPUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_VAR 0 3
37016: ARRAY
37017: PPUSH
37018: CALL_OW 1
37022: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37023: LD_ADDR_VAR 0 1
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: LD_VAR 0 3
37037: PPUSH
37038: LD_VAR 0 5
37042: PPUSH
37043: CALL_OW 1
37047: ST_TO_ADDR
// result := list ;
37048: LD_ADDR_VAR 0 4
37052: PUSH
37053: LD_VAR 0 1
37057: ST_TO_ADDR
// end ;
37058: LD_VAR 0 4
37062: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37063: LD_INT 0
37065: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37066: LD_ADDR_VAR 0 5
37070: PUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: CALL_OW 250
37080: PPUSH
37081: LD_VAR 0 1
37085: PPUSH
37086: CALL_OW 251
37090: PPUSH
37091: LD_VAR 0 2
37095: PPUSH
37096: LD_VAR 0 3
37100: PPUSH
37101: LD_VAR 0 4
37105: PPUSH
37106: CALL 37484 0 5
37110: ST_TO_ADDR
// end ;
37111: LD_VAR 0 5
37115: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37116: LD_INT 0
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
// if not list or not unit then
37122: LD_VAR 0 2
37126: NOT
37127: PUSH
37128: LD_VAR 0 1
37132: NOT
37133: OR
37134: IFFALSE 37138
// exit ;
37136: GO 37479
// result := [ ] ;
37138: LD_ADDR_VAR 0 5
37142: PUSH
37143: EMPTY
37144: ST_TO_ADDR
// for i in list do
37145: LD_ADDR_VAR 0 6
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: FOR_IN
37156: IFFALSE 37374
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37158: LD_ADDR_VAR 0 8
37162: PUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: LD_VAR 0 6
37172: PUSH
37173: LD_INT 1
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 6
37181: PUSH
37182: LD_INT 2
37184: ARRAY
37185: PPUSH
37186: CALL_OW 297
37190: ST_TO_ADDR
// if not Count ( result ) then
37191: LD_VAR 0 5
37195: PPUSH
37196: CALL 33768 0 1
37200: NOT
37201: IFFALSE 37234
// begin result := Join ( result , [ i , tmp ] ) ;
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_VAR 0 5
37212: PPUSH
37213: LD_VAR 0 6
37217: PUSH
37218: LD_VAR 0 8
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PPUSH
37227: CALL 69357 0 2
37231: ST_TO_ADDR
// continue ;
37232: GO 37155
// end ; if result [ result ] [ 2 ] <= tmp then
37234: LD_VAR 0 5
37238: PUSH
37239: LD_VAR 0 5
37243: ARRAY
37244: PUSH
37245: LD_INT 2
37247: ARRAY
37248: PUSH
37249: LD_VAR 0 8
37253: LESSEQUAL
37254: IFFALSE 37287
// result := Join ( result , [ i , tmp ] ) else
37256: LD_ADDR_VAR 0 5
37260: PUSH
37261: LD_VAR 0 5
37265: PPUSH
37266: LD_VAR 0 6
37270: PUSH
37271: LD_VAR 0 8
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PPUSH
37280: CALL 69357 0 2
37284: ST_TO_ADDR
37285: GO 37372
// begin for j := 1 to Count ( result ) do
37287: LD_ADDR_VAR 0 7
37291: PUSH
37292: DOUBLE
37293: LD_INT 1
37295: DEC
37296: ST_TO_ADDR
37297: LD_VAR 0 5
37301: PPUSH
37302: CALL 33768 0 1
37306: PUSH
37307: FOR_TO
37308: IFFALSE 37370
// begin if tmp < result [ j ] [ 2 ] then
37310: LD_VAR 0 8
37314: PUSH
37315: LD_VAR 0 5
37319: PUSH
37320: LD_VAR 0 7
37324: ARRAY
37325: PUSH
37326: LD_INT 2
37328: ARRAY
37329: LESS
37330: IFFALSE 37368
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37332: LD_ADDR_VAR 0 5
37336: PUSH
37337: LD_VAR 0 5
37341: PPUSH
37342: LD_VAR 0 7
37346: PPUSH
37347: LD_VAR 0 6
37351: PUSH
37352: LD_VAR 0 8
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 2
37365: ST_TO_ADDR
// break ;
37366: GO 37370
// end ; end ;
37368: GO 37307
37370: POP
37371: POP
// end ; end ;
37372: GO 37155
37374: POP
37375: POP
// if result and not asc then
37376: LD_VAR 0 5
37380: PUSH
37381: LD_VAR 0 3
37385: NOT
37386: AND
37387: IFFALSE 37404
// result := ReverseArray ( result ) ;
37389: LD_ADDR_VAR 0 5
37393: PUSH
37394: LD_VAR 0 5
37398: PPUSH
37399: CALL 64644 0 1
37403: ST_TO_ADDR
// tmp := [ ] ;
37404: LD_ADDR_VAR 0 8
37408: PUSH
37409: EMPTY
37410: ST_TO_ADDR
// if mode then
37411: LD_VAR 0 4
37415: IFFALSE 37479
// begin for i := 1 to result do
37417: LD_ADDR_VAR 0 6
37421: PUSH
37422: DOUBLE
37423: LD_INT 1
37425: DEC
37426: ST_TO_ADDR
37427: LD_VAR 0 5
37431: PUSH
37432: FOR_TO
37433: IFFALSE 37467
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37435: LD_ADDR_VAR 0 8
37439: PUSH
37440: LD_VAR 0 8
37444: PPUSH
37445: LD_VAR 0 5
37449: PUSH
37450: LD_VAR 0 6
37454: ARRAY
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: CALL 69357 0 2
37464: ST_TO_ADDR
37465: GO 37432
37467: POP
37468: POP
// result := tmp ;
37469: LD_ADDR_VAR 0 5
37473: PUSH
37474: LD_VAR 0 8
37478: ST_TO_ADDR
// end ; end ;
37479: LD_VAR 0 5
37483: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37484: LD_INT 0
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
// if not list then
37490: LD_VAR 0 3
37494: NOT
37495: IFFALSE 37499
// exit ;
37497: GO 37887
// result := [ ] ;
37499: LD_ADDR_VAR 0 6
37503: PUSH
37504: EMPTY
37505: ST_TO_ADDR
// for i in list do
37506: LD_ADDR_VAR 0 7
37510: PUSH
37511: LD_VAR 0 3
37515: PUSH
37516: FOR_IN
37517: IFFALSE 37719
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37519: LD_ADDR_VAR 0 9
37523: PUSH
37524: LD_VAR 0 7
37528: PPUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: LD_VAR 0 2
37538: PPUSH
37539: CALL_OW 297
37543: ST_TO_ADDR
// if not result then
37544: LD_VAR 0 6
37548: NOT
37549: IFFALSE 37575
// result := [ [ i , tmp ] ] else
37551: LD_ADDR_VAR 0 6
37555: PUSH
37556: LD_VAR 0 7
37560: PUSH
37561: LD_VAR 0 9
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: ST_TO_ADDR
37573: GO 37717
// begin if result [ result ] [ 2 ] < tmp then
37575: LD_VAR 0 6
37579: PUSH
37580: LD_VAR 0 6
37584: ARRAY
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: PUSH
37590: LD_VAR 0 9
37594: LESS
37595: IFFALSE 37637
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37597: LD_ADDR_VAR 0 6
37601: PUSH
37602: LD_VAR 0 6
37606: PPUSH
37607: LD_VAR 0 6
37611: PUSH
37612: LD_INT 1
37614: PLUS
37615: PPUSH
37616: LD_VAR 0 7
37620: PUSH
37621: LD_VAR 0 9
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 2
37634: ST_TO_ADDR
37635: GO 37717
// for j = 1 to result do
37637: LD_ADDR_VAR 0 8
37641: PUSH
37642: DOUBLE
37643: LD_INT 1
37645: DEC
37646: ST_TO_ADDR
37647: LD_VAR 0 6
37651: PUSH
37652: FOR_TO
37653: IFFALSE 37715
// begin if tmp < result [ j ] [ 2 ] then
37655: LD_VAR 0 9
37659: PUSH
37660: LD_VAR 0 6
37664: PUSH
37665: LD_VAR 0 8
37669: ARRAY
37670: PUSH
37671: LD_INT 2
37673: ARRAY
37674: LESS
37675: IFFALSE 37713
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37677: LD_ADDR_VAR 0 6
37681: PUSH
37682: LD_VAR 0 6
37686: PPUSH
37687: LD_VAR 0 8
37691: PPUSH
37692: LD_VAR 0 7
37696: PUSH
37697: LD_VAR 0 9
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PPUSH
37706: CALL_OW 2
37710: ST_TO_ADDR
// break ;
37711: GO 37715
// end ; end ;
37713: GO 37652
37715: POP
37716: POP
// end ; end ;
37717: GO 37516
37719: POP
37720: POP
// if result and not asc then
37721: LD_VAR 0 6
37725: PUSH
37726: LD_VAR 0 4
37730: NOT
37731: AND
37732: IFFALSE 37807
// begin tmp := result ;
37734: LD_ADDR_VAR 0 9
37738: PUSH
37739: LD_VAR 0 6
37743: ST_TO_ADDR
// for i = tmp downto 1 do
37744: LD_ADDR_VAR 0 7
37748: PUSH
37749: DOUBLE
37750: LD_VAR 0 9
37754: INC
37755: ST_TO_ADDR
37756: LD_INT 1
37758: PUSH
37759: FOR_DOWNTO
37760: IFFALSE 37805
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37762: LD_ADDR_VAR 0 6
37766: PUSH
37767: LD_VAR 0 6
37771: PPUSH
37772: LD_VAR 0 9
37776: PUSH
37777: LD_VAR 0 7
37781: MINUS
37782: PUSH
37783: LD_INT 1
37785: PLUS
37786: PPUSH
37787: LD_VAR 0 9
37791: PUSH
37792: LD_VAR 0 7
37796: ARRAY
37797: PPUSH
37798: CALL_OW 1
37802: ST_TO_ADDR
37803: GO 37759
37805: POP
37806: POP
// end ; tmp := [ ] ;
37807: LD_ADDR_VAR 0 9
37811: PUSH
37812: EMPTY
37813: ST_TO_ADDR
// if mode then
37814: LD_VAR 0 5
37818: IFFALSE 37887
// begin for i = 1 to result do
37820: LD_ADDR_VAR 0 7
37824: PUSH
37825: DOUBLE
37826: LD_INT 1
37828: DEC
37829: ST_TO_ADDR
37830: LD_VAR 0 6
37834: PUSH
37835: FOR_TO
37836: IFFALSE 37875
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37838: LD_ADDR_VAR 0 9
37842: PUSH
37843: LD_VAR 0 9
37847: PPUSH
37848: LD_VAR 0 7
37852: PPUSH
37853: LD_VAR 0 6
37857: PUSH
37858: LD_VAR 0 7
37862: ARRAY
37863: PUSH
37864: LD_INT 1
37866: ARRAY
37867: PPUSH
37868: CALL_OW 1
37872: ST_TO_ADDR
37873: GO 37835
37875: POP
37876: POP
// result := tmp ;
37877: LD_ADDR_VAR 0 6
37881: PUSH
37882: LD_VAR 0 9
37886: ST_TO_ADDR
// end ; end ;
37887: LD_VAR 0 6
37891: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37892: LD_INT 0
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37900: LD_ADDR_VAR 0 5
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// if not x or not y then
37922: LD_VAR 0 2
37926: NOT
37927: PUSH
37928: LD_VAR 0 3
37932: NOT
37933: OR
37934: IFFALSE 37938
// exit ;
37936: GO 39588
// if not range then
37938: LD_VAR 0 4
37942: NOT
37943: IFFALSE 37953
// range := 10 ;
37945: LD_ADDR_VAR 0 4
37949: PUSH
37950: LD_INT 10
37952: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37953: LD_ADDR_VAR 0 8
37957: PUSH
37958: LD_INT 81
37960: PUSH
37961: LD_VAR 0 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 92
37972: PUSH
37973: LD_VAR 0 2
37977: PUSH
37978: LD_VAR 0 3
37982: PUSH
37983: LD_VAR 0 4
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: LD_INT 21
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: PPUSH
38016: CALL_OW 69
38020: ST_TO_ADDR
// if not tmp then
38021: LD_VAR 0 8
38025: NOT
38026: IFFALSE 38030
// exit ;
38028: GO 39588
// for i in tmp do
38030: LD_ADDR_VAR 0 6
38034: PUSH
38035: LD_VAR 0 8
38039: PUSH
38040: FOR_IN
38041: IFFALSE 39563
// begin points := [ 0 , 0 , 0 ] ;
38043: LD_ADDR_VAR 0 9
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// bpoints := 1 ;
38062: LD_ADDR_VAR 0 10
38066: PUSH
38067: LD_INT 1
38069: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38070: LD_VAR 0 6
38074: PPUSH
38075: CALL_OW 247
38079: PUSH
38080: LD_INT 1
38082: DOUBLE
38083: EQUAL
38084: IFTRUE 38088
38086: GO 38666
38088: POP
// begin if GetClass ( i ) = 1 then
38089: LD_VAR 0 6
38093: PPUSH
38094: CALL_OW 257
38098: PUSH
38099: LD_INT 1
38101: EQUAL
38102: IFFALSE 38123
// points := [ 10 , 5 , 3 ] ;
38104: LD_ADDR_VAR 0 9
38108: PUSH
38109: LD_INT 10
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38123: LD_VAR 0 6
38127: PPUSH
38128: CALL_OW 257
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 4
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: IN
38147: IFFALSE 38168
// points := [ 3 , 2 , 1 ] ;
38149: LD_ADDR_VAR 0 9
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38168: LD_VAR 0 6
38172: PPUSH
38173: CALL_OW 257
38177: PUSH
38178: LD_INT 5
38180: EQUAL
38181: IFFALSE 38202
// points := [ 130 , 5 , 2 ] ;
38183: LD_ADDR_VAR 0 9
38187: PUSH
38188: LD_INT 130
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38202: LD_VAR 0 6
38206: PPUSH
38207: CALL_OW 257
38211: PUSH
38212: LD_INT 8
38214: EQUAL
38215: IFFALSE 38236
// points := [ 35 , 35 , 30 ] ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 35
38224: PUSH
38225: LD_INT 35
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 257
38245: PUSH
38246: LD_INT 9
38248: EQUAL
38249: IFFALSE 38270
// points := [ 20 , 55 , 40 ] ;
38251: LD_ADDR_VAR 0 9
38255: PUSH
38256: LD_INT 20
38258: PUSH
38259: LD_INT 55
38261: PUSH
38262: LD_INT 40
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 257
38279: PUSH
38280: LD_INT 12
38282: PUSH
38283: LD_INT 16
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: IN
38290: IFFALSE 38311
// points := [ 5 , 3 , 2 ] ;
38292: LD_ADDR_VAR 0 9
38296: PUSH
38297: LD_INT 5
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38311: LD_VAR 0 6
38315: PPUSH
38316: CALL_OW 257
38320: PUSH
38321: LD_INT 17
38323: EQUAL
38324: IFFALSE 38345
// points := [ 100 , 50 , 75 ] ;
38326: LD_ADDR_VAR 0 9
38330: PUSH
38331: LD_INT 100
38333: PUSH
38334: LD_INT 50
38336: PUSH
38337: LD_INT 75
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38345: LD_VAR 0 6
38349: PPUSH
38350: CALL_OW 257
38354: PUSH
38355: LD_INT 15
38357: EQUAL
38358: IFFALSE 38379
// points := [ 10 , 5 , 3 ] ;
38360: LD_ADDR_VAR 0 9
38364: PUSH
38365: LD_INT 10
38367: PUSH
38368: LD_INT 5
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38379: LD_VAR 0 6
38383: PPUSH
38384: CALL_OW 257
38388: PUSH
38389: LD_INT 14
38391: EQUAL
38392: IFFALSE 38413
// points := [ 10 , 0 , 0 ] ;
38394: LD_ADDR_VAR 0 9
38398: PUSH
38399: LD_INT 10
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38413: LD_VAR 0 6
38417: PPUSH
38418: CALL_OW 257
38422: PUSH
38423: LD_INT 11
38425: EQUAL
38426: IFFALSE 38447
// points := [ 30 , 10 , 5 ] ;
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_INT 30
38435: PUSH
38436: LD_INT 10
38438: PUSH
38439: LD_INT 5
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38447: LD_VAR 0 1
38451: PPUSH
38452: LD_INT 5
38454: PPUSH
38455: CALL_OW 321
38459: PUSH
38460: LD_INT 2
38462: EQUAL
38463: IFFALSE 38480
// bpoints := bpoints * 1.8 ;
38465: LD_ADDR_VAR 0 10
38469: PUSH
38470: LD_VAR 0 10
38474: PUSH
38475: LD_REAL  1.80000000000000E+0000
38478: MUL
38479: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38480: LD_VAR 0 6
38484: PPUSH
38485: CALL_OW 257
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 4
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: IN
38508: PUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: LD_INT 51
38516: PPUSH
38517: CALL_OW 321
38521: PUSH
38522: LD_INT 2
38524: EQUAL
38525: AND
38526: IFFALSE 38543
// bpoints := bpoints * 1.2 ;
38528: LD_ADDR_VAR 0 10
38532: PUSH
38533: LD_VAR 0 10
38537: PUSH
38538: LD_REAL  1.20000000000000E+0000
38541: MUL
38542: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38543: LD_VAR 0 6
38547: PPUSH
38548: CALL_OW 257
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: LD_INT 7
38558: PUSH
38559: LD_INT 9
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: IN
38567: PUSH
38568: LD_VAR 0 1
38572: PPUSH
38573: LD_INT 52
38575: PPUSH
38576: CALL_OW 321
38580: PUSH
38581: LD_INT 2
38583: EQUAL
38584: AND
38585: IFFALSE 38602
// bpoints := bpoints * 1.5 ;
38587: LD_ADDR_VAR 0 10
38591: PUSH
38592: LD_VAR 0 10
38596: PUSH
38597: LD_REAL  1.50000000000000E+0000
38600: MUL
38601: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38602: LD_VAR 0 1
38606: PPUSH
38607: LD_INT 66
38609: PPUSH
38610: CALL_OW 321
38614: PUSH
38615: LD_INT 2
38617: EQUAL
38618: IFFALSE 38635
// bpoints := bpoints * 1.1 ;
38620: LD_ADDR_VAR 0 10
38624: PUSH
38625: LD_VAR 0 10
38629: PUSH
38630: LD_REAL  1.10000000000000E+0000
38633: MUL
38634: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38635: LD_ADDR_VAR 0 10
38639: PUSH
38640: LD_VAR 0 10
38644: PUSH
38645: LD_VAR 0 6
38649: PPUSH
38650: LD_INT 1
38652: PPUSH
38653: CALL_OW 259
38657: PUSH
38658: LD_REAL  1.15000000000000E+0000
38661: MUL
38662: MUL
38663: ST_TO_ADDR
// end ; unit_vehicle :
38664: GO 39492
38666: LD_INT 2
38668: DOUBLE
38669: EQUAL
38670: IFTRUE 38674
38672: GO 39480
38674: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38675: LD_VAR 0 6
38679: PPUSH
38680: CALL_OW 264
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 42
38690: PUSH
38691: LD_INT 24
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: IN
38699: IFFALSE 38720
// points := [ 25 , 5 , 3 ] ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: LD_INT 25
38708: PUSH
38709: LD_INT 5
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38720: LD_VAR 0 6
38724: PPUSH
38725: CALL_OW 264
38729: PUSH
38730: LD_INT 4
38732: PUSH
38733: LD_INT 43
38735: PUSH
38736: LD_INT 25
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: IN
38744: IFFALSE 38765
// points := [ 40 , 15 , 5 ] ;
38746: LD_ADDR_VAR 0 9
38750: PUSH
38751: LD_INT 40
38753: PUSH
38754: LD_INT 15
38756: PUSH
38757: LD_INT 5
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38765: LD_VAR 0 6
38769: PPUSH
38770: CALL_OW 264
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 23
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: IN
38785: IFFALSE 38806
// points := [ 7 , 25 , 8 ] ;
38787: LD_ADDR_VAR 0 9
38791: PUSH
38792: LD_INT 7
38794: PUSH
38795: LD_INT 25
38797: PUSH
38798: LD_INT 8
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38806: LD_VAR 0 6
38810: PPUSH
38811: CALL_OW 264
38815: PUSH
38816: LD_INT 5
38818: PUSH
38819: LD_INT 27
38821: PUSH
38822: LD_INT 44
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: IN
38830: IFFALSE 38851
// points := [ 14 , 50 , 16 ] ;
38832: LD_ADDR_VAR 0 9
38836: PUSH
38837: LD_INT 14
38839: PUSH
38840: LD_INT 50
38842: PUSH
38843: LD_INT 16
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38851: LD_VAR 0 6
38855: PPUSH
38856: CALL_OW 264
38860: PUSH
38861: LD_INT 6
38863: PUSH
38864: LD_INT 46
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: IN
38871: IFFALSE 38892
// points := [ 32 , 120 , 70 ] ;
38873: LD_ADDR_VAR 0 9
38877: PUSH
38878: LD_INT 32
38880: PUSH
38881: LD_INT 120
38883: PUSH
38884: LD_INT 70
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38892: LD_VAR 0 6
38896: PPUSH
38897: CALL_OW 264
38901: PUSH
38902: LD_INT 7
38904: PUSH
38905: LD_INT 28
38907: PUSH
38908: LD_INT 45
38910: PUSH
38911: LD_INT 92
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: IN
38920: IFFALSE 38941
// points := [ 35 , 20 , 45 ] ;
38922: LD_ADDR_VAR 0 9
38926: PUSH
38927: LD_INT 35
38929: PUSH
38930: LD_INT 20
38932: PUSH
38933: LD_INT 45
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38941: LD_VAR 0 6
38945: PPUSH
38946: CALL_OW 264
38950: PUSH
38951: LD_INT 47
38953: PUSH
38954: EMPTY
38955: LIST
38956: IN
38957: IFFALSE 38978
// points := [ 67 , 45 , 75 ] ;
38959: LD_ADDR_VAR 0 9
38963: PUSH
38964: LD_INT 67
38966: PUSH
38967: LD_INT 45
38969: PUSH
38970: LD_INT 75
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38978: LD_VAR 0 6
38982: PPUSH
38983: CALL_OW 264
38987: PUSH
38988: LD_INT 26
38990: PUSH
38991: EMPTY
38992: LIST
38993: IN
38994: IFFALSE 39015
// points := [ 120 , 30 , 80 ] ;
38996: LD_ADDR_VAR 0 9
39000: PUSH
39001: LD_INT 120
39003: PUSH
39004: LD_INT 30
39006: PUSH
39007: LD_INT 80
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39015: LD_VAR 0 6
39019: PPUSH
39020: CALL_OW 264
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: EMPTY
39029: LIST
39030: IN
39031: IFFALSE 39052
// points := [ 40 , 1 , 1 ] ;
39033: LD_ADDR_VAR 0 9
39037: PUSH
39038: LD_INT 40
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39052: LD_VAR 0 6
39056: PPUSH
39057: CALL_OW 264
39061: PUSH
39062: LD_INT 29
39064: PUSH
39065: EMPTY
39066: LIST
39067: IN
39068: IFFALSE 39089
// points := [ 70 , 200 , 400 ] ;
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: LD_INT 70
39077: PUSH
39078: LD_INT 200
39080: PUSH
39081: LD_INT 400
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39089: LD_VAR 0 6
39093: PPUSH
39094: CALL_OW 264
39098: PUSH
39099: LD_INT 14
39101: PUSH
39102: LD_INT 53
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: IN
39109: IFFALSE 39130
// points := [ 40 , 10 , 20 ] ;
39111: LD_ADDR_VAR 0 9
39115: PUSH
39116: LD_INT 40
39118: PUSH
39119: LD_INT 10
39121: PUSH
39122: LD_INT 20
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 264
39139: PUSH
39140: LD_INT 9
39142: PUSH
39143: EMPTY
39144: LIST
39145: IN
39146: IFFALSE 39167
// points := [ 5 , 70 , 20 ] ;
39148: LD_ADDR_VAR 0 9
39152: PUSH
39153: LD_INT 5
39155: PUSH
39156: LD_INT 70
39158: PUSH
39159: LD_INT 20
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39167: LD_VAR 0 6
39171: PPUSH
39172: CALL_OW 264
39176: PUSH
39177: LD_INT 10
39179: PUSH
39180: EMPTY
39181: LIST
39182: IN
39183: IFFALSE 39204
// points := [ 35 , 110 , 70 ] ;
39185: LD_ADDR_VAR 0 9
39189: PUSH
39190: LD_INT 35
39192: PUSH
39193: LD_INT 110
39195: PUSH
39196: LD_INT 70
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39204: LD_VAR 0 6
39208: PPUSH
39209: CALL_OW 265
39213: PUSH
39214: LD_INT 25
39216: EQUAL
39217: IFFALSE 39238
// points := [ 80 , 65 , 100 ] ;
39219: LD_ADDR_VAR 0 9
39223: PUSH
39224: LD_INT 80
39226: PUSH
39227: LD_INT 65
39229: PUSH
39230: LD_INT 100
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39238: LD_VAR 0 6
39242: PPUSH
39243: CALL_OW 263
39247: PUSH
39248: LD_INT 1
39250: EQUAL
39251: IFFALSE 39286
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39253: LD_ADDR_VAR 0 10
39257: PUSH
39258: LD_VAR 0 10
39262: PUSH
39263: LD_VAR 0 6
39267: PPUSH
39268: CALL_OW 311
39272: PPUSH
39273: LD_INT 3
39275: PPUSH
39276: CALL_OW 259
39280: PUSH
39281: LD_INT 4
39283: MUL
39284: MUL
39285: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39286: LD_VAR 0 6
39290: PPUSH
39291: CALL_OW 263
39295: PUSH
39296: LD_INT 2
39298: EQUAL
39299: IFFALSE 39350
// begin j := IsControledBy ( i ) ;
39301: LD_ADDR_VAR 0 7
39305: PUSH
39306: LD_VAR 0 6
39310: PPUSH
39311: CALL_OW 312
39315: ST_TO_ADDR
// if j then
39316: LD_VAR 0 7
39320: IFFALSE 39350
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39322: LD_ADDR_VAR 0 10
39326: PUSH
39327: LD_VAR 0 10
39331: PUSH
39332: LD_VAR 0 7
39336: PPUSH
39337: LD_INT 3
39339: PPUSH
39340: CALL_OW 259
39344: PUSH
39345: LD_INT 3
39347: MUL
39348: MUL
39349: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39350: LD_VAR 0 6
39354: PPUSH
39355: CALL_OW 264
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: LD_INT 6
39365: PUSH
39366: LD_INT 46
39368: PUSH
39369: LD_INT 44
39371: PUSH
39372: LD_INT 47
39374: PUSH
39375: LD_INT 45
39377: PUSH
39378: LD_INT 28
39380: PUSH
39381: LD_INT 7
39383: PUSH
39384: LD_INT 27
39386: PUSH
39387: LD_INT 29
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: IN
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: LD_INT 52
39410: PPUSH
39411: CALL_OW 321
39415: PUSH
39416: LD_INT 2
39418: EQUAL
39419: AND
39420: IFFALSE 39437
// bpoints := bpoints * 1.2 ;
39422: LD_ADDR_VAR 0 10
39426: PUSH
39427: LD_VAR 0 10
39431: PUSH
39432: LD_REAL  1.20000000000000E+0000
39435: MUL
39436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39437: LD_VAR 0 6
39441: PPUSH
39442: CALL_OW 264
39446: PUSH
39447: LD_INT 6
39449: PUSH
39450: LD_INT 46
39452: PUSH
39453: LD_INT 47
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: IN
39461: IFFALSE 39478
// bpoints := bpoints * 1.2 ;
39463: LD_ADDR_VAR 0 10
39467: PUSH
39468: LD_VAR 0 10
39472: PUSH
39473: LD_REAL  1.20000000000000E+0000
39476: MUL
39477: ST_TO_ADDR
// end ; unit_building :
39478: GO 39492
39480: LD_INT 3
39482: DOUBLE
39483: EQUAL
39484: IFTRUE 39488
39486: GO 39491
39488: POP
// ; end ;
39489: GO 39492
39491: POP
// for j = 1 to 3 do
39492: LD_ADDR_VAR 0 7
39496: PUSH
39497: DOUBLE
39498: LD_INT 1
39500: DEC
39501: ST_TO_ADDR
39502: LD_INT 3
39504: PUSH
39505: FOR_TO
39506: IFFALSE 39559
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: LD_VAR 0 5
39517: PPUSH
39518: LD_VAR 0 7
39522: PPUSH
39523: LD_VAR 0 5
39527: PUSH
39528: LD_VAR 0 7
39532: ARRAY
39533: PUSH
39534: LD_VAR 0 9
39538: PUSH
39539: LD_VAR 0 7
39543: ARRAY
39544: PUSH
39545: LD_VAR 0 10
39549: MUL
39550: PLUS
39551: PPUSH
39552: CALL_OW 1
39556: ST_TO_ADDR
39557: GO 39505
39559: POP
39560: POP
// end ;
39561: GO 38040
39563: POP
39564: POP
// result := Replace ( result , 4 , tmp ) ;
39565: LD_ADDR_VAR 0 5
39569: PUSH
39570: LD_VAR 0 5
39574: PPUSH
39575: LD_INT 4
39577: PPUSH
39578: LD_VAR 0 8
39582: PPUSH
39583: CALL_OW 1
39587: ST_TO_ADDR
// end ;
39588: LD_VAR 0 5
39592: RET
// export function DangerAtRange ( unit , range ) ; begin
39593: LD_INT 0
39595: PPUSH
// if not unit then
39596: LD_VAR 0 1
39600: NOT
39601: IFFALSE 39605
// exit ;
39603: GO 39650
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39605: LD_ADDR_VAR 0 3
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 255
39619: PPUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 250
39629: PPUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 251
39639: PPUSH
39640: LD_VAR 0 2
39644: PPUSH
39645: CALL 37892 0 4
39649: ST_TO_ADDR
// end ;
39650: LD_VAR 0 3
39654: RET
// export function DangerInArea ( side , area ) ; begin
39655: LD_INT 0
39657: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39658: LD_ADDR_VAR 0 3
39662: PUSH
39663: LD_VAR 0 2
39667: PPUSH
39668: LD_INT 81
39670: PUSH
39671: LD_VAR 0 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PPUSH
39680: CALL_OW 70
39684: ST_TO_ADDR
// end ;
39685: LD_VAR 0 3
39689: RET
// export function IsExtension ( b ) ; begin
39690: LD_INT 0
39692: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39693: LD_ADDR_VAR 0 2
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_INT 23
39705: PUSH
39706: LD_INT 20
39708: PUSH
39709: LD_INT 22
39711: PUSH
39712: LD_INT 17
39714: PUSH
39715: LD_INT 24
39717: PUSH
39718: LD_INT 21
39720: PUSH
39721: LD_INT 19
39723: PUSH
39724: LD_INT 16
39726: PUSH
39727: LD_INT 25
39729: PUSH
39730: LD_INT 18
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: IN
39745: ST_TO_ADDR
// end ;
39746: LD_VAR 0 2
39750: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39751: LD_INT 0
39753: PPUSH
39754: PPUSH
39755: PPUSH
// result := [ ] ;
39756: LD_ADDR_VAR 0 4
39760: PUSH
39761: EMPTY
39762: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39763: LD_ADDR_VAR 0 5
39767: PUSH
39768: LD_VAR 0 2
39772: PPUSH
39773: LD_INT 21
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PPUSH
39783: CALL_OW 70
39787: ST_TO_ADDR
// if not tmp then
39788: LD_VAR 0 5
39792: NOT
39793: IFFALSE 39797
// exit ;
39795: GO 39861
// if checkLink then
39797: LD_VAR 0 3
39801: IFFALSE 39851
// begin for i in tmp do
39803: LD_ADDR_VAR 0 6
39807: PUSH
39808: LD_VAR 0 5
39812: PUSH
39813: FOR_IN
39814: IFFALSE 39849
// if GetBase ( i ) <> base then
39816: LD_VAR 0 6
39820: PPUSH
39821: CALL_OW 274
39825: PUSH
39826: LD_VAR 0 1
39830: NONEQUAL
39831: IFFALSE 39847
// ComLinkToBase ( base , i ) ;
39833: LD_VAR 0 1
39837: PPUSH
39838: LD_VAR 0 6
39842: PPUSH
39843: CALL_OW 169
39847: GO 39813
39849: POP
39850: POP
// end ; result := tmp ;
39851: LD_ADDR_VAR 0 4
39855: PUSH
39856: LD_VAR 0 5
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 4
39865: RET
// export function ComComplete ( units , b ) ; var i ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
// if not units then
39870: LD_VAR 0 1
39874: NOT
39875: IFFALSE 39879
// exit ;
39877: GO 39969
// for i in units do
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_VAR 0 1
39888: PUSH
39889: FOR_IN
39890: IFFALSE 39967
// if BuildingStatus ( b ) = bs_build then
39892: LD_VAR 0 2
39896: PPUSH
39897: CALL_OW 461
39901: PUSH
39902: LD_INT 1
39904: EQUAL
39905: IFFALSE 39965
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39907: LD_VAR 0 4
39911: PPUSH
39912: LD_STRING h
39914: PUSH
39915: LD_VAR 0 2
39919: PPUSH
39920: CALL_OW 250
39924: PUSH
39925: LD_VAR 0 2
39929: PPUSH
39930: CALL_OW 251
39934: PUSH
39935: LD_VAR 0 2
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: PPUSH
39961: CALL_OW 446
39965: GO 39889
39967: POP
39968: POP
// end ;
39969: LD_VAR 0 3
39973: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39982: LD_VAR 0 1
39986: NOT
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 263
39997: PUSH
39998: LD_INT 2
40000: NONEQUAL
40001: OR
40002: IFFALSE 40006
// exit ;
40004: GO 40322
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40006: LD_ADDR_VAR 0 6
40010: PUSH
40011: LD_INT 22
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 255
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 30
40033: PUSH
40034: LD_INT 36
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 34
40043: PUSH
40044: LD_INT 31
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PPUSH
40060: CALL_OW 69
40064: ST_TO_ADDR
// if not tmp then
40065: LD_VAR 0 6
40069: NOT
40070: IFFALSE 40074
// exit ;
40072: GO 40322
// result := [ ] ;
40074: LD_ADDR_VAR 0 2
40078: PUSH
40079: EMPTY
40080: ST_TO_ADDR
// for i in tmp do
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_VAR 0 6
40090: PUSH
40091: FOR_IN
40092: IFFALSE 40163
// begin t := UnitsInside ( i ) ;
40094: LD_ADDR_VAR 0 4
40098: PUSH
40099: LD_VAR 0 3
40103: PPUSH
40104: CALL_OW 313
40108: ST_TO_ADDR
// if t then
40109: LD_VAR 0 4
40113: IFFALSE 40161
// for j in t do
40115: LD_ADDR_VAR 0 7
40119: PUSH
40120: LD_VAR 0 4
40124: PUSH
40125: FOR_IN
40126: IFFALSE 40159
// result := Replace ( result , result + 1 , j ) ;
40128: LD_ADDR_VAR 0 2
40132: PUSH
40133: LD_VAR 0 2
40137: PPUSH
40138: LD_VAR 0 2
40142: PUSH
40143: LD_INT 1
40145: PLUS
40146: PPUSH
40147: LD_VAR 0 7
40151: PPUSH
40152: CALL_OW 1
40156: ST_TO_ADDR
40157: GO 40125
40159: POP
40160: POP
// end ;
40161: GO 40091
40163: POP
40164: POP
// if not result then
40165: LD_VAR 0 2
40169: NOT
40170: IFFALSE 40174
// exit ;
40172: GO 40322
// mech := result [ 1 ] ;
40174: LD_ADDR_VAR 0 5
40178: PUSH
40179: LD_VAR 0 2
40183: PUSH
40184: LD_INT 1
40186: ARRAY
40187: ST_TO_ADDR
// if result > 1 then
40188: LD_VAR 0 2
40192: PUSH
40193: LD_INT 1
40195: GREATER
40196: IFFALSE 40308
// begin for i = 2 to result do
40198: LD_ADDR_VAR 0 3
40202: PUSH
40203: DOUBLE
40204: LD_INT 2
40206: DEC
40207: ST_TO_ADDR
40208: LD_VAR 0 2
40212: PUSH
40213: FOR_TO
40214: IFFALSE 40306
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40216: LD_ADDR_VAR 0 4
40220: PUSH
40221: LD_VAR 0 2
40225: PUSH
40226: LD_VAR 0 3
40230: ARRAY
40231: PPUSH
40232: LD_INT 3
40234: PPUSH
40235: CALL_OW 259
40239: PUSH
40240: LD_VAR 0 2
40244: PUSH
40245: LD_VAR 0 3
40249: ARRAY
40250: PPUSH
40251: CALL_OW 432
40255: MINUS
40256: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40257: LD_VAR 0 4
40261: PUSH
40262: LD_VAR 0 5
40266: PPUSH
40267: LD_INT 3
40269: PPUSH
40270: CALL_OW 259
40274: PUSH
40275: LD_VAR 0 5
40279: PPUSH
40280: CALL_OW 432
40284: MINUS
40285: GREATEREQUAL
40286: IFFALSE 40304
// mech := result [ i ] ;
40288: LD_ADDR_VAR 0 5
40292: PUSH
40293: LD_VAR 0 2
40297: PUSH
40298: LD_VAR 0 3
40302: ARRAY
40303: ST_TO_ADDR
// end ;
40304: GO 40213
40306: POP
40307: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 5
40317: PPUSH
40318: CALL_OW 135
// end ;
40322: LD_VAR 0 2
40326: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
// result := [ ] ;
40342: LD_ADDR_VAR 0 7
40346: PUSH
40347: EMPTY
40348: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40349: LD_VAR 0 1
40353: PPUSH
40354: CALL_OW 266
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: IN
40369: NOT
40370: IFFALSE 40374
// exit ;
40372: GO 42008
// if name then
40374: LD_VAR 0 3
40378: IFFALSE 40394
// SetBName ( base_dep , name ) ;
40380: LD_VAR 0 1
40384: PPUSH
40385: LD_VAR 0 3
40389: PPUSH
40390: CALL_OW 500
// base := GetBase ( base_dep ) ;
40394: LD_ADDR_VAR 0 15
40398: PUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: CALL_OW 274
40408: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40409: LD_ADDR_VAR 0 16
40413: PUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 255
40423: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40424: LD_ADDR_VAR 0 17
40428: PUSH
40429: LD_VAR 0 1
40433: PPUSH
40434: CALL_OW 248
40438: ST_TO_ADDR
// if sources then
40439: LD_VAR 0 5
40443: IFFALSE 40490
// for i = 1 to 3 do
40445: LD_ADDR_VAR 0 8
40449: PUSH
40450: DOUBLE
40451: LD_INT 1
40453: DEC
40454: ST_TO_ADDR
40455: LD_INT 3
40457: PUSH
40458: FOR_TO
40459: IFFALSE 40488
// AddResourceType ( base , i , sources [ i ] ) ;
40461: LD_VAR 0 15
40465: PPUSH
40466: LD_VAR 0 8
40470: PPUSH
40471: LD_VAR 0 5
40475: PUSH
40476: LD_VAR 0 8
40480: ARRAY
40481: PPUSH
40482: CALL_OW 276
40486: GO 40458
40488: POP
40489: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40490: LD_ADDR_VAR 0 18
40494: PUSH
40495: LD_VAR 0 15
40499: PPUSH
40500: LD_VAR 0 2
40504: PPUSH
40505: LD_INT 1
40507: PPUSH
40508: CALL 39751 0 3
40512: ST_TO_ADDR
// InitHc ;
40513: CALL_OW 19
// InitUc ;
40517: CALL_OW 18
// uc_side := side ;
40521: LD_ADDR_OWVAR 20
40525: PUSH
40526: LD_VAR 0 16
40530: ST_TO_ADDR
// uc_nation := nation ;
40531: LD_ADDR_OWVAR 21
40535: PUSH
40536: LD_VAR 0 17
40540: ST_TO_ADDR
// if buildings then
40541: LD_VAR 0 18
40545: IFFALSE 41867
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40547: LD_ADDR_VAR 0 19
40551: PUSH
40552: LD_VAR 0 18
40556: PPUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 30
40562: PUSH
40563: LD_INT 29
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 30
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PPUSH
40585: CALL_OW 72
40589: ST_TO_ADDR
// if tmp then
40590: LD_VAR 0 19
40594: IFFALSE 40642
// for i in tmp do
40596: LD_ADDR_VAR 0 8
40600: PUSH
40601: LD_VAR 0 19
40605: PUSH
40606: FOR_IN
40607: IFFALSE 40640
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40609: LD_VAR 0 8
40613: PPUSH
40614: CALL_OW 250
40618: PPUSH
40619: LD_VAR 0 8
40623: PPUSH
40624: CALL_OW 251
40628: PPUSH
40629: LD_VAR 0 16
40633: PPUSH
40634: CALL_OW 441
40638: GO 40606
40640: POP
40641: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40642: LD_VAR 0 18
40646: PPUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 30
40652: PUSH
40653: LD_INT 32
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_INT 33
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PPUSH
40675: CALL_OW 72
40679: IFFALSE 40767
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40681: LD_ADDR_VAR 0 8
40685: PUSH
40686: LD_VAR 0 18
40690: PPUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 30
40696: PUSH
40697: LD_INT 32
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 30
40706: PUSH
40707: LD_INT 33
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: PPUSH
40719: CALL_OW 72
40723: PUSH
40724: FOR_IN
40725: IFFALSE 40765
// begin if not GetBWeapon ( i ) then
40727: LD_VAR 0 8
40731: PPUSH
40732: CALL_OW 269
40736: NOT
40737: IFFALSE 40763
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40739: LD_VAR 0 8
40743: PPUSH
40744: LD_VAR 0 8
40748: PPUSH
40749: LD_VAR 0 2
40753: PPUSH
40754: CALL 42013 0 2
40758: PPUSH
40759: CALL_OW 431
// end ;
40763: GO 40724
40765: POP
40766: POP
// end ; for i = 1 to personel do
40767: LD_ADDR_VAR 0 8
40771: PUSH
40772: DOUBLE
40773: LD_INT 1
40775: DEC
40776: ST_TO_ADDR
40777: LD_VAR 0 6
40781: PUSH
40782: FOR_TO
40783: IFFALSE 41847
// begin if i > 4 then
40785: LD_VAR 0 8
40789: PUSH
40790: LD_INT 4
40792: GREATER
40793: IFFALSE 40797
// break ;
40795: GO 41847
// case i of 1 :
40797: LD_VAR 0 8
40801: PUSH
40802: LD_INT 1
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40810
40808: GO 40890
40810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40811: LD_ADDR_VAR 0 12
40815: PUSH
40816: LD_VAR 0 18
40820: PPUSH
40821: LD_INT 22
40823: PUSH
40824: LD_VAR 0 16
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 58
40835: PUSH
40836: EMPTY
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: LD_INT 30
40844: PUSH
40845: LD_INT 32
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 30
40854: PUSH
40855: LD_INT 4
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 5
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: PPUSH
40883: CALL_OW 72
40887: ST_TO_ADDR
40888: GO 41112
40890: LD_INT 2
40892: DOUBLE
40893: EQUAL
40894: IFTRUE 40898
40896: GO 40960
40898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40899: LD_ADDR_VAR 0 12
40903: PUSH
40904: LD_VAR 0 18
40908: PPUSH
40909: LD_INT 22
40911: PUSH
40912: LD_VAR 0 16
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 30
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 30
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PPUSH
40953: CALL_OW 72
40957: ST_TO_ADDR
40958: GO 41112
40960: LD_INT 3
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40968
40966: GO 41030
40968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40969: LD_ADDR_VAR 0 12
40973: PUSH
40974: LD_VAR 0 18
40978: PPUSH
40979: LD_INT 22
40981: PUSH
40982: LD_VAR 0 16
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 30
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 30
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PPUSH
41023: CALL_OW 72
41027: ST_TO_ADDR
41028: GO 41112
41030: LD_INT 4
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41038
41036: GO 41111
41038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41039: LD_ADDR_VAR 0 12
41043: PUSH
41044: LD_VAR 0 18
41048: PPUSH
41049: LD_INT 22
41051: PUSH
41052: LD_VAR 0 16
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 30
41066: PUSH
41067: LD_INT 6
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 30
41076: PUSH
41077: LD_INT 7
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 30
41086: PUSH
41087: LD_INT 8
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PPUSH
41104: CALL_OW 72
41108: ST_TO_ADDR
41109: GO 41112
41111: POP
// if i = 1 then
41112: LD_VAR 0 8
41116: PUSH
41117: LD_INT 1
41119: EQUAL
41120: IFFALSE 41231
// begin tmp := [ ] ;
41122: LD_ADDR_VAR 0 19
41126: PUSH
41127: EMPTY
41128: ST_TO_ADDR
// for j in f do
41129: LD_ADDR_VAR 0 9
41133: PUSH
41134: LD_VAR 0 12
41138: PUSH
41139: FOR_IN
41140: IFFALSE 41213
// if GetBType ( j ) = b_bunker then
41142: LD_VAR 0 9
41146: PPUSH
41147: CALL_OW 266
41151: PUSH
41152: LD_INT 32
41154: EQUAL
41155: IFFALSE 41182
// tmp := Insert ( tmp , 1 , j ) else
41157: LD_ADDR_VAR 0 19
41161: PUSH
41162: LD_VAR 0 19
41166: PPUSH
41167: LD_INT 1
41169: PPUSH
41170: LD_VAR 0 9
41174: PPUSH
41175: CALL_OW 2
41179: ST_TO_ADDR
41180: GO 41211
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41182: LD_ADDR_VAR 0 19
41186: PUSH
41187: LD_VAR 0 19
41191: PPUSH
41192: LD_VAR 0 19
41196: PUSH
41197: LD_INT 1
41199: PLUS
41200: PPUSH
41201: LD_VAR 0 9
41205: PPUSH
41206: CALL_OW 2
41210: ST_TO_ADDR
41211: GO 41139
41213: POP
41214: POP
// if tmp then
41215: LD_VAR 0 19
41219: IFFALSE 41231
// f := tmp ;
41221: LD_ADDR_VAR 0 12
41225: PUSH
41226: LD_VAR 0 19
41230: ST_TO_ADDR
// end ; x := personel [ i ] ;
41231: LD_ADDR_VAR 0 13
41235: PUSH
41236: LD_VAR 0 6
41240: PUSH
41241: LD_VAR 0 8
41245: ARRAY
41246: ST_TO_ADDR
// if x = - 1 then
41247: LD_VAR 0 13
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: EQUAL
41256: IFFALSE 41465
// begin for j in f do
41258: LD_ADDR_VAR 0 9
41262: PUSH
41263: LD_VAR 0 12
41267: PUSH
41268: FOR_IN
41269: IFFALSE 41461
// repeat InitHc ;
41271: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41275: LD_VAR 0 9
41279: PPUSH
41280: CALL_OW 266
41284: PUSH
41285: LD_INT 5
41287: EQUAL
41288: IFFALSE 41358
// begin if UnitsInside ( j ) < 3 then
41290: LD_VAR 0 9
41294: PPUSH
41295: CALL_OW 313
41299: PUSH
41300: LD_INT 3
41302: LESS
41303: IFFALSE 41339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41305: LD_INT 0
41307: PPUSH
41308: LD_INT 5
41310: PUSH
41311: LD_INT 8
41313: PUSH
41314: LD_INT 9
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: PUSH
41322: LD_VAR 0 17
41326: ARRAY
41327: PPUSH
41328: LD_VAR 0 4
41332: PPUSH
41333: CALL_OW 380
41337: GO 41356
// PrepareHuman ( false , i , skill ) ;
41339: LD_INT 0
41341: PPUSH
41342: LD_VAR 0 8
41346: PPUSH
41347: LD_VAR 0 4
41351: PPUSH
41352: CALL_OW 380
// end else
41356: GO 41375
// PrepareHuman ( false , i , skill ) ;
41358: LD_INT 0
41360: PPUSH
41361: LD_VAR 0 8
41365: PPUSH
41366: LD_VAR 0 4
41370: PPUSH
41371: CALL_OW 380
// un := CreateHuman ;
41375: LD_ADDR_VAR 0 14
41379: PUSH
41380: CALL_OW 44
41384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41385: LD_ADDR_VAR 0 7
41389: PUSH
41390: LD_VAR 0 7
41394: PPUSH
41395: LD_INT 1
41397: PPUSH
41398: LD_VAR 0 14
41402: PPUSH
41403: CALL_OW 2
41407: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41408: LD_VAR 0 14
41412: PPUSH
41413: LD_VAR 0 9
41417: PPUSH
41418: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41422: LD_VAR 0 9
41426: PPUSH
41427: CALL_OW 313
41431: PUSH
41432: LD_INT 6
41434: EQUAL
41435: PUSH
41436: LD_VAR 0 9
41440: PPUSH
41441: CALL_OW 266
41445: PUSH
41446: LD_INT 32
41448: PUSH
41449: LD_INT 31
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: IN
41456: OR
41457: IFFALSE 41271
41459: GO 41268
41461: POP
41462: POP
// end else
41463: GO 41845
// for j = 1 to x do
41465: LD_ADDR_VAR 0 9
41469: PUSH
41470: DOUBLE
41471: LD_INT 1
41473: DEC
41474: ST_TO_ADDR
41475: LD_VAR 0 13
41479: PUSH
41480: FOR_TO
41481: IFFALSE 41843
// begin InitHc ;
41483: CALL_OW 19
// if not f then
41487: LD_VAR 0 12
41491: NOT
41492: IFFALSE 41581
// begin PrepareHuman ( false , i , skill ) ;
41494: LD_INT 0
41496: PPUSH
41497: LD_VAR 0 8
41501: PPUSH
41502: LD_VAR 0 4
41506: PPUSH
41507: CALL_OW 380
// un := CreateHuman ;
41511: LD_ADDR_VAR 0 14
41515: PUSH
41516: CALL_OW 44
41520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41521: LD_ADDR_VAR 0 7
41525: PUSH
41526: LD_VAR 0 7
41530: PPUSH
41531: LD_INT 1
41533: PPUSH
41534: LD_VAR 0 14
41538: PPUSH
41539: CALL_OW 2
41543: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41544: LD_VAR 0 14
41548: PPUSH
41549: LD_VAR 0 1
41553: PPUSH
41554: CALL_OW 250
41558: PPUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 251
41568: PPUSH
41569: LD_INT 10
41571: PPUSH
41572: LD_INT 0
41574: PPUSH
41575: CALL_OW 50
// continue ;
41579: GO 41480
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41581: LD_VAR 0 12
41585: PUSH
41586: LD_INT 1
41588: ARRAY
41589: PPUSH
41590: CALL_OW 313
41594: PUSH
41595: LD_VAR 0 12
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PPUSH
41604: CALL_OW 266
41608: PUSH
41609: LD_INT 32
41611: PUSH
41612: LD_INT 31
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: IN
41619: AND
41620: PUSH
41621: LD_VAR 0 12
41625: PUSH
41626: LD_INT 1
41628: ARRAY
41629: PPUSH
41630: CALL_OW 313
41634: PUSH
41635: LD_INT 6
41637: EQUAL
41638: OR
41639: IFFALSE 41659
// f := Delete ( f , 1 ) ;
41641: LD_ADDR_VAR 0 12
41645: PUSH
41646: LD_VAR 0 12
41650: PPUSH
41651: LD_INT 1
41653: PPUSH
41654: CALL_OW 3
41658: ST_TO_ADDR
// if not f then
41659: LD_VAR 0 12
41663: NOT
41664: IFFALSE 41682
// begin x := x + 2 ;
41666: LD_ADDR_VAR 0 13
41670: PUSH
41671: LD_VAR 0 13
41675: PUSH
41676: LD_INT 2
41678: PLUS
41679: ST_TO_ADDR
// continue ;
41680: GO 41480
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41682: LD_VAR 0 12
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PPUSH
41691: CALL_OW 266
41695: PUSH
41696: LD_INT 5
41698: EQUAL
41699: IFFALSE 41773
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41701: LD_VAR 0 12
41705: PUSH
41706: LD_INT 1
41708: ARRAY
41709: PPUSH
41710: CALL_OW 313
41714: PUSH
41715: LD_INT 3
41717: LESS
41718: IFFALSE 41754
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41720: LD_INT 0
41722: PPUSH
41723: LD_INT 5
41725: PUSH
41726: LD_INT 8
41728: PUSH
41729: LD_INT 9
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: PUSH
41737: LD_VAR 0 17
41741: ARRAY
41742: PPUSH
41743: LD_VAR 0 4
41747: PPUSH
41748: CALL_OW 380
41752: GO 41771
// PrepareHuman ( false , i , skill ) ;
41754: LD_INT 0
41756: PPUSH
41757: LD_VAR 0 8
41761: PPUSH
41762: LD_VAR 0 4
41766: PPUSH
41767: CALL_OW 380
// end else
41771: GO 41790
// PrepareHuman ( false , i , skill ) ;
41773: LD_INT 0
41775: PPUSH
41776: LD_VAR 0 8
41780: PPUSH
41781: LD_VAR 0 4
41785: PPUSH
41786: CALL_OW 380
// un := CreateHuman ;
41790: LD_ADDR_VAR 0 14
41794: PUSH
41795: CALL_OW 44
41799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41800: LD_ADDR_VAR 0 7
41804: PUSH
41805: LD_VAR 0 7
41809: PPUSH
41810: LD_INT 1
41812: PPUSH
41813: LD_VAR 0 14
41817: PPUSH
41818: CALL_OW 2
41822: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41823: LD_VAR 0 14
41827: PPUSH
41828: LD_VAR 0 12
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PPUSH
41837: CALL_OW 52
// end ;
41841: GO 41480
41843: POP
41844: POP
// end ;
41845: GO 40782
41847: POP
41848: POP
// result := result ^ buildings ;
41849: LD_ADDR_VAR 0 7
41853: PUSH
41854: LD_VAR 0 7
41858: PUSH
41859: LD_VAR 0 18
41863: ADD
41864: ST_TO_ADDR
// end else
41865: GO 42008
// begin for i = 1 to personel do
41867: LD_ADDR_VAR 0 8
41871: PUSH
41872: DOUBLE
41873: LD_INT 1
41875: DEC
41876: ST_TO_ADDR
41877: LD_VAR 0 6
41881: PUSH
41882: FOR_TO
41883: IFFALSE 42006
// begin if i > 4 then
41885: LD_VAR 0 8
41889: PUSH
41890: LD_INT 4
41892: GREATER
41893: IFFALSE 41897
// break ;
41895: GO 42006
// x := personel [ i ] ;
41897: LD_ADDR_VAR 0 13
41901: PUSH
41902: LD_VAR 0 6
41906: PUSH
41907: LD_VAR 0 8
41911: ARRAY
41912: ST_TO_ADDR
// if x = - 1 then
41913: LD_VAR 0 13
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: EQUAL
41922: IFFALSE 41926
// continue ;
41924: GO 41882
// PrepareHuman ( false , i , skill ) ;
41926: LD_INT 0
41928: PPUSH
41929: LD_VAR 0 8
41933: PPUSH
41934: LD_VAR 0 4
41938: PPUSH
41939: CALL_OW 380
// un := CreateHuman ;
41943: LD_ADDR_VAR 0 14
41947: PUSH
41948: CALL_OW 44
41952: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41953: LD_VAR 0 14
41957: PPUSH
41958: LD_VAR 0 1
41962: PPUSH
41963: CALL_OW 250
41967: PPUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 251
41977: PPUSH
41978: LD_INT 10
41980: PPUSH
41981: LD_INT 0
41983: PPUSH
41984: CALL_OW 50
// result := result ^ un ;
41988: LD_ADDR_VAR 0 7
41992: PUSH
41993: LD_VAR 0 7
41997: PUSH
41998: LD_VAR 0 14
42002: ADD
42003: ST_TO_ADDR
// end ;
42004: GO 41882
42006: POP
42007: POP
// end ; end ;
42008: LD_VAR 0 7
42012: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42013: LD_INT 0
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
// result := false ;
42031: LD_ADDR_VAR 0 3
42035: PUSH
42036: LD_INT 0
42038: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42039: LD_VAR 0 1
42043: NOT
42044: PUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: CALL_OW 266
42054: PUSH
42055: LD_INT 32
42057: PUSH
42058: LD_INT 33
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: IN
42065: NOT
42066: OR
42067: IFFALSE 42071
// exit ;
42069: GO 43180
// nat := GetNation ( tower ) ;
42071: LD_ADDR_VAR 0 12
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: CALL_OW 248
42085: ST_TO_ADDR
// side := GetSide ( tower ) ;
42086: LD_ADDR_VAR 0 16
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 255
42100: ST_TO_ADDR
// x := GetX ( tower ) ;
42101: LD_ADDR_VAR 0 10
42105: PUSH
42106: LD_VAR 0 1
42110: PPUSH
42111: CALL_OW 250
42115: ST_TO_ADDR
// y := GetY ( tower ) ;
42116: LD_ADDR_VAR 0 11
42120: PUSH
42121: LD_VAR 0 1
42125: PPUSH
42126: CALL_OW 251
42130: ST_TO_ADDR
// if not x or not y then
42131: LD_VAR 0 10
42135: NOT
42136: PUSH
42137: LD_VAR 0 11
42141: NOT
42142: OR
42143: IFFALSE 42147
// exit ;
42145: GO 43180
// weapon := 0 ;
42147: LD_ADDR_VAR 0 18
42151: PUSH
42152: LD_INT 0
42154: ST_TO_ADDR
// fac_list := [ ] ;
42155: LD_ADDR_VAR 0 17
42159: PUSH
42160: EMPTY
42161: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42162: LD_ADDR_VAR 0 6
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 274
42176: PPUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_INT 0
42184: PPUSH
42185: CALL 39751 0 3
42189: PPUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PPUSH
42200: CALL_OW 72
42204: ST_TO_ADDR
// if not factories then
42205: LD_VAR 0 6
42209: NOT
42210: IFFALSE 42214
// exit ;
42212: GO 43180
// for i in factories do
42214: LD_ADDR_VAR 0 8
42218: PUSH
42219: LD_VAR 0 6
42223: PUSH
42224: FOR_IN
42225: IFFALSE 42250
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42227: LD_ADDR_VAR 0 17
42231: PUSH
42232: LD_VAR 0 17
42236: PUSH
42237: LD_VAR 0 8
42241: PPUSH
42242: CALL_OW 478
42246: UNION
42247: ST_TO_ADDR
42248: GO 42224
42250: POP
42251: POP
// if not fac_list then
42252: LD_VAR 0 17
42256: NOT
42257: IFFALSE 42261
// exit ;
42259: GO 43180
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: LD_INT 4
42268: PUSH
42269: LD_INT 5
42271: PUSH
42272: LD_INT 9
42274: PUSH
42275: LD_INT 10
42277: PUSH
42278: LD_INT 6
42280: PUSH
42281: LD_INT 7
42283: PUSH
42284: LD_INT 11
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 27
42298: PUSH
42299: LD_INT 28
42301: PUSH
42302: LD_INT 26
42304: PUSH
42305: LD_INT 30
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 43
42316: PUSH
42317: LD_INT 44
42319: PUSH
42320: LD_INT 46
42322: PUSH
42323: LD_INT 45
42325: PUSH
42326: LD_INT 47
42328: PUSH
42329: LD_INT 49
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: PUSH
42345: LD_VAR 0 12
42349: ARRAY
42350: ST_TO_ADDR
// list := list isect fac_list ;
42351: LD_ADDR_VAR 0 5
42355: PUSH
42356: LD_VAR 0 5
42360: PUSH
42361: LD_VAR 0 17
42365: ISECT
42366: ST_TO_ADDR
// if not list then
42367: LD_VAR 0 5
42371: NOT
42372: IFFALSE 42376
// exit ;
42374: GO 43180
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42376: LD_VAR 0 12
42380: PUSH
42381: LD_INT 3
42383: EQUAL
42384: PUSH
42385: LD_INT 49
42387: PUSH
42388: LD_VAR 0 5
42392: IN
42393: AND
42394: PUSH
42395: LD_INT 31
42397: PPUSH
42398: LD_VAR 0 16
42402: PPUSH
42403: CALL_OW 321
42407: PUSH
42408: LD_INT 2
42410: EQUAL
42411: AND
42412: IFFALSE 42472
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42414: LD_INT 22
42416: PUSH
42417: LD_VAR 0 16
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 35
42428: PUSH
42429: LD_INT 49
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 91
42438: PUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_INT 10
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: PPUSH
42457: CALL_OW 69
42461: NOT
42462: IFFALSE 42472
// weapon := ru_time_lapser ;
42464: LD_ADDR_VAR 0 18
42468: PUSH
42469: LD_INT 49
42471: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42472: LD_VAR 0 12
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: IN
42487: PUSH
42488: LD_INT 11
42490: PUSH
42491: LD_VAR 0 5
42495: IN
42496: PUSH
42497: LD_INT 30
42499: PUSH
42500: LD_VAR 0 5
42504: IN
42505: OR
42506: AND
42507: PUSH
42508: LD_INT 6
42510: PPUSH
42511: LD_VAR 0 16
42515: PPUSH
42516: CALL_OW 321
42520: PUSH
42521: LD_INT 2
42523: EQUAL
42524: AND
42525: IFFALSE 42690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42527: LD_INT 22
42529: PUSH
42530: LD_VAR 0 16
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 35
42544: PUSH
42545: LD_INT 11
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 35
42554: PUSH
42555: LD_INT 30
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 91
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_INT 18
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: PPUSH
42588: CALL_OW 69
42592: NOT
42593: PUSH
42594: LD_INT 22
42596: PUSH
42597: LD_VAR 0 16
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 30
42611: PUSH
42612: LD_INT 32
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 30
42621: PUSH
42622: LD_INT 33
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 91
42636: PUSH
42637: LD_VAR 0 1
42641: PUSH
42642: LD_INT 12
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: PPUSH
42658: CALL_OW 69
42662: PUSH
42663: LD_INT 2
42665: GREATER
42666: AND
42667: IFFALSE 42690
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42669: LD_ADDR_VAR 0 18
42673: PUSH
42674: LD_INT 11
42676: PUSH
42677: LD_INT 30
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_VAR 0 12
42688: ARRAY
42689: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42690: LD_VAR 0 18
42694: NOT
42695: PUSH
42696: LD_INT 40
42698: PPUSH
42699: LD_VAR 0 16
42703: PPUSH
42704: CALL_OW 321
42708: PUSH
42709: LD_INT 2
42711: EQUAL
42712: AND
42713: PUSH
42714: LD_INT 7
42716: PUSH
42717: LD_VAR 0 5
42721: IN
42722: PUSH
42723: LD_INT 28
42725: PUSH
42726: LD_VAR 0 5
42730: IN
42731: OR
42732: PUSH
42733: LD_INT 45
42735: PUSH
42736: LD_VAR 0 5
42740: IN
42741: OR
42742: AND
42743: IFFALSE 42997
// begin hex := GetHexInfo ( x , y ) ;
42745: LD_ADDR_VAR 0 4
42749: PUSH
42750: LD_VAR 0 10
42754: PPUSH
42755: LD_VAR 0 11
42759: PPUSH
42760: CALL_OW 546
42764: ST_TO_ADDR
// if hex [ 1 ] then
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: IFFALSE 42777
// exit ;
42775: GO 43180
// height := hex [ 2 ] ;
42777: LD_ADDR_VAR 0 15
42781: PUSH
42782: LD_VAR 0 4
42786: PUSH
42787: LD_INT 2
42789: ARRAY
42790: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42791: LD_ADDR_VAR 0 14
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: LD_INT 5
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// for i in tmp do
42814: LD_ADDR_VAR 0 8
42818: PUSH
42819: LD_VAR 0 14
42823: PUSH
42824: FOR_IN
42825: IFFALSE 42995
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42827: LD_ADDR_VAR 0 9
42831: PUSH
42832: LD_VAR 0 10
42836: PPUSH
42837: LD_VAR 0 8
42841: PPUSH
42842: LD_INT 5
42844: PPUSH
42845: CALL_OW 272
42849: PUSH
42850: LD_VAR 0 11
42854: PPUSH
42855: LD_VAR 0 8
42859: PPUSH
42860: LD_INT 5
42862: PPUSH
42863: CALL_OW 273
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42872: LD_VAR 0 9
42876: PUSH
42877: LD_INT 1
42879: ARRAY
42880: PPUSH
42881: LD_VAR 0 9
42885: PUSH
42886: LD_INT 2
42888: ARRAY
42889: PPUSH
42890: CALL_OW 488
42894: IFFALSE 42993
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42896: LD_ADDR_VAR 0 4
42900: PUSH
42901: LD_VAR 0 9
42905: PUSH
42906: LD_INT 1
42908: ARRAY
42909: PPUSH
42910: LD_VAR 0 9
42914: PUSH
42915: LD_INT 2
42917: ARRAY
42918: PPUSH
42919: CALL_OW 546
42923: ST_TO_ADDR
// if hex [ 1 ] then
42924: LD_VAR 0 4
42928: PUSH
42929: LD_INT 1
42931: ARRAY
42932: IFFALSE 42936
// continue ;
42934: GO 42824
// h := hex [ 2 ] ;
42936: LD_ADDR_VAR 0 13
42940: PUSH
42941: LD_VAR 0 4
42945: PUSH
42946: LD_INT 2
42948: ARRAY
42949: ST_TO_ADDR
// if h + 7 < height then
42950: LD_VAR 0 13
42954: PUSH
42955: LD_INT 7
42957: PLUS
42958: PUSH
42959: LD_VAR 0 15
42963: LESS
42964: IFFALSE 42993
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42966: LD_ADDR_VAR 0 18
42970: PUSH
42971: LD_INT 7
42973: PUSH
42974: LD_INT 28
42976: PUSH
42977: LD_INT 45
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: PUSH
42985: LD_VAR 0 12
42989: ARRAY
42990: ST_TO_ADDR
// break ;
42991: GO 42995
// end ; end ; end ;
42993: GO 42824
42995: POP
42996: POP
// end ; if not weapon then
42997: LD_VAR 0 18
43001: NOT
43002: IFFALSE 43062
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43004: LD_ADDR_VAR 0 5
43008: PUSH
43009: LD_VAR 0 5
43013: PUSH
43014: LD_INT 11
43016: PUSH
43017: LD_INT 30
43019: PUSH
43020: LD_INT 49
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: DIFF
43028: ST_TO_ADDR
// if not list then
43029: LD_VAR 0 5
43033: NOT
43034: IFFALSE 43038
// exit ;
43036: GO 43180
// weapon := list [ rand ( 1 , list ) ] ;
43038: LD_ADDR_VAR 0 18
43042: PUSH
43043: LD_VAR 0 5
43047: PUSH
43048: LD_INT 1
43050: PPUSH
43051: LD_VAR 0 5
43055: PPUSH
43056: CALL_OW 12
43060: ARRAY
43061: ST_TO_ADDR
// end ; if weapon then
43062: LD_VAR 0 18
43066: IFFALSE 43180
// begin tmp := CostOfWeapon ( weapon ) ;
43068: LD_ADDR_VAR 0 14
43072: PUSH
43073: LD_VAR 0 18
43077: PPUSH
43078: CALL_OW 451
43082: ST_TO_ADDR
// j := GetBase ( tower ) ;
43083: LD_ADDR_VAR 0 9
43087: PUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 274
43097: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43098: LD_VAR 0 9
43102: PPUSH
43103: LD_INT 1
43105: PPUSH
43106: CALL_OW 275
43110: PUSH
43111: LD_VAR 0 14
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: GREATEREQUAL
43120: PUSH
43121: LD_VAR 0 9
43125: PPUSH
43126: LD_INT 2
43128: PPUSH
43129: CALL_OW 275
43133: PUSH
43134: LD_VAR 0 14
43138: PUSH
43139: LD_INT 2
43141: ARRAY
43142: GREATEREQUAL
43143: AND
43144: PUSH
43145: LD_VAR 0 9
43149: PPUSH
43150: LD_INT 3
43152: PPUSH
43153: CALL_OW 275
43157: PUSH
43158: LD_VAR 0 14
43162: PUSH
43163: LD_INT 3
43165: ARRAY
43166: GREATEREQUAL
43167: AND
43168: IFFALSE 43180
// result := weapon ;
43170: LD_ADDR_VAR 0 3
43174: PUSH
43175: LD_VAR 0 18
43179: ST_TO_ADDR
// end ; end ;
43180: LD_VAR 0 3
43184: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43185: LD_INT 0
43187: PPUSH
43188: PPUSH
// result := true ;
43189: LD_ADDR_VAR 0 3
43193: PUSH
43194: LD_INT 1
43196: ST_TO_ADDR
// if array1 = array2 then
43197: LD_VAR 0 1
43201: PUSH
43202: LD_VAR 0 2
43206: EQUAL
43207: IFFALSE 43267
// begin for i = 1 to array1 do
43209: LD_ADDR_VAR 0 4
43213: PUSH
43214: DOUBLE
43215: LD_INT 1
43217: DEC
43218: ST_TO_ADDR
43219: LD_VAR 0 1
43223: PUSH
43224: FOR_TO
43225: IFFALSE 43263
// if array1 [ i ] <> array2 [ i ] then
43227: LD_VAR 0 1
43231: PUSH
43232: LD_VAR 0 4
43236: ARRAY
43237: PUSH
43238: LD_VAR 0 2
43242: PUSH
43243: LD_VAR 0 4
43247: ARRAY
43248: NONEQUAL
43249: IFFALSE 43261
// begin result := false ;
43251: LD_ADDR_VAR 0 3
43255: PUSH
43256: LD_INT 0
43258: ST_TO_ADDR
// break ;
43259: GO 43263
// end ;
43261: GO 43224
43263: POP
43264: POP
// end else
43265: GO 43275
// result := false ;
43267: LD_ADDR_VAR 0 3
43271: PUSH
43272: LD_INT 0
43274: ST_TO_ADDR
// end ;
43275: LD_VAR 0 3
43279: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43280: LD_INT 0
43282: PPUSH
43283: PPUSH
// if not array1 or not array2 then
43284: LD_VAR 0 1
43288: NOT
43289: PUSH
43290: LD_VAR 0 2
43294: NOT
43295: OR
43296: IFFALSE 43300
// exit ;
43298: GO 43364
// result := true ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_INT 1
43307: ST_TO_ADDR
// for i = 1 to array1 do
43308: LD_ADDR_VAR 0 4
43312: PUSH
43313: DOUBLE
43314: LD_INT 1
43316: DEC
43317: ST_TO_ADDR
43318: LD_VAR 0 1
43322: PUSH
43323: FOR_TO
43324: IFFALSE 43362
// if array1 [ i ] <> array2 [ i ] then
43326: LD_VAR 0 1
43330: PUSH
43331: LD_VAR 0 4
43335: ARRAY
43336: PUSH
43337: LD_VAR 0 2
43341: PUSH
43342: LD_VAR 0 4
43346: ARRAY
43347: NONEQUAL
43348: IFFALSE 43360
// begin result := false ;
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 0
43357: ST_TO_ADDR
// break ;
43358: GO 43362
// end ;
43360: GO 43323
43362: POP
43363: POP
// end ;
43364: LD_VAR 0 3
43368: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43369: LD_INT 0
43371: PPUSH
43372: PPUSH
43373: PPUSH
// pom := GetBase ( fac ) ;
43374: LD_ADDR_VAR 0 5
43378: PUSH
43379: LD_VAR 0 1
43383: PPUSH
43384: CALL_OW 274
43388: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43389: LD_ADDR_VAR 0 4
43393: PUSH
43394: LD_VAR 0 2
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: PPUSH
43403: LD_VAR 0 2
43407: PUSH
43408: LD_INT 2
43410: ARRAY
43411: PPUSH
43412: LD_VAR 0 2
43416: PUSH
43417: LD_INT 3
43419: ARRAY
43420: PPUSH
43421: LD_VAR 0 2
43425: PUSH
43426: LD_INT 4
43428: ARRAY
43429: PPUSH
43430: CALL_OW 449
43434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_VAR 0 5
43444: PPUSH
43445: LD_INT 1
43447: PPUSH
43448: CALL_OW 275
43452: PUSH
43453: LD_VAR 0 4
43457: PUSH
43458: LD_INT 1
43460: ARRAY
43461: GREATEREQUAL
43462: PUSH
43463: LD_VAR 0 5
43467: PPUSH
43468: LD_INT 2
43470: PPUSH
43471: CALL_OW 275
43475: PUSH
43476: LD_VAR 0 4
43480: PUSH
43481: LD_INT 2
43483: ARRAY
43484: GREATEREQUAL
43485: AND
43486: PUSH
43487: LD_VAR 0 5
43491: PPUSH
43492: LD_INT 3
43494: PPUSH
43495: CALL_OW 275
43499: PUSH
43500: LD_VAR 0 4
43504: PUSH
43505: LD_INT 3
43507: ARRAY
43508: GREATEREQUAL
43509: AND
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 3
43515: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43516: LD_INT 0
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
// pom := GetBase ( building ) ;
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_VAR 0 1
43531: PPUSH
43532: CALL_OW 274
43536: ST_TO_ADDR
// if not pom then
43537: LD_VAR 0 3
43541: NOT
43542: IFFALSE 43546
// exit ;
43544: GO 43716
// btype := GetBType ( building ) ;
43546: LD_ADDR_VAR 0 5
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 266
43560: ST_TO_ADDR
// if btype = b_armoury then
43561: LD_VAR 0 5
43565: PUSH
43566: LD_INT 4
43568: EQUAL
43569: IFFALSE 43579
// btype := b_barracks ;
43571: LD_ADDR_VAR 0 5
43575: PUSH
43576: LD_INT 5
43578: ST_TO_ADDR
// if btype = b_depot then
43579: LD_VAR 0 5
43583: PUSH
43584: LD_INT 0
43586: EQUAL
43587: IFFALSE 43597
// btype := b_warehouse ;
43589: LD_ADDR_VAR 0 5
43593: PUSH
43594: LD_INT 1
43596: ST_TO_ADDR
// if btype = b_workshop then
43597: LD_VAR 0 5
43601: PUSH
43602: LD_INT 2
43604: EQUAL
43605: IFFALSE 43615
// btype := b_factory ;
43607: LD_ADDR_VAR 0 5
43611: PUSH
43612: LD_INT 3
43614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43615: LD_ADDR_VAR 0 4
43619: PUSH
43620: LD_VAR 0 5
43624: PPUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 248
43634: PPUSH
43635: CALL_OW 450
43639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43640: LD_ADDR_VAR 0 2
43644: PUSH
43645: LD_VAR 0 3
43649: PPUSH
43650: LD_INT 1
43652: PPUSH
43653: CALL_OW 275
43657: PUSH
43658: LD_VAR 0 4
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: GREATEREQUAL
43667: PUSH
43668: LD_VAR 0 3
43672: PPUSH
43673: LD_INT 2
43675: PPUSH
43676: CALL_OW 275
43680: PUSH
43681: LD_VAR 0 4
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: GREATEREQUAL
43690: AND
43691: PUSH
43692: LD_VAR 0 3
43696: PPUSH
43697: LD_INT 3
43699: PPUSH
43700: CALL_OW 275
43704: PUSH
43705: LD_VAR 0 4
43709: PUSH
43710: LD_INT 3
43712: ARRAY
43713: GREATEREQUAL
43714: AND
43715: ST_TO_ADDR
// end ;
43716: LD_VAR 0 2
43720: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43721: LD_INT 0
43723: PPUSH
43724: PPUSH
43725: PPUSH
// pom := GetBase ( building ) ;
43726: LD_ADDR_VAR 0 4
43730: PUSH
43731: LD_VAR 0 1
43735: PPUSH
43736: CALL_OW 274
43740: ST_TO_ADDR
// if not pom then
43741: LD_VAR 0 4
43745: NOT
43746: IFFALSE 43750
// exit ;
43748: GO 43851
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43750: LD_ADDR_VAR 0 5
43754: PUSH
43755: LD_VAR 0 2
43759: PPUSH
43760: LD_VAR 0 1
43764: PPUSH
43765: CALL_OW 248
43769: PPUSH
43770: CALL_OW 450
43774: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43775: LD_ADDR_VAR 0 3
43779: PUSH
43780: LD_VAR 0 4
43784: PPUSH
43785: LD_INT 1
43787: PPUSH
43788: CALL_OW 275
43792: PUSH
43793: LD_VAR 0 5
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: GREATEREQUAL
43802: PUSH
43803: LD_VAR 0 4
43807: PPUSH
43808: LD_INT 2
43810: PPUSH
43811: CALL_OW 275
43815: PUSH
43816: LD_VAR 0 5
43820: PUSH
43821: LD_INT 2
43823: ARRAY
43824: GREATEREQUAL
43825: AND
43826: PUSH
43827: LD_VAR 0 4
43831: PPUSH
43832: LD_INT 3
43834: PPUSH
43835: CALL_OW 275
43839: PUSH
43840: LD_VAR 0 5
43844: PUSH
43845: LD_INT 3
43847: ARRAY
43848: GREATEREQUAL
43849: AND
43850: ST_TO_ADDR
// end ;
43851: LD_VAR 0 3
43855: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43856: LD_INT 0
43858: PPUSH
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
43863: PPUSH
43864: PPUSH
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
// result := false ;
43869: LD_ADDR_VAR 0 8
43873: PUSH
43874: LD_INT 0
43876: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43877: LD_VAR 0 5
43881: NOT
43882: PUSH
43883: LD_VAR 0 1
43887: NOT
43888: OR
43889: PUSH
43890: LD_VAR 0 2
43894: NOT
43895: OR
43896: PUSH
43897: LD_VAR 0 3
43901: NOT
43902: OR
43903: IFFALSE 43907
// exit ;
43905: GO 44721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43907: LD_ADDR_VAR 0 14
43911: PUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: LD_VAR 0 2
43921: PPUSH
43922: LD_VAR 0 3
43926: PPUSH
43927: LD_VAR 0 4
43931: PPUSH
43932: LD_VAR 0 5
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PPUSH
43941: CALL_OW 248
43945: PPUSH
43946: LD_INT 0
43948: PPUSH
43949: CALL 45974 0 6
43953: ST_TO_ADDR
// if not hexes then
43954: LD_VAR 0 14
43958: NOT
43959: IFFALSE 43963
// exit ;
43961: GO 44721
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43963: LD_ADDR_VAR 0 17
43967: PUSH
43968: LD_VAR 0 5
43972: PPUSH
43973: LD_INT 22
43975: PUSH
43976: LD_VAR 0 13
43980: PPUSH
43981: CALL_OW 255
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 30
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 30
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PPUSH
44022: CALL_OW 72
44026: ST_TO_ADDR
// for i = 1 to hexes do
44027: LD_ADDR_VAR 0 9
44031: PUSH
44032: DOUBLE
44033: LD_INT 1
44035: DEC
44036: ST_TO_ADDR
44037: LD_VAR 0 14
44041: PUSH
44042: FOR_TO
44043: IFFALSE 44719
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44045: LD_ADDR_VAR 0 13
44049: PUSH
44050: LD_VAR 0 14
44054: PUSH
44055: LD_VAR 0 9
44059: ARRAY
44060: PUSH
44061: LD_INT 1
44063: ARRAY
44064: PPUSH
44065: LD_VAR 0 14
44069: PUSH
44070: LD_VAR 0 9
44074: ARRAY
44075: PUSH
44076: LD_INT 2
44078: ARRAY
44079: PPUSH
44080: CALL_OW 428
44084: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44085: LD_VAR 0 14
44089: PUSH
44090: LD_VAR 0 9
44094: ARRAY
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: PPUSH
44100: LD_VAR 0 14
44104: PUSH
44105: LD_VAR 0 9
44109: ARRAY
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 351
44119: PUSH
44120: LD_VAR 0 14
44124: PUSH
44125: LD_VAR 0 9
44129: ARRAY
44130: PUSH
44131: LD_INT 1
44133: ARRAY
44134: PPUSH
44135: LD_VAR 0 14
44139: PUSH
44140: LD_VAR 0 9
44144: ARRAY
44145: PUSH
44146: LD_INT 2
44148: ARRAY
44149: PPUSH
44150: CALL_OW 488
44154: NOT
44155: OR
44156: PUSH
44157: LD_VAR 0 13
44161: PPUSH
44162: CALL_OW 247
44166: PUSH
44167: LD_INT 3
44169: EQUAL
44170: OR
44171: IFFALSE 44177
// exit ;
44173: POP
44174: POP
44175: GO 44721
// if not tmp then
44177: LD_VAR 0 13
44181: NOT
44182: IFFALSE 44186
// continue ;
44184: GO 44042
// result := true ;
44186: LD_ADDR_VAR 0 8
44190: PUSH
44191: LD_INT 1
44193: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44194: LD_VAR 0 6
44198: PUSH
44199: LD_VAR 0 13
44203: PPUSH
44204: CALL_OW 247
44208: PUSH
44209: LD_INT 2
44211: EQUAL
44212: AND
44213: PUSH
44214: LD_VAR 0 13
44218: PPUSH
44219: CALL_OW 263
44223: PUSH
44224: LD_INT 1
44226: EQUAL
44227: AND
44228: IFFALSE 44392
// begin if IsDrivenBy ( tmp ) then
44230: LD_VAR 0 13
44234: PPUSH
44235: CALL_OW 311
44239: IFFALSE 44243
// continue ;
44241: GO 44042
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44243: LD_VAR 0 6
44247: PPUSH
44248: LD_INT 3
44250: PUSH
44251: LD_INT 60
44253: PUSH
44254: EMPTY
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 55
44266: PUSH
44267: EMPTY
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PPUSH
44278: CALL_OW 72
44282: IFFALSE 44390
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44284: LD_ADDR_VAR 0 18
44288: PUSH
44289: LD_VAR 0 6
44293: PPUSH
44294: LD_INT 3
44296: PUSH
44297: LD_INT 60
44299: PUSH
44300: EMPTY
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: LD_INT 55
44312: PUSH
44313: EMPTY
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PPUSH
44324: CALL_OW 72
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: ST_TO_ADDR
// if IsInUnit ( driver ) then
44333: LD_VAR 0 18
44337: PPUSH
44338: CALL_OW 310
44342: IFFALSE 44353
// ComExit ( driver ) ;
44344: LD_VAR 0 18
44348: PPUSH
44349: CALL 69755 0 1
// AddComEnterUnit ( driver , tmp ) ;
44353: LD_VAR 0 18
44357: PPUSH
44358: LD_VAR 0 13
44362: PPUSH
44363: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44367: LD_VAR 0 18
44371: PPUSH
44372: LD_VAR 0 7
44376: PPUSH
44377: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44381: LD_VAR 0 18
44385: PPUSH
44386: CALL_OW 181
// end ; continue ;
44390: GO 44042
// end ; if not cleaners or not tmp in cleaners then
44392: LD_VAR 0 6
44396: NOT
44397: PUSH
44398: LD_VAR 0 13
44402: PUSH
44403: LD_VAR 0 6
44407: IN
44408: NOT
44409: OR
44410: IFFALSE 44717
// begin if dep then
44412: LD_VAR 0 17
44416: IFFALSE 44552
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44418: LD_ADDR_VAR 0 16
44422: PUSH
44423: LD_VAR 0 17
44427: PUSH
44428: LD_INT 1
44430: ARRAY
44431: PPUSH
44432: CALL_OW 250
44436: PPUSH
44437: LD_VAR 0 17
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: PPUSH
44446: CALL_OW 254
44450: PPUSH
44451: LD_INT 5
44453: PPUSH
44454: CALL_OW 272
44458: PUSH
44459: LD_VAR 0 17
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: CALL_OW 251
44472: PPUSH
44473: LD_VAR 0 17
44477: PUSH
44478: LD_INT 1
44480: ARRAY
44481: PPUSH
44482: CALL_OW 254
44486: PPUSH
44487: LD_INT 5
44489: PPUSH
44490: CALL_OW 273
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44499: LD_VAR 0 16
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PPUSH
44508: LD_VAR 0 16
44512: PUSH
44513: LD_INT 2
44515: ARRAY
44516: PPUSH
44517: CALL_OW 488
44521: IFFALSE 44552
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44523: LD_VAR 0 13
44527: PPUSH
44528: LD_VAR 0 16
44532: PUSH
44533: LD_INT 1
44535: ARRAY
44536: PPUSH
44537: LD_VAR 0 16
44541: PUSH
44542: LD_INT 2
44544: ARRAY
44545: PPUSH
44546: CALL_OW 111
// continue ;
44550: GO 44042
// end ; end ; r := GetDir ( tmp ) ;
44552: LD_ADDR_VAR 0 15
44556: PUSH
44557: LD_VAR 0 13
44561: PPUSH
44562: CALL_OW 254
44566: ST_TO_ADDR
// if r = 5 then
44567: LD_VAR 0 15
44571: PUSH
44572: LD_INT 5
44574: EQUAL
44575: IFFALSE 44585
// r := 0 ;
44577: LD_ADDR_VAR 0 15
44581: PUSH
44582: LD_INT 0
44584: ST_TO_ADDR
// for j = r to 5 do
44585: LD_ADDR_VAR 0 10
44589: PUSH
44590: DOUBLE
44591: LD_VAR 0 15
44595: DEC
44596: ST_TO_ADDR
44597: LD_INT 5
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44715
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44603: LD_ADDR_VAR 0 11
44607: PUSH
44608: LD_VAR 0 13
44612: PPUSH
44613: CALL_OW 250
44617: PPUSH
44618: LD_VAR 0 10
44622: PPUSH
44623: LD_INT 2
44625: PPUSH
44626: CALL_OW 272
44630: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44631: LD_ADDR_VAR 0 12
44635: PUSH
44636: LD_VAR 0 13
44640: PPUSH
44641: CALL_OW 251
44645: PPUSH
44646: LD_VAR 0 10
44650: PPUSH
44651: LD_INT 2
44653: PPUSH
44654: CALL_OW 273
44658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44659: LD_VAR 0 11
44663: PPUSH
44664: LD_VAR 0 12
44668: PPUSH
44669: CALL_OW 488
44673: PUSH
44674: LD_VAR 0 11
44678: PPUSH
44679: LD_VAR 0 12
44683: PPUSH
44684: CALL_OW 428
44688: NOT
44689: AND
44690: IFFALSE 44713
// begin ComMoveXY ( tmp , _x , _y ) ;
44692: LD_VAR 0 13
44696: PPUSH
44697: LD_VAR 0 11
44701: PPUSH
44702: LD_VAR 0 12
44706: PPUSH
44707: CALL_OW 111
// break ;
44711: GO 44715
// end ; end ;
44713: GO 44600
44715: POP
44716: POP
// end ; end ;
44717: GO 44042
44719: POP
44720: POP
// end ;
44721: LD_VAR 0 8
44725: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44726: LD_INT 0
44728: PPUSH
// result := true ;
44729: LD_ADDR_VAR 0 3
44733: PUSH
44734: LD_INT 1
44736: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 24
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44756
44748: LD_INT 33
44750: DOUBLE
44751: EQUAL
44752: IFTRUE 44756
44754: GO 44781
44756: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44757: LD_ADDR_VAR 0 3
44761: PUSH
44762: LD_INT 32
44764: PPUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 321
44774: PUSH
44775: LD_INT 2
44777: EQUAL
44778: ST_TO_ADDR
44779: GO 45097
44781: LD_INT 20
44783: DOUBLE
44784: EQUAL
44785: IFTRUE 44789
44787: GO 44814
44789: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_INT 6
44797: PPUSH
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 321
44807: PUSH
44808: LD_INT 2
44810: EQUAL
44811: ST_TO_ADDR
44812: GO 45097
44814: LD_INT 22
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44828
44820: LD_INT 36
44822: DOUBLE
44823: EQUAL
44824: IFTRUE 44828
44826: GO 44853
44828: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44829: LD_ADDR_VAR 0 3
44833: PUSH
44834: LD_INT 15
44836: PPUSH
44837: LD_VAR 0 1
44841: PPUSH
44842: CALL_OW 321
44846: PUSH
44847: LD_INT 2
44849: EQUAL
44850: ST_TO_ADDR
44851: GO 45097
44853: LD_INT 30
44855: DOUBLE
44856: EQUAL
44857: IFTRUE 44861
44859: GO 44886
44861: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44862: LD_ADDR_VAR 0 3
44866: PUSH
44867: LD_INT 20
44869: PPUSH
44870: LD_VAR 0 1
44874: PPUSH
44875: CALL_OW 321
44879: PUSH
44880: LD_INT 2
44882: EQUAL
44883: ST_TO_ADDR
44884: GO 45097
44886: LD_INT 28
44888: DOUBLE
44889: EQUAL
44890: IFTRUE 44900
44892: LD_INT 21
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44900
44898: GO 44925
44900: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_INT 21
44908: PPUSH
44909: LD_VAR 0 1
44913: PPUSH
44914: CALL_OW 321
44918: PUSH
44919: LD_INT 2
44921: EQUAL
44922: ST_TO_ADDR
44923: GO 45097
44925: LD_INT 16
44927: DOUBLE
44928: EQUAL
44929: IFTRUE 44933
44931: GO 44958
44933: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_INT 84
44941: PPUSH
44942: LD_VAR 0 1
44946: PPUSH
44947: CALL_OW 321
44951: PUSH
44952: LD_INT 2
44954: EQUAL
44955: ST_TO_ADDR
44956: GO 45097
44958: LD_INT 19
44960: DOUBLE
44961: EQUAL
44962: IFTRUE 44972
44964: LD_INT 23
44966: DOUBLE
44967: EQUAL
44968: IFTRUE 44972
44970: GO 44997
44972: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44973: LD_ADDR_VAR 0 3
44977: PUSH
44978: LD_INT 83
44980: PPUSH
44981: LD_VAR 0 1
44985: PPUSH
44986: CALL_OW 321
44990: PUSH
44991: LD_INT 2
44993: EQUAL
44994: ST_TO_ADDR
44995: GO 45097
44997: LD_INT 17
44999: DOUBLE
45000: EQUAL
45001: IFTRUE 45005
45003: GO 45030
45005: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45006: LD_ADDR_VAR 0 3
45010: PUSH
45011: LD_INT 39
45013: PPUSH
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 321
45023: PUSH
45024: LD_INT 2
45026: EQUAL
45027: ST_TO_ADDR
45028: GO 45097
45030: LD_INT 18
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45063
45038: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_INT 40
45046: PPUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: CALL_OW 321
45056: PUSH
45057: LD_INT 2
45059: EQUAL
45060: ST_TO_ADDR
45061: GO 45097
45063: LD_INT 27
45065: DOUBLE
45066: EQUAL
45067: IFTRUE 45071
45069: GO 45096
45071: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_INT 35
45079: PPUSH
45080: LD_VAR 0 1
45084: PPUSH
45085: CALL_OW 321
45089: PUSH
45090: LD_INT 2
45092: EQUAL
45093: ST_TO_ADDR
45094: GO 45097
45096: POP
// end ;
45097: LD_VAR 0 3
45101: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45102: LD_INT 0
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
// result := false ;
45115: LD_ADDR_VAR 0 6
45119: PUSH
45120: LD_INT 0
45122: ST_TO_ADDR
// if btype = b_depot then
45123: LD_VAR 0 2
45127: PUSH
45128: LD_INT 0
45130: EQUAL
45131: IFFALSE 45143
// begin result := true ;
45133: LD_ADDR_VAR 0 6
45137: PUSH
45138: LD_INT 1
45140: ST_TO_ADDR
// exit ;
45141: GO 45969
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45143: LD_VAR 0 1
45147: NOT
45148: PUSH
45149: LD_VAR 0 1
45153: PPUSH
45154: CALL_OW 266
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: IN
45169: NOT
45170: OR
45171: PUSH
45172: LD_VAR 0 2
45176: NOT
45177: OR
45178: PUSH
45179: LD_VAR 0 5
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 3
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: IN
45210: NOT
45211: OR
45212: PUSH
45213: LD_VAR 0 3
45217: PPUSH
45218: LD_VAR 0 4
45222: PPUSH
45223: CALL_OW 488
45227: NOT
45228: OR
45229: IFFALSE 45233
// exit ;
45231: GO 45969
// side := GetSide ( depot ) ;
45233: LD_ADDR_VAR 0 9
45237: PUSH
45238: LD_VAR 0 1
45242: PPUSH
45243: CALL_OW 255
45247: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45248: LD_VAR 0 9
45252: PPUSH
45253: LD_VAR 0 2
45257: PPUSH
45258: CALL 44726 0 2
45262: NOT
45263: IFFALSE 45267
// exit ;
45265: GO 45969
// pom := GetBase ( depot ) ;
45267: LD_ADDR_VAR 0 10
45271: PUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 274
45281: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45282: LD_ADDR_VAR 0 11
45286: PUSH
45287: LD_VAR 0 2
45291: PPUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 248
45301: PPUSH
45302: CALL_OW 450
45306: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45307: LD_VAR 0 10
45311: PPUSH
45312: LD_INT 1
45314: PPUSH
45315: CALL_OW 275
45319: PUSH
45320: LD_VAR 0 11
45324: PUSH
45325: LD_INT 1
45327: ARRAY
45328: GREATEREQUAL
45329: PUSH
45330: LD_VAR 0 10
45334: PPUSH
45335: LD_INT 2
45337: PPUSH
45338: CALL_OW 275
45342: PUSH
45343: LD_VAR 0 11
45347: PUSH
45348: LD_INT 2
45350: ARRAY
45351: GREATEREQUAL
45352: AND
45353: PUSH
45354: LD_VAR 0 10
45358: PPUSH
45359: LD_INT 3
45361: PPUSH
45362: CALL_OW 275
45366: PUSH
45367: LD_VAR 0 11
45371: PUSH
45372: LD_INT 3
45374: ARRAY
45375: GREATEREQUAL
45376: AND
45377: NOT
45378: IFFALSE 45382
// exit ;
45380: GO 45969
// if GetBType ( depot ) = b_depot then
45382: LD_VAR 0 1
45386: PPUSH
45387: CALL_OW 266
45391: PUSH
45392: LD_INT 0
45394: EQUAL
45395: IFFALSE 45407
// dist := 28 else
45397: LD_ADDR_VAR 0 14
45401: PUSH
45402: LD_INT 28
45404: ST_TO_ADDR
45405: GO 45415
// dist := 36 ;
45407: LD_ADDR_VAR 0 14
45411: PUSH
45412: LD_INT 36
45414: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45415: LD_VAR 0 1
45419: PPUSH
45420: LD_VAR 0 3
45424: PPUSH
45425: LD_VAR 0 4
45429: PPUSH
45430: CALL_OW 297
45434: PUSH
45435: LD_VAR 0 14
45439: GREATER
45440: IFFALSE 45444
// exit ;
45442: GO 45969
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45444: LD_ADDR_VAR 0 12
45448: PUSH
45449: LD_VAR 0 2
45453: PPUSH
45454: LD_VAR 0 3
45458: PPUSH
45459: LD_VAR 0 4
45463: PPUSH
45464: LD_VAR 0 5
45468: PPUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: CALL_OW 248
45478: PPUSH
45479: LD_INT 0
45481: PPUSH
45482: CALL 45974 0 6
45486: ST_TO_ADDR
// if not hexes then
45487: LD_VAR 0 12
45491: NOT
45492: IFFALSE 45496
// exit ;
45494: GO 45969
// hex := GetHexInfo ( x , y ) ;
45496: LD_ADDR_VAR 0 15
45500: PUSH
45501: LD_VAR 0 3
45505: PPUSH
45506: LD_VAR 0 4
45510: PPUSH
45511: CALL_OW 546
45515: ST_TO_ADDR
// if hex [ 1 ] then
45516: LD_VAR 0 15
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: IFFALSE 45528
// exit ;
45526: GO 45969
// height := hex [ 2 ] ;
45528: LD_ADDR_VAR 0 13
45532: PUSH
45533: LD_VAR 0 15
45537: PUSH
45538: LD_INT 2
45540: ARRAY
45541: ST_TO_ADDR
// for i = 1 to hexes do
45542: LD_ADDR_VAR 0 7
45546: PUSH
45547: DOUBLE
45548: LD_INT 1
45550: DEC
45551: ST_TO_ADDR
45552: LD_VAR 0 12
45556: PUSH
45557: FOR_TO
45558: IFFALSE 45888
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45560: LD_VAR 0 12
45564: PUSH
45565: LD_VAR 0 7
45569: ARRAY
45570: PUSH
45571: LD_INT 1
45573: ARRAY
45574: PPUSH
45575: LD_VAR 0 12
45579: PUSH
45580: LD_VAR 0 7
45584: ARRAY
45585: PUSH
45586: LD_INT 2
45588: ARRAY
45589: PPUSH
45590: CALL_OW 488
45594: NOT
45595: PUSH
45596: LD_VAR 0 12
45600: PUSH
45601: LD_VAR 0 7
45605: ARRAY
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PPUSH
45611: LD_VAR 0 12
45615: PUSH
45616: LD_VAR 0 7
45620: ARRAY
45621: PUSH
45622: LD_INT 2
45624: ARRAY
45625: PPUSH
45626: CALL_OW 428
45630: PUSH
45631: LD_INT 0
45633: GREATER
45634: OR
45635: PUSH
45636: LD_VAR 0 12
45640: PUSH
45641: LD_VAR 0 7
45645: ARRAY
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PPUSH
45651: LD_VAR 0 12
45655: PUSH
45656: LD_VAR 0 7
45660: ARRAY
45661: PUSH
45662: LD_INT 2
45664: ARRAY
45665: PPUSH
45666: CALL_OW 351
45670: OR
45671: IFFALSE 45677
// exit ;
45673: POP
45674: POP
45675: GO 45969
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45677: LD_ADDR_VAR 0 8
45681: PUSH
45682: LD_VAR 0 12
45686: PUSH
45687: LD_VAR 0 7
45691: ARRAY
45692: PUSH
45693: LD_INT 1
45695: ARRAY
45696: PPUSH
45697: LD_VAR 0 12
45701: PUSH
45702: LD_VAR 0 7
45706: ARRAY
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: PPUSH
45712: CALL_OW 546
45716: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45717: LD_VAR 0 8
45721: PUSH
45722: LD_INT 1
45724: ARRAY
45725: PUSH
45726: LD_VAR 0 8
45730: PUSH
45731: LD_INT 2
45733: ARRAY
45734: PUSH
45735: LD_VAR 0 13
45739: PUSH
45740: LD_INT 2
45742: PLUS
45743: GREATER
45744: OR
45745: PUSH
45746: LD_VAR 0 8
45750: PUSH
45751: LD_INT 2
45753: ARRAY
45754: PUSH
45755: LD_VAR 0 13
45759: PUSH
45760: LD_INT 2
45762: MINUS
45763: LESS
45764: OR
45765: PUSH
45766: LD_VAR 0 8
45770: PUSH
45771: LD_INT 3
45773: ARRAY
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 8
45780: PUSH
45781: LD_INT 9
45783: PUSH
45784: LD_INT 10
45786: PUSH
45787: LD_INT 11
45789: PUSH
45790: LD_INT 12
45792: PUSH
45793: LD_INT 13
45795: PUSH
45796: LD_INT 16
45798: PUSH
45799: LD_INT 17
45801: PUSH
45802: LD_INT 18
45804: PUSH
45805: LD_INT 19
45807: PUSH
45808: LD_INT 20
45810: PUSH
45811: LD_INT 21
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: IN
45829: NOT
45830: OR
45831: PUSH
45832: LD_VAR 0 8
45836: PUSH
45837: LD_INT 5
45839: ARRAY
45840: NOT
45841: OR
45842: PUSH
45843: LD_VAR 0 8
45847: PUSH
45848: LD_INT 6
45850: ARRAY
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 7
45860: PUSH
45861: LD_INT 9
45863: PUSH
45864: LD_INT 10
45866: PUSH
45867: LD_INT 11
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: IN
45878: NOT
45879: OR
45880: IFFALSE 45886
// exit ;
45882: POP
45883: POP
45884: GO 45969
// end ;
45886: GO 45557
45888: POP
45889: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45890: LD_VAR 0 9
45894: PPUSH
45895: LD_VAR 0 3
45899: PPUSH
45900: LD_VAR 0 4
45904: PPUSH
45905: LD_INT 20
45907: PPUSH
45908: CALL 37892 0 4
45912: PUSH
45913: LD_INT 4
45915: ARRAY
45916: IFFALSE 45920
// exit ;
45918: GO 45969
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45920: LD_VAR 0 2
45924: PUSH
45925: LD_INT 29
45927: PUSH
45928: LD_INT 30
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: IN
45935: PUSH
45936: LD_VAR 0 3
45940: PPUSH
45941: LD_VAR 0 4
45945: PPUSH
45946: LD_VAR 0 9
45950: PPUSH
45951: CALL_OW 440
45955: NOT
45956: AND
45957: IFFALSE 45961
// exit ;
45959: GO 45969
// result := true ;
45961: LD_ADDR_VAR 0 6
45965: PUSH
45966: LD_INT 1
45968: ST_TO_ADDR
// end ;
45969: LD_VAR 0 6
45973: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45974: LD_INT 0
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
// result = [ ] ;
46034: LD_ADDR_VAR 0 7
46038: PUSH
46039: EMPTY
46040: ST_TO_ADDR
// temp_list = [ ] ;
46041: LD_ADDR_VAR 0 9
46045: PUSH
46046: EMPTY
46047: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46048: LD_VAR 0 4
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: LD_INT 4
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: IN
46079: NOT
46080: PUSH
46081: LD_VAR 0 1
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: IN
46096: PUSH
46097: LD_VAR 0 5
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: IN
46116: NOT
46117: AND
46118: OR
46119: IFFALSE 46123
// exit ;
46121: GO 64514
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46123: LD_VAR 0 1
46127: PUSH
46128: LD_INT 6
46130: PUSH
46131: LD_INT 7
46133: PUSH
46134: LD_INT 8
46136: PUSH
46137: LD_INT 13
46139: PUSH
46140: LD_INT 12
46142: PUSH
46143: LD_INT 15
46145: PUSH
46146: LD_INT 11
46148: PUSH
46149: LD_INT 14
46151: PUSH
46152: LD_INT 10
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: IN
46166: IFFALSE 46176
// btype = b_lab ;
46168: LD_ADDR_VAR 0 1
46172: PUSH
46173: LD_INT 6
46175: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46176: LD_VAR 0 6
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: IN
46195: NOT
46196: PUSH
46197: LD_VAR 0 1
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: LD_INT 6
46216: PUSH
46217: LD_INT 36
46219: PUSH
46220: LD_INT 4
46222: PUSH
46223: LD_INT 5
46225: PUSH
46226: LD_INT 31
46228: PUSH
46229: LD_INT 32
46231: PUSH
46232: LD_INT 33
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: IN
46248: NOT
46249: PUSH
46250: LD_VAR 0 6
46254: PUSH
46255: LD_INT 1
46257: EQUAL
46258: AND
46259: OR
46260: PUSH
46261: LD_VAR 0 1
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: IN
46276: NOT
46277: PUSH
46278: LD_VAR 0 6
46282: PUSH
46283: LD_INT 2
46285: EQUAL
46286: AND
46287: OR
46288: IFFALSE 46298
// mode = 0 ;
46290: LD_ADDR_VAR 0 6
46294: PUSH
46295: LD_INT 0
46297: ST_TO_ADDR
// case mode of 0 :
46298: LD_VAR 0 6
46302: PUSH
46303: LD_INT 0
46305: DOUBLE
46306: EQUAL
46307: IFTRUE 46311
46309: GO 57764
46311: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46312: LD_ADDR_VAR 0 11
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 3
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46505: LD_ADDR_VAR 0 12
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46701: LD_ADDR_VAR 0 13
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46900: LD_ADDR_VAR 0 14
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47096: LD_ADDR_VAR 0 15
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 3
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47289: LD_ADDR_VAR 0 16
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47482: LD_ADDR_VAR 0 17
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47712: LD_ADDR_VAR 0 18
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47942: LD_ADDR_VAR 0 19
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 20
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48402: LD_ADDR_VAR 0 21
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48632: LD_ADDR_VAR 0 22
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48862: LD_ADDR_VAR 0 23
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49142: LD_ADDR_VAR 0 24
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49418: LD_ADDR_VAR 0 25
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 3
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49692: LD_ADDR_VAR 0 26
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49968: LD_ADDR_VAR 0 27
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50248: LD_ADDR_VAR 0 28
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50530: LD_ADDR_VAR 0 29
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50809: LD_ADDR_VAR 0 30
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51087: LD_ADDR_VAR 0 31
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51365: LD_ADDR_VAR 0 32
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51643: LD_ADDR_VAR 0 33
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51922: LD_ADDR_VAR 0 34
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52202: LD_ADDR_VAR 0 35
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52314: LD_ADDR_VAR 0 36
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52426: LD_ADDR_VAR 0 37
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52538: LD_ADDR_VAR 0 38
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52650: LD_ADDR_VAR 0 39
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52762: LD_ADDR_VAR 0 40
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52874: LD_ADDR_VAR 0 41
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53224: LD_ADDR_VAR 0 42
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 3
53521: NEG
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: LD_INT 3
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53574: LD_ADDR_VAR 0 43
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53922: LD_ADDR_VAR 0 44
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 3
54231: NEG
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54272: LD_ADDR_VAR 0 45
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: NEG
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54622: LD_ADDR_VAR 0 46
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 3
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 3
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54970: LD_ADDR_VAR 0 47
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55121: LD_ADDR_VAR 0 48
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55268: LD_ADDR_VAR 0 49
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55412: LD_ADDR_VAR 0 50
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55556: LD_ADDR_VAR 0 51
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55703: LD_ADDR_VAR 0 52
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55854: LD_ADDR_VAR 0 53
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56084: LD_ADDR_VAR 0 54
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56314: LD_ADDR_VAR 0 55
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56544: LD_ADDR_VAR 0 56
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56774: LD_ADDR_VAR 0 57
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57004: LD_ADDR_VAR 0 58
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57234: LD_ADDR_VAR 0 59
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57322: LD_ADDR_VAR 0 60
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57410: LD_ADDR_VAR 0 61
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57498: LD_ADDR_VAR 0 62
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57586: LD_ADDR_VAR 0 63
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57674: LD_ADDR_VAR 0 64
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: ST_TO_ADDR
// end ; 1 :
57762: GO 63659
57764: LD_INT 1
57766: DOUBLE
57767: EQUAL
57768: IFTRUE 57772
57770: GO 60395
57772: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57773: LD_ADDR_VAR 0 11
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57817: LD_ADDR_VAR 0 12
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57858: LD_ADDR_VAR 0 13
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57898: LD_ADDR_VAR 0 14
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57939: LD_ADDR_VAR 0 15
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57983: LD_ADDR_VAR 0 16
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58029: LD_ADDR_VAR 0 17
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58073: LD_ADDR_VAR 0 18
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58114: LD_ADDR_VAR 0 19
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58154: LD_ADDR_VAR 0 20
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58195: LD_ADDR_VAR 0 21
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58239: LD_ADDR_VAR 0 22
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58285: LD_ADDR_VAR 0 23
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 4
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58329: LD_ADDR_VAR 0 24
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58370: LD_ADDR_VAR 0 25
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58410: LD_ADDR_VAR 0 26
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 4
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58451: LD_ADDR_VAR 0 27
58455: PUSH
58456: LD_INT 3
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58495: LD_ADDR_VAR 0 28
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58541: LD_ADDR_VAR 0 29
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 4
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 5
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 6
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 6
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 5
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58696: LD_ADDR_VAR 0 30
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 4
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 4
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 5
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 6
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 6
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58839: LD_ADDR_VAR 0 31
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 4
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: LD_INT 4
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 4
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 5
58906: PUSH
58907: LD_INT 4
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 5
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: LD_INT 5
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 6
58936: PUSH
58937: LD_INT 5
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 6
58946: PUSH
58947: LD_INT 6
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 5
58956: PUSH
58957: LD_INT 6
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58978: LD_ADDR_VAR 0 32
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 3
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 5
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 4
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 6
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 6
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 5
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59121: LD_ADDR_VAR 0 33
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 4
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: NEG
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 5
59207: NEG
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 5
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 5
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 6
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 6
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59276: LD_ADDR_VAR 0 34
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 4
59343: NEG
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 5
59367: NEG
59368: PUSH
59369: LD_INT 4
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 5
59379: NEG
59380: PUSH
59381: LD_INT 5
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 5
59391: NEG
59392: PUSH
59393: LD_INT 6
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 6
59403: NEG
59404: PUSH
59405: LD_INT 5
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 6
59415: NEG
59416: PUSH
59417: LD_INT 6
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59439: LD_ADDR_VAR 0 41
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59483: LD_ADDR_VAR 0 42
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 3
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59524: LD_ADDR_VAR 0 43
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59564: LD_ADDR_VAR 0 44
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59605: LD_ADDR_VAR 0 45
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59649: LD_ADDR_VAR 0 46
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59695: LD_ADDR_VAR 0 47
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 3
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 3
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59728: LD_ADDR_VAR 0 48
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59759: LD_ADDR_VAR 0 49
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59788: LD_ADDR_VAR 0 50
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59817: LD_ADDR_VAR 0 51
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59848: LD_ADDR_VAR 0 52
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59881: LD_ADDR_VAR 0 53
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59925: LD_ADDR_VAR 0 54
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59966: LD_ADDR_VAR 0 55
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60006: LD_ADDR_VAR 0 56
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60047: LD_ADDR_VAR 0 57
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: NEG
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60091: LD_ADDR_VAR 0 58
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60137: LD_ADDR_VAR 0 59
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60181: LD_ADDR_VAR 0 60
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: LIST
60221: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60222: LD_ADDR_VAR 0 61
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60262: LD_ADDR_VAR 0 62
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60303: LD_ADDR_VAR 0 63
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60347: LD_ADDR_VAR 0 64
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: ST_TO_ADDR
// end ; 2 :
60393: GO 63659
60395: LD_INT 2
60397: DOUBLE
60398: EQUAL
60399: IFTRUE 60403
60401: GO 63658
60403: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60404: LD_ADDR_VAR 0 29
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 4
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 4
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 5
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 5
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 3
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 4
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: LD_INT 4
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: LD_INT 5
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 4
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 5
60849: NEG
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 5
60861: NEG
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 5
60885: NEG
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60942: LD_ADDR_VAR 0 30
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: LD_INT 4
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 5
60969: PUSH
60970: LD_INT 4
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 5
60979: PUSH
60980: LD_INT 5
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: LD_INT 5
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 5
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 5
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 4
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 4
61132: NEG
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 4
61143: NEG
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 4
61177: NEG
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 5
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 5
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: NEG
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 3
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 4
61306: NEG
61307: PUSH
61308: LD_INT 4
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 4
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 4
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 5
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 4
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 3
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: LD_INT 5
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 5
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61489: LD_ADDR_VAR 0 31
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 4
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 5
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 4
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 4
61668: NEG
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 4
61691: NEG
61692: PUSH
61693: LD_INT 4
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 4
61703: NEG
61704: PUSH
61705: LD_INT 5
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: LD_INT 4
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 5
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 4
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 4
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 4
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 4
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 4
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 5
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 5
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62039: LD_ADDR_VAR 0 32
62043: PUSH
62044: LD_INT 4
62046: NEG
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 5
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 5
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 5
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 4
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 5
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 5
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 5
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 4
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 4
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 4
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 5
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: LD_INT 5
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: LD_INT 5
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 5
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 5
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62586: LD_ADDR_VAR 0 33
62590: PUSH
62591: LD_INT 4
62593: NEG
62594: PUSH
62595: LD_INT 4
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: NEG
62606: PUSH
62607: LD_INT 5
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: LD_INT 4
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 4
62641: NEG
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 5
62653: NEG
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 5
62665: NEG
62666: PUSH
62667: LD_INT 5
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 3
62677: NEG
62678: PUSH
62679: LD_INT 5
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 5
62689: NEG
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 4
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 4
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: LD_INT 2
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 4
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 5
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: PUSH
62917: LD_INT 3
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: LD_INT 4
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 4
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: LD_INT 4
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 5
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 5
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: LD_INT 5
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63124: LD_ADDR_VAR 0 34
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 4
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 5
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 4
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: LD_INT 3
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 4
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: LD_INT 5
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 5
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 4
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 4
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 4
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 4
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 5
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 5
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 4
63366: PUSH
63367: LD_INT 5
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 3
63376: PUSH
63377: LD_INT 4
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 3
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 5
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: LD_INT 5
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 3
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: LD_INT 4
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: NEG
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 4
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: NEG
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 4
63554: NEG
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 5
63565: NEG
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 5
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 5
63588: NEG
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// end ; end ;
63656: GO 63659
63658: POP
// case btype of b_depot , b_warehouse :
63659: LD_VAR 0 1
63663: PUSH
63664: LD_INT 0
63666: DOUBLE
63667: EQUAL
63668: IFTRUE 63678
63670: LD_INT 1
63672: DOUBLE
63673: EQUAL
63674: IFTRUE 63678
63676: GO 63879
63678: POP
// case nation of nation_american :
63679: LD_VAR 0 5
63683: PUSH
63684: LD_INT 1
63686: DOUBLE
63687: EQUAL
63688: IFTRUE 63692
63690: GO 63748
63692: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63693: LD_ADDR_VAR 0 9
63697: PUSH
63698: LD_VAR 0 11
63702: PUSH
63703: LD_VAR 0 12
63707: PUSH
63708: LD_VAR 0 13
63712: PUSH
63713: LD_VAR 0 14
63717: PUSH
63718: LD_VAR 0 15
63722: PUSH
63723: LD_VAR 0 16
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: LD_VAR 0 4
63740: PUSH
63741: LD_INT 1
63743: PLUS
63744: ARRAY
63745: ST_TO_ADDR
63746: GO 63877
63748: LD_INT 2
63750: DOUBLE
63751: EQUAL
63752: IFTRUE 63756
63754: GO 63812
63756: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63757: LD_ADDR_VAR 0 9
63761: PUSH
63762: LD_VAR 0 17
63766: PUSH
63767: LD_VAR 0 18
63771: PUSH
63772: LD_VAR 0 19
63776: PUSH
63777: LD_VAR 0 20
63781: PUSH
63782: LD_VAR 0 21
63786: PUSH
63787: LD_VAR 0 22
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: PUSH
63800: LD_VAR 0 4
63804: PUSH
63805: LD_INT 1
63807: PLUS
63808: ARRAY
63809: ST_TO_ADDR
63810: GO 63877
63812: LD_INT 3
63814: DOUBLE
63815: EQUAL
63816: IFTRUE 63820
63818: GO 63876
63820: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63821: LD_ADDR_VAR 0 9
63825: PUSH
63826: LD_VAR 0 23
63830: PUSH
63831: LD_VAR 0 24
63835: PUSH
63836: LD_VAR 0 25
63840: PUSH
63841: LD_VAR 0 26
63845: PUSH
63846: LD_VAR 0 27
63850: PUSH
63851: LD_VAR 0 28
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 4
63868: PUSH
63869: LD_INT 1
63871: PLUS
63872: ARRAY
63873: ST_TO_ADDR
63874: GO 63877
63876: POP
63877: GO 64432
63879: LD_INT 2
63881: DOUBLE
63882: EQUAL
63883: IFTRUE 63893
63885: LD_INT 3
63887: DOUBLE
63888: EQUAL
63889: IFTRUE 63893
63891: GO 63949
63893: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63894: LD_ADDR_VAR 0 9
63898: PUSH
63899: LD_VAR 0 29
63903: PUSH
63904: LD_VAR 0 30
63908: PUSH
63909: LD_VAR 0 31
63913: PUSH
63914: LD_VAR 0 32
63918: PUSH
63919: LD_VAR 0 33
63923: PUSH
63924: LD_VAR 0 34
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: LD_VAR 0 4
63941: PUSH
63942: LD_INT 1
63944: PLUS
63945: ARRAY
63946: ST_TO_ADDR
63947: GO 64432
63949: LD_INT 16
63951: DOUBLE
63952: EQUAL
63953: IFTRUE 64011
63955: LD_INT 17
63957: DOUBLE
63958: EQUAL
63959: IFTRUE 64011
63961: LD_INT 18
63963: DOUBLE
63964: EQUAL
63965: IFTRUE 64011
63967: LD_INT 19
63969: DOUBLE
63970: EQUAL
63971: IFTRUE 64011
63973: LD_INT 22
63975: DOUBLE
63976: EQUAL
63977: IFTRUE 64011
63979: LD_INT 20
63981: DOUBLE
63982: EQUAL
63983: IFTRUE 64011
63985: LD_INT 21
63987: DOUBLE
63988: EQUAL
63989: IFTRUE 64011
63991: LD_INT 23
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 64011
63997: LD_INT 24
63999: DOUBLE
64000: EQUAL
64001: IFTRUE 64011
64003: LD_INT 25
64005: DOUBLE
64006: EQUAL
64007: IFTRUE 64011
64009: GO 64067
64011: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64012: LD_ADDR_VAR 0 9
64016: PUSH
64017: LD_VAR 0 35
64021: PUSH
64022: LD_VAR 0 36
64026: PUSH
64027: LD_VAR 0 37
64031: PUSH
64032: LD_VAR 0 38
64036: PUSH
64037: LD_VAR 0 39
64041: PUSH
64042: LD_VAR 0 40
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: PUSH
64055: LD_VAR 0 4
64059: PUSH
64060: LD_INT 1
64062: PLUS
64063: ARRAY
64064: ST_TO_ADDR
64065: GO 64432
64067: LD_INT 6
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64123
64073: LD_INT 7
64075: DOUBLE
64076: EQUAL
64077: IFTRUE 64123
64079: LD_INT 8
64081: DOUBLE
64082: EQUAL
64083: IFTRUE 64123
64085: LD_INT 13
64087: DOUBLE
64088: EQUAL
64089: IFTRUE 64123
64091: LD_INT 12
64093: DOUBLE
64094: EQUAL
64095: IFTRUE 64123
64097: LD_INT 15
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64123
64103: LD_INT 11
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64123
64109: LD_INT 14
64111: DOUBLE
64112: EQUAL
64113: IFTRUE 64123
64115: LD_INT 10
64117: DOUBLE
64118: EQUAL
64119: IFTRUE 64123
64121: GO 64179
64123: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64124: LD_ADDR_VAR 0 9
64128: PUSH
64129: LD_VAR 0 41
64133: PUSH
64134: LD_VAR 0 42
64138: PUSH
64139: LD_VAR 0 43
64143: PUSH
64144: LD_VAR 0 44
64148: PUSH
64149: LD_VAR 0 45
64153: PUSH
64154: LD_VAR 0 46
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 4
64171: PUSH
64172: LD_INT 1
64174: PLUS
64175: ARRAY
64176: ST_TO_ADDR
64177: GO 64432
64179: LD_INT 36
64181: DOUBLE
64182: EQUAL
64183: IFTRUE 64187
64185: GO 64243
64187: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64188: LD_ADDR_VAR 0 9
64192: PUSH
64193: LD_VAR 0 47
64197: PUSH
64198: LD_VAR 0 48
64202: PUSH
64203: LD_VAR 0 49
64207: PUSH
64208: LD_VAR 0 50
64212: PUSH
64213: LD_VAR 0 51
64217: PUSH
64218: LD_VAR 0 52
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: PUSH
64231: LD_VAR 0 4
64235: PUSH
64236: LD_INT 1
64238: PLUS
64239: ARRAY
64240: ST_TO_ADDR
64241: GO 64432
64243: LD_INT 4
64245: DOUBLE
64246: EQUAL
64247: IFTRUE 64269
64249: LD_INT 5
64251: DOUBLE
64252: EQUAL
64253: IFTRUE 64269
64255: LD_INT 34
64257: DOUBLE
64258: EQUAL
64259: IFTRUE 64269
64261: LD_INT 37
64263: DOUBLE
64264: EQUAL
64265: IFTRUE 64269
64267: GO 64325
64269: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64270: LD_ADDR_VAR 0 9
64274: PUSH
64275: LD_VAR 0 53
64279: PUSH
64280: LD_VAR 0 54
64284: PUSH
64285: LD_VAR 0 55
64289: PUSH
64290: LD_VAR 0 56
64294: PUSH
64295: LD_VAR 0 57
64299: PUSH
64300: LD_VAR 0 58
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: PUSH
64313: LD_VAR 0 4
64317: PUSH
64318: LD_INT 1
64320: PLUS
64321: ARRAY
64322: ST_TO_ADDR
64323: GO 64432
64325: LD_INT 31
64327: DOUBLE
64328: EQUAL
64329: IFTRUE 64375
64331: LD_INT 32
64333: DOUBLE
64334: EQUAL
64335: IFTRUE 64375
64337: LD_INT 33
64339: DOUBLE
64340: EQUAL
64341: IFTRUE 64375
64343: LD_INT 27
64345: DOUBLE
64346: EQUAL
64347: IFTRUE 64375
64349: LD_INT 26
64351: DOUBLE
64352: EQUAL
64353: IFTRUE 64375
64355: LD_INT 28
64357: DOUBLE
64358: EQUAL
64359: IFTRUE 64375
64361: LD_INT 29
64363: DOUBLE
64364: EQUAL
64365: IFTRUE 64375
64367: LD_INT 30
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64375
64373: GO 64431
64375: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64376: LD_ADDR_VAR 0 9
64380: PUSH
64381: LD_VAR 0 59
64385: PUSH
64386: LD_VAR 0 60
64390: PUSH
64391: LD_VAR 0 61
64395: PUSH
64396: LD_VAR 0 62
64400: PUSH
64401: LD_VAR 0 63
64405: PUSH
64406: LD_VAR 0 64
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 4
64423: PUSH
64424: LD_INT 1
64426: PLUS
64427: ARRAY
64428: ST_TO_ADDR
64429: GO 64432
64431: POP
// temp_list2 = [ ] ;
64432: LD_ADDR_VAR 0 10
64436: PUSH
64437: EMPTY
64438: ST_TO_ADDR
// for i in temp_list do
64439: LD_ADDR_VAR 0 8
64443: PUSH
64444: LD_VAR 0 9
64448: PUSH
64449: FOR_IN
64450: IFFALSE 64502
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64452: LD_ADDR_VAR 0 10
64456: PUSH
64457: LD_VAR 0 10
64461: PUSH
64462: LD_VAR 0 8
64466: PUSH
64467: LD_INT 1
64469: ARRAY
64470: PUSH
64471: LD_VAR 0 2
64475: PLUS
64476: PUSH
64477: LD_VAR 0 8
64481: PUSH
64482: LD_INT 2
64484: ARRAY
64485: PUSH
64486: LD_VAR 0 3
64490: PLUS
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: ADD
64499: ST_TO_ADDR
64500: GO 64449
64502: POP
64503: POP
// result = temp_list2 ;
64504: LD_ADDR_VAR 0 7
64508: PUSH
64509: LD_VAR 0 10
64513: ST_TO_ADDR
// end ;
64514: LD_VAR 0 7
64518: RET
// export function EnemyInRange ( unit , dist ) ; begin
64519: LD_INT 0
64521: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64522: LD_ADDR_VAR 0 3
64526: PUSH
64527: LD_VAR 0 1
64531: PPUSH
64532: CALL_OW 255
64536: PPUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 250
64546: PPUSH
64547: LD_VAR 0 1
64551: PPUSH
64552: CALL_OW 251
64556: PPUSH
64557: LD_VAR 0 2
64561: PPUSH
64562: CALL 37892 0 4
64566: PUSH
64567: LD_INT 4
64569: ARRAY
64570: ST_TO_ADDR
// end ;
64571: LD_VAR 0 3
64575: RET
// export function PlayerSeeMe ( unit ) ; begin
64576: LD_INT 0
64578: PPUSH
// result := See ( your_side , unit ) ;
64579: LD_ADDR_VAR 0 2
64583: PUSH
64584: LD_OWVAR 2
64588: PPUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 292
64598: ST_TO_ADDR
// end ;
64599: LD_VAR 0 2
64603: RET
// export function ReverseDir ( unit ) ; begin
64604: LD_INT 0
64606: PPUSH
// if not unit then
64607: LD_VAR 0 1
64611: NOT
64612: IFFALSE 64616
// exit ;
64614: GO 64639
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64616: LD_ADDR_VAR 0 2
64620: PUSH
64621: LD_VAR 0 1
64625: PPUSH
64626: CALL_OW 254
64630: PUSH
64631: LD_INT 3
64633: PLUS
64634: PUSH
64635: LD_INT 6
64637: MOD
64638: ST_TO_ADDR
// end ;
64639: LD_VAR 0 2
64643: RET
// export function ReverseArray ( array ) ; var i ; begin
64644: LD_INT 0
64646: PPUSH
64647: PPUSH
// if not array then
64648: LD_VAR 0 1
64652: NOT
64653: IFFALSE 64657
// exit ;
64655: GO 64712
// result := [ ] ;
64657: LD_ADDR_VAR 0 2
64661: PUSH
64662: EMPTY
64663: ST_TO_ADDR
// for i := array downto 1 do
64664: LD_ADDR_VAR 0 3
64668: PUSH
64669: DOUBLE
64670: LD_VAR 0 1
64674: INC
64675: ST_TO_ADDR
64676: LD_INT 1
64678: PUSH
64679: FOR_DOWNTO
64680: IFFALSE 64710
// result := Join ( result , array [ i ] ) ;
64682: LD_ADDR_VAR 0 2
64686: PUSH
64687: LD_VAR 0 2
64691: PPUSH
64692: LD_VAR 0 1
64696: PUSH
64697: LD_VAR 0 3
64701: ARRAY
64702: PPUSH
64703: CALL 69357 0 2
64707: ST_TO_ADDR
64708: GO 64679
64710: POP
64711: POP
// end ;
64712: LD_VAR 0 2
64716: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64717: LD_INT 0
64719: PPUSH
64720: PPUSH
64721: PPUSH
64722: PPUSH
64723: PPUSH
64724: PPUSH
// if not unit or not hexes then
64725: LD_VAR 0 1
64729: NOT
64730: PUSH
64731: LD_VAR 0 2
64735: NOT
64736: OR
64737: IFFALSE 64741
// exit ;
64739: GO 64864
// dist := 9999 ;
64741: LD_ADDR_VAR 0 5
64745: PUSH
64746: LD_INT 9999
64748: ST_TO_ADDR
// for i = 1 to hexes do
64749: LD_ADDR_VAR 0 4
64753: PUSH
64754: DOUBLE
64755: LD_INT 1
64757: DEC
64758: ST_TO_ADDR
64759: LD_VAR 0 2
64763: PUSH
64764: FOR_TO
64765: IFFALSE 64852
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64767: LD_ADDR_VAR 0 6
64771: PUSH
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 2
64781: PUSH
64782: LD_VAR 0 4
64786: ARRAY
64787: PUSH
64788: LD_INT 1
64790: ARRAY
64791: PPUSH
64792: LD_VAR 0 2
64796: PUSH
64797: LD_VAR 0 4
64801: ARRAY
64802: PUSH
64803: LD_INT 2
64805: ARRAY
64806: PPUSH
64807: CALL_OW 297
64811: ST_TO_ADDR
// if tdist < dist then
64812: LD_VAR 0 6
64816: PUSH
64817: LD_VAR 0 5
64821: LESS
64822: IFFALSE 64850
// begin hex := hexes [ i ] ;
64824: LD_ADDR_VAR 0 8
64828: PUSH
64829: LD_VAR 0 2
64833: PUSH
64834: LD_VAR 0 4
64838: ARRAY
64839: ST_TO_ADDR
// dist := tdist ;
64840: LD_ADDR_VAR 0 5
64844: PUSH
64845: LD_VAR 0 6
64849: ST_TO_ADDR
// end ; end ;
64850: GO 64764
64852: POP
64853: POP
// result := hex ;
64854: LD_ADDR_VAR 0 3
64858: PUSH
64859: LD_VAR 0 8
64863: ST_TO_ADDR
// end ;
64864: LD_VAR 0 3
64868: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64869: LD_INT 0
64871: PPUSH
64872: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64873: LD_VAR 0 1
64877: NOT
64878: PUSH
64879: LD_VAR 0 1
64883: PUSH
64884: LD_INT 21
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 23
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PPUSH
64908: CALL_OW 69
64912: IN
64913: NOT
64914: OR
64915: IFFALSE 64919
// exit ;
64917: GO 64966
// for i = 1 to 3 do
64919: LD_ADDR_VAR 0 3
64923: PUSH
64924: DOUBLE
64925: LD_INT 1
64927: DEC
64928: ST_TO_ADDR
64929: LD_INT 3
64931: PUSH
64932: FOR_TO
64933: IFFALSE 64964
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64935: LD_VAR 0 1
64939: PPUSH
64940: CALL_OW 250
64944: PPUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: CALL_OW 251
64954: PPUSH
64955: LD_INT 1
64957: PPUSH
64958: CALL_OW 453
64962: GO 64932
64964: POP
64965: POP
// end ;
64966: LD_VAR 0 2
64970: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64971: LD_INT 0
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
64977: PPUSH
64978: PPUSH
// if not unit or not enemy_unit then
64979: LD_VAR 0 1
64983: NOT
64984: PUSH
64985: LD_VAR 0 2
64989: NOT
64990: OR
64991: IFFALSE 64995
// exit ;
64993: GO 65462
// if GetLives ( i ) < 250 then
64995: LD_VAR 0 4
64999: PPUSH
65000: CALL_OW 256
65004: PUSH
65005: LD_INT 250
65007: LESS
65008: IFFALSE 65021
// begin ComAutodestruct ( i ) ;
65010: LD_VAR 0 4
65014: PPUSH
65015: CALL 64869 0 1
// exit ;
65019: GO 65462
// end ; x := GetX ( enemy_unit ) ;
65021: LD_ADDR_VAR 0 7
65025: PUSH
65026: LD_VAR 0 2
65030: PPUSH
65031: CALL_OW 250
65035: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65036: LD_ADDR_VAR 0 8
65040: PUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: CALL_OW 251
65050: ST_TO_ADDR
// if not x or not y then
65051: LD_VAR 0 7
65055: NOT
65056: PUSH
65057: LD_VAR 0 8
65061: NOT
65062: OR
65063: IFFALSE 65067
// exit ;
65065: GO 65462
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65067: LD_ADDR_VAR 0 6
65071: PUSH
65072: LD_VAR 0 7
65076: PPUSH
65077: LD_INT 0
65079: PPUSH
65080: LD_INT 4
65082: PPUSH
65083: CALL_OW 272
65087: PUSH
65088: LD_VAR 0 8
65092: PPUSH
65093: LD_INT 0
65095: PPUSH
65096: LD_INT 4
65098: PPUSH
65099: CALL_OW 273
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_VAR 0 7
65112: PPUSH
65113: LD_INT 1
65115: PPUSH
65116: LD_INT 4
65118: PPUSH
65119: CALL_OW 272
65123: PUSH
65124: LD_VAR 0 8
65128: PPUSH
65129: LD_INT 1
65131: PPUSH
65132: LD_INT 4
65134: PPUSH
65135: CALL_OW 273
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_VAR 0 7
65148: PPUSH
65149: LD_INT 2
65151: PPUSH
65152: LD_INT 4
65154: PPUSH
65155: CALL_OW 272
65159: PUSH
65160: LD_VAR 0 8
65164: PPUSH
65165: LD_INT 2
65167: PPUSH
65168: LD_INT 4
65170: PPUSH
65171: CALL_OW 273
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_VAR 0 7
65184: PPUSH
65185: LD_INT 3
65187: PPUSH
65188: LD_INT 4
65190: PPUSH
65191: CALL_OW 272
65195: PUSH
65196: LD_VAR 0 8
65200: PPUSH
65201: LD_INT 3
65203: PPUSH
65204: LD_INT 4
65206: PPUSH
65207: CALL_OW 273
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_VAR 0 7
65220: PPUSH
65221: LD_INT 4
65223: PPUSH
65224: LD_INT 4
65226: PPUSH
65227: CALL_OW 272
65231: PUSH
65232: LD_VAR 0 8
65236: PPUSH
65237: LD_INT 4
65239: PPUSH
65240: LD_INT 4
65242: PPUSH
65243: CALL_OW 273
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_VAR 0 7
65256: PPUSH
65257: LD_INT 5
65259: PPUSH
65260: LD_INT 4
65262: PPUSH
65263: CALL_OW 272
65267: PUSH
65268: LD_VAR 0 8
65272: PPUSH
65273: LD_INT 5
65275: PPUSH
65276: LD_INT 4
65278: PPUSH
65279: CALL_OW 273
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// for i = tmp downto 1 do
65296: LD_ADDR_VAR 0 4
65300: PUSH
65301: DOUBLE
65302: LD_VAR 0 6
65306: INC
65307: ST_TO_ADDR
65308: LD_INT 1
65310: PUSH
65311: FOR_DOWNTO
65312: IFFALSE 65413
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65314: LD_VAR 0 6
65318: PUSH
65319: LD_VAR 0 4
65323: ARRAY
65324: PUSH
65325: LD_INT 1
65327: ARRAY
65328: PPUSH
65329: LD_VAR 0 6
65333: PUSH
65334: LD_VAR 0 4
65338: ARRAY
65339: PUSH
65340: LD_INT 2
65342: ARRAY
65343: PPUSH
65344: CALL_OW 488
65348: NOT
65349: PUSH
65350: LD_VAR 0 6
65354: PUSH
65355: LD_VAR 0 4
65359: ARRAY
65360: PUSH
65361: LD_INT 1
65363: ARRAY
65364: PPUSH
65365: LD_VAR 0 6
65369: PUSH
65370: LD_VAR 0 4
65374: ARRAY
65375: PUSH
65376: LD_INT 2
65378: ARRAY
65379: PPUSH
65380: CALL_OW 428
65384: PUSH
65385: LD_INT 0
65387: NONEQUAL
65388: OR
65389: IFFALSE 65411
// tmp := Delete ( tmp , i ) ;
65391: LD_ADDR_VAR 0 6
65395: PUSH
65396: LD_VAR 0 6
65400: PPUSH
65401: LD_VAR 0 4
65405: PPUSH
65406: CALL_OW 3
65410: ST_TO_ADDR
65411: GO 65311
65413: POP
65414: POP
// j := GetClosestHex ( unit , tmp ) ;
65415: LD_ADDR_VAR 0 5
65419: PUSH
65420: LD_VAR 0 1
65424: PPUSH
65425: LD_VAR 0 6
65429: PPUSH
65430: CALL 64717 0 2
65434: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65435: LD_VAR 0 1
65439: PPUSH
65440: LD_VAR 0 5
65444: PUSH
65445: LD_INT 1
65447: ARRAY
65448: PPUSH
65449: LD_VAR 0 5
65453: PUSH
65454: LD_INT 2
65456: ARRAY
65457: PPUSH
65458: CALL_OW 111
// end ;
65462: LD_VAR 0 3
65466: RET
// export function PrepareApemanSoldier ( ) ; begin
65467: LD_INT 0
65469: PPUSH
// uc_nation := 0 ;
65470: LD_ADDR_OWVAR 21
65474: PUSH
65475: LD_INT 0
65477: ST_TO_ADDR
// hc_sex := sex_male ;
65478: LD_ADDR_OWVAR 27
65482: PUSH
65483: LD_INT 1
65485: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65486: LD_ADDR_OWVAR 28
65490: PUSH
65491: LD_INT 15
65493: ST_TO_ADDR
// hc_gallery :=  ;
65494: LD_ADDR_OWVAR 33
65498: PUSH
65499: LD_STRING 
65501: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65502: LD_ADDR_OWVAR 31
65506: PUSH
65507: LD_INT 0
65509: PPUSH
65510: LD_INT 3
65512: PPUSH
65513: CALL_OW 12
65517: PUSH
65518: LD_INT 0
65520: PPUSH
65521: LD_INT 3
65523: PPUSH
65524: CALL_OW 12
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: ST_TO_ADDR
// end ;
65541: LD_VAR 0 1
65545: RET
// export function PrepareApemanEngineer ( ) ; begin
65546: LD_INT 0
65548: PPUSH
// uc_nation := 0 ;
65549: LD_ADDR_OWVAR 21
65553: PUSH
65554: LD_INT 0
65556: ST_TO_ADDR
// hc_sex := sex_male ;
65557: LD_ADDR_OWVAR 27
65561: PUSH
65562: LD_INT 1
65564: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65565: LD_ADDR_OWVAR 28
65569: PUSH
65570: LD_INT 16
65572: ST_TO_ADDR
// hc_gallery :=  ;
65573: LD_ADDR_OWVAR 33
65577: PUSH
65578: LD_STRING 
65580: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65581: LD_ADDR_OWVAR 31
65585: PUSH
65586: LD_INT 0
65588: PPUSH
65589: LD_INT 3
65591: PPUSH
65592: CALL_OW 12
65596: PUSH
65597: LD_INT 0
65599: PPUSH
65600: LD_INT 3
65602: PPUSH
65603: CALL_OW 12
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: ST_TO_ADDR
// end ;
65620: LD_VAR 0 1
65624: RET
// export function PrepareApeman ( agressivity ) ; begin
65625: LD_INT 0
65627: PPUSH
// uc_side := 0 ;
65628: LD_ADDR_OWVAR 20
65632: PUSH
65633: LD_INT 0
65635: ST_TO_ADDR
// uc_nation := 0 ;
65636: LD_ADDR_OWVAR 21
65640: PUSH
65641: LD_INT 0
65643: ST_TO_ADDR
// hc_sex := sex_male ;
65644: LD_ADDR_OWVAR 27
65648: PUSH
65649: LD_INT 1
65651: ST_TO_ADDR
// hc_class := class_apeman ;
65652: LD_ADDR_OWVAR 28
65656: PUSH
65657: LD_INT 12
65659: ST_TO_ADDR
// hc_gallery :=  ;
65660: LD_ADDR_OWVAR 33
65664: PUSH
65665: LD_STRING 
65667: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65668: LD_ADDR_OWVAR 35
65672: PUSH
65673: LD_VAR 0 1
65677: NEG
65678: PPUSH
65679: LD_VAR 0 1
65683: PPUSH
65684: CALL_OW 12
65688: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65689: LD_ADDR_OWVAR 31
65693: PUSH
65694: LD_INT 0
65696: PPUSH
65697: LD_INT 3
65699: PPUSH
65700: CALL_OW 12
65704: PUSH
65705: LD_INT 0
65707: PPUSH
65708: LD_INT 3
65710: PPUSH
65711: CALL_OW 12
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 2
65732: RET
// export function PrepareTiger ( agressivity ) ; begin
65733: LD_INT 0
65735: PPUSH
// uc_side := 0 ;
65736: LD_ADDR_OWVAR 20
65740: PUSH
65741: LD_INT 0
65743: ST_TO_ADDR
// uc_nation := 0 ;
65744: LD_ADDR_OWVAR 21
65748: PUSH
65749: LD_INT 0
65751: ST_TO_ADDR
// hc_class := class_tiger ;
65752: LD_ADDR_OWVAR 28
65756: PUSH
65757: LD_INT 14
65759: ST_TO_ADDR
// hc_gallery :=  ;
65760: LD_ADDR_OWVAR 33
65764: PUSH
65765: LD_STRING 
65767: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65768: LD_ADDR_OWVAR 35
65772: PUSH
65773: LD_VAR 0 1
65777: NEG
65778: PPUSH
65779: LD_VAR 0 1
65783: PPUSH
65784: CALL_OW 12
65788: ST_TO_ADDR
// end ;
65789: LD_VAR 0 2
65793: RET
// export function PrepareEnchidna ( ) ; begin
65794: LD_INT 0
65796: PPUSH
// uc_side := 0 ;
65797: LD_ADDR_OWVAR 20
65801: PUSH
65802: LD_INT 0
65804: ST_TO_ADDR
// uc_nation := 0 ;
65805: LD_ADDR_OWVAR 21
65809: PUSH
65810: LD_INT 0
65812: ST_TO_ADDR
// hc_class := class_baggie ;
65813: LD_ADDR_OWVAR 28
65817: PUSH
65818: LD_INT 13
65820: ST_TO_ADDR
// hc_gallery :=  ;
65821: LD_ADDR_OWVAR 33
65825: PUSH
65826: LD_STRING 
65828: ST_TO_ADDR
// end ;
65829: LD_VAR 0 1
65833: RET
// export function PrepareFrog ( ) ; begin
65834: LD_INT 0
65836: PPUSH
// uc_side := 0 ;
65837: LD_ADDR_OWVAR 20
65841: PUSH
65842: LD_INT 0
65844: ST_TO_ADDR
// uc_nation := 0 ;
65845: LD_ADDR_OWVAR 21
65849: PUSH
65850: LD_INT 0
65852: ST_TO_ADDR
// hc_class := class_frog ;
65853: LD_ADDR_OWVAR 28
65857: PUSH
65858: LD_INT 19
65860: ST_TO_ADDR
// hc_gallery :=  ;
65861: LD_ADDR_OWVAR 33
65865: PUSH
65866: LD_STRING 
65868: ST_TO_ADDR
// end ;
65869: LD_VAR 0 1
65873: RET
// export function PrepareFish ( ) ; begin
65874: LD_INT 0
65876: PPUSH
// uc_side := 0 ;
65877: LD_ADDR_OWVAR 20
65881: PUSH
65882: LD_INT 0
65884: ST_TO_ADDR
// uc_nation := 0 ;
65885: LD_ADDR_OWVAR 21
65889: PUSH
65890: LD_INT 0
65892: ST_TO_ADDR
// hc_class := class_fish ;
65893: LD_ADDR_OWVAR 28
65897: PUSH
65898: LD_INT 20
65900: ST_TO_ADDR
// hc_gallery :=  ;
65901: LD_ADDR_OWVAR 33
65905: PUSH
65906: LD_STRING 
65908: ST_TO_ADDR
// end ;
65909: LD_VAR 0 1
65913: RET
// export function PrepareBird ( ) ; begin
65914: LD_INT 0
65916: PPUSH
// uc_side := 0 ;
65917: LD_ADDR_OWVAR 20
65921: PUSH
65922: LD_INT 0
65924: ST_TO_ADDR
// uc_nation := 0 ;
65925: LD_ADDR_OWVAR 21
65929: PUSH
65930: LD_INT 0
65932: ST_TO_ADDR
// hc_class := class_phororhacos ;
65933: LD_ADDR_OWVAR 28
65937: PUSH
65938: LD_INT 18
65940: ST_TO_ADDR
// hc_gallery :=  ;
65941: LD_ADDR_OWVAR 33
65945: PUSH
65946: LD_STRING 
65948: ST_TO_ADDR
// end ;
65949: LD_VAR 0 1
65953: RET
// export function PrepareHorse ( ) ; begin
65954: LD_INT 0
65956: PPUSH
// uc_side := 0 ;
65957: LD_ADDR_OWVAR 20
65961: PUSH
65962: LD_INT 0
65964: ST_TO_ADDR
// uc_nation := 0 ;
65965: LD_ADDR_OWVAR 21
65969: PUSH
65970: LD_INT 0
65972: ST_TO_ADDR
// hc_class := class_horse ;
65973: LD_ADDR_OWVAR 28
65977: PUSH
65978: LD_INT 21
65980: ST_TO_ADDR
// hc_gallery :=  ;
65981: LD_ADDR_OWVAR 33
65985: PUSH
65986: LD_STRING 
65988: ST_TO_ADDR
// end ;
65989: LD_VAR 0 1
65993: RET
// export function PrepareMastodont ( ) ; begin
65994: LD_INT 0
65996: PPUSH
// uc_side := 0 ;
65997: LD_ADDR_OWVAR 20
66001: PUSH
66002: LD_INT 0
66004: ST_TO_ADDR
// uc_nation := 0 ;
66005: LD_ADDR_OWVAR 21
66009: PUSH
66010: LD_INT 0
66012: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66013: LD_ADDR_OWVAR 37
66017: PUSH
66018: LD_INT 31
66020: ST_TO_ADDR
// vc_control := control_rider ;
66021: LD_ADDR_OWVAR 38
66025: PUSH
66026: LD_INT 4
66028: ST_TO_ADDR
// end ;
66029: LD_VAR 0 1
66033: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66034: LD_INT 0
66036: PPUSH
66037: PPUSH
66038: PPUSH
// uc_side = 0 ;
66039: LD_ADDR_OWVAR 20
66043: PUSH
66044: LD_INT 0
66046: ST_TO_ADDR
// uc_nation = 0 ;
66047: LD_ADDR_OWVAR 21
66051: PUSH
66052: LD_INT 0
66054: ST_TO_ADDR
// InitHc_All ( ) ;
66055: CALL_OW 584
// InitVc ;
66059: CALL_OW 20
// if mastodonts then
66063: LD_VAR 0 6
66067: IFFALSE 66134
// for i = 1 to mastodonts do
66069: LD_ADDR_VAR 0 11
66073: PUSH
66074: DOUBLE
66075: LD_INT 1
66077: DEC
66078: ST_TO_ADDR
66079: LD_VAR 0 6
66083: PUSH
66084: FOR_TO
66085: IFFALSE 66132
// begin vc_chassis := 31 ;
66087: LD_ADDR_OWVAR 37
66091: PUSH
66092: LD_INT 31
66094: ST_TO_ADDR
// vc_control := control_rider ;
66095: LD_ADDR_OWVAR 38
66099: PUSH
66100: LD_INT 4
66102: ST_TO_ADDR
// animal := CreateVehicle ;
66103: LD_ADDR_VAR 0 12
66107: PUSH
66108: CALL_OW 45
66112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66113: LD_VAR 0 12
66117: PPUSH
66118: LD_VAR 0 8
66122: PPUSH
66123: LD_INT 0
66125: PPUSH
66126: CALL 68262 0 3
// end ;
66130: GO 66084
66132: POP
66133: POP
// if horses then
66134: LD_VAR 0 5
66138: IFFALSE 66205
// for i = 1 to horses do
66140: LD_ADDR_VAR 0 11
66144: PUSH
66145: DOUBLE
66146: LD_INT 1
66148: DEC
66149: ST_TO_ADDR
66150: LD_VAR 0 5
66154: PUSH
66155: FOR_TO
66156: IFFALSE 66203
// begin hc_class := 21 ;
66158: LD_ADDR_OWVAR 28
66162: PUSH
66163: LD_INT 21
66165: ST_TO_ADDR
// hc_gallery :=  ;
66166: LD_ADDR_OWVAR 33
66170: PUSH
66171: LD_STRING 
66173: ST_TO_ADDR
// animal := CreateHuman ;
66174: LD_ADDR_VAR 0 12
66178: PUSH
66179: CALL_OW 44
66183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66184: LD_VAR 0 12
66188: PPUSH
66189: LD_VAR 0 8
66193: PPUSH
66194: LD_INT 0
66196: PPUSH
66197: CALL 68262 0 3
// end ;
66201: GO 66155
66203: POP
66204: POP
// if birds then
66205: LD_VAR 0 1
66209: IFFALSE 66276
// for i = 1 to birds do
66211: LD_ADDR_VAR 0 11
66215: PUSH
66216: DOUBLE
66217: LD_INT 1
66219: DEC
66220: ST_TO_ADDR
66221: LD_VAR 0 1
66225: PUSH
66226: FOR_TO
66227: IFFALSE 66274
// begin hc_class := 18 ;
66229: LD_ADDR_OWVAR 28
66233: PUSH
66234: LD_INT 18
66236: ST_TO_ADDR
// hc_gallery =  ;
66237: LD_ADDR_OWVAR 33
66241: PUSH
66242: LD_STRING 
66244: ST_TO_ADDR
// animal := CreateHuman ;
66245: LD_ADDR_VAR 0 12
66249: PUSH
66250: CALL_OW 44
66254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66255: LD_VAR 0 12
66259: PPUSH
66260: LD_VAR 0 8
66264: PPUSH
66265: LD_INT 0
66267: PPUSH
66268: CALL 68262 0 3
// end ;
66272: GO 66226
66274: POP
66275: POP
// if tigers then
66276: LD_VAR 0 2
66280: IFFALSE 66364
// for i = 1 to tigers do
66282: LD_ADDR_VAR 0 11
66286: PUSH
66287: DOUBLE
66288: LD_INT 1
66290: DEC
66291: ST_TO_ADDR
66292: LD_VAR 0 2
66296: PUSH
66297: FOR_TO
66298: IFFALSE 66362
// begin hc_class = class_tiger ;
66300: LD_ADDR_OWVAR 28
66304: PUSH
66305: LD_INT 14
66307: ST_TO_ADDR
// hc_gallery =  ;
66308: LD_ADDR_OWVAR 33
66312: PUSH
66313: LD_STRING 
66315: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66316: LD_ADDR_OWVAR 35
66320: PUSH
66321: LD_INT 7
66323: NEG
66324: PPUSH
66325: LD_INT 7
66327: PPUSH
66328: CALL_OW 12
66332: ST_TO_ADDR
// animal := CreateHuman ;
66333: LD_ADDR_VAR 0 12
66337: PUSH
66338: CALL_OW 44
66342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66343: LD_VAR 0 12
66347: PPUSH
66348: LD_VAR 0 8
66352: PPUSH
66353: LD_INT 0
66355: PPUSH
66356: CALL 68262 0 3
// end ;
66360: GO 66297
66362: POP
66363: POP
// if apemans then
66364: LD_VAR 0 3
66368: IFFALSE 66491
// for i = 1 to apemans do
66370: LD_ADDR_VAR 0 11
66374: PUSH
66375: DOUBLE
66376: LD_INT 1
66378: DEC
66379: ST_TO_ADDR
66380: LD_VAR 0 3
66384: PUSH
66385: FOR_TO
66386: IFFALSE 66489
// begin hc_class = class_apeman ;
66388: LD_ADDR_OWVAR 28
66392: PUSH
66393: LD_INT 12
66395: ST_TO_ADDR
// hc_gallery =  ;
66396: LD_ADDR_OWVAR 33
66400: PUSH
66401: LD_STRING 
66403: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66404: LD_ADDR_OWVAR 35
66408: PUSH
66409: LD_INT 2
66411: NEG
66412: PPUSH
66413: LD_INT 2
66415: PPUSH
66416: CALL_OW 12
66420: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66421: LD_ADDR_OWVAR 31
66425: PUSH
66426: LD_INT 1
66428: PPUSH
66429: LD_INT 3
66431: PPUSH
66432: CALL_OW 12
66436: PUSH
66437: LD_INT 1
66439: PPUSH
66440: LD_INT 3
66442: PPUSH
66443: CALL_OW 12
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// animal := CreateHuman ;
66460: LD_ADDR_VAR 0 12
66464: PUSH
66465: CALL_OW 44
66469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66470: LD_VAR 0 12
66474: PPUSH
66475: LD_VAR 0 8
66479: PPUSH
66480: LD_INT 0
66482: PPUSH
66483: CALL 68262 0 3
// end ;
66487: GO 66385
66489: POP
66490: POP
// if enchidnas then
66491: LD_VAR 0 4
66495: IFFALSE 66562
// for i = 1 to enchidnas do
66497: LD_ADDR_VAR 0 11
66501: PUSH
66502: DOUBLE
66503: LD_INT 1
66505: DEC
66506: ST_TO_ADDR
66507: LD_VAR 0 4
66511: PUSH
66512: FOR_TO
66513: IFFALSE 66560
// begin hc_class = 13 ;
66515: LD_ADDR_OWVAR 28
66519: PUSH
66520: LD_INT 13
66522: ST_TO_ADDR
// hc_gallery =  ;
66523: LD_ADDR_OWVAR 33
66527: PUSH
66528: LD_STRING 
66530: ST_TO_ADDR
// animal := CreateHuman ;
66531: LD_ADDR_VAR 0 12
66535: PUSH
66536: CALL_OW 44
66540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66541: LD_VAR 0 12
66545: PPUSH
66546: LD_VAR 0 8
66550: PPUSH
66551: LD_INT 0
66553: PPUSH
66554: CALL 68262 0 3
// end ;
66558: GO 66512
66560: POP
66561: POP
// if fishes then
66562: LD_VAR 0 7
66566: IFFALSE 66633
// for i = 1 to fishes do
66568: LD_ADDR_VAR 0 11
66572: PUSH
66573: DOUBLE
66574: LD_INT 1
66576: DEC
66577: ST_TO_ADDR
66578: LD_VAR 0 7
66582: PUSH
66583: FOR_TO
66584: IFFALSE 66631
// begin hc_class = 20 ;
66586: LD_ADDR_OWVAR 28
66590: PUSH
66591: LD_INT 20
66593: ST_TO_ADDR
// hc_gallery =  ;
66594: LD_ADDR_OWVAR 33
66598: PUSH
66599: LD_STRING 
66601: ST_TO_ADDR
// animal := CreateHuman ;
66602: LD_ADDR_VAR 0 12
66606: PUSH
66607: CALL_OW 44
66611: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66612: LD_VAR 0 12
66616: PPUSH
66617: LD_VAR 0 9
66621: PPUSH
66622: LD_INT 0
66624: PPUSH
66625: CALL 68262 0 3
// end ;
66629: GO 66583
66631: POP
66632: POP
// end ;
66633: LD_VAR 0 10
66637: RET
// export function WantHeal ( sci , unit ) ; begin
66638: LD_INT 0
66640: PPUSH
// if GetTaskList ( sci ) > 0 then
66641: LD_VAR 0 1
66645: PPUSH
66646: CALL_OW 437
66650: PUSH
66651: LD_INT 0
66653: GREATER
66654: IFFALSE 66724
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66656: LD_VAR 0 1
66660: PPUSH
66661: CALL_OW 437
66665: PUSH
66666: LD_INT 1
66668: ARRAY
66669: PUSH
66670: LD_INT 1
66672: ARRAY
66673: PUSH
66674: LD_STRING l
66676: EQUAL
66677: PUSH
66678: LD_VAR 0 1
66682: PPUSH
66683: CALL_OW 437
66687: PUSH
66688: LD_INT 1
66690: ARRAY
66691: PUSH
66692: LD_INT 4
66694: ARRAY
66695: PUSH
66696: LD_VAR 0 2
66700: EQUAL
66701: AND
66702: IFFALSE 66714
// result := true else
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_INT 1
66711: ST_TO_ADDR
66712: GO 66722
// result := false ;
66714: LD_ADDR_VAR 0 3
66718: PUSH
66719: LD_INT 0
66721: ST_TO_ADDR
// end else
66722: GO 66732
// result := false ;
66724: LD_ADDR_VAR 0 3
66728: PUSH
66729: LD_INT 0
66731: ST_TO_ADDR
// end ;
66732: LD_VAR 0 3
66736: RET
// export function HealTarget ( sci ) ; begin
66737: LD_INT 0
66739: PPUSH
// if not sci then
66740: LD_VAR 0 1
66744: NOT
66745: IFFALSE 66749
// exit ;
66747: GO 66814
// result := 0 ;
66749: LD_ADDR_VAR 0 2
66753: PUSH
66754: LD_INT 0
66756: ST_TO_ADDR
// if GetTaskList ( sci ) then
66757: LD_VAR 0 1
66761: PPUSH
66762: CALL_OW 437
66766: IFFALSE 66814
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL_OW 437
66777: PUSH
66778: LD_INT 1
66780: ARRAY
66781: PUSH
66782: LD_INT 1
66784: ARRAY
66785: PUSH
66786: LD_STRING l
66788: EQUAL
66789: IFFALSE 66814
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66791: LD_ADDR_VAR 0 2
66795: PUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: CALL_OW 437
66805: PUSH
66806: LD_INT 1
66808: ARRAY
66809: PUSH
66810: LD_INT 4
66812: ARRAY
66813: ST_TO_ADDR
// end ;
66814: LD_VAR 0 2
66818: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66819: LD_INT 0
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
// if not base_units then
66825: LD_VAR 0 1
66829: NOT
66830: IFFALSE 66834
// exit ;
66832: GO 66921
// result := false ;
66834: LD_ADDR_VAR 0 2
66838: PUSH
66839: LD_INT 0
66841: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66842: LD_ADDR_VAR 0 5
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: LD_INT 21
66854: PUSH
66855: LD_INT 3
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PPUSH
66862: CALL_OW 72
66866: ST_TO_ADDR
// if not tmp then
66867: LD_VAR 0 5
66871: NOT
66872: IFFALSE 66876
// exit ;
66874: GO 66921
// for i in tmp do
66876: LD_ADDR_VAR 0 3
66880: PUSH
66881: LD_VAR 0 5
66885: PUSH
66886: FOR_IN
66887: IFFALSE 66919
// begin result := EnemyInRange ( i , 22 ) ;
66889: LD_ADDR_VAR 0 2
66893: PUSH
66894: LD_VAR 0 3
66898: PPUSH
66899: LD_INT 22
66901: PPUSH
66902: CALL 64519 0 2
66906: ST_TO_ADDR
// if result then
66907: LD_VAR 0 2
66911: IFFALSE 66917
// exit ;
66913: POP
66914: POP
66915: GO 66921
// end ;
66917: GO 66886
66919: POP
66920: POP
// end ;
66921: LD_VAR 0 2
66925: RET
// export function FilterByTag ( units , tag ) ; begin
66926: LD_INT 0
66928: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: LD_INT 120
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PPUSH
66951: CALL_OW 72
66955: ST_TO_ADDR
// end ;
66956: LD_VAR 0 3
66960: RET
// export function IsDriver ( un ) ; begin
66961: LD_INT 0
66963: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66964: LD_ADDR_VAR 0 2
66968: PUSH
66969: LD_VAR 0 1
66973: PUSH
66974: LD_INT 55
66976: PUSH
66977: EMPTY
66978: LIST
66979: PPUSH
66980: CALL_OW 69
66984: IN
66985: ST_TO_ADDR
// end ;
66986: LD_VAR 0 2
66990: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66991: LD_INT 0
66993: PPUSH
66994: PPUSH
// list := [ ] ;
66995: LD_ADDR_VAR 0 5
66999: PUSH
67000: EMPTY
67001: ST_TO_ADDR
// case d of 0 :
67002: LD_VAR 0 3
67006: PUSH
67007: LD_INT 0
67009: DOUBLE
67010: EQUAL
67011: IFTRUE 67015
67013: GO 67148
67015: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67016: LD_ADDR_VAR 0 5
67020: PUSH
67021: LD_VAR 0 1
67025: PUSH
67026: LD_INT 4
67028: MINUS
67029: PUSH
67030: LD_VAR 0 2
67034: PUSH
67035: LD_INT 4
67037: MINUS
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: PUSH
67047: LD_VAR 0 1
67051: PUSH
67052: LD_INT 3
67054: MINUS
67055: PUSH
67056: LD_VAR 0 2
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: PUSH
67069: LD_VAR 0 1
67073: PUSH
67074: LD_INT 4
67076: PLUS
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: PUSH
67091: LD_VAR 0 1
67095: PUSH
67096: LD_INT 3
67098: PLUS
67099: PUSH
67100: LD_VAR 0 2
67104: PUSH
67105: LD_INT 3
67107: PLUS
67108: PUSH
67109: LD_INT 5
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: LD_VAR 0 2
67126: PUSH
67127: LD_INT 4
67129: PLUS
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: ST_TO_ADDR
// end ; 1 :
67146: GO 67846
67148: LD_INT 1
67150: DOUBLE
67151: EQUAL
67152: IFTRUE 67156
67154: GO 67289
67156: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67157: LD_ADDR_VAR 0 5
67161: PUSH
67162: LD_VAR 0 1
67166: PUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_INT 4
67174: MINUS
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_INT 3
67191: MINUS
67192: PUSH
67193: LD_VAR 0 2
67197: PUSH
67198: LD_INT 3
67200: MINUS
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: PUSH
67210: LD_VAR 0 1
67214: PUSH
67215: LD_INT 4
67217: MINUS
67218: PUSH
67219: LD_VAR 0 2
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: PUSH
67232: LD_VAR 0 1
67236: PUSH
67237: LD_VAR 0 2
67241: PUSH
67242: LD_INT 3
67244: PLUS
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: PUSH
67254: LD_VAR 0 1
67258: PUSH
67259: LD_INT 4
67261: PLUS
67262: PUSH
67263: LD_VAR 0 2
67267: PUSH
67268: LD_INT 4
67270: PLUS
67271: PUSH
67272: LD_INT 5
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// end ; 2 :
67287: GO 67846
67289: LD_INT 2
67291: DOUBLE
67292: EQUAL
67293: IFTRUE 67297
67295: GO 67426
67297: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67298: LD_ADDR_VAR 0 5
67302: PUSH
67303: LD_VAR 0 1
67307: PUSH
67308: LD_VAR 0 2
67312: PUSH
67313: LD_INT 3
67315: MINUS
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: PUSH
67325: LD_VAR 0 1
67329: PUSH
67330: LD_INT 4
67332: PLUS
67333: PUSH
67334: LD_VAR 0 2
67338: PUSH
67339: LD_INT 4
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: PUSH
67347: LD_VAR 0 1
67351: PUSH
67352: LD_VAR 0 2
67356: PUSH
67357: LD_INT 4
67359: PLUS
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: LD_INT 3
67376: MINUS
67377: PUSH
67378: LD_VAR 0 2
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: LD_VAR 0 1
67395: PUSH
67396: LD_INT 4
67398: MINUS
67399: PUSH
67400: LD_VAR 0 2
67404: PUSH
67405: LD_INT 4
67407: MINUS
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: ST_TO_ADDR
// end ; 3 :
67424: GO 67846
67426: LD_INT 3
67428: DOUBLE
67429: EQUAL
67430: IFTRUE 67434
67432: GO 67567
67434: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67435: LD_ADDR_VAR 0 5
67439: PUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_INT 3
67447: PLUS
67448: PUSH
67449: LD_VAR 0 2
67453: PUSH
67454: LD_INT 4
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: PUSH
67462: LD_VAR 0 1
67466: PUSH
67467: LD_INT 4
67469: PLUS
67470: PUSH
67471: LD_VAR 0 2
67475: PUSH
67476: LD_INT 4
67478: PLUS
67479: PUSH
67480: LD_INT 5
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: LIST
67487: PUSH
67488: LD_VAR 0 1
67492: PUSH
67493: LD_INT 4
67495: MINUS
67496: PUSH
67497: LD_VAR 0 2
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: LIST
67509: PUSH
67510: LD_VAR 0 1
67514: PUSH
67515: LD_VAR 0 2
67519: PUSH
67520: LD_INT 4
67522: MINUS
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: PUSH
67532: LD_VAR 0 1
67536: PUSH
67537: LD_INT 3
67539: MINUS
67540: PUSH
67541: LD_VAR 0 2
67545: PUSH
67546: LD_INT 3
67548: MINUS
67549: PUSH
67550: LD_INT 2
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: LIST
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// end ; 4 :
67565: GO 67846
67567: LD_INT 4
67569: DOUBLE
67570: EQUAL
67571: IFTRUE 67575
67573: GO 67708
67575: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67576: LD_ADDR_VAR 0 5
67580: PUSH
67581: LD_VAR 0 1
67585: PUSH
67586: LD_VAR 0 2
67590: PUSH
67591: LD_INT 4
67593: PLUS
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: PUSH
67603: LD_VAR 0 1
67607: PUSH
67608: LD_INT 3
67610: PLUS
67611: PUSH
67612: LD_VAR 0 2
67616: PUSH
67617: LD_INT 3
67619: PLUS
67620: PUSH
67621: LD_INT 5
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: LIST
67628: PUSH
67629: LD_VAR 0 1
67633: PUSH
67634: LD_INT 4
67636: PLUS
67637: PUSH
67638: LD_VAR 0 2
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: LIST
67650: PUSH
67651: LD_VAR 0 1
67655: PUSH
67656: LD_VAR 0 2
67660: PUSH
67661: LD_INT 3
67663: MINUS
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: PUSH
67673: LD_VAR 0 1
67677: PUSH
67678: LD_INT 4
67680: MINUS
67681: PUSH
67682: LD_VAR 0 2
67686: PUSH
67687: LD_INT 4
67689: MINUS
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: ST_TO_ADDR
// end ; 5 :
67706: GO 67846
67708: LD_INT 5
67710: DOUBLE
67711: EQUAL
67712: IFTRUE 67716
67714: GO 67845
67716: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67717: LD_ADDR_VAR 0 5
67721: PUSH
67722: LD_VAR 0 1
67726: PUSH
67727: LD_INT 4
67729: MINUS
67730: PUSH
67731: LD_VAR 0 2
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: LIST
67743: PUSH
67744: LD_VAR 0 1
67748: PUSH
67749: LD_VAR 0 2
67753: PUSH
67754: LD_INT 4
67756: MINUS
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: LD_INT 4
67773: PLUS
67774: PUSH
67775: LD_VAR 0 2
67779: PUSH
67780: LD_INT 4
67782: PLUS
67783: PUSH
67784: LD_INT 5
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: PUSH
67792: LD_VAR 0 1
67796: PUSH
67797: LD_INT 3
67799: PLUS
67800: PUSH
67801: LD_VAR 0 2
67805: PUSH
67806: LD_INT 4
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: PUSH
67814: LD_VAR 0 1
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 3
67826: PLUS
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// end ; end ;
67843: GO 67846
67845: POP
// result := list ;
67846: LD_ADDR_VAR 0 4
67850: PUSH
67851: LD_VAR 0 5
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 4
67860: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67861: LD_INT 0
67863: PPUSH
67864: PPUSH
67865: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67866: LD_VAR 0 1
67870: NOT
67871: PUSH
67872: LD_VAR 0 2
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: LD_INT 4
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: IN
67895: NOT
67896: OR
67897: IFFALSE 67901
// exit ;
67899: GO 67984
// tmp := [ ] ;
67901: LD_ADDR_VAR 0 5
67905: PUSH
67906: EMPTY
67907: ST_TO_ADDR
// for i in units do
67908: LD_ADDR_VAR 0 4
67912: PUSH
67913: LD_VAR 0 1
67917: PUSH
67918: FOR_IN
67919: IFFALSE 67953
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67921: LD_ADDR_VAR 0 5
67925: PUSH
67926: LD_VAR 0 5
67930: PPUSH
67931: LD_VAR 0 4
67935: PPUSH
67936: LD_VAR 0 2
67940: PPUSH
67941: CALL_OW 259
67945: PPUSH
67946: CALL 69357 0 2
67950: ST_TO_ADDR
67951: GO 67918
67953: POP
67954: POP
// if not tmp then
67955: LD_VAR 0 5
67959: NOT
67960: IFFALSE 67964
// exit ;
67962: GO 67984
// result := SortListByListDesc ( units , tmp ) ;
67964: LD_ADDR_VAR 0 3
67968: PUSH
67969: LD_VAR 0 1
67973: PPUSH
67974: LD_VAR 0 5
67978: PPUSH
67979: CALL_OW 77
67983: ST_TO_ADDR
// end ;
67984: LD_VAR 0 3
67988: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67989: LD_INT 0
67991: PPUSH
67992: PPUSH
67993: PPUSH
// result := false ;
67994: LD_ADDR_VAR 0 3
67998: PUSH
67999: LD_INT 0
68001: ST_TO_ADDR
// if not building then
68002: LD_VAR 0 2
68006: NOT
68007: IFFALSE 68011
// exit ;
68009: GO 68149
// x := GetX ( building ) ;
68011: LD_ADDR_VAR 0 4
68015: PUSH
68016: LD_VAR 0 2
68020: PPUSH
68021: CALL_OW 250
68025: ST_TO_ADDR
// y := GetY ( building ) ;
68026: LD_ADDR_VAR 0 5
68030: PUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: CALL_OW 251
68040: ST_TO_ADDR
// if not x or not y then
68041: LD_VAR 0 4
68045: NOT
68046: PUSH
68047: LD_VAR 0 5
68051: NOT
68052: OR
68053: IFFALSE 68057
// exit ;
68055: GO 68149
// if GetTaskList ( unit ) then
68057: LD_VAR 0 1
68061: PPUSH
68062: CALL_OW 437
68066: IFFALSE 68149
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68068: LD_STRING e
68070: PUSH
68071: LD_VAR 0 1
68075: PPUSH
68076: CALL_OW 437
68080: PUSH
68081: LD_INT 1
68083: ARRAY
68084: PUSH
68085: LD_INT 1
68087: ARRAY
68088: EQUAL
68089: PUSH
68090: LD_VAR 0 4
68094: PUSH
68095: LD_VAR 0 1
68099: PPUSH
68100: CALL_OW 437
68104: PUSH
68105: LD_INT 1
68107: ARRAY
68108: PUSH
68109: LD_INT 2
68111: ARRAY
68112: EQUAL
68113: AND
68114: PUSH
68115: LD_VAR 0 5
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: CALL_OW 437
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PUSH
68134: LD_INT 3
68136: ARRAY
68137: EQUAL
68138: AND
68139: IFFALSE 68149
// result := true end ;
68141: LD_ADDR_VAR 0 3
68145: PUSH
68146: LD_INT 1
68148: ST_TO_ADDR
// end ;
68149: LD_VAR 0 3
68153: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68154: LD_INT 0
68156: PPUSH
// result := false ;
68157: LD_ADDR_VAR 0 4
68161: PUSH
68162: LD_INT 0
68164: ST_TO_ADDR
// if GetTaskList ( unit ) then
68165: LD_VAR 0 1
68169: PPUSH
68170: CALL_OW 437
68174: IFFALSE 68257
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68176: LD_STRING M
68178: PUSH
68179: LD_VAR 0 1
68183: PPUSH
68184: CALL_OW 437
68188: PUSH
68189: LD_INT 1
68191: ARRAY
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: EQUAL
68197: PUSH
68198: LD_VAR 0 2
68202: PUSH
68203: LD_VAR 0 1
68207: PPUSH
68208: CALL_OW 437
68212: PUSH
68213: LD_INT 1
68215: ARRAY
68216: PUSH
68217: LD_INT 2
68219: ARRAY
68220: EQUAL
68221: AND
68222: PUSH
68223: LD_VAR 0 3
68227: PUSH
68228: LD_VAR 0 1
68232: PPUSH
68233: CALL_OW 437
68237: PUSH
68238: LD_INT 1
68240: ARRAY
68241: PUSH
68242: LD_INT 3
68244: ARRAY
68245: EQUAL
68246: AND
68247: IFFALSE 68257
// result := true ;
68249: LD_ADDR_VAR 0 4
68253: PUSH
68254: LD_INT 1
68256: ST_TO_ADDR
// end ; end ;
68257: LD_VAR 0 4
68261: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68262: LD_INT 0
68264: PPUSH
68265: PPUSH
68266: PPUSH
68267: PPUSH
// if not unit or not area then
68268: LD_VAR 0 1
68272: NOT
68273: PUSH
68274: LD_VAR 0 2
68278: NOT
68279: OR
68280: IFFALSE 68284
// exit ;
68282: GO 68460
// tmp := AreaToList ( area , i ) ;
68284: LD_ADDR_VAR 0 6
68288: PUSH
68289: LD_VAR 0 2
68293: PPUSH
68294: LD_VAR 0 5
68298: PPUSH
68299: CALL_OW 517
68303: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68304: LD_ADDR_VAR 0 5
68308: PUSH
68309: DOUBLE
68310: LD_INT 1
68312: DEC
68313: ST_TO_ADDR
68314: LD_VAR 0 6
68318: PUSH
68319: LD_INT 1
68321: ARRAY
68322: PUSH
68323: FOR_TO
68324: IFFALSE 68458
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68326: LD_ADDR_VAR 0 7
68330: PUSH
68331: LD_VAR 0 6
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PUSH
68340: LD_VAR 0 5
68344: ARRAY
68345: PUSH
68346: LD_VAR 0 6
68350: PUSH
68351: LD_INT 2
68353: ARRAY
68354: PUSH
68355: LD_VAR 0 5
68359: ARRAY
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68365: LD_INT 92
68367: PUSH
68368: LD_VAR 0 7
68372: PUSH
68373: LD_INT 1
68375: ARRAY
68376: PUSH
68377: LD_VAR 0 7
68381: PUSH
68382: LD_INT 2
68384: ARRAY
68385: PUSH
68386: LD_INT 2
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: PPUSH
68395: CALL_OW 69
68399: PUSH
68400: LD_INT 0
68402: EQUAL
68403: IFFALSE 68456
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_VAR 0 7
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: PPUSH
68419: LD_VAR 0 7
68423: PUSH
68424: LD_INT 2
68426: ARRAY
68427: PPUSH
68428: LD_VAR 0 3
68432: PPUSH
68433: CALL_OW 48
// result := IsPlaced ( unit ) ;
68437: LD_ADDR_VAR 0 4
68441: PUSH
68442: LD_VAR 0 1
68446: PPUSH
68447: CALL_OW 305
68451: ST_TO_ADDR
// exit ;
68452: POP
68453: POP
68454: GO 68460
// end ; end ;
68456: GO 68323
68458: POP
68459: POP
// end ;
68460: LD_VAR 0 4
68464: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68465: LD_INT 0
68467: PPUSH
68468: PPUSH
68469: PPUSH
// if not side or side > 8 then
68470: LD_VAR 0 1
68474: NOT
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_INT 8
68483: GREATER
68484: OR
68485: IFFALSE 68489
// exit ;
68487: GO 68676
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68489: LD_ADDR_VAR 0 4
68493: PUSH
68494: LD_INT 22
68496: PUSH
68497: LD_VAR 0 1
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 21
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PPUSH
68520: CALL_OW 69
68524: ST_TO_ADDR
// if not tmp then
68525: LD_VAR 0 4
68529: NOT
68530: IFFALSE 68534
// exit ;
68532: GO 68676
// enable_addtolog := true ;
68534: LD_ADDR_OWVAR 81
68538: PUSH
68539: LD_INT 1
68541: ST_TO_ADDR
// AddToLog ( [ ) ;
68542: LD_STRING [
68544: PPUSH
68545: CALL_OW 561
// for i in tmp do
68549: LD_ADDR_VAR 0 3
68553: PUSH
68554: LD_VAR 0 4
68558: PUSH
68559: FOR_IN
68560: IFFALSE 68667
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68562: LD_STRING [
68564: PUSH
68565: LD_VAR 0 3
68569: PPUSH
68570: CALL_OW 266
68574: STR
68575: PUSH
68576: LD_STRING , 
68578: STR
68579: PUSH
68580: LD_VAR 0 3
68584: PPUSH
68585: CALL_OW 250
68589: STR
68590: PUSH
68591: LD_STRING , 
68593: STR
68594: PUSH
68595: LD_VAR 0 3
68599: PPUSH
68600: CALL_OW 251
68604: STR
68605: PUSH
68606: LD_STRING , 
68608: STR
68609: PUSH
68610: LD_VAR 0 3
68614: PPUSH
68615: CALL_OW 254
68619: STR
68620: PUSH
68621: LD_STRING , 
68623: STR
68624: PUSH
68625: LD_VAR 0 3
68629: PPUSH
68630: LD_INT 1
68632: PPUSH
68633: CALL_OW 268
68637: STR
68638: PUSH
68639: LD_STRING , 
68641: STR
68642: PUSH
68643: LD_VAR 0 3
68647: PPUSH
68648: LD_INT 2
68650: PPUSH
68651: CALL_OW 268
68655: STR
68656: PUSH
68657: LD_STRING ],
68659: STR
68660: PPUSH
68661: CALL_OW 561
// end ;
68665: GO 68559
68667: POP
68668: POP
// AddToLog ( ]; ) ;
68669: LD_STRING ];
68671: PPUSH
68672: CALL_OW 561
// end ;
68676: LD_VAR 0 2
68680: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68681: LD_INT 0
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
68687: PPUSH
// if not area or not rate or not max then
68688: LD_VAR 0 1
68692: NOT
68693: PUSH
68694: LD_VAR 0 2
68698: NOT
68699: OR
68700: PUSH
68701: LD_VAR 0 4
68705: NOT
68706: OR
68707: IFFALSE 68711
// exit ;
68709: GO 68900
// while 1 do
68711: LD_INT 1
68713: IFFALSE 68900
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68715: LD_ADDR_VAR 0 9
68719: PUSH
68720: LD_VAR 0 1
68724: PPUSH
68725: LD_INT 1
68727: PPUSH
68728: CALL_OW 287
68732: PUSH
68733: LD_INT 10
68735: MUL
68736: ST_TO_ADDR
// r := rate / 10 ;
68737: LD_ADDR_VAR 0 7
68741: PUSH
68742: LD_VAR 0 2
68746: PUSH
68747: LD_INT 10
68749: DIVREAL
68750: ST_TO_ADDR
// time := 1 1$00 ;
68751: LD_ADDR_VAR 0 8
68755: PUSH
68756: LD_INT 2100
68758: ST_TO_ADDR
// if amount < min then
68759: LD_VAR 0 9
68763: PUSH
68764: LD_VAR 0 3
68768: LESS
68769: IFFALSE 68787
// r := r * 2 else
68771: LD_ADDR_VAR 0 7
68775: PUSH
68776: LD_VAR 0 7
68780: PUSH
68781: LD_INT 2
68783: MUL
68784: ST_TO_ADDR
68785: GO 68813
// if amount > max then
68787: LD_VAR 0 9
68791: PUSH
68792: LD_VAR 0 4
68796: GREATER
68797: IFFALSE 68813
// r := r / 2 ;
68799: LD_ADDR_VAR 0 7
68803: PUSH
68804: LD_VAR 0 7
68808: PUSH
68809: LD_INT 2
68811: DIVREAL
68812: ST_TO_ADDR
// time := time / r ;
68813: LD_ADDR_VAR 0 8
68817: PUSH
68818: LD_VAR 0 8
68822: PUSH
68823: LD_VAR 0 7
68827: DIVREAL
68828: ST_TO_ADDR
// if time < 0 then
68829: LD_VAR 0 8
68833: PUSH
68834: LD_INT 0
68836: LESS
68837: IFFALSE 68854
// time := time * - 1 ;
68839: LD_ADDR_VAR 0 8
68843: PUSH
68844: LD_VAR 0 8
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: MUL
68853: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68854: LD_VAR 0 8
68858: PUSH
68859: LD_INT 35
68861: PPUSH
68862: LD_INT 875
68864: PPUSH
68865: CALL_OW 12
68869: PLUS
68870: PPUSH
68871: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68875: LD_INT 1
68877: PPUSH
68878: LD_INT 5
68880: PPUSH
68881: CALL_OW 12
68885: PPUSH
68886: LD_VAR 0 1
68890: PPUSH
68891: LD_INT 1
68893: PPUSH
68894: CALL_OW 55
// end ;
68898: GO 68711
// end ;
68900: LD_VAR 0 5
68904: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68905: LD_INT 0
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
// if not turrets or not factories then
68915: LD_VAR 0 1
68919: NOT
68920: PUSH
68921: LD_VAR 0 2
68925: NOT
68926: OR
68927: IFFALSE 68931
// exit ;
68929: GO 69238
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68931: LD_ADDR_VAR 0 10
68935: PUSH
68936: LD_INT 5
68938: PUSH
68939: LD_INT 6
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: LD_INT 4
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 3
68958: PUSH
68959: LD_INT 5
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 24
68973: PUSH
68974: LD_INT 25
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 23
68983: PUSH
68984: LD_INT 27
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 42
68997: PUSH
68998: LD_INT 43
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 44
69007: PUSH
69008: LD_INT 46
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 45
69017: PUSH
69018: LD_INT 47
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// result := [ ] ;
69035: LD_ADDR_VAR 0 3
69039: PUSH
69040: EMPTY
69041: ST_TO_ADDR
// for i in turrets do
69042: LD_ADDR_VAR 0 4
69046: PUSH
69047: LD_VAR 0 1
69051: PUSH
69052: FOR_IN
69053: IFFALSE 69236
// begin nat := GetNation ( i ) ;
69055: LD_ADDR_VAR 0 7
69059: PUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: CALL_OW 248
69069: ST_TO_ADDR
// weapon := 0 ;
69070: LD_ADDR_VAR 0 8
69074: PUSH
69075: LD_INT 0
69077: ST_TO_ADDR
// if not nat then
69078: LD_VAR 0 7
69082: NOT
69083: IFFALSE 69087
// continue ;
69085: GO 69052
// for j in list [ nat ] do
69087: LD_ADDR_VAR 0 5
69091: PUSH
69092: LD_VAR 0 10
69096: PUSH
69097: LD_VAR 0 7
69101: ARRAY
69102: PUSH
69103: FOR_IN
69104: IFFALSE 69145
// if GetBWeapon ( i ) = j [ 1 ] then
69106: LD_VAR 0 4
69110: PPUSH
69111: CALL_OW 269
69115: PUSH
69116: LD_VAR 0 5
69120: PUSH
69121: LD_INT 1
69123: ARRAY
69124: EQUAL
69125: IFFALSE 69143
// begin weapon := j [ 2 ] ;
69127: LD_ADDR_VAR 0 8
69131: PUSH
69132: LD_VAR 0 5
69136: PUSH
69137: LD_INT 2
69139: ARRAY
69140: ST_TO_ADDR
// break ;
69141: GO 69145
// end ;
69143: GO 69103
69145: POP
69146: POP
// if not weapon then
69147: LD_VAR 0 8
69151: NOT
69152: IFFALSE 69156
// continue ;
69154: GO 69052
// for k in factories do
69156: LD_ADDR_VAR 0 6
69160: PUSH
69161: LD_VAR 0 2
69165: PUSH
69166: FOR_IN
69167: IFFALSE 69232
// begin weapons := AvailableWeaponList ( k ) ;
69169: LD_ADDR_VAR 0 9
69173: PUSH
69174: LD_VAR 0 6
69178: PPUSH
69179: CALL_OW 478
69183: ST_TO_ADDR
// if not weapons then
69184: LD_VAR 0 9
69188: NOT
69189: IFFALSE 69193
// continue ;
69191: GO 69166
// if weapon in weapons then
69193: LD_VAR 0 8
69197: PUSH
69198: LD_VAR 0 9
69202: IN
69203: IFFALSE 69230
// begin result := [ i , weapon ] ;
69205: LD_ADDR_VAR 0 3
69209: PUSH
69210: LD_VAR 0 4
69214: PUSH
69215: LD_VAR 0 8
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: ST_TO_ADDR
// exit ;
69224: POP
69225: POP
69226: POP
69227: POP
69228: GO 69238
// end ; end ;
69230: GO 69166
69232: POP
69233: POP
// end ;
69234: GO 69052
69236: POP
69237: POP
// end ;
69238: LD_VAR 0 3
69242: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69243: LD_INT 0
69245: PPUSH
// if not side or side > 8 then
69246: LD_VAR 0 3
69250: NOT
69251: PUSH
69252: LD_VAR 0 3
69256: PUSH
69257: LD_INT 8
69259: GREATER
69260: OR
69261: IFFALSE 69265
// exit ;
69263: GO 69324
// if not range then
69265: LD_VAR 0 4
69269: NOT
69270: IFFALSE 69281
// range := - 12 ;
69272: LD_ADDR_VAR 0 4
69276: PUSH
69277: LD_INT 12
69279: NEG
69280: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69281: LD_VAR 0 1
69285: PPUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: LD_VAR 0 3
69295: PPUSH
69296: LD_VAR 0 4
69300: PPUSH
69301: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69305: LD_VAR 0 1
69309: PPUSH
69310: LD_VAR 0 2
69314: PPUSH
69315: LD_VAR 0 3
69319: PPUSH
69320: CALL_OW 331
// end ;
69324: LD_VAR 0 5
69328: RET
// export function Video ( mode ) ; begin
69329: LD_INT 0
69331: PPUSH
// ingame_video = mode ;
69332: LD_ADDR_OWVAR 52
69336: PUSH
69337: LD_VAR 0 1
69341: ST_TO_ADDR
// interface_hidden = mode ;
69342: LD_ADDR_OWVAR 54
69346: PUSH
69347: LD_VAR 0 1
69351: ST_TO_ADDR
// end ;
69352: LD_VAR 0 2
69356: RET
// export function Join ( array , element ) ; begin
69357: LD_INT 0
69359: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69360: LD_ADDR_VAR 0 3
69364: PUSH
69365: LD_VAR 0 1
69369: PPUSH
69370: LD_VAR 0 1
69374: PUSH
69375: LD_INT 1
69377: PLUS
69378: PPUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: CALL_OW 1
69388: ST_TO_ADDR
// end ;
69389: LD_VAR 0 3
69393: RET
// export function JoinUnion ( array , element ) ; begin
69394: LD_INT 0
69396: PPUSH
// result := array union element ;
69397: LD_ADDR_VAR 0 3
69401: PUSH
69402: LD_VAR 0 1
69406: PUSH
69407: LD_VAR 0 2
69411: UNION
69412: ST_TO_ADDR
// end ;
69413: LD_VAR 0 3
69417: RET
// export function GetBehemoths ( side ) ; begin
69418: LD_INT 0
69420: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: LD_INT 22
69428: PUSH
69429: LD_VAR 0 1
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 31
69440: PUSH
69441: LD_INT 25
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PPUSH
69452: CALL_OW 69
69456: ST_TO_ADDR
// end ;
69457: LD_VAR 0 2
69461: RET
// export function Shuffle ( array ) ; var i , index ; begin
69462: LD_INT 0
69464: PPUSH
69465: PPUSH
69466: PPUSH
// result := [ ] ;
69467: LD_ADDR_VAR 0 2
69471: PUSH
69472: EMPTY
69473: ST_TO_ADDR
// if not array then
69474: LD_VAR 0 1
69478: NOT
69479: IFFALSE 69483
// exit ;
69481: GO 69582
// Randomize ;
69483: CALL_OW 10
// for i = array downto 1 do
69487: LD_ADDR_VAR 0 3
69491: PUSH
69492: DOUBLE
69493: LD_VAR 0 1
69497: INC
69498: ST_TO_ADDR
69499: LD_INT 1
69501: PUSH
69502: FOR_DOWNTO
69503: IFFALSE 69580
// begin index := rand ( 1 , array ) ;
69505: LD_ADDR_VAR 0 4
69509: PUSH
69510: LD_INT 1
69512: PPUSH
69513: LD_VAR 0 1
69517: PPUSH
69518: CALL_OW 12
69522: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69523: LD_ADDR_VAR 0 2
69527: PUSH
69528: LD_VAR 0 2
69532: PPUSH
69533: LD_VAR 0 2
69537: PUSH
69538: LD_INT 1
69540: PLUS
69541: PPUSH
69542: LD_VAR 0 1
69546: PUSH
69547: LD_VAR 0 4
69551: ARRAY
69552: PPUSH
69553: CALL_OW 2
69557: ST_TO_ADDR
// array := Delete ( array , index ) ;
69558: LD_ADDR_VAR 0 1
69562: PUSH
69563: LD_VAR 0 1
69567: PPUSH
69568: LD_VAR 0 4
69572: PPUSH
69573: CALL_OW 3
69577: ST_TO_ADDR
// end ;
69578: GO 69502
69580: POP
69581: POP
// end ;
69582: LD_VAR 0 2
69586: RET
// export function GetBaseMaterials ( base ) ; begin
69587: LD_INT 0
69589: PPUSH
// result := [ 0 , 0 , 0 ] ;
69590: LD_ADDR_VAR 0 2
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// if not base then
69609: LD_VAR 0 1
69613: NOT
69614: IFFALSE 69618
// exit ;
69616: GO 69667
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 1
69627: PPUSH
69628: LD_INT 1
69630: PPUSH
69631: CALL_OW 275
69635: PUSH
69636: LD_VAR 0 1
69640: PPUSH
69641: LD_INT 2
69643: PPUSH
69644: CALL_OW 275
69648: PUSH
69649: LD_VAR 0 1
69653: PPUSH
69654: LD_INT 3
69656: PPUSH
69657: CALL_OW 275
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: LIST
69666: ST_TO_ADDR
// end ;
69667: LD_VAR 0 2
69671: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69672: LD_INT 0
69674: PPUSH
69675: PPUSH
// result := array ;
69676: LD_ADDR_VAR 0 3
69680: PUSH
69681: LD_VAR 0 1
69685: ST_TO_ADDR
// if size >= result then
69686: LD_VAR 0 2
69690: PUSH
69691: LD_VAR 0 3
69695: GREATEREQUAL
69696: IFFALSE 69700
// exit ;
69698: GO 69750
// if size then
69700: LD_VAR 0 2
69704: IFFALSE 69750
// for i := array downto size do
69706: LD_ADDR_VAR 0 4
69710: PUSH
69711: DOUBLE
69712: LD_VAR 0 1
69716: INC
69717: ST_TO_ADDR
69718: LD_VAR 0 2
69722: PUSH
69723: FOR_DOWNTO
69724: IFFALSE 69748
// result := Delete ( result , result ) ;
69726: LD_ADDR_VAR 0 3
69730: PUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_VAR 0 3
69740: PPUSH
69741: CALL_OW 3
69745: ST_TO_ADDR
69746: GO 69723
69748: POP
69749: POP
// end ;
69750: LD_VAR 0 3
69754: RET
// export function ComExit ( unit ) ; var tmp ; begin
69755: LD_INT 0
69757: PPUSH
69758: PPUSH
// if not IsInUnit ( unit ) then
69759: LD_VAR 0 1
69763: PPUSH
69764: CALL_OW 310
69768: NOT
69769: IFFALSE 69773
// exit ;
69771: GO 69833
// tmp := IsInUnit ( unit ) ;
69773: LD_ADDR_VAR 0 3
69777: PUSH
69778: LD_VAR 0 1
69782: PPUSH
69783: CALL_OW 310
69787: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69788: LD_VAR 0 3
69792: PPUSH
69793: CALL_OW 247
69797: PUSH
69798: LD_INT 2
69800: EQUAL
69801: IFFALSE 69814
// ComExitVehicle ( unit ) else
69803: LD_VAR 0 1
69807: PPUSH
69808: CALL_OW 121
69812: GO 69823
// ComExitBuilding ( unit ) ;
69814: LD_VAR 0 1
69818: PPUSH
69819: CALL_OW 122
// result := tmp ;
69823: LD_ADDR_VAR 0 2
69827: PUSH
69828: LD_VAR 0 3
69832: ST_TO_ADDR
// end ;
69833: LD_VAR 0 2
69837: RET
// export function ComExitAll ( units ) ; var i ; begin
69838: LD_INT 0
69840: PPUSH
69841: PPUSH
// if not units then
69842: LD_VAR 0 1
69846: NOT
69847: IFFALSE 69851
// exit ;
69849: GO 69877
// for i in units do
69851: LD_ADDR_VAR 0 3
69855: PUSH
69856: LD_VAR 0 1
69860: PUSH
69861: FOR_IN
69862: IFFALSE 69875
// ComExit ( i ) ;
69864: LD_VAR 0 3
69868: PPUSH
69869: CALL 69755 0 1
69873: GO 69861
69875: POP
69876: POP
// end ;
69877: LD_VAR 0 2
69881: RET
// export function ResetHc ; begin
69882: LD_INT 0
69884: PPUSH
// InitHc ;
69885: CALL_OW 19
// hc_importance := 0 ;
69889: LD_ADDR_OWVAR 32
69893: PUSH
69894: LD_INT 0
69896: ST_TO_ADDR
// end ;
69897: LD_VAR 0 1
69901: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69902: LD_INT 0
69904: PPUSH
69905: PPUSH
69906: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69907: LD_ADDR_VAR 0 6
69911: PUSH
69912: LD_VAR 0 1
69916: PUSH
69917: LD_VAR 0 3
69921: PLUS
69922: PUSH
69923: LD_INT 2
69925: DIV
69926: ST_TO_ADDR
// if _x < 0 then
69927: LD_VAR 0 6
69931: PUSH
69932: LD_INT 0
69934: LESS
69935: IFFALSE 69952
// _x := _x * - 1 ;
69937: LD_ADDR_VAR 0 6
69941: PUSH
69942: LD_VAR 0 6
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: MUL
69951: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69952: LD_ADDR_VAR 0 7
69956: PUSH
69957: LD_VAR 0 2
69961: PUSH
69962: LD_VAR 0 4
69966: PLUS
69967: PUSH
69968: LD_INT 2
69970: DIV
69971: ST_TO_ADDR
// if _y < 0 then
69972: LD_VAR 0 7
69976: PUSH
69977: LD_INT 0
69979: LESS
69980: IFFALSE 69997
// _y := _y * - 1 ;
69982: LD_ADDR_VAR 0 7
69986: PUSH
69987: LD_VAR 0 7
69991: PUSH
69992: LD_INT 1
69994: NEG
69995: MUL
69996: ST_TO_ADDR
// result := [ _x , _y ] ;
69997: LD_ADDR_VAR 0 5
70001: PUSH
70002: LD_VAR 0 6
70006: PUSH
70007: LD_VAR 0 7
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: ST_TO_ADDR
// end ;
70016: LD_VAR 0 5
70020: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70021: LD_INT 0
70023: PPUSH
70024: PPUSH
70025: PPUSH
70026: PPUSH
// task := GetTaskList ( unit ) ;
70027: LD_ADDR_VAR 0 7
70031: PUSH
70032: LD_VAR 0 1
70036: PPUSH
70037: CALL_OW 437
70041: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70042: LD_VAR 0 7
70046: NOT
70047: PUSH
70048: LD_VAR 0 1
70052: PPUSH
70053: LD_VAR 0 2
70057: PPUSH
70058: CALL_OW 308
70062: NOT
70063: AND
70064: IFFALSE 70068
// exit ;
70066: GO 70186
// if IsInArea ( unit , area ) then
70068: LD_VAR 0 1
70072: PPUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: CALL_OW 308
70082: IFFALSE 70100
// begin ComMoveToArea ( unit , goAway ) ;
70084: LD_VAR 0 1
70088: PPUSH
70089: LD_VAR 0 3
70093: PPUSH
70094: CALL_OW 113
// exit ;
70098: GO 70186
// end ; if task [ 1 ] [ 1 ] <> M then
70100: LD_VAR 0 7
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PUSH
70109: LD_INT 1
70111: ARRAY
70112: PUSH
70113: LD_STRING M
70115: NONEQUAL
70116: IFFALSE 70120
// exit ;
70118: GO 70186
// x := task [ 1 ] [ 2 ] ;
70120: LD_ADDR_VAR 0 5
70124: PUSH
70125: LD_VAR 0 7
70129: PUSH
70130: LD_INT 1
70132: ARRAY
70133: PUSH
70134: LD_INT 2
70136: ARRAY
70137: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70138: LD_ADDR_VAR 0 6
70142: PUSH
70143: LD_VAR 0 7
70147: PUSH
70148: LD_INT 1
70150: ARRAY
70151: PUSH
70152: LD_INT 3
70154: ARRAY
70155: ST_TO_ADDR
// if InArea ( x , y , area ) then
70156: LD_VAR 0 5
70160: PPUSH
70161: LD_VAR 0 6
70165: PPUSH
70166: LD_VAR 0 2
70170: PPUSH
70171: CALL_OW 309
70175: IFFALSE 70186
// ComStop ( unit ) ;
70177: LD_VAR 0 1
70181: PPUSH
70182: CALL_OW 141
// end ;
70186: LD_VAR 0 4
70190: RET
// export function Abs ( value ) ; begin
70191: LD_INT 0
70193: PPUSH
// result := value ;
70194: LD_ADDR_VAR 0 2
70198: PUSH
70199: LD_VAR 0 1
70203: ST_TO_ADDR
// if value < 0 then
70204: LD_VAR 0 1
70208: PUSH
70209: LD_INT 0
70211: LESS
70212: IFFALSE 70229
// result := value * - 1 ;
70214: LD_ADDR_VAR 0 2
70218: PUSH
70219: LD_VAR 0 1
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: MUL
70228: ST_TO_ADDR
// end ;
70229: LD_VAR 0 2
70233: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70234: LD_INT 0
70236: PPUSH
70237: PPUSH
70238: PPUSH
70239: PPUSH
70240: PPUSH
70241: PPUSH
70242: PPUSH
70243: PPUSH
// if not unit or not building then
70244: LD_VAR 0 1
70248: NOT
70249: PUSH
70250: LD_VAR 0 2
70254: NOT
70255: OR
70256: IFFALSE 70260
// exit ;
70258: GO 70486
// x := GetX ( building ) ;
70260: LD_ADDR_VAR 0 4
70264: PUSH
70265: LD_VAR 0 2
70269: PPUSH
70270: CALL_OW 250
70274: ST_TO_ADDR
// y := GetY ( building ) ;
70275: LD_ADDR_VAR 0 6
70279: PUSH
70280: LD_VAR 0 2
70284: PPUSH
70285: CALL_OW 251
70289: ST_TO_ADDR
// d := GetDir ( building ) ;
70290: LD_ADDR_VAR 0 8
70294: PUSH
70295: LD_VAR 0 2
70299: PPUSH
70300: CALL_OW 254
70304: ST_TO_ADDR
// r := 4 ;
70305: LD_ADDR_VAR 0 9
70309: PUSH
70310: LD_INT 4
70312: ST_TO_ADDR
// for i := 1 to 5 do
70313: LD_ADDR_VAR 0 10
70317: PUSH
70318: DOUBLE
70319: LD_INT 1
70321: DEC
70322: ST_TO_ADDR
70323: LD_INT 5
70325: PUSH
70326: FOR_TO
70327: IFFALSE 70484
// begin _x := ShiftX ( x , d , r + i ) ;
70329: LD_ADDR_VAR 0 5
70333: PUSH
70334: LD_VAR 0 4
70338: PPUSH
70339: LD_VAR 0 8
70343: PPUSH
70344: LD_VAR 0 9
70348: PUSH
70349: LD_VAR 0 10
70353: PLUS
70354: PPUSH
70355: CALL_OW 272
70359: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70360: LD_ADDR_VAR 0 7
70364: PUSH
70365: LD_VAR 0 6
70369: PPUSH
70370: LD_VAR 0 8
70374: PPUSH
70375: LD_VAR 0 9
70379: PUSH
70380: LD_VAR 0 10
70384: PLUS
70385: PPUSH
70386: CALL_OW 273
70390: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70391: LD_VAR 0 5
70395: PPUSH
70396: LD_VAR 0 7
70400: PPUSH
70401: CALL_OW 488
70405: PUSH
70406: LD_VAR 0 5
70410: PPUSH
70411: LD_VAR 0 7
70415: PPUSH
70416: CALL_OW 428
70420: PPUSH
70421: CALL_OW 247
70425: PUSH
70426: LD_INT 3
70428: PUSH
70429: LD_INT 2
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: IN
70436: NOT
70437: AND
70438: IFFALSE 70482
// begin ComMoveXY ( unit , _x , _y ) ;
70440: LD_VAR 0 1
70444: PPUSH
70445: LD_VAR 0 5
70449: PPUSH
70450: LD_VAR 0 7
70454: PPUSH
70455: CALL_OW 111
// result := [ _x , _y ] ;
70459: LD_ADDR_VAR 0 3
70463: PUSH
70464: LD_VAR 0 5
70468: PUSH
70469: LD_VAR 0 7
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: ST_TO_ADDR
// exit ;
70478: POP
70479: POP
70480: GO 70486
// end ; end ;
70482: GO 70326
70484: POP
70485: POP
// end ;
70486: LD_VAR 0 3
70490: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70491: LD_INT 0
70493: PPUSH
70494: PPUSH
70495: PPUSH
// result := 0 ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_INT 0
70503: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70504: LD_VAR 0 1
70508: PUSH
70509: LD_INT 0
70511: LESS
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 8
70520: GREATER
70521: OR
70522: PUSH
70523: LD_VAR 0 2
70527: PUSH
70528: LD_INT 0
70530: LESS
70531: OR
70532: PUSH
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 8
70540: GREATER
70541: OR
70542: IFFALSE 70546
// exit ;
70544: GO 70621
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70546: LD_ADDR_VAR 0 4
70550: PUSH
70551: LD_INT 22
70553: PUSH
70554: LD_VAR 0 2
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PPUSH
70563: CALL_OW 69
70567: PUSH
70568: FOR_IN
70569: IFFALSE 70619
// begin un := UnitShoot ( i ) ;
70571: LD_ADDR_VAR 0 5
70575: PUSH
70576: LD_VAR 0 4
70580: PPUSH
70581: CALL_OW 504
70585: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70586: LD_VAR 0 5
70590: PPUSH
70591: CALL_OW 255
70595: PUSH
70596: LD_VAR 0 1
70600: EQUAL
70601: IFFALSE 70617
// begin result := un ;
70603: LD_ADDR_VAR 0 3
70607: PUSH
70608: LD_VAR 0 5
70612: ST_TO_ADDR
// exit ;
70613: POP
70614: POP
70615: GO 70621
// end ; end ;
70617: GO 70568
70619: POP
70620: POP
// end ;
70621: LD_VAR 0 3
70625: RET
// export function GetCargoBay ( units ) ; begin
70626: LD_INT 0
70628: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70629: LD_ADDR_VAR 0 2
70633: PUSH
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_INT 2
70641: PUSH
70642: LD_INT 34
70644: PUSH
70645: LD_INT 12
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 34
70654: PUSH
70655: LD_INT 51
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 34
70664: PUSH
70665: LD_INT 32
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 34
70674: PUSH
70675: LD_INT 89
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: PPUSH
70689: CALL_OW 72
70693: ST_TO_ADDR
// end ;
70694: LD_VAR 0 2
70698: RET
// export function Negate ( value ) ; begin
70699: LD_INT 0
70701: PPUSH
// result := not value ;
70702: LD_ADDR_VAR 0 2
70706: PUSH
70707: LD_VAR 0 1
70711: NOT
70712: ST_TO_ADDR
// end ;
70713: LD_VAR 0 2
70717: RET
// export function Inc ( value ) ; begin
70718: LD_INT 0
70720: PPUSH
// result := value + 1 ;
70721: LD_ADDR_VAR 0 2
70725: PUSH
70726: LD_VAR 0 1
70730: PUSH
70731: LD_INT 1
70733: PLUS
70734: ST_TO_ADDR
// end ;
70735: LD_VAR 0 2
70739: RET
// export function Dec ( value ) ; begin
70740: LD_INT 0
70742: PPUSH
// result := value - 1 ;
70743: LD_ADDR_VAR 0 2
70747: PUSH
70748: LD_VAR 0 1
70752: PUSH
70753: LD_INT 1
70755: MINUS
70756: ST_TO_ADDR
// end ;
70757: LD_VAR 0 2
70761: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70762: LD_INT 0
70764: PPUSH
70765: PPUSH
70766: PPUSH
70767: PPUSH
70768: PPUSH
70769: PPUSH
70770: PPUSH
70771: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70772: LD_VAR 0 1
70776: PPUSH
70777: LD_VAR 0 2
70781: PPUSH
70782: CALL_OW 488
70786: NOT
70787: PUSH
70788: LD_VAR 0 3
70792: PPUSH
70793: LD_VAR 0 4
70797: PPUSH
70798: CALL_OW 488
70802: NOT
70803: OR
70804: IFFALSE 70817
// begin result := - 1 ;
70806: LD_ADDR_VAR 0 5
70810: PUSH
70811: LD_INT 1
70813: NEG
70814: ST_TO_ADDR
// exit ;
70815: GO 71052
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70817: LD_ADDR_VAR 0 12
70821: PUSH
70822: LD_VAR 0 1
70826: PPUSH
70827: LD_VAR 0 2
70831: PPUSH
70832: LD_VAR 0 3
70836: PPUSH
70837: LD_VAR 0 4
70841: PPUSH
70842: CALL 69902 0 4
70846: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70847: LD_ADDR_VAR 0 11
70851: PUSH
70852: LD_VAR 0 1
70856: PPUSH
70857: LD_VAR 0 2
70861: PPUSH
70862: LD_VAR 0 12
70866: PUSH
70867: LD_INT 1
70869: ARRAY
70870: PPUSH
70871: LD_VAR 0 12
70875: PUSH
70876: LD_INT 2
70878: ARRAY
70879: PPUSH
70880: CALL_OW 298
70884: ST_TO_ADDR
// distance := 9999 ;
70885: LD_ADDR_VAR 0 10
70889: PUSH
70890: LD_INT 9999
70892: ST_TO_ADDR
// for i := 0 to 5 do
70893: LD_ADDR_VAR 0 6
70897: PUSH
70898: DOUBLE
70899: LD_INT 0
70901: DEC
70902: ST_TO_ADDR
70903: LD_INT 5
70905: PUSH
70906: FOR_TO
70907: IFFALSE 71050
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70909: LD_ADDR_VAR 0 7
70913: PUSH
70914: LD_VAR 0 1
70918: PPUSH
70919: LD_VAR 0 6
70923: PPUSH
70924: LD_VAR 0 11
70928: PPUSH
70929: CALL_OW 272
70933: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70934: LD_ADDR_VAR 0 8
70938: PUSH
70939: LD_VAR 0 2
70943: PPUSH
70944: LD_VAR 0 6
70948: PPUSH
70949: LD_VAR 0 11
70953: PPUSH
70954: CALL_OW 273
70958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70959: LD_VAR 0 7
70963: PPUSH
70964: LD_VAR 0 8
70968: PPUSH
70969: CALL_OW 488
70973: NOT
70974: IFFALSE 70978
// continue ;
70976: GO 70906
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70978: LD_ADDR_VAR 0 9
70982: PUSH
70983: LD_VAR 0 12
70987: PUSH
70988: LD_INT 1
70990: ARRAY
70991: PPUSH
70992: LD_VAR 0 12
70996: PUSH
70997: LD_INT 2
70999: ARRAY
71000: PPUSH
71001: LD_VAR 0 7
71005: PPUSH
71006: LD_VAR 0 8
71010: PPUSH
71011: CALL_OW 298
71015: ST_TO_ADDR
// if tmp < distance then
71016: LD_VAR 0 9
71020: PUSH
71021: LD_VAR 0 10
71025: LESS
71026: IFFALSE 71048
// begin result := i ;
71028: LD_ADDR_VAR 0 5
71032: PUSH
71033: LD_VAR 0 6
71037: ST_TO_ADDR
// distance := tmp ;
71038: LD_ADDR_VAR 0 10
71042: PUSH
71043: LD_VAR 0 9
71047: ST_TO_ADDR
// end ; end ;
71048: GO 70906
71050: POP
71051: POP
// end ;
71052: LD_VAR 0 5
71056: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71057: LD_INT 0
71059: PPUSH
71060: PPUSH
// if not driver or not IsInUnit ( driver ) then
71061: LD_VAR 0 1
71065: NOT
71066: PUSH
71067: LD_VAR 0 1
71071: PPUSH
71072: CALL_OW 310
71076: NOT
71077: OR
71078: IFFALSE 71082
// exit ;
71080: GO 71172
// vehicle := IsInUnit ( driver ) ;
71082: LD_ADDR_VAR 0 3
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 310
71096: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71097: LD_VAR 0 1
71101: PPUSH
71102: LD_STRING \
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: LD_INT 0
71113: PUSH
71114: LD_INT 0
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: PUSH
71132: LD_STRING E
71134: PUSH
71135: LD_INT 0
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_VAR 0 3
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PPUSH
71168: CALL_OW 446
// end ;
71172: LD_VAR 0 2
71176: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71177: LD_INT 0
71179: PPUSH
71180: PPUSH
// if not driver or not IsInUnit ( driver ) then
71181: LD_VAR 0 1
71185: NOT
71186: PUSH
71187: LD_VAR 0 1
71191: PPUSH
71192: CALL_OW 310
71196: NOT
71197: OR
71198: IFFALSE 71202
// exit ;
71200: GO 71292
// vehicle := IsInUnit ( driver ) ;
71202: LD_ADDR_VAR 0 3
71206: PUSH
71207: LD_VAR 0 1
71211: PPUSH
71212: CALL_OW 310
71216: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71217: LD_VAR 0 1
71221: PPUSH
71222: LD_STRING \
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: LD_INT 0
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: LD_STRING E
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: LD_VAR 0 3
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PPUSH
71288: CALL_OW 447
// end ;
71292: LD_VAR 0 2
71296: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71297: LD_INT 0
71299: PPUSH
71300: PPUSH
71301: PPUSH
// tmp := [ ] ;
71302: LD_ADDR_VAR 0 5
71306: PUSH
71307: EMPTY
71308: ST_TO_ADDR
// for i in units do
71309: LD_ADDR_VAR 0 4
71313: PUSH
71314: LD_VAR 0 1
71318: PUSH
71319: FOR_IN
71320: IFFALSE 71358
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71322: LD_ADDR_VAR 0 5
71326: PUSH
71327: LD_VAR 0 5
71331: PPUSH
71332: LD_VAR 0 5
71336: PUSH
71337: LD_INT 1
71339: PLUS
71340: PPUSH
71341: LD_VAR 0 4
71345: PPUSH
71346: CALL_OW 256
71350: PPUSH
71351: CALL_OW 2
71355: ST_TO_ADDR
71356: GO 71319
71358: POP
71359: POP
// if not tmp then
71360: LD_VAR 0 5
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71417
// if asc then
71369: LD_VAR 0 2
71373: IFFALSE 71397
// result := SortListByListAsc ( units , tmp ) else
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_VAR 0 1
71384: PPUSH
71385: LD_VAR 0 5
71389: PPUSH
71390: CALL_OW 76
71394: ST_TO_ADDR
71395: GO 71417
// result := SortListByListDesc ( units , tmp ) ;
71397: LD_ADDR_VAR 0 3
71401: PUSH
71402: LD_VAR 0 1
71406: PPUSH
71407: LD_VAR 0 5
71411: PPUSH
71412: CALL_OW 77
71416: ST_TO_ADDR
// end ;
71417: LD_VAR 0 3
71421: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71422: LD_INT 0
71424: PPUSH
71425: PPUSH
// task := GetTaskList ( mech ) ;
71426: LD_ADDR_VAR 0 4
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: CALL_OW 437
71440: ST_TO_ADDR
// if not task then
71441: LD_VAR 0 4
71445: NOT
71446: IFFALSE 71450
// exit ;
71448: GO 71492
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71450: LD_ADDR_VAR 0 3
71454: PUSH
71455: LD_VAR 0 4
71459: PUSH
71460: LD_INT 1
71462: ARRAY
71463: PUSH
71464: LD_INT 1
71466: ARRAY
71467: PUSH
71468: LD_STRING r
71470: EQUAL
71471: PUSH
71472: LD_VAR 0 4
71476: PUSH
71477: LD_INT 1
71479: ARRAY
71480: PUSH
71481: LD_INT 4
71483: ARRAY
71484: PUSH
71485: LD_VAR 0 2
71489: EQUAL
71490: AND
71491: ST_TO_ADDR
// end ;
71492: LD_VAR 0 3
71496: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71497: LD_INT 0
71499: PPUSH
// SetDir ( unit , d ) ;
71500: LD_VAR 0 1
71504: PPUSH
71505: LD_VAR 0 4
71509: PPUSH
71510: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71514: LD_VAR 0 1
71518: PPUSH
71519: LD_VAR 0 2
71523: PPUSH
71524: LD_VAR 0 3
71528: PPUSH
71529: LD_VAR 0 5
71533: PPUSH
71534: CALL_OW 48
// end ;
71538: LD_VAR 0 6
71542: RET
// export function ToNaturalNumber ( number ) ; begin
71543: LD_INT 0
71545: PPUSH
// result := number div 1 ;
71546: LD_ADDR_VAR 0 2
71550: PUSH
71551: LD_VAR 0 1
71555: PUSH
71556: LD_INT 1
71558: DIV
71559: ST_TO_ADDR
// if number < 0 then
71560: LD_VAR 0 1
71564: PUSH
71565: LD_INT 0
71567: LESS
71568: IFFALSE 71578
// result := 0 ;
71570: LD_ADDR_VAR 0 2
71574: PUSH
71575: LD_INT 0
71577: ST_TO_ADDR
// end ;
71578: LD_VAR 0 2
71582: RET
// export function SortByClass ( units , class ) ; var un ; begin
71583: LD_INT 0
71585: PPUSH
71586: PPUSH
// if not units or not class then
71587: LD_VAR 0 1
71591: NOT
71592: PUSH
71593: LD_VAR 0 2
71597: NOT
71598: OR
71599: IFFALSE 71603
// exit ;
71601: GO 71698
// result := [ ] ;
71603: LD_ADDR_VAR 0 3
71607: PUSH
71608: EMPTY
71609: ST_TO_ADDR
// for un in units do
71610: LD_ADDR_VAR 0 4
71614: PUSH
71615: LD_VAR 0 1
71619: PUSH
71620: FOR_IN
71621: IFFALSE 71696
// if GetClass ( un ) = class then
71623: LD_VAR 0 4
71627: PPUSH
71628: CALL_OW 257
71632: PUSH
71633: LD_VAR 0 2
71637: EQUAL
71638: IFFALSE 71665
// result := Insert ( result , 1 , un ) else
71640: LD_ADDR_VAR 0 3
71644: PUSH
71645: LD_VAR 0 3
71649: PPUSH
71650: LD_INT 1
71652: PPUSH
71653: LD_VAR 0 4
71657: PPUSH
71658: CALL_OW 2
71662: ST_TO_ADDR
71663: GO 71694
// result := Replace ( result , result + 1 , un ) ;
71665: LD_ADDR_VAR 0 3
71669: PUSH
71670: LD_VAR 0 3
71674: PPUSH
71675: LD_VAR 0 3
71679: PUSH
71680: LD_INT 1
71682: PLUS
71683: PPUSH
71684: LD_VAR 0 4
71688: PPUSH
71689: CALL_OW 1
71693: ST_TO_ADDR
71694: GO 71620
71696: POP
71697: POP
// end ;
71698: LD_VAR 0 3
71702: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71703: LD_INT 0
71705: PPUSH
71706: PPUSH
71707: PPUSH
71708: PPUSH
71709: PPUSH
71710: PPUSH
71711: PPUSH
// result := [ ] ;
71712: LD_ADDR_VAR 0 4
71716: PUSH
71717: EMPTY
71718: ST_TO_ADDR
// if x - r < 0 then
71719: LD_VAR 0 1
71723: PUSH
71724: LD_VAR 0 3
71728: MINUS
71729: PUSH
71730: LD_INT 0
71732: LESS
71733: IFFALSE 71745
// min_x := 0 else
71735: LD_ADDR_VAR 0 8
71739: PUSH
71740: LD_INT 0
71742: ST_TO_ADDR
71743: GO 71761
// min_x := x - r ;
71745: LD_ADDR_VAR 0 8
71749: PUSH
71750: LD_VAR 0 1
71754: PUSH
71755: LD_VAR 0 3
71759: MINUS
71760: ST_TO_ADDR
// if y - r < 0 then
71761: LD_VAR 0 2
71765: PUSH
71766: LD_VAR 0 3
71770: MINUS
71771: PUSH
71772: LD_INT 0
71774: LESS
71775: IFFALSE 71787
// min_y := 0 else
71777: LD_ADDR_VAR 0 7
71781: PUSH
71782: LD_INT 0
71784: ST_TO_ADDR
71785: GO 71803
// min_y := y - r ;
71787: LD_ADDR_VAR 0 7
71791: PUSH
71792: LD_VAR 0 2
71796: PUSH
71797: LD_VAR 0 3
71801: MINUS
71802: ST_TO_ADDR
// max_x := x + r ;
71803: LD_ADDR_VAR 0 9
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_VAR 0 3
71817: PLUS
71818: ST_TO_ADDR
// max_y := y + r ;
71819: LD_ADDR_VAR 0 10
71823: PUSH
71824: LD_VAR 0 2
71828: PUSH
71829: LD_VAR 0 3
71833: PLUS
71834: ST_TO_ADDR
// for _x = min_x to max_x do
71835: LD_ADDR_VAR 0 5
71839: PUSH
71840: DOUBLE
71841: LD_VAR 0 8
71845: DEC
71846: ST_TO_ADDR
71847: LD_VAR 0 9
71851: PUSH
71852: FOR_TO
71853: IFFALSE 71954
// for _y = min_y to max_y do
71855: LD_ADDR_VAR 0 6
71859: PUSH
71860: DOUBLE
71861: LD_VAR 0 7
71865: DEC
71866: ST_TO_ADDR
71867: LD_VAR 0 10
71871: PUSH
71872: FOR_TO
71873: IFFALSE 71950
// begin if not ValidHex ( _x , _y ) then
71875: LD_VAR 0 5
71879: PPUSH
71880: LD_VAR 0 6
71884: PPUSH
71885: CALL_OW 488
71889: NOT
71890: IFFALSE 71894
// continue ;
71892: GO 71872
// if GetResourceTypeXY ( _x , _y ) then
71894: LD_VAR 0 5
71898: PPUSH
71899: LD_VAR 0 6
71903: PPUSH
71904: CALL_OW 283
71908: IFFALSE 71948
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71910: LD_ADDR_VAR 0 4
71914: PUSH
71915: LD_VAR 0 4
71919: PPUSH
71920: LD_VAR 0 4
71924: PUSH
71925: LD_INT 1
71927: PLUS
71928: PPUSH
71929: LD_VAR 0 5
71933: PUSH
71934: LD_VAR 0 6
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PPUSH
71943: CALL_OW 1
71947: ST_TO_ADDR
// end ;
71948: GO 71872
71950: POP
71951: POP
71952: GO 71852
71954: POP
71955: POP
// end ;
71956: LD_VAR 0 4
71960: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71961: LD_INT 0
71963: PPUSH
71964: PPUSH
71965: PPUSH
71966: PPUSH
71967: PPUSH
71968: PPUSH
71969: PPUSH
71970: PPUSH
// if not units then
71971: LD_VAR 0 1
71975: NOT
71976: IFFALSE 71980
// exit ;
71978: GO 72504
// result := UnitFilter ( units , [ f_ok ] ) ;
71980: LD_ADDR_VAR 0 3
71984: PUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: LD_INT 50
71992: PUSH
71993: EMPTY
71994: LIST
71995: PPUSH
71996: CALL_OW 72
72000: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72001: LD_ADDR_VAR 0 8
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: LD_INT 1
72013: ARRAY
72014: PPUSH
72015: CALL_OW 255
72019: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72020: LD_ADDR_VAR 0 10
72024: PUSH
72025: LD_INT 29
72027: PUSH
72028: LD_INT 91
72030: PUSH
72031: LD_INT 49
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: ST_TO_ADDR
// if not result then
72039: LD_VAR 0 3
72043: NOT
72044: IFFALSE 72048
// exit ;
72046: GO 72504
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72048: LD_ADDR_VAR 0 5
72052: PUSH
72053: LD_INT 81
72055: PUSH
72056: LD_VAR 0 8
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PPUSH
72065: CALL_OW 69
72069: ST_TO_ADDR
// for i in result do
72070: LD_ADDR_VAR 0 4
72074: PUSH
72075: LD_VAR 0 3
72079: PUSH
72080: FOR_IN
72081: IFFALSE 72502
// begin tag := GetTag ( i ) + 1 ;
72083: LD_ADDR_VAR 0 9
72087: PUSH
72088: LD_VAR 0 4
72092: PPUSH
72093: CALL_OW 110
72097: PUSH
72098: LD_INT 1
72100: PLUS
72101: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72102: LD_ADDR_VAR 0 7
72106: PUSH
72107: LD_VAR 0 4
72111: PPUSH
72112: CALL_OW 250
72116: PPUSH
72117: LD_VAR 0 4
72121: PPUSH
72122: CALL_OW 251
72126: PPUSH
72127: LD_INT 6
72129: PPUSH
72130: CALL 71703 0 3
72134: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72135: LD_VAR 0 4
72139: PPUSH
72140: CALL_OW 247
72144: PUSH
72145: LD_INT 2
72147: EQUAL
72148: PUSH
72149: LD_VAR 0 7
72153: AND
72154: PUSH
72155: LD_VAR 0 4
72159: PPUSH
72160: CALL_OW 264
72164: PUSH
72165: LD_VAR 0 10
72169: IN
72170: NOT
72171: AND
72172: IFFALSE 72211
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72174: LD_VAR 0 4
72178: PPUSH
72179: LD_VAR 0 7
72183: PUSH
72184: LD_INT 1
72186: ARRAY
72187: PUSH
72188: LD_INT 1
72190: ARRAY
72191: PPUSH
72192: LD_VAR 0 7
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: PUSH
72201: LD_INT 2
72203: ARRAY
72204: PPUSH
72205: CALL_OW 116
72209: GO 72500
// if path > tag then
72211: LD_VAR 0 2
72215: PUSH
72216: LD_VAR 0 9
72220: GREATER
72221: IFFALSE 72429
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72223: LD_ADDR_VAR 0 6
72227: PUSH
72228: LD_VAR 0 5
72232: PPUSH
72233: LD_INT 91
72235: PUSH
72236: LD_VAR 0 4
72240: PUSH
72241: LD_INT 8
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: PPUSH
72249: CALL_OW 72
72253: ST_TO_ADDR
// if nearEnemy then
72254: LD_VAR 0 6
72258: IFFALSE 72327
// begin if GetWeapon ( i ) = ru_time_lapser then
72260: LD_VAR 0 4
72264: PPUSH
72265: CALL_OW 264
72269: PUSH
72270: LD_INT 49
72272: EQUAL
72273: IFFALSE 72301
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72275: LD_VAR 0 4
72279: PPUSH
72280: LD_VAR 0 6
72284: PPUSH
72285: LD_VAR 0 4
72289: PPUSH
72290: CALL_OW 74
72294: PPUSH
72295: CALL_OW 112
72299: GO 72325
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72301: LD_VAR 0 4
72305: PPUSH
72306: LD_VAR 0 6
72310: PPUSH
72311: LD_VAR 0 4
72315: PPUSH
72316: CALL_OW 74
72320: PPUSH
72321: CALL 73429 0 2
// end else
72325: GO 72427
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72327: LD_VAR 0 4
72331: PPUSH
72332: LD_VAR 0 2
72336: PUSH
72337: LD_VAR 0 9
72341: ARRAY
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PPUSH
72347: LD_VAR 0 2
72351: PUSH
72352: LD_VAR 0 9
72356: ARRAY
72357: PUSH
72358: LD_INT 2
72360: ARRAY
72361: PPUSH
72362: CALL_OW 297
72366: PUSH
72367: LD_INT 6
72369: GREATER
72370: IFFALSE 72413
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72372: LD_VAR 0 4
72376: PPUSH
72377: LD_VAR 0 2
72381: PUSH
72382: LD_VAR 0 9
72386: ARRAY
72387: PUSH
72388: LD_INT 1
72390: ARRAY
72391: PPUSH
72392: LD_VAR 0 2
72396: PUSH
72397: LD_VAR 0 9
72401: ARRAY
72402: PUSH
72403: LD_INT 2
72405: ARRAY
72406: PPUSH
72407: CALL_OW 114
72411: GO 72427
// SetTag ( i , tag ) ;
72413: LD_VAR 0 4
72417: PPUSH
72418: LD_VAR 0 9
72422: PPUSH
72423: CALL_OW 109
// end else
72427: GO 72500
// if enemy then
72429: LD_VAR 0 5
72433: IFFALSE 72500
// begin if GetWeapon ( i ) = ru_time_lapser then
72435: LD_VAR 0 4
72439: PPUSH
72440: CALL_OW 264
72444: PUSH
72445: LD_INT 49
72447: EQUAL
72448: IFFALSE 72476
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72450: LD_VAR 0 4
72454: PPUSH
72455: LD_VAR 0 5
72459: PPUSH
72460: LD_VAR 0 4
72464: PPUSH
72465: CALL_OW 74
72469: PPUSH
72470: CALL_OW 112
72474: GO 72500
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72476: LD_VAR 0 4
72480: PPUSH
72481: LD_VAR 0 5
72485: PPUSH
72486: LD_VAR 0 4
72490: PPUSH
72491: CALL_OW 74
72495: PPUSH
72496: CALL 73429 0 2
// end ; end ;
72500: GO 72080
72502: POP
72503: POP
// end ;
72504: LD_VAR 0 3
72508: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72509: LD_INT 0
72511: PPUSH
72512: PPUSH
72513: PPUSH
// if not unit or IsInUnit ( unit ) then
72514: LD_VAR 0 1
72518: NOT
72519: PUSH
72520: LD_VAR 0 1
72524: PPUSH
72525: CALL_OW 310
72529: OR
72530: IFFALSE 72534
// exit ;
72532: GO 72625
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72534: LD_ADDR_VAR 0 4
72538: PUSH
72539: LD_VAR 0 1
72543: PPUSH
72544: CALL_OW 250
72548: PPUSH
72549: LD_VAR 0 2
72553: PPUSH
72554: LD_INT 1
72556: PPUSH
72557: CALL_OW 272
72561: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72562: LD_ADDR_VAR 0 5
72566: PUSH
72567: LD_VAR 0 1
72571: PPUSH
72572: CALL_OW 251
72576: PPUSH
72577: LD_VAR 0 2
72581: PPUSH
72582: LD_INT 1
72584: PPUSH
72585: CALL_OW 273
72589: ST_TO_ADDR
// if ValidHex ( x , y ) then
72590: LD_VAR 0 4
72594: PPUSH
72595: LD_VAR 0 5
72599: PPUSH
72600: CALL_OW 488
72604: IFFALSE 72625
// ComTurnXY ( unit , x , y ) ;
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_VAR 0 4
72615: PPUSH
72616: LD_VAR 0 5
72620: PPUSH
72621: CALL_OW 118
// end ;
72625: LD_VAR 0 3
72629: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72630: LD_INT 0
72632: PPUSH
72633: PPUSH
// result := false ;
72634: LD_ADDR_VAR 0 3
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// if not units then
72642: LD_VAR 0 2
72646: NOT
72647: IFFALSE 72651
// exit ;
72649: GO 72696
// for i in units do
72651: LD_ADDR_VAR 0 4
72655: PUSH
72656: LD_VAR 0 2
72660: PUSH
72661: FOR_IN
72662: IFFALSE 72694
// if See ( side , i ) then
72664: LD_VAR 0 1
72668: PPUSH
72669: LD_VAR 0 4
72673: PPUSH
72674: CALL_OW 292
72678: IFFALSE 72692
// begin result := true ;
72680: LD_ADDR_VAR 0 3
72684: PUSH
72685: LD_INT 1
72687: ST_TO_ADDR
// exit ;
72688: POP
72689: POP
72690: GO 72696
// end ;
72692: GO 72661
72694: POP
72695: POP
// end ;
72696: LD_VAR 0 3
72700: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72701: LD_INT 0
72703: PPUSH
72704: PPUSH
72705: PPUSH
72706: PPUSH
// if not unit or not points then
72707: LD_VAR 0 1
72711: NOT
72712: PUSH
72713: LD_VAR 0 2
72717: NOT
72718: OR
72719: IFFALSE 72723
// exit ;
72721: GO 72813
// dist := 99999 ;
72723: LD_ADDR_VAR 0 5
72727: PUSH
72728: LD_INT 99999
72730: ST_TO_ADDR
// for i in points do
72731: LD_ADDR_VAR 0 4
72735: PUSH
72736: LD_VAR 0 2
72740: PUSH
72741: FOR_IN
72742: IFFALSE 72811
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72744: LD_ADDR_VAR 0 6
72748: PUSH
72749: LD_VAR 0 1
72753: PPUSH
72754: LD_VAR 0 4
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PPUSH
72763: LD_VAR 0 4
72767: PUSH
72768: LD_INT 2
72770: ARRAY
72771: PPUSH
72772: CALL_OW 297
72776: ST_TO_ADDR
// if tmpDist < dist then
72777: LD_VAR 0 6
72781: PUSH
72782: LD_VAR 0 5
72786: LESS
72787: IFFALSE 72809
// begin result := i ;
72789: LD_ADDR_VAR 0 3
72793: PUSH
72794: LD_VAR 0 4
72798: ST_TO_ADDR
// dist := tmpDist ;
72799: LD_ADDR_VAR 0 5
72803: PUSH
72804: LD_VAR 0 6
72808: ST_TO_ADDR
// end ; end ;
72809: GO 72741
72811: POP
72812: POP
// end ;
72813: LD_VAR 0 3
72817: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72818: LD_INT 0
72820: PPUSH
// uc_side := side ;
72821: LD_ADDR_OWVAR 20
72825: PUSH
72826: LD_VAR 0 1
72830: ST_TO_ADDR
// uc_nation := 3 ;
72831: LD_ADDR_OWVAR 21
72835: PUSH
72836: LD_INT 3
72838: ST_TO_ADDR
// vc_chassis := 25 ;
72839: LD_ADDR_OWVAR 37
72843: PUSH
72844: LD_INT 25
72846: ST_TO_ADDR
// vc_engine := engine_siberite ;
72847: LD_ADDR_OWVAR 39
72851: PUSH
72852: LD_INT 3
72854: ST_TO_ADDR
// vc_control := control_computer ;
72855: LD_ADDR_OWVAR 38
72859: PUSH
72860: LD_INT 3
72862: ST_TO_ADDR
// vc_weapon := 59 ;
72863: LD_ADDR_OWVAR 40
72867: PUSH
72868: LD_INT 59
72870: ST_TO_ADDR
// result := CreateVehicle ;
72871: LD_ADDR_VAR 0 5
72875: PUSH
72876: CALL_OW 45
72880: ST_TO_ADDR
// SetDir ( result , d ) ;
72881: LD_VAR 0 5
72885: PPUSH
72886: LD_VAR 0 4
72890: PPUSH
72891: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72895: LD_VAR 0 5
72899: PPUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: LD_VAR 0 3
72909: PPUSH
72910: LD_INT 0
72912: PPUSH
72913: CALL_OW 48
// end ;
72917: LD_VAR 0 5
72921: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72922: LD_INT 0
72924: PPUSH
72925: PPUSH
72926: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72927: LD_ADDR_VAR 0 2
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: LD_INT 0
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72950: LD_VAR 0 1
72954: NOT
72955: PUSH
72956: LD_VAR 0 1
72960: PPUSH
72961: CALL_OW 264
72965: PUSH
72966: LD_INT 12
72968: PUSH
72969: LD_INT 51
72971: PUSH
72972: LD_INT 32
72974: PUSH
72975: LD_INT 89
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: IN
72984: NOT
72985: OR
72986: IFFALSE 72990
// exit ;
72988: GO 73088
// for i := 1 to 3 do
72990: LD_ADDR_VAR 0 3
72994: PUSH
72995: DOUBLE
72996: LD_INT 1
72998: DEC
72999: ST_TO_ADDR
73000: LD_INT 3
73002: PUSH
73003: FOR_TO
73004: IFFALSE 73086
// begin tmp := GetCargo ( cargo , i ) ;
73006: LD_ADDR_VAR 0 4
73010: PUSH
73011: LD_VAR 0 1
73015: PPUSH
73016: LD_VAR 0 3
73020: PPUSH
73021: CALL_OW 289
73025: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73026: LD_ADDR_VAR 0 2
73030: PUSH
73031: LD_VAR 0 2
73035: PPUSH
73036: LD_VAR 0 3
73040: PPUSH
73041: LD_VAR 0 4
73045: PPUSH
73046: CALL_OW 1
73050: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73051: LD_ADDR_VAR 0 2
73055: PUSH
73056: LD_VAR 0 2
73060: PPUSH
73061: LD_INT 4
73063: PPUSH
73064: LD_VAR 0 2
73068: PUSH
73069: LD_INT 4
73071: ARRAY
73072: PUSH
73073: LD_VAR 0 4
73077: PLUS
73078: PPUSH
73079: CALL_OW 1
73083: ST_TO_ADDR
// end ;
73084: GO 73003
73086: POP
73087: POP
// end ;
73088: LD_VAR 0 2
73092: RET
// export function Length ( array ) ; begin
73093: LD_INT 0
73095: PPUSH
// result := array + 0 ;
73096: LD_ADDR_VAR 0 2
73100: PUSH
73101: LD_VAR 0 1
73105: PUSH
73106: LD_INT 0
73108: PLUS
73109: ST_TO_ADDR
// end ;
73110: LD_VAR 0 2
73114: RET
// export function PrepareArray ( array ) ; begin
73115: LD_INT 0
73117: PPUSH
// result := array diff 0 ;
73118: LD_ADDR_VAR 0 2
73122: PUSH
73123: LD_VAR 0 1
73127: PUSH
73128: LD_INT 0
73130: DIFF
73131: ST_TO_ADDR
// if not result [ 1 ] then
73132: LD_VAR 0 2
73136: PUSH
73137: LD_INT 1
73139: ARRAY
73140: NOT
73141: IFFALSE 73161
// result := Delete ( result , 1 ) ;
73143: LD_ADDR_VAR 0 2
73147: PUSH
73148: LD_VAR 0 2
73152: PPUSH
73153: LD_INT 1
73155: PPUSH
73156: CALL_OW 3
73160: ST_TO_ADDR
// end ;
73161: LD_VAR 0 2
73165: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73166: LD_INT 0
73168: PPUSH
73169: PPUSH
73170: PPUSH
73171: PPUSH
// sibRocketRange := 25 ;
73172: LD_ADDR_VAR 0 6
73176: PUSH
73177: LD_INT 25
73179: ST_TO_ADDR
// result := false ;
73180: LD_ADDR_VAR 0 4
73184: PUSH
73185: LD_INT 0
73187: ST_TO_ADDR
// for i := 0 to 5 do
73188: LD_ADDR_VAR 0 5
73192: PUSH
73193: DOUBLE
73194: LD_INT 0
73196: DEC
73197: ST_TO_ADDR
73198: LD_INT 5
73200: PUSH
73201: FOR_TO
73202: IFFALSE 73269
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73204: LD_VAR 0 1
73208: PPUSH
73209: LD_VAR 0 5
73213: PPUSH
73214: LD_VAR 0 6
73218: PPUSH
73219: CALL_OW 272
73223: PPUSH
73224: LD_VAR 0 2
73228: PPUSH
73229: LD_VAR 0 5
73233: PPUSH
73234: LD_VAR 0 6
73238: PPUSH
73239: CALL_OW 273
73243: PPUSH
73244: LD_VAR 0 3
73248: PPUSH
73249: CALL_OW 309
73253: IFFALSE 73267
// begin result := true ;
73255: LD_ADDR_VAR 0 4
73259: PUSH
73260: LD_INT 1
73262: ST_TO_ADDR
// exit ;
73263: POP
73264: POP
73265: GO 73271
// end ;
73267: GO 73201
73269: POP
73270: POP
// end ;
73271: LD_VAR 0 4
73275: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73276: LD_INT 0
73278: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73279: LD_VAR 0 1
73283: PPUSH
73284: LD_VAR 0 2
73288: PPUSH
73289: LD_INT 0
73291: PPUSH
73292: LD_INT 0
73294: PPUSH
73295: LD_INT 1
73297: PPUSH
73298: LD_INT 0
73300: PPUSH
73301: CALL_OW 587
// end ;
73305: LD_VAR 0 3
73309: RET
// export function CenterOnNow ( unit ) ; begin
73310: LD_INT 0
73312: PPUSH
// result := IsInUnit ( unit ) ;
73313: LD_ADDR_VAR 0 2
73317: PUSH
73318: LD_VAR 0 1
73322: PPUSH
73323: CALL_OW 310
73327: ST_TO_ADDR
// if not result then
73328: LD_VAR 0 2
73332: NOT
73333: IFFALSE 73345
// result := unit ;
73335: LD_ADDR_VAR 0 2
73339: PUSH
73340: LD_VAR 0 1
73344: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73345: LD_VAR 0 1
73349: PPUSH
73350: CALL_OW 87
// end ;
73354: LD_VAR 0 2
73358: RET
// export function ComMoveHex ( unit , hex ) ; begin
73359: LD_INT 0
73361: PPUSH
// if not hex then
73362: LD_VAR 0 2
73366: NOT
73367: IFFALSE 73371
// exit ;
73369: GO 73424
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73371: LD_VAR 0 2
73375: PUSH
73376: LD_INT 1
73378: ARRAY
73379: PPUSH
73380: LD_VAR 0 2
73384: PUSH
73385: LD_INT 2
73387: ARRAY
73388: PPUSH
73389: CALL_OW 428
73393: IFFALSE 73397
// exit ;
73395: GO 73424
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73397: LD_VAR 0 1
73401: PPUSH
73402: LD_VAR 0 2
73406: PUSH
73407: LD_INT 1
73409: ARRAY
73410: PPUSH
73411: LD_VAR 0 2
73415: PUSH
73416: LD_INT 2
73418: ARRAY
73419: PPUSH
73420: CALL_OW 111
// end ;
73424: LD_VAR 0 3
73428: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73429: LD_INT 0
73431: PPUSH
73432: PPUSH
73433: PPUSH
// if not unit or not enemy then
73434: LD_VAR 0 1
73438: NOT
73439: PUSH
73440: LD_VAR 0 2
73444: NOT
73445: OR
73446: IFFALSE 73450
// exit ;
73448: GO 73574
// x := GetX ( enemy ) ;
73450: LD_ADDR_VAR 0 4
73454: PUSH
73455: LD_VAR 0 2
73459: PPUSH
73460: CALL_OW 250
73464: ST_TO_ADDR
// y := GetY ( enemy ) ;
73465: LD_ADDR_VAR 0 5
73469: PUSH
73470: LD_VAR 0 2
73474: PPUSH
73475: CALL_OW 251
73479: ST_TO_ADDR
// if ValidHex ( x , y ) then
73480: LD_VAR 0 4
73484: PPUSH
73485: LD_VAR 0 5
73489: PPUSH
73490: CALL_OW 488
73494: IFFALSE 73574
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73496: LD_VAR 0 2
73500: PPUSH
73501: CALL_OW 247
73505: PUSH
73506: LD_INT 3
73508: PUSH
73509: LD_INT 2
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: IN
73516: PUSH
73517: LD_VAR 0 1
73521: PPUSH
73522: CALL_OW 255
73526: PPUSH
73527: LD_VAR 0 2
73531: PPUSH
73532: CALL_OW 292
73536: OR
73537: IFFALSE 73555
// ComAttackUnit ( unit , enemy ) else
73539: LD_VAR 0 1
73543: PPUSH
73544: LD_VAR 0 2
73548: PPUSH
73549: CALL_OW 115
73553: GO 73574
// ComAgressiveMove ( unit , x , y ) ;
73555: LD_VAR 0 1
73559: PPUSH
73560: LD_VAR 0 4
73564: PPUSH
73565: LD_VAR 0 5
73569: PPUSH
73570: CALL_OW 114
// end ;
73574: LD_VAR 0 3
73578: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73579: LD_INT 0
73581: PPUSH
73582: PPUSH
73583: PPUSH
// list := AreaToList ( area , 0 ) ;
73584: LD_ADDR_VAR 0 5
73588: PUSH
73589: LD_VAR 0 1
73593: PPUSH
73594: LD_INT 0
73596: PPUSH
73597: CALL_OW 517
73601: ST_TO_ADDR
// if not list then
73602: LD_VAR 0 5
73606: NOT
73607: IFFALSE 73611
// exit ;
73609: GO 73741
// if all then
73611: LD_VAR 0 2
73615: IFFALSE 73703
// begin for i := 1 to list [ 1 ] do
73617: LD_ADDR_VAR 0 4
73621: PUSH
73622: DOUBLE
73623: LD_INT 1
73625: DEC
73626: ST_TO_ADDR
73627: LD_VAR 0 5
73631: PUSH
73632: LD_INT 1
73634: ARRAY
73635: PUSH
73636: FOR_TO
73637: IFFALSE 73699
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73639: LD_ADDR_VAR 0 3
73643: PUSH
73644: LD_VAR 0 3
73648: PPUSH
73649: LD_VAR 0 3
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: PPUSH
73658: LD_VAR 0 5
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: PUSH
73667: LD_VAR 0 4
73671: ARRAY
73672: PUSH
73673: LD_VAR 0 5
73677: PUSH
73678: LD_INT 2
73680: ARRAY
73681: PUSH
73682: LD_VAR 0 4
73686: ARRAY
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PPUSH
73692: CALL_OW 1
73696: ST_TO_ADDR
73697: GO 73636
73699: POP
73700: POP
// exit ;
73701: GO 73741
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73703: LD_ADDR_VAR 0 3
73707: PUSH
73708: LD_VAR 0 5
73712: PUSH
73713: LD_INT 1
73715: ARRAY
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: PUSH
73721: LD_VAR 0 5
73725: PUSH
73726: LD_INT 2
73728: ARRAY
73729: PUSH
73730: LD_INT 1
73732: ARRAY
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: EMPTY
73739: LIST
73740: ST_TO_ADDR
// end ;
73741: LD_VAR 0 3
73745: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73746: LD_INT 0
73748: PPUSH
73749: PPUSH
// list := AreaToList ( area , 0 ) ;
73750: LD_ADDR_VAR 0 4
73754: PUSH
73755: LD_VAR 0 1
73759: PPUSH
73760: LD_INT 0
73762: PPUSH
73763: CALL_OW 517
73767: ST_TO_ADDR
// if not list then
73768: LD_VAR 0 4
73772: NOT
73773: IFFALSE 73777
// exit ;
73775: GO 73818
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73777: LD_ADDR_VAR 0 3
73781: PUSH
73782: LD_VAR 0 4
73786: PUSH
73787: LD_INT 1
73789: ARRAY
73790: PUSH
73791: LD_INT 1
73793: ARRAY
73794: PUSH
73795: LD_VAR 0 4
73799: PUSH
73800: LD_INT 2
73802: ARRAY
73803: PUSH
73804: LD_INT 1
73806: ARRAY
73807: PUSH
73808: LD_VAR 0 2
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: LIST
73817: ST_TO_ADDR
// end ;
73818: LD_VAR 0 3
73822: RET
// export function First ( array ) ; begin
73823: LD_INT 0
73825: PPUSH
// if not array then
73826: LD_VAR 0 1
73830: NOT
73831: IFFALSE 73835
// exit ;
73833: GO 73849
// result := array [ 1 ] ;
73835: LD_ADDR_VAR 0 2
73839: PUSH
73840: LD_VAR 0 1
73844: PUSH
73845: LD_INT 1
73847: ARRAY
73848: ST_TO_ADDR
// end ;
73849: LD_VAR 0 2
73853: RET
// export function Last ( array ) ; begin
73854: LD_INT 0
73856: PPUSH
// if not array then
73857: LD_VAR 0 1
73861: NOT
73862: IFFALSE 73866
// exit ;
73864: GO 73882
// result := array [ array ] ;
73866: LD_ADDR_VAR 0 2
73870: PUSH
73871: LD_VAR 0 1
73875: PUSH
73876: LD_VAR 0 1
73880: ARRAY
73881: ST_TO_ADDR
// end ;
73882: LD_VAR 0 2
73886: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73887: LD_INT 0
73889: PPUSH
73890: PPUSH
// result := [ ] ;
73891: LD_ADDR_VAR 0 5
73895: PUSH
73896: EMPTY
73897: ST_TO_ADDR
// if not array then
73898: LD_VAR 0 1
73902: NOT
73903: IFFALSE 73907
// exit ;
73905: GO 74019
// for i := 1 to array do
73907: LD_ADDR_VAR 0 6
73911: PUSH
73912: DOUBLE
73913: LD_INT 1
73915: DEC
73916: ST_TO_ADDR
73917: LD_VAR 0 1
73921: PUSH
73922: FOR_TO
73923: IFFALSE 74017
// if array [ i ] [ index ] = value then
73925: LD_VAR 0 1
73929: PUSH
73930: LD_VAR 0 6
73934: ARRAY
73935: PUSH
73936: LD_VAR 0 2
73940: ARRAY
73941: PUSH
73942: LD_VAR 0 3
73946: EQUAL
73947: IFFALSE 74015
// begin if indexColumn then
73949: LD_VAR 0 4
73953: IFFALSE 73989
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73955: LD_ADDR_VAR 0 5
73959: PUSH
73960: LD_VAR 0 5
73964: PPUSH
73965: LD_VAR 0 1
73969: PUSH
73970: LD_VAR 0 6
73974: ARRAY
73975: PUSH
73976: LD_VAR 0 4
73980: ARRAY
73981: PPUSH
73982: CALL 69357 0 2
73986: ST_TO_ADDR
73987: GO 74015
// result := Join ( result , array [ i ] ) ;
73989: LD_ADDR_VAR 0 5
73993: PUSH
73994: LD_VAR 0 5
73998: PPUSH
73999: LD_VAR 0 1
74003: PUSH
74004: LD_VAR 0 6
74008: ARRAY
74009: PPUSH
74010: CALL 69357 0 2
74014: ST_TO_ADDR
// end ;
74015: GO 73922
74017: POP
74018: POP
// end ;
74019: LD_VAR 0 5
74023: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74024: LD_INT 0
74026: PPUSH
74027: PPUSH
74028: PPUSH
// if btype = b_depot then
74029: LD_VAR 0 2
74033: PUSH
74034: LD_INT 0
74036: EQUAL
74037: IFFALSE 74049
// begin result := true ;
74039: LD_ADDR_VAR 0 3
74043: PUSH
74044: LD_INT 1
74046: ST_TO_ADDR
// exit ;
74047: GO 74165
// end ; pom := GetBase ( depot ) ;
74049: LD_ADDR_VAR 0 4
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: CALL_OW 274
74063: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74064: LD_ADDR_VAR 0 5
74068: PUSH
74069: LD_VAR 0 2
74073: PPUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: CALL_OW 248
74083: PPUSH
74084: CALL_OW 450
74088: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: LD_VAR 0 4
74098: PPUSH
74099: LD_INT 1
74101: PPUSH
74102: CALL_OW 275
74106: PUSH
74107: LD_VAR 0 5
74111: PUSH
74112: LD_INT 1
74114: ARRAY
74115: GREATEREQUAL
74116: PUSH
74117: LD_VAR 0 4
74121: PPUSH
74122: LD_INT 2
74124: PPUSH
74125: CALL_OW 275
74129: PUSH
74130: LD_VAR 0 5
74134: PUSH
74135: LD_INT 2
74137: ARRAY
74138: GREATEREQUAL
74139: AND
74140: PUSH
74141: LD_VAR 0 4
74145: PPUSH
74146: LD_INT 3
74148: PPUSH
74149: CALL_OW 275
74153: PUSH
74154: LD_VAR 0 5
74158: PUSH
74159: LD_INT 3
74161: ARRAY
74162: GREATEREQUAL
74163: AND
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 3
74169: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74170: LD_INT 0
74172: PPUSH
// if not vehicles or not parkingPoint then
74173: LD_VAR 0 1
74177: NOT
74178: PUSH
74179: LD_VAR 0 2
74183: NOT
74184: OR
74185: IFFALSE 74189
// exit ;
74187: GO 74287
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74189: LD_ADDR_VAR 0 1
74193: PUSH
74194: LD_VAR 0 1
74198: PPUSH
74199: LD_INT 50
74201: PUSH
74202: EMPTY
74203: LIST
74204: PUSH
74205: LD_INT 3
74207: PUSH
74208: LD_INT 92
74210: PUSH
74211: LD_VAR 0 2
74215: PUSH
74216: LD_INT 1
74218: ARRAY
74219: PUSH
74220: LD_VAR 0 2
74224: PUSH
74225: LD_INT 2
74227: ARRAY
74228: PUSH
74229: LD_INT 8
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PPUSH
74246: CALL_OW 72
74250: ST_TO_ADDR
// if not vehicles then
74251: LD_VAR 0 1
74255: NOT
74256: IFFALSE 74260
// exit ;
74258: GO 74287
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74260: LD_VAR 0 1
74264: PPUSH
74265: LD_VAR 0 2
74269: PUSH
74270: LD_INT 1
74272: ARRAY
74273: PPUSH
74274: LD_VAR 0 2
74278: PUSH
74279: LD_INT 2
74281: ARRAY
74282: PPUSH
74283: CALL_OW 111
// end ;
74287: LD_VAR 0 3
74291: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
74296: PPUSH
// if not side or not area then
74297: LD_VAR 0 1
74301: NOT
74302: PUSH
74303: LD_VAR 0 2
74307: NOT
74308: OR
74309: IFFALSE 74313
// exit ;
74311: GO 74432
// tmp := AreaToList ( area , 0 ) ;
74313: LD_ADDR_VAR 0 5
74317: PUSH
74318: LD_VAR 0 2
74322: PPUSH
74323: LD_INT 0
74325: PPUSH
74326: CALL_OW 517
74330: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74331: LD_ADDR_VAR 0 4
74335: PUSH
74336: DOUBLE
74337: LD_INT 1
74339: DEC
74340: ST_TO_ADDR
74341: LD_VAR 0 5
74345: PUSH
74346: LD_INT 1
74348: ARRAY
74349: PUSH
74350: FOR_TO
74351: IFFALSE 74430
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74353: LD_VAR 0 5
74357: PUSH
74358: LD_INT 1
74360: ARRAY
74361: PUSH
74362: LD_VAR 0 4
74366: ARRAY
74367: PPUSH
74368: LD_VAR 0 5
74372: PUSH
74373: LD_INT 2
74375: ARRAY
74376: PUSH
74377: LD_VAR 0 4
74381: ARRAY
74382: PPUSH
74383: CALL_OW 351
74387: IFFALSE 74428
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74389: LD_VAR 0 5
74393: PUSH
74394: LD_INT 1
74396: ARRAY
74397: PUSH
74398: LD_VAR 0 4
74402: ARRAY
74403: PPUSH
74404: LD_VAR 0 5
74408: PUSH
74409: LD_INT 2
74411: ARRAY
74412: PUSH
74413: LD_VAR 0 4
74417: ARRAY
74418: PPUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: CALL_OW 244
// end ;
74428: GO 74350
74430: POP
74431: POP
// end ; end_of_file
74432: LD_VAR 0 3
74436: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74437: LD_VAR 0 1
74441: PUSH
74442: LD_INT 200
74444: DOUBLE
74445: GREATEREQUAL
74446: IFFALSE 74454
74448: LD_INT 299
74450: DOUBLE
74451: LESSEQUAL
74452: IFTRUE 74456
74454: GO 74488
74456: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74457: LD_VAR 0 1
74461: PPUSH
74462: LD_VAR 0 2
74466: PPUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: LD_VAR 0 4
74476: PPUSH
74477: LD_VAR 0 5
74481: PPUSH
74482: CALL 27148 0 5
74486: GO 74565
74488: LD_INT 300
74490: DOUBLE
74491: GREATEREQUAL
74492: IFFALSE 74500
74494: LD_INT 399
74496: DOUBLE
74497: LESSEQUAL
74498: IFTRUE 74502
74500: GO 74564
74502: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74503: LD_VAR 0 1
74507: PPUSH
74508: LD_VAR 0 2
74512: PPUSH
74513: LD_VAR 0 3
74517: PPUSH
74518: LD_VAR 0 4
74522: PPUSH
74523: LD_VAR 0 5
74527: PPUSH
74528: LD_VAR 0 6
74532: PPUSH
74533: LD_VAR 0 7
74537: PPUSH
74538: LD_VAR 0 8
74542: PPUSH
74543: LD_VAR 0 9
74547: PPUSH
74548: LD_VAR 0 10
74552: PPUSH
74553: LD_VAR 0 11
74557: PPUSH
74558: CALL 23473 0 11
74562: GO 74565
74564: POP
// end ;
74565: PPOPN 11
74567: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74568: LD_VAR 0 1
74572: PPUSH
74573: LD_VAR 0 2
74577: PPUSH
74578: LD_VAR 0 3
74582: PPUSH
74583: LD_VAR 0 4
74587: PPUSH
74588: LD_VAR 0 5
74592: PPUSH
74593: CALL 26884 0 5
// end ; end_of_file
74597: PPOPN 5
74599: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74600: LD_VAR 0 1
74604: PPUSH
74605: LD_VAR 0 2
74609: PPUSH
74610: LD_VAR 0 3
74614: PPUSH
74615: LD_VAR 0 4
74619: PPUSH
74620: LD_VAR 0 5
74624: PPUSH
74625: LD_VAR 0 6
74629: PPUSH
74630: CALL 11125 0 6
// end ;
74634: PPOPN 6
74636: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74637: LD_INT 0
74639: PPUSH
// begin if not units then
74640: LD_VAR 0 1
74644: NOT
74645: IFFALSE 74649
// exit ;
74647: GO 74649
// end ;
74649: PPOPN 7
74651: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74652: CALL 11012 0 0
// end ;
74656: PPOPN 1
74658: END
