// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 23764 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 23862 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 23870 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_crane := 88 ;
10973: LD_ADDR_EXP 20
10977: PUSH
10978: LD_INT 88
10980: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10981: LD_ADDR_EXP 15
10985: PUSH
10986: LD_INT 89
10988: ST_TO_ADDR
// us_hack := 99 ;
10989: LD_ADDR_EXP 16
10993: PUSH
10994: LD_INT 99
10996: ST_TO_ADDR
// us_artillery := 97 ;
10997: LD_ADDR_EXP 17
11001: PUSH
11002: LD_INT 97
11004: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11005: LD_ADDR_EXP 18
11009: PUSH
11010: LD_INT 91
11012: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11013: LD_ADDR_EXP 19
11017: PUSH
11018: LD_INT 92
11020: ST_TO_ADDR
// ru_radar := 98 ;
11021: LD_ADDR_EXP 14
11025: PUSH
11026: LD_INT 98
11028: ST_TO_ADDR
// tech_Artillery := 80 ;
11029: LD_ADDR_EXP 21
11033: PUSH
11034: LD_INT 80
11036: ST_TO_ADDR
// tech_RadMat := 81 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 81
11044: ST_TO_ADDR
// tech_BasicTools := 82 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 82
11052: ST_TO_ADDR
// tech_Cargo := 83 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 83
11060: ST_TO_ADDR
// tech_Track := 84 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 84
11068: ST_TO_ADDR
// tech_Crane := 85 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 85
11076: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 86
11084: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 87
11092: ST_TO_ADDR
// end ;
11093: LD_VAR 0 1
11097: RET
// every 1 do
11098: GO 11100
11100: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11101: CALL 10970 0 0
11105: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 100
11113: EQUAL
11114: IFFALSE 12063
// begin if not StreamModeActive then
11116: LD_EXP 29
11120: NOT
11121: IFFALSE 11131
// StreamModeActive := true ;
11123: LD_ADDR_EXP 29
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// if p3 = 0 then
11131: LD_VAR 0 3
11135: PUSH
11136: LD_INT 0
11138: EQUAL
11139: IFFALSE 11145
// InitStreamMode ;
11141: CALL 12296 0 0
// if p3 = 1 then
11145: LD_VAR 0 3
11149: PUSH
11150: LD_INT 1
11152: EQUAL
11153: IFFALSE 11163
// sRocket := true ;
11155: LD_ADDR_EXP 34
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// if p3 = 2 then
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 2
11170: EQUAL
11171: IFFALSE 11181
// sSpeed := true ;
11173: LD_ADDR_EXP 33
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// if p3 = 3 then
11181: LD_VAR 0 3
11185: PUSH
11186: LD_INT 3
11188: EQUAL
11189: IFFALSE 11199
// sEngine := true ;
11191: LD_ADDR_EXP 35
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// if p3 = 4 then
11199: LD_VAR 0 3
11203: PUSH
11204: LD_INT 4
11206: EQUAL
11207: IFFALSE 11217
// sSpec := true ;
11209: LD_ADDR_EXP 32
11213: PUSH
11214: LD_INT 1
11216: ST_TO_ADDR
// if p3 = 5 then
11217: LD_VAR 0 3
11221: PUSH
11222: LD_INT 5
11224: EQUAL
11225: IFFALSE 11235
// sLevel := true ;
11227: LD_ADDR_EXP 36
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// if p3 = 6 then
11235: LD_VAR 0 3
11239: PUSH
11240: LD_INT 6
11242: EQUAL
11243: IFFALSE 11253
// sArmoury := true ;
11245: LD_ADDR_EXP 37
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// if p3 = 7 then
11253: LD_VAR 0 3
11257: PUSH
11258: LD_INT 7
11260: EQUAL
11261: IFFALSE 11271
// sRadar := true ;
11263: LD_ADDR_EXP 38
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
// if p3 = 8 then
11271: LD_VAR 0 3
11275: PUSH
11276: LD_INT 8
11278: EQUAL
11279: IFFALSE 11289
// sBunker := true ;
11281: LD_ADDR_EXP 39
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// if p3 = 9 then
11289: LD_VAR 0 3
11293: PUSH
11294: LD_INT 9
11296: EQUAL
11297: IFFALSE 11307
// sHack := true ;
11299: LD_ADDR_EXP 40
11303: PUSH
11304: LD_INT 1
11306: ST_TO_ADDR
// if p3 = 10 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 10
11314: EQUAL
11315: IFFALSE 11325
// sFire := true ;
11317: LD_ADDR_EXP 41
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// if p3 = 11 then
11325: LD_VAR 0 3
11329: PUSH
11330: LD_INT 11
11332: EQUAL
11333: IFFALSE 11343
// sRefresh := true ;
11335: LD_ADDR_EXP 42
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
// if p3 = 12 then
11343: LD_VAR 0 3
11347: PUSH
11348: LD_INT 12
11350: EQUAL
11351: IFFALSE 11361
// sExp := true ;
11353: LD_ADDR_EXP 43
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// if p3 = 13 then
11361: LD_VAR 0 3
11365: PUSH
11366: LD_INT 13
11368: EQUAL
11369: IFFALSE 11379
// sDepot := true ;
11371: LD_ADDR_EXP 44
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// if p3 = 14 then
11379: LD_VAR 0 3
11383: PUSH
11384: LD_INT 14
11386: EQUAL
11387: IFFALSE 11397
// sFlag := true ;
11389: LD_ADDR_EXP 45
11393: PUSH
11394: LD_INT 1
11396: ST_TO_ADDR
// if p3 = 15 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 15
11404: EQUAL
11405: IFFALSE 11415
// sKamikadze := true ;
11407: LD_ADDR_EXP 53
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 16 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 16
11422: EQUAL
11423: IFFALSE 11433
// sTroll := true ;
11425: LD_ADDR_EXP 54
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 17 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 17
11440: EQUAL
11441: IFFALSE 11451
// sSlow := true ;
11443: LD_ADDR_EXP 55
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 18 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 18
11458: EQUAL
11459: IFFALSE 11469
// sLack := true ;
11461: LD_ADDR_EXP 56
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 19 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 19
11476: EQUAL
11477: IFFALSE 11487
// sTank := true ;
11479: LD_ADDR_EXP 58
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 20 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 20
11494: EQUAL
11495: IFFALSE 11505
// sRemote := true ;
11497: LD_ADDR_EXP 59
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 21 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 21
11512: EQUAL
11513: IFFALSE 11523
// sPowell := true ;
11515: LD_ADDR_EXP 60
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 22 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 22
11530: EQUAL
11531: IFFALSE 11541
// sTeleport := true ;
11533: LD_ADDR_EXP 63
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 23 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 23
11548: EQUAL
11549: IFFALSE 11559
// sOilTower := true ;
11551: LD_ADDR_EXP 65
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 24 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 24
11566: EQUAL
11567: IFFALSE 11577
// sShovel := true ;
11569: LD_ADDR_EXP 66
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 25 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 25
11584: EQUAL
11585: IFFALSE 11595
// sSheik := true ;
11587: LD_ADDR_EXP 67
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 26 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 26
11602: EQUAL
11603: IFFALSE 11613
// sEarthquake := true ;
11605: LD_ADDR_EXP 69
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 27 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 27
11620: EQUAL
11621: IFFALSE 11631
// sAI := true ;
11623: LD_ADDR_EXP 70
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 28 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 28
11638: EQUAL
11639: IFFALSE 11649
// sCargo := true ;
11641: LD_ADDR_EXP 73
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 29 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 29
11656: EQUAL
11657: IFFALSE 11667
// sDLaser := true ;
11659: LD_ADDR_EXP 74
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 30 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 30
11674: EQUAL
11675: IFFALSE 11685
// sExchange := true ;
11677: LD_ADDR_EXP 75
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 31 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 31
11692: EQUAL
11693: IFFALSE 11703
// sFac := true ;
11695: LD_ADDR_EXP 76
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 32 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 32
11710: EQUAL
11711: IFFALSE 11721
// sPower := true ;
11713: LD_ADDR_EXP 77
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 33 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 33
11728: EQUAL
11729: IFFALSE 11739
// sRandom := true ;
11731: LD_ADDR_EXP 78
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 34 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 34
11746: EQUAL
11747: IFFALSE 11757
// sShield := true ;
11749: LD_ADDR_EXP 79
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 35 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 35
11764: EQUAL
11765: IFFALSE 11775
// sTime := true ;
11767: LD_ADDR_EXP 80
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 36 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 36
11782: EQUAL
11783: IFFALSE 11793
// sTools := true ;
11785: LD_ADDR_EXP 81
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 101 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 101
11800: EQUAL
11801: IFFALSE 11811
// sSold := true ;
11803: LD_ADDR_EXP 46
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 102 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 102
11818: EQUAL
11819: IFFALSE 11829
// sDiff := true ;
11821: LD_ADDR_EXP 47
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 103 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 103
11836: EQUAL
11837: IFFALSE 11847
// sFog := true ;
11839: LD_ADDR_EXP 50
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 104 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 104
11854: EQUAL
11855: IFFALSE 11865
// sReset := true ;
11857: LD_ADDR_EXP 51
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 105 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 105
11872: EQUAL
11873: IFFALSE 11883
// sSun := true ;
11875: LD_ADDR_EXP 52
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 106 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 106
11890: EQUAL
11891: IFFALSE 11901
// sTiger := true ;
11893: LD_ADDR_EXP 48
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 107 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 107
11908: EQUAL
11909: IFFALSE 11919
// sBomb := true ;
11911: LD_ADDR_EXP 49
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 108 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 108
11926: EQUAL
11927: IFFALSE 11937
// sWound := true ;
11929: LD_ADDR_EXP 57
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 109 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 109
11944: EQUAL
11945: IFFALSE 11955
// sBetray := true ;
11947: LD_ADDR_EXP 61
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 110 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 110
11962: EQUAL
11963: IFFALSE 11973
// sContamin := true ;
11965: LD_ADDR_EXP 62
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 111 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 111
11980: EQUAL
11981: IFFALSE 11991
// sOil := true ;
11983: LD_ADDR_EXP 64
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 112 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 112
11998: EQUAL
11999: IFFALSE 12009
// sStu := true ;
12001: LD_ADDR_EXP 68
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 113 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 113
12016: EQUAL
12017: IFFALSE 12027
// sBazooka := true ;
12019: LD_ADDR_EXP 71
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 114 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 114
12034: EQUAL
12035: IFFALSE 12045
// sMortar := true ;
12037: LD_ADDR_EXP 72
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 115 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 115
12052: EQUAL
12053: IFFALSE 12063
// sRanger := true ;
12055: LD_ADDR_EXP 82
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// end ; if p2 = 101 then
12063: LD_VAR 0 2
12067: PUSH
12068: LD_INT 101
12070: EQUAL
12071: IFFALSE 12274
// begin case p3 of 1 :
12073: LD_VAR 0 3
12077: PUSH
12078: LD_INT 1
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12093
12086: POP
// hHackUnlimitedResources ; 2 :
12087: CALL 22368 0 0
12091: GO 12274
12093: LD_INT 2
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12108
12101: POP
// hHackSetLevel10 ; 3 :
12102: CALL 22501 0 0
12106: GO 12274
12108: LD_INT 3
12110: DOUBLE
12111: EQUAL
12112: IFTRUE 12116
12114: GO 12123
12116: POP
// hHackSetLevel10YourUnits ; 4 :
12117: CALL 22586 0 0
12121: GO 12274
12123: LD_INT 4
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12153
12131: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
12132: LD_VAR 0 4
12136: PPUSH
12137: LD_VAR 0 5
12141: PPUSH
12142: LD_VAR 0 6
12146: PPUSH
12147: CALL 22676 0 3
12151: GO 12274
12153: LD_INT 5
12155: DOUBLE
12156: EQUAL
12157: IFTRUE 12161
12159: GO 12168
12161: POP
// hHackSpawnVehicle ; 6 :
12162: CALL 22737 0 0
12166: GO 12274
12168: LD_INT 6
12170: DOUBLE
12171: EQUAL
12172: IFTRUE 12176
12174: GO 12183
12176: POP
// hHackInvincible ; 7 :
12177: CALL 23283 0 0
12181: GO 12274
12183: LD_INT 7
12185: DOUBLE
12186: EQUAL
12187: IFTRUE 12191
12189: GO 12198
12191: POP
// hHackInvisible ; 8 :
12192: CALL 23394 0 0
12196: GO 12274
12198: LD_INT 8
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12213
12206: POP
// hHackChangeYourSide ; 9 :
12207: CALL 23451 0 0
12211: GO 12274
12213: LD_INT 9
12215: DOUBLE
12216: EQUAL
12217: IFTRUE 12221
12219: GO 12228
12221: POP
// hHackChangeUnitSide ; 10 :
12222: CALL 23493 0 0
12226: GO 12274
12228: LD_INT 10
12230: DOUBLE
12231: EQUAL
12232: IFTRUE 12236
12234: GO 12243
12236: POP
// hHackFog ; 11 :
12237: CALL 23594 0 0
12241: GO 12274
12243: LD_INT 11
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12258
12251: POP
// hHackApeman ; 12 :
12252: CALL 23609 0 0
12256: GO 12274
12258: LD_INT 12
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12273
12266: POP
// hHackBoom ; end ;
12267: CALL 23694 0 0
12271: GO 12274
12273: POP
// end ; end ;
12274: PPOPN 6
12276: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12277: GO 12279
12279: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12280: LD_STRING initStreamRollete();
12282: PPUSH
12283: CALL_OW 559
// InitStreamMode ;
12287: CALL 12296 0 0
// DefineStreamItems ( ) ;
12291: CALL 12736 0 0
// end ;
12295: END
// function InitStreamMode ; begin
12296: LD_INT 0
12298: PPUSH
// streamModeActive := false ;
12299: LD_ADDR_EXP 29
12303: PUSH
12304: LD_INT 0
12306: ST_TO_ADDR
// normalCounter := 36 ;
12307: LD_ADDR_EXP 30
12311: PUSH
12312: LD_INT 36
12314: ST_TO_ADDR
// hardcoreCounter := 16 ;
12315: LD_ADDR_EXP 31
12319: PUSH
12320: LD_INT 16
12322: ST_TO_ADDR
// sRocket := false ;
12323: LD_ADDR_EXP 34
12327: PUSH
12328: LD_INT 0
12330: ST_TO_ADDR
// sSpeed := false ;
12331: LD_ADDR_EXP 33
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// sEngine := false ;
12339: LD_ADDR_EXP 35
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// sSpec := false ;
12347: LD_ADDR_EXP 32
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// sLevel := false ;
12355: LD_ADDR_EXP 36
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// sArmoury := false ;
12363: LD_ADDR_EXP 37
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// sRadar := false ;
12371: LD_ADDR_EXP 38
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// sBunker := false ;
12379: LD_ADDR_EXP 39
12383: PUSH
12384: LD_INT 0
12386: ST_TO_ADDR
// sHack := false ;
12387: LD_ADDR_EXP 40
12391: PUSH
12392: LD_INT 0
12394: ST_TO_ADDR
// sFire := false ;
12395: LD_ADDR_EXP 41
12399: PUSH
12400: LD_INT 0
12402: ST_TO_ADDR
// sRefresh := false ;
12403: LD_ADDR_EXP 42
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// sExp := false ;
12411: LD_ADDR_EXP 43
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// sDepot := false ;
12419: LD_ADDR_EXP 44
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// sFlag := false ;
12427: LD_ADDR_EXP 45
12431: PUSH
12432: LD_INT 0
12434: ST_TO_ADDR
// sKamikadze := false ;
12435: LD_ADDR_EXP 53
12439: PUSH
12440: LD_INT 0
12442: ST_TO_ADDR
// sTroll := false ;
12443: LD_ADDR_EXP 54
12447: PUSH
12448: LD_INT 0
12450: ST_TO_ADDR
// sSlow := false ;
12451: LD_ADDR_EXP 55
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
// sLack := false ;
12459: LD_ADDR_EXP 56
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// sTank := false ;
12467: LD_ADDR_EXP 58
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// sRemote := false ;
12475: LD_ADDR_EXP 59
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// sPowell := false ;
12483: LD_ADDR_EXP 60
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// sTeleport := false ;
12491: LD_ADDR_EXP 63
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// sOilTower := false ;
12499: LD_ADDR_EXP 65
12503: PUSH
12504: LD_INT 0
12506: ST_TO_ADDR
// sShovel := false ;
12507: LD_ADDR_EXP 66
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sSheik := false ;
12515: LD_ADDR_EXP 67
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sEarthquake := false ;
12523: LD_ADDR_EXP 69
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sAI := false ;
12531: LD_ADDR_EXP 70
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sCargo := false ;
12539: LD_ADDR_EXP 73
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sDLaser := false ;
12547: LD_ADDR_EXP 74
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sExchange := false ;
12555: LD_ADDR_EXP 75
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// sFac := false ;
12563: LD_ADDR_EXP 76
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// sPower := false ;
12571: LD_ADDR_EXP 77
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// sRandom := false ;
12579: LD_ADDR_EXP 78
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// sShield := false ;
12587: LD_ADDR_EXP 79
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// sTime := false ;
12595: LD_ADDR_EXP 80
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sTools := false ;
12603: LD_ADDR_EXP 81
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sSold := false ;
12611: LD_ADDR_EXP 46
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sDiff := false ;
12619: LD_ADDR_EXP 47
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sFog := false ;
12627: LD_ADDR_EXP 50
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sReset := false ;
12635: LD_ADDR_EXP 51
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sSun := false ;
12643: LD_ADDR_EXP 52
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sTiger := false ;
12651: LD_ADDR_EXP 48
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sBomb := false ;
12659: LD_ADDR_EXP 49
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sWound := false ;
12667: LD_ADDR_EXP 57
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sBetray := false ;
12675: LD_ADDR_EXP 61
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sContamin := false ;
12683: LD_ADDR_EXP 62
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sOil := false ;
12691: LD_ADDR_EXP 64
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sStu := false ;
12699: LD_ADDR_EXP 68
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sBazooka := false ;
12707: LD_ADDR_EXP 71
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sMortar := false ;
12715: LD_ADDR_EXP 72
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sRanger := false ;
12723: LD_ADDR_EXP 82
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// end ;
12731: LD_VAR 0 1
12735: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12736: LD_INT 0
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
12742: PPUSH
// result := [ ] ;
12743: LD_ADDR_VAR 0 1
12747: PUSH
12748: EMPTY
12749: ST_TO_ADDR
// if campaign_id = 1 then
12750: LD_OWVAR 69
12754: PUSH
12755: LD_INT 1
12757: EQUAL
12758: IFFALSE 15696
// begin case mission_number of 1 :
12760: LD_OWVAR 70
12764: PUSH
12765: LD_INT 1
12767: DOUBLE
12768: EQUAL
12769: IFTRUE 12773
12771: GO 12837
12773: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12774: LD_ADDR_VAR 0 1
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: LD_INT 4
12784: PUSH
12785: LD_INT 11
12787: PUSH
12788: LD_INT 12
12790: PUSH
12791: LD_INT 15
12793: PUSH
12794: LD_INT 16
12796: PUSH
12797: LD_INT 22
12799: PUSH
12800: LD_INT 23
12802: PUSH
12803: LD_INT 26
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 101
12819: PUSH
12820: LD_INT 102
12822: PUSH
12823: LD_INT 106
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: ST_TO_ADDR
12835: GO 15694
12837: LD_INT 2
12839: DOUBLE
12840: EQUAL
12841: IFTRUE 12845
12843: GO 12917
12845: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12846: LD_ADDR_VAR 0 1
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: LD_INT 4
12856: PUSH
12857: LD_INT 11
12859: PUSH
12860: LD_INT 12
12862: PUSH
12863: LD_INT 15
12865: PUSH
12866: LD_INT 16
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_INT 23
12874: PUSH
12875: LD_INT 26
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 101
12891: PUSH
12892: LD_INT 102
12894: PUSH
12895: LD_INT 105
12897: PUSH
12898: LD_INT 106
12900: PUSH
12901: LD_INT 108
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: ST_TO_ADDR
12915: GO 15694
12917: LD_INT 3
12919: DOUBLE
12920: EQUAL
12921: IFTRUE 12925
12923: GO 13001
12925: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: LD_INT 5
12939: PUSH
12940: LD_INT 11
12942: PUSH
12943: LD_INT 12
12945: PUSH
12946: LD_INT 15
12948: PUSH
12949: LD_INT 16
12951: PUSH
12952: LD_INT 22
12954: PUSH
12955: LD_INT 26
12957: PUSH
12958: LD_INT 36
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 101
12975: PUSH
12976: LD_INT 102
12978: PUSH
12979: LD_INT 105
12981: PUSH
12982: LD_INT 106
12984: PUSH
12985: LD_INT 108
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: ST_TO_ADDR
12999: GO 15694
13001: LD_INT 4
13003: DOUBLE
13004: EQUAL
13005: IFTRUE 13009
13007: GO 13093
13009: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13010: LD_ADDR_VAR 0 1
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 8
13026: PUSH
13027: LD_INT 11
13029: PUSH
13030: LD_INT 12
13032: PUSH
13033: LD_INT 15
13035: PUSH
13036: LD_INT 16
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 23
13044: PUSH
13045: LD_INT 26
13047: PUSH
13048: LD_INT 36
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 101
13067: PUSH
13068: LD_INT 102
13070: PUSH
13071: LD_INT 105
13073: PUSH
13074: LD_INT 106
13076: PUSH
13077: LD_INT 108
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 15694
13093: LD_INT 5
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13201
13101: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13102: LD_ADDR_VAR 0 1
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 4
13112: PUSH
13113: LD_INT 5
13115: PUSH
13116: LD_INT 6
13118: PUSH
13119: LD_INT 8
13121: PUSH
13122: LD_INT 11
13124: PUSH
13125: LD_INT 12
13127: PUSH
13128: LD_INT 15
13130: PUSH
13131: LD_INT 16
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 23
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 26
13145: PUSH
13146: LD_INT 36
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 101
13167: PUSH
13168: LD_INT 102
13170: PUSH
13171: LD_INT 105
13173: PUSH
13174: LD_INT 106
13176: PUSH
13177: LD_INT 108
13179: PUSH
13180: LD_INT 109
13182: PUSH
13183: LD_INT 112
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: ST_TO_ADDR
13199: GO 15694
13201: LD_INT 6
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13329
13209: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13210: LD_ADDR_VAR 0 1
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: LD_INT 4
13220: PUSH
13221: LD_INT 5
13223: PUSH
13224: LD_INT 6
13226: PUSH
13227: LD_INT 8
13229: PUSH
13230: LD_INT 11
13232: PUSH
13233: LD_INT 12
13235: PUSH
13236: LD_INT 15
13238: PUSH
13239: LD_INT 16
13241: PUSH
13242: LD_INT 20
13244: PUSH
13245: LD_INT 21
13247: PUSH
13248: LD_INT 22
13250: PUSH
13251: LD_INT 23
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 26
13259: PUSH
13260: LD_INT 30
13262: PUSH
13263: LD_INT 31
13265: PUSH
13266: LD_INT 32
13268: PUSH
13269: LD_INT 36
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 105
13301: PUSH
13302: LD_INT 106
13304: PUSH
13305: LD_INT 108
13307: PUSH
13308: LD_INT 109
13310: PUSH
13311: LD_INT 112
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: ST_TO_ADDR
13327: GO 15694
13329: LD_INT 7
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13437
13337: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13338: LD_ADDR_VAR 0 1
13342: PUSH
13343: LD_INT 2
13345: PUSH
13346: LD_INT 4
13348: PUSH
13349: LD_INT 5
13351: PUSH
13352: LD_INT 7
13354: PUSH
13355: LD_INT 11
13357: PUSH
13358: LD_INT 12
13360: PUSH
13361: LD_INT 15
13363: PUSH
13364: LD_INT 16
13366: PUSH
13367: LD_INT 20
13369: PUSH
13370: LD_INT 21
13372: PUSH
13373: LD_INT 22
13375: PUSH
13376: LD_INT 23
13378: PUSH
13379: LD_INT 25
13381: PUSH
13382: LD_INT 26
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 101
13403: PUSH
13404: LD_INT 102
13406: PUSH
13407: LD_INT 103
13409: PUSH
13410: LD_INT 105
13412: PUSH
13413: LD_INT 106
13415: PUSH
13416: LD_INT 108
13418: PUSH
13419: LD_INT 112
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: ST_TO_ADDR
13435: GO 15694
13437: LD_INT 8
13439: DOUBLE
13440: EQUAL
13441: IFTRUE 13445
13443: GO 13573
13445: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13446: LD_ADDR_VAR 0 1
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 4
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: LD_INT 6
13462: PUSH
13463: LD_INT 7
13465: PUSH
13466: LD_INT 8
13468: PUSH
13469: LD_INT 11
13471: PUSH
13472: LD_INT 12
13474: PUSH
13475: LD_INT 15
13477: PUSH
13478: LD_INT 16
13480: PUSH
13481: LD_INT 20
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 23
13492: PUSH
13493: LD_INT 25
13495: PUSH
13496: LD_INT 26
13498: PUSH
13499: LD_INT 30
13501: PUSH
13502: LD_INT 31
13504: PUSH
13505: LD_INT 32
13507: PUSH
13508: LD_INT 36
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 101
13535: PUSH
13536: LD_INT 102
13538: PUSH
13539: LD_INT 103
13541: PUSH
13542: LD_INT 105
13544: PUSH
13545: LD_INT 106
13547: PUSH
13548: LD_INT 108
13550: PUSH
13551: LD_INT 109
13553: PUSH
13554: LD_INT 112
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: ST_TO_ADDR
13571: GO 15694
13573: LD_INT 9
13575: DOUBLE
13576: EQUAL
13577: IFTRUE 13581
13579: GO 13717
13581: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 4
13592: PUSH
13593: LD_INT 5
13595: PUSH
13596: LD_INT 6
13598: PUSH
13599: LD_INT 7
13601: PUSH
13602: LD_INT 8
13604: PUSH
13605: LD_INT 11
13607: PUSH
13608: LD_INT 12
13610: PUSH
13611: LD_INT 15
13613: PUSH
13614: LD_INT 16
13616: PUSH
13617: LD_INT 20
13619: PUSH
13620: LD_INT 21
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_INT 23
13628: PUSH
13629: LD_INT 25
13631: PUSH
13632: LD_INT 26
13634: PUSH
13635: LD_INT 28
13637: PUSH
13638: LD_INT 30
13640: PUSH
13641: LD_INT 31
13643: PUSH
13644: LD_INT 32
13646: PUSH
13647: LD_INT 36
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 103
13681: PUSH
13682: LD_INT 105
13684: PUSH
13685: LD_INT 106
13687: PUSH
13688: LD_INT 108
13690: PUSH
13691: LD_INT 109
13693: PUSH
13694: LD_INT 112
13696: PUSH
13697: LD_INT 114
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: ST_TO_ADDR
13715: GO 15694
13717: LD_INT 10
13719: DOUBLE
13720: EQUAL
13721: IFTRUE 13725
13723: GO 13909
13725: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13726: LD_ADDR_VAR 0 1
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 4
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: LD_INT 6
13742: PUSH
13743: LD_INT 7
13745: PUSH
13746: LD_INT 8
13748: PUSH
13749: LD_INT 9
13751: PUSH
13752: LD_INT 10
13754: PUSH
13755: LD_INT 11
13757: PUSH
13758: LD_INT 12
13760: PUSH
13761: LD_INT 13
13763: PUSH
13764: LD_INT 14
13766: PUSH
13767: LD_INT 15
13769: PUSH
13770: LD_INT 16
13772: PUSH
13773: LD_INT 17
13775: PUSH
13776: LD_INT 18
13778: PUSH
13779: LD_INT 19
13781: PUSH
13782: LD_INT 20
13784: PUSH
13785: LD_INT 21
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_INT 23
13793: PUSH
13794: LD_INT 24
13796: PUSH
13797: LD_INT 25
13799: PUSH
13800: LD_INT 26
13802: PUSH
13803: LD_INT 28
13805: PUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 31
13811: PUSH
13812: LD_INT 32
13814: PUSH
13815: LD_INT 36
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 101
13851: PUSH
13852: LD_INT 102
13854: PUSH
13855: LD_INT 103
13857: PUSH
13858: LD_INT 104
13860: PUSH
13861: LD_INT 105
13863: PUSH
13864: LD_INT 106
13866: PUSH
13867: LD_INT 107
13869: PUSH
13870: LD_INT 108
13872: PUSH
13873: LD_INT 109
13875: PUSH
13876: LD_INT 110
13878: PUSH
13879: LD_INT 111
13881: PUSH
13882: LD_INT 112
13884: PUSH
13885: LD_INT 114
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: ST_TO_ADDR
13907: GO 15694
13909: LD_INT 11
13911: DOUBLE
13912: EQUAL
13913: IFTRUE 13917
13915: GO 14109
13917: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13918: LD_ADDR_VAR 0 1
13922: PUSH
13923: LD_INT 2
13925: PUSH
13926: LD_INT 3
13928: PUSH
13929: LD_INT 4
13931: PUSH
13932: LD_INT 5
13934: PUSH
13935: LD_INT 6
13937: PUSH
13938: LD_INT 7
13940: PUSH
13941: LD_INT 8
13943: PUSH
13944: LD_INT 9
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 12
13955: PUSH
13956: LD_INT 13
13958: PUSH
13959: LD_INT 14
13961: PUSH
13962: LD_INT 15
13964: PUSH
13965: LD_INT 16
13967: PUSH
13968: LD_INT 17
13970: PUSH
13971: LD_INT 18
13973: PUSH
13974: LD_INT 19
13976: PUSH
13977: LD_INT 20
13979: PUSH
13980: LD_INT 21
13982: PUSH
13983: LD_INT 22
13985: PUSH
13986: LD_INT 23
13988: PUSH
13989: LD_INT 24
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 26
13997: PUSH
13998: LD_INT 28
14000: PUSH
14001: LD_INT 30
14003: PUSH
14004: LD_INT 31
14006: PUSH
14007: LD_INT 32
14009: PUSH
14010: LD_INT 34
14012: PUSH
14013: LD_INT 36
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 101
14051: PUSH
14052: LD_INT 102
14054: PUSH
14055: LD_INT 103
14057: PUSH
14058: LD_INT 104
14060: PUSH
14061: LD_INT 105
14063: PUSH
14064: LD_INT 106
14066: PUSH
14067: LD_INT 107
14069: PUSH
14070: LD_INT 108
14072: PUSH
14073: LD_INT 109
14075: PUSH
14076: LD_INT 110
14078: PUSH
14079: LD_INT 111
14081: PUSH
14082: LD_INT 112
14084: PUSH
14085: LD_INT 114
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: ST_TO_ADDR
14107: GO 15694
14109: LD_INT 12
14111: DOUBLE
14112: EQUAL
14113: IFTRUE 14117
14115: GO 14325
14117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14118: LD_ADDR_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: LD_INT 4
14134: PUSH
14135: LD_INT 5
14137: PUSH
14138: LD_INT 6
14140: PUSH
14141: LD_INT 7
14143: PUSH
14144: LD_INT 8
14146: PUSH
14147: LD_INT 9
14149: PUSH
14150: LD_INT 10
14152: PUSH
14153: LD_INT 11
14155: PUSH
14156: LD_INT 12
14158: PUSH
14159: LD_INT 13
14161: PUSH
14162: LD_INT 14
14164: PUSH
14165: LD_INT 15
14167: PUSH
14168: LD_INT 16
14170: PUSH
14171: LD_INT 17
14173: PUSH
14174: LD_INT 18
14176: PUSH
14177: LD_INT 19
14179: PUSH
14180: LD_INT 20
14182: PUSH
14183: LD_INT 21
14185: PUSH
14186: LD_INT 22
14188: PUSH
14189: LD_INT 23
14191: PUSH
14192: LD_INT 24
14194: PUSH
14195: LD_INT 25
14197: PUSH
14198: LD_INT 26
14200: PUSH
14201: LD_INT 27
14203: PUSH
14204: LD_INT 28
14206: PUSH
14207: LD_INT 30
14209: PUSH
14210: LD_INT 31
14212: PUSH
14213: LD_INT 32
14215: PUSH
14216: LD_INT 33
14218: PUSH
14219: LD_INT 34
14221: PUSH
14222: LD_INT 36
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 101
14263: PUSH
14264: LD_INT 102
14266: PUSH
14267: LD_INT 103
14269: PUSH
14270: LD_INT 104
14272: PUSH
14273: LD_INT 105
14275: PUSH
14276: LD_INT 106
14278: PUSH
14279: LD_INT 107
14281: PUSH
14282: LD_INT 108
14284: PUSH
14285: LD_INT 109
14287: PUSH
14288: LD_INT 110
14290: PUSH
14291: LD_INT 111
14293: PUSH
14294: LD_INT 112
14296: PUSH
14297: LD_INT 113
14299: PUSH
14300: LD_INT 114
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: ST_TO_ADDR
14323: GO 15694
14325: LD_INT 13
14327: DOUBLE
14328: EQUAL
14329: IFTRUE 14333
14331: GO 14529
14333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14334: LD_ADDR_VAR 0 1
14338: PUSH
14339: LD_INT 1
14341: PUSH
14342: LD_INT 2
14344: PUSH
14345: LD_INT 3
14347: PUSH
14348: LD_INT 4
14350: PUSH
14351: LD_INT 5
14353: PUSH
14354: LD_INT 8
14356: PUSH
14357: LD_INT 9
14359: PUSH
14360: LD_INT 10
14362: PUSH
14363: LD_INT 11
14365: PUSH
14366: LD_INT 12
14368: PUSH
14369: LD_INT 14
14371: PUSH
14372: LD_INT 15
14374: PUSH
14375: LD_INT 16
14377: PUSH
14378: LD_INT 17
14380: PUSH
14381: LD_INT 18
14383: PUSH
14384: LD_INT 19
14386: PUSH
14387: LD_INT 20
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: LD_INT 23
14398: PUSH
14399: LD_INT 24
14401: PUSH
14402: LD_INT 25
14404: PUSH
14405: LD_INT 26
14407: PUSH
14408: LD_INT 27
14410: PUSH
14411: LD_INT 28
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: LD_INT 31
14419: PUSH
14420: LD_INT 32
14422: PUSH
14423: LD_INT 33
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 36
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 101
14467: PUSH
14468: LD_INT 102
14470: PUSH
14471: LD_INT 103
14473: PUSH
14474: LD_INT 104
14476: PUSH
14477: LD_INT 105
14479: PUSH
14480: LD_INT 106
14482: PUSH
14483: LD_INT 107
14485: PUSH
14486: LD_INT 108
14488: PUSH
14489: LD_INT 109
14491: PUSH
14492: LD_INT 110
14494: PUSH
14495: LD_INT 111
14497: PUSH
14498: LD_INT 112
14500: PUSH
14501: LD_INT 113
14503: PUSH
14504: LD_INT 114
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: ST_TO_ADDR
14527: GO 15694
14529: LD_INT 14
14531: DOUBLE
14532: EQUAL
14533: IFTRUE 14537
14535: GO 14749
14537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14538: LD_ADDR_VAR 0 1
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: LD_INT 2
14548: PUSH
14549: LD_INT 3
14551: PUSH
14552: LD_INT 4
14554: PUSH
14555: LD_INT 5
14557: PUSH
14558: LD_INT 6
14560: PUSH
14561: LD_INT 7
14563: PUSH
14564: LD_INT 8
14566: PUSH
14567: LD_INT 9
14569: PUSH
14570: LD_INT 10
14572: PUSH
14573: LD_INT 11
14575: PUSH
14576: LD_INT 12
14578: PUSH
14579: LD_INT 13
14581: PUSH
14582: LD_INT 14
14584: PUSH
14585: LD_INT 15
14587: PUSH
14588: LD_INT 16
14590: PUSH
14591: LD_INT 17
14593: PUSH
14594: LD_INT 18
14596: PUSH
14597: LD_INT 19
14599: PUSH
14600: LD_INT 20
14602: PUSH
14603: LD_INT 21
14605: PUSH
14606: LD_INT 22
14608: PUSH
14609: LD_INT 23
14611: PUSH
14612: LD_INT 24
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 26
14620: PUSH
14621: LD_INT 27
14623: PUSH
14624: LD_INT 28
14626: PUSH
14627: LD_INT 29
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 31
14635: PUSH
14636: LD_INT 32
14638: PUSH
14639: LD_INT 33
14641: PUSH
14642: LD_INT 34
14644: PUSH
14645: LD_INT 36
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 101
14687: PUSH
14688: LD_INT 102
14690: PUSH
14691: LD_INT 103
14693: PUSH
14694: LD_INT 104
14696: PUSH
14697: LD_INT 105
14699: PUSH
14700: LD_INT 106
14702: PUSH
14703: LD_INT 107
14705: PUSH
14706: LD_INT 108
14708: PUSH
14709: LD_INT 109
14711: PUSH
14712: LD_INT 110
14714: PUSH
14715: LD_INT 111
14717: PUSH
14718: LD_INT 112
14720: PUSH
14721: LD_INT 113
14723: PUSH
14724: LD_INT 114
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: ST_TO_ADDR
14747: GO 15694
14749: LD_INT 15
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14757
14755: GO 14969
14757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14758: LD_ADDR_VAR 0 1
14762: PUSH
14763: LD_INT 1
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: LD_INT 4
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: LD_INT 6
14780: PUSH
14781: LD_INT 7
14783: PUSH
14784: LD_INT 8
14786: PUSH
14787: LD_INT 9
14789: PUSH
14790: LD_INT 10
14792: PUSH
14793: LD_INT 11
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 13
14801: PUSH
14802: LD_INT 14
14804: PUSH
14805: LD_INT 15
14807: PUSH
14808: LD_INT 16
14810: PUSH
14811: LD_INT 17
14813: PUSH
14814: LD_INT 18
14816: PUSH
14817: LD_INT 19
14819: PUSH
14820: LD_INT 20
14822: PUSH
14823: LD_INT 21
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_INT 23
14831: PUSH
14832: LD_INT 24
14834: PUSH
14835: LD_INT 25
14837: PUSH
14838: LD_INT 26
14840: PUSH
14841: LD_INT 27
14843: PUSH
14844: LD_INT 28
14846: PUSH
14847: LD_INT 29
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 31
14855: PUSH
14856: LD_INT 32
14858: PUSH
14859: LD_INT 33
14861: PUSH
14862: LD_INT 34
14864: PUSH
14865: LD_INT 36
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 101
14907: PUSH
14908: LD_INT 102
14910: PUSH
14911: LD_INT 103
14913: PUSH
14914: LD_INT 104
14916: PUSH
14917: LD_INT 105
14919: PUSH
14920: LD_INT 106
14922: PUSH
14923: LD_INT 107
14925: PUSH
14926: LD_INT 108
14928: PUSH
14929: LD_INT 109
14931: PUSH
14932: LD_INT 110
14934: PUSH
14935: LD_INT 111
14937: PUSH
14938: LD_INT 112
14940: PUSH
14941: LD_INT 113
14943: PUSH
14944: LD_INT 114
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: ST_TO_ADDR
14967: GO 15694
14969: LD_INT 16
14971: DOUBLE
14972: EQUAL
14973: IFTRUE 14977
14975: GO 15101
14977: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14978: LD_ADDR_VAR 0 1
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: LD_INT 4
14988: PUSH
14989: LD_INT 5
14991: PUSH
14992: LD_INT 7
14994: PUSH
14995: LD_INT 11
14997: PUSH
14998: LD_INT 12
15000: PUSH
15001: LD_INT 15
15003: PUSH
15004: LD_INT 16
15006: PUSH
15007: LD_INT 20
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_INT 23
15018: PUSH
15019: LD_INT 25
15021: PUSH
15022: LD_INT 26
15024: PUSH
15025: LD_INT 30
15027: PUSH
15028: LD_INT 31
15030: PUSH
15031: LD_INT 32
15033: PUSH
15034: LD_INT 33
15036: PUSH
15037: LD_INT 34
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 101
15063: PUSH
15064: LD_INT 102
15066: PUSH
15067: LD_INT 103
15069: PUSH
15070: LD_INT 106
15072: PUSH
15073: LD_INT 108
15075: PUSH
15076: LD_INT 112
15078: PUSH
15079: LD_INT 113
15081: PUSH
15082: LD_INT 114
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
15099: GO 15694
15101: LD_INT 17
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15321
15109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15110: LD_ADDR_VAR 0 1
15114: PUSH
15115: LD_INT 1
15117: PUSH
15118: LD_INT 2
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: LD_INT 4
15126: PUSH
15127: LD_INT 5
15129: PUSH
15130: LD_INT 6
15132: PUSH
15133: LD_INT 7
15135: PUSH
15136: LD_INT 8
15138: PUSH
15139: LD_INT 9
15141: PUSH
15142: LD_INT 10
15144: PUSH
15145: LD_INT 11
15147: PUSH
15148: LD_INT 12
15150: PUSH
15151: LD_INT 13
15153: PUSH
15154: LD_INT 14
15156: PUSH
15157: LD_INT 15
15159: PUSH
15160: LD_INT 16
15162: PUSH
15163: LD_INT 17
15165: PUSH
15166: LD_INT 18
15168: PUSH
15169: LD_INT 19
15171: PUSH
15172: LD_INT 20
15174: PUSH
15175: LD_INT 21
15177: PUSH
15178: LD_INT 22
15180: PUSH
15181: LD_INT 23
15183: PUSH
15184: LD_INT 24
15186: PUSH
15187: LD_INT 25
15189: PUSH
15190: LD_INT 26
15192: PUSH
15193: LD_INT 27
15195: PUSH
15196: LD_INT 28
15198: PUSH
15199: LD_INT 29
15201: PUSH
15202: LD_INT 30
15204: PUSH
15205: LD_INT 31
15207: PUSH
15208: LD_INT 32
15210: PUSH
15211: LD_INT 33
15213: PUSH
15214: LD_INT 34
15216: PUSH
15217: LD_INT 36
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 101
15259: PUSH
15260: LD_INT 102
15262: PUSH
15263: LD_INT 103
15265: PUSH
15266: LD_INT 104
15268: PUSH
15269: LD_INT 105
15271: PUSH
15272: LD_INT 106
15274: PUSH
15275: LD_INT 107
15277: PUSH
15278: LD_INT 108
15280: PUSH
15281: LD_INT 109
15283: PUSH
15284: LD_INT 110
15286: PUSH
15287: LD_INT 111
15289: PUSH
15290: LD_INT 112
15292: PUSH
15293: LD_INT 113
15295: PUSH
15296: LD_INT 114
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: ST_TO_ADDR
15319: GO 15694
15321: LD_INT 18
15323: DOUBLE
15324: EQUAL
15325: IFTRUE 15329
15327: GO 15465
15329: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 4
15340: PUSH
15341: LD_INT 5
15343: PUSH
15344: LD_INT 7
15346: PUSH
15347: LD_INT 11
15349: PUSH
15350: LD_INT 12
15352: PUSH
15353: LD_INT 15
15355: PUSH
15356: LD_INT 16
15358: PUSH
15359: LD_INT 20
15361: PUSH
15362: LD_INT 21
15364: PUSH
15365: LD_INT 22
15367: PUSH
15368: LD_INT 23
15370: PUSH
15371: LD_INT 25
15373: PUSH
15374: LD_INT 26
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 31
15382: PUSH
15383: LD_INT 32
15385: PUSH
15386: LD_INT 33
15388: PUSH
15389: LD_INT 34
15391: PUSH
15392: LD_INT 35
15394: PUSH
15395: LD_INT 36
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 101
15423: PUSH
15424: LD_INT 102
15426: PUSH
15427: LD_INT 103
15429: PUSH
15430: LD_INT 106
15432: PUSH
15433: LD_INT 108
15435: PUSH
15436: LD_INT 112
15438: PUSH
15439: LD_INT 113
15441: PUSH
15442: LD_INT 114
15444: PUSH
15445: LD_INT 115
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: ST_TO_ADDR
15463: GO 15694
15465: LD_INT 19
15467: DOUBLE
15468: EQUAL
15469: IFTRUE 15473
15471: GO 15693
15473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15474: LD_ADDR_VAR 0 1
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 4
15490: PUSH
15491: LD_INT 5
15493: PUSH
15494: LD_INT 6
15496: PUSH
15497: LD_INT 7
15499: PUSH
15500: LD_INT 8
15502: PUSH
15503: LD_INT 9
15505: PUSH
15506: LD_INT 10
15508: PUSH
15509: LD_INT 11
15511: PUSH
15512: LD_INT 12
15514: PUSH
15515: LD_INT 13
15517: PUSH
15518: LD_INT 14
15520: PUSH
15521: LD_INT 15
15523: PUSH
15524: LD_INT 16
15526: PUSH
15527: LD_INT 17
15529: PUSH
15530: LD_INT 18
15532: PUSH
15533: LD_INT 19
15535: PUSH
15536: LD_INT 20
15538: PUSH
15539: LD_INT 21
15541: PUSH
15542: LD_INT 22
15544: PUSH
15545: LD_INT 23
15547: PUSH
15548: LD_INT 24
15550: PUSH
15551: LD_INT 25
15553: PUSH
15554: LD_INT 26
15556: PUSH
15557: LD_INT 27
15559: PUSH
15560: LD_INT 28
15562: PUSH
15563: LD_INT 29
15565: PUSH
15566: LD_INT 30
15568: PUSH
15569: LD_INT 31
15571: PUSH
15572: LD_INT 32
15574: PUSH
15575: LD_INT 33
15577: PUSH
15578: LD_INT 34
15580: PUSH
15581: LD_INT 35
15583: PUSH
15584: LD_INT 36
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 101
15627: PUSH
15628: LD_INT 102
15630: PUSH
15631: LD_INT 103
15633: PUSH
15634: LD_INT 104
15636: PUSH
15637: LD_INT 105
15639: PUSH
15640: LD_INT 106
15642: PUSH
15643: LD_INT 107
15645: PUSH
15646: LD_INT 108
15648: PUSH
15649: LD_INT 109
15651: PUSH
15652: LD_INT 110
15654: PUSH
15655: LD_INT 111
15657: PUSH
15658: LD_INT 112
15660: PUSH
15661: LD_INT 113
15663: PUSH
15664: LD_INT 114
15666: PUSH
15667: LD_INT 115
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
15691: GO 15694
15693: POP
// end else
15694: GO 15913
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15696: LD_ADDR_VAR 0 1
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: LD_INT 3
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 6
15718: PUSH
15719: LD_INT 7
15721: PUSH
15722: LD_INT 8
15724: PUSH
15725: LD_INT 9
15727: PUSH
15728: LD_INT 10
15730: PUSH
15731: LD_INT 11
15733: PUSH
15734: LD_INT 12
15736: PUSH
15737: LD_INT 13
15739: PUSH
15740: LD_INT 14
15742: PUSH
15743: LD_INT 15
15745: PUSH
15746: LD_INT 16
15748: PUSH
15749: LD_INT 17
15751: PUSH
15752: LD_INT 18
15754: PUSH
15755: LD_INT 19
15757: PUSH
15758: LD_INT 20
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 22
15766: PUSH
15767: LD_INT 23
15769: PUSH
15770: LD_INT 24
15772: PUSH
15773: LD_INT 25
15775: PUSH
15776: LD_INT 26
15778: PUSH
15779: LD_INT 27
15781: PUSH
15782: LD_INT 28
15784: PUSH
15785: LD_INT 29
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 31
15793: PUSH
15794: LD_INT 32
15796: PUSH
15797: LD_INT 33
15799: PUSH
15800: LD_INT 34
15802: PUSH
15803: LD_INT 35
15805: PUSH
15806: LD_INT 36
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 101
15849: PUSH
15850: LD_INT 102
15852: PUSH
15853: LD_INT 103
15855: PUSH
15856: LD_INT 104
15858: PUSH
15859: LD_INT 105
15861: PUSH
15862: LD_INT 106
15864: PUSH
15865: LD_INT 107
15867: PUSH
15868: LD_INT 108
15870: PUSH
15871: LD_INT 109
15873: PUSH
15874: LD_INT 110
15876: PUSH
15877: LD_INT 111
15879: PUSH
15880: LD_INT 112
15882: PUSH
15883: LD_INT 113
15885: PUSH
15886: LD_INT 114
15888: PUSH
15889: LD_INT 115
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: ST_TO_ADDR
// if result then
15913: LD_VAR 0 1
15917: IFFALSE 16206
// begin normal :=  ;
15919: LD_ADDR_VAR 0 3
15923: PUSH
15924: LD_STRING 
15926: ST_TO_ADDR
// hardcore :=  ;
15927: LD_ADDR_VAR 0 4
15931: PUSH
15932: LD_STRING 
15934: ST_TO_ADDR
// for i = 1 to normalCounter do
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: DOUBLE
15941: LD_INT 1
15943: DEC
15944: ST_TO_ADDR
15945: LD_EXP 30
15949: PUSH
15950: FOR_TO
15951: IFFALSE 16052
// begin tmp := 0 ;
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: LD_STRING 0
15960: ST_TO_ADDR
// if result [ 1 ] then
15961: LD_VAR 0 1
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: IFFALSE 16034
// if result [ 1 ] [ 1 ] = i then
15971: LD_VAR 0 1
15975: PUSH
15976: LD_INT 1
15978: ARRAY
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PUSH
15984: LD_VAR 0 5
15988: EQUAL
15989: IFFALSE 16034
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: LD_VAR 0 1
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 3
16020: PPUSH
16021: CALL_OW 1
16025: ST_TO_ADDR
// tmp := 1 ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_STRING 1
16033: ST_TO_ADDR
// end ; normal := normal & tmp ;
16034: LD_ADDR_VAR 0 3
16038: PUSH
16039: LD_VAR 0 3
16043: PUSH
16044: LD_VAR 0 2
16048: STR
16049: ST_TO_ADDR
// end ;
16050: GO 15950
16052: POP
16053: POP
// for i = 1 to hardcoreCounter do
16054: LD_ADDR_VAR 0 5
16058: PUSH
16059: DOUBLE
16060: LD_INT 1
16062: DEC
16063: ST_TO_ADDR
16064: LD_EXP 31
16068: PUSH
16069: FOR_TO
16070: IFFALSE 16175
// begin tmp := 0 ;
16072: LD_ADDR_VAR 0 2
16076: PUSH
16077: LD_STRING 0
16079: ST_TO_ADDR
// if result [ 2 ] then
16080: LD_VAR 0 1
16084: PUSH
16085: LD_INT 2
16087: ARRAY
16088: IFFALSE 16157
// if result [ 2 ] [ 1 ] = 100 + i then
16090: LD_VAR 0 1
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PUSH
16103: LD_INT 100
16105: PUSH
16106: LD_VAR 0 5
16110: PLUS
16111: EQUAL
16112: IFFALSE 16157
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16114: LD_ADDR_VAR 0 1
16118: PUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_INT 2
16126: PPUSH
16127: LD_VAR 0 1
16131: PUSH
16132: LD_INT 2
16134: ARRAY
16135: PPUSH
16136: LD_INT 1
16138: PPUSH
16139: CALL_OW 3
16143: PPUSH
16144: CALL_OW 1
16148: ST_TO_ADDR
// tmp := 1 ;
16149: LD_ADDR_VAR 0 2
16153: PUSH
16154: LD_STRING 1
16156: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16157: LD_ADDR_VAR 0 4
16161: PUSH
16162: LD_VAR 0 4
16166: PUSH
16167: LD_VAR 0 2
16171: STR
16172: ST_TO_ADDR
// end ;
16173: GO 16069
16175: POP
16176: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16177: LD_STRING getStreamItemsFromMission("
16179: PUSH
16180: LD_VAR 0 3
16184: STR
16185: PUSH
16186: LD_STRING ","
16188: STR
16189: PUSH
16190: LD_VAR 0 4
16194: STR
16195: PUSH
16196: LD_STRING ")
16198: STR
16199: PPUSH
16200: CALL_OW 559
// end else
16204: GO 16213
// ToLua ( getStreamItemsFromMission("","") ) ;
16206: LD_STRING getStreamItemsFromMission("","")
16208: PPUSH
16209: CALL_OW 559
// end ;
16213: LD_VAR 0 1
16217: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16218: LD_EXP 29
16222: PUSH
16223: LD_EXP 34
16227: AND
16228: IFFALSE 16352
16230: GO 16232
16232: DISABLE
16233: LD_INT 0
16235: PPUSH
16236: PPUSH
// begin enable ;
16237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16238: LD_ADDR_VAR 0 2
16242: PUSH
16243: LD_INT 22
16245: PUSH
16246: LD_OWVAR 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 34
16260: PUSH
16261: LD_INT 7
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 34
16270: PUSH
16271: LD_INT 45
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 34
16280: PUSH
16281: LD_INT 28
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 34
16290: PUSH
16291: LD_INT 47
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: ST_TO_ADDR
// if not tmp then
16314: LD_VAR 0 2
16318: NOT
16319: IFFALSE 16323
// exit ;
16321: GO 16352
// for i in tmp do
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: LD_VAR 0 2
16332: PUSH
16333: FOR_IN
16334: IFFALSE 16350
// begin SetLives ( i , 0 ) ;
16336: LD_VAR 0 1
16340: PPUSH
16341: LD_INT 0
16343: PPUSH
16344: CALL_OW 234
// end ;
16348: GO 16333
16350: POP
16351: POP
// end ;
16352: PPOPN 2
16354: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16355: LD_EXP 29
16359: PUSH
16360: LD_EXP 35
16364: AND
16365: IFFALSE 16449
16367: GO 16369
16369: DISABLE
16370: LD_INT 0
16372: PPUSH
16373: PPUSH
// begin enable ;
16374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16375: LD_ADDR_VAR 0 2
16379: PUSH
16380: LD_INT 22
16382: PUSH
16383: LD_OWVAR 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 32
16394: PUSH
16395: LD_INT 3
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: ST_TO_ADDR
// if not tmp then
16411: LD_VAR 0 2
16415: NOT
16416: IFFALSE 16420
// exit ;
16418: GO 16449
// for i in tmp do
16420: LD_ADDR_VAR 0 1
16424: PUSH
16425: LD_VAR 0 2
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16447
// begin SetLives ( i , 0 ) ;
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_INT 0
16440: PPUSH
16441: CALL_OW 234
// end ;
16445: GO 16430
16447: POP
16448: POP
// end ;
16449: PPOPN 2
16451: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16452: LD_EXP 29
16456: PUSH
16457: LD_EXP 32
16461: AND
16462: IFFALSE 16555
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
// begin enable ;
16470: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16471: LD_ADDR_VAR 0 1
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_OWVAR 2
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 25
16493: PUSH
16494: LD_INT 5
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 25
16503: PUSH
16504: LD_INT 9
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 25
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PPUSH
16531: CALL_OW 69
16535: PUSH
16536: FOR_IN
16537: IFFALSE 16553
// begin SetClass ( i , 1 ) ;
16539: LD_VAR 0 1
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 336
// end ;
16551: GO 16536
16553: POP
16554: POP
// end ;
16555: PPOPN 1
16557: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16558: LD_EXP 29
16562: PUSH
16563: LD_EXP 33
16567: AND
16568: PUSH
16569: LD_OWVAR 65
16573: PUSH
16574: LD_INT 7
16576: LESS
16577: AND
16578: IFFALSE 16592
16580: GO 16582
16582: DISABLE
// begin enable ;
16583: ENABLE
// game_speed := 7 ;
16584: LD_ADDR_OWVAR 65
16588: PUSH
16589: LD_INT 7
16591: ST_TO_ADDR
// end ;
16592: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16593: LD_EXP 29
16597: PUSH
16598: LD_EXP 36
16602: AND
16603: IFFALSE 16805
16605: GO 16607
16607: DISABLE
16608: LD_INT 0
16610: PPUSH
16611: PPUSH
16612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_INT 81
16620: PUSH
16621: LD_OWVAR 2
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 21
16632: PUSH
16633: LD_INT 1
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 69
16648: ST_TO_ADDR
// if not tmp then
16649: LD_VAR 0 3
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 16805
// if tmp > 5 then
16658: LD_VAR 0 3
16662: PUSH
16663: LD_INT 5
16665: GREATER
16666: IFFALSE 16678
// k := 5 else
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_INT 5
16675: ST_TO_ADDR
16676: GO 16688
// k := tmp ;
16678: LD_ADDR_VAR 0 2
16682: PUSH
16683: LD_VAR 0 3
16687: ST_TO_ADDR
// for i := 1 to k do
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: DOUBLE
16694: LD_INT 1
16696: DEC
16697: ST_TO_ADDR
16698: LD_VAR 0 2
16702: PUSH
16703: FOR_TO
16704: IFFALSE 16803
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16706: LD_VAR 0 3
16710: PUSH
16711: LD_VAR 0 1
16715: ARRAY
16716: PPUSH
16717: LD_VAR 0 1
16721: PUSH
16722: LD_INT 4
16724: MOD
16725: PUSH
16726: LD_INT 1
16728: PLUS
16729: PPUSH
16730: CALL_OW 259
16734: PUSH
16735: LD_INT 10
16737: LESS
16738: IFFALSE 16801
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16740: LD_VAR 0 3
16744: PUSH
16745: LD_VAR 0 1
16749: ARRAY
16750: PPUSH
16751: LD_VAR 0 1
16755: PUSH
16756: LD_INT 4
16758: MOD
16759: PUSH
16760: LD_INT 1
16762: PLUS
16763: PPUSH
16764: LD_VAR 0 3
16768: PUSH
16769: LD_VAR 0 1
16773: ARRAY
16774: PPUSH
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 4
16782: MOD
16783: PUSH
16784: LD_INT 1
16786: PLUS
16787: PPUSH
16788: CALL_OW 259
16792: PUSH
16793: LD_INT 1
16795: PLUS
16796: PPUSH
16797: CALL_OW 237
16801: GO 16703
16803: POP
16804: POP
// end ;
16805: PPOPN 3
16807: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16808: LD_EXP 29
16812: PUSH
16813: LD_EXP 37
16817: AND
16818: IFFALSE 16838
16820: GO 16822
16822: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16823: LD_INT 4
16825: PPUSH
16826: LD_OWVAR 2
16830: PPUSH
16831: LD_INT 0
16833: PPUSH
16834: CALL_OW 324
16838: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16839: LD_EXP 29
16843: PUSH
16844: LD_EXP 66
16848: AND
16849: IFFALSE 16869
16851: GO 16853
16853: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16854: LD_INT 19
16856: PPUSH
16857: LD_OWVAR 2
16861: PPUSH
16862: LD_INT 0
16864: PPUSH
16865: CALL_OW 324
16869: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16870: LD_EXP 29
16874: PUSH
16875: LD_EXP 38
16879: AND
16880: IFFALSE 16982
16882: GO 16884
16884: DISABLE
16885: LD_INT 0
16887: PPUSH
16888: PPUSH
// begin enable ;
16889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16890: LD_ADDR_VAR 0 2
16894: PUSH
16895: LD_INT 22
16897: PUSH
16898: LD_OWVAR 2
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 34
16912: PUSH
16913: LD_INT 11
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 34
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: ST_TO_ADDR
// if not tmp then
16944: LD_VAR 0 2
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 16982
// for i in tmp do
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_VAR 0 2
16962: PUSH
16963: FOR_IN
16964: IFFALSE 16980
// begin SetLives ( i , 0 ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_INT 0
16973: PPUSH
16974: CALL_OW 234
// end ;
16978: GO 16963
16980: POP
16981: POP
// end ;
16982: PPOPN 2
16984: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16985: LD_EXP 29
16989: PUSH
16990: LD_EXP 39
16994: AND
16995: IFFALSE 17015
16997: GO 16999
16999: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17000: LD_INT 32
17002: PPUSH
17003: LD_OWVAR 2
17007: PPUSH
17008: LD_INT 0
17010: PPUSH
17011: CALL_OW 324
17015: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17016: LD_EXP 29
17020: PUSH
17021: LD_EXP 40
17025: AND
17026: IFFALSE 17207
17028: GO 17030
17030: DISABLE
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
17035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 22
17043: PUSH
17044: LD_OWVAR 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 33
17055: PUSH
17056: LD_INT 3
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: ST_TO_ADDR
// if not tmp then
17072: LD_VAR 0 2
17076: NOT
17077: IFFALSE 17081
// exit ;
17079: GO 17207
// side := 0 ;
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_INT 0
17088: ST_TO_ADDR
// for i := 1 to 8 do
17089: LD_ADDR_VAR 0 1
17093: PUSH
17094: DOUBLE
17095: LD_INT 1
17097: DEC
17098: ST_TO_ADDR
17099: LD_INT 8
17101: PUSH
17102: FOR_TO
17103: IFFALSE 17151
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17105: LD_OWVAR 2
17109: PUSH
17110: LD_VAR 0 1
17114: NONEQUAL
17115: PUSH
17116: LD_OWVAR 2
17120: PPUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 81
17130: PUSH
17131: LD_INT 2
17133: EQUAL
17134: AND
17135: IFFALSE 17149
// begin side := i ;
17137: LD_ADDR_VAR 0 3
17141: PUSH
17142: LD_VAR 0 1
17146: ST_TO_ADDR
// break ;
17147: GO 17151
// end ;
17149: GO 17102
17151: POP
17152: POP
// if not side then
17153: LD_VAR 0 3
17157: NOT
17158: IFFALSE 17162
// exit ;
17160: GO 17207
// for i := 1 to tmp do
17162: LD_ADDR_VAR 0 1
17166: PUSH
17167: DOUBLE
17168: LD_INT 1
17170: DEC
17171: ST_TO_ADDR
17172: LD_VAR 0 2
17176: PUSH
17177: FOR_TO
17178: IFFALSE 17205
// if Prob ( 60 ) then
17180: LD_INT 60
17182: PPUSH
17183: CALL_OW 13
17187: IFFALSE 17203
// SetSide ( i , side ) ;
17189: LD_VAR 0 1
17193: PPUSH
17194: LD_VAR 0 3
17198: PPUSH
17199: CALL_OW 235
17203: GO 17177
17205: POP
17206: POP
// end ;
17207: PPOPN 3
17209: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17210: LD_EXP 29
17214: PUSH
17215: LD_EXP 42
17219: AND
17220: IFFALSE 17339
17222: GO 17224
17224: DISABLE
17225: LD_INT 0
17227: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17228: LD_ADDR_VAR 0 1
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_OWVAR 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: LD_INT 23
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17337
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 257
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: LD_INT 4
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: IN
17313: IFFALSE 17335
// SetClass ( un , rand ( 1 , 4 ) ) ;
17315: LD_VAR 0 1
17319: PPUSH
17320: LD_INT 1
17322: PPUSH
17323: LD_INT 4
17325: PPUSH
17326: CALL_OW 12
17330: PPUSH
17331: CALL_OW 336
17335: GO 17282
17337: POP
17338: POP
// end ;
17339: PPOPN 1
17341: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17342: LD_EXP 29
17346: PUSH
17347: LD_EXP 41
17351: AND
17352: IFFALSE 17431
17354: GO 17356
17356: DISABLE
17357: LD_INT 0
17359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17360: LD_ADDR_VAR 0 1
17364: PUSH
17365: LD_INT 22
17367: PUSH
17368: LD_OWVAR 2
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 21
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: ST_TO_ADDR
// if not tmp then
17396: LD_VAR 0 1
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17431
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17405: LD_VAR 0 1
17409: PUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 12
17422: ARRAY
17423: PPUSH
17424: LD_INT 100
17426: PPUSH
17427: CALL_OW 234
// end ;
17431: PPOPN 1
17433: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17434: LD_EXP 29
17438: PUSH
17439: LD_EXP 43
17443: AND
17444: IFFALSE 17542
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 22
17459: PUSH
17460: LD_OWVAR 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 21
17471: PUSH
17472: LD_INT 1
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PPUSH
17483: CALL_OW 69
17487: ST_TO_ADDR
// if not tmp then
17488: LD_VAR 0 1
17492: NOT
17493: IFFALSE 17497
// exit ;
17495: GO 17542
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 1
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 12
17514: ARRAY
17515: PPUSH
17516: LD_INT 1
17518: PPUSH
17519: LD_INT 4
17521: PPUSH
17522: CALL_OW 12
17526: PPUSH
17527: LD_INT 3000
17529: PPUSH
17530: LD_INT 9000
17532: PPUSH
17533: CALL_OW 12
17537: PPUSH
17538: CALL_OW 492
// end ;
17542: PPOPN 1
17544: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17545: LD_EXP 29
17549: PUSH
17550: LD_EXP 44
17554: AND
17555: IFFALSE 17575
17557: GO 17559
17559: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17560: LD_INT 1
17562: PPUSH
17563: LD_OWVAR 2
17567: PPUSH
17568: LD_INT 0
17570: PPUSH
17571: CALL_OW 324
17575: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17576: LD_EXP 29
17580: PUSH
17581: LD_EXP 45
17585: AND
17586: IFFALSE 17669
17588: GO 17590
17590: DISABLE
17591: LD_INT 0
17593: PPUSH
17594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17595: LD_ADDR_VAR 0 2
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_OWVAR 2
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 21
17614: PUSH
17615: LD_INT 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PPUSH
17626: CALL_OW 69
17630: ST_TO_ADDR
// if not tmp then
17631: LD_VAR 0 2
17635: NOT
17636: IFFALSE 17640
// exit ;
17638: GO 17669
// for i in tmp do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_VAR 0 2
17649: PUSH
17650: FOR_IN
17651: IFFALSE 17667
// SetBLevel ( i , 10 ) ;
17653: LD_VAR 0 1
17657: PPUSH
17658: LD_INT 10
17660: PPUSH
17661: CALL_OW 241
17665: GO 17650
17667: POP
17668: POP
// end ;
17669: PPOPN 2
17671: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17672: LD_EXP 29
17676: PUSH
17677: LD_EXP 46
17681: AND
17682: IFFALSE 17793
17684: GO 17686
17686: DISABLE
17687: LD_INT 0
17689: PPUSH
17690: PPUSH
17691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17692: LD_ADDR_VAR 0 3
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_OWVAR 2
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 25
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: ST_TO_ADDR
// if not tmp then
17728: LD_VAR 0 3
17732: NOT
17733: IFFALSE 17737
// exit ;
17735: GO 17793
// un := tmp [ rand ( 1 , tmp ) ] ;
17737: LD_ADDR_VAR 0 2
17741: PUSH
17742: LD_VAR 0 3
17746: PUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: CALL_OW 12
17759: ARRAY
17760: ST_TO_ADDR
// if Crawls ( un ) then
17761: LD_VAR 0 2
17765: PPUSH
17766: CALL_OW 318
17770: IFFALSE 17781
// ComWalk ( un ) ;
17772: LD_VAR 0 2
17776: PPUSH
17777: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17781: LD_VAR 0 2
17785: PPUSH
17786: LD_INT 5
17788: PPUSH
17789: CALL_OW 336
// end ;
17793: PPOPN 3
17795: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17796: LD_EXP 29
17800: PUSH
17801: LD_EXP 47
17805: AND
17806: PUSH
17807: LD_OWVAR 67
17811: PUSH
17812: LD_INT 3
17814: LESS
17815: AND
17816: IFFALSE 17835
17818: GO 17820
17820: DISABLE
// Difficulty := Difficulty + 1 ;
17821: LD_ADDR_OWVAR 67
17825: PUSH
17826: LD_OWVAR 67
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
17835: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17836: LD_EXP 29
17840: PUSH
17841: LD_EXP 48
17845: AND
17846: IFFALSE 17949
17848: GO 17850
17850: DISABLE
17851: LD_INT 0
17853: PPUSH
// begin for i := 1 to 5 do
17854: LD_ADDR_VAR 0 1
17858: PUSH
17859: DOUBLE
17860: LD_INT 1
17862: DEC
17863: ST_TO_ADDR
17864: LD_INT 5
17866: PUSH
17867: FOR_TO
17868: IFFALSE 17947
// begin uc_nation := nation_nature ;
17870: LD_ADDR_OWVAR 21
17874: PUSH
17875: LD_INT 0
17877: ST_TO_ADDR
// uc_side := 0 ;
17878: LD_ADDR_OWVAR 20
17882: PUSH
17883: LD_INT 0
17885: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17886: LD_ADDR_OWVAR 29
17890: PUSH
17891: LD_INT 12
17893: PUSH
17894: LD_INT 12
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// hc_agressivity := 20 ;
17901: LD_ADDR_OWVAR 35
17905: PUSH
17906: LD_INT 20
17908: ST_TO_ADDR
// hc_class := class_tiger ;
17909: LD_ADDR_OWVAR 28
17913: PUSH
17914: LD_INT 14
17916: ST_TO_ADDR
// hc_gallery :=  ;
17917: LD_ADDR_OWVAR 33
17921: PUSH
17922: LD_STRING 
17924: ST_TO_ADDR
// hc_name :=  ;
17925: LD_ADDR_OWVAR 26
17929: PUSH
17930: LD_STRING 
17932: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17933: CALL_OW 44
17937: PPUSH
17938: LD_INT 0
17940: PPUSH
17941: CALL_OW 51
// end ;
17945: GO 17867
17947: POP
17948: POP
// end ;
17949: PPOPN 1
17951: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17952: LD_EXP 29
17956: PUSH
17957: LD_EXP 49
17961: AND
17962: IFFALSE 17971
17964: GO 17966
17966: DISABLE
// StreamSibBomb ;
17967: CALL 17972 0 0
17971: END
// export function StreamSibBomb ; var i , x , y ; begin
17972: LD_INT 0
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
// result := false ;
17978: LD_ADDR_VAR 0 1
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// for i := 1 to 16 do
17986: LD_ADDR_VAR 0 2
17990: PUSH
17991: DOUBLE
17992: LD_INT 1
17994: DEC
17995: ST_TO_ADDR
17996: LD_INT 16
17998: PUSH
17999: FOR_TO
18000: IFFALSE 18199
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18002: LD_ADDR_VAR 0 3
18006: PUSH
18007: LD_INT 10
18009: PUSH
18010: LD_INT 20
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 40
18018: PUSH
18019: LD_INT 50
18021: PUSH
18022: LD_INT 60
18024: PUSH
18025: LD_INT 70
18027: PUSH
18028: LD_INT 80
18030: PUSH
18031: LD_INT 90
18033: PUSH
18034: LD_INT 100
18036: PUSH
18037: LD_INT 110
18039: PUSH
18040: LD_INT 120
18042: PUSH
18043: LD_INT 130
18045: PUSH
18046: LD_INT 140
18048: PUSH
18049: LD_INT 150
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: PPUSH
18072: LD_INT 15
18074: PPUSH
18075: CALL_OW 12
18079: ARRAY
18080: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18081: LD_ADDR_VAR 0 4
18085: PUSH
18086: LD_INT 10
18088: PUSH
18089: LD_INT 20
18091: PUSH
18092: LD_INT 30
18094: PUSH
18095: LD_INT 40
18097: PUSH
18098: LD_INT 50
18100: PUSH
18101: LD_INT 60
18103: PUSH
18104: LD_INT 70
18106: PUSH
18107: LD_INT 80
18109: PUSH
18110: LD_INT 90
18112: PUSH
18113: LD_INT 100
18115: PUSH
18116: LD_INT 110
18118: PUSH
18119: LD_INT 120
18121: PUSH
18122: LD_INT 130
18124: PUSH
18125: LD_INT 140
18127: PUSH
18128: LD_INT 150
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: PPUSH
18151: LD_INT 15
18153: PPUSH
18154: CALL_OW 12
18158: ARRAY
18159: ST_TO_ADDR
// if ValidHex ( x , y ) then
18160: LD_VAR 0 3
18164: PPUSH
18165: LD_VAR 0 4
18169: PPUSH
18170: CALL_OW 488
18174: IFFALSE 18197
// begin result := [ x , y ] ;
18176: LD_ADDR_VAR 0 1
18180: PUSH
18181: LD_VAR 0 3
18185: PUSH
18186: LD_VAR 0 4
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: ST_TO_ADDR
// break ;
18195: GO 18199
// end ; end ;
18197: GO 17999
18199: POP
18200: POP
// if result then
18201: LD_VAR 0 1
18205: IFFALSE 18265
// begin ToLua ( playSibBomb() ) ;
18207: LD_STRING playSibBomb()
18209: PPUSH
18210: CALL_OW 559
// wait ( 0 0$14 ) ;
18214: LD_INT 490
18216: PPUSH
18217: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18221: LD_VAR 0 1
18225: PUSH
18226: LD_INT 1
18228: ARRAY
18229: PPUSH
18230: LD_VAR 0 1
18234: PUSH
18235: LD_INT 2
18237: ARRAY
18238: PPUSH
18239: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PPUSH
18252: LD_VAR 0 1
18256: PUSH
18257: LD_INT 2
18259: ARRAY
18260: PPUSH
18261: CALL_OW 429
// end ; end ;
18265: LD_VAR 0 1
18269: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18270: LD_EXP 29
18274: PUSH
18275: LD_EXP 51
18279: AND
18280: IFFALSE 18292
18282: GO 18284
18284: DISABLE
// YouLost (  ) ;
18285: LD_STRING 
18287: PPUSH
18288: CALL_OW 104
18292: END
// every 0 0$1 trigger StreamModeActive and sFog do
18293: LD_EXP 29
18297: PUSH
18298: LD_EXP 50
18302: AND
18303: IFFALSE 18317
18305: GO 18307
18307: DISABLE
// FogOff ( your_side ) ;
18308: LD_OWVAR 2
18312: PPUSH
18313: CALL_OW 344
18317: END
// every 0 0$1 trigger StreamModeActive and sSun do
18318: LD_EXP 29
18322: PUSH
18323: LD_EXP 52
18327: AND
18328: IFFALSE 18356
18330: GO 18332
18332: DISABLE
// begin solar_recharge_percent := 0 ;
18333: LD_ADDR_OWVAR 79
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18341: LD_INT 10500
18343: PPUSH
18344: CALL_OW 67
// solar_recharge_percent := 100 ;
18348: LD_ADDR_OWVAR 79
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// end ;
18356: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18357: LD_EXP 29
18361: PUSH
18362: LD_EXP 53
18366: AND
18367: IFFALSE 18606
18369: GO 18371
18371: DISABLE
18372: LD_INT 0
18374: PPUSH
18375: PPUSH
18376: PPUSH
// begin tmp := [ ] ;
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: EMPTY
18383: ST_TO_ADDR
// for i := 1 to 6 do
18384: LD_ADDR_VAR 0 1
18388: PUSH
18389: DOUBLE
18390: LD_INT 1
18392: DEC
18393: ST_TO_ADDR
18394: LD_INT 6
18396: PUSH
18397: FOR_TO
18398: IFFALSE 18503
// begin uc_nation := nation_nature ;
18400: LD_ADDR_OWVAR 21
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// uc_side := 0 ;
18408: LD_ADDR_OWVAR 20
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18416: LD_ADDR_OWVAR 29
18420: PUSH
18421: LD_INT 12
18423: PUSH
18424: LD_INT 12
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// hc_agressivity := 20 ;
18431: LD_ADDR_OWVAR 35
18435: PUSH
18436: LD_INT 20
18438: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18439: LD_ADDR_OWVAR 28
18443: PUSH
18444: LD_INT 17
18446: ST_TO_ADDR
// hc_gallery :=  ;
18447: LD_ADDR_OWVAR 33
18451: PUSH
18452: LD_STRING 
18454: ST_TO_ADDR
// hc_name :=  ;
18455: LD_ADDR_OWVAR 26
18459: PUSH
18460: LD_STRING 
18462: ST_TO_ADDR
// un := CreateHuman ;
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: CALL_OW 44
18472: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18473: LD_VAR 0 2
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 51
// tmp := tmp ^ un ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_VAR 0 3
18494: PUSH
18495: LD_VAR 0 2
18499: ADD
18500: ST_TO_ADDR
// end ;
18501: GO 18397
18503: POP
18504: POP
// repeat wait ( 0 0$1 ) ;
18505: LD_INT 35
18507: PPUSH
18508: CALL_OW 67
// for un in tmp do
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: LD_VAR 0 3
18521: PUSH
18522: FOR_IN
18523: IFFALSE 18597
// begin if IsDead ( un ) then
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 301
18534: IFFALSE 18554
// begin tmp := tmp diff un ;
18536: LD_ADDR_VAR 0 3
18540: PUSH
18541: LD_VAR 0 3
18545: PUSH
18546: LD_VAR 0 2
18550: DIFF
18551: ST_TO_ADDR
// continue ;
18552: GO 18522
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18554: LD_VAR 0 2
18558: PPUSH
18559: LD_INT 3
18561: PUSH
18562: LD_INT 22
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PPUSH
18581: LD_VAR 0 2
18585: PPUSH
18586: CALL_OW 74
18590: PPUSH
18591: CALL_OW 115
// end ;
18595: GO 18522
18597: POP
18598: POP
// until not tmp ;
18599: LD_VAR 0 3
18603: NOT
18604: IFFALSE 18505
// end ;
18606: PPOPN 3
18608: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18609: LD_EXP 29
18613: PUSH
18614: LD_EXP 54
18618: AND
18619: IFFALSE 18673
18621: GO 18623
18623: DISABLE
// begin ToLua ( displayTroll(); ) ;
18624: LD_STRING displayTroll();
18626: PPUSH
18627: CALL_OW 559
// wait ( 3 3$00 ) ;
18631: LD_INT 6300
18633: PPUSH
18634: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18638: LD_STRING hideTroll();
18640: PPUSH
18641: CALL_OW 559
// wait ( 1 1$00 ) ;
18645: LD_INT 2100
18647: PPUSH
18648: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18652: LD_STRING displayTroll();
18654: PPUSH
18655: CALL_OW 559
// wait ( 1 1$00 ) ;
18659: LD_INT 2100
18661: PPUSH
18662: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18666: LD_STRING hideTroll();
18668: PPUSH
18669: CALL_OW 559
// end ;
18673: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18674: LD_EXP 29
18678: PUSH
18679: LD_EXP 55
18683: AND
18684: IFFALSE 18747
18686: GO 18688
18688: DISABLE
18689: LD_INT 0
18691: PPUSH
// begin p := 0 ;
18692: LD_ADDR_VAR 0 1
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// repeat game_speed := 1 ;
18700: LD_ADDR_OWVAR 65
18704: PUSH
18705: LD_INT 1
18707: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18708: LD_INT 35
18710: PPUSH
18711: CALL_OW 67
// p := p + 1 ;
18715: LD_ADDR_VAR 0 1
18719: PUSH
18720: LD_VAR 0 1
18724: PUSH
18725: LD_INT 1
18727: PLUS
18728: ST_TO_ADDR
// until p >= 60 ;
18729: LD_VAR 0 1
18733: PUSH
18734: LD_INT 60
18736: GREATEREQUAL
18737: IFFALSE 18700
// game_speed := 4 ;
18739: LD_ADDR_OWVAR 65
18743: PUSH
18744: LD_INT 4
18746: ST_TO_ADDR
// end ;
18747: PPOPN 1
18749: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18750: LD_EXP 29
18754: PUSH
18755: LD_EXP 56
18759: AND
18760: IFFALSE 18906
18762: GO 18764
18764: DISABLE
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18769: LD_ADDR_VAR 0 1
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_OWVAR 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 30
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 30
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: ST_TO_ADDR
// if not depot then
18823: LD_VAR 0 1
18827: NOT
18828: IFFALSE 18832
// exit ;
18830: GO 18906
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_VAR 0 1
18841: PUSH
18842: LD_INT 1
18844: PPUSH
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 12
18854: ARRAY
18855: PPUSH
18856: CALL_OW 274
18860: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18861: LD_VAR 0 2
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: LD_INT 0
18871: PPUSH
18872: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18876: LD_VAR 0 2
18880: PPUSH
18881: LD_INT 2
18883: PPUSH
18884: LD_INT 0
18886: PPUSH
18887: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18891: LD_VAR 0 2
18895: PPUSH
18896: LD_INT 3
18898: PPUSH
18899: LD_INT 0
18901: PPUSH
18902: CALL_OW 277
// end ;
18906: PPOPN 2
18908: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18909: LD_EXP 29
18913: PUSH
18914: LD_EXP 57
18918: AND
18919: IFFALSE 19016
18921: GO 18923
18923: DISABLE
18924: LD_INT 0
18926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_INT 22
18934: PUSH
18935: LD_OWVAR 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 21
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 3
18956: PUSH
18957: LD_INT 23
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: ST_TO_ADDR
// if not tmp then
18981: LD_VAR 0 1
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 19016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18990: LD_VAR 0 1
18994: PUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 12
19007: ARRAY
19008: PPUSH
19009: LD_INT 200
19011: PPUSH
19012: CALL_OW 234
// end ;
19016: PPOPN 1
19018: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19019: LD_EXP 29
19023: PUSH
19024: LD_EXP 58
19028: AND
19029: IFFALSE 19108
19031: GO 19033
19033: DISABLE
19034: LD_INT 0
19036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 22
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 21
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: ST_TO_ADDR
// if not tmp then
19073: LD_VAR 0 1
19077: NOT
19078: IFFALSE 19082
// exit ;
19080: GO 19108
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19082: LD_VAR 0 1
19086: PUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 12
19099: ARRAY
19100: PPUSH
19101: LD_INT 60
19103: PPUSH
19104: CALL_OW 234
// end ;
19108: PPOPN 1
19110: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19111: LD_EXP 29
19115: PUSH
19116: LD_EXP 59
19120: AND
19121: IFFALSE 19220
19123: GO 19125
19125: DISABLE
19126: LD_INT 0
19128: PPUSH
19129: PPUSH
// begin enable ;
19130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19131: LD_ADDR_VAR 0 1
19135: PUSH
19136: LD_INT 22
19138: PUSH
19139: LD_OWVAR 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 61
19150: PUSH
19151: EMPTY
19152: LIST
19153: PUSH
19154: LD_INT 33
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 69
19173: ST_TO_ADDR
// if not tmp then
19174: LD_VAR 0 1
19178: NOT
19179: IFFALSE 19183
// exit ;
19181: GO 19220
// for i in tmp do
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_VAR 0 1
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19218
// if IsControledBy ( i ) then
19196: LD_VAR 0 2
19200: PPUSH
19201: CALL_OW 312
19205: IFFALSE 19216
// ComUnlink ( i ) ;
19207: LD_VAR 0 2
19211: PPUSH
19212: CALL_OW 136
19216: GO 19193
19218: POP
19219: POP
// end ;
19220: PPOPN 2
19222: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19223: LD_EXP 29
19227: PUSH
19228: LD_EXP 60
19232: AND
19233: IFFALSE 19373
19235: GO 19237
19237: DISABLE
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
// begin ToLua ( displayPowell(); ) ;
19242: LD_STRING displayPowell();
19244: PPUSH
19245: CALL_OW 559
// uc_side := 0 ;
19249: LD_ADDR_OWVAR 20
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// uc_nation := 2 ;
19257: LD_ADDR_OWVAR 21
19261: PUSH
19262: LD_INT 2
19264: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19265: LD_ADDR_OWVAR 37
19269: PUSH
19270: LD_INT 14
19272: ST_TO_ADDR
// vc_engine := engine_siberite ;
19273: LD_ADDR_OWVAR 39
19277: PUSH
19278: LD_INT 3
19280: ST_TO_ADDR
// vc_control := control_apeman ;
19281: LD_ADDR_OWVAR 38
19285: PUSH
19286: LD_INT 5
19288: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19289: LD_ADDR_OWVAR 40
19293: PUSH
19294: LD_INT 29
19296: ST_TO_ADDR
// un := CreateVehicle ;
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: CALL_OW 45
19306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19307: LD_VAR 0 2
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19319: LD_INT 35
19321: PPUSH
19322: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19326: LD_VAR 0 2
19330: PPUSH
19331: LD_INT 22
19333: PUSH
19334: LD_OWVAR 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PPUSH
19343: CALL_OW 69
19347: PPUSH
19348: LD_VAR 0 2
19352: PPUSH
19353: CALL_OW 74
19357: PPUSH
19358: CALL_OW 115
// until IsDead ( un ) ;
19362: LD_VAR 0 2
19366: PPUSH
19367: CALL_OW 301
19371: IFFALSE 19319
// end ;
19373: PPOPN 2
19375: END
// every 0 0$1 trigger StreamModeActive and sStu do
19376: LD_EXP 29
19380: PUSH
19381: LD_EXP 68
19385: AND
19386: IFFALSE 19402
19388: GO 19390
19390: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19391: LD_STRING displayStucuk();
19393: PPUSH
19394: CALL_OW 559
// ResetFog ;
19398: CALL_OW 335
// end ;
19402: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19403: LD_EXP 29
19407: PUSH
19408: LD_EXP 61
19412: AND
19413: IFFALSE 19554
19415: GO 19417
19417: DISABLE
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19422: LD_ADDR_VAR 0 2
19426: PUSH
19427: LD_INT 22
19429: PUSH
19430: LD_OWVAR 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 21
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PPUSH
19453: CALL_OW 69
19457: ST_TO_ADDR
// if not tmp then
19458: LD_VAR 0 2
19462: NOT
19463: IFFALSE 19467
// exit ;
19465: GO 19554
// un := tmp [ rand ( 1 , tmp ) ] ;
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_VAR 0 2
19476: PUSH
19477: LD_INT 1
19479: PPUSH
19480: LD_VAR 0 2
19484: PPUSH
19485: CALL_OW 12
19489: ARRAY
19490: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19491: LD_VAR 0 1
19495: PPUSH
19496: LD_INT 0
19498: PPUSH
19499: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19503: LD_VAR 0 1
19507: PPUSH
19508: LD_OWVAR 3
19512: PUSH
19513: LD_VAR 0 1
19517: DIFF
19518: PPUSH
19519: LD_VAR 0 1
19523: PPUSH
19524: CALL_OW 74
19528: PPUSH
19529: CALL_OW 115
// wait ( 0 0$20 ) ;
19533: LD_INT 700
19535: PPUSH
19536: CALL_OW 67
// SetSide ( un , your_side ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: LD_OWVAR 2
19549: PPUSH
19550: CALL_OW 235
// end ;
19554: PPOPN 2
19556: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19557: LD_EXP 29
19561: PUSH
19562: LD_EXP 62
19566: AND
19567: IFFALSE 19673
19569: GO 19571
19571: DISABLE
19572: LD_INT 0
19574: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: LD_INT 22
19582: PUSH
19583: LD_OWVAR 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: LD_INT 30
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 30
19607: PUSH
19608: LD_INT 1
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PPUSH
19624: CALL_OW 69
19628: ST_TO_ADDR
// if not depot then
19629: LD_VAR 0 1
19633: NOT
19634: IFFALSE 19638
// exit ;
19636: GO 19673
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19638: LD_VAR 0 1
19642: PUSH
19643: LD_INT 1
19645: ARRAY
19646: PPUSH
19647: CALL_OW 250
19651: PPUSH
19652: LD_VAR 0 1
19656: PUSH
19657: LD_INT 1
19659: ARRAY
19660: PPUSH
19661: CALL_OW 251
19665: PPUSH
19666: LD_INT 70
19668: PPUSH
19669: CALL_OW 495
// end ;
19673: PPOPN 1
19675: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19676: LD_EXP 29
19680: PUSH
19681: LD_EXP 63
19685: AND
19686: IFFALSE 19897
19688: GO 19690
19690: DISABLE
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19698: LD_ADDR_VAR 0 5
19702: PUSH
19703: LD_INT 22
19705: PUSH
19706: LD_OWVAR 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 21
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL_OW 69
19733: ST_TO_ADDR
// if not tmp then
19734: LD_VAR 0 5
19738: NOT
19739: IFFALSE 19743
// exit ;
19741: GO 19897
// for i in tmp do
19743: LD_ADDR_VAR 0 1
19747: PUSH
19748: LD_VAR 0 5
19752: PUSH
19753: FOR_IN
19754: IFFALSE 19895
// begin d := rand ( 0 , 5 ) ;
19756: LD_ADDR_VAR 0 4
19760: PUSH
19761: LD_INT 0
19763: PPUSH
19764: LD_INT 5
19766: PPUSH
19767: CALL_OW 12
19771: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 250
19786: PPUSH
19787: LD_VAR 0 4
19791: PPUSH
19792: LD_INT 3
19794: PPUSH
19795: LD_INT 12
19797: PPUSH
19798: CALL_OW 12
19802: PPUSH
19803: CALL_OW 272
19807: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19808: LD_ADDR_VAR 0 3
19812: PUSH
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 251
19822: PPUSH
19823: LD_VAR 0 4
19827: PPUSH
19828: LD_INT 3
19830: PPUSH
19831: LD_INT 12
19833: PPUSH
19834: CALL_OW 12
19838: PPUSH
19839: CALL_OW 273
19843: ST_TO_ADDR
// if ValidHex ( x , y ) then
19844: LD_VAR 0 2
19848: PPUSH
19849: LD_VAR 0 3
19853: PPUSH
19854: CALL_OW 488
19858: IFFALSE 19893
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 6
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: LD_INT 1
19888: PPUSH
19889: CALL_OW 483
// end ;
19893: GO 19753
19895: POP
19896: POP
// end ;
19897: PPOPN 5
19899: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19900: LD_EXP 29
19904: PUSH
19905: LD_EXP 64
19909: AND
19910: IFFALSE 20004
19912: GO 19914
19914: DISABLE
19915: LD_INT 0
19917: PPUSH
19918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19919: LD_ADDR_VAR 0 2
19923: PUSH
19924: LD_INT 22
19926: PUSH
19927: LD_OWVAR 2
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 32
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 21
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: PPUSH
19961: CALL_OW 69
19965: ST_TO_ADDR
// if not tmp then
19966: LD_VAR 0 2
19970: NOT
19971: IFFALSE 19975
// exit ;
19973: GO 20004
// for i in tmp do
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_VAR 0 2
19984: PUSH
19985: FOR_IN
19986: IFFALSE 20002
// SetFuel ( i , 0 ) ;
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_INT 0
19995: PPUSH
19996: CALL_OW 240
20000: GO 19985
20002: POP
20003: POP
// end ;
20004: PPOPN 2
20006: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20007: LD_EXP 29
20011: PUSH
20012: LD_EXP 65
20016: AND
20017: IFFALSE 20083
20019: GO 20021
20021: DISABLE
20022: LD_INT 0
20024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20025: LD_ADDR_VAR 0 1
20029: PUSH
20030: LD_INT 22
20032: PUSH
20033: LD_OWVAR 2
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: LD_INT 29
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PPUSH
20056: CALL_OW 69
20060: ST_TO_ADDR
// if not tmp then
20061: LD_VAR 0 1
20065: NOT
20066: IFFALSE 20070
// exit ;
20068: GO 20083
// DestroyUnit ( tmp [ 1 ] ) ;
20070: LD_VAR 0 1
20074: PUSH
20075: LD_INT 1
20077: ARRAY
20078: PPUSH
20079: CALL_OW 65
// end ;
20083: PPOPN 1
20085: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20086: LD_EXP 29
20090: PUSH
20091: LD_EXP 67
20095: AND
20096: IFFALSE 20225
20098: GO 20100
20100: DISABLE
20101: LD_INT 0
20103: PPUSH
// begin uc_side := 0 ;
20104: LD_ADDR_OWVAR 20
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// uc_nation := nation_arabian ;
20112: LD_ADDR_OWVAR 21
20116: PUSH
20117: LD_INT 2
20119: ST_TO_ADDR
// hc_gallery :=  ;
20120: LD_ADDR_OWVAR 33
20124: PUSH
20125: LD_STRING 
20127: ST_TO_ADDR
// hc_name :=  ;
20128: LD_ADDR_OWVAR 26
20132: PUSH
20133: LD_STRING 
20135: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20136: LD_INT 1
20138: PPUSH
20139: LD_INT 11
20141: PPUSH
20142: LD_INT 10
20144: PPUSH
20145: CALL_OW 380
// un := CreateHuman ;
20149: LD_ADDR_VAR 0 1
20153: PUSH
20154: CALL_OW 44
20158: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20159: LD_VAR 0 1
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20171: LD_INT 35
20173: PPUSH
20174: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_INT 22
20185: PUSH
20186: LD_OWVAR 2
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PPUSH
20195: CALL_OW 69
20199: PPUSH
20200: LD_VAR 0 1
20204: PPUSH
20205: CALL_OW 74
20209: PPUSH
20210: CALL_OW 115
// until IsDead ( un ) ;
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL_OW 301
20223: IFFALSE 20171
// end ;
20225: PPOPN 1
20227: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20228: LD_EXP 29
20232: PUSH
20233: LD_EXP 69
20237: AND
20238: IFFALSE 20250
20240: GO 20242
20242: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20243: LD_STRING earthquake(getX(game), 0, 32)
20245: PPUSH
20246: CALL_OW 559
20250: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20251: LD_EXP 29
20255: PUSH
20256: LD_EXP 70
20260: AND
20261: IFFALSE 20352
20263: GO 20265
20265: DISABLE
20266: LD_INT 0
20268: PPUSH
// begin enable ;
20269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20270: LD_ADDR_VAR 0 1
20274: PUSH
20275: LD_INT 22
20277: PUSH
20278: LD_OWVAR 2
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 21
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 33
20299: PUSH
20300: LD_INT 3
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 69
20316: ST_TO_ADDR
// if not tmp then
20317: LD_VAR 0 1
20321: NOT
20322: IFFALSE 20326
// exit ;
20324: GO 20352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20326: LD_VAR 0 1
20330: PUSH
20331: LD_INT 1
20333: PPUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 12
20343: ARRAY
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 234
// end ;
20352: PPOPN 1
20354: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20355: LD_EXP 29
20359: PUSH
20360: LD_EXP 71
20364: AND
20365: IFFALSE 20506
20367: GO 20369
20369: DISABLE
20370: LD_INT 0
20372: PPUSH
20373: PPUSH
20374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 22
20382: PUSH
20383: LD_OWVAR 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 25
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PPUSH
20406: CALL_OW 69
20410: ST_TO_ADDR
// if not tmp then
20411: LD_VAR 0 3
20415: NOT
20416: IFFALSE 20420
// exit ;
20418: GO 20506
// un := tmp [ rand ( 1 , tmp ) ] ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 1
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: CALL_OW 12
20442: ARRAY
20443: ST_TO_ADDR
// if Crawls ( un ) then
20444: LD_VAR 0 2
20448: PPUSH
20449: CALL_OW 318
20453: IFFALSE 20464
// ComWalk ( un ) ;
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20464: LD_VAR 0 2
20468: PPUSH
20469: LD_INT 9
20471: PPUSH
20472: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20476: LD_INT 28
20478: PPUSH
20479: LD_OWVAR 2
20483: PPUSH
20484: LD_INT 2
20486: PPUSH
20487: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20491: LD_INT 29
20493: PPUSH
20494: LD_OWVAR 2
20498: PPUSH
20499: LD_INT 2
20501: PPUSH
20502: CALL_OW 322
// end ;
20506: PPOPN 3
20508: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20509: LD_EXP 29
20513: PUSH
20514: LD_EXP 72
20518: AND
20519: IFFALSE 20630
20521: GO 20523
20523: DISABLE
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20529: LD_ADDR_VAR 0 3
20533: PUSH
20534: LD_INT 22
20536: PUSH
20537: LD_OWVAR 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 25
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 69
20564: ST_TO_ADDR
// if not tmp then
20565: LD_VAR 0 3
20569: NOT
20570: IFFALSE 20574
// exit ;
20572: GO 20630
// un := tmp [ rand ( 1 , tmp ) ] ;
20574: LD_ADDR_VAR 0 2
20578: PUSH
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 1
20586: PPUSH
20587: LD_VAR 0 3
20591: PPUSH
20592: CALL_OW 12
20596: ARRAY
20597: ST_TO_ADDR
// if Crawls ( un ) then
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 318
20607: IFFALSE 20618
// ComWalk ( un ) ;
20609: LD_VAR 0 2
20613: PPUSH
20614: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_INT 8
20625: PPUSH
20626: CALL_OW 336
// end ;
20630: PPOPN 3
20632: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20633: LD_EXP 29
20637: PUSH
20638: LD_EXP 73
20642: AND
20643: IFFALSE 20787
20645: GO 20647
20647: DISABLE
20648: LD_INT 0
20650: PPUSH
20651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20652: LD_ADDR_VAR 0 2
20656: PUSH
20657: LD_INT 22
20659: PUSH
20660: LD_OWVAR 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: LD_INT 34
20684: PUSH
20685: LD_INT 12
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 34
20694: PUSH
20695: LD_INT 51
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 34
20704: PUSH
20705: LD_INT 32
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: LIST
20722: PPUSH
20723: CALL_OW 69
20727: ST_TO_ADDR
// if not tmp then
20728: LD_VAR 0 2
20732: NOT
20733: IFFALSE 20737
// exit ;
20735: GO 20787
// for i in tmp do
20737: LD_ADDR_VAR 0 1
20741: PUSH
20742: LD_VAR 0 2
20746: PUSH
20747: FOR_IN
20748: IFFALSE 20785
// if GetCargo ( i , mat_artifact ) = 0 then
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 4
20757: PPUSH
20758: CALL_OW 289
20762: PUSH
20763: LD_INT 0
20765: EQUAL
20766: IFFALSE 20783
// SetCargo ( i , mat_siberit , 100 ) ;
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_INT 3
20775: PPUSH
20776: LD_INT 100
20778: PPUSH
20779: CALL_OW 290
20783: GO 20747
20785: POP
20786: POP
// end ;
20787: PPOPN 2
20789: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20790: LD_EXP 29
20794: PUSH
20795: LD_EXP 74
20799: AND
20800: IFFALSE 20983
20802: GO 20804
20804: DISABLE
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_OWVAR 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PPUSH
20826: CALL_OW 69
20830: ST_TO_ADDR
// if not tmp then
20831: LD_VAR 0 2
20835: NOT
20836: IFFALSE 20840
// exit ;
20838: GO 20983
// for i := 1 to 2 do
20840: LD_ADDR_VAR 0 1
20844: PUSH
20845: DOUBLE
20846: LD_INT 1
20848: DEC
20849: ST_TO_ADDR
20850: LD_INT 2
20852: PUSH
20853: FOR_TO
20854: IFFALSE 20981
// begin uc_side := your_side ;
20856: LD_ADDR_OWVAR 20
20860: PUSH
20861: LD_OWVAR 2
20865: ST_TO_ADDR
// uc_nation := nation_american ;
20866: LD_ADDR_OWVAR 21
20870: PUSH
20871: LD_INT 1
20873: ST_TO_ADDR
// vc_chassis := us_morphling ;
20874: LD_ADDR_OWVAR 37
20878: PUSH
20879: LD_INT 5
20881: ST_TO_ADDR
// vc_engine := engine_siberite ;
20882: LD_ADDR_OWVAR 39
20886: PUSH
20887: LD_INT 3
20889: ST_TO_ADDR
// vc_control := control_computer ;
20890: LD_ADDR_OWVAR 38
20894: PUSH
20895: LD_INT 3
20897: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20898: LD_ADDR_OWVAR 40
20902: PUSH
20903: LD_INT 10
20905: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20906: LD_VAR 0 2
20910: PUSH
20911: LD_INT 1
20913: ARRAY
20914: PPUSH
20915: CALL_OW 310
20919: NOT
20920: IFFALSE 20967
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20922: CALL_OW 45
20926: PPUSH
20927: LD_VAR 0 2
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: PPUSH
20936: CALL_OW 250
20940: PPUSH
20941: LD_VAR 0 2
20945: PUSH
20946: LD_INT 1
20948: ARRAY
20949: PPUSH
20950: CALL_OW 251
20954: PPUSH
20955: LD_INT 12
20957: PPUSH
20958: LD_INT 1
20960: PPUSH
20961: CALL_OW 50
20965: GO 20979
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20967: CALL_OW 45
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 51
// end ;
20979: GO 20853
20981: POP
20982: POP
// end ;
20983: PPOPN 2
20985: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20986: LD_EXP 29
20990: PUSH
20991: LD_EXP 75
20995: AND
20996: IFFALSE 21218
20998: GO 21000
21000: DISABLE
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21009: LD_ADDR_VAR 0 6
21013: PUSH
21014: LD_INT 22
21016: PUSH
21017: LD_OWVAR 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 21
21028: PUSH
21029: LD_INT 1
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: LD_INT 23
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: ST_TO_ADDR
// if not tmp then
21063: LD_VAR 0 6
21067: NOT
21068: IFFALSE 21072
// exit ;
21070: GO 21218
// s1 := rand ( 1 , 4 ) ;
21072: LD_ADDR_VAR 0 2
21076: PUSH
21077: LD_INT 1
21079: PPUSH
21080: LD_INT 4
21082: PPUSH
21083: CALL_OW 12
21087: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21088: LD_ADDR_VAR 0 4
21092: PUSH
21093: LD_VAR 0 6
21097: PUSH
21098: LD_INT 1
21100: ARRAY
21101: PPUSH
21102: LD_VAR 0 2
21106: PPUSH
21107: CALL_OW 259
21111: ST_TO_ADDR
// if s1 = 1 then
21112: LD_VAR 0 2
21116: PUSH
21117: LD_INT 1
21119: EQUAL
21120: IFFALSE 21140
// s2 := rand ( 2 , 4 ) else
21122: LD_ADDR_VAR 0 3
21126: PUSH
21127: LD_INT 2
21129: PPUSH
21130: LD_INT 4
21132: PPUSH
21133: CALL_OW 12
21137: ST_TO_ADDR
21138: GO 21148
// s2 := 1 ;
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21148: LD_ADDR_VAR 0 5
21152: PUSH
21153: LD_VAR 0 6
21157: PUSH
21158: LD_INT 1
21160: ARRAY
21161: PPUSH
21162: LD_VAR 0 3
21166: PPUSH
21167: CALL_OW 259
21171: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21172: LD_VAR 0 6
21176: PUSH
21177: LD_INT 1
21179: ARRAY
21180: PPUSH
21181: LD_VAR 0 2
21185: PPUSH
21186: LD_VAR 0 5
21190: PPUSH
21191: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21195: LD_VAR 0 6
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 3
21208: PPUSH
21209: LD_VAR 0 4
21213: PPUSH
21214: CALL_OW 237
// end ;
21218: PPOPN 6
21220: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21221: LD_EXP 29
21225: PUSH
21226: LD_EXP 76
21230: AND
21231: IFFALSE 21310
21233: GO 21235
21235: DISABLE
21236: LD_INT 0
21238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 1
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21284: LD_VAR 0 1
21288: PUSH
21289: LD_INT 1
21291: PPUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 12
21301: ARRAY
21302: PPUSH
21303: LD_INT 1
21305: PPUSH
21306: CALL_OW 234
// end ;
21310: PPOPN 1
21312: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21313: LD_EXP 29
21317: PUSH
21318: LD_EXP 77
21322: AND
21323: IFFALSE 21435
21325: GO 21327
21327: DISABLE
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21332: LD_ADDR_VAR 0 2
21336: PUSH
21337: LD_INT 22
21339: PUSH
21340: LD_OWVAR 2
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 30
21354: PUSH
21355: LD_INT 27
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 30
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 30
21374: PUSH
21375: LD_INT 28
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 69
21396: ST_TO_ADDR
// if not tmp then
21397: LD_VAR 0 2
21401: NOT
21402: IFFALSE 21406
// exit ;
21404: GO 21435
// for i in tmp do
21406: LD_ADDR_VAR 0 1
21410: PUSH
21411: LD_VAR 0 2
21415: PUSH
21416: FOR_IN
21417: IFFALSE 21433
// SetLives ( i , 1 ) ;
21419: LD_VAR 0 1
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 234
21431: GO 21416
21433: POP
21434: POP
// end ;
21435: PPOPN 2
21437: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21438: LD_EXP 29
21442: PUSH
21443: LD_EXP 78
21447: AND
21448: IFFALSE 21722
21450: GO 21452
21452: DISABLE
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
21457: PPUSH
// begin i := rand ( 1 , 7 ) ;
21458: LD_ADDR_VAR 0 1
21462: PUSH
21463: LD_INT 1
21465: PPUSH
21466: LD_INT 7
21468: PPUSH
21469: CALL_OW 12
21473: ST_TO_ADDR
// case i of 1 :
21474: LD_VAR 0 1
21478: PUSH
21479: LD_INT 1
21481: DOUBLE
21482: EQUAL
21483: IFTRUE 21487
21485: GO 21497
21487: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21488: LD_STRING earthquake(getX(game), 0, 32)
21490: PPUSH
21491: CALL_OW 559
21495: GO 21722
21497: LD_INT 2
21499: DOUBLE
21500: EQUAL
21501: IFTRUE 21505
21503: GO 21519
21505: POP
// begin ToLua ( displayStucuk(); ) ;
21506: LD_STRING displayStucuk();
21508: PPUSH
21509: CALL_OW 559
// ResetFog ;
21513: CALL_OW 335
// end ; 3 :
21517: GO 21722
21519: LD_INT 3
21521: DOUBLE
21522: EQUAL
21523: IFTRUE 21527
21525: GO 21631
21527: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21528: LD_ADDR_VAR 0 2
21532: PUSH
21533: LD_INT 22
21535: PUSH
21536: LD_OWVAR 2
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 25
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PPUSH
21559: CALL_OW 69
21563: ST_TO_ADDR
// if not tmp then
21564: LD_VAR 0 2
21568: NOT
21569: IFFALSE 21573
// exit ;
21571: GO 21722
// un := tmp [ rand ( 1 , tmp ) ] ;
21573: LD_ADDR_VAR 0 3
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: LD_INT 1
21585: PPUSH
21586: LD_VAR 0 2
21590: PPUSH
21591: CALL_OW 12
21595: ARRAY
21596: ST_TO_ADDR
// if Crawls ( un ) then
21597: LD_VAR 0 3
21601: PPUSH
21602: CALL_OW 318
21606: IFFALSE 21617
// ComWalk ( un ) ;
21608: LD_VAR 0 3
21612: PPUSH
21613: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21617: LD_VAR 0 3
21621: PPUSH
21622: LD_INT 8
21624: PPUSH
21625: CALL_OW 336
// end ; 4 :
21629: GO 21722
21631: LD_INT 4
21633: DOUBLE
21634: EQUAL
21635: IFTRUE 21639
21637: GO 21700
21639: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21640: LD_ADDR_VAR 0 2
21644: PUSH
21645: LD_INT 22
21647: PUSH
21648: LD_OWVAR 2
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 30
21659: PUSH
21660: LD_INT 29
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: ST_TO_ADDR
// if not tmp then
21676: LD_VAR 0 2
21680: NOT
21681: IFFALSE 21685
// exit ;
21683: GO 21722
// DestroyUnit ( tmp [ 1 ] ) ;
21685: LD_VAR 0 2
21689: PUSH
21690: LD_INT 1
21692: ARRAY
21693: PPUSH
21694: CALL_OW 65
// end ; 5 .. 7 :
21698: GO 21722
21700: LD_INT 5
21702: DOUBLE
21703: GREATEREQUAL
21704: IFFALSE 21712
21706: LD_INT 7
21708: DOUBLE
21709: LESSEQUAL
21710: IFTRUE 21714
21712: GO 21721
21714: POP
// StreamSibBomb ; end ;
21715: CALL 17972 0 0
21719: GO 21722
21721: POP
// end ;
21722: PPOPN 3
21724: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21725: LD_EXP 29
21729: PUSH
21730: LD_EXP 79
21734: AND
21735: IFFALSE 21891
21737: GO 21739
21739: DISABLE
21740: LD_INT 0
21742: PPUSH
21743: PPUSH
21744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 81
21752: PUSH
21753: LD_OWVAR 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 21
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 21
21777: PUSH
21778: LD_INT 2
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PPUSH
21794: CALL_OW 69
21798: ST_TO_ADDR
// if not tmp then
21799: LD_VAR 0 2
21803: NOT
21804: IFFALSE 21808
// exit ;
21806: GO 21891
// p := 0 ;
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21816: LD_INT 35
21818: PPUSH
21819: CALL_OW 67
// p := p + 1 ;
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_VAR 0 3
21832: PUSH
21833: LD_INT 1
21835: PLUS
21836: ST_TO_ADDR
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 2
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21879
// if GetLives ( i ) < 1000 then
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 256
21859: PUSH
21860: LD_INT 1000
21862: LESS
21863: IFFALSE 21877
// SetLives ( i , 1000 ) ;
21865: LD_VAR 0 1
21869: PPUSH
21870: LD_INT 1000
21872: PPUSH
21873: CALL_OW 234
21877: GO 21847
21879: POP
21880: POP
// until p > 20 ;
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 20
21888: GREATER
21889: IFFALSE 21816
// end ;
21891: PPOPN 3
21893: END
// every 0 0$1 trigger StreamModeActive and sTime do
21894: LD_EXP 29
21898: PUSH
21899: LD_EXP 80
21903: AND
21904: IFFALSE 21939
21906: GO 21908
21908: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21909: LD_INT 28
21911: PPUSH
21912: LD_OWVAR 2
21916: PPUSH
21917: LD_INT 2
21919: PPUSH
21920: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21924: LD_INT 30
21926: PPUSH
21927: LD_OWVAR 2
21931: PPUSH
21932: LD_INT 2
21934: PPUSH
21935: CALL_OW 322
// end ;
21939: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21940: LD_EXP 29
21944: PUSH
21945: LD_EXP 81
21949: AND
21950: IFFALSE 22071
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21959: LD_ADDR_VAR 0 2
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_OWVAR 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 21
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: LD_INT 23
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 69
22012: ST_TO_ADDR
// if not tmp then
22013: LD_VAR 0 2
22017: NOT
22018: IFFALSE 22022
// exit ;
22020: GO 22071
// for i in tmp do
22022: LD_ADDR_VAR 0 1
22026: PUSH
22027: LD_VAR 0 2
22031: PUSH
22032: FOR_IN
22033: IFFALSE 22069
// begin if Crawls ( i ) then
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 318
22044: IFFALSE 22055
// ComWalk ( i ) ;
22046: LD_VAR 0 1
22050: PPUSH
22051: CALL_OW 138
// SetClass ( i , 2 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 2
22062: PPUSH
22063: CALL_OW 336
// end ;
22067: GO 22032
22069: POP
22070: POP
// end ;
22071: PPOPN 2
22073: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22074: LD_EXP 29
22078: PUSH
22079: LD_EXP 82
22083: AND
22084: IFFALSE 22365
22086: GO 22088
22088: DISABLE
22089: LD_INT 0
22091: PPUSH
22092: PPUSH
22093: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22094: LD_OWVAR 2
22098: PPUSH
22099: LD_INT 9
22101: PPUSH
22102: LD_INT 1
22104: PPUSH
22105: LD_INT 1
22107: PPUSH
22108: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22112: LD_INT 9
22114: PPUSH
22115: LD_OWVAR 2
22119: PPUSH
22120: CALL_OW 343
// uc_side := 9 ;
22124: LD_ADDR_OWVAR 20
22128: PUSH
22129: LD_INT 9
22131: ST_TO_ADDR
// uc_nation := 2 ;
22132: LD_ADDR_OWVAR 21
22136: PUSH
22137: LD_INT 2
22139: ST_TO_ADDR
// hc_name := Dark Warrior ;
22140: LD_ADDR_OWVAR 26
22144: PUSH
22145: LD_STRING Dark Warrior
22147: ST_TO_ADDR
// hc_gallery :=  ;
22148: LD_ADDR_OWVAR 33
22152: PUSH
22153: LD_STRING 
22155: ST_TO_ADDR
// hc_noskilllimit := true ;
22156: LD_ADDR_OWVAR 76
22160: PUSH
22161: LD_INT 1
22163: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22164: LD_ADDR_OWVAR 31
22168: PUSH
22169: LD_INT 30
22171: PUSH
22172: LD_INT 30
22174: PUSH
22175: LD_INT 30
22177: PUSH
22178: LD_INT 30
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// un := CreateHuman ;
22187: LD_ADDR_VAR 0 3
22191: PUSH
22192: CALL_OW 44
22196: ST_TO_ADDR
// hc_noskilllimit := false ;
22197: LD_ADDR_OWVAR 76
22201: PUSH
22202: LD_INT 0
22204: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22205: LD_VAR 0 3
22209: PPUSH
22210: LD_INT 1
22212: PPUSH
22213: CALL_OW 51
// p := 0 ;
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_INT 0
22224: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22225: LD_INT 35
22227: PPUSH
22228: CALL_OW 67
// p := p + 1 ;
22232: LD_ADDR_VAR 0 2
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_INT 1
22244: PLUS
22245: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22246: LD_VAR 0 3
22250: PPUSH
22251: CALL_OW 256
22255: PUSH
22256: LD_INT 1000
22258: LESS
22259: IFFALSE 22273
// SetLives ( un , 1000 ) ;
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_INT 1000
22268: PPUSH
22269: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 81
22280: PUSH
22281: LD_OWVAR 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 91
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: LD_INT 30
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: PPUSH
22315: LD_VAR 0 3
22319: PPUSH
22320: CALL_OW 74
22324: PPUSH
22325: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22329: LD_VAR 0 2
22333: PUSH
22334: LD_INT 60
22336: GREATER
22337: PUSH
22338: LD_VAR 0 3
22342: PPUSH
22343: CALL_OW 301
22347: OR
22348: IFFALSE 22225
// if un then
22350: LD_VAR 0 3
22354: IFFALSE 22365
// RemoveUnit ( un ) ;
22356: LD_VAR 0 3
22360: PPUSH
22361: CALL_OW 64
// end ;
22365: PPOPN 3
22367: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22368: LD_INT 0
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22374: LD_ADDR_VAR 0 4
22378: PUSH
22379: LD_INT 22
22381: PUSH
22382: LD_OWVAR 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: LD_INT 30
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PPUSH
22423: CALL_OW 69
22427: ST_TO_ADDR
// if not tmp then
22428: LD_VAR 0 4
22432: NOT
22433: IFFALSE 22437
// exit ;
22435: GO 22496
// for i in tmp do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_VAR 0 4
22446: PUSH
22447: FOR_IN
22448: IFFALSE 22494
// for j = 1 to 3 do
22450: LD_ADDR_VAR 0 3
22454: PUSH
22455: DOUBLE
22456: LD_INT 1
22458: DEC
22459: ST_TO_ADDR
22460: LD_INT 3
22462: PUSH
22463: FOR_TO
22464: IFFALSE 22490
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22466: LD_VAR 0 2
22470: PPUSH
22471: CALL_OW 274
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: LD_INT 99999
22483: PPUSH
22484: CALL_OW 277
22488: GO 22463
22490: POP
22491: POP
22492: GO 22447
22494: POP
22495: POP
// end ;
22496: LD_VAR 0 1
22500: RET
// export function hHackSetLevel10 ; var i , j ; begin
22501: LD_INT 0
22503: PPUSH
22504: PPUSH
22505: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22506: LD_ADDR_VAR 0 2
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PPUSH
22521: CALL_OW 69
22525: PUSH
22526: FOR_IN
22527: IFFALSE 22579
// if IsSelected ( i ) then
22529: LD_VAR 0 2
22533: PPUSH
22534: CALL_OW 306
22538: IFFALSE 22577
// begin for j := 1 to 4 do
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: DOUBLE
22546: LD_INT 1
22548: DEC
22549: ST_TO_ADDR
22550: LD_INT 4
22552: PUSH
22553: FOR_TO
22554: IFFALSE 22575
// SetSkill ( i , j , 10 ) ;
22556: LD_VAR 0 2
22560: PPUSH
22561: LD_VAR 0 3
22565: PPUSH
22566: LD_INT 10
22568: PPUSH
22569: CALL_OW 237
22573: GO 22553
22575: POP
22576: POP
// end ;
22577: GO 22526
22579: POP
22580: POP
// end ;
22581: LD_VAR 0 1
22585: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22586: LD_INT 0
22588: PPUSH
22589: PPUSH
22590: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_OWVAR 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 21
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PUSH
22627: FOR_IN
22628: IFFALSE 22669
// begin for j := 1 to 4 do
22630: LD_ADDR_VAR 0 3
22634: PUSH
22635: DOUBLE
22636: LD_INT 1
22638: DEC
22639: ST_TO_ADDR
22640: LD_INT 4
22642: PUSH
22643: FOR_TO
22644: IFFALSE 22665
// SetSkill ( i , j , 10 ) ;
22646: LD_VAR 0 2
22650: PPUSH
22651: LD_VAR 0 3
22655: PPUSH
22656: LD_INT 10
22658: PPUSH
22659: CALL_OW 237
22663: GO 22643
22665: POP
22666: POP
// end ;
22667: GO 22627
22669: POP
22670: POP
// end ;
22671: LD_VAR 0 1
22675: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
22676: LD_INT 0
22678: PPUSH
// uc_side := your_side ;
22679: LD_ADDR_OWVAR 20
22683: PUSH
22684: LD_OWVAR 2
22688: ST_TO_ADDR
// uc_nation := nation ;
22689: LD_ADDR_OWVAR 21
22693: PUSH
22694: LD_VAR 0 1
22698: ST_TO_ADDR
// InitHc ;
22699: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22703: LD_INT 0
22705: PPUSH
22706: LD_VAR 0 2
22710: PPUSH
22711: LD_VAR 0 3
22715: PPUSH
22716: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22720: CALL_OW 44
22724: PPUSH
22725: LD_INT 1
22727: PPUSH
22728: CALL_OW 51
// end ;
22732: LD_VAR 0 4
22736: RET
// export function hHackSpawnVehicle ; begin
22737: LD_INT 0
22739: PPUSH
// uc_side := your_side ;
22740: LD_ADDR_OWVAR 20
22744: PUSH
22745: LD_OWVAR 2
22749: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
22750: LD_ADDR_OWVAR 21
22754: PUSH
22755: LD_INT 1
22757: PPUSH
22758: LD_INT 3
22760: PPUSH
22761: CALL_OW 12
22765: ST_TO_ADDR
// InitVc ;
22766: CALL_OW 20
// case uc_nation of 1 :
22770: LD_OWVAR 21
22774: PUSH
22775: LD_INT 1
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22927
22783: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
22784: LD_ADDR_OWVAR 37
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: LD_INT 3
22797: PUSH
22798: LD_INT 4
22800: PUSH
22801: LD_INT 5
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PPUSH
22814: LD_INT 5
22816: PPUSH
22817: CALL_OW 12
22821: ARRAY
22822: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22823: LD_ADDR_OWVAR 39
22827: PUSH
22828: LD_INT 1
22830: PPUSH
22831: LD_INT 3
22833: PPUSH
22834: CALL_OW 12
22838: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
22839: LD_ADDR_OWVAR 38
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: PPUSH
22861: LD_INT 3
22863: PPUSH
22864: CALL_OW 12
22868: ARRAY
22869: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
22870: LD_ADDR_OWVAR 40
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: LD_INT 4
22880: PUSH
22881: LD_INT 5
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 7
22889: PUSH
22890: LD_INT 8
22892: PUSH
22893: LD_INT 9
22895: PUSH
22896: LD_INT 10
22898: PUSH
22899: LD_INT 6
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: PPUSH
22916: LD_INT 9
22918: PPUSH
22919: CALL_OW 12
22923: ARRAY
22924: ST_TO_ADDR
// end ; 2 :
22925: GO 23192
22927: LD_INT 2
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 23059
22935: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
22936: LD_ADDR_OWVAR 37
22940: PUSH
22941: LD_INT 11
22943: PUSH
22944: LD_INT 12
22946: PUSH
22947: LD_INT 13
22949: PUSH
22950: LD_INT 14
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PPUSH
22962: LD_INT 4
22964: PPUSH
22965: CALL_OW 12
22969: ARRAY
22970: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
22971: LD_ADDR_OWVAR 39
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_INT 3
22981: PPUSH
22982: CALL_OW 12
22986: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
22987: LD_ADDR_OWVAR 38
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: LD_INT 5
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PPUSH
23009: LD_INT 3
23011: PPUSH
23012: CALL_OW 12
23016: ARRAY
23017: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
23018: LD_ADDR_OWVAR 40
23022: PUSH
23023: LD_INT 24
23025: PUSH
23026: LD_INT 26
23028: PUSH
23029: LD_INT 27
23031: PUSH
23032: LD_INT 28
23034: PUSH
23035: LD_INT 29
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PPUSH
23048: LD_INT 5
23050: PPUSH
23051: CALL_OW 12
23055: ARRAY
23056: ST_TO_ADDR
// end ; 3 :
23057: GO 23192
23059: LD_INT 3
23061: DOUBLE
23062: EQUAL
23063: IFTRUE 23067
23065: GO 23191
23067: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
23068: LD_ADDR_OWVAR 37
23072: PUSH
23073: LD_INT 21
23075: PUSH
23076: LD_INT 23
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_INT 24
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_INT 4
23096: PPUSH
23097: CALL_OW 12
23101: ARRAY
23102: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23103: LD_ADDR_OWVAR 39
23107: PUSH
23108: LD_INT 1
23110: PPUSH
23111: LD_INT 3
23113: PPUSH
23114: CALL_OW 12
23118: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
23119: LD_ADDR_OWVAR 38
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 3
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PPUSH
23137: LD_INT 2
23139: PPUSH
23140: CALL_OW 12
23144: ARRAY
23145: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
23146: LD_ADDR_OWVAR 40
23150: PUSH
23151: LD_INT 42
23153: PUSH
23154: LD_INT 43
23156: PUSH
23157: LD_INT 44
23159: PUSH
23160: LD_INT 46
23162: PUSH
23163: LD_INT 48
23165: PUSH
23166: LD_INT 47
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: PPUSH
23180: LD_INT 6
23182: PPUSH
23183: CALL_OW 12
23187: ARRAY
23188: ST_TO_ADDR
// end ; end ;
23189: GO 23192
23191: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23192: CALL_OW 45
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: CALL_OW 51
// end ;
23204: LD_VAR 0 1
23208: RET
// export hInvincible ; every 1 do
23209: GO 23211
23211: DISABLE
// hInvincible := [ ] ;
23212: LD_ADDR_EXP 83
23216: PUSH
23217: EMPTY
23218: ST_TO_ADDR
23219: END
// every 10 do var i ;
23220: GO 23222
23222: DISABLE
23223: LD_INT 0
23225: PPUSH
// begin enable ;
23226: ENABLE
// if not hInvincible then
23227: LD_EXP 83
23231: NOT
23232: IFFALSE 23236
// exit ;
23234: GO 23280
// for i in hInvincible do
23236: LD_ADDR_VAR 0 1
23240: PUSH
23241: LD_EXP 83
23245: PUSH
23246: FOR_IN
23247: IFFALSE 23278
// if GetLives ( i ) < 1000 then
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 256
23258: PUSH
23259: LD_INT 1000
23261: LESS
23262: IFFALSE 23276
// SetLives ( i , 1000 ) ;
23264: LD_VAR 0 1
23268: PPUSH
23269: LD_INT 1000
23271: PPUSH
23272: CALL_OW 234
23276: GO 23246
23278: POP
23279: POP
// end ;
23280: PPOPN 1
23282: END
// export function hHackInvincible ; var i ; begin
23283: LD_INT 0
23285: PPUSH
23286: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 21
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: PPUSH
23320: CALL_OW 69
23324: PUSH
23325: FOR_IN
23326: IFFALSE 23387
// if IsSelected ( i ) then
23328: LD_VAR 0 2
23332: PPUSH
23333: CALL_OW 306
23337: IFFALSE 23385
// begin if i in hInvincible then
23339: LD_VAR 0 2
23343: PUSH
23344: LD_EXP 83
23348: IN
23349: IFFALSE 23369
// hInvincible := hInvincible diff i else
23351: LD_ADDR_EXP 83
23355: PUSH
23356: LD_EXP 83
23360: PUSH
23361: LD_VAR 0 2
23365: DIFF
23366: ST_TO_ADDR
23367: GO 23385
// hInvincible := hInvincible union i ;
23369: LD_ADDR_EXP 83
23373: PUSH
23374: LD_EXP 83
23378: PUSH
23379: LD_VAR 0 2
23383: UNION
23384: ST_TO_ADDR
// end ;
23385: GO 23325
23387: POP
23388: POP
// end ;
23389: LD_VAR 0 1
23393: RET
// export function hHackInvisible ; var i , j ; begin
23394: LD_INT 0
23396: PPUSH
23397: PPUSH
23398: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_INT 21
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 69
23418: PUSH
23419: FOR_IN
23420: IFFALSE 23444
// if IsSelected ( i ) then
23422: LD_VAR 0 2
23426: PPUSH
23427: CALL_OW 306
23431: IFFALSE 23442
// ComForceInvisible ( i ) ;
23433: LD_VAR 0 2
23437: PPUSH
23438: CALL_OW 496
23442: GO 23419
23444: POP
23445: POP
// end ;
23446: LD_VAR 0 1
23450: RET
// export function hHackChangeYourSide ; begin
23451: LD_INT 0
23453: PPUSH
// if your_side = 8 then
23454: LD_OWVAR 2
23458: PUSH
23459: LD_INT 8
23461: EQUAL
23462: IFFALSE 23474
// your_side := 0 else
23464: LD_ADDR_OWVAR 2
23468: PUSH
23469: LD_INT 0
23471: ST_TO_ADDR
23472: GO 23488
// your_side := your_side + 1 ;
23474: LD_ADDR_OWVAR 2
23478: PUSH
23479: LD_OWVAR 2
23483: PUSH
23484: LD_INT 1
23486: PLUS
23487: ST_TO_ADDR
// end ;
23488: LD_VAR 0 1
23492: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23493: LD_INT 0
23495: PPUSH
23496: PPUSH
23497: PPUSH
// for i in all_units do
23498: LD_ADDR_VAR 0 2
23502: PUSH
23503: LD_OWVAR 3
23507: PUSH
23508: FOR_IN
23509: IFFALSE 23587
// if IsSelected ( i ) then
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 306
23520: IFFALSE 23585
// begin j := GetSide ( i ) ;
23522: LD_ADDR_VAR 0 3
23526: PUSH
23527: LD_VAR 0 2
23531: PPUSH
23532: CALL_OW 255
23536: ST_TO_ADDR
// if j = 8 then
23537: LD_VAR 0 3
23541: PUSH
23542: LD_INT 8
23544: EQUAL
23545: IFFALSE 23557
// j := 0 else
23547: LD_ADDR_VAR 0 3
23551: PUSH
23552: LD_INT 0
23554: ST_TO_ADDR
23555: GO 23571
// j := j + 1 ;
23557: LD_ADDR_VAR 0 3
23561: PUSH
23562: LD_VAR 0 3
23566: PUSH
23567: LD_INT 1
23569: PLUS
23570: ST_TO_ADDR
// SetSide ( i , j ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: CALL_OW 235
// end ;
23585: GO 23508
23587: POP
23588: POP
// end ;
23589: LD_VAR 0 1
23593: RET
// export function hHackFog ; begin
23594: LD_INT 0
23596: PPUSH
// FogOff ( true ) ;
23597: LD_INT 1
23599: PPUSH
23600: CALL_OW 344
// end ;
23604: LD_VAR 0 1
23608: RET
// export function hHackApeman ; begin
23609: LD_INT 0
23611: PPUSH
// uc_side := your_side ;
23612: LD_ADDR_OWVAR 20
23616: PUSH
23617: LD_OWVAR 2
23621: ST_TO_ADDR
// uc_nation := 0 ;
23622: LD_ADDR_OWVAR 21
23626: PUSH
23627: LD_INT 0
23629: ST_TO_ADDR
// hc_name :=  ;
23630: LD_ADDR_OWVAR 26
23634: PUSH
23635: LD_STRING 
23637: ST_TO_ADDR
// hc_gallery :=  ;
23638: LD_ADDR_OWVAR 33
23642: PUSH
23643: LD_STRING 
23645: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
23646: LD_ADDR_OWVAR 31
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: ST_TO_ADDR
// hc_class := class_apeman ;
23669: LD_ADDR_OWVAR 28
23673: PUSH
23674: LD_INT 12
23676: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23677: CALL_OW 44
23681: PPUSH
23682: LD_INT 1
23684: PPUSH
23685: CALL_OW 51
// end ;
23689: LD_VAR 0 1
23693: RET
// export function hHackBoom ; begin
23694: LD_INT 0
23696: PPUSH
// uc_side := your_side ;
23697: LD_ADDR_OWVAR 20
23701: PUSH
23702: LD_OWVAR 2
23706: ST_TO_ADDR
// uc_nation := 1 ;
23707: LD_ADDR_OWVAR 21
23711: PUSH
23712: LD_INT 1
23714: ST_TO_ADDR
// vc_chassis := us_morphling ;
23715: LD_ADDR_OWVAR 37
23719: PUSH
23720: LD_INT 5
23722: ST_TO_ADDR
// vc_engine := engine_siberite ;
23723: LD_ADDR_OWVAR 39
23727: PUSH
23728: LD_INT 3
23730: ST_TO_ADDR
// vc_control := control_computer ;
23731: LD_ADDR_OWVAR 38
23735: PUSH
23736: LD_INT 3
23738: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
23739: LD_ADDR_OWVAR 40
23743: PUSH
23744: LD_INT 8
23746: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23747: CALL_OW 45
23751: PPUSH
23752: LD_INT 1
23754: PPUSH
23755: CALL_OW 51
// end ; end_of_file
23759: LD_VAR 0 1
23763: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23764: LD_INT 0
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23770: LD_VAR 0 1
23774: PPUSH
23775: CALL_OW 264
23779: PUSH
23780: LD_EXP 18
23784: EQUAL
23785: IFFALSE 23857
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23787: LD_INT 68
23789: PPUSH
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 255
23799: PPUSH
23800: CALL_OW 321
23804: PUSH
23805: LD_INT 2
23807: EQUAL
23808: IFFALSE 23820
// eff := 70 else
23810: LD_ADDR_VAR 0 4
23814: PUSH
23815: LD_INT 70
23817: ST_TO_ADDR
23818: GO 23828
// eff := 30 ;
23820: LD_ADDR_VAR 0 4
23824: PUSH
23825: LD_INT 30
23827: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 250
23837: PPUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 251
23847: PPUSH
23848: LD_VAR 0 4
23852: PPUSH
23853: CALL_OW 495
// end ; end ;
23857: LD_VAR 0 2
23861: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23862: LD_INT 0
23864: PPUSH
// end ;
23865: LD_VAR 0 4
23869: RET
// export function SOS_Command ( cmd ) ; begin
23870: LD_INT 0
23872: PPUSH
// end ;
23873: LD_VAR 0 2
23877: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23878: LD_VAR 0 1
23882: PUSH
23883: LD_INT 254
23885: EQUAL
23886: PUSH
23887: LD_VAR 0 2
23891: PPUSH
23892: CALL_OW 264
23896: PUSH
23897: LD_EXP 16
23901: EQUAL
23902: AND
23903: PUSH
23904: LD_VAR 0 3
23908: PPUSH
23909: CALL_OW 263
23913: PUSH
23914: LD_INT 3
23916: EQUAL
23917: AND
23918: IFFALSE 23934
// HackDestroyVehicle ( unit , selectedUnit ) ;
23920: LD_VAR 0 2
23924: PPUSH
23925: LD_VAR 0 3
23929: PPUSH
23930: CALL 25441 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23934: LD_VAR 0 1
23938: PUSH
23939: LD_INT 255
23941: EQUAL
23942: PUSH
23943: LD_VAR 0 2
23947: PPUSH
23948: CALL_OW 264
23952: PUSH
23953: LD_INT 14
23955: PUSH
23956: LD_INT 53
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: IN
23963: AND
23964: PUSH
23965: LD_VAR 0 4
23969: PPUSH
23970: LD_VAR 0 5
23974: PPUSH
23975: CALL_OW 488
23979: AND
23980: IFFALSE 24004
// CutTreeXYR ( unit , x , y , 12 ) ;
23982: LD_VAR 0 2
23986: PPUSH
23987: LD_VAR 0 4
23991: PPUSH
23992: LD_VAR 0 5
23996: PPUSH
23997: LD_INT 12
23999: PPUSH
24000: CALL 24007 0 4
// end ;
24004: PPOPN 5
24006: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24007: LD_INT 0
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24018: LD_VAR 0 1
24022: NOT
24023: PUSH
24024: LD_VAR 0 2
24028: PPUSH
24029: LD_VAR 0 3
24033: PPUSH
24034: CALL_OW 488
24038: NOT
24039: OR
24040: PUSH
24041: LD_VAR 0 4
24045: NOT
24046: OR
24047: IFFALSE 24051
// exit ;
24049: GO 24391
// list := [ ] ;
24051: LD_ADDR_VAR 0 13
24055: PUSH
24056: EMPTY
24057: ST_TO_ADDR
// if x - r < 0 then
24058: LD_VAR 0 2
24062: PUSH
24063: LD_VAR 0 4
24067: MINUS
24068: PUSH
24069: LD_INT 0
24071: LESS
24072: IFFALSE 24084
// min_x := 0 else
24074: LD_ADDR_VAR 0 7
24078: PUSH
24079: LD_INT 0
24081: ST_TO_ADDR
24082: GO 24100
// min_x := x - r ;
24084: LD_ADDR_VAR 0 7
24088: PUSH
24089: LD_VAR 0 2
24093: PUSH
24094: LD_VAR 0 4
24098: MINUS
24099: ST_TO_ADDR
// if y - r < 0 then
24100: LD_VAR 0 3
24104: PUSH
24105: LD_VAR 0 4
24109: MINUS
24110: PUSH
24111: LD_INT 0
24113: LESS
24114: IFFALSE 24126
// min_y := 0 else
24116: LD_ADDR_VAR 0 8
24120: PUSH
24121: LD_INT 0
24123: ST_TO_ADDR
24124: GO 24142
// min_y := y - r ;
24126: LD_ADDR_VAR 0 8
24130: PUSH
24131: LD_VAR 0 3
24135: PUSH
24136: LD_VAR 0 4
24140: MINUS
24141: ST_TO_ADDR
// max_x := x + r ;
24142: LD_ADDR_VAR 0 9
24146: PUSH
24147: LD_VAR 0 2
24151: PUSH
24152: LD_VAR 0 4
24156: PLUS
24157: ST_TO_ADDR
// max_y := y + r ;
24158: LD_ADDR_VAR 0 10
24162: PUSH
24163: LD_VAR 0 3
24167: PUSH
24168: LD_VAR 0 4
24172: PLUS
24173: ST_TO_ADDR
// for _x = min_x to max_x do
24174: LD_ADDR_VAR 0 11
24178: PUSH
24179: DOUBLE
24180: LD_VAR 0 7
24184: DEC
24185: ST_TO_ADDR
24186: LD_VAR 0 9
24190: PUSH
24191: FOR_TO
24192: IFFALSE 24309
// for _y = min_y to max_y do
24194: LD_ADDR_VAR 0 12
24198: PUSH
24199: DOUBLE
24200: LD_VAR 0 8
24204: DEC
24205: ST_TO_ADDR
24206: LD_VAR 0 10
24210: PUSH
24211: FOR_TO
24212: IFFALSE 24305
// begin if not ValidHex ( _x , _y ) then
24214: LD_VAR 0 11
24218: PPUSH
24219: LD_VAR 0 12
24223: PPUSH
24224: CALL_OW 488
24228: NOT
24229: IFFALSE 24233
// continue ;
24231: GO 24211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24233: LD_VAR 0 11
24237: PPUSH
24238: LD_VAR 0 12
24242: PPUSH
24243: CALL_OW 351
24247: PUSH
24248: LD_VAR 0 11
24252: PPUSH
24253: LD_VAR 0 12
24257: PPUSH
24258: CALL_OW 554
24262: AND
24263: IFFALSE 24303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24265: LD_ADDR_VAR 0 13
24269: PUSH
24270: LD_VAR 0 13
24274: PPUSH
24275: LD_VAR 0 13
24279: PUSH
24280: LD_INT 1
24282: PLUS
24283: PPUSH
24284: LD_VAR 0 11
24288: PUSH
24289: LD_VAR 0 12
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 2
24302: ST_TO_ADDR
// end ;
24303: GO 24211
24305: POP
24306: POP
24307: GO 24191
24309: POP
24310: POP
// if not list then
24311: LD_VAR 0 13
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 24391
// for i in list do
24320: LD_ADDR_VAR 0 6
24324: PUSH
24325: LD_VAR 0 13
24329: PUSH
24330: FOR_IN
24331: IFFALSE 24389
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24333: LD_VAR 0 1
24337: PPUSH
24338: LD_STRING M
24340: PUSH
24341: LD_VAR 0 6
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PUSH
24350: LD_VAR 0 6
24354: PUSH
24355: LD_INT 2
24357: ARRAY
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: PPUSH
24383: CALL_OW 447
24387: GO 24330
24389: POP
24390: POP
// end ;
24391: LD_VAR 0 5
24395: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24396: LD_EXP 84
24400: NOT
24401: IFFALSE 24451
24403: GO 24405
24405: DISABLE
// begin initHack := true ;
24406: LD_ADDR_EXP 84
24410: PUSH
24411: LD_INT 1
24413: ST_TO_ADDR
// hackTanks := [ ] ;
24414: LD_ADDR_EXP 85
24418: PUSH
24419: EMPTY
24420: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24421: LD_ADDR_EXP 86
24425: PUSH
24426: EMPTY
24427: ST_TO_ADDR
// hackLimit := 3 ;
24428: LD_ADDR_EXP 87
24432: PUSH
24433: LD_INT 3
24435: ST_TO_ADDR
// hackDist := 12 ;
24436: LD_ADDR_EXP 88
24440: PUSH
24441: LD_INT 12
24443: ST_TO_ADDR
// hackCounter := [ ] ;
24444: LD_ADDR_EXP 89
24448: PUSH
24449: EMPTY
24450: ST_TO_ADDR
// end ;
24451: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24452: LD_EXP 84
24456: PUSH
24457: LD_INT 34
24459: PUSH
24460: LD_EXP 16
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: AND
24474: IFFALSE 24729
24476: GO 24478
24478: DISABLE
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
// begin enable ;
24483: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24484: LD_ADDR_VAR 0 1
24488: PUSH
24489: LD_INT 34
24491: PUSH
24492: LD_EXP 16
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: PUSH
24506: FOR_IN
24507: IFFALSE 24727
// begin if not i in hackTanks then
24509: LD_VAR 0 1
24513: PUSH
24514: LD_EXP 85
24518: IN
24519: NOT
24520: IFFALSE 24603
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24522: LD_ADDR_EXP 85
24526: PUSH
24527: LD_EXP 85
24531: PPUSH
24532: LD_EXP 85
24536: PUSH
24537: LD_INT 1
24539: PLUS
24540: PPUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 1
24550: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24551: LD_ADDR_EXP 86
24555: PUSH
24556: LD_EXP 86
24560: PPUSH
24561: LD_EXP 86
24565: PUSH
24566: LD_INT 1
24568: PLUS
24569: PPUSH
24570: EMPTY
24571: PPUSH
24572: CALL_OW 1
24576: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24577: LD_ADDR_EXP 89
24581: PUSH
24582: LD_EXP 89
24586: PPUSH
24587: LD_EXP 89
24591: PUSH
24592: LD_INT 1
24594: PLUS
24595: PPUSH
24596: EMPTY
24597: PPUSH
24598: CALL_OW 1
24602: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 302
24612: NOT
24613: IFFALSE 24626
// begin HackUnlinkAll ( i ) ;
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL 24732 0 1
// continue ;
24624: GO 24506
// end ; HackCheckCapturedStatus ( i ) ;
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL 25175 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24635: LD_ADDR_VAR 0 2
24639: PUSH
24640: LD_INT 81
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 255
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 33
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 91
24669: PUSH
24670: LD_VAR 0 1
24674: PUSH
24675: LD_EXP 88
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 50
24687: PUSH
24688: EMPTY
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: ST_TO_ADDR
// if not tmp then
24702: LD_VAR 0 2
24706: NOT
24707: IFFALSE 24711
// continue ;
24709: GO 24506
// HackLink ( i , tmp ) ;
24711: LD_VAR 0 1
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: CALL 24868 0 2
// end ;
24725: GO 24506
24727: POP
24728: POP
// end ;
24729: PPOPN 2
24731: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24732: LD_INT 0
24734: PPUSH
24735: PPUSH
24736: PPUSH
// if not hack in hackTanks then
24737: LD_VAR 0 1
24741: PUSH
24742: LD_EXP 85
24746: IN
24747: NOT
24748: IFFALSE 24752
// exit ;
24750: GO 24863
// index := GetElementIndex ( hackTanks , hack ) ;
24752: LD_ADDR_VAR 0 4
24756: PUSH
24757: LD_EXP 85
24761: PPUSH
24762: LD_VAR 0 1
24766: PPUSH
24767: CALL 30283 0 2
24771: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24772: LD_EXP 86
24776: PUSH
24777: LD_VAR 0 4
24781: ARRAY
24782: IFFALSE 24863
// begin for i in hackTanksCaptured [ index ] do
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_EXP 86
24793: PUSH
24794: LD_VAR 0 4
24798: ARRAY
24799: PUSH
24800: FOR_IN
24801: IFFALSE 24827
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24803: LD_VAR 0 3
24807: PUSH
24808: LD_INT 1
24810: ARRAY
24811: PPUSH
24812: LD_VAR 0 3
24816: PUSH
24817: LD_INT 2
24819: ARRAY
24820: PPUSH
24821: CALL_OW 235
24825: GO 24800
24827: POP
24828: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24829: LD_ADDR_EXP 86
24833: PUSH
24834: LD_EXP 86
24838: PPUSH
24839: LD_VAR 0 4
24843: PPUSH
24844: EMPTY
24845: PPUSH
24846: CALL_OW 1
24850: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_INT 0
24858: PPUSH
24859: CALL_OW 505
// end ; end ;
24863: LD_VAR 0 2
24867: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24868: LD_INT 0
24870: PPUSH
24871: PPUSH
24872: PPUSH
// if not hack in hackTanks or not vehicles then
24873: LD_VAR 0 1
24877: PUSH
24878: LD_EXP 85
24882: IN
24883: NOT
24884: PUSH
24885: LD_VAR 0 2
24889: NOT
24890: OR
24891: IFFALSE 24895
// exit ;
24893: GO 25170
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24895: LD_ADDR_VAR 0 2
24899: PUSH
24900: LD_VAR 0 1
24904: PPUSH
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: LD_INT 1
24915: PPUSH
24916: CALL 30933 0 4
24920: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24921: LD_ADDR_VAR 0 5
24925: PUSH
24926: LD_EXP 85
24930: PPUSH
24931: LD_VAR 0 1
24935: PPUSH
24936: CALL 30283 0 2
24940: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24941: LD_EXP 86
24945: PUSH
24946: LD_VAR 0 5
24950: ARRAY
24951: PUSH
24952: LD_EXP 87
24956: LESS
24957: IFFALSE 25146
// begin for i := 1 to vehicles do
24959: LD_ADDR_VAR 0 4
24963: PUSH
24964: DOUBLE
24965: LD_INT 1
24967: DEC
24968: ST_TO_ADDR
24969: LD_VAR 0 2
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25144
// begin if hackTanksCaptured [ index ] = hackLimit then
24977: LD_EXP 86
24981: PUSH
24982: LD_VAR 0 5
24986: ARRAY
24987: PUSH
24988: LD_EXP 87
24992: EQUAL
24993: IFFALSE 24997
// break ;
24995: GO 25144
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24997: LD_ADDR_EXP 89
25001: PUSH
25002: LD_EXP 89
25006: PPUSH
25007: LD_VAR 0 5
25011: PPUSH
25012: LD_EXP 89
25016: PUSH
25017: LD_VAR 0 5
25021: ARRAY
25022: PUSH
25023: LD_INT 1
25025: PLUS
25026: PPUSH
25027: CALL_OW 1
25031: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25032: LD_ADDR_EXP 86
25036: PUSH
25037: LD_EXP 86
25041: PPUSH
25042: LD_VAR 0 5
25046: PUSH
25047: LD_EXP 86
25051: PUSH
25052: LD_VAR 0 5
25056: ARRAY
25057: PUSH
25058: LD_INT 1
25060: PLUS
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: LD_VAR 0 2
25070: PUSH
25071: LD_VAR 0 4
25075: ARRAY
25076: PUSH
25077: LD_VAR 0 2
25081: PUSH
25082: LD_VAR 0 4
25086: ARRAY
25087: PPUSH
25088: CALL_OW 255
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL 30498 0 3
25101: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25102: LD_VAR 0 2
25106: PUSH
25107: LD_VAR 0 4
25111: ARRAY
25112: PPUSH
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL_OW 255
25122: PPUSH
25123: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25127: LD_VAR 0 2
25131: PUSH
25132: LD_VAR 0 4
25136: ARRAY
25137: PPUSH
25138: CALL_OW 141
// end ;
25142: GO 24974
25144: POP
25145: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25146: LD_VAR 0 1
25150: PPUSH
25151: LD_EXP 86
25155: PUSH
25156: LD_VAR 0 5
25160: ARRAY
25161: PUSH
25162: LD_INT 0
25164: PLUS
25165: PPUSH
25166: CALL_OW 505
// end ;
25170: LD_VAR 0 3
25174: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25175: LD_INT 0
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
// if not hack in hackTanks then
25181: LD_VAR 0 1
25185: PUSH
25186: LD_EXP 85
25190: IN
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25436
// index := GetElementIndex ( hackTanks , hack ) ;
25196: LD_ADDR_VAR 0 4
25200: PUSH
25201: LD_EXP 85
25205: PPUSH
25206: LD_VAR 0 1
25210: PPUSH
25211: CALL 30283 0 2
25215: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: DOUBLE
25222: LD_EXP 86
25226: PUSH
25227: LD_VAR 0 4
25231: ARRAY
25232: INC
25233: ST_TO_ADDR
25234: LD_INT 1
25236: PUSH
25237: FOR_DOWNTO
25238: IFFALSE 25410
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25240: LD_ADDR_VAR 0 5
25244: PUSH
25245: LD_EXP 86
25249: PUSH
25250: LD_VAR 0 4
25254: ARRAY
25255: PUSH
25256: LD_VAR 0 3
25260: ARRAY
25261: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25262: LD_VAR 0 5
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: PPUSH
25271: CALL_OW 302
25275: NOT
25276: PUSH
25277: LD_VAR 0 5
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: PPUSH
25286: CALL_OW 255
25290: PUSH
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 255
25300: NONEQUAL
25301: OR
25302: IFFALSE 25408
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25304: LD_VAR 0 5
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: CALL_OW 305
25317: PUSH
25318: LD_VAR 0 5
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PPUSH
25327: CALL_OW 255
25331: PUSH
25332: LD_VAR 0 1
25336: PPUSH
25337: CALL_OW 255
25341: EQUAL
25342: AND
25343: IFFALSE 25367
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25345: LD_VAR 0 5
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PPUSH
25354: LD_VAR 0 5
25358: PUSH
25359: LD_INT 2
25361: ARRAY
25362: PPUSH
25363: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25367: LD_ADDR_EXP 86
25371: PUSH
25372: LD_EXP 86
25376: PPUSH
25377: LD_VAR 0 4
25381: PPUSH
25382: LD_EXP 86
25386: PUSH
25387: LD_VAR 0 4
25391: ARRAY
25392: PPUSH
25393: LD_VAR 0 3
25397: PPUSH
25398: CALL_OW 3
25402: PPUSH
25403: CALL_OW 1
25407: ST_TO_ADDR
// end ; end ;
25408: GO 25237
25410: POP
25411: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25412: LD_VAR 0 1
25416: PPUSH
25417: LD_EXP 86
25421: PUSH
25422: LD_VAR 0 4
25426: ARRAY
25427: PUSH
25428: LD_INT 0
25430: PLUS
25431: PPUSH
25432: CALL_OW 505
// end ;
25436: LD_VAR 0 2
25440: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25441: LD_INT 0
25443: PPUSH
25444: PPUSH
25445: PPUSH
25446: PPUSH
// if not hack in hackTanks then
25447: LD_VAR 0 1
25451: PUSH
25452: LD_EXP 85
25456: IN
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 25547
// index := GetElementIndex ( hackTanks , hack ) ;
25462: LD_ADDR_VAR 0 5
25466: PUSH
25467: LD_EXP 85
25471: PPUSH
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL 30283 0 2
25481: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: DOUBLE
25488: LD_INT 1
25490: DEC
25491: ST_TO_ADDR
25492: LD_EXP 86
25496: PUSH
25497: LD_VAR 0 5
25501: ARRAY
25502: PUSH
25503: FOR_TO
25504: IFFALSE 25545
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25506: LD_EXP 86
25510: PUSH
25511: LD_VAR 0 5
25515: ARRAY
25516: PUSH
25517: LD_VAR 0 4
25521: ARRAY
25522: PUSH
25523: LD_INT 1
25525: ARRAY
25526: PUSH
25527: LD_VAR 0 2
25531: EQUAL
25532: IFFALSE 25543
// KillUnit ( vehicle ) ;
25534: LD_VAR 0 2
25538: PPUSH
25539: CALL_OW 66
25543: GO 25503
25545: POP
25546: POP
// end ; end_of_file
25547: LD_VAR 0 3
25551: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25552: LD_INT 0
25554: PPUSH
25555: PPUSH
// if exist_mode then
25556: LD_VAR 0 2
25560: IFFALSE 25585
// unit := CreateCharacter ( prefix & ident ) else
25562: LD_ADDR_VAR 0 5
25566: PUSH
25567: LD_VAR 0 3
25571: PUSH
25572: LD_VAR 0 1
25576: STR
25577: PPUSH
25578: CALL_OW 34
25582: ST_TO_ADDR
25583: GO 25600
// unit := NewCharacter ( ident ) ;
25585: LD_ADDR_VAR 0 5
25589: PUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 25
25599: ST_TO_ADDR
// result := unit ;
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_VAR 0 5
25609: ST_TO_ADDR
// end ;
25610: LD_VAR 0 4
25614: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25615: LD_INT 0
25617: PPUSH
25618: PPUSH
// if not side or not nation then
25619: LD_VAR 0 1
25623: NOT
25624: PUSH
25625: LD_VAR 0 2
25629: NOT
25630: OR
25631: IFFALSE 25635
// exit ;
25633: GO 26399
// case nation of nation_american :
25635: LD_VAR 0 2
25639: PUSH
25640: LD_INT 1
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25648
25646: GO 25862
25648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25649: LD_ADDR_VAR 0 4
25653: PUSH
25654: LD_INT 35
25656: PUSH
25657: LD_INT 45
25659: PUSH
25660: LD_INT 46
25662: PUSH
25663: LD_INT 47
25665: PUSH
25666: LD_INT 82
25668: PUSH
25669: LD_INT 83
25671: PUSH
25672: LD_INT 84
25674: PUSH
25675: LD_INT 85
25677: PUSH
25678: LD_INT 86
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 6
25689: PUSH
25690: LD_INT 15
25692: PUSH
25693: LD_INT 16
25695: PUSH
25696: LD_INT 7
25698: PUSH
25699: LD_INT 12
25701: PUSH
25702: LD_INT 13
25704: PUSH
25705: LD_INT 10
25707: PUSH
25708: LD_INT 14
25710: PUSH
25711: LD_INT 20
25713: PUSH
25714: LD_INT 21
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_INT 25
25722: PUSH
25723: LD_INT 32
25725: PUSH
25726: LD_INT 27
25728: PUSH
25729: LD_INT 36
25731: PUSH
25732: LD_INT 69
25734: PUSH
25735: LD_INT 39
25737: PUSH
25738: LD_INT 34
25740: PUSH
25741: LD_INT 40
25743: PUSH
25744: LD_INT 48
25746: PUSH
25747: LD_INT 49
25749: PUSH
25750: LD_INT 50
25752: PUSH
25753: LD_INT 51
25755: PUSH
25756: LD_INT 52
25758: PUSH
25759: LD_INT 53
25761: PUSH
25762: LD_INT 54
25764: PUSH
25765: LD_INT 55
25767: PUSH
25768: LD_INT 56
25770: PUSH
25771: LD_INT 57
25773: PUSH
25774: LD_INT 58
25776: PUSH
25777: LD_INT 59
25779: PUSH
25780: LD_INT 60
25782: PUSH
25783: LD_INT 61
25785: PUSH
25786: LD_INT 62
25788: PUSH
25789: LD_INT 80
25791: PUSH
25792: LD_INT 82
25794: PUSH
25795: LD_INT 83
25797: PUSH
25798: LD_INT 84
25800: PUSH
25801: LD_INT 85
25803: PUSH
25804: LD_INT 86
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: ST_TO_ADDR
25860: GO 26323
25862: LD_INT 2
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 26092
25870: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25871: LD_ADDR_VAR 0 4
25875: PUSH
25876: LD_INT 35
25878: PUSH
25879: LD_INT 45
25881: PUSH
25882: LD_INT 46
25884: PUSH
25885: LD_INT 47
25887: PUSH
25888: LD_INT 82
25890: PUSH
25891: LD_INT 83
25893: PUSH
25894: LD_INT 84
25896: PUSH
25897: LD_INT 85
25899: PUSH
25900: LD_INT 87
25902: PUSH
25903: LD_INT 70
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 11
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 4
25917: PUSH
25918: LD_INT 5
25920: PUSH
25921: LD_INT 6
25923: PUSH
25924: LD_INT 15
25926: PUSH
25927: LD_INT 18
25929: PUSH
25930: LD_INT 7
25932: PUSH
25933: LD_INT 17
25935: PUSH
25936: LD_INT 8
25938: PUSH
25939: LD_INT 20
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_INT 72
25950: PUSH
25951: LD_INT 26
25953: PUSH
25954: LD_INT 69
25956: PUSH
25957: LD_INT 39
25959: PUSH
25960: LD_INT 40
25962: PUSH
25963: LD_INT 41
25965: PUSH
25966: LD_INT 42
25968: PUSH
25969: LD_INT 43
25971: PUSH
25972: LD_INT 48
25974: PUSH
25975: LD_INT 49
25977: PUSH
25978: LD_INT 50
25980: PUSH
25981: LD_INT 51
25983: PUSH
25984: LD_INT 52
25986: PUSH
25987: LD_INT 53
25989: PUSH
25990: LD_INT 54
25992: PUSH
25993: LD_INT 55
25995: PUSH
25996: LD_INT 56
25998: PUSH
25999: LD_INT 60
26001: PUSH
26002: LD_INT 61
26004: PUSH
26005: LD_INT 62
26007: PUSH
26008: LD_INT 66
26010: PUSH
26011: LD_INT 67
26013: PUSH
26014: LD_INT 68
26016: PUSH
26017: LD_INT 81
26019: PUSH
26020: LD_INT 82
26022: PUSH
26023: LD_INT 83
26025: PUSH
26026: LD_INT 84
26028: PUSH
26029: LD_INT 85
26031: PUSH
26032: LD_INT 87
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: ST_TO_ADDR
26090: GO 26323
26092: LD_INT 3
26094: DOUBLE
26095: EQUAL
26096: IFTRUE 26100
26098: GO 26322
26100: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26101: LD_ADDR_VAR 0 4
26105: PUSH
26106: LD_INT 46
26108: PUSH
26109: LD_INT 47
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: LD_INT 82
26120: PUSH
26121: LD_INT 83
26123: PUSH
26124: LD_INT 84
26126: PUSH
26127: LD_INT 85
26129: PUSH
26130: LD_INT 86
26132: PUSH
26133: LD_INT 11
26135: PUSH
26136: LD_INT 9
26138: PUSH
26139: LD_INT 20
26141: PUSH
26142: LD_INT 19
26144: PUSH
26145: LD_INT 21
26147: PUSH
26148: LD_INT 24
26150: PUSH
26151: LD_INT 22
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 28
26159: PUSH
26160: LD_INT 29
26162: PUSH
26163: LD_INT 30
26165: PUSH
26166: LD_INT 31
26168: PUSH
26169: LD_INT 37
26171: PUSH
26172: LD_INT 38
26174: PUSH
26175: LD_INT 32
26177: PUSH
26178: LD_INT 27
26180: PUSH
26181: LD_INT 33
26183: PUSH
26184: LD_INT 69
26186: PUSH
26187: LD_INT 39
26189: PUSH
26190: LD_INT 34
26192: PUSH
26193: LD_INT 40
26195: PUSH
26196: LD_INT 71
26198: PUSH
26199: LD_INT 23
26201: PUSH
26202: LD_INT 44
26204: PUSH
26205: LD_INT 48
26207: PUSH
26208: LD_INT 49
26210: PUSH
26211: LD_INT 50
26213: PUSH
26214: LD_INT 51
26216: PUSH
26217: LD_INT 52
26219: PUSH
26220: LD_INT 53
26222: PUSH
26223: LD_INT 54
26225: PUSH
26226: LD_INT 55
26228: PUSH
26229: LD_INT 56
26231: PUSH
26232: LD_INT 57
26234: PUSH
26235: LD_INT 58
26237: PUSH
26238: LD_INT 59
26240: PUSH
26241: LD_INT 63
26243: PUSH
26244: LD_INT 64
26246: PUSH
26247: LD_INT 65
26249: PUSH
26250: LD_INT 82
26252: PUSH
26253: LD_INT 83
26255: PUSH
26256: LD_INT 84
26258: PUSH
26259: LD_INT 85
26261: PUSH
26262: LD_INT 86
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
26320: GO 26323
26322: POP
// if state > - 1 and state < 3 then
26323: LD_VAR 0 3
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: GREATER
26332: PUSH
26333: LD_VAR 0 3
26337: PUSH
26338: LD_INT 3
26340: LESS
26341: AND
26342: IFFALSE 26399
// for i in result do
26344: LD_ADDR_VAR 0 5
26348: PUSH
26349: LD_VAR 0 4
26353: PUSH
26354: FOR_IN
26355: IFFALSE 26397
// if GetTech ( i , side ) <> state then
26357: LD_VAR 0 5
26361: PPUSH
26362: LD_VAR 0 1
26366: PPUSH
26367: CALL_OW 321
26371: PUSH
26372: LD_VAR 0 3
26376: NONEQUAL
26377: IFFALSE 26395
// result := result diff i ;
26379: LD_ADDR_VAR 0 4
26383: PUSH
26384: LD_VAR 0 4
26388: PUSH
26389: LD_VAR 0 5
26393: DIFF
26394: ST_TO_ADDR
26395: GO 26354
26397: POP
26398: POP
// end ;
26399: LD_VAR 0 4
26403: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26404: LD_INT 0
26406: PPUSH
26407: PPUSH
26408: PPUSH
// result := true ;
26409: LD_ADDR_VAR 0 3
26413: PUSH
26414: LD_INT 1
26416: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_VAR 0 2
26426: PPUSH
26427: CALL_OW 480
26431: ST_TO_ADDR
// if not tmp then
26432: LD_VAR 0 5
26436: NOT
26437: IFFALSE 26441
// exit ;
26439: GO 26490
// for i in tmp do
26441: LD_ADDR_VAR 0 4
26445: PUSH
26446: LD_VAR 0 5
26450: PUSH
26451: FOR_IN
26452: IFFALSE 26488
// if GetTech ( i , side ) <> state_researched then
26454: LD_VAR 0 4
26458: PPUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 321
26468: PUSH
26469: LD_INT 2
26471: NONEQUAL
26472: IFFALSE 26486
// begin result := false ;
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 0
26481: ST_TO_ADDR
// exit ;
26482: POP
26483: POP
26484: GO 26490
// end ;
26486: GO 26451
26488: POP
26489: POP
// end ;
26490: LD_VAR 0 3
26494: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
26508: PPUSH
26509: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26510: LD_VAR 0 1
26514: NOT
26515: PUSH
26516: LD_VAR 0 1
26520: PPUSH
26521: CALL_OW 257
26525: PUSH
26526: LD_INT 9
26528: NONEQUAL
26529: OR
26530: IFFALSE 26534
// exit ;
26532: GO 27107
// side := GetSide ( unit ) ;
26534: LD_ADDR_VAR 0 9
26538: PUSH
26539: LD_VAR 0 1
26543: PPUSH
26544: CALL_OW 255
26548: ST_TO_ADDR
// tech_space := tech_spacanom ;
26549: LD_ADDR_VAR 0 12
26553: PUSH
26554: LD_INT 29
26556: ST_TO_ADDR
// tech_time := tech_taurad ;
26557: LD_ADDR_VAR 0 13
26561: PUSH
26562: LD_INT 28
26564: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26565: LD_ADDR_VAR 0 11
26569: PUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 310
26579: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26580: LD_VAR 0 11
26584: PPUSH
26585: CALL_OW 247
26589: PUSH
26590: LD_INT 2
26592: EQUAL
26593: IFFALSE 26597
// exit ;
26595: GO 27107
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26597: LD_ADDR_VAR 0 8
26601: PUSH
26602: LD_INT 81
26604: PUSH
26605: LD_VAR 0 9
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: LD_INT 21
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PPUSH
26635: CALL_OW 69
26639: ST_TO_ADDR
// if not tmp then
26640: LD_VAR 0 8
26644: NOT
26645: IFFALSE 26649
// exit ;
26647: GO 27107
// if in_unit then
26649: LD_VAR 0 11
26653: IFFALSE 26677
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26655: LD_ADDR_VAR 0 10
26659: PUSH
26660: LD_VAR 0 8
26664: PPUSH
26665: LD_VAR 0 11
26669: PPUSH
26670: CALL_OW 74
26674: ST_TO_ADDR
26675: GO 26697
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26677: LD_ADDR_VAR 0 10
26681: PUSH
26682: LD_VAR 0 8
26686: PPUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 74
26696: ST_TO_ADDR
// if not enemy then
26697: LD_VAR 0 10
26701: NOT
26702: IFFALSE 26706
// exit ;
26704: GO 27107
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26706: LD_VAR 0 11
26710: PUSH
26711: LD_VAR 0 11
26715: PPUSH
26716: LD_VAR 0 10
26720: PPUSH
26721: CALL_OW 296
26725: PUSH
26726: LD_INT 13
26728: GREATER
26729: AND
26730: PUSH
26731: LD_VAR 0 1
26735: PPUSH
26736: LD_VAR 0 10
26740: PPUSH
26741: CALL_OW 296
26745: PUSH
26746: LD_INT 12
26748: GREATER
26749: OR
26750: IFFALSE 26754
// exit ;
26752: GO 27107
// missile := [ 1 ] ;
26754: LD_ADDR_VAR 0 14
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: EMPTY
26763: LIST
26764: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26765: LD_VAR 0 9
26769: PPUSH
26770: LD_VAR 0 12
26774: PPUSH
26775: CALL_OW 325
26779: IFFALSE 26808
// missile := Insert ( missile , missile + 1 , 2 ) ;
26781: LD_ADDR_VAR 0 14
26785: PUSH
26786: LD_VAR 0 14
26790: PPUSH
26791: LD_VAR 0 14
26795: PUSH
26796: LD_INT 1
26798: PLUS
26799: PPUSH
26800: LD_INT 2
26802: PPUSH
26803: CALL_OW 2
26807: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26808: LD_VAR 0 9
26812: PPUSH
26813: LD_VAR 0 13
26817: PPUSH
26818: CALL_OW 325
26822: PUSH
26823: LD_VAR 0 10
26827: PPUSH
26828: CALL_OW 255
26832: PPUSH
26833: LD_VAR 0 13
26837: PPUSH
26838: CALL_OW 325
26842: NOT
26843: AND
26844: IFFALSE 26873
// missile := Insert ( missile , missile + 1 , 3 ) ;
26846: LD_ADDR_VAR 0 14
26850: PUSH
26851: LD_VAR 0 14
26855: PPUSH
26856: LD_VAR 0 14
26860: PUSH
26861: LD_INT 1
26863: PLUS
26864: PPUSH
26865: LD_INT 3
26867: PPUSH
26868: CALL_OW 2
26872: ST_TO_ADDR
// if missile < 2 then
26873: LD_VAR 0 14
26877: PUSH
26878: LD_INT 2
26880: LESS
26881: IFFALSE 26885
// exit ;
26883: GO 27107
// x := GetX ( enemy ) ;
26885: LD_ADDR_VAR 0 4
26889: PUSH
26890: LD_VAR 0 10
26894: PPUSH
26895: CALL_OW 250
26899: ST_TO_ADDR
// y := GetY ( enemy ) ;
26900: LD_ADDR_VAR 0 5
26904: PUSH
26905: LD_VAR 0 10
26909: PPUSH
26910: CALL_OW 251
26914: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26915: LD_ADDR_VAR 0 6
26919: PUSH
26920: LD_VAR 0 4
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PPUSH
26929: LD_INT 1
26931: PPUSH
26932: CALL_OW 12
26936: PLUS
26937: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26938: LD_ADDR_VAR 0 7
26942: PUSH
26943: LD_VAR 0 5
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PPUSH
26952: LD_INT 1
26954: PPUSH
26955: CALL_OW 12
26959: PLUS
26960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26961: LD_VAR 0 6
26965: PPUSH
26966: LD_VAR 0 7
26970: PPUSH
26971: CALL_OW 488
26975: NOT
26976: IFFALSE 26998
// begin _x := x ;
26978: LD_ADDR_VAR 0 6
26982: PUSH
26983: LD_VAR 0 4
26987: ST_TO_ADDR
// _y := y ;
26988: LD_ADDR_VAR 0 7
26992: PUSH
26993: LD_VAR 0 5
26997: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26998: LD_ADDR_VAR 0 3
27002: PUSH
27003: LD_INT 1
27005: PPUSH
27006: LD_VAR 0 14
27010: PPUSH
27011: CALL_OW 12
27015: ST_TO_ADDR
// case i of 1 :
27016: LD_VAR 0 3
27020: PUSH
27021: LD_INT 1
27023: DOUBLE
27024: EQUAL
27025: IFTRUE 27029
27027: GO 27046
27029: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27030: LD_VAR 0 1
27034: PPUSH
27035: LD_VAR 0 10
27039: PPUSH
27040: CALL_OW 115
27044: GO 27107
27046: LD_INT 2
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27076
27054: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27055: LD_VAR 0 1
27059: PPUSH
27060: LD_VAR 0 6
27064: PPUSH
27065: LD_VAR 0 7
27069: PPUSH
27070: CALL_OW 153
27074: GO 27107
27076: LD_INT 3
27078: DOUBLE
27079: EQUAL
27080: IFTRUE 27084
27082: GO 27106
27084: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27085: LD_VAR 0 1
27089: PPUSH
27090: LD_VAR 0 6
27094: PPUSH
27095: LD_VAR 0 7
27099: PPUSH
27100: CALL_OW 154
27104: GO 27107
27106: POP
// end ;
27107: LD_VAR 0 2
27111: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27112: LD_INT 0
27114: PPUSH
27115: PPUSH
27116: PPUSH
27117: PPUSH
27118: PPUSH
27119: PPUSH
// if not unit or not building then
27120: LD_VAR 0 1
27124: NOT
27125: PUSH
27126: LD_VAR 0 2
27130: NOT
27131: OR
27132: IFFALSE 27136
// exit ;
27134: GO 27294
// x := GetX ( building ) ;
27136: LD_ADDR_VAR 0 5
27140: PUSH
27141: LD_VAR 0 2
27145: PPUSH
27146: CALL_OW 250
27150: ST_TO_ADDR
// y := GetY ( building ) ;
27151: LD_ADDR_VAR 0 6
27155: PUSH
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 251
27165: ST_TO_ADDR
// for i = 0 to 5 do
27166: LD_ADDR_VAR 0 4
27170: PUSH
27171: DOUBLE
27172: LD_INT 0
27174: DEC
27175: ST_TO_ADDR
27176: LD_INT 5
27178: PUSH
27179: FOR_TO
27180: IFFALSE 27292
// begin _x := ShiftX ( x , i , 3 ) ;
27182: LD_ADDR_VAR 0 7
27186: PUSH
27187: LD_VAR 0 5
27191: PPUSH
27192: LD_VAR 0 4
27196: PPUSH
27197: LD_INT 3
27199: PPUSH
27200: CALL_OW 272
27204: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27205: LD_ADDR_VAR 0 8
27209: PUSH
27210: LD_VAR 0 6
27214: PPUSH
27215: LD_VAR 0 4
27219: PPUSH
27220: LD_INT 3
27222: PPUSH
27223: CALL_OW 273
27227: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27228: LD_VAR 0 7
27232: PPUSH
27233: LD_VAR 0 8
27237: PPUSH
27238: CALL_OW 488
27242: NOT
27243: IFFALSE 27247
// continue ;
27245: GO 27179
// if HexInfo ( _x , _y ) = 0 then
27247: LD_VAR 0 7
27251: PPUSH
27252: LD_VAR 0 8
27256: PPUSH
27257: CALL_OW 428
27261: PUSH
27262: LD_INT 0
27264: EQUAL
27265: IFFALSE 27290
// begin ComMoveXY ( unit , _x , _y ) ;
27267: LD_VAR 0 1
27271: PPUSH
27272: LD_VAR 0 7
27276: PPUSH
27277: LD_VAR 0 8
27281: PPUSH
27282: CALL_OW 111
// exit ;
27286: POP
27287: POP
27288: GO 27294
// end ; end ;
27290: GO 27179
27292: POP
27293: POP
// end ;
27294: LD_VAR 0 3
27298: RET
// export function ScanBase ( side , base_area ) ; begin
27299: LD_INT 0
27301: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27302: LD_ADDR_VAR 0 3
27306: PUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: LD_INT 81
27314: PUSH
27315: LD_VAR 0 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PPUSH
27324: CALL_OW 70
27328: ST_TO_ADDR
// end ;
27329: LD_VAR 0 3
27333: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27334: LD_INT 0
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
// result := false ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 0
27347: ST_TO_ADDR
// side := GetSide ( unit ) ;
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 255
27362: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27363: LD_ADDR_VAR 0 4
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 248
27377: ST_TO_ADDR
// case nat of 1 :
27378: LD_VAR 0 4
27382: PUSH
27383: LD_INT 1
27385: DOUBLE
27386: EQUAL
27387: IFTRUE 27391
27389: GO 27402
27391: POP
// tech := tech_lassight ; 2 :
27392: LD_ADDR_VAR 0 5
27396: PUSH
27397: LD_INT 12
27399: ST_TO_ADDR
27400: GO 27441
27402: LD_INT 2
27404: DOUBLE
27405: EQUAL
27406: IFTRUE 27410
27408: GO 27421
27410: POP
// tech := tech_mortar ; 3 :
27411: LD_ADDR_VAR 0 5
27415: PUSH
27416: LD_INT 41
27418: ST_TO_ADDR
27419: GO 27441
27421: LD_INT 3
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 27440
27429: POP
// tech := tech_bazooka ; end ;
27430: LD_ADDR_VAR 0 5
27434: PUSH
27435: LD_INT 44
27437: ST_TO_ADDR
27438: GO 27441
27440: POP
// if Researched ( side , tech ) then
27441: LD_VAR 0 3
27445: PPUSH
27446: LD_VAR 0 5
27450: PPUSH
27451: CALL_OW 325
27455: IFFALSE 27482
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27457: LD_ADDR_VAR 0 2
27461: PUSH
27462: LD_INT 5
27464: PUSH
27465: LD_INT 8
27467: PUSH
27468: LD_INT 9
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: PUSH
27476: LD_VAR 0 4
27480: ARRAY
27481: ST_TO_ADDR
// end ;
27482: LD_VAR 0 2
27486: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
27491: PPUSH
// if not mines then
27492: LD_VAR 0 2
27496: NOT
27497: IFFALSE 27501
// exit ;
27499: GO 27645
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27501: LD_ADDR_VAR 0 5
27505: PUSH
27506: LD_INT 81
27508: PUSH
27509: LD_VAR 0 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PPUSH
27539: CALL_OW 69
27543: ST_TO_ADDR
// for i in mines do
27544: LD_ADDR_VAR 0 4
27548: PUSH
27549: LD_VAR 0 2
27553: PUSH
27554: FOR_IN
27555: IFFALSE 27643
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27557: LD_VAR 0 4
27561: PUSH
27562: LD_INT 1
27564: ARRAY
27565: PPUSH
27566: LD_VAR 0 4
27570: PUSH
27571: LD_INT 2
27573: ARRAY
27574: PPUSH
27575: CALL_OW 458
27579: NOT
27580: IFFALSE 27584
// continue ;
27582: GO 27554
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27584: LD_VAR 0 4
27588: PUSH
27589: LD_INT 1
27591: ARRAY
27592: PPUSH
27593: LD_VAR 0 4
27597: PUSH
27598: LD_INT 2
27600: ARRAY
27601: PPUSH
27602: CALL_OW 428
27606: PUSH
27607: LD_VAR 0 5
27611: IN
27612: IFFALSE 27641
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27614: LD_VAR 0 4
27618: PUSH
27619: LD_INT 1
27621: ARRAY
27622: PPUSH
27623: LD_VAR 0 4
27627: PUSH
27628: LD_INT 2
27630: ARRAY
27631: PPUSH
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 456
// end ;
27641: GO 27554
27643: POP
27644: POP
// end ;
27645: LD_VAR 0 3
27649: RET
// export function Count ( array ) ; var i ; begin
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
// result := 0 ;
27654: LD_ADDR_VAR 0 2
27658: PUSH
27659: LD_INT 0
27661: ST_TO_ADDR
// for i in array do
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_VAR 0 1
27671: PUSH
27672: FOR_IN
27673: IFFALSE 27697
// if i then
27675: LD_VAR 0 3
27679: IFFALSE 27695
// result := result + 1 ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_VAR 0 2
27690: PUSH
27691: LD_INT 1
27693: PLUS
27694: ST_TO_ADDR
27695: GO 27672
27697: POP
27698: POP
// end ;
27699: LD_VAR 0 2
27703: RET
// export function IsEmpty ( building ) ; begin
27704: LD_INT 0
27706: PPUSH
// if not building then
27707: LD_VAR 0 1
27711: NOT
27712: IFFALSE 27716
// exit ;
27714: GO 27759
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27716: LD_ADDR_VAR 0 2
27720: PUSH
27721: LD_VAR 0 1
27725: PUSH
27726: LD_INT 22
27728: PUSH
27729: LD_VAR 0 1
27733: PPUSH
27734: CALL_OW 255
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 58
27745: PUSH
27746: EMPTY
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PPUSH
27753: CALL_OW 69
27757: IN
27758: ST_TO_ADDR
// end ;
27759: LD_VAR 0 2
27763: RET
// export function IsNotFull ( building ) ; begin
27764: LD_INT 0
27766: PPUSH
// if not building then
27767: LD_VAR 0 1
27771: NOT
27772: IFFALSE 27776
// exit ;
27774: GO 27795
// result := UnitsInside ( building ) < 6 ;
27776: LD_ADDR_VAR 0 2
27780: PUSH
27781: LD_VAR 0 1
27785: PPUSH
27786: CALL_OW 313
27790: PUSH
27791: LD_INT 6
27793: LESS
27794: ST_TO_ADDR
// end ;
27795: LD_VAR 0 2
27799: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27800: LD_INT 0
27802: PPUSH
27803: PPUSH
27804: PPUSH
27805: PPUSH
// tmp := [ ] ;
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: EMPTY
27812: ST_TO_ADDR
// list := [ ] ;
27813: LD_ADDR_VAR 0 5
27817: PUSH
27818: EMPTY
27819: ST_TO_ADDR
// for i = 16 to 25 do
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: DOUBLE
27826: LD_INT 16
27828: DEC
27829: ST_TO_ADDR
27830: LD_INT 25
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27907
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27836: LD_ADDR_VAR 0 3
27840: PUSH
27841: LD_VAR 0 3
27845: PUSH
27846: LD_INT 22
27848: PUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 255
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 91
27865: PUSH
27866: LD_VAR 0 1
27870: PUSH
27871: LD_INT 6
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 30
27881: PUSH
27882: LD_VAR 0 4
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: ADD
27904: ST_TO_ADDR
27905: GO 27833
27907: POP
27908: POP
// for i = 1 to tmp do
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: DOUBLE
27915: LD_INT 1
27917: DEC
27918: ST_TO_ADDR
27919: LD_VAR 0 3
27923: PUSH
27924: FOR_TO
27925: IFFALSE 28013
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27927: LD_ADDR_VAR 0 5
27931: PUSH
27932: LD_VAR 0 5
27936: PUSH
27937: LD_VAR 0 3
27941: PUSH
27942: LD_VAR 0 4
27946: ARRAY
27947: PPUSH
27948: CALL_OW 266
27952: PUSH
27953: LD_VAR 0 3
27957: PUSH
27958: LD_VAR 0 4
27962: ARRAY
27963: PPUSH
27964: CALL_OW 250
27968: PUSH
27969: LD_VAR 0 3
27973: PUSH
27974: LD_VAR 0 4
27978: ARRAY
27979: PPUSH
27980: CALL_OW 251
27984: PUSH
27985: LD_VAR 0 3
27989: PUSH
27990: LD_VAR 0 4
27994: ARRAY
27995: PPUSH
27996: CALL_OW 254
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: ADD
28010: ST_TO_ADDR
28011: GO 27924
28013: POP
28014: POP
// result := list ;
28015: LD_ADDR_VAR 0 2
28019: PUSH
28020: LD_VAR 0 5
28024: ST_TO_ADDR
// end ;
28025: LD_VAR 0 2
28029: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28030: LD_INT 0
28032: PPUSH
28033: PPUSH
28034: PPUSH
28035: PPUSH
28036: PPUSH
28037: PPUSH
28038: PPUSH
// if not factory then
28039: LD_VAR 0 1
28043: NOT
28044: IFFALSE 28048
// exit ;
28046: GO 28641
// if control = control_apeman then
28048: LD_VAR 0 4
28052: PUSH
28053: LD_INT 5
28055: EQUAL
28056: IFFALSE 28165
// begin tmp := UnitsInside ( factory ) ;
28058: LD_ADDR_VAR 0 8
28062: PUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 313
28072: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28073: LD_VAR 0 8
28077: PPUSH
28078: LD_INT 25
28080: PUSH
28081: LD_INT 12
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PPUSH
28088: CALL_OW 72
28092: NOT
28093: IFFALSE 28103
// control := control_manual ;
28095: LD_ADDR_VAR 0 4
28099: PUSH
28100: LD_INT 1
28102: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28103: LD_ADDR_VAR 0 8
28107: PUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL 27800 0 1
28117: ST_TO_ADDR
// if tmp then
28118: LD_VAR 0 8
28122: IFFALSE 28165
// begin for i in tmp do
28124: LD_ADDR_VAR 0 7
28128: PUSH
28129: LD_VAR 0 8
28133: PUSH
28134: FOR_IN
28135: IFFALSE 28163
// if i [ 1 ] = b_ext_radio then
28137: LD_VAR 0 7
28141: PUSH
28142: LD_INT 1
28144: ARRAY
28145: PUSH
28146: LD_INT 22
28148: EQUAL
28149: IFFALSE 28161
// begin control := control_remote ;
28151: LD_ADDR_VAR 0 4
28155: PUSH
28156: LD_INT 2
28158: ST_TO_ADDR
// break ;
28159: GO 28163
// end ;
28161: GO 28134
28163: POP
28164: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: LD_VAR 0 3
28179: PPUSH
28180: LD_VAR 0 4
28184: PPUSH
28185: LD_VAR 0 5
28189: PPUSH
28190: CALL_OW 448
28194: IFFALSE 28229
// begin result := [ chassis , engine , control , weapon ] ;
28196: LD_ADDR_VAR 0 6
28200: PUSH
28201: LD_VAR 0 2
28205: PUSH
28206: LD_VAR 0 3
28210: PUSH
28211: LD_VAR 0 4
28215: PUSH
28216: LD_VAR 0 5
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// exit ;
28227: GO 28641
// end ; _chassis := AvailableChassisList ( factory ) ;
28229: LD_ADDR_VAR 0 9
28233: PUSH
28234: LD_VAR 0 1
28238: PPUSH
28239: CALL_OW 475
28243: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28244: LD_ADDR_VAR 0 11
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 476
28258: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28259: LD_ADDR_VAR 0 12
28263: PUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: CALL_OW 477
28273: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28274: LD_ADDR_VAR 0 10
28278: PUSH
28279: LD_VAR 0 1
28283: PPUSH
28284: CALL_OW 478
28288: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28289: LD_VAR 0 9
28293: NOT
28294: PUSH
28295: LD_VAR 0 11
28299: NOT
28300: OR
28301: PUSH
28302: LD_VAR 0 12
28306: NOT
28307: OR
28308: PUSH
28309: LD_VAR 0 10
28313: NOT
28314: OR
28315: IFFALSE 28350
// begin result := [ chassis , engine , control , weapon ] ;
28317: LD_ADDR_VAR 0 6
28321: PUSH
28322: LD_VAR 0 2
28326: PUSH
28327: LD_VAR 0 3
28331: PUSH
28332: LD_VAR 0 4
28336: PUSH
28337: LD_VAR 0 5
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// exit ;
28348: GO 28641
// end ; if not chassis in _chassis then
28350: LD_VAR 0 2
28354: PUSH
28355: LD_VAR 0 9
28359: IN
28360: NOT
28361: IFFALSE 28387
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28363: LD_ADDR_VAR 0 2
28367: PUSH
28368: LD_VAR 0 9
28372: PUSH
28373: LD_INT 1
28375: PPUSH
28376: LD_VAR 0 9
28380: PPUSH
28381: CALL_OW 12
28385: ARRAY
28386: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28387: LD_VAR 0 2
28391: PPUSH
28392: LD_VAR 0 3
28396: PPUSH
28397: CALL 28646 0 2
28401: NOT
28402: IFFALSE 28461
// repeat engine := _engine [ 1 ] ;
28404: LD_ADDR_VAR 0 3
28408: PUSH
28409: LD_VAR 0 11
28413: PUSH
28414: LD_INT 1
28416: ARRAY
28417: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28418: LD_ADDR_VAR 0 11
28422: PUSH
28423: LD_VAR 0 11
28427: PPUSH
28428: LD_INT 1
28430: PPUSH
28431: CALL_OW 3
28435: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28436: LD_VAR 0 2
28440: PPUSH
28441: LD_VAR 0 3
28445: PPUSH
28446: CALL 28646 0 2
28450: PUSH
28451: LD_VAR 0 11
28455: PUSH
28456: EMPTY
28457: EQUAL
28458: OR
28459: IFFALSE 28404
// if not control in _control then
28461: LD_VAR 0 4
28465: PUSH
28466: LD_VAR 0 12
28470: IN
28471: NOT
28472: IFFALSE 28498
// control := _control [ rand ( 1 , _control ) ] ;
28474: LD_ADDR_VAR 0 4
28478: PUSH
28479: LD_VAR 0 12
28483: PUSH
28484: LD_INT 1
28486: PPUSH
28487: LD_VAR 0 12
28491: PPUSH
28492: CALL_OW 12
28496: ARRAY
28497: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28498: LD_VAR 0 2
28502: PPUSH
28503: LD_VAR 0 5
28507: PPUSH
28508: CALL 28866 0 2
28512: NOT
28513: IFFALSE 28572
// repeat weapon := _weapon [ 1 ] ;
28515: LD_ADDR_VAR 0 5
28519: PUSH
28520: LD_VAR 0 10
28524: PUSH
28525: LD_INT 1
28527: ARRAY
28528: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28529: LD_ADDR_VAR 0 10
28533: PUSH
28534: LD_VAR 0 10
28538: PPUSH
28539: LD_INT 1
28541: PPUSH
28542: CALL_OW 3
28546: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28547: LD_VAR 0 2
28551: PPUSH
28552: LD_VAR 0 5
28556: PPUSH
28557: CALL 28866 0 2
28561: PUSH
28562: LD_VAR 0 10
28566: PUSH
28567: EMPTY
28568: EQUAL
28569: OR
28570: IFFALSE 28515
// result := [ ] ;
28572: LD_ADDR_VAR 0 6
28576: PUSH
28577: EMPTY
28578: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28579: LD_VAR 0 1
28583: PPUSH
28584: LD_VAR 0 2
28588: PPUSH
28589: LD_VAR 0 3
28593: PPUSH
28594: LD_VAR 0 4
28598: PPUSH
28599: LD_VAR 0 5
28603: PPUSH
28604: CALL_OW 448
28608: IFFALSE 28641
// result := [ chassis , engine , control , weapon ] ;
28610: LD_ADDR_VAR 0 6
28614: PUSH
28615: LD_VAR 0 2
28619: PUSH
28620: LD_VAR 0 3
28624: PUSH
28625: LD_VAR 0 4
28629: PUSH
28630: LD_VAR 0 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
// end ;
28641: LD_VAR 0 6
28645: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28646: LD_INT 0
28648: PPUSH
// if not chassis or not engine then
28649: LD_VAR 0 1
28653: NOT
28654: PUSH
28655: LD_VAR 0 2
28659: NOT
28660: OR
28661: IFFALSE 28665
// exit ;
28663: GO 28861
// case engine of engine_solar :
28665: LD_VAR 0 2
28669: PUSH
28670: LD_INT 2
28672: DOUBLE
28673: EQUAL
28674: IFTRUE 28678
28676: GO 28716
28678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 11
28686: PUSH
28687: LD_INT 12
28689: PUSH
28690: LD_INT 13
28692: PUSH
28693: LD_INT 14
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
28714: GO 28845
28716: LD_INT 1
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 28786
28724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 11
28732: PUSH
28733: LD_INT 12
28735: PUSH
28736: LD_INT 13
28738: PUSH
28739: LD_INT 14
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: LD_INT 21
28759: PUSH
28760: LD_INT 23
28762: PUSH
28763: LD_INT 22
28765: PUSH
28766: LD_INT 24
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
28784: GO 28845
28786: LD_INT 3
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28844
28794: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 13
28802: PUSH
28803: LD_INT 14
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: LD_INT 4
28814: PUSH
28815: LD_INT 5
28817: PUSH
28818: LD_INT 21
28820: PUSH
28821: LD_INT 22
28823: PUSH
28824: LD_INT 23
28826: PUSH
28827: LD_INT 24
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
28842: GO 28845
28844: POP
// result := ( chassis in result ) ;
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_VAR 0 1
28854: PUSH
28855: LD_VAR 0 3
28859: IN
28860: ST_TO_ADDR
// end ;
28861: LD_VAR 0 3
28865: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28866: LD_INT 0
28868: PPUSH
// if not chassis or not weapon then
28869: LD_VAR 0 1
28873: NOT
28874: PUSH
28875: LD_VAR 0 2
28879: NOT
28880: OR
28881: IFFALSE 28885
// exit ;
28883: GO 29911
// case weapon of us_machine_gun :
28885: LD_VAR 0 2
28889: PUSH
28890: LD_INT 2
28892: DOUBLE
28893: EQUAL
28894: IFTRUE 28898
28896: GO 28928
28898: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: LD_INT 4
28915: PUSH
28916: LD_INT 5
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
28926: GO 29895
28928: LD_INT 3
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28966
28936: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 2
28947: PUSH
28948: LD_INT 3
28950: PUSH
28951: LD_INT 4
28953: PUSH
28954: LD_INT 5
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: ST_TO_ADDR
28964: GO 29895
28966: LD_INT 11
28968: DOUBLE
28969: EQUAL
28970: IFTRUE 28974
28972: GO 29004
28974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 4
28991: PUSH
28992: LD_INT 5
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
29002: GO 29895
29004: LD_INT 4
29006: DOUBLE
29007: EQUAL
29008: IFTRUE 29012
29010: GO 29038
29012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29013: LD_ADDR_VAR 0 3
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: LD_INT 4
29026: PUSH
29027: LD_INT 5
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
29036: GO 29895
29038: LD_INT 5
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29072
29046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29047: LD_ADDR_VAR 0 3
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: LD_INT 4
29060: PUSH
29061: LD_INT 5
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: ST_TO_ADDR
29070: GO 29895
29072: LD_INT 9
29074: DOUBLE
29075: EQUAL
29076: IFTRUE 29080
29078: GO 29106
29080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: LD_INT 4
29094: PUSH
29095: LD_INT 5
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
29104: GO 29895
29106: LD_INT 7
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29140
29114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: LD_INT 4
29128: PUSH
29129: LD_INT 5
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
29138: GO 29895
29140: LD_INT 12
29142: DOUBLE
29143: EQUAL
29144: IFTRUE 29148
29146: GO 29174
29148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29149: LD_ADDR_VAR 0 3
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: LD_INT 4
29162: PUSH
29163: LD_INT 5
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: ST_TO_ADDR
29172: GO 29895
29174: LD_INT 13
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29208
29182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 3
29193: PUSH
29194: LD_INT 4
29196: PUSH
29197: LD_INT 5
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: ST_TO_ADDR
29206: GO 29895
29208: LD_INT 14
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29234
29216: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_INT 4
29224: PUSH
29225: LD_INT 5
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: ST_TO_ADDR
29232: GO 29895
29234: LD_INT 6
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29260
29242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29243: LD_ADDR_VAR 0 3
29247: PUSH
29248: LD_INT 4
29250: PUSH
29251: LD_INT 5
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: ST_TO_ADDR
29258: GO 29895
29260: LD_INT 10
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29286
29268: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_INT 4
29276: PUSH
29277: LD_INT 5
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 29895
29286: LD_INT 22
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29320
29294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29295: LD_ADDR_VAR 0 3
29299: PUSH
29300: LD_INT 11
29302: PUSH
29303: LD_INT 12
29305: PUSH
29306: LD_INT 13
29308: PUSH
29309: LD_INT 14
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
29318: GO 29895
29320: LD_INT 23
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29354
29328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 11
29336: PUSH
29337: LD_INT 12
29339: PUSH
29340: LD_INT 13
29342: PUSH
29343: LD_INT 14
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
29352: GO 29895
29354: LD_INT 24
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 29388
29362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29363: LD_ADDR_VAR 0 3
29367: PUSH
29368: LD_INT 11
29370: PUSH
29371: LD_INT 12
29373: PUSH
29374: LD_INT 13
29376: PUSH
29377: LD_INT 14
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
29386: GO 29895
29388: LD_INT 30
29390: DOUBLE
29391: EQUAL
29392: IFTRUE 29396
29394: GO 29422
29396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_INT 11
29404: PUSH
29405: LD_INT 12
29407: PUSH
29408: LD_INT 13
29410: PUSH
29411: LD_INT 14
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
29420: GO 29895
29422: LD_INT 25
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29430
29428: GO 29448
29430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_INT 13
29438: PUSH
29439: LD_INT 14
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: ST_TO_ADDR
29446: GO 29895
29448: LD_INT 27
29450: DOUBLE
29451: EQUAL
29452: IFTRUE 29456
29454: GO 29474
29456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29457: LD_ADDR_VAR 0 3
29461: PUSH
29462: LD_INT 13
29464: PUSH
29465: LD_INT 14
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 29895
29474: LD_INT 28
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29500
29482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 13
29490: PUSH
29491: LD_INT 14
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: ST_TO_ADDR
29498: GO 29895
29500: LD_INT 29
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29526
29508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29509: LD_ADDR_VAR 0 3
29513: PUSH
29514: LD_INT 13
29516: PUSH
29517: LD_INT 14
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: ST_TO_ADDR
29524: GO 29895
29526: LD_INT 31
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29552
29534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 13
29542: PUSH
29543: LD_INT 14
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: ST_TO_ADDR
29550: GO 29895
29552: LD_INT 26
29554: DOUBLE
29555: EQUAL
29556: IFTRUE 29560
29558: GO 29578
29560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29561: LD_ADDR_VAR 0 3
29565: PUSH
29566: LD_INT 13
29568: PUSH
29569: LD_INT 14
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: ST_TO_ADDR
29576: GO 29895
29578: LD_INT 42
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29612
29586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_INT 21
29594: PUSH
29595: LD_INT 22
29597: PUSH
29598: LD_INT 23
29600: PUSH
29601: LD_INT 24
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: ST_TO_ADDR
29610: GO 29895
29612: LD_INT 43
29614: DOUBLE
29615: EQUAL
29616: IFTRUE 29620
29618: GO 29646
29620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29621: LD_ADDR_VAR 0 3
29625: PUSH
29626: LD_INT 21
29628: PUSH
29629: LD_INT 22
29631: PUSH
29632: LD_INT 23
29634: PUSH
29635: LD_INT 24
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 29895
29646: LD_INT 44
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29680
29654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 21
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_INT 23
29668: PUSH
29669: LD_INT 24
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
29678: GO 29895
29680: LD_INT 45
29682: DOUBLE
29683: EQUAL
29684: IFTRUE 29688
29686: GO 29714
29688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29689: LD_ADDR_VAR 0 3
29693: PUSH
29694: LD_INT 21
29696: PUSH
29697: LD_INT 22
29699: PUSH
29700: LD_INT 23
29702: PUSH
29703: LD_INT 24
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
29712: GO 29895
29714: LD_INT 49
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29748
29722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29723: LD_ADDR_VAR 0 3
29727: PUSH
29728: LD_INT 21
29730: PUSH
29731: LD_INT 22
29733: PUSH
29734: LD_INT 23
29736: PUSH
29737: LD_INT 24
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
29746: GO 29895
29748: LD_INT 51
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 29782
29756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_INT 21
29764: PUSH
29765: LD_INT 22
29767: PUSH
29768: LD_INT 23
29770: PUSH
29771: LD_INT 24
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
29780: GO 29895
29782: LD_INT 52
29784: DOUBLE
29785: EQUAL
29786: IFTRUE 29790
29788: GO 29816
29790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_INT 21
29798: PUSH
29799: LD_INT 22
29801: PUSH
29802: LD_INT 23
29804: PUSH
29805: LD_INT 24
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: ST_TO_ADDR
29814: GO 29895
29816: LD_INT 53
29818: DOUBLE
29819: EQUAL
29820: IFTRUE 29824
29822: GO 29842
29824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29825: LD_ADDR_VAR 0 3
29829: PUSH
29830: LD_INT 23
29832: PUSH
29833: LD_INT 24
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: ST_TO_ADDR
29840: GO 29895
29842: LD_INT 46
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29868
29850: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_INT 23
29858: PUSH
29859: LD_INT 24
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: ST_TO_ADDR
29866: GO 29895
29868: LD_INT 47
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29894
29876: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 23
29884: PUSH
29885: LD_INT 24
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: ST_TO_ADDR
29892: GO 29895
29894: POP
// result := ( chassis in result ) ;
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_VAR 0 1
29904: PUSH
29905: LD_VAR 0 3
29909: IN
29910: ST_TO_ADDR
// end ;
29911: LD_VAR 0 3
29915: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29916: LD_INT 0
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
// result := array ;
29925: LD_ADDR_VAR 0 5
29929: PUSH
29930: LD_VAR 0 1
29934: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29935: LD_VAR 0 1
29939: NOT
29940: PUSH
29941: LD_VAR 0 2
29945: NOT
29946: OR
29947: PUSH
29948: LD_VAR 0 3
29952: NOT
29953: OR
29954: PUSH
29955: LD_VAR 0 2
29959: PUSH
29960: LD_VAR 0 1
29964: GREATER
29965: OR
29966: PUSH
29967: LD_VAR 0 3
29971: PUSH
29972: LD_VAR 0 1
29976: GREATER
29977: OR
29978: IFFALSE 29982
// exit ;
29980: GO 30278
// if direction then
29982: LD_VAR 0 4
29986: IFFALSE 30050
// begin d := 1 ;
29988: LD_ADDR_VAR 0 9
29992: PUSH
29993: LD_INT 1
29995: ST_TO_ADDR
// if i_from > i_to then
29996: LD_VAR 0 2
30000: PUSH
30001: LD_VAR 0 3
30005: GREATER
30006: IFFALSE 30032
// length := ( array - i_from ) + i_to else
30008: LD_ADDR_VAR 0 11
30012: PUSH
30013: LD_VAR 0 1
30017: PUSH
30018: LD_VAR 0 2
30022: MINUS
30023: PUSH
30024: LD_VAR 0 3
30028: PLUS
30029: ST_TO_ADDR
30030: GO 30048
// length := i_to - i_from ;
30032: LD_ADDR_VAR 0 11
30036: PUSH
30037: LD_VAR 0 3
30041: PUSH
30042: LD_VAR 0 2
30046: MINUS
30047: ST_TO_ADDR
// end else
30048: GO 30111
// begin d := - 1 ;
30050: LD_ADDR_VAR 0 9
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: ST_TO_ADDR
// if i_from > i_to then
30059: LD_VAR 0 2
30063: PUSH
30064: LD_VAR 0 3
30068: GREATER
30069: IFFALSE 30089
// length := i_from - i_to else
30071: LD_ADDR_VAR 0 11
30075: PUSH
30076: LD_VAR 0 2
30080: PUSH
30081: LD_VAR 0 3
30085: MINUS
30086: ST_TO_ADDR
30087: GO 30111
// length := ( array - i_to ) + i_from ;
30089: LD_ADDR_VAR 0 11
30093: PUSH
30094: LD_VAR 0 1
30098: PUSH
30099: LD_VAR 0 3
30103: MINUS
30104: PUSH
30105: LD_VAR 0 2
30109: PLUS
30110: ST_TO_ADDR
// end ; if not length then
30111: LD_VAR 0 11
30115: NOT
30116: IFFALSE 30120
// exit ;
30118: GO 30278
// tmp := array ;
30120: LD_ADDR_VAR 0 10
30124: PUSH
30125: LD_VAR 0 1
30129: ST_TO_ADDR
// for i = 1 to length do
30130: LD_ADDR_VAR 0 6
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_VAR 0 11
30144: PUSH
30145: FOR_TO
30146: IFFALSE 30266
// begin for j = 1 to array do
30148: LD_ADDR_VAR 0 7
30152: PUSH
30153: DOUBLE
30154: LD_INT 1
30156: DEC
30157: ST_TO_ADDR
30158: LD_VAR 0 1
30162: PUSH
30163: FOR_TO
30164: IFFALSE 30252
// begin k := j + d ;
30166: LD_ADDR_VAR 0 8
30170: PUSH
30171: LD_VAR 0 7
30175: PUSH
30176: LD_VAR 0 9
30180: PLUS
30181: ST_TO_ADDR
// if k > array then
30182: LD_VAR 0 8
30186: PUSH
30187: LD_VAR 0 1
30191: GREATER
30192: IFFALSE 30202
// k := 1 ;
30194: LD_ADDR_VAR 0 8
30198: PUSH
30199: LD_INT 1
30201: ST_TO_ADDR
// if not k then
30202: LD_VAR 0 8
30206: NOT
30207: IFFALSE 30219
// k := array ;
30209: LD_ADDR_VAR 0 8
30213: PUSH
30214: LD_VAR 0 1
30218: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30219: LD_ADDR_VAR 0 10
30223: PUSH
30224: LD_VAR 0 10
30228: PPUSH
30229: LD_VAR 0 8
30233: PPUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_VAR 0 7
30243: ARRAY
30244: PPUSH
30245: CALL_OW 1
30249: ST_TO_ADDR
// end ;
30250: GO 30163
30252: POP
30253: POP
// array := tmp ;
30254: LD_ADDR_VAR 0 1
30258: PUSH
30259: LD_VAR 0 10
30263: ST_TO_ADDR
// end ;
30264: GO 30145
30266: POP
30267: POP
// result := array ;
30268: LD_ADDR_VAR 0 5
30272: PUSH
30273: LD_VAR 0 1
30277: ST_TO_ADDR
// end ;
30278: LD_VAR 0 5
30282: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30283: LD_INT 0
30285: PPUSH
30286: PPUSH
// result := 0 ;
30287: LD_ADDR_VAR 0 3
30291: PUSH
30292: LD_INT 0
30294: ST_TO_ADDR
// if not array or not value in array then
30295: LD_VAR 0 1
30299: NOT
30300: PUSH
30301: LD_VAR 0 2
30305: PUSH
30306: LD_VAR 0 1
30310: IN
30311: NOT
30312: OR
30313: IFFALSE 30317
// exit ;
30315: GO 30371
// for i = 1 to array do
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: DOUBLE
30323: LD_INT 1
30325: DEC
30326: ST_TO_ADDR
30327: LD_VAR 0 1
30331: PUSH
30332: FOR_TO
30333: IFFALSE 30369
// if value = array [ i ] then
30335: LD_VAR 0 2
30339: PUSH
30340: LD_VAR 0 1
30344: PUSH
30345: LD_VAR 0 4
30349: ARRAY
30350: EQUAL
30351: IFFALSE 30367
// begin result := i ;
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_VAR 0 4
30362: ST_TO_ADDR
// exit ;
30363: POP
30364: POP
30365: GO 30371
// end ;
30367: GO 30332
30369: POP
30370: POP
// end ;
30371: LD_VAR 0 3
30375: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30376: LD_INT 0
30378: PPUSH
// vc_chassis := chassis ;
30379: LD_ADDR_OWVAR 37
30383: PUSH
30384: LD_VAR 0 1
30388: ST_TO_ADDR
// vc_engine := engine ;
30389: LD_ADDR_OWVAR 39
30393: PUSH
30394: LD_VAR 0 2
30398: ST_TO_ADDR
// vc_control := control ;
30399: LD_ADDR_OWVAR 38
30403: PUSH
30404: LD_VAR 0 3
30408: ST_TO_ADDR
// vc_weapon := weapon ;
30409: LD_ADDR_OWVAR 40
30413: PUSH
30414: LD_VAR 0 4
30418: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30419: LD_ADDR_OWVAR 41
30423: PUSH
30424: LD_VAR 0 5
30428: ST_TO_ADDR
// end ;
30429: LD_VAR 0 6
30433: RET
// export function WantPlant ( unit ) ; var task ; begin
30434: LD_INT 0
30436: PPUSH
30437: PPUSH
// result := false ;
30438: LD_ADDR_VAR 0 2
30442: PUSH
30443: LD_INT 0
30445: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_VAR 0 1
30455: PPUSH
30456: CALL_OW 437
30460: ST_TO_ADDR
// if task then
30461: LD_VAR 0 3
30465: IFFALSE 30493
// if task [ 1 ] [ 1 ] = p then
30467: LD_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: ARRAY
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PUSH
30480: LD_STRING p
30482: EQUAL
30483: IFFALSE 30493
// result := true ;
30485: LD_ADDR_VAR 0 2
30489: PUSH
30490: LD_INT 1
30492: ST_TO_ADDR
// end ;
30493: LD_VAR 0 2
30497: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
// if pos < 1 then
30504: LD_VAR 0 2
30508: PUSH
30509: LD_INT 1
30511: LESS
30512: IFFALSE 30516
// exit ;
30514: GO 30819
// if pos = 1 then
30516: LD_VAR 0 2
30520: PUSH
30521: LD_INT 1
30523: EQUAL
30524: IFFALSE 30557
// result := Replace ( arr , pos [ 1 ] , value ) else
30526: LD_ADDR_VAR 0 4
30530: PUSH
30531: LD_VAR 0 1
30535: PPUSH
30536: LD_VAR 0 2
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: CALL_OW 1
30554: ST_TO_ADDR
30555: GO 30819
// begin tmp := arr ;
30557: LD_ADDR_VAR 0 6
30561: PUSH
30562: LD_VAR 0 1
30566: ST_TO_ADDR
// s_arr := [ tmp ] ;
30567: LD_ADDR_VAR 0 7
30571: PUSH
30572: LD_VAR 0 6
30576: PUSH
30577: EMPTY
30578: LIST
30579: ST_TO_ADDR
// for i = 1 to pos - 1 do
30580: LD_ADDR_VAR 0 5
30584: PUSH
30585: DOUBLE
30586: LD_INT 1
30588: DEC
30589: ST_TO_ADDR
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: MINUS
30598: PUSH
30599: FOR_TO
30600: IFFALSE 30645
// begin tmp := tmp [ pos [ i ] ] ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: LD_VAR 0 6
30611: PUSH
30612: LD_VAR 0 2
30616: PUSH
30617: LD_VAR 0 5
30621: ARRAY
30622: ARRAY
30623: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30624: LD_ADDR_VAR 0 7
30628: PUSH
30629: LD_VAR 0 7
30633: PUSH
30634: LD_VAR 0 6
30638: PUSH
30639: EMPTY
30640: LIST
30641: ADD
30642: ST_TO_ADDR
// end ;
30643: GO 30599
30645: POP
30646: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30647: LD_ADDR_VAR 0 6
30651: PUSH
30652: LD_VAR 0 6
30656: PPUSH
30657: LD_VAR 0 2
30661: PUSH
30662: LD_VAR 0 2
30666: ARRAY
30667: PPUSH
30668: LD_VAR 0 3
30672: PPUSH
30673: CALL_OW 1
30677: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30678: LD_ADDR_VAR 0 7
30682: PUSH
30683: LD_VAR 0 7
30687: PPUSH
30688: LD_VAR 0 7
30692: PPUSH
30693: LD_VAR 0 6
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// for i = s_arr downto 2 do
30703: LD_ADDR_VAR 0 5
30707: PUSH
30708: DOUBLE
30709: LD_VAR 0 7
30713: INC
30714: ST_TO_ADDR
30715: LD_INT 2
30717: PUSH
30718: FOR_DOWNTO
30719: IFFALSE 30803
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30721: LD_ADDR_VAR 0 6
30725: PUSH
30726: LD_VAR 0 7
30730: PUSH
30731: LD_VAR 0 5
30735: PUSH
30736: LD_INT 1
30738: MINUS
30739: ARRAY
30740: PPUSH
30741: LD_VAR 0 2
30745: PUSH
30746: LD_VAR 0 5
30750: PUSH
30751: LD_INT 1
30753: MINUS
30754: ARRAY
30755: PPUSH
30756: LD_VAR 0 7
30760: PUSH
30761: LD_VAR 0 5
30765: ARRAY
30766: PPUSH
30767: CALL_OW 1
30771: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30772: LD_ADDR_VAR 0 7
30776: PUSH
30777: LD_VAR 0 7
30781: PPUSH
30782: LD_VAR 0 5
30786: PUSH
30787: LD_INT 1
30789: MINUS
30790: PPUSH
30791: LD_VAR 0 6
30795: PPUSH
30796: CALL_OW 1
30800: ST_TO_ADDR
// end ;
30801: GO 30718
30803: POP
30804: POP
// result := s_arr [ 1 ] ;
30805: LD_ADDR_VAR 0 4
30809: PUSH
30810: LD_VAR 0 7
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: ST_TO_ADDR
// end ; end ;
30819: LD_VAR 0 4
30823: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30824: LD_INT 0
30826: PPUSH
30827: PPUSH
// if not list then
30828: LD_VAR 0 1
30832: NOT
30833: IFFALSE 30837
// exit ;
30835: GO 30928
// i := list [ pos1 ] ;
30837: LD_ADDR_VAR 0 5
30841: PUSH
30842: LD_VAR 0 1
30846: PUSH
30847: LD_VAR 0 2
30851: ARRAY
30852: ST_TO_ADDR
// if not i then
30853: LD_VAR 0 5
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30928
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30862: LD_ADDR_VAR 0 1
30866: PUSH
30867: LD_VAR 0 1
30871: PPUSH
30872: LD_VAR 0 2
30876: PPUSH
30877: LD_VAR 0 1
30881: PUSH
30882: LD_VAR 0 3
30886: ARRAY
30887: PPUSH
30888: CALL_OW 1
30892: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30893: LD_ADDR_VAR 0 1
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: LD_VAR 0 3
30907: PPUSH
30908: LD_VAR 0 5
30912: PPUSH
30913: CALL_OW 1
30917: ST_TO_ADDR
// result := list ;
30918: LD_ADDR_VAR 0 4
30922: PUSH
30923: LD_VAR 0 1
30927: ST_TO_ADDR
// end ;
30928: LD_VAR 0 4
30932: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30933: LD_INT 0
30935: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30936: LD_ADDR_VAR 0 5
30940: PUSH
30941: LD_VAR 0 1
30945: PPUSH
30946: CALL_OW 250
30950: PPUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 251
30960: PPUSH
30961: LD_VAR 0 2
30965: PPUSH
30966: LD_VAR 0 3
30970: PPUSH
30971: LD_VAR 0 4
30975: PPUSH
30976: CALL 30986 0 5
30980: ST_TO_ADDR
// end ;
30981: LD_VAR 0 5
30985: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30986: LD_INT 0
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
// if not list then
30992: LD_VAR 0 3
30996: NOT
30997: IFFALSE 31001
// exit ;
30999: GO 31389
// result := [ ] ;
31001: LD_ADDR_VAR 0 6
31005: PUSH
31006: EMPTY
31007: ST_TO_ADDR
// for i in list do
31008: LD_ADDR_VAR 0 7
31012: PUSH
31013: LD_VAR 0 3
31017: PUSH
31018: FOR_IN
31019: IFFALSE 31221
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: LD_VAR 0 7
31030: PPUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: LD_VAR 0 2
31040: PPUSH
31041: CALL_OW 297
31045: ST_TO_ADDR
// if not result then
31046: LD_VAR 0 6
31050: NOT
31051: IFFALSE 31077
// result := [ [ i , tmp ] ] else
31053: LD_ADDR_VAR 0 6
31057: PUSH
31058: LD_VAR 0 7
31062: PUSH
31063: LD_VAR 0 9
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: ST_TO_ADDR
31075: GO 31219
// begin if result [ result ] [ 2 ] < tmp then
31077: LD_VAR 0 6
31081: PUSH
31082: LD_VAR 0 6
31086: ARRAY
31087: PUSH
31088: LD_INT 2
31090: ARRAY
31091: PUSH
31092: LD_VAR 0 9
31096: LESS
31097: IFFALSE 31139
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31099: LD_ADDR_VAR 0 6
31103: PUSH
31104: LD_VAR 0 6
31108: PPUSH
31109: LD_VAR 0 6
31113: PUSH
31114: LD_INT 1
31116: PLUS
31117: PPUSH
31118: LD_VAR 0 7
31122: PUSH
31123: LD_VAR 0 9
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 2
31136: ST_TO_ADDR
31137: GO 31219
// for j = 1 to result do
31139: LD_ADDR_VAR 0 8
31143: PUSH
31144: DOUBLE
31145: LD_INT 1
31147: DEC
31148: ST_TO_ADDR
31149: LD_VAR 0 6
31153: PUSH
31154: FOR_TO
31155: IFFALSE 31217
// begin if tmp < result [ j ] [ 2 ] then
31157: LD_VAR 0 9
31161: PUSH
31162: LD_VAR 0 6
31166: PUSH
31167: LD_VAR 0 8
31171: ARRAY
31172: PUSH
31173: LD_INT 2
31175: ARRAY
31176: LESS
31177: IFFALSE 31215
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31179: LD_ADDR_VAR 0 6
31183: PUSH
31184: LD_VAR 0 6
31188: PPUSH
31189: LD_VAR 0 8
31193: PPUSH
31194: LD_VAR 0 7
31198: PUSH
31199: LD_VAR 0 9
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PPUSH
31208: CALL_OW 2
31212: ST_TO_ADDR
// break ;
31213: GO 31217
// end ; end ;
31215: GO 31154
31217: POP
31218: POP
// end ; end ;
31219: GO 31018
31221: POP
31222: POP
// if result and not asc then
31223: LD_VAR 0 6
31227: PUSH
31228: LD_VAR 0 4
31232: NOT
31233: AND
31234: IFFALSE 31309
// begin tmp := result ;
31236: LD_ADDR_VAR 0 9
31240: PUSH
31241: LD_VAR 0 6
31245: ST_TO_ADDR
// for i = tmp downto 1 do
31246: LD_ADDR_VAR 0 7
31250: PUSH
31251: DOUBLE
31252: LD_VAR 0 9
31256: INC
31257: ST_TO_ADDR
31258: LD_INT 1
31260: PUSH
31261: FOR_DOWNTO
31262: IFFALSE 31307
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31264: LD_ADDR_VAR 0 6
31268: PUSH
31269: LD_VAR 0 6
31273: PPUSH
31274: LD_VAR 0 9
31278: PUSH
31279: LD_VAR 0 7
31283: MINUS
31284: PUSH
31285: LD_INT 1
31287: PLUS
31288: PPUSH
31289: LD_VAR 0 9
31293: PUSH
31294: LD_VAR 0 7
31298: ARRAY
31299: PPUSH
31300: CALL_OW 1
31304: ST_TO_ADDR
31305: GO 31261
31307: POP
31308: POP
// end ; tmp := [ ] ;
31309: LD_ADDR_VAR 0 9
31313: PUSH
31314: EMPTY
31315: ST_TO_ADDR
// if mode then
31316: LD_VAR 0 5
31320: IFFALSE 31389
// begin for i = 1 to result do
31322: LD_ADDR_VAR 0 7
31326: PUSH
31327: DOUBLE
31328: LD_INT 1
31330: DEC
31331: ST_TO_ADDR
31332: LD_VAR 0 6
31336: PUSH
31337: FOR_TO
31338: IFFALSE 31377
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31340: LD_ADDR_VAR 0 9
31344: PUSH
31345: LD_VAR 0 9
31349: PPUSH
31350: LD_VAR 0 7
31354: PPUSH
31355: LD_VAR 0 6
31359: PUSH
31360: LD_VAR 0 7
31364: ARRAY
31365: PUSH
31366: LD_INT 1
31368: ARRAY
31369: PPUSH
31370: CALL_OW 1
31374: ST_TO_ADDR
31375: GO 31337
31377: POP
31378: POP
// result := tmp ;
31379: LD_ADDR_VAR 0 6
31383: PUSH
31384: LD_VAR 0 9
31388: ST_TO_ADDR
// end ; end ;
31389: LD_VAR 0 6
31393: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31394: LD_INT 0
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31402: LD_ADDR_VAR 0 5
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
// if not x or not y then
31424: LD_VAR 0 2
31428: NOT
31429: PUSH
31430: LD_VAR 0 3
31434: NOT
31435: OR
31436: IFFALSE 31440
// exit ;
31438: GO 33086
// if not range then
31440: LD_VAR 0 4
31444: NOT
31445: IFFALSE 31455
// range := 10 ;
31447: LD_ADDR_VAR 0 4
31451: PUSH
31452: LD_INT 10
31454: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31455: LD_ADDR_VAR 0 8
31459: PUSH
31460: LD_INT 81
31462: PUSH
31463: LD_VAR 0 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 92
31474: PUSH
31475: LD_VAR 0 2
31479: PUSH
31480: LD_VAR 0 3
31484: PUSH
31485: LD_VAR 0 4
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 21
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: PPUSH
31518: CALL_OW 69
31522: ST_TO_ADDR
// if not tmp then
31523: LD_VAR 0 8
31527: NOT
31528: IFFALSE 31532
// exit ;
31530: GO 33086
// for i in tmp do
31532: LD_ADDR_VAR 0 6
31536: PUSH
31537: LD_VAR 0 8
31541: PUSH
31542: FOR_IN
31543: IFFALSE 33061
// begin points := [ 0 , 0 , 0 ] ;
31545: LD_ADDR_VAR 0 9
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// bpoints := 1 ;
31564: LD_ADDR_VAR 0 10
31568: PUSH
31569: LD_INT 1
31571: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31572: LD_VAR 0 6
31576: PPUSH
31577: CALL_OW 247
31581: PUSH
31582: LD_INT 1
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 32168
31590: POP
// begin if GetClass ( i ) = 1 then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 257
31600: PUSH
31601: LD_INT 1
31603: EQUAL
31604: IFFALSE 31625
// points := [ 10 , 5 , 3 ] ;
31606: LD_ADDR_VAR 0 9
31610: PUSH
31611: LD_INT 10
31613: PUSH
31614: LD_INT 5
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31625: LD_VAR 0 6
31629: PPUSH
31630: CALL_OW 257
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: IN
31649: IFFALSE 31670
// points := [ 3 , 2 , 1 ] ;
31651: LD_ADDR_VAR 0 9
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31670: LD_VAR 0 6
31674: PPUSH
31675: CALL_OW 257
31679: PUSH
31680: LD_INT 5
31682: EQUAL
31683: IFFALSE 31704
// points := [ 130 , 5 , 2 ] ;
31685: LD_ADDR_VAR 0 9
31689: PUSH
31690: LD_INT 130
31692: PUSH
31693: LD_INT 5
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31704: LD_VAR 0 6
31708: PPUSH
31709: CALL_OW 257
31713: PUSH
31714: LD_INT 8
31716: EQUAL
31717: IFFALSE 31738
// points := [ 35 , 35 , 30 ] ;
31719: LD_ADDR_VAR 0 9
31723: PUSH
31724: LD_INT 35
31726: PUSH
31727: LD_INT 35
31729: PUSH
31730: LD_INT 30
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31738: LD_VAR 0 6
31742: PPUSH
31743: CALL_OW 257
31747: PUSH
31748: LD_INT 9
31750: EQUAL
31751: IFFALSE 31772
// points := [ 20 , 55 , 40 ] ;
31753: LD_ADDR_VAR 0 9
31757: PUSH
31758: LD_INT 20
31760: PUSH
31761: LD_INT 55
31763: PUSH
31764: LD_INT 40
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31772: LD_VAR 0 6
31776: PPUSH
31777: CALL_OW 257
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: LD_INT 16
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: IN
31792: IFFALSE 31813
// points := [ 5 , 3 , 2 ] ;
31794: LD_ADDR_VAR 0 9
31798: PUSH
31799: LD_INT 5
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31813: LD_VAR 0 6
31817: PPUSH
31818: CALL_OW 257
31822: PUSH
31823: LD_INT 17
31825: EQUAL
31826: IFFALSE 31847
// points := [ 100 , 50 , 75 ] ;
31828: LD_ADDR_VAR 0 9
31832: PUSH
31833: LD_INT 100
31835: PUSH
31836: LD_INT 50
31838: PUSH
31839: LD_INT 75
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31847: LD_VAR 0 6
31851: PPUSH
31852: CALL_OW 257
31856: PUSH
31857: LD_INT 15
31859: EQUAL
31860: IFFALSE 31881
// points := [ 10 , 5 , 3 ] ;
31862: LD_ADDR_VAR 0 9
31866: PUSH
31867: LD_INT 10
31869: PUSH
31870: LD_INT 5
31872: PUSH
31873: LD_INT 3
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31881: LD_VAR 0 6
31885: PPUSH
31886: CALL_OW 257
31890: PUSH
31891: LD_INT 14
31893: EQUAL
31894: IFFALSE 31915
// points := [ 10 , 0 , 0 ] ;
31896: LD_ADDR_VAR 0 9
31900: PUSH
31901: LD_INT 10
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31915: LD_VAR 0 6
31919: PPUSH
31920: CALL_OW 257
31924: PUSH
31925: LD_INT 11
31927: EQUAL
31928: IFFALSE 31949
// points := [ 30 , 10 , 5 ] ;
31930: LD_ADDR_VAR 0 9
31934: PUSH
31935: LD_INT 30
31937: PUSH
31938: LD_INT 10
31940: PUSH
31941: LD_INT 5
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_INT 5
31956: PPUSH
31957: CALL_OW 321
31961: PUSH
31962: LD_INT 2
31964: EQUAL
31965: IFFALSE 31982
// bpoints := bpoints * 1.8 ;
31967: LD_ADDR_VAR 0 10
31971: PUSH
31972: LD_VAR 0 10
31976: PUSH
31977: LD_REAL  1.80000000000000E+0000
31980: MUL
31981: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31982: LD_VAR 0 6
31986: PPUSH
31987: CALL_OW 257
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 4
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: IN
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: LD_INT 51
32018: PPUSH
32019: CALL_OW 321
32023: PUSH
32024: LD_INT 2
32026: EQUAL
32027: AND
32028: IFFALSE 32045
// bpoints := bpoints * 1.2 ;
32030: LD_ADDR_VAR 0 10
32034: PUSH
32035: LD_VAR 0 10
32039: PUSH
32040: LD_REAL  1.20000000000000E+0000
32043: MUL
32044: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32045: LD_VAR 0 6
32049: PPUSH
32050: CALL_OW 257
32054: PUSH
32055: LD_INT 5
32057: PUSH
32058: LD_INT 7
32060: PUSH
32061: LD_INT 9
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: IN
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: LD_INT 52
32077: PPUSH
32078: CALL_OW 321
32082: PUSH
32083: LD_INT 2
32085: EQUAL
32086: AND
32087: IFFALSE 32104
// bpoints := bpoints * 1.5 ;
32089: LD_ADDR_VAR 0 10
32093: PUSH
32094: LD_VAR 0 10
32098: PUSH
32099: LD_REAL  1.50000000000000E+0000
32102: MUL
32103: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32104: LD_VAR 0 1
32108: PPUSH
32109: LD_INT 66
32111: PPUSH
32112: CALL_OW 321
32116: PUSH
32117: LD_INT 2
32119: EQUAL
32120: IFFALSE 32137
// bpoints := bpoints * 1.1 ;
32122: LD_ADDR_VAR 0 10
32126: PUSH
32127: LD_VAR 0 10
32131: PUSH
32132: LD_REAL  1.10000000000000E+0000
32135: MUL
32136: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32137: LD_ADDR_VAR 0 10
32141: PUSH
32142: LD_VAR 0 10
32146: PUSH
32147: LD_VAR 0 6
32151: PPUSH
32152: LD_INT 1
32154: PPUSH
32155: CALL_OW 259
32159: PUSH
32160: LD_REAL  1.15000000000000E+0000
32163: MUL
32164: MUL
32165: ST_TO_ADDR
// end ; unit_vehicle :
32166: GO 32990
32168: LD_INT 2
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32978
32176: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32177: LD_VAR 0 6
32181: PPUSH
32182: CALL_OW 264
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 42
32192: PUSH
32193: LD_INT 24
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: IN
32201: IFFALSE 32222
// points := [ 25 , 5 , 3 ] ;
32203: LD_ADDR_VAR 0 9
32207: PUSH
32208: LD_INT 25
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32222: LD_VAR 0 6
32226: PPUSH
32227: CALL_OW 264
32231: PUSH
32232: LD_INT 4
32234: PUSH
32235: LD_INT 43
32237: PUSH
32238: LD_INT 25
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: IN
32246: IFFALSE 32267
// points := [ 40 , 15 , 5 ] ;
32248: LD_ADDR_VAR 0 9
32252: PUSH
32253: LD_INT 40
32255: PUSH
32256: LD_INT 15
32258: PUSH
32259: LD_INT 5
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32267: LD_VAR 0 6
32271: PPUSH
32272: CALL_OW 264
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: LD_INT 23
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: IN
32287: IFFALSE 32308
// points := [ 7 , 25 , 8 ] ;
32289: LD_ADDR_VAR 0 9
32293: PUSH
32294: LD_INT 7
32296: PUSH
32297: LD_INT 25
32299: PUSH
32300: LD_INT 8
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32308: LD_VAR 0 6
32312: PPUSH
32313: CALL_OW 264
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: LD_INT 27
32323: PUSH
32324: LD_INT 44
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: IN
32332: IFFALSE 32353
// points := [ 14 , 50 , 16 ] ;
32334: LD_ADDR_VAR 0 9
32338: PUSH
32339: LD_INT 14
32341: PUSH
32342: LD_INT 50
32344: PUSH
32345: LD_INT 16
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32353: LD_VAR 0 6
32357: PPUSH
32358: CALL_OW 264
32362: PUSH
32363: LD_INT 6
32365: PUSH
32366: LD_INT 46
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: IN
32373: IFFALSE 32394
// points := [ 32 , 120 , 70 ] ;
32375: LD_ADDR_VAR 0 9
32379: PUSH
32380: LD_INT 32
32382: PUSH
32383: LD_INT 120
32385: PUSH
32386: LD_INT 70
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32394: LD_VAR 0 6
32398: PPUSH
32399: CALL_OW 264
32403: PUSH
32404: LD_INT 7
32406: PUSH
32407: LD_INT 28
32409: PUSH
32410: LD_INT 45
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: IN
32418: IFFALSE 32439
// points := [ 35 , 20 , 45 ] ;
32420: LD_ADDR_VAR 0 9
32424: PUSH
32425: LD_INT 35
32427: PUSH
32428: LD_INT 20
32430: PUSH
32431: LD_INT 45
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32439: LD_VAR 0 6
32443: PPUSH
32444: CALL_OW 264
32448: PUSH
32449: LD_INT 47
32451: PUSH
32452: EMPTY
32453: LIST
32454: IN
32455: IFFALSE 32476
// points := [ 67 , 45 , 75 ] ;
32457: LD_ADDR_VAR 0 9
32461: PUSH
32462: LD_INT 67
32464: PUSH
32465: LD_INT 45
32467: PUSH
32468: LD_INT 75
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32476: LD_VAR 0 6
32480: PPUSH
32481: CALL_OW 264
32485: PUSH
32486: LD_INT 26
32488: PUSH
32489: EMPTY
32490: LIST
32491: IN
32492: IFFALSE 32513
// points := [ 120 , 30 , 80 ] ;
32494: LD_ADDR_VAR 0 9
32498: PUSH
32499: LD_INT 120
32501: PUSH
32502: LD_INT 30
32504: PUSH
32505: LD_INT 80
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32513: LD_VAR 0 6
32517: PPUSH
32518: CALL_OW 264
32522: PUSH
32523: LD_INT 22
32525: PUSH
32526: EMPTY
32527: LIST
32528: IN
32529: IFFALSE 32550
// points := [ 40 , 1 , 1 ] ;
32531: LD_ADDR_VAR 0 9
32535: PUSH
32536: LD_INT 40
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32550: LD_VAR 0 6
32554: PPUSH
32555: CALL_OW 264
32559: PUSH
32560: LD_INT 29
32562: PUSH
32563: EMPTY
32564: LIST
32565: IN
32566: IFFALSE 32587
// points := [ 70 , 200 , 400 ] ;
32568: LD_ADDR_VAR 0 9
32572: PUSH
32573: LD_INT 70
32575: PUSH
32576: LD_INT 200
32578: PUSH
32579: LD_INT 400
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32587: LD_VAR 0 6
32591: PPUSH
32592: CALL_OW 264
32596: PUSH
32597: LD_INT 14
32599: PUSH
32600: LD_INT 53
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: IN
32607: IFFALSE 32628
// points := [ 40 , 10 , 20 ] ;
32609: LD_ADDR_VAR 0 9
32613: PUSH
32614: LD_INT 40
32616: PUSH
32617: LD_INT 10
32619: PUSH
32620: LD_INT 20
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32628: LD_VAR 0 6
32632: PPUSH
32633: CALL_OW 264
32637: PUSH
32638: LD_INT 9
32640: PUSH
32641: EMPTY
32642: LIST
32643: IN
32644: IFFALSE 32665
// points := [ 5 , 70 , 20 ] ;
32646: LD_ADDR_VAR 0 9
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: LD_INT 70
32656: PUSH
32657: LD_INT 20
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32665: LD_VAR 0 6
32669: PPUSH
32670: CALL_OW 264
32674: PUSH
32675: LD_INT 10
32677: PUSH
32678: EMPTY
32679: LIST
32680: IN
32681: IFFALSE 32702
// points := [ 35 , 110 , 70 ] ;
32683: LD_ADDR_VAR 0 9
32687: PUSH
32688: LD_INT 35
32690: PUSH
32691: LD_INT 110
32693: PUSH
32694: LD_INT 70
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32702: LD_VAR 0 6
32706: PPUSH
32707: CALL_OW 265
32711: PUSH
32712: LD_INT 25
32714: EQUAL
32715: IFFALSE 32736
// points := [ 80 , 65 , 100 ] ;
32717: LD_ADDR_VAR 0 9
32721: PUSH
32722: LD_INT 80
32724: PUSH
32725: LD_INT 65
32727: PUSH
32728: LD_INT 100
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32736: LD_VAR 0 6
32740: PPUSH
32741: CALL_OW 263
32745: PUSH
32746: LD_INT 1
32748: EQUAL
32749: IFFALSE 32784
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32751: LD_ADDR_VAR 0 10
32755: PUSH
32756: LD_VAR 0 10
32760: PUSH
32761: LD_VAR 0 6
32765: PPUSH
32766: CALL_OW 311
32770: PPUSH
32771: LD_INT 3
32773: PPUSH
32774: CALL_OW 259
32778: PUSH
32779: LD_INT 4
32781: MUL
32782: MUL
32783: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 263
32793: PUSH
32794: LD_INT 2
32796: EQUAL
32797: IFFALSE 32848
// begin j := IsControledBy ( i ) ;
32799: LD_ADDR_VAR 0 7
32803: PUSH
32804: LD_VAR 0 6
32808: PPUSH
32809: CALL_OW 312
32813: ST_TO_ADDR
// if j then
32814: LD_VAR 0 7
32818: IFFALSE 32848
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32820: LD_ADDR_VAR 0 10
32824: PUSH
32825: LD_VAR 0 10
32829: PUSH
32830: LD_VAR 0 7
32834: PPUSH
32835: LD_INT 3
32837: PPUSH
32838: CALL_OW 259
32842: PUSH
32843: LD_INT 3
32845: MUL
32846: MUL
32847: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32848: LD_VAR 0 6
32852: PPUSH
32853: CALL_OW 264
32857: PUSH
32858: LD_INT 5
32860: PUSH
32861: LD_INT 6
32863: PUSH
32864: LD_INT 46
32866: PUSH
32867: LD_INT 44
32869: PUSH
32870: LD_INT 47
32872: PUSH
32873: LD_INT 45
32875: PUSH
32876: LD_INT 28
32878: PUSH
32879: LD_INT 7
32881: PUSH
32882: LD_INT 27
32884: PUSH
32885: LD_INT 29
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: IN
32900: PUSH
32901: LD_VAR 0 1
32905: PPUSH
32906: LD_INT 52
32908: PPUSH
32909: CALL_OW 321
32913: PUSH
32914: LD_INT 2
32916: EQUAL
32917: AND
32918: IFFALSE 32935
// bpoints := bpoints * 1.2 ;
32920: LD_ADDR_VAR 0 10
32924: PUSH
32925: LD_VAR 0 10
32929: PUSH
32930: LD_REAL  1.20000000000000E+0000
32933: MUL
32934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32935: LD_VAR 0 6
32939: PPUSH
32940: CALL_OW 264
32944: PUSH
32945: LD_INT 6
32947: PUSH
32948: LD_INT 46
32950: PUSH
32951: LD_INT 47
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: IN
32959: IFFALSE 32976
// bpoints := bpoints * 1.2 ;
32961: LD_ADDR_VAR 0 10
32965: PUSH
32966: LD_VAR 0 10
32970: PUSH
32971: LD_REAL  1.20000000000000E+0000
32974: MUL
32975: ST_TO_ADDR
// end ; unit_building :
32976: GO 32990
32978: LD_INT 3
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 32989
32986: POP
// ; end ;
32987: GO 32990
32989: POP
// for j = 1 to 3 do
32990: LD_ADDR_VAR 0 7
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_INT 3
33002: PUSH
33003: FOR_TO
33004: IFFALSE 33057
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33006: LD_ADDR_VAR 0 5
33010: PUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: LD_VAR 0 7
33020: PPUSH
33021: LD_VAR 0 5
33025: PUSH
33026: LD_VAR 0 7
33030: ARRAY
33031: PUSH
33032: LD_VAR 0 9
33036: PUSH
33037: LD_VAR 0 7
33041: ARRAY
33042: PUSH
33043: LD_VAR 0 10
33047: MUL
33048: PLUS
33049: PPUSH
33050: CALL_OW 1
33054: ST_TO_ADDR
33055: GO 33003
33057: POP
33058: POP
// end ;
33059: GO 31542
33061: POP
33062: POP
// result := Replace ( result , 4 , tmp ) ;
33063: LD_ADDR_VAR 0 5
33067: PUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: LD_INT 4
33075: PPUSH
33076: LD_VAR 0 8
33080: PPUSH
33081: CALL_OW 1
33085: ST_TO_ADDR
// end ;
33086: LD_VAR 0 5
33090: RET
// export function DangerAtRange ( unit , range ) ; begin
33091: LD_INT 0
33093: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 1
33103: PPUSH
33104: CALL_OW 255
33108: PPUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 250
33118: PPUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 251
33128: PPUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL 31394 0 4
33138: ST_TO_ADDR
// end ;
33139: LD_VAR 0 3
33143: RET
// export function DangerInArea ( side , area ) ; begin
33144: LD_INT 0
33146: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_VAR 0 2
33156: PPUSH
33157: LD_INT 81
33159: PUSH
33160: LD_VAR 0 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PPUSH
33169: CALL_OW 70
33173: ST_TO_ADDR
// end ;
33174: LD_VAR 0 3
33178: RET
// export function IsExtension ( b ) ; begin
33179: LD_INT 0
33181: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33182: LD_ADDR_VAR 0 2
33186: PUSH
33187: LD_VAR 0 1
33191: PUSH
33192: LD_INT 23
33194: PUSH
33195: LD_INT 20
33197: PUSH
33198: LD_INT 22
33200: PUSH
33201: LD_INT 17
33203: PUSH
33204: LD_INT 24
33206: PUSH
33207: LD_INT 21
33209: PUSH
33210: LD_INT 19
33212: PUSH
33213: LD_INT 16
33215: PUSH
33216: LD_INT 25
33218: PUSH
33219: LD_INT 18
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: IN
33234: ST_TO_ADDR
// end ;
33235: LD_VAR 0 2
33239: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
33244: PPUSH
// result := [ ] ;
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: EMPTY
33251: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33252: LD_ADDR_VAR 0 4
33256: PUSH
33257: LD_VAR 0 2
33261: PPUSH
33262: LD_INT 21
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PPUSH
33272: CALL_OW 70
33276: ST_TO_ADDR
// if not tmp then
33277: LD_VAR 0 4
33281: NOT
33282: IFFALSE 33286
// exit ;
33284: GO 33344
// for i in tmp do
33286: LD_ADDR_VAR 0 5
33290: PUSH
33291: LD_VAR 0 4
33295: PUSH
33296: FOR_IN
33297: IFFALSE 33332
// if GetBase ( i ) <> base then
33299: LD_VAR 0 5
33303: PPUSH
33304: CALL_OW 274
33308: PUSH
33309: LD_VAR 0 1
33313: NONEQUAL
33314: IFFALSE 33330
// ComLinkToBase ( base , i ) ;
33316: LD_VAR 0 1
33320: PPUSH
33321: LD_VAR 0 5
33325: PPUSH
33326: CALL_OW 169
33330: GO 33296
33332: POP
33333: POP
// result := tmp ;
33334: LD_ADDR_VAR 0 3
33338: PUSH
33339: LD_VAR 0 4
33343: ST_TO_ADDR
// end ;
33344: LD_VAR 0 3
33348: RET
// export function ComComplete ( unit , b ) ; var i ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
// if BuildingStatus ( b ) = bs_build then
33353: LD_VAR 0 2
33357: PPUSH
33358: CALL_OW 461
33362: PUSH
33363: LD_INT 1
33365: EQUAL
33366: IFFALSE 33426
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_STRING h
33375: PUSH
33376: LD_VAR 0 2
33380: PPUSH
33381: CALL_OW 250
33385: PUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: CALL_OW 251
33395: PUSH
33396: LD_VAR 0 2
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: PPUSH
33422: CALL_OW 446
// end ;
33426: LD_VAR 0 3
33430: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33431: LD_INT 0
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33439: LD_VAR 0 1
33443: NOT
33444: PUSH
33445: LD_VAR 0 1
33449: PPUSH
33450: CALL_OW 263
33454: PUSH
33455: LD_INT 2
33457: EQUAL
33458: NOT
33459: OR
33460: IFFALSE 33464
// exit ;
33462: GO 33780
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33464: LD_ADDR_VAR 0 6
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 255
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 36
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 34
33501: PUSH
33502: LD_INT 31
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PPUSH
33518: CALL_OW 69
33522: ST_TO_ADDR
// if not tmp then
33523: LD_VAR 0 6
33527: NOT
33528: IFFALSE 33532
// exit ;
33530: GO 33780
// result := [ ] ;
33532: LD_ADDR_VAR 0 2
33536: PUSH
33537: EMPTY
33538: ST_TO_ADDR
// for i in tmp do
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_VAR 0 6
33548: PUSH
33549: FOR_IN
33550: IFFALSE 33621
// begin t := UnitsInside ( i ) ;
33552: LD_ADDR_VAR 0 4
33556: PUSH
33557: LD_VAR 0 3
33561: PPUSH
33562: CALL_OW 313
33566: ST_TO_ADDR
// if t then
33567: LD_VAR 0 4
33571: IFFALSE 33619
// for j in t do
33573: LD_ADDR_VAR 0 7
33577: PUSH
33578: LD_VAR 0 4
33582: PUSH
33583: FOR_IN
33584: IFFALSE 33617
// result := Insert ( result , result + 1 , j ) ;
33586: LD_ADDR_VAR 0 2
33590: PUSH
33591: LD_VAR 0 2
33595: PPUSH
33596: LD_VAR 0 2
33600: PUSH
33601: LD_INT 1
33603: PLUS
33604: PPUSH
33605: LD_VAR 0 7
33609: PPUSH
33610: CALL_OW 2
33614: ST_TO_ADDR
33615: GO 33583
33617: POP
33618: POP
// end ;
33619: GO 33549
33621: POP
33622: POP
// if not result then
33623: LD_VAR 0 2
33627: NOT
33628: IFFALSE 33632
// exit ;
33630: GO 33780
// mech := result [ 1 ] ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_VAR 0 2
33641: PUSH
33642: LD_INT 1
33644: ARRAY
33645: ST_TO_ADDR
// if result > 1 then
33646: LD_VAR 0 2
33650: PUSH
33651: LD_INT 1
33653: GREATER
33654: IFFALSE 33766
// for i = 2 to result do
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: DOUBLE
33662: LD_INT 2
33664: DEC
33665: ST_TO_ADDR
33666: LD_VAR 0 2
33670: PUSH
33671: FOR_TO
33672: IFFALSE 33764
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33674: LD_ADDR_VAR 0 4
33678: PUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_VAR 0 3
33688: ARRAY
33689: PPUSH
33690: LD_INT 3
33692: PPUSH
33693: CALL_OW 259
33697: PUSH
33698: LD_VAR 0 2
33702: PUSH
33703: LD_VAR 0 3
33707: ARRAY
33708: PPUSH
33709: CALL_OW 432
33713: MINUS
33714: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33715: LD_VAR 0 4
33719: PUSH
33720: LD_VAR 0 5
33724: PPUSH
33725: LD_INT 3
33727: PPUSH
33728: CALL_OW 259
33732: PUSH
33733: LD_VAR 0 5
33737: PPUSH
33738: CALL_OW 432
33742: MINUS
33743: GREATEREQUAL
33744: IFFALSE 33762
// mech := result [ i ] ;
33746: LD_ADDR_VAR 0 5
33750: PUSH
33751: LD_VAR 0 2
33755: PUSH
33756: LD_VAR 0 3
33760: ARRAY
33761: ST_TO_ADDR
// end ;
33762: GO 33671
33764: POP
33765: POP
// ComLinkTo ( vehicle , mech ) ;
33766: LD_VAR 0 1
33770: PPUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: CALL_OW 135
// end ;
33780: LD_VAR 0 2
33784: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
// result := [ ] ;
33800: LD_ADDR_VAR 0 7
33804: PUSH
33805: EMPTY
33806: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 266
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: IN
33827: NOT
33828: IFFALSE 33832
// exit ;
33830: GO 35463
// if name then
33832: LD_VAR 0 3
33836: IFFALSE 33852
// SetBName ( base_dep , name ) ;
33838: LD_VAR 0 1
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: CALL_OW 500
// base := GetBase ( base_dep ) ;
33852: LD_ADDR_VAR 0 15
33856: PUSH
33857: LD_VAR 0 1
33861: PPUSH
33862: CALL_OW 274
33866: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33867: LD_ADDR_VAR 0 16
33871: PUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 255
33881: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33882: LD_ADDR_VAR 0 17
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 248
33896: ST_TO_ADDR
// if sources then
33897: LD_VAR 0 5
33901: IFFALSE 33948
// for i = 1 to 3 do
33903: LD_ADDR_VAR 0 8
33907: PUSH
33908: DOUBLE
33909: LD_INT 1
33911: DEC
33912: ST_TO_ADDR
33913: LD_INT 3
33915: PUSH
33916: FOR_TO
33917: IFFALSE 33946
// AddResourceType ( base , i , sources [ i ] ) ;
33919: LD_VAR 0 15
33923: PPUSH
33924: LD_VAR 0 8
33928: PPUSH
33929: LD_VAR 0 5
33933: PUSH
33934: LD_VAR 0 8
33938: ARRAY
33939: PPUSH
33940: CALL_OW 276
33944: GO 33916
33946: POP
33947: POP
// buildings := GetBaseBuildings ( base , area ) ;
33948: LD_ADDR_VAR 0 18
33952: PUSH
33953: LD_VAR 0 15
33957: PPUSH
33958: LD_VAR 0 2
33962: PPUSH
33963: CALL 33240 0 2
33967: ST_TO_ADDR
// InitHc ;
33968: CALL_OW 19
// InitUc ;
33972: CALL_OW 18
// uc_side := side ;
33976: LD_ADDR_OWVAR 20
33980: PUSH
33981: LD_VAR 0 16
33985: ST_TO_ADDR
// uc_nation := nation ;
33986: LD_ADDR_OWVAR 21
33990: PUSH
33991: LD_VAR 0 17
33995: ST_TO_ADDR
// if buildings then
33996: LD_VAR 0 18
34000: IFFALSE 35322
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34002: LD_ADDR_VAR 0 19
34006: PUSH
34007: LD_VAR 0 18
34011: PPUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 30
34017: PUSH
34018: LD_INT 29
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 30
34027: PUSH
34028: LD_INT 30
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: PPUSH
34040: CALL_OW 72
34044: ST_TO_ADDR
// if tmp then
34045: LD_VAR 0 19
34049: IFFALSE 34097
// for i in tmp do
34051: LD_ADDR_VAR 0 8
34055: PUSH
34056: LD_VAR 0 19
34060: PUSH
34061: FOR_IN
34062: IFFALSE 34095
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34064: LD_VAR 0 8
34068: PPUSH
34069: CALL_OW 250
34073: PPUSH
34074: LD_VAR 0 8
34078: PPUSH
34079: CALL_OW 251
34083: PPUSH
34084: LD_VAR 0 16
34088: PPUSH
34089: CALL_OW 441
34093: GO 34061
34095: POP
34096: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34097: LD_VAR 0 18
34101: PPUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 30
34107: PUSH
34108: LD_INT 32
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 30
34117: PUSH
34118: LD_INT 33
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: PPUSH
34130: CALL_OW 72
34134: IFFALSE 34222
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34136: LD_ADDR_VAR 0 8
34140: PUSH
34141: LD_VAR 0 18
34145: PPUSH
34146: LD_INT 2
34148: PUSH
34149: LD_INT 30
34151: PUSH
34152: LD_INT 32
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 30
34161: PUSH
34162: LD_INT 33
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: PPUSH
34174: CALL_OW 72
34178: PUSH
34179: FOR_IN
34180: IFFALSE 34220
// begin if not GetBWeapon ( i ) then
34182: LD_VAR 0 8
34186: PPUSH
34187: CALL_OW 269
34191: NOT
34192: IFFALSE 34218
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34194: LD_VAR 0 8
34198: PPUSH
34199: LD_VAR 0 8
34203: PPUSH
34204: LD_VAR 0 2
34208: PPUSH
34209: CALL 35468 0 2
34213: PPUSH
34214: CALL_OW 431
// end ;
34218: GO 34179
34220: POP
34221: POP
// end ; for i = 1 to personel do
34222: LD_ADDR_VAR 0 8
34226: PUSH
34227: DOUBLE
34228: LD_INT 1
34230: DEC
34231: ST_TO_ADDR
34232: LD_VAR 0 6
34236: PUSH
34237: FOR_TO
34238: IFFALSE 35302
// begin if i > 4 then
34240: LD_VAR 0 8
34244: PUSH
34245: LD_INT 4
34247: GREATER
34248: IFFALSE 34252
// break ;
34250: GO 35302
// case i of 1 :
34252: LD_VAR 0 8
34256: PUSH
34257: LD_INT 1
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34345
34265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34266: LD_ADDR_VAR 0 12
34270: PUSH
34271: LD_VAR 0 18
34275: PPUSH
34276: LD_INT 22
34278: PUSH
34279: LD_VAR 0 16
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 58
34290: PUSH
34291: EMPTY
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 30
34299: PUSH
34300: LD_INT 32
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 30
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 30
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: PPUSH
34338: CALL_OW 72
34342: ST_TO_ADDR
34343: GO 34567
34345: LD_INT 2
34347: DOUBLE
34348: EQUAL
34349: IFTRUE 34353
34351: GO 34415
34353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34354: LD_ADDR_VAR 0 12
34358: PUSH
34359: LD_VAR 0 18
34363: PPUSH
34364: LD_INT 22
34366: PUSH
34367: LD_VAR 0 16
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 30
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 30
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PPUSH
34408: CALL_OW 72
34412: ST_TO_ADDR
34413: GO 34567
34415: LD_INT 3
34417: DOUBLE
34418: EQUAL
34419: IFTRUE 34423
34421: GO 34485
34423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34424: LD_ADDR_VAR 0 12
34428: PUSH
34429: LD_VAR 0 18
34433: PPUSH
34434: LD_INT 22
34436: PUSH
34437: LD_VAR 0 16
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 30
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 30
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PPUSH
34478: CALL_OW 72
34482: ST_TO_ADDR
34483: GO 34567
34485: LD_INT 4
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34566
34493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34494: LD_ADDR_VAR 0 12
34498: PUSH
34499: LD_VAR 0 18
34503: PPUSH
34504: LD_INT 22
34506: PUSH
34507: LD_VAR 0 16
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 30
34521: PUSH
34522: LD_INT 6
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 30
34531: PUSH
34532: LD_INT 7
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 30
34541: PUSH
34542: LD_INT 8
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PPUSH
34559: CALL_OW 72
34563: ST_TO_ADDR
34564: GO 34567
34566: POP
// if i = 1 then
34567: LD_VAR 0 8
34571: PUSH
34572: LD_INT 1
34574: EQUAL
34575: IFFALSE 34686
// begin tmp := [ ] ;
34577: LD_ADDR_VAR 0 19
34581: PUSH
34582: EMPTY
34583: ST_TO_ADDR
// for j in f do
34584: LD_ADDR_VAR 0 9
34588: PUSH
34589: LD_VAR 0 12
34593: PUSH
34594: FOR_IN
34595: IFFALSE 34668
// if GetBType ( j ) = b_bunker then
34597: LD_VAR 0 9
34601: PPUSH
34602: CALL_OW 266
34606: PUSH
34607: LD_INT 32
34609: EQUAL
34610: IFFALSE 34637
// tmp := Insert ( tmp , 1 , j ) else
34612: LD_ADDR_VAR 0 19
34616: PUSH
34617: LD_VAR 0 19
34621: PPUSH
34622: LD_INT 1
34624: PPUSH
34625: LD_VAR 0 9
34629: PPUSH
34630: CALL_OW 2
34634: ST_TO_ADDR
34635: GO 34666
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34637: LD_ADDR_VAR 0 19
34641: PUSH
34642: LD_VAR 0 19
34646: PPUSH
34647: LD_VAR 0 19
34651: PUSH
34652: LD_INT 1
34654: PLUS
34655: PPUSH
34656: LD_VAR 0 9
34660: PPUSH
34661: CALL_OW 2
34665: ST_TO_ADDR
34666: GO 34594
34668: POP
34669: POP
// if tmp then
34670: LD_VAR 0 19
34674: IFFALSE 34686
// f := tmp ;
34676: LD_ADDR_VAR 0 12
34680: PUSH
34681: LD_VAR 0 19
34685: ST_TO_ADDR
// end ; x := personel [ i ] ;
34686: LD_ADDR_VAR 0 13
34690: PUSH
34691: LD_VAR 0 6
34695: PUSH
34696: LD_VAR 0 8
34700: ARRAY
34701: ST_TO_ADDR
// if x = - 1 then
34702: LD_VAR 0 13
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: EQUAL
34711: IFFALSE 34920
// begin for j in f do
34713: LD_ADDR_VAR 0 9
34717: PUSH
34718: LD_VAR 0 12
34722: PUSH
34723: FOR_IN
34724: IFFALSE 34916
// repeat InitHc ;
34726: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34730: LD_VAR 0 9
34734: PPUSH
34735: CALL_OW 266
34739: PUSH
34740: LD_INT 5
34742: EQUAL
34743: IFFALSE 34813
// begin if UnitsInside ( j ) < 3 then
34745: LD_VAR 0 9
34749: PPUSH
34750: CALL_OW 313
34754: PUSH
34755: LD_INT 3
34757: LESS
34758: IFFALSE 34794
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34760: LD_INT 0
34762: PPUSH
34763: LD_INT 5
34765: PUSH
34766: LD_INT 8
34768: PUSH
34769: LD_INT 9
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: PUSH
34777: LD_VAR 0 17
34781: ARRAY
34782: PPUSH
34783: LD_VAR 0 4
34787: PPUSH
34788: CALL_OW 380
34792: GO 34811
// PrepareHuman ( false , i , skill ) ;
34794: LD_INT 0
34796: PPUSH
34797: LD_VAR 0 8
34801: PPUSH
34802: LD_VAR 0 4
34806: PPUSH
34807: CALL_OW 380
// end else
34811: GO 34830
// PrepareHuman ( false , i , skill ) ;
34813: LD_INT 0
34815: PPUSH
34816: LD_VAR 0 8
34820: PPUSH
34821: LD_VAR 0 4
34825: PPUSH
34826: CALL_OW 380
// un := CreateHuman ;
34830: LD_ADDR_VAR 0 14
34834: PUSH
34835: CALL_OW 44
34839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34840: LD_ADDR_VAR 0 7
34844: PUSH
34845: LD_VAR 0 7
34849: PPUSH
34850: LD_INT 1
34852: PPUSH
34853: LD_VAR 0 14
34857: PPUSH
34858: CALL_OW 2
34862: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34863: LD_VAR 0 14
34867: PPUSH
34868: LD_VAR 0 9
34872: PPUSH
34873: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34877: LD_VAR 0 9
34881: PPUSH
34882: CALL_OW 313
34886: PUSH
34887: LD_INT 6
34889: EQUAL
34890: PUSH
34891: LD_VAR 0 9
34895: PPUSH
34896: CALL_OW 266
34900: PUSH
34901: LD_INT 32
34903: PUSH
34904: LD_INT 31
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: IN
34911: OR
34912: IFFALSE 34726
34914: GO 34723
34916: POP
34917: POP
// end else
34918: GO 35300
// for j = 1 to x do
34920: LD_ADDR_VAR 0 9
34924: PUSH
34925: DOUBLE
34926: LD_INT 1
34928: DEC
34929: ST_TO_ADDR
34930: LD_VAR 0 13
34934: PUSH
34935: FOR_TO
34936: IFFALSE 35298
// begin InitHc ;
34938: CALL_OW 19
// if not f then
34942: LD_VAR 0 12
34946: NOT
34947: IFFALSE 35036
// begin PrepareHuman ( false , i , skill ) ;
34949: LD_INT 0
34951: PPUSH
34952: LD_VAR 0 8
34956: PPUSH
34957: LD_VAR 0 4
34961: PPUSH
34962: CALL_OW 380
// un := CreateHuman ;
34966: LD_ADDR_VAR 0 14
34970: PUSH
34971: CALL_OW 44
34975: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34976: LD_ADDR_VAR 0 7
34980: PUSH
34981: LD_VAR 0 7
34985: PPUSH
34986: LD_INT 1
34988: PPUSH
34989: LD_VAR 0 14
34993: PPUSH
34994: CALL_OW 2
34998: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34999: LD_VAR 0 14
35003: PPUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 250
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 251
35023: PPUSH
35024: LD_INT 10
35026: PPUSH
35027: LD_INT 0
35029: PPUSH
35030: CALL_OW 50
// continue ;
35034: GO 34935
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35036: LD_VAR 0 12
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PPUSH
35045: CALL_OW 313
35049: PUSH
35050: LD_VAR 0 12
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: CALL_OW 266
35063: PUSH
35064: LD_INT 32
35066: PUSH
35067: LD_INT 31
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: IN
35074: AND
35075: PUSH
35076: LD_VAR 0 12
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PPUSH
35085: CALL_OW 313
35089: PUSH
35090: LD_INT 6
35092: EQUAL
35093: OR
35094: IFFALSE 35114
// f := Delete ( f , 1 ) ;
35096: LD_ADDR_VAR 0 12
35100: PUSH
35101: LD_VAR 0 12
35105: PPUSH
35106: LD_INT 1
35108: PPUSH
35109: CALL_OW 3
35113: ST_TO_ADDR
// if not f then
35114: LD_VAR 0 12
35118: NOT
35119: IFFALSE 35137
// begin x := x + 2 ;
35121: LD_ADDR_VAR 0 13
35125: PUSH
35126: LD_VAR 0 13
35130: PUSH
35131: LD_INT 2
35133: PLUS
35134: ST_TO_ADDR
// continue ;
35135: GO 34935
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35137: LD_VAR 0 12
35141: PUSH
35142: LD_INT 1
35144: ARRAY
35145: PPUSH
35146: CALL_OW 266
35150: PUSH
35151: LD_INT 5
35153: EQUAL
35154: IFFALSE 35228
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35156: LD_VAR 0 12
35160: PUSH
35161: LD_INT 1
35163: ARRAY
35164: PPUSH
35165: CALL_OW 313
35169: PUSH
35170: LD_INT 3
35172: LESS
35173: IFFALSE 35209
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35175: LD_INT 0
35177: PPUSH
35178: LD_INT 5
35180: PUSH
35181: LD_INT 8
35183: PUSH
35184: LD_INT 9
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: LD_VAR 0 17
35196: ARRAY
35197: PPUSH
35198: LD_VAR 0 4
35202: PPUSH
35203: CALL_OW 380
35207: GO 35226
// PrepareHuman ( false , i , skill ) ;
35209: LD_INT 0
35211: PPUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: LD_VAR 0 4
35221: PPUSH
35222: CALL_OW 380
// end else
35226: GO 35245
// PrepareHuman ( false , i , skill ) ;
35228: LD_INT 0
35230: PPUSH
35231: LD_VAR 0 8
35235: PPUSH
35236: LD_VAR 0 4
35240: PPUSH
35241: CALL_OW 380
// un := CreateHuman ;
35245: LD_ADDR_VAR 0 14
35249: PUSH
35250: CALL_OW 44
35254: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35255: LD_ADDR_VAR 0 7
35259: PUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: LD_VAR 0 14
35272: PPUSH
35273: CALL_OW 2
35277: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35278: LD_VAR 0 14
35282: PPUSH
35283: LD_VAR 0 12
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: CALL_OW 52
// end ;
35296: GO 34935
35298: POP
35299: POP
// end ;
35300: GO 34237
35302: POP
35303: POP
// result := result ^ buildings ;
35304: LD_ADDR_VAR 0 7
35308: PUSH
35309: LD_VAR 0 7
35313: PUSH
35314: LD_VAR 0 18
35318: ADD
35319: ST_TO_ADDR
// end else
35320: GO 35463
// begin for i = 1 to personel do
35322: LD_ADDR_VAR 0 8
35326: PUSH
35327: DOUBLE
35328: LD_INT 1
35330: DEC
35331: ST_TO_ADDR
35332: LD_VAR 0 6
35336: PUSH
35337: FOR_TO
35338: IFFALSE 35461
// begin if i > 4 then
35340: LD_VAR 0 8
35344: PUSH
35345: LD_INT 4
35347: GREATER
35348: IFFALSE 35352
// break ;
35350: GO 35461
// x := personel [ i ] ;
35352: LD_ADDR_VAR 0 13
35356: PUSH
35357: LD_VAR 0 6
35361: PUSH
35362: LD_VAR 0 8
35366: ARRAY
35367: ST_TO_ADDR
// if x = - 1 then
35368: LD_VAR 0 13
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: EQUAL
35377: IFFALSE 35381
// continue ;
35379: GO 35337
// PrepareHuman ( false , i , skill ) ;
35381: LD_INT 0
35383: PPUSH
35384: LD_VAR 0 8
35388: PPUSH
35389: LD_VAR 0 4
35393: PPUSH
35394: CALL_OW 380
// un := CreateHuman ;
35398: LD_ADDR_VAR 0 14
35402: PUSH
35403: CALL_OW 44
35407: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35408: LD_VAR 0 14
35412: PPUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 250
35422: PPUSH
35423: LD_VAR 0 1
35427: PPUSH
35428: CALL_OW 251
35432: PPUSH
35433: LD_INT 10
35435: PPUSH
35436: LD_INT 0
35438: PPUSH
35439: CALL_OW 50
// result := result ^ un ;
35443: LD_ADDR_VAR 0 7
35447: PUSH
35448: LD_VAR 0 7
35452: PUSH
35453: LD_VAR 0 14
35457: ADD
35458: ST_TO_ADDR
// end ;
35459: GO 35337
35461: POP
35462: POP
// end ; end ;
35463: LD_VAR 0 7
35467: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35468: LD_INT 0
35470: PPUSH
35471: PPUSH
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
// result := false ;
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 0
35493: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35494: LD_VAR 0 1
35498: NOT
35499: PUSH
35500: LD_VAR 0 1
35504: PPUSH
35505: CALL_OW 266
35509: PUSH
35510: LD_INT 32
35512: PUSH
35513: LD_INT 33
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: IN
35520: NOT
35521: OR
35522: IFFALSE 35526
// exit ;
35524: GO 36662
// nat := GetNation ( tower ) ;
35526: LD_ADDR_VAR 0 12
35530: PUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 248
35540: ST_TO_ADDR
// side := GetSide ( tower ) ;
35541: LD_ADDR_VAR 0 16
35545: PUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 255
35555: ST_TO_ADDR
// x := GetX ( tower ) ;
35556: LD_ADDR_VAR 0 10
35560: PUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL_OW 250
35570: ST_TO_ADDR
// y := GetY ( tower ) ;
35571: LD_ADDR_VAR 0 11
35575: PUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: CALL_OW 251
35585: ST_TO_ADDR
// if not x or not y then
35586: LD_VAR 0 10
35590: NOT
35591: PUSH
35592: LD_VAR 0 11
35596: NOT
35597: OR
35598: IFFALSE 35602
// exit ;
35600: GO 36662
// weapon := 0 ;
35602: LD_ADDR_VAR 0 18
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// fac_list := [ ] ;
35610: LD_ADDR_VAR 0 17
35614: PUSH
35615: EMPTY
35616: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35617: LD_ADDR_VAR 0 6
35621: PUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 274
35631: PPUSH
35632: LD_VAR 0 2
35636: PPUSH
35637: CALL 33240 0 2
35641: PPUSH
35642: LD_INT 30
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PPUSH
35652: CALL_OW 72
35656: ST_TO_ADDR
// if not factories then
35657: LD_VAR 0 6
35661: NOT
35662: IFFALSE 35666
// exit ;
35664: GO 36662
// for i in factories do
35666: LD_ADDR_VAR 0 8
35670: PUSH
35671: LD_VAR 0 6
35675: PUSH
35676: FOR_IN
35677: IFFALSE 35702
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35679: LD_ADDR_VAR 0 17
35683: PUSH
35684: LD_VAR 0 17
35688: PUSH
35689: LD_VAR 0 8
35693: PPUSH
35694: CALL_OW 478
35698: UNION
35699: ST_TO_ADDR
35700: GO 35676
35702: POP
35703: POP
// if not fac_list then
35704: LD_VAR 0 17
35708: NOT
35709: IFFALSE 35713
// exit ;
35711: GO 36662
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35713: LD_ADDR_VAR 0 5
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: LD_INT 9
35726: PUSH
35727: LD_INT 10
35729: PUSH
35730: LD_INT 6
35732: PUSH
35733: LD_INT 7
35735: PUSH
35736: LD_INT 11
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 27
35750: PUSH
35751: LD_INT 28
35753: PUSH
35754: LD_INT 26
35756: PUSH
35757: LD_INT 30
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 43
35768: PUSH
35769: LD_INT 44
35771: PUSH
35772: LD_INT 46
35774: PUSH
35775: LD_INT 45
35777: PUSH
35778: LD_INT 47
35780: PUSH
35781: LD_INT 49
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: LD_VAR 0 12
35801: ARRAY
35802: ST_TO_ADDR
// for i in list do
35803: LD_ADDR_VAR 0 8
35807: PUSH
35808: LD_VAR 0 5
35812: PUSH
35813: FOR_IN
35814: IFFALSE 35847
// if not i in fac_list then
35816: LD_VAR 0 8
35820: PUSH
35821: LD_VAR 0 17
35825: IN
35826: NOT
35827: IFFALSE 35845
// list := list diff i ;
35829: LD_ADDR_VAR 0 5
35833: PUSH
35834: LD_VAR 0 5
35838: PUSH
35839: LD_VAR 0 8
35843: DIFF
35844: ST_TO_ADDR
35845: GO 35813
35847: POP
35848: POP
// if not list then
35849: LD_VAR 0 5
35853: NOT
35854: IFFALSE 35858
// exit ;
35856: GO 36662
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35858: LD_VAR 0 12
35862: PUSH
35863: LD_INT 3
35865: EQUAL
35866: PUSH
35867: LD_INT 49
35869: PUSH
35870: LD_VAR 0 5
35874: IN
35875: AND
35876: PUSH
35877: LD_INT 31
35879: PPUSH
35880: LD_VAR 0 16
35884: PPUSH
35885: CALL_OW 321
35889: PUSH
35890: LD_INT 2
35892: EQUAL
35893: AND
35894: IFFALSE 35954
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35896: LD_INT 22
35898: PUSH
35899: LD_VAR 0 16
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 35
35910: PUSH
35911: LD_INT 49
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 91
35920: PUSH
35921: LD_VAR 0 1
35925: PUSH
35926: LD_INT 10
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: PPUSH
35939: CALL_OW 69
35943: NOT
35944: IFFALSE 35954
// weapon := ru_time_lapser ;
35946: LD_ADDR_VAR 0 18
35950: PUSH
35951: LD_INT 49
35953: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35954: LD_VAR 0 12
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: IN
35969: PUSH
35970: LD_INT 11
35972: PUSH
35973: LD_VAR 0 5
35977: IN
35978: PUSH
35979: LD_INT 30
35981: PUSH
35982: LD_VAR 0 5
35986: IN
35987: OR
35988: AND
35989: PUSH
35990: LD_INT 6
35992: PPUSH
35993: LD_VAR 0 16
35997: PPUSH
35998: CALL_OW 321
36002: PUSH
36003: LD_INT 2
36005: EQUAL
36006: AND
36007: IFFALSE 36172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36009: LD_INT 22
36011: PUSH
36012: LD_VAR 0 16
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 35
36026: PUSH
36027: LD_INT 11
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 35
36036: PUSH
36037: LD_INT 30
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 91
36051: PUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 18
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: PPUSH
36070: CALL_OW 69
36074: NOT
36075: PUSH
36076: LD_INT 22
36078: PUSH
36079: LD_VAR 0 16
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 30
36093: PUSH
36094: LD_INT 32
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 30
36103: PUSH
36104: LD_INT 33
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 91
36118: PUSH
36119: LD_VAR 0 1
36123: PUSH
36124: LD_INT 12
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: PPUSH
36140: CALL_OW 69
36144: PUSH
36145: LD_INT 2
36147: GREATER
36148: AND
36149: IFFALSE 36172
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36151: LD_ADDR_VAR 0 18
36155: PUSH
36156: LD_INT 11
36158: PUSH
36159: LD_INT 30
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_VAR 0 12
36170: ARRAY
36171: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36172: LD_VAR 0 18
36176: NOT
36177: PUSH
36178: LD_INT 40
36180: PPUSH
36181: LD_VAR 0 16
36185: PPUSH
36186: CALL_OW 321
36190: PUSH
36191: LD_INT 2
36193: EQUAL
36194: AND
36195: PUSH
36196: LD_INT 7
36198: PUSH
36199: LD_VAR 0 5
36203: IN
36204: PUSH
36205: LD_INT 28
36207: PUSH
36208: LD_VAR 0 5
36212: IN
36213: OR
36214: PUSH
36215: LD_INT 45
36217: PUSH
36218: LD_VAR 0 5
36222: IN
36223: OR
36224: AND
36225: IFFALSE 36479
// begin hex := GetHexInfo ( x , y ) ;
36227: LD_ADDR_VAR 0 4
36231: PUSH
36232: LD_VAR 0 10
36236: PPUSH
36237: LD_VAR 0 11
36241: PPUSH
36242: CALL_OW 546
36246: ST_TO_ADDR
// if hex [ 1 ] then
36247: LD_VAR 0 4
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: IFFALSE 36259
// exit ;
36257: GO 36662
// height := hex [ 2 ] ;
36259: LD_ADDR_VAR 0 15
36263: PUSH
36264: LD_VAR 0 4
36268: PUSH
36269: LD_INT 2
36271: ARRAY
36272: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36273: LD_ADDR_VAR 0 14
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// for i in tmp do
36296: LD_ADDR_VAR 0 8
36300: PUSH
36301: LD_VAR 0 14
36305: PUSH
36306: FOR_IN
36307: IFFALSE 36477
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36309: LD_ADDR_VAR 0 9
36313: PUSH
36314: LD_VAR 0 10
36318: PPUSH
36319: LD_VAR 0 8
36323: PPUSH
36324: LD_INT 5
36326: PPUSH
36327: CALL_OW 272
36331: PUSH
36332: LD_VAR 0 11
36336: PPUSH
36337: LD_VAR 0 8
36341: PPUSH
36342: LD_INT 5
36344: PPUSH
36345: CALL_OW 273
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36354: LD_VAR 0 9
36358: PUSH
36359: LD_INT 1
36361: ARRAY
36362: PPUSH
36363: LD_VAR 0 9
36367: PUSH
36368: LD_INT 2
36370: ARRAY
36371: PPUSH
36372: CALL_OW 488
36376: IFFALSE 36475
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36378: LD_ADDR_VAR 0 4
36382: PUSH
36383: LD_VAR 0 9
36387: PUSH
36388: LD_INT 1
36390: ARRAY
36391: PPUSH
36392: LD_VAR 0 9
36396: PUSH
36397: LD_INT 2
36399: ARRAY
36400: PPUSH
36401: CALL_OW 546
36405: ST_TO_ADDR
// if hex [ 1 ] then
36406: LD_VAR 0 4
36410: PUSH
36411: LD_INT 1
36413: ARRAY
36414: IFFALSE 36418
// continue ;
36416: GO 36306
// h := hex [ 2 ] ;
36418: LD_ADDR_VAR 0 13
36422: PUSH
36423: LD_VAR 0 4
36427: PUSH
36428: LD_INT 2
36430: ARRAY
36431: ST_TO_ADDR
// if h + 7 < height then
36432: LD_VAR 0 13
36436: PUSH
36437: LD_INT 7
36439: PLUS
36440: PUSH
36441: LD_VAR 0 15
36445: LESS
36446: IFFALSE 36475
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36448: LD_ADDR_VAR 0 18
36452: PUSH
36453: LD_INT 7
36455: PUSH
36456: LD_INT 28
36458: PUSH
36459: LD_INT 45
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: PUSH
36467: LD_VAR 0 12
36471: ARRAY
36472: ST_TO_ADDR
// break ;
36473: GO 36477
// end ; end ; end ;
36475: GO 36306
36477: POP
36478: POP
// end ; if not weapon then
36479: LD_VAR 0 18
36483: NOT
36484: IFFALSE 36544
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36486: LD_ADDR_VAR 0 5
36490: PUSH
36491: LD_VAR 0 5
36495: PUSH
36496: LD_INT 11
36498: PUSH
36499: LD_INT 30
36501: PUSH
36502: LD_INT 49
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: DIFF
36510: ST_TO_ADDR
// if not list then
36511: LD_VAR 0 5
36515: NOT
36516: IFFALSE 36520
// exit ;
36518: GO 36662
// weapon := list [ rand ( 1 , list ) ] ;
36520: LD_ADDR_VAR 0 18
36524: PUSH
36525: LD_VAR 0 5
36529: PUSH
36530: LD_INT 1
36532: PPUSH
36533: LD_VAR 0 5
36537: PPUSH
36538: CALL_OW 12
36542: ARRAY
36543: ST_TO_ADDR
// end ; if weapon then
36544: LD_VAR 0 18
36548: IFFALSE 36662
// begin tmp := CostOfWeapon ( weapon ) ;
36550: LD_ADDR_VAR 0 14
36554: PUSH
36555: LD_VAR 0 18
36559: PPUSH
36560: CALL_OW 451
36564: ST_TO_ADDR
// j := GetBase ( tower ) ;
36565: LD_ADDR_VAR 0 9
36569: PUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 274
36579: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36580: LD_VAR 0 9
36584: PPUSH
36585: LD_INT 1
36587: PPUSH
36588: CALL_OW 275
36592: PUSH
36593: LD_VAR 0 14
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: GREATEREQUAL
36602: PUSH
36603: LD_VAR 0 9
36607: PPUSH
36608: LD_INT 2
36610: PPUSH
36611: CALL_OW 275
36615: PUSH
36616: LD_VAR 0 14
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: GREATEREQUAL
36625: AND
36626: PUSH
36627: LD_VAR 0 9
36631: PPUSH
36632: LD_INT 3
36634: PPUSH
36635: CALL_OW 275
36639: PUSH
36640: LD_VAR 0 14
36644: PUSH
36645: LD_INT 3
36647: ARRAY
36648: GREATEREQUAL
36649: AND
36650: IFFALSE 36662
// result := weapon ;
36652: LD_ADDR_VAR 0 3
36656: PUSH
36657: LD_VAR 0 18
36661: ST_TO_ADDR
// end ; end ;
36662: LD_VAR 0 3
36666: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36667: LD_INT 0
36669: PPUSH
36670: PPUSH
// result := true ;
36671: LD_ADDR_VAR 0 3
36675: PUSH
36676: LD_INT 1
36678: ST_TO_ADDR
// if array1 = array2 then
36679: LD_VAR 0 1
36683: PUSH
36684: LD_VAR 0 2
36688: EQUAL
36689: IFFALSE 36749
// begin for i = 1 to array1 do
36691: LD_ADDR_VAR 0 4
36695: PUSH
36696: DOUBLE
36697: LD_INT 1
36699: DEC
36700: ST_TO_ADDR
36701: LD_VAR 0 1
36705: PUSH
36706: FOR_TO
36707: IFFALSE 36745
// if array1 [ i ] <> array2 [ i ] then
36709: LD_VAR 0 1
36713: PUSH
36714: LD_VAR 0 4
36718: ARRAY
36719: PUSH
36720: LD_VAR 0 2
36724: PUSH
36725: LD_VAR 0 4
36729: ARRAY
36730: NONEQUAL
36731: IFFALSE 36743
// begin result := false ;
36733: LD_ADDR_VAR 0 3
36737: PUSH
36738: LD_INT 0
36740: ST_TO_ADDR
// break ;
36741: GO 36745
// end ;
36743: GO 36706
36745: POP
36746: POP
// end else
36747: GO 36757
// result := false ;
36749: LD_ADDR_VAR 0 3
36753: PUSH
36754: LD_INT 0
36756: ST_TO_ADDR
// end ;
36757: LD_VAR 0 3
36761: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36762: LD_INT 0
36764: PPUSH
36765: PPUSH
36766: PPUSH
// pom := GetBase ( fac ) ;
36767: LD_ADDR_VAR 0 5
36771: PUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL_OW 274
36781: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36782: LD_ADDR_VAR 0 4
36786: PUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: PPUSH
36796: LD_VAR 0 2
36800: PUSH
36801: LD_INT 2
36803: ARRAY
36804: PPUSH
36805: LD_VAR 0 2
36809: PUSH
36810: LD_INT 3
36812: ARRAY
36813: PPUSH
36814: LD_VAR 0 2
36818: PUSH
36819: LD_INT 4
36821: ARRAY
36822: PPUSH
36823: CALL_OW 449
36827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_VAR 0 5
36837: PPUSH
36838: LD_INT 1
36840: PPUSH
36841: CALL_OW 275
36845: PUSH
36846: LD_VAR 0 4
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: GREATEREQUAL
36855: PUSH
36856: LD_VAR 0 5
36860: PPUSH
36861: LD_INT 2
36863: PPUSH
36864: CALL_OW 275
36868: PUSH
36869: LD_VAR 0 4
36873: PUSH
36874: LD_INT 2
36876: ARRAY
36877: GREATEREQUAL
36878: AND
36879: PUSH
36880: LD_VAR 0 5
36884: PPUSH
36885: LD_INT 3
36887: PPUSH
36888: CALL_OW 275
36892: PUSH
36893: LD_VAR 0 4
36897: PUSH
36898: LD_INT 3
36900: ARRAY
36901: GREATEREQUAL
36902: AND
36903: ST_TO_ADDR
// end ;
36904: LD_VAR 0 3
36908: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36909: LD_INT 0
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
// pom := GetBase ( building ) ;
36915: LD_ADDR_VAR 0 3
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 274
36929: ST_TO_ADDR
// if not pom then
36930: LD_VAR 0 3
36934: NOT
36935: IFFALSE 36939
// exit ;
36937: GO 37109
// btype := GetBType ( building ) ;
36939: LD_ADDR_VAR 0 5
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 266
36953: ST_TO_ADDR
// if btype = b_armoury then
36954: LD_VAR 0 5
36958: PUSH
36959: LD_INT 4
36961: EQUAL
36962: IFFALSE 36972
// btype := b_barracks ;
36964: LD_ADDR_VAR 0 5
36968: PUSH
36969: LD_INT 5
36971: ST_TO_ADDR
// if btype = b_depot then
36972: LD_VAR 0 5
36976: PUSH
36977: LD_INT 0
36979: EQUAL
36980: IFFALSE 36990
// btype := b_warehouse ;
36982: LD_ADDR_VAR 0 5
36986: PUSH
36987: LD_INT 1
36989: ST_TO_ADDR
// if btype = b_workshop then
36990: LD_VAR 0 5
36994: PUSH
36995: LD_INT 2
36997: EQUAL
36998: IFFALSE 37008
// btype := b_factory ;
37000: LD_ADDR_VAR 0 5
37004: PUSH
37005: LD_INT 3
37007: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37008: LD_ADDR_VAR 0 4
37012: PUSH
37013: LD_VAR 0 5
37017: PPUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 248
37027: PPUSH
37028: CALL_OW 450
37032: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37033: LD_ADDR_VAR 0 2
37037: PUSH
37038: LD_VAR 0 3
37042: PPUSH
37043: LD_INT 1
37045: PPUSH
37046: CALL_OW 275
37050: PUSH
37051: LD_VAR 0 4
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: GREATEREQUAL
37060: PUSH
37061: LD_VAR 0 3
37065: PPUSH
37066: LD_INT 2
37068: PPUSH
37069: CALL_OW 275
37073: PUSH
37074: LD_VAR 0 4
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: GREATEREQUAL
37083: AND
37084: PUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: LD_INT 3
37092: PPUSH
37093: CALL_OW 275
37097: PUSH
37098: LD_VAR 0 4
37102: PUSH
37103: LD_INT 3
37105: ARRAY
37106: GREATEREQUAL
37107: AND
37108: ST_TO_ADDR
// end ;
37109: LD_VAR 0 2
37113: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
37118: PPUSH
// pom := GetBase ( building ) ;
37119: LD_ADDR_VAR 0 4
37123: PUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: CALL_OW 274
37133: ST_TO_ADDR
// if not pom then
37134: LD_VAR 0 4
37138: NOT
37139: IFFALSE 37143
// exit ;
37141: GO 37244
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37143: LD_ADDR_VAR 0 5
37147: PUSH
37148: LD_VAR 0 2
37152: PPUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 248
37162: PPUSH
37163: CALL_OW 450
37167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_VAR 0 4
37177: PPUSH
37178: LD_INT 1
37180: PPUSH
37181: CALL_OW 275
37185: PUSH
37186: LD_VAR 0 5
37190: PUSH
37191: LD_INT 1
37193: ARRAY
37194: GREATEREQUAL
37195: PUSH
37196: LD_VAR 0 4
37200: PPUSH
37201: LD_INT 2
37203: PPUSH
37204: CALL_OW 275
37208: PUSH
37209: LD_VAR 0 5
37213: PUSH
37214: LD_INT 2
37216: ARRAY
37217: GREATEREQUAL
37218: AND
37219: PUSH
37220: LD_VAR 0 4
37224: PPUSH
37225: LD_INT 3
37227: PPUSH
37228: CALL_OW 275
37232: PUSH
37233: LD_VAR 0 5
37237: PUSH
37238: LD_INT 3
37240: ARRAY
37241: GREATEREQUAL
37242: AND
37243: ST_TO_ADDR
// end ;
37244: LD_VAR 0 3
37248: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
37249: LD_INT 0
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
// result := false ;
37261: LD_ADDR_VAR 0 6
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// if not base or not btype or not x or not y then
37269: LD_VAR 0 1
37273: NOT
37274: PUSH
37275: LD_VAR 0 2
37279: NOT
37280: OR
37281: PUSH
37282: LD_VAR 0 3
37286: NOT
37287: OR
37288: PUSH
37289: LD_VAR 0 4
37293: NOT
37294: OR
37295: IFFALSE 37299
// exit ;
37297: GO 37908
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
37299: LD_ADDR_VAR 0 12
37303: PUSH
37304: LD_VAR 0 2
37308: PPUSH
37309: LD_VAR 0 3
37313: PPUSH
37314: LD_VAR 0 4
37318: PPUSH
37319: LD_VAR 0 5
37323: PPUSH
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PPUSH
37333: CALL_OW 248
37337: PPUSH
37338: LD_INT 0
37340: PPUSH
37341: CALL 38745 0 6
37345: ST_TO_ADDR
// if not hexes then
37346: LD_VAR 0 12
37350: NOT
37351: IFFALSE 37355
// exit ;
37353: GO 37908
// for i = 1 to hexes do
37355: LD_ADDR_VAR 0 7
37359: PUSH
37360: DOUBLE
37361: LD_INT 1
37363: DEC
37364: ST_TO_ADDR
37365: LD_VAR 0 12
37369: PUSH
37370: FOR_TO
37371: IFFALSE 37906
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37373: LD_ADDR_VAR 0 11
37377: PUSH
37378: LD_VAR 0 12
37382: PUSH
37383: LD_VAR 0 7
37387: ARRAY
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PPUSH
37393: LD_VAR 0 12
37397: PUSH
37398: LD_VAR 0 7
37402: ARRAY
37403: PUSH
37404: LD_INT 2
37406: ARRAY
37407: PPUSH
37408: CALL_OW 428
37412: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37413: LD_VAR 0 12
37417: PUSH
37418: LD_VAR 0 7
37422: ARRAY
37423: PUSH
37424: LD_INT 1
37426: ARRAY
37427: PPUSH
37428: LD_VAR 0 12
37432: PUSH
37433: LD_VAR 0 7
37437: ARRAY
37438: PUSH
37439: LD_INT 2
37441: ARRAY
37442: PPUSH
37443: CALL_OW 351
37447: PUSH
37448: LD_VAR 0 12
37452: PUSH
37453: LD_VAR 0 7
37457: ARRAY
37458: PUSH
37459: LD_INT 1
37461: ARRAY
37462: PPUSH
37463: LD_VAR 0 12
37467: PUSH
37468: LD_VAR 0 7
37472: ARRAY
37473: PUSH
37474: LD_INT 2
37476: ARRAY
37477: PPUSH
37478: CALL_OW 488
37482: NOT
37483: OR
37484: PUSH
37485: LD_VAR 0 11
37489: PPUSH
37490: CALL_OW 247
37494: PUSH
37495: LD_INT 3
37497: EQUAL
37498: OR
37499: IFFALSE 37505
// exit ;
37501: POP
37502: POP
37503: GO 37908
// if not tmp or not tmp in base then
37505: LD_VAR 0 11
37509: NOT
37510: PUSH
37511: LD_VAR 0 11
37515: PUSH
37516: LD_VAR 0 1
37520: IN
37521: NOT
37522: OR
37523: IFFALSE 37527
// continue ;
37525: GO 37370
// result := true ;
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_INT 1
37534: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37535: LD_ADDR_VAR 0 15
37539: PUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: LD_INT 22
37547: PUSH
37548: LD_VAR 0 11
37552: PPUSH
37553: CALL_OW 255
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: LD_INT 30
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 30
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PPUSH
37594: CALL_OW 72
37598: ST_TO_ADDR
// if dep then
37599: LD_VAR 0 15
37603: IFFALSE 37739
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37605: LD_ADDR_VAR 0 14
37609: PUSH
37610: LD_VAR 0 15
37614: PUSH
37615: LD_INT 1
37617: ARRAY
37618: PPUSH
37619: CALL_OW 250
37623: PPUSH
37624: LD_VAR 0 15
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PPUSH
37633: CALL_OW 254
37637: PPUSH
37638: LD_INT 5
37640: PPUSH
37641: CALL_OW 272
37645: PUSH
37646: LD_VAR 0 15
37650: PUSH
37651: LD_INT 1
37653: ARRAY
37654: PPUSH
37655: CALL_OW 251
37659: PPUSH
37660: LD_VAR 0 15
37664: PUSH
37665: LD_INT 1
37667: ARRAY
37668: PPUSH
37669: CALL_OW 254
37673: PPUSH
37674: LD_INT 5
37676: PPUSH
37677: CALL_OW 273
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37686: LD_VAR 0 14
37690: PUSH
37691: LD_INT 1
37693: ARRAY
37694: PPUSH
37695: LD_VAR 0 14
37699: PUSH
37700: LD_INT 2
37702: ARRAY
37703: PPUSH
37704: CALL_OW 488
37708: IFFALSE 37739
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37710: LD_VAR 0 11
37714: PPUSH
37715: LD_VAR 0 14
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: PPUSH
37724: LD_VAR 0 14
37728: PUSH
37729: LD_INT 2
37731: ARRAY
37732: PPUSH
37733: CALL_OW 111
// continue ;
37737: GO 37370
// end ; end ; r := GetDir ( tmp ) ;
37739: LD_ADDR_VAR 0 13
37743: PUSH
37744: LD_VAR 0 11
37748: PPUSH
37749: CALL_OW 254
37753: ST_TO_ADDR
// if r = 5 then
37754: LD_VAR 0 13
37758: PUSH
37759: LD_INT 5
37761: EQUAL
37762: IFFALSE 37772
// r := 0 ;
37764: LD_ADDR_VAR 0 13
37768: PUSH
37769: LD_INT 0
37771: ST_TO_ADDR
// for j = r to 5 do
37772: LD_ADDR_VAR 0 8
37776: PUSH
37777: DOUBLE
37778: LD_VAR 0 13
37782: DEC
37783: ST_TO_ADDR
37784: LD_INT 5
37786: PUSH
37787: FOR_TO
37788: IFFALSE 37902
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37790: LD_ADDR_VAR 0 9
37794: PUSH
37795: LD_VAR 0 11
37799: PPUSH
37800: CALL_OW 250
37804: PPUSH
37805: LD_VAR 0 8
37809: PPUSH
37810: LD_INT 2
37812: PPUSH
37813: CALL_OW 272
37817: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37818: LD_ADDR_VAR 0 10
37822: PUSH
37823: LD_VAR 0 11
37827: PPUSH
37828: CALL_OW 251
37832: PPUSH
37833: LD_VAR 0 8
37837: PPUSH
37838: LD_INT 2
37840: PPUSH
37841: CALL_OW 273
37845: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37846: LD_VAR 0 9
37850: PPUSH
37851: LD_VAR 0 10
37855: PPUSH
37856: CALL_OW 488
37860: PUSH
37861: LD_VAR 0 9
37865: PPUSH
37866: LD_VAR 0 10
37870: PPUSH
37871: CALL_OW 428
37875: NOT
37876: AND
37877: IFFALSE 37900
// begin ComMoveXY ( tmp , _x , _y ) ;
37879: LD_VAR 0 11
37883: PPUSH
37884: LD_VAR 0 9
37888: PPUSH
37889: LD_VAR 0 10
37893: PPUSH
37894: CALL_OW 111
// break ;
37898: GO 37902
// end ; end ;
37900: GO 37787
37902: POP
37903: POP
// end ;
37904: GO 37370
37906: POP
37907: POP
// end ;
37908: LD_VAR 0 6
37912: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37913: LD_INT 0
37915: PPUSH
37916: PPUSH
37917: PPUSH
37918: PPUSH
37919: PPUSH
37920: PPUSH
37921: PPUSH
37922: PPUSH
37923: PPUSH
37924: PPUSH
// result := false ;
37925: LD_ADDR_VAR 0 6
37929: PUSH
37930: LD_INT 0
37932: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37933: LD_VAR 0 1
37937: NOT
37938: PUSH
37939: LD_VAR 0 1
37943: PPUSH
37944: CALL_OW 266
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: IN
37959: NOT
37960: OR
37961: PUSH
37962: LD_VAR 0 2
37966: NOT
37967: OR
37968: PUSH
37969: LD_VAR 0 5
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 4
37988: PUSH
37989: LD_INT 5
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: IN
38000: NOT
38001: OR
38002: PUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: LD_VAR 0 4
38012: PPUSH
38013: CALL_OW 488
38017: NOT
38018: OR
38019: IFFALSE 38023
// exit ;
38021: GO 38740
// pom := GetBase ( depot ) ;
38023: LD_ADDR_VAR 0 10
38027: PUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: CALL_OW 274
38037: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38038: LD_ADDR_VAR 0 11
38042: PUSH
38043: LD_VAR 0 2
38047: PPUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 248
38057: PPUSH
38058: CALL_OW 450
38062: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38063: LD_VAR 0 10
38067: PPUSH
38068: LD_INT 1
38070: PPUSH
38071: CALL_OW 275
38075: PUSH
38076: LD_VAR 0 11
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: GREATEREQUAL
38085: PUSH
38086: LD_VAR 0 10
38090: PPUSH
38091: LD_INT 2
38093: PPUSH
38094: CALL_OW 275
38098: PUSH
38099: LD_VAR 0 11
38103: PUSH
38104: LD_INT 2
38106: ARRAY
38107: GREATEREQUAL
38108: AND
38109: PUSH
38110: LD_VAR 0 10
38114: PPUSH
38115: LD_INT 3
38117: PPUSH
38118: CALL_OW 275
38122: PUSH
38123: LD_VAR 0 11
38127: PUSH
38128: LD_INT 3
38130: ARRAY
38131: GREATEREQUAL
38132: AND
38133: NOT
38134: IFFALSE 38138
// exit ;
38136: GO 38740
// if GetBType ( depot ) = b_depot then
38138: LD_VAR 0 1
38142: PPUSH
38143: CALL_OW 266
38147: PUSH
38148: LD_INT 0
38150: EQUAL
38151: IFFALSE 38163
// dist := 28 else
38153: LD_ADDR_VAR 0 14
38157: PUSH
38158: LD_INT 28
38160: ST_TO_ADDR
38161: GO 38171
// dist := 36 ;
38163: LD_ADDR_VAR 0 14
38167: PUSH
38168: LD_INT 36
38170: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38171: LD_VAR 0 1
38175: PPUSH
38176: LD_VAR 0 3
38180: PPUSH
38181: LD_VAR 0 4
38185: PPUSH
38186: CALL_OW 297
38190: PUSH
38191: LD_VAR 0 14
38195: GREATER
38196: IFFALSE 38200
// exit ;
38198: GO 38740
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38200: LD_ADDR_VAR 0 12
38204: PUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: LD_VAR 0 3
38214: PPUSH
38215: LD_VAR 0 4
38219: PPUSH
38220: LD_VAR 0 5
38224: PPUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 248
38234: PPUSH
38235: LD_INT 0
38237: PPUSH
38238: CALL 38745 0 6
38242: ST_TO_ADDR
// if not hexes then
38243: LD_VAR 0 12
38247: NOT
38248: IFFALSE 38252
// exit ;
38250: GO 38740
// hex := GetHexInfo ( x , y ) ;
38252: LD_ADDR_VAR 0 15
38256: PUSH
38257: LD_VAR 0 3
38261: PPUSH
38262: LD_VAR 0 4
38266: PPUSH
38267: CALL_OW 546
38271: ST_TO_ADDR
// if hex [ 1 ] then
38272: LD_VAR 0 15
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: IFFALSE 38284
// exit ;
38282: GO 38740
// height := hex [ 2 ] ;
38284: LD_ADDR_VAR 0 13
38288: PUSH
38289: LD_VAR 0 15
38293: PUSH
38294: LD_INT 2
38296: ARRAY
38297: ST_TO_ADDR
// for i = 1 to hexes do
38298: LD_ADDR_VAR 0 7
38302: PUSH
38303: DOUBLE
38304: LD_INT 1
38306: DEC
38307: ST_TO_ADDR
38308: LD_VAR 0 12
38312: PUSH
38313: FOR_TO
38314: IFFALSE 38644
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38316: LD_VAR 0 12
38320: PUSH
38321: LD_VAR 0 7
38325: ARRAY
38326: PUSH
38327: LD_INT 1
38329: ARRAY
38330: PPUSH
38331: LD_VAR 0 12
38335: PUSH
38336: LD_VAR 0 7
38340: ARRAY
38341: PUSH
38342: LD_INT 2
38344: ARRAY
38345: PPUSH
38346: CALL_OW 488
38350: NOT
38351: PUSH
38352: LD_VAR 0 12
38356: PUSH
38357: LD_VAR 0 7
38361: ARRAY
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: LD_VAR 0 12
38371: PUSH
38372: LD_VAR 0 7
38376: ARRAY
38377: PUSH
38378: LD_INT 2
38380: ARRAY
38381: PPUSH
38382: CALL_OW 428
38386: PUSH
38387: LD_INT 0
38389: GREATER
38390: OR
38391: PUSH
38392: LD_VAR 0 12
38396: PUSH
38397: LD_VAR 0 7
38401: ARRAY
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 12
38411: PUSH
38412: LD_VAR 0 7
38416: ARRAY
38417: PUSH
38418: LD_INT 2
38420: ARRAY
38421: PPUSH
38422: CALL_OW 351
38426: OR
38427: IFFALSE 38433
// exit ;
38429: POP
38430: POP
38431: GO 38740
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38433: LD_ADDR_VAR 0 8
38437: PUSH
38438: LD_VAR 0 12
38442: PUSH
38443: LD_VAR 0 7
38447: ARRAY
38448: PUSH
38449: LD_INT 1
38451: ARRAY
38452: PPUSH
38453: LD_VAR 0 12
38457: PUSH
38458: LD_VAR 0 7
38462: ARRAY
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: PPUSH
38468: CALL_OW 546
38472: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38473: LD_VAR 0 8
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: PUSH
38482: LD_VAR 0 8
38486: PUSH
38487: LD_INT 2
38489: ARRAY
38490: PUSH
38491: LD_VAR 0 13
38495: PUSH
38496: LD_INT 2
38498: PLUS
38499: GREATER
38500: OR
38501: PUSH
38502: LD_VAR 0 8
38506: PUSH
38507: LD_INT 2
38509: ARRAY
38510: PUSH
38511: LD_VAR 0 13
38515: PUSH
38516: LD_INT 2
38518: MINUS
38519: LESS
38520: OR
38521: PUSH
38522: LD_VAR 0 8
38526: PUSH
38527: LD_INT 3
38529: ARRAY
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 8
38536: PUSH
38537: LD_INT 9
38539: PUSH
38540: LD_INT 10
38542: PUSH
38543: LD_INT 11
38545: PUSH
38546: LD_INT 12
38548: PUSH
38549: LD_INT 13
38551: PUSH
38552: LD_INT 16
38554: PUSH
38555: LD_INT 17
38557: PUSH
38558: LD_INT 18
38560: PUSH
38561: LD_INT 19
38563: PUSH
38564: LD_INT 20
38566: PUSH
38567: LD_INT 21
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: IN
38585: NOT
38586: OR
38587: PUSH
38588: LD_VAR 0 8
38592: PUSH
38593: LD_INT 5
38595: ARRAY
38596: NOT
38597: OR
38598: PUSH
38599: LD_VAR 0 8
38603: PUSH
38604: LD_INT 6
38606: ARRAY
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: LD_INT 7
38616: PUSH
38617: LD_INT 9
38619: PUSH
38620: LD_INT 10
38622: PUSH
38623: LD_INT 11
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: IN
38634: NOT
38635: OR
38636: IFFALSE 38642
// exit ;
38638: POP
38639: POP
38640: GO 38740
// end ;
38642: GO 38313
38644: POP
38645: POP
// side := GetSide ( depot ) ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 255
38660: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38661: LD_VAR 0 9
38665: PPUSH
38666: LD_VAR 0 3
38670: PPUSH
38671: LD_VAR 0 4
38675: PPUSH
38676: LD_INT 20
38678: PPUSH
38679: CALL 31394 0 4
38683: PUSH
38684: LD_INT 4
38686: ARRAY
38687: IFFALSE 38691
// exit ;
38689: GO 38740
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38691: LD_VAR 0 2
38695: PUSH
38696: LD_INT 29
38698: PUSH
38699: LD_INT 30
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: IN
38706: PUSH
38707: LD_VAR 0 3
38711: PPUSH
38712: LD_VAR 0 4
38716: PPUSH
38717: LD_VAR 0 9
38721: PPUSH
38722: CALL_OW 440
38726: NOT
38727: AND
38728: IFFALSE 38732
// exit ;
38730: GO 38740
// result := true ;
38732: LD_ADDR_VAR 0 6
38736: PUSH
38737: LD_INT 1
38739: ST_TO_ADDR
// end ;
38740: LD_VAR 0 6
38744: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
38745: LD_INT 0
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
// result = [ ] ;
38805: LD_ADDR_VAR 0 7
38809: PUSH
38810: EMPTY
38811: ST_TO_ADDR
// temp_list = [ ] ;
38812: LD_ADDR_VAR 0 9
38816: PUSH
38817: EMPTY
38818: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38819: LD_VAR 0 4
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 5
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: IN
38850: NOT
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: IN
38867: PUSH
38868: LD_VAR 0 5
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: IN
38887: NOT
38888: AND
38889: OR
38890: IFFALSE 38894
// exit ;
38892: GO 57285
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38894: LD_VAR 0 1
38898: PUSH
38899: LD_INT 6
38901: PUSH
38902: LD_INT 7
38904: PUSH
38905: LD_INT 8
38907: PUSH
38908: LD_INT 13
38910: PUSH
38911: LD_INT 12
38913: PUSH
38914: LD_INT 15
38916: PUSH
38917: LD_INT 11
38919: PUSH
38920: LD_INT 14
38922: PUSH
38923: LD_INT 10
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: IN
38937: IFFALSE 38947
// btype = b_lab ;
38939: LD_ADDR_VAR 0 1
38943: PUSH
38944: LD_INT 6
38946: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38947: LD_VAR 0 6
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: IN
38966: NOT
38967: PUSH
38968: LD_VAR 0 1
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 6
38987: PUSH
38988: LD_INT 36
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: LD_INT 5
38996: PUSH
38997: LD_INT 31
38999: PUSH
39000: LD_INT 32
39002: PUSH
39003: LD_INT 33
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: IN
39019: NOT
39020: PUSH
39021: LD_VAR 0 6
39025: PUSH
39026: LD_INT 1
39028: EQUAL
39029: AND
39030: OR
39031: PUSH
39032: LD_VAR 0 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: IN
39047: NOT
39048: PUSH
39049: LD_VAR 0 6
39053: PUSH
39054: LD_INT 2
39056: EQUAL
39057: AND
39058: OR
39059: IFFALSE 39069
// mode = 0 ;
39061: LD_ADDR_VAR 0 6
39065: PUSH
39066: LD_INT 0
39068: ST_TO_ADDR
// case mode of 0 :
39069: LD_VAR 0 6
39073: PUSH
39074: LD_INT 0
39076: DOUBLE
39077: EQUAL
39078: IFTRUE 39082
39080: GO 50535
39082: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39083: LD_ADDR_VAR 0 11
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39276: LD_ADDR_VAR 0 12
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39472: LD_ADDR_VAR 0 13
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 3
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: NEG
39632: PUSH
39633: LD_INT 2
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39671: LD_ADDR_VAR 0 14
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39867: LD_ADDR_VAR 0 15
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40060: LD_ADDR_VAR 0 16
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40253: LD_ADDR_VAR 0 17
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40483: LD_ADDR_VAR 0 18
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40713: LD_ADDR_VAR 0 19
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40943: LD_ADDR_VAR 0 20
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41173: LD_ADDR_VAR 0 21
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: NEG
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41403: LD_ADDR_VAR 0 22
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41633: LD_ADDR_VAR 0 23
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 3
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41913: LD_ADDR_VAR 0 24
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42189: LD_ADDR_VAR 0 25
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: NEG
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42463: LD_ADDR_VAR 0 26
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42739: LD_ADDR_VAR 0 27
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43019: LD_ADDR_VAR 0 28
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 3
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 3
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43301: LD_ADDR_VAR 0 29
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43580: LD_ADDR_VAR 0 30
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 3
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 3
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43858: LD_ADDR_VAR 0 31
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44136: LD_ADDR_VAR 0 32
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44414: LD_ADDR_VAR 0 33
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 3
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44693: LD_ADDR_VAR 0 34
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 3
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44973: LD_ADDR_VAR 0 35
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45085: LD_ADDR_VAR 0 36
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45197: LD_ADDR_VAR 0 37
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45309: LD_ADDR_VAR 0 38
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45421: LD_ADDR_VAR 0 39
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45533: LD_ADDR_VAR 0 40
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45645: LD_ADDR_VAR 0 41
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45995: LD_ADDR_VAR 0 42
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 3
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: NEG
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46345: LD_ADDR_VAR 0 43
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 3
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46693: LD_ADDR_VAR 0 44
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47043: LD_ADDR_VAR 0 45
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47393: LD_ADDR_VAR 0 46
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 3
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 3
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47741: LD_ADDR_VAR 0 47
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47892: LD_ADDR_VAR 0 48
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48039: LD_ADDR_VAR 0 49
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48183: LD_ADDR_VAR 0 50
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48327: LD_ADDR_VAR 0 51
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48474: LD_ADDR_VAR 0 52
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48625: LD_ADDR_VAR 0 53
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48855: LD_ADDR_VAR 0 54
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49085: LD_ADDR_VAR 0 55
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49315: LD_ADDR_VAR 0 56
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49545: LD_ADDR_VAR 0 57
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49775: LD_ADDR_VAR 0 58
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50005: LD_ADDR_VAR 0 59
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50093: LD_ADDR_VAR 0 60
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50181: LD_ADDR_VAR 0 61
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50269: LD_ADDR_VAR 0 62
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50357: LD_ADDR_VAR 0 63
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50445: LD_ADDR_VAR 0 64
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: ST_TO_ADDR
// end ; 1 :
50533: GO 56430
50535: LD_INT 1
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50543
50541: GO 53166
50543: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50544: LD_ADDR_VAR 0 11
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50588: LD_ADDR_VAR 0 12
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50629: LD_ADDR_VAR 0 13
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50669: LD_ADDR_VAR 0 14
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50710: LD_ADDR_VAR 0 15
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50754: LD_ADDR_VAR 0 16
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50800: LD_ADDR_VAR 0 17
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50844: LD_ADDR_VAR 0 18
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50885: LD_ADDR_VAR 0 19
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 3
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50925: LD_ADDR_VAR 0 20
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50966: LD_ADDR_VAR 0 21
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51010: LD_ADDR_VAR 0 22
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: NEG
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51056: LD_ADDR_VAR 0 23
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51100: LD_ADDR_VAR 0 24
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 4
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51141: LD_ADDR_VAR 0 25
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 4
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51181: LD_ADDR_VAR 0 26
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 4
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51222: LD_ADDR_VAR 0 27
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 4
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51266: LD_ADDR_VAR 0 28
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51312: LD_ADDR_VAR 0 29
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 4
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 5
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 5
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 4
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 6
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 6
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 5
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51467: LD_ADDR_VAR 0 30
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 4
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 5
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 5
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 6
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 6
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51610: LD_ADDR_VAR 0 31
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: LD_INT 4
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 5
51677: PUSH
51678: LD_INT 4
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 5
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 4
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 6
51707: PUSH
51708: LD_INT 5
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 6
51717: PUSH
51718: LD_INT 6
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 5
51727: PUSH
51728: LD_INT 6
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51749: LD_ADDR_VAR 0 32
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 5
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 5
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 4
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 6
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 6
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51892: LD_ADDR_VAR 0 33
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 4
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 4
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 4
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 5
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 5
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 5
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 6
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 6
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52047: LD_ADDR_VAR 0 34
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 3
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: NEG
52091: PUSH
52092: LD_INT 4
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: NEG
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: LD_INT 5
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 5
52138: NEG
52139: PUSH
52140: LD_INT 4
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 5
52150: NEG
52151: PUSH
52152: LD_INT 5
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 5
52162: NEG
52163: PUSH
52164: LD_INT 6
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 6
52174: NEG
52175: PUSH
52176: LD_INT 5
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 6
52186: NEG
52187: PUSH
52188: LD_INT 6
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52210: LD_ADDR_VAR 0 41
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52254: LD_ADDR_VAR 0 42
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52295: LD_ADDR_VAR 0 43
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52335: LD_ADDR_VAR 0 44
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52376: LD_ADDR_VAR 0 45
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52420: LD_ADDR_VAR 0 46
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52466: LD_ADDR_VAR 0 47
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52499: LD_ADDR_VAR 0 48
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52530: LD_ADDR_VAR 0 49
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52559: LD_ADDR_VAR 0 50
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52588: LD_ADDR_VAR 0 51
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52619: LD_ADDR_VAR 0 52
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52652: LD_ADDR_VAR 0 53
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52696: LD_ADDR_VAR 0 54
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52737: LD_ADDR_VAR 0 55
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52777: LD_ADDR_VAR 0 56
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52818: LD_ADDR_VAR 0 57
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52862: LD_ADDR_VAR 0 58
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52908: LD_ADDR_VAR 0 59
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52952: LD_ADDR_VAR 0 60
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52993: LD_ADDR_VAR 0 61
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53033: LD_ADDR_VAR 0 62
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53074: LD_ADDR_VAR 0 63
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53118: LD_ADDR_VAR 0 64
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// end ; 2 :
53164: GO 56430
53166: LD_INT 2
53168: DOUBLE
53169: EQUAL
53170: IFTRUE 53174
53172: GO 56429
53174: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53175: LD_ADDR_VAR 0 29
53179: PUSH
53180: LD_INT 4
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 4
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 5
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 5
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 4
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 5
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 4
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: PUSH
53306: LD_INT 4
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 4
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 4
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 4
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 4
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 5
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 5
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 5
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 4
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 4
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 4
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 4
53560: NEG
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 4
53572: NEG
53573: PUSH
53574: LD_INT 5
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 4
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 4
53608: NEG
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: NEG
53621: PUSH
53622: LD_INT 4
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 5
53632: NEG
53633: PUSH
53634: LD_INT 5
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 5
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53713: LD_ADDR_VAR 0 30
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: LD_INT 5
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 4
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 4
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 5
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 5
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 4
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 4
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 4
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 4
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 5
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 5
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 5
53982: NEG
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: LD_INT 4
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 4
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 5
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 3
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 4
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 5
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 5
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54260: LD_ADDR_VAR 0 31
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 4
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 5
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 4
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 4
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 4
54462: NEG
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: LD_INT 5
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: LD_INT 4
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 4
54510: NEG
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 5
54522: NEG
54523: PUSH
54524: LD_INT 4
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 5
54534: NEG
54535: PUSH
54536: LD_INT 5
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 5
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 5
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 4
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 4
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 5
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54810: LD_ADDR_VAR 0 32
54814: PUSH
54815: LD_INT 4
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 4
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 4
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 5
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 5
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 5
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 4
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 3
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 4
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 4
54991: NEG
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 4
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 4
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 5
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 4
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 5
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 5
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 4
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 5
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 5
55252: PUSH
55253: LD_INT 5
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 4
55262: PUSH
55263: LD_INT 5
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: LD_INT 4
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 5
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 5
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55357: LD_ADDR_VAR 0 33
55361: PUSH
55362: LD_INT 4
55364: NEG
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: LD_INT 5
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 4
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 5
55424: NEG
55425: PUSH
55426: LD_INT 4
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 5
55436: NEG
55437: PUSH
55438: LD_INT 5
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 5
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 5
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 4
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 4
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 4
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 4
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 4
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 5
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 5
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 4
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 5
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55895: LD_ADDR_VAR 0 34
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 4
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 5
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 3
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 5
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 5
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 4
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 4
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: LD_INT 4
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 4
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 5
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: LD_INT 5
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: LD_INT 5
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 4
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 5
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 4
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 4
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: NEG
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 5
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 5
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// end ; end ;
56427: GO 56430
56429: POP
// case btype of b_depot , b_warehouse :
56430: LD_VAR 0 1
56434: PUSH
56435: LD_INT 0
56437: DOUBLE
56438: EQUAL
56439: IFTRUE 56449
56441: LD_INT 1
56443: DOUBLE
56444: EQUAL
56445: IFTRUE 56449
56447: GO 56650
56449: POP
// case nation of nation_american :
56450: LD_VAR 0 5
56454: PUSH
56455: LD_INT 1
56457: DOUBLE
56458: EQUAL
56459: IFTRUE 56463
56461: GO 56519
56463: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
56464: LD_ADDR_VAR 0 9
56468: PUSH
56469: LD_VAR 0 11
56473: PUSH
56474: LD_VAR 0 12
56478: PUSH
56479: LD_VAR 0 13
56483: PUSH
56484: LD_VAR 0 14
56488: PUSH
56489: LD_VAR 0 15
56493: PUSH
56494: LD_VAR 0 16
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: PUSH
56507: LD_VAR 0 4
56511: PUSH
56512: LD_INT 1
56514: PLUS
56515: ARRAY
56516: ST_TO_ADDR
56517: GO 56648
56519: LD_INT 2
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 56583
56527: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56528: LD_ADDR_VAR 0 9
56532: PUSH
56533: LD_VAR 0 17
56537: PUSH
56538: LD_VAR 0 18
56542: PUSH
56543: LD_VAR 0 19
56547: PUSH
56548: LD_VAR 0 20
56552: PUSH
56553: LD_VAR 0 21
56557: PUSH
56558: LD_VAR 0 22
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: PUSH
56571: LD_VAR 0 4
56575: PUSH
56576: LD_INT 1
56578: PLUS
56579: ARRAY
56580: ST_TO_ADDR
56581: GO 56648
56583: LD_INT 3
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56591
56589: GO 56647
56591: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56592: LD_ADDR_VAR 0 9
56596: PUSH
56597: LD_VAR 0 23
56601: PUSH
56602: LD_VAR 0 24
56606: PUSH
56607: LD_VAR 0 25
56611: PUSH
56612: LD_VAR 0 26
56616: PUSH
56617: LD_VAR 0 27
56621: PUSH
56622: LD_VAR 0 28
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: PUSH
56635: LD_VAR 0 4
56639: PUSH
56640: LD_INT 1
56642: PLUS
56643: ARRAY
56644: ST_TO_ADDR
56645: GO 56648
56647: POP
56648: GO 57203
56650: LD_INT 2
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56664
56656: LD_INT 3
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56664
56662: GO 56720
56664: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56665: LD_ADDR_VAR 0 9
56669: PUSH
56670: LD_VAR 0 29
56674: PUSH
56675: LD_VAR 0 30
56679: PUSH
56680: LD_VAR 0 31
56684: PUSH
56685: LD_VAR 0 32
56689: PUSH
56690: LD_VAR 0 33
56694: PUSH
56695: LD_VAR 0 34
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_VAR 0 4
56712: PUSH
56713: LD_INT 1
56715: PLUS
56716: ARRAY
56717: ST_TO_ADDR
56718: GO 57203
56720: LD_INT 16
56722: DOUBLE
56723: EQUAL
56724: IFTRUE 56782
56726: LD_INT 17
56728: DOUBLE
56729: EQUAL
56730: IFTRUE 56782
56732: LD_INT 18
56734: DOUBLE
56735: EQUAL
56736: IFTRUE 56782
56738: LD_INT 19
56740: DOUBLE
56741: EQUAL
56742: IFTRUE 56782
56744: LD_INT 22
56746: DOUBLE
56747: EQUAL
56748: IFTRUE 56782
56750: LD_INT 20
56752: DOUBLE
56753: EQUAL
56754: IFTRUE 56782
56756: LD_INT 21
56758: DOUBLE
56759: EQUAL
56760: IFTRUE 56782
56762: LD_INT 23
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56782
56768: LD_INT 24
56770: DOUBLE
56771: EQUAL
56772: IFTRUE 56782
56774: LD_INT 25
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56782
56780: GO 56838
56782: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56783: LD_ADDR_VAR 0 9
56787: PUSH
56788: LD_VAR 0 35
56792: PUSH
56793: LD_VAR 0 36
56797: PUSH
56798: LD_VAR 0 37
56802: PUSH
56803: LD_VAR 0 38
56807: PUSH
56808: LD_VAR 0 39
56812: PUSH
56813: LD_VAR 0 40
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: PUSH
56826: LD_VAR 0 4
56830: PUSH
56831: LD_INT 1
56833: PLUS
56834: ARRAY
56835: ST_TO_ADDR
56836: GO 57203
56838: LD_INT 6
56840: DOUBLE
56841: EQUAL
56842: IFTRUE 56894
56844: LD_INT 7
56846: DOUBLE
56847: EQUAL
56848: IFTRUE 56894
56850: LD_INT 8
56852: DOUBLE
56853: EQUAL
56854: IFTRUE 56894
56856: LD_INT 13
56858: DOUBLE
56859: EQUAL
56860: IFTRUE 56894
56862: LD_INT 12
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56894
56868: LD_INT 15
56870: DOUBLE
56871: EQUAL
56872: IFTRUE 56894
56874: LD_INT 11
56876: DOUBLE
56877: EQUAL
56878: IFTRUE 56894
56880: LD_INT 14
56882: DOUBLE
56883: EQUAL
56884: IFTRUE 56894
56886: LD_INT 10
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56894
56892: GO 56950
56894: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
56895: LD_ADDR_VAR 0 9
56899: PUSH
56900: LD_VAR 0 41
56904: PUSH
56905: LD_VAR 0 42
56909: PUSH
56910: LD_VAR 0 43
56914: PUSH
56915: LD_VAR 0 44
56919: PUSH
56920: LD_VAR 0 45
56924: PUSH
56925: LD_VAR 0 46
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: PUSH
56938: LD_VAR 0 4
56942: PUSH
56943: LD_INT 1
56945: PLUS
56946: ARRAY
56947: ST_TO_ADDR
56948: GO 57203
56950: LD_INT 36
56952: DOUBLE
56953: EQUAL
56954: IFTRUE 56958
56956: GO 57014
56958: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56959: LD_ADDR_VAR 0 9
56963: PUSH
56964: LD_VAR 0 47
56968: PUSH
56969: LD_VAR 0 48
56973: PUSH
56974: LD_VAR 0 49
56978: PUSH
56979: LD_VAR 0 50
56983: PUSH
56984: LD_VAR 0 51
56988: PUSH
56989: LD_VAR 0 52
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: PUSH
57002: LD_VAR 0 4
57006: PUSH
57007: LD_INT 1
57009: PLUS
57010: ARRAY
57011: ST_TO_ADDR
57012: GO 57203
57014: LD_INT 4
57016: DOUBLE
57017: EQUAL
57018: IFTRUE 57040
57020: LD_INT 5
57022: DOUBLE
57023: EQUAL
57024: IFTRUE 57040
57026: LD_INT 34
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57040
57032: LD_INT 37
57034: DOUBLE
57035: EQUAL
57036: IFTRUE 57040
57038: GO 57096
57040: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57041: LD_ADDR_VAR 0 9
57045: PUSH
57046: LD_VAR 0 53
57050: PUSH
57051: LD_VAR 0 54
57055: PUSH
57056: LD_VAR 0 55
57060: PUSH
57061: LD_VAR 0 56
57065: PUSH
57066: LD_VAR 0 57
57070: PUSH
57071: LD_VAR 0 58
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: PUSH
57084: LD_VAR 0 4
57088: PUSH
57089: LD_INT 1
57091: PLUS
57092: ARRAY
57093: ST_TO_ADDR
57094: GO 57203
57096: LD_INT 31
57098: DOUBLE
57099: EQUAL
57100: IFTRUE 57146
57102: LD_INT 32
57104: DOUBLE
57105: EQUAL
57106: IFTRUE 57146
57108: LD_INT 33
57110: DOUBLE
57111: EQUAL
57112: IFTRUE 57146
57114: LD_INT 27
57116: DOUBLE
57117: EQUAL
57118: IFTRUE 57146
57120: LD_INT 26
57122: DOUBLE
57123: EQUAL
57124: IFTRUE 57146
57126: LD_INT 28
57128: DOUBLE
57129: EQUAL
57130: IFTRUE 57146
57132: LD_INT 29
57134: DOUBLE
57135: EQUAL
57136: IFTRUE 57146
57138: LD_INT 30
57140: DOUBLE
57141: EQUAL
57142: IFTRUE 57146
57144: GO 57202
57146: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
57147: LD_ADDR_VAR 0 9
57151: PUSH
57152: LD_VAR 0 59
57156: PUSH
57157: LD_VAR 0 60
57161: PUSH
57162: LD_VAR 0 61
57166: PUSH
57167: LD_VAR 0 62
57171: PUSH
57172: LD_VAR 0 63
57176: PUSH
57177: LD_VAR 0 64
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 4
57194: PUSH
57195: LD_INT 1
57197: PLUS
57198: ARRAY
57199: ST_TO_ADDR
57200: GO 57203
57202: POP
// temp_list2 = [ ] ;
57203: LD_ADDR_VAR 0 10
57207: PUSH
57208: EMPTY
57209: ST_TO_ADDR
// for i in temp_list do
57210: LD_ADDR_VAR 0 8
57214: PUSH
57215: LD_VAR 0 9
57219: PUSH
57220: FOR_IN
57221: IFFALSE 57273
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57223: LD_ADDR_VAR 0 10
57227: PUSH
57228: LD_VAR 0 10
57232: PUSH
57233: LD_VAR 0 8
57237: PUSH
57238: LD_INT 1
57240: ARRAY
57241: PUSH
57242: LD_VAR 0 2
57246: PLUS
57247: PUSH
57248: LD_VAR 0 8
57252: PUSH
57253: LD_INT 2
57255: ARRAY
57256: PUSH
57257: LD_VAR 0 3
57261: PLUS
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: ADD
57270: ST_TO_ADDR
57271: GO 57220
57273: POP
57274: POP
// result = temp_list2 ;
57275: LD_ADDR_VAR 0 7
57279: PUSH
57280: LD_VAR 0 10
57284: ST_TO_ADDR
// end ;
57285: LD_VAR 0 7
57289: RET
// export function EnemyInRange ( unit , dist ) ; begin
57290: LD_INT 0
57292: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57293: LD_ADDR_VAR 0 3
57297: PUSH
57298: LD_VAR 0 1
57302: PPUSH
57303: CALL_OW 255
57307: PPUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 250
57317: PPUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 251
57327: PPUSH
57328: LD_VAR 0 2
57332: PPUSH
57333: CALL 31394 0 4
57337: PUSH
57338: LD_INT 4
57340: ARRAY
57341: ST_TO_ADDR
// end ;
57342: LD_VAR 0 3
57346: RET
// export function PlayerSeeMe ( unit ) ; begin
57347: LD_INT 0
57349: PPUSH
// result := See ( your_side , unit ) ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_OWVAR 2
57359: PPUSH
57360: LD_VAR 0 1
57364: PPUSH
57365: CALL_OW 292
57369: ST_TO_ADDR
// end ;
57370: LD_VAR 0 2
57374: RET
// export function ReverseDir ( unit ) ; begin
57375: LD_INT 0
57377: PPUSH
// if not unit then
57378: LD_VAR 0 1
57382: NOT
57383: IFFALSE 57387
// exit ;
57385: GO 57410
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57387: LD_ADDR_VAR 0 2
57391: PUSH
57392: LD_VAR 0 1
57396: PPUSH
57397: CALL_OW 254
57401: PUSH
57402: LD_INT 3
57404: PLUS
57405: PUSH
57406: LD_INT 6
57408: MOD
57409: ST_TO_ADDR
// end ;
57410: LD_VAR 0 2
57414: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57415: LD_INT 0
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
57421: PPUSH
// if not hexes then
57422: LD_VAR 0 2
57426: NOT
57427: IFFALSE 57431
// exit ;
57429: GO 57579
// dist := 9999 ;
57431: LD_ADDR_VAR 0 5
57435: PUSH
57436: LD_INT 9999
57438: ST_TO_ADDR
// for i = 1 to hexes do
57439: LD_ADDR_VAR 0 4
57443: PUSH
57444: DOUBLE
57445: LD_INT 1
57447: DEC
57448: ST_TO_ADDR
57449: LD_VAR 0 2
57453: PUSH
57454: FOR_TO
57455: IFFALSE 57567
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57457: LD_VAR 0 1
57461: PPUSH
57462: LD_VAR 0 2
57466: PUSH
57467: LD_VAR 0 4
57471: ARRAY
57472: PUSH
57473: LD_INT 1
57475: ARRAY
57476: PPUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_VAR 0 4
57486: ARRAY
57487: PUSH
57488: LD_INT 2
57490: ARRAY
57491: PPUSH
57492: CALL_OW 297
57496: PUSH
57497: LD_VAR 0 5
57501: LESS
57502: IFFALSE 57565
// begin hex := hexes [ i ] ;
57504: LD_ADDR_VAR 0 7
57508: PUSH
57509: LD_VAR 0 2
57513: PUSH
57514: LD_VAR 0 4
57518: ARRAY
57519: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57520: LD_ADDR_VAR 0 5
57524: PUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: LD_VAR 0 2
57534: PUSH
57535: LD_VAR 0 4
57539: ARRAY
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: PPUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_VAR 0 4
57554: ARRAY
57555: PUSH
57556: LD_INT 2
57558: ARRAY
57559: PPUSH
57560: CALL_OW 297
57564: ST_TO_ADDR
// end ; end ;
57565: GO 57454
57567: POP
57568: POP
// result := hex ;
57569: LD_ADDR_VAR 0 3
57573: PUSH
57574: LD_VAR 0 7
57578: ST_TO_ADDR
// end ;
57579: LD_VAR 0 3
57583: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57584: LD_INT 0
57586: PPUSH
57587: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57588: LD_VAR 0 1
57592: NOT
57593: PUSH
57594: LD_VAR 0 1
57598: PUSH
57599: LD_INT 21
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 23
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PPUSH
57623: CALL_OW 69
57627: IN
57628: NOT
57629: OR
57630: IFFALSE 57634
// exit ;
57632: GO 57681
// for i = 1 to 3 do
57634: LD_ADDR_VAR 0 3
57638: PUSH
57639: DOUBLE
57640: LD_INT 1
57642: DEC
57643: ST_TO_ADDR
57644: LD_INT 3
57646: PUSH
57647: FOR_TO
57648: IFFALSE 57679
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 250
57659: PPUSH
57660: LD_VAR 0 1
57664: PPUSH
57665: CALL_OW 251
57669: PPUSH
57670: LD_INT 1
57672: PPUSH
57673: CALL_OW 453
57677: GO 57647
57679: POP
57680: POP
// end ;
57681: LD_VAR 0 2
57685: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57686: LD_INT 0
57688: PPUSH
57689: PPUSH
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57694: LD_VAR 0 1
57698: NOT
57699: PUSH
57700: LD_VAR 0 2
57704: NOT
57705: OR
57706: PUSH
57707: LD_VAR 0 1
57711: PPUSH
57712: CALL_OW 314
57716: OR
57717: IFFALSE 57721
// exit ;
57719: GO 58162
// x := GetX ( enemy_unit ) ;
57721: LD_ADDR_VAR 0 7
57725: PUSH
57726: LD_VAR 0 2
57730: PPUSH
57731: CALL_OW 250
57735: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57736: LD_ADDR_VAR 0 8
57740: PUSH
57741: LD_VAR 0 2
57745: PPUSH
57746: CALL_OW 251
57750: ST_TO_ADDR
// if not x or not y then
57751: LD_VAR 0 7
57755: NOT
57756: PUSH
57757: LD_VAR 0 8
57761: NOT
57762: OR
57763: IFFALSE 57767
// exit ;
57765: GO 58162
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57767: LD_ADDR_VAR 0 6
57771: PUSH
57772: LD_VAR 0 7
57776: PPUSH
57777: LD_INT 0
57779: PPUSH
57780: LD_INT 4
57782: PPUSH
57783: CALL_OW 272
57787: PUSH
57788: LD_VAR 0 8
57792: PPUSH
57793: LD_INT 0
57795: PPUSH
57796: LD_INT 4
57798: PPUSH
57799: CALL_OW 273
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_VAR 0 7
57812: PPUSH
57813: LD_INT 1
57815: PPUSH
57816: LD_INT 4
57818: PPUSH
57819: CALL_OW 272
57823: PUSH
57824: LD_VAR 0 8
57828: PPUSH
57829: LD_INT 1
57831: PPUSH
57832: LD_INT 4
57834: PPUSH
57835: CALL_OW 273
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_VAR 0 7
57848: PPUSH
57849: LD_INT 2
57851: PPUSH
57852: LD_INT 4
57854: PPUSH
57855: CALL_OW 272
57859: PUSH
57860: LD_VAR 0 8
57864: PPUSH
57865: LD_INT 2
57867: PPUSH
57868: LD_INT 4
57870: PPUSH
57871: CALL_OW 273
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_VAR 0 7
57884: PPUSH
57885: LD_INT 3
57887: PPUSH
57888: LD_INT 4
57890: PPUSH
57891: CALL_OW 272
57895: PUSH
57896: LD_VAR 0 8
57900: PPUSH
57901: LD_INT 3
57903: PPUSH
57904: LD_INT 4
57906: PPUSH
57907: CALL_OW 273
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_VAR 0 7
57920: PPUSH
57921: LD_INT 4
57923: PPUSH
57924: LD_INT 4
57926: PPUSH
57927: CALL_OW 272
57931: PUSH
57932: LD_VAR 0 8
57936: PPUSH
57937: LD_INT 4
57939: PPUSH
57940: LD_INT 4
57942: PPUSH
57943: CALL_OW 273
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_VAR 0 7
57956: PPUSH
57957: LD_INT 5
57959: PPUSH
57960: LD_INT 4
57962: PPUSH
57963: CALL_OW 272
57967: PUSH
57968: LD_VAR 0 8
57972: PPUSH
57973: LD_INT 5
57975: PPUSH
57976: LD_INT 4
57978: PPUSH
57979: CALL_OW 273
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// for i = tmp downto 1 do
57996: LD_ADDR_VAR 0 4
58000: PUSH
58001: DOUBLE
58002: LD_VAR 0 6
58006: INC
58007: ST_TO_ADDR
58008: LD_INT 1
58010: PUSH
58011: FOR_DOWNTO
58012: IFFALSE 58113
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58014: LD_VAR 0 6
58018: PUSH
58019: LD_VAR 0 4
58023: ARRAY
58024: PUSH
58025: LD_INT 1
58027: ARRAY
58028: PPUSH
58029: LD_VAR 0 6
58033: PUSH
58034: LD_VAR 0 4
58038: ARRAY
58039: PUSH
58040: LD_INT 2
58042: ARRAY
58043: PPUSH
58044: CALL_OW 488
58048: NOT
58049: PUSH
58050: LD_VAR 0 6
58054: PUSH
58055: LD_VAR 0 4
58059: ARRAY
58060: PUSH
58061: LD_INT 1
58063: ARRAY
58064: PPUSH
58065: LD_VAR 0 6
58069: PUSH
58070: LD_VAR 0 4
58074: ARRAY
58075: PUSH
58076: LD_INT 2
58078: ARRAY
58079: PPUSH
58080: CALL_OW 428
58084: PUSH
58085: LD_INT 0
58087: NONEQUAL
58088: OR
58089: IFFALSE 58111
// tmp := Delete ( tmp , i ) ;
58091: LD_ADDR_VAR 0 6
58095: PUSH
58096: LD_VAR 0 6
58100: PPUSH
58101: LD_VAR 0 4
58105: PPUSH
58106: CALL_OW 3
58110: ST_TO_ADDR
58111: GO 58011
58113: POP
58114: POP
// j := GetClosestHex ( unit , tmp ) ;
58115: LD_ADDR_VAR 0 5
58119: PUSH
58120: LD_VAR 0 1
58124: PPUSH
58125: LD_VAR 0 6
58129: PPUSH
58130: CALL 57415 0 2
58134: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58135: LD_VAR 0 1
58139: PPUSH
58140: LD_VAR 0 5
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: PPUSH
58149: LD_VAR 0 5
58153: PUSH
58154: LD_INT 2
58156: ARRAY
58157: PPUSH
58158: CALL_OW 111
// end ;
58162: LD_VAR 0 3
58166: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58167: LD_INT 0
58169: PPUSH
58170: PPUSH
58171: PPUSH
// uc_side = 0 ;
58172: LD_ADDR_OWVAR 20
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
// uc_nation = 0 ;
58180: LD_ADDR_OWVAR 21
58184: PUSH
58185: LD_INT 0
58187: ST_TO_ADDR
// InitHc ;
58188: CALL_OW 19
// InitVc ;
58192: CALL_OW 20
// if mastodonts then
58196: LD_VAR 0 6
58200: IFFALSE 58267
// for i = 1 to mastodonts do
58202: LD_ADDR_VAR 0 11
58206: PUSH
58207: DOUBLE
58208: LD_INT 1
58210: DEC
58211: ST_TO_ADDR
58212: LD_VAR 0 6
58216: PUSH
58217: FOR_TO
58218: IFFALSE 58265
// begin vc_chassis := 31 ;
58220: LD_ADDR_OWVAR 37
58224: PUSH
58225: LD_INT 31
58227: ST_TO_ADDR
// vc_control := control_rider ;
58228: LD_ADDR_OWVAR 38
58232: PUSH
58233: LD_INT 4
58235: ST_TO_ADDR
// animal := CreateVehicle ;
58236: LD_ADDR_VAR 0 12
58240: PUSH
58241: CALL_OW 45
58245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58246: LD_VAR 0 12
58250: PPUSH
58251: LD_VAR 0 8
58255: PPUSH
58256: LD_INT 0
58258: PPUSH
58259: CALL 60336 0 3
// end ;
58263: GO 58217
58265: POP
58266: POP
// if horses then
58267: LD_VAR 0 5
58271: IFFALSE 58338
// for i = 1 to horses do
58273: LD_ADDR_VAR 0 11
58277: PUSH
58278: DOUBLE
58279: LD_INT 1
58281: DEC
58282: ST_TO_ADDR
58283: LD_VAR 0 5
58287: PUSH
58288: FOR_TO
58289: IFFALSE 58336
// begin hc_class := 21 ;
58291: LD_ADDR_OWVAR 28
58295: PUSH
58296: LD_INT 21
58298: ST_TO_ADDR
// hc_gallery :=  ;
58299: LD_ADDR_OWVAR 33
58303: PUSH
58304: LD_STRING 
58306: ST_TO_ADDR
// animal := CreateHuman ;
58307: LD_ADDR_VAR 0 12
58311: PUSH
58312: CALL_OW 44
58316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58317: LD_VAR 0 12
58321: PPUSH
58322: LD_VAR 0 8
58326: PPUSH
58327: LD_INT 0
58329: PPUSH
58330: CALL 60336 0 3
// end ;
58334: GO 58288
58336: POP
58337: POP
// if birds then
58338: LD_VAR 0 1
58342: IFFALSE 58409
// for i = 1 to birds do
58344: LD_ADDR_VAR 0 11
58348: PUSH
58349: DOUBLE
58350: LD_INT 1
58352: DEC
58353: ST_TO_ADDR
58354: LD_VAR 0 1
58358: PUSH
58359: FOR_TO
58360: IFFALSE 58407
// begin hc_class = 18 ;
58362: LD_ADDR_OWVAR 28
58366: PUSH
58367: LD_INT 18
58369: ST_TO_ADDR
// hc_gallery =  ;
58370: LD_ADDR_OWVAR 33
58374: PUSH
58375: LD_STRING 
58377: ST_TO_ADDR
// animal := CreateHuman ;
58378: LD_ADDR_VAR 0 12
58382: PUSH
58383: CALL_OW 44
58387: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58388: LD_VAR 0 12
58392: PPUSH
58393: LD_VAR 0 8
58397: PPUSH
58398: LD_INT 0
58400: PPUSH
58401: CALL 60336 0 3
// end ;
58405: GO 58359
58407: POP
58408: POP
// if tigers then
58409: LD_VAR 0 2
58413: IFFALSE 58497
// for i = 1 to tigers do
58415: LD_ADDR_VAR 0 11
58419: PUSH
58420: DOUBLE
58421: LD_INT 1
58423: DEC
58424: ST_TO_ADDR
58425: LD_VAR 0 2
58429: PUSH
58430: FOR_TO
58431: IFFALSE 58495
// begin hc_class = class_tiger ;
58433: LD_ADDR_OWVAR 28
58437: PUSH
58438: LD_INT 14
58440: ST_TO_ADDR
// hc_gallery =  ;
58441: LD_ADDR_OWVAR 33
58445: PUSH
58446: LD_STRING 
58448: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58449: LD_ADDR_OWVAR 35
58453: PUSH
58454: LD_INT 7
58456: NEG
58457: PPUSH
58458: LD_INT 7
58460: PPUSH
58461: CALL_OW 12
58465: ST_TO_ADDR
// animal := CreateHuman ;
58466: LD_ADDR_VAR 0 12
58470: PUSH
58471: CALL_OW 44
58475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58476: LD_VAR 0 12
58480: PPUSH
58481: LD_VAR 0 8
58485: PPUSH
58486: LD_INT 0
58488: PPUSH
58489: CALL 60336 0 3
// end ;
58493: GO 58430
58495: POP
58496: POP
// if apemans then
58497: LD_VAR 0 3
58501: IFFALSE 58624
// for i = 1 to apemans do
58503: LD_ADDR_VAR 0 11
58507: PUSH
58508: DOUBLE
58509: LD_INT 1
58511: DEC
58512: ST_TO_ADDR
58513: LD_VAR 0 3
58517: PUSH
58518: FOR_TO
58519: IFFALSE 58622
// begin hc_class = class_apeman ;
58521: LD_ADDR_OWVAR 28
58525: PUSH
58526: LD_INT 12
58528: ST_TO_ADDR
// hc_gallery =  ;
58529: LD_ADDR_OWVAR 33
58533: PUSH
58534: LD_STRING 
58536: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58537: LD_ADDR_OWVAR 35
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PPUSH
58546: LD_INT 5
58548: PPUSH
58549: CALL_OW 12
58553: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58554: LD_ADDR_OWVAR 31
58558: PUSH
58559: LD_INT 1
58561: PPUSH
58562: LD_INT 3
58564: PPUSH
58565: CALL_OW 12
58569: PUSH
58570: LD_INT 1
58572: PPUSH
58573: LD_INT 3
58575: PPUSH
58576: CALL_OW 12
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// animal := CreateHuman ;
58593: LD_ADDR_VAR 0 12
58597: PUSH
58598: CALL_OW 44
58602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58603: LD_VAR 0 12
58607: PPUSH
58608: LD_VAR 0 8
58612: PPUSH
58613: LD_INT 0
58615: PPUSH
58616: CALL 60336 0 3
// end ;
58620: GO 58518
58622: POP
58623: POP
// if enchidnas then
58624: LD_VAR 0 4
58628: IFFALSE 58695
// for i = 1 to enchidnas do
58630: LD_ADDR_VAR 0 11
58634: PUSH
58635: DOUBLE
58636: LD_INT 1
58638: DEC
58639: ST_TO_ADDR
58640: LD_VAR 0 4
58644: PUSH
58645: FOR_TO
58646: IFFALSE 58693
// begin hc_class = 13 ;
58648: LD_ADDR_OWVAR 28
58652: PUSH
58653: LD_INT 13
58655: ST_TO_ADDR
// hc_gallery =  ;
58656: LD_ADDR_OWVAR 33
58660: PUSH
58661: LD_STRING 
58663: ST_TO_ADDR
// animal := CreateHuman ;
58664: LD_ADDR_VAR 0 12
58668: PUSH
58669: CALL_OW 44
58673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58674: LD_VAR 0 12
58678: PPUSH
58679: LD_VAR 0 8
58683: PPUSH
58684: LD_INT 0
58686: PPUSH
58687: CALL 60336 0 3
// end ;
58691: GO 58645
58693: POP
58694: POP
// if fishes then
58695: LD_VAR 0 7
58699: IFFALSE 58766
// for i = 1 to fishes do
58701: LD_ADDR_VAR 0 11
58705: PUSH
58706: DOUBLE
58707: LD_INT 1
58709: DEC
58710: ST_TO_ADDR
58711: LD_VAR 0 7
58715: PUSH
58716: FOR_TO
58717: IFFALSE 58764
// begin hc_class = 20 ;
58719: LD_ADDR_OWVAR 28
58723: PUSH
58724: LD_INT 20
58726: ST_TO_ADDR
// hc_gallery =  ;
58727: LD_ADDR_OWVAR 33
58731: PUSH
58732: LD_STRING 
58734: ST_TO_ADDR
// animal := CreateHuman ;
58735: LD_ADDR_VAR 0 12
58739: PUSH
58740: CALL_OW 44
58744: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58745: LD_VAR 0 12
58749: PPUSH
58750: LD_VAR 0 9
58754: PPUSH
58755: LD_INT 0
58757: PPUSH
58758: CALL 60336 0 3
// end ;
58762: GO 58716
58764: POP
58765: POP
// end ;
58766: LD_VAR 0 10
58770: RET
// export function WantHeal ( sci , unit ) ; begin
58771: LD_INT 0
58773: PPUSH
// if GetTaskList ( sci ) > 0 then
58774: LD_VAR 0 1
58778: PPUSH
58779: CALL_OW 437
58783: PUSH
58784: LD_INT 0
58786: GREATER
58787: IFFALSE 58857
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58789: LD_VAR 0 1
58793: PPUSH
58794: CALL_OW 437
58798: PUSH
58799: LD_INT 1
58801: ARRAY
58802: PUSH
58803: LD_INT 1
58805: ARRAY
58806: PUSH
58807: LD_STRING l
58809: EQUAL
58810: PUSH
58811: LD_VAR 0 1
58815: PPUSH
58816: CALL_OW 437
58820: PUSH
58821: LD_INT 1
58823: ARRAY
58824: PUSH
58825: LD_INT 4
58827: ARRAY
58828: PUSH
58829: LD_VAR 0 2
58833: EQUAL
58834: AND
58835: IFFALSE 58847
// result := true else
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: LD_INT 1
58844: ST_TO_ADDR
58845: GO 58855
// result := false ;
58847: LD_ADDR_VAR 0 3
58851: PUSH
58852: LD_INT 0
58854: ST_TO_ADDR
// end else
58855: GO 58865
// result := false ;
58857: LD_ADDR_VAR 0 3
58861: PUSH
58862: LD_INT 0
58864: ST_TO_ADDR
// end ;
58865: LD_VAR 0 3
58869: RET
// export function HealTarget ( sci ) ; begin
58870: LD_INT 0
58872: PPUSH
// if not sci then
58873: LD_VAR 0 1
58877: NOT
58878: IFFALSE 58882
// exit ;
58880: GO 58947
// result := 0 ;
58882: LD_ADDR_VAR 0 2
58886: PUSH
58887: LD_INT 0
58889: ST_TO_ADDR
// if GetTaskList ( sci ) then
58890: LD_VAR 0 1
58894: PPUSH
58895: CALL_OW 437
58899: IFFALSE 58947
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58901: LD_VAR 0 1
58905: PPUSH
58906: CALL_OW 437
58910: PUSH
58911: LD_INT 1
58913: ARRAY
58914: PUSH
58915: LD_INT 1
58917: ARRAY
58918: PUSH
58919: LD_STRING l
58921: EQUAL
58922: IFFALSE 58947
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58924: LD_ADDR_VAR 0 2
58928: PUSH
58929: LD_VAR 0 1
58933: PPUSH
58934: CALL_OW 437
58938: PUSH
58939: LD_INT 1
58941: ARRAY
58942: PUSH
58943: LD_INT 4
58945: ARRAY
58946: ST_TO_ADDR
// end ;
58947: LD_VAR 0 2
58951: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58952: LD_INT 0
58954: PPUSH
58955: PPUSH
58956: PPUSH
58957: PPUSH
// if not base_units then
58958: LD_VAR 0 1
58962: NOT
58963: IFFALSE 58967
// exit ;
58965: GO 59054
// result := false ;
58967: LD_ADDR_VAR 0 2
58971: PUSH
58972: LD_INT 0
58974: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58975: LD_ADDR_VAR 0 5
58979: PUSH
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_INT 21
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PPUSH
58995: CALL_OW 72
58999: ST_TO_ADDR
// if not tmp then
59000: LD_VAR 0 5
59004: NOT
59005: IFFALSE 59009
// exit ;
59007: GO 59054
// for i in tmp do
59009: LD_ADDR_VAR 0 3
59013: PUSH
59014: LD_VAR 0 5
59018: PUSH
59019: FOR_IN
59020: IFFALSE 59052
// begin result := EnemyInRange ( i , 22 ) ;
59022: LD_ADDR_VAR 0 2
59026: PUSH
59027: LD_VAR 0 3
59031: PPUSH
59032: LD_INT 22
59034: PPUSH
59035: CALL 57290 0 2
59039: ST_TO_ADDR
// if result then
59040: LD_VAR 0 2
59044: IFFALSE 59050
// exit ;
59046: POP
59047: POP
59048: GO 59054
// end ;
59050: GO 59019
59052: POP
59053: POP
// end ;
59054: LD_VAR 0 2
59058: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59059: LD_INT 0
59061: PPUSH
59062: PPUSH
// if not units then
59063: LD_VAR 0 1
59067: NOT
59068: IFFALSE 59072
// exit ;
59070: GO 59142
// result := [ ] ;
59072: LD_ADDR_VAR 0 3
59076: PUSH
59077: EMPTY
59078: ST_TO_ADDR
// for i in units do
59079: LD_ADDR_VAR 0 4
59083: PUSH
59084: LD_VAR 0 1
59088: PUSH
59089: FOR_IN
59090: IFFALSE 59140
// if GetTag ( i ) = tag then
59092: LD_VAR 0 4
59096: PPUSH
59097: CALL_OW 110
59101: PUSH
59102: LD_VAR 0 2
59106: EQUAL
59107: IFFALSE 59138
// result := Insert ( result , result + 1 , i ) ;
59109: LD_ADDR_VAR 0 3
59113: PUSH
59114: LD_VAR 0 3
59118: PPUSH
59119: LD_VAR 0 3
59123: PUSH
59124: LD_INT 1
59126: PLUS
59127: PPUSH
59128: LD_VAR 0 4
59132: PPUSH
59133: CALL_OW 2
59137: ST_TO_ADDR
59138: GO 59089
59140: POP
59141: POP
// end ;
59142: LD_VAR 0 3
59146: RET
// export function IsDriver ( un ) ; begin
59147: LD_INT 0
59149: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59150: LD_ADDR_VAR 0 2
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_INT 55
59162: PUSH
59163: EMPTY
59164: LIST
59165: PPUSH
59166: CALL_OW 69
59170: IN
59171: ST_TO_ADDR
// end ;
59172: LD_VAR 0 2
59176: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59177: LD_INT 0
59179: PPUSH
59180: PPUSH
// list := [ ] ;
59181: LD_ADDR_VAR 0 5
59185: PUSH
59186: EMPTY
59187: ST_TO_ADDR
// case d of 0 :
59188: LD_VAR 0 3
59192: PUSH
59193: LD_INT 0
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59201
59199: GO 59334
59201: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59202: LD_ADDR_VAR 0 5
59206: PUSH
59207: LD_VAR 0 1
59211: PUSH
59212: LD_INT 4
59214: MINUS
59215: PUSH
59216: LD_VAR 0 2
59220: PUSH
59221: LD_INT 4
59223: MINUS
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: LD_VAR 0 1
59237: PUSH
59238: LD_INT 3
59240: MINUS
59241: PUSH
59242: LD_VAR 0 2
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: PUSH
59255: LD_VAR 0 1
59259: PUSH
59260: LD_INT 4
59262: PLUS
59263: PUSH
59264: LD_VAR 0 2
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: PUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_INT 3
59284: PLUS
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 3
59293: PLUS
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: PUSH
59303: LD_VAR 0 1
59307: PUSH
59308: LD_VAR 0 2
59312: PUSH
59313: LD_INT 4
59315: PLUS
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: ST_TO_ADDR
// end ; 1 :
59332: GO 60032
59334: LD_INT 1
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59342
59340: GO 59475
59342: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59343: LD_ADDR_VAR 0 5
59347: PUSH
59348: LD_VAR 0 1
59352: PUSH
59353: LD_VAR 0 2
59357: PUSH
59358: LD_INT 4
59360: MINUS
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: PUSH
59370: LD_VAR 0 1
59374: PUSH
59375: LD_INT 3
59377: MINUS
59378: PUSH
59379: LD_VAR 0 2
59383: PUSH
59384: LD_INT 3
59386: MINUS
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: PUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 4
59403: MINUS
59404: PUSH
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: PUSH
59418: LD_VAR 0 1
59422: PUSH
59423: LD_VAR 0 2
59427: PUSH
59428: LD_INT 3
59430: PLUS
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: PUSH
59440: LD_VAR 0 1
59444: PUSH
59445: LD_INT 4
59447: PLUS
59448: PUSH
59449: LD_VAR 0 2
59453: PUSH
59454: LD_INT 4
59456: PLUS
59457: PUSH
59458: LD_INT 5
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// end ; 2 :
59473: GO 60032
59475: LD_INT 2
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59483
59481: GO 59612
59483: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59484: LD_ADDR_VAR 0 5
59488: PUSH
59489: LD_VAR 0 1
59493: PUSH
59494: LD_VAR 0 2
59498: PUSH
59499: LD_INT 3
59501: MINUS
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: PUSH
59511: LD_VAR 0 1
59515: PUSH
59516: LD_INT 4
59518: PLUS
59519: PUSH
59520: LD_VAR 0 2
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: PUSH
59533: LD_VAR 0 1
59537: PUSH
59538: LD_VAR 0 2
59542: PUSH
59543: LD_INT 4
59545: PLUS
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 3
59562: MINUS
59563: PUSH
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: PUSH
59577: LD_VAR 0 1
59581: PUSH
59582: LD_INT 4
59584: MINUS
59585: PUSH
59586: LD_VAR 0 2
59590: PUSH
59591: LD_INT 4
59593: MINUS
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// end ; 3 :
59610: GO 60032
59612: LD_INT 3
59614: DOUBLE
59615: EQUAL
59616: IFTRUE 59620
59618: GO 59753
59620: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59621: LD_ADDR_VAR 0 5
59625: PUSH
59626: LD_VAR 0 1
59630: PUSH
59631: LD_INT 3
59633: PLUS
59634: PUSH
59635: LD_VAR 0 2
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: PUSH
59648: LD_VAR 0 1
59652: PUSH
59653: LD_INT 4
59655: PLUS
59656: PUSH
59657: LD_VAR 0 2
59661: PUSH
59662: LD_INT 4
59664: PLUS
59665: PUSH
59666: LD_INT 5
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 1
59678: PUSH
59679: LD_INT 4
59681: MINUS
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: LD_VAR 0 1
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: MINUS
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: LD_VAR 0 1
59722: PUSH
59723: LD_INT 3
59725: MINUS
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 3
59734: MINUS
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// end ; 4 :
59751: GO 60032
59753: LD_INT 4
59755: DOUBLE
59756: EQUAL
59757: IFTRUE 59761
59759: GO 59894
59761: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59762: LD_ADDR_VAR 0 5
59766: PUSH
59767: LD_VAR 0 1
59771: PUSH
59772: LD_VAR 0 2
59776: PUSH
59777: LD_INT 4
59779: PLUS
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: LIST
59788: PUSH
59789: LD_VAR 0 1
59793: PUSH
59794: LD_INT 3
59796: PLUS
59797: PUSH
59798: LD_VAR 0 2
59802: PUSH
59803: LD_INT 3
59805: PLUS
59806: PUSH
59807: LD_INT 5
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PUSH
59815: LD_VAR 0 1
59819: PUSH
59820: LD_INT 4
59822: PLUS
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: LD_VAR 0 1
59841: PUSH
59842: LD_VAR 0 2
59846: PUSH
59847: LD_INT 3
59849: MINUS
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: PUSH
59859: LD_VAR 0 1
59863: PUSH
59864: LD_INT 4
59866: MINUS
59867: PUSH
59868: LD_VAR 0 2
59872: PUSH
59873: LD_INT 4
59875: MINUS
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// end ; 5 :
59892: GO 60032
59894: LD_INT 5
59896: DOUBLE
59897: EQUAL
59898: IFTRUE 59902
59900: GO 60031
59902: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59903: LD_ADDR_VAR 0 5
59907: PUSH
59908: LD_VAR 0 1
59912: PUSH
59913: LD_INT 4
59915: MINUS
59916: PUSH
59917: LD_VAR 0 2
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_VAR 0 2
59939: PUSH
59940: LD_INT 4
59942: MINUS
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: PUSH
59952: LD_VAR 0 1
59956: PUSH
59957: LD_INT 4
59959: PLUS
59960: PUSH
59961: LD_VAR 0 2
59965: PUSH
59966: LD_INT 4
59968: PLUS
59969: PUSH
59970: LD_INT 5
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: PUSH
59978: LD_VAR 0 1
59982: PUSH
59983: LD_INT 3
59985: PLUS
59986: PUSH
59987: LD_VAR 0 2
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: PUSH
60000: LD_VAR 0 1
60004: PUSH
60005: LD_VAR 0 2
60009: PUSH
60010: LD_INT 3
60012: PLUS
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// end ; end ;
60029: GO 60032
60031: POP
// result := list ;
60032: LD_ADDR_VAR 0 4
60036: PUSH
60037: LD_VAR 0 5
60041: ST_TO_ADDR
// end ;
60042: LD_VAR 0 4
60046: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60047: LD_INT 0
60049: PPUSH
60050: PPUSH
60051: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60052: LD_VAR 0 1
60056: NOT
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: IN
60081: NOT
60082: OR
60083: IFFALSE 60087
// exit ;
60085: GO 60179
// tmp := [ ] ;
60087: LD_ADDR_VAR 0 5
60091: PUSH
60092: EMPTY
60093: ST_TO_ADDR
// for i in units do
60094: LD_ADDR_VAR 0 4
60098: PUSH
60099: LD_VAR 0 1
60103: PUSH
60104: FOR_IN
60105: IFFALSE 60148
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60107: LD_ADDR_VAR 0 5
60111: PUSH
60112: LD_VAR 0 5
60116: PPUSH
60117: LD_VAR 0 5
60121: PUSH
60122: LD_INT 1
60124: PLUS
60125: PPUSH
60126: LD_VAR 0 4
60130: PPUSH
60131: LD_VAR 0 2
60135: PPUSH
60136: CALL_OW 259
60140: PPUSH
60141: CALL_OW 2
60145: ST_TO_ADDR
60146: GO 60104
60148: POP
60149: POP
// if not tmp then
60150: LD_VAR 0 5
60154: NOT
60155: IFFALSE 60159
// exit ;
60157: GO 60179
// result := SortListByListDesc ( units , tmp ) ;
60159: LD_ADDR_VAR 0 3
60163: PUSH
60164: LD_VAR 0 1
60168: PPUSH
60169: LD_VAR 0 5
60173: PPUSH
60174: CALL_OW 77
60178: ST_TO_ADDR
// end ;
60179: LD_VAR 0 3
60183: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60184: LD_INT 0
60186: PPUSH
60187: PPUSH
60188: PPUSH
// x := GetX ( building ) ;
60189: LD_ADDR_VAR 0 4
60193: PUSH
60194: LD_VAR 0 2
60198: PPUSH
60199: CALL_OW 250
60203: ST_TO_ADDR
// y := GetY ( building ) ;
60204: LD_ADDR_VAR 0 5
60208: PUSH
60209: LD_VAR 0 2
60213: PPUSH
60214: CALL_OW 251
60218: ST_TO_ADDR
// if GetTaskList ( unit ) then
60219: LD_VAR 0 1
60223: PPUSH
60224: CALL_OW 437
60228: IFFALSE 60323
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60230: LD_STRING e
60232: PUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 437
60242: PUSH
60243: LD_INT 1
60245: ARRAY
60246: PUSH
60247: LD_INT 1
60249: ARRAY
60250: EQUAL
60251: PUSH
60252: LD_VAR 0 4
60256: PUSH
60257: LD_VAR 0 1
60261: PPUSH
60262: CALL_OW 437
60266: PUSH
60267: LD_INT 1
60269: ARRAY
60270: PUSH
60271: LD_INT 2
60273: ARRAY
60274: EQUAL
60275: AND
60276: PUSH
60277: LD_VAR 0 5
60281: PUSH
60282: LD_VAR 0 1
60286: PPUSH
60287: CALL_OW 437
60291: PUSH
60292: LD_INT 1
60294: ARRAY
60295: PUSH
60296: LD_INT 3
60298: ARRAY
60299: EQUAL
60300: AND
60301: IFFALSE 60313
// result := true else
60303: LD_ADDR_VAR 0 3
60307: PUSH
60308: LD_INT 1
60310: ST_TO_ADDR
60311: GO 60321
// result := false ;
60313: LD_ADDR_VAR 0 3
60317: PUSH
60318: LD_INT 0
60320: ST_TO_ADDR
// end else
60321: GO 60331
// result := false ;
60323: LD_ADDR_VAR 0 3
60327: PUSH
60328: LD_INT 0
60330: ST_TO_ADDR
// end ;
60331: LD_VAR 0 3
60335: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60336: LD_INT 0
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
// if not unit or not area then
60342: LD_VAR 0 1
60346: NOT
60347: PUSH
60348: LD_VAR 0 2
60352: NOT
60353: OR
60354: IFFALSE 60358
// exit ;
60356: GO 60522
// tmp := AreaToList ( area , i ) ;
60358: LD_ADDR_VAR 0 6
60362: PUSH
60363: LD_VAR 0 2
60367: PPUSH
60368: LD_VAR 0 5
60372: PPUSH
60373: CALL_OW 517
60377: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60378: LD_ADDR_VAR 0 5
60382: PUSH
60383: DOUBLE
60384: LD_INT 1
60386: DEC
60387: ST_TO_ADDR
60388: LD_VAR 0 6
60392: PUSH
60393: LD_INT 1
60395: ARRAY
60396: PUSH
60397: FOR_TO
60398: IFFALSE 60520
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60400: LD_ADDR_VAR 0 7
60404: PUSH
60405: LD_VAR 0 6
60409: PUSH
60410: LD_INT 1
60412: ARRAY
60413: PUSH
60414: LD_VAR 0 5
60418: ARRAY
60419: PUSH
60420: LD_VAR 0 6
60424: PUSH
60425: LD_INT 2
60427: ARRAY
60428: PUSH
60429: LD_VAR 0 5
60433: ARRAY
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60439: LD_VAR 0 7
60443: PUSH
60444: LD_INT 1
60446: ARRAY
60447: PPUSH
60448: LD_VAR 0 7
60452: PUSH
60453: LD_INT 2
60455: ARRAY
60456: PPUSH
60457: CALL_OW 428
60461: PUSH
60462: LD_INT 0
60464: EQUAL
60465: IFFALSE 60518
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60467: LD_VAR 0 1
60471: PPUSH
60472: LD_VAR 0 7
60476: PUSH
60477: LD_INT 1
60479: ARRAY
60480: PPUSH
60481: LD_VAR 0 7
60485: PUSH
60486: LD_INT 2
60488: ARRAY
60489: PPUSH
60490: LD_VAR 0 3
60494: PPUSH
60495: CALL_OW 48
// result := IsPlaced ( unit ) ;
60499: LD_ADDR_VAR 0 4
60503: PUSH
60504: LD_VAR 0 1
60508: PPUSH
60509: CALL_OW 305
60513: ST_TO_ADDR
// exit ;
60514: POP
60515: POP
60516: GO 60522
// end ; end ;
60518: GO 60397
60520: POP
60521: POP
// end ;
60522: LD_VAR 0 4
60526: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60527: LD_INT 0
60529: PPUSH
60530: PPUSH
60531: PPUSH
// if not side or side > 8 then
60532: LD_VAR 0 1
60536: NOT
60537: PUSH
60538: LD_VAR 0 1
60542: PUSH
60543: LD_INT 8
60545: GREATER
60546: OR
60547: IFFALSE 60551
// exit ;
60549: GO 60738
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60551: LD_ADDR_VAR 0 4
60555: PUSH
60556: LD_INT 22
60558: PUSH
60559: LD_VAR 0 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 21
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PPUSH
60582: CALL_OW 69
60586: ST_TO_ADDR
// if not tmp then
60587: LD_VAR 0 4
60591: NOT
60592: IFFALSE 60596
// exit ;
60594: GO 60738
// enable_addtolog := true ;
60596: LD_ADDR_OWVAR 81
60600: PUSH
60601: LD_INT 1
60603: ST_TO_ADDR
// AddToLog ( [ ) ;
60604: LD_STRING [
60606: PPUSH
60607: CALL_OW 561
// for i in tmp do
60611: LD_ADDR_VAR 0 3
60615: PUSH
60616: LD_VAR 0 4
60620: PUSH
60621: FOR_IN
60622: IFFALSE 60729
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60624: LD_STRING [
60626: PUSH
60627: LD_VAR 0 3
60631: PPUSH
60632: CALL_OW 266
60636: STR
60637: PUSH
60638: LD_STRING , 
60640: STR
60641: PUSH
60642: LD_VAR 0 3
60646: PPUSH
60647: CALL_OW 250
60651: STR
60652: PUSH
60653: LD_STRING , 
60655: STR
60656: PUSH
60657: LD_VAR 0 3
60661: PPUSH
60662: CALL_OW 251
60666: STR
60667: PUSH
60668: LD_STRING , 
60670: STR
60671: PUSH
60672: LD_VAR 0 3
60676: PPUSH
60677: CALL_OW 254
60681: STR
60682: PUSH
60683: LD_STRING , 
60685: STR
60686: PUSH
60687: LD_VAR 0 3
60691: PPUSH
60692: LD_INT 1
60694: PPUSH
60695: CALL_OW 268
60699: STR
60700: PUSH
60701: LD_STRING , 
60703: STR
60704: PUSH
60705: LD_VAR 0 3
60709: PPUSH
60710: LD_INT 2
60712: PPUSH
60713: CALL_OW 268
60717: STR
60718: PUSH
60719: LD_STRING ],
60721: STR
60722: PPUSH
60723: CALL_OW 561
// end ;
60727: GO 60621
60729: POP
60730: POP
// AddToLog ( ]; ) ;
60731: LD_STRING ];
60733: PPUSH
60734: CALL_OW 561
// end ;
60738: LD_VAR 0 2
60742: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60743: LD_INT 0
60745: PPUSH
60746: PPUSH
60747: PPUSH
60748: PPUSH
60749: PPUSH
// if not area or not rate or not max then
60750: LD_VAR 0 1
60754: NOT
60755: PUSH
60756: LD_VAR 0 2
60760: NOT
60761: OR
60762: PUSH
60763: LD_VAR 0 4
60767: NOT
60768: OR
60769: IFFALSE 60773
// exit ;
60771: GO 60965
// while 1 do
60773: LD_INT 1
60775: IFFALSE 60965
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60777: LD_ADDR_VAR 0 9
60781: PUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: LD_INT 1
60789: PPUSH
60790: CALL_OW 287
60794: PUSH
60795: LD_INT 10
60797: MUL
60798: ST_TO_ADDR
// r := rate / 10 ;
60799: LD_ADDR_VAR 0 7
60803: PUSH
60804: LD_VAR 0 2
60808: PUSH
60809: LD_INT 10
60811: DIVREAL
60812: ST_TO_ADDR
// time := 1 1$00 ;
60813: LD_ADDR_VAR 0 8
60817: PUSH
60818: LD_INT 2100
60820: ST_TO_ADDR
// if amount < min then
60821: LD_VAR 0 9
60825: PUSH
60826: LD_VAR 0 3
60830: LESS
60831: IFFALSE 60849
// r := r * 2 else
60833: LD_ADDR_VAR 0 7
60837: PUSH
60838: LD_VAR 0 7
60842: PUSH
60843: LD_INT 2
60845: MUL
60846: ST_TO_ADDR
60847: GO 60875
// if amount > max then
60849: LD_VAR 0 9
60853: PUSH
60854: LD_VAR 0 4
60858: GREATER
60859: IFFALSE 60875
// r := r / 2 ;
60861: LD_ADDR_VAR 0 7
60865: PUSH
60866: LD_VAR 0 7
60870: PUSH
60871: LD_INT 2
60873: DIVREAL
60874: ST_TO_ADDR
// time := time / r ;
60875: LD_ADDR_VAR 0 8
60879: PUSH
60880: LD_VAR 0 8
60884: PUSH
60885: LD_VAR 0 7
60889: DIVREAL
60890: ST_TO_ADDR
// if time < 0 then
60891: LD_VAR 0 8
60895: PUSH
60896: LD_INT 0
60898: LESS
60899: IFFALSE 60916
// time := time * - 1 ;
60901: LD_ADDR_VAR 0 8
60905: PUSH
60906: LD_VAR 0 8
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: MUL
60915: ST_TO_ADDR
// wait ( time ) ;
60916: LD_VAR 0 8
60920: PPUSH
60921: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60925: LD_INT 35
60927: PPUSH
60928: LD_INT 875
60930: PPUSH
60931: CALL_OW 12
60935: PPUSH
60936: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60940: LD_INT 1
60942: PPUSH
60943: LD_INT 5
60945: PPUSH
60946: CALL_OW 12
60950: PPUSH
60951: LD_VAR 0 1
60955: PPUSH
60956: LD_INT 1
60958: PPUSH
60959: CALL_OW 55
// end ;
60963: GO 60773
// end ;
60965: LD_VAR 0 5
60969: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60970: LD_INT 0
60972: PPUSH
60973: PPUSH
60974: PPUSH
60975: PPUSH
60976: PPUSH
60977: PPUSH
60978: PPUSH
60979: PPUSH
// if not turrets or not factories then
60980: LD_VAR 0 1
60984: NOT
60985: PUSH
60986: LD_VAR 0 2
60990: NOT
60991: OR
60992: IFFALSE 60996
// exit ;
60994: GO 61303
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60996: LD_ADDR_VAR 0 10
61000: PUSH
61001: LD_INT 5
61003: PUSH
61004: LD_INT 6
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: LD_INT 5
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 24
61038: PUSH
61039: LD_INT 25
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 23
61048: PUSH
61049: LD_INT 27
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 42
61062: PUSH
61063: LD_INT 43
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 44
61072: PUSH
61073: LD_INT 46
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 45
61082: PUSH
61083: LD_INT 47
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// result := [ ] ;
61100: LD_ADDR_VAR 0 3
61104: PUSH
61105: EMPTY
61106: ST_TO_ADDR
// for i in turrets do
61107: LD_ADDR_VAR 0 4
61111: PUSH
61112: LD_VAR 0 1
61116: PUSH
61117: FOR_IN
61118: IFFALSE 61301
// begin nat := GetNation ( i ) ;
61120: LD_ADDR_VAR 0 7
61124: PUSH
61125: LD_VAR 0 4
61129: PPUSH
61130: CALL_OW 248
61134: ST_TO_ADDR
// weapon := 0 ;
61135: LD_ADDR_VAR 0 8
61139: PUSH
61140: LD_INT 0
61142: ST_TO_ADDR
// if not nat then
61143: LD_VAR 0 7
61147: NOT
61148: IFFALSE 61152
// continue ;
61150: GO 61117
// for j in list [ nat ] do
61152: LD_ADDR_VAR 0 5
61156: PUSH
61157: LD_VAR 0 10
61161: PUSH
61162: LD_VAR 0 7
61166: ARRAY
61167: PUSH
61168: FOR_IN
61169: IFFALSE 61210
// if GetBWeapon ( i ) = j [ 1 ] then
61171: LD_VAR 0 4
61175: PPUSH
61176: CALL_OW 269
61180: PUSH
61181: LD_VAR 0 5
61185: PUSH
61186: LD_INT 1
61188: ARRAY
61189: EQUAL
61190: IFFALSE 61208
// begin weapon := j [ 2 ] ;
61192: LD_ADDR_VAR 0 8
61196: PUSH
61197: LD_VAR 0 5
61201: PUSH
61202: LD_INT 2
61204: ARRAY
61205: ST_TO_ADDR
// break ;
61206: GO 61210
// end ;
61208: GO 61168
61210: POP
61211: POP
// if not weapon then
61212: LD_VAR 0 8
61216: NOT
61217: IFFALSE 61221
// continue ;
61219: GO 61117
// for k in factories do
61221: LD_ADDR_VAR 0 6
61225: PUSH
61226: LD_VAR 0 2
61230: PUSH
61231: FOR_IN
61232: IFFALSE 61297
// begin weapons := AvailableWeaponList ( k ) ;
61234: LD_ADDR_VAR 0 9
61238: PUSH
61239: LD_VAR 0 6
61243: PPUSH
61244: CALL_OW 478
61248: ST_TO_ADDR
// if not weapons then
61249: LD_VAR 0 9
61253: NOT
61254: IFFALSE 61258
// continue ;
61256: GO 61231
// if weapon in weapons then
61258: LD_VAR 0 8
61262: PUSH
61263: LD_VAR 0 9
61267: IN
61268: IFFALSE 61295
// begin result := [ i , weapon ] ;
61270: LD_ADDR_VAR 0 3
61274: PUSH
61275: LD_VAR 0 4
61279: PUSH
61280: LD_VAR 0 8
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// exit ;
61289: POP
61290: POP
61291: POP
61292: POP
61293: GO 61303
// end ; end ;
61295: GO 61231
61297: POP
61298: POP
// end ;
61299: GO 61117
61301: POP
61302: POP
// end ;
61303: LD_VAR 0 3
61307: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61308: LD_INT 0
61310: PPUSH
// if not side or side > 8 then
61311: LD_VAR 0 3
61315: NOT
61316: PUSH
61317: LD_VAR 0 3
61321: PUSH
61322: LD_INT 8
61324: GREATER
61325: OR
61326: IFFALSE 61330
// exit ;
61328: GO 61389
// if not range then
61330: LD_VAR 0 4
61334: NOT
61335: IFFALSE 61346
// range := - 12 ;
61337: LD_ADDR_VAR 0 4
61341: PUSH
61342: LD_INT 12
61344: NEG
61345: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61346: LD_VAR 0 1
61350: PPUSH
61351: LD_VAR 0 2
61355: PPUSH
61356: LD_VAR 0 3
61360: PPUSH
61361: LD_VAR 0 4
61365: PPUSH
61366: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61370: LD_VAR 0 1
61374: PPUSH
61375: LD_VAR 0 2
61379: PPUSH
61380: LD_VAR 0 3
61384: PPUSH
61385: CALL_OW 331
// end ;
61389: LD_VAR 0 5
61393: RET
// export function Video ( mode ) ; begin
61394: LD_INT 0
61396: PPUSH
// ingame_video = mode ;
61397: LD_ADDR_OWVAR 52
61401: PUSH
61402: LD_VAR 0 1
61406: ST_TO_ADDR
// interface_hidden = mode ;
61407: LD_ADDR_OWVAR 54
61411: PUSH
61412: LD_VAR 0 1
61416: ST_TO_ADDR
// end ;
61417: LD_VAR 0 2
61421: RET
// export function Join ( array , element ) ; begin
61422: LD_INT 0
61424: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61425: LD_ADDR_VAR 0 3
61429: PUSH
61430: LD_VAR 0 1
61434: PPUSH
61435: LD_VAR 0 1
61439: PUSH
61440: LD_INT 1
61442: PLUS
61443: PPUSH
61444: LD_VAR 0 2
61448: PPUSH
61449: CALL_OW 1
61453: ST_TO_ADDR
// end ;
61454: LD_VAR 0 3
61458: RET
// export function JoinUnion ( array , element ) ; begin
61459: LD_INT 0
61461: PPUSH
// result := array union element ;
61462: LD_ADDR_VAR 0 3
61466: PUSH
61467: LD_VAR 0 1
61471: PUSH
61472: LD_VAR 0 2
61476: UNION
61477: ST_TO_ADDR
// end ;
61478: LD_VAR 0 3
61482: RET
// export function GetBehemoths ( side ) ; begin
61483: LD_INT 0
61485: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61486: LD_ADDR_VAR 0 2
61490: PUSH
61491: LD_INT 22
61493: PUSH
61494: LD_VAR 0 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 31
61505: PUSH
61506: LD_INT 25
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PPUSH
61517: CALL_OW 69
61521: ST_TO_ADDR
// end ;
61522: LD_VAR 0 2
61526: RET
// export function Shuffle ( array ) ; var i , index ; begin
61527: LD_INT 0
61529: PPUSH
61530: PPUSH
61531: PPUSH
// result := [ ] ;
61532: LD_ADDR_VAR 0 2
61536: PUSH
61537: EMPTY
61538: ST_TO_ADDR
// if not array then
61539: LD_VAR 0 1
61543: NOT
61544: IFFALSE 61548
// exit ;
61546: GO 61647
// Randomize ;
61548: CALL_OW 10
// for i = array downto 1 do
61552: LD_ADDR_VAR 0 3
61556: PUSH
61557: DOUBLE
61558: LD_VAR 0 1
61562: INC
61563: ST_TO_ADDR
61564: LD_INT 1
61566: PUSH
61567: FOR_DOWNTO
61568: IFFALSE 61645
// begin index := rand ( 1 , array ) ;
61570: LD_ADDR_VAR 0 4
61574: PUSH
61575: LD_INT 1
61577: PPUSH
61578: LD_VAR 0 1
61582: PPUSH
61583: CALL_OW 12
61587: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61588: LD_ADDR_VAR 0 2
61592: PUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: LD_VAR 0 2
61602: PUSH
61603: LD_INT 1
61605: PLUS
61606: PPUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_VAR 0 4
61616: ARRAY
61617: PPUSH
61618: CALL_OW 2
61622: ST_TO_ADDR
// array := Delete ( array , index ) ;
61623: LD_ADDR_VAR 0 1
61627: PUSH
61628: LD_VAR 0 1
61632: PPUSH
61633: LD_VAR 0 4
61637: PPUSH
61638: CALL_OW 3
61642: ST_TO_ADDR
// end ;
61643: GO 61567
61645: POP
61646: POP
// end ;
61647: LD_VAR 0 2
61651: RET
// export function GetBaseMaterials ( base ) ; begin
61652: LD_INT 0
61654: PPUSH
// result := [ 0 , 0 , 0 ] ;
61655: LD_ADDR_VAR 0 2
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// if not base then
61674: LD_VAR 0 1
61678: NOT
61679: IFFALSE 61683
// exit ;
61681: GO 61732
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61683: LD_ADDR_VAR 0 2
61687: PUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: LD_INT 1
61695: PPUSH
61696: CALL_OW 275
61700: PUSH
61701: LD_VAR 0 1
61705: PPUSH
61706: LD_INT 2
61708: PPUSH
61709: CALL_OW 275
61713: PUSH
61714: LD_VAR 0 1
61718: PPUSH
61719: LD_INT 3
61721: PPUSH
61722: CALL_OW 275
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// end ;
61732: LD_VAR 0 2
61736: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61737: LD_INT 0
61739: PPUSH
61740: PPUSH
// result := array ;
61741: LD_ADDR_VAR 0 3
61745: PUSH
61746: LD_VAR 0 1
61750: ST_TO_ADDR
// if size > 0 then
61751: LD_VAR 0 2
61755: PUSH
61756: LD_INT 0
61758: GREATER
61759: IFFALSE 61805
// for i := array downto size do
61761: LD_ADDR_VAR 0 4
61765: PUSH
61766: DOUBLE
61767: LD_VAR 0 1
61771: INC
61772: ST_TO_ADDR
61773: LD_VAR 0 2
61777: PUSH
61778: FOR_DOWNTO
61779: IFFALSE 61803
// result := Delete ( result , result ) ;
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: LD_VAR 0 3
61790: PPUSH
61791: LD_VAR 0 3
61795: PPUSH
61796: CALL_OW 3
61800: ST_TO_ADDR
61801: GO 61778
61803: POP
61804: POP
// end ;
61805: LD_VAR 0 3
61809: RET
// export function ComExit ( unit ) ; var tmp ; begin
61810: LD_INT 0
61812: PPUSH
61813: PPUSH
// if not IsInUnit ( unit ) then
61814: LD_VAR 0 1
61818: PPUSH
61819: CALL_OW 310
61823: NOT
61824: IFFALSE 61828
// exit ;
61826: GO 61888
// tmp := IsInUnit ( unit ) ;
61828: LD_ADDR_VAR 0 3
61832: PUSH
61833: LD_VAR 0 1
61837: PPUSH
61838: CALL_OW 310
61842: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61843: LD_VAR 0 3
61847: PPUSH
61848: CALL_OW 247
61852: PUSH
61853: LD_INT 2
61855: EQUAL
61856: IFFALSE 61869
// ComExitVehicle ( unit ) else
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL_OW 121
61867: GO 61878
// ComExitBuilding ( unit ) ;
61869: LD_VAR 0 1
61873: PPUSH
61874: CALL_OW 122
// result := tmp ;
61878: LD_ADDR_VAR 0 2
61882: PUSH
61883: LD_VAR 0 3
61887: ST_TO_ADDR
// end ;
61888: LD_VAR 0 2
61892: RET
// export function ResetHc ; begin
61893: LD_INT 0
61895: PPUSH
// InitHc ;
61896: CALL_OW 19
// hc_importance := 0 ;
61900: LD_ADDR_OWVAR 32
61904: PUSH
61905: LD_INT 0
61907: ST_TO_ADDR
// end ;
61908: LD_VAR 0 1
61912: RET
