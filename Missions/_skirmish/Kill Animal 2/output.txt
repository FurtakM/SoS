// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// export globalGameSaveCounter ; every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// every 0 0$1 do
1977: GO 1979
1979: DISABLE
// begin globalGameSaveCounter := 0 ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_INT 0
1987: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1988: LD_STRING setGameSaveCounter(0)
1990: PPUSH
1991: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1995: LD_STRING initStreamRollete();
1997: PPUSH
1998: CALL_OW 559
// InitStreamMode ;
2002: CALL 3328 0 0
// DefineStreamItems ( false ) ;
2006: LD_INT 0
2008: PPUSH
2009: CALL 3792 0 1
// end ;
2013: END
// export function SOS_MapStart ( ) ; begin
2014: LD_INT 0
2016: PPUSH
// if streamModeActive then
2017: LD_EXP 8
2021: IFFALSE 2030
// DefineStreamItems ( true ) ;
2023: LD_INT 1
2025: PPUSH
2026: CALL 3792 0 1
// UpdateLuaVariables ( ) ;
2030: CALL 2047 0 0
// UpdateFactoryWaypoints ( ) ;
2034: CALL 16661 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2038: CALL 16918 0 0
// end ;
2042: LD_VAR 0 1
2046: RET
// function UpdateLuaVariables ( ) ; begin
2047: LD_INT 0
2049: PPUSH
// if globalGameSaveCounter then
2050: LD_EXP 7
2054: IFFALSE 2088
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2056: LD_ADDR_EXP 7
2060: PUSH
2061: LD_EXP 7
2065: PPUSH
2066: CALL 61711 0 1
2070: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2071: LD_STRING setGameSaveCounter(
2073: PUSH
2074: LD_EXP 7
2078: STR
2079: PUSH
2080: LD_STRING )
2082: STR
2083: PPUSH
2084: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2088: LD_STRING setGameDifficulty(
2090: PUSH
2091: LD_OWVAR 67
2095: STR
2096: PUSH
2097: LD_STRING )
2099: STR
2100: PPUSH
2101: CALL_OW 559
// end ;
2105: LD_VAR 0 1
2109: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2110: LD_INT 0
2112: PPUSH
// if p2 = stream_mode then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_INT 100
2120: EQUAL
2121: IFFALSE 3124
// begin if not StreamModeActive then
2123: LD_EXP 8
2127: NOT
2128: IFFALSE 2138
// StreamModeActive := true ;
2130: LD_ADDR_EXP 8
2134: PUSH
2135: LD_INT 1
2137: ST_TO_ADDR
// if p3 = 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: EQUAL
2146: IFFALSE 2152
// InitStreamMode ;
2148: CALL 3328 0 0
// if p3 = 1 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 1
2159: EQUAL
2160: IFFALSE 2170
// sRocket := true ;
2162: LD_ADDR_EXP 13
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 2 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 2
2177: EQUAL
2178: IFFALSE 2188
// sSpeed := true ;
2180: LD_ADDR_EXP 12
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 3 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 3
2195: EQUAL
2196: IFFALSE 2206
// sEngine := true ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 4 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 4
2213: EQUAL
2214: IFFALSE 2224
// sSpec := true ;
2216: LD_ADDR_EXP 11
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 5 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 5
2231: EQUAL
2232: IFFALSE 2242
// sLevel := true ;
2234: LD_ADDR_EXP 15
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 6 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 6
2249: EQUAL
2250: IFFALSE 2260
// sArmoury := true ;
2252: LD_ADDR_EXP 16
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 7 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: IFFALSE 2278
// sRadar := true ;
2270: LD_ADDR_EXP 17
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 8 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 8
2285: EQUAL
2286: IFFALSE 2296
// sBunker := true ;
2288: LD_ADDR_EXP 18
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 9 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 9
2303: EQUAL
2304: IFFALSE 2314
// sHack := true ;
2306: LD_ADDR_EXP 19
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 10 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: EQUAL
2322: IFFALSE 2332
// sFire := true ;
2324: LD_ADDR_EXP 20
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 11 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 11
2339: EQUAL
2340: IFFALSE 2350
// sRefresh := true ;
2342: LD_ADDR_EXP 21
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 12 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 12
2357: EQUAL
2358: IFFALSE 2368
// sExp := true ;
2360: LD_ADDR_EXP 22
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 13 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 13
2375: EQUAL
2376: IFFALSE 2386
// sDepot := true ;
2378: LD_ADDR_EXP 23
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 14 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 14
2393: EQUAL
2394: IFFALSE 2404
// sFlag := true ;
2396: LD_ADDR_EXP 24
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 15 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 15
2411: EQUAL
2412: IFFALSE 2422
// sKamikadze := true ;
2414: LD_ADDR_EXP 32
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 16 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 16
2429: EQUAL
2430: IFFALSE 2440
// sTroll := true ;
2432: LD_ADDR_EXP 33
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 17 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 17
2447: EQUAL
2448: IFFALSE 2458
// sSlow := true ;
2450: LD_ADDR_EXP 34
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// if p3 = 18 then
2458: LD_VAR 0 3
2462: PUSH
2463: LD_INT 18
2465: EQUAL
2466: IFFALSE 2476
// sLack := true ;
2468: LD_ADDR_EXP 35
2472: PUSH
2473: LD_INT 1
2475: ST_TO_ADDR
// if p3 = 19 then
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 19
2483: EQUAL
2484: IFFALSE 2494
// sTank := true ;
2486: LD_ADDR_EXP 37
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// if p3 = 20 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 20
2501: EQUAL
2502: IFFALSE 2512
// sRemote := true ;
2504: LD_ADDR_EXP 38
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// if p3 = 21 then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 21
2519: EQUAL
2520: IFFALSE 2530
// sPowell := true ;
2522: LD_ADDR_EXP 39
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// if p3 = 22 then
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 22
2537: EQUAL
2538: IFFALSE 2548
// sTeleport := true ;
2540: LD_ADDR_EXP 42
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// if p3 = 23 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 23
2555: EQUAL
2556: IFFALSE 2566
// sOilTower := true ;
2558: LD_ADDR_EXP 44
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// if p3 = 24 then
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 24
2573: EQUAL
2574: IFFALSE 2584
// sShovel := true ;
2576: LD_ADDR_EXP 45
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// if p3 = 25 then
2584: LD_VAR 0 3
2588: PUSH
2589: LD_INT 25
2591: EQUAL
2592: IFFALSE 2602
// sSheik := true ;
2594: LD_ADDR_EXP 46
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// if p3 = 26 then
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 26
2609: EQUAL
2610: IFFALSE 2620
// sEarthquake := true ;
2612: LD_ADDR_EXP 48
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if p3 = 27 then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 27
2627: EQUAL
2628: IFFALSE 2638
// sAI := true ;
2630: LD_ADDR_EXP 49
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// if p3 = 28 then
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 28
2645: EQUAL
2646: IFFALSE 2656
// sCargo := true ;
2648: LD_ADDR_EXP 52
2652: PUSH
2653: LD_INT 1
2655: ST_TO_ADDR
// if p3 = 29 then
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 29
2663: EQUAL
2664: IFFALSE 2674
// sDLaser := true ;
2666: LD_ADDR_EXP 53
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// if p3 = 30 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 30
2681: EQUAL
2682: IFFALSE 2692
// sExchange := true ;
2684: LD_ADDR_EXP 54
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// if p3 = 31 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 31
2699: EQUAL
2700: IFFALSE 2710
// sFac := true ;
2702: LD_ADDR_EXP 55
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// if p3 = 32 then
2710: LD_VAR 0 3
2714: PUSH
2715: LD_INT 32
2717: EQUAL
2718: IFFALSE 2728
// sPower := true ;
2720: LD_ADDR_EXP 56
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// if p3 = 33 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 33
2735: EQUAL
2736: IFFALSE 2746
// sRandom := true ;
2738: LD_ADDR_EXP 57
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if p3 = 34 then
2746: LD_VAR 0 3
2750: PUSH
2751: LD_INT 34
2753: EQUAL
2754: IFFALSE 2764
// sShield := true ;
2756: LD_ADDR_EXP 58
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// if p3 = 35 then
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 35
2771: EQUAL
2772: IFFALSE 2782
// sTime := true ;
2774: LD_ADDR_EXP 59
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// if p3 = 36 then
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 36
2789: EQUAL
2790: IFFALSE 2800
// sTools := true ;
2792: LD_ADDR_EXP 60
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// if p3 = 101 then
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 101
2807: EQUAL
2808: IFFALSE 2818
// sSold := true ;
2810: LD_ADDR_EXP 25
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// if p3 = 102 then
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 102
2825: EQUAL
2826: IFFALSE 2836
// sDiff := true ;
2828: LD_ADDR_EXP 26
2832: PUSH
2833: LD_INT 1
2835: ST_TO_ADDR
// if p3 = 103 then
2836: LD_VAR 0 3
2840: PUSH
2841: LD_INT 103
2843: EQUAL
2844: IFFALSE 2854
// sFog := true ;
2846: LD_ADDR_EXP 29
2850: PUSH
2851: LD_INT 1
2853: ST_TO_ADDR
// if p3 = 104 then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 104
2861: EQUAL
2862: IFFALSE 2872
// sReset := true ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// if p3 = 105 then
2872: LD_VAR 0 3
2876: PUSH
2877: LD_INT 105
2879: EQUAL
2880: IFFALSE 2890
// sSun := true ;
2882: LD_ADDR_EXP 31
2886: PUSH
2887: LD_INT 1
2889: ST_TO_ADDR
// if p3 = 106 then
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 106
2897: EQUAL
2898: IFFALSE 2908
// sTiger := true ;
2900: LD_ADDR_EXP 27
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// if p3 = 107 then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 107
2915: EQUAL
2916: IFFALSE 2926
// sBomb := true ;
2918: LD_ADDR_EXP 28
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// if p3 = 108 then
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 108
2933: EQUAL
2934: IFFALSE 2944
// sWound := true ;
2936: LD_ADDR_EXP 36
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// if p3 = 109 then
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 109
2951: EQUAL
2952: IFFALSE 2962
// sBetray := true ;
2954: LD_ADDR_EXP 40
2958: PUSH
2959: LD_INT 1
2961: ST_TO_ADDR
// if p3 = 110 then
2962: LD_VAR 0 3
2966: PUSH
2967: LD_INT 110
2969: EQUAL
2970: IFFALSE 2980
// sContamin := true ;
2972: LD_ADDR_EXP 41
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// if p3 = 111 then
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 111
2987: EQUAL
2988: IFFALSE 2998
// sOil := true ;
2990: LD_ADDR_EXP 43
2994: PUSH
2995: LD_INT 1
2997: ST_TO_ADDR
// if p3 = 112 then
2998: LD_VAR 0 3
3002: PUSH
3003: LD_INT 112
3005: EQUAL
3006: IFFALSE 3016
// sStu := true ;
3008: LD_ADDR_EXP 47
3012: PUSH
3013: LD_INT 1
3015: ST_TO_ADDR
// if p3 = 113 then
3016: LD_VAR 0 3
3020: PUSH
3021: LD_INT 113
3023: EQUAL
3024: IFFALSE 3034
// sBazooka := true ;
3026: LD_ADDR_EXP 50
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// if p3 = 114 then
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 114
3041: EQUAL
3042: IFFALSE 3052
// sMortar := true ;
3044: LD_ADDR_EXP 51
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// if p3 = 115 then
3052: LD_VAR 0 3
3056: PUSH
3057: LD_INT 115
3059: EQUAL
3060: IFFALSE 3070
// sRanger := true ;
3062: LD_ADDR_EXP 61
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// if p3 = 116 then
3070: LD_VAR 0 3
3074: PUSH
3075: LD_INT 116
3077: EQUAL
3078: IFFALSE 3088
// sComputer := true ;
3080: LD_ADDR_EXP 62
3084: PUSH
3085: LD_INT 1
3087: ST_TO_ADDR
// if p3 = 117 then
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 117
3095: EQUAL
3096: IFFALSE 3106
// s30 := true ;
3098: LD_ADDR_EXP 63
3102: PUSH
3103: LD_INT 1
3105: ST_TO_ADDR
// if p3 = 118 then
3106: LD_VAR 0 3
3110: PUSH
3111: LD_INT 118
3113: EQUAL
3114: IFFALSE 3124
// s60 := true ;
3116: LD_ADDR_EXP 64
3120: PUSH
3121: LD_INT 1
3123: ST_TO_ADDR
// end ; if p2 = hack_mode then
3124: LD_VAR 0 2
3128: PUSH
3129: LD_INT 101
3131: EQUAL
3132: IFFALSE 3260
// begin case p3 of 1 :
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 1
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3154
3147: POP
// hHackUnlimitedResources ; 2 :
3148: CALL 15407 0 0
3152: GO 3260
3154: LD_INT 2
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3169
3162: POP
// hHackSetLevel10 ; 3 :
3163: CALL 15540 0 0
3167: GO 3260
3169: LD_INT 3
3171: DOUBLE
3172: EQUAL
3173: IFTRUE 3177
3175: GO 3184
3177: POP
// hHackSetLevel10YourUnits ; 4 :
3178: CALL 15625 0 0
3182: GO 3260
3184: LD_INT 4
3186: DOUBLE
3187: EQUAL
3188: IFTRUE 3192
3190: GO 3199
3192: POP
// hHackInvincible ; 5 :
3193: CALL 16073 0 0
3197: GO 3260
3199: LD_INT 5
3201: DOUBLE
3202: EQUAL
3203: IFTRUE 3207
3205: GO 3214
3207: POP
// hHackInvisible ; 6 :
3208: CALL 16184 0 0
3212: GO 3260
3214: LD_INT 6
3216: DOUBLE
3217: EQUAL
3218: IFTRUE 3222
3220: GO 3229
3222: POP
// hHackChangeYourSide ; 7 :
3223: CALL 16241 0 0
3227: GO 3260
3229: LD_INT 7
3231: DOUBLE
3232: EQUAL
3233: IFTRUE 3237
3235: GO 3244
3237: POP
// hHackChangeUnitSide ; 8 :
3238: CALL 16283 0 0
3242: GO 3260
3244: LD_INT 8
3246: DOUBLE
3247: EQUAL
3248: IFTRUE 3252
3250: GO 3259
3252: POP
// hHackFog ; end ;
3253: CALL 16384 0 0
3257: GO 3260
3259: POP
// end ; if p2 = game_save_mode then
3260: LD_VAR 0 2
3264: PUSH
3265: LD_INT 102
3267: EQUAL
3268: IFFALSE 3323
// begin if p3 = 1 then
3270: LD_VAR 0 3
3274: PUSH
3275: LD_INT 1
3277: EQUAL
3278: IFFALSE 3290
// globalGameSaveCounter := p4 ;
3280: LD_ADDR_EXP 7
3284: PUSH
3285: LD_VAR 0 4
3289: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 2
3297: EQUAL
3298: PUSH
3299: LD_EXP 7
3303: AND
3304: IFFALSE 3323
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3306: LD_STRING setGameSaveCounter(
3308: PUSH
3309: LD_EXP 7
3313: STR
3314: PUSH
3315: LD_STRING )
3317: STR
3318: PPUSH
3319: CALL_OW 559
// end ; end ;
3323: LD_VAR 0 7
3327: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3328: LD_INT 0
3330: PPUSH
// streamModeActive := false ;
3331: LD_ADDR_EXP 8
3335: PUSH
3336: LD_INT 0
3338: ST_TO_ADDR
// normalCounter := 36 ;
3339: LD_ADDR_EXP 9
3343: PUSH
3344: LD_INT 36
3346: ST_TO_ADDR
// hardcoreCounter := 18 ;
3347: LD_ADDR_EXP 10
3351: PUSH
3352: LD_INT 18
3354: ST_TO_ADDR
// sRocket := false ;
3355: LD_ADDR_EXP 13
3359: PUSH
3360: LD_INT 0
3362: ST_TO_ADDR
// sSpeed := false ;
3363: LD_ADDR_EXP 12
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// sEngine := false ;
3371: LD_ADDR_EXP 14
3375: PUSH
3376: LD_INT 0
3378: ST_TO_ADDR
// sSpec := false ;
3379: LD_ADDR_EXP 11
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// sLevel := false ;
3387: LD_ADDR_EXP 15
3391: PUSH
3392: LD_INT 0
3394: ST_TO_ADDR
// sArmoury := false ;
3395: LD_ADDR_EXP 16
3399: PUSH
3400: LD_INT 0
3402: ST_TO_ADDR
// sRadar := false ;
3403: LD_ADDR_EXP 17
3407: PUSH
3408: LD_INT 0
3410: ST_TO_ADDR
// sBunker := false ;
3411: LD_ADDR_EXP 18
3415: PUSH
3416: LD_INT 0
3418: ST_TO_ADDR
// sHack := false ;
3419: LD_ADDR_EXP 19
3423: PUSH
3424: LD_INT 0
3426: ST_TO_ADDR
// sFire := false ;
3427: LD_ADDR_EXP 20
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// sRefresh := false ;
3435: LD_ADDR_EXP 21
3439: PUSH
3440: LD_INT 0
3442: ST_TO_ADDR
// sExp := false ;
3443: LD_ADDR_EXP 22
3447: PUSH
3448: LD_INT 0
3450: ST_TO_ADDR
// sDepot := false ;
3451: LD_ADDR_EXP 23
3455: PUSH
3456: LD_INT 0
3458: ST_TO_ADDR
// sFlag := false ;
3459: LD_ADDR_EXP 24
3463: PUSH
3464: LD_INT 0
3466: ST_TO_ADDR
// sKamikadze := false ;
3467: LD_ADDR_EXP 32
3471: PUSH
3472: LD_INT 0
3474: ST_TO_ADDR
// sTroll := false ;
3475: LD_ADDR_EXP 33
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// sSlow := false ;
3483: LD_ADDR_EXP 34
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// sLack := false ;
3491: LD_ADDR_EXP 35
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// sTank := false ;
3499: LD_ADDR_EXP 37
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// sRemote := false ;
3507: LD_ADDR_EXP 38
3511: PUSH
3512: LD_INT 0
3514: ST_TO_ADDR
// sPowell := false ;
3515: LD_ADDR_EXP 39
3519: PUSH
3520: LD_INT 0
3522: ST_TO_ADDR
// sTeleport := false ;
3523: LD_ADDR_EXP 42
3527: PUSH
3528: LD_INT 0
3530: ST_TO_ADDR
// sOilTower := false ;
3531: LD_ADDR_EXP 44
3535: PUSH
3536: LD_INT 0
3538: ST_TO_ADDR
// sShovel := false ;
3539: LD_ADDR_EXP 45
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// sSheik := false ;
3547: LD_ADDR_EXP 46
3551: PUSH
3552: LD_INT 0
3554: ST_TO_ADDR
// sEarthquake := false ;
3555: LD_ADDR_EXP 48
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// sAI := false ;
3563: LD_ADDR_EXP 49
3567: PUSH
3568: LD_INT 0
3570: ST_TO_ADDR
// sCargo := false ;
3571: LD_ADDR_EXP 52
3575: PUSH
3576: LD_INT 0
3578: ST_TO_ADDR
// sDLaser := false ;
3579: LD_ADDR_EXP 53
3583: PUSH
3584: LD_INT 0
3586: ST_TO_ADDR
// sExchange := false ;
3587: LD_ADDR_EXP 54
3591: PUSH
3592: LD_INT 0
3594: ST_TO_ADDR
// sFac := false ;
3595: LD_ADDR_EXP 55
3599: PUSH
3600: LD_INT 0
3602: ST_TO_ADDR
// sPower := false ;
3603: LD_ADDR_EXP 56
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// sRandom := false ;
3611: LD_ADDR_EXP 57
3615: PUSH
3616: LD_INT 0
3618: ST_TO_ADDR
// sShield := false ;
3619: LD_ADDR_EXP 58
3623: PUSH
3624: LD_INT 0
3626: ST_TO_ADDR
// sTime := false ;
3627: LD_ADDR_EXP 59
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// sTools := false ;
3635: LD_ADDR_EXP 60
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// sSold := false ;
3643: LD_ADDR_EXP 25
3647: PUSH
3648: LD_INT 0
3650: ST_TO_ADDR
// sDiff := false ;
3651: LD_ADDR_EXP 26
3655: PUSH
3656: LD_INT 0
3658: ST_TO_ADDR
// sFog := false ;
3659: LD_ADDR_EXP 29
3663: PUSH
3664: LD_INT 0
3666: ST_TO_ADDR
// sReset := false ;
3667: LD_ADDR_EXP 30
3671: PUSH
3672: LD_INT 0
3674: ST_TO_ADDR
// sSun := false ;
3675: LD_ADDR_EXP 31
3679: PUSH
3680: LD_INT 0
3682: ST_TO_ADDR
// sTiger := false ;
3683: LD_ADDR_EXP 27
3687: PUSH
3688: LD_INT 0
3690: ST_TO_ADDR
// sBomb := false ;
3691: LD_ADDR_EXP 28
3695: PUSH
3696: LD_INT 0
3698: ST_TO_ADDR
// sWound := false ;
3699: LD_ADDR_EXP 36
3703: PUSH
3704: LD_INT 0
3706: ST_TO_ADDR
// sBetray := false ;
3707: LD_ADDR_EXP 40
3711: PUSH
3712: LD_INT 0
3714: ST_TO_ADDR
// sContamin := false ;
3715: LD_ADDR_EXP 41
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// sOil := false ;
3723: LD_ADDR_EXP 43
3727: PUSH
3728: LD_INT 0
3730: ST_TO_ADDR
// sStu := false ;
3731: LD_ADDR_EXP 47
3735: PUSH
3736: LD_INT 0
3738: ST_TO_ADDR
// sBazooka := false ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_INT 0
3746: ST_TO_ADDR
// sMortar := false ;
3747: LD_ADDR_EXP 51
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// sRanger := false ;
3755: LD_ADDR_EXP 61
3759: PUSH
3760: LD_INT 0
3762: ST_TO_ADDR
// sComputer := false ;
3763: LD_ADDR_EXP 62
3767: PUSH
3768: LD_INT 0
3770: ST_TO_ADDR
// s30 := false ;
3771: LD_ADDR_EXP 63
3775: PUSH
3776: LD_INT 0
3778: ST_TO_ADDR
// s60 := false ;
3779: LD_ADDR_EXP 64
3783: PUSH
3784: LD_INT 0
3786: ST_TO_ADDR
// end ;
3787: LD_VAR 0 1
3791: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
// result := [ ] ;
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: EMPTY
3807: ST_TO_ADDR
// if campaign_id = 1 then
3808: LD_OWVAR 69
3812: PUSH
3813: LD_INT 1
3815: EQUAL
3816: IFFALSE 6982
// begin case mission_number of 1 :
3818: LD_OWVAR 70
3822: PUSH
3823: LD_INT 1
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3907
3831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 11
3845: PUSH
3846: LD_INT 12
3848: PUSH
3849: LD_INT 15
3851: PUSH
3852: LD_INT 16
3854: PUSH
3855: LD_INT 22
3857: PUSH
3858: LD_INT 23
3860: PUSH
3861: LD_INT 26
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 101
3877: PUSH
3878: LD_INT 102
3880: PUSH
3881: LD_INT 106
3883: PUSH
3884: LD_INT 116
3886: PUSH
3887: LD_INT 117
3889: PUSH
3890: LD_INT 118
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: ST_TO_ADDR
3905: GO 6980
3907: LD_INT 2
3909: DOUBLE
3910: EQUAL
3911: IFTRUE 3915
3913: GO 3999
3915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: LD_INT 2
3923: PUSH
3924: LD_INT 4
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 12
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: LD_INT 16
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 23
3944: PUSH
3945: LD_INT 26
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 101
3961: PUSH
3962: LD_INT 102
3964: PUSH
3965: LD_INT 105
3967: PUSH
3968: LD_INT 106
3970: PUSH
3971: LD_INT 108
3973: PUSH
3974: LD_INT 116
3976: PUSH
3977: LD_INT 117
3979: PUSH
3980: LD_INT 118
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: ST_TO_ADDR
3997: GO 6980
3999: LD_INT 3
4001: DOUBLE
4002: EQUAL
4003: IFTRUE 4007
4005: GO 4095
4007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4008: LD_ADDR_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: LD_INT 11
4024: PUSH
4025: LD_INT 12
4027: PUSH
4028: LD_INT 15
4030: PUSH
4031: LD_INT 16
4033: PUSH
4034: LD_INT 22
4036: PUSH
4037: LD_INT 26
4039: PUSH
4040: LD_INT 36
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 101
4057: PUSH
4058: LD_INT 102
4060: PUSH
4061: LD_INT 105
4063: PUSH
4064: LD_INT 106
4066: PUSH
4067: LD_INT 108
4069: PUSH
4070: LD_INT 116
4072: PUSH
4073: LD_INT 117
4075: PUSH
4076: LD_INT 118
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: ST_TO_ADDR
4093: GO 6980
4095: LD_INT 4
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4103
4101: GO 4199
4103: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: LD_INT 8
4120: PUSH
4121: LD_INT 11
4123: PUSH
4124: LD_INT 12
4126: PUSH
4127: LD_INT 15
4129: PUSH
4130: LD_INT 16
4132: PUSH
4133: LD_INT 22
4135: PUSH
4136: LD_INT 23
4138: PUSH
4139: LD_INT 26
4141: PUSH
4142: LD_INT 36
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 101
4161: PUSH
4162: LD_INT 102
4164: PUSH
4165: LD_INT 105
4167: PUSH
4168: LD_INT 106
4170: PUSH
4171: LD_INT 108
4173: PUSH
4174: LD_INT 116
4176: PUSH
4177: LD_INT 117
4179: PUSH
4180: LD_INT 118
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: ST_TO_ADDR
4197: GO 6980
4199: LD_INT 5
4201: DOUBLE
4202: EQUAL
4203: IFTRUE 4207
4205: GO 4319
4207: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: LD_INT 5
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: LD_INT 8
4227: PUSH
4228: LD_INT 11
4230: PUSH
4231: LD_INT 12
4233: PUSH
4234: LD_INT 15
4236: PUSH
4237: LD_INT 16
4239: PUSH
4240: LD_INT 22
4242: PUSH
4243: LD_INT 23
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 26
4251: PUSH
4252: LD_INT 36
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 101
4273: PUSH
4274: LD_INT 102
4276: PUSH
4277: LD_INT 105
4279: PUSH
4280: LD_INT 106
4282: PUSH
4283: LD_INT 108
4285: PUSH
4286: LD_INT 109
4288: PUSH
4289: LD_INT 112
4291: PUSH
4292: LD_INT 116
4294: PUSH
4295: LD_INT 117
4297: PUSH
4298: LD_INT 118
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: ST_TO_ADDR
4317: GO 6980
4319: LD_INT 6
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4459
4327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: LD_INT 2
4335: PUSH
4336: LD_INT 4
4338: PUSH
4339: LD_INT 5
4341: PUSH
4342: LD_INT 6
4344: PUSH
4345: LD_INT 8
4347: PUSH
4348: LD_INT 11
4350: PUSH
4351: LD_INT 12
4353: PUSH
4354: LD_INT 15
4356: PUSH
4357: LD_INT 16
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 26
4377: PUSH
4378: LD_INT 30
4380: PUSH
4381: LD_INT 31
4383: PUSH
4384: LD_INT 32
4386: PUSH
4387: LD_INT 36
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 101
4413: PUSH
4414: LD_INT 102
4416: PUSH
4417: LD_INT 105
4419: PUSH
4420: LD_INT 106
4422: PUSH
4423: LD_INT 108
4425: PUSH
4426: LD_INT 109
4428: PUSH
4429: LD_INT 112
4431: PUSH
4432: LD_INT 116
4434: PUSH
4435: LD_INT 117
4437: PUSH
4438: LD_INT 118
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: ST_TO_ADDR
4457: GO 6980
4459: LD_INT 7
4461: DOUBLE
4462: EQUAL
4463: IFTRUE 4467
4465: GO 4579
4467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 7
4484: PUSH
4485: LD_INT 11
4487: PUSH
4488: LD_INT 12
4490: PUSH
4491: LD_INT 15
4493: PUSH
4494: LD_INT 16
4496: PUSH
4497: LD_INT 20
4499: PUSH
4500: LD_INT 21
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 23
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 101
4533: PUSH
4534: LD_INT 102
4536: PUSH
4537: LD_INT 103
4539: PUSH
4540: LD_INT 105
4542: PUSH
4543: LD_INT 106
4545: PUSH
4546: LD_INT 108
4548: PUSH
4549: LD_INT 112
4551: PUSH
4552: LD_INT 116
4554: PUSH
4555: LD_INT 117
4557: PUSH
4558: LD_INT 118
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 6980
4579: LD_INT 8
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4727
4587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4588: LD_ADDR_VAR 0 2
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: LD_INT 4
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: LD_INT 6
4604: PUSH
4605: LD_INT 7
4607: PUSH
4608: LD_INT 8
4610: PUSH
4611: LD_INT 11
4613: PUSH
4614: LD_INT 12
4616: PUSH
4617: LD_INT 15
4619: PUSH
4620: LD_INT 16
4622: PUSH
4623: LD_INT 20
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 23
4634: PUSH
4635: LD_INT 25
4637: PUSH
4638: LD_INT 26
4640: PUSH
4641: LD_INT 30
4643: PUSH
4644: LD_INT 31
4646: PUSH
4647: LD_INT 32
4649: PUSH
4650: LD_INT 36
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 101
4677: PUSH
4678: LD_INT 102
4680: PUSH
4681: LD_INT 103
4683: PUSH
4684: LD_INT 105
4686: PUSH
4687: LD_INT 106
4689: PUSH
4690: LD_INT 108
4692: PUSH
4693: LD_INT 109
4695: PUSH
4696: LD_INT 112
4698: PUSH
4699: LD_INT 116
4701: PUSH
4702: LD_INT 117
4704: PUSH
4705: LD_INT 118
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: ST_TO_ADDR
4725: GO 6980
4727: LD_INT 9
4729: DOUBLE
4730: EQUAL
4731: IFTRUE 4735
4733: GO 4883
4735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: LD_INT 5
4749: PUSH
4750: LD_INT 6
4752: PUSH
4753: LD_INT 7
4755: PUSH
4756: LD_INT 8
4758: PUSH
4759: LD_INT 11
4761: PUSH
4762: LD_INT 12
4764: PUSH
4765: LD_INT 15
4767: PUSH
4768: LD_INT 16
4770: PUSH
4771: LD_INT 20
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 23
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 26
4788: PUSH
4789: LD_INT 28
4791: PUSH
4792: LD_INT 30
4794: PUSH
4795: LD_INT 31
4797: PUSH
4798: LD_INT 32
4800: PUSH
4801: LD_INT 36
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 101
4829: PUSH
4830: LD_INT 102
4832: PUSH
4833: LD_INT 103
4835: PUSH
4836: LD_INT 105
4838: PUSH
4839: LD_INT 106
4841: PUSH
4842: LD_INT 108
4844: PUSH
4845: LD_INT 109
4847: PUSH
4848: LD_INT 112
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 116
4856: PUSH
4857: LD_INT 117
4859: PUSH
4860: LD_INT 118
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: ST_TO_ADDR
4881: GO 6980
4883: LD_INT 10
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 5087
4891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: LD_INT 6
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: LD_INT 8
4914: PUSH
4915: LD_INT 9
4917: PUSH
4918: LD_INT 10
4920: PUSH
4921: LD_INT 11
4923: PUSH
4924: LD_INT 12
4926: PUSH
4927: LD_INT 13
4929: PUSH
4930: LD_INT 14
4932: PUSH
4933: LD_INT 15
4935: PUSH
4936: LD_INT 16
4938: PUSH
4939: LD_INT 17
4941: PUSH
4942: LD_INT 18
4944: PUSH
4945: LD_INT 19
4947: PUSH
4948: LD_INT 20
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 23
4959: PUSH
4960: LD_INT 24
4962: PUSH
4963: LD_INT 25
4965: PUSH
4966: LD_INT 26
4968: PUSH
4969: LD_INT 28
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 36
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 101
5017: PUSH
5018: LD_INT 102
5020: PUSH
5021: LD_INT 103
5023: PUSH
5024: LD_INT 104
5026: PUSH
5027: LD_INT 105
5029: PUSH
5030: LD_INT 106
5032: PUSH
5033: LD_INT 107
5035: PUSH
5036: LD_INT 108
5038: PUSH
5039: LD_INT 109
5041: PUSH
5042: LD_INT 110
5044: PUSH
5045: LD_INT 111
5047: PUSH
5048: LD_INT 112
5050: PUSH
5051: LD_INT 114
5053: PUSH
5054: LD_INT 116
5056: PUSH
5057: LD_INT 117
5059: PUSH
5060: LD_INT 118
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: ST_TO_ADDR
5085: GO 6980
5087: LD_INT 11
5089: DOUBLE
5090: EQUAL
5091: IFTRUE 5095
5093: GO 5299
5095: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5096: LD_ADDR_VAR 0 2
5100: PUSH
5101: LD_INT 2
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 6
5115: PUSH
5116: LD_INT 7
5118: PUSH
5119: LD_INT 8
5121: PUSH
5122: LD_INT 9
5124: PUSH
5125: LD_INT 10
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 12
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: LD_INT 14
5139: PUSH
5140: LD_INT 15
5142: PUSH
5143: LD_INT 16
5145: PUSH
5146: LD_INT 17
5148: PUSH
5149: LD_INT 18
5151: PUSH
5152: LD_INT 19
5154: PUSH
5155: LD_INT 20
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 22
5163: PUSH
5164: LD_INT 23
5166: PUSH
5167: LD_INT 24
5169: PUSH
5170: LD_INT 25
5172: PUSH
5173: LD_INT 26
5175: PUSH
5176: LD_INT 28
5178: PUSH
5179: LD_INT 30
5181: PUSH
5182: LD_INT 31
5184: PUSH
5185: LD_INT 32
5187: PUSH
5188: LD_INT 34
5190: PUSH
5191: LD_INT 36
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 101
5229: PUSH
5230: LD_INT 102
5232: PUSH
5233: LD_INT 103
5235: PUSH
5236: LD_INT 104
5238: PUSH
5239: LD_INT 105
5241: PUSH
5242: LD_INT 106
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 108
5250: PUSH
5251: LD_INT 109
5253: PUSH
5254: LD_INT 110
5256: PUSH
5257: LD_INT 111
5259: PUSH
5260: LD_INT 112
5262: PUSH
5263: LD_INT 114
5265: PUSH
5266: LD_INT 116
5268: PUSH
5269: LD_INT 117
5271: PUSH
5272: LD_INT 118
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: ST_TO_ADDR
5297: GO 6980
5299: LD_INT 12
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5307
5305: GO 5527
5307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5308: LD_ADDR_VAR 0 2
5312: PUSH
5313: LD_INT 1
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 4
5324: PUSH
5325: LD_INT 5
5327: PUSH
5328: LD_INT 6
5330: PUSH
5331: LD_INT 7
5333: PUSH
5334: LD_INT 8
5336: PUSH
5337: LD_INT 9
5339: PUSH
5340: LD_INT 10
5342: PUSH
5343: LD_INT 11
5345: PUSH
5346: LD_INT 12
5348: PUSH
5349: LD_INT 13
5351: PUSH
5352: LD_INT 14
5354: PUSH
5355: LD_INT 15
5357: PUSH
5358: LD_INT 16
5360: PUSH
5361: LD_INT 17
5363: PUSH
5364: LD_INT 18
5366: PUSH
5367: LD_INT 19
5369: PUSH
5370: LD_INT 20
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 22
5378: PUSH
5379: LD_INT 23
5381: PUSH
5382: LD_INT 24
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 26
5390: PUSH
5391: LD_INT 27
5393: PUSH
5394: LD_INT 28
5396: PUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 31
5402: PUSH
5403: LD_INT 32
5405: PUSH
5406: LD_INT 33
5408: PUSH
5409: LD_INT 34
5411: PUSH
5412: LD_INT 36
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 101
5453: PUSH
5454: LD_INT 102
5456: PUSH
5457: LD_INT 103
5459: PUSH
5460: LD_INT 104
5462: PUSH
5463: LD_INT 105
5465: PUSH
5466: LD_INT 106
5468: PUSH
5469: LD_INT 107
5471: PUSH
5472: LD_INT 108
5474: PUSH
5475: LD_INT 109
5477: PUSH
5478: LD_INT 110
5480: PUSH
5481: LD_INT 111
5483: PUSH
5484: LD_INT 112
5486: PUSH
5487: LD_INT 113
5489: PUSH
5490: LD_INT 114
5492: PUSH
5493: LD_INT 116
5495: PUSH
5496: LD_INT 117
5498: PUSH
5499: LD_INT 118
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 6980
5527: LD_INT 13
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5743
5535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 3
5549: PUSH
5550: LD_INT 4
5552: PUSH
5553: LD_INT 5
5555: PUSH
5556: LD_INT 8
5558: PUSH
5559: LD_INT 9
5561: PUSH
5562: LD_INT 10
5564: PUSH
5565: LD_INT 11
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: LD_INT 14
5573: PUSH
5574: LD_INT 15
5576: PUSH
5577: LD_INT 16
5579: PUSH
5580: LD_INT 17
5582: PUSH
5583: LD_INT 18
5585: PUSH
5586: LD_INT 19
5588: PUSH
5589: LD_INT 20
5591: PUSH
5592: LD_INT 21
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_INT 23
5600: PUSH
5601: LD_INT 24
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 26
5609: PUSH
5610: LD_INT 27
5612: PUSH
5613: LD_INT 28
5615: PUSH
5616: LD_INT 30
5618: PUSH
5619: LD_INT 31
5621: PUSH
5622: LD_INT 32
5624: PUSH
5625: LD_INT 33
5627: PUSH
5628: LD_INT 34
5630: PUSH
5631: LD_INT 36
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 101
5669: PUSH
5670: LD_INT 102
5672: PUSH
5673: LD_INT 103
5675: PUSH
5676: LD_INT 104
5678: PUSH
5679: LD_INT 105
5681: PUSH
5682: LD_INT 106
5684: PUSH
5685: LD_INT 107
5687: PUSH
5688: LD_INT 108
5690: PUSH
5691: LD_INT 109
5693: PUSH
5694: LD_INT 110
5696: PUSH
5697: LD_INT 111
5699: PUSH
5700: LD_INT 112
5702: PUSH
5703: LD_INT 113
5705: PUSH
5706: LD_INT 114
5708: PUSH
5709: LD_INT 116
5711: PUSH
5712: LD_INT 117
5714: PUSH
5715: LD_INT 118
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6980
5743: LD_INT 14
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5975
5751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 3
5765: PUSH
5766: LD_INT 4
5768: PUSH
5769: LD_INT 5
5771: PUSH
5772: LD_INT 6
5774: PUSH
5775: LD_INT 7
5777: PUSH
5778: LD_INT 8
5780: PUSH
5781: LD_INT 9
5783: PUSH
5784: LD_INT 10
5786: PUSH
5787: LD_INT 11
5789: PUSH
5790: LD_INT 12
5792: PUSH
5793: LD_INT 13
5795: PUSH
5796: LD_INT 14
5798: PUSH
5799: LD_INT 15
5801: PUSH
5802: LD_INT 16
5804: PUSH
5805: LD_INT 17
5807: PUSH
5808: LD_INT 18
5810: PUSH
5811: LD_INT 19
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 24
5828: PUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 26
5834: PUSH
5835: LD_INT 27
5837: PUSH
5838: LD_INT 28
5840: PUSH
5841: LD_INT 29
5843: PUSH
5844: LD_INT 30
5846: PUSH
5847: LD_INT 31
5849: PUSH
5850: LD_INT 32
5852: PUSH
5853: LD_INT 33
5855: PUSH
5856: LD_INT 34
5858: PUSH
5859: LD_INT 36
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 101
5901: PUSH
5902: LD_INT 102
5904: PUSH
5905: LD_INT 103
5907: PUSH
5908: LD_INT 104
5910: PUSH
5911: LD_INT 105
5913: PUSH
5914: LD_INT 106
5916: PUSH
5917: LD_INT 107
5919: PUSH
5920: LD_INT 108
5922: PUSH
5923: LD_INT 109
5925: PUSH
5926: LD_INT 110
5928: PUSH
5929: LD_INT 111
5931: PUSH
5932: LD_INT 112
5934: PUSH
5935: LD_INT 113
5937: PUSH
5938: LD_INT 114
5940: PUSH
5941: LD_INT 116
5943: PUSH
5944: LD_INT 117
5946: PUSH
5947: LD_INT 118
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: ST_TO_ADDR
5973: GO 6980
5975: LD_INT 15
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 6207
5983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: LD_INT 2
5994: PUSH
5995: LD_INT 3
5997: PUSH
5998: LD_INT 4
6000: PUSH
6001: LD_INT 5
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: LD_INT 7
6009: PUSH
6010: LD_INT 8
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: LD_INT 10
6018: PUSH
6019: LD_INT 11
6021: PUSH
6022: LD_INT 12
6024: PUSH
6025: LD_INT 13
6027: PUSH
6028: LD_INT 14
6030: PUSH
6031: LD_INT 15
6033: PUSH
6034: LD_INT 16
6036: PUSH
6037: LD_INT 17
6039: PUSH
6040: LD_INT 18
6042: PUSH
6043: LD_INT 19
6045: PUSH
6046: LD_INT 20
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: LD_INT 25
6063: PUSH
6064: LD_INT 26
6066: PUSH
6067: LD_INT 27
6069: PUSH
6070: LD_INT 28
6072: PUSH
6073: LD_INT 29
6075: PUSH
6076: LD_INT 30
6078: PUSH
6079: LD_INT 31
6081: PUSH
6082: LD_INT 32
6084: PUSH
6085: LD_INT 33
6087: PUSH
6088: LD_INT 34
6090: PUSH
6091: LD_INT 36
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 101
6133: PUSH
6134: LD_INT 102
6136: PUSH
6137: LD_INT 103
6139: PUSH
6140: LD_INT 104
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 107
6151: PUSH
6152: LD_INT 108
6154: PUSH
6155: LD_INT 109
6157: PUSH
6158: LD_INT 110
6160: PUSH
6161: LD_INT 111
6163: PUSH
6164: LD_INT 112
6166: PUSH
6167: LD_INT 113
6169: PUSH
6170: LD_INT 114
6172: PUSH
6173: LD_INT 116
6175: PUSH
6176: LD_INT 117
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
6205: GO 6980
6207: LD_INT 16
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6351
6215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: LD_INT 7
6232: PUSH
6233: LD_INT 11
6235: PUSH
6236: LD_INT 12
6238: PUSH
6239: LD_INT 15
6241: PUSH
6242: LD_INT 16
6244: PUSH
6245: LD_INT 20
6247: PUSH
6248: LD_INT 21
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 23
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 30
6265: PUSH
6266: LD_INT 31
6268: PUSH
6269: LD_INT 32
6271: PUSH
6272: LD_INT 33
6274: PUSH
6275: LD_INT 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 101
6301: PUSH
6302: LD_INT 102
6304: PUSH
6305: LD_INT 103
6307: PUSH
6308: LD_INT 106
6310: PUSH
6311: LD_INT 108
6313: PUSH
6314: LD_INT 112
6316: PUSH
6317: LD_INT 113
6319: PUSH
6320: LD_INT 114
6322: PUSH
6323: LD_INT 116
6325: PUSH
6326: LD_INT 117
6328: PUSH
6329: LD_INT 118
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 6980
6351: LD_INT 17
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6583
6359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: LD_INT 6
6382: PUSH
6383: LD_INT 7
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 9
6391: PUSH
6392: LD_INT 10
6394: PUSH
6395: LD_INT 11
6397: PUSH
6398: LD_INT 12
6400: PUSH
6401: LD_INT 13
6403: PUSH
6404: LD_INT 14
6406: PUSH
6407: LD_INT 15
6409: PUSH
6410: LD_INT 16
6412: PUSH
6413: LD_INT 17
6415: PUSH
6416: LD_INT 18
6418: PUSH
6419: LD_INT 19
6421: PUSH
6422: LD_INT 20
6424: PUSH
6425: LD_INT 21
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 26
6442: PUSH
6443: LD_INT 27
6445: PUSH
6446: LD_INT 28
6448: PUSH
6449: LD_INT 29
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 31
6457: PUSH
6458: LD_INT 32
6460: PUSH
6461: LD_INT 33
6463: PUSH
6464: LD_INT 34
6466: PUSH
6467: LD_INT 36
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 101
6509: PUSH
6510: LD_INT 102
6512: PUSH
6513: LD_INT 103
6515: PUSH
6516: LD_INT 104
6518: PUSH
6519: LD_INT 105
6521: PUSH
6522: LD_INT 106
6524: PUSH
6525: LD_INT 107
6527: PUSH
6528: LD_INT 108
6530: PUSH
6531: LD_INT 109
6533: PUSH
6534: LD_INT 110
6536: PUSH
6537: LD_INT 111
6539: PUSH
6540: LD_INT 112
6542: PUSH
6543: LD_INT 113
6545: PUSH
6546: LD_INT 114
6548: PUSH
6549: LD_INT 116
6551: PUSH
6552: LD_INT 117
6554: PUSH
6555: LD_INT 118
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: ST_TO_ADDR
6581: GO 6980
6583: LD_INT 18
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6739
6591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6592: LD_ADDR_VAR 0 2
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: LD_INT 4
6602: PUSH
6603: LD_INT 5
6605: PUSH
6606: LD_INT 7
6608: PUSH
6609: LD_INT 11
6611: PUSH
6612: LD_INT 12
6614: PUSH
6615: LD_INT 15
6617: PUSH
6618: LD_INT 16
6620: PUSH
6621: LD_INT 20
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 23
6632: PUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 26
6638: PUSH
6639: LD_INT 30
6641: PUSH
6642: LD_INT 31
6644: PUSH
6645: LD_INT 32
6647: PUSH
6648: LD_INT 33
6650: PUSH
6651: LD_INT 34
6653: PUSH
6654: LD_INT 35
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 101
6685: PUSH
6686: LD_INT 102
6688: PUSH
6689: LD_INT 103
6691: PUSH
6692: LD_INT 106
6694: PUSH
6695: LD_INT 108
6697: PUSH
6698: LD_INT 112
6700: PUSH
6701: LD_INT 113
6703: PUSH
6704: LD_INT 114
6706: PUSH
6707: LD_INT 115
6709: PUSH
6710: LD_INT 116
6712: PUSH
6713: LD_INT 117
6715: PUSH
6716: LD_INT 118
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 6980
6739: LD_INT 19
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6979
6747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 9
6779: PUSH
6780: LD_INT 10
6782: PUSH
6783: LD_INT 11
6785: PUSH
6786: LD_INT 12
6788: PUSH
6789: LD_INT 13
6791: PUSH
6792: LD_INT 14
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 17
6803: PUSH
6804: LD_INT 18
6806: PUSH
6807: LD_INT 19
6809: PUSH
6810: LD_INT 20
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 23
6821: PUSH
6822: LD_INT 24
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: LD_INT 26
6830: PUSH
6831: LD_INT 27
6833: PUSH
6834: LD_INT 28
6836: PUSH
6837: LD_INT 29
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 31
6845: PUSH
6846: LD_INT 32
6848: PUSH
6849: LD_INT 33
6851: PUSH
6852: LD_INT 34
6854: PUSH
6855: LD_INT 35
6857: PUSH
6858: LD_INT 36
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 101
6901: PUSH
6902: LD_INT 102
6904: PUSH
6905: LD_INT 103
6907: PUSH
6908: LD_INT 104
6910: PUSH
6911: LD_INT 105
6913: PUSH
6914: LD_INT 106
6916: PUSH
6917: LD_INT 107
6919: PUSH
6920: LD_INT 108
6922: PUSH
6923: LD_INT 109
6925: PUSH
6926: LD_INT 110
6928: PUSH
6929: LD_INT 111
6931: PUSH
6932: LD_INT 112
6934: PUSH
6935: LD_INT 113
6937: PUSH
6938: LD_INT 114
6940: PUSH
6941: LD_INT 115
6943: PUSH
6944: LD_INT 116
6946: PUSH
6947: LD_INT 117
6949: PUSH
6950: LD_INT 118
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 6980
6979: POP
// end else
6980: GO 7211
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: LD_INT 4
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: LD_INT 6
7004: PUSH
7005: LD_INT 7
7007: PUSH
7008: LD_INT 8
7010: PUSH
7011: LD_INT 9
7013: PUSH
7014: LD_INT 10
7016: PUSH
7017: LD_INT 11
7019: PUSH
7020: LD_INT 12
7022: PUSH
7023: LD_INT 13
7025: PUSH
7026: LD_INT 14
7028: PUSH
7029: LD_INT 15
7031: PUSH
7032: LD_INT 16
7034: PUSH
7035: LD_INT 17
7037: PUSH
7038: LD_INT 18
7040: PUSH
7041: LD_INT 19
7043: PUSH
7044: LD_INT 20
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 23
7055: PUSH
7056: LD_INT 24
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 27
7067: PUSH
7068: LD_INT 28
7070: PUSH
7071: LD_INT 29
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 31
7079: PUSH
7080: LD_INT 32
7082: PUSH
7083: LD_INT 33
7085: PUSH
7086: LD_INT 34
7088: PUSH
7089: LD_INT 35
7091: PUSH
7092: LD_INT 36
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 101
7135: PUSH
7136: LD_INT 102
7138: PUSH
7139: LD_INT 103
7141: PUSH
7142: LD_INT 104
7144: PUSH
7145: LD_INT 105
7147: PUSH
7148: LD_INT 106
7150: PUSH
7151: LD_INT 107
7153: PUSH
7154: LD_INT 108
7156: PUSH
7157: LD_INT 109
7159: PUSH
7160: LD_INT 110
7162: PUSH
7163: LD_INT 111
7165: PUSH
7166: LD_INT 112
7168: PUSH
7169: LD_INT 113
7171: PUSH
7172: LD_INT 114
7174: PUSH
7175: LD_INT 115
7177: PUSH
7178: LD_INT 116
7180: PUSH
7181: LD_INT 117
7183: PUSH
7184: LD_INT 118
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: ST_TO_ADDR
// if result then
7211: LD_VAR 0 2
7215: IFFALSE 8001
// begin normal :=  ;
7217: LD_ADDR_VAR 0 5
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hardcore :=  ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// active :=  ;
7233: LD_ADDR_VAR 0 7
7237: PUSH
7238: LD_STRING 
7240: ST_TO_ADDR
// for i = 1 to normalCounter do
7241: LD_ADDR_VAR 0 8
7245: PUSH
7246: DOUBLE
7247: LD_INT 1
7249: DEC
7250: ST_TO_ADDR
7251: LD_EXP 9
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7358
// begin tmp := 0 ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_STRING 0
7266: ST_TO_ADDR
// if result [ 1 ] then
7267: LD_VAR 0 2
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: IFFALSE 7340
// if result [ 1 ] [ 1 ] = i then
7277: LD_VAR 0 2
7281: PUSH
7282: LD_INT 1
7284: ARRAY
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: PUSH
7290: LD_VAR 0 8
7294: EQUAL
7295: IFFALSE 7340
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PPUSH
7319: LD_INT 1
7321: PPUSH
7322: CALL_OW 3
7326: PPUSH
7327: CALL_OW 1
7331: ST_TO_ADDR
// tmp := 1 ;
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_STRING 1
7339: ST_TO_ADDR
// end ; normal := normal & tmp ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_VAR 0 5
7349: PUSH
7350: LD_VAR 0 3
7354: STR
7355: ST_TO_ADDR
// end ;
7356: GO 7256
7358: POP
7359: POP
// for i = 1 to hardcoreCounter do
7360: LD_ADDR_VAR 0 8
7364: PUSH
7365: DOUBLE
7366: LD_INT 1
7368: DEC
7369: ST_TO_ADDR
7370: LD_EXP 10
7374: PUSH
7375: FOR_TO
7376: IFFALSE 7481
// begin tmp := 0 ;
7378: LD_ADDR_VAR 0 3
7382: PUSH
7383: LD_STRING 0
7385: ST_TO_ADDR
// if result [ 2 ] then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: IFFALSE 7463
// if result [ 2 ] [ 1 ] = 100 + i then
7396: LD_VAR 0 2
7400: PUSH
7401: LD_INT 2
7403: ARRAY
7404: PUSH
7405: LD_INT 1
7407: ARRAY
7408: PUSH
7409: LD_INT 100
7411: PUSH
7412: LD_VAR 0 8
7416: PLUS
7417: EQUAL
7418: IFFALSE 7463
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7420: LD_ADDR_VAR 0 2
7424: PUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: LD_VAR 0 2
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 3
7449: PPUSH
7450: CALL_OW 1
7454: ST_TO_ADDR
// tmp := 1 ;
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: LD_STRING 1
7462: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7463: LD_ADDR_VAR 0 6
7467: PUSH
7468: LD_VAR 0 6
7472: PUSH
7473: LD_VAR 0 3
7477: STR
7478: ST_TO_ADDR
// end ;
7479: GO 7375
7481: POP
7482: POP
// if isGameLoad then
7483: LD_VAR 0 1
7487: IFFALSE 7962
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7489: LD_ADDR_VAR 0 4
7493: PUSH
7494: LD_EXP 13
7498: PUSH
7499: LD_EXP 12
7503: PUSH
7504: LD_EXP 14
7508: PUSH
7509: LD_EXP 11
7513: PUSH
7514: LD_EXP 15
7518: PUSH
7519: LD_EXP 16
7523: PUSH
7524: LD_EXP 17
7528: PUSH
7529: LD_EXP 18
7533: PUSH
7534: LD_EXP 19
7538: PUSH
7539: LD_EXP 20
7543: PUSH
7544: LD_EXP 21
7548: PUSH
7549: LD_EXP 22
7553: PUSH
7554: LD_EXP 23
7558: PUSH
7559: LD_EXP 24
7563: PUSH
7564: LD_EXP 32
7568: PUSH
7569: LD_EXP 33
7573: PUSH
7574: LD_EXP 34
7578: PUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_EXP 37
7588: PUSH
7589: LD_EXP 38
7593: PUSH
7594: LD_EXP 39
7598: PUSH
7599: LD_EXP 42
7603: PUSH
7604: LD_EXP 44
7608: PUSH
7609: LD_EXP 45
7613: PUSH
7614: LD_EXP 46
7618: PUSH
7619: LD_EXP 48
7623: PUSH
7624: LD_EXP 49
7628: PUSH
7629: LD_EXP 52
7633: PUSH
7634: LD_EXP 53
7638: PUSH
7639: LD_EXP 54
7643: PUSH
7644: LD_EXP 55
7648: PUSH
7649: LD_EXP 56
7653: PUSH
7654: LD_EXP 57
7658: PUSH
7659: LD_EXP 58
7663: PUSH
7664: LD_EXP 59
7668: PUSH
7669: LD_EXP 60
7673: PUSH
7674: LD_EXP 25
7678: PUSH
7679: LD_EXP 26
7683: PUSH
7684: LD_EXP 29
7688: PUSH
7689: LD_EXP 30
7693: PUSH
7694: LD_EXP 31
7698: PUSH
7699: LD_EXP 27
7703: PUSH
7704: LD_EXP 28
7708: PUSH
7709: LD_EXP 36
7713: PUSH
7714: LD_EXP 40
7718: PUSH
7719: LD_EXP 41
7723: PUSH
7724: LD_EXP 43
7728: PUSH
7729: LD_EXP 47
7733: PUSH
7734: LD_EXP 50
7738: PUSH
7739: LD_EXP 51
7743: PUSH
7744: LD_EXP 61
7748: PUSH
7749: LD_EXP 62
7753: PUSH
7754: LD_EXP 63
7758: PUSH
7759: LD_EXP 64
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
// tmp :=  ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_STRING 
7827: ST_TO_ADDR
// for i = 1 to normalCounter do
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_EXP 9
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7880
// begin if flags [ i ] then
7846: LD_VAR 0 4
7850: PUSH
7851: LD_VAR 0 8
7855: ARRAY
7856: IFFALSE 7878
// tmp := tmp & i & ; ;
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 8
7872: STR
7873: PUSH
7874: LD_STRING ;
7876: STR
7877: ST_TO_ADDR
// end ;
7878: GO 7843
7880: POP
7881: POP
// for i = 1 to hardcoreCounter do
7882: LD_ADDR_VAR 0 8
7886: PUSH
7887: DOUBLE
7888: LD_INT 1
7890: DEC
7891: ST_TO_ADDR
7892: LD_EXP 10
7896: PUSH
7897: FOR_TO
7898: IFFALSE 7944
// begin if flags [ normalCounter + i ] then
7900: LD_VAR 0 4
7904: PUSH
7905: LD_EXP 9
7909: PUSH
7910: LD_VAR 0 8
7914: PLUS
7915: ARRAY
7916: IFFALSE 7942
// tmp := tmp & ( 100 + i ) & ; ;
7918: LD_ADDR_VAR 0 3
7922: PUSH
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 100
7930: PUSH
7931: LD_VAR 0 8
7935: PLUS
7936: STR
7937: PUSH
7938: LD_STRING ;
7940: STR
7941: ST_TO_ADDR
// end ;
7942: GO 7897
7944: POP
7945: POP
// if tmp then
7946: LD_VAR 0 3
7950: IFFALSE 7962
// active := tmp ;
7952: LD_ADDR_VAR 0 7
7956: PUSH
7957: LD_VAR 0 3
7961: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7962: LD_STRING getStreamItemsFromMission("
7964: PUSH
7965: LD_VAR 0 5
7969: STR
7970: PUSH
7971: LD_STRING ","
7973: STR
7974: PUSH
7975: LD_VAR 0 6
7979: STR
7980: PUSH
7981: LD_STRING ","
7983: STR
7984: PUSH
7985: LD_VAR 0 7
7989: STR
7990: PUSH
7991: LD_STRING ")
7993: STR
7994: PPUSH
7995: CALL_OW 559
// end else
7999: GO 8008
// ToLua ( getStreamItemsFromMission("","","") ) ;
8001: LD_STRING getStreamItemsFromMission("","","")
8003: PPUSH
8004: CALL_OW 559
// end ;
8008: LD_VAR 0 2
8012: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8013: LD_EXP 8
8017: PUSH
8018: LD_EXP 13
8022: AND
8023: IFFALSE 8147
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
8031: PPUSH
// begin enable ;
8032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 22
8040: PUSH
8041: LD_OWVAR 2
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 34
8055: PUSH
8056: LD_INT 7
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 34
8065: PUSH
8066: LD_INT 45
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 34
8075: PUSH
8076: LD_INT 28
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 34
8085: PUSH
8086: LD_INT 47
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if not tmp then
8109: LD_VAR 0 2
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8147
// for i in tmp do
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8145
// begin SetLives ( i , 0 ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 234
// end ;
8143: GO 8128
8145: POP
8146: POP
// end ;
8147: PPOPN 2
8149: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8150: LD_EXP 8
8154: PUSH
8155: LD_EXP 14
8159: AND
8160: IFFALSE 8244
8162: GO 8164
8164: DISABLE
8165: LD_INT 0
8167: PPUSH
8168: PPUSH
// begin enable ;
8169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8170: LD_ADDR_VAR 0 2
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_OWVAR 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 32
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// if not tmp then
8206: LD_VAR 0 2
8210: NOT
8211: IFFALSE 8215
// exit ;
8213: GO 8244
// for i in tmp do
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 2
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8242
// begin SetLives ( i , 0 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 0
8235: PPUSH
8236: CALL_OW 234
// end ;
8240: GO 8225
8242: POP
8243: POP
// end ;
8244: PPOPN 2
8246: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8247: LD_EXP 8
8251: PUSH
8252: LD_EXP 11
8256: AND
8257: IFFALSE 8350
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
// begin enable ;
8265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 22
8273: PUSH
8274: LD_OWVAR 2
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 2
8285: PUSH
8286: LD_INT 25
8288: PUSH
8289: LD_INT 5
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 9
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 25
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 69
8330: PUSH
8331: FOR_IN
8332: IFFALSE 8348
// begin SetClass ( i , 1 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 336
// end ;
8346: GO 8331
8348: POP
8349: POP
// end ;
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8353: LD_EXP 8
8357: PUSH
8358: LD_EXP 12
8362: AND
8363: PUSH
8364: LD_OWVAR 65
8368: PUSH
8369: LD_INT 7
8371: LESS
8372: AND
8373: IFFALSE 8387
8375: GO 8377
8377: DISABLE
// begin enable ;
8378: ENABLE
// game_speed := 7 ;
8379: LD_ADDR_OWVAR 65
8383: PUSH
8384: LD_INT 7
8386: ST_TO_ADDR
// end ;
8387: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8388: LD_EXP 8
8392: PUSH
8393: LD_EXP 15
8397: AND
8398: IFFALSE 8600
8400: GO 8402
8402: DISABLE
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
8407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8408: LD_ADDR_VAR 0 3
8412: PUSH
8413: LD_INT 81
8415: PUSH
8416: LD_OWVAR 2
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 21
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not tmp then
8444: LD_VAR 0 3
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8600
// if tmp > 5 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 5
8460: GREATER
8461: IFFALSE 8473
// k := 5 else
8463: LD_ADDR_VAR 0 2
8467: PUSH
8468: LD_INT 5
8470: ST_TO_ADDR
8471: GO 8483
// k := tmp ;
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_VAR 0 3
8482: ST_TO_ADDR
// for i := 1 to k do
8483: LD_ADDR_VAR 0 1
8487: PUSH
8488: DOUBLE
8489: LD_INT 1
8491: DEC
8492: ST_TO_ADDR
8493: LD_VAR 0 2
8497: PUSH
8498: FOR_TO
8499: IFFALSE 8598
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 1
8516: PUSH
8517: LD_INT 4
8519: MOD
8520: PUSH
8521: LD_INT 1
8523: PLUS
8524: PPUSH
8525: CALL_OW 259
8529: PUSH
8530: LD_INT 10
8532: LESS
8533: IFFALSE 8596
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8535: LD_VAR 0 3
8539: PUSH
8540: LD_VAR 0 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 1
8550: PUSH
8551: LD_INT 4
8553: MOD
8554: PUSH
8555: LD_INT 1
8557: PLUS
8558: PPUSH
8559: LD_VAR 0 3
8563: PUSH
8564: LD_VAR 0 1
8568: ARRAY
8569: PPUSH
8570: LD_VAR 0 1
8574: PUSH
8575: LD_INT 4
8577: MOD
8578: PUSH
8579: LD_INT 1
8581: PLUS
8582: PPUSH
8583: CALL_OW 259
8587: PUSH
8588: LD_INT 1
8590: PLUS
8591: PPUSH
8592: CALL_OW 237
8596: GO 8498
8598: POP
8599: POP
// end ;
8600: PPOPN 3
8602: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8603: LD_EXP 8
8607: PUSH
8608: LD_EXP 16
8612: AND
8613: IFFALSE 8633
8615: GO 8617
8617: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8618: LD_INT 4
8620: PPUSH
8621: LD_OWVAR 2
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 324
8633: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8634: LD_EXP 8
8638: PUSH
8639: LD_EXP 45
8643: AND
8644: IFFALSE 8664
8646: GO 8648
8648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8649: LD_INT 19
8651: PPUSH
8652: LD_OWVAR 2
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 324
8664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8665: LD_EXP 8
8669: PUSH
8670: LD_EXP 17
8674: AND
8675: IFFALSE 8777
8677: GO 8679
8679: DISABLE
8680: LD_INT 0
8682: PPUSH
8683: PPUSH
// begin enable ;
8684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8685: LD_ADDR_VAR 0 2
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_OWVAR 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 11
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 34
8717: PUSH
8718: LD_INT 30
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: ST_TO_ADDR
// if not tmp then
8739: LD_VAR 0 2
8743: NOT
8744: IFFALSE 8748
// exit ;
8746: GO 8777
// for i in tmp do
8748: LD_ADDR_VAR 0 1
8752: PUSH
8753: LD_VAR 0 2
8757: PUSH
8758: FOR_IN
8759: IFFALSE 8775
// begin SetLives ( i , 0 ) ;
8761: LD_VAR 0 1
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 234
// end ;
8773: GO 8758
8775: POP
8776: POP
// end ;
8777: PPOPN 2
8779: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8780: LD_EXP 8
8784: PUSH
8785: LD_EXP 18
8789: AND
8790: IFFALSE 8810
8792: GO 8794
8794: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8795: LD_INT 32
8797: PPUSH
8798: LD_OWVAR 2
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 324
8810: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8811: LD_EXP 8
8815: PUSH
8816: LD_EXP 19
8820: AND
8821: IFFALSE 9002
8823: GO 8825
8825: DISABLE
8826: LD_INT 0
8828: PPUSH
8829: PPUSH
8830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8831: LD_ADDR_VAR 0 2
8835: PUSH
8836: LD_INT 22
8838: PUSH
8839: LD_OWVAR 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: ST_TO_ADDR
// if not tmp then
8867: LD_VAR 0 2
8871: NOT
8872: IFFALSE 8876
// exit ;
8874: GO 9002
// side := 0 ;
8876: LD_ADDR_VAR 0 3
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// for i := 1 to 8 do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: DOUBLE
8890: LD_INT 1
8892: DEC
8893: ST_TO_ADDR
8894: LD_INT 8
8896: PUSH
8897: FOR_TO
8898: IFFALSE 8946
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8900: LD_OWVAR 2
8904: PUSH
8905: LD_VAR 0 1
8909: NONEQUAL
8910: PUSH
8911: LD_OWVAR 2
8915: PPUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 81
8925: PUSH
8926: LD_INT 2
8928: EQUAL
8929: AND
8930: IFFALSE 8944
// begin side := i ;
8932: LD_ADDR_VAR 0 3
8936: PUSH
8937: LD_VAR 0 1
8941: ST_TO_ADDR
// break ;
8942: GO 8946
// end ;
8944: GO 8897
8946: POP
8947: POP
// if not side then
8948: LD_VAR 0 3
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9002
// for i := 1 to tmp do
8957: LD_ADDR_VAR 0 1
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 2
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9000
// if Prob ( 60 ) then
8975: LD_INT 60
8977: PPUSH
8978: CALL_OW 13
8982: IFFALSE 8998
// SetSide ( i , side ) ;
8984: LD_VAR 0 1
8988: PPUSH
8989: LD_VAR 0 3
8993: PPUSH
8994: CALL_OW 235
8998: GO 8972
9000: POP
9001: POP
// end ;
9002: PPOPN 3
9004: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9005: LD_EXP 8
9009: PUSH
9010: LD_EXP 21
9014: AND
9015: IFFALSE 9134
9017: GO 9019
9019: DISABLE
9020: LD_INT 0
9022: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9023: LD_ADDR_VAR 0 1
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_OWVAR 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 3
9052: PUSH
9053: LD_INT 23
9055: PUSH
9056: LD_INT 0
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 69
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9132
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9080: LD_VAR 0 1
9084: PPUSH
9085: CALL_OW 257
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: IN
9108: IFFALSE 9130
// SetClass ( un , rand ( 1 , 4 ) ) ;
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 4
9120: PPUSH
9121: CALL_OW 12
9125: PPUSH
9126: CALL_OW 336
9130: GO 9077
9132: POP
9133: POP
// end ;
9134: PPOPN 1
9136: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9137: LD_EXP 8
9141: PUSH
9142: LD_EXP 20
9146: AND
9147: IFFALSE 9226
9149: GO 9151
9151: DISABLE
9152: LD_INT 0
9154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_OWVAR 2
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 21
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL_OW 69
9190: ST_TO_ADDR
// if not tmp then
9191: LD_VAR 0 1
9195: NOT
9196: IFFALSE 9200
// exit ;
9198: GO 9226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9200: LD_VAR 0 1
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: PPUSH
9219: LD_INT 100
9221: PPUSH
9222: CALL_OW 234
// end ;
9226: PPOPN 1
9228: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9229: LD_EXP 8
9233: PUSH
9234: LD_EXP 22
9238: AND
9239: IFFALSE 9337
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9247: LD_ADDR_VAR 0 1
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_OWVAR 2
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: ST_TO_ADDR
// if not tmp then
9283: LD_VAR 0 1
9287: NOT
9288: IFFALSE 9292
// exit ;
9290: GO 9337
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9292: LD_VAR 0 1
9296: PUSH
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL_OW 12
9309: ARRAY
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: LD_INT 4
9316: PPUSH
9317: CALL_OW 12
9321: PPUSH
9322: LD_INT 3000
9324: PPUSH
9325: LD_INT 9000
9327: PPUSH
9328: CALL_OW 12
9332: PPUSH
9333: CALL_OW 492
// end ;
9337: PPOPN 1
9339: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9340: LD_EXP 8
9344: PUSH
9345: LD_EXP 23
9349: AND
9350: IFFALSE 9370
9352: GO 9354
9354: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9355: LD_INT 1
9357: PPUSH
9358: LD_OWVAR 2
9362: PPUSH
9363: LD_INT 0
9365: PPUSH
9366: CALL_OW 324
9370: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9371: LD_EXP 8
9375: PUSH
9376: LD_EXP 24
9380: AND
9381: IFFALSE 9464
9383: GO 9385
9385: DISABLE
9386: LD_INT 0
9388: PPUSH
9389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: LD_INT 22
9397: PUSH
9398: LD_OWVAR 2
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: ST_TO_ADDR
// if not tmp then
9426: LD_VAR 0 2
9430: NOT
9431: IFFALSE 9435
// exit ;
9433: GO 9464
// for i in tmp do
9435: LD_ADDR_VAR 0 1
9439: PUSH
9440: LD_VAR 0 2
9444: PUSH
9445: FOR_IN
9446: IFFALSE 9462
// SetBLevel ( i , 10 ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 10
9455: PPUSH
9456: CALL_OW 241
9460: GO 9445
9462: POP
9463: POP
// end ;
9464: PPOPN 2
9466: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9467: LD_EXP 8
9471: PUSH
9472: LD_EXP 25
9476: AND
9477: IFFALSE 9588
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
9486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9487: LD_ADDR_VAR 0 3
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_OWVAR 2
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 25
9506: PUSH
9507: LD_INT 1
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 69
9522: ST_TO_ADDR
// if not tmp then
9523: LD_VAR 0 3
9527: NOT
9528: IFFALSE 9532
// exit ;
9530: GO 9588
// un := tmp [ rand ( 1 , tmp ) ] ;
9532: LD_ADDR_VAR 0 2
9536: PUSH
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: CALL_OW 12
9554: ARRAY
9555: ST_TO_ADDR
// if Crawls ( un ) then
9556: LD_VAR 0 2
9560: PPUSH
9561: CALL_OW 318
9565: IFFALSE 9576
// ComWalk ( un ) ;
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9576: LD_VAR 0 2
9580: PPUSH
9581: LD_INT 5
9583: PPUSH
9584: CALL_OW 336
// end ;
9588: PPOPN 3
9590: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9591: LD_EXP 8
9595: PUSH
9596: LD_EXP 26
9600: AND
9601: PUSH
9602: LD_OWVAR 67
9606: PUSH
9607: LD_INT 4
9609: LESS
9610: AND
9611: IFFALSE 9630
9613: GO 9615
9615: DISABLE
// begin Difficulty := Difficulty + 1 ;
9616: LD_ADDR_OWVAR 67
9620: PUSH
9621: LD_OWVAR 67
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// end ;
9630: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9631: LD_EXP 8
9635: PUSH
9636: LD_EXP 27
9640: AND
9641: IFFALSE 9744
9643: GO 9645
9645: DISABLE
9646: LD_INT 0
9648: PPUSH
// begin for i := 1 to 5 do
9649: LD_ADDR_VAR 0 1
9653: PUSH
9654: DOUBLE
9655: LD_INT 1
9657: DEC
9658: ST_TO_ADDR
9659: LD_INT 5
9661: PUSH
9662: FOR_TO
9663: IFFALSE 9742
// begin uc_nation := nation_nature ;
9665: LD_ADDR_OWVAR 21
9669: PUSH
9670: LD_INT 0
9672: ST_TO_ADDR
// uc_side := 0 ;
9673: LD_ADDR_OWVAR 20
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9681: LD_ADDR_OWVAR 29
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 12
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
// hc_agressivity := 20 ;
9696: LD_ADDR_OWVAR 35
9700: PUSH
9701: LD_INT 20
9703: ST_TO_ADDR
// hc_class := class_tiger ;
9704: LD_ADDR_OWVAR 28
9708: PUSH
9709: LD_INT 14
9711: ST_TO_ADDR
// hc_gallery :=  ;
9712: LD_ADDR_OWVAR 33
9716: PUSH
9717: LD_STRING 
9719: ST_TO_ADDR
// hc_name :=  ;
9720: LD_ADDR_OWVAR 26
9724: PUSH
9725: LD_STRING 
9727: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9728: CALL_OW 44
9732: PPUSH
9733: LD_INT 0
9735: PPUSH
9736: CALL_OW 51
// end ;
9740: GO 9662
9742: POP
9743: POP
// end ;
9744: PPOPN 1
9746: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9747: LD_EXP 8
9751: PUSH
9752: LD_EXP 28
9756: AND
9757: IFFALSE 9766
9759: GO 9761
9761: DISABLE
// StreamSibBomb ;
9762: CALL 9767 0 0
9766: END
// export function StreamSibBomb ; var i , x , y ; begin
9767: LD_INT 0
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
// result := false ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_INT 0
9780: ST_TO_ADDR
// for i := 1 to 16 do
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_INT 16
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9994
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9797: LD_ADDR_VAR 0 3
9801: PUSH
9802: LD_INT 10
9804: PUSH
9805: LD_INT 20
9807: PUSH
9808: LD_INT 30
9810: PUSH
9811: LD_INT 40
9813: PUSH
9814: LD_INT 50
9816: PUSH
9817: LD_INT 60
9819: PUSH
9820: LD_INT 70
9822: PUSH
9823: LD_INT 80
9825: PUSH
9826: LD_INT 90
9828: PUSH
9829: LD_INT 100
9831: PUSH
9832: LD_INT 110
9834: PUSH
9835: LD_INT 120
9837: PUSH
9838: LD_INT 130
9840: PUSH
9841: LD_INT 140
9843: PUSH
9844: LD_INT 150
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 1
9866: PPUSH
9867: LD_INT 15
9869: PPUSH
9870: CALL_OW 12
9874: ARRAY
9875: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9876: LD_ADDR_VAR 0 4
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 20
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 40
9892: PUSH
9893: LD_INT 50
9895: PUSH
9896: LD_INT 60
9898: PUSH
9899: LD_INT 70
9901: PUSH
9902: LD_INT 80
9904: PUSH
9905: LD_INT 90
9907: PUSH
9908: LD_INT 100
9910: PUSH
9911: LD_INT 110
9913: PUSH
9914: LD_INT 120
9916: PUSH
9917: LD_INT 130
9919: PUSH
9920: LD_INT 140
9922: PUSH
9923: LD_INT 150
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 15
9948: PPUSH
9949: CALL_OW 12
9953: ARRAY
9954: ST_TO_ADDR
// if ValidHex ( x , y ) then
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_VAR 0 4
9964: PPUSH
9965: CALL_OW 488
9969: IFFALSE 9992
// begin result := [ x , y ] ;
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: LD_VAR 0 3
9980: PUSH
9981: LD_VAR 0 4
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// break ;
9990: GO 9994
// end ; end ;
9992: GO 9794
9994: POP
9995: POP
// if result then
9996: LD_VAR 0 1
10000: IFFALSE 10060
// begin ToLua ( playSibBomb() ) ;
10002: LD_STRING playSibBomb()
10004: PPUSH
10005: CALL_OW 559
// wait ( 0 0$14 ) ;
10009: LD_INT 490
10011: PPUSH
10012: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10016: LD_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_VAR 0 1
10029: PUSH
10030: LD_INT 2
10032: ARRAY
10033: PPUSH
10034: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10038: LD_VAR 0 1
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: LD_VAR 0 1
10051: PUSH
10052: LD_INT 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 429
// end ; end ;
10060: LD_VAR 0 1
10064: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10065: LD_EXP 8
10069: PUSH
10070: LD_EXP 30
10074: AND
10075: IFFALSE 10087
10077: GO 10079
10079: DISABLE
// YouLost (  ) ;
10080: LD_STRING 
10082: PPUSH
10083: CALL_OW 104
10087: END
// every 0 0$1 trigger StreamModeActive and sFog do
10088: LD_EXP 8
10092: PUSH
10093: LD_EXP 29
10097: AND
10098: IFFALSE 10112
10100: GO 10102
10102: DISABLE
// FogOff ( your_side ) ;
10103: LD_OWVAR 2
10107: PPUSH
10108: CALL_OW 344
10112: END
// every 0 0$1 trigger StreamModeActive and sSun do
10113: LD_EXP 8
10117: PUSH
10118: LD_EXP 31
10122: AND
10123: IFFALSE 10151
10125: GO 10127
10127: DISABLE
// begin solar_recharge_percent := 0 ;
10128: LD_ADDR_OWVAR 79
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10136: LD_INT 10500
10138: PPUSH
10139: CALL_OW 67
// solar_recharge_percent := 100 ;
10143: LD_ADDR_OWVAR 79
10147: PUSH
10148: LD_INT 100
10150: ST_TO_ADDR
// end ;
10151: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10152: LD_EXP 8
10156: PUSH
10157: LD_EXP 32
10161: AND
10162: IFFALSE 10401
10164: GO 10166
10166: DISABLE
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
10171: PPUSH
// begin tmp := [ ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: EMPTY
10178: ST_TO_ADDR
// for i := 1 to 6 do
10179: LD_ADDR_VAR 0 1
10183: PUSH
10184: DOUBLE
10185: LD_INT 1
10187: DEC
10188: ST_TO_ADDR
10189: LD_INT 6
10191: PUSH
10192: FOR_TO
10193: IFFALSE 10298
// begin uc_nation := nation_nature ;
10195: LD_ADDR_OWVAR 21
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// uc_side := 0 ;
10203: LD_ADDR_OWVAR 20
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10211: LD_ADDR_OWVAR 29
10215: PUSH
10216: LD_INT 12
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
// hc_agressivity := 20 ;
10226: LD_ADDR_OWVAR 35
10230: PUSH
10231: LD_INT 20
10233: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10234: LD_ADDR_OWVAR 28
10238: PUSH
10239: LD_INT 17
10241: ST_TO_ADDR
// hc_gallery :=  ;
10242: LD_ADDR_OWVAR 33
10246: PUSH
10247: LD_STRING 
10249: ST_TO_ADDR
// hc_name :=  ;
10250: LD_ADDR_OWVAR 26
10254: PUSH
10255: LD_STRING 
10257: ST_TO_ADDR
// un := CreateHuman ;
10258: LD_ADDR_VAR 0 2
10262: PUSH
10263: CALL_OW 44
10267: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10268: LD_VAR 0 2
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 51
// tmp := tmp ^ un ;
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: LD_VAR 0 3
10289: PUSH
10290: LD_VAR 0 2
10294: ADD
10295: ST_TO_ADDR
// end ;
10296: GO 10192
10298: POP
10299: POP
// repeat wait ( 0 0$1 ) ;
10300: LD_INT 35
10302: PPUSH
10303: CALL_OW 67
// for un in tmp do
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10392
// begin if IsDead ( un ) then
10320: LD_VAR 0 2
10324: PPUSH
10325: CALL_OW 301
10329: IFFALSE 10349
// begin tmp := tmp diff un ;
10331: LD_ADDR_VAR 0 3
10335: PUSH
10336: LD_VAR 0 3
10340: PUSH
10341: LD_VAR 0 2
10345: DIFF
10346: ST_TO_ADDR
// continue ;
10347: GO 10317
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10349: LD_VAR 0 2
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 0
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: CALL_OW 115
// end ;
10390: GO 10317
10392: POP
10393: POP
// until not tmp ;
10394: LD_VAR 0 3
10398: NOT
10399: IFFALSE 10300
// end ;
10401: PPOPN 3
10403: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10404: LD_EXP 8
10408: PUSH
10409: LD_EXP 33
10413: AND
10414: IFFALSE 10468
10416: GO 10418
10418: DISABLE
// begin ToLua ( displayTroll(); ) ;
10419: LD_STRING displayTroll();
10421: PPUSH
10422: CALL_OW 559
// wait ( 3 3$00 ) ;
10426: LD_INT 6300
10428: PPUSH
10429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10433: LD_STRING hideTroll();
10435: PPUSH
10436: CALL_OW 559
// wait ( 1 1$00 ) ;
10440: LD_INT 2100
10442: PPUSH
10443: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10447: LD_STRING displayTroll();
10449: PPUSH
10450: CALL_OW 559
// wait ( 1 1$00 ) ;
10454: LD_INT 2100
10456: PPUSH
10457: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10461: LD_STRING hideTroll();
10463: PPUSH
10464: CALL_OW 559
// end ;
10468: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10469: LD_EXP 8
10473: PUSH
10474: LD_EXP 34
10478: AND
10479: IFFALSE 10542
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
// begin p := 0 ;
10487: LD_ADDR_VAR 0 1
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// repeat game_speed := 1 ;
10495: LD_ADDR_OWVAR 65
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10503: LD_INT 35
10505: PPUSH
10506: CALL_OW 67
// p := p + 1 ;
10510: LD_ADDR_VAR 0 1
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: LD_INT 1
10522: PLUS
10523: ST_TO_ADDR
// until p >= 60 ;
10524: LD_VAR 0 1
10528: PUSH
10529: LD_INT 60
10531: GREATEREQUAL
10532: IFFALSE 10495
// game_speed := 4 ;
10534: LD_ADDR_OWVAR 65
10538: PUSH
10539: LD_INT 4
10541: ST_TO_ADDR
// end ;
10542: PPOPN 1
10544: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10545: LD_EXP 8
10549: PUSH
10550: LD_EXP 35
10554: AND
10555: IFFALSE 10701
10557: GO 10559
10559: DISABLE
10560: LD_INT 0
10562: PPUSH
10563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10564: LD_ADDR_VAR 0 1
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: LD_OWVAR 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 30
10586: PUSH
10587: LD_INT 0
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PPUSH
10613: CALL_OW 69
10617: ST_TO_ADDR
// if not depot then
10618: LD_VAR 0 1
10622: NOT
10623: IFFALSE 10627
// exit ;
10625: GO 10701
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 12
10649: ARRAY
10650: PPUSH
10651: CALL_OW 274
10655: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: LD_INT 0
10666: PPUSH
10667: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10671: LD_VAR 0 2
10675: PPUSH
10676: LD_INT 2
10678: PPUSH
10679: LD_INT 0
10681: PPUSH
10682: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_INT 3
10693: PPUSH
10694: LD_INT 0
10696: PPUSH
10697: CALL_OW 277
// end ;
10701: PPOPN 2
10703: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10704: LD_EXP 8
10708: PUSH
10709: LD_EXP 36
10713: AND
10714: IFFALSE 10811
10716: GO 10718
10718: DISABLE
10719: LD_INT 0
10721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10722: LD_ADDR_VAR 0 1
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_OWVAR 2
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 3
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: ST_TO_ADDR
// if not tmp then
10776: LD_VAR 0 1
10780: NOT
10781: IFFALSE 10785
// exit ;
10783: GO 10811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10785: LD_VAR 0 1
10789: PUSH
10790: LD_INT 1
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 12
10802: ARRAY
10803: PPUSH
10804: LD_INT 200
10806: PPUSH
10807: CALL_OW 234
// end ;
10811: PPOPN 1
10813: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10814: LD_EXP 8
10818: PUSH
10819: LD_EXP 37
10823: AND
10824: IFFALSE 10903
10826: GO 10828
10828: DISABLE
10829: LD_INT 0
10831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_OWVAR 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// if not tmp then
10868: LD_VAR 0 1
10872: NOT
10873: IFFALSE 10877
// exit ;
10875: GO 10903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10877: LD_VAR 0 1
10881: PUSH
10882: LD_INT 1
10884: PPUSH
10885: LD_VAR 0 1
10889: PPUSH
10890: CALL_OW 12
10894: ARRAY
10895: PPUSH
10896: LD_INT 60
10898: PPUSH
10899: CALL_OW 234
// end ;
10903: PPOPN 1
10905: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10906: LD_EXP 8
10910: PUSH
10911: LD_EXP 38
10915: AND
10916: IFFALSE 11015
10918: GO 10920
10920: DISABLE
10921: LD_INT 0
10923: PPUSH
10924: PPUSH
// begin enable ;
10925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_OWVAR 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 61
10945: PUSH
10946: EMPTY
10947: LIST
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: ST_TO_ADDR
// if not tmp then
10969: LD_VAR 0 1
10973: NOT
10974: IFFALSE 10978
// exit ;
10976: GO 11015
// for i in tmp do
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11013
// if IsControledBy ( i ) then
10991: LD_VAR 0 2
10995: PPUSH
10996: CALL_OW 312
11000: IFFALSE 11011
// ComUnlink ( i ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: CALL_OW 136
11011: GO 10988
11013: POP
11014: POP
// end ;
11015: PPOPN 2
11017: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11018: LD_EXP 8
11022: PUSH
11023: LD_EXP 39
11027: AND
11028: IFFALSE 11168
11030: GO 11032
11032: DISABLE
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
// begin ToLua ( displayPowell(); ) ;
11037: LD_STRING displayPowell();
11039: PPUSH
11040: CALL_OW 559
// uc_side := 0 ;
11044: LD_ADDR_OWVAR 20
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// uc_nation := 2 ;
11052: LD_ADDR_OWVAR 21
11056: PUSH
11057: LD_INT 2
11059: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11060: LD_ADDR_OWVAR 37
11064: PUSH
11065: LD_INT 14
11067: ST_TO_ADDR
// vc_engine := engine_siberite ;
11068: LD_ADDR_OWVAR 39
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// vc_control := control_apeman ;
11076: LD_ADDR_OWVAR 38
11080: PUSH
11081: LD_INT 5
11083: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11084: LD_ADDR_OWVAR 40
11088: PUSH
11089: LD_INT 29
11091: ST_TO_ADDR
// un := CreateVehicle ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: CALL_OW 45
11101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11102: LD_VAR 0 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11114: LD_INT 35
11116: PPUSH
11117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11121: LD_VAR 0 2
11125: PPUSH
11126: LD_INT 22
11128: PUSH
11129: LD_OWVAR 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 69
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 74
11152: PPUSH
11153: CALL_OW 115
// until IsDead ( un ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: CALL_OW 301
11166: IFFALSE 11114
// end ;
11168: PPOPN 2
11170: END
// every 0 0$1 trigger StreamModeActive and sStu do
11171: LD_EXP 8
11175: PUSH
11176: LD_EXP 47
11180: AND
11181: IFFALSE 11197
11183: GO 11185
11185: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11186: LD_STRING displayStucuk();
11188: PPUSH
11189: CALL_OW 559
// ResetFog ;
11193: CALL_OW 335
// end ;
11197: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11198: LD_EXP 8
11202: PUSH
11203: LD_EXP 40
11207: AND
11208: IFFALSE 11349
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 2
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11349
// un := tmp [ rand ( 1 , tmp ) ] ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_VAR 0 2
11271: PUSH
11272: LD_INT 1
11274: PPUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 12
11284: ARRAY
11285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_OWVAR 3
11307: PUSH
11308: LD_VAR 0 1
11312: DIFF
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 74
11323: PPUSH
11324: CALL_OW 115
// wait ( 0 0$20 ) ;
11328: LD_INT 700
11330: PPUSH
11331: CALL_OW 67
// SetSide ( un , your_side ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_OWVAR 2
11344: PPUSH
11345: CALL_OW 235
// end ;
11349: PPOPN 2
11351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11352: LD_EXP 8
11356: PUSH
11357: LD_EXP 41
11361: AND
11362: IFFALSE 11468
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11370: LD_ADDR_VAR 0 1
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_OWVAR 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: ST_TO_ADDR
// if not depot then
11424: LD_VAR 0 1
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11468
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 1
11440: ARRAY
11441: PPUSH
11442: CALL_OW 250
11446: PPUSH
11447: LD_VAR 0 1
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PPUSH
11456: CALL_OW 251
11460: PPUSH
11461: LD_INT 70
11463: PPUSH
11464: CALL_OW 495
// end ;
11468: PPOPN 1
11470: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11471: LD_EXP 8
11475: PUSH
11476: LD_EXP 42
11480: AND
11481: IFFALSE 11692
11483: GO 11485
11485: DISABLE
11486: LD_INT 0
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11493: LD_ADDR_VAR 0 5
11497: PUSH
11498: LD_INT 22
11500: PUSH
11501: LD_OWVAR 2
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PPUSH
11524: CALL_OW 69
11528: ST_TO_ADDR
// if not tmp then
11529: LD_VAR 0 5
11533: NOT
11534: IFFALSE 11538
// exit ;
11536: GO 11692
// for i in tmp do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_VAR 0 5
11547: PUSH
11548: FOR_IN
11549: IFFALSE 11690
// begin d := rand ( 0 , 5 ) ;
11551: LD_ADDR_VAR 0 4
11555: PUSH
11556: LD_INT 0
11558: PPUSH
11559: LD_INT 5
11561: PPUSH
11562: CALL_OW 12
11566: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11567: LD_ADDR_VAR 0 2
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 250
11581: PPUSH
11582: LD_VAR 0 4
11586: PPUSH
11587: LD_INT 3
11589: PPUSH
11590: LD_INT 12
11592: PPUSH
11593: CALL_OW 12
11597: PPUSH
11598: CALL_OW 272
11602: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11603: LD_ADDR_VAR 0 3
11607: PUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 251
11617: PPUSH
11618: LD_VAR 0 4
11622: PPUSH
11623: LD_INT 3
11625: PPUSH
11626: LD_INT 12
11628: PPUSH
11629: CALL_OW 12
11633: PPUSH
11634: CALL_OW 273
11638: ST_TO_ADDR
// if ValidHex ( x , y ) then
11639: LD_VAR 0 2
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: CALL_OW 488
11653: IFFALSE 11688
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11655: LD_VAR 0 1
11659: PPUSH
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 3
11672: PPUSH
11673: LD_INT 6
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 483
// end ;
11688: GO 11548
11690: POP
11691: POP
// end ;
11692: PPOPN 5
11694: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11695: LD_EXP 8
11699: PUSH
11700: LD_EXP 43
11704: AND
11705: IFFALSE 11799
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_OWVAR 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 32
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 21
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: ST_TO_ADDR
// if not tmp then
11761: LD_VAR 0 2
11765: NOT
11766: IFFALSE 11770
// exit ;
11768: GO 11799
// for i in tmp do
11770: LD_ADDR_VAR 0 1
11774: PUSH
11775: LD_VAR 0 2
11779: PUSH
11780: FOR_IN
11781: IFFALSE 11797
// SetFuel ( i , 0 ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 240
11795: GO 11780
11797: POP
11798: POP
// end ;
11799: PPOPN 2
11801: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11802: LD_EXP 8
11806: PUSH
11807: LD_EXP 44
11811: AND
11812: IFFALSE 11878
11814: GO 11816
11816: DISABLE
11817: LD_INT 0
11819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 30
11839: PUSH
11840: LD_INT 29
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 1
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 11878
// DestroyUnit ( tmp [ 1 ] ) ;
11865: LD_VAR 0 1
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PPUSH
11874: CALL_OW 65
// end ;
11878: PPOPN 1
11880: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 46
11890: AND
11891: IFFALSE 12020
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
// begin uc_side := 0 ;
11899: LD_ADDR_OWVAR 20
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// uc_nation := nation_arabian ;
11907: LD_ADDR_OWVAR 21
11911: PUSH
11912: LD_INT 2
11914: ST_TO_ADDR
// hc_gallery :=  ;
11915: LD_ADDR_OWVAR 33
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// hc_name :=  ;
11923: LD_ADDR_OWVAR 26
11927: PUSH
11928: LD_STRING 
11930: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11931: LD_INT 1
11933: PPUSH
11934: LD_INT 11
11936: PPUSH
11937: LD_INT 10
11939: PPUSH
11940: CALL_OW 380
// un := CreateHuman ;
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: CALL_OW 44
11953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11966: LD_INT 35
11968: PPUSH
11969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_INT 22
11980: PUSH
11981: LD_OWVAR 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PPUSH
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 74
12004: PPUSH
12005: CALL_OW 115
// until IsDead ( un ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: CALL_OW 301
12018: IFFALSE 11966
// end ;
12020: PPOPN 1
12022: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12023: LD_EXP 8
12027: PUSH
12028: LD_EXP 48
12032: AND
12033: IFFALSE 12045
12035: GO 12037
12037: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12038: LD_STRING earthquake(getX(game), 0, 32)
12040: PPUSH
12041: CALL_OW 559
12045: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12046: LD_EXP 8
12050: PUSH
12051: LD_EXP 49
12055: AND
12056: IFFALSE 12147
12058: GO 12060
12060: DISABLE
12061: LD_INT 0
12063: PPUSH
// begin enable ;
12064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_OWVAR 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 21
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 33
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 69
12111: ST_TO_ADDR
// if not tmp then
12112: LD_VAR 0 1
12116: NOT
12117: IFFALSE 12121
// exit ;
12119: GO 12147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 1
12128: PPUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 12
12138: ARRAY
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 234
// end ;
12147: PPOPN 1
12149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12150: LD_EXP 8
12154: PUSH
12155: LD_EXP 50
12159: AND
12160: IFFALSE 12301
12162: GO 12164
12164: DISABLE
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_OWVAR 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 25
12189: PUSH
12190: LD_INT 1
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 69
12205: ST_TO_ADDR
// if not tmp then
12206: LD_VAR 0 3
12210: NOT
12211: IFFALSE 12215
// exit ;
12213: GO 12301
// un := tmp [ rand ( 1 , tmp ) ] ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 1
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: CALL_OW 12
12237: ARRAY
12238: ST_TO_ADDR
// if Crawls ( un ) then
12239: LD_VAR 0 2
12243: PPUSH
12244: CALL_OW 318
12248: IFFALSE 12259
// ComWalk ( un ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12259: LD_VAR 0 2
12263: PPUSH
12264: LD_INT 9
12266: PPUSH
12267: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12271: LD_INT 28
12273: PPUSH
12274: LD_OWVAR 2
12278: PPUSH
12279: LD_INT 2
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12286: LD_INT 29
12288: PPUSH
12289: LD_OWVAR 2
12293: PPUSH
12294: LD_INT 2
12296: PPUSH
12297: CALL_OW 322
// end ;
12301: PPOPN 3
12303: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12304: LD_EXP 8
12308: PUSH
12309: LD_EXP 51
12313: AND
12314: IFFALSE 12425
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12425
// un := tmp [ rand ( 1 , tmp ) ] ;
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: PUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: CALL_OW 12
12391: ARRAY
12392: ST_TO_ADDR
// if Crawls ( un ) then
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 318
12402: IFFALSE 12413
// ComWalk ( un ) ;
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12413: LD_VAR 0 2
12417: PPUSH
12418: LD_INT 8
12420: PPUSH
12421: CALL_OW 336
// end ;
12425: PPOPN 3
12427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12428: LD_EXP 8
12432: PUSH
12433: LD_EXP 52
12437: AND
12438: IFFALSE 12582
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_OWVAR 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 21
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 34
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 34
12489: PUSH
12490: LD_INT 51
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 34
12499: PUSH
12500: LD_INT 32
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: ST_TO_ADDR
// if not tmp then
12523: LD_VAR 0 2
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12582
// for i in tmp do
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_VAR 0 2
12541: PUSH
12542: FOR_IN
12543: IFFALSE 12580
// if GetCargo ( i , mat_artifact ) = 0 then
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 4
12552: PPUSH
12553: CALL_OW 289
12557: PUSH
12558: LD_INT 0
12560: EQUAL
12561: IFFALSE 12578
// SetCargo ( i , mat_siberit , 100 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 3
12570: PPUSH
12571: LD_INT 100
12573: PPUSH
12574: CALL_OW 290
12578: GO 12542
12580: POP
12581: POP
// end ;
12582: PPOPN 2
12584: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12585: LD_EXP 8
12589: PUSH
12590: LD_EXP 53
12594: AND
12595: IFFALSE 12778
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_OWVAR 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: ST_TO_ADDR
// if not tmp then
12626: LD_VAR 0 2
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12778
// for i := 1 to 2 do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 2
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12776
// begin uc_side := your_side ;
12651: LD_ADDR_OWVAR 20
12655: PUSH
12656: LD_OWVAR 2
12660: ST_TO_ADDR
// uc_nation := nation_american ;
12661: LD_ADDR_OWVAR 21
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// vc_chassis := us_morphling ;
12669: LD_ADDR_OWVAR 37
12673: PUSH
12674: LD_INT 5
12676: ST_TO_ADDR
// vc_engine := engine_siberite ;
12677: LD_ADDR_OWVAR 39
12681: PUSH
12682: LD_INT 3
12684: ST_TO_ADDR
// vc_control := control_computer ;
12685: LD_ADDR_OWVAR 38
12689: PUSH
12690: LD_INT 3
12692: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12693: LD_ADDR_OWVAR 40
12697: PUSH
12698: LD_INT 10
12700: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12701: LD_VAR 0 2
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: PPUSH
12710: CALL_OW 310
12714: NOT
12715: IFFALSE 12762
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12717: CALL_OW 45
12721: PPUSH
12722: LD_VAR 0 2
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: CALL_OW 250
12735: PPUSH
12736: LD_VAR 0 2
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 251
12749: PPUSH
12750: LD_INT 12
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 50
12760: GO 12774
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12762: CALL_OW 45
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 51
// end ;
12774: GO 12648
12776: POP
12777: POP
// end ;
12778: PPOPN 2
12780: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12781: LD_EXP 8
12785: PUSH
12786: LD_EXP 54
12790: AND
12791: IFFALSE 13013
12793: GO 12795
12795: DISABLE
12796: LD_INT 0
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12804: LD_ADDR_VAR 0 6
12808: PUSH
12809: LD_INT 22
12811: PUSH
12812: LD_OWVAR 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: LD_INT 23
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// if not tmp then
12858: LD_VAR 0 6
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 13013
// s1 := rand ( 1 , 4 ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 4
12877: PPUSH
12878: CALL_OW 12
12882: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12883: LD_ADDR_VAR 0 4
12887: PUSH
12888: LD_VAR 0 6
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: CALL_OW 259
12906: ST_TO_ADDR
// if s1 = 1 then
12907: LD_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: EQUAL
12915: IFFALSE 12935
// s2 := rand ( 2 , 4 ) else
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_INT 2
12924: PPUSH
12925: LD_INT 4
12927: PPUSH
12928: CALL_OW 12
12932: ST_TO_ADDR
12933: GO 12943
// s2 := 1 ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12943: LD_ADDR_VAR 0 5
12947: PUSH
12948: LD_VAR 0 6
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: CALL_OW 259
12966: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12967: LD_VAR 0 6
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: LD_VAR 0 5
12985: PPUSH
12986: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12990: LD_VAR 0 6
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_VAR 0 4
13008: PPUSH
13009: CALL_OW 237
// end ;
13013: PPOPN 6
13015: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13016: LD_EXP 8
13020: PUSH
13021: LD_EXP 55
13025: AND
13026: IFFALSE 13105
13028: GO 13030
13030: DISABLE
13031: LD_INT 0
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 3
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// if not tmp then
13070: LD_VAR 0 1
13074: NOT
13075: IFFALSE 13079
// exit ;
13077: GO 13105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13079: LD_VAR 0 1
13083: PUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 12
13096: ARRAY
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 234
// end ;
13105: PPOPN 1
13107: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13108: LD_EXP 8
13112: PUSH
13113: LD_EXP 56
13117: AND
13118: IFFALSE 13230
13120: GO 13122
13122: DISABLE
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_OWVAR 2
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 27
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 30
13159: PUSH
13160: LD_INT 26
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 30
13169: PUSH
13170: LD_INT 28
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 2
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13230
// for i in tmp do
13201: LD_ADDR_VAR 0 1
13205: PUSH
13206: LD_VAR 0 2
13210: PUSH
13211: FOR_IN
13212: IFFALSE 13228
// SetLives ( i , 1 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 234
13226: GO 13211
13228: POP
13229: POP
// end ;
13230: PPOPN 2
13232: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13233: LD_EXP 8
13237: PUSH
13238: LD_EXP 57
13242: AND
13243: IFFALSE 13530
13245: GO 13247
13247: DISABLE
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
// begin i := rand ( 1 , 7 ) ;
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 7
13263: PPUSH
13264: CALL_OW 12
13268: ST_TO_ADDR
// case i of 1 :
13269: LD_VAR 0 1
13273: PUSH
13274: LD_INT 1
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13292
13282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13283: LD_STRING earthquake(getX(game), 0, 32)
13285: PPUSH
13286: CALL_OW 559
13290: GO 13530
13292: LD_INT 2
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13314
13300: POP
// begin ToLua ( displayStucuk(); ) ;
13301: LD_STRING displayStucuk();
13303: PPUSH
13304: CALL_OW 559
// ResetFog ;
13308: CALL_OW 335
// end ; 3 :
13312: GO 13530
13314: LD_INT 3
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13426
13322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13323: LD_ADDR_VAR 0 2
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_OWVAR 2
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 69
13358: ST_TO_ADDR
// if not tmp then
13359: LD_VAR 0 2
13363: NOT
13364: IFFALSE 13368
// exit ;
13366: GO 13530
// un := tmp [ rand ( 1 , tmp ) ] ;
13368: LD_ADDR_VAR 0 3
13372: PUSH
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 1
13380: PPUSH
13381: LD_VAR 0 2
13385: PPUSH
13386: CALL_OW 12
13390: ARRAY
13391: ST_TO_ADDR
// if Crawls ( un ) then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 318
13401: IFFALSE 13412
// ComWalk ( un ) ;
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 8
13419: PPUSH
13420: CALL_OW 336
// end ; 4 :
13424: GO 13530
13426: LD_INT 4
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13508
13434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_OWVAR 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 29
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 69
13470: ST_TO_ADDR
// if not tmp then
13471: LD_VAR 0 2
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13480: LD_VAR 0 2
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13493: LD_VAR 0 2
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: CALL_OW 65
// end ; 5 .. 7 :
13506: GO 13530
13508: LD_INT 5
13510: DOUBLE
13511: GREATEREQUAL
13512: IFFALSE 13520
13514: LD_INT 7
13516: DOUBLE
13517: LESSEQUAL
13518: IFTRUE 13522
13520: GO 13529
13522: POP
// StreamSibBomb ; end ;
13523: CALL 9767 0 0
13527: GO 13530
13529: POP
// end ;
13530: PPOPN 3
13532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13533: LD_EXP 8
13537: PUSH
13538: LD_EXP 58
13542: AND
13543: IFFALSE 13699
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13553: LD_ADDR_VAR 0 2
13557: PUSH
13558: LD_INT 81
13560: PUSH
13561: LD_OWVAR 2
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 21
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 69
13606: ST_TO_ADDR
// if not tmp then
13607: LD_VAR 0 2
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 13699
// p := 0 ;
13616: LD_ADDR_VAR 0 3
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// p := p + 1 ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 1
13643: PLUS
13644: ST_TO_ADDR
// for i in tmp do
13645: LD_ADDR_VAR 0 1
13649: PUSH
13650: LD_VAR 0 2
13654: PUSH
13655: FOR_IN
13656: IFFALSE 13687
// if GetLives ( i ) < 1000 then
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 256
13667: PUSH
13668: LD_INT 1000
13670: LESS
13671: IFFALSE 13685
// SetLives ( i , 1000 ) ;
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 1000
13680: PPUSH
13681: CALL_OW 234
13685: GO 13655
13687: POP
13688: POP
// until p > 20 ;
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 20
13696: GREATER
13697: IFFALSE 13624
// end ;
13699: PPOPN 3
13701: END
// every 0 0$1 trigger StreamModeActive and sTime do
13702: LD_EXP 8
13706: PUSH
13707: LD_EXP 59
13711: AND
13712: IFFALSE 13747
13714: GO 13716
13716: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13717: LD_INT 28
13719: PPUSH
13720: LD_OWVAR 2
13724: PPUSH
13725: LD_INT 2
13727: PPUSH
13728: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13732: LD_INT 30
13734: PPUSH
13735: LD_OWVAR 2
13739: PPUSH
13740: LD_INT 2
13742: PPUSH
13743: CALL_OW 322
// end ;
13747: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13748: LD_EXP 8
13752: PUSH
13753: LD_EXP 60
13757: AND
13758: IFFALSE 13879
13760: GO 13762
13762: DISABLE
13763: LD_INT 0
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13767: LD_ADDR_VAR 0 2
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 3
13796: PUSH
13797: LD_INT 23
13799: PUSH
13800: LD_INT 0
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: ST_TO_ADDR
// if not tmp then
13821: LD_VAR 0 2
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13879
// for i in tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_VAR 0 2
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13877
// begin if Crawls ( i ) then
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 318
13852: IFFALSE 13863
// ComWalk ( i ) ;
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 138
// SetClass ( i , 2 ) ;
13863: LD_VAR 0 1
13867: PPUSH
13868: LD_INT 2
13870: PPUSH
13871: CALL_OW 336
// end ;
13875: GO 13840
13877: POP
13878: POP
// end ;
13879: PPOPN 2
13881: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13882: LD_EXP 8
13886: PUSH
13887: LD_EXP 61
13891: AND
13892: IFFALSE 14180
13894: GO 13896
13896: DISABLE
13897: LD_INT 0
13899: PPUSH
13900: PPUSH
13901: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13902: LD_OWVAR 2
13906: PPUSH
13907: LD_INT 9
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13920: LD_INT 9
13922: PPUSH
13923: LD_OWVAR 2
13927: PPUSH
13928: CALL_OW 343
// uc_side := 9 ;
13932: LD_ADDR_OWVAR 20
13936: PUSH
13937: LD_INT 9
13939: ST_TO_ADDR
// uc_nation := 2 ;
13940: LD_ADDR_OWVAR 21
13944: PUSH
13945: LD_INT 2
13947: ST_TO_ADDR
// hc_name := Dark Warrior ;
13948: LD_ADDR_OWVAR 26
13952: PUSH
13953: LD_STRING Dark Warrior
13955: ST_TO_ADDR
// hc_gallery :=  ;
13956: LD_ADDR_OWVAR 33
13960: PUSH
13961: LD_STRING 
13963: ST_TO_ADDR
// hc_noskilllimit := true ;
13964: LD_ADDR_OWVAR 76
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13972: LD_ADDR_OWVAR 31
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: ST_TO_ADDR
// un := CreateHuman ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: CALL_OW 44
14004: ST_TO_ADDR
// hc_noskilllimit := false ;
14005: LD_ADDR_OWVAR 76
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14013: LD_VAR 0 3
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 51
// ToLua ( playRanger() ) ;
14025: LD_STRING playRanger()
14027: PPUSH
14028: CALL_OW 559
// p := 0 ;
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: LD_INT 0
14039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14040: LD_INT 35
14042: PPUSH
14043: CALL_OW 67
// p := p + 1 ;
14047: LD_ADDR_VAR 0 2
14051: PUSH
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 1
14059: PLUS
14060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14061: LD_VAR 0 3
14065: PPUSH
14066: CALL_OW 256
14070: PUSH
14071: LD_INT 1000
14073: LESS
14074: IFFALSE 14088
// SetLives ( un , 1000 ) ;
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1000
14083: PPUSH
14084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 81
14095: PUSH
14096: LD_OWVAR 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_VAR 0 3
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: PPUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: CALL_OW 74
14139: PPUSH
14140: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14144: LD_VAR 0 2
14148: PUSH
14149: LD_INT 80
14151: GREATER
14152: PUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: CALL_OW 301
14162: OR
14163: IFFALSE 14040
// if un then
14165: LD_VAR 0 3
14169: IFFALSE 14180
// RemoveUnit ( un ) ;
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 64
// end ;
14180: PPOPN 3
14182: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14183: LD_EXP 62
14187: IFFALSE 14303
14189: GO 14191
14191: DISABLE
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_INT 81
14204: PUSH
14205: LD_OWVAR 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14233: LD_STRING playComputer()
14235: PPUSH
14236: CALL_OW 559
// if not tmp then
14240: LD_VAR 0 2
14244: NOT
14245: IFFALSE 14249
// exit ;
14247: GO 14303
// for i in tmp do
14249: LD_ADDR_VAR 0 1
14253: PUSH
14254: LD_VAR 0 2
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14301
// for j := 1 to 4 do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: DOUBLE
14268: LD_INT 1
14270: DEC
14271: ST_TO_ADDR
14272: LD_INT 4
14274: PUSH
14275: FOR_TO
14276: IFFALSE 14297
// SetSkill ( i , j , 10 ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_INT 10
14290: PPUSH
14291: CALL_OW 237
14295: GO 14275
14297: POP
14298: POP
14299: GO 14259
14301: POP
14302: POP
// end ;
14303: PPOPN 3
14305: END
// every 0 0$1 trigger s30 do var i , tmp ;
14306: LD_EXP 63
14310: IFFALSE 14379
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_OWVAR 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 69
14340: ST_TO_ADDR
// if not tmp then
14341: LD_VAR 0 2
14345: NOT
14346: IFFALSE 14350
// exit ;
14348: GO 14379
// for i in tmp do
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_VAR 0 2
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14377
// SetLives ( i , 300 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_INT 300
14370: PPUSH
14371: CALL_OW 234
14375: GO 14360
14377: POP
14378: POP
// end ;
14379: PPOPN 2
14381: END
// every 0 0$1 trigger s60 do var i , tmp ;
14382: LD_EXP 64
14386: IFFALSE 14455
14388: GO 14390
14390: DISABLE
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_OWVAR 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: ST_TO_ADDR
// if not tmp then
14417: LD_VAR 0 2
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14455
// for i in tmp do
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 2
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14453
// SetLives ( i , 600 ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: LD_INT 600
14446: PPUSH
14447: CALL_OW 234
14451: GO 14436
14453: POP
14454: POP
// end ;
14455: PPOPN 2
14457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14458: LD_INT 0
14460: PPUSH
// case cmd of 301 :
14461: LD_VAR 0 1
14465: PUSH
14466: LD_INT 301
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14506
14474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14475: LD_VAR 0 6
14479: PPUSH
14480: LD_VAR 0 7
14484: PPUSH
14485: LD_VAR 0 8
14489: PPUSH
14490: LD_VAR 0 4
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: CALL 15715 0 5
14504: GO 14627
14506: LD_INT 302
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14551
14514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14515: LD_VAR 0 6
14519: PPUSH
14520: LD_VAR 0 7
14524: PPUSH
14525: LD_VAR 0 8
14529: PPUSH
14530: LD_VAR 0 9
14534: PPUSH
14535: LD_VAR 0 4
14539: PPUSH
14540: LD_VAR 0 5
14544: PPUSH
14545: CALL 15806 0 6
14549: GO 14627
14551: LD_INT 303
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14596
14559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14560: LD_VAR 0 6
14564: PPUSH
14565: LD_VAR 0 7
14569: PPUSH
14570: LD_VAR 0 8
14574: PPUSH
14575: LD_VAR 0 9
14579: PPUSH
14580: LD_VAR 0 4
14584: PPUSH
14585: LD_VAR 0 5
14589: PPUSH
14590: CALL 14632 0 6
14594: GO 14627
14596: LD_INT 304
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14626
14604: POP
// hHackTeleport ( unit , x , y ) ; end ;
14605: LD_VAR 0 2
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: LD_VAR 0 5
14619: PPUSH
14620: CALL 16399 0 3
14624: GO 14627
14626: POP
// end ;
14627: LD_VAR 0 12
14631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: LESS
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 3
14652: GREATER
14653: OR
14654: PUSH
14655: LD_VAR 0 5
14659: PPUSH
14660: LD_VAR 0 6
14664: PPUSH
14665: CALL_OW 428
14669: OR
14670: IFFALSE 14674
// exit ;
14672: GO 15402
// uc_side := your_side ;
14674: LD_ADDR_OWVAR 20
14678: PUSH
14679: LD_OWVAR 2
14683: ST_TO_ADDR
// uc_nation := nation ;
14684: LD_ADDR_OWVAR 21
14688: PUSH
14689: LD_VAR 0 1
14693: ST_TO_ADDR
// bc_level = 1 ;
14694: LD_ADDR_OWVAR 43
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// case btype of 1 :
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 1
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14726
14715: POP
// bc_type := b_depot ; 2 :
14716: LD_ADDR_OWVAR 42
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
14724: GO 15346
14726: LD_INT 2
14728: DOUBLE
14729: EQUAL
14730: IFTRUE 14734
14732: GO 14745
14734: POP
// bc_type := b_warehouse ; 3 :
14735: LD_ADDR_OWVAR 42
14739: PUSH
14740: LD_INT 1
14742: ST_TO_ADDR
14743: GO 15346
14745: LD_INT 3
14747: DOUBLE
14748: EQUAL
14749: IFTRUE 14753
14751: GO 14764
14753: POP
// bc_type := b_lab ; 4 .. 9 :
14754: LD_ADDR_OWVAR 42
14758: PUSH
14759: LD_INT 6
14761: ST_TO_ADDR
14762: GO 15346
14764: LD_INT 4
14766: DOUBLE
14767: GREATEREQUAL
14768: IFFALSE 14776
14770: LD_INT 9
14772: DOUBLE
14773: LESSEQUAL
14774: IFTRUE 14778
14776: GO 14838
14778: POP
// begin bc_type := b_lab_half ;
14779: LD_ADDR_OWVAR 42
14783: PUSH
14784: LD_INT 7
14786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14787: LD_ADDR_OWVAR 44
14791: PUSH
14792: LD_INT 10
14794: PUSH
14795: LD_INT 11
14797: PUSH
14798: LD_INT 12
14800: PUSH
14801: LD_INT 15
14803: PUSH
14804: LD_INT 14
14806: PUSH
14807: LD_INT 13
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: LD_INT 3
14825: MINUS
14826: ARRAY
14827: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14828: LD_ADDR_OWVAR 45
14832: PUSH
14833: LD_INT 9
14835: ST_TO_ADDR
// end ; 10 .. 13 :
14836: GO 15346
14838: LD_INT 10
14840: DOUBLE
14841: GREATEREQUAL
14842: IFFALSE 14850
14844: LD_INT 13
14846: DOUBLE
14847: LESSEQUAL
14848: IFTRUE 14852
14850: GO 14929
14852: POP
// begin bc_type := b_lab_full ;
14853: LD_ADDR_OWVAR 42
14857: PUSH
14858: LD_INT 8
14860: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14861: LD_ADDR_OWVAR 44
14865: PUSH
14866: LD_INT 10
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: LD_INT 14
14874: PUSH
14875: LD_INT 13
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_VAR 0 2
14888: PUSH
14889: LD_INT 9
14891: MINUS
14892: ARRAY
14893: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14894: LD_ADDR_OWVAR 45
14898: PUSH
14899: LD_INT 11
14901: PUSH
14902: LD_INT 15
14904: PUSH
14905: LD_INT 12
14907: PUSH
14908: LD_INT 15
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: PUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 9
14924: MINUS
14925: ARRAY
14926: ST_TO_ADDR
// end ; 14 :
14927: GO 15346
14929: LD_INT 14
14931: DOUBLE
14932: EQUAL
14933: IFTRUE 14937
14935: GO 14948
14937: POP
// bc_type := b_workshop ; 15 :
14938: LD_ADDR_OWVAR 42
14942: PUSH
14943: LD_INT 2
14945: ST_TO_ADDR
14946: GO 15346
14948: LD_INT 15
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 14967
14956: POP
// bc_type := b_factory ; 16 :
14957: LD_ADDR_OWVAR 42
14961: PUSH
14962: LD_INT 3
14964: ST_TO_ADDR
14965: GO 15346
14967: LD_INT 16
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14975
14973: GO 14986
14975: POP
// bc_type := b_ext_gun ; 17 :
14976: LD_ADDR_OWVAR 42
14980: PUSH
14981: LD_INT 17
14983: ST_TO_ADDR
14984: GO 15346
14986: LD_INT 17
14988: DOUBLE
14989: EQUAL
14990: IFTRUE 14994
14992: GO 15022
14994: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14995: LD_ADDR_OWVAR 42
14999: PUSH
15000: LD_INT 19
15002: PUSH
15003: LD_INT 23
15005: PUSH
15006: LD_INT 19
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_VAR 0 1
15018: ARRAY
15019: ST_TO_ADDR
15020: GO 15346
15022: LD_INT 18
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15041
15030: POP
// bc_type := b_ext_radar ; 19 :
15031: LD_ADDR_OWVAR 42
15035: PUSH
15036: LD_INT 20
15038: ST_TO_ADDR
15039: GO 15346
15041: LD_INT 19
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15060
15049: POP
// bc_type := b_ext_radio ; 20 :
15050: LD_ADDR_OWVAR 42
15054: PUSH
15055: LD_INT 22
15057: ST_TO_ADDR
15058: GO 15346
15060: LD_INT 20
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15079
15068: POP
// bc_type := b_ext_siberium ; 21 :
15069: LD_ADDR_OWVAR 42
15073: PUSH
15074: LD_INT 21
15076: ST_TO_ADDR
15077: GO 15346
15079: LD_INT 21
15081: DOUBLE
15082: EQUAL
15083: IFTRUE 15087
15085: GO 15098
15087: POP
// bc_type := b_ext_computer ; 22 :
15088: LD_ADDR_OWVAR 42
15092: PUSH
15093: LD_INT 24
15095: ST_TO_ADDR
15096: GO 15346
15098: LD_INT 22
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15117
15106: POP
// bc_type := b_ext_track ; 23 :
15107: LD_ADDR_OWVAR 42
15111: PUSH
15112: LD_INT 16
15114: ST_TO_ADDR
15115: GO 15346
15117: LD_INT 23
15119: DOUBLE
15120: EQUAL
15121: IFTRUE 15125
15123: GO 15136
15125: POP
// bc_type := b_ext_laser ; 24 :
15126: LD_ADDR_OWVAR 42
15130: PUSH
15131: LD_INT 25
15133: ST_TO_ADDR
15134: GO 15346
15136: LD_INT 24
15138: DOUBLE
15139: EQUAL
15140: IFTRUE 15144
15142: GO 15155
15144: POP
// bc_type := b_control_tower ; 25 :
15145: LD_ADDR_OWVAR 42
15149: PUSH
15150: LD_INT 36
15152: ST_TO_ADDR
15153: GO 15346
15155: LD_INT 25
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15174
15163: POP
// bc_type := b_breastwork ; 26 :
15164: LD_ADDR_OWVAR 42
15168: PUSH
15169: LD_INT 31
15171: ST_TO_ADDR
15172: GO 15346
15174: LD_INT 26
15176: DOUBLE
15177: EQUAL
15178: IFTRUE 15182
15180: GO 15193
15182: POP
// bc_type := b_bunker ; 27 :
15183: LD_ADDR_OWVAR 42
15187: PUSH
15188: LD_INT 32
15190: ST_TO_ADDR
15191: GO 15346
15193: LD_INT 27
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 15212
15201: POP
// bc_type := b_turret ; 28 :
15202: LD_ADDR_OWVAR 42
15206: PUSH
15207: LD_INT 33
15209: ST_TO_ADDR
15210: GO 15346
15212: LD_INT 28
15214: DOUBLE
15215: EQUAL
15216: IFTRUE 15220
15218: GO 15231
15220: POP
// bc_type := b_armoury ; 29 :
15221: LD_ADDR_OWVAR 42
15225: PUSH
15226: LD_INT 4
15228: ST_TO_ADDR
15229: GO 15346
15231: LD_INT 29
15233: DOUBLE
15234: EQUAL
15235: IFTRUE 15239
15237: GO 15250
15239: POP
// bc_type := b_barracks ; 30 :
15240: LD_ADDR_OWVAR 42
15244: PUSH
15245: LD_INT 5
15247: ST_TO_ADDR
15248: GO 15346
15250: LD_INT 30
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15258
15256: GO 15269
15258: POP
// bc_type := b_solar_power ; 31 :
15259: LD_ADDR_OWVAR 42
15263: PUSH
15264: LD_INT 27
15266: ST_TO_ADDR
15267: GO 15346
15269: LD_INT 31
15271: DOUBLE
15272: EQUAL
15273: IFTRUE 15277
15275: GO 15288
15277: POP
// bc_type := b_oil_power ; 32 :
15278: LD_ADDR_OWVAR 42
15282: PUSH
15283: LD_INT 26
15285: ST_TO_ADDR
15286: GO 15346
15288: LD_INT 32
15290: DOUBLE
15291: EQUAL
15292: IFTRUE 15296
15294: GO 15307
15296: POP
// bc_type := b_siberite_power ; 33 :
15297: LD_ADDR_OWVAR 42
15301: PUSH
15302: LD_INT 28
15304: ST_TO_ADDR
15305: GO 15346
15307: LD_INT 33
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15326
15315: POP
// bc_type := b_oil_mine ; 34 :
15316: LD_ADDR_OWVAR 42
15320: PUSH
15321: LD_INT 29
15323: ST_TO_ADDR
15324: GO 15346
15326: LD_INT 34
15328: DOUBLE
15329: EQUAL
15330: IFTRUE 15334
15332: GO 15345
15334: POP
// bc_type := b_siberite_mine ; end ;
15335: LD_ADDR_OWVAR 42
15339: PUSH
15340: LD_INT 30
15342: ST_TO_ADDR
15343: GO 15346
15345: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15346: LD_ADDR_VAR 0 8
15350: PUSH
15351: LD_VAR 0 5
15355: PPUSH
15356: LD_VAR 0 6
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: CALL_OW 47
15370: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15371: LD_OWVAR 42
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: IN
15386: IFFALSE 15402
// PlaceWeaponTurret ( b , weapon ) ;
15388: LD_VAR 0 8
15392: PPUSH
15393: LD_VAR 0 4
15397: PPUSH
15398: CALL_OW 431
// end ;
15402: LD_VAR 0 7
15406: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15407: LD_INT 0
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15413: LD_ADDR_VAR 0 4
15417: PUSH
15418: LD_INT 22
15420: PUSH
15421: LD_OWVAR 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: ST_TO_ADDR
// if not tmp then
15467: LD_VAR 0 4
15471: NOT
15472: IFFALSE 15476
// exit ;
15474: GO 15535
// for i in tmp do
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_VAR 0 4
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15533
// for j = 1 to 3 do
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 3
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15529
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: CALL_OW 274
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 99999
15522: PPUSH
15523: CALL_OW 277
15527: GO 15502
15529: POP
15530: POP
15531: GO 15486
15533: POP
15534: POP
// end ;
15535: LD_VAR 0 1
15539: RET
// export function hHackSetLevel10 ; var i , j ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15545: LD_ADDR_VAR 0 2
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PUSH
15565: FOR_IN
15566: IFFALSE 15618
// if IsSelected ( i ) then
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL_OW 306
15577: IFFALSE 15616
// begin for j := 1 to 4 do
15579: LD_ADDR_VAR 0 3
15583: PUSH
15584: DOUBLE
15585: LD_INT 1
15587: DEC
15588: ST_TO_ADDR
15589: LD_INT 4
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15614
// SetSkill ( i , j , 10 ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_VAR 0 3
15604: PPUSH
15605: LD_INT 10
15607: PPUSH
15608: CALL_OW 237
15612: GO 15592
15614: POP
15615: POP
// end ;
15616: GO 15565
15618: POP
15619: POP
// end ;
15620: LD_VAR 0 1
15624: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
15629: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15708
// begin for j := 1 to 4 do
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: DOUBLE
15675: LD_INT 1
15677: DEC
15678: ST_TO_ADDR
15679: LD_INT 4
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15704
// SetSkill ( i , j , 10 ) ;
15685: LD_VAR 0 2
15689: PPUSH
15690: LD_VAR 0 3
15694: PPUSH
15695: LD_INT 10
15697: PPUSH
15698: CALL_OW 237
15702: GO 15682
15704: POP
15705: POP
// end ;
15706: GO 15666
15708: POP
15709: POP
// end ;
15710: LD_VAR 0 1
15714: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15715: LD_INT 0
15717: PPUSH
// uc_side := your_side ;
15718: LD_ADDR_OWVAR 20
15722: PUSH
15723: LD_OWVAR 2
15727: ST_TO_ADDR
// uc_nation := nation ;
15728: LD_ADDR_OWVAR 21
15732: PUSH
15733: LD_VAR 0 1
15737: ST_TO_ADDR
// InitHc ;
15738: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15742: LD_INT 0
15744: PPUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_VAR 0 5
15768: PPUSH
15769: CALL_OW 428
15773: PUSH
15774: LD_INT 0
15776: EQUAL
15777: IFFALSE 15801
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15779: CALL_OW 44
15783: PPUSH
15784: LD_VAR 0 4
15788: PPUSH
15789: LD_VAR 0 5
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 48
// end ;
15801: LD_VAR 0 6
15805: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15806: LD_INT 0
15808: PPUSH
15809: PPUSH
// uc_side := your_side ;
15810: LD_ADDR_OWVAR 20
15814: PUSH
15815: LD_OWVAR 2
15819: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 4
15836: PUSH
15837: LD_INT 5
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: IN
15847: IFFALSE 15859
// uc_nation := nation_american else
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
15857: GO 15902
// if chassis in [ 11 , 12 , 13 , 14 ] then
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 13
15872: PUSH
15873: LD_INT 14
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: IN
15882: IFFALSE 15894
// uc_nation := nation_arabian else
15884: LD_ADDR_OWVAR 21
15888: PUSH
15889: LD_INT 2
15891: ST_TO_ADDR
15892: GO 15902
// uc_nation := nation_russian ;
15894: LD_ADDR_OWVAR 21
15898: PUSH
15899: LD_INT 3
15901: ST_TO_ADDR
// vc_chassis := chassis ;
15902: LD_ADDR_OWVAR 37
15906: PUSH
15907: LD_VAR 0 1
15911: ST_TO_ADDR
// vc_engine := engine ;
15912: LD_ADDR_OWVAR 39
15916: PUSH
15917: LD_VAR 0 2
15921: ST_TO_ADDR
// vc_control := control ;
15922: LD_ADDR_OWVAR 38
15926: PUSH
15927: LD_VAR 0 3
15931: ST_TO_ADDR
// vc_weapon := weapon ;
15932: LD_ADDR_OWVAR 40
15936: PUSH
15937: LD_VAR 0 4
15941: ST_TO_ADDR
// un := CreateVehicle ;
15942: LD_ADDR_VAR 0 8
15946: PUSH
15947: CALL_OW 45
15951: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15952: LD_VAR 0 8
15956: PPUSH
15957: LD_INT 0
15959: PPUSH
15960: LD_INT 5
15962: PPUSH
15963: CALL_OW 12
15967: PPUSH
15968: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15972: LD_VAR 0 8
15976: PPUSH
15977: LD_VAR 0 5
15981: PPUSH
15982: LD_VAR 0 6
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 48
// end ;
15994: LD_VAR 0 7
15998: RET
// export hInvincible ; every 1 do
15999: GO 16001
16001: DISABLE
// hInvincible := [ ] ;
16002: LD_ADDR_EXP 65
16006: PUSH
16007: EMPTY
16008: ST_TO_ADDR
16009: END
// every 10 do var i ;
16010: GO 16012
16012: DISABLE
16013: LD_INT 0
16015: PPUSH
// begin enable ;
16016: ENABLE
// if not hInvincible then
16017: LD_EXP 65
16021: NOT
16022: IFFALSE 16026
// exit ;
16024: GO 16070
// for i in hInvincible do
16026: LD_ADDR_VAR 0 1
16030: PUSH
16031: LD_EXP 65
16035: PUSH
16036: FOR_IN
16037: IFFALSE 16068
// if GetLives ( i ) < 1000 then
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 256
16048: PUSH
16049: LD_INT 1000
16051: LESS
16052: IFFALSE 16066
// SetLives ( i , 1000 ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: LD_INT 1000
16061: PPUSH
16062: CALL_OW 234
16066: GO 16036
16068: POP
16069: POP
// end ;
16070: PPOPN 1
16072: END
// export function hHackInvincible ; var i ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 21
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: PUSH
16115: FOR_IN
16116: IFFALSE 16177
// if IsSelected ( i ) then
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 306
16127: IFFALSE 16175
// begin if i in hInvincible then
16129: LD_VAR 0 2
16133: PUSH
16134: LD_EXP 65
16138: IN
16139: IFFALSE 16159
// hInvincible := hInvincible diff i else
16141: LD_ADDR_EXP 65
16145: PUSH
16146: LD_EXP 65
16150: PUSH
16151: LD_VAR 0 2
16155: DIFF
16156: ST_TO_ADDR
16157: GO 16175
// hInvincible := hInvincible union i ;
16159: LD_ADDR_EXP 65
16163: PUSH
16164: LD_EXP 65
16168: PUSH
16169: LD_VAR 0 2
16173: UNION
16174: ST_TO_ADDR
// end ;
16175: GO 16115
16177: POP
16178: POP
// end ;
16179: LD_VAR 0 1
16183: RET
// export function hHackInvisible ; var i , j ; begin
16184: LD_INT 0
16186: PPUSH
16187: PPUSH
16188: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: LD_INT 21
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 69
16208: PUSH
16209: FOR_IN
16210: IFFALSE 16234
// if IsSelected ( i ) then
16212: LD_VAR 0 2
16216: PPUSH
16217: CALL_OW 306
16221: IFFALSE 16232
// ComForceInvisible ( i ) ;
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 496
16232: GO 16209
16234: POP
16235: POP
// end ;
16236: LD_VAR 0 1
16240: RET
// export function hHackChangeYourSide ; begin
16241: LD_INT 0
16243: PPUSH
// if your_side = 8 then
16244: LD_OWVAR 2
16248: PUSH
16249: LD_INT 8
16251: EQUAL
16252: IFFALSE 16264
// your_side := 0 else
16254: LD_ADDR_OWVAR 2
16258: PUSH
16259: LD_INT 0
16261: ST_TO_ADDR
16262: GO 16278
// your_side := your_side + 1 ;
16264: LD_ADDR_OWVAR 2
16268: PUSH
16269: LD_OWVAR 2
16273: PUSH
16274: LD_INT 1
16276: PLUS
16277: ST_TO_ADDR
// end ;
16278: LD_VAR 0 1
16282: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16283: LD_INT 0
16285: PPUSH
16286: PPUSH
16287: PPUSH
// for i in all_units do
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_OWVAR 3
16297: PUSH
16298: FOR_IN
16299: IFFALSE 16377
// if IsSelected ( i ) then
16301: LD_VAR 0 2
16305: PPUSH
16306: CALL_OW 306
16310: IFFALSE 16375
// begin j := GetSide ( i ) ;
16312: LD_ADDR_VAR 0 3
16316: PUSH
16317: LD_VAR 0 2
16321: PPUSH
16322: CALL_OW 255
16326: ST_TO_ADDR
// if j = 8 then
16327: LD_VAR 0 3
16331: PUSH
16332: LD_INT 8
16334: EQUAL
16335: IFFALSE 16347
// j := 0 else
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
16345: GO 16361
// j := j + 1 ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 1
16359: PLUS
16360: ST_TO_ADDR
// SetSide ( i , j ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: LD_VAR 0 3
16370: PPUSH
16371: CALL_OW 235
// end ;
16375: GO 16298
16377: POP
16378: POP
// end ;
16379: LD_VAR 0 1
16383: RET
// export function hHackFog ; begin
16384: LD_INT 0
16386: PPUSH
// FogOff ( true ) ;
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 344
// end ;
16394: LD_VAR 0 1
16398: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16399: LD_INT 0
16401: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 483
// CenterOnXY ( x , y ) ;
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: CALL_OW 84
// end ;
16441: LD_VAR 0 4
16445: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16450: LD_VAR 0 1
16454: NOT
16455: PUSH
16456: LD_VAR 0 2
16460: PPUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: CALL_OW 488
16470: NOT
16471: OR
16472: PUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 266
16482: PUSH
16483: LD_INT 3
16485: NONEQUAL
16486: PUSH
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 247
16496: PUSH
16497: LD_INT 1
16499: EQUAL
16500: NOT
16501: AND
16502: OR
16503: IFFALSE 16507
// exit ;
16505: GO 16656
// if GetType ( factory ) = unit_human then
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 247
16516: PUSH
16517: LD_INT 1
16519: EQUAL
16520: IFFALSE 16537
// factory := IsInUnit ( factory ) ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 310
16536: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 266
16546: PUSH
16547: LD_INT 3
16549: NONEQUAL
16550: IFFALSE 16554
// exit ;
16552: GO 16656
// if HexInfo ( x , y ) = factory then
16554: LD_VAR 0 2
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: CALL_OW 428
16568: PUSH
16569: LD_VAR 0 1
16573: EQUAL
16574: IFFALSE 16601
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16576: LD_ADDR_EXP 66
16580: PUSH
16581: LD_EXP 66
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 0
16593: PPUSH
16594: CALL_OW 1
16598: ST_TO_ADDR
16599: GO 16652
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16601: LD_ADDR_EXP 66
16605: PUSH
16606: LD_EXP 66
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 255
16625: PUSH
16626: LD_VAR 0 1
16630: PUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_VAR 0 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 1
16651: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16652: CALL 16661 0 0
// end ;
16656: LD_VAR 0 4
16660: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
16665: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16666: LD_STRING resetFactoryWaypoint();
16668: PPUSH
16669: CALL_OW 559
// if factoryWaypoints then
16673: LD_EXP 66
16677: IFFALSE 16803
// begin list := PrepareArray ( factoryWaypoints ) ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_EXP 66
16688: PPUSH
16689: CALL 64108 0 1
16693: ST_TO_ADDR
// for i := 1 to list do
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: DOUBLE
16700: LD_INT 1
16702: DEC
16703: ST_TO_ADDR
16704: LD_VAR 0 3
16708: PUSH
16709: FOR_TO
16710: IFFALSE 16801
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16712: LD_STRING setFactoryWaypointXY(
16714: PUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_VAR 0 2
16724: ARRAY
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: STR
16730: PUSH
16731: LD_STRING ,
16733: STR
16734: PUSH
16735: LD_VAR 0 3
16739: PUSH
16740: LD_VAR 0 2
16744: ARRAY
16745: PUSH
16746: LD_INT 2
16748: ARRAY
16749: STR
16750: PUSH
16751: LD_STRING ,
16753: STR
16754: PUSH
16755: LD_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: ARRAY
16765: PUSH
16766: LD_INT 3
16768: ARRAY
16769: STR
16770: PUSH
16771: LD_STRING ,
16773: STR
16774: PUSH
16775: LD_VAR 0 3
16779: PUSH
16780: LD_VAR 0 2
16784: ARRAY
16785: PUSH
16786: LD_INT 4
16788: ARRAY
16789: STR
16790: PUSH
16791: LD_STRING )
16793: STR
16794: PPUSH
16795: CALL_OW 559
16799: GO 16709
16801: POP
16802: POP
// end ; end ;
16803: LD_VAR 0 1
16807: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16808: LD_INT 0
16810: PPUSH
// if HexInfo ( x , y ) = warehouse then
16811: LD_VAR 0 2
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: CALL_OW 428
16825: PUSH
16826: LD_VAR 0 1
16830: EQUAL
16831: IFFALSE 16858
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16833: LD_ADDR_EXP 67
16837: PUSH
16838: LD_EXP 67
16842: PPUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: LD_INT 0
16850: PPUSH
16851: CALL_OW 1
16855: ST_TO_ADDR
16856: GO 16909
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16858: LD_ADDR_EXP 67
16862: PUSH
16863: LD_EXP 67
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 255
16882: PUSH
16883: LD_VAR 0 1
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_VAR 0 3
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 1
16908: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16909: CALL 16918 0 0
// end ;
16913: LD_VAR 0 4
16917: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16923: LD_STRING resetWarehouseGatheringPoints();
16925: PPUSH
16926: CALL_OW 559
// if warehouseGatheringPoints then
16930: LD_EXP 67
16934: IFFALSE 17060
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16936: LD_ADDR_VAR 0 3
16940: PUSH
16941: LD_EXP 67
16945: PPUSH
16946: CALL 64108 0 1
16950: ST_TO_ADDR
// for i := 1 to list do
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: DOUBLE
16957: LD_INT 1
16959: DEC
16960: ST_TO_ADDR
16961: LD_VAR 0 3
16965: PUSH
16966: FOR_TO
16967: IFFALSE 17058
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16969: LD_STRING setWarehouseGatheringPointXY(
16971: PUSH
16972: LD_VAR 0 3
16976: PUSH
16977: LD_VAR 0 2
16981: ARRAY
16982: PUSH
16983: LD_INT 1
16985: ARRAY
16986: STR
16987: PUSH
16988: LD_STRING ,
16990: STR
16991: PUSH
16992: LD_VAR 0 3
16996: PUSH
16997: LD_VAR 0 2
17001: ARRAY
17002: PUSH
17003: LD_INT 2
17005: ARRAY
17006: STR
17007: PUSH
17008: LD_STRING ,
17010: STR
17011: PUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_VAR 0 2
17021: ARRAY
17022: PUSH
17023: LD_INT 3
17025: ARRAY
17026: STR
17027: PUSH
17028: LD_STRING ,
17030: STR
17031: PUSH
17032: LD_VAR 0 3
17036: PUSH
17037: LD_VAR 0 2
17041: ARRAY
17042: PUSH
17043: LD_INT 4
17045: ARRAY
17046: STR
17047: PUSH
17048: LD_STRING )
17050: STR
17051: PPUSH
17052: CALL_OW 559
17056: GO 16966
17058: POP
17059: POP
// end ; end ;
17060: LD_VAR 0 1
17064: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17065: LD_EXP 67
17069: IFFALSE 17754
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
// begin enable ;
17085: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17086: LD_ADDR_VAR 0 3
17090: PUSH
17091: LD_EXP 67
17095: PPUSH
17096: CALL 64108 0 1
17100: ST_TO_ADDR
// if not list then
17101: LD_VAR 0 3
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17754
// for i := 1 to list do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_VAR 0 3
17124: PUSH
17125: FOR_TO
17126: IFFALSE 17752
// begin depot := list [ i ] [ 2 ] ;
17128: LD_ADDR_VAR 0 8
17132: PUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_VAR 0 1
17142: ARRAY
17143: PUSH
17144: LD_INT 2
17146: ARRAY
17147: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17148: LD_ADDR_VAR 0 5
17152: PUSH
17153: LD_VAR 0 3
17157: PUSH
17158: LD_VAR 0 1
17162: ARRAY
17163: PUSH
17164: LD_INT 1
17166: ARRAY
17167: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17168: LD_VAR 0 8
17172: PPUSH
17173: CALL_OW 301
17177: PUSH
17178: LD_VAR 0 5
17182: PUSH
17183: LD_VAR 0 8
17187: PPUSH
17188: CALL_OW 255
17192: NONEQUAL
17193: OR
17194: IFFALSE 17223
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17196: LD_ADDR_EXP 67
17200: PUSH
17201: LD_EXP 67
17205: PPUSH
17206: LD_VAR 0 8
17210: PPUSH
17211: LD_INT 0
17213: PPUSH
17214: CALL_OW 1
17218: ST_TO_ADDR
// exit ;
17219: POP
17220: POP
17221: GO 17754
// end ; x := list [ i ] [ 3 ] ;
17223: LD_ADDR_VAR 0 6
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 1
17237: ARRAY
17238: PUSH
17239: LD_INT 3
17241: ARRAY
17242: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17243: LD_ADDR_VAR 0 7
17247: PUSH
17248: LD_VAR 0 3
17252: PUSH
17253: LD_VAR 0 1
17257: ARRAY
17258: PUSH
17259: LD_INT 4
17261: ARRAY
17262: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17263: LD_ADDR_VAR 0 9
17267: PUSH
17268: LD_VAR 0 6
17272: PPUSH
17273: LD_VAR 0 7
17277: PPUSH
17278: LD_INT 16
17280: PPUSH
17281: CALL 62696 0 3
17285: ST_TO_ADDR
// if not cratesNearbyPoint then
17286: LD_VAR 0 9
17290: NOT
17291: IFFALSE 17297
// exit ;
17293: POP
17294: POP
17295: GO 17754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17297: LD_ADDR_VAR 0 4
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_VAR 0 5
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 60
17319: PUSH
17320: EMPTY
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 91
17329: PUSH
17330: LD_VAR 0 8
17334: PUSH
17335: LD_INT 6
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 25
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 25
17358: PUSH
17359: LD_INT 16
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: PUSH
17382: LD_VAR 0 8
17386: PPUSH
17387: CALL_OW 313
17391: PPUSH
17392: LD_INT 3
17394: PUSH
17395: LD_INT 60
17397: PUSH
17398: EMPTY
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 25
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 16
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 72
17441: UNION
17442: ST_TO_ADDR
// if tmp then
17443: LD_VAR 0 4
17447: IFFALSE 17527
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17449: LD_ADDR_VAR 0 4
17453: PUSH
17454: LD_VAR 0 4
17458: PPUSH
17459: LD_INT 3
17461: PPUSH
17462: CALL 60665 0 2
17466: ST_TO_ADDR
// for j in tmp do
17467: LD_ADDR_VAR 0 2
17471: PUSH
17472: LD_VAR 0 4
17476: PUSH
17477: FOR_IN
17478: IFFALSE 17521
// begin if IsInUnit ( j ) then
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 310
17489: IFFALSE 17500
// ComExit ( j ) ;
17491: LD_VAR 0 2
17495: PPUSH
17496: CALL 60748 0 1
// AddComCollect ( j , x , y ) ;
17500: LD_VAR 0 2
17504: PPUSH
17505: LD_VAR 0 6
17509: PPUSH
17510: LD_VAR 0 7
17514: PPUSH
17515: CALL_OW 177
// end ;
17519: GO 17477
17521: POP
17522: POP
// exit ;
17523: POP
17524: POP
17525: GO 17754
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17527: LD_ADDR_VAR 0 4
17531: PUSH
17532: LD_INT 22
17534: PUSH
17535: LD_VAR 0 5
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 91
17546: PUSH
17547: LD_VAR 0 8
17551: PUSH
17552: LD_INT 8
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 34
17565: PUSH
17566: LD_INT 12
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 34
17575: PUSH
17576: LD_INT 51
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 34
17585: PUSH
17586: LD_INT 32
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 34
17595: PUSH
17596: LD_INT 89
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if tmp then
17620: LD_VAR 0 4
17624: IFFALSE 17750
// begin for j in tmp do
17626: LD_ADDR_VAR 0 2
17630: PUSH
17631: LD_VAR 0 4
17635: PUSH
17636: FOR_IN
17637: IFFALSE 17748
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17639: LD_VAR 0 2
17643: PPUSH
17644: CALL_OW 262
17648: PUSH
17649: LD_INT 3
17651: EQUAL
17652: PUSH
17653: LD_VAR 0 2
17657: PPUSH
17658: CALL_OW 261
17662: PUSH
17663: LD_INT 20
17665: GREATER
17666: OR
17667: PUSH
17668: LD_VAR 0 2
17672: PPUSH
17673: CALL_OW 314
17677: NOT
17678: AND
17679: PUSH
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 263
17689: PUSH
17690: LD_INT 1
17692: NONEQUAL
17693: PUSH
17694: LD_VAR 0 2
17698: PPUSH
17699: CALL_OW 311
17703: OR
17704: AND
17705: IFFALSE 17746
// begin ComCollect ( j , x , y ) ;
17707: LD_VAR 0 2
17711: PPUSH
17712: LD_VAR 0 6
17716: PPUSH
17717: LD_VAR 0 7
17721: PPUSH
17722: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17726: LD_VAR 0 2
17730: PPUSH
17731: LD_VAR 0 8
17735: PPUSH
17736: CALL_OW 172
// exit ;
17740: POP
17741: POP
17742: POP
17743: POP
17744: GO 17754
// end ;
17746: GO 17636
17748: POP
17749: POP
// end ; end ;
17750: GO 17125
17752: POP
17753: POP
// end ; end_of_file
17754: PPOPN 9
17756: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 264
17772: PUSH
17773: LD_INT 91
17775: EQUAL
17776: IFFALSE 17848
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17778: LD_INT 68
17780: PPUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 255
17790: PPUSH
17791: CALL_OW 321
17795: PUSH
17796: LD_INT 2
17798: EQUAL
17799: IFFALSE 17811
// eff := 70 else
17801: LD_ADDR_VAR 0 4
17805: PUSH
17806: LD_INT 70
17808: ST_TO_ADDR
17809: GO 17819
// eff := 30 ;
17811: LD_ADDR_VAR 0 4
17815: PUSH
17816: LD_INT 30
17818: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 250
17828: PPUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 251
17838: PPUSH
17839: LD_VAR 0 4
17843: PPUSH
17844: CALL_OW 495
// end ; end ;
17848: LD_VAR 0 2
17852: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17853: LD_INT 0
17855: PPUSH
// end ;
17856: LD_VAR 0 4
17860: RET
// export function SOS_Command ( cmd ) ; begin
17861: LD_INT 0
17863: PPUSH
// end ;
17864: LD_VAR 0 2
17868: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17869: LD_INT 0
17871: PPUSH
// end ;
17872: LD_VAR 0 6
17876: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17877: LD_INT 0
17879: PPUSH
17880: PPUSH
// if not vehicle or not factory then
17881: LD_VAR 0 1
17885: NOT
17886: PUSH
17887: LD_VAR 0 2
17891: NOT
17892: OR
17893: IFFALSE 17897
// exit ;
17895: GO 18128
// if factoryWaypoints >= factory then
17897: LD_EXP 66
17901: PUSH
17902: LD_VAR 0 2
17906: GREATEREQUAL
17907: IFFALSE 18128
// if factoryWaypoints [ factory ] then
17909: LD_EXP 66
17913: PUSH
17914: LD_VAR 0 2
17918: ARRAY
17919: IFFALSE 18128
// begin if GetControl ( vehicle ) = control_manual then
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 263
17930: PUSH
17931: LD_INT 1
17933: EQUAL
17934: IFFALSE 18015
// begin driver := IsDrivenBy ( vehicle ) ;
17936: LD_ADDR_VAR 0 4
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 311
17950: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17951: LD_VAR 0 4
17955: PPUSH
17956: LD_EXP 66
17960: PUSH
17961: LD_VAR 0 2
17965: ARRAY
17966: PUSH
17967: LD_INT 3
17969: ARRAY
17970: PPUSH
17971: LD_EXP 66
17975: PUSH
17976: LD_VAR 0 2
17980: ARRAY
17981: PUSH
17982: LD_INT 4
17984: ARRAY
17985: PPUSH
17986: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17990: LD_VAR 0 4
17994: PPUSH
17995: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17999: LD_VAR 0 4
18003: PPUSH
18004: LD_VAR 0 2
18008: PPUSH
18009: CALL_OW 180
// end else
18013: GO 18128
// if GetControl ( vehicle ) = control_remote then
18015: LD_VAR 0 1
18019: PPUSH
18020: CALL_OW 263
18024: PUSH
18025: LD_INT 2
18027: EQUAL
18028: IFFALSE 18089
// begin wait ( 0 0$2 ) ;
18030: LD_INT 70
18032: PPUSH
18033: CALL_OW 67
// if Connect ( vehicle ) then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL 30956 0 1
18046: IFFALSE 18087
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_EXP 66
18057: PUSH
18058: LD_VAR 0 2
18062: ARRAY
18063: PUSH
18064: LD_INT 3
18066: ARRAY
18067: PPUSH
18068: LD_EXP 66
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PUSH
18079: LD_INT 4
18081: ARRAY
18082: PPUSH
18083: CALL_OW 171
// end else
18087: GO 18128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18089: LD_VAR 0 1
18093: PPUSH
18094: LD_EXP 66
18098: PUSH
18099: LD_VAR 0 2
18103: ARRAY
18104: PUSH
18105: LD_INT 3
18107: ARRAY
18108: PPUSH
18109: LD_EXP 66
18113: PUSH
18114: LD_VAR 0 2
18118: ARRAY
18119: PUSH
18120: LD_INT 4
18122: ARRAY
18123: PPUSH
18124: CALL_OW 171
// end ; end ;
18128: LD_VAR 0 3
18132: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18133: LD_INT 0
18135: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18136: LD_VAR 0 1
18140: PUSH
18141: LD_INT 250
18143: EQUAL
18144: PUSH
18145: LD_VAR 0 2
18149: PPUSH
18150: CALL_OW 264
18154: PUSH
18155: LD_INT 81
18157: EQUAL
18158: AND
18159: IFFALSE 18180
// MinerPlaceMine ( unit , x , y ) ;
18161: LD_VAR 0 2
18165: PPUSH
18166: LD_VAR 0 4
18170: PPUSH
18171: LD_VAR 0 5
18175: PPUSH
18176: CALL 21004 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18180: LD_VAR 0 1
18184: PUSH
18185: LD_INT 251
18187: EQUAL
18188: PUSH
18189: LD_VAR 0 2
18193: PPUSH
18194: CALL_OW 264
18198: PUSH
18199: LD_INT 81
18201: EQUAL
18202: AND
18203: IFFALSE 18224
// MinerDetonateMine ( unit , x , y ) ;
18205: LD_VAR 0 2
18209: PPUSH
18210: LD_VAR 0 4
18214: PPUSH
18215: LD_VAR 0 5
18219: PPUSH
18220: CALL 21279 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 252
18231: EQUAL
18232: PUSH
18233: LD_VAR 0 2
18237: PPUSH
18238: CALL_OW 264
18242: PUSH
18243: LD_INT 81
18245: EQUAL
18246: AND
18247: IFFALSE 18268
// MinerCreateMinefield ( unit , x , y ) ;
18249: LD_VAR 0 2
18253: PPUSH
18254: LD_VAR 0 4
18258: PPUSH
18259: LD_VAR 0 5
18263: PPUSH
18264: CALL 21696 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 253
18275: EQUAL
18276: PUSH
18277: LD_VAR 0 2
18281: PPUSH
18282: CALL_OW 257
18286: PUSH
18287: LD_INT 5
18289: EQUAL
18290: AND
18291: IFFALSE 18312
// ComBinocular ( unit , x , y ) ;
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_VAR 0 4
18302: PPUSH
18303: LD_VAR 0 5
18307: PPUSH
18308: CALL 22065 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_INT 254
18319: EQUAL
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: CALL_OW 264
18330: PUSH
18331: LD_INT 99
18333: EQUAL
18334: AND
18335: PUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: CALL_OW 263
18345: PUSH
18346: LD_INT 3
18348: EQUAL
18349: AND
18350: IFFALSE 18366
// HackDestroyVehicle ( unit , selectedUnit ) ;
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: CALL 20368 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 255
18373: EQUAL
18374: PUSH
18375: LD_VAR 0 2
18379: PPUSH
18380: CALL_OW 264
18384: PUSH
18385: LD_INT 14
18387: PUSH
18388: LD_INT 53
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: IN
18395: AND
18396: PUSH
18397: LD_VAR 0 4
18401: PPUSH
18402: LD_VAR 0 5
18406: PPUSH
18407: CALL_OW 488
18411: AND
18412: IFFALSE 18436
// CutTreeXYR ( unit , x , y , 12 ) ;
18414: LD_VAR 0 2
18418: PPUSH
18419: LD_VAR 0 4
18423: PPUSH
18424: LD_VAR 0 5
18428: PPUSH
18429: LD_INT 12
18431: PPUSH
18432: CALL 18531 0 4
// if cmd = 256 then
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 256
18443: EQUAL
18444: IFFALSE 18465
// SetFactoryWaypoint ( unit , x , y ) ;
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 4
18455: PPUSH
18456: LD_VAR 0 5
18460: PPUSH
18461: CALL 16446 0 3
// if cmd = 257 then
18465: LD_VAR 0 1
18469: PUSH
18470: LD_INT 257
18472: EQUAL
18473: IFFALSE 18494
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18475: LD_VAR 0 2
18479: PPUSH
18480: LD_VAR 0 4
18484: PPUSH
18485: LD_VAR 0 5
18489: PPUSH
18490: CALL 16808 0 3
// if cmd = 258 then
18494: LD_VAR 0 1
18498: PUSH
18499: LD_INT 258
18501: EQUAL
18502: IFFALSE 18526
// BurnTreeXYR ( unit , x , y , 8 ) ;
18504: LD_VAR 0 2
18508: PPUSH
18509: LD_VAR 0 4
18513: PPUSH
18514: LD_VAR 0 5
18518: PPUSH
18519: LD_INT 8
18521: PPUSH
18522: CALL 18925 0 4
// end ;
18526: LD_VAR 0 6
18530: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18531: LD_INT 0
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 302
18551: NOT
18552: PUSH
18553: LD_VAR 0 2
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: CALL_OW 488
18567: NOT
18568: OR
18569: PUSH
18570: LD_VAR 0 4
18574: NOT
18575: OR
18576: IFFALSE 18580
// exit ;
18578: GO 18920
// list := [ ] ;
18580: LD_ADDR_VAR 0 13
18584: PUSH
18585: EMPTY
18586: ST_TO_ADDR
// if x - r < 0 then
18587: LD_VAR 0 2
18591: PUSH
18592: LD_VAR 0 4
18596: MINUS
18597: PUSH
18598: LD_INT 0
18600: LESS
18601: IFFALSE 18613
// min_x := 0 else
18603: LD_ADDR_VAR 0 7
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
18611: GO 18629
// min_x := x - r ;
18613: LD_ADDR_VAR 0 7
18617: PUSH
18618: LD_VAR 0 2
18622: PUSH
18623: LD_VAR 0 4
18627: MINUS
18628: ST_TO_ADDR
// if y - r < 0 then
18629: LD_VAR 0 3
18633: PUSH
18634: LD_VAR 0 4
18638: MINUS
18639: PUSH
18640: LD_INT 0
18642: LESS
18643: IFFALSE 18655
// min_y := 0 else
18645: LD_ADDR_VAR 0 8
18649: PUSH
18650: LD_INT 0
18652: ST_TO_ADDR
18653: GO 18671
// min_y := y - r ;
18655: LD_ADDR_VAR 0 8
18659: PUSH
18660: LD_VAR 0 3
18664: PUSH
18665: LD_VAR 0 4
18669: MINUS
18670: ST_TO_ADDR
// max_x := x + r ;
18671: LD_ADDR_VAR 0 9
18675: PUSH
18676: LD_VAR 0 2
18680: PUSH
18681: LD_VAR 0 4
18685: PLUS
18686: ST_TO_ADDR
// max_y := y + r ;
18687: LD_ADDR_VAR 0 10
18691: PUSH
18692: LD_VAR 0 3
18696: PUSH
18697: LD_VAR 0 4
18701: PLUS
18702: ST_TO_ADDR
// for _x = min_x to max_x do
18703: LD_ADDR_VAR 0 11
18707: PUSH
18708: DOUBLE
18709: LD_VAR 0 7
18713: DEC
18714: ST_TO_ADDR
18715: LD_VAR 0 9
18719: PUSH
18720: FOR_TO
18721: IFFALSE 18838
// for _y = min_y to max_y do
18723: LD_ADDR_VAR 0 12
18727: PUSH
18728: DOUBLE
18729: LD_VAR 0 8
18733: DEC
18734: ST_TO_ADDR
18735: LD_VAR 0 10
18739: PUSH
18740: FOR_TO
18741: IFFALSE 18834
// begin if not ValidHex ( _x , _y ) then
18743: LD_VAR 0 11
18747: PPUSH
18748: LD_VAR 0 12
18752: PPUSH
18753: CALL_OW 488
18757: NOT
18758: IFFALSE 18762
// continue ;
18760: GO 18740
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18762: LD_VAR 0 11
18766: PPUSH
18767: LD_VAR 0 12
18771: PPUSH
18772: CALL_OW 351
18776: PUSH
18777: LD_VAR 0 11
18781: PPUSH
18782: LD_VAR 0 12
18786: PPUSH
18787: CALL_OW 554
18791: AND
18792: IFFALSE 18832
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18794: LD_ADDR_VAR 0 13
18798: PUSH
18799: LD_VAR 0 13
18803: PPUSH
18804: LD_VAR 0 13
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: PPUSH
18813: LD_VAR 0 11
18817: PUSH
18818: LD_VAR 0 12
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PPUSH
18827: CALL_OW 2
18831: ST_TO_ADDR
// end ;
18832: GO 18740
18834: POP
18835: POP
18836: GO 18720
18838: POP
18839: POP
// if not list then
18840: LD_VAR 0 13
18844: NOT
18845: IFFALSE 18849
// exit ;
18847: GO 18920
// for i in list do
18849: LD_ADDR_VAR 0 6
18853: PUSH
18854: LD_VAR 0 13
18858: PUSH
18859: FOR_IN
18860: IFFALSE 18918
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18862: LD_VAR 0 1
18866: PPUSH
18867: LD_STRING M
18869: PUSH
18870: LD_VAR 0 6
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_VAR 0 6
18883: PUSH
18884: LD_INT 2
18886: ARRAY
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: PPUSH
18912: CALL_OW 447
18916: GO 18859
18918: POP
18919: POP
// end ;
18920: LD_VAR 0 5
18924: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18925: LD_INT 0
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 302
18945: NOT
18946: PUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: CALL_OW 488
18961: NOT
18962: OR
18963: PUSH
18964: LD_VAR 0 4
18968: NOT
18969: OR
18970: IFFALSE 18974
// exit ;
18972: GO 19322
// list := [ ] ;
18974: LD_ADDR_VAR 0 13
18978: PUSH
18979: EMPTY
18980: ST_TO_ADDR
// if x - r < 0 then
18981: LD_VAR 0 2
18985: PUSH
18986: LD_VAR 0 4
18990: MINUS
18991: PUSH
18992: LD_INT 0
18994: LESS
18995: IFFALSE 19007
// min_x := 0 else
18997: LD_ADDR_VAR 0 7
19001: PUSH
19002: LD_INT 0
19004: ST_TO_ADDR
19005: GO 19023
// min_x := x - r ;
19007: LD_ADDR_VAR 0 7
19011: PUSH
19012: LD_VAR 0 2
19016: PUSH
19017: LD_VAR 0 4
19021: MINUS
19022: ST_TO_ADDR
// if y - r < 0 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_VAR 0 4
19032: MINUS
19033: PUSH
19034: LD_INT 0
19036: LESS
19037: IFFALSE 19049
// min_y := 0 else
19039: LD_ADDR_VAR 0 8
19043: PUSH
19044: LD_INT 0
19046: ST_TO_ADDR
19047: GO 19065
// min_y := y - r ;
19049: LD_ADDR_VAR 0 8
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: LD_VAR 0 4
19063: MINUS
19064: ST_TO_ADDR
// max_x := x + r ;
19065: LD_ADDR_VAR 0 9
19069: PUSH
19070: LD_VAR 0 2
19074: PUSH
19075: LD_VAR 0 4
19079: PLUS
19080: ST_TO_ADDR
// max_y := y + r ;
19081: LD_ADDR_VAR 0 10
19085: PUSH
19086: LD_VAR 0 3
19090: PUSH
19091: LD_VAR 0 4
19095: PLUS
19096: ST_TO_ADDR
// for _x = min_x to max_x do
19097: LD_ADDR_VAR 0 11
19101: PUSH
19102: DOUBLE
19103: LD_VAR 0 7
19107: DEC
19108: ST_TO_ADDR
19109: LD_VAR 0 9
19113: PUSH
19114: FOR_TO
19115: IFFALSE 19232
// for _y = min_y to max_y do
19117: LD_ADDR_VAR 0 12
19121: PUSH
19122: DOUBLE
19123: LD_VAR 0 8
19127: DEC
19128: ST_TO_ADDR
19129: LD_VAR 0 10
19133: PUSH
19134: FOR_TO
19135: IFFALSE 19228
// begin if not ValidHex ( _x , _y ) then
19137: LD_VAR 0 11
19141: PPUSH
19142: LD_VAR 0 12
19146: PPUSH
19147: CALL_OW 488
19151: NOT
19152: IFFALSE 19156
// continue ;
19154: GO 19134
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19156: LD_VAR 0 11
19160: PPUSH
19161: LD_VAR 0 12
19165: PPUSH
19166: CALL_OW 351
19170: PUSH
19171: LD_VAR 0 11
19175: PPUSH
19176: LD_VAR 0 12
19180: PPUSH
19181: CALL_OW 554
19185: AND
19186: IFFALSE 19226
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19188: LD_ADDR_VAR 0 13
19192: PUSH
19193: LD_VAR 0 13
19197: PPUSH
19198: LD_VAR 0 13
19202: PUSH
19203: LD_INT 1
19205: PLUS
19206: PPUSH
19207: LD_VAR 0 11
19211: PUSH
19212: LD_VAR 0 12
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PPUSH
19221: CALL_OW 2
19225: ST_TO_ADDR
// end ;
19226: GO 19134
19228: POP
19229: POP
19230: GO 19114
19232: POP
19233: POP
// if not list then
19234: LD_VAR 0 13
19238: NOT
19239: IFFALSE 19243
// exit ;
19241: GO 19322
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19243: LD_ADDR_VAR 0 13
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 13
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: LD_INT 1
19263: PPUSH
19264: CALL 28098 0 4
19268: ST_TO_ADDR
// ComStop ( flame ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: CALL_OW 141
// for i in list do
19278: LD_ADDR_VAR 0 6
19282: PUSH
19283: LD_VAR 0 13
19287: PUSH
19288: FOR_IN
19289: IFFALSE 19320
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19291: LD_VAR 0 1
19295: PPUSH
19296: LD_VAR 0 6
19300: PUSH
19301: LD_INT 1
19303: ARRAY
19304: PPUSH
19305: LD_VAR 0 6
19309: PUSH
19310: LD_INT 2
19312: ARRAY
19313: PPUSH
19314: CALL_OW 176
19318: GO 19288
19320: POP
19321: POP
// end ;
19322: LD_VAR 0 5
19326: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19327: LD_EXP 69
19331: NOT
19332: IFFALSE 19382
19334: GO 19336
19336: DISABLE
// begin initHack := true ;
19337: LD_ADDR_EXP 69
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// hackTanks := [ ] ;
19345: LD_ADDR_EXP 70
19349: PUSH
19350: EMPTY
19351: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19352: LD_ADDR_EXP 71
19356: PUSH
19357: EMPTY
19358: ST_TO_ADDR
// hackLimit := 3 ;
19359: LD_ADDR_EXP 72
19363: PUSH
19364: LD_INT 3
19366: ST_TO_ADDR
// hackDist := 12 ;
19367: LD_ADDR_EXP 73
19371: PUSH
19372: LD_INT 12
19374: ST_TO_ADDR
// hackCounter := [ ] ;
19375: LD_ADDR_EXP 74
19379: PUSH
19380: EMPTY
19381: ST_TO_ADDR
// end ;
19382: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19383: LD_EXP 69
19387: PUSH
19388: LD_INT 34
19390: PUSH
19391: LD_INT 99
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: AND
19403: IFFALSE 19656
19405: GO 19407
19407: DISABLE
19408: LD_INT 0
19410: PPUSH
19411: PPUSH
// begin enable ;
19412: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19413: LD_ADDR_VAR 0 1
19417: PUSH
19418: LD_INT 34
19420: PUSH
19421: LD_INT 99
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 69
19432: PUSH
19433: FOR_IN
19434: IFFALSE 19654
// begin if not i in hackTanks then
19436: LD_VAR 0 1
19440: PUSH
19441: LD_EXP 70
19445: IN
19446: NOT
19447: IFFALSE 19530
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19449: LD_ADDR_EXP 70
19453: PUSH
19454: LD_EXP 70
19458: PPUSH
19459: LD_EXP 70
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 1
19477: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19478: LD_ADDR_EXP 71
19482: PUSH
19483: LD_EXP 71
19487: PPUSH
19488: LD_EXP 71
19492: PUSH
19493: LD_INT 1
19495: PLUS
19496: PPUSH
19497: EMPTY
19498: PPUSH
19499: CALL_OW 1
19503: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19504: LD_ADDR_EXP 74
19508: PUSH
19509: LD_EXP 74
19513: PPUSH
19514: LD_EXP 74
19518: PUSH
19519: LD_INT 1
19521: PLUS
19522: PPUSH
19523: EMPTY
19524: PPUSH
19525: CALL_OW 1
19529: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19530: LD_VAR 0 1
19534: PPUSH
19535: CALL_OW 302
19539: NOT
19540: IFFALSE 19553
// begin HackUnlinkAll ( i ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL 19659 0 1
// continue ;
19551: GO 19433
// end ; HackCheckCapturedStatus ( i ) ;
19553: LD_VAR 0 1
19557: PPUSH
19558: CALL 20102 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19562: LD_ADDR_VAR 0 2
19566: PUSH
19567: LD_INT 81
19569: PUSH
19570: LD_VAR 0 1
19574: PPUSH
19575: CALL_OW 255
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 33
19586: PUSH
19587: LD_INT 3
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 91
19596: PUSH
19597: LD_VAR 0 1
19601: PUSH
19602: LD_EXP 73
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 50
19614: PUSH
19615: EMPTY
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: PPUSH
19624: CALL_OW 69
19628: ST_TO_ADDR
// if not tmp then
19629: LD_VAR 0 2
19633: NOT
19634: IFFALSE 19638
// continue ;
19636: GO 19433
// HackLink ( i , tmp ) ;
19638: LD_VAR 0 1
19642: PPUSH
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL 19795 0 2
// end ;
19652: GO 19433
19654: POP
19655: POP
// end ;
19656: PPOPN 2
19658: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
// if not hack in hackTanks then
19664: LD_VAR 0 1
19668: PUSH
19669: LD_EXP 70
19673: IN
19674: NOT
19675: IFFALSE 19679
// exit ;
19677: GO 19790
// index := GetElementIndex ( hackTanks , hack ) ;
19679: LD_ADDR_VAR 0 4
19683: PUSH
19684: LD_EXP 70
19688: PPUSH
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL 27395 0 2
19698: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19699: LD_EXP 71
19703: PUSH
19704: LD_VAR 0 4
19708: ARRAY
19709: IFFALSE 19790
// begin for i in hackTanksCaptured [ index ] do
19711: LD_ADDR_VAR 0 3
19715: PUSH
19716: LD_EXP 71
19720: PUSH
19721: LD_VAR 0 4
19725: ARRAY
19726: PUSH
19727: FOR_IN
19728: IFFALSE 19754
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 1
19737: ARRAY
19738: PPUSH
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 2
19746: ARRAY
19747: PPUSH
19748: CALL_OW 235
19752: GO 19727
19754: POP
19755: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19756: LD_ADDR_EXP 71
19760: PUSH
19761: LD_EXP 71
19765: PPUSH
19766: LD_VAR 0 4
19770: PPUSH
19771: EMPTY
19772: PPUSH
19773: CALL_OW 1
19777: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_INT 0
19785: PPUSH
19786: CALL_OW 505
// end ; end ;
19790: LD_VAR 0 2
19794: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19795: LD_INT 0
19797: PPUSH
19798: PPUSH
19799: PPUSH
// if not hack in hackTanks or not vehicles then
19800: LD_VAR 0 1
19804: PUSH
19805: LD_EXP 70
19809: IN
19810: NOT
19811: PUSH
19812: LD_VAR 0 2
19816: NOT
19817: OR
19818: IFFALSE 19822
// exit ;
19820: GO 20097
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_VAR 0 2
19836: PPUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL 28045 0 4
19847: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19848: LD_ADDR_VAR 0 5
19852: PUSH
19853: LD_EXP 70
19857: PPUSH
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL 27395 0 2
19867: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19868: LD_EXP 71
19872: PUSH
19873: LD_VAR 0 5
19877: ARRAY
19878: PUSH
19879: LD_EXP 72
19883: LESS
19884: IFFALSE 20073
// begin for i := 1 to vehicles do
19886: LD_ADDR_VAR 0 4
19890: PUSH
19891: DOUBLE
19892: LD_INT 1
19894: DEC
19895: ST_TO_ADDR
19896: LD_VAR 0 2
19900: PUSH
19901: FOR_TO
19902: IFFALSE 20071
// begin if hackTanksCaptured [ index ] = hackLimit then
19904: LD_EXP 71
19908: PUSH
19909: LD_VAR 0 5
19913: ARRAY
19914: PUSH
19915: LD_EXP 72
19919: EQUAL
19920: IFFALSE 19924
// break ;
19922: GO 20071
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19924: LD_ADDR_EXP 74
19928: PUSH
19929: LD_EXP 74
19933: PPUSH
19934: LD_VAR 0 5
19938: PPUSH
19939: LD_EXP 74
19943: PUSH
19944: LD_VAR 0 5
19948: ARRAY
19949: PUSH
19950: LD_INT 1
19952: PLUS
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19959: LD_ADDR_EXP 71
19963: PUSH
19964: LD_EXP 71
19968: PPUSH
19969: LD_VAR 0 5
19973: PUSH
19974: LD_EXP 71
19978: PUSH
19979: LD_VAR 0 5
19983: ARRAY
19984: PUSH
19985: LD_INT 1
19987: PLUS
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: LD_VAR 0 2
19997: PUSH
19998: LD_VAR 0 4
20002: ARRAY
20003: PUSH
20004: LD_VAR 0 2
20008: PUSH
20009: LD_VAR 0 4
20013: ARRAY
20014: PPUSH
20015: CALL_OW 255
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PPUSH
20024: CALL 27610 0 3
20028: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20029: LD_VAR 0 2
20033: PUSH
20034: LD_VAR 0 4
20038: ARRAY
20039: PPUSH
20040: LD_VAR 0 1
20044: PPUSH
20045: CALL_OW 255
20049: PPUSH
20050: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20054: LD_VAR 0 2
20058: PUSH
20059: LD_VAR 0 4
20063: ARRAY
20064: PPUSH
20065: CALL_OW 141
// end ;
20069: GO 19901
20071: POP
20072: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_EXP 71
20082: PUSH
20083: LD_VAR 0 5
20087: ARRAY
20088: PUSH
20089: LD_INT 0
20091: PLUS
20092: PPUSH
20093: CALL_OW 505
// end ;
20097: LD_VAR 0 3
20101: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20102: LD_INT 0
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
// if not hack in hackTanks then
20108: LD_VAR 0 1
20112: PUSH
20113: LD_EXP 70
20117: IN
20118: NOT
20119: IFFALSE 20123
// exit ;
20121: GO 20363
// index := GetElementIndex ( hackTanks , hack ) ;
20123: LD_ADDR_VAR 0 4
20127: PUSH
20128: LD_EXP 70
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL 27395 0 2
20142: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20143: LD_ADDR_VAR 0 3
20147: PUSH
20148: DOUBLE
20149: LD_EXP 71
20153: PUSH
20154: LD_VAR 0 4
20158: ARRAY
20159: INC
20160: ST_TO_ADDR
20161: LD_INT 1
20163: PUSH
20164: FOR_DOWNTO
20165: IFFALSE 20337
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20167: LD_ADDR_VAR 0 5
20171: PUSH
20172: LD_EXP 71
20176: PUSH
20177: LD_VAR 0 4
20181: ARRAY
20182: PUSH
20183: LD_VAR 0 3
20187: ARRAY
20188: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20189: LD_VAR 0 5
20193: PUSH
20194: LD_INT 1
20196: ARRAY
20197: PPUSH
20198: CALL_OW 302
20202: NOT
20203: PUSH
20204: LD_VAR 0 5
20208: PUSH
20209: LD_INT 1
20211: ARRAY
20212: PPUSH
20213: CALL_OW 255
20217: PUSH
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 255
20227: NONEQUAL
20228: OR
20229: IFFALSE 20335
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20231: LD_VAR 0 5
20235: PUSH
20236: LD_INT 1
20238: ARRAY
20239: PPUSH
20240: CALL_OW 305
20244: PUSH
20245: LD_VAR 0 5
20249: PUSH
20250: LD_INT 1
20252: ARRAY
20253: PPUSH
20254: CALL_OW 255
20258: PUSH
20259: LD_VAR 0 1
20263: PPUSH
20264: CALL_OW 255
20268: EQUAL
20269: AND
20270: IFFALSE 20294
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20272: LD_VAR 0 5
20276: PUSH
20277: LD_INT 1
20279: ARRAY
20280: PPUSH
20281: LD_VAR 0 5
20285: PUSH
20286: LD_INT 2
20288: ARRAY
20289: PPUSH
20290: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20294: LD_ADDR_EXP 71
20298: PUSH
20299: LD_EXP 71
20303: PPUSH
20304: LD_VAR 0 4
20308: PPUSH
20309: LD_EXP 71
20313: PUSH
20314: LD_VAR 0 4
20318: ARRAY
20319: PPUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: CALL_OW 3
20329: PPUSH
20330: CALL_OW 1
20334: ST_TO_ADDR
// end ; end ;
20335: GO 20164
20337: POP
20338: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20339: LD_VAR 0 1
20343: PPUSH
20344: LD_EXP 71
20348: PUSH
20349: LD_VAR 0 4
20353: ARRAY
20354: PUSH
20355: LD_INT 0
20357: PLUS
20358: PPUSH
20359: CALL_OW 505
// end ;
20363: LD_VAR 0 2
20367: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20368: LD_INT 0
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
// if not hack in hackTanks then
20374: LD_VAR 0 1
20378: PUSH
20379: LD_EXP 70
20383: IN
20384: NOT
20385: IFFALSE 20389
// exit ;
20387: GO 20474
// index := GetElementIndex ( hackTanks , hack ) ;
20389: LD_ADDR_VAR 0 5
20393: PUSH
20394: LD_EXP 70
20398: PPUSH
20399: LD_VAR 0 1
20403: PPUSH
20404: CALL 27395 0 2
20408: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20409: LD_ADDR_VAR 0 4
20413: PUSH
20414: DOUBLE
20415: LD_INT 1
20417: DEC
20418: ST_TO_ADDR
20419: LD_EXP 71
20423: PUSH
20424: LD_VAR 0 5
20428: ARRAY
20429: PUSH
20430: FOR_TO
20431: IFFALSE 20472
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20433: LD_EXP 71
20437: PUSH
20438: LD_VAR 0 5
20442: ARRAY
20443: PUSH
20444: LD_VAR 0 4
20448: ARRAY
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PUSH
20454: LD_VAR 0 2
20458: EQUAL
20459: IFFALSE 20470
// KillUnit ( vehicle ) ;
20461: LD_VAR 0 2
20465: PPUSH
20466: CALL_OW 66
20470: GO 20430
20472: POP
20473: POP
// end ;
20474: LD_VAR 0 3
20478: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20479: LD_EXP 75
20483: NOT
20484: IFFALSE 20519
20486: GO 20488
20488: DISABLE
// begin initMiner := true ;
20489: LD_ADDR_EXP 75
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// minersList := [ ] ;
20497: LD_ADDR_EXP 76
20501: PUSH
20502: EMPTY
20503: ST_TO_ADDR
// minerMinesList := [ ] ;
20504: LD_ADDR_EXP 77
20508: PUSH
20509: EMPTY
20510: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20511: LD_ADDR_EXP 78
20515: PUSH
20516: LD_INT 5
20518: ST_TO_ADDR
// end ;
20519: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20520: LD_EXP 75
20524: PUSH
20525: LD_INT 34
20527: PUSH
20528: LD_INT 81
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: AND
20540: IFFALSE 21001
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
// begin enable ;
20551: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20552: LD_ADDR_VAR 0 1
20556: PUSH
20557: LD_INT 34
20559: PUSH
20560: LD_INT 81
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: PUSH
20572: FOR_IN
20573: IFFALSE 20645
// begin if not i in minersList then
20575: LD_VAR 0 1
20579: PUSH
20580: LD_EXP 76
20584: IN
20585: NOT
20586: IFFALSE 20643
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20588: LD_ADDR_EXP 76
20592: PUSH
20593: LD_EXP 76
20597: PPUSH
20598: LD_EXP 76
20602: PUSH
20603: LD_INT 1
20605: PLUS
20606: PPUSH
20607: LD_VAR 0 1
20611: PPUSH
20612: CALL_OW 1
20616: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20617: LD_ADDR_EXP 77
20621: PUSH
20622: LD_EXP 77
20626: PPUSH
20627: LD_EXP 77
20631: PUSH
20632: LD_INT 1
20634: PLUS
20635: PPUSH
20636: EMPTY
20637: PPUSH
20638: CALL_OW 1
20642: ST_TO_ADDR
// end end ;
20643: GO 20572
20645: POP
20646: POP
// for i := minerMinesList downto 1 do
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: DOUBLE
20653: LD_EXP 77
20657: INC
20658: ST_TO_ADDR
20659: LD_INT 1
20661: PUSH
20662: FOR_DOWNTO
20663: IFFALSE 20999
// begin if IsLive ( minersList [ i ] ) then
20665: LD_EXP 76
20669: PUSH
20670: LD_VAR 0 1
20674: ARRAY
20675: PPUSH
20676: CALL_OW 300
20680: IFFALSE 20708
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20682: LD_EXP 76
20686: PUSH
20687: LD_VAR 0 1
20691: ARRAY
20692: PPUSH
20693: LD_EXP 77
20697: PUSH
20698: LD_VAR 0 1
20702: ARRAY
20703: PPUSH
20704: CALL_OW 505
// if not minerMinesList [ i ] then
20708: LD_EXP 77
20712: PUSH
20713: LD_VAR 0 1
20717: ARRAY
20718: NOT
20719: IFFALSE 20723
// continue ;
20721: GO 20662
// for j := minerMinesList [ i ] downto 1 do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: DOUBLE
20729: LD_EXP 77
20733: PUSH
20734: LD_VAR 0 1
20738: ARRAY
20739: INC
20740: ST_TO_ADDR
20741: LD_INT 1
20743: PUSH
20744: FOR_DOWNTO
20745: IFFALSE 20995
// begin side := GetSide ( minersList [ i ] ) ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_EXP 76
20756: PUSH
20757: LD_VAR 0 1
20761: ARRAY
20762: PPUSH
20763: CALL_OW 255
20767: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20768: LD_ADDR_VAR 0 4
20772: PUSH
20773: LD_EXP 77
20777: PUSH
20778: LD_VAR 0 1
20782: ARRAY
20783: PUSH
20784: LD_VAR 0 2
20788: ARRAY
20789: PUSH
20790: LD_INT 1
20792: ARRAY
20793: PPUSH
20794: LD_EXP 77
20798: PUSH
20799: LD_VAR 0 1
20803: ARRAY
20804: PUSH
20805: LD_VAR 0 2
20809: ARRAY
20810: PUSH
20811: LD_INT 2
20813: ARRAY
20814: PPUSH
20815: CALL_OW 428
20819: ST_TO_ADDR
// if not tmp then
20820: LD_VAR 0 4
20824: NOT
20825: IFFALSE 20829
// continue ;
20827: GO 20744
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20829: LD_VAR 0 4
20833: PUSH
20834: LD_INT 81
20836: PUSH
20837: LD_VAR 0 3
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PPUSH
20846: CALL_OW 69
20850: IN
20851: PUSH
20852: LD_EXP 77
20856: PUSH
20857: LD_VAR 0 1
20861: ARRAY
20862: PUSH
20863: LD_VAR 0 2
20867: ARRAY
20868: PUSH
20869: LD_INT 1
20871: ARRAY
20872: PPUSH
20873: LD_EXP 77
20877: PUSH
20878: LD_VAR 0 1
20882: ARRAY
20883: PUSH
20884: LD_VAR 0 2
20888: ARRAY
20889: PUSH
20890: LD_INT 2
20892: ARRAY
20893: PPUSH
20894: CALL_OW 458
20898: AND
20899: IFFALSE 20993
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20901: LD_EXP 77
20905: PUSH
20906: LD_VAR 0 1
20910: ARRAY
20911: PUSH
20912: LD_VAR 0 2
20916: ARRAY
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: LD_EXP 77
20926: PUSH
20927: LD_VAR 0 1
20931: ARRAY
20932: PUSH
20933: LD_VAR 0 2
20937: ARRAY
20938: PUSH
20939: LD_INT 2
20941: ARRAY
20942: PPUSH
20943: LD_VAR 0 3
20947: PPUSH
20948: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20952: LD_ADDR_EXP 77
20956: PUSH
20957: LD_EXP 77
20961: PPUSH
20962: LD_VAR 0 1
20966: PPUSH
20967: LD_EXP 77
20971: PUSH
20972: LD_VAR 0 1
20976: ARRAY
20977: PPUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 3
20987: PPUSH
20988: CALL_OW 1
20992: ST_TO_ADDR
// end ; end ;
20993: GO 20744
20995: POP
20996: POP
// end ;
20997: GO 20662
20999: POP
21000: POP
// end ;
21001: PPOPN 4
21003: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21004: LD_INT 0
21006: PPUSH
21007: PPUSH
// result := false ;
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21016: LD_VAR 0 1
21020: PPUSH
21021: CALL_OW 264
21025: PUSH
21026: LD_INT 81
21028: EQUAL
21029: NOT
21030: IFFALSE 21034
// exit ;
21032: GO 21274
// index := GetElementIndex ( minersList , unit ) ;
21034: LD_ADDR_VAR 0 5
21038: PUSH
21039: LD_EXP 76
21043: PPUSH
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL 27395 0 2
21053: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21054: LD_EXP 77
21058: PUSH
21059: LD_VAR 0 5
21063: ARRAY
21064: PUSH
21065: LD_EXP 78
21069: GREATEREQUAL
21070: IFFALSE 21074
// exit ;
21072: GO 21274
// ComMoveXY ( unit , x , y ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21093: LD_INT 35
21095: PPUSH
21096: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_VAR 0 2
21109: PPUSH
21110: LD_VAR 0 3
21114: PPUSH
21115: CALL 59147 0 3
21119: NOT
21120: PUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 314
21130: AND
21131: IFFALSE 21135
// exit ;
21133: GO 21274
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21135: LD_VAR 0 2
21139: PPUSH
21140: LD_VAR 0 3
21144: PPUSH
21145: CALL_OW 428
21149: PUSH
21150: LD_VAR 0 1
21154: EQUAL
21155: PUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 314
21165: NOT
21166: AND
21167: IFFALSE 21093
// PlaySoundXY ( x , y , PlantMine ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: LD_STRING PlantMine
21181: PPUSH
21182: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: CALL_OW 255
21205: PPUSH
21206: LD_INT 0
21208: PPUSH
21209: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21213: LD_ADDR_EXP 77
21217: PUSH
21218: LD_EXP 77
21222: PPUSH
21223: LD_VAR 0 5
21227: PUSH
21228: LD_EXP 77
21232: PUSH
21233: LD_VAR 0 5
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: PLUS
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PPUSH
21247: LD_VAR 0 2
21251: PUSH
21252: LD_VAR 0 3
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL 27610 0 3
21265: ST_TO_ADDR
// result := true ;
21266: LD_ADDR_VAR 0 4
21270: PUSH
21271: LD_INT 1
21273: ST_TO_ADDR
// end ;
21274: LD_VAR 0 4
21278: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
// if not unit in minersList then
21284: LD_VAR 0 1
21288: PUSH
21289: LD_EXP 76
21293: IN
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21691
// index := GetElementIndex ( minersList , unit ) ;
21299: LD_ADDR_VAR 0 6
21303: PUSH
21304: LD_EXP 76
21308: PPUSH
21309: LD_VAR 0 1
21313: PPUSH
21314: CALL 27395 0 2
21318: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21319: LD_ADDR_VAR 0 5
21323: PUSH
21324: DOUBLE
21325: LD_EXP 77
21329: PUSH
21330: LD_VAR 0 6
21334: ARRAY
21335: INC
21336: ST_TO_ADDR
21337: LD_INT 1
21339: PUSH
21340: FOR_DOWNTO
21341: IFFALSE 21502
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21343: LD_EXP 77
21347: PUSH
21348: LD_VAR 0 6
21352: ARRAY
21353: PUSH
21354: LD_VAR 0 5
21358: ARRAY
21359: PUSH
21360: LD_INT 1
21362: ARRAY
21363: PUSH
21364: LD_VAR 0 2
21368: EQUAL
21369: PUSH
21370: LD_EXP 77
21374: PUSH
21375: LD_VAR 0 6
21379: ARRAY
21380: PUSH
21381: LD_VAR 0 5
21385: ARRAY
21386: PUSH
21387: LD_INT 2
21389: ARRAY
21390: PUSH
21391: LD_VAR 0 3
21395: EQUAL
21396: AND
21397: IFFALSE 21500
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21399: LD_EXP 77
21403: PUSH
21404: LD_VAR 0 6
21408: ARRAY
21409: PUSH
21410: LD_VAR 0 5
21414: ARRAY
21415: PUSH
21416: LD_INT 1
21418: ARRAY
21419: PPUSH
21420: LD_EXP 77
21424: PUSH
21425: LD_VAR 0 6
21429: ARRAY
21430: PUSH
21431: LD_VAR 0 5
21435: ARRAY
21436: PUSH
21437: LD_INT 2
21439: ARRAY
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL_OW 255
21450: PPUSH
21451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21455: LD_ADDR_EXP 77
21459: PUSH
21460: LD_EXP 77
21464: PPUSH
21465: LD_VAR 0 6
21469: PPUSH
21470: LD_EXP 77
21474: PUSH
21475: LD_VAR 0 6
21479: ARRAY
21480: PPUSH
21481: LD_VAR 0 5
21485: PPUSH
21486: CALL_OW 3
21490: PPUSH
21491: CALL_OW 1
21495: ST_TO_ADDR
// exit ;
21496: POP
21497: POP
21498: GO 21691
// end ; end ;
21500: GO 21340
21502: POP
21503: POP
// for i := minerMinesList [ index ] downto 1 do
21504: LD_ADDR_VAR 0 5
21508: PUSH
21509: DOUBLE
21510: LD_EXP 77
21514: PUSH
21515: LD_VAR 0 6
21519: ARRAY
21520: INC
21521: ST_TO_ADDR
21522: LD_INT 1
21524: PUSH
21525: FOR_DOWNTO
21526: IFFALSE 21689
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21528: LD_EXP 77
21532: PUSH
21533: LD_VAR 0 6
21537: ARRAY
21538: PUSH
21539: LD_VAR 0 5
21543: ARRAY
21544: PUSH
21545: LD_INT 1
21547: ARRAY
21548: PPUSH
21549: LD_EXP 77
21553: PUSH
21554: LD_VAR 0 6
21558: ARRAY
21559: PUSH
21560: LD_VAR 0 5
21564: ARRAY
21565: PUSH
21566: LD_INT 2
21568: ARRAY
21569: PPUSH
21570: LD_VAR 0 2
21574: PPUSH
21575: LD_VAR 0 3
21579: PPUSH
21580: CALL_OW 298
21584: PUSH
21585: LD_INT 6
21587: LESS
21588: IFFALSE 21687
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21590: LD_EXP 77
21594: PUSH
21595: LD_VAR 0 6
21599: ARRAY
21600: PUSH
21601: LD_VAR 0 5
21605: ARRAY
21606: PUSH
21607: LD_INT 1
21609: ARRAY
21610: PPUSH
21611: LD_EXP 77
21615: PUSH
21616: LD_VAR 0 6
21620: ARRAY
21621: PUSH
21622: LD_VAR 0 5
21626: ARRAY
21627: PUSH
21628: LD_INT 2
21630: ARRAY
21631: PPUSH
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 255
21641: PPUSH
21642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21646: LD_ADDR_EXP 77
21650: PUSH
21651: LD_EXP 77
21655: PPUSH
21656: LD_VAR 0 6
21660: PPUSH
21661: LD_EXP 77
21665: PUSH
21666: LD_VAR 0 6
21670: ARRAY
21671: PPUSH
21672: LD_VAR 0 5
21676: PPUSH
21677: CALL_OW 3
21681: PPUSH
21682: CALL_OW 1
21686: ST_TO_ADDR
// end ; end ;
21687: GO 21525
21689: POP
21690: POP
// end ;
21691: LD_VAR 0 4
21695: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21696: LD_INT 0
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 264
21716: PUSH
21717: LD_INT 81
21719: EQUAL
21720: NOT
21721: PUSH
21722: LD_VAR 0 1
21726: PUSH
21727: LD_EXP 76
21731: IN
21732: NOT
21733: OR
21734: IFFALSE 21738
// exit ;
21736: GO 22060
// index := GetElementIndex ( minersList , unit ) ;
21738: LD_ADDR_VAR 0 6
21742: PUSH
21743: LD_EXP 76
21747: PPUSH
21748: LD_VAR 0 1
21752: PPUSH
21753: CALL 27395 0 2
21757: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21758: LD_ADDR_VAR 0 8
21762: PUSH
21763: LD_EXP 78
21767: PUSH
21768: LD_EXP 77
21772: PUSH
21773: LD_VAR 0 6
21777: ARRAY
21778: MINUS
21779: ST_TO_ADDR
// if not minesFreeAmount then
21780: LD_VAR 0 8
21784: NOT
21785: IFFALSE 21789
// exit ;
21787: GO 22060
// tmp := [ ] ;
21789: LD_ADDR_VAR 0 7
21793: PUSH
21794: EMPTY
21795: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21796: LD_ADDR_VAR 0 5
21800: PUSH
21801: DOUBLE
21802: LD_INT 1
21804: DEC
21805: ST_TO_ADDR
21806: LD_VAR 0 8
21810: PUSH
21811: FOR_TO
21812: IFFALSE 22007
// begin _d := rand ( 0 , 5 ) ;
21814: LD_ADDR_VAR 0 11
21818: PUSH
21819: LD_INT 0
21821: PPUSH
21822: LD_INT 5
21824: PPUSH
21825: CALL_OW 12
21829: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21830: LD_ADDR_VAR 0 12
21834: PUSH
21835: LD_INT 2
21837: PPUSH
21838: LD_INT 6
21840: PPUSH
21841: CALL_OW 12
21845: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21846: LD_ADDR_VAR 0 9
21850: PUSH
21851: LD_VAR 0 2
21855: PPUSH
21856: LD_VAR 0 11
21860: PPUSH
21861: LD_VAR 0 12
21865: PPUSH
21866: CALL_OW 272
21870: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21871: LD_ADDR_VAR 0 10
21875: PUSH
21876: LD_VAR 0 3
21880: PPUSH
21881: LD_VAR 0 11
21885: PPUSH
21886: LD_VAR 0 12
21890: PPUSH
21891: CALL_OW 273
21895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21896: LD_VAR 0 9
21900: PPUSH
21901: LD_VAR 0 10
21905: PPUSH
21906: CALL_OW 488
21910: PUSH
21911: LD_VAR 0 9
21915: PUSH
21916: LD_VAR 0 10
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_VAR 0 7
21929: IN
21930: NOT
21931: AND
21932: PUSH
21933: LD_VAR 0 9
21937: PPUSH
21938: LD_VAR 0 10
21942: PPUSH
21943: CALL_OW 458
21947: NOT
21948: AND
21949: IFFALSE 21991
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21951: LD_ADDR_VAR 0 7
21955: PUSH
21956: LD_VAR 0 7
21960: PPUSH
21961: LD_VAR 0 7
21965: PUSH
21966: LD_INT 1
21968: PLUS
21969: PPUSH
21970: LD_VAR 0 9
21974: PUSH
21975: LD_VAR 0 10
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 1
21988: ST_TO_ADDR
21989: GO 22005
// i := i - 1 ;
21991: LD_ADDR_VAR 0 5
21995: PUSH
21996: LD_VAR 0 5
22000: PUSH
22001: LD_INT 1
22003: MINUS
22004: ST_TO_ADDR
// end ;
22005: GO 21811
22007: POP
22008: POP
// for i in tmp do
22009: LD_ADDR_VAR 0 5
22013: PUSH
22014: LD_VAR 0 7
22018: PUSH
22019: FOR_IN
22020: IFFALSE 22058
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22022: LD_VAR 0 1
22026: PPUSH
22027: LD_VAR 0 5
22031: PUSH
22032: LD_INT 1
22034: ARRAY
22035: PPUSH
22036: LD_VAR 0 5
22040: PUSH
22041: LD_INT 2
22043: ARRAY
22044: PPUSH
22045: CALL 21004 0 3
22049: NOT
22050: IFFALSE 22056
// exit ;
22052: POP
22053: POP
22054: GO 22060
22056: GO 22019
22058: POP
22059: POP
// end ;
22060: LD_VAR 0 4
22064: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
// if not GetClass ( unit ) = class_sniper then
22074: LD_VAR 0 1
22078: PPUSH
22079: CALL_OW 257
22083: PUSH
22084: LD_INT 5
22086: EQUAL
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 22480
// dist := 8 ;
22092: LD_ADDR_VAR 0 5
22096: PUSH
22097: LD_INT 8
22099: ST_TO_ADDR
// viewRange := 12 ;
22100: LD_ADDR_VAR 0 7
22104: PUSH
22105: LD_INT 12
22107: ST_TO_ADDR
// side := GetSide ( unit ) ;
22108: LD_ADDR_VAR 0 6
22112: PUSH
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 255
22122: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22123: LD_INT 61
22125: PPUSH
22126: LD_VAR 0 6
22130: PPUSH
22131: CALL_OW 321
22135: PUSH
22136: LD_INT 2
22138: EQUAL
22139: IFFALSE 22149
// viewRange := 16 ;
22141: LD_ADDR_VAR 0 7
22145: PUSH
22146: LD_INT 16
22148: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22149: LD_VAR 0 1
22153: PPUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 297
22168: PUSH
22169: LD_VAR 0 5
22173: GREATER
22174: IFFALSE 22253
// begin ComMoveXY ( unit , x , y ) ;
22176: LD_VAR 0 1
22180: PPUSH
22181: LD_VAR 0 2
22185: PPUSH
22186: LD_VAR 0 3
22190: PPUSH
22191: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22195: LD_INT 35
22197: PPUSH
22198: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_VAR 0 2
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL 59147 0 3
22221: NOT
22222: IFFALSE 22226
// exit ;
22224: GO 22480
// until GetDistUnitXY ( unit , x , y ) < dist ;
22226: LD_VAR 0 1
22230: PPUSH
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: CALL_OW 297
22245: PUSH
22246: LD_VAR 0 5
22250: LESS
22251: IFFALSE 22195
// end ; ComTurnXY ( unit , x , y ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: CALL_OW 118
// wait ( 5 ) ;
22272: LD_INT 5
22274: PPUSH
22275: CALL_OW 67
// _d := GetDir ( unit ) ;
22279: LD_ADDR_VAR 0 10
22283: PUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 254
22293: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22294: LD_ADDR_VAR 0 8
22298: PUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 250
22308: PPUSH
22309: LD_VAR 0 10
22313: PPUSH
22314: LD_VAR 0 5
22318: PPUSH
22319: CALL_OW 272
22323: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22324: LD_ADDR_VAR 0 9
22328: PUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 251
22338: PPUSH
22339: LD_VAR 0 10
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: CALL_OW 273
22353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22354: LD_VAR 0 8
22358: PPUSH
22359: LD_VAR 0 9
22363: PPUSH
22364: CALL_OW 488
22368: NOT
22369: IFFALSE 22373
// exit ;
22371: GO 22480
// ComAnimCustom ( unit , 1 ) ;
22373: LD_VAR 0 1
22377: PPUSH
22378: LD_INT 1
22380: PPUSH
22381: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22385: LD_VAR 0 8
22389: PPUSH
22390: LD_VAR 0 9
22394: PPUSH
22395: LD_VAR 0 6
22399: PPUSH
22400: LD_VAR 0 7
22404: PPUSH
22405: CALL_OW 330
// repeat wait ( 1 ) ;
22409: LD_INT 1
22411: PPUSH
22412: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 316
22425: PUSH
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 314
22435: OR
22436: PUSH
22437: LD_VAR 0 1
22441: PPUSH
22442: CALL_OW 302
22446: NOT
22447: OR
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 301
22458: OR
22459: IFFALSE 22409
// RemoveSeeing ( _x , _y , side ) ;
22461: LD_VAR 0 8
22465: PPUSH
22466: LD_VAR 0 9
22470: PPUSH
22471: LD_VAR 0 6
22475: PPUSH
22476: CALL_OW 331
// end ; end_of_file
22480: LD_VAR 0 4
22484: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22485: LD_VAR 0 1
22489: PUSH
22490: LD_INT 200
22492: DOUBLE
22493: GREATEREQUAL
22494: IFFALSE 22502
22496: LD_INT 299
22498: DOUBLE
22499: LESSEQUAL
22500: IFTRUE 22504
22502: GO 22536
22504: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22505: LD_VAR 0 1
22509: PPUSH
22510: LD_VAR 0 2
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_VAR 0 4
22524: PPUSH
22525: LD_VAR 0 5
22529: PPUSH
22530: CALL 18133 0 5
22534: GO 22613
22536: LD_INT 300
22538: DOUBLE
22539: GREATEREQUAL
22540: IFFALSE 22548
22542: LD_INT 399
22544: DOUBLE
22545: LESSEQUAL
22546: IFTRUE 22550
22548: GO 22612
22550: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22551: LD_VAR 0 1
22555: PPUSH
22556: LD_VAR 0 2
22560: PPUSH
22561: LD_VAR 0 3
22565: PPUSH
22566: LD_VAR 0 4
22570: PPUSH
22571: LD_VAR 0 5
22575: PPUSH
22576: LD_VAR 0 6
22580: PPUSH
22581: LD_VAR 0 7
22585: PPUSH
22586: LD_VAR 0 8
22590: PPUSH
22591: LD_VAR 0 9
22595: PPUSH
22596: LD_VAR 0 10
22600: PPUSH
22601: LD_VAR 0 11
22605: PPUSH
22606: CALL 14458 0 11
22610: GO 22613
22612: POP
// end ;
22613: PPOPN 11
22615: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22616: LD_VAR 0 1
22620: PPUSH
22621: LD_VAR 0 2
22625: PPUSH
22626: LD_VAR 0 3
22630: PPUSH
22631: LD_VAR 0 4
22635: PPUSH
22636: LD_VAR 0 5
22640: PPUSH
22641: CALL 17869 0 5
// end ; end_of_file
22645: PPOPN 5
22647: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22648: LD_INT 0
22650: PPUSH
22651: PPUSH
// if exist_mode then
22652: LD_VAR 0 2
22656: IFFALSE 22681
// unit := CreateCharacter ( prefix & ident ) else
22658: LD_ADDR_VAR 0 5
22662: PUSH
22663: LD_VAR 0 3
22667: PUSH
22668: LD_VAR 0 1
22672: STR
22673: PPUSH
22674: CALL_OW 34
22678: ST_TO_ADDR
22679: GO 22696
// unit := NewCharacter ( ident ) ;
22681: LD_ADDR_VAR 0 5
22685: PUSH
22686: LD_VAR 0 1
22690: PPUSH
22691: CALL_OW 25
22695: ST_TO_ADDR
// result := unit ;
22696: LD_ADDR_VAR 0 4
22700: PUSH
22701: LD_VAR 0 5
22705: ST_TO_ADDR
// end ;
22706: LD_VAR 0 4
22710: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22711: LD_INT 0
22713: PPUSH
22714: PPUSH
// if not side or not nation then
22715: LD_VAR 0 1
22719: NOT
22720: PUSH
22721: LD_VAR 0 2
22725: NOT
22726: OR
22727: IFFALSE 22731
// exit ;
22729: GO 23499
// case nation of nation_american :
22731: LD_VAR 0 2
22735: PUSH
22736: LD_INT 1
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22958
22744: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22745: LD_ADDR_VAR 0 4
22749: PUSH
22750: LD_INT 35
22752: PUSH
22753: LD_INT 45
22755: PUSH
22756: LD_INT 46
22758: PUSH
22759: LD_INT 47
22761: PUSH
22762: LD_INT 82
22764: PUSH
22765: LD_INT 83
22767: PUSH
22768: LD_INT 84
22770: PUSH
22771: LD_INT 85
22773: PUSH
22774: LD_INT 86
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: LD_INT 6
22785: PUSH
22786: LD_INT 15
22788: PUSH
22789: LD_INT 16
22791: PUSH
22792: LD_INT 7
22794: PUSH
22795: LD_INT 12
22797: PUSH
22798: LD_INT 13
22800: PUSH
22801: LD_INT 10
22803: PUSH
22804: LD_INT 14
22806: PUSH
22807: LD_INT 20
22809: PUSH
22810: LD_INT 21
22812: PUSH
22813: LD_INT 22
22815: PUSH
22816: LD_INT 25
22818: PUSH
22819: LD_INT 32
22821: PUSH
22822: LD_INT 27
22824: PUSH
22825: LD_INT 36
22827: PUSH
22828: LD_INT 69
22830: PUSH
22831: LD_INT 39
22833: PUSH
22834: LD_INT 34
22836: PUSH
22837: LD_INT 40
22839: PUSH
22840: LD_INT 48
22842: PUSH
22843: LD_INT 49
22845: PUSH
22846: LD_INT 50
22848: PUSH
22849: LD_INT 51
22851: PUSH
22852: LD_INT 52
22854: PUSH
22855: LD_INT 53
22857: PUSH
22858: LD_INT 54
22860: PUSH
22861: LD_INT 55
22863: PUSH
22864: LD_INT 56
22866: PUSH
22867: LD_INT 57
22869: PUSH
22870: LD_INT 58
22872: PUSH
22873: LD_INT 59
22875: PUSH
22876: LD_INT 60
22878: PUSH
22879: LD_INT 61
22881: PUSH
22882: LD_INT 62
22884: PUSH
22885: LD_INT 80
22887: PUSH
22888: LD_INT 82
22890: PUSH
22891: LD_INT 83
22893: PUSH
22894: LD_INT 84
22896: PUSH
22897: LD_INT 85
22899: PUSH
22900: LD_INT 86
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: ST_TO_ADDR
22956: GO 23423
22958: LD_INT 2
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 23192
22966: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22967: LD_ADDR_VAR 0 4
22971: PUSH
22972: LD_INT 35
22974: PUSH
22975: LD_INT 45
22977: PUSH
22978: LD_INT 46
22980: PUSH
22981: LD_INT 47
22983: PUSH
22984: LD_INT 82
22986: PUSH
22987: LD_INT 83
22989: PUSH
22990: LD_INT 84
22992: PUSH
22993: LD_INT 85
22995: PUSH
22996: LD_INT 87
22998: PUSH
22999: LD_INT 70
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 11
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: LD_INT 4
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: LD_INT 6
23019: PUSH
23020: LD_INT 15
23022: PUSH
23023: LD_INT 18
23025: PUSH
23026: LD_INT 7
23028: PUSH
23029: LD_INT 17
23031: PUSH
23032: LD_INT 8
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 72
23046: PUSH
23047: LD_INT 26
23049: PUSH
23050: LD_INT 69
23052: PUSH
23053: LD_INT 39
23055: PUSH
23056: LD_INT 40
23058: PUSH
23059: LD_INT 41
23061: PUSH
23062: LD_INT 42
23064: PUSH
23065: LD_INT 43
23067: PUSH
23068: LD_INT 48
23070: PUSH
23071: LD_INT 49
23073: PUSH
23074: LD_INT 50
23076: PUSH
23077: LD_INT 51
23079: PUSH
23080: LD_INT 52
23082: PUSH
23083: LD_INT 53
23085: PUSH
23086: LD_INT 54
23088: PUSH
23089: LD_INT 55
23091: PUSH
23092: LD_INT 56
23094: PUSH
23095: LD_INT 60
23097: PUSH
23098: LD_INT 61
23100: PUSH
23101: LD_INT 62
23103: PUSH
23104: LD_INT 66
23106: PUSH
23107: LD_INT 67
23109: PUSH
23110: LD_INT 68
23112: PUSH
23113: LD_INT 81
23115: PUSH
23116: LD_INT 82
23118: PUSH
23119: LD_INT 83
23121: PUSH
23122: LD_INT 84
23124: PUSH
23125: LD_INT 85
23127: PUSH
23128: LD_INT 87
23130: PUSH
23131: LD_INT 88
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: ST_TO_ADDR
23190: GO 23423
23192: LD_INT 3
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23422
23200: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23201: LD_ADDR_VAR 0 4
23205: PUSH
23206: LD_INT 46
23208: PUSH
23209: LD_INT 47
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 82
23220: PUSH
23221: LD_INT 83
23223: PUSH
23224: LD_INT 84
23226: PUSH
23227: LD_INT 85
23229: PUSH
23230: LD_INT 86
23232: PUSH
23233: LD_INT 11
23235: PUSH
23236: LD_INT 9
23238: PUSH
23239: LD_INT 20
23241: PUSH
23242: LD_INT 19
23244: PUSH
23245: LD_INT 21
23247: PUSH
23248: LD_INT 24
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 25
23256: PUSH
23257: LD_INT 28
23259: PUSH
23260: LD_INT 29
23262: PUSH
23263: LD_INT 30
23265: PUSH
23266: LD_INT 31
23268: PUSH
23269: LD_INT 37
23271: PUSH
23272: LD_INT 38
23274: PUSH
23275: LD_INT 32
23277: PUSH
23278: LD_INT 27
23280: PUSH
23281: LD_INT 33
23283: PUSH
23284: LD_INT 69
23286: PUSH
23287: LD_INT 39
23289: PUSH
23290: LD_INT 34
23292: PUSH
23293: LD_INT 40
23295: PUSH
23296: LD_INT 71
23298: PUSH
23299: LD_INT 23
23301: PUSH
23302: LD_INT 44
23304: PUSH
23305: LD_INT 48
23307: PUSH
23308: LD_INT 49
23310: PUSH
23311: LD_INT 50
23313: PUSH
23314: LD_INT 51
23316: PUSH
23317: LD_INT 52
23319: PUSH
23320: LD_INT 53
23322: PUSH
23323: LD_INT 54
23325: PUSH
23326: LD_INT 55
23328: PUSH
23329: LD_INT 56
23331: PUSH
23332: LD_INT 57
23334: PUSH
23335: LD_INT 58
23337: PUSH
23338: LD_INT 59
23340: PUSH
23341: LD_INT 63
23343: PUSH
23344: LD_INT 64
23346: PUSH
23347: LD_INT 65
23349: PUSH
23350: LD_INT 82
23352: PUSH
23353: LD_INT 83
23355: PUSH
23356: LD_INT 84
23358: PUSH
23359: LD_INT 85
23361: PUSH
23362: LD_INT 86
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: ST_TO_ADDR
23420: GO 23423
23422: POP
// if state > - 1 and state < 3 then
23423: LD_VAR 0 3
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: GREATER
23432: PUSH
23433: LD_VAR 0 3
23437: PUSH
23438: LD_INT 3
23440: LESS
23441: AND
23442: IFFALSE 23499
// for i in result do
23444: LD_ADDR_VAR 0 5
23448: PUSH
23449: LD_VAR 0 4
23453: PUSH
23454: FOR_IN
23455: IFFALSE 23497
// if GetTech ( i , side ) <> state then
23457: LD_VAR 0 5
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 321
23471: PUSH
23472: LD_VAR 0 3
23476: NONEQUAL
23477: IFFALSE 23495
// result := result diff i ;
23479: LD_ADDR_VAR 0 4
23483: PUSH
23484: LD_VAR 0 4
23488: PUSH
23489: LD_VAR 0 5
23493: DIFF
23494: ST_TO_ADDR
23495: GO 23454
23497: POP
23498: POP
// end ;
23499: LD_VAR 0 4
23503: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
23508: PPUSH
// result := true ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_INT 1
23516: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23517: LD_ADDR_VAR 0 5
23521: PUSH
23522: LD_VAR 0 2
23526: PPUSH
23527: CALL_OW 480
23531: ST_TO_ADDR
// if not tmp then
23532: LD_VAR 0 5
23536: NOT
23537: IFFALSE 23541
// exit ;
23539: GO 23590
// for i in tmp do
23541: LD_ADDR_VAR 0 4
23545: PUSH
23546: LD_VAR 0 5
23550: PUSH
23551: FOR_IN
23552: IFFALSE 23588
// if GetTech ( i , side ) <> state_researched then
23554: LD_VAR 0 4
23558: PPUSH
23559: LD_VAR 0 1
23563: PPUSH
23564: CALL_OW 321
23568: PUSH
23569: LD_INT 2
23571: NONEQUAL
23572: IFFALSE 23586
// begin result := false ;
23574: LD_ADDR_VAR 0 3
23578: PUSH
23579: LD_INT 0
23581: ST_TO_ADDR
// exit ;
23582: POP
23583: POP
23584: GO 23590
// end ;
23586: GO 23551
23588: POP
23589: POP
// end ;
23590: LD_VAR 0 3
23594: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23595: LD_INT 0
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23610: LD_VAR 0 1
23614: NOT
23615: PUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL_OW 257
23625: PUSH
23626: LD_INT 9
23628: NONEQUAL
23629: OR
23630: IFFALSE 23634
// exit ;
23632: GO 24207
// side := GetSide ( unit ) ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_VAR 0 1
23643: PPUSH
23644: CALL_OW 255
23648: ST_TO_ADDR
// tech_space := tech_spacanom ;
23649: LD_ADDR_VAR 0 12
23653: PUSH
23654: LD_INT 29
23656: ST_TO_ADDR
// tech_time := tech_taurad ;
23657: LD_ADDR_VAR 0 13
23661: PUSH
23662: LD_INT 28
23664: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23665: LD_ADDR_VAR 0 11
23669: PUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 310
23679: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23680: LD_VAR 0 11
23684: PPUSH
23685: CALL_OW 247
23689: PUSH
23690: LD_INT 2
23692: EQUAL
23693: IFFALSE 23697
// exit ;
23695: GO 24207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23697: LD_ADDR_VAR 0 8
23701: PUSH
23702: LD_INT 81
23704: PUSH
23705: LD_VAR 0 9
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 21
23719: PUSH
23720: LD_INT 3
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PPUSH
23735: CALL_OW 69
23739: ST_TO_ADDR
// if not tmp then
23740: LD_VAR 0 8
23744: NOT
23745: IFFALSE 23749
// exit ;
23747: GO 24207
// if in_unit then
23749: LD_VAR 0 11
23753: IFFALSE 23777
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23755: LD_ADDR_VAR 0 10
23759: PUSH
23760: LD_VAR 0 8
23764: PPUSH
23765: LD_VAR 0 11
23769: PPUSH
23770: CALL_OW 74
23774: ST_TO_ADDR
23775: GO 23797
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23777: LD_ADDR_VAR 0 10
23781: PUSH
23782: LD_VAR 0 8
23786: PPUSH
23787: LD_VAR 0 1
23791: PPUSH
23792: CALL_OW 74
23796: ST_TO_ADDR
// if not enemy then
23797: LD_VAR 0 10
23801: NOT
23802: IFFALSE 23806
// exit ;
23804: GO 24207
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23806: LD_VAR 0 11
23810: PUSH
23811: LD_VAR 0 11
23815: PPUSH
23816: LD_VAR 0 10
23820: PPUSH
23821: CALL_OW 296
23825: PUSH
23826: LD_INT 13
23828: GREATER
23829: AND
23830: PUSH
23831: LD_VAR 0 1
23835: PPUSH
23836: LD_VAR 0 10
23840: PPUSH
23841: CALL_OW 296
23845: PUSH
23846: LD_INT 12
23848: GREATER
23849: OR
23850: IFFALSE 23854
// exit ;
23852: GO 24207
// missile := [ 1 ] ;
23854: LD_ADDR_VAR 0 14
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23865: LD_VAR 0 9
23869: PPUSH
23870: LD_VAR 0 12
23874: PPUSH
23875: CALL_OW 325
23879: IFFALSE 23908
// missile := Replace ( missile , missile + 1 , 2 ) ;
23881: LD_ADDR_VAR 0 14
23885: PUSH
23886: LD_VAR 0 14
23890: PPUSH
23891: LD_VAR 0 14
23895: PUSH
23896: LD_INT 1
23898: PLUS
23899: PPUSH
23900: LD_INT 2
23902: PPUSH
23903: CALL_OW 1
23907: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23908: LD_VAR 0 9
23912: PPUSH
23913: LD_VAR 0 13
23917: PPUSH
23918: CALL_OW 325
23922: PUSH
23923: LD_VAR 0 10
23927: PPUSH
23928: CALL_OW 255
23932: PPUSH
23933: LD_VAR 0 13
23937: PPUSH
23938: CALL_OW 325
23942: NOT
23943: AND
23944: IFFALSE 23973
// missile := Replace ( missile , missile + 1 , 3 ) ;
23946: LD_ADDR_VAR 0 14
23950: PUSH
23951: LD_VAR 0 14
23955: PPUSH
23956: LD_VAR 0 14
23960: PUSH
23961: LD_INT 1
23963: PLUS
23964: PPUSH
23965: LD_INT 3
23967: PPUSH
23968: CALL_OW 1
23972: ST_TO_ADDR
// if missile < 2 then
23973: LD_VAR 0 14
23977: PUSH
23978: LD_INT 2
23980: LESS
23981: IFFALSE 23985
// exit ;
23983: GO 24207
// x := GetX ( enemy ) ;
23985: LD_ADDR_VAR 0 4
23989: PUSH
23990: LD_VAR 0 10
23994: PPUSH
23995: CALL_OW 250
23999: ST_TO_ADDR
// y := GetY ( enemy ) ;
24000: LD_ADDR_VAR 0 5
24004: PUSH
24005: LD_VAR 0 10
24009: PPUSH
24010: CALL_OW 251
24014: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_VAR 0 4
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PPUSH
24029: LD_INT 1
24031: PPUSH
24032: CALL_OW 12
24036: PLUS
24037: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24038: LD_ADDR_VAR 0 7
24042: PUSH
24043: LD_VAR 0 5
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: CALL_OW 12
24059: PLUS
24060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24061: LD_VAR 0 6
24065: PPUSH
24066: LD_VAR 0 7
24070: PPUSH
24071: CALL_OW 488
24075: NOT
24076: IFFALSE 24098
// begin _x := x ;
24078: LD_ADDR_VAR 0 6
24082: PUSH
24083: LD_VAR 0 4
24087: ST_TO_ADDR
// _y := y ;
24088: LD_ADDR_VAR 0 7
24092: PUSH
24093: LD_VAR 0 5
24097: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: LD_INT 1
24105: PPUSH
24106: LD_VAR 0 14
24110: PPUSH
24111: CALL_OW 12
24115: ST_TO_ADDR
// case i of 1 :
24116: LD_VAR 0 3
24120: PUSH
24121: LD_INT 1
24123: DOUBLE
24124: EQUAL
24125: IFTRUE 24129
24127: GO 24146
24129: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_VAR 0 10
24139: PPUSH
24140: CALL_OW 115
24144: GO 24207
24146: LD_INT 2
24148: DOUBLE
24149: EQUAL
24150: IFTRUE 24154
24152: GO 24176
24154: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24155: LD_VAR 0 1
24159: PPUSH
24160: LD_VAR 0 6
24164: PPUSH
24165: LD_VAR 0 7
24169: PPUSH
24170: CALL_OW 153
24174: GO 24207
24176: LD_INT 3
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24206
24184: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24185: LD_VAR 0 1
24189: PPUSH
24190: LD_VAR 0 6
24194: PPUSH
24195: LD_VAR 0 7
24199: PPUSH
24200: CALL_OW 154
24204: GO 24207
24206: POP
// end ;
24207: LD_VAR 0 2
24211: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24212: LD_INT 0
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
// if not unit or not building then
24220: LD_VAR 0 1
24224: NOT
24225: PUSH
24226: LD_VAR 0 2
24230: NOT
24231: OR
24232: IFFALSE 24236
// exit ;
24234: GO 24394
// x := GetX ( building ) ;
24236: LD_ADDR_VAR 0 5
24240: PUSH
24241: LD_VAR 0 2
24245: PPUSH
24246: CALL_OW 250
24250: ST_TO_ADDR
// y := GetY ( building ) ;
24251: LD_ADDR_VAR 0 6
24255: PUSH
24256: LD_VAR 0 2
24260: PPUSH
24261: CALL_OW 251
24265: ST_TO_ADDR
// for i = 0 to 5 do
24266: LD_ADDR_VAR 0 4
24270: PUSH
24271: DOUBLE
24272: LD_INT 0
24274: DEC
24275: ST_TO_ADDR
24276: LD_INT 5
24278: PUSH
24279: FOR_TO
24280: IFFALSE 24392
// begin _x := ShiftX ( x , i , 3 ) ;
24282: LD_ADDR_VAR 0 7
24286: PUSH
24287: LD_VAR 0 5
24291: PPUSH
24292: LD_VAR 0 4
24296: PPUSH
24297: LD_INT 3
24299: PPUSH
24300: CALL_OW 272
24304: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24305: LD_ADDR_VAR 0 8
24309: PUSH
24310: LD_VAR 0 6
24314: PPUSH
24315: LD_VAR 0 4
24319: PPUSH
24320: LD_INT 3
24322: PPUSH
24323: CALL_OW 273
24327: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24328: LD_VAR 0 7
24332: PPUSH
24333: LD_VAR 0 8
24337: PPUSH
24338: CALL_OW 488
24342: NOT
24343: IFFALSE 24347
// continue ;
24345: GO 24279
// if HexInfo ( _x , _y ) = 0 then
24347: LD_VAR 0 7
24351: PPUSH
24352: LD_VAR 0 8
24356: PPUSH
24357: CALL_OW 428
24361: PUSH
24362: LD_INT 0
24364: EQUAL
24365: IFFALSE 24390
// begin ComMoveXY ( unit , _x , _y ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_VAR 0 7
24376: PPUSH
24377: LD_VAR 0 8
24381: PPUSH
24382: CALL_OW 111
// exit ;
24386: POP
24387: POP
24388: GO 24394
// end ; end ;
24390: GO 24279
24392: POP
24393: POP
// end ;
24394: LD_VAR 0 3
24398: RET
// export function ScanBase ( side , base_area ) ; begin
24399: LD_INT 0
24401: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_VAR 0 2
24411: PPUSH
24412: LD_INT 81
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 70
24428: ST_TO_ADDR
// end ;
24429: LD_VAR 0 3
24433: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
// result := false ;
24440: LD_ADDR_VAR 0 2
24444: PUSH
24445: LD_INT 0
24447: ST_TO_ADDR
// side := GetSide ( unit ) ;
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 255
24462: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24463: LD_ADDR_VAR 0 4
24467: PUSH
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 248
24477: ST_TO_ADDR
// case nat of 1 :
24478: LD_VAR 0 4
24482: PUSH
24483: LD_INT 1
24485: DOUBLE
24486: EQUAL
24487: IFTRUE 24491
24489: GO 24502
24491: POP
// tech := tech_lassight ; 2 :
24492: LD_ADDR_VAR 0 5
24496: PUSH
24497: LD_INT 12
24499: ST_TO_ADDR
24500: GO 24541
24502: LD_INT 2
24504: DOUBLE
24505: EQUAL
24506: IFTRUE 24510
24508: GO 24521
24510: POP
// tech := tech_mortar ; 3 :
24511: LD_ADDR_VAR 0 5
24515: PUSH
24516: LD_INT 41
24518: ST_TO_ADDR
24519: GO 24541
24521: LD_INT 3
24523: DOUBLE
24524: EQUAL
24525: IFTRUE 24529
24527: GO 24540
24529: POP
// tech := tech_bazooka ; end ;
24530: LD_ADDR_VAR 0 5
24534: PUSH
24535: LD_INT 44
24537: ST_TO_ADDR
24538: GO 24541
24540: POP
// if Researched ( side , tech ) then
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_VAR 0 5
24550: PPUSH
24551: CALL_OW 325
24555: IFFALSE 24582
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24557: LD_ADDR_VAR 0 2
24561: PUSH
24562: LD_INT 5
24564: PUSH
24565: LD_INT 8
24567: PUSH
24568: LD_INT 9
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_VAR 0 4
24580: ARRAY
24581: ST_TO_ADDR
// end ;
24582: LD_VAR 0 2
24586: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24587: LD_INT 0
24589: PPUSH
24590: PPUSH
24591: PPUSH
// if not mines then
24592: LD_VAR 0 2
24596: NOT
24597: IFFALSE 24601
// exit ;
24599: GO 24745
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24601: LD_ADDR_VAR 0 5
24605: PUSH
24606: LD_INT 81
24608: PUSH
24609: LD_VAR 0 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PPUSH
24639: CALL_OW 69
24643: ST_TO_ADDR
// for i in mines do
24644: LD_ADDR_VAR 0 4
24648: PUSH
24649: LD_VAR 0 2
24653: PUSH
24654: FOR_IN
24655: IFFALSE 24743
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24657: LD_VAR 0 4
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: PPUSH
24666: LD_VAR 0 4
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PPUSH
24675: CALL_OW 458
24679: NOT
24680: IFFALSE 24684
// continue ;
24682: GO 24654
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24684: LD_VAR 0 4
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: LD_VAR 0 4
24697: PUSH
24698: LD_INT 2
24700: ARRAY
24701: PPUSH
24702: CALL_OW 428
24706: PUSH
24707: LD_VAR 0 5
24711: IN
24712: IFFALSE 24741
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24714: LD_VAR 0 4
24718: PUSH
24719: LD_INT 1
24721: ARRAY
24722: PPUSH
24723: LD_VAR 0 4
24727: PUSH
24728: LD_INT 2
24730: ARRAY
24731: PPUSH
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 456
// end ;
24741: GO 24654
24743: POP
24744: POP
// end ;
24745: LD_VAR 0 3
24749: RET
// export function Count ( array ) ; begin
24750: LD_INT 0
24752: PPUSH
// result := array + 0 ;
24753: LD_ADDR_VAR 0 2
24757: PUSH
24758: LD_VAR 0 1
24762: PUSH
24763: LD_INT 0
24765: PLUS
24766: ST_TO_ADDR
// end ;
24767: LD_VAR 0 2
24771: RET
// export function IsEmpty ( building ) ; begin
24772: LD_INT 0
24774: PPUSH
// if not building then
24775: LD_VAR 0 1
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 24827
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_VAR 0 1
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL_OW 255
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 58
24813: PUSH
24814: EMPTY
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: IN
24826: ST_TO_ADDR
// end ;
24827: LD_VAR 0 2
24831: RET
// export function IsNotFull ( building ) ; var places ; begin
24832: LD_INT 0
24834: PPUSH
24835: PPUSH
// if not building then
24836: LD_VAR 0 1
24840: NOT
24841: IFFALSE 24845
// exit ;
24843: GO 24873
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_VAR 0 1
24854: PPUSH
24855: LD_INT 3
24857: PUSH
24858: LD_INT 62
24860: PUSH
24861: EMPTY
24862: LIST
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PPUSH
24868: CALL_OW 72
24872: ST_TO_ADDR
// end ;
24873: LD_VAR 0 2
24877: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24878: LD_INT 0
24880: PPUSH
24881: PPUSH
24882: PPUSH
24883: PPUSH
// tmp := [ ] ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: EMPTY
24890: ST_TO_ADDR
// list := [ ] ;
24891: LD_ADDR_VAR 0 5
24895: PUSH
24896: EMPTY
24897: ST_TO_ADDR
// for i = 16 to 25 do
24898: LD_ADDR_VAR 0 4
24902: PUSH
24903: DOUBLE
24904: LD_INT 16
24906: DEC
24907: ST_TO_ADDR
24908: LD_INT 25
24910: PUSH
24911: FOR_TO
24912: IFFALSE 24985
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_VAR 0 3
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL_OW 255
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 91
24943: PUSH
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 6
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 30
24959: PUSH
24960: LD_VAR 0 4
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: PPUSH
24977: CALL_OW 69
24981: ADD
24982: ST_TO_ADDR
24983: GO 24911
24985: POP
24986: POP
// for i = 1 to tmp do
24987: LD_ADDR_VAR 0 4
24991: PUSH
24992: DOUBLE
24993: LD_INT 1
24995: DEC
24996: ST_TO_ADDR
24997: LD_VAR 0 3
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25091
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25005: LD_ADDR_VAR 0 5
25009: PUSH
25010: LD_VAR 0 5
25014: PUSH
25015: LD_VAR 0 3
25019: PUSH
25020: LD_VAR 0 4
25024: ARRAY
25025: PPUSH
25026: CALL_OW 266
25030: PUSH
25031: LD_VAR 0 3
25035: PUSH
25036: LD_VAR 0 4
25040: ARRAY
25041: PPUSH
25042: CALL_OW 250
25046: PUSH
25047: LD_VAR 0 3
25051: PUSH
25052: LD_VAR 0 4
25056: ARRAY
25057: PPUSH
25058: CALL_OW 251
25062: PUSH
25063: LD_VAR 0 3
25067: PUSH
25068: LD_VAR 0 4
25072: ARRAY
25073: PPUSH
25074: CALL_OW 254
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: ADD
25088: ST_TO_ADDR
25089: GO 25002
25091: POP
25092: POP
// result := list ;
25093: LD_ADDR_VAR 0 2
25097: PUSH
25098: LD_VAR 0 5
25102: ST_TO_ADDR
// end ;
25103: LD_VAR 0 2
25107: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25108: LD_INT 0
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
// if not factory then
25117: LD_VAR 0 1
25121: NOT
25122: IFFALSE 25126
// exit ;
25124: GO 25719
// if control = control_apeman then
25126: LD_VAR 0 4
25130: PUSH
25131: LD_INT 5
25133: EQUAL
25134: IFFALSE 25243
// begin tmp := UnitsInside ( factory ) ;
25136: LD_ADDR_VAR 0 8
25140: PUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: CALL_OW 313
25150: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25151: LD_VAR 0 8
25155: PPUSH
25156: LD_INT 25
25158: PUSH
25159: LD_INT 12
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 72
25170: NOT
25171: IFFALSE 25181
// control := control_manual ;
25173: LD_ADDR_VAR 0 4
25177: PUSH
25178: LD_INT 1
25180: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25181: LD_ADDR_VAR 0 8
25185: PUSH
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL 24878 0 1
25195: ST_TO_ADDR
// if tmp then
25196: LD_VAR 0 8
25200: IFFALSE 25243
// begin for i in tmp do
25202: LD_ADDR_VAR 0 7
25206: PUSH
25207: LD_VAR 0 8
25211: PUSH
25212: FOR_IN
25213: IFFALSE 25241
// if i [ 1 ] = b_ext_radio then
25215: LD_VAR 0 7
25219: PUSH
25220: LD_INT 1
25222: ARRAY
25223: PUSH
25224: LD_INT 22
25226: EQUAL
25227: IFFALSE 25239
// begin control := control_remote ;
25229: LD_ADDR_VAR 0 4
25233: PUSH
25234: LD_INT 2
25236: ST_TO_ADDR
// break ;
25237: GO 25241
// end ;
25239: GO 25212
25241: POP
25242: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25243: LD_VAR 0 1
25247: PPUSH
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_VAR 0 3
25257: PPUSH
25258: LD_VAR 0 4
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL_OW 448
25272: IFFALSE 25307
// begin result := [ chassis , engine , control , weapon ] ;
25274: LD_ADDR_VAR 0 6
25278: PUSH
25279: LD_VAR 0 2
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_VAR 0 4
25293: PUSH
25294: LD_VAR 0 5
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: ST_TO_ADDR
// exit ;
25305: GO 25719
// end ; _chassis := AvailableChassisList ( factory ) ;
25307: LD_ADDR_VAR 0 9
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 475
25321: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25322: LD_ADDR_VAR 0 11
25326: PUSH
25327: LD_VAR 0 1
25331: PPUSH
25332: CALL_OW 476
25336: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25337: LD_ADDR_VAR 0 12
25341: PUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 477
25351: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25352: LD_ADDR_VAR 0 10
25356: PUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 478
25366: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25367: LD_VAR 0 9
25371: NOT
25372: PUSH
25373: LD_VAR 0 11
25377: NOT
25378: OR
25379: PUSH
25380: LD_VAR 0 12
25384: NOT
25385: OR
25386: PUSH
25387: LD_VAR 0 10
25391: NOT
25392: OR
25393: IFFALSE 25428
// begin result := [ chassis , engine , control , weapon ] ;
25395: LD_ADDR_VAR 0 6
25399: PUSH
25400: LD_VAR 0 2
25404: PUSH
25405: LD_VAR 0 3
25409: PUSH
25410: LD_VAR 0 4
25414: PUSH
25415: LD_VAR 0 5
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: ST_TO_ADDR
// exit ;
25426: GO 25719
// end ; if not chassis in _chassis then
25428: LD_VAR 0 2
25432: PUSH
25433: LD_VAR 0 9
25437: IN
25438: NOT
25439: IFFALSE 25465
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: LD_VAR 0 9
25450: PUSH
25451: LD_INT 1
25453: PPUSH
25454: LD_VAR 0 9
25458: PPUSH
25459: CALL_OW 12
25463: ARRAY
25464: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL 25724 0 2
25479: NOT
25480: IFFALSE 25539
// repeat engine := _engine [ 1 ] ;
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_VAR 0 11
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25496: LD_ADDR_VAR 0 11
25500: PUSH
25501: LD_VAR 0 11
25505: PPUSH
25506: LD_INT 1
25508: PPUSH
25509: CALL_OW 3
25513: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25514: LD_VAR 0 2
25518: PPUSH
25519: LD_VAR 0 3
25523: PPUSH
25524: CALL 25724 0 2
25528: PUSH
25529: LD_VAR 0 11
25533: PUSH
25534: EMPTY
25535: EQUAL
25536: OR
25537: IFFALSE 25482
// if not control in _control then
25539: LD_VAR 0 4
25543: PUSH
25544: LD_VAR 0 12
25548: IN
25549: NOT
25550: IFFALSE 25576
// control := _control [ rand ( 1 , _control ) ] ;
25552: LD_ADDR_VAR 0 4
25556: PUSH
25557: LD_VAR 0 12
25561: PUSH
25562: LD_INT 1
25564: PPUSH
25565: LD_VAR 0 12
25569: PPUSH
25570: CALL_OW 12
25574: ARRAY
25575: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25576: LD_VAR 0 2
25580: PPUSH
25581: LD_VAR 0 5
25585: PPUSH
25586: CALL 25944 0 2
25590: NOT
25591: IFFALSE 25650
// repeat weapon := _weapon [ 1 ] ;
25593: LD_ADDR_VAR 0 5
25597: PUSH
25598: LD_VAR 0 10
25602: PUSH
25603: LD_INT 1
25605: ARRAY
25606: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25607: LD_ADDR_VAR 0 10
25611: PUSH
25612: LD_VAR 0 10
25616: PPUSH
25617: LD_INT 1
25619: PPUSH
25620: CALL_OW 3
25624: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25625: LD_VAR 0 2
25629: PPUSH
25630: LD_VAR 0 5
25634: PPUSH
25635: CALL 25944 0 2
25639: PUSH
25640: LD_VAR 0 10
25644: PUSH
25645: EMPTY
25646: EQUAL
25647: OR
25648: IFFALSE 25593
// result := [ ] ;
25650: LD_ADDR_VAR 0 6
25654: PUSH
25655: EMPTY
25656: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 2
25666: PPUSH
25667: LD_VAR 0 3
25671: PPUSH
25672: LD_VAR 0 4
25676: PPUSH
25677: LD_VAR 0 5
25681: PPUSH
25682: CALL_OW 448
25686: IFFALSE 25719
// result := [ chassis , engine , control , weapon ] ;
25688: LD_ADDR_VAR 0 6
25692: PUSH
25693: LD_VAR 0 2
25697: PUSH
25698: LD_VAR 0 3
25702: PUSH
25703: LD_VAR 0 4
25707: PUSH
25708: LD_VAR 0 5
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: ST_TO_ADDR
// end ;
25719: LD_VAR 0 6
25723: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25724: LD_INT 0
25726: PPUSH
// if not chassis or not engine then
25727: LD_VAR 0 1
25731: NOT
25732: PUSH
25733: LD_VAR 0 2
25737: NOT
25738: OR
25739: IFFALSE 25743
// exit ;
25741: GO 25939
// case engine of engine_solar :
25743: LD_VAR 0 2
25747: PUSH
25748: LD_INT 2
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25794
25756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25757: LD_ADDR_VAR 0 3
25761: PUSH
25762: LD_INT 11
25764: PUSH
25765: LD_INT 12
25767: PUSH
25768: LD_INT 13
25770: PUSH
25771: LD_INT 14
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 3
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
25792: GO 25923
25794: LD_INT 1
25796: DOUBLE
25797: EQUAL
25798: IFTRUE 25802
25800: GO 25864
25802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: LD_INT 11
25810: PUSH
25811: LD_INT 12
25813: PUSH
25814: LD_INT 13
25816: PUSH
25817: LD_INT 14
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: LD_INT 4
25831: PUSH
25832: LD_INT 5
25834: PUSH
25835: LD_INT 21
25837: PUSH
25838: LD_INT 23
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_INT 24
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
25862: GO 25923
25864: LD_INT 3
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 25922
25872: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: LD_INT 13
25880: PUSH
25881: LD_INT 14
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: LD_INT 4
25892: PUSH
25893: LD_INT 5
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 22
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 24
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: ST_TO_ADDR
25920: GO 25923
25922: POP
// result := ( chassis in result ) ;
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_VAR 0 1
25932: PUSH
25933: LD_VAR 0 3
25937: IN
25938: ST_TO_ADDR
// end ;
25939: LD_VAR 0 3
25943: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25944: LD_INT 0
25946: PPUSH
// if not chassis or not weapon then
25947: LD_VAR 0 1
25951: NOT
25952: PUSH
25953: LD_VAR 0 2
25957: NOT
25958: OR
25959: IFFALSE 25963
// exit ;
25961: GO 27023
// case weapon of us_machine_gun :
25963: LD_VAR 0 2
25967: PUSH
25968: LD_INT 2
25970: DOUBLE
25971: EQUAL
25972: IFTRUE 25976
25974: GO 26006
25976: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25977: LD_ADDR_VAR 0 3
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: LD_INT 4
25993: PUSH
25994: LD_INT 5
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: ST_TO_ADDR
26004: GO 27007
26006: LD_INT 3
26008: DOUBLE
26009: EQUAL
26010: IFTRUE 26014
26012: GO 26044
26014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: LD_INT 4
26031: PUSH
26032: LD_INT 5
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: ST_TO_ADDR
26042: GO 27007
26044: LD_INT 11
26046: DOUBLE
26047: EQUAL
26048: IFTRUE 26052
26050: GO 26082
26052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26053: LD_ADDR_VAR 0 3
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 3
26066: PUSH
26067: LD_INT 4
26069: PUSH
26070: LD_INT 5
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: ST_TO_ADDR
26080: GO 27007
26082: LD_INT 4
26084: DOUBLE
26085: EQUAL
26086: IFTRUE 26090
26088: GO 26116
26090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26091: LD_ADDR_VAR 0 3
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: LD_INT 4
26104: PUSH
26105: LD_INT 5
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: ST_TO_ADDR
26114: GO 27007
26116: LD_INT 5
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26150
26124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 4
26138: PUSH
26139: LD_INT 5
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
26148: GO 27007
26150: LD_INT 9
26152: DOUBLE
26153: EQUAL
26154: IFTRUE 26158
26156: GO 26184
26158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26159: LD_ADDR_VAR 0 3
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 3
26169: PUSH
26170: LD_INT 4
26172: PUSH
26173: LD_INT 5
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: ST_TO_ADDR
26182: GO 27007
26184: LD_INT 7
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26218
26192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 4
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: ST_TO_ADDR
26216: GO 27007
26218: LD_INT 12
26220: DOUBLE
26221: EQUAL
26222: IFTRUE 26226
26224: GO 26252
26226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26227: LD_ADDR_VAR 0 3
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 3
26237: PUSH
26238: LD_INT 4
26240: PUSH
26241: LD_INT 5
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
26250: GO 27007
26252: LD_INT 13
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26286
26260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: LD_INT 4
26274: PUSH
26275: LD_INT 5
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
26284: GO 27007
26286: LD_INT 14
26288: DOUBLE
26289: EQUAL
26290: IFTRUE 26294
26292: GO 26312
26294: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26295: LD_ADDR_VAR 0 3
26299: PUSH
26300: LD_INT 4
26302: PUSH
26303: LD_INT 5
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: ST_TO_ADDR
26310: GO 27007
26312: LD_INT 6
26314: DOUBLE
26315: EQUAL
26316: IFTRUE 26320
26318: GO 26338
26320: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: LD_INT 4
26328: PUSH
26329: LD_INT 5
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: ST_TO_ADDR
26336: GO 27007
26338: LD_INT 10
26340: DOUBLE
26341: EQUAL
26342: IFTRUE 26346
26344: GO 26364
26346: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26347: LD_ADDR_VAR 0 3
26351: PUSH
26352: LD_INT 4
26354: PUSH
26355: LD_INT 5
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: ST_TO_ADDR
26362: GO 27007
26364: LD_INT 22
26366: DOUBLE
26367: EQUAL
26368: IFTRUE 26372
26370: GO 26398
26372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26373: LD_ADDR_VAR 0 3
26377: PUSH
26378: LD_INT 11
26380: PUSH
26381: LD_INT 12
26383: PUSH
26384: LD_INT 13
26386: PUSH
26387: LD_INT 14
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: ST_TO_ADDR
26396: GO 27007
26398: LD_INT 23
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26432
26406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26407: LD_ADDR_VAR 0 3
26411: PUSH
26412: LD_INT 11
26414: PUSH
26415: LD_INT 12
26417: PUSH
26418: LD_INT 13
26420: PUSH
26421: LD_INT 14
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: ST_TO_ADDR
26430: GO 27007
26432: LD_INT 24
26434: DOUBLE
26435: EQUAL
26436: IFTRUE 26440
26438: GO 26466
26440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26441: LD_ADDR_VAR 0 3
26445: PUSH
26446: LD_INT 11
26448: PUSH
26449: LD_INT 12
26451: PUSH
26452: LD_INT 13
26454: PUSH
26455: LD_INT 14
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
26464: GO 27007
26466: LD_INT 30
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26500
26474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_INT 11
26482: PUSH
26483: LD_INT 12
26485: PUSH
26486: LD_INT 13
26488: PUSH
26489: LD_INT 14
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
26498: GO 27007
26500: LD_INT 25
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 26526
26508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26509: LD_ADDR_VAR 0 3
26513: PUSH
26514: LD_INT 13
26516: PUSH
26517: LD_INT 14
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: ST_TO_ADDR
26524: GO 27007
26526: LD_INT 27
26528: DOUBLE
26529: EQUAL
26530: IFTRUE 26534
26532: GO 26552
26534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: LD_INT 13
26542: PUSH
26543: LD_INT 14
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: ST_TO_ADDR
26550: GO 27007
26552: LD_INT 92
26554: DOUBLE
26555: EQUAL
26556: IFTRUE 26560
26558: GO 26586
26560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_INT 11
26568: PUSH
26569: LD_INT 12
26571: PUSH
26572: LD_INT 13
26574: PUSH
26575: LD_INT 14
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
26584: GO 27007
26586: LD_INT 28
26588: DOUBLE
26589: EQUAL
26590: IFTRUE 26594
26592: GO 26612
26594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26595: LD_ADDR_VAR 0 3
26599: PUSH
26600: LD_INT 13
26602: PUSH
26603: LD_INT 14
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: ST_TO_ADDR
26610: GO 27007
26612: LD_INT 29
26614: DOUBLE
26615: EQUAL
26616: IFTRUE 26620
26618: GO 26638
26620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 13
26628: PUSH
26629: LD_INT 14
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: ST_TO_ADDR
26636: GO 27007
26638: LD_INT 31
26640: DOUBLE
26641: EQUAL
26642: IFTRUE 26646
26644: GO 26664
26646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26647: LD_ADDR_VAR 0 3
26651: PUSH
26652: LD_INT 13
26654: PUSH
26655: LD_INT 14
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: ST_TO_ADDR
26662: GO 27007
26664: LD_INT 26
26666: DOUBLE
26667: EQUAL
26668: IFTRUE 26672
26670: GO 26690
26672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26673: LD_ADDR_VAR 0 3
26677: PUSH
26678: LD_INT 13
26680: PUSH
26681: LD_INT 14
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: ST_TO_ADDR
26688: GO 27007
26690: LD_INT 42
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26698
26696: GO 26724
26698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26699: LD_ADDR_VAR 0 3
26703: PUSH
26704: LD_INT 21
26706: PUSH
26707: LD_INT 22
26709: PUSH
26710: LD_INT 23
26712: PUSH
26713: LD_INT 24
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: ST_TO_ADDR
26722: GO 27007
26724: LD_INT 43
26726: DOUBLE
26727: EQUAL
26728: IFTRUE 26732
26730: GO 26758
26732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 22
26743: PUSH
26744: LD_INT 23
26746: PUSH
26747: LD_INT 24
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
26756: GO 27007
26758: LD_INT 44
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26792
26766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_INT 21
26774: PUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 23
26780: PUSH
26781: LD_INT 24
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
26790: GO 27007
26792: LD_INT 45
26794: DOUBLE
26795: EQUAL
26796: IFTRUE 26800
26798: GO 26826
26800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26801: LD_ADDR_VAR 0 3
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_INT 23
26814: PUSH
26815: LD_INT 24
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: ST_TO_ADDR
26824: GO 27007
26826: LD_INT 49
26828: DOUBLE
26829: EQUAL
26830: IFTRUE 26834
26832: GO 26860
26834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26835: LD_ADDR_VAR 0 3
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 22
26845: PUSH
26846: LD_INT 23
26848: PUSH
26849: LD_INT 24
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
26858: GO 27007
26860: LD_INT 51
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26868
26866: GO 26894
26868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_INT 23
26882: PUSH
26883: LD_INT 24
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: ST_TO_ADDR
26892: GO 27007
26894: LD_INT 52
26896: DOUBLE
26897: EQUAL
26898: IFTRUE 26902
26900: GO 26928
26902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26903: LD_ADDR_VAR 0 3
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_INT 23
26916: PUSH
26917: LD_INT 24
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
26926: GO 27007
26928: LD_INT 53
26930: DOUBLE
26931: EQUAL
26932: IFTRUE 26936
26934: GO 26954
26936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_INT 23
26944: PUSH
26945: LD_INT 24
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: ST_TO_ADDR
26952: GO 27007
26954: LD_INT 46
26956: DOUBLE
26957: EQUAL
26958: IFTRUE 26962
26960: GO 26980
26962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_INT 23
26970: PUSH
26971: LD_INT 24
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: ST_TO_ADDR
26978: GO 27007
26980: LD_INT 47
26982: DOUBLE
26983: EQUAL
26984: IFTRUE 26988
26986: GO 27006
26988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 23
26996: PUSH
26997: LD_INT 24
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: ST_TO_ADDR
27004: GO 27007
27006: POP
// result := ( chassis in result ) ;
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 1
27016: PUSH
27017: LD_VAR 0 3
27021: IN
27022: ST_TO_ADDR
// end ;
27023: LD_VAR 0 3
27027: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
27035: PPUSH
27036: PPUSH
// result := array ;
27037: LD_ADDR_VAR 0 5
27041: PUSH
27042: LD_VAR 0 1
27046: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27047: LD_VAR 0 1
27051: NOT
27052: PUSH
27053: LD_VAR 0 2
27057: NOT
27058: OR
27059: PUSH
27060: LD_VAR 0 3
27064: NOT
27065: OR
27066: PUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_VAR 0 1
27076: GREATER
27077: OR
27078: PUSH
27079: LD_VAR 0 3
27083: PUSH
27084: LD_VAR 0 1
27088: GREATER
27089: OR
27090: IFFALSE 27094
// exit ;
27092: GO 27390
// if direction then
27094: LD_VAR 0 4
27098: IFFALSE 27162
// begin d := 1 ;
27100: LD_ADDR_VAR 0 9
27104: PUSH
27105: LD_INT 1
27107: ST_TO_ADDR
// if i_from > i_to then
27108: LD_VAR 0 2
27112: PUSH
27113: LD_VAR 0 3
27117: GREATER
27118: IFFALSE 27144
// length := ( array - i_from ) + i_to else
27120: LD_ADDR_VAR 0 11
27124: PUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_VAR 0 2
27134: MINUS
27135: PUSH
27136: LD_VAR 0 3
27140: PLUS
27141: ST_TO_ADDR
27142: GO 27160
// length := i_to - i_from ;
27144: LD_ADDR_VAR 0 11
27148: PUSH
27149: LD_VAR 0 3
27153: PUSH
27154: LD_VAR 0 2
27158: MINUS
27159: ST_TO_ADDR
// end else
27160: GO 27223
// begin d := - 1 ;
27162: LD_ADDR_VAR 0 9
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: ST_TO_ADDR
// if i_from > i_to then
27171: LD_VAR 0 2
27175: PUSH
27176: LD_VAR 0 3
27180: GREATER
27181: IFFALSE 27201
// length := i_from - i_to else
27183: LD_ADDR_VAR 0 11
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: LD_VAR 0 3
27197: MINUS
27198: ST_TO_ADDR
27199: GO 27223
// length := ( array - i_to ) + i_from ;
27201: LD_ADDR_VAR 0 11
27205: PUSH
27206: LD_VAR 0 1
27210: PUSH
27211: LD_VAR 0 3
27215: MINUS
27216: PUSH
27217: LD_VAR 0 2
27221: PLUS
27222: ST_TO_ADDR
// end ; if not length then
27223: LD_VAR 0 11
27227: NOT
27228: IFFALSE 27232
// exit ;
27230: GO 27390
// tmp := array ;
27232: LD_ADDR_VAR 0 10
27236: PUSH
27237: LD_VAR 0 1
27241: ST_TO_ADDR
// for i = 1 to length do
27242: LD_ADDR_VAR 0 6
27246: PUSH
27247: DOUBLE
27248: LD_INT 1
27250: DEC
27251: ST_TO_ADDR
27252: LD_VAR 0 11
27256: PUSH
27257: FOR_TO
27258: IFFALSE 27378
// begin for j = 1 to array do
27260: LD_ADDR_VAR 0 7
27264: PUSH
27265: DOUBLE
27266: LD_INT 1
27268: DEC
27269: ST_TO_ADDR
27270: LD_VAR 0 1
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27364
// begin k := j + d ;
27278: LD_ADDR_VAR 0 8
27282: PUSH
27283: LD_VAR 0 7
27287: PUSH
27288: LD_VAR 0 9
27292: PLUS
27293: ST_TO_ADDR
// if k > array then
27294: LD_VAR 0 8
27298: PUSH
27299: LD_VAR 0 1
27303: GREATER
27304: IFFALSE 27314
// k := 1 ;
27306: LD_ADDR_VAR 0 8
27310: PUSH
27311: LD_INT 1
27313: ST_TO_ADDR
// if not k then
27314: LD_VAR 0 8
27318: NOT
27319: IFFALSE 27331
// k := array ;
27321: LD_ADDR_VAR 0 8
27325: PUSH
27326: LD_VAR 0 1
27330: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27331: LD_ADDR_VAR 0 10
27335: PUSH
27336: LD_VAR 0 10
27340: PPUSH
27341: LD_VAR 0 8
27345: PPUSH
27346: LD_VAR 0 1
27350: PUSH
27351: LD_VAR 0 7
27355: ARRAY
27356: PPUSH
27357: CALL_OW 1
27361: ST_TO_ADDR
// end ;
27362: GO 27275
27364: POP
27365: POP
// array := tmp ;
27366: LD_ADDR_VAR 0 1
27370: PUSH
27371: LD_VAR 0 10
27375: ST_TO_ADDR
// end ;
27376: GO 27257
27378: POP
27379: POP
// result := array ;
27380: LD_ADDR_VAR 0 5
27384: PUSH
27385: LD_VAR 0 1
27389: ST_TO_ADDR
// end ;
27390: LD_VAR 0 5
27394: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// result := 0 ;
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// if not array or not value in array then
27407: LD_VAR 0 1
27411: NOT
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_VAR 0 1
27422: IN
27423: NOT
27424: OR
27425: IFFALSE 27429
// exit ;
27427: GO 27483
// for i = 1 to array do
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: DOUBLE
27435: LD_INT 1
27437: DEC
27438: ST_TO_ADDR
27439: LD_VAR 0 1
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27481
// if value = array [ i ] then
27447: LD_VAR 0 2
27451: PUSH
27452: LD_VAR 0 1
27456: PUSH
27457: LD_VAR 0 4
27461: ARRAY
27462: EQUAL
27463: IFFALSE 27479
// begin result := i ;
27465: LD_ADDR_VAR 0 3
27469: PUSH
27470: LD_VAR 0 4
27474: ST_TO_ADDR
// exit ;
27475: POP
27476: POP
27477: GO 27483
// end ;
27479: GO 27444
27481: POP
27482: POP
// end ;
27483: LD_VAR 0 3
27487: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27488: LD_INT 0
27490: PPUSH
// vc_chassis := chassis ;
27491: LD_ADDR_OWVAR 37
27495: PUSH
27496: LD_VAR 0 1
27500: ST_TO_ADDR
// vc_engine := engine ;
27501: LD_ADDR_OWVAR 39
27505: PUSH
27506: LD_VAR 0 2
27510: ST_TO_ADDR
// vc_control := control ;
27511: LD_ADDR_OWVAR 38
27515: PUSH
27516: LD_VAR 0 3
27520: ST_TO_ADDR
// vc_weapon := weapon ;
27521: LD_ADDR_OWVAR 40
27525: PUSH
27526: LD_VAR 0 4
27530: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27531: LD_ADDR_OWVAR 41
27535: PUSH
27536: LD_VAR 0 5
27540: ST_TO_ADDR
// end ;
27541: LD_VAR 0 6
27545: RET
// export function WantPlant ( unit ) ; var task ; begin
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
// result := false ;
27550: LD_ADDR_VAR 0 2
27554: PUSH
27555: LD_INT 0
27557: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 437
27572: ST_TO_ADDR
// if task then
27573: LD_VAR 0 3
27577: IFFALSE 27605
// if task [ 1 ] [ 1 ] = p then
27579: LD_VAR 0 3
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PUSH
27592: LD_STRING p
27594: EQUAL
27595: IFFALSE 27605
// result := true ;
27597: LD_ADDR_VAR 0 2
27601: PUSH
27602: LD_INT 1
27604: ST_TO_ADDR
// end ;
27605: LD_VAR 0 2
27609: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// if pos < 1 then
27616: LD_VAR 0 2
27620: PUSH
27621: LD_INT 1
27623: LESS
27624: IFFALSE 27628
// exit ;
27626: GO 27931
// if pos = 1 then
27628: LD_VAR 0 2
27632: PUSH
27633: LD_INT 1
27635: EQUAL
27636: IFFALSE 27669
// result := Replace ( arr , pos [ 1 ] , value ) else
27638: LD_ADDR_VAR 0 4
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_VAR 0 2
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: LD_VAR 0 3
27661: PPUSH
27662: CALL_OW 1
27666: ST_TO_ADDR
27667: GO 27931
// begin tmp := arr ;
27669: LD_ADDR_VAR 0 6
27673: PUSH
27674: LD_VAR 0 1
27678: ST_TO_ADDR
// s_arr := [ tmp ] ;
27679: LD_ADDR_VAR 0 7
27683: PUSH
27684: LD_VAR 0 6
27688: PUSH
27689: EMPTY
27690: LIST
27691: ST_TO_ADDR
// for i = 1 to pos - 1 do
27692: LD_ADDR_VAR 0 5
27696: PUSH
27697: DOUBLE
27698: LD_INT 1
27700: DEC
27701: ST_TO_ADDR
27702: LD_VAR 0 2
27706: PUSH
27707: LD_INT 1
27709: MINUS
27710: PUSH
27711: FOR_TO
27712: IFFALSE 27757
// begin tmp := tmp [ pos [ i ] ] ;
27714: LD_ADDR_VAR 0 6
27718: PUSH
27719: LD_VAR 0 6
27723: PUSH
27724: LD_VAR 0 2
27728: PUSH
27729: LD_VAR 0 5
27733: ARRAY
27734: ARRAY
27735: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27736: LD_ADDR_VAR 0 7
27740: PUSH
27741: LD_VAR 0 7
27745: PUSH
27746: LD_VAR 0 6
27750: PUSH
27751: EMPTY
27752: LIST
27753: ADD
27754: ST_TO_ADDR
// end ;
27755: GO 27711
27757: POP
27758: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27759: LD_ADDR_VAR 0 6
27763: PUSH
27764: LD_VAR 0 6
27768: PPUSH
27769: LD_VAR 0 2
27773: PUSH
27774: LD_VAR 0 2
27778: ARRAY
27779: PPUSH
27780: LD_VAR 0 3
27784: PPUSH
27785: CALL_OW 1
27789: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27790: LD_ADDR_VAR 0 7
27794: PUSH
27795: LD_VAR 0 7
27799: PPUSH
27800: LD_VAR 0 7
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 1
27814: ST_TO_ADDR
// for i = s_arr downto 2 do
27815: LD_ADDR_VAR 0 5
27819: PUSH
27820: DOUBLE
27821: LD_VAR 0 7
27825: INC
27826: ST_TO_ADDR
27827: LD_INT 2
27829: PUSH
27830: FOR_DOWNTO
27831: IFFALSE 27915
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27833: LD_ADDR_VAR 0 6
27837: PUSH
27838: LD_VAR 0 7
27842: PUSH
27843: LD_VAR 0 5
27847: PUSH
27848: LD_INT 1
27850: MINUS
27851: ARRAY
27852: PPUSH
27853: LD_VAR 0 2
27857: PUSH
27858: LD_VAR 0 5
27862: PUSH
27863: LD_INT 1
27865: MINUS
27866: ARRAY
27867: PPUSH
27868: LD_VAR 0 7
27872: PUSH
27873: LD_VAR 0 5
27877: ARRAY
27878: PPUSH
27879: CALL_OW 1
27883: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27884: LD_ADDR_VAR 0 7
27888: PUSH
27889: LD_VAR 0 7
27893: PPUSH
27894: LD_VAR 0 5
27898: PUSH
27899: LD_INT 1
27901: MINUS
27902: PPUSH
27903: LD_VAR 0 6
27907: PPUSH
27908: CALL_OW 1
27912: ST_TO_ADDR
// end ;
27913: GO 27830
27915: POP
27916: POP
// result := s_arr [ 1 ] ;
27917: LD_ADDR_VAR 0 4
27921: PUSH
27922: LD_VAR 0 7
27926: PUSH
27927: LD_INT 1
27929: ARRAY
27930: ST_TO_ADDR
// end ; end ;
27931: LD_VAR 0 4
27935: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27936: LD_INT 0
27938: PPUSH
27939: PPUSH
// if not list then
27940: LD_VAR 0 1
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 28040
// i := list [ pos1 ] ;
27949: LD_ADDR_VAR 0 5
27953: PUSH
27954: LD_VAR 0 1
27958: PUSH
27959: LD_VAR 0 2
27963: ARRAY
27964: ST_TO_ADDR
// if not i then
27965: LD_VAR 0 5
27969: NOT
27970: IFFALSE 27974
// exit ;
27972: GO 28040
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27974: LD_ADDR_VAR 0 1
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_VAR 0 2
27988: PPUSH
27989: LD_VAR 0 1
27993: PUSH
27994: LD_VAR 0 3
27998: ARRAY
27999: PPUSH
28000: CALL_OW 1
28004: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28005: LD_ADDR_VAR 0 1
28009: PUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: LD_VAR 0 5
28024: PPUSH
28025: CALL_OW 1
28029: ST_TO_ADDR
// result := list ;
28030: LD_ADDR_VAR 0 4
28034: PUSH
28035: LD_VAR 0 1
28039: ST_TO_ADDR
// end ;
28040: LD_VAR 0 4
28044: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28045: LD_INT 0
28047: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28048: LD_ADDR_VAR 0 5
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 250
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 251
28072: PPUSH
28073: LD_VAR 0 2
28077: PPUSH
28078: LD_VAR 0 3
28082: PPUSH
28083: LD_VAR 0 4
28087: PPUSH
28088: CALL 28466 0 5
28092: ST_TO_ADDR
// end ;
28093: LD_VAR 0 5
28097: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28098: LD_INT 0
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
// if not list or not unit then
28104: LD_VAR 0 2
28108: NOT
28109: PUSH
28110: LD_VAR 0 1
28114: NOT
28115: OR
28116: IFFALSE 28120
// exit ;
28118: GO 28461
// result := [ ] ;
28120: LD_ADDR_VAR 0 5
28124: PUSH
28125: EMPTY
28126: ST_TO_ADDR
// for i in list do
28127: LD_ADDR_VAR 0 6
28131: PUSH
28132: LD_VAR 0 2
28136: PUSH
28137: FOR_IN
28138: IFFALSE 28356
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28140: LD_ADDR_VAR 0 8
28144: PUSH
28145: LD_VAR 0 1
28149: PPUSH
28150: LD_VAR 0 6
28154: PUSH
28155: LD_INT 1
28157: ARRAY
28158: PPUSH
28159: LD_VAR 0 6
28163: PUSH
28164: LD_INT 2
28166: ARRAY
28167: PPUSH
28168: CALL_OW 297
28172: ST_TO_ADDR
// if not Count ( result ) then
28173: LD_VAR 0 5
28177: PPUSH
28178: CALL 24750 0 1
28182: NOT
28183: IFFALSE 28216
// begin result := Join ( result , [ i , tmp ] ) ;
28185: LD_ADDR_VAR 0 5
28189: PUSH
28190: LD_VAR 0 5
28194: PPUSH
28195: LD_VAR 0 6
28199: PUSH
28200: LD_VAR 0 8
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL 60350 0 2
28213: ST_TO_ADDR
// continue ;
28214: GO 28137
// end ; if result [ result ] [ 2 ] <= tmp then
28216: LD_VAR 0 5
28220: PUSH
28221: LD_VAR 0 5
28225: ARRAY
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PUSH
28231: LD_VAR 0 8
28235: LESSEQUAL
28236: IFFALSE 28269
// result := Join ( result , [ i , tmp ] ) else
28238: LD_ADDR_VAR 0 5
28242: PUSH
28243: LD_VAR 0 5
28247: PPUSH
28248: LD_VAR 0 6
28252: PUSH
28253: LD_VAR 0 8
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PPUSH
28262: CALL 60350 0 2
28266: ST_TO_ADDR
28267: GO 28354
// begin for j := 1 to Count ( result ) do
28269: LD_ADDR_VAR 0 7
28273: PUSH
28274: DOUBLE
28275: LD_INT 1
28277: DEC
28278: ST_TO_ADDR
28279: LD_VAR 0 5
28283: PPUSH
28284: CALL 24750 0 1
28288: PUSH
28289: FOR_TO
28290: IFFALSE 28352
// begin if tmp < result [ j ] [ 2 ] then
28292: LD_VAR 0 8
28296: PUSH
28297: LD_VAR 0 5
28301: PUSH
28302: LD_VAR 0 7
28306: ARRAY
28307: PUSH
28308: LD_INT 2
28310: ARRAY
28311: LESS
28312: IFFALSE 28350
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28314: LD_ADDR_VAR 0 5
28318: PUSH
28319: LD_VAR 0 5
28323: PPUSH
28324: LD_VAR 0 7
28328: PPUSH
28329: LD_VAR 0 6
28333: PUSH
28334: LD_VAR 0 8
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PPUSH
28343: CALL_OW 2
28347: ST_TO_ADDR
// break ;
28348: GO 28352
// end ; end ;
28350: GO 28289
28352: POP
28353: POP
// end ; end ;
28354: GO 28137
28356: POP
28357: POP
// if result and not asc then
28358: LD_VAR 0 5
28362: PUSH
28363: LD_VAR 0 3
28367: NOT
28368: AND
28369: IFFALSE 28386
// result := ReverseArray ( result ) ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_VAR 0 5
28380: PPUSH
28381: CALL 55626 0 1
28385: ST_TO_ADDR
// tmp := [ ] ;
28386: LD_ADDR_VAR 0 8
28390: PUSH
28391: EMPTY
28392: ST_TO_ADDR
// if mode then
28393: LD_VAR 0 4
28397: IFFALSE 28461
// begin for i := 1 to result do
28399: LD_ADDR_VAR 0 6
28403: PUSH
28404: DOUBLE
28405: LD_INT 1
28407: DEC
28408: ST_TO_ADDR
28409: LD_VAR 0 5
28413: PUSH
28414: FOR_TO
28415: IFFALSE 28449
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28417: LD_ADDR_VAR 0 8
28421: PUSH
28422: LD_VAR 0 8
28426: PPUSH
28427: LD_VAR 0 5
28431: PUSH
28432: LD_VAR 0 6
28436: ARRAY
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: CALL 60350 0 2
28446: ST_TO_ADDR
28447: GO 28414
28449: POP
28450: POP
// result := tmp ;
28451: LD_ADDR_VAR 0 5
28455: PUSH
28456: LD_VAR 0 8
28460: ST_TO_ADDR
// end ; end ;
28461: LD_VAR 0 5
28465: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28466: LD_INT 0
28468: PPUSH
28469: PPUSH
28470: PPUSH
28471: PPUSH
// if not list then
28472: LD_VAR 0 3
28476: NOT
28477: IFFALSE 28481
// exit ;
28479: GO 28869
// result := [ ] ;
28481: LD_ADDR_VAR 0 6
28485: PUSH
28486: EMPTY
28487: ST_TO_ADDR
// for i in list do
28488: LD_ADDR_VAR 0 7
28492: PUSH
28493: LD_VAR 0 3
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28701
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28501: LD_ADDR_VAR 0 9
28505: PUSH
28506: LD_VAR 0 7
28510: PPUSH
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: CALL_OW 297
28525: ST_TO_ADDR
// if not result then
28526: LD_VAR 0 6
28530: NOT
28531: IFFALSE 28557
// result := [ [ i , tmp ] ] else
28533: LD_ADDR_VAR 0 6
28537: PUSH
28538: LD_VAR 0 7
28542: PUSH
28543: LD_VAR 0 9
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: ST_TO_ADDR
28555: GO 28699
// begin if result [ result ] [ 2 ] < tmp then
28557: LD_VAR 0 6
28561: PUSH
28562: LD_VAR 0 6
28566: ARRAY
28567: PUSH
28568: LD_INT 2
28570: ARRAY
28571: PUSH
28572: LD_VAR 0 9
28576: LESS
28577: IFFALSE 28619
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28579: LD_ADDR_VAR 0 6
28583: PUSH
28584: LD_VAR 0 6
28588: PPUSH
28589: LD_VAR 0 6
28593: PUSH
28594: LD_INT 1
28596: PLUS
28597: PPUSH
28598: LD_VAR 0 7
28602: PUSH
28603: LD_VAR 0 9
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PPUSH
28612: CALL_OW 2
28616: ST_TO_ADDR
28617: GO 28699
// for j = 1 to result do
28619: LD_ADDR_VAR 0 8
28623: PUSH
28624: DOUBLE
28625: LD_INT 1
28627: DEC
28628: ST_TO_ADDR
28629: LD_VAR 0 6
28633: PUSH
28634: FOR_TO
28635: IFFALSE 28697
// begin if tmp < result [ j ] [ 2 ] then
28637: LD_VAR 0 9
28641: PUSH
28642: LD_VAR 0 6
28646: PUSH
28647: LD_VAR 0 8
28651: ARRAY
28652: PUSH
28653: LD_INT 2
28655: ARRAY
28656: LESS
28657: IFFALSE 28695
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28659: LD_ADDR_VAR 0 6
28663: PUSH
28664: LD_VAR 0 6
28668: PPUSH
28669: LD_VAR 0 8
28673: PPUSH
28674: LD_VAR 0 7
28678: PUSH
28679: LD_VAR 0 9
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PPUSH
28688: CALL_OW 2
28692: ST_TO_ADDR
// break ;
28693: GO 28697
// end ; end ;
28695: GO 28634
28697: POP
28698: POP
// end ; end ;
28699: GO 28498
28701: POP
28702: POP
// if result and not asc then
28703: LD_VAR 0 6
28707: PUSH
28708: LD_VAR 0 4
28712: NOT
28713: AND
28714: IFFALSE 28789
// begin tmp := result ;
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: LD_VAR 0 6
28725: ST_TO_ADDR
// for i = tmp downto 1 do
28726: LD_ADDR_VAR 0 7
28730: PUSH
28731: DOUBLE
28732: LD_VAR 0 9
28736: INC
28737: ST_TO_ADDR
28738: LD_INT 1
28740: PUSH
28741: FOR_DOWNTO
28742: IFFALSE 28787
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28744: LD_ADDR_VAR 0 6
28748: PUSH
28749: LD_VAR 0 6
28753: PPUSH
28754: LD_VAR 0 9
28758: PUSH
28759: LD_VAR 0 7
28763: MINUS
28764: PUSH
28765: LD_INT 1
28767: PLUS
28768: PPUSH
28769: LD_VAR 0 9
28773: PUSH
28774: LD_VAR 0 7
28778: ARRAY
28779: PPUSH
28780: CALL_OW 1
28784: ST_TO_ADDR
28785: GO 28741
28787: POP
28788: POP
// end ; tmp := [ ] ;
28789: LD_ADDR_VAR 0 9
28793: PUSH
28794: EMPTY
28795: ST_TO_ADDR
// if mode then
28796: LD_VAR 0 5
28800: IFFALSE 28869
// begin for i = 1 to result do
28802: LD_ADDR_VAR 0 7
28806: PUSH
28807: DOUBLE
28808: LD_INT 1
28810: DEC
28811: ST_TO_ADDR
28812: LD_VAR 0 6
28816: PUSH
28817: FOR_TO
28818: IFFALSE 28857
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28820: LD_ADDR_VAR 0 9
28824: PUSH
28825: LD_VAR 0 9
28829: PPUSH
28830: LD_VAR 0 7
28834: PPUSH
28835: LD_VAR 0 6
28839: PUSH
28840: LD_VAR 0 7
28844: ARRAY
28845: PUSH
28846: LD_INT 1
28848: ARRAY
28849: PPUSH
28850: CALL_OW 1
28854: ST_TO_ADDR
28855: GO 28817
28857: POP
28858: POP
// result := tmp ;
28859: LD_ADDR_VAR 0 6
28863: PUSH
28864: LD_VAR 0 9
28868: ST_TO_ADDR
// end ; end ;
28869: LD_VAR 0 6
28873: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28874: LD_INT 0
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28882: LD_ADDR_VAR 0 5
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// if not x or not y then
28904: LD_VAR 0 2
28908: NOT
28909: PUSH
28910: LD_VAR 0 3
28914: NOT
28915: OR
28916: IFFALSE 28920
// exit ;
28918: GO 30570
// if not range then
28920: LD_VAR 0 4
28924: NOT
28925: IFFALSE 28935
// range := 10 ;
28927: LD_ADDR_VAR 0 4
28931: PUSH
28932: LD_INT 10
28934: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28935: LD_ADDR_VAR 0 8
28939: PUSH
28940: LD_INT 81
28942: PUSH
28943: LD_VAR 0 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 92
28954: PUSH
28955: LD_VAR 0 2
28959: PUSH
28960: LD_VAR 0 3
28964: PUSH
28965: LD_VAR 0 4
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 21
28981: PUSH
28982: LD_INT 3
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: PPUSH
28998: CALL_OW 69
29002: ST_TO_ADDR
// if not tmp then
29003: LD_VAR 0 8
29007: NOT
29008: IFFALSE 29012
// exit ;
29010: GO 30570
// for i in tmp do
29012: LD_ADDR_VAR 0 6
29016: PUSH
29017: LD_VAR 0 8
29021: PUSH
29022: FOR_IN
29023: IFFALSE 30545
// begin points := [ 0 , 0 , 0 ] ;
29025: LD_ADDR_VAR 0 9
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: ST_TO_ADDR
// bpoints := 1 ;
29044: LD_ADDR_VAR 0 10
29048: PUSH
29049: LD_INT 1
29051: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 247
29061: PUSH
29062: LD_INT 1
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29648
29070: POP
// begin if GetClass ( i ) = 1 then
29071: LD_VAR 0 6
29075: PPUSH
29076: CALL_OW 257
29080: PUSH
29081: LD_INT 1
29083: EQUAL
29084: IFFALSE 29105
// points := [ 10 , 5 , 3 ] ;
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: LD_INT 10
29093: PUSH
29094: LD_INT 5
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29105: LD_VAR 0 6
29109: PPUSH
29110: CALL_OW 257
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: LD_INT 4
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: IN
29129: IFFALSE 29150
// points := [ 3 , 2 , 1 ] ;
29131: LD_ADDR_VAR 0 9
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29150: LD_VAR 0 6
29154: PPUSH
29155: CALL_OW 257
29159: PUSH
29160: LD_INT 5
29162: EQUAL
29163: IFFALSE 29184
// points := [ 130 , 5 , 2 ] ;
29165: LD_ADDR_VAR 0 9
29169: PUSH
29170: LD_INT 130
29172: PUSH
29173: LD_INT 5
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29184: LD_VAR 0 6
29188: PPUSH
29189: CALL_OW 257
29193: PUSH
29194: LD_INT 8
29196: EQUAL
29197: IFFALSE 29218
// points := [ 35 , 35 , 30 ] ;
29199: LD_ADDR_VAR 0 9
29203: PUSH
29204: LD_INT 35
29206: PUSH
29207: LD_INT 35
29209: PUSH
29210: LD_INT 30
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29218: LD_VAR 0 6
29222: PPUSH
29223: CALL_OW 257
29227: PUSH
29228: LD_INT 9
29230: EQUAL
29231: IFFALSE 29252
// points := [ 20 , 55 , 40 ] ;
29233: LD_ADDR_VAR 0 9
29237: PUSH
29238: LD_INT 20
29240: PUSH
29241: LD_INT 55
29243: PUSH
29244: LD_INT 40
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29252: LD_VAR 0 6
29256: PPUSH
29257: CALL_OW 257
29261: PUSH
29262: LD_INT 12
29264: PUSH
29265: LD_INT 16
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: IN
29272: IFFALSE 29293
// points := [ 5 , 3 , 2 ] ;
29274: LD_ADDR_VAR 0 9
29278: PUSH
29279: LD_INT 5
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29293: LD_VAR 0 6
29297: PPUSH
29298: CALL_OW 257
29302: PUSH
29303: LD_INT 17
29305: EQUAL
29306: IFFALSE 29327
// points := [ 100 , 50 , 75 ] ;
29308: LD_ADDR_VAR 0 9
29312: PUSH
29313: LD_INT 100
29315: PUSH
29316: LD_INT 50
29318: PUSH
29319: LD_INT 75
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29327: LD_VAR 0 6
29331: PPUSH
29332: CALL_OW 257
29336: PUSH
29337: LD_INT 15
29339: EQUAL
29340: IFFALSE 29361
// points := [ 10 , 5 , 3 ] ;
29342: LD_ADDR_VAR 0 9
29346: PUSH
29347: LD_INT 10
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29361: LD_VAR 0 6
29365: PPUSH
29366: CALL_OW 257
29370: PUSH
29371: LD_INT 14
29373: EQUAL
29374: IFFALSE 29395
// points := [ 10 , 0 , 0 ] ;
29376: LD_ADDR_VAR 0 9
29380: PUSH
29381: LD_INT 10
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29395: LD_VAR 0 6
29399: PPUSH
29400: CALL_OW 257
29404: PUSH
29405: LD_INT 11
29407: EQUAL
29408: IFFALSE 29429
// points := [ 30 , 10 , 5 ] ;
29410: LD_ADDR_VAR 0 9
29414: PUSH
29415: LD_INT 30
29417: PUSH
29418: LD_INT 10
29420: PUSH
29421: LD_INT 5
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29429: LD_VAR 0 1
29433: PPUSH
29434: LD_INT 5
29436: PPUSH
29437: CALL_OW 321
29441: PUSH
29442: LD_INT 2
29444: EQUAL
29445: IFFALSE 29462
// bpoints := bpoints * 1.8 ;
29447: LD_ADDR_VAR 0 10
29451: PUSH
29452: LD_VAR 0 10
29456: PUSH
29457: LD_REAL  1.80000000000000E+0000
29460: MUL
29461: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29462: LD_VAR 0 6
29466: PPUSH
29467: CALL_OW 257
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 3
29480: PUSH
29481: LD_INT 4
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: IN
29490: PUSH
29491: LD_VAR 0 1
29495: PPUSH
29496: LD_INT 51
29498: PPUSH
29499: CALL_OW 321
29503: PUSH
29504: LD_INT 2
29506: EQUAL
29507: AND
29508: IFFALSE 29525
// bpoints := bpoints * 1.2 ;
29510: LD_ADDR_VAR 0 10
29514: PUSH
29515: LD_VAR 0 10
29519: PUSH
29520: LD_REAL  1.20000000000000E+0000
29523: MUL
29524: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29525: LD_VAR 0 6
29529: PPUSH
29530: CALL_OW 257
29534: PUSH
29535: LD_INT 5
29537: PUSH
29538: LD_INT 7
29540: PUSH
29541: LD_INT 9
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: IN
29549: PUSH
29550: LD_VAR 0 1
29554: PPUSH
29555: LD_INT 52
29557: PPUSH
29558: CALL_OW 321
29562: PUSH
29563: LD_INT 2
29565: EQUAL
29566: AND
29567: IFFALSE 29584
// bpoints := bpoints * 1.5 ;
29569: LD_ADDR_VAR 0 10
29573: PUSH
29574: LD_VAR 0 10
29578: PUSH
29579: LD_REAL  1.50000000000000E+0000
29582: MUL
29583: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_INT 66
29591: PPUSH
29592: CALL_OW 321
29596: PUSH
29597: LD_INT 2
29599: EQUAL
29600: IFFALSE 29617
// bpoints := bpoints * 1.1 ;
29602: LD_ADDR_VAR 0 10
29606: PUSH
29607: LD_VAR 0 10
29611: PUSH
29612: LD_REAL  1.10000000000000E+0000
29615: MUL
29616: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29617: LD_ADDR_VAR 0 10
29621: PUSH
29622: LD_VAR 0 10
29626: PUSH
29627: LD_VAR 0 6
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 259
29639: PUSH
29640: LD_REAL  1.15000000000000E+0000
29643: MUL
29644: MUL
29645: ST_TO_ADDR
// end ; unit_vehicle :
29646: GO 30474
29648: LD_INT 2
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 30462
29656: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 264
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 42
29672: PUSH
29673: LD_INT 24
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: LIST
29680: IN
29681: IFFALSE 29702
// points := [ 25 , 5 , 3 ] ;
29683: LD_ADDR_VAR 0 9
29687: PUSH
29688: LD_INT 25
29690: PUSH
29691: LD_INT 5
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29702: LD_VAR 0 6
29706: PPUSH
29707: CALL_OW 264
29711: PUSH
29712: LD_INT 4
29714: PUSH
29715: LD_INT 43
29717: PUSH
29718: LD_INT 25
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: IN
29726: IFFALSE 29747
// points := [ 40 , 15 , 5 ] ;
29728: LD_ADDR_VAR 0 9
29732: PUSH
29733: LD_INT 40
29735: PUSH
29736: LD_INT 15
29738: PUSH
29739: LD_INT 5
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29747: LD_VAR 0 6
29751: PPUSH
29752: CALL_OW 264
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 23
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: IN
29767: IFFALSE 29788
// points := [ 7 , 25 , 8 ] ;
29769: LD_ADDR_VAR 0 9
29773: PUSH
29774: LD_INT 7
29776: PUSH
29777: LD_INT 25
29779: PUSH
29780: LD_INT 8
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29788: LD_VAR 0 6
29792: PPUSH
29793: CALL_OW 264
29797: PUSH
29798: LD_INT 5
29800: PUSH
29801: LD_INT 27
29803: PUSH
29804: LD_INT 44
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: IN
29812: IFFALSE 29833
// points := [ 14 , 50 , 16 ] ;
29814: LD_ADDR_VAR 0 9
29818: PUSH
29819: LD_INT 14
29821: PUSH
29822: LD_INT 50
29824: PUSH
29825: LD_INT 16
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29833: LD_VAR 0 6
29837: PPUSH
29838: CALL_OW 264
29842: PUSH
29843: LD_INT 6
29845: PUSH
29846: LD_INT 46
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: IN
29853: IFFALSE 29874
// points := [ 32 , 120 , 70 ] ;
29855: LD_ADDR_VAR 0 9
29859: PUSH
29860: LD_INT 32
29862: PUSH
29863: LD_INT 120
29865: PUSH
29866: LD_INT 70
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29874: LD_VAR 0 6
29878: PPUSH
29879: CALL_OW 264
29883: PUSH
29884: LD_INT 7
29886: PUSH
29887: LD_INT 28
29889: PUSH
29890: LD_INT 45
29892: PUSH
29893: LD_INT 92
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: IN
29902: IFFALSE 29923
// points := [ 35 , 20 , 45 ] ;
29904: LD_ADDR_VAR 0 9
29908: PUSH
29909: LD_INT 35
29911: PUSH
29912: LD_INT 20
29914: PUSH
29915: LD_INT 45
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29923: LD_VAR 0 6
29927: PPUSH
29928: CALL_OW 264
29932: PUSH
29933: LD_INT 47
29935: PUSH
29936: EMPTY
29937: LIST
29938: IN
29939: IFFALSE 29960
// points := [ 67 , 45 , 75 ] ;
29941: LD_ADDR_VAR 0 9
29945: PUSH
29946: LD_INT 67
29948: PUSH
29949: LD_INT 45
29951: PUSH
29952: LD_INT 75
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29960: LD_VAR 0 6
29964: PPUSH
29965: CALL_OW 264
29969: PUSH
29970: LD_INT 26
29972: PUSH
29973: EMPTY
29974: LIST
29975: IN
29976: IFFALSE 29997
// points := [ 120 , 30 , 80 ] ;
29978: LD_ADDR_VAR 0 9
29982: PUSH
29983: LD_INT 120
29985: PUSH
29986: LD_INT 30
29988: PUSH
29989: LD_INT 80
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29997: LD_VAR 0 6
30001: PPUSH
30002: CALL_OW 264
30006: PUSH
30007: LD_INT 22
30009: PUSH
30010: EMPTY
30011: LIST
30012: IN
30013: IFFALSE 30034
// points := [ 40 , 1 , 1 ] ;
30015: LD_ADDR_VAR 0 9
30019: PUSH
30020: LD_INT 40
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30034: LD_VAR 0 6
30038: PPUSH
30039: CALL_OW 264
30043: PUSH
30044: LD_INT 29
30046: PUSH
30047: EMPTY
30048: LIST
30049: IN
30050: IFFALSE 30071
// points := [ 70 , 200 , 400 ] ;
30052: LD_ADDR_VAR 0 9
30056: PUSH
30057: LD_INT 70
30059: PUSH
30060: LD_INT 200
30062: PUSH
30063: LD_INT 400
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30071: LD_VAR 0 6
30075: PPUSH
30076: CALL_OW 264
30080: PUSH
30081: LD_INT 14
30083: PUSH
30084: LD_INT 53
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: IN
30091: IFFALSE 30112
// points := [ 40 , 10 , 20 ] ;
30093: LD_ADDR_VAR 0 9
30097: PUSH
30098: LD_INT 40
30100: PUSH
30101: LD_INT 10
30103: PUSH
30104: LD_INT 20
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30112: LD_VAR 0 6
30116: PPUSH
30117: CALL_OW 264
30121: PUSH
30122: LD_INT 9
30124: PUSH
30125: EMPTY
30126: LIST
30127: IN
30128: IFFALSE 30149
// points := [ 5 , 70 , 20 ] ;
30130: LD_ADDR_VAR 0 9
30134: PUSH
30135: LD_INT 5
30137: PUSH
30138: LD_INT 70
30140: PUSH
30141: LD_INT 20
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30149: LD_VAR 0 6
30153: PPUSH
30154: CALL_OW 264
30158: PUSH
30159: LD_INT 10
30161: PUSH
30162: EMPTY
30163: LIST
30164: IN
30165: IFFALSE 30186
// points := [ 35 , 110 , 70 ] ;
30167: LD_ADDR_VAR 0 9
30171: PUSH
30172: LD_INT 35
30174: PUSH
30175: LD_INT 110
30177: PUSH
30178: LD_INT 70
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30186: LD_VAR 0 6
30190: PPUSH
30191: CALL_OW 265
30195: PUSH
30196: LD_INT 25
30198: EQUAL
30199: IFFALSE 30220
// points := [ 80 , 65 , 100 ] ;
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: LD_INT 80
30208: PUSH
30209: LD_INT 65
30211: PUSH
30212: LD_INT 100
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30220: LD_VAR 0 6
30224: PPUSH
30225: CALL_OW 263
30229: PUSH
30230: LD_INT 1
30232: EQUAL
30233: IFFALSE 30268
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30235: LD_ADDR_VAR 0 10
30239: PUSH
30240: LD_VAR 0 10
30244: PUSH
30245: LD_VAR 0 6
30249: PPUSH
30250: CALL_OW 311
30254: PPUSH
30255: LD_INT 3
30257: PPUSH
30258: CALL_OW 259
30262: PUSH
30263: LD_INT 4
30265: MUL
30266: MUL
30267: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30268: LD_VAR 0 6
30272: PPUSH
30273: CALL_OW 263
30277: PUSH
30278: LD_INT 2
30280: EQUAL
30281: IFFALSE 30332
// begin j := IsControledBy ( i ) ;
30283: LD_ADDR_VAR 0 7
30287: PUSH
30288: LD_VAR 0 6
30292: PPUSH
30293: CALL_OW 312
30297: ST_TO_ADDR
// if j then
30298: LD_VAR 0 7
30302: IFFALSE 30332
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30304: LD_ADDR_VAR 0 10
30308: PUSH
30309: LD_VAR 0 10
30313: PUSH
30314: LD_VAR 0 7
30318: PPUSH
30319: LD_INT 3
30321: PPUSH
30322: CALL_OW 259
30326: PUSH
30327: LD_INT 3
30329: MUL
30330: MUL
30331: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30332: LD_VAR 0 6
30336: PPUSH
30337: CALL_OW 264
30341: PUSH
30342: LD_INT 5
30344: PUSH
30345: LD_INT 6
30347: PUSH
30348: LD_INT 46
30350: PUSH
30351: LD_INT 44
30353: PUSH
30354: LD_INT 47
30356: PUSH
30357: LD_INT 45
30359: PUSH
30360: LD_INT 28
30362: PUSH
30363: LD_INT 7
30365: PUSH
30366: LD_INT 27
30368: PUSH
30369: LD_INT 29
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: IN
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: LD_INT 52
30392: PPUSH
30393: CALL_OW 321
30397: PUSH
30398: LD_INT 2
30400: EQUAL
30401: AND
30402: IFFALSE 30419
// bpoints := bpoints * 1.2 ;
30404: LD_ADDR_VAR 0 10
30408: PUSH
30409: LD_VAR 0 10
30413: PUSH
30414: LD_REAL  1.20000000000000E+0000
30417: MUL
30418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30419: LD_VAR 0 6
30423: PPUSH
30424: CALL_OW 264
30428: PUSH
30429: LD_INT 6
30431: PUSH
30432: LD_INT 46
30434: PUSH
30435: LD_INT 47
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: IN
30443: IFFALSE 30460
// bpoints := bpoints * 1.2 ;
30445: LD_ADDR_VAR 0 10
30449: PUSH
30450: LD_VAR 0 10
30454: PUSH
30455: LD_REAL  1.20000000000000E+0000
30458: MUL
30459: ST_TO_ADDR
// end ; unit_building :
30460: GO 30474
30462: LD_INT 3
30464: DOUBLE
30465: EQUAL
30466: IFTRUE 30470
30468: GO 30473
30470: POP
// ; end ;
30471: GO 30474
30473: POP
// for j = 1 to 3 do
30474: LD_ADDR_VAR 0 7
30478: PUSH
30479: DOUBLE
30480: LD_INT 1
30482: DEC
30483: ST_TO_ADDR
30484: LD_INT 3
30486: PUSH
30487: FOR_TO
30488: IFFALSE 30541
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30490: LD_ADDR_VAR 0 5
30494: PUSH
30495: LD_VAR 0 5
30499: PPUSH
30500: LD_VAR 0 7
30504: PPUSH
30505: LD_VAR 0 5
30509: PUSH
30510: LD_VAR 0 7
30514: ARRAY
30515: PUSH
30516: LD_VAR 0 9
30520: PUSH
30521: LD_VAR 0 7
30525: ARRAY
30526: PUSH
30527: LD_VAR 0 10
30531: MUL
30532: PLUS
30533: PPUSH
30534: CALL_OW 1
30538: ST_TO_ADDR
30539: GO 30487
30541: POP
30542: POP
// end ;
30543: GO 29022
30545: POP
30546: POP
// result := Replace ( result , 4 , tmp ) ;
30547: LD_ADDR_VAR 0 5
30551: PUSH
30552: LD_VAR 0 5
30556: PPUSH
30557: LD_INT 4
30559: PPUSH
30560: LD_VAR 0 8
30564: PPUSH
30565: CALL_OW 1
30569: ST_TO_ADDR
// end ;
30570: LD_VAR 0 5
30574: RET
// export function DangerAtRange ( unit , range ) ; begin
30575: LD_INT 0
30577: PPUSH
// if not unit then
30578: LD_VAR 0 1
30582: NOT
30583: IFFALSE 30587
// exit ;
30585: GO 30632
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30587: LD_ADDR_VAR 0 3
30591: PUSH
30592: LD_VAR 0 1
30596: PPUSH
30597: CALL_OW 255
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL_OW 250
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 251
30621: PPUSH
30622: LD_VAR 0 2
30626: PPUSH
30627: CALL 28874 0 4
30631: ST_TO_ADDR
// end ;
30632: LD_VAR 0 3
30636: RET
// export function DangerInArea ( side , area ) ; begin
30637: LD_INT 0
30639: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_VAR 0 2
30649: PPUSH
30650: LD_INT 81
30652: PUSH
30653: LD_VAR 0 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PPUSH
30662: CALL_OW 70
30666: ST_TO_ADDR
// end ;
30667: LD_VAR 0 3
30671: RET
// export function IsExtension ( b ) ; begin
30672: LD_INT 0
30674: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30675: LD_ADDR_VAR 0 2
30679: PUSH
30680: LD_VAR 0 1
30684: PUSH
30685: LD_INT 23
30687: PUSH
30688: LD_INT 20
30690: PUSH
30691: LD_INT 22
30693: PUSH
30694: LD_INT 17
30696: PUSH
30697: LD_INT 24
30699: PUSH
30700: LD_INT 21
30702: PUSH
30703: LD_INT 19
30705: PUSH
30706: LD_INT 16
30708: PUSH
30709: LD_INT 25
30711: PUSH
30712: LD_INT 18
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: IN
30727: ST_TO_ADDR
// end ;
30728: LD_VAR 0 2
30732: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30733: LD_INT 0
30735: PPUSH
30736: PPUSH
30737: PPUSH
// result := [ ] ;
30738: LD_ADDR_VAR 0 4
30742: PUSH
30743: EMPTY
30744: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30745: LD_ADDR_VAR 0 5
30749: PUSH
30750: LD_VAR 0 2
30754: PPUSH
30755: LD_INT 21
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PPUSH
30765: CALL_OW 70
30769: ST_TO_ADDR
// if not tmp then
30770: LD_VAR 0 5
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30843
// if checkLink then
30779: LD_VAR 0 3
30783: IFFALSE 30833
// begin for i in tmp do
30785: LD_ADDR_VAR 0 6
30789: PUSH
30790: LD_VAR 0 5
30794: PUSH
30795: FOR_IN
30796: IFFALSE 30831
// if GetBase ( i ) <> base then
30798: LD_VAR 0 6
30802: PPUSH
30803: CALL_OW 274
30807: PUSH
30808: LD_VAR 0 1
30812: NONEQUAL
30813: IFFALSE 30829
// ComLinkToBase ( base , i ) ;
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 6
30824: PPUSH
30825: CALL_OW 169
30829: GO 30795
30831: POP
30832: POP
// end ; result := tmp ;
30833: LD_ADDR_VAR 0 4
30837: PUSH
30838: LD_VAR 0 5
30842: ST_TO_ADDR
// end ;
30843: LD_VAR 0 4
30847: RET
// export function ComComplete ( units , b ) ; var i ; begin
30848: LD_INT 0
30850: PPUSH
30851: PPUSH
// if not units then
30852: LD_VAR 0 1
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 30951
// for i in units do
30861: LD_ADDR_VAR 0 4
30865: PUSH
30866: LD_VAR 0 1
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30949
// if BuildingStatus ( b ) = bs_build then
30874: LD_VAR 0 2
30878: PPUSH
30879: CALL_OW 461
30883: PUSH
30884: LD_INT 1
30886: EQUAL
30887: IFFALSE 30947
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30889: LD_VAR 0 4
30893: PPUSH
30894: LD_STRING h
30896: PUSH
30897: LD_VAR 0 2
30901: PPUSH
30902: CALL_OW 250
30906: PUSH
30907: LD_VAR 0 2
30911: PPUSH
30912: CALL_OW 251
30916: PUSH
30917: LD_VAR 0 2
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: PPUSH
30943: CALL_OW 446
30947: GO 30871
30949: POP
30950: POP
// end ;
30951: LD_VAR 0 3
30955: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30964: LD_VAR 0 1
30968: NOT
30969: PUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 263
30979: PUSH
30980: LD_INT 2
30982: NONEQUAL
30983: OR
30984: IFFALSE 30988
// exit ;
30986: GO 31304
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30988: LD_ADDR_VAR 0 6
30992: PUSH
30993: LD_INT 22
30995: PUSH
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 255
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: LD_INT 30
31015: PUSH
31016: LD_INT 36
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 34
31025: PUSH
31026: LD_INT 31
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PPUSH
31042: CALL_OW 69
31046: ST_TO_ADDR
// if not tmp then
31047: LD_VAR 0 6
31051: NOT
31052: IFFALSE 31056
// exit ;
31054: GO 31304
// result := [ ] ;
31056: LD_ADDR_VAR 0 2
31060: PUSH
31061: EMPTY
31062: ST_TO_ADDR
// for i in tmp do
31063: LD_ADDR_VAR 0 3
31067: PUSH
31068: LD_VAR 0 6
31072: PUSH
31073: FOR_IN
31074: IFFALSE 31145
// begin t := UnitsInside ( i ) ;
31076: LD_ADDR_VAR 0 4
31080: PUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: CALL_OW 313
31090: ST_TO_ADDR
// if t then
31091: LD_VAR 0 4
31095: IFFALSE 31143
// for j in t do
31097: LD_ADDR_VAR 0 7
31101: PUSH
31102: LD_VAR 0 4
31106: PUSH
31107: FOR_IN
31108: IFFALSE 31141
// result := Replace ( result , result + 1 , j ) ;
31110: LD_ADDR_VAR 0 2
31114: PUSH
31115: LD_VAR 0 2
31119: PPUSH
31120: LD_VAR 0 2
31124: PUSH
31125: LD_INT 1
31127: PLUS
31128: PPUSH
31129: LD_VAR 0 7
31133: PPUSH
31134: CALL_OW 1
31138: ST_TO_ADDR
31139: GO 31107
31141: POP
31142: POP
// end ;
31143: GO 31073
31145: POP
31146: POP
// if not result then
31147: LD_VAR 0 2
31151: NOT
31152: IFFALSE 31156
// exit ;
31154: GO 31304
// mech := result [ 1 ] ;
31156: LD_ADDR_VAR 0 5
31160: PUSH
31161: LD_VAR 0 2
31165: PUSH
31166: LD_INT 1
31168: ARRAY
31169: ST_TO_ADDR
// if result > 1 then
31170: LD_VAR 0 2
31174: PUSH
31175: LD_INT 1
31177: GREATER
31178: IFFALSE 31290
// begin for i = 2 to result do
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: DOUBLE
31186: LD_INT 2
31188: DEC
31189: ST_TO_ADDR
31190: LD_VAR 0 2
31194: PUSH
31195: FOR_TO
31196: IFFALSE 31288
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31198: LD_ADDR_VAR 0 4
31202: PUSH
31203: LD_VAR 0 2
31207: PUSH
31208: LD_VAR 0 3
31212: ARRAY
31213: PPUSH
31214: LD_INT 3
31216: PPUSH
31217: CALL_OW 259
31221: PUSH
31222: LD_VAR 0 2
31226: PUSH
31227: LD_VAR 0 3
31231: ARRAY
31232: PPUSH
31233: CALL_OW 432
31237: MINUS
31238: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31239: LD_VAR 0 4
31243: PUSH
31244: LD_VAR 0 5
31248: PPUSH
31249: LD_INT 3
31251: PPUSH
31252: CALL_OW 259
31256: PUSH
31257: LD_VAR 0 5
31261: PPUSH
31262: CALL_OW 432
31266: MINUS
31267: GREATEREQUAL
31268: IFFALSE 31286
// mech := result [ i ] ;
31270: LD_ADDR_VAR 0 5
31274: PUSH
31275: LD_VAR 0 2
31279: PUSH
31280: LD_VAR 0 3
31284: ARRAY
31285: ST_TO_ADDR
// end ;
31286: GO 31195
31288: POP
31289: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31290: LD_VAR 0 1
31294: PPUSH
31295: LD_VAR 0 5
31299: PPUSH
31300: CALL_OW 135
// end ;
31304: LD_VAR 0 2
31308: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31309: LD_INT 0
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
// result := [ ] ;
31324: LD_ADDR_VAR 0 7
31328: PUSH
31329: EMPTY
31330: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 266
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: IN
31351: NOT
31352: IFFALSE 31356
// exit ;
31354: GO 32990
// if name then
31356: LD_VAR 0 3
31360: IFFALSE 31376
// SetBName ( base_dep , name ) ;
31362: LD_VAR 0 1
31366: PPUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 500
// base := GetBase ( base_dep ) ;
31376: LD_ADDR_VAR 0 15
31380: PUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL_OW 274
31390: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31391: LD_ADDR_VAR 0 16
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 255
31405: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31406: LD_ADDR_VAR 0 17
31410: PUSH
31411: LD_VAR 0 1
31415: PPUSH
31416: CALL_OW 248
31420: ST_TO_ADDR
// if sources then
31421: LD_VAR 0 5
31425: IFFALSE 31472
// for i = 1 to 3 do
31427: LD_ADDR_VAR 0 8
31431: PUSH
31432: DOUBLE
31433: LD_INT 1
31435: DEC
31436: ST_TO_ADDR
31437: LD_INT 3
31439: PUSH
31440: FOR_TO
31441: IFFALSE 31470
// AddResourceType ( base , i , sources [ i ] ) ;
31443: LD_VAR 0 15
31447: PPUSH
31448: LD_VAR 0 8
31452: PPUSH
31453: LD_VAR 0 5
31457: PUSH
31458: LD_VAR 0 8
31462: ARRAY
31463: PPUSH
31464: CALL_OW 276
31468: GO 31440
31470: POP
31471: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31472: LD_ADDR_VAR 0 18
31476: PUSH
31477: LD_VAR 0 15
31481: PPUSH
31482: LD_VAR 0 2
31486: PPUSH
31487: LD_INT 1
31489: PPUSH
31490: CALL 30733 0 3
31494: ST_TO_ADDR
// InitHc ;
31495: CALL_OW 19
// InitUc ;
31499: CALL_OW 18
// uc_side := side ;
31503: LD_ADDR_OWVAR 20
31507: PUSH
31508: LD_VAR 0 16
31512: ST_TO_ADDR
// uc_nation := nation ;
31513: LD_ADDR_OWVAR 21
31517: PUSH
31518: LD_VAR 0 17
31522: ST_TO_ADDR
// if buildings then
31523: LD_VAR 0 18
31527: IFFALSE 32849
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31529: LD_ADDR_VAR 0 19
31533: PUSH
31534: LD_VAR 0 18
31538: PPUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 30
31544: PUSH
31545: LD_INT 29
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 30
31554: PUSH
31555: LD_INT 30
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: PPUSH
31567: CALL_OW 72
31571: ST_TO_ADDR
// if tmp then
31572: LD_VAR 0 19
31576: IFFALSE 31624
// for i in tmp do
31578: LD_ADDR_VAR 0 8
31582: PUSH
31583: LD_VAR 0 19
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31622
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31591: LD_VAR 0 8
31595: PPUSH
31596: CALL_OW 250
31600: PPUSH
31601: LD_VAR 0 8
31605: PPUSH
31606: CALL_OW 251
31610: PPUSH
31611: LD_VAR 0 16
31615: PPUSH
31616: CALL_OW 441
31620: GO 31588
31622: POP
31623: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31624: LD_VAR 0 18
31628: PPUSH
31629: LD_INT 2
31631: PUSH
31632: LD_INT 30
31634: PUSH
31635: LD_INT 32
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 30
31644: PUSH
31645: LD_INT 33
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 72
31661: IFFALSE 31749
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31663: LD_ADDR_VAR 0 8
31667: PUSH
31668: LD_VAR 0 18
31672: PPUSH
31673: LD_INT 2
31675: PUSH
31676: LD_INT 30
31678: PUSH
31679: LD_INT 32
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 30
31688: PUSH
31689: LD_INT 33
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: PPUSH
31701: CALL_OW 72
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31747
// begin if not GetBWeapon ( i ) then
31709: LD_VAR 0 8
31713: PPUSH
31714: CALL_OW 269
31718: NOT
31719: IFFALSE 31745
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31721: LD_VAR 0 8
31725: PPUSH
31726: LD_VAR 0 8
31730: PPUSH
31731: LD_VAR 0 2
31735: PPUSH
31736: CALL 32995 0 2
31740: PPUSH
31741: CALL_OW 431
// end ;
31745: GO 31706
31747: POP
31748: POP
// end ; for i = 1 to personel do
31749: LD_ADDR_VAR 0 8
31753: PUSH
31754: DOUBLE
31755: LD_INT 1
31757: DEC
31758: ST_TO_ADDR
31759: LD_VAR 0 6
31763: PUSH
31764: FOR_TO
31765: IFFALSE 32829
// begin if i > 4 then
31767: LD_VAR 0 8
31771: PUSH
31772: LD_INT 4
31774: GREATER
31775: IFFALSE 31779
// break ;
31777: GO 32829
// case i of 1 :
31779: LD_VAR 0 8
31783: PUSH
31784: LD_INT 1
31786: DOUBLE
31787: EQUAL
31788: IFTRUE 31792
31790: GO 31872
31792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31793: LD_ADDR_VAR 0 12
31797: PUSH
31798: LD_VAR 0 18
31802: PPUSH
31803: LD_INT 22
31805: PUSH
31806: LD_VAR 0 16
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 58
31817: PUSH
31818: EMPTY
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 30
31826: PUSH
31827: LD_INT 32
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 30
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 30
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PPUSH
31865: CALL_OW 72
31869: ST_TO_ADDR
31870: GO 32094
31872: LD_INT 2
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31942
31880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31881: LD_ADDR_VAR 0 12
31885: PUSH
31886: LD_VAR 0 18
31890: PPUSH
31891: LD_INT 22
31893: PUSH
31894: LD_VAR 0 16
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: LD_INT 30
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 30
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PPUSH
31935: CALL_OW 72
31939: ST_TO_ADDR
31940: GO 32094
31942: LD_INT 3
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31950
31948: GO 32012
31950: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31951: LD_ADDR_VAR 0 12
31955: PUSH
31956: LD_VAR 0 18
31960: PPUSH
31961: LD_INT 22
31963: PUSH
31964: LD_VAR 0 16
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 30
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 30
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PPUSH
32005: CALL_OW 72
32009: ST_TO_ADDR
32010: GO 32094
32012: LD_INT 4
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32093
32020: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32021: LD_ADDR_VAR 0 12
32025: PUSH
32026: LD_VAR 0 18
32030: PPUSH
32031: LD_INT 22
32033: PUSH
32034: LD_VAR 0 16
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 30
32048: PUSH
32049: LD_INT 6
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 7
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 30
32068: PUSH
32069: LD_INT 8
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PPUSH
32086: CALL_OW 72
32090: ST_TO_ADDR
32091: GO 32094
32093: POP
// if i = 1 then
32094: LD_VAR 0 8
32098: PUSH
32099: LD_INT 1
32101: EQUAL
32102: IFFALSE 32213
// begin tmp := [ ] ;
32104: LD_ADDR_VAR 0 19
32108: PUSH
32109: EMPTY
32110: ST_TO_ADDR
// for j in f do
32111: LD_ADDR_VAR 0 9
32115: PUSH
32116: LD_VAR 0 12
32120: PUSH
32121: FOR_IN
32122: IFFALSE 32195
// if GetBType ( j ) = b_bunker then
32124: LD_VAR 0 9
32128: PPUSH
32129: CALL_OW 266
32133: PUSH
32134: LD_INT 32
32136: EQUAL
32137: IFFALSE 32164
// tmp := Insert ( tmp , 1 , j ) else
32139: LD_ADDR_VAR 0 19
32143: PUSH
32144: LD_VAR 0 19
32148: PPUSH
32149: LD_INT 1
32151: PPUSH
32152: LD_VAR 0 9
32156: PPUSH
32157: CALL_OW 2
32161: ST_TO_ADDR
32162: GO 32193
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32164: LD_ADDR_VAR 0 19
32168: PUSH
32169: LD_VAR 0 19
32173: PPUSH
32174: LD_VAR 0 19
32178: PUSH
32179: LD_INT 1
32181: PLUS
32182: PPUSH
32183: LD_VAR 0 9
32187: PPUSH
32188: CALL_OW 2
32192: ST_TO_ADDR
32193: GO 32121
32195: POP
32196: POP
// if tmp then
32197: LD_VAR 0 19
32201: IFFALSE 32213
// f := tmp ;
32203: LD_ADDR_VAR 0 12
32207: PUSH
32208: LD_VAR 0 19
32212: ST_TO_ADDR
// end ; x := personel [ i ] ;
32213: LD_ADDR_VAR 0 13
32217: PUSH
32218: LD_VAR 0 6
32222: PUSH
32223: LD_VAR 0 8
32227: ARRAY
32228: ST_TO_ADDR
// if x = - 1 then
32229: LD_VAR 0 13
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: EQUAL
32238: IFFALSE 32447
// begin for j in f do
32240: LD_ADDR_VAR 0 9
32244: PUSH
32245: LD_VAR 0 12
32249: PUSH
32250: FOR_IN
32251: IFFALSE 32443
// repeat InitHc ;
32253: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32257: LD_VAR 0 9
32261: PPUSH
32262: CALL_OW 266
32266: PUSH
32267: LD_INT 5
32269: EQUAL
32270: IFFALSE 32340
// begin if UnitsInside ( j ) < 3 then
32272: LD_VAR 0 9
32276: PPUSH
32277: CALL_OW 313
32281: PUSH
32282: LD_INT 3
32284: LESS
32285: IFFALSE 32321
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32287: LD_INT 0
32289: PPUSH
32290: LD_INT 5
32292: PUSH
32293: LD_INT 8
32295: PUSH
32296: LD_INT 9
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: PUSH
32304: LD_VAR 0 17
32308: ARRAY
32309: PPUSH
32310: LD_VAR 0 4
32314: PPUSH
32315: CALL_OW 380
32319: GO 32338
// PrepareHuman ( false , i , skill ) ;
32321: LD_INT 0
32323: PPUSH
32324: LD_VAR 0 8
32328: PPUSH
32329: LD_VAR 0 4
32333: PPUSH
32334: CALL_OW 380
// end else
32338: GO 32357
// PrepareHuman ( false , i , skill ) ;
32340: LD_INT 0
32342: PPUSH
32343: LD_VAR 0 8
32347: PPUSH
32348: LD_VAR 0 4
32352: PPUSH
32353: CALL_OW 380
// un := CreateHuman ;
32357: LD_ADDR_VAR 0 14
32361: PUSH
32362: CALL_OW 44
32366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32367: LD_ADDR_VAR 0 7
32371: PUSH
32372: LD_VAR 0 7
32376: PPUSH
32377: LD_INT 1
32379: PPUSH
32380: LD_VAR 0 14
32384: PPUSH
32385: CALL_OW 2
32389: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32390: LD_VAR 0 14
32394: PPUSH
32395: LD_VAR 0 9
32399: PPUSH
32400: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32404: LD_VAR 0 9
32408: PPUSH
32409: CALL_OW 313
32413: PUSH
32414: LD_INT 6
32416: EQUAL
32417: PUSH
32418: LD_VAR 0 9
32422: PPUSH
32423: CALL_OW 266
32427: PUSH
32428: LD_INT 32
32430: PUSH
32431: LD_INT 31
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: IN
32438: OR
32439: IFFALSE 32253
32441: GO 32250
32443: POP
32444: POP
// end else
32445: GO 32827
// for j = 1 to x do
32447: LD_ADDR_VAR 0 9
32451: PUSH
32452: DOUBLE
32453: LD_INT 1
32455: DEC
32456: ST_TO_ADDR
32457: LD_VAR 0 13
32461: PUSH
32462: FOR_TO
32463: IFFALSE 32825
// begin InitHc ;
32465: CALL_OW 19
// if not f then
32469: LD_VAR 0 12
32473: NOT
32474: IFFALSE 32563
// begin PrepareHuman ( false , i , skill ) ;
32476: LD_INT 0
32478: PPUSH
32479: LD_VAR 0 8
32483: PPUSH
32484: LD_VAR 0 4
32488: PPUSH
32489: CALL_OW 380
// un := CreateHuman ;
32493: LD_ADDR_VAR 0 14
32497: PUSH
32498: CALL_OW 44
32502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32503: LD_ADDR_VAR 0 7
32507: PUSH
32508: LD_VAR 0 7
32512: PPUSH
32513: LD_INT 1
32515: PPUSH
32516: LD_VAR 0 14
32520: PPUSH
32521: CALL_OW 2
32525: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32526: LD_VAR 0 14
32530: PPUSH
32531: LD_VAR 0 1
32535: PPUSH
32536: CALL_OW 250
32540: PPUSH
32541: LD_VAR 0 1
32545: PPUSH
32546: CALL_OW 251
32550: PPUSH
32551: LD_INT 10
32553: PPUSH
32554: LD_INT 0
32556: PPUSH
32557: CALL_OW 50
// continue ;
32561: GO 32462
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32563: LD_VAR 0 12
32567: PUSH
32568: LD_INT 1
32570: ARRAY
32571: PPUSH
32572: CALL_OW 313
32576: PUSH
32577: LD_VAR 0 12
32581: PUSH
32582: LD_INT 1
32584: ARRAY
32585: PPUSH
32586: CALL_OW 266
32590: PUSH
32591: LD_INT 32
32593: PUSH
32594: LD_INT 31
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: IN
32601: AND
32602: PUSH
32603: LD_VAR 0 12
32607: PUSH
32608: LD_INT 1
32610: ARRAY
32611: PPUSH
32612: CALL_OW 313
32616: PUSH
32617: LD_INT 6
32619: EQUAL
32620: OR
32621: IFFALSE 32641
// f := Delete ( f , 1 ) ;
32623: LD_ADDR_VAR 0 12
32627: PUSH
32628: LD_VAR 0 12
32632: PPUSH
32633: LD_INT 1
32635: PPUSH
32636: CALL_OW 3
32640: ST_TO_ADDR
// if not f then
32641: LD_VAR 0 12
32645: NOT
32646: IFFALSE 32664
// begin x := x + 2 ;
32648: LD_ADDR_VAR 0 13
32652: PUSH
32653: LD_VAR 0 13
32657: PUSH
32658: LD_INT 2
32660: PLUS
32661: ST_TO_ADDR
// continue ;
32662: GO 32462
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32664: LD_VAR 0 12
32668: PUSH
32669: LD_INT 1
32671: ARRAY
32672: PPUSH
32673: CALL_OW 266
32677: PUSH
32678: LD_INT 5
32680: EQUAL
32681: IFFALSE 32755
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32683: LD_VAR 0 12
32687: PUSH
32688: LD_INT 1
32690: ARRAY
32691: PPUSH
32692: CALL_OW 313
32696: PUSH
32697: LD_INT 3
32699: LESS
32700: IFFALSE 32736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32702: LD_INT 0
32704: PPUSH
32705: LD_INT 5
32707: PUSH
32708: LD_INT 8
32710: PUSH
32711: LD_INT 9
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: PUSH
32719: LD_VAR 0 17
32723: ARRAY
32724: PPUSH
32725: LD_VAR 0 4
32729: PPUSH
32730: CALL_OW 380
32734: GO 32753
// PrepareHuman ( false , i , skill ) ;
32736: LD_INT 0
32738: PPUSH
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_VAR 0 4
32748: PPUSH
32749: CALL_OW 380
// end else
32753: GO 32772
// PrepareHuman ( false , i , skill ) ;
32755: LD_INT 0
32757: PPUSH
32758: LD_VAR 0 8
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: CALL_OW 380
// un := CreateHuman ;
32772: LD_ADDR_VAR 0 14
32776: PUSH
32777: CALL_OW 44
32781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32782: LD_ADDR_VAR 0 7
32786: PUSH
32787: LD_VAR 0 7
32791: PPUSH
32792: LD_INT 1
32794: PPUSH
32795: LD_VAR 0 14
32799: PPUSH
32800: CALL_OW 2
32804: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32805: LD_VAR 0 14
32809: PPUSH
32810: LD_VAR 0 12
32814: PUSH
32815: LD_INT 1
32817: ARRAY
32818: PPUSH
32819: CALL_OW 52
// end ;
32823: GO 32462
32825: POP
32826: POP
// end ;
32827: GO 31764
32829: POP
32830: POP
// result := result ^ buildings ;
32831: LD_ADDR_VAR 0 7
32835: PUSH
32836: LD_VAR 0 7
32840: PUSH
32841: LD_VAR 0 18
32845: ADD
32846: ST_TO_ADDR
// end else
32847: GO 32990
// begin for i = 1 to personel do
32849: LD_ADDR_VAR 0 8
32853: PUSH
32854: DOUBLE
32855: LD_INT 1
32857: DEC
32858: ST_TO_ADDR
32859: LD_VAR 0 6
32863: PUSH
32864: FOR_TO
32865: IFFALSE 32988
// begin if i > 4 then
32867: LD_VAR 0 8
32871: PUSH
32872: LD_INT 4
32874: GREATER
32875: IFFALSE 32879
// break ;
32877: GO 32988
// x := personel [ i ] ;
32879: LD_ADDR_VAR 0 13
32883: PUSH
32884: LD_VAR 0 6
32888: PUSH
32889: LD_VAR 0 8
32893: ARRAY
32894: ST_TO_ADDR
// if x = - 1 then
32895: LD_VAR 0 13
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: EQUAL
32904: IFFALSE 32908
// continue ;
32906: GO 32864
// PrepareHuman ( false , i , skill ) ;
32908: LD_INT 0
32910: PPUSH
32911: LD_VAR 0 8
32915: PPUSH
32916: LD_VAR 0 4
32920: PPUSH
32921: CALL_OW 380
// un := CreateHuman ;
32925: LD_ADDR_VAR 0 14
32929: PUSH
32930: CALL_OW 44
32934: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32935: LD_VAR 0 14
32939: PPUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 250
32949: PPUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 251
32959: PPUSH
32960: LD_INT 10
32962: PPUSH
32963: LD_INT 0
32965: PPUSH
32966: CALL_OW 50
// result := result ^ un ;
32970: LD_ADDR_VAR 0 7
32974: PUSH
32975: LD_VAR 0 7
32979: PUSH
32980: LD_VAR 0 14
32984: ADD
32985: ST_TO_ADDR
// end ;
32986: GO 32864
32988: POP
32989: POP
// end ; end ;
32990: LD_VAR 0 7
32994: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32995: LD_INT 0
32997: PPUSH
32998: PPUSH
32999: PPUSH
33000: PPUSH
33001: PPUSH
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
// result := false ;
33013: LD_ADDR_VAR 0 3
33017: PUSH
33018: LD_INT 0
33020: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33021: LD_VAR 0 1
33025: NOT
33026: PUSH
33027: LD_VAR 0 1
33031: PPUSH
33032: CALL_OW 266
33036: PUSH
33037: LD_INT 32
33039: PUSH
33040: LD_INT 33
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: IN
33047: NOT
33048: OR
33049: IFFALSE 33053
// exit ;
33051: GO 34162
// nat := GetNation ( tower ) ;
33053: LD_ADDR_VAR 0 12
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 248
33067: ST_TO_ADDR
// side := GetSide ( tower ) ;
33068: LD_ADDR_VAR 0 16
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 255
33082: ST_TO_ADDR
// x := GetX ( tower ) ;
33083: LD_ADDR_VAR 0 10
33087: PUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 250
33097: ST_TO_ADDR
// y := GetY ( tower ) ;
33098: LD_ADDR_VAR 0 11
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 251
33112: ST_TO_ADDR
// if not x or not y then
33113: LD_VAR 0 10
33117: NOT
33118: PUSH
33119: LD_VAR 0 11
33123: NOT
33124: OR
33125: IFFALSE 33129
// exit ;
33127: GO 34162
// weapon := 0 ;
33129: LD_ADDR_VAR 0 18
33133: PUSH
33134: LD_INT 0
33136: ST_TO_ADDR
// fac_list := [ ] ;
33137: LD_ADDR_VAR 0 17
33141: PUSH
33142: EMPTY
33143: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33144: LD_ADDR_VAR 0 6
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 274
33158: PPUSH
33159: LD_VAR 0 2
33163: PPUSH
33164: LD_INT 0
33166: PPUSH
33167: CALL 30733 0 3
33171: PPUSH
33172: LD_INT 30
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PPUSH
33182: CALL_OW 72
33186: ST_TO_ADDR
// if not factories then
33187: LD_VAR 0 6
33191: NOT
33192: IFFALSE 33196
// exit ;
33194: GO 34162
// for i in factories do
33196: LD_ADDR_VAR 0 8
33200: PUSH
33201: LD_VAR 0 6
33205: PUSH
33206: FOR_IN
33207: IFFALSE 33232
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33209: LD_ADDR_VAR 0 17
33213: PUSH
33214: LD_VAR 0 17
33218: PUSH
33219: LD_VAR 0 8
33223: PPUSH
33224: CALL_OW 478
33228: UNION
33229: ST_TO_ADDR
33230: GO 33206
33232: POP
33233: POP
// if not fac_list then
33234: LD_VAR 0 17
33238: NOT
33239: IFFALSE 33243
// exit ;
33241: GO 34162
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33243: LD_ADDR_VAR 0 5
33247: PUSH
33248: LD_INT 4
33250: PUSH
33251: LD_INT 5
33253: PUSH
33254: LD_INT 9
33256: PUSH
33257: LD_INT 10
33259: PUSH
33260: LD_INT 6
33262: PUSH
33263: LD_INT 7
33265: PUSH
33266: LD_INT 11
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 27
33280: PUSH
33281: LD_INT 28
33283: PUSH
33284: LD_INT 26
33286: PUSH
33287: LD_INT 30
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 43
33298: PUSH
33299: LD_INT 44
33301: PUSH
33302: LD_INT 46
33304: PUSH
33305: LD_INT 45
33307: PUSH
33308: LD_INT 47
33310: PUSH
33311: LD_INT 49
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: PUSH
33327: LD_VAR 0 12
33331: ARRAY
33332: ST_TO_ADDR
// list := list isect fac_list ;
33333: LD_ADDR_VAR 0 5
33337: PUSH
33338: LD_VAR 0 5
33342: PUSH
33343: LD_VAR 0 17
33347: ISECT
33348: ST_TO_ADDR
// if not list then
33349: LD_VAR 0 5
33353: NOT
33354: IFFALSE 33358
// exit ;
33356: GO 34162
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33358: LD_VAR 0 12
33362: PUSH
33363: LD_INT 3
33365: EQUAL
33366: PUSH
33367: LD_INT 49
33369: PUSH
33370: LD_VAR 0 5
33374: IN
33375: AND
33376: PUSH
33377: LD_INT 31
33379: PPUSH
33380: LD_VAR 0 16
33384: PPUSH
33385: CALL_OW 321
33389: PUSH
33390: LD_INT 2
33392: EQUAL
33393: AND
33394: IFFALSE 33454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33396: LD_INT 22
33398: PUSH
33399: LD_VAR 0 16
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 35
33410: PUSH
33411: LD_INT 49
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 91
33420: PUSH
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 10
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: NOT
33444: IFFALSE 33454
// weapon := ru_time_lapser ;
33446: LD_ADDR_VAR 0 18
33450: PUSH
33451: LD_INT 49
33453: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33454: LD_VAR 0 12
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: IN
33469: PUSH
33470: LD_INT 11
33472: PUSH
33473: LD_VAR 0 5
33477: IN
33478: PUSH
33479: LD_INT 30
33481: PUSH
33482: LD_VAR 0 5
33486: IN
33487: OR
33488: AND
33489: PUSH
33490: LD_INT 6
33492: PPUSH
33493: LD_VAR 0 16
33497: PPUSH
33498: CALL_OW 321
33502: PUSH
33503: LD_INT 2
33505: EQUAL
33506: AND
33507: IFFALSE 33672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33509: LD_INT 22
33511: PUSH
33512: LD_VAR 0 16
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 35
33526: PUSH
33527: LD_INT 11
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 35
33536: PUSH
33537: LD_INT 30
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 91
33551: PUSH
33552: LD_VAR 0 1
33556: PUSH
33557: LD_INT 18
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: PPUSH
33570: CALL_OW 69
33574: NOT
33575: PUSH
33576: LD_INT 22
33578: PUSH
33579: LD_VAR 0 16
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 30
33593: PUSH
33594: LD_INT 32
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 30
33603: PUSH
33604: LD_INT 33
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 91
33618: PUSH
33619: LD_VAR 0 1
33623: PUSH
33624: LD_INT 12
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: PPUSH
33640: CALL_OW 69
33644: PUSH
33645: LD_INT 2
33647: GREATER
33648: AND
33649: IFFALSE 33672
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33651: LD_ADDR_VAR 0 18
33655: PUSH
33656: LD_INT 11
33658: PUSH
33659: LD_INT 30
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_VAR 0 12
33670: ARRAY
33671: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33672: LD_VAR 0 18
33676: NOT
33677: PUSH
33678: LD_INT 40
33680: PPUSH
33681: LD_VAR 0 16
33685: PPUSH
33686: CALL_OW 321
33690: PUSH
33691: LD_INT 2
33693: EQUAL
33694: AND
33695: PUSH
33696: LD_INT 7
33698: PUSH
33699: LD_VAR 0 5
33703: IN
33704: PUSH
33705: LD_INT 28
33707: PUSH
33708: LD_VAR 0 5
33712: IN
33713: OR
33714: PUSH
33715: LD_INT 45
33717: PUSH
33718: LD_VAR 0 5
33722: IN
33723: OR
33724: AND
33725: IFFALSE 33979
// begin hex := GetHexInfo ( x , y ) ;
33727: LD_ADDR_VAR 0 4
33731: PUSH
33732: LD_VAR 0 10
33736: PPUSH
33737: LD_VAR 0 11
33741: PPUSH
33742: CALL_OW 546
33746: ST_TO_ADDR
// if hex [ 1 ] then
33747: LD_VAR 0 4
33751: PUSH
33752: LD_INT 1
33754: ARRAY
33755: IFFALSE 33759
// exit ;
33757: GO 34162
// height := hex [ 2 ] ;
33759: LD_ADDR_VAR 0 15
33763: PUSH
33764: LD_VAR 0 4
33768: PUSH
33769: LD_INT 2
33771: ARRAY
33772: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33773: LD_ADDR_VAR 0 14
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 3
33786: PUSH
33787: LD_INT 5
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: ST_TO_ADDR
// for i in tmp do
33796: LD_ADDR_VAR 0 8
33800: PUSH
33801: LD_VAR 0 14
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33977
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_VAR 0 10
33818: PPUSH
33819: LD_VAR 0 8
33823: PPUSH
33824: LD_INT 5
33826: PPUSH
33827: CALL_OW 272
33831: PUSH
33832: LD_VAR 0 11
33836: PPUSH
33837: LD_VAR 0 8
33841: PPUSH
33842: LD_INT 5
33844: PPUSH
33845: CALL_OW 273
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33854: LD_VAR 0 9
33858: PUSH
33859: LD_INT 1
33861: ARRAY
33862: PPUSH
33863: LD_VAR 0 9
33867: PUSH
33868: LD_INT 2
33870: ARRAY
33871: PPUSH
33872: CALL_OW 488
33876: IFFALSE 33975
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33878: LD_ADDR_VAR 0 4
33882: PUSH
33883: LD_VAR 0 9
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: PPUSH
33892: LD_VAR 0 9
33896: PUSH
33897: LD_INT 2
33899: ARRAY
33900: PPUSH
33901: CALL_OW 546
33905: ST_TO_ADDR
// if hex [ 1 ] then
33906: LD_VAR 0 4
33910: PUSH
33911: LD_INT 1
33913: ARRAY
33914: IFFALSE 33918
// continue ;
33916: GO 33806
// h := hex [ 2 ] ;
33918: LD_ADDR_VAR 0 13
33922: PUSH
33923: LD_VAR 0 4
33927: PUSH
33928: LD_INT 2
33930: ARRAY
33931: ST_TO_ADDR
// if h + 7 < height then
33932: LD_VAR 0 13
33936: PUSH
33937: LD_INT 7
33939: PLUS
33940: PUSH
33941: LD_VAR 0 15
33945: LESS
33946: IFFALSE 33975
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33948: LD_ADDR_VAR 0 18
33952: PUSH
33953: LD_INT 7
33955: PUSH
33956: LD_INT 28
33958: PUSH
33959: LD_INT 45
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: LD_VAR 0 12
33971: ARRAY
33972: ST_TO_ADDR
// break ;
33973: GO 33977
// end ; end ; end ;
33975: GO 33806
33977: POP
33978: POP
// end ; if not weapon then
33979: LD_VAR 0 18
33983: NOT
33984: IFFALSE 34044
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33986: LD_ADDR_VAR 0 5
33990: PUSH
33991: LD_VAR 0 5
33995: PUSH
33996: LD_INT 11
33998: PUSH
33999: LD_INT 30
34001: PUSH
34002: LD_INT 49
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: DIFF
34010: ST_TO_ADDR
// if not list then
34011: LD_VAR 0 5
34015: NOT
34016: IFFALSE 34020
// exit ;
34018: GO 34162
// weapon := list [ rand ( 1 , list ) ] ;
34020: LD_ADDR_VAR 0 18
34024: PUSH
34025: LD_VAR 0 5
34029: PUSH
34030: LD_INT 1
34032: PPUSH
34033: LD_VAR 0 5
34037: PPUSH
34038: CALL_OW 12
34042: ARRAY
34043: ST_TO_ADDR
// end ; if weapon then
34044: LD_VAR 0 18
34048: IFFALSE 34162
// begin tmp := CostOfWeapon ( weapon ) ;
34050: LD_ADDR_VAR 0 14
34054: PUSH
34055: LD_VAR 0 18
34059: PPUSH
34060: CALL_OW 451
34064: ST_TO_ADDR
// j := GetBase ( tower ) ;
34065: LD_ADDR_VAR 0 9
34069: PUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 274
34079: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34080: LD_VAR 0 9
34084: PPUSH
34085: LD_INT 1
34087: PPUSH
34088: CALL_OW 275
34092: PUSH
34093: LD_VAR 0 14
34097: PUSH
34098: LD_INT 1
34100: ARRAY
34101: GREATEREQUAL
34102: PUSH
34103: LD_VAR 0 9
34107: PPUSH
34108: LD_INT 2
34110: PPUSH
34111: CALL_OW 275
34115: PUSH
34116: LD_VAR 0 14
34120: PUSH
34121: LD_INT 2
34123: ARRAY
34124: GREATEREQUAL
34125: AND
34126: PUSH
34127: LD_VAR 0 9
34131: PPUSH
34132: LD_INT 3
34134: PPUSH
34135: CALL_OW 275
34139: PUSH
34140: LD_VAR 0 14
34144: PUSH
34145: LD_INT 3
34147: ARRAY
34148: GREATEREQUAL
34149: AND
34150: IFFALSE 34162
// result := weapon ;
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_VAR 0 18
34161: ST_TO_ADDR
// end ; end ;
34162: LD_VAR 0 3
34166: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34167: LD_INT 0
34169: PPUSH
34170: PPUSH
// result := true ;
34171: LD_ADDR_VAR 0 3
34175: PUSH
34176: LD_INT 1
34178: ST_TO_ADDR
// if array1 = array2 then
34179: LD_VAR 0 1
34183: PUSH
34184: LD_VAR 0 2
34188: EQUAL
34189: IFFALSE 34249
// begin for i = 1 to array1 do
34191: LD_ADDR_VAR 0 4
34195: PUSH
34196: DOUBLE
34197: LD_INT 1
34199: DEC
34200: ST_TO_ADDR
34201: LD_VAR 0 1
34205: PUSH
34206: FOR_TO
34207: IFFALSE 34245
// if array1 [ i ] <> array2 [ i ] then
34209: LD_VAR 0 1
34213: PUSH
34214: LD_VAR 0 4
34218: ARRAY
34219: PUSH
34220: LD_VAR 0 2
34224: PUSH
34225: LD_VAR 0 4
34229: ARRAY
34230: NONEQUAL
34231: IFFALSE 34243
// begin result := false ;
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 0
34240: ST_TO_ADDR
// break ;
34241: GO 34245
// end ;
34243: GO 34206
34245: POP
34246: POP
// end else
34247: GO 34257
// result := false ;
34249: LD_ADDR_VAR 0 3
34253: PUSH
34254: LD_INT 0
34256: ST_TO_ADDR
// end ;
34257: LD_VAR 0 3
34261: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34262: LD_INT 0
34264: PPUSH
34265: PPUSH
// if not array1 or not array2 then
34266: LD_VAR 0 1
34270: NOT
34271: PUSH
34272: LD_VAR 0 2
34276: NOT
34277: OR
34278: IFFALSE 34282
// exit ;
34280: GO 34346
// result := true ;
34282: LD_ADDR_VAR 0 3
34286: PUSH
34287: LD_INT 1
34289: ST_TO_ADDR
// for i = 1 to array1 do
34290: LD_ADDR_VAR 0 4
34294: PUSH
34295: DOUBLE
34296: LD_INT 1
34298: DEC
34299: ST_TO_ADDR
34300: LD_VAR 0 1
34304: PUSH
34305: FOR_TO
34306: IFFALSE 34344
// if array1 [ i ] <> array2 [ i ] then
34308: LD_VAR 0 1
34312: PUSH
34313: LD_VAR 0 4
34317: ARRAY
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 4
34328: ARRAY
34329: NONEQUAL
34330: IFFALSE 34342
// begin result := false ;
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 0
34339: ST_TO_ADDR
// break ;
34340: GO 34344
// end ;
34342: GO 34305
34344: POP
34345: POP
// end ;
34346: LD_VAR 0 3
34350: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
// pom := GetBase ( fac ) ;
34356: LD_ADDR_VAR 0 5
34360: PUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 274
34370: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34371: LD_ADDR_VAR 0 4
34375: PUSH
34376: LD_VAR 0 2
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PPUSH
34385: LD_VAR 0 2
34389: PUSH
34390: LD_INT 2
34392: ARRAY
34393: PPUSH
34394: LD_VAR 0 2
34398: PUSH
34399: LD_INT 3
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 2
34407: PUSH
34408: LD_INT 4
34410: ARRAY
34411: PPUSH
34412: CALL_OW 449
34416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_VAR 0 5
34426: PPUSH
34427: LD_INT 1
34429: PPUSH
34430: CALL_OW 275
34434: PUSH
34435: LD_VAR 0 4
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: GREATEREQUAL
34444: PUSH
34445: LD_VAR 0 5
34449: PPUSH
34450: LD_INT 2
34452: PPUSH
34453: CALL_OW 275
34457: PUSH
34458: LD_VAR 0 4
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: GREATEREQUAL
34467: AND
34468: PUSH
34469: LD_VAR 0 5
34473: PPUSH
34474: LD_INT 3
34476: PPUSH
34477: CALL_OW 275
34481: PUSH
34482: LD_VAR 0 4
34486: PUSH
34487: LD_INT 3
34489: ARRAY
34490: GREATEREQUAL
34491: AND
34492: ST_TO_ADDR
// end ;
34493: LD_VAR 0 3
34497: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34498: LD_INT 0
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
// pom := GetBase ( building ) ;
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 274
34518: ST_TO_ADDR
// if not pom then
34519: LD_VAR 0 3
34523: NOT
34524: IFFALSE 34528
// exit ;
34526: GO 34698
// btype := GetBType ( building ) ;
34528: LD_ADDR_VAR 0 5
34532: PUSH
34533: LD_VAR 0 1
34537: PPUSH
34538: CALL_OW 266
34542: ST_TO_ADDR
// if btype = b_armoury then
34543: LD_VAR 0 5
34547: PUSH
34548: LD_INT 4
34550: EQUAL
34551: IFFALSE 34561
// btype := b_barracks ;
34553: LD_ADDR_VAR 0 5
34557: PUSH
34558: LD_INT 5
34560: ST_TO_ADDR
// if btype = b_depot then
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 0
34568: EQUAL
34569: IFFALSE 34579
// btype := b_warehouse ;
34571: LD_ADDR_VAR 0 5
34575: PUSH
34576: LD_INT 1
34578: ST_TO_ADDR
// if btype = b_workshop then
34579: LD_VAR 0 5
34583: PUSH
34584: LD_INT 2
34586: EQUAL
34587: IFFALSE 34597
// btype := b_factory ;
34589: LD_ADDR_VAR 0 5
34593: PUSH
34594: LD_INT 3
34596: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: LD_VAR 0 5
34606: PPUSH
34607: LD_VAR 0 1
34611: PPUSH
34612: CALL_OW 248
34616: PPUSH
34617: CALL_OW 450
34621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34622: LD_ADDR_VAR 0 2
34626: PUSH
34627: LD_VAR 0 3
34631: PPUSH
34632: LD_INT 1
34634: PPUSH
34635: CALL_OW 275
34639: PUSH
34640: LD_VAR 0 4
34644: PUSH
34645: LD_INT 1
34647: ARRAY
34648: GREATEREQUAL
34649: PUSH
34650: LD_VAR 0 3
34654: PPUSH
34655: LD_INT 2
34657: PPUSH
34658: CALL_OW 275
34662: PUSH
34663: LD_VAR 0 4
34667: PUSH
34668: LD_INT 2
34670: ARRAY
34671: GREATEREQUAL
34672: AND
34673: PUSH
34674: LD_VAR 0 3
34678: PPUSH
34679: LD_INT 3
34681: PPUSH
34682: CALL_OW 275
34686: PUSH
34687: LD_VAR 0 4
34691: PUSH
34692: LD_INT 3
34694: ARRAY
34695: GREATEREQUAL
34696: AND
34697: ST_TO_ADDR
// end ;
34698: LD_VAR 0 2
34702: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34703: LD_INT 0
34705: PPUSH
34706: PPUSH
34707: PPUSH
// pom := GetBase ( building ) ;
34708: LD_ADDR_VAR 0 4
34712: PUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 274
34722: ST_TO_ADDR
// if not pom then
34723: LD_VAR 0 4
34727: NOT
34728: IFFALSE 34732
// exit ;
34730: GO 34833
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34732: LD_ADDR_VAR 0 5
34736: PUSH
34737: LD_VAR 0 2
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 248
34751: PPUSH
34752: CALL_OW 450
34756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_VAR 0 4
34766: PPUSH
34767: LD_INT 1
34769: PPUSH
34770: CALL_OW 275
34774: PUSH
34775: LD_VAR 0 5
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: GREATEREQUAL
34784: PUSH
34785: LD_VAR 0 4
34789: PPUSH
34790: LD_INT 2
34792: PPUSH
34793: CALL_OW 275
34797: PUSH
34798: LD_VAR 0 5
34802: PUSH
34803: LD_INT 2
34805: ARRAY
34806: GREATEREQUAL
34807: AND
34808: PUSH
34809: LD_VAR 0 4
34813: PPUSH
34814: LD_INT 3
34816: PPUSH
34817: CALL_OW 275
34821: PUSH
34822: LD_VAR 0 5
34826: PUSH
34827: LD_INT 3
34829: ARRAY
34830: GREATEREQUAL
34831: AND
34832: ST_TO_ADDR
// end ;
34833: LD_VAR 0 3
34837: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34838: LD_INT 0
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
// result := false ;
34851: LD_ADDR_VAR 0 8
34855: PUSH
34856: LD_INT 0
34858: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34859: LD_VAR 0 5
34863: NOT
34864: PUSH
34865: LD_VAR 0 1
34869: NOT
34870: OR
34871: PUSH
34872: LD_VAR 0 2
34876: NOT
34877: OR
34878: PUSH
34879: LD_VAR 0 3
34883: NOT
34884: OR
34885: IFFALSE 34889
// exit ;
34887: GO 35703
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34889: LD_ADDR_VAR 0 14
34893: PUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: LD_VAR 0 3
34908: PPUSH
34909: LD_VAR 0 4
34913: PPUSH
34914: LD_VAR 0 5
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: CALL_OW 248
34927: PPUSH
34928: LD_INT 0
34930: PPUSH
34931: CALL 36956 0 6
34935: ST_TO_ADDR
// if not hexes then
34936: LD_VAR 0 14
34940: NOT
34941: IFFALSE 34945
// exit ;
34943: GO 35703
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34945: LD_ADDR_VAR 0 17
34949: PUSH
34950: LD_VAR 0 5
34954: PPUSH
34955: LD_INT 22
34957: PUSH
34958: LD_VAR 0 13
34962: PPUSH
34963: CALL_OW 255
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 30
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 30
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PPUSH
35004: CALL_OW 72
35008: ST_TO_ADDR
// for i = 1 to hexes do
35009: LD_ADDR_VAR 0 9
35013: PUSH
35014: DOUBLE
35015: LD_INT 1
35017: DEC
35018: ST_TO_ADDR
35019: LD_VAR 0 14
35023: PUSH
35024: FOR_TO
35025: IFFALSE 35701
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35027: LD_ADDR_VAR 0 13
35031: PUSH
35032: LD_VAR 0 14
35036: PUSH
35037: LD_VAR 0 9
35041: ARRAY
35042: PUSH
35043: LD_INT 1
35045: ARRAY
35046: PPUSH
35047: LD_VAR 0 14
35051: PUSH
35052: LD_VAR 0 9
35056: ARRAY
35057: PUSH
35058: LD_INT 2
35060: ARRAY
35061: PPUSH
35062: CALL_OW 428
35066: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35067: LD_VAR 0 14
35071: PUSH
35072: LD_VAR 0 9
35076: ARRAY
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PPUSH
35082: LD_VAR 0 14
35086: PUSH
35087: LD_VAR 0 9
35091: ARRAY
35092: PUSH
35093: LD_INT 2
35095: ARRAY
35096: PPUSH
35097: CALL_OW 351
35101: PUSH
35102: LD_VAR 0 14
35106: PUSH
35107: LD_VAR 0 9
35111: ARRAY
35112: PUSH
35113: LD_INT 1
35115: ARRAY
35116: PPUSH
35117: LD_VAR 0 14
35121: PUSH
35122: LD_VAR 0 9
35126: ARRAY
35127: PUSH
35128: LD_INT 2
35130: ARRAY
35131: PPUSH
35132: CALL_OW 488
35136: NOT
35137: OR
35138: PUSH
35139: LD_VAR 0 13
35143: PPUSH
35144: CALL_OW 247
35148: PUSH
35149: LD_INT 3
35151: EQUAL
35152: OR
35153: IFFALSE 35159
// exit ;
35155: POP
35156: POP
35157: GO 35703
// if not tmp then
35159: LD_VAR 0 13
35163: NOT
35164: IFFALSE 35168
// continue ;
35166: GO 35024
// result := true ;
35168: LD_ADDR_VAR 0 8
35172: PUSH
35173: LD_INT 1
35175: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35176: LD_VAR 0 6
35180: PUSH
35181: LD_VAR 0 13
35185: PPUSH
35186: CALL_OW 247
35190: PUSH
35191: LD_INT 2
35193: EQUAL
35194: AND
35195: PUSH
35196: LD_VAR 0 13
35200: PPUSH
35201: CALL_OW 263
35205: PUSH
35206: LD_INT 1
35208: EQUAL
35209: AND
35210: IFFALSE 35374
// begin if IsDrivenBy ( tmp ) then
35212: LD_VAR 0 13
35216: PPUSH
35217: CALL_OW 311
35221: IFFALSE 35225
// continue ;
35223: GO 35024
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35225: LD_VAR 0 6
35229: PPUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 60
35235: PUSH
35236: EMPTY
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: LD_INT 55
35248: PUSH
35249: EMPTY
35250: LIST
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PPUSH
35260: CALL_OW 72
35264: IFFALSE 35372
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35266: LD_ADDR_VAR 0 18
35270: PUSH
35271: LD_VAR 0 6
35275: PPUSH
35276: LD_INT 3
35278: PUSH
35279: LD_INT 60
35281: PUSH
35282: EMPTY
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: LD_INT 55
35294: PUSH
35295: EMPTY
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 72
35310: PUSH
35311: LD_INT 1
35313: ARRAY
35314: ST_TO_ADDR
// if IsInUnit ( driver ) then
35315: LD_VAR 0 18
35319: PPUSH
35320: CALL_OW 310
35324: IFFALSE 35335
// ComExit ( driver ) ;
35326: LD_VAR 0 18
35330: PPUSH
35331: CALL 60748 0 1
// AddComEnterUnit ( driver , tmp ) ;
35335: LD_VAR 0 18
35339: PPUSH
35340: LD_VAR 0 13
35344: PPUSH
35345: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35349: LD_VAR 0 18
35353: PPUSH
35354: LD_VAR 0 7
35358: PPUSH
35359: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35363: LD_VAR 0 18
35367: PPUSH
35368: CALL_OW 181
// end ; continue ;
35372: GO 35024
// end ; if not cleaners or not tmp in cleaners then
35374: LD_VAR 0 6
35378: NOT
35379: PUSH
35380: LD_VAR 0 13
35384: PUSH
35385: LD_VAR 0 6
35389: IN
35390: NOT
35391: OR
35392: IFFALSE 35699
// begin if dep then
35394: LD_VAR 0 17
35398: IFFALSE 35534
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35400: LD_ADDR_VAR 0 16
35404: PUSH
35405: LD_VAR 0 17
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 250
35418: PPUSH
35419: LD_VAR 0 17
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: PPUSH
35428: CALL_OW 254
35432: PPUSH
35433: LD_INT 5
35435: PPUSH
35436: CALL_OW 272
35440: PUSH
35441: LD_VAR 0 17
35445: PUSH
35446: LD_INT 1
35448: ARRAY
35449: PPUSH
35450: CALL_OW 251
35454: PPUSH
35455: LD_VAR 0 17
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: PPUSH
35464: CALL_OW 254
35468: PPUSH
35469: LD_INT 5
35471: PPUSH
35472: CALL_OW 273
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35481: LD_VAR 0 16
35485: PUSH
35486: LD_INT 1
35488: ARRAY
35489: PPUSH
35490: LD_VAR 0 16
35494: PUSH
35495: LD_INT 2
35497: ARRAY
35498: PPUSH
35499: CALL_OW 488
35503: IFFALSE 35534
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35505: LD_VAR 0 13
35509: PPUSH
35510: LD_VAR 0 16
35514: PUSH
35515: LD_INT 1
35517: ARRAY
35518: PPUSH
35519: LD_VAR 0 16
35523: PUSH
35524: LD_INT 2
35526: ARRAY
35527: PPUSH
35528: CALL_OW 111
// continue ;
35532: GO 35024
// end ; end ; r := GetDir ( tmp ) ;
35534: LD_ADDR_VAR 0 15
35538: PUSH
35539: LD_VAR 0 13
35543: PPUSH
35544: CALL_OW 254
35548: ST_TO_ADDR
// if r = 5 then
35549: LD_VAR 0 15
35553: PUSH
35554: LD_INT 5
35556: EQUAL
35557: IFFALSE 35567
// r := 0 ;
35559: LD_ADDR_VAR 0 15
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// for j = r to 5 do
35567: LD_ADDR_VAR 0 10
35571: PUSH
35572: DOUBLE
35573: LD_VAR 0 15
35577: DEC
35578: ST_TO_ADDR
35579: LD_INT 5
35581: PUSH
35582: FOR_TO
35583: IFFALSE 35697
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35585: LD_ADDR_VAR 0 11
35589: PUSH
35590: LD_VAR 0 13
35594: PPUSH
35595: CALL_OW 250
35599: PPUSH
35600: LD_VAR 0 10
35604: PPUSH
35605: LD_INT 2
35607: PPUSH
35608: CALL_OW 272
35612: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35613: LD_ADDR_VAR 0 12
35617: PUSH
35618: LD_VAR 0 13
35622: PPUSH
35623: CALL_OW 251
35627: PPUSH
35628: LD_VAR 0 10
35632: PPUSH
35633: LD_INT 2
35635: PPUSH
35636: CALL_OW 273
35640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35641: LD_VAR 0 11
35645: PPUSH
35646: LD_VAR 0 12
35650: PPUSH
35651: CALL_OW 488
35655: PUSH
35656: LD_VAR 0 11
35660: PPUSH
35661: LD_VAR 0 12
35665: PPUSH
35666: CALL_OW 428
35670: NOT
35671: AND
35672: IFFALSE 35695
// begin ComMoveXY ( tmp , _x , _y ) ;
35674: LD_VAR 0 13
35678: PPUSH
35679: LD_VAR 0 11
35683: PPUSH
35684: LD_VAR 0 12
35688: PPUSH
35689: CALL_OW 111
// break ;
35693: GO 35697
// end ; end ;
35695: GO 35582
35697: POP
35698: POP
// end ; end ;
35699: GO 35024
35701: POP
35702: POP
// end ;
35703: LD_VAR 0 8
35707: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35708: LD_INT 0
35710: PPUSH
// result := true ;
35711: LD_ADDR_VAR 0 3
35715: PUSH
35716: LD_INT 1
35718: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35719: LD_VAR 0 2
35723: PUSH
35724: LD_INT 24
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35738
35730: LD_INT 33
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35738
35736: GO 35763
35738: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35739: LD_ADDR_VAR 0 3
35743: PUSH
35744: LD_INT 32
35746: PPUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 321
35756: PUSH
35757: LD_INT 2
35759: EQUAL
35760: ST_TO_ADDR
35761: GO 36079
35763: LD_INT 20
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35771
35769: GO 35796
35771: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_INT 6
35779: PPUSH
35780: LD_VAR 0 1
35784: PPUSH
35785: CALL_OW 321
35789: PUSH
35790: LD_INT 2
35792: EQUAL
35793: ST_TO_ADDR
35794: GO 36079
35796: LD_INT 22
35798: DOUBLE
35799: EQUAL
35800: IFTRUE 35810
35802: LD_INT 36
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35810
35808: GO 35835
35810: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_INT 15
35818: PPUSH
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 321
35828: PUSH
35829: LD_INT 2
35831: EQUAL
35832: ST_TO_ADDR
35833: GO 36079
35835: LD_INT 30
35837: DOUBLE
35838: EQUAL
35839: IFTRUE 35843
35841: GO 35868
35843: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35844: LD_ADDR_VAR 0 3
35848: PUSH
35849: LD_INT 20
35851: PPUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: CALL_OW 321
35861: PUSH
35862: LD_INT 2
35864: EQUAL
35865: ST_TO_ADDR
35866: GO 36079
35868: LD_INT 28
35870: DOUBLE
35871: EQUAL
35872: IFTRUE 35882
35874: LD_INT 21
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35882
35880: GO 35907
35882: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_INT 21
35890: PPUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL_OW 321
35900: PUSH
35901: LD_INT 2
35903: EQUAL
35904: ST_TO_ADDR
35905: GO 36079
35907: LD_INT 16
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35940
35915: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 84
35923: PPUSH
35924: LD_VAR 0 1
35928: PPUSH
35929: CALL_OW 321
35933: PUSH
35934: LD_INT 2
35936: EQUAL
35937: ST_TO_ADDR
35938: GO 36079
35940: LD_INT 19
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35954
35946: LD_INT 23
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35954
35952: GO 35979
35954: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: LD_INT 83
35962: PPUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 321
35972: PUSH
35973: LD_INT 2
35975: EQUAL
35976: ST_TO_ADDR
35977: GO 36079
35979: LD_INT 17
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36012
35987: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_INT 39
35995: PPUSH
35996: LD_VAR 0 1
36000: PPUSH
36001: CALL_OW 321
36005: PUSH
36006: LD_INT 2
36008: EQUAL
36009: ST_TO_ADDR
36010: GO 36079
36012: LD_INT 18
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36045
36020: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_INT 40
36028: PPUSH
36029: LD_VAR 0 1
36033: PPUSH
36034: CALL_OW 321
36038: PUSH
36039: LD_INT 2
36041: EQUAL
36042: ST_TO_ADDR
36043: GO 36079
36045: LD_INT 27
36047: DOUBLE
36048: EQUAL
36049: IFTRUE 36053
36051: GO 36078
36053: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_INT 35
36061: PPUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 321
36071: PUSH
36072: LD_INT 2
36074: EQUAL
36075: ST_TO_ADDR
36076: GO 36079
36078: POP
// end ;
36079: LD_VAR 0 3
36083: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36084: LD_INT 0
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
// result := false ;
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: LD_INT 0
36104: ST_TO_ADDR
// if btype = b_depot then
36105: LD_VAR 0 2
36109: PUSH
36110: LD_INT 0
36112: EQUAL
36113: IFFALSE 36125
// begin result := true ;
36115: LD_ADDR_VAR 0 6
36119: PUSH
36120: LD_INT 1
36122: ST_TO_ADDR
// exit ;
36123: GO 36951
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36125: LD_VAR 0 1
36129: NOT
36130: PUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL_OW 266
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: IN
36151: NOT
36152: OR
36153: PUSH
36154: LD_VAR 0 2
36158: NOT
36159: OR
36160: PUSH
36161: LD_VAR 0 5
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 4
36180: PUSH
36181: LD_INT 5
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: IN
36192: NOT
36193: OR
36194: PUSH
36195: LD_VAR 0 3
36199: PPUSH
36200: LD_VAR 0 4
36204: PPUSH
36205: CALL_OW 488
36209: NOT
36210: OR
36211: IFFALSE 36215
// exit ;
36213: GO 36951
// side := GetSide ( depot ) ;
36215: LD_ADDR_VAR 0 9
36219: PUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 255
36229: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36230: LD_VAR 0 9
36234: PPUSH
36235: LD_VAR 0 2
36239: PPUSH
36240: CALL 35708 0 2
36244: NOT
36245: IFFALSE 36249
// exit ;
36247: GO 36951
// pom := GetBase ( depot ) ;
36249: LD_ADDR_VAR 0 10
36253: PUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 274
36263: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36264: LD_ADDR_VAR 0 11
36268: PUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 1
36278: PPUSH
36279: CALL_OW 248
36283: PPUSH
36284: CALL_OW 450
36288: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36289: LD_VAR 0 10
36293: PPUSH
36294: LD_INT 1
36296: PPUSH
36297: CALL_OW 275
36301: PUSH
36302: LD_VAR 0 11
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: GREATEREQUAL
36311: PUSH
36312: LD_VAR 0 10
36316: PPUSH
36317: LD_INT 2
36319: PPUSH
36320: CALL_OW 275
36324: PUSH
36325: LD_VAR 0 11
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: GREATEREQUAL
36334: AND
36335: PUSH
36336: LD_VAR 0 10
36340: PPUSH
36341: LD_INT 3
36343: PPUSH
36344: CALL_OW 275
36348: PUSH
36349: LD_VAR 0 11
36353: PUSH
36354: LD_INT 3
36356: ARRAY
36357: GREATEREQUAL
36358: AND
36359: NOT
36360: IFFALSE 36364
// exit ;
36362: GO 36951
// if GetBType ( depot ) = b_depot then
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 266
36373: PUSH
36374: LD_INT 0
36376: EQUAL
36377: IFFALSE 36389
// dist := 28 else
36379: LD_ADDR_VAR 0 14
36383: PUSH
36384: LD_INT 28
36386: ST_TO_ADDR
36387: GO 36397
// dist := 36 ;
36389: LD_ADDR_VAR 0 14
36393: PUSH
36394: LD_INT 36
36396: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36397: LD_VAR 0 1
36401: PPUSH
36402: LD_VAR 0 3
36406: PPUSH
36407: LD_VAR 0 4
36411: PPUSH
36412: CALL_OW 297
36416: PUSH
36417: LD_VAR 0 14
36421: GREATER
36422: IFFALSE 36426
// exit ;
36424: GO 36951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36426: LD_ADDR_VAR 0 12
36430: PUSH
36431: LD_VAR 0 2
36435: PPUSH
36436: LD_VAR 0 3
36440: PPUSH
36441: LD_VAR 0 4
36445: PPUSH
36446: LD_VAR 0 5
36450: PPUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 248
36460: PPUSH
36461: LD_INT 0
36463: PPUSH
36464: CALL 36956 0 6
36468: ST_TO_ADDR
// if not hexes then
36469: LD_VAR 0 12
36473: NOT
36474: IFFALSE 36478
// exit ;
36476: GO 36951
// hex := GetHexInfo ( x , y ) ;
36478: LD_ADDR_VAR 0 15
36482: PUSH
36483: LD_VAR 0 3
36487: PPUSH
36488: LD_VAR 0 4
36492: PPUSH
36493: CALL_OW 546
36497: ST_TO_ADDR
// if hex [ 1 ] then
36498: LD_VAR 0 15
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: IFFALSE 36510
// exit ;
36508: GO 36951
// height := hex [ 2 ] ;
36510: LD_ADDR_VAR 0 13
36514: PUSH
36515: LD_VAR 0 15
36519: PUSH
36520: LD_INT 2
36522: ARRAY
36523: ST_TO_ADDR
// for i = 1 to hexes do
36524: LD_ADDR_VAR 0 7
36528: PUSH
36529: DOUBLE
36530: LD_INT 1
36532: DEC
36533: ST_TO_ADDR
36534: LD_VAR 0 12
36538: PUSH
36539: FOR_TO
36540: IFFALSE 36870
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36542: LD_VAR 0 12
36546: PUSH
36547: LD_VAR 0 7
36551: ARRAY
36552: PUSH
36553: LD_INT 1
36555: ARRAY
36556: PPUSH
36557: LD_VAR 0 12
36561: PUSH
36562: LD_VAR 0 7
36566: ARRAY
36567: PUSH
36568: LD_INT 2
36570: ARRAY
36571: PPUSH
36572: CALL_OW 488
36576: NOT
36577: PUSH
36578: LD_VAR 0 12
36582: PUSH
36583: LD_VAR 0 7
36587: ARRAY
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PPUSH
36593: LD_VAR 0 12
36597: PUSH
36598: LD_VAR 0 7
36602: ARRAY
36603: PUSH
36604: LD_INT 2
36606: ARRAY
36607: PPUSH
36608: CALL_OW 428
36612: PUSH
36613: LD_INT 0
36615: GREATER
36616: OR
36617: PUSH
36618: LD_VAR 0 12
36622: PUSH
36623: LD_VAR 0 7
36627: ARRAY
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: LD_VAR 0 12
36637: PUSH
36638: LD_VAR 0 7
36642: ARRAY
36643: PUSH
36644: LD_INT 2
36646: ARRAY
36647: PPUSH
36648: CALL_OW 351
36652: OR
36653: IFFALSE 36659
// exit ;
36655: POP
36656: POP
36657: GO 36951
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36659: LD_ADDR_VAR 0 8
36663: PUSH
36664: LD_VAR 0 12
36668: PUSH
36669: LD_VAR 0 7
36673: ARRAY
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: PPUSH
36679: LD_VAR 0 12
36683: PUSH
36684: LD_VAR 0 7
36688: ARRAY
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: PPUSH
36694: CALL_OW 546
36698: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36699: LD_VAR 0 8
36703: PUSH
36704: LD_INT 1
36706: ARRAY
36707: PUSH
36708: LD_VAR 0 8
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: PUSH
36717: LD_VAR 0 13
36721: PUSH
36722: LD_INT 2
36724: PLUS
36725: GREATER
36726: OR
36727: PUSH
36728: LD_VAR 0 8
36732: PUSH
36733: LD_INT 2
36735: ARRAY
36736: PUSH
36737: LD_VAR 0 13
36741: PUSH
36742: LD_INT 2
36744: MINUS
36745: LESS
36746: OR
36747: PUSH
36748: LD_VAR 0 8
36752: PUSH
36753: LD_INT 3
36755: ARRAY
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: LD_INT 8
36762: PUSH
36763: LD_INT 9
36765: PUSH
36766: LD_INT 10
36768: PUSH
36769: LD_INT 11
36771: PUSH
36772: LD_INT 12
36774: PUSH
36775: LD_INT 13
36777: PUSH
36778: LD_INT 16
36780: PUSH
36781: LD_INT 17
36783: PUSH
36784: LD_INT 18
36786: PUSH
36787: LD_INT 19
36789: PUSH
36790: LD_INT 20
36792: PUSH
36793: LD_INT 21
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: IN
36811: NOT
36812: OR
36813: PUSH
36814: LD_VAR 0 8
36818: PUSH
36819: LD_INT 5
36821: ARRAY
36822: NOT
36823: OR
36824: PUSH
36825: LD_VAR 0 8
36829: PUSH
36830: LD_INT 6
36832: ARRAY
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 7
36842: PUSH
36843: LD_INT 9
36845: PUSH
36846: LD_INT 10
36848: PUSH
36849: LD_INT 11
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: IN
36860: NOT
36861: OR
36862: IFFALSE 36868
// exit ;
36864: POP
36865: POP
36866: GO 36951
// end ;
36868: GO 36539
36870: POP
36871: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36872: LD_VAR 0 9
36876: PPUSH
36877: LD_VAR 0 3
36881: PPUSH
36882: LD_VAR 0 4
36886: PPUSH
36887: LD_INT 20
36889: PPUSH
36890: CALL 28874 0 4
36894: PUSH
36895: LD_INT 4
36897: ARRAY
36898: IFFALSE 36902
// exit ;
36900: GO 36951
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36902: LD_VAR 0 2
36906: PUSH
36907: LD_INT 29
36909: PUSH
36910: LD_INT 30
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: IN
36917: PUSH
36918: LD_VAR 0 3
36922: PPUSH
36923: LD_VAR 0 4
36927: PPUSH
36928: LD_VAR 0 9
36932: PPUSH
36933: CALL_OW 440
36937: NOT
36938: AND
36939: IFFALSE 36943
// exit ;
36941: GO 36951
// result := true ;
36943: LD_ADDR_VAR 0 6
36947: PUSH
36948: LD_INT 1
36950: ST_TO_ADDR
// end ;
36951: LD_VAR 0 6
36955: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36956: LD_INT 0
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
36976: PPUSH
36977: PPUSH
36978: PPUSH
36979: PPUSH
36980: PPUSH
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
36990: PPUSH
36991: PPUSH
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
// result = [ ] ;
37016: LD_ADDR_VAR 0 7
37020: PUSH
37021: EMPTY
37022: ST_TO_ADDR
// temp_list = [ ] ;
37023: LD_ADDR_VAR 0 9
37027: PUSH
37028: EMPTY
37029: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37030: LD_VAR 0 4
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: LD_INT 4
37049: PUSH
37050: LD_INT 5
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: IN
37061: NOT
37062: PUSH
37063: LD_VAR 0 1
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: IN
37078: PUSH
37079: LD_VAR 0 5
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: IN
37098: NOT
37099: AND
37100: OR
37101: IFFALSE 37105
// exit ;
37103: GO 55496
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37105: LD_VAR 0 1
37109: PUSH
37110: LD_INT 6
37112: PUSH
37113: LD_INT 7
37115: PUSH
37116: LD_INT 8
37118: PUSH
37119: LD_INT 13
37121: PUSH
37122: LD_INT 12
37124: PUSH
37125: LD_INT 15
37127: PUSH
37128: LD_INT 11
37130: PUSH
37131: LD_INT 14
37133: PUSH
37134: LD_INT 10
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: IN
37148: IFFALSE 37158
// btype = b_lab ;
37150: LD_ADDR_VAR 0 1
37154: PUSH
37155: LD_INT 6
37157: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37158: LD_VAR 0 6
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: IN
37177: NOT
37178: PUSH
37179: LD_VAR 0 1
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: LD_INT 6
37198: PUSH
37199: LD_INT 36
37201: PUSH
37202: LD_INT 4
37204: PUSH
37205: LD_INT 5
37207: PUSH
37208: LD_INT 31
37210: PUSH
37211: LD_INT 32
37213: PUSH
37214: LD_INT 33
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: IN
37230: NOT
37231: PUSH
37232: LD_VAR 0 6
37236: PUSH
37237: LD_INT 1
37239: EQUAL
37240: AND
37241: OR
37242: PUSH
37243: LD_VAR 0 1
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: IN
37258: NOT
37259: PUSH
37260: LD_VAR 0 6
37264: PUSH
37265: LD_INT 2
37267: EQUAL
37268: AND
37269: OR
37270: IFFALSE 37280
// mode = 0 ;
37272: LD_ADDR_VAR 0 6
37276: PUSH
37277: LD_INT 0
37279: ST_TO_ADDR
// case mode of 0 :
37280: LD_VAR 0 6
37284: PUSH
37285: LD_INT 0
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 48746
37293: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37294: LD_ADDR_VAR 0 11
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37487: LD_ADDR_VAR 0 12
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: NEG
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: NEG
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: NEG
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: NEG
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37683: LD_ADDR_VAR 0 13
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 3
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: NEG
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37882: LD_ADDR_VAR 0 14
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 2
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 3
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38078: LD_ADDR_VAR 0 15
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38271: LD_ADDR_VAR 0 16
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38464: LD_ADDR_VAR 0 17
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38694: LD_ADDR_VAR 0 18
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38924: LD_ADDR_VAR 0 19
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39154: LD_ADDR_VAR 0 20
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39384: LD_ADDR_VAR 0 21
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39614: LD_ADDR_VAR 0 22
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39844: LD_ADDR_VAR 0 23
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 3
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40124: LD_ADDR_VAR 0 24
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40400: LD_ADDR_VAR 0 25
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 3
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40674: LD_ADDR_VAR 0 26
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40950: LD_ADDR_VAR 0 27
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 3
41183: NEG
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 3
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41230: LD_ADDR_VAR 0 28
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 3
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41512: LD_ADDR_VAR 0 29
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41791: LD_ADDR_VAR 0 30
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42069: LD_ADDR_VAR 0 31
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42347: LD_ADDR_VAR 0 32
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 3
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 3
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42625: LD_ADDR_VAR 0 33
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42904: LD_ADDR_VAR 0 34
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43184: LD_ADDR_VAR 0 35
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43296: LD_ADDR_VAR 0 36
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43408: LD_ADDR_VAR 0 37
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43520: LD_ADDR_VAR 0 38
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43632: LD_ADDR_VAR 0 39
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43744: LD_ADDR_VAR 0 40
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43856: LD_ADDR_VAR 0 41
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 3
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 3
44153: NEG
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44206: LD_ADDR_VAR 0 42
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 3
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 3
44503: NEG
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: LD_INT 3
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44556: LD_ADDR_VAR 0 43
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 3
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 3
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44904: LD_ADDR_VAR 0 44
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 3
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 3
45213: NEG
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45254: LD_ADDR_VAR 0 45
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 3
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 3
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: LD_INT 3
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 3
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: NEG
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45604: LD_ADDR_VAR 0 46
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 3
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45952: LD_ADDR_VAR 0 47
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46103: LD_ADDR_VAR 0 48
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46250: LD_ADDR_VAR 0 49
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46394: LD_ADDR_VAR 0 50
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46538: LD_ADDR_VAR 0 51
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46685: LD_ADDR_VAR 0 52
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46836: LD_ADDR_VAR 0 53
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47066: LD_ADDR_VAR 0 54
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47296: LD_ADDR_VAR 0 55
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47526: LD_ADDR_VAR 0 56
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 57
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 58
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48216: LD_ADDR_VAR 0 59
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48304: LD_ADDR_VAR 0 60
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48392: LD_ADDR_VAR 0 61
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48480: LD_ADDR_VAR 0 62
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48568: LD_ADDR_VAR 0 63
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48656: LD_ADDR_VAR 0 64
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// end ; 1 :
48744: GO 54641
48746: LD_INT 1
48748: DOUBLE
48749: EQUAL
48750: IFTRUE 48754
48752: GO 51377
48754: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48755: LD_ADDR_VAR 0 11
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48799: LD_ADDR_VAR 0 12
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48840: LD_ADDR_VAR 0 13
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48880: LD_ADDR_VAR 0 14
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48921: LD_ADDR_VAR 0 15
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48965: LD_ADDR_VAR 0 16
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49011: LD_ADDR_VAR 0 17
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49055: LD_ADDR_VAR 0 18
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49096: LD_ADDR_VAR 0 19
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49136: LD_ADDR_VAR 0 20
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49177: LD_ADDR_VAR 0 21
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49221: LD_ADDR_VAR 0 22
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49267: LD_ADDR_VAR 0 23
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 3
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 4
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49311: LD_ADDR_VAR 0 24
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49352: LD_ADDR_VAR 0 25
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 4
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49392: LD_ADDR_VAR 0 26
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49433: LD_ADDR_VAR 0 27
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 4
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49477: LD_ADDR_VAR 0 28
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: LD_INT 4
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 4
49508: NEG
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49523: LD_ADDR_VAR 0 29
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 4
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 5
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 5
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 4
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 6
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 6
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 5
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49678: LD_ADDR_VAR 0 30
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 3
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 4
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 4
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 5
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 5
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 5
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 6
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 6
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49821: LD_ADDR_VAR 0 31
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 4
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 4
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 5
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 5
49898: PUSH
49899: LD_INT 5
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 4
49908: PUSH
49909: LD_INT 5
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 6
49918: PUSH
49919: LD_INT 5
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 6
49928: PUSH
49929: LD_INT 6
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: LD_INT 6
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49960: LD_ADDR_VAR 0 32
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 3
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 5
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 5
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 4
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 6
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 6
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 5
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50103: LD_ADDR_VAR 0 33
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 4
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 4
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 5
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 5
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 6
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 6
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50258: LD_ADDR_VAR 0 34
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: LD_INT 4
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 4
50313: NEG
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 4
50325: NEG
50326: PUSH
50327: LD_INT 4
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 4
50337: NEG
50338: PUSH
50339: LD_INT 5
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 5
50349: NEG
50350: PUSH
50351: LD_INT 4
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 5
50361: NEG
50362: PUSH
50363: LD_INT 5
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: NEG
50374: PUSH
50375: LD_INT 6
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 6
50385: NEG
50386: PUSH
50387: LD_INT 5
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 6
50397: NEG
50398: PUSH
50399: LD_INT 6
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50421: LD_ADDR_VAR 0 41
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50465: LD_ADDR_VAR 0 42
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50506: LD_ADDR_VAR 0 43
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 3
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50546: LD_ADDR_VAR 0 44
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50587: LD_ADDR_VAR 0 45
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50631: LD_ADDR_VAR 0 46
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50677: LD_ADDR_VAR 0 47
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50710: LD_ADDR_VAR 0 48
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50741: LD_ADDR_VAR 0 49
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50770: LD_ADDR_VAR 0 50
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50799: LD_ADDR_VAR 0 51
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50830: LD_ADDR_VAR 0 52
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 53
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50907: LD_ADDR_VAR 0 54
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50948: LD_ADDR_VAR 0 55
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50988: LD_ADDR_VAR 0 56
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51029: LD_ADDR_VAR 0 57
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51073: LD_ADDR_VAR 0 58
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 3
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51119: LD_ADDR_VAR 0 59
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51163: LD_ADDR_VAR 0 60
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51204: LD_ADDR_VAR 0 61
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51244: LD_ADDR_VAR 0 62
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51285: LD_ADDR_VAR 0 63
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51329: LD_ADDR_VAR 0 64
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// end ; 2 :
51375: GO 54641
51377: LD_INT 2
51379: DOUBLE
51380: EQUAL
51381: IFTRUE 51385
51383: GO 54640
51385: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51386: LD_ADDR_VAR 0 29
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 5
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 4
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 5
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 4
51516: PUSH
51517: LD_INT 4
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 4
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 4
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 4
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 5
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 4
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 5
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 4
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: NEG
51772: PUSH
51773: LD_INT 4
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 4
51783: NEG
51784: PUSH
51785: LD_INT 5
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 4
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 4
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 5
51831: NEG
51832: PUSH
51833: LD_INT 4
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 5
51843: NEG
51844: PUSH
51845: LD_INT 5
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 5
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 5
51867: NEG
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51924: LD_ADDR_VAR 0 30
51928: PUSH
51929: LD_INT 4
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 5
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 5
51961: PUSH
51962: LD_INT 5
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: LD_INT 5
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 4
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 5
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 5
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 4
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 4
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 5
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 4
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 5
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 5
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 5
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52471: LD_ADDR_VAR 0 31
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 4
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 4
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 5
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 5
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 4
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 5
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 4
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 4
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: LD_INT 4
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 4
52685: NEG
52686: PUSH
52687: LD_INT 5
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: LD_INT 4
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: LD_INT 3
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 4
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 5
52733: NEG
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 5
52745: NEG
52746: PUSH
52747: LD_INT 5
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 5
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 5
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 4
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 4
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 4
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 5
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 5
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 4
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 5
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53021: LD_ADDR_VAR 0 32
53025: PUSH
53026: LD_INT 4
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 5
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 5
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: LD_INT 4
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 3
53178: NEG
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 4
53190: NEG
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 4
53202: NEG
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 4
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 4
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 4
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 5
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 4
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 5
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 5
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 4
53433: PUSH
53434: LD_INT 4
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 4
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: LD_INT 4
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: PUSH
53464: LD_INT 5
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: PUSH
53474: LD_INT 5
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: LD_INT 4
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 5
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 5
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53568: LD_ADDR_VAR 0 33
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 4
53587: NEG
53588: PUSH
53589: LD_INT 5
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: LD_INT 4
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 4
53623: NEG
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 5
53635: NEG
53636: PUSH
53637: LD_INT 4
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 5
53647: NEG
53648: PUSH
53649: LD_INT 5
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: LD_INT 5
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 5
53671: NEG
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 4
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 4
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 4
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 4
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 5
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 4
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 5
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 4
53908: PUSH
53909: LD_INT 4
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 4
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 4
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 4
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 5
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 5
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 4
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54106: LD_ADDR_VAR 0 34
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 4
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 5
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 3
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 4
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 5
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 5
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 4
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 4
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: LD_INT 4
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 5
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 5
54338: PUSH
54339: LD_INT 5
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 4
54348: PUSH
54349: LD_INT 5
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 4
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 5
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: LD_INT 5
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 4
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 4
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 5
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 5
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 5
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: ST_TO_ADDR
// end ; end ;
54638: GO 54641
54640: POP
// case btype of b_depot , b_warehouse :
54641: LD_VAR 0 1
54645: PUSH
54646: LD_INT 0
54648: DOUBLE
54649: EQUAL
54650: IFTRUE 54660
54652: LD_INT 1
54654: DOUBLE
54655: EQUAL
54656: IFTRUE 54660
54658: GO 54861
54660: POP
// case nation of nation_american :
54661: LD_VAR 0 5
54665: PUSH
54666: LD_INT 1
54668: DOUBLE
54669: EQUAL
54670: IFTRUE 54674
54672: GO 54730
54674: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54675: LD_ADDR_VAR 0 9
54679: PUSH
54680: LD_VAR 0 11
54684: PUSH
54685: LD_VAR 0 12
54689: PUSH
54690: LD_VAR 0 13
54694: PUSH
54695: LD_VAR 0 14
54699: PUSH
54700: LD_VAR 0 15
54704: PUSH
54705: LD_VAR 0 16
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: PUSH
54718: LD_VAR 0 4
54722: PUSH
54723: LD_INT 1
54725: PLUS
54726: ARRAY
54727: ST_TO_ADDR
54728: GO 54859
54730: LD_INT 2
54732: DOUBLE
54733: EQUAL
54734: IFTRUE 54738
54736: GO 54794
54738: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54739: LD_ADDR_VAR 0 9
54743: PUSH
54744: LD_VAR 0 17
54748: PUSH
54749: LD_VAR 0 18
54753: PUSH
54754: LD_VAR 0 19
54758: PUSH
54759: LD_VAR 0 20
54763: PUSH
54764: LD_VAR 0 21
54768: PUSH
54769: LD_VAR 0 22
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: PUSH
54782: LD_VAR 0 4
54786: PUSH
54787: LD_INT 1
54789: PLUS
54790: ARRAY
54791: ST_TO_ADDR
54792: GO 54859
54794: LD_INT 3
54796: DOUBLE
54797: EQUAL
54798: IFTRUE 54802
54800: GO 54858
54802: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54803: LD_ADDR_VAR 0 9
54807: PUSH
54808: LD_VAR 0 23
54812: PUSH
54813: LD_VAR 0 24
54817: PUSH
54818: LD_VAR 0 25
54822: PUSH
54823: LD_VAR 0 26
54827: PUSH
54828: LD_VAR 0 27
54832: PUSH
54833: LD_VAR 0 28
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: PUSH
54846: LD_VAR 0 4
54850: PUSH
54851: LD_INT 1
54853: PLUS
54854: ARRAY
54855: ST_TO_ADDR
54856: GO 54859
54858: POP
54859: GO 55414
54861: LD_INT 2
54863: DOUBLE
54864: EQUAL
54865: IFTRUE 54875
54867: LD_INT 3
54869: DOUBLE
54870: EQUAL
54871: IFTRUE 54875
54873: GO 54931
54875: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54876: LD_ADDR_VAR 0 9
54880: PUSH
54881: LD_VAR 0 29
54885: PUSH
54886: LD_VAR 0 30
54890: PUSH
54891: LD_VAR 0 31
54895: PUSH
54896: LD_VAR 0 32
54900: PUSH
54901: LD_VAR 0 33
54905: PUSH
54906: LD_VAR 0 34
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: PUSH
54919: LD_VAR 0 4
54923: PUSH
54924: LD_INT 1
54926: PLUS
54927: ARRAY
54928: ST_TO_ADDR
54929: GO 55414
54931: LD_INT 16
54933: DOUBLE
54934: EQUAL
54935: IFTRUE 54993
54937: LD_INT 17
54939: DOUBLE
54940: EQUAL
54941: IFTRUE 54993
54943: LD_INT 18
54945: DOUBLE
54946: EQUAL
54947: IFTRUE 54993
54949: LD_INT 19
54951: DOUBLE
54952: EQUAL
54953: IFTRUE 54993
54955: LD_INT 22
54957: DOUBLE
54958: EQUAL
54959: IFTRUE 54993
54961: LD_INT 20
54963: DOUBLE
54964: EQUAL
54965: IFTRUE 54993
54967: LD_INT 21
54969: DOUBLE
54970: EQUAL
54971: IFTRUE 54993
54973: LD_INT 23
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 54993
54979: LD_INT 24
54981: DOUBLE
54982: EQUAL
54983: IFTRUE 54993
54985: LD_INT 25
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54993
54991: GO 55049
54993: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54994: LD_ADDR_VAR 0 9
54998: PUSH
54999: LD_VAR 0 35
55003: PUSH
55004: LD_VAR 0 36
55008: PUSH
55009: LD_VAR 0 37
55013: PUSH
55014: LD_VAR 0 38
55018: PUSH
55019: LD_VAR 0 39
55023: PUSH
55024: LD_VAR 0 40
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_VAR 0 4
55041: PUSH
55042: LD_INT 1
55044: PLUS
55045: ARRAY
55046: ST_TO_ADDR
55047: GO 55414
55049: LD_INT 6
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55105
55055: LD_INT 7
55057: DOUBLE
55058: EQUAL
55059: IFTRUE 55105
55061: LD_INT 8
55063: DOUBLE
55064: EQUAL
55065: IFTRUE 55105
55067: LD_INT 13
55069: DOUBLE
55070: EQUAL
55071: IFTRUE 55105
55073: LD_INT 12
55075: DOUBLE
55076: EQUAL
55077: IFTRUE 55105
55079: LD_INT 15
55081: DOUBLE
55082: EQUAL
55083: IFTRUE 55105
55085: LD_INT 11
55087: DOUBLE
55088: EQUAL
55089: IFTRUE 55105
55091: LD_INT 14
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55105
55097: LD_INT 10
55099: DOUBLE
55100: EQUAL
55101: IFTRUE 55105
55103: GO 55161
55105: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55106: LD_ADDR_VAR 0 9
55110: PUSH
55111: LD_VAR 0 41
55115: PUSH
55116: LD_VAR 0 42
55120: PUSH
55121: LD_VAR 0 43
55125: PUSH
55126: LD_VAR 0 44
55130: PUSH
55131: LD_VAR 0 45
55135: PUSH
55136: LD_VAR 0 46
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: PUSH
55149: LD_VAR 0 4
55153: PUSH
55154: LD_INT 1
55156: PLUS
55157: ARRAY
55158: ST_TO_ADDR
55159: GO 55414
55161: LD_INT 36
55163: DOUBLE
55164: EQUAL
55165: IFTRUE 55169
55167: GO 55225
55169: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55170: LD_ADDR_VAR 0 9
55174: PUSH
55175: LD_VAR 0 47
55179: PUSH
55180: LD_VAR 0 48
55184: PUSH
55185: LD_VAR 0 49
55189: PUSH
55190: LD_VAR 0 50
55194: PUSH
55195: LD_VAR 0 51
55199: PUSH
55200: LD_VAR 0 52
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: PUSH
55213: LD_VAR 0 4
55217: PUSH
55218: LD_INT 1
55220: PLUS
55221: ARRAY
55222: ST_TO_ADDR
55223: GO 55414
55225: LD_INT 4
55227: DOUBLE
55228: EQUAL
55229: IFTRUE 55251
55231: LD_INT 5
55233: DOUBLE
55234: EQUAL
55235: IFTRUE 55251
55237: LD_INT 34
55239: DOUBLE
55240: EQUAL
55241: IFTRUE 55251
55243: LD_INT 37
55245: DOUBLE
55246: EQUAL
55247: IFTRUE 55251
55249: GO 55307
55251: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55252: LD_ADDR_VAR 0 9
55256: PUSH
55257: LD_VAR 0 53
55261: PUSH
55262: LD_VAR 0 54
55266: PUSH
55267: LD_VAR 0 55
55271: PUSH
55272: LD_VAR 0 56
55276: PUSH
55277: LD_VAR 0 57
55281: PUSH
55282: LD_VAR 0 58
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: PUSH
55295: LD_VAR 0 4
55299: PUSH
55300: LD_INT 1
55302: PLUS
55303: ARRAY
55304: ST_TO_ADDR
55305: GO 55414
55307: LD_INT 31
55309: DOUBLE
55310: EQUAL
55311: IFTRUE 55357
55313: LD_INT 32
55315: DOUBLE
55316: EQUAL
55317: IFTRUE 55357
55319: LD_INT 33
55321: DOUBLE
55322: EQUAL
55323: IFTRUE 55357
55325: LD_INT 27
55327: DOUBLE
55328: EQUAL
55329: IFTRUE 55357
55331: LD_INT 26
55333: DOUBLE
55334: EQUAL
55335: IFTRUE 55357
55337: LD_INT 28
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55357
55343: LD_INT 29
55345: DOUBLE
55346: EQUAL
55347: IFTRUE 55357
55349: LD_INT 30
55351: DOUBLE
55352: EQUAL
55353: IFTRUE 55357
55355: GO 55413
55357: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55358: LD_ADDR_VAR 0 9
55362: PUSH
55363: LD_VAR 0 59
55367: PUSH
55368: LD_VAR 0 60
55372: PUSH
55373: LD_VAR 0 61
55377: PUSH
55378: LD_VAR 0 62
55382: PUSH
55383: LD_VAR 0 63
55387: PUSH
55388: LD_VAR 0 64
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: PUSH
55401: LD_VAR 0 4
55405: PUSH
55406: LD_INT 1
55408: PLUS
55409: ARRAY
55410: ST_TO_ADDR
55411: GO 55414
55413: POP
// temp_list2 = [ ] ;
55414: LD_ADDR_VAR 0 10
55418: PUSH
55419: EMPTY
55420: ST_TO_ADDR
// for i in temp_list do
55421: LD_ADDR_VAR 0 8
55425: PUSH
55426: LD_VAR 0 9
55430: PUSH
55431: FOR_IN
55432: IFFALSE 55484
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55434: LD_ADDR_VAR 0 10
55438: PUSH
55439: LD_VAR 0 10
55443: PUSH
55444: LD_VAR 0 8
55448: PUSH
55449: LD_INT 1
55451: ARRAY
55452: PUSH
55453: LD_VAR 0 2
55457: PLUS
55458: PUSH
55459: LD_VAR 0 8
55463: PUSH
55464: LD_INT 2
55466: ARRAY
55467: PUSH
55468: LD_VAR 0 3
55472: PLUS
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: ADD
55481: ST_TO_ADDR
55482: GO 55431
55484: POP
55485: POP
// result = temp_list2 ;
55486: LD_ADDR_VAR 0 7
55490: PUSH
55491: LD_VAR 0 10
55495: ST_TO_ADDR
// end ;
55496: LD_VAR 0 7
55500: RET
// export function EnemyInRange ( unit , dist ) ; begin
55501: LD_INT 0
55503: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55504: LD_ADDR_VAR 0 3
55508: PUSH
55509: LD_VAR 0 1
55513: PPUSH
55514: CALL_OW 255
55518: PPUSH
55519: LD_VAR 0 1
55523: PPUSH
55524: CALL_OW 250
55528: PPUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: CALL_OW 251
55538: PPUSH
55539: LD_VAR 0 2
55543: PPUSH
55544: CALL 28874 0 4
55548: PUSH
55549: LD_INT 4
55551: ARRAY
55552: ST_TO_ADDR
// end ;
55553: LD_VAR 0 3
55557: RET
// export function PlayerSeeMe ( unit ) ; begin
55558: LD_INT 0
55560: PPUSH
// result := See ( your_side , unit ) ;
55561: LD_ADDR_VAR 0 2
55565: PUSH
55566: LD_OWVAR 2
55570: PPUSH
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 292
55580: ST_TO_ADDR
// end ;
55581: LD_VAR 0 2
55585: RET
// export function ReverseDir ( unit ) ; begin
55586: LD_INT 0
55588: PPUSH
// if not unit then
55589: LD_VAR 0 1
55593: NOT
55594: IFFALSE 55598
// exit ;
55596: GO 55621
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55598: LD_ADDR_VAR 0 2
55602: PUSH
55603: LD_VAR 0 1
55607: PPUSH
55608: CALL_OW 254
55612: PUSH
55613: LD_INT 3
55615: PLUS
55616: PUSH
55617: LD_INT 6
55619: MOD
55620: ST_TO_ADDR
// end ;
55621: LD_VAR 0 2
55625: RET
// export function ReverseArray ( array ) ; var i ; begin
55626: LD_INT 0
55628: PPUSH
55629: PPUSH
// if not array then
55630: LD_VAR 0 1
55634: NOT
55635: IFFALSE 55639
// exit ;
55637: GO 55694
// result := [ ] ;
55639: LD_ADDR_VAR 0 2
55643: PUSH
55644: EMPTY
55645: ST_TO_ADDR
// for i := array downto 1 do
55646: LD_ADDR_VAR 0 3
55650: PUSH
55651: DOUBLE
55652: LD_VAR 0 1
55656: INC
55657: ST_TO_ADDR
55658: LD_INT 1
55660: PUSH
55661: FOR_DOWNTO
55662: IFFALSE 55692
// result := Join ( result , array [ i ] ) ;
55664: LD_ADDR_VAR 0 2
55668: PUSH
55669: LD_VAR 0 2
55673: PPUSH
55674: LD_VAR 0 1
55678: PUSH
55679: LD_VAR 0 3
55683: ARRAY
55684: PPUSH
55685: CALL 60350 0 2
55689: ST_TO_ADDR
55690: GO 55661
55692: POP
55693: POP
// end ;
55694: LD_VAR 0 2
55698: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55699: LD_INT 0
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
// if not unit or not hexes then
55707: LD_VAR 0 1
55711: NOT
55712: PUSH
55713: LD_VAR 0 2
55717: NOT
55718: OR
55719: IFFALSE 55723
// exit ;
55721: GO 55846
// dist := 9999 ;
55723: LD_ADDR_VAR 0 5
55727: PUSH
55728: LD_INT 9999
55730: ST_TO_ADDR
// for i = 1 to hexes do
55731: LD_ADDR_VAR 0 4
55735: PUSH
55736: DOUBLE
55737: LD_INT 1
55739: DEC
55740: ST_TO_ADDR
55741: LD_VAR 0 2
55745: PUSH
55746: FOR_TO
55747: IFFALSE 55834
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55749: LD_ADDR_VAR 0 6
55753: PUSH
55754: LD_VAR 0 1
55758: PPUSH
55759: LD_VAR 0 2
55763: PUSH
55764: LD_VAR 0 4
55768: ARRAY
55769: PUSH
55770: LD_INT 1
55772: ARRAY
55773: PPUSH
55774: LD_VAR 0 2
55778: PUSH
55779: LD_VAR 0 4
55783: ARRAY
55784: PUSH
55785: LD_INT 2
55787: ARRAY
55788: PPUSH
55789: CALL_OW 297
55793: ST_TO_ADDR
// if tdist < dist then
55794: LD_VAR 0 6
55798: PUSH
55799: LD_VAR 0 5
55803: LESS
55804: IFFALSE 55832
// begin hex := hexes [ i ] ;
55806: LD_ADDR_VAR 0 8
55810: PUSH
55811: LD_VAR 0 2
55815: PUSH
55816: LD_VAR 0 4
55820: ARRAY
55821: ST_TO_ADDR
// dist := tdist ;
55822: LD_ADDR_VAR 0 5
55826: PUSH
55827: LD_VAR 0 6
55831: ST_TO_ADDR
// end ; end ;
55832: GO 55746
55834: POP
55835: POP
// result := hex ;
55836: LD_ADDR_VAR 0 3
55840: PUSH
55841: LD_VAR 0 8
55845: ST_TO_ADDR
// end ;
55846: LD_VAR 0 3
55850: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55851: LD_INT 0
55853: PPUSH
55854: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55855: LD_VAR 0 1
55859: NOT
55860: PUSH
55861: LD_VAR 0 1
55865: PUSH
55866: LD_INT 21
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 23
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PPUSH
55890: CALL_OW 69
55894: IN
55895: NOT
55896: OR
55897: IFFALSE 55901
// exit ;
55899: GO 55948
// for i = 1 to 3 do
55901: LD_ADDR_VAR 0 3
55905: PUSH
55906: DOUBLE
55907: LD_INT 1
55909: DEC
55910: ST_TO_ADDR
55911: LD_INT 3
55913: PUSH
55914: FOR_TO
55915: IFFALSE 55946
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55917: LD_VAR 0 1
55921: PPUSH
55922: CALL_OW 250
55926: PPUSH
55927: LD_VAR 0 1
55931: PPUSH
55932: CALL_OW 251
55936: PPUSH
55937: LD_INT 1
55939: PPUSH
55940: CALL_OW 453
55944: GO 55914
55946: POP
55947: POP
// end ;
55948: LD_VAR 0 2
55952: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55953: LD_INT 0
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55961: LD_VAR 0 1
55965: NOT
55966: PUSH
55967: LD_VAR 0 2
55971: NOT
55972: OR
55973: PUSH
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 314
55983: OR
55984: IFFALSE 55988
// exit ;
55986: GO 56455
// if GetLives ( i ) < 250 then
55988: LD_VAR 0 4
55992: PPUSH
55993: CALL_OW 256
55997: PUSH
55998: LD_INT 250
56000: LESS
56001: IFFALSE 56014
// begin ComAutodestruct ( i ) ;
56003: LD_VAR 0 4
56007: PPUSH
56008: CALL 55851 0 1
// exit ;
56012: GO 56455
// end ; x := GetX ( enemy_unit ) ;
56014: LD_ADDR_VAR 0 7
56018: PUSH
56019: LD_VAR 0 2
56023: PPUSH
56024: CALL_OW 250
56028: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56029: LD_ADDR_VAR 0 8
56033: PUSH
56034: LD_VAR 0 2
56038: PPUSH
56039: CALL_OW 251
56043: ST_TO_ADDR
// if not x or not y then
56044: LD_VAR 0 7
56048: NOT
56049: PUSH
56050: LD_VAR 0 8
56054: NOT
56055: OR
56056: IFFALSE 56060
// exit ;
56058: GO 56455
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56060: LD_ADDR_VAR 0 6
56064: PUSH
56065: LD_VAR 0 7
56069: PPUSH
56070: LD_INT 0
56072: PPUSH
56073: LD_INT 4
56075: PPUSH
56076: CALL_OW 272
56080: PUSH
56081: LD_VAR 0 8
56085: PPUSH
56086: LD_INT 0
56088: PPUSH
56089: LD_INT 4
56091: PPUSH
56092: CALL_OW 273
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_VAR 0 7
56105: PPUSH
56106: LD_INT 1
56108: PPUSH
56109: LD_INT 4
56111: PPUSH
56112: CALL_OW 272
56116: PUSH
56117: LD_VAR 0 8
56121: PPUSH
56122: LD_INT 1
56124: PPUSH
56125: LD_INT 4
56127: PPUSH
56128: CALL_OW 273
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_VAR 0 7
56141: PPUSH
56142: LD_INT 2
56144: PPUSH
56145: LD_INT 4
56147: PPUSH
56148: CALL_OW 272
56152: PUSH
56153: LD_VAR 0 8
56157: PPUSH
56158: LD_INT 2
56160: PPUSH
56161: LD_INT 4
56163: PPUSH
56164: CALL_OW 273
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_VAR 0 7
56177: PPUSH
56178: LD_INT 3
56180: PPUSH
56181: LD_INT 4
56183: PPUSH
56184: CALL_OW 272
56188: PUSH
56189: LD_VAR 0 8
56193: PPUSH
56194: LD_INT 3
56196: PPUSH
56197: LD_INT 4
56199: PPUSH
56200: CALL_OW 273
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_VAR 0 7
56213: PPUSH
56214: LD_INT 4
56216: PPUSH
56217: LD_INT 4
56219: PPUSH
56220: CALL_OW 272
56224: PUSH
56225: LD_VAR 0 8
56229: PPUSH
56230: LD_INT 4
56232: PPUSH
56233: LD_INT 4
56235: PPUSH
56236: CALL_OW 273
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_VAR 0 7
56249: PPUSH
56250: LD_INT 5
56252: PPUSH
56253: LD_INT 4
56255: PPUSH
56256: CALL_OW 272
56260: PUSH
56261: LD_VAR 0 8
56265: PPUSH
56266: LD_INT 5
56268: PPUSH
56269: LD_INT 4
56271: PPUSH
56272: CALL_OW 273
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// for i = tmp downto 1 do
56289: LD_ADDR_VAR 0 4
56293: PUSH
56294: DOUBLE
56295: LD_VAR 0 6
56299: INC
56300: ST_TO_ADDR
56301: LD_INT 1
56303: PUSH
56304: FOR_DOWNTO
56305: IFFALSE 56406
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56307: LD_VAR 0 6
56311: PUSH
56312: LD_VAR 0 4
56316: ARRAY
56317: PUSH
56318: LD_INT 1
56320: ARRAY
56321: PPUSH
56322: LD_VAR 0 6
56326: PUSH
56327: LD_VAR 0 4
56331: ARRAY
56332: PUSH
56333: LD_INT 2
56335: ARRAY
56336: PPUSH
56337: CALL_OW 488
56341: NOT
56342: PUSH
56343: LD_VAR 0 6
56347: PUSH
56348: LD_VAR 0 4
56352: ARRAY
56353: PUSH
56354: LD_INT 1
56356: ARRAY
56357: PPUSH
56358: LD_VAR 0 6
56362: PUSH
56363: LD_VAR 0 4
56367: ARRAY
56368: PUSH
56369: LD_INT 2
56371: ARRAY
56372: PPUSH
56373: CALL_OW 428
56377: PUSH
56378: LD_INT 0
56380: NONEQUAL
56381: OR
56382: IFFALSE 56404
// tmp := Delete ( tmp , i ) ;
56384: LD_ADDR_VAR 0 6
56388: PUSH
56389: LD_VAR 0 6
56393: PPUSH
56394: LD_VAR 0 4
56398: PPUSH
56399: CALL_OW 3
56403: ST_TO_ADDR
56404: GO 56304
56406: POP
56407: POP
// j := GetClosestHex ( unit , tmp ) ;
56408: LD_ADDR_VAR 0 5
56412: PUSH
56413: LD_VAR 0 1
56417: PPUSH
56418: LD_VAR 0 6
56422: PPUSH
56423: CALL 55699 0 2
56427: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56428: LD_VAR 0 1
56432: PPUSH
56433: LD_VAR 0 5
56437: PUSH
56438: LD_INT 1
56440: ARRAY
56441: PPUSH
56442: LD_VAR 0 5
56446: PUSH
56447: LD_INT 2
56449: ARRAY
56450: PPUSH
56451: CALL_OW 111
// end ;
56455: LD_VAR 0 3
56459: RET
// export function PrepareApemanSoldier ( ) ; begin
56460: LD_INT 0
56462: PPUSH
// uc_nation := 0 ;
56463: LD_ADDR_OWVAR 21
56467: PUSH
56468: LD_INT 0
56470: ST_TO_ADDR
// hc_sex := sex_male ;
56471: LD_ADDR_OWVAR 27
56475: PUSH
56476: LD_INT 1
56478: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56479: LD_ADDR_OWVAR 28
56483: PUSH
56484: LD_INT 15
56486: ST_TO_ADDR
// hc_gallery :=  ;
56487: LD_ADDR_OWVAR 33
56491: PUSH
56492: LD_STRING 
56494: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56495: LD_ADDR_OWVAR 31
56499: PUSH
56500: LD_INT 0
56502: PPUSH
56503: LD_INT 3
56505: PPUSH
56506: CALL_OW 12
56510: PUSH
56511: LD_INT 0
56513: PPUSH
56514: LD_INT 3
56516: PPUSH
56517: CALL_OW 12
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: ST_TO_ADDR
// end ;
56534: LD_VAR 0 1
56538: RET
// export function PrepareApemanEngineer ( ) ; begin
56539: LD_INT 0
56541: PPUSH
// uc_nation := 0 ;
56542: LD_ADDR_OWVAR 21
56546: PUSH
56547: LD_INT 0
56549: ST_TO_ADDR
// hc_sex := sex_male ;
56550: LD_ADDR_OWVAR 27
56554: PUSH
56555: LD_INT 1
56557: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56558: LD_ADDR_OWVAR 28
56562: PUSH
56563: LD_INT 16
56565: ST_TO_ADDR
// hc_gallery :=  ;
56566: LD_ADDR_OWVAR 33
56570: PUSH
56571: LD_STRING 
56573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56574: LD_ADDR_OWVAR 31
56578: PUSH
56579: LD_INT 0
56581: PPUSH
56582: LD_INT 3
56584: PPUSH
56585: CALL_OW 12
56589: PUSH
56590: LD_INT 0
56592: PPUSH
56593: LD_INT 3
56595: PPUSH
56596: CALL_OW 12
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// end ;
56613: LD_VAR 0 1
56617: RET
// export function PrepareApeman ( agressivity ) ; begin
56618: LD_INT 0
56620: PPUSH
// uc_side := 0 ;
56621: LD_ADDR_OWVAR 20
56625: PUSH
56626: LD_INT 0
56628: ST_TO_ADDR
// uc_nation := 0 ;
56629: LD_ADDR_OWVAR 21
56633: PUSH
56634: LD_INT 0
56636: ST_TO_ADDR
// hc_sex := sex_male ;
56637: LD_ADDR_OWVAR 27
56641: PUSH
56642: LD_INT 1
56644: ST_TO_ADDR
// hc_class := class_apeman ;
56645: LD_ADDR_OWVAR 28
56649: PUSH
56650: LD_INT 12
56652: ST_TO_ADDR
// hc_gallery :=  ;
56653: LD_ADDR_OWVAR 33
56657: PUSH
56658: LD_STRING 
56660: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56661: LD_ADDR_OWVAR 35
56665: PUSH
56666: LD_VAR 0 1
56670: NEG
56671: PPUSH
56672: LD_VAR 0 1
56676: PPUSH
56677: CALL_OW 12
56681: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56682: LD_ADDR_OWVAR 31
56686: PUSH
56687: LD_INT 0
56689: PPUSH
56690: LD_INT 3
56692: PPUSH
56693: CALL_OW 12
56697: PUSH
56698: LD_INT 0
56700: PPUSH
56701: LD_INT 3
56703: PPUSH
56704: CALL_OW 12
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: ST_TO_ADDR
// end ;
56721: LD_VAR 0 2
56725: RET
// export function PrepareTiger ( agressivity ) ; begin
56726: LD_INT 0
56728: PPUSH
// uc_side := 0 ;
56729: LD_ADDR_OWVAR 20
56733: PUSH
56734: LD_INT 0
56736: ST_TO_ADDR
// uc_nation := 0 ;
56737: LD_ADDR_OWVAR 21
56741: PUSH
56742: LD_INT 0
56744: ST_TO_ADDR
// hc_class := class_tiger ;
56745: LD_ADDR_OWVAR 28
56749: PUSH
56750: LD_INT 14
56752: ST_TO_ADDR
// hc_gallery :=  ;
56753: LD_ADDR_OWVAR 33
56757: PUSH
56758: LD_STRING 
56760: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56761: LD_ADDR_OWVAR 35
56765: PUSH
56766: LD_VAR 0 1
56770: NEG
56771: PPUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: CALL_OW 12
56781: ST_TO_ADDR
// end ;
56782: LD_VAR 0 2
56786: RET
// export function PrepareEnchidna ( ) ; begin
56787: LD_INT 0
56789: PPUSH
// uc_side := 0 ;
56790: LD_ADDR_OWVAR 20
56794: PUSH
56795: LD_INT 0
56797: ST_TO_ADDR
// uc_nation := 0 ;
56798: LD_ADDR_OWVAR 21
56802: PUSH
56803: LD_INT 0
56805: ST_TO_ADDR
// hc_class := class_baggie ;
56806: LD_ADDR_OWVAR 28
56810: PUSH
56811: LD_INT 13
56813: ST_TO_ADDR
// hc_gallery :=  ;
56814: LD_ADDR_OWVAR 33
56818: PUSH
56819: LD_STRING 
56821: ST_TO_ADDR
// end ;
56822: LD_VAR 0 1
56826: RET
// export function PrepareFrog ( ) ; begin
56827: LD_INT 0
56829: PPUSH
// uc_side := 0 ;
56830: LD_ADDR_OWVAR 20
56834: PUSH
56835: LD_INT 0
56837: ST_TO_ADDR
// uc_nation := 0 ;
56838: LD_ADDR_OWVAR 21
56842: PUSH
56843: LD_INT 0
56845: ST_TO_ADDR
// hc_class := class_frog ;
56846: LD_ADDR_OWVAR 28
56850: PUSH
56851: LD_INT 19
56853: ST_TO_ADDR
// hc_gallery :=  ;
56854: LD_ADDR_OWVAR 33
56858: PUSH
56859: LD_STRING 
56861: ST_TO_ADDR
// end ;
56862: LD_VAR 0 1
56866: RET
// export function PrepareFish ( ) ; begin
56867: LD_INT 0
56869: PPUSH
// uc_side := 0 ;
56870: LD_ADDR_OWVAR 20
56874: PUSH
56875: LD_INT 0
56877: ST_TO_ADDR
// uc_nation := 0 ;
56878: LD_ADDR_OWVAR 21
56882: PUSH
56883: LD_INT 0
56885: ST_TO_ADDR
// hc_class := class_fish ;
56886: LD_ADDR_OWVAR 28
56890: PUSH
56891: LD_INT 20
56893: ST_TO_ADDR
// hc_gallery :=  ;
56894: LD_ADDR_OWVAR 33
56898: PUSH
56899: LD_STRING 
56901: ST_TO_ADDR
// end ;
56902: LD_VAR 0 1
56906: RET
// export function PrepareBird ( ) ; begin
56907: LD_INT 0
56909: PPUSH
// uc_side := 0 ;
56910: LD_ADDR_OWVAR 20
56914: PUSH
56915: LD_INT 0
56917: ST_TO_ADDR
// uc_nation := 0 ;
56918: LD_ADDR_OWVAR 21
56922: PUSH
56923: LD_INT 0
56925: ST_TO_ADDR
// hc_class := class_phororhacos ;
56926: LD_ADDR_OWVAR 28
56930: PUSH
56931: LD_INT 18
56933: ST_TO_ADDR
// hc_gallery :=  ;
56934: LD_ADDR_OWVAR 33
56938: PUSH
56939: LD_STRING 
56941: ST_TO_ADDR
// end ;
56942: LD_VAR 0 1
56946: RET
// export function PrepareHorse ( ) ; begin
56947: LD_INT 0
56949: PPUSH
// uc_side := 0 ;
56950: LD_ADDR_OWVAR 20
56954: PUSH
56955: LD_INT 0
56957: ST_TO_ADDR
// uc_nation := 0 ;
56958: LD_ADDR_OWVAR 21
56962: PUSH
56963: LD_INT 0
56965: ST_TO_ADDR
// hc_class := class_horse ;
56966: LD_ADDR_OWVAR 28
56970: PUSH
56971: LD_INT 21
56973: ST_TO_ADDR
// hc_gallery :=  ;
56974: LD_ADDR_OWVAR 33
56978: PUSH
56979: LD_STRING 
56981: ST_TO_ADDR
// end ;
56982: LD_VAR 0 1
56986: RET
// export function PrepareMastodont ( ) ; begin
56987: LD_INT 0
56989: PPUSH
// uc_side := 0 ;
56990: LD_ADDR_OWVAR 20
56994: PUSH
56995: LD_INT 0
56997: ST_TO_ADDR
// uc_nation := 0 ;
56998: LD_ADDR_OWVAR 21
57002: PUSH
57003: LD_INT 0
57005: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57006: LD_ADDR_OWVAR 37
57010: PUSH
57011: LD_INT 31
57013: ST_TO_ADDR
// vc_control := control_rider ;
57014: LD_ADDR_OWVAR 38
57018: PUSH
57019: LD_INT 4
57021: ST_TO_ADDR
// end ;
57022: LD_VAR 0 1
57026: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57027: LD_INT 0
57029: PPUSH
57030: PPUSH
57031: PPUSH
// uc_side = 0 ;
57032: LD_ADDR_OWVAR 20
57036: PUSH
57037: LD_INT 0
57039: ST_TO_ADDR
// uc_nation = 0 ;
57040: LD_ADDR_OWVAR 21
57044: PUSH
57045: LD_INT 0
57047: ST_TO_ADDR
// InitHc_All ( ) ;
57048: CALL_OW 584
// InitVc ;
57052: CALL_OW 20
// if mastodonts then
57056: LD_VAR 0 6
57060: IFFALSE 57127
// for i = 1 to mastodonts do
57062: LD_ADDR_VAR 0 11
57066: PUSH
57067: DOUBLE
57068: LD_INT 1
57070: DEC
57071: ST_TO_ADDR
57072: LD_VAR 0 6
57076: PUSH
57077: FOR_TO
57078: IFFALSE 57125
// begin vc_chassis := 31 ;
57080: LD_ADDR_OWVAR 37
57084: PUSH
57085: LD_INT 31
57087: ST_TO_ADDR
// vc_control := control_rider ;
57088: LD_ADDR_OWVAR 38
57092: PUSH
57093: LD_INT 4
57095: ST_TO_ADDR
// animal := CreateVehicle ;
57096: LD_ADDR_VAR 0 12
57100: PUSH
57101: CALL_OW 45
57105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57106: LD_VAR 0 12
57110: PPUSH
57111: LD_VAR 0 8
57115: PPUSH
57116: LD_INT 0
57118: PPUSH
57119: CALL 59255 0 3
// end ;
57123: GO 57077
57125: POP
57126: POP
// if horses then
57127: LD_VAR 0 5
57131: IFFALSE 57198
// for i = 1 to horses do
57133: LD_ADDR_VAR 0 11
57137: PUSH
57138: DOUBLE
57139: LD_INT 1
57141: DEC
57142: ST_TO_ADDR
57143: LD_VAR 0 5
57147: PUSH
57148: FOR_TO
57149: IFFALSE 57196
// begin hc_class := 21 ;
57151: LD_ADDR_OWVAR 28
57155: PUSH
57156: LD_INT 21
57158: ST_TO_ADDR
// hc_gallery :=  ;
57159: LD_ADDR_OWVAR 33
57163: PUSH
57164: LD_STRING 
57166: ST_TO_ADDR
// animal := CreateHuman ;
57167: LD_ADDR_VAR 0 12
57171: PUSH
57172: CALL_OW 44
57176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57177: LD_VAR 0 12
57181: PPUSH
57182: LD_VAR 0 8
57186: PPUSH
57187: LD_INT 0
57189: PPUSH
57190: CALL 59255 0 3
// end ;
57194: GO 57148
57196: POP
57197: POP
// if birds then
57198: LD_VAR 0 1
57202: IFFALSE 57269
// for i = 1 to birds do
57204: LD_ADDR_VAR 0 11
57208: PUSH
57209: DOUBLE
57210: LD_INT 1
57212: DEC
57213: ST_TO_ADDR
57214: LD_VAR 0 1
57218: PUSH
57219: FOR_TO
57220: IFFALSE 57267
// begin hc_class := 18 ;
57222: LD_ADDR_OWVAR 28
57226: PUSH
57227: LD_INT 18
57229: ST_TO_ADDR
// hc_gallery =  ;
57230: LD_ADDR_OWVAR 33
57234: PUSH
57235: LD_STRING 
57237: ST_TO_ADDR
// animal := CreateHuman ;
57238: LD_ADDR_VAR 0 12
57242: PUSH
57243: CALL_OW 44
57247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57248: LD_VAR 0 12
57252: PPUSH
57253: LD_VAR 0 8
57257: PPUSH
57258: LD_INT 0
57260: PPUSH
57261: CALL 59255 0 3
// end ;
57265: GO 57219
57267: POP
57268: POP
// if tigers then
57269: LD_VAR 0 2
57273: IFFALSE 57357
// for i = 1 to tigers do
57275: LD_ADDR_VAR 0 11
57279: PUSH
57280: DOUBLE
57281: LD_INT 1
57283: DEC
57284: ST_TO_ADDR
57285: LD_VAR 0 2
57289: PUSH
57290: FOR_TO
57291: IFFALSE 57355
// begin hc_class = class_tiger ;
57293: LD_ADDR_OWVAR 28
57297: PUSH
57298: LD_INT 14
57300: ST_TO_ADDR
// hc_gallery =  ;
57301: LD_ADDR_OWVAR 33
57305: PUSH
57306: LD_STRING 
57308: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57309: LD_ADDR_OWVAR 35
57313: PUSH
57314: LD_INT 7
57316: NEG
57317: PPUSH
57318: LD_INT 7
57320: PPUSH
57321: CALL_OW 12
57325: ST_TO_ADDR
// animal := CreateHuman ;
57326: LD_ADDR_VAR 0 12
57330: PUSH
57331: CALL_OW 44
57335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57336: LD_VAR 0 12
57340: PPUSH
57341: LD_VAR 0 8
57345: PPUSH
57346: LD_INT 0
57348: PPUSH
57349: CALL 59255 0 3
// end ;
57353: GO 57290
57355: POP
57356: POP
// if apemans then
57357: LD_VAR 0 3
57361: IFFALSE 57484
// for i = 1 to apemans do
57363: LD_ADDR_VAR 0 11
57367: PUSH
57368: DOUBLE
57369: LD_INT 1
57371: DEC
57372: ST_TO_ADDR
57373: LD_VAR 0 3
57377: PUSH
57378: FOR_TO
57379: IFFALSE 57482
// begin hc_class = class_apeman ;
57381: LD_ADDR_OWVAR 28
57385: PUSH
57386: LD_INT 12
57388: ST_TO_ADDR
// hc_gallery =  ;
57389: LD_ADDR_OWVAR 33
57393: PUSH
57394: LD_STRING 
57396: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57397: LD_ADDR_OWVAR 35
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PPUSH
57406: LD_INT 2
57408: PPUSH
57409: CALL_OW 12
57413: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57414: LD_ADDR_OWVAR 31
57418: PUSH
57419: LD_INT 1
57421: PPUSH
57422: LD_INT 3
57424: PPUSH
57425: CALL_OW 12
57429: PUSH
57430: LD_INT 1
57432: PPUSH
57433: LD_INT 3
57435: PPUSH
57436: CALL_OW 12
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// animal := CreateHuman ;
57453: LD_ADDR_VAR 0 12
57457: PUSH
57458: CALL_OW 44
57462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57463: LD_VAR 0 12
57467: PPUSH
57468: LD_VAR 0 8
57472: PPUSH
57473: LD_INT 0
57475: PPUSH
57476: CALL 59255 0 3
// end ;
57480: GO 57378
57482: POP
57483: POP
// if enchidnas then
57484: LD_VAR 0 4
57488: IFFALSE 57555
// for i = 1 to enchidnas do
57490: LD_ADDR_VAR 0 11
57494: PUSH
57495: DOUBLE
57496: LD_INT 1
57498: DEC
57499: ST_TO_ADDR
57500: LD_VAR 0 4
57504: PUSH
57505: FOR_TO
57506: IFFALSE 57553
// begin hc_class = 13 ;
57508: LD_ADDR_OWVAR 28
57512: PUSH
57513: LD_INT 13
57515: ST_TO_ADDR
// hc_gallery =  ;
57516: LD_ADDR_OWVAR 33
57520: PUSH
57521: LD_STRING 
57523: ST_TO_ADDR
// animal := CreateHuman ;
57524: LD_ADDR_VAR 0 12
57528: PUSH
57529: CALL_OW 44
57533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57534: LD_VAR 0 12
57538: PPUSH
57539: LD_VAR 0 8
57543: PPUSH
57544: LD_INT 0
57546: PPUSH
57547: CALL 59255 0 3
// end ;
57551: GO 57505
57553: POP
57554: POP
// if fishes then
57555: LD_VAR 0 7
57559: IFFALSE 57626
// for i = 1 to fishes do
57561: LD_ADDR_VAR 0 11
57565: PUSH
57566: DOUBLE
57567: LD_INT 1
57569: DEC
57570: ST_TO_ADDR
57571: LD_VAR 0 7
57575: PUSH
57576: FOR_TO
57577: IFFALSE 57624
// begin hc_class = 20 ;
57579: LD_ADDR_OWVAR 28
57583: PUSH
57584: LD_INT 20
57586: ST_TO_ADDR
// hc_gallery =  ;
57587: LD_ADDR_OWVAR 33
57591: PUSH
57592: LD_STRING 
57594: ST_TO_ADDR
// animal := CreateHuman ;
57595: LD_ADDR_VAR 0 12
57599: PUSH
57600: CALL_OW 44
57604: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57605: LD_VAR 0 12
57609: PPUSH
57610: LD_VAR 0 9
57614: PPUSH
57615: LD_INT 0
57617: PPUSH
57618: CALL 59255 0 3
// end ;
57622: GO 57576
57624: POP
57625: POP
// end ;
57626: LD_VAR 0 10
57630: RET
// export function WantHeal ( sci , unit ) ; begin
57631: LD_INT 0
57633: PPUSH
// if GetTaskList ( sci ) > 0 then
57634: LD_VAR 0 1
57638: PPUSH
57639: CALL_OW 437
57643: PUSH
57644: LD_INT 0
57646: GREATER
57647: IFFALSE 57717
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57649: LD_VAR 0 1
57653: PPUSH
57654: CALL_OW 437
57658: PUSH
57659: LD_INT 1
57661: ARRAY
57662: PUSH
57663: LD_INT 1
57665: ARRAY
57666: PUSH
57667: LD_STRING l
57669: EQUAL
57670: PUSH
57671: LD_VAR 0 1
57675: PPUSH
57676: CALL_OW 437
57680: PUSH
57681: LD_INT 1
57683: ARRAY
57684: PUSH
57685: LD_INT 4
57687: ARRAY
57688: PUSH
57689: LD_VAR 0 2
57693: EQUAL
57694: AND
57695: IFFALSE 57707
// result := true else
57697: LD_ADDR_VAR 0 3
57701: PUSH
57702: LD_INT 1
57704: ST_TO_ADDR
57705: GO 57715
// result := false ;
57707: LD_ADDR_VAR 0 3
57711: PUSH
57712: LD_INT 0
57714: ST_TO_ADDR
// end else
57715: GO 57725
// result := false ;
57717: LD_ADDR_VAR 0 3
57721: PUSH
57722: LD_INT 0
57724: ST_TO_ADDR
// end ;
57725: LD_VAR 0 3
57729: RET
// export function HealTarget ( sci ) ; begin
57730: LD_INT 0
57732: PPUSH
// if not sci then
57733: LD_VAR 0 1
57737: NOT
57738: IFFALSE 57742
// exit ;
57740: GO 57807
// result := 0 ;
57742: LD_ADDR_VAR 0 2
57746: PUSH
57747: LD_INT 0
57749: ST_TO_ADDR
// if GetTaskList ( sci ) then
57750: LD_VAR 0 1
57754: PPUSH
57755: CALL_OW 437
57759: IFFALSE 57807
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57761: LD_VAR 0 1
57765: PPUSH
57766: CALL_OW 437
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PUSH
57775: LD_INT 1
57777: ARRAY
57778: PUSH
57779: LD_STRING l
57781: EQUAL
57782: IFFALSE 57807
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57784: LD_ADDR_VAR 0 2
57788: PUSH
57789: LD_VAR 0 1
57793: PPUSH
57794: CALL_OW 437
57798: PUSH
57799: LD_INT 1
57801: ARRAY
57802: PUSH
57803: LD_INT 4
57805: ARRAY
57806: ST_TO_ADDR
// end ;
57807: LD_VAR 0 2
57811: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57812: LD_INT 0
57814: PPUSH
57815: PPUSH
57816: PPUSH
57817: PPUSH
// if not base_units then
57818: LD_VAR 0 1
57822: NOT
57823: IFFALSE 57827
// exit ;
57825: GO 57914
// result := false ;
57827: LD_ADDR_VAR 0 2
57831: PUSH
57832: LD_INT 0
57834: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57835: LD_ADDR_VAR 0 5
57839: PUSH
57840: LD_VAR 0 1
57844: PPUSH
57845: LD_INT 21
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PPUSH
57855: CALL_OW 72
57859: ST_TO_ADDR
// if not tmp then
57860: LD_VAR 0 5
57864: NOT
57865: IFFALSE 57869
// exit ;
57867: GO 57914
// for i in tmp do
57869: LD_ADDR_VAR 0 3
57873: PUSH
57874: LD_VAR 0 5
57878: PUSH
57879: FOR_IN
57880: IFFALSE 57912
// begin result := EnemyInRange ( i , 22 ) ;
57882: LD_ADDR_VAR 0 2
57886: PUSH
57887: LD_VAR 0 3
57891: PPUSH
57892: LD_INT 22
57894: PPUSH
57895: CALL 55501 0 2
57899: ST_TO_ADDR
// if result then
57900: LD_VAR 0 2
57904: IFFALSE 57910
// exit ;
57906: POP
57907: POP
57908: GO 57914
// end ;
57910: GO 57879
57912: POP
57913: POP
// end ;
57914: LD_VAR 0 2
57918: RET
// export function FilterByTag ( units , tag ) ; begin
57919: LD_INT 0
57921: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57922: LD_ADDR_VAR 0 3
57926: PUSH
57927: LD_VAR 0 1
57931: PPUSH
57932: LD_INT 120
57934: PUSH
57935: LD_VAR 0 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PPUSH
57944: CALL_OW 72
57948: ST_TO_ADDR
// end ;
57949: LD_VAR 0 3
57953: RET
// export function IsDriver ( un ) ; begin
57954: LD_INT 0
57956: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57957: LD_ADDR_VAR 0 2
57961: PUSH
57962: LD_VAR 0 1
57966: PUSH
57967: LD_INT 55
57969: PUSH
57970: EMPTY
57971: LIST
57972: PPUSH
57973: CALL_OW 69
57977: IN
57978: ST_TO_ADDR
// end ;
57979: LD_VAR 0 2
57983: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
// list := [ ] ;
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: EMPTY
57994: ST_TO_ADDR
// case d of 0 :
57995: LD_VAR 0 3
57999: PUSH
58000: LD_INT 0
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58008
58006: GO 58141
58008: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58009: LD_ADDR_VAR 0 5
58013: PUSH
58014: LD_VAR 0 1
58018: PUSH
58019: LD_INT 4
58021: MINUS
58022: PUSH
58023: LD_VAR 0 2
58027: PUSH
58028: LD_INT 4
58030: MINUS
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: PUSH
58040: LD_VAR 0 1
58044: PUSH
58045: LD_INT 3
58047: MINUS
58048: PUSH
58049: LD_VAR 0 2
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: PUSH
58062: LD_VAR 0 1
58066: PUSH
58067: LD_INT 4
58069: PLUS
58070: PUSH
58071: LD_VAR 0 2
58075: PUSH
58076: LD_INT 4
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: PUSH
58084: LD_VAR 0 1
58088: PUSH
58089: LD_INT 3
58091: PLUS
58092: PUSH
58093: LD_VAR 0 2
58097: PUSH
58098: LD_INT 3
58100: PLUS
58101: PUSH
58102: LD_INT 5
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: PUSH
58110: LD_VAR 0 1
58114: PUSH
58115: LD_VAR 0 2
58119: PUSH
58120: LD_INT 4
58122: PLUS
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: ST_TO_ADDR
// end ; 1 :
58139: GO 58839
58141: LD_INT 1
58143: DOUBLE
58144: EQUAL
58145: IFTRUE 58149
58147: GO 58282
58149: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58150: LD_ADDR_VAR 0 5
58154: PUSH
58155: LD_VAR 0 1
58159: PUSH
58160: LD_VAR 0 2
58164: PUSH
58165: LD_INT 4
58167: MINUS
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: PUSH
58177: LD_VAR 0 1
58181: PUSH
58182: LD_INT 3
58184: MINUS
58185: PUSH
58186: LD_VAR 0 2
58190: PUSH
58191: LD_INT 3
58193: MINUS
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: PUSH
58203: LD_VAR 0 1
58207: PUSH
58208: LD_INT 4
58210: MINUS
58211: PUSH
58212: LD_VAR 0 2
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: PUSH
58225: LD_VAR 0 1
58229: PUSH
58230: LD_VAR 0 2
58234: PUSH
58235: LD_INT 3
58237: PLUS
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: PUSH
58247: LD_VAR 0 1
58251: PUSH
58252: LD_INT 4
58254: PLUS
58255: PUSH
58256: LD_VAR 0 2
58260: PUSH
58261: LD_INT 4
58263: PLUS
58264: PUSH
58265: LD_INT 5
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// end ; 2 :
58280: GO 58839
58282: LD_INT 2
58284: DOUBLE
58285: EQUAL
58286: IFTRUE 58290
58288: GO 58419
58290: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58291: LD_ADDR_VAR 0 5
58295: PUSH
58296: LD_VAR 0 1
58300: PUSH
58301: LD_VAR 0 2
58305: PUSH
58306: LD_INT 3
58308: MINUS
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: PUSH
58318: LD_VAR 0 1
58322: PUSH
58323: LD_INT 4
58325: PLUS
58326: PUSH
58327: LD_VAR 0 2
58331: PUSH
58332: LD_INT 4
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: PUSH
58340: LD_VAR 0 1
58344: PUSH
58345: LD_VAR 0 2
58349: PUSH
58350: LD_INT 4
58352: PLUS
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: PUSH
58362: LD_VAR 0 1
58366: PUSH
58367: LD_INT 3
58369: MINUS
58370: PUSH
58371: LD_VAR 0 2
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: PUSH
58384: LD_VAR 0 1
58388: PUSH
58389: LD_INT 4
58391: MINUS
58392: PUSH
58393: LD_VAR 0 2
58397: PUSH
58398: LD_INT 4
58400: MINUS
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// end ; 3 :
58417: GO 58839
58419: LD_INT 3
58421: DOUBLE
58422: EQUAL
58423: IFTRUE 58427
58425: GO 58560
58427: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58428: LD_ADDR_VAR 0 5
58432: PUSH
58433: LD_VAR 0 1
58437: PUSH
58438: LD_INT 3
58440: PLUS
58441: PUSH
58442: LD_VAR 0 2
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: LIST
58454: PUSH
58455: LD_VAR 0 1
58459: PUSH
58460: LD_INT 4
58462: PLUS
58463: PUSH
58464: LD_VAR 0 2
58468: PUSH
58469: LD_INT 4
58471: PLUS
58472: PUSH
58473: LD_INT 5
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: LD_VAR 0 1
58485: PUSH
58486: LD_INT 4
58488: MINUS
58489: PUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: LIST
58502: PUSH
58503: LD_VAR 0 1
58507: PUSH
58508: LD_VAR 0 2
58512: PUSH
58513: LD_INT 4
58515: MINUS
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: PUSH
58525: LD_VAR 0 1
58529: PUSH
58530: LD_INT 3
58532: MINUS
58533: PUSH
58534: LD_VAR 0 2
58538: PUSH
58539: LD_INT 3
58541: MINUS
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// end ; 4 :
58558: GO 58839
58560: LD_INT 4
58562: DOUBLE
58563: EQUAL
58564: IFTRUE 58568
58566: GO 58701
58568: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58569: LD_ADDR_VAR 0 5
58573: PUSH
58574: LD_VAR 0 1
58578: PUSH
58579: LD_VAR 0 2
58583: PUSH
58584: LD_INT 4
58586: PLUS
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: PUSH
58596: LD_VAR 0 1
58600: PUSH
58601: LD_INT 3
58603: PLUS
58604: PUSH
58605: LD_VAR 0 2
58609: PUSH
58610: LD_INT 3
58612: PLUS
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: PUSH
58622: LD_VAR 0 1
58626: PUSH
58627: LD_INT 4
58629: PLUS
58630: PUSH
58631: LD_VAR 0 2
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_VAR 0 2
58653: PUSH
58654: LD_INT 3
58656: MINUS
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 4
58673: MINUS
58674: PUSH
58675: LD_VAR 0 2
58679: PUSH
58680: LD_INT 4
58682: MINUS
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: ST_TO_ADDR
// end ; 5 :
58699: GO 58839
58701: LD_INT 5
58703: DOUBLE
58704: EQUAL
58705: IFTRUE 58709
58707: GO 58838
58709: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58710: LD_ADDR_VAR 0 5
58714: PUSH
58715: LD_VAR 0 1
58719: PUSH
58720: LD_INT 4
58722: MINUS
58723: PUSH
58724: LD_VAR 0 2
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: PUSH
58737: LD_VAR 0 1
58741: PUSH
58742: LD_VAR 0 2
58746: PUSH
58747: LD_INT 4
58749: MINUS
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: PUSH
58759: LD_VAR 0 1
58763: PUSH
58764: LD_INT 4
58766: PLUS
58767: PUSH
58768: LD_VAR 0 2
58772: PUSH
58773: LD_INT 4
58775: PLUS
58776: PUSH
58777: LD_INT 5
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: PUSH
58785: LD_VAR 0 1
58789: PUSH
58790: LD_INT 3
58792: PLUS
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 3
58819: PLUS
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: ST_TO_ADDR
// end ; end ;
58836: GO 58839
58838: POP
// result := list ;
58839: LD_ADDR_VAR 0 4
58843: PUSH
58844: LD_VAR 0 5
58848: ST_TO_ADDR
// end ;
58849: LD_VAR 0 4
58853: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58854: LD_INT 0
58856: PPUSH
58857: PPUSH
58858: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58859: LD_VAR 0 1
58863: NOT
58864: PUSH
58865: LD_VAR 0 2
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: IN
58888: NOT
58889: OR
58890: IFFALSE 58894
// exit ;
58892: GO 58977
// tmp := [ ] ;
58894: LD_ADDR_VAR 0 5
58898: PUSH
58899: EMPTY
58900: ST_TO_ADDR
// for i in units do
58901: LD_ADDR_VAR 0 4
58905: PUSH
58906: LD_VAR 0 1
58910: PUSH
58911: FOR_IN
58912: IFFALSE 58946
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58914: LD_ADDR_VAR 0 5
58918: PUSH
58919: LD_VAR 0 5
58923: PPUSH
58924: LD_VAR 0 4
58928: PPUSH
58929: LD_VAR 0 2
58933: PPUSH
58934: CALL_OW 259
58938: PPUSH
58939: CALL 60350 0 2
58943: ST_TO_ADDR
58944: GO 58911
58946: POP
58947: POP
// if not tmp then
58948: LD_VAR 0 5
58952: NOT
58953: IFFALSE 58957
// exit ;
58955: GO 58977
// result := SortListByListDesc ( units , tmp ) ;
58957: LD_ADDR_VAR 0 3
58961: PUSH
58962: LD_VAR 0 1
58966: PPUSH
58967: LD_VAR 0 5
58971: PPUSH
58972: CALL_OW 77
58976: ST_TO_ADDR
// end ;
58977: LD_VAR 0 3
58981: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58982: LD_INT 0
58984: PPUSH
58985: PPUSH
58986: PPUSH
// result := false ;
58987: LD_ADDR_VAR 0 3
58991: PUSH
58992: LD_INT 0
58994: ST_TO_ADDR
// if not building then
58995: LD_VAR 0 2
58999: NOT
59000: IFFALSE 59004
// exit ;
59002: GO 59142
// x := GetX ( building ) ;
59004: LD_ADDR_VAR 0 4
59008: PUSH
59009: LD_VAR 0 2
59013: PPUSH
59014: CALL_OW 250
59018: ST_TO_ADDR
// y := GetY ( building ) ;
59019: LD_ADDR_VAR 0 5
59023: PUSH
59024: LD_VAR 0 2
59028: PPUSH
59029: CALL_OW 251
59033: ST_TO_ADDR
// if not x or not y then
59034: LD_VAR 0 4
59038: NOT
59039: PUSH
59040: LD_VAR 0 5
59044: NOT
59045: OR
59046: IFFALSE 59050
// exit ;
59048: GO 59142
// if GetTaskList ( unit ) then
59050: LD_VAR 0 1
59054: PPUSH
59055: CALL_OW 437
59059: IFFALSE 59142
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59061: LD_STRING e
59063: PUSH
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 437
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PUSH
59078: LD_INT 1
59080: ARRAY
59081: EQUAL
59082: PUSH
59083: LD_VAR 0 4
59087: PUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: CALL_OW 437
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PUSH
59102: LD_INT 2
59104: ARRAY
59105: EQUAL
59106: AND
59107: PUSH
59108: LD_VAR 0 5
59112: PUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: CALL_OW 437
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PUSH
59127: LD_INT 3
59129: ARRAY
59130: EQUAL
59131: AND
59132: IFFALSE 59142
// result := true end ;
59134: LD_ADDR_VAR 0 3
59138: PUSH
59139: LD_INT 1
59141: ST_TO_ADDR
// end ;
59142: LD_VAR 0 3
59146: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59147: LD_INT 0
59149: PPUSH
// result := false ;
59150: LD_ADDR_VAR 0 4
59154: PUSH
59155: LD_INT 0
59157: ST_TO_ADDR
// if GetTaskList ( unit ) then
59158: LD_VAR 0 1
59162: PPUSH
59163: CALL_OW 437
59167: IFFALSE 59250
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59169: LD_STRING M
59171: PUSH
59172: LD_VAR 0 1
59176: PPUSH
59177: CALL_OW 437
59181: PUSH
59182: LD_INT 1
59184: ARRAY
59185: PUSH
59186: LD_INT 1
59188: ARRAY
59189: EQUAL
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_VAR 0 1
59200: PPUSH
59201: CALL_OW 437
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PUSH
59210: LD_INT 2
59212: ARRAY
59213: EQUAL
59214: AND
59215: PUSH
59216: LD_VAR 0 3
59220: PUSH
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL_OW 437
59230: PUSH
59231: LD_INT 1
59233: ARRAY
59234: PUSH
59235: LD_INT 3
59237: ARRAY
59238: EQUAL
59239: AND
59240: IFFALSE 59250
// result := true ;
59242: LD_ADDR_VAR 0 4
59246: PUSH
59247: LD_INT 1
59249: ST_TO_ADDR
// end ; end ;
59250: LD_VAR 0 4
59254: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59255: LD_INT 0
59257: PPUSH
59258: PPUSH
59259: PPUSH
59260: PPUSH
// if not unit or not area then
59261: LD_VAR 0 1
59265: NOT
59266: PUSH
59267: LD_VAR 0 2
59271: NOT
59272: OR
59273: IFFALSE 59277
// exit ;
59275: GO 59453
// tmp := AreaToList ( area , i ) ;
59277: LD_ADDR_VAR 0 6
59281: PUSH
59282: LD_VAR 0 2
59286: PPUSH
59287: LD_VAR 0 5
59291: PPUSH
59292: CALL_OW 517
59296: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59297: LD_ADDR_VAR 0 5
59301: PUSH
59302: DOUBLE
59303: LD_INT 1
59305: DEC
59306: ST_TO_ADDR
59307: LD_VAR 0 6
59311: PUSH
59312: LD_INT 1
59314: ARRAY
59315: PUSH
59316: FOR_TO
59317: IFFALSE 59451
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59319: LD_ADDR_VAR 0 7
59323: PUSH
59324: LD_VAR 0 6
59328: PUSH
59329: LD_INT 1
59331: ARRAY
59332: PUSH
59333: LD_VAR 0 5
59337: ARRAY
59338: PUSH
59339: LD_VAR 0 6
59343: PUSH
59344: LD_INT 2
59346: ARRAY
59347: PUSH
59348: LD_VAR 0 5
59352: ARRAY
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59358: LD_INT 92
59360: PUSH
59361: LD_VAR 0 7
59365: PUSH
59366: LD_INT 1
59368: ARRAY
59369: PUSH
59370: LD_VAR 0 7
59374: PUSH
59375: LD_INT 2
59377: ARRAY
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: PPUSH
59388: CALL_OW 69
59392: PUSH
59393: LD_INT 0
59395: EQUAL
59396: IFFALSE 59449
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59398: LD_VAR 0 1
59402: PPUSH
59403: LD_VAR 0 7
59407: PUSH
59408: LD_INT 1
59410: ARRAY
59411: PPUSH
59412: LD_VAR 0 7
59416: PUSH
59417: LD_INT 2
59419: ARRAY
59420: PPUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: CALL_OW 48
// result := IsPlaced ( unit ) ;
59430: LD_ADDR_VAR 0 4
59434: PUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 305
59444: ST_TO_ADDR
// exit ;
59445: POP
59446: POP
59447: GO 59453
// end ; end ;
59449: GO 59316
59451: POP
59452: POP
// end ;
59453: LD_VAR 0 4
59457: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59458: LD_INT 0
59460: PPUSH
59461: PPUSH
59462: PPUSH
// if not side or side > 8 then
59463: LD_VAR 0 1
59467: NOT
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_INT 8
59476: GREATER
59477: OR
59478: IFFALSE 59482
// exit ;
59480: GO 59669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59482: LD_ADDR_VAR 0 4
59486: PUSH
59487: LD_INT 22
59489: PUSH
59490: LD_VAR 0 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 21
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PPUSH
59513: CALL_OW 69
59517: ST_TO_ADDR
// if not tmp then
59518: LD_VAR 0 4
59522: NOT
59523: IFFALSE 59527
// exit ;
59525: GO 59669
// enable_addtolog := true ;
59527: LD_ADDR_OWVAR 81
59531: PUSH
59532: LD_INT 1
59534: ST_TO_ADDR
// AddToLog ( [ ) ;
59535: LD_STRING [
59537: PPUSH
59538: CALL_OW 561
// for i in tmp do
59542: LD_ADDR_VAR 0 3
59546: PUSH
59547: LD_VAR 0 4
59551: PUSH
59552: FOR_IN
59553: IFFALSE 59660
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59555: LD_STRING [
59557: PUSH
59558: LD_VAR 0 3
59562: PPUSH
59563: CALL_OW 266
59567: STR
59568: PUSH
59569: LD_STRING , 
59571: STR
59572: PUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: CALL_OW 250
59582: STR
59583: PUSH
59584: LD_STRING , 
59586: STR
59587: PUSH
59588: LD_VAR 0 3
59592: PPUSH
59593: CALL_OW 251
59597: STR
59598: PUSH
59599: LD_STRING , 
59601: STR
59602: PUSH
59603: LD_VAR 0 3
59607: PPUSH
59608: CALL_OW 254
59612: STR
59613: PUSH
59614: LD_STRING , 
59616: STR
59617: PUSH
59618: LD_VAR 0 3
59622: PPUSH
59623: LD_INT 1
59625: PPUSH
59626: CALL_OW 268
59630: STR
59631: PUSH
59632: LD_STRING , 
59634: STR
59635: PUSH
59636: LD_VAR 0 3
59640: PPUSH
59641: LD_INT 2
59643: PPUSH
59644: CALL_OW 268
59648: STR
59649: PUSH
59650: LD_STRING ],
59652: STR
59653: PPUSH
59654: CALL_OW 561
// end ;
59658: GO 59552
59660: POP
59661: POP
// AddToLog ( ]; ) ;
59662: LD_STRING ];
59664: PPUSH
59665: CALL_OW 561
// end ;
59669: LD_VAR 0 2
59673: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59674: LD_INT 0
59676: PPUSH
59677: PPUSH
59678: PPUSH
59679: PPUSH
59680: PPUSH
// if not area or not rate or not max then
59681: LD_VAR 0 1
59685: NOT
59686: PUSH
59687: LD_VAR 0 2
59691: NOT
59692: OR
59693: PUSH
59694: LD_VAR 0 4
59698: NOT
59699: OR
59700: IFFALSE 59704
// exit ;
59702: GO 59893
// while 1 do
59704: LD_INT 1
59706: IFFALSE 59893
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59708: LD_ADDR_VAR 0 9
59712: PUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_INT 1
59720: PPUSH
59721: CALL_OW 287
59725: PUSH
59726: LD_INT 10
59728: MUL
59729: ST_TO_ADDR
// r := rate / 10 ;
59730: LD_ADDR_VAR 0 7
59734: PUSH
59735: LD_VAR 0 2
59739: PUSH
59740: LD_INT 10
59742: DIVREAL
59743: ST_TO_ADDR
// time := 1 1$00 ;
59744: LD_ADDR_VAR 0 8
59748: PUSH
59749: LD_INT 2100
59751: ST_TO_ADDR
// if amount < min then
59752: LD_VAR 0 9
59756: PUSH
59757: LD_VAR 0 3
59761: LESS
59762: IFFALSE 59780
// r := r * 2 else
59764: LD_ADDR_VAR 0 7
59768: PUSH
59769: LD_VAR 0 7
59773: PUSH
59774: LD_INT 2
59776: MUL
59777: ST_TO_ADDR
59778: GO 59806
// if amount > max then
59780: LD_VAR 0 9
59784: PUSH
59785: LD_VAR 0 4
59789: GREATER
59790: IFFALSE 59806
// r := r / 2 ;
59792: LD_ADDR_VAR 0 7
59796: PUSH
59797: LD_VAR 0 7
59801: PUSH
59802: LD_INT 2
59804: DIVREAL
59805: ST_TO_ADDR
// time := time / r ;
59806: LD_ADDR_VAR 0 8
59810: PUSH
59811: LD_VAR 0 8
59815: PUSH
59816: LD_VAR 0 7
59820: DIVREAL
59821: ST_TO_ADDR
// if time < 0 then
59822: LD_VAR 0 8
59826: PUSH
59827: LD_INT 0
59829: LESS
59830: IFFALSE 59847
// time := time * - 1 ;
59832: LD_ADDR_VAR 0 8
59836: PUSH
59837: LD_VAR 0 8
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: MUL
59846: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59847: LD_VAR 0 8
59851: PUSH
59852: LD_INT 35
59854: PPUSH
59855: LD_INT 875
59857: PPUSH
59858: CALL_OW 12
59862: PLUS
59863: PPUSH
59864: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59868: LD_INT 1
59870: PPUSH
59871: LD_INT 5
59873: PPUSH
59874: CALL_OW 12
59878: PPUSH
59879: LD_VAR 0 1
59883: PPUSH
59884: LD_INT 1
59886: PPUSH
59887: CALL_OW 55
// end ;
59891: GO 59704
// end ;
59893: LD_VAR 0 5
59897: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59898: LD_INT 0
59900: PPUSH
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
// if not turrets or not factories then
59908: LD_VAR 0 1
59912: NOT
59913: PUSH
59914: LD_VAR 0 2
59918: NOT
59919: OR
59920: IFFALSE 59924
// exit ;
59922: GO 60231
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59924: LD_ADDR_VAR 0 10
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: LD_INT 6
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: LD_INT 4
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 5
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 24
59966: PUSH
59967: LD_INT 25
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 23
59976: PUSH
59977: LD_INT 27
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 42
59990: PUSH
59991: LD_INT 43
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 44
60000: PUSH
60001: LD_INT 46
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 45
60010: PUSH
60011: LD_INT 47
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: ST_TO_ADDR
// result := [ ] ;
60028: LD_ADDR_VAR 0 3
60032: PUSH
60033: EMPTY
60034: ST_TO_ADDR
// for i in turrets do
60035: LD_ADDR_VAR 0 4
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: FOR_IN
60046: IFFALSE 60229
// begin nat := GetNation ( i ) ;
60048: LD_ADDR_VAR 0 7
60052: PUSH
60053: LD_VAR 0 4
60057: PPUSH
60058: CALL_OW 248
60062: ST_TO_ADDR
// weapon := 0 ;
60063: LD_ADDR_VAR 0 8
60067: PUSH
60068: LD_INT 0
60070: ST_TO_ADDR
// if not nat then
60071: LD_VAR 0 7
60075: NOT
60076: IFFALSE 60080
// continue ;
60078: GO 60045
// for j in list [ nat ] do
60080: LD_ADDR_VAR 0 5
60084: PUSH
60085: LD_VAR 0 10
60089: PUSH
60090: LD_VAR 0 7
60094: ARRAY
60095: PUSH
60096: FOR_IN
60097: IFFALSE 60138
// if GetBWeapon ( i ) = j [ 1 ] then
60099: LD_VAR 0 4
60103: PPUSH
60104: CALL_OW 269
60108: PUSH
60109: LD_VAR 0 5
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: EQUAL
60118: IFFALSE 60136
// begin weapon := j [ 2 ] ;
60120: LD_ADDR_VAR 0 8
60124: PUSH
60125: LD_VAR 0 5
60129: PUSH
60130: LD_INT 2
60132: ARRAY
60133: ST_TO_ADDR
// break ;
60134: GO 60138
// end ;
60136: GO 60096
60138: POP
60139: POP
// if not weapon then
60140: LD_VAR 0 8
60144: NOT
60145: IFFALSE 60149
// continue ;
60147: GO 60045
// for k in factories do
60149: LD_ADDR_VAR 0 6
60153: PUSH
60154: LD_VAR 0 2
60158: PUSH
60159: FOR_IN
60160: IFFALSE 60225
// begin weapons := AvailableWeaponList ( k ) ;
60162: LD_ADDR_VAR 0 9
60166: PUSH
60167: LD_VAR 0 6
60171: PPUSH
60172: CALL_OW 478
60176: ST_TO_ADDR
// if not weapons then
60177: LD_VAR 0 9
60181: NOT
60182: IFFALSE 60186
// continue ;
60184: GO 60159
// if weapon in weapons then
60186: LD_VAR 0 8
60190: PUSH
60191: LD_VAR 0 9
60195: IN
60196: IFFALSE 60223
// begin result := [ i , weapon ] ;
60198: LD_ADDR_VAR 0 3
60202: PUSH
60203: LD_VAR 0 4
60207: PUSH
60208: LD_VAR 0 8
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: ST_TO_ADDR
// exit ;
60217: POP
60218: POP
60219: POP
60220: POP
60221: GO 60231
// end ; end ;
60223: GO 60159
60225: POP
60226: POP
// end ;
60227: GO 60045
60229: POP
60230: POP
// end ;
60231: LD_VAR 0 3
60235: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60236: LD_INT 0
60238: PPUSH
// if not side or side > 8 then
60239: LD_VAR 0 3
60243: NOT
60244: PUSH
60245: LD_VAR 0 3
60249: PUSH
60250: LD_INT 8
60252: GREATER
60253: OR
60254: IFFALSE 60258
// exit ;
60256: GO 60317
// if not range then
60258: LD_VAR 0 4
60262: NOT
60263: IFFALSE 60274
// range := - 12 ;
60265: LD_ADDR_VAR 0 4
60269: PUSH
60270: LD_INT 12
60272: NEG
60273: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60274: LD_VAR 0 1
60278: PPUSH
60279: LD_VAR 0 2
60283: PPUSH
60284: LD_VAR 0 3
60288: PPUSH
60289: LD_VAR 0 4
60293: PPUSH
60294: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60298: LD_VAR 0 1
60302: PPUSH
60303: LD_VAR 0 2
60307: PPUSH
60308: LD_VAR 0 3
60312: PPUSH
60313: CALL_OW 331
// end ;
60317: LD_VAR 0 5
60321: RET
// export function Video ( mode ) ; begin
60322: LD_INT 0
60324: PPUSH
// ingame_video = mode ;
60325: LD_ADDR_OWVAR 52
60329: PUSH
60330: LD_VAR 0 1
60334: ST_TO_ADDR
// interface_hidden = mode ;
60335: LD_ADDR_OWVAR 54
60339: PUSH
60340: LD_VAR 0 1
60344: ST_TO_ADDR
// end ;
60345: LD_VAR 0 2
60349: RET
// export function Join ( array , element ) ; begin
60350: LD_INT 0
60352: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60353: LD_ADDR_VAR 0 3
60357: PUSH
60358: LD_VAR 0 1
60362: PPUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 1
60370: PLUS
60371: PPUSH
60372: LD_VAR 0 2
60376: PPUSH
60377: CALL_OW 1
60381: ST_TO_ADDR
// end ;
60382: LD_VAR 0 3
60386: RET
// export function JoinUnion ( array , element ) ; begin
60387: LD_INT 0
60389: PPUSH
// result := array union element ;
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: LD_VAR 0 1
60399: PUSH
60400: LD_VAR 0 2
60404: UNION
60405: ST_TO_ADDR
// end ;
60406: LD_VAR 0 3
60410: RET
// export function GetBehemoths ( side ) ; begin
60411: LD_INT 0
60413: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60414: LD_ADDR_VAR 0 2
60418: PUSH
60419: LD_INT 22
60421: PUSH
60422: LD_VAR 0 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 31
60433: PUSH
60434: LD_INT 25
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PPUSH
60445: CALL_OW 69
60449: ST_TO_ADDR
// end ;
60450: LD_VAR 0 2
60454: RET
// export function Shuffle ( array ) ; var i , index ; begin
60455: LD_INT 0
60457: PPUSH
60458: PPUSH
60459: PPUSH
// result := [ ] ;
60460: LD_ADDR_VAR 0 2
60464: PUSH
60465: EMPTY
60466: ST_TO_ADDR
// if not array then
60467: LD_VAR 0 1
60471: NOT
60472: IFFALSE 60476
// exit ;
60474: GO 60575
// Randomize ;
60476: CALL_OW 10
// for i = array downto 1 do
60480: LD_ADDR_VAR 0 3
60484: PUSH
60485: DOUBLE
60486: LD_VAR 0 1
60490: INC
60491: ST_TO_ADDR
60492: LD_INT 1
60494: PUSH
60495: FOR_DOWNTO
60496: IFFALSE 60573
// begin index := rand ( 1 , array ) ;
60498: LD_ADDR_VAR 0 4
60502: PUSH
60503: LD_INT 1
60505: PPUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 12
60515: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60516: LD_ADDR_VAR 0 2
60520: PUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 2
60530: PUSH
60531: LD_INT 1
60533: PLUS
60534: PPUSH
60535: LD_VAR 0 1
60539: PUSH
60540: LD_VAR 0 4
60544: ARRAY
60545: PPUSH
60546: CALL_OW 2
60550: ST_TO_ADDR
// array := Delete ( array , index ) ;
60551: LD_ADDR_VAR 0 1
60555: PUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: LD_VAR 0 4
60565: PPUSH
60566: CALL_OW 3
60570: ST_TO_ADDR
// end ;
60571: GO 60495
60573: POP
60574: POP
// end ;
60575: LD_VAR 0 2
60579: RET
// export function GetBaseMaterials ( base ) ; begin
60580: LD_INT 0
60582: PPUSH
// result := [ 0 , 0 , 0 ] ;
60583: LD_ADDR_VAR 0 2
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: ST_TO_ADDR
// if not base then
60602: LD_VAR 0 1
60606: NOT
60607: IFFALSE 60611
// exit ;
60609: GO 60660
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60611: LD_ADDR_VAR 0 2
60615: PUSH
60616: LD_VAR 0 1
60620: PPUSH
60621: LD_INT 1
60623: PPUSH
60624: CALL_OW 275
60628: PUSH
60629: LD_VAR 0 1
60633: PPUSH
60634: LD_INT 2
60636: PPUSH
60637: CALL_OW 275
60641: PUSH
60642: LD_VAR 0 1
60646: PPUSH
60647: LD_INT 3
60649: PPUSH
60650: CALL_OW 275
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// end ;
60660: LD_VAR 0 2
60664: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60665: LD_INT 0
60667: PPUSH
60668: PPUSH
// result := array ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 1
60678: ST_TO_ADDR
// if size >= result then
60679: LD_VAR 0 2
60683: PUSH
60684: LD_VAR 0 3
60688: GREATEREQUAL
60689: IFFALSE 60693
// exit ;
60691: GO 60743
// if size then
60693: LD_VAR 0 2
60697: IFFALSE 60743
// for i := array downto size do
60699: LD_ADDR_VAR 0 4
60703: PUSH
60704: DOUBLE
60705: LD_VAR 0 1
60709: INC
60710: ST_TO_ADDR
60711: LD_VAR 0 2
60715: PUSH
60716: FOR_DOWNTO
60717: IFFALSE 60741
// result := Delete ( result , result ) ;
60719: LD_ADDR_VAR 0 3
60723: PUSH
60724: LD_VAR 0 3
60728: PPUSH
60729: LD_VAR 0 3
60733: PPUSH
60734: CALL_OW 3
60738: ST_TO_ADDR
60739: GO 60716
60741: POP
60742: POP
// end ;
60743: LD_VAR 0 3
60747: RET
// export function ComExit ( unit ) ; var tmp ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
// if not IsInUnit ( unit ) then
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL_OW 310
60761: NOT
60762: IFFALSE 60766
// exit ;
60764: GO 60826
// tmp := IsInUnit ( unit ) ;
60766: LD_ADDR_VAR 0 3
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 310
60780: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60781: LD_VAR 0 3
60785: PPUSH
60786: CALL_OW 247
60790: PUSH
60791: LD_INT 2
60793: EQUAL
60794: IFFALSE 60807
// ComExitVehicle ( unit ) else
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 121
60805: GO 60816
// ComExitBuilding ( unit ) ;
60807: LD_VAR 0 1
60811: PPUSH
60812: CALL_OW 122
// result := tmp ;
60816: LD_ADDR_VAR 0 2
60820: PUSH
60821: LD_VAR 0 3
60825: ST_TO_ADDR
// end ;
60826: LD_VAR 0 2
60830: RET
// export function ComExitAll ( units ) ; var i ; begin
60831: LD_INT 0
60833: PPUSH
60834: PPUSH
// if not units then
60835: LD_VAR 0 1
60839: NOT
60840: IFFALSE 60844
// exit ;
60842: GO 60870
// for i in units do
60844: LD_ADDR_VAR 0 3
60848: PUSH
60849: LD_VAR 0 1
60853: PUSH
60854: FOR_IN
60855: IFFALSE 60868
// ComExit ( i ) ;
60857: LD_VAR 0 3
60861: PPUSH
60862: CALL 60748 0 1
60866: GO 60854
60868: POP
60869: POP
// end ;
60870: LD_VAR 0 2
60874: RET
// export function ResetHc ; begin
60875: LD_INT 0
60877: PPUSH
// InitHc ;
60878: CALL_OW 19
// hc_importance := 0 ;
60882: LD_ADDR_OWVAR 32
60886: PUSH
60887: LD_INT 0
60889: ST_TO_ADDR
// end ;
60890: LD_VAR 0 1
60894: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60895: LD_INT 0
60897: PPUSH
60898: PPUSH
60899: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60900: LD_ADDR_VAR 0 6
60904: PUSH
60905: LD_VAR 0 1
60909: PUSH
60910: LD_VAR 0 3
60914: PLUS
60915: PUSH
60916: LD_INT 2
60918: DIV
60919: ST_TO_ADDR
// if _x < 0 then
60920: LD_VAR 0 6
60924: PUSH
60925: LD_INT 0
60927: LESS
60928: IFFALSE 60945
// _x := _x * - 1 ;
60930: LD_ADDR_VAR 0 6
60934: PUSH
60935: LD_VAR 0 6
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: MUL
60944: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60945: LD_ADDR_VAR 0 7
60949: PUSH
60950: LD_VAR 0 2
60954: PUSH
60955: LD_VAR 0 4
60959: PLUS
60960: PUSH
60961: LD_INT 2
60963: DIV
60964: ST_TO_ADDR
// if _y < 0 then
60965: LD_VAR 0 7
60969: PUSH
60970: LD_INT 0
60972: LESS
60973: IFFALSE 60990
// _y := _y * - 1 ;
60975: LD_ADDR_VAR 0 7
60979: PUSH
60980: LD_VAR 0 7
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: MUL
60989: ST_TO_ADDR
// result := [ _x , _y ] ;
60990: LD_ADDR_VAR 0 5
60994: PUSH
60995: LD_VAR 0 6
60999: PUSH
61000: LD_VAR 0 7
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// end ;
61009: LD_VAR 0 5
61013: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61014: LD_INT 0
61016: PPUSH
61017: PPUSH
61018: PPUSH
61019: PPUSH
// task := GetTaskList ( unit ) ;
61020: LD_ADDR_VAR 0 7
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: CALL_OW 437
61034: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61035: LD_VAR 0 7
61039: NOT
61040: PUSH
61041: LD_VAR 0 1
61045: PPUSH
61046: LD_VAR 0 2
61050: PPUSH
61051: CALL_OW 308
61055: NOT
61056: AND
61057: IFFALSE 61061
// exit ;
61059: GO 61179
// if IsInArea ( unit , area ) then
61061: LD_VAR 0 1
61065: PPUSH
61066: LD_VAR 0 2
61070: PPUSH
61071: CALL_OW 308
61075: IFFALSE 61093
// begin ComMoveToArea ( unit , goAway ) ;
61077: LD_VAR 0 1
61081: PPUSH
61082: LD_VAR 0 3
61086: PPUSH
61087: CALL_OW 113
// exit ;
61091: GO 61179
// end ; if task [ 1 ] [ 1 ] <> M then
61093: LD_VAR 0 7
61097: PUSH
61098: LD_INT 1
61100: ARRAY
61101: PUSH
61102: LD_INT 1
61104: ARRAY
61105: PUSH
61106: LD_STRING M
61108: NONEQUAL
61109: IFFALSE 61113
// exit ;
61111: GO 61179
// x := task [ 1 ] [ 2 ] ;
61113: LD_ADDR_VAR 0 5
61117: PUSH
61118: LD_VAR 0 7
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PUSH
61127: LD_INT 2
61129: ARRAY
61130: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61131: LD_ADDR_VAR 0 6
61135: PUSH
61136: LD_VAR 0 7
61140: PUSH
61141: LD_INT 1
61143: ARRAY
61144: PUSH
61145: LD_INT 3
61147: ARRAY
61148: ST_TO_ADDR
// if InArea ( x , y , area ) then
61149: LD_VAR 0 5
61153: PPUSH
61154: LD_VAR 0 6
61158: PPUSH
61159: LD_VAR 0 2
61163: PPUSH
61164: CALL_OW 309
61168: IFFALSE 61179
// ComStop ( unit ) ;
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 141
// end ;
61179: LD_VAR 0 4
61183: RET
// export function Abs ( value ) ; begin
61184: LD_INT 0
61186: PPUSH
// result := value ;
61187: LD_ADDR_VAR 0 2
61191: PUSH
61192: LD_VAR 0 1
61196: ST_TO_ADDR
// if value < 0 then
61197: LD_VAR 0 1
61201: PUSH
61202: LD_INT 0
61204: LESS
61205: IFFALSE 61222
// result := value * - 1 ;
61207: LD_ADDR_VAR 0 2
61211: PUSH
61212: LD_VAR 0 1
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: MUL
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 2
61226: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61227: LD_INT 0
61229: PPUSH
61230: PPUSH
61231: PPUSH
61232: PPUSH
61233: PPUSH
61234: PPUSH
61235: PPUSH
61236: PPUSH
// if not unit or not building then
61237: LD_VAR 0 1
61241: NOT
61242: PUSH
61243: LD_VAR 0 2
61247: NOT
61248: OR
61249: IFFALSE 61253
// exit ;
61251: GO 61479
// x := GetX ( building ) ;
61253: LD_ADDR_VAR 0 4
61257: PUSH
61258: LD_VAR 0 2
61262: PPUSH
61263: CALL_OW 250
61267: ST_TO_ADDR
// y := GetY ( building ) ;
61268: LD_ADDR_VAR 0 6
61272: PUSH
61273: LD_VAR 0 2
61277: PPUSH
61278: CALL_OW 251
61282: ST_TO_ADDR
// d := GetDir ( building ) ;
61283: LD_ADDR_VAR 0 8
61287: PUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: CALL_OW 254
61297: ST_TO_ADDR
// r := 4 ;
61298: LD_ADDR_VAR 0 9
61302: PUSH
61303: LD_INT 4
61305: ST_TO_ADDR
// for i := 1 to 5 do
61306: LD_ADDR_VAR 0 10
61310: PUSH
61311: DOUBLE
61312: LD_INT 1
61314: DEC
61315: ST_TO_ADDR
61316: LD_INT 5
61318: PUSH
61319: FOR_TO
61320: IFFALSE 61477
// begin _x := ShiftX ( x , d , r + i ) ;
61322: LD_ADDR_VAR 0 5
61326: PUSH
61327: LD_VAR 0 4
61331: PPUSH
61332: LD_VAR 0 8
61336: PPUSH
61337: LD_VAR 0 9
61341: PUSH
61342: LD_VAR 0 10
61346: PLUS
61347: PPUSH
61348: CALL_OW 272
61352: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61353: LD_ADDR_VAR 0 7
61357: PUSH
61358: LD_VAR 0 6
61362: PPUSH
61363: LD_VAR 0 8
61367: PPUSH
61368: LD_VAR 0 9
61372: PUSH
61373: LD_VAR 0 10
61377: PLUS
61378: PPUSH
61379: CALL_OW 273
61383: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61384: LD_VAR 0 5
61388: PPUSH
61389: LD_VAR 0 7
61393: PPUSH
61394: CALL_OW 488
61398: PUSH
61399: LD_VAR 0 5
61403: PPUSH
61404: LD_VAR 0 7
61408: PPUSH
61409: CALL_OW 428
61413: PPUSH
61414: CALL_OW 247
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: IN
61429: NOT
61430: AND
61431: IFFALSE 61475
// begin ComMoveXY ( unit , _x , _y ) ;
61433: LD_VAR 0 1
61437: PPUSH
61438: LD_VAR 0 5
61442: PPUSH
61443: LD_VAR 0 7
61447: PPUSH
61448: CALL_OW 111
// result := [ _x , _y ] ;
61452: LD_ADDR_VAR 0 3
61456: PUSH
61457: LD_VAR 0 5
61461: PUSH
61462: LD_VAR 0 7
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// exit ;
61471: POP
61472: POP
61473: GO 61479
// end ; end ;
61475: GO 61319
61477: POP
61478: POP
// end ;
61479: LD_VAR 0 3
61483: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61484: LD_INT 0
61486: PPUSH
61487: PPUSH
61488: PPUSH
// result := 0 ;
61489: LD_ADDR_VAR 0 3
61493: PUSH
61494: LD_INT 0
61496: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61497: LD_VAR 0 1
61501: PUSH
61502: LD_INT 0
61504: LESS
61505: PUSH
61506: LD_VAR 0 1
61510: PUSH
61511: LD_INT 8
61513: GREATER
61514: OR
61515: PUSH
61516: LD_VAR 0 2
61520: PUSH
61521: LD_INT 0
61523: LESS
61524: OR
61525: PUSH
61526: LD_VAR 0 2
61530: PUSH
61531: LD_INT 8
61533: GREATER
61534: OR
61535: IFFALSE 61539
// exit ;
61537: GO 61614
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61539: LD_ADDR_VAR 0 4
61543: PUSH
61544: LD_INT 22
61546: PUSH
61547: LD_VAR 0 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PPUSH
61556: CALL_OW 69
61560: PUSH
61561: FOR_IN
61562: IFFALSE 61612
// begin un := UnitShoot ( i ) ;
61564: LD_ADDR_VAR 0 5
61568: PUSH
61569: LD_VAR 0 4
61573: PPUSH
61574: CALL_OW 504
61578: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61579: LD_VAR 0 5
61583: PPUSH
61584: CALL_OW 255
61588: PUSH
61589: LD_VAR 0 1
61593: EQUAL
61594: IFFALSE 61610
// begin result := un ;
61596: LD_ADDR_VAR 0 3
61600: PUSH
61601: LD_VAR 0 5
61605: ST_TO_ADDR
// exit ;
61606: POP
61607: POP
61608: GO 61614
// end ; end ;
61610: GO 61561
61612: POP
61613: POP
// end ;
61614: LD_VAR 0 3
61618: RET
// export function GetCargoBay ( units ) ; begin
61619: LD_INT 0
61621: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61622: LD_ADDR_VAR 0 2
61626: PUSH
61627: LD_VAR 0 1
61631: PPUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 34
61637: PUSH
61638: LD_INT 12
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 34
61647: PUSH
61648: LD_INT 51
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 34
61657: PUSH
61658: LD_INT 32
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 34
61667: PUSH
61668: LD_INT 89
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: PPUSH
61682: CALL_OW 72
61686: ST_TO_ADDR
// end ;
61687: LD_VAR 0 2
61691: RET
// export function Negate ( value ) ; begin
61692: LD_INT 0
61694: PPUSH
// result := not value ;
61695: LD_ADDR_VAR 0 2
61699: PUSH
61700: LD_VAR 0 1
61704: NOT
61705: ST_TO_ADDR
// end ;
61706: LD_VAR 0 2
61710: RET
// export function Inc ( value ) ; begin
61711: LD_INT 0
61713: PPUSH
// result := value + 1 ;
61714: LD_ADDR_VAR 0 2
61718: PUSH
61719: LD_VAR 0 1
61723: PUSH
61724: LD_INT 1
61726: PLUS
61727: ST_TO_ADDR
// end ;
61728: LD_VAR 0 2
61732: RET
// export function Dec ( value ) ; begin
61733: LD_INT 0
61735: PPUSH
// result := value - 1 ;
61736: LD_ADDR_VAR 0 2
61740: PUSH
61741: LD_VAR 0 1
61745: PUSH
61746: LD_INT 1
61748: MINUS
61749: ST_TO_ADDR
// end ;
61750: LD_VAR 0 2
61754: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61755: LD_INT 0
61757: PPUSH
61758: PPUSH
61759: PPUSH
61760: PPUSH
61761: PPUSH
61762: PPUSH
61763: PPUSH
61764: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61765: LD_VAR 0 1
61769: PPUSH
61770: LD_VAR 0 2
61774: PPUSH
61775: CALL_OW 488
61779: NOT
61780: PUSH
61781: LD_VAR 0 3
61785: PPUSH
61786: LD_VAR 0 4
61790: PPUSH
61791: CALL_OW 488
61795: NOT
61796: OR
61797: IFFALSE 61810
// begin result := - 1 ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: ST_TO_ADDR
// exit ;
61808: GO 62045
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61810: LD_ADDR_VAR 0 12
61814: PUSH
61815: LD_VAR 0 1
61819: PPUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: LD_VAR 0 3
61829: PPUSH
61830: LD_VAR 0 4
61834: PPUSH
61835: CALL 60895 0 4
61839: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61840: LD_ADDR_VAR 0 11
61844: PUSH
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: LD_VAR 0 12
61859: PUSH
61860: LD_INT 1
61862: ARRAY
61863: PPUSH
61864: LD_VAR 0 12
61868: PUSH
61869: LD_INT 2
61871: ARRAY
61872: PPUSH
61873: CALL_OW 298
61877: ST_TO_ADDR
// distance := 9999 ;
61878: LD_ADDR_VAR 0 10
61882: PUSH
61883: LD_INT 9999
61885: ST_TO_ADDR
// for i := 0 to 5 do
61886: LD_ADDR_VAR 0 6
61890: PUSH
61891: DOUBLE
61892: LD_INT 0
61894: DEC
61895: ST_TO_ADDR
61896: LD_INT 5
61898: PUSH
61899: FOR_TO
61900: IFFALSE 62043
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61902: LD_ADDR_VAR 0 7
61906: PUSH
61907: LD_VAR 0 1
61911: PPUSH
61912: LD_VAR 0 6
61916: PPUSH
61917: LD_VAR 0 11
61921: PPUSH
61922: CALL_OW 272
61926: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61927: LD_ADDR_VAR 0 8
61931: PUSH
61932: LD_VAR 0 2
61936: PPUSH
61937: LD_VAR 0 6
61941: PPUSH
61942: LD_VAR 0 11
61946: PPUSH
61947: CALL_OW 273
61951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61952: LD_VAR 0 7
61956: PPUSH
61957: LD_VAR 0 8
61961: PPUSH
61962: CALL_OW 488
61966: NOT
61967: IFFALSE 61971
// continue ;
61969: GO 61899
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61971: LD_ADDR_VAR 0 9
61975: PUSH
61976: LD_VAR 0 12
61980: PUSH
61981: LD_INT 1
61983: ARRAY
61984: PPUSH
61985: LD_VAR 0 12
61989: PUSH
61990: LD_INT 2
61992: ARRAY
61993: PPUSH
61994: LD_VAR 0 7
61998: PPUSH
61999: LD_VAR 0 8
62003: PPUSH
62004: CALL_OW 298
62008: ST_TO_ADDR
// if tmp < distance then
62009: LD_VAR 0 9
62013: PUSH
62014: LD_VAR 0 10
62018: LESS
62019: IFFALSE 62041
// begin result := i ;
62021: LD_ADDR_VAR 0 5
62025: PUSH
62026: LD_VAR 0 6
62030: ST_TO_ADDR
// distance := tmp ;
62031: LD_ADDR_VAR 0 10
62035: PUSH
62036: LD_VAR 0 9
62040: ST_TO_ADDR
// end ; end ;
62041: GO 61899
62043: POP
62044: POP
// end ;
62045: LD_VAR 0 5
62049: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62050: LD_INT 0
62052: PPUSH
62053: PPUSH
// if not driver or not IsInUnit ( driver ) then
62054: LD_VAR 0 1
62058: NOT
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 310
62069: NOT
62070: OR
62071: IFFALSE 62075
// exit ;
62073: GO 62165
// vehicle := IsInUnit ( driver ) ;
62075: LD_ADDR_VAR 0 3
62079: PUSH
62080: LD_VAR 0 1
62084: PPUSH
62085: CALL_OW 310
62089: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62090: LD_VAR 0 1
62094: PPUSH
62095: LD_STRING \
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: PUSH
62125: LD_STRING E
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_VAR 0 3
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PPUSH
62161: CALL_OW 446
// end ;
62165: LD_VAR 0 2
62169: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62170: LD_INT 0
62172: PPUSH
62173: PPUSH
// if not driver or not IsInUnit ( driver ) then
62174: LD_VAR 0 1
62178: NOT
62179: PUSH
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 310
62189: NOT
62190: OR
62191: IFFALSE 62195
// exit ;
62193: GO 62285
// vehicle := IsInUnit ( driver ) ;
62195: LD_ADDR_VAR 0 3
62199: PUSH
62200: LD_VAR 0 1
62204: PPUSH
62205: CALL_OW 310
62209: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62210: LD_VAR 0 1
62214: PPUSH
62215: LD_STRING \
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: LD_STRING E
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_VAR 0 3
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PPUSH
62281: CALL_OW 447
// end ;
62285: LD_VAR 0 2
62289: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
62294: PPUSH
// tmp := [ ] ;
62295: LD_ADDR_VAR 0 5
62299: PUSH
62300: EMPTY
62301: ST_TO_ADDR
// for i in units do
62302: LD_ADDR_VAR 0 4
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: FOR_IN
62313: IFFALSE 62351
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62315: LD_ADDR_VAR 0 5
62319: PUSH
62320: LD_VAR 0 5
62324: PPUSH
62325: LD_VAR 0 5
62329: PUSH
62330: LD_INT 1
62332: PLUS
62333: PPUSH
62334: LD_VAR 0 4
62338: PPUSH
62339: CALL_OW 256
62343: PPUSH
62344: CALL_OW 2
62348: ST_TO_ADDR
62349: GO 62312
62351: POP
62352: POP
// if not tmp then
62353: LD_VAR 0 5
62357: NOT
62358: IFFALSE 62362
// exit ;
62360: GO 62410
// if asc then
62362: LD_VAR 0 2
62366: IFFALSE 62390
// result := SortListByListAsc ( units , tmp ) else
62368: LD_ADDR_VAR 0 3
62372: PUSH
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_VAR 0 5
62382: PPUSH
62383: CALL_OW 76
62387: ST_TO_ADDR
62388: GO 62410
// result := SortListByListDesc ( units , tmp ) ;
62390: LD_ADDR_VAR 0 3
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: LD_VAR 0 5
62404: PPUSH
62405: CALL_OW 77
62409: ST_TO_ADDR
// end ;
62410: LD_VAR 0 3
62414: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62415: LD_INT 0
62417: PPUSH
62418: PPUSH
// task := GetTaskList ( mech ) ;
62419: LD_ADDR_VAR 0 4
62423: PUSH
62424: LD_VAR 0 1
62428: PPUSH
62429: CALL_OW 437
62433: ST_TO_ADDR
// if not task then
62434: LD_VAR 0 4
62438: NOT
62439: IFFALSE 62443
// exit ;
62441: GO 62485
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62443: LD_ADDR_VAR 0 3
62447: PUSH
62448: LD_VAR 0 4
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PUSH
62457: LD_INT 1
62459: ARRAY
62460: PUSH
62461: LD_STRING r
62463: EQUAL
62464: PUSH
62465: LD_VAR 0 4
62469: PUSH
62470: LD_INT 1
62472: ARRAY
62473: PUSH
62474: LD_INT 4
62476: ARRAY
62477: PUSH
62478: LD_VAR 0 2
62482: EQUAL
62483: AND
62484: ST_TO_ADDR
// end ;
62485: LD_VAR 0 3
62489: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62490: LD_INT 0
62492: PPUSH
// SetDir ( unit , d ) ;
62493: LD_VAR 0 1
62497: PPUSH
62498: LD_VAR 0 4
62502: PPUSH
62503: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62507: LD_VAR 0 1
62511: PPUSH
62512: LD_VAR 0 2
62516: PPUSH
62517: LD_VAR 0 3
62521: PPUSH
62522: LD_VAR 0 5
62526: PPUSH
62527: CALL_OW 48
// end ;
62531: LD_VAR 0 6
62535: RET
// export function ToNaturalNumber ( number ) ; begin
62536: LD_INT 0
62538: PPUSH
// result := number div 1 ;
62539: LD_ADDR_VAR 0 2
62543: PUSH
62544: LD_VAR 0 1
62548: PUSH
62549: LD_INT 1
62551: DIV
62552: ST_TO_ADDR
// if number < 0 then
62553: LD_VAR 0 1
62557: PUSH
62558: LD_INT 0
62560: LESS
62561: IFFALSE 62571
// result := 0 ;
62563: LD_ADDR_VAR 0 2
62567: PUSH
62568: LD_INT 0
62570: ST_TO_ADDR
// end ;
62571: LD_VAR 0 2
62575: RET
// export function SortByClass ( units , class ) ; var un ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
// if not units or not class then
62580: LD_VAR 0 1
62584: NOT
62585: PUSH
62586: LD_VAR 0 2
62590: NOT
62591: OR
62592: IFFALSE 62596
// exit ;
62594: GO 62691
// result := [ ] ;
62596: LD_ADDR_VAR 0 3
62600: PUSH
62601: EMPTY
62602: ST_TO_ADDR
// for un in units do
62603: LD_ADDR_VAR 0 4
62607: PUSH
62608: LD_VAR 0 1
62612: PUSH
62613: FOR_IN
62614: IFFALSE 62689
// if GetClass ( un ) = class then
62616: LD_VAR 0 4
62620: PPUSH
62621: CALL_OW 257
62625: PUSH
62626: LD_VAR 0 2
62630: EQUAL
62631: IFFALSE 62658
// result := Insert ( result , 1 , un ) else
62633: LD_ADDR_VAR 0 3
62637: PUSH
62638: LD_VAR 0 3
62642: PPUSH
62643: LD_INT 1
62645: PPUSH
62646: LD_VAR 0 4
62650: PPUSH
62651: CALL_OW 2
62655: ST_TO_ADDR
62656: GO 62687
// result := Replace ( result , result + 1 , un ) ;
62658: LD_ADDR_VAR 0 3
62662: PUSH
62663: LD_VAR 0 3
62667: PPUSH
62668: LD_VAR 0 3
62672: PUSH
62673: LD_INT 1
62675: PLUS
62676: PPUSH
62677: LD_VAR 0 4
62681: PPUSH
62682: CALL_OW 1
62686: ST_TO_ADDR
62687: GO 62613
62689: POP
62690: POP
// end ;
62691: LD_VAR 0 3
62695: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
62700: PPUSH
62701: PPUSH
62702: PPUSH
62703: PPUSH
62704: PPUSH
// result := [ ] ;
62705: LD_ADDR_VAR 0 4
62709: PUSH
62710: EMPTY
62711: ST_TO_ADDR
// if x - r < 0 then
62712: LD_VAR 0 1
62716: PUSH
62717: LD_VAR 0 3
62721: MINUS
62722: PUSH
62723: LD_INT 0
62725: LESS
62726: IFFALSE 62738
// min_x := 0 else
62728: LD_ADDR_VAR 0 8
62732: PUSH
62733: LD_INT 0
62735: ST_TO_ADDR
62736: GO 62754
// min_x := x - r ;
62738: LD_ADDR_VAR 0 8
62742: PUSH
62743: LD_VAR 0 1
62747: PUSH
62748: LD_VAR 0 3
62752: MINUS
62753: ST_TO_ADDR
// if y - r < 0 then
62754: LD_VAR 0 2
62758: PUSH
62759: LD_VAR 0 3
62763: MINUS
62764: PUSH
62765: LD_INT 0
62767: LESS
62768: IFFALSE 62780
// min_y := 0 else
62770: LD_ADDR_VAR 0 7
62774: PUSH
62775: LD_INT 0
62777: ST_TO_ADDR
62778: GO 62796
// min_y := y - r ;
62780: LD_ADDR_VAR 0 7
62784: PUSH
62785: LD_VAR 0 2
62789: PUSH
62790: LD_VAR 0 3
62794: MINUS
62795: ST_TO_ADDR
// max_x := x + r ;
62796: LD_ADDR_VAR 0 9
62800: PUSH
62801: LD_VAR 0 1
62805: PUSH
62806: LD_VAR 0 3
62810: PLUS
62811: ST_TO_ADDR
// max_y := y + r ;
62812: LD_ADDR_VAR 0 10
62816: PUSH
62817: LD_VAR 0 2
62821: PUSH
62822: LD_VAR 0 3
62826: PLUS
62827: ST_TO_ADDR
// for _x = min_x to max_x do
62828: LD_ADDR_VAR 0 5
62832: PUSH
62833: DOUBLE
62834: LD_VAR 0 8
62838: DEC
62839: ST_TO_ADDR
62840: LD_VAR 0 9
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62947
// for _y = min_y to max_y do
62848: LD_ADDR_VAR 0 6
62852: PUSH
62853: DOUBLE
62854: LD_VAR 0 7
62858: DEC
62859: ST_TO_ADDR
62860: LD_VAR 0 10
62864: PUSH
62865: FOR_TO
62866: IFFALSE 62943
// begin if not ValidHex ( _x , _y ) then
62868: LD_VAR 0 5
62872: PPUSH
62873: LD_VAR 0 6
62877: PPUSH
62878: CALL_OW 488
62882: NOT
62883: IFFALSE 62887
// continue ;
62885: GO 62865
// if GetResourceTypeXY ( _x , _y ) then
62887: LD_VAR 0 5
62891: PPUSH
62892: LD_VAR 0 6
62896: PPUSH
62897: CALL_OW 283
62901: IFFALSE 62941
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62903: LD_ADDR_VAR 0 4
62907: PUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: LD_VAR 0 4
62917: PUSH
62918: LD_INT 1
62920: PLUS
62921: PPUSH
62922: LD_VAR 0 5
62926: PUSH
62927: LD_VAR 0 6
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PPUSH
62936: CALL_OW 1
62940: ST_TO_ADDR
// end ;
62941: GO 62865
62943: POP
62944: POP
62945: GO 62845
62947: POP
62948: POP
// end ;
62949: LD_VAR 0 4
62953: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62954: LD_INT 0
62956: PPUSH
62957: PPUSH
62958: PPUSH
62959: PPUSH
62960: PPUSH
62961: PPUSH
62962: PPUSH
62963: PPUSH
// if not units then
62964: LD_VAR 0 1
62968: NOT
62969: IFFALSE 62973
// exit ;
62971: GO 63497
// result := UnitFilter ( units , [ f_ok ] ) ;
62973: LD_ADDR_VAR 0 3
62977: PUSH
62978: LD_VAR 0 1
62982: PPUSH
62983: LD_INT 50
62985: PUSH
62986: EMPTY
62987: LIST
62988: PPUSH
62989: CALL_OW 72
62993: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62994: LD_ADDR_VAR 0 8
62998: PUSH
62999: LD_VAR 0 1
63003: PUSH
63004: LD_INT 1
63006: ARRAY
63007: PPUSH
63008: CALL_OW 255
63012: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63013: LD_ADDR_VAR 0 10
63017: PUSH
63018: LD_INT 29
63020: PUSH
63021: LD_INT 91
63023: PUSH
63024: LD_INT 49
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// if not result then
63032: LD_VAR 0 3
63036: NOT
63037: IFFALSE 63041
// exit ;
63039: GO 63497
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63041: LD_ADDR_VAR 0 5
63045: PUSH
63046: LD_INT 81
63048: PUSH
63049: LD_VAR 0 8
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PPUSH
63058: CALL_OW 69
63062: ST_TO_ADDR
// for i in result do
63063: LD_ADDR_VAR 0 4
63067: PUSH
63068: LD_VAR 0 3
63072: PUSH
63073: FOR_IN
63074: IFFALSE 63495
// begin tag := GetTag ( i ) + 1 ;
63076: LD_ADDR_VAR 0 9
63080: PUSH
63081: LD_VAR 0 4
63085: PPUSH
63086: CALL_OW 110
63090: PUSH
63091: LD_INT 1
63093: PLUS
63094: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63095: LD_ADDR_VAR 0 7
63099: PUSH
63100: LD_VAR 0 4
63104: PPUSH
63105: CALL_OW 250
63109: PPUSH
63110: LD_VAR 0 4
63114: PPUSH
63115: CALL_OW 251
63119: PPUSH
63120: LD_INT 6
63122: PPUSH
63123: CALL 62696 0 3
63127: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63128: LD_VAR 0 4
63132: PPUSH
63133: CALL_OW 247
63137: PUSH
63138: LD_INT 2
63140: EQUAL
63141: PUSH
63142: LD_VAR 0 7
63146: AND
63147: PUSH
63148: LD_VAR 0 4
63152: PPUSH
63153: CALL_OW 264
63157: PUSH
63158: LD_VAR 0 10
63162: IN
63163: NOT
63164: AND
63165: IFFALSE 63204
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63167: LD_VAR 0 4
63171: PPUSH
63172: LD_VAR 0 7
63176: PUSH
63177: LD_INT 1
63179: ARRAY
63180: PUSH
63181: LD_INT 1
63183: ARRAY
63184: PPUSH
63185: LD_VAR 0 7
63189: PUSH
63190: LD_INT 1
63192: ARRAY
63193: PUSH
63194: LD_INT 2
63196: ARRAY
63197: PPUSH
63198: CALL_OW 116
63202: GO 63493
// if path > tag then
63204: LD_VAR 0 2
63208: PUSH
63209: LD_VAR 0 9
63213: GREATER
63214: IFFALSE 63422
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63216: LD_ADDR_VAR 0 6
63220: PUSH
63221: LD_VAR 0 5
63225: PPUSH
63226: LD_INT 91
63228: PUSH
63229: LD_VAR 0 4
63233: PUSH
63234: LD_INT 8
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: LIST
63241: PPUSH
63242: CALL_OW 72
63246: ST_TO_ADDR
// if nearEnemy then
63247: LD_VAR 0 6
63251: IFFALSE 63320
// begin if GetWeapon ( i ) = ru_time_lapser then
63253: LD_VAR 0 4
63257: PPUSH
63258: CALL_OW 264
63262: PUSH
63263: LD_INT 49
63265: EQUAL
63266: IFFALSE 63294
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63268: LD_VAR 0 4
63272: PPUSH
63273: LD_VAR 0 6
63277: PPUSH
63278: LD_VAR 0 4
63282: PPUSH
63283: CALL_OW 74
63287: PPUSH
63288: CALL_OW 112
63292: GO 63318
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63294: LD_VAR 0 4
63298: PPUSH
63299: LD_VAR 0 6
63303: PPUSH
63304: LD_VAR 0 4
63308: PPUSH
63309: CALL_OW 74
63313: PPUSH
63314: CALL 64422 0 2
// end else
63318: GO 63420
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63320: LD_VAR 0 4
63324: PPUSH
63325: LD_VAR 0 2
63329: PUSH
63330: LD_VAR 0 9
63334: ARRAY
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PPUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_VAR 0 9
63349: ARRAY
63350: PUSH
63351: LD_INT 2
63353: ARRAY
63354: PPUSH
63355: CALL_OW 297
63359: PUSH
63360: LD_INT 6
63362: GREATER
63363: IFFALSE 63406
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63365: LD_VAR 0 4
63369: PPUSH
63370: LD_VAR 0 2
63374: PUSH
63375: LD_VAR 0 9
63379: ARRAY
63380: PUSH
63381: LD_INT 1
63383: ARRAY
63384: PPUSH
63385: LD_VAR 0 2
63389: PUSH
63390: LD_VAR 0 9
63394: ARRAY
63395: PUSH
63396: LD_INT 2
63398: ARRAY
63399: PPUSH
63400: CALL_OW 114
63404: GO 63420
// SetTag ( i , tag ) ;
63406: LD_VAR 0 4
63410: PPUSH
63411: LD_VAR 0 9
63415: PPUSH
63416: CALL_OW 109
// end else
63420: GO 63493
// if enemy then
63422: LD_VAR 0 5
63426: IFFALSE 63493
// begin if GetWeapon ( i ) = ru_time_lapser then
63428: LD_VAR 0 4
63432: PPUSH
63433: CALL_OW 264
63437: PUSH
63438: LD_INT 49
63440: EQUAL
63441: IFFALSE 63469
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63443: LD_VAR 0 4
63447: PPUSH
63448: LD_VAR 0 5
63452: PPUSH
63453: LD_VAR 0 4
63457: PPUSH
63458: CALL_OW 74
63462: PPUSH
63463: CALL_OW 112
63467: GO 63493
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63469: LD_VAR 0 4
63473: PPUSH
63474: LD_VAR 0 5
63478: PPUSH
63479: LD_VAR 0 4
63483: PPUSH
63484: CALL_OW 74
63488: PPUSH
63489: CALL 64422 0 2
// end ; end ;
63493: GO 63073
63495: POP
63496: POP
// end ;
63497: LD_VAR 0 3
63501: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63502: LD_INT 0
63504: PPUSH
63505: PPUSH
63506: PPUSH
// if not unit or IsInUnit ( unit ) then
63507: LD_VAR 0 1
63511: NOT
63512: PUSH
63513: LD_VAR 0 1
63517: PPUSH
63518: CALL_OW 310
63522: OR
63523: IFFALSE 63527
// exit ;
63525: GO 63618
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63527: LD_ADDR_VAR 0 4
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 250
63541: PPUSH
63542: LD_VAR 0 2
63546: PPUSH
63547: LD_INT 1
63549: PPUSH
63550: CALL_OW 272
63554: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63555: LD_ADDR_VAR 0 5
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 251
63569: PPUSH
63570: LD_VAR 0 2
63574: PPUSH
63575: LD_INT 1
63577: PPUSH
63578: CALL_OW 273
63582: ST_TO_ADDR
// if ValidHex ( x , y ) then
63583: LD_VAR 0 4
63587: PPUSH
63588: LD_VAR 0 5
63592: PPUSH
63593: CALL_OW 488
63597: IFFALSE 63618
// ComTurnXY ( unit , x , y ) ;
63599: LD_VAR 0 1
63603: PPUSH
63604: LD_VAR 0 4
63608: PPUSH
63609: LD_VAR 0 5
63613: PPUSH
63614: CALL_OW 118
// end ;
63618: LD_VAR 0 3
63622: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63623: LD_INT 0
63625: PPUSH
63626: PPUSH
// result := false ;
63627: LD_ADDR_VAR 0 3
63631: PUSH
63632: LD_INT 0
63634: ST_TO_ADDR
// if not units then
63635: LD_VAR 0 2
63639: NOT
63640: IFFALSE 63644
// exit ;
63642: GO 63689
// for i in units do
63644: LD_ADDR_VAR 0 4
63648: PUSH
63649: LD_VAR 0 2
63653: PUSH
63654: FOR_IN
63655: IFFALSE 63687
// if See ( side , i ) then
63657: LD_VAR 0 1
63661: PPUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: CALL_OW 292
63671: IFFALSE 63685
// begin result := true ;
63673: LD_ADDR_VAR 0 3
63677: PUSH
63678: LD_INT 1
63680: ST_TO_ADDR
// exit ;
63681: POP
63682: POP
63683: GO 63689
// end ;
63685: GO 63654
63687: POP
63688: POP
// end ;
63689: LD_VAR 0 3
63693: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63694: LD_INT 0
63696: PPUSH
63697: PPUSH
63698: PPUSH
63699: PPUSH
// if not unit or not points then
63700: LD_VAR 0 1
63704: NOT
63705: PUSH
63706: LD_VAR 0 2
63710: NOT
63711: OR
63712: IFFALSE 63716
// exit ;
63714: GO 63806
// dist := 99999 ;
63716: LD_ADDR_VAR 0 5
63720: PUSH
63721: LD_INT 99999
63723: ST_TO_ADDR
// for i in points do
63724: LD_ADDR_VAR 0 4
63728: PUSH
63729: LD_VAR 0 2
63733: PUSH
63734: FOR_IN
63735: IFFALSE 63804
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63737: LD_ADDR_VAR 0 6
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_VAR 0 4
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PPUSH
63756: LD_VAR 0 4
63760: PUSH
63761: LD_INT 2
63763: ARRAY
63764: PPUSH
63765: CALL_OW 297
63769: ST_TO_ADDR
// if tmpDist < dist then
63770: LD_VAR 0 6
63774: PUSH
63775: LD_VAR 0 5
63779: LESS
63780: IFFALSE 63802
// begin result := i ;
63782: LD_ADDR_VAR 0 3
63786: PUSH
63787: LD_VAR 0 4
63791: ST_TO_ADDR
// dist := tmpDist ;
63792: LD_ADDR_VAR 0 5
63796: PUSH
63797: LD_VAR 0 6
63801: ST_TO_ADDR
// end ; end ;
63802: GO 63734
63804: POP
63805: POP
// end ;
63806: LD_VAR 0 3
63810: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63811: LD_INT 0
63813: PPUSH
// uc_side := side ;
63814: LD_ADDR_OWVAR 20
63818: PUSH
63819: LD_VAR 0 1
63823: ST_TO_ADDR
// uc_nation := 3 ;
63824: LD_ADDR_OWVAR 21
63828: PUSH
63829: LD_INT 3
63831: ST_TO_ADDR
// vc_chassis := 25 ;
63832: LD_ADDR_OWVAR 37
63836: PUSH
63837: LD_INT 25
63839: ST_TO_ADDR
// vc_engine := engine_siberite ;
63840: LD_ADDR_OWVAR 39
63844: PUSH
63845: LD_INT 3
63847: ST_TO_ADDR
// vc_control := control_computer ;
63848: LD_ADDR_OWVAR 38
63852: PUSH
63853: LD_INT 3
63855: ST_TO_ADDR
// vc_weapon := 59 ;
63856: LD_ADDR_OWVAR 40
63860: PUSH
63861: LD_INT 59
63863: ST_TO_ADDR
// result := CreateVehicle ;
63864: LD_ADDR_VAR 0 5
63868: PUSH
63869: CALL_OW 45
63873: ST_TO_ADDR
// SetDir ( result , d ) ;
63874: LD_VAR 0 5
63878: PPUSH
63879: LD_VAR 0 4
63883: PPUSH
63884: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63888: LD_VAR 0 5
63892: PPUSH
63893: LD_VAR 0 2
63897: PPUSH
63898: LD_VAR 0 3
63902: PPUSH
63903: LD_INT 0
63905: PPUSH
63906: CALL_OW 48
// end ;
63910: LD_VAR 0 5
63914: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63915: LD_INT 0
63917: PPUSH
63918: PPUSH
63919: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63920: LD_ADDR_VAR 0 2
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63943: LD_VAR 0 1
63947: NOT
63948: PUSH
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL_OW 264
63958: PUSH
63959: LD_INT 12
63961: PUSH
63962: LD_INT 51
63964: PUSH
63965: LD_INT 32
63967: PUSH
63968: LD_INT 89
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: IN
63977: NOT
63978: OR
63979: IFFALSE 63983
// exit ;
63981: GO 64081
// for i := 1 to 3 do
63983: LD_ADDR_VAR 0 3
63987: PUSH
63988: DOUBLE
63989: LD_INT 1
63991: DEC
63992: ST_TO_ADDR
63993: LD_INT 3
63995: PUSH
63996: FOR_TO
63997: IFFALSE 64079
// begin tmp := GetCargo ( cargo , i ) ;
63999: LD_ADDR_VAR 0 4
64003: PUSH
64004: LD_VAR 0 1
64008: PPUSH
64009: LD_VAR 0 3
64013: PPUSH
64014: CALL_OW 289
64018: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64019: LD_ADDR_VAR 0 2
64023: PUSH
64024: LD_VAR 0 2
64028: PPUSH
64029: LD_VAR 0 3
64033: PPUSH
64034: LD_VAR 0 4
64038: PPUSH
64039: CALL_OW 1
64043: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64044: LD_ADDR_VAR 0 2
64048: PUSH
64049: LD_VAR 0 2
64053: PPUSH
64054: LD_INT 4
64056: PPUSH
64057: LD_VAR 0 2
64061: PUSH
64062: LD_INT 4
64064: ARRAY
64065: PUSH
64066: LD_VAR 0 4
64070: PLUS
64071: PPUSH
64072: CALL_OW 1
64076: ST_TO_ADDR
// end ;
64077: GO 63996
64079: POP
64080: POP
// end ;
64081: LD_VAR 0 2
64085: RET
// export function Length ( array ) ; begin
64086: LD_INT 0
64088: PPUSH
// result := array + 0 ;
64089: LD_ADDR_VAR 0 2
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: LD_INT 0
64101: PLUS
64102: ST_TO_ADDR
// end ;
64103: LD_VAR 0 2
64107: RET
// export function PrepareArray ( array ) ; begin
64108: LD_INT 0
64110: PPUSH
// result := array diff 0 ;
64111: LD_ADDR_VAR 0 2
64115: PUSH
64116: LD_VAR 0 1
64120: PUSH
64121: LD_INT 0
64123: DIFF
64124: ST_TO_ADDR
// if not result [ 1 ] then
64125: LD_VAR 0 2
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: NOT
64134: IFFALSE 64154
// result := Delete ( result , 1 ) ;
64136: LD_ADDR_VAR 0 2
64140: PUSH
64141: LD_VAR 0 2
64145: PPUSH
64146: LD_INT 1
64148: PPUSH
64149: CALL_OW 3
64153: ST_TO_ADDR
// end ;
64154: LD_VAR 0 2
64158: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64159: LD_INT 0
64161: PPUSH
64162: PPUSH
64163: PPUSH
64164: PPUSH
// sibRocketRange := 25 ;
64165: LD_ADDR_VAR 0 6
64169: PUSH
64170: LD_INT 25
64172: ST_TO_ADDR
// result := false ;
64173: LD_ADDR_VAR 0 4
64177: PUSH
64178: LD_INT 0
64180: ST_TO_ADDR
// for i := 0 to 5 do
64181: LD_ADDR_VAR 0 5
64185: PUSH
64186: DOUBLE
64187: LD_INT 0
64189: DEC
64190: ST_TO_ADDR
64191: LD_INT 5
64193: PUSH
64194: FOR_TO
64195: IFFALSE 64262
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64197: LD_VAR 0 1
64201: PPUSH
64202: LD_VAR 0 5
64206: PPUSH
64207: LD_VAR 0 6
64211: PPUSH
64212: CALL_OW 272
64216: PPUSH
64217: LD_VAR 0 2
64221: PPUSH
64222: LD_VAR 0 5
64226: PPUSH
64227: LD_VAR 0 6
64231: PPUSH
64232: CALL_OW 273
64236: PPUSH
64237: LD_VAR 0 3
64241: PPUSH
64242: CALL_OW 309
64246: IFFALSE 64260
// begin result := true ;
64248: LD_ADDR_VAR 0 4
64252: PUSH
64253: LD_INT 1
64255: ST_TO_ADDR
// exit ;
64256: POP
64257: POP
64258: GO 64264
// end ;
64260: GO 64194
64262: POP
64263: POP
// end ;
64264: LD_VAR 0 4
64268: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64269: LD_INT 0
64271: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64272: LD_VAR 0 1
64276: PPUSH
64277: LD_VAR 0 2
64281: PPUSH
64282: LD_INT 0
64284: PPUSH
64285: LD_INT 0
64287: PPUSH
64288: LD_INT 1
64290: PPUSH
64291: LD_INT 0
64293: PPUSH
64294: CALL_OW 587
// end ;
64298: LD_VAR 0 3
64302: RET
// export function CenterOnNow ( unit ) ; begin
64303: LD_INT 0
64305: PPUSH
// result := IsInUnit ( unit ) ;
64306: LD_ADDR_VAR 0 2
64310: PUSH
64311: LD_VAR 0 1
64315: PPUSH
64316: CALL_OW 310
64320: ST_TO_ADDR
// if not result then
64321: LD_VAR 0 2
64325: NOT
64326: IFFALSE 64338
// result := unit ;
64328: LD_ADDR_VAR 0 2
64332: PUSH
64333: LD_VAR 0 1
64337: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64338: LD_VAR 0 1
64342: PPUSH
64343: CALL_OW 87
// end ;
64347: LD_VAR 0 2
64351: RET
// export function ComMoveHex ( unit , hex ) ; begin
64352: LD_INT 0
64354: PPUSH
// if not hex then
64355: LD_VAR 0 2
64359: NOT
64360: IFFALSE 64364
// exit ;
64362: GO 64417
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64364: LD_VAR 0 2
64368: PUSH
64369: LD_INT 1
64371: ARRAY
64372: PPUSH
64373: LD_VAR 0 2
64377: PUSH
64378: LD_INT 2
64380: ARRAY
64381: PPUSH
64382: CALL_OW 428
64386: IFFALSE 64390
// exit ;
64388: GO 64417
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64390: LD_VAR 0 1
64394: PPUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 1
64402: ARRAY
64403: PPUSH
64404: LD_VAR 0 2
64408: PUSH
64409: LD_INT 2
64411: ARRAY
64412: PPUSH
64413: CALL_OW 111
// end ;
64417: LD_VAR 0 3
64421: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64422: LD_INT 0
64424: PPUSH
64425: PPUSH
64426: PPUSH
// if not unit or not enemy then
64427: LD_VAR 0 1
64431: NOT
64432: PUSH
64433: LD_VAR 0 2
64437: NOT
64438: OR
64439: IFFALSE 64443
// exit ;
64441: GO 64567
// x := GetX ( enemy ) ;
64443: LD_ADDR_VAR 0 4
64447: PUSH
64448: LD_VAR 0 2
64452: PPUSH
64453: CALL_OW 250
64457: ST_TO_ADDR
// y := GetY ( enemy ) ;
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: LD_VAR 0 2
64467: PPUSH
64468: CALL_OW 251
64472: ST_TO_ADDR
// if ValidHex ( x , y ) then
64473: LD_VAR 0 4
64477: PPUSH
64478: LD_VAR 0 5
64482: PPUSH
64483: CALL_OW 488
64487: IFFALSE 64567
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
64489: LD_VAR 0 2
64493: PPUSH
64494: CALL_OW 247
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: IN
64509: PUSH
64510: LD_VAR 0 1
64514: PPUSH
64515: CALL_OW 255
64519: PPUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: CALL_OW 292
64529: AND
64530: IFFALSE 64548
// ComAttackUnit ( unit , enemy ) else
64532: LD_VAR 0 1
64536: PPUSH
64537: LD_VAR 0 2
64541: PPUSH
64542: CALL_OW 115
64546: GO 64567
// ComAgressiveMove ( unit , x , y ) ;
64548: LD_VAR 0 1
64552: PPUSH
64553: LD_VAR 0 4
64557: PPUSH
64558: LD_VAR 0 5
64562: PPUSH
64563: CALL_OW 114
// end ; end_of_file
64567: LD_VAR 0 3
64571: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64572: LD_VAR 0 1
64576: PPUSH
64577: LD_VAR 0 2
64581: PPUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_VAR 0 4
64591: PPUSH
64592: LD_VAR 0 5
64596: PPUSH
64597: LD_VAR 0 6
64601: PPUSH
64602: CALL 2110 0 6
// end ;
64606: PPOPN 6
64608: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64609: LD_INT 0
64611: PPUSH
// begin if not units then
64612: LD_VAR 0 1
64616: NOT
64617: IFFALSE 64621
// exit ;
64619: GO 64621
// end ;
64621: PPOPN 7
64623: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64624: CALL 2014 0 0
// end ;
64628: PPOPN 1
64630: END
