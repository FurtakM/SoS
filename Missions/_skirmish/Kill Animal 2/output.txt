// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 83 0 0
// InitGlobalVariables ;
  18: CALL 59471 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 3
  60: PUSH
  61: LD_INT 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: LIST
  71: LIST
  72: LIST
  73: PPUSH
  74: CALL 395 0 3
// PrepareHunters ( ) ;
  78: CALL 241 0 0
// end ;
  82: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 6
 346: PUSH
 347: LD_EXP 6
 351: PPUSH
 352: LD_EXP 6
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 3
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_EXP 95
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: LD_INT 20
 458: PUSH
 459: LD_INT 19
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: ST_TO_ADDR
// InitHc_All ( ) ;
 466: CALL_OW 584
// for i := 1 to numbers - 2 do
 470: LD_ADDR_VAR 0 5
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 2
 487: MINUS
 488: PUSH
 489: FOR_TO
 490: IFFALSE 631
// begin if numbers [ i ] = 0 then
 492: LD_VAR 0 3
 496: PUSH
 497: LD_VAR 0 5
 501: ARRAY
 502: PUSH
 503: LD_INT 0
 505: EQUAL
 506: IFFALSE 510
// continue ;
 508: GO 489
// hc_class := classes [ i ] ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_VAR 0 7
 519: PUSH
 520: LD_VAR 0 5
 524: ARRAY
 525: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 526: LD_ADDR_OWVAR 29
 530: PUSH
 531: LD_INT 8
 533: PPUSH
 534: LD_INT 12
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 8
 544: PPUSH
 545: LD_INT 12
 547: PPUSH
 548: CALL_OW 12
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 557: LD_ADDR_OWVAR 35
 561: PUSH
 562: LD_INT 5
 564: NEG
 565: PPUSH
 566: LD_INT 5
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_OWVAR 67
 578: PUSH
 579: LD_INT 5
 581: MUL
 582: PLUS
 583: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 584: LD_ADDR_VAR 0 6
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_VAR 0 3
 598: PUSH
 599: LD_VAR 0 5
 603: ARRAY
 604: PUSH
 605: FOR_TO
 606: IFFALSE 627
// PlaceUnitArea ( CreateHuman , area , false ) ;
 608: CALL_OW 44
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
 625: GO 605
 627: POP
 628: POP
// end ;
 629: GO 489
 631: POP
 632: POP
// if not waterArea then
 633: LD_VAR 0 2
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 802
// hc_class := waterClass [ 1 ] ;
 642: LD_ADDR_OWVAR 28
 646: PUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 656: LD_ADDR_OWVAR 29
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 10
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// hc_agressivity := 0 ;
 671: LD_ADDR_OWVAR 35
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 679: LD_ADDR_VAR 0 6
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_VAR 0 3
 693: PUSH
 694: LD_INT 7
 696: ARRAY
 697: PUSH
 698: FOR_TO
 699: IFFALSE 720
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 701: CALL_OW 44
 705: PPUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 49
 718: GO 698
 720: POP
 721: POP
// hc_class := waterClass [ 2 ] ;
 722: LD_ADDR_OWVAR 28
 726: PUSH
 727: LD_VAR 0 8
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 736: LD_ADDR_OWVAR 29
 740: PUSH
 741: LD_INT 10
 743: PUSH
 744: LD_INT 10
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// hc_agressivity := 0 ;
 751: LD_ADDR_OWVAR 35
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: DOUBLE
 765: LD_INT 1
 767: DEC
 768: ST_TO_ADDR
 769: LD_VAR 0 3
 773: PUSH
 774: LD_INT 8
 776: ARRAY
 777: PUSH
 778: FOR_TO
 779: IFFALSE 800
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 781: CALL_OW 44
 785: PPUSH
 786: LD_VAR 0 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
 798: GO 778
 800: POP
 801: POP
// end ; end_of_file
 802: LD_VAR 0 4
 806: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 807: LD_INT 22
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 25
 819: PUSH
 820: LD_INT 15
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: IFFALSE 941
 837: GO 839
 839: DISABLE
 840: LD_INT 0
 842: PPUSH
// begin enable ;
 843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 844: LD_ADDR_VAR 0 1
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 25
 861: PUSH
 862: LD_INT 15
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: PUSH
 878: FOR_IN
 879: IFFALSE 939
// if GetLives ( i ) < 1000 then
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 256
 890: PUSH
 891: LD_INT 1000
 893: LESS
 894: IFFALSE 937
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_VAR 0 1
 927: PPUSH
 928: CALL_OW 74
 932: PPUSH
 933: CALL_OW 115
 937: GO 878
 939: POP
 940: POP
// end ;
 941: PPOPN 1
 943: END
// every 3 do var i , enemy , x , y , d ;
 944: GO 946
 946: DISABLE
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
// begin enable ;
 954: ENABLE
// for i := 2 to huntersAmount do
 955: LD_ADDR_VAR 0 1
 959: PUSH
 960: DOUBLE
 961: LD_INT 2
 963: DEC
 964: ST_TO_ADDR
 965: LD_EXP 3
 969: PUSH
 970: FOR_TO
 971: IFFALSE 1310
// begin if not HasTask ( hunters [ i ] ) then
 973: LD_EXP 6
 977: PUSH
 978: LD_VAR 0 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 314
 988: NOT
 989: IFFALSE 1308
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: LD_INT 22
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PPUSH
1011: LD_EXP 6
1015: PUSH
1016: LD_VAR 0 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 74
1026: ST_TO_ADDR
// if not enemy then
1027: LD_VAR 0 2
1031: NOT
1032: IFFALSE 1036
// continue ;
1034: GO 970
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1036: LD_EXP 6
1040: PUSH
1041: LD_VAR 0 1
1045: ARRAY
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: CALL_OW 296
1056: PUSH
1057: LD_INT 17
1059: LESS
1060: IFFALSE 1163
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1062: LD_EXP 6
1066: PUSH
1067: LD_VAR 0 1
1071: ARRAY
1072: PPUSH
1073: CALL_OW 257
1077: PUSH
1078: LD_INT 11
1080: EQUAL
1081: IFFALSE 1141
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1083: LD_VAR 0 2
1087: PPUSH
1088: CALL_OW 257
1092: PUSH
1093: LD_INT 19
1095: PUSH
1096: LD_INT 20
1098: PUSH
1099: LD_INT 13
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: IN
1107: IFFALSE 1126
// ComCarabine ( hunters [ i ] ) else
1109: LD_EXP 6
1113: PUSH
1114: LD_VAR 0 1
1118: ARRAY
1119: PPUSH
1120: CALL_OW 162
1124: GO 1141
// ComSabre ( hunters [ i ] ) ;
1126: LD_EXP 6
1130: PUSH
1131: LD_VAR 0 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1141: LD_EXP 6
1145: PUSH
1146: LD_VAR 0 1
1150: ARRAY
1151: PPUSH
1152: LD_VAR 0 2
1156: PPUSH
1157: CALL_OW 115
// end else
1161: GO 1308
// begin d := rand ( 0 , 5 ) ;
1163: LD_ADDR_VAR 0 5
1167: PUSH
1168: LD_INT 0
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 12
1178: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: LD_EXP 6
1188: PUSH
1189: LD_VAR 0 1
1193: ARRAY
1194: PPUSH
1195: CALL_OW 250
1199: PPUSH
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_INT 8
1207: PPUSH
1208: CALL_OW 272
1212: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_VAR 0 1
1227: ARRAY
1228: PPUSH
1229: CALL_OW 251
1233: PPUSH
1234: LD_VAR 0 5
1238: PPUSH
1239: LD_INT 8
1241: PPUSH
1242: CALL_OW 273
1246: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 488
1261: PUSH
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: CALL_OW 428
1276: PUSH
1277: LD_INT 0
1279: EQUAL
1280: AND
1281: IFFALSE 1308
// ComMoveXY ( hunters [ i ] , x , y ) ;
1283: LD_EXP 6
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_VAR 0 4
1303: PPUSH
1304: CALL_OW 111
// end ; end ; end ;
1308: GO 970
1310: POP
1311: POP
// end ; end_of_file
1312: PPOPN 5
1314: END
// on UnitGoesToRed ( un ) do var i ;
1315: LD_INT 0
1317: PPUSH
// begin if GetSide ( un ) = 1 then
1318: LD_VAR 0 1
1322: PPUSH
1323: CALL_OW 255
1327: PUSH
1328: LD_INT 1
1330: EQUAL
1331: IFFALSE 1340
// YouLost ( hunt2 ) ;
1333: LD_STRING hunt2
1335: PPUSH
1336: CALL_OW 104
// if GetSide ( un ) > 1 then
1340: LD_VAR 0 1
1344: PPUSH
1345: CALL_OW 255
1349: PUSH
1350: LD_INT 1
1352: GREATER
1353: IFFALSE 1406
// begin for i := 1 to 6 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: DOUBLE
1361: LD_INT 1
1363: DEC
1364: ST_TO_ADDR
1365: LD_INT 6
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1392
// begin wait ( 0 0$1 ) ;
1371: LD_INT 35
1373: PPUSH
1374: CALL_OW 67
// SetLives ( un , 249 ) ;
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 249
1385: PPUSH
1386: CALL_OW 234
// end ;
1390: GO 1368
1392: POP
1393: POP
// SetLives ( un , 1000 ) ;
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 1000
1401: PPUSH
1402: CALL_OW 234
// end ; end ;
1406: PPOPN 2
1408: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1409: LD_VAR 0 1
1413: PUSH
1414: LD_INT 1
1416: EQUAL
1417: PUSH
1418: LD_VAR 0 2
1422: PUSH
1423: LD_INT 1
1425: GREATER
1426: AND
1427: IFFALSE 1436
// YouLost ( hunt1 ) ;
1429: LD_STRING hunt1
1431: PPUSH
1432: CALL_OW 104
// end ;
1436: PPOPN 2
1438: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1439: LD_INT 0
1441: PPUSH
// begin point := 0 ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1450: LD_VAR 0 1
1454: PPUSH
1455: CALL_OW 257
1459: PUSH
1460: LD_INT 20
1462: DOUBLE
1463: EQUAL
1464: IFTRUE 1468
1466: GO 1479
1468: POP
// point := 10 ; class_horse :
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: LD_INT 10
1476: ST_TO_ADDR
1477: GO 1615
1479: LD_EXP 95
1483: DOUBLE
1484: EQUAL
1485: IFTRUE 1489
1487: GO 1500
1489: POP
// point := 10 ; class_baggie :
1490: LD_ADDR_VAR 0 4
1494: PUSH
1495: LD_INT 10
1497: ST_TO_ADDR
1498: GO 1615
1500: LD_INT 13
1502: DOUBLE
1503: EQUAL
1504: IFTRUE 1508
1506: GO 1519
1508: POP
// point := 5 ; class_phororhacos :
1509: LD_ADDR_VAR 0 4
1513: PUSH
1514: LD_INT 5
1516: ST_TO_ADDR
1517: GO 1615
1519: LD_INT 18
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1538
1527: POP
// point := 10 ; class_tiger :
1528: LD_ADDR_VAR 0 4
1532: PUSH
1533: LD_INT 10
1535: ST_TO_ADDR
1536: GO 1615
1538: LD_INT 14
1540: DOUBLE
1541: EQUAL
1542: IFTRUE 1546
1544: GO 1557
1546: POP
// point := 20 ; class_apeman :
1547: LD_ADDR_VAR 0 4
1551: PUSH
1552: LD_INT 20
1554: ST_TO_ADDR
1555: GO 1615
1557: LD_INT 12
1559: DOUBLE
1560: EQUAL
1561: IFTRUE 1565
1563: GO 1576
1565: POP
// point := 30 ; class_apeman_soldier :
1566: LD_ADDR_VAR 0 4
1570: PUSH
1571: LD_INT 30
1573: ST_TO_ADDR
1574: GO 1615
1576: LD_INT 15
1578: DOUBLE
1579: EQUAL
1580: IFTRUE 1584
1582: GO 1595
1584: POP
// point := 50 ; class_frog :
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: LD_INT 50
1592: ST_TO_ADDR
1593: GO 1615
1595: LD_INT 19
1597: DOUBLE
1598: EQUAL
1599: IFTRUE 1603
1601: GO 1614
1603: POP
// point := 10 ; end ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_INT 10
1611: ST_TO_ADDR
1612: GO 1615
1614: POP
// if point then
1615: LD_VAR 0 4
1619: IFFALSE 1658
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1621: LD_ADDR_EXP 5
1625: PUSH
1626: LD_EXP 5
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_EXP 5
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PUSH
1647: LD_VAR 0 4
1651: PLUS
1652: PPUSH
1653: CALL_OW 1
1657: ST_TO_ADDR
// end ;
1658: PPOPN 4
1660: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1661: LD_INT 22
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PPUSH
1671: CALL_OW 69
1675: PUSH
1676: LD_INT 10
1678: LESS
1679: IFFALSE 1793
1681: GO 1683
1683: DISABLE
// begin enable ;
1684: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: LD_INT 0
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: CALL_OW 12
1701: PUSH
1702: LD_INT 0
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: CALL_OW 12
1712: PUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 4
1718: PPUSH
1719: CALL_OW 12
1723: PUSH
1724: LD_INT 2
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: PUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: CALL_OW 12
1745: PUSH
1746: LD_INT 0
1748: PPUSH
1749: LD_INT 2
1751: PPUSH
1752: CALL_OW 12
1756: PUSH
1757: LD_INT 0
1759: PPUSH
1760: LD_INT 4
1762: PPUSH
1763: CALL_OW 12
1767: PUSH
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 2
1773: PPUSH
1774: CALL_OW 12
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PPUSH
1789: CALL 395 0 3
// end ;
1793: END
// every 0 0$1 do var i ;
1794: GO 1796
1796: DISABLE
1797: LD_INT 0
1799: PPUSH
// begin enable ;
1800: ENABLE
// display_strings := [ ] ;
1801: LD_ADDR_OWVAR 47
1805: PUSH
1806: EMPTY
1807: ST_TO_ADDR
// for i := 1 to huntersAmount do
1808: LD_ADDR_VAR 0 1
1812: PUSH
1813: DOUBLE
1814: LD_INT 1
1816: DEC
1817: ST_TO_ADDR
1818: LD_EXP 3
1822: PUSH
1823: FOR_TO
1824: IFFALSE 1958
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1826: LD_ADDR_OWVAR 47
1830: PUSH
1831: LD_OWVAR 47
1835: PUSH
1836: LD_STRING #player
1838: PUSH
1839: LD_VAR 0 1
1843: STR
1844: PUSH
1845: LD_VAR 0 1
1849: PUSH
1850: LD_EXP 5
1854: PUSH
1855: LD_VAR 0 1
1859: ARRAY
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: ADD
1866: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1867: LD_EXP 5
1871: PUSH
1872: LD_VAR 0 1
1876: ARRAY
1877: PUSH
1878: LD_INT 750
1880: PUSH
1881: LD_INT 1250
1883: PUSH
1884: LD_INT 2000
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_OWVAR 67
1896: ARRAY
1897: GREATEREQUAL
1898: IFFALSE 1956
// begin if i = 1 then
1900: LD_VAR 0 1
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: IFFALSE 1949
// begin DialogueOn ;
1910: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1914: LD_STRING ACH_HUNT
1916: PPUSH
1917: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1921: LD_ADDR_OWVAR 47
1925: PUSH
1926: LD_STRING #hunting-win
1928: PUSH
1929: EMPTY
1930: LIST
1931: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1932: LD_INT 175
1934: PPUSH
1935: CALL_OW 68
// YouWin ;
1939: CALL_OW 103
// DialogueOff ;
1943: CALL_OW 7
// end else
1947: GO 1956
// YouLost ( hunt3 ) ;
1949: LD_STRING hunt3
1951: PPUSH
1952: CALL_OW 104
// end ; end ;
1956: GO 1823
1958: POP
1959: POP
// end ; end_of_file end_of_file
1960: PPOPN 1
1962: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1963: LD_INT 0
1965: PPUSH
// if p2 = 100 then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 100
1973: EQUAL
1974: IFFALSE 2977
// begin if not StreamModeActive then
1976: LD_EXP 7
1980: NOT
1981: IFFALSE 1991
// StreamModeActive := true ;
1983: LD_ADDR_EXP 7
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if p3 = 0 then
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 0
1998: EQUAL
1999: IFFALSE 2005
// InitStreamMode ;
2001: CALL 3137 0 0
// if p3 = 1 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 1
2012: EQUAL
2013: IFFALSE 2023
// sRocket := true ;
2015: LD_ADDR_EXP 12
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// if p3 = 2 then
2023: LD_VAR 0 3
2027: PUSH
2028: LD_INT 2
2030: EQUAL
2031: IFFALSE 2041
// sSpeed := true ;
2033: LD_ADDR_EXP 11
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// if p3 = 3 then
2041: LD_VAR 0 3
2045: PUSH
2046: LD_INT 3
2048: EQUAL
2049: IFFALSE 2059
// sEngine := true ;
2051: LD_ADDR_EXP 13
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 4 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 4
2066: EQUAL
2067: IFFALSE 2077
// sSpec := true ;
2069: LD_ADDR_EXP 10
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// if p3 = 5 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 5
2084: EQUAL
2085: IFFALSE 2095
// sLevel := true ;
2087: LD_ADDR_EXP 14
2091: PUSH
2092: LD_INT 1
2094: ST_TO_ADDR
// if p3 = 6 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 6
2102: EQUAL
2103: IFFALSE 2113
// sArmoury := true ;
2105: LD_ADDR_EXP 15
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// if p3 = 7 then
2113: LD_VAR 0 3
2117: PUSH
2118: LD_INT 7
2120: EQUAL
2121: IFFALSE 2131
// sRadar := true ;
2123: LD_ADDR_EXP 16
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// if p3 = 8 then
2131: LD_VAR 0 3
2135: PUSH
2136: LD_INT 8
2138: EQUAL
2139: IFFALSE 2149
// sBunker := true ;
2141: LD_ADDR_EXP 17
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if p3 = 9 then
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 9
2156: EQUAL
2157: IFFALSE 2167
// sHack := true ;
2159: LD_ADDR_EXP 18
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// if p3 = 10 then
2167: LD_VAR 0 3
2171: PUSH
2172: LD_INT 10
2174: EQUAL
2175: IFFALSE 2185
// sFire := true ;
2177: LD_ADDR_EXP 19
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// if p3 = 11 then
2185: LD_VAR 0 3
2189: PUSH
2190: LD_INT 11
2192: EQUAL
2193: IFFALSE 2203
// sRefresh := true ;
2195: LD_ADDR_EXP 20
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// if p3 = 12 then
2203: LD_VAR 0 3
2207: PUSH
2208: LD_INT 12
2210: EQUAL
2211: IFFALSE 2221
// sExp := true ;
2213: LD_ADDR_EXP 21
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// if p3 = 13 then
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 13
2228: EQUAL
2229: IFFALSE 2239
// sDepot := true ;
2231: LD_ADDR_EXP 22
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// if p3 = 14 then
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 14
2246: EQUAL
2247: IFFALSE 2257
// sFlag := true ;
2249: LD_ADDR_EXP 23
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// if p3 = 15 then
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 15
2264: EQUAL
2265: IFFALSE 2275
// sKamikadze := true ;
2267: LD_ADDR_EXP 31
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// if p3 = 16 then
2275: LD_VAR 0 3
2279: PUSH
2280: LD_INT 16
2282: EQUAL
2283: IFFALSE 2293
// sTroll := true ;
2285: LD_ADDR_EXP 32
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// if p3 = 17 then
2293: LD_VAR 0 3
2297: PUSH
2298: LD_INT 17
2300: EQUAL
2301: IFFALSE 2311
// sSlow := true ;
2303: LD_ADDR_EXP 33
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// if p3 = 18 then
2311: LD_VAR 0 3
2315: PUSH
2316: LD_INT 18
2318: EQUAL
2319: IFFALSE 2329
// sLack := true ;
2321: LD_ADDR_EXP 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// if p3 = 19 then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 19
2336: EQUAL
2337: IFFALSE 2347
// sTank := true ;
2339: LD_ADDR_EXP 36
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// if p3 = 20 then
2347: LD_VAR 0 3
2351: PUSH
2352: LD_INT 20
2354: EQUAL
2355: IFFALSE 2365
// sRemote := true ;
2357: LD_ADDR_EXP 37
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// if p3 = 21 then
2365: LD_VAR 0 3
2369: PUSH
2370: LD_INT 21
2372: EQUAL
2373: IFFALSE 2383
// sPowell := true ;
2375: LD_ADDR_EXP 38
2379: PUSH
2380: LD_INT 1
2382: ST_TO_ADDR
// if p3 = 22 then
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 22
2390: EQUAL
2391: IFFALSE 2401
// sTeleport := true ;
2393: LD_ADDR_EXP 41
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// if p3 = 23 then
2401: LD_VAR 0 3
2405: PUSH
2406: LD_INT 23
2408: EQUAL
2409: IFFALSE 2419
// sOilTower := true ;
2411: LD_ADDR_EXP 43
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// if p3 = 24 then
2419: LD_VAR 0 3
2423: PUSH
2424: LD_INT 24
2426: EQUAL
2427: IFFALSE 2437
// sShovel := true ;
2429: LD_ADDR_EXP 44
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// if p3 = 25 then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 25
2444: EQUAL
2445: IFFALSE 2455
// sSheik := true ;
2447: LD_ADDR_EXP 45
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// if p3 = 26 then
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 26
2462: EQUAL
2463: IFFALSE 2473
// sEarthquake := true ;
2465: LD_ADDR_EXP 47
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// if p3 = 27 then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 27
2480: EQUAL
2481: IFFALSE 2491
// sAI := true ;
2483: LD_ADDR_EXP 48
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// if p3 = 28 then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 28
2498: EQUAL
2499: IFFALSE 2509
// sCargo := true ;
2501: LD_ADDR_EXP 51
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// if p3 = 29 then
2509: LD_VAR 0 3
2513: PUSH
2514: LD_INT 29
2516: EQUAL
2517: IFFALSE 2527
// sDLaser := true ;
2519: LD_ADDR_EXP 52
2523: PUSH
2524: LD_INT 1
2526: ST_TO_ADDR
// if p3 = 30 then
2527: LD_VAR 0 3
2531: PUSH
2532: LD_INT 30
2534: EQUAL
2535: IFFALSE 2545
// sExchange := true ;
2537: LD_ADDR_EXP 53
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// if p3 = 31 then
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 31
2552: EQUAL
2553: IFFALSE 2563
// sFac := true ;
2555: LD_ADDR_EXP 54
2559: PUSH
2560: LD_INT 1
2562: ST_TO_ADDR
// if p3 = 32 then
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 32
2570: EQUAL
2571: IFFALSE 2581
// sPower := true ;
2573: LD_ADDR_EXP 55
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// if p3 = 33 then
2581: LD_VAR 0 3
2585: PUSH
2586: LD_INT 33
2588: EQUAL
2589: IFFALSE 2599
// sRandom := true ;
2591: LD_ADDR_EXP 56
2595: PUSH
2596: LD_INT 1
2598: ST_TO_ADDR
// if p3 = 34 then
2599: LD_VAR 0 3
2603: PUSH
2604: LD_INT 34
2606: EQUAL
2607: IFFALSE 2617
// sShield := true ;
2609: LD_ADDR_EXP 57
2613: PUSH
2614: LD_INT 1
2616: ST_TO_ADDR
// if p3 = 35 then
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 35
2624: EQUAL
2625: IFFALSE 2635
// sTime := true ;
2627: LD_ADDR_EXP 58
2631: PUSH
2632: LD_INT 1
2634: ST_TO_ADDR
// if p3 = 36 then
2635: LD_VAR 0 3
2639: PUSH
2640: LD_INT 36
2642: EQUAL
2643: IFFALSE 2653
// sTools := true ;
2645: LD_ADDR_EXP 59
2649: PUSH
2650: LD_INT 1
2652: ST_TO_ADDR
// if p3 = 101 then
2653: LD_VAR 0 3
2657: PUSH
2658: LD_INT 101
2660: EQUAL
2661: IFFALSE 2671
// sSold := true ;
2663: LD_ADDR_EXP 24
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// if p3 = 102 then
2671: LD_VAR 0 3
2675: PUSH
2676: LD_INT 102
2678: EQUAL
2679: IFFALSE 2689
// sDiff := true ;
2681: LD_ADDR_EXP 25
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// if p3 = 103 then
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 103
2696: EQUAL
2697: IFFALSE 2707
// sFog := true ;
2699: LD_ADDR_EXP 28
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// if p3 = 104 then
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 104
2714: EQUAL
2715: IFFALSE 2725
// sReset := true ;
2717: LD_ADDR_EXP 29
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// if p3 = 105 then
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 105
2732: EQUAL
2733: IFFALSE 2743
// sSun := true ;
2735: LD_ADDR_EXP 30
2739: PUSH
2740: LD_INT 1
2742: ST_TO_ADDR
// if p3 = 106 then
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 106
2750: EQUAL
2751: IFFALSE 2761
// sTiger := true ;
2753: LD_ADDR_EXP 26
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// if p3 = 107 then
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 107
2768: EQUAL
2769: IFFALSE 2779
// sBomb := true ;
2771: LD_ADDR_EXP 27
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// if p3 = 108 then
2779: LD_VAR 0 3
2783: PUSH
2784: LD_INT 108
2786: EQUAL
2787: IFFALSE 2797
// sWound := true ;
2789: LD_ADDR_EXP 35
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// if p3 = 109 then
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 109
2804: EQUAL
2805: IFFALSE 2815
// sBetray := true ;
2807: LD_ADDR_EXP 39
2811: PUSH
2812: LD_INT 1
2814: ST_TO_ADDR
// if p3 = 110 then
2815: LD_VAR 0 3
2819: PUSH
2820: LD_INT 110
2822: EQUAL
2823: IFFALSE 2833
// sContamin := true ;
2825: LD_ADDR_EXP 40
2829: PUSH
2830: LD_INT 1
2832: ST_TO_ADDR
// if p3 = 111 then
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 111
2840: EQUAL
2841: IFFALSE 2851
// sOil := true ;
2843: LD_ADDR_EXP 42
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// if p3 = 112 then
2851: LD_VAR 0 3
2855: PUSH
2856: LD_INT 112
2858: EQUAL
2859: IFFALSE 2869
// sStu := true ;
2861: LD_ADDR_EXP 46
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// if p3 = 113 then
2869: LD_VAR 0 3
2873: PUSH
2874: LD_INT 113
2876: EQUAL
2877: IFFALSE 2887
// sBazooka := true ;
2879: LD_ADDR_EXP 49
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// if p3 = 114 then
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 114
2894: EQUAL
2895: IFFALSE 2905
// sMortar := true ;
2897: LD_ADDR_EXP 50
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// if p3 = 115 then
2905: LD_VAR 0 3
2909: PUSH
2910: LD_INT 115
2912: EQUAL
2913: IFFALSE 2923
// sRanger := true ;
2915: LD_ADDR_EXP 60
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// if p3 = 116 then
2923: LD_VAR 0 3
2927: PUSH
2928: LD_INT 116
2930: EQUAL
2931: IFFALSE 2941
// sComputer := true ;
2933: LD_ADDR_EXP 61
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// if p3 = 117 then
2941: LD_VAR 0 3
2945: PUSH
2946: LD_INT 117
2948: EQUAL
2949: IFFALSE 2959
// s30 := true ;
2951: LD_ADDR_EXP 62
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// if p3 = 118 then
2959: LD_VAR 0 3
2963: PUSH
2964: LD_INT 118
2966: EQUAL
2967: IFFALSE 2977
// s60 := true ;
2969: LD_ADDR_EXP 63
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// end ; if p2 = 101 then
2977: LD_VAR 0 2
2981: PUSH
2982: LD_INT 101
2984: EQUAL
2985: IFFALSE 3113
// begin case p3 of 1 :
2987: LD_VAR 0 3
2991: PUSH
2992: LD_INT 1
2994: DOUBLE
2995: EQUAL
2996: IFTRUE 3000
2998: GO 3007
3000: POP
// hHackUnlimitedResources ; 2 :
3001: CALL 14709 0 0
3005: GO 3113
3007: LD_INT 2
3009: DOUBLE
3010: EQUAL
3011: IFTRUE 3015
3013: GO 3022
3015: POP
// hHackSetLevel10 ; 3 :
3016: CALL 14842 0 0
3020: GO 3113
3022: LD_INT 3
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3037
3030: POP
// hHackSetLevel10YourUnits ; 4 :
3031: CALL 14927 0 0
3035: GO 3113
3037: LD_INT 4
3039: DOUBLE
3040: EQUAL
3041: IFTRUE 3045
3043: GO 3052
3045: POP
// hHackInvincible ; 5 :
3046: CALL 15375 0 0
3050: GO 3113
3052: LD_INT 5
3054: DOUBLE
3055: EQUAL
3056: IFTRUE 3060
3058: GO 3067
3060: POP
// hHackInvisible ; 6 :
3061: CALL 15486 0 0
3065: GO 3113
3067: LD_INT 6
3069: DOUBLE
3070: EQUAL
3071: IFTRUE 3075
3073: GO 3082
3075: POP
// hHackChangeYourSide ; 7 :
3076: CALL 15543 0 0
3080: GO 3113
3082: LD_INT 7
3084: DOUBLE
3085: EQUAL
3086: IFTRUE 3090
3088: GO 3097
3090: POP
// hHackChangeUnitSide ; 8 :
3091: CALL 15585 0 0
3095: GO 3113
3097: LD_INT 8
3099: DOUBLE
3100: EQUAL
3101: IFTRUE 3105
3103: GO 3112
3105: POP
// hHackFog ; end ;
3106: CALL 15686 0 0
3110: GO 3113
3112: POP
// end ; end ;
3113: LD_VAR 0 7
3117: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3118: GO 3120
3120: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3121: LD_STRING initStreamRollete();
3123: PPUSH
3124: CALL_OW 559
// InitStreamMode ;
3128: CALL 3137 0 0
// DefineStreamItems ( ) ;
3132: CALL 3601 0 0
// end ;
3136: END
// function InitStreamMode ; begin
3137: LD_INT 0
3139: PPUSH
// streamModeActive := false ;
3140: LD_ADDR_EXP 7
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// normalCounter := 36 ;
3148: LD_ADDR_EXP 8
3152: PUSH
3153: LD_INT 36
3155: ST_TO_ADDR
// hardcoreCounter := 16 ;
3156: LD_ADDR_EXP 9
3160: PUSH
3161: LD_INT 16
3163: ST_TO_ADDR
// sRocket := false ;
3164: LD_ADDR_EXP 12
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// sSpeed := false ;
3172: LD_ADDR_EXP 11
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// sEngine := false ;
3180: LD_ADDR_EXP 13
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// sSpec := false ;
3188: LD_ADDR_EXP 10
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// sLevel := false ;
3196: LD_ADDR_EXP 14
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// sArmoury := false ;
3204: LD_ADDR_EXP 15
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// sRadar := false ;
3212: LD_ADDR_EXP 16
3216: PUSH
3217: LD_INT 0
3219: ST_TO_ADDR
// sBunker := false ;
3220: LD_ADDR_EXP 17
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// sHack := false ;
3228: LD_ADDR_EXP 18
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// sFire := false ;
3236: LD_ADDR_EXP 19
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// sRefresh := false ;
3244: LD_ADDR_EXP 20
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// sExp := false ;
3252: LD_ADDR_EXP 21
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// sDepot := false ;
3260: LD_ADDR_EXP 22
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// sFlag := false ;
3268: LD_ADDR_EXP 23
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// sKamikadze := false ;
3276: LD_ADDR_EXP 31
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// sTroll := false ;
3284: LD_ADDR_EXP 32
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// sSlow := false ;
3292: LD_ADDR_EXP 33
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// sLack := false ;
3300: LD_ADDR_EXP 34
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// sTank := false ;
3308: LD_ADDR_EXP 36
3312: PUSH
3313: LD_INT 0
3315: ST_TO_ADDR
// sRemote := false ;
3316: LD_ADDR_EXP 37
3320: PUSH
3321: LD_INT 0
3323: ST_TO_ADDR
// sPowell := false ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// sTeleport := false ;
3332: LD_ADDR_EXP 41
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// sOilTower := false ;
3340: LD_ADDR_EXP 43
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// sShovel := false ;
3348: LD_ADDR_EXP 44
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// sSheik := false ;
3356: LD_ADDR_EXP 45
3360: PUSH
3361: LD_INT 0
3363: ST_TO_ADDR
// sEarthquake := false ;
3364: LD_ADDR_EXP 47
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// sAI := false ;
3372: LD_ADDR_EXP 48
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sCargo := false ;
3380: LD_ADDR_EXP 51
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sDLaser := false ;
3388: LD_ADDR_EXP 52
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sExchange := false ;
3396: LD_ADDR_EXP 53
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sFac := false ;
3404: LD_ADDR_EXP 54
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sPower := false ;
3412: LD_ADDR_EXP 55
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sRandom := false ;
3420: LD_ADDR_EXP 56
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sShield := false ;
3428: LD_ADDR_EXP 57
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sTime := false ;
3436: LD_ADDR_EXP 58
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sTools := false ;
3444: LD_ADDR_EXP 59
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sSold := false ;
3452: LD_ADDR_EXP 24
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sDiff := false ;
3460: LD_ADDR_EXP 25
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sFog := false ;
3468: LD_ADDR_EXP 28
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sReset := false ;
3476: LD_ADDR_EXP 29
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// sSun := false ;
3484: LD_ADDR_EXP 30
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// sTiger := false ;
3492: LD_ADDR_EXP 26
3496: PUSH
3497: LD_INT 0
3499: ST_TO_ADDR
// sBomb := false ;
3500: LD_ADDR_EXP 27
3504: PUSH
3505: LD_INT 0
3507: ST_TO_ADDR
// sWound := false ;
3508: LD_ADDR_EXP 35
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// sBetray := false ;
3516: LD_ADDR_EXP 39
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// sContamin := false ;
3524: LD_ADDR_EXP 40
3528: PUSH
3529: LD_INT 0
3531: ST_TO_ADDR
// sOil := false ;
3532: LD_ADDR_EXP 42
3536: PUSH
3537: LD_INT 0
3539: ST_TO_ADDR
// sStu := false ;
3540: LD_ADDR_EXP 46
3544: PUSH
3545: LD_INT 0
3547: ST_TO_ADDR
// sBazooka := false ;
3548: LD_ADDR_EXP 49
3552: PUSH
3553: LD_INT 0
3555: ST_TO_ADDR
// sMortar := false ;
3556: LD_ADDR_EXP 50
3560: PUSH
3561: LD_INT 0
3563: ST_TO_ADDR
// sRanger := false ;
3564: LD_ADDR_EXP 60
3568: PUSH
3569: LD_INT 0
3571: ST_TO_ADDR
// sComputer := false ;
3572: LD_ADDR_EXP 61
3576: PUSH
3577: LD_INT 0
3579: ST_TO_ADDR
// s30 := false ;
3580: LD_ADDR_EXP 62
3584: PUSH
3585: LD_INT 0
3587: ST_TO_ADDR
// s60 := false ;
3588: LD_ADDR_EXP 63
3592: PUSH
3593: LD_INT 0
3595: ST_TO_ADDR
// end ;
3596: LD_VAR 0 1
3600: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3601: LD_INT 0
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
// result := [ ] ;
3608: LD_ADDR_VAR 0 1
3612: PUSH
3613: EMPTY
3614: ST_TO_ADDR
// if campaign_id = 1 then
3615: LD_OWVAR 69
3619: PUSH
3620: LD_INT 1
3622: EQUAL
3623: IFFALSE 6789
// begin case mission_number of 1 :
3625: LD_OWVAR 70
3629: PUSH
3630: LD_INT 1
3632: DOUBLE
3633: EQUAL
3634: IFTRUE 3638
3636: GO 3714
3638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3639: LD_ADDR_VAR 0 1
3643: PUSH
3644: LD_INT 2
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: LD_INT 11
3652: PUSH
3653: LD_INT 12
3655: PUSH
3656: LD_INT 15
3658: PUSH
3659: LD_INT 16
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 23
3667: PUSH
3668: LD_INT 26
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 101
3684: PUSH
3685: LD_INT 102
3687: PUSH
3688: LD_INT 106
3690: PUSH
3691: LD_INT 116
3693: PUSH
3694: LD_INT 117
3696: PUSH
3697: LD_INT 118
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: ST_TO_ADDR
3712: GO 6787
3714: LD_INT 2
3716: DOUBLE
3717: EQUAL
3718: IFTRUE 3722
3720: GO 3806
3722: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3723: LD_ADDR_VAR 0 1
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 4
3733: PUSH
3734: LD_INT 11
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: LD_INT 15
3742: PUSH
3743: LD_INT 16
3745: PUSH
3746: LD_INT 22
3748: PUSH
3749: LD_INT 23
3751: PUSH
3752: LD_INT 26
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 101
3768: PUSH
3769: LD_INT 102
3771: PUSH
3772: LD_INT 105
3774: PUSH
3775: LD_INT 106
3777: PUSH
3778: LD_INT 108
3780: PUSH
3781: LD_INT 116
3783: PUSH
3784: LD_INT 117
3786: PUSH
3787: LD_INT 118
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: ST_TO_ADDR
3804: GO 6787
3806: LD_INT 3
3808: DOUBLE
3809: EQUAL
3810: IFTRUE 3814
3812: GO 3902
3814: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3815: LD_ADDR_VAR 0 1
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 11
3831: PUSH
3832: LD_INT 12
3834: PUSH
3835: LD_INT 15
3837: PUSH
3838: LD_INT 16
3840: PUSH
3841: LD_INT 22
3843: PUSH
3844: LD_INT 26
3846: PUSH
3847: LD_INT 36
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 101
3864: PUSH
3865: LD_INT 102
3867: PUSH
3868: LD_INT 105
3870: PUSH
3871: LD_INT 106
3873: PUSH
3874: LD_INT 108
3876: PUSH
3877: LD_INT 116
3879: PUSH
3880: LD_INT 117
3882: PUSH
3883: LD_INT 118
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: ST_TO_ADDR
3900: GO 6787
3902: LD_INT 4
3904: DOUBLE
3905: EQUAL
3906: IFTRUE 3910
3908: GO 4006
3910: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3911: LD_ADDR_VAR 0 1
3915: PUSH
3916: LD_INT 2
3918: PUSH
3919: LD_INT 4
3921: PUSH
3922: LD_INT 5
3924: PUSH
3925: LD_INT 8
3927: PUSH
3928: LD_INT 11
3930: PUSH
3931: LD_INT 12
3933: PUSH
3934: LD_INT 15
3936: PUSH
3937: LD_INT 16
3939: PUSH
3940: LD_INT 22
3942: PUSH
3943: LD_INT 23
3945: PUSH
3946: LD_INT 26
3948: PUSH
3949: LD_INT 36
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 101
3968: PUSH
3969: LD_INT 102
3971: PUSH
3972: LD_INT 105
3974: PUSH
3975: LD_INT 106
3977: PUSH
3978: LD_INT 108
3980: PUSH
3981: LD_INT 116
3983: PUSH
3984: LD_INT 117
3986: PUSH
3987: LD_INT 118
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: ST_TO_ADDR
4004: GO 6787
4006: LD_INT 5
4008: DOUBLE
4009: EQUAL
4010: IFTRUE 4014
4012: GO 4126
4014: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4015: LD_ADDR_VAR 0 1
4019: PUSH
4020: LD_INT 2
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 5
4028: PUSH
4029: LD_INT 6
4031: PUSH
4032: LD_INT 8
4034: PUSH
4035: LD_INT 11
4037: PUSH
4038: LD_INT 12
4040: PUSH
4041: LD_INT 15
4043: PUSH
4044: LD_INT 16
4046: PUSH
4047: LD_INT 22
4049: PUSH
4050: LD_INT 23
4052: PUSH
4053: LD_INT 25
4055: PUSH
4056: LD_INT 26
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 101
4080: PUSH
4081: LD_INT 102
4083: PUSH
4084: LD_INT 105
4086: PUSH
4087: LD_INT 106
4089: PUSH
4090: LD_INT 108
4092: PUSH
4093: LD_INT 109
4095: PUSH
4096: LD_INT 112
4098: PUSH
4099: LD_INT 116
4101: PUSH
4102: LD_INT 117
4104: PUSH
4105: LD_INT 118
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: ST_TO_ADDR
4124: GO 6787
4126: LD_INT 6
4128: DOUBLE
4129: EQUAL
4130: IFTRUE 4134
4132: GO 4266
4134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4135: LD_ADDR_VAR 0 1
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: LD_INT 8
4154: PUSH
4155: LD_INT 11
4157: PUSH
4158: LD_INT 12
4160: PUSH
4161: LD_INT 15
4163: PUSH
4164: LD_INT 16
4166: PUSH
4167: LD_INT 20
4169: PUSH
4170: LD_INT 21
4172: PUSH
4173: LD_INT 22
4175: PUSH
4176: LD_INT 23
4178: PUSH
4179: LD_INT 25
4181: PUSH
4182: LD_INT 26
4184: PUSH
4185: LD_INT 30
4187: PUSH
4188: LD_INT 31
4190: PUSH
4191: LD_INT 32
4193: PUSH
4194: LD_INT 36
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 101
4220: PUSH
4221: LD_INT 102
4223: PUSH
4224: LD_INT 105
4226: PUSH
4227: LD_INT 106
4229: PUSH
4230: LD_INT 108
4232: PUSH
4233: LD_INT 109
4235: PUSH
4236: LD_INT 112
4238: PUSH
4239: LD_INT 116
4241: PUSH
4242: LD_INT 117
4244: PUSH
4245: LD_INT 118
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: ST_TO_ADDR
4264: GO 6787
4266: LD_INT 7
4268: DOUBLE
4269: EQUAL
4270: IFTRUE 4274
4272: GO 4386
4274: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4275: LD_ADDR_VAR 0 1
4279: PUSH
4280: LD_INT 2
4282: PUSH
4283: LD_INT 4
4285: PUSH
4286: LD_INT 5
4288: PUSH
4289: LD_INT 7
4291: PUSH
4292: LD_INT 11
4294: PUSH
4295: LD_INT 12
4297: PUSH
4298: LD_INT 15
4300: PUSH
4301: LD_INT 16
4303: PUSH
4304: LD_INT 20
4306: PUSH
4307: LD_INT 21
4309: PUSH
4310: LD_INT 22
4312: PUSH
4313: LD_INT 23
4315: PUSH
4316: LD_INT 25
4318: PUSH
4319: LD_INT 26
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 101
4340: PUSH
4341: LD_INT 102
4343: PUSH
4344: LD_INT 103
4346: PUSH
4347: LD_INT 105
4349: PUSH
4350: LD_INT 106
4352: PUSH
4353: LD_INT 108
4355: PUSH
4356: LD_INT 112
4358: PUSH
4359: LD_INT 116
4361: PUSH
4362: LD_INT 117
4364: PUSH
4365: LD_INT 118
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
4384: GO 6787
4386: LD_INT 8
4388: DOUBLE
4389: EQUAL
4390: IFTRUE 4394
4392: GO 4534
4394: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4395: LD_ADDR_VAR 0 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 4
4405: PUSH
4406: LD_INT 5
4408: PUSH
4409: LD_INT 6
4411: PUSH
4412: LD_INT 7
4414: PUSH
4415: LD_INT 8
4417: PUSH
4418: LD_INT 11
4420: PUSH
4421: LD_INT 12
4423: PUSH
4424: LD_INT 15
4426: PUSH
4427: LD_INT 16
4429: PUSH
4430: LD_INT 20
4432: PUSH
4433: LD_INT 21
4435: PUSH
4436: LD_INT 22
4438: PUSH
4439: LD_INT 23
4441: PUSH
4442: LD_INT 25
4444: PUSH
4445: LD_INT 26
4447: PUSH
4448: LD_INT 30
4450: PUSH
4451: LD_INT 31
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: LD_INT 36
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 101
4484: PUSH
4485: LD_INT 102
4487: PUSH
4488: LD_INT 103
4490: PUSH
4491: LD_INT 105
4493: PUSH
4494: LD_INT 106
4496: PUSH
4497: LD_INT 108
4499: PUSH
4500: LD_INT 109
4502: PUSH
4503: LD_INT 112
4505: PUSH
4506: LD_INT 116
4508: PUSH
4509: LD_INT 117
4511: PUSH
4512: LD_INT 118
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: ST_TO_ADDR
4532: GO 6787
4534: LD_INT 9
4536: DOUBLE
4537: EQUAL
4538: IFTRUE 4542
4540: GO 4690
4542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4543: LD_ADDR_VAR 0 1
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: LD_INT 4
4553: PUSH
4554: LD_INT 5
4556: PUSH
4557: LD_INT 6
4559: PUSH
4560: LD_INT 7
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 11
4568: PUSH
4569: LD_INT 12
4571: PUSH
4572: LD_INT 15
4574: PUSH
4575: LD_INT 16
4577: PUSH
4578: LD_INT 20
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 22
4586: PUSH
4587: LD_INT 23
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 26
4595: PUSH
4596: LD_INT 28
4598: PUSH
4599: LD_INT 30
4601: PUSH
4602: LD_INT 31
4604: PUSH
4605: LD_INT 32
4607: PUSH
4608: LD_INT 36
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 101
4636: PUSH
4637: LD_INT 102
4639: PUSH
4640: LD_INT 103
4642: PUSH
4643: LD_INT 105
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 108
4651: PUSH
4652: LD_INT 109
4654: PUSH
4655: LD_INT 112
4657: PUSH
4658: LD_INT 114
4660: PUSH
4661: LD_INT 116
4663: PUSH
4664: LD_INT 117
4666: PUSH
4667: LD_INT 118
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: ST_TO_ADDR
4688: GO 6787
4690: LD_INT 10
4692: DOUBLE
4693: EQUAL
4694: IFTRUE 4698
4696: GO 4894
4698: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4699: LD_ADDR_VAR 0 1
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: LD_INT 4
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: LD_INT 6
4715: PUSH
4716: LD_INT 7
4718: PUSH
4719: LD_INT 8
4721: PUSH
4722: LD_INT 9
4724: PUSH
4725: LD_INT 10
4727: PUSH
4728: LD_INT 11
4730: PUSH
4731: LD_INT 12
4733: PUSH
4734: LD_INT 13
4736: PUSH
4737: LD_INT 14
4739: PUSH
4740: LD_INT 15
4742: PUSH
4743: LD_INT 16
4745: PUSH
4746: LD_INT 17
4748: PUSH
4749: LD_INT 18
4751: PUSH
4752: LD_INT 19
4754: PUSH
4755: LD_INT 20
4757: PUSH
4758: LD_INT 21
4760: PUSH
4761: LD_INT 22
4763: PUSH
4764: LD_INT 23
4766: PUSH
4767: LD_INT 24
4769: PUSH
4770: LD_INT 25
4772: PUSH
4773: LD_INT 26
4775: PUSH
4776: LD_INT 28
4778: PUSH
4779: LD_INT 30
4781: PUSH
4782: LD_INT 31
4784: PUSH
4785: LD_INT 32
4787: PUSH
4788: LD_INT 36
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 101
4824: PUSH
4825: LD_INT 102
4827: PUSH
4828: LD_INT 103
4830: PUSH
4831: LD_INT 104
4833: PUSH
4834: LD_INT 105
4836: PUSH
4837: LD_INT 106
4839: PUSH
4840: LD_INT 107
4842: PUSH
4843: LD_INT 108
4845: PUSH
4846: LD_INT 109
4848: PUSH
4849: LD_INT 110
4851: PUSH
4852: LD_INT 111
4854: PUSH
4855: LD_INT 112
4857: PUSH
4858: LD_INT 114
4860: PUSH
4861: LD_INT 116
4863: PUSH
4864: LD_INT 117
4866: PUSH
4867: LD_INT 118
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: ST_TO_ADDR
4892: GO 6787
4894: LD_INT 11
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 5106
4902: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4903: LD_ADDR_VAR 0 1
4907: PUSH
4908: LD_INT 2
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: LD_INT 4
4916: PUSH
4917: LD_INT 5
4919: PUSH
4920: LD_INT 6
4922: PUSH
4923: LD_INT 7
4925: PUSH
4926: LD_INT 8
4928: PUSH
4929: LD_INT 9
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: LD_INT 11
4937: PUSH
4938: LD_INT 12
4940: PUSH
4941: LD_INT 13
4943: PUSH
4944: LD_INT 14
4946: PUSH
4947: LD_INT 15
4949: PUSH
4950: LD_INT 16
4952: PUSH
4953: LD_INT 17
4955: PUSH
4956: LD_INT 18
4958: PUSH
4959: LD_INT 19
4961: PUSH
4962: LD_INT 20
4964: PUSH
4965: LD_INT 21
4967: PUSH
4968: LD_INT 22
4970: PUSH
4971: LD_INT 23
4973: PUSH
4974: LD_INT 24
4976: PUSH
4977: LD_INT 25
4979: PUSH
4980: LD_INT 26
4982: PUSH
4983: LD_INT 28
4985: PUSH
4986: LD_INT 30
4988: PUSH
4989: LD_INT 31
4991: PUSH
4992: LD_INT 32
4994: PUSH
4995: LD_INT 34
4997: PUSH
4998: LD_INT 36
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 101
5036: PUSH
5037: LD_INT 102
5039: PUSH
5040: LD_INT 103
5042: PUSH
5043: LD_INT 104
5045: PUSH
5046: LD_INT 105
5048: PUSH
5049: LD_INT 106
5051: PUSH
5052: LD_INT 107
5054: PUSH
5055: LD_INT 108
5057: PUSH
5058: LD_INT 109
5060: PUSH
5061: LD_INT 110
5063: PUSH
5064: LD_INT 111
5066: PUSH
5067: LD_INT 112
5069: PUSH
5070: LD_INT 114
5072: PUSH
5073: LD_INT 116
5075: PUSH
5076: LD_INT 117
5078: PUSH
5079: LD_INT 118
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: ST_TO_ADDR
5104: GO 6787
5106: LD_INT 12
5108: DOUBLE
5109: EQUAL
5110: IFTRUE 5114
5112: GO 5334
5114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: LD_INT 1
5122: PUSH
5123: LD_INT 2
5125: PUSH
5126: LD_INT 3
5128: PUSH
5129: LD_INT 4
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: LD_INT 6
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 9
5146: PUSH
5147: LD_INT 10
5149: PUSH
5150: LD_INT 11
5152: PUSH
5153: LD_INT 12
5155: PUSH
5156: LD_INT 13
5158: PUSH
5159: LD_INT 14
5161: PUSH
5162: LD_INT 15
5164: PUSH
5165: LD_INT 16
5167: PUSH
5168: LD_INT 17
5170: PUSH
5171: LD_INT 18
5173: PUSH
5174: LD_INT 19
5176: PUSH
5177: LD_INT 20
5179: PUSH
5180: LD_INT 21
5182: PUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 23
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 26
5197: PUSH
5198: LD_INT 27
5200: PUSH
5201: LD_INT 28
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 31
5209: PUSH
5210: LD_INT 32
5212: PUSH
5213: LD_INT 33
5215: PUSH
5216: LD_INT 34
5218: PUSH
5219: LD_INT 36
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 101
5260: PUSH
5261: LD_INT 102
5263: PUSH
5264: LD_INT 103
5266: PUSH
5267: LD_INT 104
5269: PUSH
5270: LD_INT 105
5272: PUSH
5273: LD_INT 106
5275: PUSH
5276: LD_INT 107
5278: PUSH
5279: LD_INT 108
5281: PUSH
5282: LD_INT 109
5284: PUSH
5285: LD_INT 110
5287: PUSH
5288: LD_INT 111
5290: PUSH
5291: LD_INT 112
5293: PUSH
5294: LD_INT 113
5296: PUSH
5297: LD_INT 114
5299: PUSH
5300: LD_INT 116
5302: PUSH
5303: LD_INT 117
5305: PUSH
5306: LD_INT 118
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: ST_TO_ADDR
5332: GO 6787
5334: LD_INT 13
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5550
5342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: LD_INT 1
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: LD_INT 3
5356: PUSH
5357: LD_INT 4
5359: PUSH
5360: LD_INT 5
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: LD_INT 9
5368: PUSH
5369: LD_INT 10
5371: PUSH
5372: LD_INT 11
5374: PUSH
5375: LD_INT 12
5377: PUSH
5378: LD_INT 14
5380: PUSH
5381: LD_INT 15
5383: PUSH
5384: LD_INT 16
5386: PUSH
5387: LD_INT 17
5389: PUSH
5390: LD_INT 18
5392: PUSH
5393: LD_INT 19
5395: PUSH
5396: LD_INT 20
5398: PUSH
5399: LD_INT 21
5401: PUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 23
5407: PUSH
5408: LD_INT 24
5410: PUSH
5411: LD_INT 25
5413: PUSH
5414: LD_INT 26
5416: PUSH
5417: LD_INT 27
5419: PUSH
5420: LD_INT 28
5422: PUSH
5423: LD_INT 30
5425: PUSH
5426: LD_INT 31
5428: PUSH
5429: LD_INT 32
5431: PUSH
5432: LD_INT 33
5434: PUSH
5435: LD_INT 34
5437: PUSH
5438: LD_INT 36
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 101
5476: PUSH
5477: LD_INT 102
5479: PUSH
5480: LD_INT 103
5482: PUSH
5483: LD_INT 104
5485: PUSH
5486: LD_INT 105
5488: PUSH
5489: LD_INT 106
5491: PUSH
5492: LD_INT 107
5494: PUSH
5495: LD_INT 108
5497: PUSH
5498: LD_INT 109
5500: PUSH
5501: LD_INT 110
5503: PUSH
5504: LD_INT 111
5506: PUSH
5507: LD_INT 112
5509: PUSH
5510: LD_INT 113
5512: PUSH
5513: LD_INT 114
5515: PUSH
5516: LD_INT 116
5518: PUSH
5519: LD_INT 117
5521: PUSH
5522: LD_INT 118
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: ST_TO_ADDR
5548: GO 6787
5550: LD_INT 14
5552: DOUBLE
5553: EQUAL
5554: IFTRUE 5558
5556: GO 5782
5558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: LD_INT 4
5575: PUSH
5576: LD_INT 5
5578: PUSH
5579: LD_INT 6
5581: PUSH
5582: LD_INT 7
5584: PUSH
5585: LD_INT 8
5587: PUSH
5588: LD_INT 9
5590: PUSH
5591: LD_INT 10
5593: PUSH
5594: LD_INT 11
5596: PUSH
5597: LD_INT 12
5599: PUSH
5600: LD_INT 13
5602: PUSH
5603: LD_INT 14
5605: PUSH
5606: LD_INT 15
5608: PUSH
5609: LD_INT 16
5611: PUSH
5612: LD_INT 17
5614: PUSH
5615: LD_INT 18
5617: PUSH
5618: LD_INT 19
5620: PUSH
5621: LD_INT 20
5623: PUSH
5624: LD_INT 21
5626: PUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 23
5632: PUSH
5633: LD_INT 24
5635: PUSH
5636: LD_INT 25
5638: PUSH
5639: LD_INT 26
5641: PUSH
5642: LD_INT 27
5644: PUSH
5645: LD_INT 28
5647: PUSH
5648: LD_INT 29
5650: PUSH
5651: LD_INT 30
5653: PUSH
5654: LD_INT 31
5656: PUSH
5657: LD_INT 32
5659: PUSH
5660: LD_INT 33
5662: PUSH
5663: LD_INT 34
5665: PUSH
5666: LD_INT 36
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 101
5708: PUSH
5709: LD_INT 102
5711: PUSH
5712: LD_INT 103
5714: PUSH
5715: LD_INT 104
5717: PUSH
5718: LD_INT 105
5720: PUSH
5721: LD_INT 106
5723: PUSH
5724: LD_INT 107
5726: PUSH
5727: LD_INT 108
5729: PUSH
5730: LD_INT 109
5732: PUSH
5733: LD_INT 110
5735: PUSH
5736: LD_INT 111
5738: PUSH
5739: LD_INT 112
5741: PUSH
5742: LD_INT 113
5744: PUSH
5745: LD_INT 114
5747: PUSH
5748: LD_INT 116
5750: PUSH
5751: LD_INT 117
5753: PUSH
5754: LD_INT 118
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: ST_TO_ADDR
5780: GO 6787
5782: LD_INT 15
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5790
5788: GO 6014
5790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: LD_INT 2
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_INT 4
5807: PUSH
5808: LD_INT 5
5810: PUSH
5811: LD_INT 6
5813: PUSH
5814: LD_INT 7
5816: PUSH
5817: LD_INT 8
5819: PUSH
5820: LD_INT 9
5822: PUSH
5823: LD_INT 10
5825: PUSH
5826: LD_INT 11
5828: PUSH
5829: LD_INT 12
5831: PUSH
5832: LD_INT 13
5834: PUSH
5835: LD_INT 14
5837: PUSH
5838: LD_INT 15
5840: PUSH
5841: LD_INT 16
5843: PUSH
5844: LD_INT 17
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 19
5852: PUSH
5853: LD_INT 20
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 22
5861: PUSH
5862: LD_INT 23
5864: PUSH
5865: LD_INT 24
5867: PUSH
5868: LD_INT 25
5870: PUSH
5871: LD_INT 26
5873: PUSH
5874: LD_INT 27
5876: PUSH
5877: LD_INT 28
5879: PUSH
5880: LD_INT 29
5882: PUSH
5883: LD_INT 30
5885: PUSH
5886: LD_INT 31
5888: PUSH
5889: LD_INT 32
5891: PUSH
5892: LD_INT 33
5894: PUSH
5895: LD_INT 34
5897: PUSH
5898: LD_INT 36
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: PUSH
5938: LD_INT 101
5940: PUSH
5941: LD_INT 102
5943: PUSH
5944: LD_INT 103
5946: PUSH
5947: LD_INT 104
5949: PUSH
5950: LD_INT 105
5952: PUSH
5953: LD_INT 106
5955: PUSH
5956: LD_INT 107
5958: PUSH
5959: LD_INT 108
5961: PUSH
5962: LD_INT 109
5964: PUSH
5965: LD_INT 110
5967: PUSH
5968: LD_INT 111
5970: PUSH
5971: LD_INT 112
5973: PUSH
5974: LD_INT 113
5976: PUSH
5977: LD_INT 114
5979: PUSH
5980: LD_INT 116
5982: PUSH
5983: LD_INT 117
5985: PUSH
5986: LD_INT 118
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: ST_TO_ADDR
6012: GO 6787
6014: LD_INT 16
6016: DOUBLE
6017: EQUAL
6018: IFTRUE 6022
6020: GO 6158
6022: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6023: LD_ADDR_VAR 0 1
6027: PUSH
6028: LD_INT 2
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 7
6039: PUSH
6040: LD_INT 11
6042: PUSH
6043: LD_INT 12
6045: PUSH
6046: LD_INT 15
6048: PUSH
6049: LD_INT 16
6051: PUSH
6052: LD_INT 20
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 23
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: LD_INT 26
6069: PUSH
6070: LD_INT 30
6072: PUSH
6073: LD_INT 31
6075: PUSH
6076: LD_INT 32
6078: PUSH
6079: LD_INT 33
6081: PUSH
6082: LD_INT 34
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 101
6108: PUSH
6109: LD_INT 102
6111: PUSH
6112: LD_INT 103
6114: PUSH
6115: LD_INT 106
6117: PUSH
6118: LD_INT 108
6120: PUSH
6121: LD_INT 112
6123: PUSH
6124: LD_INT 113
6126: PUSH
6127: LD_INT 114
6129: PUSH
6130: LD_INT 116
6132: PUSH
6133: LD_INT 117
6135: PUSH
6136: LD_INT 118
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: ST_TO_ADDR
6156: GO 6787
6158: LD_INT 17
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6390
6166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: LD_INT 2
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: LD_INT 5
6186: PUSH
6187: LD_INT 6
6189: PUSH
6190: LD_INT 7
6192: PUSH
6193: LD_INT 8
6195: PUSH
6196: LD_INT 9
6198: PUSH
6199: LD_INT 10
6201: PUSH
6202: LD_INT 11
6204: PUSH
6205: LD_INT 12
6207: PUSH
6208: LD_INT 13
6210: PUSH
6211: LD_INT 14
6213: PUSH
6214: LD_INT 15
6216: PUSH
6217: LD_INT 16
6219: PUSH
6220: LD_INT 17
6222: PUSH
6223: LD_INT 18
6225: PUSH
6226: LD_INT 19
6228: PUSH
6229: LD_INT 20
6231: PUSH
6232: LD_INT 21
6234: PUSH
6235: LD_INT 22
6237: PUSH
6238: LD_INT 23
6240: PUSH
6241: LD_INT 24
6243: PUSH
6244: LD_INT 25
6246: PUSH
6247: LD_INT 26
6249: PUSH
6250: LD_INT 27
6252: PUSH
6253: LD_INT 28
6255: PUSH
6256: LD_INT 29
6258: PUSH
6259: LD_INT 30
6261: PUSH
6262: LD_INT 31
6264: PUSH
6265: LD_INT 32
6267: PUSH
6268: LD_INT 33
6270: PUSH
6271: LD_INT 34
6273: PUSH
6274: LD_INT 36
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 101
6316: PUSH
6317: LD_INT 102
6319: PUSH
6320: LD_INT 103
6322: PUSH
6323: LD_INT 104
6325: PUSH
6326: LD_INT 105
6328: PUSH
6329: LD_INT 106
6331: PUSH
6332: LD_INT 107
6334: PUSH
6335: LD_INT 108
6337: PUSH
6338: LD_INT 109
6340: PUSH
6341: LD_INT 110
6343: PUSH
6344: LD_INT 111
6346: PUSH
6347: LD_INT 112
6349: PUSH
6350: LD_INT 113
6352: PUSH
6353: LD_INT 114
6355: PUSH
6356: LD_INT 116
6358: PUSH
6359: LD_INT 117
6361: PUSH
6362: LD_INT 118
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: ST_TO_ADDR
6388: GO 6787
6390: LD_INT 18
6392: DOUBLE
6393: EQUAL
6394: IFTRUE 6398
6396: GO 6546
6398: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6399: LD_ADDR_VAR 0 1
6403: PUSH
6404: LD_INT 2
6406: PUSH
6407: LD_INT 4
6409: PUSH
6410: LD_INT 5
6412: PUSH
6413: LD_INT 7
6415: PUSH
6416: LD_INT 11
6418: PUSH
6419: LD_INT 12
6421: PUSH
6422: LD_INT 15
6424: PUSH
6425: LD_INT 16
6427: PUSH
6428: LD_INT 20
6430: PUSH
6431: LD_INT 21
6433: PUSH
6434: LD_INT 22
6436: PUSH
6437: LD_INT 23
6439: PUSH
6440: LD_INT 25
6442: PUSH
6443: LD_INT 26
6445: PUSH
6446: LD_INT 30
6448: PUSH
6449: LD_INT 31
6451: PUSH
6452: LD_INT 32
6454: PUSH
6455: LD_INT 33
6457: PUSH
6458: LD_INT 34
6460: PUSH
6461: LD_INT 35
6463: PUSH
6464: LD_INT 36
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 101
6492: PUSH
6493: LD_INT 102
6495: PUSH
6496: LD_INT 103
6498: PUSH
6499: LD_INT 106
6501: PUSH
6502: LD_INT 108
6504: PUSH
6505: LD_INT 112
6507: PUSH
6508: LD_INT 113
6510: PUSH
6511: LD_INT 114
6513: PUSH
6514: LD_INT 115
6516: PUSH
6517: LD_INT 116
6519: PUSH
6520: LD_INT 117
6522: PUSH
6523: LD_INT 118
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 6787
6546: LD_INT 19
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6786
6554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: LD_INT 6
6577: PUSH
6578: LD_INT 7
6580: PUSH
6581: LD_INT 8
6583: PUSH
6584: LD_INT 9
6586: PUSH
6587: LD_INT 10
6589: PUSH
6590: LD_INT 11
6592: PUSH
6593: LD_INT 12
6595: PUSH
6596: LD_INT 13
6598: PUSH
6599: LD_INT 14
6601: PUSH
6602: LD_INT 15
6604: PUSH
6605: LD_INT 16
6607: PUSH
6608: LD_INT 17
6610: PUSH
6611: LD_INT 18
6613: PUSH
6614: LD_INT 19
6616: PUSH
6617: LD_INT 20
6619: PUSH
6620: LD_INT 21
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_INT 23
6628: PUSH
6629: LD_INT 24
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 26
6637: PUSH
6638: LD_INT 27
6640: PUSH
6641: LD_INT 28
6643: PUSH
6644: LD_INT 29
6646: PUSH
6647: LD_INT 30
6649: PUSH
6650: LD_INT 31
6652: PUSH
6653: LD_INT 32
6655: PUSH
6656: LD_INT 33
6658: PUSH
6659: LD_INT 34
6661: PUSH
6662: LD_INT 35
6664: PUSH
6665: LD_INT 36
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 101
6708: PUSH
6709: LD_INT 102
6711: PUSH
6712: LD_INT 103
6714: PUSH
6715: LD_INT 104
6717: PUSH
6718: LD_INT 105
6720: PUSH
6721: LD_INT 106
6723: PUSH
6724: LD_INT 107
6726: PUSH
6727: LD_INT 108
6729: PUSH
6730: LD_INT 109
6732: PUSH
6733: LD_INT 110
6735: PUSH
6736: LD_INT 111
6738: PUSH
6739: LD_INT 112
6741: PUSH
6742: LD_INT 113
6744: PUSH
6745: LD_INT 114
6747: PUSH
6748: LD_INT 115
6750: PUSH
6751: LD_INT 116
6753: PUSH
6754: LD_INT 117
6756: PUSH
6757: LD_INT 118
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 6787
6786: POP
// end else
6787: GO 7018
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: LD_INT 4
6805: PUSH
6806: LD_INT 5
6808: PUSH
6809: LD_INT 6
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: LD_INT 8
6817: PUSH
6818: LD_INT 9
6820: PUSH
6821: LD_INT 10
6823: PUSH
6824: LD_INT 11
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 13
6832: PUSH
6833: LD_INT 14
6835: PUSH
6836: LD_INT 15
6838: PUSH
6839: LD_INT 16
6841: PUSH
6842: LD_INT 17
6844: PUSH
6845: LD_INT 18
6847: PUSH
6848: LD_INT 19
6850: PUSH
6851: LD_INT 20
6853: PUSH
6854: LD_INT 21
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 23
6862: PUSH
6863: LD_INT 24
6865: PUSH
6866: LD_INT 25
6868: PUSH
6869: LD_INT 26
6871: PUSH
6872: LD_INT 27
6874: PUSH
6875: LD_INT 28
6877: PUSH
6878: LD_INT 29
6880: PUSH
6881: LD_INT 30
6883: PUSH
6884: LD_INT 31
6886: PUSH
6887: LD_INT 32
6889: PUSH
6890: LD_INT 33
6892: PUSH
6893: LD_INT 34
6895: PUSH
6896: LD_INT 35
6898: PUSH
6899: LD_INT 36
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 101
6942: PUSH
6943: LD_INT 102
6945: PUSH
6946: LD_INT 103
6948: PUSH
6949: LD_INT 104
6951: PUSH
6952: LD_INT 105
6954: PUSH
6955: LD_INT 106
6957: PUSH
6958: LD_INT 107
6960: PUSH
6961: LD_INT 108
6963: PUSH
6964: LD_INT 109
6966: PUSH
6967: LD_INT 110
6969: PUSH
6970: LD_INT 111
6972: PUSH
6973: LD_INT 112
6975: PUSH
6976: LD_INT 113
6978: PUSH
6979: LD_INT 114
6981: PUSH
6982: LD_INT 115
6984: PUSH
6985: LD_INT 116
6987: PUSH
6988: LD_INT 117
6990: PUSH
6991: LD_INT 118
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: ST_TO_ADDR
// if result then
7018: LD_VAR 0 1
7022: IFFALSE 7311
// begin normal :=  ;
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_STRING 
7031: ST_TO_ADDR
// hardcore :=  ;
7032: LD_ADDR_VAR 0 4
7036: PUSH
7037: LD_STRING 
7039: ST_TO_ADDR
// for i = 1 to normalCounter do
7040: LD_ADDR_VAR 0 5
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_EXP 8
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7157
// begin tmp := 0 ;
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_STRING 0
7065: ST_TO_ADDR
// if result [ 1 ] then
7066: LD_VAR 0 1
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: IFFALSE 7139
// if result [ 1 ] [ 1 ] = i then
7076: LD_VAR 0 1
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PUSH
7089: LD_VAR 0 5
7093: EQUAL
7094: IFFALSE 7139
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7096: LD_ADDR_VAR 0 1
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 1
7113: PUSH
7114: LD_INT 1
7116: ARRAY
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 3
7125: PPUSH
7126: CALL_OW 1
7130: ST_TO_ADDR
// tmp := 1 ;
7131: LD_ADDR_VAR 0 2
7135: PUSH
7136: LD_STRING 1
7138: ST_TO_ADDR
// end ; normal := normal & tmp ;
7139: LD_ADDR_VAR 0 3
7143: PUSH
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 2
7153: STR
7154: ST_TO_ADDR
// end ;
7155: GO 7055
7157: POP
7158: POP
// for i = 1 to hardcoreCounter do
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: DOUBLE
7165: LD_INT 1
7167: DEC
7168: ST_TO_ADDR
7169: LD_EXP 9
7173: PUSH
7174: FOR_TO
7175: IFFALSE 7280
// begin tmp := 0 ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_STRING 0
7184: ST_TO_ADDR
// if result [ 2 ] then
7185: LD_VAR 0 1
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: IFFALSE 7262
// if result [ 2 ] [ 1 ] = 100 + i then
7195: LD_VAR 0 1
7199: PUSH
7200: LD_INT 2
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PUSH
7208: LD_INT 100
7210: PUSH
7211: LD_VAR 0 5
7215: PLUS
7216: EQUAL
7217: IFFALSE 7262
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7219: LD_ADDR_VAR 0 1
7223: PUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_INT 2
7231: PPUSH
7232: LD_VAR 0 1
7236: PUSH
7237: LD_INT 2
7239: ARRAY
7240: PPUSH
7241: LD_INT 1
7243: PPUSH
7244: CALL_OW 3
7248: PPUSH
7249: CALL_OW 1
7253: ST_TO_ADDR
// tmp := 1 ;
7254: LD_ADDR_VAR 0 2
7258: PUSH
7259: LD_STRING 1
7261: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7262: LD_ADDR_VAR 0 4
7266: PUSH
7267: LD_VAR 0 4
7271: PUSH
7272: LD_VAR 0 2
7276: STR
7277: ST_TO_ADDR
// end ;
7278: GO 7174
7280: POP
7281: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7282: LD_STRING getStreamItemsFromMission("
7284: PUSH
7285: LD_VAR 0 3
7289: STR
7290: PUSH
7291: LD_STRING ","
7293: STR
7294: PUSH
7295: LD_VAR 0 4
7299: STR
7300: PUSH
7301: LD_STRING ")
7303: STR
7304: PPUSH
7305: CALL_OW 559
// end else
7309: GO 7318
// ToLua ( getStreamItemsFromMission("","") ) ;
7311: LD_STRING getStreamItemsFromMission("","")
7313: PPUSH
7314: CALL_OW 559
// end ;
7318: LD_VAR 0 1
7322: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7323: LD_EXP 7
7327: PUSH
7328: LD_EXP 12
7332: AND
7333: IFFALSE 7457
7335: GO 7337
7337: DISABLE
7338: LD_INT 0
7340: PPUSH
7341: PPUSH
// begin enable ;
7342: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7343: LD_ADDR_VAR 0 2
7347: PUSH
7348: LD_INT 22
7350: PUSH
7351: LD_OWVAR 2
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 34
7365: PUSH
7366: LD_INT 7
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 34
7375: PUSH
7376: LD_INT 45
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 28
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 34
7395: PUSH
7396: LD_INT 47
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 69
7418: ST_TO_ADDR
// if not tmp then
7419: LD_VAR 0 2
7423: NOT
7424: IFFALSE 7428
// exit ;
7426: GO 7457
// for i in tmp do
7428: LD_ADDR_VAR 0 1
7432: PUSH
7433: LD_VAR 0 2
7437: PUSH
7438: FOR_IN
7439: IFFALSE 7455
// begin SetLives ( i , 0 ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: LD_INT 0
7448: PPUSH
7449: CALL_OW 234
// end ;
7453: GO 7438
7455: POP
7456: POP
// end ;
7457: PPOPN 2
7459: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7460: LD_EXP 7
7464: PUSH
7465: LD_EXP 13
7469: AND
7470: IFFALSE 7554
7472: GO 7474
7474: DISABLE
7475: LD_INT 0
7477: PPUSH
7478: PPUSH
// begin enable ;
7479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: LD_INT 22
7487: PUSH
7488: LD_OWVAR 2
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_INT 32
7499: PUSH
7500: LD_INT 3
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: ST_TO_ADDR
// if not tmp then
7516: LD_VAR 0 2
7520: NOT
7521: IFFALSE 7525
// exit ;
7523: GO 7554
// for i in tmp do
7525: LD_ADDR_VAR 0 1
7529: PUSH
7530: LD_VAR 0 2
7534: PUSH
7535: FOR_IN
7536: IFFALSE 7552
// begin SetLives ( i , 0 ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: LD_INT 0
7545: PPUSH
7546: CALL_OW 234
// end ;
7550: GO 7535
7552: POP
7553: POP
// end ;
7554: PPOPN 2
7556: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7557: LD_EXP 7
7561: PUSH
7562: LD_EXP 10
7566: AND
7567: IFFALSE 7660
7569: GO 7571
7571: DISABLE
7572: LD_INT 0
7574: PPUSH
// begin enable ;
7575: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_OWVAR 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 2
7595: PUSH
7596: LD_INT 25
7598: PUSH
7599: LD_INT 5
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 25
7608: PUSH
7609: LD_INT 9
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 25
7618: PUSH
7619: LD_INT 8
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7658
// begin SetClass ( i , 1 ) ;
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_INT 1
7651: PPUSH
7652: CALL_OW 336
// end ;
7656: GO 7641
7658: POP
7659: POP
// end ;
7660: PPOPN 1
7662: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7663: LD_EXP 7
7667: PUSH
7668: LD_EXP 11
7672: AND
7673: PUSH
7674: LD_OWVAR 65
7678: PUSH
7679: LD_INT 7
7681: LESS
7682: AND
7683: IFFALSE 7697
7685: GO 7687
7687: DISABLE
// begin enable ;
7688: ENABLE
// game_speed := 7 ;
7689: LD_ADDR_OWVAR 65
7693: PUSH
7694: LD_INT 7
7696: ST_TO_ADDR
// end ;
7697: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7698: LD_EXP 7
7702: PUSH
7703: LD_EXP 14
7707: AND
7708: IFFALSE 7910
7710: GO 7712
7712: DISABLE
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
7717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7718: LD_ADDR_VAR 0 3
7722: PUSH
7723: LD_INT 81
7725: PUSH
7726: LD_OWVAR 2
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 21
7737: PUSH
7738: LD_INT 1
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 69
7753: ST_TO_ADDR
// if not tmp then
7754: LD_VAR 0 3
7758: NOT
7759: IFFALSE 7763
// exit ;
7761: GO 7910
// if tmp > 5 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 5
7770: GREATER
7771: IFFALSE 7783
// k := 5 else
7773: LD_ADDR_VAR 0 2
7777: PUSH
7778: LD_INT 5
7780: ST_TO_ADDR
7781: GO 7793
// k := tmp ;
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: LD_VAR 0 3
7792: ST_TO_ADDR
// for i := 1 to k do
7793: LD_ADDR_VAR 0 1
7797: PUSH
7798: DOUBLE
7799: LD_INT 1
7801: DEC
7802: ST_TO_ADDR
7803: LD_VAR 0 2
7807: PUSH
7808: FOR_TO
7809: IFFALSE 7908
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7811: LD_VAR 0 3
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 1
7826: PUSH
7827: LD_INT 4
7829: MOD
7830: PUSH
7831: LD_INT 1
7833: PLUS
7834: PPUSH
7835: CALL_OW 259
7839: PUSH
7840: LD_INT 10
7842: LESS
7843: IFFALSE 7906
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7845: LD_VAR 0 3
7849: PUSH
7850: LD_VAR 0 1
7854: ARRAY
7855: PPUSH
7856: LD_VAR 0 1
7860: PUSH
7861: LD_INT 4
7863: MOD
7864: PUSH
7865: LD_INT 1
7867: PLUS
7868: PPUSH
7869: LD_VAR 0 3
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PPUSH
7880: LD_VAR 0 1
7884: PUSH
7885: LD_INT 4
7887: MOD
7888: PUSH
7889: LD_INT 1
7891: PLUS
7892: PPUSH
7893: CALL_OW 259
7897: PUSH
7898: LD_INT 1
7900: PLUS
7901: PPUSH
7902: CALL_OW 237
7906: GO 7808
7908: POP
7909: POP
// end ;
7910: PPOPN 3
7912: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7913: LD_EXP 7
7917: PUSH
7918: LD_EXP 15
7922: AND
7923: IFFALSE 7943
7925: GO 7927
7927: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7928: LD_INT 4
7930: PPUSH
7931: LD_OWVAR 2
7935: PPUSH
7936: LD_INT 0
7938: PPUSH
7939: CALL_OW 324
7943: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7944: LD_EXP 7
7948: PUSH
7949: LD_EXP 44
7953: AND
7954: IFFALSE 7974
7956: GO 7958
7958: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7959: LD_INT 19
7961: PPUSH
7962: LD_OWVAR 2
7966: PPUSH
7967: LD_INT 0
7969: PPUSH
7970: CALL_OW 324
7974: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7975: LD_EXP 7
7979: PUSH
7980: LD_EXP 16
7984: AND
7985: IFFALSE 8087
7987: GO 7989
7989: DISABLE
7990: LD_INT 0
7992: PPUSH
7993: PPUSH
// begin enable ;
7994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_OWVAR 2
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 2
8014: PUSH
8015: LD_INT 34
8017: PUSH
8018: LD_INT 11
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 34
8027: PUSH
8028: LD_INT 30
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 69
8048: ST_TO_ADDR
// if not tmp then
8049: LD_VAR 0 2
8053: NOT
8054: IFFALSE 8058
// exit ;
8056: GO 8087
// for i in tmp do
8058: LD_ADDR_VAR 0 1
8062: PUSH
8063: LD_VAR 0 2
8067: PUSH
8068: FOR_IN
8069: IFFALSE 8085
// begin SetLives ( i , 0 ) ;
8071: LD_VAR 0 1
8075: PPUSH
8076: LD_INT 0
8078: PPUSH
8079: CALL_OW 234
// end ;
8083: GO 8068
8085: POP
8086: POP
// end ;
8087: PPOPN 2
8089: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8090: LD_EXP 7
8094: PUSH
8095: LD_EXP 17
8099: AND
8100: IFFALSE 8120
8102: GO 8104
8104: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8105: LD_INT 32
8107: PPUSH
8108: LD_OWVAR 2
8112: PPUSH
8113: LD_INT 0
8115: PPUSH
8116: CALL_OW 324
8120: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8121: LD_EXP 7
8125: PUSH
8126: LD_EXP 18
8130: AND
8131: IFFALSE 8312
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
8139: PPUSH
8140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_OWVAR 2
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 33
8160: PUSH
8161: LD_INT 3
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: ST_TO_ADDR
// if not tmp then
8177: LD_VAR 0 2
8181: NOT
8182: IFFALSE 8186
// exit ;
8184: GO 8312
// side := 0 ;
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// for i := 1 to 8 do
8194: LD_ADDR_VAR 0 1
8198: PUSH
8199: DOUBLE
8200: LD_INT 1
8202: DEC
8203: ST_TO_ADDR
8204: LD_INT 8
8206: PUSH
8207: FOR_TO
8208: IFFALSE 8256
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8210: LD_OWVAR 2
8214: PUSH
8215: LD_VAR 0 1
8219: NONEQUAL
8220: PUSH
8221: LD_OWVAR 2
8225: PPUSH
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 81
8235: PUSH
8236: LD_INT 2
8238: EQUAL
8239: AND
8240: IFFALSE 8254
// begin side := i ;
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: LD_VAR 0 1
8251: ST_TO_ADDR
// break ;
8252: GO 8256
// end ;
8254: GO 8207
8256: POP
8257: POP
// if not side then
8258: LD_VAR 0 3
8262: NOT
8263: IFFALSE 8267
// exit ;
8265: GO 8312
// for i := 1 to tmp do
8267: LD_ADDR_VAR 0 1
8271: PUSH
8272: DOUBLE
8273: LD_INT 1
8275: DEC
8276: ST_TO_ADDR
8277: LD_VAR 0 2
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8310
// if Prob ( 60 ) then
8285: LD_INT 60
8287: PPUSH
8288: CALL_OW 13
8292: IFFALSE 8308
// SetSide ( i , side ) ;
8294: LD_VAR 0 1
8298: PPUSH
8299: LD_VAR 0 3
8303: PPUSH
8304: CALL_OW 235
8308: GO 8282
8310: POP
8311: POP
// end ;
8312: PPOPN 3
8314: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8315: LD_EXP 7
8319: PUSH
8320: LD_EXP 20
8324: AND
8325: IFFALSE 8444
8327: GO 8329
8329: DISABLE
8330: LD_INT 0
8332: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8333: LD_ADDR_VAR 0 1
8337: PUSH
8338: LD_INT 22
8340: PUSH
8341: LD_OWVAR 2
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 1
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 23
8365: PUSH
8366: LD_INT 0
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 69
8386: PUSH
8387: FOR_IN
8388: IFFALSE 8442
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8390: LD_VAR 0 1
8394: PPUSH
8395: CALL_OW 257
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: LD_INT 2
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: LD_INT 4
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: IN
8418: IFFALSE 8440
// SetClass ( un , rand ( 1 , 4 ) ) ;
8420: LD_VAR 0 1
8424: PPUSH
8425: LD_INT 1
8427: PPUSH
8428: LD_INT 4
8430: PPUSH
8431: CALL_OW 12
8435: PPUSH
8436: CALL_OW 336
8440: GO 8387
8442: POP
8443: POP
// end ;
8444: PPOPN 1
8446: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8447: LD_EXP 7
8451: PUSH
8452: LD_EXP 19
8456: AND
8457: IFFALSE 8536
8459: GO 8461
8461: DISABLE
8462: LD_INT 0
8464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_INT 22
8472: PUSH
8473: LD_OWVAR 2
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 21
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 69
8500: ST_TO_ADDR
// if not tmp then
8501: LD_VAR 0 1
8505: NOT
8506: IFFALSE 8510
// exit ;
8508: GO 8536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8510: LD_VAR 0 1
8514: PUSH
8515: LD_INT 1
8517: PPUSH
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 12
8527: ARRAY
8528: PPUSH
8529: LD_INT 100
8531: PPUSH
8532: CALL_OW 234
// end ;
8536: PPOPN 1
8538: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8539: LD_EXP 7
8543: PUSH
8544: LD_EXP 21
8548: AND
8549: IFFALSE 8647
8551: GO 8553
8553: DISABLE
8554: LD_INT 0
8556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8557: LD_ADDR_VAR 0 1
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_OWVAR 2
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 21
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PPUSH
8588: CALL_OW 69
8592: ST_TO_ADDR
// if not tmp then
8593: LD_VAR 0 1
8597: NOT
8598: IFFALSE 8602
// exit ;
8600: GO 8647
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8602: LD_VAR 0 1
8606: PUSH
8607: LD_INT 1
8609: PPUSH
8610: LD_VAR 0 1
8614: PPUSH
8615: CALL_OW 12
8619: ARRAY
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: LD_INT 4
8626: PPUSH
8627: CALL_OW 12
8631: PPUSH
8632: LD_INT 3000
8634: PPUSH
8635: LD_INT 9000
8637: PPUSH
8638: CALL_OW 12
8642: PPUSH
8643: CALL_OW 492
// end ;
8647: PPOPN 1
8649: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8650: LD_EXP 7
8654: PUSH
8655: LD_EXP 22
8659: AND
8660: IFFALSE 8680
8662: GO 8664
8664: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_OWVAR 2
8672: PPUSH
8673: LD_INT 0
8675: PPUSH
8676: CALL_OW 324
8680: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8681: LD_EXP 7
8685: PUSH
8686: LD_EXP 23
8690: AND
8691: IFFALSE 8774
8693: GO 8695
8695: DISABLE
8696: LD_INT 0
8698: PPUSH
8699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: LD_INT 22
8707: PUSH
8708: LD_OWVAR 2
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 21
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: ST_TO_ADDR
// if not tmp then
8736: LD_VAR 0 2
8740: NOT
8741: IFFALSE 8745
// exit ;
8743: GO 8774
// for i in tmp do
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_VAR 0 2
8754: PUSH
8755: FOR_IN
8756: IFFALSE 8772
// SetBLevel ( i , 10 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 10
8765: PPUSH
8766: CALL_OW 241
8770: GO 8755
8772: POP
8773: POP
// end ;
8774: PPOPN 2
8776: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8777: LD_EXP 7
8781: PUSH
8782: LD_EXP 24
8786: AND
8787: IFFALSE 8898
8789: GO 8791
8791: DISABLE
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: LD_INT 22
8804: PUSH
8805: LD_OWVAR 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 25
8816: PUSH
8817: LD_INT 1
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: ST_TO_ADDR
// if not tmp then
8833: LD_VAR 0 3
8837: NOT
8838: IFFALSE 8842
// exit ;
8840: GO 8898
// un := tmp [ rand ( 1 , tmp ) ] ;
8842: LD_ADDR_VAR 0 2
8846: PUSH
8847: LD_VAR 0 3
8851: PUSH
8852: LD_INT 1
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: CALL_OW 12
8864: ARRAY
8865: ST_TO_ADDR
// if Crawls ( un ) then
8866: LD_VAR 0 2
8870: PPUSH
8871: CALL_OW 318
8875: IFFALSE 8886
// ComWalk ( un ) ;
8877: LD_VAR 0 2
8881: PPUSH
8882: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_INT 5
8893: PPUSH
8894: CALL_OW 336
// end ;
8898: PPOPN 3
8900: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8901: LD_EXP 7
8905: PUSH
8906: LD_EXP 25
8910: AND
8911: PUSH
8912: LD_OWVAR 67
8916: PUSH
8917: LD_INT 4
8919: LESS
8920: AND
8921: IFFALSE 8940
8923: GO 8925
8925: DISABLE
// begin Difficulty := Difficulty + 1 ;
8926: LD_ADDR_OWVAR 67
8930: PUSH
8931: LD_OWVAR 67
8935: PUSH
8936: LD_INT 1
8938: PLUS
8939: ST_TO_ADDR
// end ;
8940: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8941: LD_EXP 7
8945: PUSH
8946: LD_EXP 26
8950: AND
8951: IFFALSE 9054
8953: GO 8955
8955: DISABLE
8956: LD_INT 0
8958: PPUSH
// begin for i := 1 to 5 do
8959: LD_ADDR_VAR 0 1
8963: PUSH
8964: DOUBLE
8965: LD_INT 1
8967: DEC
8968: ST_TO_ADDR
8969: LD_INT 5
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9052
// begin uc_nation := nation_nature ;
8975: LD_ADDR_OWVAR 21
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// uc_side := 0 ;
8983: LD_ADDR_OWVAR 20
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8991: LD_ADDR_OWVAR 29
8995: PUSH
8996: LD_INT 12
8998: PUSH
8999: LD_INT 12
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: ST_TO_ADDR
// hc_agressivity := 20 ;
9006: LD_ADDR_OWVAR 35
9010: PUSH
9011: LD_INT 20
9013: ST_TO_ADDR
// hc_class := class_tiger ;
9014: LD_ADDR_OWVAR 28
9018: PUSH
9019: LD_INT 14
9021: ST_TO_ADDR
// hc_gallery :=  ;
9022: LD_ADDR_OWVAR 33
9026: PUSH
9027: LD_STRING 
9029: ST_TO_ADDR
// hc_name :=  ;
9030: LD_ADDR_OWVAR 26
9034: PUSH
9035: LD_STRING 
9037: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9038: CALL_OW 44
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 51
// end ;
9050: GO 8972
9052: POP
9053: POP
// end ;
9054: PPOPN 1
9056: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9057: LD_EXP 7
9061: PUSH
9062: LD_EXP 27
9066: AND
9067: IFFALSE 9076
9069: GO 9071
9071: DISABLE
// StreamSibBomb ;
9072: CALL 9077 0 0
9076: END
// export function StreamSibBomb ; var i , x , y ; begin
9077: LD_INT 0
9079: PPUSH
9080: PPUSH
9081: PPUSH
9082: PPUSH
// result := false ;
9083: LD_ADDR_VAR 0 1
9087: PUSH
9088: LD_INT 0
9090: ST_TO_ADDR
// for i := 1 to 16 do
9091: LD_ADDR_VAR 0 2
9095: PUSH
9096: DOUBLE
9097: LD_INT 1
9099: DEC
9100: ST_TO_ADDR
9101: LD_INT 16
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9304
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9107: LD_ADDR_VAR 0 3
9111: PUSH
9112: LD_INT 10
9114: PUSH
9115: LD_INT 20
9117: PUSH
9118: LD_INT 30
9120: PUSH
9121: LD_INT 40
9123: PUSH
9124: LD_INT 50
9126: PUSH
9127: LD_INT 60
9129: PUSH
9130: LD_INT 70
9132: PUSH
9133: LD_INT 80
9135: PUSH
9136: LD_INT 90
9138: PUSH
9139: LD_INT 100
9141: PUSH
9142: LD_INT 110
9144: PUSH
9145: LD_INT 120
9147: PUSH
9148: LD_INT 130
9150: PUSH
9151: LD_INT 140
9153: PUSH
9154: LD_INT 150
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 1
9176: PPUSH
9177: LD_INT 15
9179: PPUSH
9180: CALL_OW 12
9184: ARRAY
9185: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9186: LD_ADDR_VAR 0 4
9190: PUSH
9191: LD_INT 10
9193: PUSH
9194: LD_INT 20
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 40
9202: PUSH
9203: LD_INT 50
9205: PUSH
9206: LD_INT 60
9208: PUSH
9209: LD_INT 70
9211: PUSH
9212: LD_INT 80
9214: PUSH
9215: LD_INT 90
9217: PUSH
9218: LD_INT 100
9220: PUSH
9221: LD_INT 110
9223: PUSH
9224: LD_INT 120
9226: PUSH
9227: LD_INT 130
9229: PUSH
9230: LD_INT 140
9232: PUSH
9233: LD_INT 150
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 1
9255: PPUSH
9256: LD_INT 15
9258: PPUSH
9259: CALL_OW 12
9263: ARRAY
9264: ST_TO_ADDR
// if ValidHex ( x , y ) then
9265: LD_VAR 0 3
9269: PPUSH
9270: LD_VAR 0 4
9274: PPUSH
9275: CALL_OW 488
9279: IFFALSE 9302
// begin result := [ x , y ] ;
9281: LD_ADDR_VAR 0 1
9285: PUSH
9286: LD_VAR 0 3
9290: PUSH
9291: LD_VAR 0 4
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: ST_TO_ADDR
// break ;
9300: GO 9304
// end ; end ;
9302: GO 9104
9304: POP
9305: POP
// if result then
9306: LD_VAR 0 1
9310: IFFALSE 9370
// begin ToLua ( playSibBomb() ) ;
9312: LD_STRING playSibBomb()
9314: PPUSH
9315: CALL_OW 559
// wait ( 0 0$14 ) ;
9319: LD_INT 490
9321: PPUSH
9322: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9326: LD_VAR 0 1
9330: PUSH
9331: LD_INT 1
9333: ARRAY
9334: PPUSH
9335: LD_VAR 0 1
9339: PUSH
9340: LD_INT 2
9342: ARRAY
9343: PPUSH
9344: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9348: LD_VAR 0 1
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 1
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 429
// end ; end ;
9370: LD_VAR 0 1
9374: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9375: LD_EXP 7
9379: PUSH
9380: LD_EXP 29
9384: AND
9385: IFFALSE 9397
9387: GO 9389
9389: DISABLE
// YouLost (  ) ;
9390: LD_STRING 
9392: PPUSH
9393: CALL_OW 104
9397: END
// every 0 0$1 trigger StreamModeActive and sFog do
9398: LD_EXP 7
9402: PUSH
9403: LD_EXP 28
9407: AND
9408: IFFALSE 9422
9410: GO 9412
9412: DISABLE
// FogOff ( your_side ) ;
9413: LD_OWVAR 2
9417: PPUSH
9418: CALL_OW 344
9422: END
// every 0 0$1 trigger StreamModeActive and sSun do
9423: LD_EXP 7
9427: PUSH
9428: LD_EXP 30
9432: AND
9433: IFFALSE 9461
9435: GO 9437
9437: DISABLE
// begin solar_recharge_percent := 0 ;
9438: LD_ADDR_OWVAR 79
9442: PUSH
9443: LD_INT 0
9445: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9446: LD_INT 10500
9448: PPUSH
9449: CALL_OW 67
// solar_recharge_percent := 100 ;
9453: LD_ADDR_OWVAR 79
9457: PUSH
9458: LD_INT 100
9460: ST_TO_ADDR
// end ;
9461: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9462: LD_EXP 7
9466: PUSH
9467: LD_EXP 31
9471: AND
9472: IFFALSE 9711
9474: GO 9476
9476: DISABLE
9477: LD_INT 0
9479: PPUSH
9480: PPUSH
9481: PPUSH
// begin tmp := [ ] ;
9482: LD_ADDR_VAR 0 3
9486: PUSH
9487: EMPTY
9488: ST_TO_ADDR
// for i := 1 to 6 do
9489: LD_ADDR_VAR 0 1
9493: PUSH
9494: DOUBLE
9495: LD_INT 1
9497: DEC
9498: ST_TO_ADDR
9499: LD_INT 6
9501: PUSH
9502: FOR_TO
9503: IFFALSE 9608
// begin uc_nation := nation_nature ;
9505: LD_ADDR_OWVAR 21
9509: PUSH
9510: LD_INT 0
9512: ST_TO_ADDR
// uc_side := 0 ;
9513: LD_ADDR_OWVAR 20
9517: PUSH
9518: LD_INT 0
9520: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9521: LD_ADDR_OWVAR 29
9525: PUSH
9526: LD_INT 12
9528: PUSH
9529: LD_INT 12
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: ST_TO_ADDR
// hc_agressivity := 20 ;
9536: LD_ADDR_OWVAR 35
9540: PUSH
9541: LD_INT 20
9543: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9544: LD_ADDR_OWVAR 28
9548: PUSH
9549: LD_INT 17
9551: ST_TO_ADDR
// hc_gallery :=  ;
9552: LD_ADDR_OWVAR 33
9556: PUSH
9557: LD_STRING 
9559: ST_TO_ADDR
// hc_name :=  ;
9560: LD_ADDR_OWVAR 26
9564: PUSH
9565: LD_STRING 
9567: ST_TO_ADDR
// un := CreateHuman ;
9568: LD_ADDR_VAR 0 2
9572: PUSH
9573: CALL_OW 44
9577: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 51
// tmp := tmp ^ un ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: LD_VAR 0 3
9599: PUSH
9600: LD_VAR 0 2
9604: ADD
9605: ST_TO_ADDR
// end ;
9606: GO 9502
9608: POP
9609: POP
// repeat wait ( 0 0$1 ) ;
9610: LD_INT 35
9612: PPUSH
9613: CALL_OW 67
// for un in tmp do
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_VAR 0 3
9626: PUSH
9627: FOR_IN
9628: IFFALSE 9702
// begin if IsDead ( un ) then
9630: LD_VAR 0 2
9634: PPUSH
9635: CALL_OW 301
9639: IFFALSE 9659
// begin tmp := tmp diff un ;
9641: LD_ADDR_VAR 0 3
9645: PUSH
9646: LD_VAR 0 3
9650: PUSH
9651: LD_VAR 0 2
9655: DIFF
9656: ST_TO_ADDR
// continue ;
9657: GO 9627
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9659: LD_VAR 0 2
9663: PPUSH
9664: LD_INT 3
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: PPUSH
9686: LD_VAR 0 2
9690: PPUSH
9691: CALL_OW 74
9695: PPUSH
9696: CALL_OW 115
// end ;
9700: GO 9627
9702: POP
9703: POP
// until not tmp ;
9704: LD_VAR 0 3
9708: NOT
9709: IFFALSE 9610
// end ;
9711: PPOPN 3
9713: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9714: LD_EXP 7
9718: PUSH
9719: LD_EXP 32
9723: AND
9724: IFFALSE 9778
9726: GO 9728
9728: DISABLE
// begin ToLua ( displayTroll(); ) ;
9729: LD_STRING displayTroll();
9731: PPUSH
9732: CALL_OW 559
// wait ( 3 3$00 ) ;
9736: LD_INT 6300
9738: PPUSH
9739: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9743: LD_STRING hideTroll();
9745: PPUSH
9746: CALL_OW 559
// wait ( 1 1$00 ) ;
9750: LD_INT 2100
9752: PPUSH
9753: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9757: LD_STRING displayTroll();
9759: PPUSH
9760: CALL_OW 559
// wait ( 1 1$00 ) ;
9764: LD_INT 2100
9766: PPUSH
9767: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9771: LD_STRING hideTroll();
9773: PPUSH
9774: CALL_OW 559
// end ;
9778: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9779: LD_EXP 7
9783: PUSH
9784: LD_EXP 33
9788: AND
9789: IFFALSE 9852
9791: GO 9793
9793: DISABLE
9794: LD_INT 0
9796: PPUSH
// begin p := 0 ;
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// repeat game_speed := 1 ;
9805: LD_ADDR_OWVAR 65
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9813: LD_INT 35
9815: PPUSH
9816: CALL_OW 67
// p := p + 1 ;
9820: LD_ADDR_VAR 0 1
9824: PUSH
9825: LD_VAR 0 1
9829: PUSH
9830: LD_INT 1
9832: PLUS
9833: ST_TO_ADDR
// until p >= 60 ;
9834: LD_VAR 0 1
9838: PUSH
9839: LD_INT 60
9841: GREATEREQUAL
9842: IFFALSE 9805
// game_speed := 4 ;
9844: LD_ADDR_OWVAR 65
9848: PUSH
9849: LD_INT 4
9851: ST_TO_ADDR
// end ;
9852: PPOPN 1
9854: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9855: LD_EXP 7
9859: PUSH
9860: LD_EXP 34
9864: AND
9865: IFFALSE 10011
9867: GO 9869
9869: DISABLE
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9874: LD_ADDR_VAR 0 1
9878: PUSH
9879: LD_INT 22
9881: PUSH
9882: LD_OWVAR 2
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_INT 30
9896: PUSH
9897: LD_INT 0
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 30
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: ST_TO_ADDR
// if not depot then
9928: LD_VAR 0 1
9932: NOT
9933: IFFALSE 9937
// exit ;
9935: GO 10011
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9937: LD_ADDR_VAR 0 2
9941: PUSH
9942: LD_VAR 0 1
9946: PUSH
9947: LD_INT 1
9949: PPUSH
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PPUSH
9961: CALL_OW 274
9965: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9966: LD_VAR 0 2
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: LD_INT 0
9976: PPUSH
9977: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9981: LD_VAR 0 2
9985: PPUSH
9986: LD_INT 2
9988: PPUSH
9989: LD_INT 0
9991: PPUSH
9992: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9996: LD_VAR 0 2
10000: PPUSH
10001: LD_INT 3
10003: PPUSH
10004: LD_INT 0
10006: PPUSH
10007: CALL_OW 277
// end ;
10011: PPOPN 2
10013: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10014: LD_EXP 7
10018: PUSH
10019: LD_EXP 35
10023: AND
10024: IFFALSE 10121
10026: GO 10028
10028: DISABLE
10029: LD_INT 0
10031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10032: LD_ADDR_VAR 0 1
10036: PUSH
10037: LD_INT 22
10039: PUSH
10040: LD_OWVAR 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 23
10064: PUSH
10065: LD_INT 0
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 69
10085: ST_TO_ADDR
// if not tmp then
10086: LD_VAR 0 1
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10095: LD_VAR 0 1
10099: PUSH
10100: LD_INT 1
10102: PPUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 12
10112: ARRAY
10113: PPUSH
10114: LD_INT 200
10116: PPUSH
10117: CALL_OW 234
// end ;
10121: PPOPN 1
10123: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10124: LD_EXP 7
10128: PUSH
10129: LD_EXP 36
10133: AND
10134: IFFALSE 10213
10136: GO 10138
10138: DISABLE
10139: LD_INT 0
10141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10142: LD_ADDR_VAR 0 1
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_OWVAR 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 69
10177: ST_TO_ADDR
// if not tmp then
10178: LD_VAR 0 1
10182: NOT
10183: IFFALSE 10187
// exit ;
10185: GO 10213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10187: LD_VAR 0 1
10191: PUSH
10192: LD_INT 1
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 12
10204: ARRAY
10205: PPUSH
10206: LD_INT 60
10208: PPUSH
10209: CALL_OW 234
// end ;
10213: PPOPN 1
10215: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10216: LD_EXP 7
10220: PUSH
10221: LD_EXP 37
10225: AND
10226: IFFALSE 10325
10228: GO 10230
10230: DISABLE
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
// begin enable ;
10235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_OWVAR 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 61
10255: PUSH
10256: EMPTY
10257: LIST
10258: PUSH
10259: LD_INT 33
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 69
10278: ST_TO_ADDR
// if not tmp then
10279: LD_VAR 0 1
10283: NOT
10284: IFFALSE 10288
// exit ;
10286: GO 10325
// for i in tmp do
10288: LD_ADDR_VAR 0 2
10292: PUSH
10293: LD_VAR 0 1
10297: PUSH
10298: FOR_IN
10299: IFFALSE 10323
// if IsControledBy ( i ) then
10301: LD_VAR 0 2
10305: PPUSH
10306: CALL_OW 312
10310: IFFALSE 10321
// ComUnlink ( i ) ;
10312: LD_VAR 0 2
10316: PPUSH
10317: CALL_OW 136
10321: GO 10298
10323: POP
10324: POP
// end ;
10325: PPOPN 2
10327: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10328: LD_EXP 7
10332: PUSH
10333: LD_EXP 38
10337: AND
10338: IFFALSE 10478
10340: GO 10342
10342: DISABLE
10343: LD_INT 0
10345: PPUSH
10346: PPUSH
// begin ToLua ( displayPowell(); ) ;
10347: LD_STRING displayPowell();
10349: PPUSH
10350: CALL_OW 559
// uc_side := 0 ;
10354: LD_ADDR_OWVAR 20
10358: PUSH
10359: LD_INT 0
10361: ST_TO_ADDR
// uc_nation := 2 ;
10362: LD_ADDR_OWVAR 21
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10370: LD_ADDR_OWVAR 37
10374: PUSH
10375: LD_INT 14
10377: ST_TO_ADDR
// vc_engine := engine_siberite ;
10378: LD_ADDR_OWVAR 39
10382: PUSH
10383: LD_INT 3
10385: ST_TO_ADDR
// vc_control := control_apeman ;
10386: LD_ADDR_OWVAR 38
10390: PUSH
10391: LD_INT 5
10393: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10394: LD_ADDR_OWVAR 40
10398: PUSH
10399: LD_INT 29
10401: ST_TO_ADDR
// un := CreateVehicle ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: CALL_OW 45
10411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10424: LD_INT 35
10426: PPUSH
10427: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: LD_INT 22
10438: PUSH
10439: LD_OWVAR 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PPUSH
10453: LD_VAR 0 2
10457: PPUSH
10458: CALL_OW 74
10462: PPUSH
10463: CALL_OW 115
// until IsDead ( un ) ;
10467: LD_VAR 0 2
10471: PPUSH
10472: CALL_OW 301
10476: IFFALSE 10424
// end ;
10478: PPOPN 2
10480: END
// every 0 0$1 trigger StreamModeActive and sStu do
10481: LD_EXP 7
10485: PUSH
10486: LD_EXP 46
10490: AND
10491: IFFALSE 10507
10493: GO 10495
10495: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10496: LD_STRING displayStucuk();
10498: PPUSH
10499: CALL_OW 559
// ResetFog ;
10503: CALL_OW 335
// end ;
10507: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10508: LD_EXP 7
10512: PUSH
10513: LD_EXP 39
10517: AND
10518: IFFALSE 10659
10520: GO 10522
10522: DISABLE
10523: LD_INT 0
10525: PPUSH
10526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_OWVAR 2
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 69
10562: ST_TO_ADDR
// if not tmp then
10563: LD_VAR 0 2
10567: NOT
10568: IFFALSE 10572
// exit ;
10570: GO 10659
// un := tmp [ rand ( 1 , tmp ) ] ;
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: LD_VAR 0 2
10581: PUSH
10582: LD_INT 1
10584: PPUSH
10585: LD_VAR 0 2
10589: PPUSH
10590: CALL_OW 12
10594: ARRAY
10595: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10596: LD_VAR 0 1
10600: PPUSH
10601: LD_INT 0
10603: PPUSH
10604: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10608: LD_VAR 0 1
10612: PPUSH
10613: LD_OWVAR 3
10617: PUSH
10618: LD_VAR 0 1
10622: DIFF
10623: PPUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL_OW 74
10633: PPUSH
10634: CALL_OW 115
// wait ( 0 0$20 ) ;
10638: LD_INT 700
10640: PPUSH
10641: CALL_OW 67
// SetSide ( un , your_side ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_OWVAR 2
10654: PPUSH
10655: CALL_OW 235
// end ;
10659: PPOPN 2
10661: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10662: LD_EXP 7
10666: PUSH
10667: LD_EXP 40
10671: AND
10672: IFFALSE 10778
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10680: LD_ADDR_VAR 0 1
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 30
10702: PUSH
10703: LD_INT 0
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: ST_TO_ADDR
// if not depot then
10734: LD_VAR 0 1
10738: NOT
10739: IFFALSE 10743
// exit ;
10741: GO 10778
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10743: LD_VAR 0 1
10747: PUSH
10748: LD_INT 1
10750: ARRAY
10751: PPUSH
10752: CALL_OW 250
10756: PPUSH
10757: LD_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 251
10770: PPUSH
10771: LD_INT 70
10773: PPUSH
10774: CALL_OW 495
// end ;
10778: PPOPN 1
10780: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10781: LD_EXP 7
10785: PUSH
10786: LD_EXP 41
10790: AND
10791: IFFALSE 11002
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10803: LD_ADDR_VAR 0 5
10807: PUSH
10808: LD_INT 22
10810: PUSH
10811: LD_OWVAR 2
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 21
10822: PUSH
10823: LD_INT 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PPUSH
10834: CALL_OW 69
10838: ST_TO_ADDR
// if not tmp then
10839: LD_VAR 0 5
10843: NOT
10844: IFFALSE 10848
// exit ;
10846: GO 11002
// for i in tmp do
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: LD_VAR 0 5
10857: PUSH
10858: FOR_IN
10859: IFFALSE 11000
// begin d := rand ( 0 , 5 ) ;
10861: LD_ADDR_VAR 0 4
10865: PUSH
10866: LD_INT 0
10868: PPUSH
10869: LD_INT 5
10871: PPUSH
10872: CALL_OW 12
10876: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 250
10891: PPUSH
10892: LD_VAR 0 4
10896: PPUSH
10897: LD_INT 3
10899: PPUSH
10900: LD_INT 12
10902: PPUSH
10903: CALL_OW 12
10907: PPUSH
10908: CALL_OW 272
10912: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_VAR 0 1
10922: PPUSH
10923: CALL_OW 251
10927: PPUSH
10928: LD_VAR 0 4
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 12
10938: PPUSH
10939: CALL_OW 12
10943: PPUSH
10944: CALL_OW 273
10948: ST_TO_ADDR
// if ValidHex ( x , y ) then
10949: LD_VAR 0 2
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: CALL_OW 488
10963: IFFALSE 10998
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_INT 3
10982: PPUSH
10983: LD_INT 6
10985: PPUSH
10986: CALL_OW 12
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 483
// end ;
10998: GO 10858
11000: POP
11001: POP
// end ;
11002: PPOPN 5
11004: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11005: LD_EXP 7
11009: PUSH
11010: LD_EXP 42
11014: AND
11015: IFFALSE 11109
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
11023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 21
11053: PUSH
11054: LD_INT 2
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: ST_TO_ADDR
// if not tmp then
11071: LD_VAR 0 2
11075: NOT
11076: IFFALSE 11080
// exit ;
11078: GO 11109
// for i in tmp do
11080: LD_ADDR_VAR 0 1
11084: PUSH
11085: LD_VAR 0 2
11089: PUSH
11090: FOR_IN
11091: IFFALSE 11107
// SetFuel ( i , 0 ) ;
11093: LD_VAR 0 1
11097: PPUSH
11098: LD_INT 0
11100: PPUSH
11101: CALL_OW 240
11105: GO 11090
11107: POP
11108: POP
// end ;
11109: PPOPN 2
11111: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11112: LD_EXP 7
11116: PUSH
11117: LD_EXP 43
11121: AND
11122: IFFALSE 11188
11124: GO 11126
11126: DISABLE
11127: LD_INT 0
11129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11130: LD_ADDR_VAR 0 1
11134: PUSH
11135: LD_INT 22
11137: PUSH
11138: LD_OWVAR 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 29
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PPUSH
11161: CALL_OW 69
11165: ST_TO_ADDR
// if not tmp then
11166: LD_VAR 0 1
11170: NOT
11171: IFFALSE 11175
// exit ;
11173: GO 11188
// DestroyUnit ( tmp [ 1 ] ) ;
11175: LD_VAR 0 1
11179: PUSH
11180: LD_INT 1
11182: ARRAY
11183: PPUSH
11184: CALL_OW 65
// end ;
11188: PPOPN 1
11190: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11191: LD_EXP 7
11195: PUSH
11196: LD_EXP 45
11200: AND
11201: IFFALSE 11330
11203: GO 11205
11205: DISABLE
11206: LD_INT 0
11208: PPUSH
// begin uc_side := 0 ;
11209: LD_ADDR_OWVAR 20
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// uc_nation := nation_arabian ;
11217: LD_ADDR_OWVAR 21
11221: PUSH
11222: LD_INT 2
11224: ST_TO_ADDR
// hc_gallery :=  ;
11225: LD_ADDR_OWVAR 33
11229: PUSH
11230: LD_STRING 
11232: ST_TO_ADDR
// hc_name :=  ;
11233: LD_ADDR_OWVAR 26
11237: PUSH
11238: LD_STRING 
11240: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11241: LD_INT 1
11243: PPUSH
11244: LD_INT 11
11246: PPUSH
11247: LD_INT 10
11249: PPUSH
11250: CALL_OW 380
// un := CreateHuman ;
11254: LD_ADDR_VAR 0 1
11258: PUSH
11259: CALL_OW 44
11263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11264: LD_VAR 0 1
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11276: LD_INT 35
11278: PPUSH
11279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11283: LD_VAR 0 1
11287: PPUSH
11288: LD_INT 22
11290: PUSH
11291: LD_OWVAR 2
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 74
11314: PPUSH
11315: CALL_OW 115
// until IsDead ( un ) ;
11319: LD_VAR 0 1
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11276
// end ;
11330: PPOPN 1
11332: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11333: LD_EXP 7
11337: PUSH
11338: LD_EXP 47
11342: AND
11343: IFFALSE 11355
11345: GO 11347
11347: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11348: LD_STRING earthquake(getX(game), 0, 32)
11350: PPUSH
11351: CALL_OW 559
11355: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11356: LD_EXP 7
11360: PUSH
11361: LD_EXP 48
11365: AND
11366: IFFALSE 11457
11368: GO 11370
11370: DISABLE
11371: LD_INT 0
11373: PPUSH
// begin enable ;
11374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_OWVAR 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 33
11404: PUSH
11405: LD_INT 3
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 69
11421: ST_TO_ADDR
// if not tmp then
11422: LD_VAR 0 1
11426: NOT
11427: IFFALSE 11431
// exit ;
11429: GO 11457
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11431: LD_VAR 0 1
11435: PUSH
11436: LD_INT 1
11438: PPUSH
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 12
11448: ARRAY
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 234
// end ;
11457: PPOPN 1
11459: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11460: LD_EXP 7
11464: PUSH
11465: LD_EXP 49
11469: AND
11470: IFFALSE 11611
11472: GO 11474
11474: DISABLE
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
11479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11480: LD_ADDR_VAR 0 3
11484: PUSH
11485: LD_INT 22
11487: PUSH
11488: LD_OWVAR 2
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 25
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: ST_TO_ADDR
// if not tmp then
11516: LD_VAR 0 3
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11611
// un := tmp [ rand ( 1 , tmp ) ] ;
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: LD_VAR 0 3
11534: PUSH
11535: LD_INT 1
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: CALL_OW 12
11547: ARRAY
11548: ST_TO_ADDR
// if Crawls ( un ) then
11549: LD_VAR 0 2
11553: PPUSH
11554: CALL_OW 318
11558: IFFALSE 11569
// ComWalk ( un ) ;
11560: LD_VAR 0 2
11564: PPUSH
11565: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11569: LD_VAR 0 2
11573: PPUSH
11574: LD_INT 9
11576: PPUSH
11577: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11581: LD_INT 28
11583: PPUSH
11584: LD_OWVAR 2
11588: PPUSH
11589: LD_INT 2
11591: PPUSH
11592: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11596: LD_INT 29
11598: PPUSH
11599: LD_OWVAR 2
11603: PPUSH
11604: LD_INT 2
11606: PPUSH
11607: CALL_OW 322
// end ;
11611: PPOPN 3
11613: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11614: LD_EXP 7
11618: PUSH
11619: LD_EXP 50
11623: AND
11624: IFFALSE 11735
11626: GO 11628
11628: DISABLE
11629: LD_INT 0
11631: PPUSH
11632: PPUSH
11633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11634: LD_ADDR_VAR 0 3
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_OWVAR 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 25
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 69
11669: ST_TO_ADDR
// if not tmp then
11670: LD_VAR 0 3
11674: NOT
11675: IFFALSE 11679
// exit ;
11677: GO 11735
// un := tmp [ rand ( 1 , tmp ) ] ;
11679: LD_ADDR_VAR 0 2
11683: PUSH
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 1
11691: PPUSH
11692: LD_VAR 0 3
11696: PPUSH
11697: CALL_OW 12
11701: ARRAY
11702: ST_TO_ADDR
// if Crawls ( un ) then
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 318
11712: IFFALSE 11723
// ComWalk ( un ) ;
11714: LD_VAR 0 2
11718: PPUSH
11719: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11723: LD_VAR 0 2
11727: PPUSH
11728: LD_INT 8
11730: PPUSH
11731: CALL_OW 336
// end ;
11735: PPOPN 3
11737: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11738: LD_EXP 7
11742: PUSH
11743: LD_EXP 51
11747: AND
11748: IFFALSE 11892
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_OWVAR 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 21
11776: PUSH
11777: LD_INT 2
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 34
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 34
11799: PUSH
11800: LD_INT 51
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 34
11809: PUSH
11810: LD_INT 32
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 69
11832: ST_TO_ADDR
// if not tmp then
11833: LD_VAR 0 2
11837: NOT
11838: IFFALSE 11842
// exit ;
11840: GO 11892
// for i in tmp do
11842: LD_ADDR_VAR 0 1
11846: PUSH
11847: LD_VAR 0 2
11851: PUSH
11852: FOR_IN
11853: IFFALSE 11890
// if GetCargo ( i , mat_artifact ) = 0 then
11855: LD_VAR 0 1
11859: PPUSH
11860: LD_INT 4
11862: PPUSH
11863: CALL_OW 289
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: IFFALSE 11888
// SetCargo ( i , mat_siberit , 100 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 3
11880: PPUSH
11881: LD_INT 100
11883: PPUSH
11884: CALL_OW 290
11888: GO 11852
11890: POP
11891: POP
// end ;
11892: PPOPN 2
11894: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11895: LD_EXP 7
11899: PUSH
11900: LD_EXP 52
11904: AND
11905: IFFALSE 12088
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11914: LD_ADDR_VAR 0 2
11918: PUSH
11919: LD_INT 22
11921: PUSH
11922: LD_OWVAR 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: ST_TO_ADDR
// if not tmp then
11936: LD_VAR 0 2
11940: NOT
11941: IFFALSE 11945
// exit ;
11943: GO 12088
// for i := 1 to 2 do
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: DOUBLE
11951: LD_INT 1
11953: DEC
11954: ST_TO_ADDR
11955: LD_INT 2
11957: PUSH
11958: FOR_TO
11959: IFFALSE 12086
// begin uc_side := your_side ;
11961: LD_ADDR_OWVAR 20
11965: PUSH
11966: LD_OWVAR 2
11970: ST_TO_ADDR
// uc_nation := nation_american ;
11971: LD_ADDR_OWVAR 21
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
// vc_chassis := us_morphling ;
11979: LD_ADDR_OWVAR 37
11983: PUSH
11984: LD_INT 5
11986: ST_TO_ADDR
// vc_engine := engine_siberite ;
11987: LD_ADDR_OWVAR 39
11991: PUSH
11992: LD_INT 3
11994: ST_TO_ADDR
// vc_control := control_computer ;
11995: LD_ADDR_OWVAR 38
11999: PUSH
12000: LD_INT 3
12002: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12003: LD_ADDR_OWVAR 40
12007: PUSH
12008: LD_INT 10
12010: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12011: LD_VAR 0 2
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: PPUSH
12020: CALL_OW 310
12024: NOT
12025: IFFALSE 12072
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12027: CALL_OW 45
12031: PPUSH
12032: LD_VAR 0 2
12036: PUSH
12037: LD_INT 1
12039: ARRAY
12040: PPUSH
12041: CALL_OW 250
12045: PPUSH
12046: LD_VAR 0 2
12050: PUSH
12051: LD_INT 1
12053: ARRAY
12054: PPUSH
12055: CALL_OW 251
12059: PPUSH
12060: LD_INT 12
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 50
12070: GO 12084
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12072: CALL_OW 45
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 51
// end ;
12084: GO 11958
12086: POP
12087: POP
// end ;
12088: PPOPN 2
12090: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12091: LD_EXP 7
12095: PUSH
12096: LD_EXP 53
12100: AND
12101: IFFALSE 12323
12103: GO 12105
12105: DISABLE
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12114: LD_ADDR_VAR 0 6
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_OWVAR 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: LD_INT 23
12146: PUSH
12147: LD_INT 0
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: ST_TO_ADDR
// if not tmp then
12168: LD_VAR 0 6
12172: NOT
12173: IFFALSE 12177
// exit ;
12175: GO 12323
// s1 := rand ( 1 , 4 ) ;
12177: LD_ADDR_VAR 0 2
12181: PUSH
12182: LD_INT 1
12184: PPUSH
12185: LD_INT 4
12187: PPUSH
12188: CALL_OW 12
12192: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12193: LD_ADDR_VAR 0 4
12197: PUSH
12198: LD_VAR 0 6
12202: PUSH
12203: LD_INT 1
12205: ARRAY
12206: PPUSH
12207: LD_VAR 0 2
12211: PPUSH
12212: CALL_OW 259
12216: ST_TO_ADDR
// if s1 = 1 then
12217: LD_VAR 0 2
12221: PUSH
12222: LD_INT 1
12224: EQUAL
12225: IFFALSE 12245
// s2 := rand ( 2 , 4 ) else
12227: LD_ADDR_VAR 0 3
12231: PUSH
12232: LD_INT 2
12234: PPUSH
12235: LD_INT 4
12237: PPUSH
12238: CALL_OW 12
12242: ST_TO_ADDR
12243: GO 12253
// s2 := 1 ;
12245: LD_ADDR_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12253: LD_ADDR_VAR 0 5
12257: PUSH
12258: LD_VAR 0 6
12262: PUSH
12263: LD_INT 1
12265: ARRAY
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: CALL_OW 259
12276: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12277: LD_VAR 0 6
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: LD_VAR 0 2
12290: PPUSH
12291: LD_VAR 0 5
12295: PPUSH
12296: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_VAR 0 4
12318: PPUSH
12319: CALL_OW 237
// end ;
12323: PPOPN 6
12325: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12326: LD_EXP 7
12330: PUSH
12331: LD_EXP 54
12335: AND
12336: IFFALSE 12415
12338: GO 12340
12340: DISABLE
12341: LD_INT 0
12343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12344: LD_ADDR_VAR 0 1
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_OWVAR 2
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 30
12363: PUSH
12364: LD_INT 3
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if not tmp then
12380: LD_VAR 0 1
12384: NOT
12385: IFFALSE 12389
// exit ;
12387: GO 12415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12389: LD_VAR 0 1
12393: PUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 12
12406: ARRAY
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 234
// end ;
12415: PPOPN 1
12417: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12418: LD_EXP 7
12422: PUSH
12423: LD_EXP 55
12427: AND
12428: IFFALSE 12540
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12437: LD_ADDR_VAR 0 2
12441: PUSH
12442: LD_INT 22
12444: PUSH
12445: LD_OWVAR 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 27
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 26
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 30
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 69
12501: ST_TO_ADDR
// if not tmp then
12502: LD_VAR 0 2
12506: NOT
12507: IFFALSE 12511
// exit ;
12509: GO 12540
// for i in tmp do
12511: LD_ADDR_VAR 0 1
12515: PUSH
12516: LD_VAR 0 2
12520: PUSH
12521: FOR_IN
12522: IFFALSE 12538
// SetLives ( i , 1 ) ;
12524: LD_VAR 0 1
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 234
12536: GO 12521
12538: POP
12539: POP
// end ;
12540: PPOPN 2
12542: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12543: LD_EXP 7
12547: PUSH
12548: LD_EXP 56
12552: AND
12553: IFFALSE 12840
12555: GO 12557
12557: DISABLE
12558: LD_INT 0
12560: PPUSH
12561: PPUSH
12562: PPUSH
// begin i := rand ( 1 , 7 ) ;
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_INT 1
12570: PPUSH
12571: LD_INT 7
12573: PPUSH
12574: CALL_OW 12
12578: ST_TO_ADDR
// case i of 1 :
12579: LD_VAR 0 1
12583: PUSH
12584: LD_INT 1
12586: DOUBLE
12587: EQUAL
12588: IFTRUE 12592
12590: GO 12602
12592: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12593: LD_STRING earthquake(getX(game), 0, 32)
12595: PPUSH
12596: CALL_OW 559
12600: GO 12840
12602: LD_INT 2
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12624
12610: POP
// begin ToLua ( displayStucuk(); ) ;
12611: LD_STRING displayStucuk();
12613: PPUSH
12614: CALL_OW 559
// ResetFog ;
12618: CALL_OW 335
// end ; 3 :
12622: GO 12840
12624: LD_INT 3
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12736
12632: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12633: LD_ADDR_VAR 0 2
12637: PUSH
12638: LD_INT 22
12640: PUSH
12641: LD_OWVAR 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: ST_TO_ADDR
// if not tmp then
12669: LD_VAR 0 2
12673: NOT
12674: IFFALSE 12678
// exit ;
12676: GO 12840
// un := tmp [ rand ( 1 , tmp ) ] ;
12678: LD_ADDR_VAR 0 3
12682: PUSH
12683: LD_VAR 0 2
12687: PUSH
12688: LD_INT 1
12690: PPUSH
12691: LD_VAR 0 2
12695: PPUSH
12696: CALL_OW 12
12700: ARRAY
12701: ST_TO_ADDR
// if Crawls ( un ) then
12702: LD_VAR 0 3
12706: PPUSH
12707: CALL_OW 318
12711: IFFALSE 12722
// ComWalk ( un ) ;
12713: LD_VAR 0 3
12717: PPUSH
12718: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 8
12729: PPUSH
12730: CALL_OW 336
// end ; 4 :
12734: GO 12840
12736: LD_INT 4
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12818
12744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12745: LD_ADDR_VAR 0 2
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_OWVAR 2
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 29
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 69
12780: ST_TO_ADDR
// if not tmp then
12781: LD_VAR 0 2
12785: NOT
12786: IFFALSE 12790
// exit ;
12788: GO 12840
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12790: LD_VAR 0 2
12794: PUSH
12795: LD_INT 1
12797: ARRAY
12798: PPUSH
12799: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12803: LD_VAR 0 2
12807: PUSH
12808: LD_INT 1
12810: ARRAY
12811: PPUSH
12812: CALL_OW 65
// end ; 5 .. 7 :
12816: GO 12840
12818: LD_INT 5
12820: DOUBLE
12821: GREATEREQUAL
12822: IFFALSE 12830
12824: LD_INT 7
12826: DOUBLE
12827: LESSEQUAL
12828: IFTRUE 12832
12830: GO 12839
12832: POP
// StreamSibBomb ; end ;
12833: CALL 9077 0 0
12837: GO 12840
12839: POP
// end ;
12840: PPOPN 3
12842: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12843: LD_EXP 7
12847: PUSH
12848: LD_EXP 57
12852: AND
12853: IFFALSE 13009
12855: GO 12857
12857: DISABLE
12858: LD_INT 0
12860: PPUSH
12861: PPUSH
12862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12863: LD_ADDR_VAR 0 2
12867: PUSH
12868: LD_INT 81
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 2
12882: PUSH
12883: LD_INT 21
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 21
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PPUSH
12912: CALL_OW 69
12916: ST_TO_ADDR
// if not tmp then
12917: LD_VAR 0 2
12921: NOT
12922: IFFALSE 12926
// exit ;
12924: GO 13009
// p := 0 ;
12926: LD_ADDR_VAR 0 3
12930: PUSH
12931: LD_INT 0
12933: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12934: LD_INT 35
12936: PPUSH
12937: CALL_OW 67
// p := p + 1 ;
12941: LD_ADDR_VAR 0 3
12945: PUSH
12946: LD_VAR 0 3
12950: PUSH
12951: LD_INT 1
12953: PLUS
12954: ST_TO_ADDR
// for i in tmp do
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_VAR 0 2
12964: PUSH
12965: FOR_IN
12966: IFFALSE 12997
// if GetLives ( i ) < 1000 then
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL_OW 256
12977: PUSH
12978: LD_INT 1000
12980: LESS
12981: IFFALSE 12995
// SetLives ( i , 1000 ) ;
12983: LD_VAR 0 1
12987: PPUSH
12988: LD_INT 1000
12990: PPUSH
12991: CALL_OW 234
12995: GO 12965
12997: POP
12998: POP
// until p > 20 ;
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 20
13006: GREATER
13007: IFFALSE 12934
// end ;
13009: PPOPN 3
13011: END
// every 0 0$1 trigger StreamModeActive and sTime do
13012: LD_EXP 7
13016: PUSH
13017: LD_EXP 58
13021: AND
13022: IFFALSE 13057
13024: GO 13026
13026: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13027: LD_INT 28
13029: PPUSH
13030: LD_OWVAR 2
13034: PPUSH
13035: LD_INT 2
13037: PPUSH
13038: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13042: LD_INT 30
13044: PPUSH
13045: LD_OWVAR 2
13049: PPUSH
13050: LD_INT 2
13052: PPUSH
13053: CALL_OW 322
// end ;
13057: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13058: LD_EXP 7
13062: PUSH
13063: LD_EXP 59
13067: AND
13068: IFFALSE 13189
13070: GO 13072
13072: DISABLE
13073: LD_INT 0
13075: PPUSH
13076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13077: LD_ADDR_VAR 0 2
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_OWVAR 2
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: LD_INT 23
13109: PUSH
13110: LD_INT 0
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: PPUSH
13126: CALL_OW 69
13130: ST_TO_ADDR
// if not tmp then
13131: LD_VAR 0 2
13135: NOT
13136: IFFALSE 13140
// exit ;
13138: GO 13189
// for i in tmp do
13140: LD_ADDR_VAR 0 1
13144: PUSH
13145: LD_VAR 0 2
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13187
// begin if Crawls ( i ) then
13153: LD_VAR 0 1
13157: PPUSH
13158: CALL_OW 318
13162: IFFALSE 13173
// ComWalk ( i ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: CALL_OW 138
// SetClass ( i , 2 ) ;
13173: LD_VAR 0 1
13177: PPUSH
13178: LD_INT 2
13180: PPUSH
13181: CALL_OW 336
// end ;
13185: GO 13150
13187: POP
13188: POP
// end ;
13189: PPOPN 2
13191: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13192: LD_EXP 7
13196: PUSH
13197: LD_EXP 60
13201: AND
13202: IFFALSE 13490
13204: GO 13206
13206: DISABLE
13207: LD_INT 0
13209: PPUSH
13210: PPUSH
13211: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13212: LD_OWVAR 2
13216: PPUSH
13217: LD_INT 9
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: LD_INT 1
13225: PPUSH
13226: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13230: LD_INT 9
13232: PPUSH
13233: LD_OWVAR 2
13237: PPUSH
13238: CALL_OW 343
// uc_side := 9 ;
13242: LD_ADDR_OWVAR 20
13246: PUSH
13247: LD_INT 9
13249: ST_TO_ADDR
// uc_nation := 2 ;
13250: LD_ADDR_OWVAR 21
13254: PUSH
13255: LD_INT 2
13257: ST_TO_ADDR
// hc_name := Dark Warrior ;
13258: LD_ADDR_OWVAR 26
13262: PUSH
13263: LD_STRING Dark Warrior
13265: ST_TO_ADDR
// hc_gallery :=  ;
13266: LD_ADDR_OWVAR 33
13270: PUSH
13271: LD_STRING 
13273: ST_TO_ADDR
// hc_noskilllimit := true ;
13274: LD_ADDR_OWVAR 76
13278: PUSH
13279: LD_INT 1
13281: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13282: LD_ADDR_OWVAR 31
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 30
13292: PUSH
13293: LD_INT 30
13295: PUSH
13296: LD_INT 30
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: ST_TO_ADDR
// un := CreateHuman ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// hc_noskilllimit := false ;
13315: LD_ADDR_OWVAR 76
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13323: LD_VAR 0 3
13327: PPUSH
13328: LD_INT 1
13330: PPUSH
13331: CALL_OW 51
// ToLua ( playRanger() ) ;
13335: LD_STRING playRanger()
13337: PPUSH
13338: CALL_OW 559
// p := 0 ;
13342: LD_ADDR_VAR 0 2
13346: PUSH
13347: LD_INT 0
13349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13350: LD_INT 35
13352: PPUSH
13353: CALL_OW 67
// p := p + 1 ;
13357: LD_ADDR_VAR 0 2
13361: PUSH
13362: LD_VAR 0 2
13366: PUSH
13367: LD_INT 1
13369: PLUS
13370: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13371: LD_VAR 0 3
13375: PPUSH
13376: CALL_OW 256
13380: PUSH
13381: LD_INT 1000
13383: LESS
13384: IFFALSE 13398
// SetLives ( un , 1000 ) ;
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1000
13393: PPUSH
13394: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13398: LD_VAR 0 3
13402: PPUSH
13403: LD_INT 81
13405: PUSH
13406: LD_OWVAR 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 91
13417: PUSH
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: PPUSH
13440: LD_VAR 0 3
13444: PPUSH
13445: CALL_OW 74
13449: PPUSH
13450: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13454: LD_VAR 0 2
13458: PUSH
13459: LD_INT 80
13461: GREATER
13462: PUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: CALL_OW 301
13472: OR
13473: IFFALSE 13350
// if un then
13475: LD_VAR 0 3
13479: IFFALSE 13490
// RemoveUnit ( un ) ;
13481: LD_VAR 0 3
13485: PPUSH
13486: CALL_OW 64
// end ;
13490: PPOPN 3
13492: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13493: LD_EXP 61
13497: IFFALSE 13613
13499: GO 13501
13501: DISABLE
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
13506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 81
13514: PUSH
13515: LD_OWVAR 2
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 21
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PPUSH
13538: CALL_OW 69
13542: ST_TO_ADDR
// if not tmp then
13543: LD_VAR 0 2
13547: NOT
13548: IFFALSE 13552
// exit ;
13550: GO 13613
// ToLua ( playComputer() ) ;
13552: LD_STRING playComputer()
13554: PPUSH
13555: CALL_OW 559
// for i in tmp do
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: LD_VAR 0 2
13568: PUSH
13569: FOR_IN
13570: IFFALSE 13611
// for j := 1 to 4 do
13572: LD_ADDR_VAR 0 3
13576: PUSH
13577: DOUBLE
13578: LD_INT 1
13580: DEC
13581: ST_TO_ADDR
13582: LD_INT 4
13584: PUSH
13585: FOR_TO
13586: IFFALSE 13607
// SetSkill ( i , j , 10 ) ;
13588: LD_VAR 0 1
13592: PPUSH
13593: LD_VAR 0 3
13597: PPUSH
13598: LD_INT 10
13600: PPUSH
13601: CALL_OW 237
13605: GO 13585
13607: POP
13608: POP
13609: GO 13569
13611: POP
13612: POP
// end ;
13613: PPOPN 3
13615: END
// every 0 0$1 trigger s30 do var i , tmp ;
13616: LD_EXP 62
13620: IFFALSE 13689
13622: GO 13624
13624: DISABLE
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13629: LD_ADDR_VAR 0 2
13633: PUSH
13634: LD_INT 22
13636: PUSH
13637: LD_OWVAR 2
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 69
13650: ST_TO_ADDR
// if not tmp then
13651: LD_VAR 0 2
13655: NOT
13656: IFFALSE 13660
// exit ;
13658: GO 13689
// for i in tmp do
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_VAR 0 2
13669: PUSH
13670: FOR_IN
13671: IFFALSE 13687
// SetLives ( i , 300 ) ;
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 300
13680: PPUSH
13681: CALL_OW 234
13685: GO 13670
13687: POP
13688: POP
// end ;
13689: PPOPN 2
13691: END
// every 0 0$1 trigger s60 do var i , tmp ;
13692: LD_EXP 63
13696: IFFALSE 13765
13698: GO 13700
13700: DISABLE
13701: LD_INT 0
13703: PPUSH
13704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13705: LD_ADDR_VAR 0 2
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_OWVAR 2
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 69
13726: ST_TO_ADDR
// if not tmp then
13727: LD_VAR 0 2
13731: NOT
13732: IFFALSE 13736
// exit ;
13734: GO 13765
// for i in tmp do
13736: LD_ADDR_VAR 0 1
13740: PUSH
13741: LD_VAR 0 2
13745: PUSH
13746: FOR_IN
13747: IFFALSE 13763
// SetLives ( i , 600 ) ;
13749: LD_VAR 0 1
13753: PPUSH
13754: LD_INT 600
13756: PPUSH
13757: CALL_OW 234
13761: GO 13746
13763: POP
13764: POP
// end ;
13765: PPOPN 2
13767: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13768: LD_INT 0
13770: PPUSH
// case cmd of 301 :
13771: LD_VAR 0 1
13775: PUSH
13776: LD_INT 301
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13816
13784: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13785: LD_VAR 0 6
13789: PPUSH
13790: LD_VAR 0 7
13794: PPUSH
13795: LD_VAR 0 8
13799: PPUSH
13800: LD_VAR 0 4
13804: PPUSH
13805: LD_VAR 0 5
13809: PPUSH
13810: CALL 15017 0 5
13814: GO 13937
13816: LD_INT 302
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13861
13824: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13825: LD_VAR 0 6
13829: PPUSH
13830: LD_VAR 0 7
13834: PPUSH
13835: LD_VAR 0 8
13839: PPUSH
13840: LD_VAR 0 9
13844: PPUSH
13845: LD_VAR 0 4
13849: PPUSH
13850: LD_VAR 0 5
13854: PPUSH
13855: CALL 15108 0 6
13859: GO 13937
13861: LD_INT 303
13863: DOUBLE
13864: EQUAL
13865: IFTRUE 13869
13867: GO 13906
13869: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13870: LD_VAR 0 6
13874: PPUSH
13875: LD_VAR 0 7
13879: PPUSH
13880: LD_VAR 0 8
13884: PPUSH
13885: LD_VAR 0 9
13889: PPUSH
13890: LD_VAR 0 4
13894: PPUSH
13895: LD_VAR 0 5
13899: PPUSH
13900: CALL 13942 0 6
13904: GO 13937
13906: LD_INT 304
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 13936
13914: POP
// hHackTeleport ( unit , x , y ) ; end ;
13915: LD_VAR 0 2
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: LD_VAR 0 5
13929: PPUSH
13930: CALL 15701 0 3
13934: GO 13937
13936: POP
// end ;
13937: LD_VAR 0 12
13941: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13942: LD_INT 0
13944: PPUSH
13945: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13946: LD_VAR 0 1
13950: PUSH
13951: LD_INT 1
13953: LESS
13954: PUSH
13955: LD_VAR 0 1
13959: PUSH
13960: LD_INT 3
13962: GREATER
13963: OR
13964: PUSH
13965: LD_VAR 0 5
13969: PPUSH
13970: LD_VAR 0 6
13974: PPUSH
13975: CALL_OW 428
13979: OR
13980: IFFALSE 13984
// exit ;
13982: GO 14704
// uc_side := your_side ;
13984: LD_ADDR_OWVAR 20
13988: PUSH
13989: LD_OWVAR 2
13993: ST_TO_ADDR
// uc_nation := nation ;
13994: LD_ADDR_OWVAR 21
13998: PUSH
13999: LD_VAR 0 1
14003: ST_TO_ADDR
// bc_level = 1 ;
14004: LD_ADDR_OWVAR 43
14008: PUSH
14009: LD_INT 1
14011: ST_TO_ADDR
// case btype of 1 :
14012: LD_VAR 0 2
14016: PUSH
14017: LD_INT 1
14019: DOUBLE
14020: EQUAL
14021: IFTRUE 14025
14023: GO 14036
14025: POP
// bc_type := b_depot ; 2 :
14026: LD_ADDR_OWVAR 42
14030: PUSH
14031: LD_INT 0
14033: ST_TO_ADDR
14034: GO 14648
14036: LD_INT 2
14038: DOUBLE
14039: EQUAL
14040: IFTRUE 14044
14042: GO 14055
14044: POP
// bc_type := b_warehouse ; 3 :
14045: LD_ADDR_OWVAR 42
14049: PUSH
14050: LD_INT 1
14052: ST_TO_ADDR
14053: GO 14648
14055: LD_INT 3
14057: DOUBLE
14058: EQUAL
14059: IFTRUE 14063
14061: GO 14074
14063: POP
// bc_type := b_lab ; 4 .. 9 :
14064: LD_ADDR_OWVAR 42
14068: PUSH
14069: LD_INT 6
14071: ST_TO_ADDR
14072: GO 14648
14074: LD_INT 4
14076: DOUBLE
14077: GREATEREQUAL
14078: IFFALSE 14086
14080: LD_INT 9
14082: DOUBLE
14083: LESSEQUAL
14084: IFTRUE 14088
14086: GO 14140
14088: POP
// begin bc_type := b_lab_half ;
14089: LD_ADDR_OWVAR 42
14093: PUSH
14094: LD_INT 7
14096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14097: LD_ADDR_OWVAR 44
14101: PUSH
14102: LD_INT 10
14104: PUSH
14105: LD_INT 11
14107: PUSH
14108: LD_INT 12
14110: PUSH
14111: LD_INT 15
14113: PUSH
14114: LD_INT 14
14116: PUSH
14117: LD_INT 13
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: LD_VAR 0 2
14132: PUSH
14133: LD_INT 3
14135: MINUS
14136: ARRAY
14137: ST_TO_ADDR
// end ; 10 .. 13 :
14138: GO 14648
14140: LD_INT 10
14142: DOUBLE
14143: GREATEREQUAL
14144: IFFALSE 14152
14146: LD_INT 13
14148: DOUBLE
14149: LESSEQUAL
14150: IFTRUE 14154
14152: GO 14231
14154: POP
// begin bc_type := b_lab_full ;
14155: LD_ADDR_OWVAR 42
14159: PUSH
14160: LD_INT 8
14162: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14163: LD_ADDR_OWVAR 44
14167: PUSH
14168: LD_INT 10
14170: PUSH
14171: LD_INT 12
14173: PUSH
14174: LD_INT 14
14176: PUSH
14177: LD_INT 13
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: LD_VAR 0 2
14190: PUSH
14191: LD_INT 9
14193: MINUS
14194: ARRAY
14195: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14196: LD_ADDR_OWVAR 45
14200: PUSH
14201: LD_INT 11
14203: PUSH
14204: LD_INT 15
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 15
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: LD_VAR 0 2
14223: PUSH
14224: LD_INT 9
14226: MINUS
14227: ARRAY
14228: ST_TO_ADDR
// end ; 14 :
14229: GO 14648
14231: LD_INT 14
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14250
14239: POP
// bc_type := b_workshop ; 15 :
14240: LD_ADDR_OWVAR 42
14244: PUSH
14245: LD_INT 2
14247: ST_TO_ADDR
14248: GO 14648
14250: LD_INT 15
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14269
14258: POP
// bc_type := b_factory ; 16 :
14259: LD_ADDR_OWVAR 42
14263: PUSH
14264: LD_INT 3
14266: ST_TO_ADDR
14267: GO 14648
14269: LD_INT 16
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14288
14277: POP
// bc_type := b_ext_gun ; 17 :
14278: LD_ADDR_OWVAR 42
14282: PUSH
14283: LD_INT 17
14285: ST_TO_ADDR
14286: GO 14648
14288: LD_INT 17
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14296
14294: GO 14324
14296: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14297: LD_ADDR_OWVAR 42
14301: PUSH
14302: LD_INT 19
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 19
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_VAR 0 1
14320: ARRAY
14321: ST_TO_ADDR
14322: GO 14648
14324: LD_INT 18
14326: DOUBLE
14327: EQUAL
14328: IFTRUE 14332
14330: GO 14343
14332: POP
// bc_type := b_ext_radar ; 19 :
14333: LD_ADDR_OWVAR 42
14337: PUSH
14338: LD_INT 20
14340: ST_TO_ADDR
14341: GO 14648
14343: LD_INT 19
14345: DOUBLE
14346: EQUAL
14347: IFTRUE 14351
14349: GO 14362
14351: POP
// bc_type := b_ext_radio ; 20 :
14352: LD_ADDR_OWVAR 42
14356: PUSH
14357: LD_INT 22
14359: ST_TO_ADDR
14360: GO 14648
14362: LD_INT 20
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14381
14370: POP
// bc_type := b_ext_siberium ; 21 :
14371: LD_ADDR_OWVAR 42
14375: PUSH
14376: LD_INT 21
14378: ST_TO_ADDR
14379: GO 14648
14381: LD_INT 21
14383: DOUBLE
14384: EQUAL
14385: IFTRUE 14389
14387: GO 14400
14389: POP
// bc_type := b_ext_computer ; 22 :
14390: LD_ADDR_OWVAR 42
14394: PUSH
14395: LD_INT 24
14397: ST_TO_ADDR
14398: GO 14648
14400: LD_INT 22
14402: DOUBLE
14403: EQUAL
14404: IFTRUE 14408
14406: GO 14419
14408: POP
// bc_type := b_ext_track ; 23 :
14409: LD_ADDR_OWVAR 42
14413: PUSH
14414: LD_INT 16
14416: ST_TO_ADDR
14417: GO 14648
14419: LD_INT 23
14421: DOUBLE
14422: EQUAL
14423: IFTRUE 14427
14425: GO 14438
14427: POP
// bc_type := b_ext_laser ; 24 :
14428: LD_ADDR_OWVAR 42
14432: PUSH
14433: LD_INT 25
14435: ST_TO_ADDR
14436: GO 14648
14438: LD_INT 24
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14457
14446: POP
// bc_type := b_control_tower ; 25 :
14447: LD_ADDR_OWVAR 42
14451: PUSH
14452: LD_INT 36
14454: ST_TO_ADDR
14455: GO 14648
14457: LD_INT 25
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 14476
14465: POP
// bc_type := b_breastwork ; 26 :
14466: LD_ADDR_OWVAR 42
14470: PUSH
14471: LD_INT 31
14473: ST_TO_ADDR
14474: GO 14648
14476: LD_INT 26
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14495
14484: POP
// bc_type := b_bunker ; 27 :
14485: LD_ADDR_OWVAR 42
14489: PUSH
14490: LD_INT 32
14492: ST_TO_ADDR
14493: GO 14648
14495: LD_INT 27
14497: DOUBLE
14498: EQUAL
14499: IFTRUE 14503
14501: GO 14514
14503: POP
// bc_type := b_turret ; 28 :
14504: LD_ADDR_OWVAR 42
14508: PUSH
14509: LD_INT 33
14511: ST_TO_ADDR
14512: GO 14648
14514: LD_INT 28
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14533
14522: POP
// bc_type := b_armoury ; 29 :
14523: LD_ADDR_OWVAR 42
14527: PUSH
14528: LD_INT 4
14530: ST_TO_ADDR
14531: GO 14648
14533: LD_INT 29
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14541
14539: GO 14552
14541: POP
// bc_type := b_barracks ; 30 :
14542: LD_ADDR_OWVAR 42
14546: PUSH
14547: LD_INT 5
14549: ST_TO_ADDR
14550: GO 14648
14552: LD_INT 30
14554: DOUBLE
14555: EQUAL
14556: IFTRUE 14560
14558: GO 14571
14560: POP
// bc_type := b_solar_power ; 31 :
14561: LD_ADDR_OWVAR 42
14565: PUSH
14566: LD_INT 27
14568: ST_TO_ADDR
14569: GO 14648
14571: LD_INT 31
14573: DOUBLE
14574: EQUAL
14575: IFTRUE 14579
14577: GO 14590
14579: POP
// bc_type := b_oil_power ; 32 :
14580: LD_ADDR_OWVAR 42
14584: PUSH
14585: LD_INT 26
14587: ST_TO_ADDR
14588: GO 14648
14590: LD_INT 32
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14609
14598: POP
// bc_type := b_siberite_power ; 33 :
14599: LD_ADDR_OWVAR 42
14603: PUSH
14604: LD_INT 28
14606: ST_TO_ADDR
14607: GO 14648
14609: LD_INT 33
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14628
14617: POP
// bc_type := b_oil_mine ; 34 :
14618: LD_ADDR_OWVAR 42
14622: PUSH
14623: LD_INT 29
14625: ST_TO_ADDR
14626: GO 14648
14628: LD_INT 34
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14647
14636: POP
// bc_type := b_siberite_mine ; end ;
14637: LD_ADDR_OWVAR 42
14641: PUSH
14642: LD_INT 30
14644: ST_TO_ADDR
14645: GO 14648
14647: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14648: LD_ADDR_VAR 0 8
14652: PUSH
14653: LD_VAR 0 5
14657: PPUSH
14658: LD_VAR 0 6
14662: PPUSH
14663: LD_VAR 0 3
14667: PPUSH
14668: CALL_OW 47
14672: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14673: LD_OWVAR 42
14677: PUSH
14678: LD_INT 32
14680: PUSH
14681: LD_INT 33
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: IN
14688: IFFALSE 14704
// PlaceWeaponTurret ( b , weapon ) ;
14690: LD_VAR 0 8
14694: PPUSH
14695: LD_VAR 0 4
14699: PPUSH
14700: CALL_OW 431
// end ;
14704: LD_VAR 0 7
14708: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14709: LD_INT 0
14711: PPUSH
14712: PPUSH
14713: PPUSH
14714: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14715: LD_ADDR_VAR 0 4
14719: PUSH
14720: LD_INT 22
14722: PUSH
14723: LD_OWVAR 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 30
14737: PUSH
14738: LD_INT 0
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: ST_TO_ADDR
// if not tmp then
14769: LD_VAR 0 4
14773: NOT
14774: IFFALSE 14778
// exit ;
14776: GO 14837
// for i in tmp do
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_VAR 0 4
14787: PUSH
14788: FOR_IN
14789: IFFALSE 14835
// for j = 1 to 3 do
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: DOUBLE
14797: LD_INT 1
14799: DEC
14800: ST_TO_ADDR
14801: LD_INT 3
14803: PUSH
14804: FOR_TO
14805: IFFALSE 14831
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 274
14816: PPUSH
14817: LD_VAR 0 3
14821: PPUSH
14822: LD_INT 99999
14824: PPUSH
14825: CALL_OW 277
14829: GO 14804
14831: POP
14832: POP
14833: GO 14788
14835: POP
14836: POP
// end ;
14837: LD_VAR 0 1
14841: RET
// export function hHackSetLevel10 ; var i , j ; begin
14842: LD_INT 0
14844: PPUSH
14845: PPUSH
14846: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_INT 21
14854: PUSH
14855: LD_INT 1
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: PUSH
14867: FOR_IN
14868: IFFALSE 14920
// if IsSelected ( i ) then
14870: LD_VAR 0 2
14874: PPUSH
14875: CALL_OW 306
14879: IFFALSE 14918
// begin for j := 1 to 4 do
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_INT 4
14893: PUSH
14894: FOR_TO
14895: IFFALSE 14916
// SetSkill ( i , j , 10 ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 10
14909: PPUSH
14910: CALL_OW 237
14914: GO 14894
14916: POP
14917: POP
// end ;
14918: GO 14867
14920: POP
14921: POP
// end ;
14922: LD_VAR 0 1
14926: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14927: LD_INT 0
14929: PPUSH
14930: PPUSH
14931: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14932: LD_ADDR_VAR 0 2
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_OWVAR 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PPUSH
14963: CALL_OW 69
14967: PUSH
14968: FOR_IN
14969: IFFALSE 15010
// begin for j := 1 to 4 do
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: DOUBLE
14977: LD_INT 1
14979: DEC
14980: ST_TO_ADDR
14981: LD_INT 4
14983: PUSH
14984: FOR_TO
14985: IFFALSE 15006
// SetSkill ( i , j , 10 ) ;
14987: LD_VAR 0 2
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 10
14999: PPUSH
15000: CALL_OW 237
15004: GO 14984
15006: POP
15007: POP
// end ;
15008: GO 14968
15010: POP
15011: POP
// end ;
15012: LD_VAR 0 1
15016: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15017: LD_INT 0
15019: PPUSH
// uc_side := your_side ;
15020: LD_ADDR_OWVAR 20
15024: PUSH
15025: LD_OWVAR 2
15029: ST_TO_ADDR
// uc_nation := nation ;
15030: LD_ADDR_OWVAR 21
15034: PUSH
15035: LD_VAR 0 1
15039: ST_TO_ADDR
// InitHc ;
15040: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15044: LD_INT 0
15046: PPUSH
15047: LD_VAR 0 2
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15061: LD_VAR 0 4
15065: PPUSH
15066: LD_VAR 0 5
15070: PPUSH
15071: CALL_OW 428
15075: PUSH
15076: LD_INT 0
15078: EQUAL
15079: IFFALSE 15103
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15081: CALL_OW 44
15085: PPUSH
15086: LD_VAR 0 4
15090: PPUSH
15091: LD_VAR 0 5
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 48
// end ;
15103: LD_VAR 0 6
15107: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15108: LD_INT 0
15110: PPUSH
15111: PPUSH
// uc_side := your_side ;
15112: LD_ADDR_OWVAR 20
15116: PUSH
15117: LD_OWVAR 2
15121: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15122: LD_VAR 0 1
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: LD_INT 3
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: LD_INT 5
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: IN
15149: IFFALSE 15161
// uc_nation := nation_american else
15151: LD_ADDR_OWVAR 21
15155: PUSH
15156: LD_INT 1
15158: ST_TO_ADDR
15159: GO 15204
// if chassis in [ 11 , 12 , 13 , 14 ] then
15161: LD_VAR 0 1
15165: PUSH
15166: LD_INT 11
15168: PUSH
15169: LD_INT 12
15171: PUSH
15172: LD_INT 13
15174: PUSH
15175: LD_INT 14
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: IN
15184: IFFALSE 15196
// uc_nation := nation_arabian else
15186: LD_ADDR_OWVAR 21
15190: PUSH
15191: LD_INT 2
15193: ST_TO_ADDR
15194: GO 15204
// uc_nation := nation_russian ;
15196: LD_ADDR_OWVAR 21
15200: PUSH
15201: LD_INT 3
15203: ST_TO_ADDR
// vc_chassis := chassis ;
15204: LD_ADDR_OWVAR 37
15208: PUSH
15209: LD_VAR 0 1
15213: ST_TO_ADDR
// vc_engine := engine ;
15214: LD_ADDR_OWVAR 39
15218: PUSH
15219: LD_VAR 0 2
15223: ST_TO_ADDR
// vc_control := control ;
15224: LD_ADDR_OWVAR 38
15228: PUSH
15229: LD_VAR 0 3
15233: ST_TO_ADDR
// vc_weapon := weapon ;
15234: LD_ADDR_OWVAR 40
15238: PUSH
15239: LD_VAR 0 4
15243: ST_TO_ADDR
// un := CreateVehicle ;
15244: LD_ADDR_VAR 0 8
15248: PUSH
15249: CALL_OW 45
15253: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15254: LD_VAR 0 8
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: LD_INT 5
15264: PPUSH
15265: CALL_OW 12
15269: PPUSH
15270: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15274: LD_VAR 0 8
15278: PPUSH
15279: LD_VAR 0 5
15283: PPUSH
15284: LD_VAR 0 6
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 48
// end ;
15296: LD_VAR 0 7
15300: RET
// export hInvincible ; every 1 do
15301: GO 15303
15303: DISABLE
// hInvincible := [ ] ;
15304: LD_ADDR_EXP 64
15308: PUSH
15309: EMPTY
15310: ST_TO_ADDR
15311: END
// every 10 do var i ;
15312: GO 15314
15314: DISABLE
15315: LD_INT 0
15317: PPUSH
// begin enable ;
15318: ENABLE
// if not hInvincible then
15319: LD_EXP 64
15323: NOT
15324: IFFALSE 15328
// exit ;
15326: GO 15372
// for i in hInvincible do
15328: LD_ADDR_VAR 0 1
15332: PUSH
15333: LD_EXP 64
15337: PUSH
15338: FOR_IN
15339: IFFALSE 15370
// if GetLives ( i ) < 1000 then
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 256
15350: PUSH
15351: LD_INT 1000
15353: LESS
15354: IFFALSE 15368
// SetLives ( i , 1000 ) ;
15356: LD_VAR 0 1
15360: PPUSH
15361: LD_INT 1000
15363: PPUSH
15364: CALL_OW 234
15368: GO 15338
15370: POP
15371: POP
// end ;
15372: PPOPN 1
15374: END
// export function hHackInvincible ; var i ; begin
15375: LD_INT 0
15377: PPUSH
15378: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 21
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15479
// if IsSelected ( i ) then
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 306
15429: IFFALSE 15477
// begin if i in hInvincible then
15431: LD_VAR 0 2
15435: PUSH
15436: LD_EXP 64
15440: IN
15441: IFFALSE 15461
// hInvincible := hInvincible diff i else
15443: LD_ADDR_EXP 64
15447: PUSH
15448: LD_EXP 64
15452: PUSH
15453: LD_VAR 0 2
15457: DIFF
15458: ST_TO_ADDR
15459: GO 15477
// hInvincible := hInvincible union i ;
15461: LD_ADDR_EXP 64
15465: PUSH
15466: LD_EXP 64
15470: PUSH
15471: LD_VAR 0 2
15475: UNION
15476: ST_TO_ADDR
// end ;
15477: GO 15417
15479: POP
15480: POP
// end ;
15481: LD_VAR 0 1
15485: RET
// export function hHackInvisible ; var i , j ; begin
15486: LD_INT 0
15488: PPUSH
15489: PPUSH
15490: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15491: LD_ADDR_VAR 0 2
15495: PUSH
15496: LD_INT 21
15498: PUSH
15499: LD_INT 1
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: PUSH
15511: FOR_IN
15512: IFFALSE 15536
// if IsSelected ( i ) then
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 306
15523: IFFALSE 15534
// ComForceInvisible ( i ) ;
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 496
15534: GO 15511
15536: POP
15537: POP
// end ;
15538: LD_VAR 0 1
15542: RET
// export function hHackChangeYourSide ; begin
15543: LD_INT 0
15545: PPUSH
// if your_side = 8 then
15546: LD_OWVAR 2
15550: PUSH
15551: LD_INT 8
15553: EQUAL
15554: IFFALSE 15566
// your_side := 0 else
15556: LD_ADDR_OWVAR 2
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
15564: GO 15580
// your_side := your_side + 1 ;
15566: LD_ADDR_OWVAR 2
15570: PUSH
15571: LD_OWVAR 2
15575: PUSH
15576: LD_INT 1
15578: PLUS
15579: ST_TO_ADDR
// end ;
15580: LD_VAR 0 1
15584: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15585: LD_INT 0
15587: PPUSH
15588: PPUSH
15589: PPUSH
// for i in all_units do
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_OWVAR 3
15599: PUSH
15600: FOR_IN
15601: IFFALSE 15679
// if IsSelected ( i ) then
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 306
15612: IFFALSE 15677
// begin j := GetSide ( i ) ;
15614: LD_ADDR_VAR 0 3
15618: PUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: CALL_OW 255
15628: ST_TO_ADDR
// if j = 8 then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 8
15636: EQUAL
15637: IFFALSE 15649
// j := 0 else
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_INT 0
15646: ST_TO_ADDR
15647: GO 15663
// j := j + 1 ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_INT 1
15661: PLUS
15662: ST_TO_ADDR
// SetSide ( i , j ) ;
15663: LD_VAR 0 2
15667: PPUSH
15668: LD_VAR 0 3
15672: PPUSH
15673: CALL_OW 235
// end ;
15677: GO 15600
15679: POP
15680: POP
// end ;
15681: LD_VAR 0 1
15685: RET
// export function hHackFog ; begin
15686: LD_INT 0
15688: PPUSH
// FogOff ( true ) ;
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 344
// end ;
15696: LD_VAR 0 1
15700: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15701: LD_INT 0
15703: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15704: LD_VAR 0 1
15708: PPUSH
15709: LD_VAR 0 2
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 483
// CenterOnXY ( x , y ) ;
15729: LD_VAR 0 2
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 84
// end ; end_of_file
15743: LD_VAR 0 4
15747: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15748: LD_INT 0
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 264
15763: PUSH
15764: LD_EXP 81
15768: EQUAL
15769: IFFALSE 15841
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15771: LD_INT 68
15773: PPUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 255
15783: PPUSH
15784: CALL_OW 321
15788: PUSH
15789: LD_INT 2
15791: EQUAL
15792: IFFALSE 15804
// eff := 70 else
15794: LD_ADDR_VAR 0 4
15798: PUSH
15799: LD_INT 70
15801: ST_TO_ADDR
15802: GO 15812
// eff := 30 ;
15804: LD_ADDR_VAR 0 4
15808: PUSH
15809: LD_INT 30
15811: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 250
15821: PPUSH
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 251
15831: PPUSH
15832: LD_VAR 0 4
15836: PPUSH
15837: CALL_OW 495
// end ; end ;
15841: LD_VAR 0 2
15845: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15846: LD_INT 0
15848: PPUSH
// end ;
15849: LD_VAR 0 4
15853: RET
// export function SOS_Command ( cmd ) ; begin
15854: LD_INT 0
15856: PPUSH
// end ;
15857: LD_VAR 0 2
15861: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15862: LD_INT 0
15864: PPUSH
// end ;
15865: LD_VAR 0 6
15869: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15870: LD_INT 0
15872: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15873: LD_VAR 0 1
15877: PUSH
15878: LD_INT 250
15880: EQUAL
15881: PUSH
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 264
15891: PUSH
15892: LD_EXP 84
15896: EQUAL
15897: AND
15898: IFFALSE 15919
// MinerPlaceMine ( unit , x , y ) ;
15900: LD_VAR 0 2
15904: PPUSH
15905: LD_VAR 0 4
15909: PPUSH
15910: LD_VAR 0 5
15914: PPUSH
15915: CALL 18268 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15919: LD_VAR 0 1
15923: PUSH
15924: LD_INT 251
15926: EQUAL
15927: PUSH
15928: LD_VAR 0 2
15932: PPUSH
15933: CALL_OW 264
15937: PUSH
15938: LD_EXP 84
15942: EQUAL
15943: AND
15944: IFFALSE 15965
// MinerDetonateMine ( unit , x , y ) ;
15946: LD_VAR 0 2
15950: PPUSH
15951: LD_VAR 0 4
15955: PPUSH
15956: LD_VAR 0 5
15960: PPUSH
15961: CALL 18545 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15965: LD_VAR 0 1
15969: PUSH
15970: LD_INT 252
15972: EQUAL
15973: PUSH
15974: LD_VAR 0 2
15978: PPUSH
15979: CALL_OW 264
15983: PUSH
15984: LD_EXP 84
15988: EQUAL
15989: AND
15990: IFFALSE 16011
// MinerCreateMinefield ( unit , x , y ) ;
15992: LD_VAR 0 2
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: LD_VAR 0 5
16006: PPUSH
16007: CALL 18962 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16011: LD_VAR 0 1
16015: PUSH
16016: LD_INT 253
16018: EQUAL
16019: PUSH
16020: LD_VAR 0 2
16024: PPUSH
16025: CALL_OW 257
16029: PUSH
16030: LD_INT 5
16032: EQUAL
16033: AND
16034: IFFALSE 16055
// ComBinocular ( unit , x , y ) ;
16036: LD_VAR 0 2
16040: PPUSH
16041: LD_VAR 0 4
16045: PPUSH
16046: LD_VAR 0 5
16050: PPUSH
16051: CALL 19333 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16055: LD_VAR 0 1
16059: PUSH
16060: LD_INT 254
16062: EQUAL
16063: PUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 264
16073: PUSH
16074: LD_EXP 79
16078: EQUAL
16079: AND
16080: PUSH
16081: LD_VAR 0 3
16085: PPUSH
16086: CALL_OW 263
16090: PUSH
16091: LD_INT 3
16093: EQUAL
16094: AND
16095: IFFALSE 16111
// HackDestroyVehicle ( unit , selectedUnit ) ;
16097: LD_VAR 0 2
16101: PPUSH
16102: LD_VAR 0 3
16106: PPUSH
16107: CALL 17628 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16111: LD_VAR 0 1
16115: PUSH
16116: LD_INT 255
16118: EQUAL
16119: PUSH
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL_OW 264
16129: PUSH
16130: LD_INT 14
16132: PUSH
16133: LD_INT 53
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: IN
16140: AND
16141: PUSH
16142: LD_VAR 0 4
16146: PPUSH
16147: LD_VAR 0 5
16151: PPUSH
16152: CALL_OW 488
16156: AND
16157: IFFALSE 16181
// CutTreeXYR ( unit , x , y , 12 ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: LD_VAR 0 4
16168: PPUSH
16169: LD_VAR 0 5
16173: PPUSH
16174: LD_INT 12
16176: PPUSH
16177: CALL 16194 0 4
// end ;
16181: LD_VAR 0 6
16185: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
16186: LD_INT 0
16188: PPUSH
// end ;
16189: LD_VAR 0 4
16193: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
16198: PPUSH
16199: PPUSH
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16205: LD_VAR 0 1
16209: NOT
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: CALL_OW 488
16225: NOT
16226: OR
16227: PUSH
16228: LD_VAR 0 4
16232: NOT
16233: OR
16234: IFFALSE 16238
// exit ;
16236: GO 16578
// list := [ ] ;
16238: LD_ADDR_VAR 0 13
16242: PUSH
16243: EMPTY
16244: ST_TO_ADDR
// if x - r < 0 then
16245: LD_VAR 0 2
16249: PUSH
16250: LD_VAR 0 4
16254: MINUS
16255: PUSH
16256: LD_INT 0
16258: LESS
16259: IFFALSE 16271
// min_x := 0 else
16261: LD_ADDR_VAR 0 7
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
16269: GO 16287
// min_x := x - r ;
16271: LD_ADDR_VAR 0 7
16275: PUSH
16276: LD_VAR 0 2
16280: PUSH
16281: LD_VAR 0 4
16285: MINUS
16286: ST_TO_ADDR
// if y - r < 0 then
16287: LD_VAR 0 3
16291: PUSH
16292: LD_VAR 0 4
16296: MINUS
16297: PUSH
16298: LD_INT 0
16300: LESS
16301: IFFALSE 16313
// min_y := 0 else
16303: LD_ADDR_VAR 0 8
16307: PUSH
16308: LD_INT 0
16310: ST_TO_ADDR
16311: GO 16329
// min_y := y - r ;
16313: LD_ADDR_VAR 0 8
16317: PUSH
16318: LD_VAR 0 3
16322: PUSH
16323: LD_VAR 0 4
16327: MINUS
16328: ST_TO_ADDR
// max_x := x + r ;
16329: LD_ADDR_VAR 0 9
16333: PUSH
16334: LD_VAR 0 2
16338: PUSH
16339: LD_VAR 0 4
16343: PLUS
16344: ST_TO_ADDR
// max_y := y + r ;
16345: LD_ADDR_VAR 0 10
16349: PUSH
16350: LD_VAR 0 3
16354: PUSH
16355: LD_VAR 0 4
16359: PLUS
16360: ST_TO_ADDR
// for _x = min_x to max_x do
16361: LD_ADDR_VAR 0 11
16365: PUSH
16366: DOUBLE
16367: LD_VAR 0 7
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 9
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16496
// for _y = min_y to max_y do
16381: LD_ADDR_VAR 0 12
16385: PUSH
16386: DOUBLE
16387: LD_VAR 0 8
16391: DEC
16392: ST_TO_ADDR
16393: LD_VAR 0 10
16397: PUSH
16398: FOR_TO
16399: IFFALSE 16492
// begin if not ValidHex ( _x , _y ) then
16401: LD_VAR 0 11
16405: PPUSH
16406: LD_VAR 0 12
16410: PPUSH
16411: CALL_OW 488
16415: NOT
16416: IFFALSE 16420
// continue ;
16418: GO 16398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16420: LD_VAR 0 11
16424: PPUSH
16425: LD_VAR 0 12
16429: PPUSH
16430: CALL_OW 351
16434: PUSH
16435: LD_VAR 0 11
16439: PPUSH
16440: LD_VAR 0 12
16444: PPUSH
16445: CALL_OW 554
16449: AND
16450: IFFALSE 16490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16452: LD_ADDR_VAR 0 13
16456: PUSH
16457: LD_VAR 0 13
16461: PPUSH
16462: LD_VAR 0 13
16466: PUSH
16467: LD_INT 1
16469: PLUS
16470: PPUSH
16471: LD_VAR 0 11
16475: PUSH
16476: LD_VAR 0 12
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 2
16489: ST_TO_ADDR
// end ;
16490: GO 16398
16492: POP
16493: POP
16494: GO 16378
16496: POP
16497: POP
// if not list then
16498: LD_VAR 0 13
16502: NOT
16503: IFFALSE 16507
// exit ;
16505: GO 16578
// for i in list do
16507: LD_ADDR_VAR 0 6
16511: PUSH
16512: LD_VAR 0 13
16516: PUSH
16517: FOR_IN
16518: IFFALSE 16576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16520: LD_VAR 0 1
16524: PPUSH
16525: LD_STRING M
16527: PUSH
16528: LD_VAR 0 6
16532: PUSH
16533: LD_INT 1
16535: ARRAY
16536: PUSH
16537: LD_VAR 0 6
16541: PUSH
16542: LD_INT 2
16544: ARRAY
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: LD_INT 0
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: PPUSH
16570: CALL_OW 447
16574: GO 16517
16576: POP
16577: POP
// end ;
16578: LD_VAR 0 5
16582: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16583: LD_EXP 67
16587: NOT
16588: IFFALSE 16638
16590: GO 16592
16592: DISABLE
// begin initHack := true ;
16593: LD_ADDR_EXP 67
16597: PUSH
16598: LD_INT 1
16600: ST_TO_ADDR
// hackTanks := [ ] ;
16601: LD_ADDR_EXP 68
16605: PUSH
16606: EMPTY
16607: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16608: LD_ADDR_EXP 69
16612: PUSH
16613: EMPTY
16614: ST_TO_ADDR
// hackLimit := 3 ;
16615: LD_ADDR_EXP 70
16619: PUSH
16620: LD_INT 3
16622: ST_TO_ADDR
// hackDist := 12 ;
16623: LD_ADDR_EXP 71
16627: PUSH
16628: LD_INT 12
16630: ST_TO_ADDR
// hackCounter := [ ] ;
16631: LD_ADDR_EXP 72
16635: PUSH
16636: EMPTY
16637: ST_TO_ADDR
// end ;
16638: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16639: LD_EXP 67
16643: PUSH
16644: LD_INT 34
16646: PUSH
16647: LD_EXP 79
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PPUSH
16656: CALL_OW 69
16660: AND
16661: IFFALSE 16916
16663: GO 16665
16665: DISABLE
16666: LD_INT 0
16668: PPUSH
16669: PPUSH
// begin enable ;
16670: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16671: LD_ADDR_VAR 0 1
16675: PUSH
16676: LD_INT 34
16678: PUSH
16679: LD_EXP 79
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PPUSH
16688: CALL_OW 69
16692: PUSH
16693: FOR_IN
16694: IFFALSE 16914
// begin if not i in hackTanks then
16696: LD_VAR 0 1
16700: PUSH
16701: LD_EXP 68
16705: IN
16706: NOT
16707: IFFALSE 16790
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16709: LD_ADDR_EXP 68
16713: PUSH
16714: LD_EXP 68
16718: PPUSH
16719: LD_EXP 68
16723: PUSH
16724: LD_INT 1
16726: PLUS
16727: PPUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 1
16737: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16738: LD_ADDR_EXP 69
16742: PUSH
16743: LD_EXP 69
16747: PPUSH
16748: LD_EXP 69
16752: PUSH
16753: LD_INT 1
16755: PLUS
16756: PPUSH
16757: EMPTY
16758: PPUSH
16759: CALL_OW 1
16763: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16764: LD_ADDR_EXP 72
16768: PUSH
16769: LD_EXP 72
16773: PPUSH
16774: LD_EXP 72
16778: PUSH
16779: LD_INT 1
16781: PLUS
16782: PPUSH
16783: EMPTY
16784: PPUSH
16785: CALL_OW 1
16789: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 302
16799: NOT
16800: IFFALSE 16813
// begin HackUnlinkAll ( i ) ;
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL 16919 0 1
// continue ;
16811: GO 16693
// end ; HackCheckCapturedStatus ( i ) ;
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL 17362 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_INT 81
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 255
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 33
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 91
16856: PUSH
16857: LD_VAR 0 1
16861: PUSH
16862: LD_EXP 71
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 50
16874: PUSH
16875: EMPTY
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PPUSH
16884: CALL_OW 69
16888: ST_TO_ADDR
// if not tmp then
16889: LD_VAR 0 2
16893: NOT
16894: IFFALSE 16898
// continue ;
16896: GO 16693
// HackLink ( i , tmp ) ;
16898: LD_VAR 0 1
16902: PPUSH
16903: LD_VAR 0 2
16907: PPUSH
16908: CALL 17055 0 2
// end ;
16912: GO 16693
16914: POP
16915: POP
// end ;
16916: PPOPN 2
16918: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
16923: PPUSH
// if not hack in hackTanks then
16924: LD_VAR 0 1
16928: PUSH
16929: LD_EXP 68
16933: IN
16934: NOT
16935: IFFALSE 16939
// exit ;
16937: GO 17050
// index := GetElementIndex ( hackTanks , hack ) ;
16939: LD_ADDR_VAR 0 4
16943: PUSH
16944: LD_EXP 68
16948: PPUSH
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL 24687 0 2
16958: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16959: LD_EXP 69
16963: PUSH
16964: LD_VAR 0 4
16968: ARRAY
16969: IFFALSE 17050
// begin for i in hackTanksCaptured [ index ] do
16971: LD_ADDR_VAR 0 3
16975: PUSH
16976: LD_EXP 69
16980: PUSH
16981: LD_VAR 0 4
16985: ARRAY
16986: PUSH
16987: FOR_IN
16988: IFFALSE 17014
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PPUSH
16999: LD_VAR 0 3
17003: PUSH
17004: LD_INT 2
17006: ARRAY
17007: PPUSH
17008: CALL_OW 235
17012: GO 16987
17014: POP
17015: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17016: LD_ADDR_EXP 69
17020: PUSH
17021: LD_EXP 69
17025: PPUSH
17026: LD_VAR 0 4
17030: PPUSH
17031: EMPTY
17032: PPUSH
17033: CALL_OW 1
17037: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17038: LD_VAR 0 1
17042: PPUSH
17043: LD_INT 0
17045: PPUSH
17046: CALL_OW 505
// end ; end ;
17050: LD_VAR 0 2
17054: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17055: LD_INT 0
17057: PPUSH
17058: PPUSH
17059: PPUSH
// if not hack in hackTanks or not vehicles then
17060: LD_VAR 0 1
17064: PUSH
17065: LD_EXP 68
17069: IN
17070: NOT
17071: PUSH
17072: LD_VAR 0 2
17076: NOT
17077: OR
17078: IFFALSE 17082
// exit ;
17080: GO 17357
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL 25337 0 4
17107: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17108: LD_ADDR_VAR 0 5
17112: PUSH
17113: LD_EXP 68
17117: PPUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL 24687 0 2
17127: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17128: LD_EXP 69
17132: PUSH
17133: LD_VAR 0 5
17137: ARRAY
17138: PUSH
17139: LD_EXP 70
17143: LESS
17144: IFFALSE 17333
// begin for i := 1 to vehicles do
17146: LD_ADDR_VAR 0 4
17150: PUSH
17151: DOUBLE
17152: LD_INT 1
17154: DEC
17155: ST_TO_ADDR
17156: LD_VAR 0 2
17160: PUSH
17161: FOR_TO
17162: IFFALSE 17331
// begin if hackTanksCaptured [ index ] = hackLimit then
17164: LD_EXP 69
17168: PUSH
17169: LD_VAR 0 5
17173: ARRAY
17174: PUSH
17175: LD_EXP 70
17179: EQUAL
17180: IFFALSE 17184
// break ;
17182: GO 17331
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17184: LD_ADDR_EXP 72
17188: PUSH
17189: LD_EXP 72
17193: PPUSH
17194: LD_VAR 0 5
17198: PPUSH
17199: LD_EXP 72
17203: PUSH
17204: LD_VAR 0 5
17208: ARRAY
17209: PUSH
17210: LD_INT 1
17212: PLUS
17213: PPUSH
17214: CALL_OW 1
17218: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17219: LD_ADDR_EXP 69
17223: PUSH
17224: LD_EXP 69
17228: PPUSH
17229: LD_VAR 0 5
17233: PUSH
17234: LD_EXP 69
17238: PUSH
17239: LD_VAR 0 5
17243: ARRAY
17244: PUSH
17245: LD_INT 1
17247: PLUS
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: LD_VAR 0 2
17257: PUSH
17258: LD_VAR 0 4
17262: ARRAY
17263: PUSH
17264: LD_VAR 0 2
17268: PUSH
17269: LD_VAR 0 4
17273: ARRAY
17274: PPUSH
17275: CALL_OW 255
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL 24902 0 3
17288: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17289: LD_VAR 0 2
17293: PUSH
17294: LD_VAR 0 4
17298: ARRAY
17299: PPUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 255
17309: PPUSH
17310: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17314: LD_VAR 0 2
17318: PUSH
17319: LD_VAR 0 4
17323: ARRAY
17324: PPUSH
17325: CALL_OW 141
// end ;
17329: GO 17161
17331: POP
17332: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17333: LD_VAR 0 1
17337: PPUSH
17338: LD_EXP 69
17342: PUSH
17343: LD_VAR 0 5
17347: ARRAY
17348: PUSH
17349: LD_INT 0
17351: PLUS
17352: PPUSH
17353: CALL_OW 505
// end ;
17357: LD_VAR 0 3
17361: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17362: LD_INT 0
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
// if not hack in hackTanks then
17368: LD_VAR 0 1
17372: PUSH
17373: LD_EXP 68
17377: IN
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17623
// index := GetElementIndex ( hackTanks , hack ) ;
17383: LD_ADDR_VAR 0 4
17387: PUSH
17388: LD_EXP 68
17392: PPUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL 24687 0 2
17402: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17403: LD_ADDR_VAR 0 3
17407: PUSH
17408: DOUBLE
17409: LD_EXP 69
17413: PUSH
17414: LD_VAR 0 4
17418: ARRAY
17419: INC
17420: ST_TO_ADDR
17421: LD_INT 1
17423: PUSH
17424: FOR_DOWNTO
17425: IFFALSE 17597
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17427: LD_ADDR_VAR 0 5
17431: PUSH
17432: LD_EXP 69
17436: PUSH
17437: LD_VAR 0 4
17441: ARRAY
17442: PUSH
17443: LD_VAR 0 3
17447: ARRAY
17448: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17449: LD_VAR 0 5
17453: PUSH
17454: LD_INT 1
17456: ARRAY
17457: PPUSH
17458: CALL_OW 302
17462: NOT
17463: PUSH
17464: LD_VAR 0 5
17468: PUSH
17469: LD_INT 1
17471: ARRAY
17472: PPUSH
17473: CALL_OW 255
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 255
17487: NONEQUAL
17488: OR
17489: IFFALSE 17595
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17491: LD_VAR 0 5
17495: PUSH
17496: LD_INT 1
17498: ARRAY
17499: PPUSH
17500: CALL_OW 305
17504: PUSH
17505: LD_VAR 0 5
17509: PUSH
17510: LD_INT 1
17512: ARRAY
17513: PPUSH
17514: CALL_OW 255
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 255
17528: EQUAL
17529: AND
17530: IFFALSE 17554
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17532: LD_VAR 0 5
17536: PUSH
17537: LD_INT 1
17539: ARRAY
17540: PPUSH
17541: LD_VAR 0 5
17545: PUSH
17546: LD_INT 2
17548: ARRAY
17549: PPUSH
17550: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17554: LD_ADDR_EXP 69
17558: PUSH
17559: LD_EXP 69
17563: PPUSH
17564: LD_VAR 0 4
17568: PPUSH
17569: LD_EXP 69
17573: PUSH
17574: LD_VAR 0 4
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: CALL_OW 3
17589: PPUSH
17590: CALL_OW 1
17594: ST_TO_ADDR
// end ; end ;
17595: GO 17424
17597: POP
17598: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_EXP 69
17608: PUSH
17609: LD_VAR 0 4
17613: ARRAY
17614: PUSH
17615: LD_INT 0
17617: PLUS
17618: PPUSH
17619: CALL_OW 505
// end ;
17623: LD_VAR 0 2
17627: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
// if not hack in hackTanks then
17634: LD_VAR 0 1
17638: PUSH
17639: LD_EXP 68
17643: IN
17644: NOT
17645: IFFALSE 17649
// exit ;
17647: GO 17734
// index := GetElementIndex ( hackTanks , hack ) ;
17649: LD_ADDR_VAR 0 5
17653: PUSH
17654: LD_EXP 68
17658: PPUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL 24687 0 2
17668: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17669: LD_ADDR_VAR 0 4
17673: PUSH
17674: DOUBLE
17675: LD_INT 1
17677: DEC
17678: ST_TO_ADDR
17679: LD_EXP 69
17683: PUSH
17684: LD_VAR 0 5
17688: ARRAY
17689: PUSH
17690: FOR_TO
17691: IFFALSE 17732
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17693: LD_EXP 69
17697: PUSH
17698: LD_VAR 0 5
17702: ARRAY
17703: PUSH
17704: LD_VAR 0 4
17708: ARRAY
17709: PUSH
17710: LD_INT 1
17712: ARRAY
17713: PUSH
17714: LD_VAR 0 2
17718: EQUAL
17719: IFFALSE 17730
// KillUnit ( vehicle ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: CALL_OW 66
17730: GO 17690
17732: POP
17733: POP
// end ;
17734: LD_VAR 0 3
17738: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17739: LD_EXP 73
17743: NOT
17744: IFFALSE 17779
17746: GO 17748
17748: DISABLE
// begin initMiner := true ;
17749: LD_ADDR_EXP 73
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// minersList := [ ] ;
17757: LD_ADDR_EXP 74
17761: PUSH
17762: EMPTY
17763: ST_TO_ADDR
// minerMinesList := [ ] ;
17764: LD_ADDR_EXP 75
17768: PUSH
17769: EMPTY
17770: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17771: LD_ADDR_EXP 76
17775: PUSH
17776: LD_INT 5
17778: ST_TO_ADDR
// end ;
17779: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17780: LD_EXP 73
17784: PUSH
17785: LD_INT 34
17787: PUSH
17788: LD_EXP 84
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PPUSH
17797: CALL_OW 69
17801: AND
17802: IFFALSE 18265
17804: GO 17806
17806: DISABLE
17807: LD_INT 0
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
// begin enable ;
17813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17814: LD_ADDR_VAR 0 1
17818: PUSH
17819: LD_INT 34
17821: PUSH
17822: LD_EXP 84
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PPUSH
17831: CALL_OW 69
17835: PUSH
17836: FOR_IN
17837: IFFALSE 17909
// begin if not i in minersList then
17839: LD_VAR 0 1
17843: PUSH
17844: LD_EXP 74
17848: IN
17849: NOT
17850: IFFALSE 17907
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17852: LD_ADDR_EXP 74
17856: PUSH
17857: LD_EXP 74
17861: PPUSH
17862: LD_EXP 74
17866: PUSH
17867: LD_INT 1
17869: PLUS
17870: PPUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 1
17880: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17881: LD_ADDR_EXP 75
17885: PUSH
17886: LD_EXP 75
17890: PPUSH
17891: LD_EXP 75
17895: PUSH
17896: LD_INT 1
17898: PLUS
17899: PPUSH
17900: EMPTY
17901: PPUSH
17902: CALL_OW 1
17906: ST_TO_ADDR
// end end ;
17907: GO 17836
17909: POP
17910: POP
// for i := minerMinesList downto 1 do
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: DOUBLE
17917: LD_EXP 75
17921: INC
17922: ST_TO_ADDR
17923: LD_INT 1
17925: PUSH
17926: FOR_DOWNTO
17927: IFFALSE 18263
// begin if IsLive ( minersList [ i ] ) then
17929: LD_EXP 74
17933: PUSH
17934: LD_VAR 0 1
17938: ARRAY
17939: PPUSH
17940: CALL_OW 300
17944: IFFALSE 17972
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17946: LD_EXP 74
17950: PUSH
17951: LD_VAR 0 1
17955: ARRAY
17956: PPUSH
17957: LD_EXP 75
17961: PUSH
17962: LD_VAR 0 1
17966: ARRAY
17967: PPUSH
17968: CALL_OW 505
// if not minerMinesList [ i ] then
17972: LD_EXP 75
17976: PUSH
17977: LD_VAR 0 1
17981: ARRAY
17982: NOT
17983: IFFALSE 17987
// continue ;
17985: GO 17926
// for j := minerMinesList [ i ] downto 1 do
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: DOUBLE
17993: LD_EXP 75
17997: PUSH
17998: LD_VAR 0 1
18002: ARRAY
18003: INC
18004: ST_TO_ADDR
18005: LD_INT 1
18007: PUSH
18008: FOR_DOWNTO
18009: IFFALSE 18259
// begin side := GetSide ( minersList [ i ] ) ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_EXP 74
18020: PUSH
18021: LD_VAR 0 1
18025: ARRAY
18026: PPUSH
18027: CALL_OW 255
18031: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18032: LD_ADDR_VAR 0 4
18036: PUSH
18037: LD_EXP 75
18041: PUSH
18042: LD_VAR 0 1
18046: ARRAY
18047: PUSH
18048: LD_VAR 0 2
18052: ARRAY
18053: PUSH
18054: LD_INT 1
18056: ARRAY
18057: PPUSH
18058: LD_EXP 75
18062: PUSH
18063: LD_VAR 0 1
18067: ARRAY
18068: PUSH
18069: LD_VAR 0 2
18073: ARRAY
18074: PUSH
18075: LD_INT 2
18077: ARRAY
18078: PPUSH
18079: CALL_OW 428
18083: ST_TO_ADDR
// if not tmp then
18084: LD_VAR 0 4
18088: NOT
18089: IFFALSE 18093
// continue ;
18091: GO 18008
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18093: LD_VAR 0 4
18097: PUSH
18098: LD_INT 81
18100: PUSH
18101: LD_VAR 0 3
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 69
18114: IN
18115: PUSH
18116: LD_EXP 75
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PUSH
18127: LD_VAR 0 2
18131: ARRAY
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PPUSH
18137: LD_EXP 75
18141: PUSH
18142: LD_VAR 0 1
18146: ARRAY
18147: PUSH
18148: LD_VAR 0 2
18152: ARRAY
18153: PUSH
18154: LD_INT 2
18156: ARRAY
18157: PPUSH
18158: CALL_OW 458
18162: AND
18163: IFFALSE 18257
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18165: LD_EXP 75
18169: PUSH
18170: LD_VAR 0 1
18174: ARRAY
18175: PUSH
18176: LD_VAR 0 2
18180: ARRAY
18181: PUSH
18182: LD_INT 1
18184: ARRAY
18185: PPUSH
18186: LD_EXP 75
18190: PUSH
18191: LD_VAR 0 1
18195: ARRAY
18196: PUSH
18197: LD_VAR 0 2
18201: ARRAY
18202: PUSH
18203: LD_INT 2
18205: ARRAY
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18216: LD_ADDR_EXP 75
18220: PUSH
18221: LD_EXP 75
18225: PPUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_EXP 75
18235: PUSH
18236: LD_VAR 0 1
18240: ARRAY
18241: PPUSH
18242: LD_VAR 0 2
18246: PPUSH
18247: CALL_OW 3
18251: PPUSH
18252: CALL_OW 1
18256: ST_TO_ADDR
// end ; end ;
18257: GO 18008
18259: POP
18260: POP
// end ;
18261: GO 17926
18263: POP
18264: POP
// end ;
18265: PPOPN 4
18267: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18268: LD_INT 0
18270: PPUSH
18271: PPUSH
// result := false ;
18272: LD_ADDR_VAR 0 4
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 264
18289: PUSH
18290: LD_EXP 84
18294: EQUAL
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18540
// index := GetElementIndex ( minersList , unit ) ;
18300: LD_ADDR_VAR 0 5
18304: PUSH
18305: LD_EXP 74
18309: PPUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL 24687 0 2
18319: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18320: LD_EXP 75
18324: PUSH
18325: LD_VAR 0 5
18329: ARRAY
18330: PUSH
18331: LD_EXP 76
18335: GREATEREQUAL
18336: IFFALSE 18340
// exit ;
18338: GO 18540
// ComMoveXY ( unit , x , y ) ;
18340: LD_VAR 0 1
18344: PPUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18359: LD_INT 35
18361: PPUSH
18362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18366: LD_VAR 0 1
18370: PPUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_VAR 0 3
18380: PPUSH
18381: CALL 55459 0 3
18385: NOT
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 314
18396: AND
18397: IFFALSE 18401
// exit ;
18399: GO 18540
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: LD_VAR 0 3
18410: PPUSH
18411: CALL_OW 428
18415: PUSH
18416: LD_VAR 0 1
18420: EQUAL
18421: PUSH
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 314
18431: NOT
18432: AND
18433: IFFALSE 18359
// PlaySoundXY ( x , y , PlantMine ) ;
18435: LD_VAR 0 2
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: LD_STRING PlantMine
18447: PPUSH
18448: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18452: LD_VAR 0 2
18456: PPUSH
18457: LD_VAR 0 3
18461: PPUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 255
18471: PPUSH
18472: LD_INT 0
18474: PPUSH
18475: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18479: LD_ADDR_EXP 75
18483: PUSH
18484: LD_EXP 75
18488: PPUSH
18489: LD_VAR 0 5
18493: PUSH
18494: LD_EXP 75
18498: PUSH
18499: LD_VAR 0 5
18503: ARRAY
18504: PUSH
18505: LD_INT 1
18507: PLUS
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PPUSH
18513: LD_VAR 0 2
18517: PUSH
18518: LD_VAR 0 3
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL 24902 0 3
18531: ST_TO_ADDR
// result := true ;
18532: LD_ADDR_VAR 0 4
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// end ;
18540: LD_VAR 0 4
18544: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
18549: PPUSH
// if not unit in minersList then
18550: LD_VAR 0 1
18554: PUSH
18555: LD_EXP 74
18559: IN
18560: NOT
18561: IFFALSE 18565
// exit ;
18563: GO 18957
// index := GetElementIndex ( minersList , unit ) ;
18565: LD_ADDR_VAR 0 6
18569: PUSH
18570: LD_EXP 74
18574: PPUSH
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL 24687 0 2
18584: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18585: LD_ADDR_VAR 0 5
18589: PUSH
18590: DOUBLE
18591: LD_EXP 75
18595: PUSH
18596: LD_VAR 0 6
18600: ARRAY
18601: INC
18602: ST_TO_ADDR
18603: LD_INT 1
18605: PUSH
18606: FOR_DOWNTO
18607: IFFALSE 18768
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18609: LD_EXP 75
18613: PUSH
18614: LD_VAR 0 6
18618: ARRAY
18619: PUSH
18620: LD_VAR 0 5
18624: ARRAY
18625: PUSH
18626: LD_INT 1
18628: ARRAY
18629: PUSH
18630: LD_VAR 0 2
18634: EQUAL
18635: PUSH
18636: LD_EXP 75
18640: PUSH
18641: LD_VAR 0 6
18645: ARRAY
18646: PUSH
18647: LD_VAR 0 5
18651: ARRAY
18652: PUSH
18653: LD_INT 2
18655: ARRAY
18656: PUSH
18657: LD_VAR 0 3
18661: EQUAL
18662: AND
18663: IFFALSE 18766
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18665: LD_EXP 75
18669: PUSH
18670: LD_VAR 0 6
18674: ARRAY
18675: PUSH
18676: LD_VAR 0 5
18680: ARRAY
18681: PUSH
18682: LD_INT 1
18684: ARRAY
18685: PPUSH
18686: LD_EXP 75
18690: PUSH
18691: LD_VAR 0 6
18695: ARRAY
18696: PUSH
18697: LD_VAR 0 5
18701: ARRAY
18702: PUSH
18703: LD_INT 2
18705: ARRAY
18706: PPUSH
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL_OW 255
18716: PPUSH
18717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18721: LD_ADDR_EXP 75
18725: PUSH
18726: LD_EXP 75
18730: PPUSH
18731: LD_VAR 0 6
18735: PPUSH
18736: LD_EXP 75
18740: PUSH
18741: LD_VAR 0 6
18745: ARRAY
18746: PPUSH
18747: LD_VAR 0 5
18751: PPUSH
18752: CALL_OW 3
18756: PPUSH
18757: CALL_OW 1
18761: ST_TO_ADDR
// exit ;
18762: POP
18763: POP
18764: GO 18957
// end ; end ;
18766: GO 18606
18768: POP
18769: POP
// for i := minerMinesList [ index ] downto 1 do
18770: LD_ADDR_VAR 0 5
18774: PUSH
18775: DOUBLE
18776: LD_EXP 75
18780: PUSH
18781: LD_VAR 0 6
18785: ARRAY
18786: INC
18787: ST_TO_ADDR
18788: LD_INT 1
18790: PUSH
18791: FOR_DOWNTO
18792: IFFALSE 18955
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18794: LD_EXP 75
18798: PUSH
18799: LD_VAR 0 6
18803: ARRAY
18804: PUSH
18805: LD_VAR 0 5
18809: ARRAY
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: PPUSH
18815: LD_EXP 75
18819: PUSH
18820: LD_VAR 0 6
18824: ARRAY
18825: PUSH
18826: LD_VAR 0 5
18830: ARRAY
18831: PUSH
18832: LD_INT 2
18834: ARRAY
18835: PPUSH
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_VAR 0 3
18845: PPUSH
18846: CALL_OW 298
18850: PUSH
18851: LD_INT 6
18853: LESS
18854: IFFALSE 18953
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18856: LD_EXP 75
18860: PUSH
18861: LD_VAR 0 6
18865: ARRAY
18866: PUSH
18867: LD_VAR 0 5
18871: ARRAY
18872: PUSH
18873: LD_INT 1
18875: ARRAY
18876: PPUSH
18877: LD_EXP 75
18881: PUSH
18882: LD_VAR 0 6
18886: ARRAY
18887: PUSH
18888: LD_VAR 0 5
18892: ARRAY
18893: PUSH
18894: LD_INT 2
18896: ARRAY
18897: PPUSH
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 255
18907: PPUSH
18908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18912: LD_ADDR_EXP 75
18916: PUSH
18917: LD_EXP 75
18921: PPUSH
18922: LD_VAR 0 6
18926: PPUSH
18927: LD_EXP 75
18931: PUSH
18932: LD_VAR 0 6
18936: ARRAY
18937: PPUSH
18938: LD_VAR 0 5
18942: PPUSH
18943: CALL_OW 3
18947: PPUSH
18948: CALL_OW 1
18952: ST_TO_ADDR
// end ; end ;
18953: GO 18791
18955: POP
18956: POP
// end ;
18957: LD_VAR 0 4
18961: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18962: LD_INT 0
18964: PPUSH
18965: PPUSH
18966: PPUSH
18967: PPUSH
18968: PPUSH
18969: PPUSH
18970: PPUSH
18971: PPUSH
18972: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 264
18982: PUSH
18983: LD_EXP 84
18987: EQUAL
18988: NOT
18989: PUSH
18990: LD_VAR 0 1
18994: PUSH
18995: LD_EXP 74
18999: IN
19000: NOT
19001: OR
19002: IFFALSE 19006
// exit ;
19004: GO 19328
// index := GetElementIndex ( minersList , unit ) ;
19006: LD_ADDR_VAR 0 6
19010: PUSH
19011: LD_EXP 74
19015: PPUSH
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL 24687 0 2
19025: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19026: LD_ADDR_VAR 0 8
19030: PUSH
19031: LD_EXP 76
19035: PUSH
19036: LD_EXP 75
19040: PUSH
19041: LD_VAR 0 6
19045: ARRAY
19046: MINUS
19047: ST_TO_ADDR
// if not minesFreeAmount then
19048: LD_VAR 0 8
19052: NOT
19053: IFFALSE 19057
// exit ;
19055: GO 19328
// tmp := [ ] ;
19057: LD_ADDR_VAR 0 7
19061: PUSH
19062: EMPTY
19063: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19064: LD_ADDR_VAR 0 5
19068: PUSH
19069: DOUBLE
19070: LD_INT 1
19072: DEC
19073: ST_TO_ADDR
19074: LD_VAR 0 8
19078: PUSH
19079: FOR_TO
19080: IFFALSE 19275
// begin _d := rand ( 0 , 5 ) ;
19082: LD_ADDR_VAR 0 11
19086: PUSH
19087: LD_INT 0
19089: PPUSH
19090: LD_INT 5
19092: PPUSH
19093: CALL_OW 12
19097: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19098: LD_ADDR_VAR 0 12
19102: PUSH
19103: LD_INT 2
19105: PPUSH
19106: LD_INT 6
19108: PPUSH
19109: CALL_OW 12
19113: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19114: LD_ADDR_VAR 0 9
19118: PUSH
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_VAR 0 11
19128: PPUSH
19129: LD_VAR 0 12
19133: PPUSH
19134: CALL_OW 272
19138: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19139: LD_ADDR_VAR 0 10
19143: PUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_VAR 0 11
19153: PPUSH
19154: LD_VAR 0 12
19158: PPUSH
19159: CALL_OW 273
19163: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19164: LD_VAR 0 9
19168: PPUSH
19169: LD_VAR 0 10
19173: PPUSH
19174: CALL_OW 488
19178: PUSH
19179: LD_VAR 0 9
19183: PUSH
19184: LD_VAR 0 10
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_VAR 0 7
19197: IN
19198: NOT
19199: AND
19200: PUSH
19201: LD_VAR 0 9
19205: PPUSH
19206: LD_VAR 0 10
19210: PPUSH
19211: CALL_OW 458
19215: NOT
19216: AND
19217: IFFALSE 19259
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19219: LD_ADDR_VAR 0 7
19223: PUSH
19224: LD_VAR 0 7
19228: PPUSH
19229: LD_VAR 0 7
19233: PUSH
19234: LD_INT 1
19236: PLUS
19237: PPUSH
19238: LD_VAR 0 9
19242: PUSH
19243: LD_VAR 0 10
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PPUSH
19252: CALL_OW 1
19256: ST_TO_ADDR
19257: GO 19273
// i := i - 1 ;
19259: LD_ADDR_VAR 0 5
19263: PUSH
19264: LD_VAR 0 5
19268: PUSH
19269: LD_INT 1
19271: MINUS
19272: ST_TO_ADDR
// end ;
19273: GO 19079
19275: POP
19276: POP
// for i in tmp do
19277: LD_ADDR_VAR 0 5
19281: PUSH
19282: LD_VAR 0 7
19286: PUSH
19287: FOR_IN
19288: IFFALSE 19326
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_VAR 0 5
19299: PUSH
19300: LD_INT 1
19302: ARRAY
19303: PPUSH
19304: LD_VAR 0 5
19308: PUSH
19309: LD_INT 2
19311: ARRAY
19312: PPUSH
19313: CALL 18268 0 3
19317: NOT
19318: IFFALSE 19324
// exit ;
19320: POP
19321: POP
19322: GO 19328
19324: GO 19287
19326: POP
19327: POP
// end ;
19328: LD_VAR 0 4
19332: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
19337: PPUSH
19338: PPUSH
19339: PPUSH
19340: PPUSH
19341: PPUSH
// if not GetClass ( unit ) = class_sniper then
19342: LD_VAR 0 1
19346: PPUSH
19347: CALL_OW 257
19351: PUSH
19352: LD_INT 5
19354: EQUAL
19355: NOT
19356: IFFALSE 19360
// exit ;
19358: GO 19748
// dist := 8 ;
19360: LD_ADDR_VAR 0 5
19364: PUSH
19365: LD_INT 8
19367: ST_TO_ADDR
// viewRange := 12 ;
19368: LD_ADDR_VAR 0 7
19372: PUSH
19373: LD_INT 12
19375: ST_TO_ADDR
// side := GetSide ( unit ) ;
19376: LD_ADDR_VAR 0 6
19380: PUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 255
19390: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19391: LD_INT 61
19393: PPUSH
19394: LD_VAR 0 6
19398: PPUSH
19399: CALL_OW 321
19403: PUSH
19404: LD_INT 2
19406: EQUAL
19407: IFFALSE 19417
// viewRange := 16 ;
19409: LD_ADDR_VAR 0 7
19413: PUSH
19414: LD_INT 16
19416: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19417: LD_VAR 0 1
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 297
19436: PUSH
19437: LD_VAR 0 5
19441: GREATER
19442: IFFALSE 19521
// begin ComMoveXY ( unit , x , y ) ;
19444: LD_VAR 0 1
19448: PPUSH
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19463: LD_INT 35
19465: PPUSH
19466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_VAR 0 2
19479: PPUSH
19480: LD_VAR 0 3
19484: PPUSH
19485: CALL 55459 0 3
19489: NOT
19490: IFFALSE 19494
// exit ;
19492: GO 19748
// until GetDistUnitXY ( unit , x , y ) < dist ;
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_VAR 0 2
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: CALL_OW 297
19513: PUSH
19514: LD_VAR 0 5
19518: LESS
19519: IFFALSE 19463
// end ; ComTurnXY ( unit , x , y ) ;
19521: LD_VAR 0 1
19525: PPUSH
19526: LD_VAR 0 2
19530: PPUSH
19531: LD_VAR 0 3
19535: PPUSH
19536: CALL_OW 118
// wait ( 5 ) ;
19540: LD_INT 5
19542: PPUSH
19543: CALL_OW 67
// _d := GetDir ( unit ) ;
19547: LD_ADDR_VAR 0 10
19551: PUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 254
19561: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19562: LD_ADDR_VAR 0 8
19566: PUSH
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 250
19576: PPUSH
19577: LD_VAR 0 10
19581: PPUSH
19582: LD_VAR 0 5
19586: PPUSH
19587: CALL_OW 272
19591: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19592: LD_ADDR_VAR 0 9
19596: PUSH
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 251
19606: PPUSH
19607: LD_VAR 0 10
19611: PPUSH
19612: LD_VAR 0 5
19616: PPUSH
19617: CALL_OW 273
19621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19622: LD_VAR 0 8
19626: PPUSH
19627: LD_VAR 0 9
19631: PPUSH
19632: CALL_OW 488
19636: NOT
19637: IFFALSE 19641
// exit ;
19639: GO 19748
// ComAnimCustom ( unit , 1 ) ;
19641: LD_VAR 0 1
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19653: LD_VAR 0 8
19657: PPUSH
19658: LD_VAR 0 9
19662: PPUSH
19663: LD_VAR 0 6
19667: PPUSH
19668: LD_VAR 0 7
19672: PPUSH
19673: CALL_OW 330
// repeat wait ( 1 ) ;
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 316
19693: PUSH
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL_OW 314
19703: OR
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 302
19714: NOT
19715: OR
19716: PUSH
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 301
19726: OR
19727: IFFALSE 19677
// RemoveSeeing ( _x , _y , side ) ;
19729: LD_VAR 0 8
19733: PPUSH
19734: LD_VAR 0 9
19738: PPUSH
19739: LD_VAR 0 6
19743: PPUSH
19744: CALL_OW 331
// end ; end_of_file
19748: LD_VAR 0 4
19752: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19753: LD_VAR 0 1
19757: PUSH
19758: LD_INT 200
19760: DOUBLE
19761: GREATEREQUAL
19762: IFFALSE 19770
19764: LD_INT 299
19766: DOUBLE
19767: LESSEQUAL
19768: IFTRUE 19772
19770: GO 19804
19772: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19773: LD_VAR 0 1
19777: PPUSH
19778: LD_VAR 0 2
19782: PPUSH
19783: LD_VAR 0 3
19787: PPUSH
19788: LD_VAR 0 4
19792: PPUSH
19793: LD_VAR 0 5
19797: PPUSH
19798: CALL 15870 0 5
19802: GO 19881
19804: LD_INT 300
19806: DOUBLE
19807: GREATEREQUAL
19808: IFFALSE 19816
19810: LD_INT 399
19812: DOUBLE
19813: LESSEQUAL
19814: IFTRUE 19818
19816: GO 19880
19818: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_VAR 0 2
19828: PPUSH
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_VAR 0 4
19838: PPUSH
19839: LD_VAR 0 5
19843: PPUSH
19844: LD_VAR 0 6
19848: PPUSH
19849: LD_VAR 0 7
19853: PPUSH
19854: LD_VAR 0 8
19858: PPUSH
19859: LD_VAR 0 9
19863: PPUSH
19864: LD_VAR 0 10
19868: PPUSH
19869: LD_VAR 0 11
19873: PPUSH
19874: CALL 13768 0 11
19878: GO 19881
19880: POP
// end ;
19881: PPOPN 11
19883: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19884: LD_VAR 0 1
19888: PPUSH
19889: LD_VAR 0 2
19893: PPUSH
19894: LD_VAR 0 3
19898: PPUSH
19899: LD_VAR 0 4
19903: PPUSH
19904: LD_VAR 0 5
19908: PPUSH
19909: CALL 15862 0 5
// end ; end_of_file
19913: PPOPN 5
19915: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19916: LD_INT 0
19918: PPUSH
19919: PPUSH
// if exist_mode then
19920: LD_VAR 0 2
19924: IFFALSE 19949
// unit := CreateCharacter ( prefix & ident ) else
19926: LD_ADDR_VAR 0 5
19930: PUSH
19931: LD_VAR 0 3
19935: PUSH
19936: LD_VAR 0 1
19940: STR
19941: PPUSH
19942: CALL_OW 34
19946: ST_TO_ADDR
19947: GO 19964
// unit := NewCharacter ( ident ) ;
19949: LD_ADDR_VAR 0 5
19953: PUSH
19954: LD_VAR 0 1
19958: PPUSH
19959: CALL_OW 25
19963: ST_TO_ADDR
// result := unit ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_VAR 0 5
19973: ST_TO_ADDR
// end ;
19974: LD_VAR 0 4
19978: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19979: LD_INT 0
19981: PPUSH
19982: PPUSH
// if not side or not nation then
19983: LD_VAR 0 1
19987: NOT
19988: PUSH
19989: LD_VAR 0 2
19993: NOT
19994: OR
19995: IFFALSE 19999
// exit ;
19997: GO 20767
// case nation of nation_american :
19999: LD_VAR 0 2
20003: PUSH
20004: LD_INT 1
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20226
20012: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20013: LD_ADDR_VAR 0 4
20017: PUSH
20018: LD_INT 35
20020: PUSH
20021: LD_INT 45
20023: PUSH
20024: LD_INT 46
20026: PUSH
20027: LD_INT 47
20029: PUSH
20030: LD_INT 82
20032: PUSH
20033: LD_INT 83
20035: PUSH
20036: LD_INT 84
20038: PUSH
20039: LD_INT 85
20041: PUSH
20042: LD_INT 86
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 6
20053: PUSH
20054: LD_INT 15
20056: PUSH
20057: LD_INT 16
20059: PUSH
20060: LD_INT 7
20062: PUSH
20063: LD_INT 12
20065: PUSH
20066: LD_INT 13
20068: PUSH
20069: LD_INT 10
20071: PUSH
20072: LD_INT 14
20074: PUSH
20075: LD_INT 20
20077: PUSH
20078: LD_INT 21
20080: PUSH
20081: LD_INT 22
20083: PUSH
20084: LD_INT 25
20086: PUSH
20087: LD_INT 32
20089: PUSH
20090: LD_INT 27
20092: PUSH
20093: LD_INT 36
20095: PUSH
20096: LD_INT 69
20098: PUSH
20099: LD_INT 39
20101: PUSH
20102: LD_INT 34
20104: PUSH
20105: LD_INT 40
20107: PUSH
20108: LD_INT 48
20110: PUSH
20111: LD_INT 49
20113: PUSH
20114: LD_INT 50
20116: PUSH
20117: LD_INT 51
20119: PUSH
20120: LD_INT 52
20122: PUSH
20123: LD_INT 53
20125: PUSH
20126: LD_INT 54
20128: PUSH
20129: LD_INT 55
20131: PUSH
20132: LD_INT 56
20134: PUSH
20135: LD_INT 57
20137: PUSH
20138: LD_INT 58
20140: PUSH
20141: LD_INT 59
20143: PUSH
20144: LD_INT 60
20146: PUSH
20147: LD_INT 61
20149: PUSH
20150: LD_INT 62
20152: PUSH
20153: LD_INT 80
20155: PUSH
20156: LD_INT 82
20158: PUSH
20159: LD_INT 83
20161: PUSH
20162: LD_INT 84
20164: PUSH
20165: LD_INT 85
20167: PUSH
20168: LD_INT 86
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: ST_TO_ADDR
20224: GO 20691
20226: LD_INT 2
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20460
20234: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20235: LD_ADDR_VAR 0 4
20239: PUSH
20240: LD_INT 35
20242: PUSH
20243: LD_INT 45
20245: PUSH
20246: LD_INT 46
20248: PUSH
20249: LD_INT 47
20251: PUSH
20252: LD_INT 82
20254: PUSH
20255: LD_INT 83
20257: PUSH
20258: LD_INT 84
20260: PUSH
20261: LD_INT 85
20263: PUSH
20264: LD_INT 87
20266: PUSH
20267: LD_INT 70
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 4
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: LD_INT 6
20287: PUSH
20288: LD_INT 15
20290: PUSH
20291: LD_INT 18
20293: PUSH
20294: LD_INT 7
20296: PUSH
20297: LD_INT 17
20299: PUSH
20300: LD_INT 8
20302: PUSH
20303: LD_INT 20
20305: PUSH
20306: LD_INT 21
20308: PUSH
20309: LD_INT 22
20311: PUSH
20312: LD_INT 72
20314: PUSH
20315: LD_INT 26
20317: PUSH
20318: LD_INT 69
20320: PUSH
20321: LD_INT 39
20323: PUSH
20324: LD_INT 40
20326: PUSH
20327: LD_INT 41
20329: PUSH
20330: LD_INT 42
20332: PUSH
20333: LD_INT 43
20335: PUSH
20336: LD_INT 48
20338: PUSH
20339: LD_INT 49
20341: PUSH
20342: LD_INT 50
20344: PUSH
20345: LD_INT 51
20347: PUSH
20348: LD_INT 52
20350: PUSH
20351: LD_INT 53
20353: PUSH
20354: LD_INT 54
20356: PUSH
20357: LD_INT 55
20359: PUSH
20360: LD_INT 56
20362: PUSH
20363: LD_INT 60
20365: PUSH
20366: LD_INT 61
20368: PUSH
20369: LD_INT 62
20371: PUSH
20372: LD_INT 66
20374: PUSH
20375: LD_INT 67
20377: PUSH
20378: LD_INT 68
20380: PUSH
20381: LD_INT 81
20383: PUSH
20384: LD_INT 82
20386: PUSH
20387: LD_INT 83
20389: PUSH
20390: LD_INT 84
20392: PUSH
20393: LD_INT 85
20395: PUSH
20396: LD_INT 87
20398: PUSH
20399: LD_INT 88
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 20691
20460: LD_INT 3
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20690
20468: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20469: LD_ADDR_VAR 0 4
20473: PUSH
20474: LD_INT 46
20476: PUSH
20477: LD_INT 47
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: LD_INT 82
20488: PUSH
20489: LD_INT 83
20491: PUSH
20492: LD_INT 84
20494: PUSH
20495: LD_INT 85
20497: PUSH
20498: LD_INT 86
20500: PUSH
20501: LD_INT 11
20503: PUSH
20504: LD_INT 9
20506: PUSH
20507: LD_INT 20
20509: PUSH
20510: LD_INT 19
20512: PUSH
20513: LD_INT 21
20515: PUSH
20516: LD_INT 24
20518: PUSH
20519: LD_INT 22
20521: PUSH
20522: LD_INT 25
20524: PUSH
20525: LD_INT 28
20527: PUSH
20528: LD_INT 29
20530: PUSH
20531: LD_INT 30
20533: PUSH
20534: LD_INT 31
20536: PUSH
20537: LD_INT 37
20539: PUSH
20540: LD_INT 38
20542: PUSH
20543: LD_INT 32
20545: PUSH
20546: LD_INT 27
20548: PUSH
20549: LD_INT 33
20551: PUSH
20552: LD_INT 69
20554: PUSH
20555: LD_INT 39
20557: PUSH
20558: LD_INT 34
20560: PUSH
20561: LD_INT 40
20563: PUSH
20564: LD_INT 71
20566: PUSH
20567: LD_INT 23
20569: PUSH
20570: LD_INT 44
20572: PUSH
20573: LD_INT 48
20575: PUSH
20576: LD_INT 49
20578: PUSH
20579: LD_INT 50
20581: PUSH
20582: LD_INT 51
20584: PUSH
20585: LD_INT 52
20587: PUSH
20588: LD_INT 53
20590: PUSH
20591: LD_INT 54
20593: PUSH
20594: LD_INT 55
20596: PUSH
20597: LD_INT 56
20599: PUSH
20600: LD_INT 57
20602: PUSH
20603: LD_INT 58
20605: PUSH
20606: LD_INT 59
20608: PUSH
20609: LD_INT 63
20611: PUSH
20612: LD_INT 64
20614: PUSH
20615: LD_INT 65
20617: PUSH
20618: LD_INT 82
20620: PUSH
20621: LD_INT 83
20623: PUSH
20624: LD_INT 84
20626: PUSH
20627: LD_INT 85
20629: PUSH
20630: LD_INT 86
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: ST_TO_ADDR
20688: GO 20691
20690: POP
// if state > - 1 and state < 3 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: GREATER
20700: PUSH
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 3
20708: LESS
20709: AND
20710: IFFALSE 20767
// for i in result do
20712: LD_ADDR_VAR 0 5
20716: PUSH
20717: LD_VAR 0 4
20721: PUSH
20722: FOR_IN
20723: IFFALSE 20765
// if GetTech ( i , side ) <> state then
20725: LD_VAR 0 5
20729: PPUSH
20730: LD_VAR 0 1
20734: PPUSH
20735: CALL_OW 321
20739: PUSH
20740: LD_VAR 0 3
20744: NONEQUAL
20745: IFFALSE 20763
// result := result diff i ;
20747: LD_ADDR_VAR 0 4
20751: PUSH
20752: LD_VAR 0 4
20756: PUSH
20757: LD_VAR 0 5
20761: DIFF
20762: ST_TO_ADDR
20763: GO 20722
20765: POP
20766: POP
// end ;
20767: LD_VAR 0 4
20771: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
20776: PPUSH
// result := true ;
20777: LD_ADDR_VAR 0 3
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20785: LD_ADDR_VAR 0 5
20789: PUSH
20790: LD_VAR 0 2
20794: PPUSH
20795: CALL_OW 480
20799: ST_TO_ADDR
// if not tmp then
20800: LD_VAR 0 5
20804: NOT
20805: IFFALSE 20809
// exit ;
20807: GO 20858
// for i in tmp do
20809: LD_ADDR_VAR 0 4
20813: PUSH
20814: LD_VAR 0 5
20818: PUSH
20819: FOR_IN
20820: IFFALSE 20856
// if GetTech ( i , side ) <> state_researched then
20822: LD_VAR 0 4
20826: PPUSH
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 321
20836: PUSH
20837: LD_INT 2
20839: NONEQUAL
20840: IFFALSE 20854
// begin result := false ;
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
// exit ;
20850: POP
20851: POP
20852: GO 20858
// end ;
20854: GO 20819
20856: POP
20857: POP
// end ;
20858: LD_VAR 0 3
20862: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
20876: PPUSH
20877: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20878: LD_VAR 0 1
20882: NOT
20883: PUSH
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 257
20893: PUSH
20894: LD_INT 9
20896: NONEQUAL
20897: OR
20898: IFFALSE 20902
// exit ;
20900: GO 21475
// side := GetSide ( unit ) ;
20902: LD_ADDR_VAR 0 9
20906: PUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 255
20916: ST_TO_ADDR
// tech_space := tech_spacanom ;
20917: LD_ADDR_VAR 0 12
20921: PUSH
20922: LD_INT 29
20924: ST_TO_ADDR
// tech_time := tech_taurad ;
20925: LD_ADDR_VAR 0 13
20929: PUSH
20930: LD_INT 28
20932: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20933: LD_ADDR_VAR 0 11
20937: PUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 310
20947: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20948: LD_VAR 0 11
20952: PPUSH
20953: CALL_OW 247
20957: PUSH
20958: LD_INT 2
20960: EQUAL
20961: IFFALSE 20965
// exit ;
20963: GO 21475
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20965: LD_ADDR_VAR 0 8
20969: PUSH
20970: LD_INT 81
20972: PUSH
20973: LD_VAR 0 9
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 3
20984: PUSH
20985: LD_INT 21
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 8
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21475
// if in_unit then
21017: LD_VAR 0 11
21021: IFFALSE 21045
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21023: LD_ADDR_VAR 0 10
21027: PUSH
21028: LD_VAR 0 8
21032: PPUSH
21033: LD_VAR 0 11
21037: PPUSH
21038: CALL_OW 74
21042: ST_TO_ADDR
21043: GO 21065
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21045: LD_ADDR_VAR 0 10
21049: PUSH
21050: LD_VAR 0 8
21054: PPUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 74
21064: ST_TO_ADDR
// if not enemy then
21065: LD_VAR 0 10
21069: NOT
21070: IFFALSE 21074
// exit ;
21072: GO 21475
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21074: LD_VAR 0 11
21078: PUSH
21079: LD_VAR 0 11
21083: PPUSH
21084: LD_VAR 0 10
21088: PPUSH
21089: CALL_OW 296
21093: PUSH
21094: LD_INT 13
21096: GREATER
21097: AND
21098: PUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: LD_VAR 0 10
21108: PPUSH
21109: CALL_OW 296
21113: PUSH
21114: LD_INT 12
21116: GREATER
21117: OR
21118: IFFALSE 21122
// exit ;
21120: GO 21475
// missile := [ 1 ] ;
21122: LD_ADDR_VAR 0 14
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21133: LD_VAR 0 9
21137: PPUSH
21138: LD_VAR 0 12
21142: PPUSH
21143: CALL_OW 325
21147: IFFALSE 21176
// missile := Insert ( missile , missile + 1 , 2 ) ;
21149: LD_ADDR_VAR 0 14
21153: PUSH
21154: LD_VAR 0 14
21158: PPUSH
21159: LD_VAR 0 14
21163: PUSH
21164: LD_INT 1
21166: PLUS
21167: PPUSH
21168: LD_INT 2
21170: PPUSH
21171: CALL_OW 2
21175: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21176: LD_VAR 0 9
21180: PPUSH
21181: LD_VAR 0 13
21185: PPUSH
21186: CALL_OW 325
21190: PUSH
21191: LD_VAR 0 10
21195: PPUSH
21196: CALL_OW 255
21200: PPUSH
21201: LD_VAR 0 13
21205: PPUSH
21206: CALL_OW 325
21210: NOT
21211: AND
21212: IFFALSE 21241
// missile := Insert ( missile , missile + 1 , 3 ) ;
21214: LD_ADDR_VAR 0 14
21218: PUSH
21219: LD_VAR 0 14
21223: PPUSH
21224: LD_VAR 0 14
21228: PUSH
21229: LD_INT 1
21231: PLUS
21232: PPUSH
21233: LD_INT 3
21235: PPUSH
21236: CALL_OW 2
21240: ST_TO_ADDR
// if missile < 2 then
21241: LD_VAR 0 14
21245: PUSH
21246: LD_INT 2
21248: LESS
21249: IFFALSE 21253
// exit ;
21251: GO 21475
// x := GetX ( enemy ) ;
21253: LD_ADDR_VAR 0 4
21257: PUSH
21258: LD_VAR 0 10
21262: PPUSH
21263: CALL_OW 250
21267: ST_TO_ADDR
// y := GetY ( enemy ) ;
21268: LD_ADDR_VAR 0 5
21272: PUSH
21273: LD_VAR 0 10
21277: PPUSH
21278: CALL_OW 251
21282: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21283: LD_ADDR_VAR 0 6
21287: PUSH
21288: LD_VAR 0 4
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PPUSH
21297: LD_INT 1
21299: PPUSH
21300: CALL_OW 12
21304: PLUS
21305: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21306: LD_ADDR_VAR 0 7
21310: PUSH
21311: LD_VAR 0 5
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PPUSH
21320: LD_INT 1
21322: PPUSH
21323: CALL_OW 12
21327: PLUS
21328: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21329: LD_VAR 0 6
21333: PPUSH
21334: LD_VAR 0 7
21338: PPUSH
21339: CALL_OW 488
21343: NOT
21344: IFFALSE 21366
// begin _x := x ;
21346: LD_ADDR_VAR 0 6
21350: PUSH
21351: LD_VAR 0 4
21355: ST_TO_ADDR
// _y := y ;
21356: LD_ADDR_VAR 0 7
21360: PUSH
21361: LD_VAR 0 5
21365: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21366: LD_ADDR_VAR 0 3
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 14
21378: PPUSH
21379: CALL_OW 12
21383: ST_TO_ADDR
// case i of 1 :
21384: LD_VAR 0 3
21388: PUSH
21389: LD_INT 1
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21414
21397: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_VAR 0 10
21407: PPUSH
21408: CALL_OW 115
21412: GO 21475
21414: LD_INT 2
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21444
21422: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21423: LD_VAR 0 1
21427: PPUSH
21428: LD_VAR 0 6
21432: PPUSH
21433: LD_VAR 0 7
21437: PPUSH
21438: CALL_OW 153
21442: GO 21475
21444: LD_INT 3
21446: DOUBLE
21447: EQUAL
21448: IFTRUE 21452
21450: GO 21474
21452: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21453: LD_VAR 0 1
21457: PPUSH
21458: LD_VAR 0 6
21462: PPUSH
21463: LD_VAR 0 7
21467: PPUSH
21468: CALL_OW 154
21472: GO 21475
21474: POP
// end ;
21475: LD_VAR 0 2
21479: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
// if not unit or not building then
21488: LD_VAR 0 1
21492: NOT
21493: PUSH
21494: LD_VAR 0 2
21498: NOT
21499: OR
21500: IFFALSE 21504
// exit ;
21502: GO 21662
// x := GetX ( building ) ;
21504: LD_ADDR_VAR 0 5
21508: PUSH
21509: LD_VAR 0 2
21513: PPUSH
21514: CALL_OW 250
21518: ST_TO_ADDR
// y := GetY ( building ) ;
21519: LD_ADDR_VAR 0 6
21523: PUSH
21524: LD_VAR 0 2
21528: PPUSH
21529: CALL_OW 251
21533: ST_TO_ADDR
// for i = 0 to 5 do
21534: LD_ADDR_VAR 0 4
21538: PUSH
21539: DOUBLE
21540: LD_INT 0
21542: DEC
21543: ST_TO_ADDR
21544: LD_INT 5
21546: PUSH
21547: FOR_TO
21548: IFFALSE 21660
// begin _x := ShiftX ( x , i , 3 ) ;
21550: LD_ADDR_VAR 0 7
21554: PUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: LD_VAR 0 4
21564: PPUSH
21565: LD_INT 3
21567: PPUSH
21568: CALL_OW 272
21572: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21573: LD_ADDR_VAR 0 8
21577: PUSH
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 4
21587: PPUSH
21588: LD_INT 3
21590: PPUSH
21591: CALL_OW 273
21595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21596: LD_VAR 0 7
21600: PPUSH
21601: LD_VAR 0 8
21605: PPUSH
21606: CALL_OW 488
21610: NOT
21611: IFFALSE 21615
// continue ;
21613: GO 21547
// if HexInfo ( _x , _y ) = 0 then
21615: LD_VAR 0 7
21619: PPUSH
21620: LD_VAR 0 8
21624: PPUSH
21625: CALL_OW 428
21629: PUSH
21630: LD_INT 0
21632: EQUAL
21633: IFFALSE 21658
// begin ComMoveXY ( unit , _x , _y ) ;
21635: LD_VAR 0 1
21639: PPUSH
21640: LD_VAR 0 7
21644: PPUSH
21645: LD_VAR 0 8
21649: PPUSH
21650: CALL_OW 111
// exit ;
21654: POP
21655: POP
21656: GO 21662
// end ; end ;
21658: GO 21547
21660: POP
21661: POP
// end ;
21662: LD_VAR 0 3
21666: RET
// export function ScanBase ( side , base_area ) ; begin
21667: LD_INT 0
21669: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_INT 81
21682: PUSH
21683: LD_VAR 0 1
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PPUSH
21692: CALL_OW 70
21696: ST_TO_ADDR
// end ;
21697: LD_VAR 0 3
21701: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21702: LD_INT 0
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
// result := false ;
21708: LD_ADDR_VAR 0 2
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
// side := GetSide ( unit ) ;
21716: LD_ADDR_VAR 0 3
21720: PUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 255
21730: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21731: LD_ADDR_VAR 0 4
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 248
21745: ST_TO_ADDR
// case nat of 1 :
21746: LD_VAR 0 4
21750: PUSH
21751: LD_INT 1
21753: DOUBLE
21754: EQUAL
21755: IFTRUE 21759
21757: GO 21770
21759: POP
// tech := tech_lassight ; 2 :
21760: LD_ADDR_VAR 0 5
21764: PUSH
21765: LD_INT 12
21767: ST_TO_ADDR
21768: GO 21809
21770: LD_INT 2
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21789
21778: POP
// tech := tech_mortar ; 3 :
21779: LD_ADDR_VAR 0 5
21783: PUSH
21784: LD_INT 41
21786: ST_TO_ADDR
21787: GO 21809
21789: LD_INT 3
21791: DOUBLE
21792: EQUAL
21793: IFTRUE 21797
21795: GO 21808
21797: POP
// tech := tech_bazooka ; end ;
21798: LD_ADDR_VAR 0 5
21802: PUSH
21803: LD_INT 44
21805: ST_TO_ADDR
21806: GO 21809
21808: POP
// if Researched ( side , tech ) then
21809: LD_VAR 0 3
21813: PPUSH
21814: LD_VAR 0 5
21818: PPUSH
21819: CALL_OW 325
21823: IFFALSE 21850
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21825: LD_ADDR_VAR 0 2
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 8
21835: PUSH
21836: LD_INT 9
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: PUSH
21844: LD_VAR 0 4
21848: ARRAY
21849: ST_TO_ADDR
// end ;
21850: LD_VAR 0 2
21854: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
// if not mines then
21860: LD_VAR 0 2
21864: NOT
21865: IFFALSE 21869
// exit ;
21867: GO 22013
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21869: LD_ADDR_VAR 0 5
21873: PUSH
21874: LD_INT 81
21876: PUSH
21877: LD_VAR 0 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 3
21888: PUSH
21889: LD_INT 21
21891: PUSH
21892: LD_INT 3
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: ST_TO_ADDR
// for i in mines do
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_VAR 0 2
21921: PUSH
21922: FOR_IN
21923: IFFALSE 22011
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21925: LD_VAR 0 4
21929: PUSH
21930: LD_INT 1
21932: ARRAY
21933: PPUSH
21934: LD_VAR 0 4
21938: PUSH
21939: LD_INT 2
21941: ARRAY
21942: PPUSH
21943: CALL_OW 458
21947: NOT
21948: IFFALSE 21952
// continue ;
21950: GO 21922
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21952: LD_VAR 0 4
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 4
21965: PUSH
21966: LD_INT 2
21968: ARRAY
21969: PPUSH
21970: CALL_OW 428
21974: PUSH
21975: LD_VAR 0 5
21979: IN
21980: IFFALSE 22009
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21982: LD_VAR 0 4
21986: PUSH
21987: LD_INT 1
21989: ARRAY
21990: PPUSH
21991: LD_VAR 0 4
21995: PUSH
21996: LD_INT 2
21998: ARRAY
21999: PPUSH
22000: LD_VAR 0 1
22004: PPUSH
22005: CALL_OW 456
// end ;
22009: GO 21922
22011: POP
22012: POP
// end ;
22013: LD_VAR 0 3
22017: RET
// export function Count ( array ) ; var i ; begin
22018: LD_INT 0
22020: PPUSH
22021: PPUSH
// result := 0 ;
22022: LD_ADDR_VAR 0 2
22026: PUSH
22027: LD_INT 0
22029: ST_TO_ADDR
// for i in array do
22030: LD_ADDR_VAR 0 3
22034: PUSH
22035: LD_VAR 0 1
22039: PUSH
22040: FOR_IN
22041: IFFALSE 22065
// if i then
22043: LD_VAR 0 3
22047: IFFALSE 22063
// result := result + 1 ;
22049: LD_ADDR_VAR 0 2
22053: PUSH
22054: LD_VAR 0 2
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: ST_TO_ADDR
22063: GO 22040
22065: POP
22066: POP
// end ;
22067: LD_VAR 0 2
22071: RET
// export function IsEmpty ( building ) ; begin
22072: LD_INT 0
22074: PPUSH
// if not building then
22075: LD_VAR 0 1
22079: NOT
22080: IFFALSE 22084
// exit ;
22082: GO 22127
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22084: LD_ADDR_VAR 0 2
22088: PUSH
22089: LD_VAR 0 1
22093: PUSH
22094: LD_INT 22
22096: PUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 255
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 58
22113: PUSH
22114: EMPTY
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 69
22125: IN
22126: ST_TO_ADDR
// end ;
22127: LD_VAR 0 2
22131: RET
// export function IsNotFull ( building ) ; begin
22132: LD_INT 0
22134: PPUSH
// if not building then
22135: LD_VAR 0 1
22139: NOT
22140: IFFALSE 22144
// exit ;
22142: GO 22163
// result := UnitsInside ( building ) < 6 ;
22144: LD_ADDR_VAR 0 2
22148: PUSH
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 313
22158: PUSH
22159: LD_INT 6
22161: LESS
22162: ST_TO_ADDR
// end ;
22163: LD_VAR 0 2
22167: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22168: LD_INT 0
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
// tmp := [ ] ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: EMPTY
22180: ST_TO_ADDR
// list := [ ] ;
22181: LD_ADDR_VAR 0 5
22185: PUSH
22186: EMPTY
22187: ST_TO_ADDR
// for i = 16 to 25 do
22188: LD_ADDR_VAR 0 4
22192: PUSH
22193: DOUBLE
22194: LD_INT 16
22196: DEC
22197: ST_TO_ADDR
22198: LD_INT 25
22200: PUSH
22201: FOR_TO
22202: IFFALSE 22275
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22204: LD_ADDR_VAR 0 3
22208: PUSH
22209: LD_VAR 0 3
22213: PUSH
22214: LD_INT 22
22216: PUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 255
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 91
22233: PUSH
22234: LD_VAR 0 1
22238: PUSH
22239: LD_INT 6
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_VAR 0 4
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: ADD
22272: ST_TO_ADDR
22273: GO 22201
22275: POP
22276: POP
// for i = 1 to tmp do
22277: LD_ADDR_VAR 0 4
22281: PUSH
22282: DOUBLE
22283: LD_INT 1
22285: DEC
22286: ST_TO_ADDR
22287: LD_VAR 0 3
22291: PUSH
22292: FOR_TO
22293: IFFALSE 22381
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22295: LD_ADDR_VAR 0 5
22299: PUSH
22300: LD_VAR 0 5
22304: PUSH
22305: LD_VAR 0 3
22309: PUSH
22310: LD_VAR 0 4
22314: ARRAY
22315: PPUSH
22316: CALL_OW 266
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_VAR 0 4
22330: ARRAY
22331: PPUSH
22332: CALL_OW 250
22336: PUSH
22337: LD_VAR 0 3
22341: PUSH
22342: LD_VAR 0 4
22346: ARRAY
22347: PPUSH
22348: CALL_OW 251
22352: PUSH
22353: LD_VAR 0 3
22357: PUSH
22358: LD_VAR 0 4
22362: ARRAY
22363: PPUSH
22364: CALL_OW 254
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: ADD
22378: ST_TO_ADDR
22379: GO 22292
22381: POP
22382: POP
// result := list ;
22383: LD_ADDR_VAR 0 2
22387: PUSH
22388: LD_VAR 0 5
22392: ST_TO_ADDR
// end ;
22393: LD_VAR 0 2
22397: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22398: LD_INT 0
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
// if not factory then
22407: LD_VAR 0 1
22411: NOT
22412: IFFALSE 22416
// exit ;
22414: GO 23009
// if control = control_apeman then
22416: LD_VAR 0 4
22420: PUSH
22421: LD_INT 5
22423: EQUAL
22424: IFFALSE 22533
// begin tmp := UnitsInside ( factory ) ;
22426: LD_ADDR_VAR 0 8
22430: PUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 313
22440: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22441: LD_VAR 0 8
22445: PPUSH
22446: LD_INT 25
22448: PUSH
22449: LD_INT 12
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PPUSH
22456: CALL_OW 72
22460: NOT
22461: IFFALSE 22471
// control := control_manual ;
22463: LD_ADDR_VAR 0 4
22467: PUSH
22468: LD_INT 1
22470: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22471: LD_ADDR_VAR 0 8
22475: PUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL 22168 0 1
22485: ST_TO_ADDR
// if tmp then
22486: LD_VAR 0 8
22490: IFFALSE 22533
// begin for i in tmp do
22492: LD_ADDR_VAR 0 7
22496: PUSH
22497: LD_VAR 0 8
22501: PUSH
22502: FOR_IN
22503: IFFALSE 22531
// if i [ 1 ] = b_ext_radio then
22505: LD_VAR 0 7
22509: PUSH
22510: LD_INT 1
22512: ARRAY
22513: PUSH
22514: LD_INT 22
22516: EQUAL
22517: IFFALSE 22529
// begin control := control_remote ;
22519: LD_ADDR_VAR 0 4
22523: PUSH
22524: LD_INT 2
22526: ST_TO_ADDR
// break ;
22527: GO 22531
// end ;
22529: GO 22502
22531: POP
22532: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22533: LD_VAR 0 1
22537: PPUSH
22538: LD_VAR 0 2
22542: PPUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_VAR 0 4
22552: PPUSH
22553: LD_VAR 0 5
22557: PPUSH
22558: CALL_OW 448
22562: IFFALSE 22597
// begin result := [ chassis , engine , control , weapon ] ;
22564: LD_ADDR_VAR 0 6
22568: PUSH
22569: LD_VAR 0 2
22573: PUSH
22574: LD_VAR 0 3
22578: PUSH
22579: LD_VAR 0 4
22583: PUSH
22584: LD_VAR 0 5
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: ST_TO_ADDR
// exit ;
22595: GO 23009
// end ; _chassis := AvailableChassisList ( factory ) ;
22597: LD_ADDR_VAR 0 9
22601: PUSH
22602: LD_VAR 0 1
22606: PPUSH
22607: CALL_OW 475
22611: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22612: LD_ADDR_VAR 0 11
22616: PUSH
22617: LD_VAR 0 1
22621: PPUSH
22622: CALL_OW 476
22626: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22627: LD_ADDR_VAR 0 12
22631: PUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL_OW 477
22641: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22642: LD_ADDR_VAR 0 10
22646: PUSH
22647: LD_VAR 0 1
22651: PPUSH
22652: CALL_OW 478
22656: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22657: LD_VAR 0 9
22661: NOT
22662: PUSH
22663: LD_VAR 0 11
22667: NOT
22668: OR
22669: PUSH
22670: LD_VAR 0 12
22674: NOT
22675: OR
22676: PUSH
22677: LD_VAR 0 10
22681: NOT
22682: OR
22683: IFFALSE 22718
// begin result := [ chassis , engine , control , weapon ] ;
22685: LD_ADDR_VAR 0 6
22689: PUSH
22690: LD_VAR 0 2
22694: PUSH
22695: LD_VAR 0 3
22699: PUSH
22700: LD_VAR 0 4
22704: PUSH
22705: LD_VAR 0 5
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: ST_TO_ADDR
// exit ;
22716: GO 23009
// end ; if not chassis in _chassis then
22718: LD_VAR 0 2
22722: PUSH
22723: LD_VAR 0 9
22727: IN
22728: NOT
22729: IFFALSE 22755
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22731: LD_ADDR_VAR 0 2
22735: PUSH
22736: LD_VAR 0 9
22740: PUSH
22741: LD_INT 1
22743: PPUSH
22744: LD_VAR 0 9
22748: PPUSH
22749: CALL_OW 12
22753: ARRAY
22754: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22755: LD_VAR 0 2
22759: PPUSH
22760: LD_VAR 0 3
22764: PPUSH
22765: CALL 23014 0 2
22769: NOT
22770: IFFALSE 22829
// repeat engine := _engine [ 1 ] ;
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_VAR 0 11
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22786: LD_ADDR_VAR 0 11
22790: PUSH
22791: LD_VAR 0 11
22795: PPUSH
22796: LD_INT 1
22798: PPUSH
22799: CALL_OW 3
22803: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22804: LD_VAR 0 2
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: CALL 23014 0 2
22818: PUSH
22819: LD_VAR 0 11
22823: PUSH
22824: EMPTY
22825: EQUAL
22826: OR
22827: IFFALSE 22772
// if not control in _control then
22829: LD_VAR 0 4
22833: PUSH
22834: LD_VAR 0 12
22838: IN
22839: NOT
22840: IFFALSE 22866
// control := _control [ rand ( 1 , _control ) ] ;
22842: LD_ADDR_VAR 0 4
22846: PUSH
22847: LD_VAR 0 12
22851: PUSH
22852: LD_INT 1
22854: PPUSH
22855: LD_VAR 0 12
22859: PPUSH
22860: CALL_OW 12
22864: ARRAY
22865: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22866: LD_VAR 0 2
22870: PPUSH
22871: LD_VAR 0 5
22875: PPUSH
22876: CALL 23234 0 2
22880: NOT
22881: IFFALSE 22940
// repeat weapon := _weapon [ 1 ] ;
22883: LD_ADDR_VAR 0 5
22887: PUSH
22888: LD_VAR 0 10
22892: PUSH
22893: LD_INT 1
22895: ARRAY
22896: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22897: LD_ADDR_VAR 0 10
22901: PUSH
22902: LD_VAR 0 10
22906: PPUSH
22907: LD_INT 1
22909: PPUSH
22910: CALL_OW 3
22914: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_VAR 0 5
22924: PPUSH
22925: CALL 23234 0 2
22929: PUSH
22930: LD_VAR 0 10
22934: PUSH
22935: EMPTY
22936: EQUAL
22937: OR
22938: IFFALSE 22883
// result := [ ] ;
22940: LD_ADDR_VAR 0 6
22944: PUSH
22945: EMPTY
22946: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22947: LD_VAR 0 1
22951: PPUSH
22952: LD_VAR 0 2
22956: PPUSH
22957: LD_VAR 0 3
22961: PPUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_VAR 0 5
22971: PPUSH
22972: CALL_OW 448
22976: IFFALSE 23009
// result := [ chassis , engine , control , weapon ] ;
22978: LD_ADDR_VAR 0 6
22982: PUSH
22983: LD_VAR 0 2
22987: PUSH
22988: LD_VAR 0 3
22992: PUSH
22993: LD_VAR 0 4
22997: PUSH
22998: LD_VAR 0 5
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
// end ;
23009: LD_VAR 0 6
23013: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23014: LD_INT 0
23016: PPUSH
// if not chassis or not engine then
23017: LD_VAR 0 1
23021: NOT
23022: PUSH
23023: LD_VAR 0 2
23027: NOT
23028: OR
23029: IFFALSE 23033
// exit ;
23031: GO 23229
// case engine of engine_solar :
23033: LD_VAR 0 2
23037: PUSH
23038: LD_INT 2
23040: DOUBLE
23041: EQUAL
23042: IFTRUE 23046
23044: GO 23084
23046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23047: LD_ADDR_VAR 0 3
23051: PUSH
23052: LD_INT 11
23054: PUSH
23055: LD_INT 12
23057: PUSH
23058: LD_INT 13
23060: PUSH
23061: LD_INT 14
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: LD_INT 3
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
23082: GO 23213
23084: LD_INT 1
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23154
23092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 4
23121: PUSH
23122: LD_INT 5
23124: PUSH
23125: LD_INT 21
23127: PUSH
23128: LD_INT 23
23130: PUSH
23131: LD_INT 22
23133: PUSH
23134: LD_INT 24
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: ST_TO_ADDR
23152: GO 23213
23154: LD_INT 3
23156: DOUBLE
23157: EQUAL
23158: IFTRUE 23162
23160: GO 23212
23162: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23163: LD_ADDR_VAR 0 3
23167: PUSH
23168: LD_INT 13
23170: PUSH
23171: LD_INT 14
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 3
23179: PUSH
23180: LD_INT 4
23182: PUSH
23183: LD_INT 5
23185: PUSH
23186: LD_INT 21
23188: PUSH
23189: LD_INT 22
23191: PUSH
23192: LD_INT 23
23194: PUSH
23195: LD_INT 24
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: ST_TO_ADDR
23210: GO 23213
23212: POP
// result := ( chassis in result ) ;
23213: LD_ADDR_VAR 0 3
23217: PUSH
23218: LD_VAR 0 1
23222: PUSH
23223: LD_VAR 0 3
23227: IN
23228: ST_TO_ADDR
// end ;
23229: LD_VAR 0 3
23233: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23234: LD_INT 0
23236: PPUSH
// if not chassis or not weapon then
23237: LD_VAR 0 1
23241: NOT
23242: PUSH
23243: LD_VAR 0 2
23247: NOT
23248: OR
23249: IFFALSE 23253
// exit ;
23251: GO 24315
// case weapon of us_machine_gun :
23253: LD_VAR 0 2
23257: PUSH
23258: LD_INT 2
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23296
23266: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23267: LD_ADDR_VAR 0 3
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 24299
23296: LD_INT 3
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23334
23304: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 4
23321: PUSH
23322: LD_INT 5
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: ST_TO_ADDR
23332: GO 24299
23334: LD_INT 11
23336: DOUBLE
23337: EQUAL
23338: IFTRUE 23342
23340: GO 23372
23342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23343: LD_ADDR_VAR 0 3
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 3
23356: PUSH
23357: LD_INT 4
23359: PUSH
23360: LD_INT 5
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: ST_TO_ADDR
23370: GO 24299
23372: LD_INT 4
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23380
23378: GO 23406
23380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23381: LD_ADDR_VAR 0 3
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: LD_INT 4
23394: PUSH
23395: LD_INT 5
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 24299
23406: LD_INT 5
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23440
23414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23415: LD_ADDR_VAR 0 3
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: LD_INT 4
23428: PUSH
23429: LD_INT 5
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: ST_TO_ADDR
23438: GO 24299
23440: LD_INT 9
23442: DOUBLE
23443: EQUAL
23444: IFTRUE 23448
23446: GO 23474
23448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: LD_INT 4
23462: PUSH
23463: LD_INT 5
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
23472: GO 24299
23474: LD_INT 7
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23508
23482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 4
23496: PUSH
23497: LD_INT 5
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: ST_TO_ADDR
23506: GO 24299
23508: LD_INT 12
23510: DOUBLE
23511: EQUAL
23512: IFTRUE 23516
23514: GO 23542
23516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23517: LD_ADDR_VAR 0 3
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 3
23527: PUSH
23528: LD_INT 4
23530: PUSH
23531: LD_INT 5
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
23540: GO 24299
23542: LD_INT 13
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23576
23550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: LD_INT 4
23564: PUSH
23565: LD_INT 5
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 24299
23576: LD_INT 14
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23602
23584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_INT 4
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: ST_TO_ADDR
23600: GO 24299
23602: LD_INT 6
23604: DOUBLE
23605: EQUAL
23606: IFTRUE 23610
23608: GO 23628
23610: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23611: LD_ADDR_VAR 0 3
23615: PUSH
23616: LD_INT 4
23618: PUSH
23619: LD_INT 5
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: ST_TO_ADDR
23626: GO 24299
23628: LD_INT 10
23630: DOUBLE
23631: EQUAL
23632: IFTRUE 23636
23634: GO 23654
23636: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23637: LD_ADDR_VAR 0 3
23641: PUSH
23642: LD_INT 4
23644: PUSH
23645: LD_INT 5
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: ST_TO_ADDR
23652: GO 24299
23654: LD_INT 22
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23688
23662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_INT 11
23670: PUSH
23671: LD_INT 12
23673: PUSH
23674: LD_INT 13
23676: PUSH
23677: LD_INT 14
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: ST_TO_ADDR
23686: GO 24299
23688: LD_INT 23
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23722
23696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23697: LD_ADDR_VAR 0 3
23701: PUSH
23702: LD_INT 11
23704: PUSH
23705: LD_INT 12
23707: PUSH
23708: LD_INT 13
23710: PUSH
23711: LD_INT 14
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 24299
23722: LD_INT 24
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23756
23730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 11
23738: PUSH
23739: LD_INT 12
23741: PUSH
23742: LD_INT 13
23744: PUSH
23745: LD_INT 14
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
23754: GO 24299
23756: LD_INT 30
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23790
23764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: LD_INT 11
23772: PUSH
23773: LD_INT 12
23775: PUSH
23776: LD_INT 13
23778: PUSH
23779: LD_INT 14
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
23788: GO 24299
23790: LD_INT 25
23792: DOUBLE
23793: EQUAL
23794: IFTRUE 23798
23796: GO 23816
23798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23799: LD_ADDR_VAR 0 3
23803: PUSH
23804: LD_INT 13
23806: PUSH
23807: LD_INT 14
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: ST_TO_ADDR
23814: GO 24299
23816: LD_INT 27
23818: DOUBLE
23819: EQUAL
23820: IFTRUE 23824
23822: GO 23842
23824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: LD_INT 13
23832: PUSH
23833: LD_INT 14
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: ST_TO_ADDR
23840: GO 24299
23842: LD_EXP 82
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23878
23852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_INT 11
23860: PUSH
23861: LD_INT 12
23863: PUSH
23864: LD_INT 13
23866: PUSH
23867: LD_INT 14
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
23876: GO 24299
23878: LD_INT 28
23880: DOUBLE
23881: EQUAL
23882: IFTRUE 23886
23884: GO 23904
23886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23887: LD_ADDR_VAR 0 3
23891: PUSH
23892: LD_INT 13
23894: PUSH
23895: LD_INT 14
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: ST_TO_ADDR
23902: GO 24299
23904: LD_INT 29
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23930
23912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: LD_INT 13
23920: PUSH
23921: LD_INT 14
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: ST_TO_ADDR
23928: GO 24299
23930: LD_INT 31
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23956
23938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23939: LD_ADDR_VAR 0 3
23943: PUSH
23944: LD_INT 13
23946: PUSH
23947: LD_INT 14
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: ST_TO_ADDR
23954: GO 24299
23956: LD_INT 26
23958: DOUBLE
23959: EQUAL
23960: IFTRUE 23964
23962: GO 23982
23964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23965: LD_ADDR_VAR 0 3
23969: PUSH
23970: LD_INT 13
23972: PUSH
23973: LD_INT 14
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: ST_TO_ADDR
23980: GO 24299
23982: LD_INT 42
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24016
23990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23991: LD_ADDR_VAR 0 3
23995: PUSH
23996: LD_INT 21
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 24
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: ST_TO_ADDR
24014: GO 24299
24016: LD_INT 43
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24050
24024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24025: LD_ADDR_VAR 0 3
24029: PUSH
24030: LD_INT 21
24032: PUSH
24033: LD_INT 22
24035: PUSH
24036: LD_INT 23
24038: PUSH
24039: LD_INT 24
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24299
24050: LD_INT 44
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24084
24058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 21
24066: PUSH
24067: LD_INT 22
24069: PUSH
24070: LD_INT 23
24072: PUSH
24073: LD_INT 24
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 24299
24084: LD_INT 45
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24118
24092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_INT 21
24100: PUSH
24101: LD_INT 22
24103: PUSH
24104: LD_INT 23
24106: PUSH
24107: LD_INT 24
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: ST_TO_ADDR
24116: GO 24299
24118: LD_INT 49
24120: DOUBLE
24121: EQUAL
24122: IFTRUE 24126
24124: GO 24152
24126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24127: LD_ADDR_VAR 0 3
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
24150: GO 24299
24152: LD_INT 51
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24186
24160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24161: LD_ADDR_VAR 0 3
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_INT 23
24174: PUSH
24175: LD_INT 24
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
24184: GO 24299
24186: LD_INT 52
24188: DOUBLE
24189: EQUAL
24190: IFTRUE 24194
24192: GO 24220
24194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 22
24205: PUSH
24206: LD_INT 23
24208: PUSH
24209: LD_INT 24
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
24218: GO 24299
24220: LD_INT 53
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24246
24228: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_INT 23
24236: PUSH
24237: LD_INT 24
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 24299
24246: LD_INT 46
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24272
24254: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 23
24262: PUSH
24263: LD_INT 24
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: ST_TO_ADDR
24270: GO 24299
24272: LD_INT 47
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24298
24280: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_INT 23
24288: PUSH
24289: LD_INT 24
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: ST_TO_ADDR
24296: GO 24299
24298: POP
// result := ( chassis in result ) ;
24299: LD_ADDR_VAR 0 3
24303: PUSH
24304: LD_VAR 0 1
24308: PUSH
24309: LD_VAR 0 3
24313: IN
24314: ST_TO_ADDR
// end ;
24315: LD_VAR 0 3
24319: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
24326: PPUSH
24327: PPUSH
24328: PPUSH
// result := array ;
24329: LD_ADDR_VAR 0 5
24333: PUSH
24334: LD_VAR 0 1
24338: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24339: LD_VAR 0 1
24343: NOT
24344: PUSH
24345: LD_VAR 0 2
24349: NOT
24350: OR
24351: PUSH
24352: LD_VAR 0 3
24356: NOT
24357: OR
24358: PUSH
24359: LD_VAR 0 2
24363: PUSH
24364: LD_VAR 0 1
24368: GREATER
24369: OR
24370: PUSH
24371: LD_VAR 0 3
24375: PUSH
24376: LD_VAR 0 1
24380: GREATER
24381: OR
24382: IFFALSE 24386
// exit ;
24384: GO 24682
// if direction then
24386: LD_VAR 0 4
24390: IFFALSE 24454
// begin d := 1 ;
24392: LD_ADDR_VAR 0 9
24396: PUSH
24397: LD_INT 1
24399: ST_TO_ADDR
// if i_from > i_to then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_VAR 0 3
24409: GREATER
24410: IFFALSE 24436
// length := ( array - i_from ) + i_to else
24412: LD_ADDR_VAR 0 11
24416: PUSH
24417: LD_VAR 0 1
24421: PUSH
24422: LD_VAR 0 2
24426: MINUS
24427: PUSH
24428: LD_VAR 0 3
24432: PLUS
24433: ST_TO_ADDR
24434: GO 24452
// length := i_to - i_from ;
24436: LD_ADDR_VAR 0 11
24440: PUSH
24441: LD_VAR 0 3
24445: PUSH
24446: LD_VAR 0 2
24450: MINUS
24451: ST_TO_ADDR
// end else
24452: GO 24515
// begin d := - 1 ;
24454: LD_ADDR_VAR 0 9
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: ST_TO_ADDR
// if i_from > i_to then
24463: LD_VAR 0 2
24467: PUSH
24468: LD_VAR 0 3
24472: GREATER
24473: IFFALSE 24493
// length := i_from - i_to else
24475: LD_ADDR_VAR 0 11
24479: PUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_VAR 0 3
24489: MINUS
24490: ST_TO_ADDR
24491: GO 24515
// length := ( array - i_to ) + i_from ;
24493: LD_ADDR_VAR 0 11
24497: PUSH
24498: LD_VAR 0 1
24502: PUSH
24503: LD_VAR 0 3
24507: MINUS
24508: PUSH
24509: LD_VAR 0 2
24513: PLUS
24514: ST_TO_ADDR
// end ; if not length then
24515: LD_VAR 0 11
24519: NOT
24520: IFFALSE 24524
// exit ;
24522: GO 24682
// tmp := array ;
24524: LD_ADDR_VAR 0 10
24528: PUSH
24529: LD_VAR 0 1
24533: ST_TO_ADDR
// for i = 1 to length do
24534: LD_ADDR_VAR 0 6
24538: PUSH
24539: DOUBLE
24540: LD_INT 1
24542: DEC
24543: ST_TO_ADDR
24544: LD_VAR 0 11
24548: PUSH
24549: FOR_TO
24550: IFFALSE 24670
// begin for j = 1 to array do
24552: LD_ADDR_VAR 0 7
24556: PUSH
24557: DOUBLE
24558: LD_INT 1
24560: DEC
24561: ST_TO_ADDR
24562: LD_VAR 0 1
24566: PUSH
24567: FOR_TO
24568: IFFALSE 24656
// begin k := j + d ;
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: LD_VAR 0 7
24579: PUSH
24580: LD_VAR 0 9
24584: PLUS
24585: ST_TO_ADDR
// if k > array then
24586: LD_VAR 0 8
24590: PUSH
24591: LD_VAR 0 1
24595: GREATER
24596: IFFALSE 24606
// k := 1 ;
24598: LD_ADDR_VAR 0 8
24602: PUSH
24603: LD_INT 1
24605: ST_TO_ADDR
// if not k then
24606: LD_VAR 0 8
24610: NOT
24611: IFFALSE 24623
// k := array ;
24613: LD_ADDR_VAR 0 8
24617: PUSH
24618: LD_VAR 0 1
24622: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24623: LD_ADDR_VAR 0 10
24627: PUSH
24628: LD_VAR 0 10
24632: PPUSH
24633: LD_VAR 0 8
24637: PPUSH
24638: LD_VAR 0 1
24642: PUSH
24643: LD_VAR 0 7
24647: ARRAY
24648: PPUSH
24649: CALL_OW 1
24653: ST_TO_ADDR
// end ;
24654: GO 24567
24656: POP
24657: POP
// array := tmp ;
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 10
24667: ST_TO_ADDR
// end ;
24668: GO 24549
24670: POP
24671: POP
// result := array ;
24672: LD_ADDR_VAR 0 5
24676: PUSH
24677: LD_VAR 0 1
24681: ST_TO_ADDR
// end ;
24682: LD_VAR 0 5
24686: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24687: LD_INT 0
24689: PPUSH
24690: PPUSH
// result := 0 ;
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 0
24698: ST_TO_ADDR
// if not array or not value in array then
24699: LD_VAR 0 1
24703: NOT
24704: PUSH
24705: LD_VAR 0 2
24709: PUSH
24710: LD_VAR 0 1
24714: IN
24715: NOT
24716: OR
24717: IFFALSE 24721
// exit ;
24719: GO 24775
// for i = 1 to array do
24721: LD_ADDR_VAR 0 4
24725: PUSH
24726: DOUBLE
24727: LD_INT 1
24729: DEC
24730: ST_TO_ADDR
24731: LD_VAR 0 1
24735: PUSH
24736: FOR_TO
24737: IFFALSE 24773
// if value = array [ i ] then
24739: LD_VAR 0 2
24743: PUSH
24744: LD_VAR 0 1
24748: PUSH
24749: LD_VAR 0 4
24753: ARRAY
24754: EQUAL
24755: IFFALSE 24771
// begin result := i ;
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: LD_VAR 0 4
24766: ST_TO_ADDR
// exit ;
24767: POP
24768: POP
24769: GO 24775
// end ;
24771: GO 24736
24773: POP
24774: POP
// end ;
24775: LD_VAR 0 3
24779: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24780: LD_INT 0
24782: PPUSH
// vc_chassis := chassis ;
24783: LD_ADDR_OWVAR 37
24787: PUSH
24788: LD_VAR 0 1
24792: ST_TO_ADDR
// vc_engine := engine ;
24793: LD_ADDR_OWVAR 39
24797: PUSH
24798: LD_VAR 0 2
24802: ST_TO_ADDR
// vc_control := control ;
24803: LD_ADDR_OWVAR 38
24807: PUSH
24808: LD_VAR 0 3
24812: ST_TO_ADDR
// vc_weapon := weapon ;
24813: LD_ADDR_OWVAR 40
24817: PUSH
24818: LD_VAR 0 4
24822: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24823: LD_ADDR_OWVAR 41
24827: PUSH
24828: LD_VAR 0 5
24832: ST_TO_ADDR
// end ;
24833: LD_VAR 0 6
24837: RET
// export function WantPlant ( unit ) ; var task ; begin
24838: LD_INT 0
24840: PPUSH
24841: PPUSH
// result := false ;
24842: LD_ADDR_VAR 0 2
24846: PUSH
24847: LD_INT 0
24849: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 437
24864: ST_TO_ADDR
// if task then
24865: LD_VAR 0 3
24869: IFFALSE 24897
// if task [ 1 ] [ 1 ] = p then
24871: LD_VAR 0 3
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PUSH
24880: LD_INT 1
24882: ARRAY
24883: PUSH
24884: LD_STRING p
24886: EQUAL
24887: IFFALSE 24897
// result := true ;
24889: LD_ADDR_VAR 0 2
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// end ;
24897: LD_VAR 0 2
24901: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24902: LD_INT 0
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
// if pos < 1 then
24908: LD_VAR 0 2
24912: PUSH
24913: LD_INT 1
24915: LESS
24916: IFFALSE 24920
// exit ;
24918: GO 25223
// if pos = 1 then
24920: LD_VAR 0 2
24924: PUSH
24925: LD_INT 1
24927: EQUAL
24928: IFFALSE 24961
// result := Replace ( arr , pos [ 1 ] , value ) else
24930: LD_ADDR_VAR 0 4
24934: PUSH
24935: LD_VAR 0 1
24939: PPUSH
24940: LD_VAR 0 2
24944: PUSH
24945: LD_INT 1
24947: ARRAY
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: CALL_OW 1
24958: ST_TO_ADDR
24959: GO 25223
// begin tmp := arr ;
24961: LD_ADDR_VAR 0 6
24965: PUSH
24966: LD_VAR 0 1
24970: ST_TO_ADDR
// s_arr := [ tmp ] ;
24971: LD_ADDR_VAR 0 7
24975: PUSH
24976: LD_VAR 0 6
24980: PUSH
24981: EMPTY
24982: LIST
24983: ST_TO_ADDR
// for i = 1 to pos - 1 do
24984: LD_ADDR_VAR 0 5
24988: PUSH
24989: DOUBLE
24990: LD_INT 1
24992: DEC
24993: ST_TO_ADDR
24994: LD_VAR 0 2
24998: PUSH
24999: LD_INT 1
25001: MINUS
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25049
// begin tmp := tmp [ pos [ i ] ] ;
25006: LD_ADDR_VAR 0 6
25010: PUSH
25011: LD_VAR 0 6
25015: PUSH
25016: LD_VAR 0 2
25020: PUSH
25021: LD_VAR 0 5
25025: ARRAY
25026: ARRAY
25027: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25028: LD_ADDR_VAR 0 7
25032: PUSH
25033: LD_VAR 0 7
25037: PUSH
25038: LD_VAR 0 6
25042: PUSH
25043: EMPTY
25044: LIST
25045: ADD
25046: ST_TO_ADDR
// end ;
25047: GO 25003
25049: POP
25050: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25051: LD_ADDR_VAR 0 6
25055: PUSH
25056: LD_VAR 0 6
25060: PPUSH
25061: LD_VAR 0 2
25065: PUSH
25066: LD_VAR 0 2
25070: ARRAY
25071: PPUSH
25072: LD_VAR 0 3
25076: PPUSH
25077: CALL_OW 1
25081: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25082: LD_ADDR_VAR 0 7
25086: PUSH
25087: LD_VAR 0 7
25091: PPUSH
25092: LD_VAR 0 7
25096: PPUSH
25097: LD_VAR 0 6
25101: PPUSH
25102: CALL_OW 1
25106: ST_TO_ADDR
// for i = s_arr downto 2 do
25107: LD_ADDR_VAR 0 5
25111: PUSH
25112: DOUBLE
25113: LD_VAR 0 7
25117: INC
25118: ST_TO_ADDR
25119: LD_INT 2
25121: PUSH
25122: FOR_DOWNTO
25123: IFFALSE 25207
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25125: LD_ADDR_VAR 0 6
25129: PUSH
25130: LD_VAR 0 7
25134: PUSH
25135: LD_VAR 0 5
25139: PUSH
25140: LD_INT 1
25142: MINUS
25143: ARRAY
25144: PPUSH
25145: LD_VAR 0 2
25149: PUSH
25150: LD_VAR 0 5
25154: PUSH
25155: LD_INT 1
25157: MINUS
25158: ARRAY
25159: PPUSH
25160: LD_VAR 0 7
25164: PUSH
25165: LD_VAR 0 5
25169: ARRAY
25170: PPUSH
25171: CALL_OW 1
25175: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25176: LD_ADDR_VAR 0 7
25180: PUSH
25181: LD_VAR 0 7
25185: PPUSH
25186: LD_VAR 0 5
25190: PUSH
25191: LD_INT 1
25193: MINUS
25194: PPUSH
25195: LD_VAR 0 6
25199: PPUSH
25200: CALL_OW 1
25204: ST_TO_ADDR
// end ;
25205: GO 25122
25207: POP
25208: POP
// result := s_arr [ 1 ] ;
25209: LD_ADDR_VAR 0 4
25213: PUSH
25214: LD_VAR 0 7
25218: PUSH
25219: LD_INT 1
25221: ARRAY
25222: ST_TO_ADDR
// end ; end ;
25223: LD_VAR 0 4
25227: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25228: LD_INT 0
25230: PPUSH
25231: PPUSH
// if not list then
25232: LD_VAR 0 1
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25332
// i := list [ pos1 ] ;
25241: LD_ADDR_VAR 0 5
25245: PUSH
25246: LD_VAR 0 1
25250: PUSH
25251: LD_VAR 0 2
25255: ARRAY
25256: ST_TO_ADDR
// if not i then
25257: LD_VAR 0 5
25261: NOT
25262: IFFALSE 25266
// exit ;
25264: GO 25332
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25266: LD_ADDR_VAR 0 1
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_VAR 0 2
25280: PPUSH
25281: LD_VAR 0 1
25285: PUSH
25286: LD_VAR 0 3
25290: ARRAY
25291: PPUSH
25292: CALL_OW 1
25296: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_VAR 0 1
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: LD_VAR 0 5
25316: PPUSH
25317: CALL_OW 1
25321: ST_TO_ADDR
// result := list ;
25322: LD_ADDR_VAR 0 4
25326: PUSH
25327: LD_VAR 0 1
25331: ST_TO_ADDR
// end ;
25332: LD_VAR 0 4
25336: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25337: LD_INT 0
25339: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25340: LD_ADDR_VAR 0 5
25344: PUSH
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL_OW 250
25354: PPUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 251
25364: PPUSH
25365: LD_VAR 0 2
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_VAR 0 4
25379: PPUSH
25380: CALL 25390 0 5
25384: ST_TO_ADDR
// end ;
25385: LD_VAR 0 5
25389: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
// if not list then
25396: LD_VAR 0 3
25400: NOT
25401: IFFALSE 25405
// exit ;
25403: GO 25793
// result := [ ] ;
25405: LD_ADDR_VAR 0 6
25409: PUSH
25410: EMPTY
25411: ST_TO_ADDR
// for i in list do
25412: LD_ADDR_VAR 0 7
25416: PUSH
25417: LD_VAR 0 3
25421: PUSH
25422: FOR_IN
25423: IFFALSE 25625
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25425: LD_ADDR_VAR 0 9
25429: PUSH
25430: LD_VAR 0 7
25434: PPUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: LD_VAR 0 2
25444: PPUSH
25445: CALL_OW 297
25449: ST_TO_ADDR
// if not result then
25450: LD_VAR 0 6
25454: NOT
25455: IFFALSE 25481
// result := [ [ i , tmp ] ] else
25457: LD_ADDR_VAR 0 6
25461: PUSH
25462: LD_VAR 0 7
25466: PUSH
25467: LD_VAR 0 9
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: ST_TO_ADDR
25479: GO 25623
// begin if result [ result ] [ 2 ] < tmp then
25481: LD_VAR 0 6
25485: PUSH
25486: LD_VAR 0 6
25490: ARRAY
25491: PUSH
25492: LD_INT 2
25494: ARRAY
25495: PUSH
25496: LD_VAR 0 9
25500: LESS
25501: IFFALSE 25543
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25503: LD_ADDR_VAR 0 6
25507: PUSH
25508: LD_VAR 0 6
25512: PPUSH
25513: LD_VAR 0 6
25517: PUSH
25518: LD_INT 1
25520: PLUS
25521: PPUSH
25522: LD_VAR 0 7
25526: PUSH
25527: LD_VAR 0 9
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 2
25540: ST_TO_ADDR
25541: GO 25623
// for j = 1 to result do
25543: LD_ADDR_VAR 0 8
25547: PUSH
25548: DOUBLE
25549: LD_INT 1
25551: DEC
25552: ST_TO_ADDR
25553: LD_VAR 0 6
25557: PUSH
25558: FOR_TO
25559: IFFALSE 25621
// begin if tmp < result [ j ] [ 2 ] then
25561: LD_VAR 0 9
25565: PUSH
25566: LD_VAR 0 6
25570: PUSH
25571: LD_VAR 0 8
25575: ARRAY
25576: PUSH
25577: LD_INT 2
25579: ARRAY
25580: LESS
25581: IFFALSE 25619
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25583: LD_ADDR_VAR 0 6
25587: PUSH
25588: LD_VAR 0 6
25592: PPUSH
25593: LD_VAR 0 8
25597: PPUSH
25598: LD_VAR 0 7
25602: PUSH
25603: LD_VAR 0 9
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PPUSH
25612: CALL_OW 2
25616: ST_TO_ADDR
// break ;
25617: GO 25621
// end ; end ;
25619: GO 25558
25621: POP
25622: POP
// end ; end ;
25623: GO 25422
25625: POP
25626: POP
// if result and not asc then
25627: LD_VAR 0 6
25631: PUSH
25632: LD_VAR 0 4
25636: NOT
25637: AND
25638: IFFALSE 25713
// begin tmp := result ;
25640: LD_ADDR_VAR 0 9
25644: PUSH
25645: LD_VAR 0 6
25649: ST_TO_ADDR
// for i = tmp downto 1 do
25650: LD_ADDR_VAR 0 7
25654: PUSH
25655: DOUBLE
25656: LD_VAR 0 9
25660: INC
25661: ST_TO_ADDR
25662: LD_INT 1
25664: PUSH
25665: FOR_DOWNTO
25666: IFFALSE 25711
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25668: LD_ADDR_VAR 0 6
25672: PUSH
25673: LD_VAR 0 6
25677: PPUSH
25678: LD_VAR 0 9
25682: PUSH
25683: LD_VAR 0 7
25687: MINUS
25688: PUSH
25689: LD_INT 1
25691: PLUS
25692: PPUSH
25693: LD_VAR 0 9
25697: PUSH
25698: LD_VAR 0 7
25702: ARRAY
25703: PPUSH
25704: CALL_OW 1
25708: ST_TO_ADDR
25709: GO 25665
25711: POP
25712: POP
// end ; tmp := [ ] ;
25713: LD_ADDR_VAR 0 9
25717: PUSH
25718: EMPTY
25719: ST_TO_ADDR
// if mode then
25720: LD_VAR 0 5
25724: IFFALSE 25793
// begin for i = 1 to result do
25726: LD_ADDR_VAR 0 7
25730: PUSH
25731: DOUBLE
25732: LD_INT 1
25734: DEC
25735: ST_TO_ADDR
25736: LD_VAR 0 6
25740: PUSH
25741: FOR_TO
25742: IFFALSE 25781
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25744: LD_ADDR_VAR 0 9
25748: PUSH
25749: LD_VAR 0 9
25753: PPUSH
25754: LD_VAR 0 7
25758: PPUSH
25759: LD_VAR 0 6
25763: PUSH
25764: LD_VAR 0 7
25768: ARRAY
25769: PUSH
25770: LD_INT 1
25772: ARRAY
25773: PPUSH
25774: CALL_OW 1
25778: ST_TO_ADDR
25779: GO 25741
25781: POP
25782: POP
// result := tmp ;
25783: LD_ADDR_VAR 0 6
25787: PUSH
25788: LD_VAR 0 9
25792: ST_TO_ADDR
// end ; end ;
25793: LD_VAR 0 6
25797: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25798: LD_INT 0
25800: PPUSH
25801: PPUSH
25802: PPUSH
25803: PPUSH
25804: PPUSH
25805: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25806: LD_ADDR_VAR 0 5
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// if not x or not y then
25828: LD_VAR 0 2
25832: NOT
25833: PUSH
25834: LD_VAR 0 3
25838: NOT
25839: OR
25840: IFFALSE 25844
// exit ;
25842: GO 27496
// if not range then
25844: LD_VAR 0 4
25848: NOT
25849: IFFALSE 25859
// range := 10 ;
25851: LD_ADDR_VAR 0 4
25855: PUSH
25856: LD_INT 10
25858: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25859: LD_ADDR_VAR 0 8
25863: PUSH
25864: LD_INT 81
25866: PUSH
25867: LD_VAR 0 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 92
25878: PUSH
25879: LD_VAR 0 2
25883: PUSH
25884: LD_VAR 0 3
25888: PUSH
25889: LD_VAR 0 4
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 21
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 8
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 27496
// for i in tmp do
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_VAR 0 8
25945: PUSH
25946: FOR_IN
25947: IFFALSE 27471
// begin points := [ 0 , 0 , 0 ] ;
25949: LD_ADDR_VAR 0 9
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
// bpoints := 1 ;
25968: LD_ADDR_VAR 0 10
25972: PUSH
25973: LD_INT 1
25975: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25976: LD_VAR 0 6
25980: PPUSH
25981: CALL_OW 247
25985: PUSH
25986: LD_INT 1
25988: DOUBLE
25989: EQUAL
25990: IFTRUE 25994
25992: GO 26572
25994: POP
// begin if GetClass ( i ) = 1 then
25995: LD_VAR 0 6
25999: PPUSH
26000: CALL_OW 257
26004: PUSH
26005: LD_INT 1
26007: EQUAL
26008: IFFALSE 26029
// points := [ 10 , 5 , 3 ] ;
26010: LD_ADDR_VAR 0 9
26014: PUSH
26015: LD_INT 10
26017: PUSH
26018: LD_INT 5
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: LIST
26028: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26029: LD_VAR 0 6
26033: PPUSH
26034: CALL_OW 257
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: LD_INT 4
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: LIST
26052: IN
26053: IFFALSE 26074
// points := [ 3 , 2 , 1 ] ;
26055: LD_ADDR_VAR 0 9
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26074: LD_VAR 0 6
26078: PPUSH
26079: CALL_OW 257
26083: PUSH
26084: LD_INT 5
26086: EQUAL
26087: IFFALSE 26108
// points := [ 130 , 5 , 2 ] ;
26089: LD_ADDR_VAR 0 9
26093: PUSH
26094: LD_INT 130
26096: PUSH
26097: LD_INT 5
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26108: LD_VAR 0 6
26112: PPUSH
26113: CALL_OW 257
26117: PUSH
26118: LD_INT 8
26120: EQUAL
26121: IFFALSE 26142
// points := [ 35 , 35 , 30 ] ;
26123: LD_ADDR_VAR 0 9
26127: PUSH
26128: LD_INT 35
26130: PUSH
26131: LD_INT 35
26133: PUSH
26134: LD_INT 30
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26142: LD_VAR 0 6
26146: PPUSH
26147: CALL_OW 257
26151: PUSH
26152: LD_INT 9
26154: EQUAL
26155: IFFALSE 26176
// points := [ 20 , 55 , 40 ] ;
26157: LD_ADDR_VAR 0 9
26161: PUSH
26162: LD_INT 20
26164: PUSH
26165: LD_INT 55
26167: PUSH
26168: LD_INT 40
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: LIST
26175: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26176: LD_VAR 0 6
26180: PPUSH
26181: CALL_OW 257
26185: PUSH
26186: LD_INT 12
26188: PUSH
26189: LD_INT 16
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: IN
26196: IFFALSE 26217
// points := [ 5 , 3 , 2 ] ;
26198: LD_ADDR_VAR 0 9
26202: PUSH
26203: LD_INT 5
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26217: LD_VAR 0 6
26221: PPUSH
26222: CALL_OW 257
26226: PUSH
26227: LD_INT 17
26229: EQUAL
26230: IFFALSE 26251
// points := [ 100 , 50 , 75 ] ;
26232: LD_ADDR_VAR 0 9
26236: PUSH
26237: LD_INT 100
26239: PUSH
26240: LD_INT 50
26242: PUSH
26243: LD_INT 75
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26251: LD_VAR 0 6
26255: PPUSH
26256: CALL_OW 257
26260: PUSH
26261: LD_INT 15
26263: EQUAL
26264: IFFALSE 26285
// points := [ 10 , 5 , 3 ] ;
26266: LD_ADDR_VAR 0 9
26270: PUSH
26271: LD_INT 10
26273: PUSH
26274: LD_INT 5
26276: PUSH
26277: LD_INT 3
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26285: LD_VAR 0 6
26289: PPUSH
26290: CALL_OW 257
26294: PUSH
26295: LD_INT 14
26297: EQUAL
26298: IFFALSE 26319
// points := [ 10 , 0 , 0 ] ;
26300: LD_ADDR_VAR 0 9
26304: PUSH
26305: LD_INT 10
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26319: LD_VAR 0 6
26323: PPUSH
26324: CALL_OW 257
26328: PUSH
26329: LD_INT 11
26331: EQUAL
26332: IFFALSE 26353
// points := [ 30 , 10 , 5 ] ;
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: LD_INT 30
26341: PUSH
26342: LD_INT 10
26344: PUSH
26345: LD_INT 5
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_INT 5
26360: PPUSH
26361: CALL_OW 321
26365: PUSH
26366: LD_INT 2
26368: EQUAL
26369: IFFALSE 26386
// bpoints := bpoints * 1.8 ;
26371: LD_ADDR_VAR 0 10
26375: PUSH
26376: LD_VAR 0 10
26380: PUSH
26381: LD_REAL  1.80000000000000E+0000
26384: MUL
26385: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26386: LD_VAR 0 6
26390: PPUSH
26391: CALL_OW 257
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: LD_INT 3
26404: PUSH
26405: LD_INT 4
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: IN
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: LD_INT 51
26422: PPUSH
26423: CALL_OW 321
26427: PUSH
26428: LD_INT 2
26430: EQUAL
26431: AND
26432: IFFALSE 26449
// bpoints := bpoints * 1.2 ;
26434: LD_ADDR_VAR 0 10
26438: PUSH
26439: LD_VAR 0 10
26443: PUSH
26444: LD_REAL  1.20000000000000E+0000
26447: MUL
26448: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26449: LD_VAR 0 6
26453: PPUSH
26454: CALL_OW 257
26458: PUSH
26459: LD_INT 5
26461: PUSH
26462: LD_INT 7
26464: PUSH
26465: LD_INT 9
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: IN
26473: PUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: LD_INT 52
26481: PPUSH
26482: CALL_OW 321
26486: PUSH
26487: LD_INT 2
26489: EQUAL
26490: AND
26491: IFFALSE 26508
// bpoints := bpoints * 1.5 ;
26493: LD_ADDR_VAR 0 10
26497: PUSH
26498: LD_VAR 0 10
26502: PUSH
26503: LD_REAL  1.50000000000000E+0000
26506: MUL
26507: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26508: LD_VAR 0 1
26512: PPUSH
26513: LD_INT 66
26515: PPUSH
26516: CALL_OW 321
26520: PUSH
26521: LD_INT 2
26523: EQUAL
26524: IFFALSE 26541
// bpoints := bpoints * 1.1 ;
26526: LD_ADDR_VAR 0 10
26530: PUSH
26531: LD_VAR 0 10
26535: PUSH
26536: LD_REAL  1.10000000000000E+0000
26539: MUL
26540: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26541: LD_ADDR_VAR 0 10
26545: PUSH
26546: LD_VAR 0 10
26550: PUSH
26551: LD_VAR 0 6
26555: PPUSH
26556: LD_INT 1
26558: PPUSH
26559: CALL_OW 259
26563: PUSH
26564: LD_REAL  1.15000000000000E+0000
26567: MUL
26568: MUL
26569: ST_TO_ADDR
// end ; unit_vehicle :
26570: GO 27400
26572: LD_INT 2
26574: DOUBLE
26575: EQUAL
26576: IFTRUE 26580
26578: GO 27388
26580: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26581: LD_VAR 0 6
26585: PPUSH
26586: CALL_OW 264
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 42
26596: PUSH
26597: LD_INT 24
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: IN
26605: IFFALSE 26626
// points := [ 25 , 5 , 3 ] ;
26607: LD_ADDR_VAR 0 9
26611: PUSH
26612: LD_INT 25
26614: PUSH
26615: LD_INT 5
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26626: LD_VAR 0 6
26630: PPUSH
26631: CALL_OW 264
26635: PUSH
26636: LD_INT 4
26638: PUSH
26639: LD_INT 43
26641: PUSH
26642: LD_INT 25
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: IN
26650: IFFALSE 26671
// points := [ 40 , 15 , 5 ] ;
26652: LD_ADDR_VAR 0 9
26656: PUSH
26657: LD_INT 40
26659: PUSH
26660: LD_INT 15
26662: PUSH
26663: LD_INT 5
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26671: LD_VAR 0 6
26675: PPUSH
26676: CALL_OW 264
26680: PUSH
26681: LD_INT 3
26683: PUSH
26684: LD_INT 23
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: IN
26691: IFFALSE 26712
// points := [ 7 , 25 , 8 ] ;
26693: LD_ADDR_VAR 0 9
26697: PUSH
26698: LD_INT 7
26700: PUSH
26701: LD_INT 25
26703: PUSH
26704: LD_INT 8
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26712: LD_VAR 0 6
26716: PPUSH
26717: CALL_OW 264
26721: PUSH
26722: LD_INT 5
26724: PUSH
26725: LD_INT 27
26727: PUSH
26728: LD_INT 44
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: IN
26736: IFFALSE 26757
// points := [ 14 , 50 , 16 ] ;
26738: LD_ADDR_VAR 0 9
26742: PUSH
26743: LD_INT 14
26745: PUSH
26746: LD_INT 50
26748: PUSH
26749: LD_INT 16
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26757: LD_VAR 0 6
26761: PPUSH
26762: CALL_OW 264
26766: PUSH
26767: LD_INT 6
26769: PUSH
26770: LD_INT 46
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: IN
26777: IFFALSE 26798
// points := [ 32 , 120 , 70 ] ;
26779: LD_ADDR_VAR 0 9
26783: PUSH
26784: LD_INT 32
26786: PUSH
26787: LD_INT 120
26789: PUSH
26790: LD_INT 70
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26798: LD_VAR 0 6
26802: PPUSH
26803: CALL_OW 264
26807: PUSH
26808: LD_INT 7
26810: PUSH
26811: LD_INT 28
26813: PUSH
26814: LD_INT 45
26816: PUSH
26817: LD_EXP 82
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: IN
26828: IFFALSE 26849
// points := [ 35 , 20 , 45 ] ;
26830: LD_ADDR_VAR 0 9
26834: PUSH
26835: LD_INT 35
26837: PUSH
26838: LD_INT 20
26840: PUSH
26841: LD_INT 45
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26849: LD_VAR 0 6
26853: PPUSH
26854: CALL_OW 264
26858: PUSH
26859: LD_INT 47
26861: PUSH
26862: EMPTY
26863: LIST
26864: IN
26865: IFFALSE 26886
// points := [ 67 , 45 , 75 ] ;
26867: LD_ADDR_VAR 0 9
26871: PUSH
26872: LD_INT 67
26874: PUSH
26875: LD_INT 45
26877: PUSH
26878: LD_INT 75
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26886: LD_VAR 0 6
26890: PPUSH
26891: CALL_OW 264
26895: PUSH
26896: LD_INT 26
26898: PUSH
26899: EMPTY
26900: LIST
26901: IN
26902: IFFALSE 26923
// points := [ 120 , 30 , 80 ] ;
26904: LD_ADDR_VAR 0 9
26908: PUSH
26909: LD_INT 120
26911: PUSH
26912: LD_INT 30
26914: PUSH
26915: LD_INT 80
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26923: LD_VAR 0 6
26927: PPUSH
26928: CALL_OW 264
26932: PUSH
26933: LD_INT 22
26935: PUSH
26936: EMPTY
26937: LIST
26938: IN
26939: IFFALSE 26960
// points := [ 40 , 1 , 1 ] ;
26941: LD_ADDR_VAR 0 9
26945: PUSH
26946: LD_INT 40
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26960: LD_VAR 0 6
26964: PPUSH
26965: CALL_OW 264
26969: PUSH
26970: LD_INT 29
26972: PUSH
26973: EMPTY
26974: LIST
26975: IN
26976: IFFALSE 26997
// points := [ 70 , 200 , 400 ] ;
26978: LD_ADDR_VAR 0 9
26982: PUSH
26983: LD_INT 70
26985: PUSH
26986: LD_INT 200
26988: PUSH
26989: LD_INT 400
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26997: LD_VAR 0 6
27001: PPUSH
27002: CALL_OW 264
27006: PUSH
27007: LD_INT 14
27009: PUSH
27010: LD_INT 53
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: IN
27017: IFFALSE 27038
// points := [ 40 , 10 , 20 ] ;
27019: LD_ADDR_VAR 0 9
27023: PUSH
27024: LD_INT 40
27026: PUSH
27027: LD_INT 10
27029: PUSH
27030: LD_INT 20
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27038: LD_VAR 0 6
27042: PPUSH
27043: CALL_OW 264
27047: PUSH
27048: LD_INT 9
27050: PUSH
27051: EMPTY
27052: LIST
27053: IN
27054: IFFALSE 27075
// points := [ 5 , 70 , 20 ] ;
27056: LD_ADDR_VAR 0 9
27060: PUSH
27061: LD_INT 5
27063: PUSH
27064: LD_INT 70
27066: PUSH
27067: LD_INT 20
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27075: LD_VAR 0 6
27079: PPUSH
27080: CALL_OW 264
27084: PUSH
27085: LD_INT 10
27087: PUSH
27088: EMPTY
27089: LIST
27090: IN
27091: IFFALSE 27112
// points := [ 35 , 110 , 70 ] ;
27093: LD_ADDR_VAR 0 9
27097: PUSH
27098: LD_INT 35
27100: PUSH
27101: LD_INT 110
27103: PUSH
27104: LD_INT 70
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27112: LD_VAR 0 6
27116: PPUSH
27117: CALL_OW 265
27121: PUSH
27122: LD_INT 25
27124: EQUAL
27125: IFFALSE 27146
// points := [ 80 , 65 , 100 ] ;
27127: LD_ADDR_VAR 0 9
27131: PUSH
27132: LD_INT 80
27134: PUSH
27135: LD_INT 65
27137: PUSH
27138: LD_INT 100
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27146: LD_VAR 0 6
27150: PPUSH
27151: CALL_OW 263
27155: PUSH
27156: LD_INT 1
27158: EQUAL
27159: IFFALSE 27194
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27161: LD_ADDR_VAR 0 10
27165: PUSH
27166: LD_VAR 0 10
27170: PUSH
27171: LD_VAR 0 6
27175: PPUSH
27176: CALL_OW 311
27180: PPUSH
27181: LD_INT 3
27183: PPUSH
27184: CALL_OW 259
27188: PUSH
27189: LD_INT 4
27191: MUL
27192: MUL
27193: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27194: LD_VAR 0 6
27198: PPUSH
27199: CALL_OW 263
27203: PUSH
27204: LD_INT 2
27206: EQUAL
27207: IFFALSE 27258
// begin j := IsControledBy ( i ) ;
27209: LD_ADDR_VAR 0 7
27213: PUSH
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 312
27223: ST_TO_ADDR
// if j then
27224: LD_VAR 0 7
27228: IFFALSE 27258
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27230: LD_ADDR_VAR 0 10
27234: PUSH
27235: LD_VAR 0 10
27239: PUSH
27240: LD_VAR 0 7
27244: PPUSH
27245: LD_INT 3
27247: PPUSH
27248: CALL_OW 259
27252: PUSH
27253: LD_INT 3
27255: MUL
27256: MUL
27257: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27258: LD_VAR 0 6
27262: PPUSH
27263: CALL_OW 264
27267: PUSH
27268: LD_INT 5
27270: PUSH
27271: LD_INT 6
27273: PUSH
27274: LD_INT 46
27276: PUSH
27277: LD_INT 44
27279: PUSH
27280: LD_INT 47
27282: PUSH
27283: LD_INT 45
27285: PUSH
27286: LD_INT 28
27288: PUSH
27289: LD_INT 7
27291: PUSH
27292: LD_INT 27
27294: PUSH
27295: LD_INT 29
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: IN
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: LD_INT 52
27318: PPUSH
27319: CALL_OW 321
27323: PUSH
27324: LD_INT 2
27326: EQUAL
27327: AND
27328: IFFALSE 27345
// bpoints := bpoints * 1.2 ;
27330: LD_ADDR_VAR 0 10
27334: PUSH
27335: LD_VAR 0 10
27339: PUSH
27340: LD_REAL  1.20000000000000E+0000
27343: MUL
27344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27345: LD_VAR 0 6
27349: PPUSH
27350: CALL_OW 264
27354: PUSH
27355: LD_INT 6
27357: PUSH
27358: LD_INT 46
27360: PUSH
27361: LD_INT 47
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: IN
27369: IFFALSE 27386
// bpoints := bpoints * 1.2 ;
27371: LD_ADDR_VAR 0 10
27375: PUSH
27376: LD_VAR 0 10
27380: PUSH
27381: LD_REAL  1.20000000000000E+0000
27384: MUL
27385: ST_TO_ADDR
// end ; unit_building :
27386: GO 27400
27388: LD_INT 3
27390: DOUBLE
27391: EQUAL
27392: IFTRUE 27396
27394: GO 27399
27396: POP
// ; end ;
27397: GO 27400
27399: POP
// for j = 1 to 3 do
27400: LD_ADDR_VAR 0 7
27404: PUSH
27405: DOUBLE
27406: LD_INT 1
27408: DEC
27409: ST_TO_ADDR
27410: LD_INT 3
27412: PUSH
27413: FOR_TO
27414: IFFALSE 27467
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27416: LD_ADDR_VAR 0 5
27420: PUSH
27421: LD_VAR 0 5
27425: PPUSH
27426: LD_VAR 0 7
27430: PPUSH
27431: LD_VAR 0 5
27435: PUSH
27436: LD_VAR 0 7
27440: ARRAY
27441: PUSH
27442: LD_VAR 0 9
27446: PUSH
27447: LD_VAR 0 7
27451: ARRAY
27452: PUSH
27453: LD_VAR 0 10
27457: MUL
27458: PLUS
27459: PPUSH
27460: CALL_OW 1
27464: ST_TO_ADDR
27465: GO 27413
27467: POP
27468: POP
// end ;
27469: GO 25946
27471: POP
27472: POP
// result := Replace ( result , 4 , tmp ) ;
27473: LD_ADDR_VAR 0 5
27477: PUSH
27478: LD_VAR 0 5
27482: PPUSH
27483: LD_INT 4
27485: PPUSH
27486: LD_VAR 0 8
27490: PPUSH
27491: CALL_OW 1
27495: ST_TO_ADDR
// end ;
27496: LD_VAR 0 5
27500: RET
// export function DangerAtRange ( unit , range ) ; begin
27501: LD_INT 0
27503: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27504: LD_ADDR_VAR 0 3
27508: PUSH
27509: LD_VAR 0 1
27513: PPUSH
27514: CALL_OW 255
27518: PPUSH
27519: LD_VAR 0 1
27523: PPUSH
27524: CALL_OW 250
27528: PPUSH
27529: LD_VAR 0 1
27533: PPUSH
27534: CALL_OW 251
27538: PPUSH
27539: LD_VAR 0 2
27543: PPUSH
27544: CALL 25798 0 4
27548: ST_TO_ADDR
// end ;
27549: LD_VAR 0 3
27553: RET
// export function DangerInArea ( side , area ) ; begin
27554: LD_INT 0
27556: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_INT 81
27569: PUSH
27570: LD_VAR 0 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 70
27583: ST_TO_ADDR
// end ;
27584: LD_VAR 0 3
27588: RET
// export function IsExtension ( b ) ; begin
27589: LD_INT 0
27591: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27592: LD_ADDR_VAR 0 2
27596: PUSH
27597: LD_VAR 0 1
27601: PUSH
27602: LD_INT 23
27604: PUSH
27605: LD_INT 20
27607: PUSH
27608: LD_INT 22
27610: PUSH
27611: LD_INT 17
27613: PUSH
27614: LD_INT 24
27616: PUSH
27617: LD_INT 21
27619: PUSH
27620: LD_INT 19
27622: PUSH
27623: LD_INT 16
27625: PUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 18
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: IN
27644: ST_TO_ADDR
// end ;
27645: LD_VAR 0 2
27649: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
27654: PPUSH
// result := [ ] ;
27655: LD_ADDR_VAR 0 4
27659: PUSH
27660: EMPTY
27661: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27662: LD_ADDR_VAR 0 5
27666: PUSH
27667: LD_VAR 0 2
27671: PPUSH
27672: LD_INT 21
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PPUSH
27682: CALL_OW 70
27686: ST_TO_ADDR
// if not tmp then
27687: LD_VAR 0 5
27691: NOT
27692: IFFALSE 27696
// exit ;
27694: GO 27760
// if checkLink then
27696: LD_VAR 0 3
27700: IFFALSE 27750
// begin for i in tmp do
27702: LD_ADDR_VAR 0 6
27706: PUSH
27707: LD_VAR 0 5
27711: PUSH
27712: FOR_IN
27713: IFFALSE 27748
// if GetBase ( i ) <> base then
27715: LD_VAR 0 6
27719: PPUSH
27720: CALL_OW 274
27724: PUSH
27725: LD_VAR 0 1
27729: NONEQUAL
27730: IFFALSE 27746
// ComLinkToBase ( base , i ) ;
27732: LD_VAR 0 1
27736: PPUSH
27737: LD_VAR 0 6
27741: PPUSH
27742: CALL_OW 169
27746: GO 27712
27748: POP
27749: POP
// end ; result := tmp ;
27750: LD_ADDR_VAR 0 4
27754: PUSH
27755: LD_VAR 0 5
27759: ST_TO_ADDR
// end ;
27760: LD_VAR 0 4
27764: RET
// export function ComComplete ( units , b ) ; var i ; begin
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
// if not units then
27769: LD_VAR 0 1
27773: NOT
27774: IFFALSE 27778
// exit ;
27776: GO 27868
// for i in units do
27778: LD_ADDR_VAR 0 4
27782: PUSH
27783: LD_VAR 0 1
27787: PUSH
27788: FOR_IN
27789: IFFALSE 27866
// if BuildingStatus ( b ) = bs_build then
27791: LD_VAR 0 2
27795: PPUSH
27796: CALL_OW 461
27800: PUSH
27801: LD_INT 1
27803: EQUAL
27804: IFFALSE 27864
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27806: LD_VAR 0 4
27810: PPUSH
27811: LD_STRING h
27813: PUSH
27814: LD_VAR 0 2
27818: PPUSH
27819: CALL_OW 250
27823: PUSH
27824: LD_VAR 0 2
27828: PPUSH
27829: CALL_OW 251
27833: PUSH
27834: LD_VAR 0 2
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: PPUSH
27860: CALL_OW 446
27864: GO 27788
27866: POP
27867: POP
// end ;
27868: LD_VAR 0 3
27872: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27873: LD_INT 0
27875: PPUSH
27876: PPUSH
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27881: LD_VAR 0 1
27885: NOT
27886: PUSH
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 263
27896: PUSH
27897: LD_INT 2
27899: NONEQUAL
27900: OR
27901: IFFALSE 27905
// exit ;
27903: GO 28221
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27905: LD_ADDR_VAR 0 6
27909: PUSH
27910: LD_INT 22
27912: PUSH
27913: LD_VAR 0 1
27917: PPUSH
27918: CALL_OW 255
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: LD_INT 36
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 34
27942: PUSH
27943: LD_INT 31
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PPUSH
27959: CALL_OW 69
27963: ST_TO_ADDR
// if not tmp then
27964: LD_VAR 0 6
27968: NOT
27969: IFFALSE 27973
// exit ;
27971: GO 28221
// result := [ ] ;
27973: LD_ADDR_VAR 0 2
27977: PUSH
27978: EMPTY
27979: ST_TO_ADDR
// for i in tmp do
27980: LD_ADDR_VAR 0 3
27984: PUSH
27985: LD_VAR 0 6
27989: PUSH
27990: FOR_IN
27991: IFFALSE 28062
// begin t := UnitsInside ( i ) ;
27993: LD_ADDR_VAR 0 4
27997: PUSH
27998: LD_VAR 0 3
28002: PPUSH
28003: CALL_OW 313
28007: ST_TO_ADDR
// if t then
28008: LD_VAR 0 4
28012: IFFALSE 28060
// for j in t do
28014: LD_ADDR_VAR 0 7
28018: PUSH
28019: LD_VAR 0 4
28023: PUSH
28024: FOR_IN
28025: IFFALSE 28058
// result := Replace ( result , result + 1 , j ) ;
28027: LD_ADDR_VAR 0 2
28031: PUSH
28032: LD_VAR 0 2
28036: PPUSH
28037: LD_VAR 0 2
28041: PUSH
28042: LD_INT 1
28044: PLUS
28045: PPUSH
28046: LD_VAR 0 7
28050: PPUSH
28051: CALL_OW 1
28055: ST_TO_ADDR
28056: GO 28024
28058: POP
28059: POP
// end ;
28060: GO 27990
28062: POP
28063: POP
// if not result then
28064: LD_VAR 0 2
28068: NOT
28069: IFFALSE 28073
// exit ;
28071: GO 28221
// mech := result [ 1 ] ;
28073: LD_ADDR_VAR 0 5
28077: PUSH
28078: LD_VAR 0 2
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: ST_TO_ADDR
// if result > 1 then
28087: LD_VAR 0 2
28091: PUSH
28092: LD_INT 1
28094: GREATER
28095: IFFALSE 28207
// begin for i = 2 to result do
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: DOUBLE
28103: LD_INT 2
28105: DEC
28106: ST_TO_ADDR
28107: LD_VAR 0 2
28111: PUSH
28112: FOR_TO
28113: IFFALSE 28205
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28115: LD_ADDR_VAR 0 4
28119: PUSH
28120: LD_VAR 0 2
28124: PUSH
28125: LD_VAR 0 3
28129: ARRAY
28130: PPUSH
28131: LD_INT 3
28133: PPUSH
28134: CALL_OW 259
28138: PUSH
28139: LD_VAR 0 2
28143: PUSH
28144: LD_VAR 0 3
28148: ARRAY
28149: PPUSH
28150: CALL_OW 432
28154: MINUS
28155: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28156: LD_VAR 0 4
28160: PUSH
28161: LD_VAR 0 5
28165: PPUSH
28166: LD_INT 3
28168: PPUSH
28169: CALL_OW 259
28173: PUSH
28174: LD_VAR 0 5
28178: PPUSH
28179: CALL_OW 432
28183: MINUS
28184: GREATEREQUAL
28185: IFFALSE 28203
// mech := result [ i ] ;
28187: LD_ADDR_VAR 0 5
28191: PUSH
28192: LD_VAR 0 2
28196: PUSH
28197: LD_VAR 0 3
28201: ARRAY
28202: ST_TO_ADDR
// end ;
28203: GO 28112
28205: POP
28206: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28207: LD_VAR 0 1
28211: PPUSH
28212: LD_VAR 0 5
28216: PPUSH
28217: CALL_OW 135
// end ;
28221: LD_VAR 0 2
28225: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28226: LD_INT 0
28228: PPUSH
28229: PPUSH
28230: PPUSH
28231: PPUSH
28232: PPUSH
28233: PPUSH
28234: PPUSH
28235: PPUSH
28236: PPUSH
28237: PPUSH
28238: PPUSH
28239: PPUSH
28240: PPUSH
// result := [ ] ;
28241: LD_ADDR_VAR 0 7
28245: PUSH
28246: EMPTY
28247: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 266
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: IN
28268: NOT
28269: IFFALSE 28273
// exit ;
28271: GO 29907
// if name then
28273: LD_VAR 0 3
28277: IFFALSE 28293
// SetBName ( base_dep , name ) ;
28279: LD_VAR 0 1
28283: PPUSH
28284: LD_VAR 0 3
28288: PPUSH
28289: CALL_OW 500
// base := GetBase ( base_dep ) ;
28293: LD_ADDR_VAR 0 15
28297: PUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 274
28307: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28308: LD_ADDR_VAR 0 16
28312: PUSH
28313: LD_VAR 0 1
28317: PPUSH
28318: CALL_OW 255
28322: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28323: LD_ADDR_VAR 0 17
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 248
28337: ST_TO_ADDR
// if sources then
28338: LD_VAR 0 5
28342: IFFALSE 28389
// for i = 1 to 3 do
28344: LD_ADDR_VAR 0 8
28348: PUSH
28349: DOUBLE
28350: LD_INT 1
28352: DEC
28353: ST_TO_ADDR
28354: LD_INT 3
28356: PUSH
28357: FOR_TO
28358: IFFALSE 28387
// AddResourceType ( base , i , sources [ i ] ) ;
28360: LD_VAR 0 15
28364: PPUSH
28365: LD_VAR 0 8
28369: PPUSH
28370: LD_VAR 0 5
28374: PUSH
28375: LD_VAR 0 8
28379: ARRAY
28380: PPUSH
28381: CALL_OW 276
28385: GO 28357
28387: POP
28388: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28389: LD_ADDR_VAR 0 18
28393: PUSH
28394: LD_VAR 0 15
28398: PPUSH
28399: LD_VAR 0 2
28403: PPUSH
28404: LD_INT 1
28406: PPUSH
28407: CALL 27650 0 3
28411: ST_TO_ADDR
// InitHc ;
28412: CALL_OW 19
// InitUc ;
28416: CALL_OW 18
// uc_side := side ;
28420: LD_ADDR_OWVAR 20
28424: PUSH
28425: LD_VAR 0 16
28429: ST_TO_ADDR
// uc_nation := nation ;
28430: LD_ADDR_OWVAR 21
28434: PUSH
28435: LD_VAR 0 17
28439: ST_TO_ADDR
// if buildings then
28440: LD_VAR 0 18
28444: IFFALSE 29766
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28446: LD_ADDR_VAR 0 19
28450: PUSH
28451: LD_VAR 0 18
28455: PPUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 30
28461: PUSH
28462: LD_INT 29
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 30
28471: PUSH
28472: LD_INT 30
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 72
28488: ST_TO_ADDR
// if tmp then
28489: LD_VAR 0 19
28493: IFFALSE 28541
// for i in tmp do
28495: LD_ADDR_VAR 0 8
28499: PUSH
28500: LD_VAR 0 19
28504: PUSH
28505: FOR_IN
28506: IFFALSE 28539
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28508: LD_VAR 0 8
28512: PPUSH
28513: CALL_OW 250
28517: PPUSH
28518: LD_VAR 0 8
28522: PPUSH
28523: CALL_OW 251
28527: PPUSH
28528: LD_VAR 0 16
28532: PPUSH
28533: CALL_OW 441
28537: GO 28505
28539: POP
28540: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28541: LD_VAR 0 18
28545: PPUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 30
28551: PUSH
28552: LD_INT 32
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 30
28561: PUSH
28562: LD_INT 33
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 72
28578: IFFALSE 28666
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28580: LD_ADDR_VAR 0 8
28584: PUSH
28585: LD_VAR 0 18
28589: PPUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 30
28595: PUSH
28596: LD_INT 32
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 30
28605: PUSH
28606: LD_INT 33
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 72
28622: PUSH
28623: FOR_IN
28624: IFFALSE 28664
// begin if not GetBWeapon ( i ) then
28626: LD_VAR 0 8
28630: PPUSH
28631: CALL_OW 269
28635: NOT
28636: IFFALSE 28662
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28638: LD_VAR 0 8
28642: PPUSH
28643: LD_VAR 0 8
28647: PPUSH
28648: LD_VAR 0 2
28652: PPUSH
28653: CALL 29912 0 2
28657: PPUSH
28658: CALL_OW 431
// end ;
28662: GO 28623
28664: POP
28665: POP
// end ; for i = 1 to personel do
28666: LD_ADDR_VAR 0 8
28670: PUSH
28671: DOUBLE
28672: LD_INT 1
28674: DEC
28675: ST_TO_ADDR
28676: LD_VAR 0 6
28680: PUSH
28681: FOR_TO
28682: IFFALSE 29746
// begin if i > 4 then
28684: LD_VAR 0 8
28688: PUSH
28689: LD_INT 4
28691: GREATER
28692: IFFALSE 28696
// break ;
28694: GO 29746
// case i of 1 :
28696: LD_VAR 0 8
28700: PUSH
28701: LD_INT 1
28703: DOUBLE
28704: EQUAL
28705: IFTRUE 28709
28707: GO 28789
28709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28710: LD_ADDR_VAR 0 12
28714: PUSH
28715: LD_VAR 0 18
28719: PPUSH
28720: LD_INT 22
28722: PUSH
28723: LD_VAR 0 16
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 58
28734: PUSH
28735: EMPTY
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 30
28743: PUSH
28744: LD_INT 32
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 30
28753: PUSH
28754: LD_INT 4
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 30
28763: PUSH
28764: LD_INT 5
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 72
28786: ST_TO_ADDR
28787: GO 29011
28789: LD_INT 2
28791: DOUBLE
28792: EQUAL
28793: IFTRUE 28797
28795: GO 28859
28797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28798: LD_ADDR_VAR 0 12
28802: PUSH
28803: LD_VAR 0 18
28807: PPUSH
28808: LD_INT 22
28810: PUSH
28811: LD_VAR 0 16
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: LD_INT 30
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 30
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 72
28856: ST_TO_ADDR
28857: GO 29011
28859: LD_INT 3
28861: DOUBLE
28862: EQUAL
28863: IFTRUE 28867
28865: GO 28929
28867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28868: LD_ADDR_VAR 0 12
28872: PUSH
28873: LD_VAR 0 18
28877: PPUSH
28878: LD_INT 22
28880: PUSH
28881: LD_VAR 0 16
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 30
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 30
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 72
28926: ST_TO_ADDR
28927: GO 29011
28929: LD_INT 4
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 29010
28937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28938: LD_ADDR_VAR 0 12
28942: PUSH
28943: LD_VAR 0 18
28947: PPUSH
28948: LD_INT 22
28950: PUSH
28951: LD_VAR 0 16
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: LD_INT 30
28965: PUSH
28966: LD_INT 6
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 30
28975: PUSH
28976: LD_INT 7
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: LD_INT 8
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 72
29007: ST_TO_ADDR
29008: GO 29011
29010: POP
// if i = 1 then
29011: LD_VAR 0 8
29015: PUSH
29016: LD_INT 1
29018: EQUAL
29019: IFFALSE 29130
// begin tmp := [ ] ;
29021: LD_ADDR_VAR 0 19
29025: PUSH
29026: EMPTY
29027: ST_TO_ADDR
// for j in f do
29028: LD_ADDR_VAR 0 9
29032: PUSH
29033: LD_VAR 0 12
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29112
// if GetBType ( j ) = b_bunker then
29041: LD_VAR 0 9
29045: PPUSH
29046: CALL_OW 266
29050: PUSH
29051: LD_INT 32
29053: EQUAL
29054: IFFALSE 29081
// tmp := Insert ( tmp , 1 , j ) else
29056: LD_ADDR_VAR 0 19
29060: PUSH
29061: LD_VAR 0 19
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: LD_VAR 0 9
29073: PPUSH
29074: CALL_OW 2
29078: ST_TO_ADDR
29079: GO 29110
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29081: LD_ADDR_VAR 0 19
29085: PUSH
29086: LD_VAR 0 19
29090: PPUSH
29091: LD_VAR 0 19
29095: PUSH
29096: LD_INT 1
29098: PLUS
29099: PPUSH
29100: LD_VAR 0 9
29104: PPUSH
29105: CALL_OW 2
29109: ST_TO_ADDR
29110: GO 29038
29112: POP
29113: POP
// if tmp then
29114: LD_VAR 0 19
29118: IFFALSE 29130
// f := tmp ;
29120: LD_ADDR_VAR 0 12
29124: PUSH
29125: LD_VAR 0 19
29129: ST_TO_ADDR
// end ; x := personel [ i ] ;
29130: LD_ADDR_VAR 0 13
29134: PUSH
29135: LD_VAR 0 6
29139: PUSH
29140: LD_VAR 0 8
29144: ARRAY
29145: ST_TO_ADDR
// if x = - 1 then
29146: LD_VAR 0 13
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: EQUAL
29155: IFFALSE 29364
// begin for j in f do
29157: LD_ADDR_VAR 0 9
29161: PUSH
29162: LD_VAR 0 12
29166: PUSH
29167: FOR_IN
29168: IFFALSE 29360
// repeat InitHc ;
29170: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29174: LD_VAR 0 9
29178: PPUSH
29179: CALL_OW 266
29183: PUSH
29184: LD_INT 5
29186: EQUAL
29187: IFFALSE 29257
// begin if UnitsInside ( j ) < 3 then
29189: LD_VAR 0 9
29193: PPUSH
29194: CALL_OW 313
29198: PUSH
29199: LD_INT 3
29201: LESS
29202: IFFALSE 29238
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29204: LD_INT 0
29206: PPUSH
29207: LD_INT 5
29209: PUSH
29210: LD_INT 8
29212: PUSH
29213: LD_INT 9
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: PUSH
29221: LD_VAR 0 17
29225: ARRAY
29226: PPUSH
29227: LD_VAR 0 4
29231: PPUSH
29232: CALL_OW 380
29236: GO 29255
// PrepareHuman ( false , i , skill ) ;
29238: LD_INT 0
29240: PPUSH
29241: LD_VAR 0 8
29245: PPUSH
29246: LD_VAR 0 4
29250: PPUSH
29251: CALL_OW 380
// end else
29255: GO 29274
// PrepareHuman ( false , i , skill ) ;
29257: LD_INT 0
29259: PPUSH
29260: LD_VAR 0 8
29264: PPUSH
29265: LD_VAR 0 4
29269: PPUSH
29270: CALL_OW 380
// un := CreateHuman ;
29274: LD_ADDR_VAR 0 14
29278: PUSH
29279: CALL_OW 44
29283: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29284: LD_ADDR_VAR 0 7
29288: PUSH
29289: LD_VAR 0 7
29293: PPUSH
29294: LD_INT 1
29296: PPUSH
29297: LD_VAR 0 14
29301: PPUSH
29302: CALL_OW 2
29306: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29307: LD_VAR 0 14
29311: PPUSH
29312: LD_VAR 0 9
29316: PPUSH
29317: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29321: LD_VAR 0 9
29325: PPUSH
29326: CALL_OW 313
29330: PUSH
29331: LD_INT 6
29333: EQUAL
29334: PUSH
29335: LD_VAR 0 9
29339: PPUSH
29340: CALL_OW 266
29344: PUSH
29345: LD_INT 32
29347: PUSH
29348: LD_INT 31
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: IN
29355: OR
29356: IFFALSE 29170
29358: GO 29167
29360: POP
29361: POP
// end else
29362: GO 29744
// for j = 1 to x do
29364: LD_ADDR_VAR 0 9
29368: PUSH
29369: DOUBLE
29370: LD_INT 1
29372: DEC
29373: ST_TO_ADDR
29374: LD_VAR 0 13
29378: PUSH
29379: FOR_TO
29380: IFFALSE 29742
// begin InitHc ;
29382: CALL_OW 19
// if not f then
29386: LD_VAR 0 12
29390: NOT
29391: IFFALSE 29480
// begin PrepareHuman ( false , i , skill ) ;
29393: LD_INT 0
29395: PPUSH
29396: LD_VAR 0 8
29400: PPUSH
29401: LD_VAR 0 4
29405: PPUSH
29406: CALL_OW 380
// un := CreateHuman ;
29410: LD_ADDR_VAR 0 14
29414: PUSH
29415: CALL_OW 44
29419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29420: LD_ADDR_VAR 0 7
29424: PUSH
29425: LD_VAR 0 7
29429: PPUSH
29430: LD_INT 1
29432: PPUSH
29433: LD_VAR 0 14
29437: PPUSH
29438: CALL_OW 2
29442: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29443: LD_VAR 0 14
29447: PPUSH
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 250
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 251
29467: PPUSH
29468: LD_INT 10
29470: PPUSH
29471: LD_INT 0
29473: PPUSH
29474: CALL_OW 50
// continue ;
29478: GO 29379
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29480: LD_VAR 0 12
29484: PUSH
29485: LD_INT 1
29487: ARRAY
29488: PPUSH
29489: CALL_OW 313
29493: PUSH
29494: LD_VAR 0 12
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: PPUSH
29503: CALL_OW 266
29507: PUSH
29508: LD_INT 32
29510: PUSH
29511: LD_INT 31
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: IN
29518: AND
29519: PUSH
29520: LD_VAR 0 12
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: CALL_OW 313
29533: PUSH
29534: LD_INT 6
29536: EQUAL
29537: OR
29538: IFFALSE 29558
// f := Delete ( f , 1 ) ;
29540: LD_ADDR_VAR 0 12
29544: PUSH
29545: LD_VAR 0 12
29549: PPUSH
29550: LD_INT 1
29552: PPUSH
29553: CALL_OW 3
29557: ST_TO_ADDR
// if not f then
29558: LD_VAR 0 12
29562: NOT
29563: IFFALSE 29581
// begin x := x + 2 ;
29565: LD_ADDR_VAR 0 13
29569: PUSH
29570: LD_VAR 0 13
29574: PUSH
29575: LD_INT 2
29577: PLUS
29578: ST_TO_ADDR
// continue ;
29579: GO 29379
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29581: LD_VAR 0 12
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: CALL_OW 266
29594: PUSH
29595: LD_INT 5
29597: EQUAL
29598: IFFALSE 29672
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29600: LD_VAR 0 12
29604: PUSH
29605: LD_INT 1
29607: ARRAY
29608: PPUSH
29609: CALL_OW 313
29613: PUSH
29614: LD_INT 3
29616: LESS
29617: IFFALSE 29653
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29619: LD_INT 0
29621: PPUSH
29622: LD_INT 5
29624: PUSH
29625: LD_INT 8
29627: PUSH
29628: LD_INT 9
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PUSH
29636: LD_VAR 0 17
29640: ARRAY
29641: PPUSH
29642: LD_VAR 0 4
29646: PPUSH
29647: CALL_OW 380
29651: GO 29670
// PrepareHuman ( false , i , skill ) ;
29653: LD_INT 0
29655: PPUSH
29656: LD_VAR 0 8
29660: PPUSH
29661: LD_VAR 0 4
29665: PPUSH
29666: CALL_OW 380
// end else
29670: GO 29689
// PrepareHuman ( false , i , skill ) ;
29672: LD_INT 0
29674: PPUSH
29675: LD_VAR 0 8
29679: PPUSH
29680: LD_VAR 0 4
29684: PPUSH
29685: CALL_OW 380
// un := CreateHuman ;
29689: LD_ADDR_VAR 0 14
29693: PUSH
29694: CALL_OW 44
29698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29699: LD_ADDR_VAR 0 7
29703: PUSH
29704: LD_VAR 0 7
29708: PPUSH
29709: LD_INT 1
29711: PPUSH
29712: LD_VAR 0 14
29716: PPUSH
29717: CALL_OW 2
29721: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29722: LD_VAR 0 14
29726: PPUSH
29727: LD_VAR 0 12
29731: PUSH
29732: LD_INT 1
29734: ARRAY
29735: PPUSH
29736: CALL_OW 52
// end ;
29740: GO 29379
29742: POP
29743: POP
// end ;
29744: GO 28681
29746: POP
29747: POP
// result := result ^ buildings ;
29748: LD_ADDR_VAR 0 7
29752: PUSH
29753: LD_VAR 0 7
29757: PUSH
29758: LD_VAR 0 18
29762: ADD
29763: ST_TO_ADDR
// end else
29764: GO 29907
// begin for i = 1 to personel do
29766: LD_ADDR_VAR 0 8
29770: PUSH
29771: DOUBLE
29772: LD_INT 1
29774: DEC
29775: ST_TO_ADDR
29776: LD_VAR 0 6
29780: PUSH
29781: FOR_TO
29782: IFFALSE 29905
// begin if i > 4 then
29784: LD_VAR 0 8
29788: PUSH
29789: LD_INT 4
29791: GREATER
29792: IFFALSE 29796
// break ;
29794: GO 29905
// x := personel [ i ] ;
29796: LD_ADDR_VAR 0 13
29800: PUSH
29801: LD_VAR 0 6
29805: PUSH
29806: LD_VAR 0 8
29810: ARRAY
29811: ST_TO_ADDR
// if x = - 1 then
29812: LD_VAR 0 13
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: EQUAL
29821: IFFALSE 29825
// continue ;
29823: GO 29781
// PrepareHuman ( false , i , skill ) ;
29825: LD_INT 0
29827: PPUSH
29828: LD_VAR 0 8
29832: PPUSH
29833: LD_VAR 0 4
29837: PPUSH
29838: CALL_OW 380
// un := CreateHuman ;
29842: LD_ADDR_VAR 0 14
29846: PUSH
29847: CALL_OW 44
29851: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29852: LD_VAR 0 14
29856: PPUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 250
29866: PPUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 251
29876: PPUSH
29877: LD_INT 10
29879: PPUSH
29880: LD_INT 0
29882: PPUSH
29883: CALL_OW 50
// result := result ^ un ;
29887: LD_ADDR_VAR 0 7
29891: PUSH
29892: LD_VAR 0 7
29896: PUSH
29897: LD_VAR 0 14
29901: ADD
29902: ST_TO_ADDR
// end ;
29903: GO 29781
29905: POP
29906: POP
// end ; end ;
29907: LD_VAR 0 7
29911: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29912: LD_INT 0
29914: PPUSH
29915: PPUSH
29916: PPUSH
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
// result := false ;
29930: LD_ADDR_VAR 0 3
29934: PUSH
29935: LD_INT 0
29937: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29938: LD_VAR 0 1
29942: NOT
29943: PUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL_OW 266
29953: PUSH
29954: LD_INT 32
29956: PUSH
29957: LD_INT 33
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: IN
29964: NOT
29965: OR
29966: IFFALSE 29970
// exit ;
29968: GO 31079
// nat := GetNation ( tower ) ;
29970: LD_ADDR_VAR 0 12
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 248
29984: ST_TO_ADDR
// side := GetSide ( tower ) ;
29985: LD_ADDR_VAR 0 16
29989: PUSH
29990: LD_VAR 0 1
29994: PPUSH
29995: CALL_OW 255
29999: ST_TO_ADDR
// x := GetX ( tower ) ;
30000: LD_ADDR_VAR 0 10
30004: PUSH
30005: LD_VAR 0 1
30009: PPUSH
30010: CALL_OW 250
30014: ST_TO_ADDR
// y := GetY ( tower ) ;
30015: LD_ADDR_VAR 0 11
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 251
30029: ST_TO_ADDR
// if not x or not y then
30030: LD_VAR 0 10
30034: NOT
30035: PUSH
30036: LD_VAR 0 11
30040: NOT
30041: OR
30042: IFFALSE 30046
// exit ;
30044: GO 31079
// weapon := 0 ;
30046: LD_ADDR_VAR 0 18
30050: PUSH
30051: LD_INT 0
30053: ST_TO_ADDR
// fac_list := [ ] ;
30054: LD_ADDR_VAR 0 17
30058: PUSH
30059: EMPTY
30060: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30061: LD_ADDR_VAR 0 6
30065: PUSH
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 274
30075: PPUSH
30076: LD_VAR 0 2
30080: PPUSH
30081: LD_INT 0
30083: PPUSH
30084: CALL 27650 0 3
30088: PPUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 72
30103: ST_TO_ADDR
// if not factories then
30104: LD_VAR 0 6
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 31079
// for i in factories do
30113: LD_ADDR_VAR 0 8
30117: PUSH
30118: LD_VAR 0 6
30122: PUSH
30123: FOR_IN
30124: IFFALSE 30149
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30126: LD_ADDR_VAR 0 17
30130: PUSH
30131: LD_VAR 0 17
30135: PUSH
30136: LD_VAR 0 8
30140: PPUSH
30141: CALL_OW 478
30145: UNION
30146: ST_TO_ADDR
30147: GO 30123
30149: POP
30150: POP
// if not fac_list then
30151: LD_VAR 0 17
30155: NOT
30156: IFFALSE 30160
// exit ;
30158: GO 31079
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30160: LD_ADDR_VAR 0 5
30164: PUSH
30165: LD_INT 4
30167: PUSH
30168: LD_INT 5
30170: PUSH
30171: LD_INT 9
30173: PUSH
30174: LD_INT 10
30176: PUSH
30177: LD_INT 6
30179: PUSH
30180: LD_INT 7
30182: PUSH
30183: LD_INT 11
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 27
30197: PUSH
30198: LD_INT 28
30200: PUSH
30201: LD_INT 26
30203: PUSH
30204: LD_INT 30
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 43
30215: PUSH
30216: LD_INT 44
30218: PUSH
30219: LD_INT 46
30221: PUSH
30222: LD_INT 45
30224: PUSH
30225: LD_INT 47
30227: PUSH
30228: LD_INT 49
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: LD_VAR 0 12
30248: ARRAY
30249: ST_TO_ADDR
// list := list isect fac_list ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_VAR 0 5
30259: PUSH
30260: LD_VAR 0 17
30264: ISECT
30265: ST_TO_ADDR
// if not list then
30266: LD_VAR 0 5
30270: NOT
30271: IFFALSE 30275
// exit ;
30273: GO 31079
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30275: LD_VAR 0 12
30279: PUSH
30280: LD_INT 3
30282: EQUAL
30283: PUSH
30284: LD_INT 49
30286: PUSH
30287: LD_VAR 0 5
30291: IN
30292: AND
30293: PUSH
30294: LD_INT 31
30296: PPUSH
30297: LD_VAR 0 16
30301: PPUSH
30302: CALL_OW 321
30306: PUSH
30307: LD_INT 2
30309: EQUAL
30310: AND
30311: IFFALSE 30371
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30313: LD_INT 22
30315: PUSH
30316: LD_VAR 0 16
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 35
30327: PUSH
30328: LD_INT 49
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 91
30337: PUSH
30338: LD_VAR 0 1
30342: PUSH
30343: LD_INT 10
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: PPUSH
30356: CALL_OW 69
30360: NOT
30361: IFFALSE 30371
// weapon := ru_time_lapser ;
30363: LD_ADDR_VAR 0 18
30367: PUSH
30368: LD_INT 49
30370: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30371: LD_VAR 0 12
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: IN
30386: PUSH
30387: LD_INT 11
30389: PUSH
30390: LD_VAR 0 5
30394: IN
30395: PUSH
30396: LD_INT 30
30398: PUSH
30399: LD_VAR 0 5
30403: IN
30404: OR
30405: AND
30406: PUSH
30407: LD_INT 6
30409: PPUSH
30410: LD_VAR 0 16
30414: PPUSH
30415: CALL_OW 321
30419: PUSH
30420: LD_INT 2
30422: EQUAL
30423: AND
30424: IFFALSE 30589
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30426: LD_INT 22
30428: PUSH
30429: LD_VAR 0 16
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: LD_INT 35
30443: PUSH
30444: LD_INT 11
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 35
30453: PUSH
30454: LD_INT 30
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 91
30468: PUSH
30469: LD_VAR 0 1
30473: PUSH
30474: LD_INT 18
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: PPUSH
30487: CALL_OW 69
30491: NOT
30492: PUSH
30493: LD_INT 22
30495: PUSH
30496: LD_VAR 0 16
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 32
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 30
30520: PUSH
30521: LD_INT 33
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 91
30535: PUSH
30536: LD_VAR 0 1
30540: PUSH
30541: LD_INT 12
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: PUSH
30562: LD_INT 2
30564: GREATER
30565: AND
30566: IFFALSE 30589
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30568: LD_ADDR_VAR 0 18
30572: PUSH
30573: LD_INT 11
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_VAR 0 12
30587: ARRAY
30588: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30589: LD_VAR 0 18
30593: NOT
30594: PUSH
30595: LD_INT 40
30597: PPUSH
30598: LD_VAR 0 16
30602: PPUSH
30603: CALL_OW 321
30607: PUSH
30608: LD_INT 2
30610: EQUAL
30611: AND
30612: PUSH
30613: LD_INT 7
30615: PUSH
30616: LD_VAR 0 5
30620: IN
30621: PUSH
30622: LD_INT 28
30624: PUSH
30625: LD_VAR 0 5
30629: IN
30630: OR
30631: PUSH
30632: LD_INT 45
30634: PUSH
30635: LD_VAR 0 5
30639: IN
30640: OR
30641: AND
30642: IFFALSE 30896
// begin hex := GetHexInfo ( x , y ) ;
30644: LD_ADDR_VAR 0 4
30648: PUSH
30649: LD_VAR 0 10
30653: PPUSH
30654: LD_VAR 0 11
30658: PPUSH
30659: CALL_OW 546
30663: ST_TO_ADDR
// if hex [ 1 ] then
30664: LD_VAR 0 4
30668: PUSH
30669: LD_INT 1
30671: ARRAY
30672: IFFALSE 30676
// exit ;
30674: GO 31079
// height := hex [ 2 ] ;
30676: LD_ADDR_VAR 0 15
30680: PUSH
30681: LD_VAR 0 4
30685: PUSH
30686: LD_INT 2
30688: ARRAY
30689: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30690: LD_ADDR_VAR 0 14
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
// for i in tmp do
30713: LD_ADDR_VAR 0 8
30717: PUSH
30718: LD_VAR 0 14
30722: PUSH
30723: FOR_IN
30724: IFFALSE 30894
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30726: LD_ADDR_VAR 0 9
30730: PUSH
30731: LD_VAR 0 10
30735: PPUSH
30736: LD_VAR 0 8
30740: PPUSH
30741: LD_INT 5
30743: PPUSH
30744: CALL_OW 272
30748: PUSH
30749: LD_VAR 0 11
30753: PPUSH
30754: LD_VAR 0 8
30758: PPUSH
30759: LD_INT 5
30761: PPUSH
30762: CALL_OW 273
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30771: LD_VAR 0 9
30775: PUSH
30776: LD_INT 1
30778: ARRAY
30779: PPUSH
30780: LD_VAR 0 9
30784: PUSH
30785: LD_INT 2
30787: ARRAY
30788: PPUSH
30789: CALL_OW 488
30793: IFFALSE 30892
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30795: LD_ADDR_VAR 0 4
30799: PUSH
30800: LD_VAR 0 9
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 9
30813: PUSH
30814: LD_INT 2
30816: ARRAY
30817: PPUSH
30818: CALL_OW 546
30822: ST_TO_ADDR
// if hex [ 1 ] then
30823: LD_VAR 0 4
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: IFFALSE 30835
// continue ;
30833: GO 30723
// h := hex [ 2 ] ;
30835: LD_ADDR_VAR 0 13
30839: PUSH
30840: LD_VAR 0 4
30844: PUSH
30845: LD_INT 2
30847: ARRAY
30848: ST_TO_ADDR
// if h + 7 < height then
30849: LD_VAR 0 13
30853: PUSH
30854: LD_INT 7
30856: PLUS
30857: PUSH
30858: LD_VAR 0 15
30862: LESS
30863: IFFALSE 30892
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30865: LD_ADDR_VAR 0 18
30869: PUSH
30870: LD_INT 7
30872: PUSH
30873: LD_INT 28
30875: PUSH
30876: LD_INT 45
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: PUSH
30884: LD_VAR 0 12
30888: ARRAY
30889: ST_TO_ADDR
// break ;
30890: GO 30894
// end ; end ; end ;
30892: GO 30723
30894: POP
30895: POP
// end ; if not weapon then
30896: LD_VAR 0 18
30900: NOT
30901: IFFALSE 30961
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: LD_VAR 0 5
30912: PUSH
30913: LD_INT 11
30915: PUSH
30916: LD_INT 30
30918: PUSH
30919: LD_INT 49
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: DIFF
30927: ST_TO_ADDR
// if not list then
30928: LD_VAR 0 5
30932: NOT
30933: IFFALSE 30937
// exit ;
30935: GO 31079
// weapon := list [ rand ( 1 , list ) ] ;
30937: LD_ADDR_VAR 0 18
30941: PUSH
30942: LD_VAR 0 5
30946: PUSH
30947: LD_INT 1
30949: PPUSH
30950: LD_VAR 0 5
30954: PPUSH
30955: CALL_OW 12
30959: ARRAY
30960: ST_TO_ADDR
// end ; if weapon then
30961: LD_VAR 0 18
30965: IFFALSE 31079
// begin tmp := CostOfWeapon ( weapon ) ;
30967: LD_ADDR_VAR 0 14
30971: PUSH
30972: LD_VAR 0 18
30976: PPUSH
30977: CALL_OW 451
30981: ST_TO_ADDR
// j := GetBase ( tower ) ;
30982: LD_ADDR_VAR 0 9
30986: PUSH
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 274
30996: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30997: LD_VAR 0 9
31001: PPUSH
31002: LD_INT 1
31004: PPUSH
31005: CALL_OW 275
31009: PUSH
31010: LD_VAR 0 14
31014: PUSH
31015: LD_INT 1
31017: ARRAY
31018: GREATEREQUAL
31019: PUSH
31020: LD_VAR 0 9
31024: PPUSH
31025: LD_INT 2
31027: PPUSH
31028: CALL_OW 275
31032: PUSH
31033: LD_VAR 0 14
31037: PUSH
31038: LD_INT 2
31040: ARRAY
31041: GREATEREQUAL
31042: AND
31043: PUSH
31044: LD_VAR 0 9
31048: PPUSH
31049: LD_INT 3
31051: PPUSH
31052: CALL_OW 275
31056: PUSH
31057: LD_VAR 0 14
31061: PUSH
31062: LD_INT 3
31064: ARRAY
31065: GREATEREQUAL
31066: AND
31067: IFFALSE 31079
// result := weapon ;
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_VAR 0 18
31078: ST_TO_ADDR
// end ; end ;
31079: LD_VAR 0 3
31083: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31084: LD_INT 0
31086: PPUSH
31087: PPUSH
// result := true ;
31088: LD_ADDR_VAR 0 3
31092: PUSH
31093: LD_INT 1
31095: ST_TO_ADDR
// if array1 = array2 then
31096: LD_VAR 0 1
31100: PUSH
31101: LD_VAR 0 2
31105: EQUAL
31106: IFFALSE 31166
// begin for i = 1 to array1 do
31108: LD_ADDR_VAR 0 4
31112: PUSH
31113: DOUBLE
31114: LD_INT 1
31116: DEC
31117: ST_TO_ADDR
31118: LD_VAR 0 1
31122: PUSH
31123: FOR_TO
31124: IFFALSE 31162
// if array1 [ i ] <> array2 [ i ] then
31126: LD_VAR 0 1
31130: PUSH
31131: LD_VAR 0 4
31135: ARRAY
31136: PUSH
31137: LD_VAR 0 2
31141: PUSH
31142: LD_VAR 0 4
31146: ARRAY
31147: NONEQUAL
31148: IFFALSE 31160
// begin result := false ;
31150: LD_ADDR_VAR 0 3
31154: PUSH
31155: LD_INT 0
31157: ST_TO_ADDR
// break ;
31158: GO 31162
// end ;
31160: GO 31123
31162: POP
31163: POP
// end else
31164: GO 31174
// result := false ;
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_INT 0
31173: ST_TO_ADDR
// end ;
31174: LD_VAR 0 3
31178: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// if not array1 or not array2 then
31183: LD_VAR 0 1
31187: NOT
31188: PUSH
31189: LD_VAR 0 2
31193: NOT
31194: OR
31195: IFFALSE 31199
// exit ;
31197: GO 31263
// result := true ;
31199: LD_ADDR_VAR 0 3
31203: PUSH
31204: LD_INT 1
31206: ST_TO_ADDR
// for i = 1 to array1 do
31207: LD_ADDR_VAR 0 4
31211: PUSH
31212: DOUBLE
31213: LD_INT 1
31215: DEC
31216: ST_TO_ADDR
31217: LD_VAR 0 1
31221: PUSH
31222: FOR_TO
31223: IFFALSE 31261
// if array1 [ i ] <> array2 [ i ] then
31225: LD_VAR 0 1
31229: PUSH
31230: LD_VAR 0 4
31234: ARRAY
31235: PUSH
31236: LD_VAR 0 2
31240: PUSH
31241: LD_VAR 0 4
31245: ARRAY
31246: NONEQUAL
31247: IFFALSE 31259
// begin result := false ;
31249: LD_ADDR_VAR 0 3
31253: PUSH
31254: LD_INT 0
31256: ST_TO_ADDR
// break ;
31257: GO 31261
// end ;
31259: GO 31222
31261: POP
31262: POP
// end ;
31263: LD_VAR 0 3
31267: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
// pom := GetBase ( fac ) ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 274
31287: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31288: LD_ADDR_VAR 0 4
31292: PUSH
31293: LD_VAR 0 2
31297: PUSH
31298: LD_INT 1
31300: ARRAY
31301: PPUSH
31302: LD_VAR 0 2
31306: PUSH
31307: LD_INT 2
31309: ARRAY
31310: PPUSH
31311: LD_VAR 0 2
31315: PUSH
31316: LD_INT 3
31318: ARRAY
31319: PPUSH
31320: LD_VAR 0 2
31324: PUSH
31325: LD_INT 4
31327: ARRAY
31328: PPUSH
31329: CALL_OW 449
31333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_VAR 0 5
31343: PPUSH
31344: LD_INT 1
31346: PPUSH
31347: CALL_OW 275
31351: PUSH
31352: LD_VAR 0 4
31356: PUSH
31357: LD_INT 1
31359: ARRAY
31360: GREATEREQUAL
31361: PUSH
31362: LD_VAR 0 5
31366: PPUSH
31367: LD_INT 2
31369: PPUSH
31370: CALL_OW 275
31374: PUSH
31375: LD_VAR 0 4
31379: PUSH
31380: LD_INT 2
31382: ARRAY
31383: GREATEREQUAL
31384: AND
31385: PUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: LD_INT 3
31393: PPUSH
31394: CALL_OW 275
31398: PUSH
31399: LD_VAR 0 4
31403: PUSH
31404: LD_INT 3
31406: ARRAY
31407: GREATEREQUAL
31408: AND
31409: ST_TO_ADDR
// end ;
31410: LD_VAR 0 3
31414: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31415: LD_INT 0
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
// pom := GetBase ( building ) ;
31421: LD_ADDR_VAR 0 3
31425: PUSH
31426: LD_VAR 0 1
31430: PPUSH
31431: CALL_OW 274
31435: ST_TO_ADDR
// if not pom then
31436: LD_VAR 0 3
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31615
// btype := GetBType ( building ) ;
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_VAR 0 1
31454: PPUSH
31455: CALL_OW 266
31459: ST_TO_ADDR
// if btype = b_armoury then
31460: LD_VAR 0 5
31464: PUSH
31465: LD_INT 4
31467: EQUAL
31468: IFFALSE 31478
// btype := b_barracks ;
31470: LD_ADDR_VAR 0 5
31474: PUSH
31475: LD_INT 5
31477: ST_TO_ADDR
// if btype = b_depot then
31478: LD_VAR 0 5
31482: PUSH
31483: LD_INT 0
31485: EQUAL
31486: IFFALSE 31496
// btype := b_warehouse ;
31488: LD_ADDR_VAR 0 5
31492: PUSH
31493: LD_INT 1
31495: ST_TO_ADDR
// if btype = b_workshop then
31496: LD_VAR 0 5
31500: PUSH
31501: LD_INT 2
31503: EQUAL
31504: IFFALSE 31514
// btype := b_factory ;
31506: LD_ADDR_VAR 0 5
31510: PUSH
31511: LD_INT 3
31513: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: LD_VAR 0 5
31523: PPUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 248
31533: PPUSH
31534: CALL_OW 450
31538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31539: LD_ADDR_VAR 0 2
31543: PUSH
31544: LD_VAR 0 3
31548: PPUSH
31549: LD_INT 1
31551: PPUSH
31552: CALL_OW 275
31556: PUSH
31557: LD_VAR 0 4
31561: PUSH
31562: LD_INT 1
31564: ARRAY
31565: GREATEREQUAL
31566: PUSH
31567: LD_VAR 0 3
31571: PPUSH
31572: LD_INT 2
31574: PPUSH
31575: CALL_OW 275
31579: PUSH
31580: LD_VAR 0 4
31584: PUSH
31585: LD_INT 2
31587: ARRAY
31588: GREATEREQUAL
31589: AND
31590: PUSH
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_INT 3
31598: PPUSH
31599: CALL_OW 275
31603: PUSH
31604: LD_VAR 0 4
31608: PUSH
31609: LD_INT 3
31611: ARRAY
31612: GREATEREQUAL
31613: AND
31614: ST_TO_ADDR
// end ;
31615: LD_VAR 0 2
31619: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
31624: PPUSH
// pom := GetBase ( building ) ;
31625: LD_ADDR_VAR 0 4
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 274
31639: ST_TO_ADDR
// if not pom then
31640: LD_VAR 0 4
31644: NOT
31645: IFFALSE 31649
// exit ;
31647: GO 31750
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31649: LD_ADDR_VAR 0 5
31653: PUSH
31654: LD_VAR 0 2
31658: PPUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 248
31668: PPUSH
31669: CALL_OW 450
31673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31674: LD_ADDR_VAR 0 3
31678: PUSH
31679: LD_VAR 0 4
31683: PPUSH
31684: LD_INT 1
31686: PPUSH
31687: CALL_OW 275
31691: PUSH
31692: LD_VAR 0 5
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: GREATEREQUAL
31701: PUSH
31702: LD_VAR 0 4
31706: PPUSH
31707: LD_INT 2
31709: PPUSH
31710: CALL_OW 275
31714: PUSH
31715: LD_VAR 0 5
31719: PUSH
31720: LD_INT 2
31722: ARRAY
31723: GREATEREQUAL
31724: AND
31725: PUSH
31726: LD_VAR 0 4
31730: PPUSH
31731: LD_INT 3
31733: PPUSH
31734: CALL_OW 275
31738: PUSH
31739: LD_VAR 0 5
31743: PUSH
31744: LD_INT 3
31746: ARRAY
31747: GREATEREQUAL
31748: AND
31749: ST_TO_ADDR
// end ;
31750: LD_VAR 0 3
31754: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31755: LD_INT 0
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
// result := false ;
31768: LD_ADDR_VAR 0 8
31772: PUSH
31773: LD_INT 0
31775: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31776: LD_VAR 0 5
31780: NOT
31781: PUSH
31782: LD_VAR 0 1
31786: NOT
31787: OR
31788: PUSH
31789: LD_VAR 0 2
31793: NOT
31794: OR
31795: PUSH
31796: LD_VAR 0 3
31800: NOT
31801: OR
31802: IFFALSE 31806
// exit ;
31804: GO 32620
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31806: LD_ADDR_VAR 0 14
31810: PUSH
31811: LD_VAR 0 1
31815: PPUSH
31816: LD_VAR 0 2
31820: PPUSH
31821: LD_VAR 0 3
31825: PPUSH
31826: LD_VAR 0 4
31830: PPUSH
31831: LD_VAR 0 5
31835: PUSH
31836: LD_INT 1
31838: ARRAY
31839: PPUSH
31840: CALL_OW 248
31844: PPUSH
31845: LD_INT 0
31847: PPUSH
31848: CALL 33857 0 6
31852: ST_TO_ADDR
// if not hexes then
31853: LD_VAR 0 14
31857: NOT
31858: IFFALSE 31862
// exit ;
31860: GO 32620
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31862: LD_ADDR_VAR 0 17
31866: PUSH
31867: LD_VAR 0 5
31871: PPUSH
31872: LD_INT 22
31874: PUSH
31875: LD_VAR 0 13
31879: PPUSH
31880: CALL_OW 255
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: LD_INT 30
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 30
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PPUSH
31921: CALL_OW 72
31925: ST_TO_ADDR
// for i = 1 to hexes do
31926: LD_ADDR_VAR 0 9
31930: PUSH
31931: DOUBLE
31932: LD_INT 1
31934: DEC
31935: ST_TO_ADDR
31936: LD_VAR 0 14
31940: PUSH
31941: FOR_TO
31942: IFFALSE 32618
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31944: LD_ADDR_VAR 0 13
31948: PUSH
31949: LD_VAR 0 14
31953: PUSH
31954: LD_VAR 0 9
31958: ARRAY
31959: PUSH
31960: LD_INT 1
31962: ARRAY
31963: PPUSH
31964: LD_VAR 0 14
31968: PUSH
31969: LD_VAR 0 9
31973: ARRAY
31974: PUSH
31975: LD_INT 2
31977: ARRAY
31978: PPUSH
31979: CALL_OW 428
31983: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31984: LD_VAR 0 14
31988: PUSH
31989: LD_VAR 0 9
31993: ARRAY
31994: PUSH
31995: LD_INT 1
31997: ARRAY
31998: PPUSH
31999: LD_VAR 0 14
32003: PUSH
32004: LD_VAR 0 9
32008: ARRAY
32009: PUSH
32010: LD_INT 2
32012: ARRAY
32013: PPUSH
32014: CALL_OW 351
32018: PUSH
32019: LD_VAR 0 14
32023: PUSH
32024: LD_VAR 0 9
32028: ARRAY
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: PPUSH
32034: LD_VAR 0 14
32038: PUSH
32039: LD_VAR 0 9
32043: ARRAY
32044: PUSH
32045: LD_INT 2
32047: ARRAY
32048: PPUSH
32049: CALL_OW 488
32053: NOT
32054: OR
32055: PUSH
32056: LD_VAR 0 13
32060: PPUSH
32061: CALL_OW 247
32065: PUSH
32066: LD_INT 3
32068: EQUAL
32069: OR
32070: IFFALSE 32076
// exit ;
32072: POP
32073: POP
32074: GO 32620
// if not tmp then
32076: LD_VAR 0 13
32080: NOT
32081: IFFALSE 32085
// continue ;
32083: GO 31941
// result := true ;
32085: LD_ADDR_VAR 0 8
32089: PUSH
32090: LD_INT 1
32092: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32093: LD_VAR 0 6
32097: PUSH
32098: LD_VAR 0 13
32102: PPUSH
32103: CALL_OW 247
32107: PUSH
32108: LD_INT 2
32110: EQUAL
32111: AND
32112: PUSH
32113: LD_VAR 0 13
32117: PPUSH
32118: CALL_OW 263
32122: PUSH
32123: LD_INT 1
32125: EQUAL
32126: AND
32127: IFFALSE 32291
// begin if IsDrivenBy ( tmp ) then
32129: LD_VAR 0 13
32133: PPUSH
32134: CALL_OW 311
32138: IFFALSE 32142
// continue ;
32140: GO 31941
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32142: LD_VAR 0 6
32146: PPUSH
32147: LD_INT 3
32149: PUSH
32150: LD_INT 60
32152: PUSH
32153: EMPTY
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: LD_INT 55
32165: PUSH
32166: EMPTY
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PPUSH
32177: CALL_OW 72
32181: IFFALSE 32289
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32183: LD_ADDR_VAR 0 18
32187: PUSH
32188: LD_VAR 0 6
32192: PPUSH
32193: LD_INT 3
32195: PUSH
32196: LD_INT 60
32198: PUSH
32199: EMPTY
32200: LIST
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 55
32211: PUSH
32212: EMPTY
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PPUSH
32223: CALL_OW 72
32227: PUSH
32228: LD_INT 1
32230: ARRAY
32231: ST_TO_ADDR
// if IsInUnit ( driver ) then
32232: LD_VAR 0 18
32236: PPUSH
32237: CALL_OW 310
32241: IFFALSE 32252
// ComExit ( driver ) ;
32243: LD_VAR 0 18
32247: PPUSH
32248: CALL 57041 0 1
// AddComEnterUnit ( driver , tmp ) ;
32252: LD_VAR 0 18
32256: PPUSH
32257: LD_VAR 0 13
32261: PPUSH
32262: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32266: LD_VAR 0 18
32270: PPUSH
32271: LD_VAR 0 7
32275: PPUSH
32276: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32280: LD_VAR 0 18
32284: PPUSH
32285: CALL_OW 181
// end ; continue ;
32289: GO 31941
// end ; if not cleaners or not tmp in cleaners then
32291: LD_VAR 0 6
32295: NOT
32296: PUSH
32297: LD_VAR 0 13
32301: PUSH
32302: LD_VAR 0 6
32306: IN
32307: NOT
32308: OR
32309: IFFALSE 32616
// begin if dep then
32311: LD_VAR 0 17
32315: IFFALSE 32451
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32317: LD_ADDR_VAR 0 16
32321: PUSH
32322: LD_VAR 0 17
32326: PUSH
32327: LD_INT 1
32329: ARRAY
32330: PPUSH
32331: CALL_OW 250
32335: PPUSH
32336: LD_VAR 0 17
32340: PUSH
32341: LD_INT 1
32343: ARRAY
32344: PPUSH
32345: CALL_OW 254
32349: PPUSH
32350: LD_INT 5
32352: PPUSH
32353: CALL_OW 272
32357: PUSH
32358: LD_VAR 0 17
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: PPUSH
32367: CALL_OW 251
32371: PPUSH
32372: LD_VAR 0 17
32376: PUSH
32377: LD_INT 1
32379: ARRAY
32380: PPUSH
32381: CALL_OW 254
32385: PPUSH
32386: LD_INT 5
32388: PPUSH
32389: CALL_OW 273
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32398: LD_VAR 0 16
32402: PUSH
32403: LD_INT 1
32405: ARRAY
32406: PPUSH
32407: LD_VAR 0 16
32411: PUSH
32412: LD_INT 2
32414: ARRAY
32415: PPUSH
32416: CALL_OW 488
32420: IFFALSE 32451
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32422: LD_VAR 0 13
32426: PPUSH
32427: LD_VAR 0 16
32431: PUSH
32432: LD_INT 1
32434: ARRAY
32435: PPUSH
32436: LD_VAR 0 16
32440: PUSH
32441: LD_INT 2
32443: ARRAY
32444: PPUSH
32445: CALL_OW 111
// continue ;
32449: GO 31941
// end ; end ; r := GetDir ( tmp ) ;
32451: LD_ADDR_VAR 0 15
32455: PUSH
32456: LD_VAR 0 13
32460: PPUSH
32461: CALL_OW 254
32465: ST_TO_ADDR
// if r = 5 then
32466: LD_VAR 0 15
32470: PUSH
32471: LD_INT 5
32473: EQUAL
32474: IFFALSE 32484
// r := 0 ;
32476: LD_ADDR_VAR 0 15
32480: PUSH
32481: LD_INT 0
32483: ST_TO_ADDR
// for j = r to 5 do
32484: LD_ADDR_VAR 0 10
32488: PUSH
32489: DOUBLE
32490: LD_VAR 0 15
32494: DEC
32495: ST_TO_ADDR
32496: LD_INT 5
32498: PUSH
32499: FOR_TO
32500: IFFALSE 32614
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32502: LD_ADDR_VAR 0 11
32506: PUSH
32507: LD_VAR 0 13
32511: PPUSH
32512: CALL_OW 250
32516: PPUSH
32517: LD_VAR 0 10
32521: PPUSH
32522: LD_INT 2
32524: PPUSH
32525: CALL_OW 272
32529: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32530: LD_ADDR_VAR 0 12
32534: PUSH
32535: LD_VAR 0 13
32539: PPUSH
32540: CALL_OW 251
32544: PPUSH
32545: LD_VAR 0 10
32549: PPUSH
32550: LD_INT 2
32552: PPUSH
32553: CALL_OW 273
32557: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32558: LD_VAR 0 11
32562: PPUSH
32563: LD_VAR 0 12
32567: PPUSH
32568: CALL_OW 488
32572: PUSH
32573: LD_VAR 0 11
32577: PPUSH
32578: LD_VAR 0 12
32582: PPUSH
32583: CALL_OW 428
32587: NOT
32588: AND
32589: IFFALSE 32612
// begin ComMoveXY ( tmp , _x , _y ) ;
32591: LD_VAR 0 13
32595: PPUSH
32596: LD_VAR 0 11
32600: PPUSH
32601: LD_VAR 0 12
32605: PPUSH
32606: CALL_OW 111
// break ;
32610: GO 32614
// end ; end ;
32612: GO 32499
32614: POP
32615: POP
// end ; end ;
32616: GO 31941
32618: POP
32619: POP
// end ;
32620: LD_VAR 0 8
32624: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32625: LD_INT 0
32627: PPUSH
// result := true ;
32628: LD_ADDR_VAR 0 3
32632: PUSH
32633: LD_INT 1
32635: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32636: LD_VAR 0 2
32640: PUSH
32641: LD_INT 24
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32655
32647: LD_INT 33
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32680
32655: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32656: LD_ADDR_VAR 0 3
32660: PUSH
32661: LD_INT 32
32663: PPUSH
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 321
32673: PUSH
32674: LD_INT 2
32676: EQUAL
32677: ST_TO_ADDR
32678: GO 33000
32680: LD_INT 20
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32713
32688: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 6
32696: PPUSH
32697: LD_VAR 0 1
32701: PPUSH
32702: CALL_OW 321
32706: PUSH
32707: LD_INT 2
32709: EQUAL
32710: ST_TO_ADDR
32711: GO 33000
32713: LD_INT 22
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32727
32719: LD_INT 36
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32752
32727: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32728: LD_ADDR_VAR 0 3
32732: PUSH
32733: LD_INT 15
32735: PPUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 321
32745: PUSH
32746: LD_INT 2
32748: EQUAL
32749: ST_TO_ADDR
32750: GO 33000
32752: LD_INT 30
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32785
32760: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_INT 20
32768: PPUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 321
32778: PUSH
32779: LD_INT 2
32781: EQUAL
32782: ST_TO_ADDR
32783: GO 33000
32785: LD_INT 28
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32799
32791: LD_INT 21
32793: DOUBLE
32794: EQUAL
32795: IFTRUE 32799
32797: GO 32824
32799: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32800: LD_ADDR_VAR 0 3
32804: PUSH
32805: LD_INT 21
32807: PPUSH
32808: LD_VAR 0 1
32812: PPUSH
32813: CALL_OW 321
32817: PUSH
32818: LD_INT 2
32820: EQUAL
32821: ST_TO_ADDR
32822: GO 33000
32824: LD_INT 16
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32859
32832: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32833: LD_ADDR_VAR 0 3
32837: PUSH
32838: LD_EXP 89
32842: PPUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 321
32852: PUSH
32853: LD_INT 2
32855: EQUAL
32856: ST_TO_ADDR
32857: GO 33000
32859: LD_INT 19
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32873
32865: LD_INT 23
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32900
32873: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_EXP 88
32883: PPUSH
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 321
32893: PUSH
32894: LD_INT 2
32896: EQUAL
32897: ST_TO_ADDR
32898: GO 33000
32900: LD_INT 17
32902: DOUBLE
32903: EQUAL
32904: IFTRUE 32908
32906: GO 32933
32908: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32909: LD_ADDR_VAR 0 3
32913: PUSH
32914: LD_INT 39
32916: PPUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 321
32926: PUSH
32927: LD_INT 2
32929: EQUAL
32930: ST_TO_ADDR
32931: GO 33000
32933: LD_INT 18
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32966
32941: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_INT 40
32949: PPUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 321
32959: PUSH
32960: LD_INT 2
32962: EQUAL
32963: ST_TO_ADDR
32964: GO 33000
32966: LD_INT 27
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 32999
32974: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 35
32982: PPUSH
32983: LD_VAR 0 1
32987: PPUSH
32988: CALL_OW 321
32992: PUSH
32993: LD_INT 2
32995: EQUAL
32996: ST_TO_ADDR
32997: GO 33000
32999: POP
// end ;
33000: LD_VAR 0 3
33004: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33005: LD_INT 0
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
// result := false ;
33018: LD_ADDR_VAR 0 6
33022: PUSH
33023: LD_INT 0
33025: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33026: LD_VAR 0 1
33030: NOT
33031: PUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 266
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: IN
33052: NOT
33053: OR
33054: PUSH
33055: LD_VAR 0 2
33059: NOT
33060: OR
33061: PUSH
33062: LD_VAR 0 5
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 4
33081: PUSH
33082: LD_INT 5
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: IN
33093: NOT
33094: OR
33095: PUSH
33096: LD_VAR 0 3
33100: PPUSH
33101: LD_VAR 0 4
33105: PPUSH
33106: CALL_OW 488
33110: NOT
33111: OR
33112: IFFALSE 33116
// exit ;
33114: GO 33852
// side := GetSide ( depot ) ;
33116: LD_ADDR_VAR 0 9
33120: PUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: CALL_OW 255
33130: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33131: LD_VAR 0 9
33135: PPUSH
33136: LD_VAR 0 2
33140: PPUSH
33141: CALL 32625 0 2
33145: NOT
33146: IFFALSE 33150
// exit ;
33148: GO 33852
// pom := GetBase ( depot ) ;
33150: LD_ADDR_VAR 0 10
33154: PUSH
33155: LD_VAR 0 1
33159: PPUSH
33160: CALL_OW 274
33164: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33165: LD_ADDR_VAR 0 11
33169: PUSH
33170: LD_VAR 0 2
33174: PPUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 248
33184: PPUSH
33185: CALL_OW 450
33189: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33190: LD_VAR 0 10
33194: PPUSH
33195: LD_INT 1
33197: PPUSH
33198: CALL_OW 275
33202: PUSH
33203: LD_VAR 0 11
33207: PUSH
33208: LD_INT 1
33210: ARRAY
33211: GREATEREQUAL
33212: PUSH
33213: LD_VAR 0 10
33217: PPUSH
33218: LD_INT 2
33220: PPUSH
33221: CALL_OW 275
33225: PUSH
33226: LD_VAR 0 11
33230: PUSH
33231: LD_INT 2
33233: ARRAY
33234: GREATEREQUAL
33235: AND
33236: PUSH
33237: LD_VAR 0 10
33241: PPUSH
33242: LD_INT 3
33244: PPUSH
33245: CALL_OW 275
33249: PUSH
33250: LD_VAR 0 11
33254: PUSH
33255: LD_INT 3
33257: ARRAY
33258: GREATEREQUAL
33259: AND
33260: NOT
33261: IFFALSE 33265
// exit ;
33263: GO 33852
// if GetBType ( depot ) = b_depot then
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 266
33274: PUSH
33275: LD_INT 0
33277: EQUAL
33278: IFFALSE 33290
// dist := 28 else
33280: LD_ADDR_VAR 0 14
33284: PUSH
33285: LD_INT 28
33287: ST_TO_ADDR
33288: GO 33298
// dist := 36 ;
33290: LD_ADDR_VAR 0 14
33294: PUSH
33295: LD_INT 36
33297: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33298: LD_VAR 0 1
33302: PPUSH
33303: LD_VAR 0 3
33307: PPUSH
33308: LD_VAR 0 4
33312: PPUSH
33313: CALL_OW 297
33317: PUSH
33318: LD_VAR 0 14
33322: GREATER
33323: IFFALSE 33327
// exit ;
33325: GO 33852
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33327: LD_ADDR_VAR 0 12
33331: PUSH
33332: LD_VAR 0 2
33336: PPUSH
33337: LD_VAR 0 3
33341: PPUSH
33342: LD_VAR 0 4
33346: PPUSH
33347: LD_VAR 0 5
33351: PPUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 248
33361: PPUSH
33362: LD_INT 0
33364: PPUSH
33365: CALL 33857 0 6
33369: ST_TO_ADDR
// if not hexes then
33370: LD_VAR 0 12
33374: NOT
33375: IFFALSE 33379
// exit ;
33377: GO 33852
// hex := GetHexInfo ( x , y ) ;
33379: LD_ADDR_VAR 0 15
33383: PUSH
33384: LD_VAR 0 3
33388: PPUSH
33389: LD_VAR 0 4
33393: PPUSH
33394: CALL_OW 546
33398: ST_TO_ADDR
// if hex [ 1 ] then
33399: LD_VAR 0 15
33403: PUSH
33404: LD_INT 1
33406: ARRAY
33407: IFFALSE 33411
// exit ;
33409: GO 33852
// height := hex [ 2 ] ;
33411: LD_ADDR_VAR 0 13
33415: PUSH
33416: LD_VAR 0 15
33420: PUSH
33421: LD_INT 2
33423: ARRAY
33424: ST_TO_ADDR
// for i = 1 to hexes do
33425: LD_ADDR_VAR 0 7
33429: PUSH
33430: DOUBLE
33431: LD_INT 1
33433: DEC
33434: ST_TO_ADDR
33435: LD_VAR 0 12
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33771
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33443: LD_VAR 0 12
33447: PUSH
33448: LD_VAR 0 7
33452: ARRAY
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: PPUSH
33458: LD_VAR 0 12
33462: PUSH
33463: LD_VAR 0 7
33467: ARRAY
33468: PUSH
33469: LD_INT 2
33471: ARRAY
33472: PPUSH
33473: CALL_OW 488
33477: NOT
33478: PUSH
33479: LD_VAR 0 12
33483: PUSH
33484: LD_VAR 0 7
33488: ARRAY
33489: PUSH
33490: LD_INT 1
33492: ARRAY
33493: PPUSH
33494: LD_VAR 0 12
33498: PUSH
33499: LD_VAR 0 7
33503: ARRAY
33504: PUSH
33505: LD_INT 2
33507: ARRAY
33508: PPUSH
33509: CALL_OW 428
33513: PUSH
33514: LD_INT 0
33516: GREATER
33517: OR
33518: PUSH
33519: LD_VAR 0 12
33523: PUSH
33524: LD_VAR 0 7
33528: ARRAY
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: PPUSH
33534: LD_VAR 0 12
33538: PUSH
33539: LD_VAR 0 7
33543: ARRAY
33544: PUSH
33545: LD_INT 2
33547: ARRAY
33548: PPUSH
33549: CALL_OW 351
33553: OR
33554: IFFALSE 33560
// exit ;
33556: POP
33557: POP
33558: GO 33852
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33560: LD_ADDR_VAR 0 8
33564: PUSH
33565: LD_VAR 0 12
33569: PUSH
33570: LD_VAR 0 7
33574: ARRAY
33575: PUSH
33576: LD_INT 1
33578: ARRAY
33579: PPUSH
33580: LD_VAR 0 12
33584: PUSH
33585: LD_VAR 0 7
33589: ARRAY
33590: PUSH
33591: LD_INT 2
33593: ARRAY
33594: PPUSH
33595: CALL_OW 546
33599: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33600: LD_VAR 0 8
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: PUSH
33609: LD_VAR 0 8
33613: PUSH
33614: LD_INT 2
33616: ARRAY
33617: PUSH
33618: LD_VAR 0 13
33622: PUSH
33623: LD_INT 2
33625: PLUS
33626: GREATER
33627: OR
33628: PUSH
33629: LD_VAR 0 8
33633: PUSH
33634: LD_INT 2
33636: ARRAY
33637: PUSH
33638: LD_VAR 0 13
33642: PUSH
33643: LD_INT 2
33645: MINUS
33646: LESS
33647: OR
33648: PUSH
33649: LD_VAR 0 8
33653: PUSH
33654: LD_INT 3
33656: ARRAY
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 8
33663: PUSH
33664: LD_INT 9
33666: PUSH
33667: LD_INT 10
33669: PUSH
33670: LD_INT 11
33672: PUSH
33673: LD_INT 12
33675: PUSH
33676: LD_INT 13
33678: PUSH
33679: LD_INT 16
33681: PUSH
33682: LD_INT 17
33684: PUSH
33685: LD_INT 18
33687: PUSH
33688: LD_INT 19
33690: PUSH
33691: LD_INT 20
33693: PUSH
33694: LD_INT 21
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: IN
33712: NOT
33713: OR
33714: PUSH
33715: LD_VAR 0 8
33719: PUSH
33720: LD_INT 5
33722: ARRAY
33723: NOT
33724: OR
33725: PUSH
33726: LD_VAR 0 8
33730: PUSH
33731: LD_INT 6
33733: ARRAY
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: LD_INT 7
33743: PUSH
33744: LD_INT 9
33746: PUSH
33747: LD_INT 10
33749: PUSH
33750: LD_INT 11
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: IN
33761: NOT
33762: OR
33763: IFFALSE 33769
// exit ;
33765: POP
33766: POP
33767: GO 33852
// end ;
33769: GO 33440
33771: POP
33772: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33773: LD_VAR 0 9
33777: PPUSH
33778: LD_VAR 0 3
33782: PPUSH
33783: LD_VAR 0 4
33787: PPUSH
33788: LD_INT 20
33790: PPUSH
33791: CALL 25798 0 4
33795: PUSH
33796: LD_INT 4
33798: ARRAY
33799: IFFALSE 33803
// exit ;
33801: GO 33852
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33803: LD_VAR 0 2
33807: PUSH
33808: LD_INT 29
33810: PUSH
33811: LD_INT 30
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: IN
33818: PUSH
33819: LD_VAR 0 3
33823: PPUSH
33824: LD_VAR 0 4
33828: PPUSH
33829: LD_VAR 0 9
33833: PPUSH
33834: CALL_OW 440
33838: NOT
33839: AND
33840: IFFALSE 33844
// exit ;
33842: GO 33852
// result := true ;
33844: LD_ADDR_VAR 0 6
33848: PUSH
33849: LD_INT 1
33851: ST_TO_ADDR
// end ;
33852: LD_VAR 0 6
33856: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33857: LD_INT 0
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
// result = [ ] ;
33917: LD_ADDR_VAR 0 7
33921: PUSH
33922: EMPTY
33923: ST_TO_ADDR
// temp_list = [ ] ;
33924: LD_ADDR_VAR 0 9
33928: PUSH
33929: EMPTY
33930: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33931: LD_VAR 0 4
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: LD_INT 5
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: IN
33962: NOT
33963: PUSH
33964: LD_VAR 0 1
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: IN
33979: PUSH
33980: LD_VAR 0 5
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: IN
33999: NOT
34000: AND
34001: OR
34002: IFFALSE 34006
// exit ;
34004: GO 52397
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34006: LD_VAR 0 1
34010: PUSH
34011: LD_INT 6
34013: PUSH
34014: LD_INT 7
34016: PUSH
34017: LD_INT 8
34019: PUSH
34020: LD_INT 13
34022: PUSH
34023: LD_INT 12
34025: PUSH
34026: LD_INT 15
34028: PUSH
34029: LD_INT 11
34031: PUSH
34032: LD_INT 14
34034: PUSH
34035: LD_INT 10
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: IN
34049: IFFALSE 34059
// btype = b_lab ;
34051: LD_ADDR_VAR 0 1
34055: PUSH
34056: LD_INT 6
34058: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34059: LD_VAR 0 6
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: IN
34078: NOT
34079: PUSH
34080: LD_VAR 0 1
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: LD_INT 6
34099: PUSH
34100: LD_INT 36
34102: PUSH
34103: LD_INT 4
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 31
34111: PUSH
34112: LD_INT 32
34114: PUSH
34115: LD_INT 33
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: IN
34131: NOT
34132: PUSH
34133: LD_VAR 0 6
34137: PUSH
34138: LD_INT 1
34140: EQUAL
34141: AND
34142: OR
34143: PUSH
34144: LD_VAR 0 1
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: IN
34159: NOT
34160: PUSH
34161: LD_VAR 0 6
34165: PUSH
34166: LD_INT 2
34168: EQUAL
34169: AND
34170: OR
34171: IFFALSE 34181
// mode = 0 ;
34173: LD_ADDR_VAR 0 6
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// case mode of 0 :
34181: LD_VAR 0 6
34185: PUSH
34186: LD_INT 0
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 45647
34194: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34195: LD_ADDR_VAR 0 11
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: LD_INT 3
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34388: LD_ADDR_VAR 0 12
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 3
34545: NEG
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34584: LD_ADDR_VAR 0 13
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34783: LD_ADDR_VAR 0 14
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34979: LD_ADDR_VAR 0 15
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35172: LD_ADDR_VAR 0 16
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: LD_INT 2
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 3
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35365: LD_ADDR_VAR 0 17
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 2
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35595: LD_ADDR_VAR 0 18
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35825: LD_ADDR_VAR 0 19
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: NEG
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36055: LD_ADDR_VAR 0 20
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 2
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36285: LD_ADDR_VAR 0 21
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 2
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36515: LD_ADDR_VAR 0 22
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36745: LD_ADDR_VAR 0 23
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 3
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 3
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37025: LD_ADDR_VAR 0 24
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 3
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37301: LD_ADDR_VAR 0 25
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 3
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37575: LD_ADDR_VAR 0 26
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37851: LD_ADDR_VAR 0 27
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38131: LD_ADDR_VAR 0 28
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: NEG
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: NEG
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38413: LD_ADDR_VAR 0 29
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 3
38657: NEG
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38692: LD_ADDR_VAR 0 30
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 3
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 3
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38970: LD_ADDR_VAR 0 31
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 3
39213: NEG
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39248: LD_ADDR_VAR 0 32
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: LD_INT 3
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 3
39491: NEG
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39526: LD_ADDR_VAR 0 33
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 3
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39805: LD_ADDR_VAR 0 34
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40085: LD_ADDR_VAR 0 35
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40197: LD_ADDR_VAR 0 36
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40309: LD_ADDR_VAR 0 37
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40421: LD_ADDR_VAR 0 38
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40533: LD_ADDR_VAR 0 39
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40645: LD_ADDR_VAR 0 40
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40757: LD_ADDR_VAR 0 41
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 3
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 3
41031: NEG
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 3
41066: NEG
41067: PUSH
41068: LD_INT 3
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41107: LD_ADDR_VAR 0 42
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 3
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41457: LD_ADDR_VAR 0 43
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41805: LD_ADDR_VAR 0 44
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 3
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 3
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: LD_INT 3
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42155: LD_ADDR_VAR 0 45
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 3
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 3
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: NEG
42465: PUSH
42466: LD_INT 3
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42505: LD_ADDR_VAR 0 46
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 3
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42853: LD_ADDR_VAR 0 47
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43004: LD_ADDR_VAR 0 48
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43151: LD_ADDR_VAR 0 49
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43295: LD_ADDR_VAR 0 50
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43439: LD_ADDR_VAR 0 51
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43586: LD_ADDR_VAR 0 52
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43737: LD_ADDR_VAR 0 53
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43967: LD_ADDR_VAR 0 54
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44197: LD_ADDR_VAR 0 55
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44427: LD_ADDR_VAR 0 56
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44657: LD_ADDR_VAR 0 57
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44887: LD_ADDR_VAR 0 58
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45117: LD_ADDR_VAR 0 59
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45205: LD_ADDR_VAR 0 60
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45293: LD_ADDR_VAR 0 61
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45381: LD_ADDR_VAR 0 62
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45469: LD_ADDR_VAR 0 63
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45557: LD_ADDR_VAR 0 64
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// end ; 1 :
45645: GO 51542
45647: LD_INT 1
45649: DOUBLE
45650: EQUAL
45651: IFTRUE 45655
45653: GO 48278
45655: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45656: LD_ADDR_VAR 0 11
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45700: LD_ADDR_VAR 0 12
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45741: LD_ADDR_VAR 0 13
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45781: LD_ADDR_VAR 0 14
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45822: LD_ADDR_VAR 0 15
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45866: LD_ADDR_VAR 0 16
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45912: LD_ADDR_VAR 0 17
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45956: LD_ADDR_VAR 0 18
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45997: LD_ADDR_VAR 0 19
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 3
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46037: LD_ADDR_VAR 0 20
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 3
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46078: LD_ADDR_VAR 0 21
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46122: LD_ADDR_VAR 0 22
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 3
46153: NEG
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46168: LD_ADDR_VAR 0 23
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 4
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46212: LD_ADDR_VAR 0 24
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 4
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46253: LD_ADDR_VAR 0 25
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 4
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 4
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46293: LD_ADDR_VAR 0 26
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 4
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46334: LD_ADDR_VAR 0 27
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46378: LD_ADDR_VAR 0 28
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: LD_INT 4
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: NEG
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46424: LD_ADDR_VAR 0 29
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 3
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 4
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 4
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 5
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 5
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 4
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 6
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 6
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46579: LD_ADDR_VAR 0 30
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 4
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 5
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 5
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 6
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 6
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46722: LD_ADDR_VAR 0 31
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 4
46769: PUSH
46770: LD_INT 4
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 4
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 5
46789: PUSH
46790: LD_INT 4
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 5
46799: PUSH
46800: LD_INT 5
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 4
46809: PUSH
46810: LD_INT 5
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 6
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 6
46829: PUSH
46830: LD_INT 6
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 5
46839: PUSH
46840: LD_INT 6
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46861: LD_ADDR_VAR 0 32
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 4
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 4
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 5
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 4
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 6
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 6
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 5
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47004: LD_ADDR_VAR 0 33
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 4
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 4
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 5
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 5
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 5
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 6
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 6
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47159: LD_ADDR_VAR 0 34
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 3
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: LD_INT 3
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: LD_INT 4
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 4
47214: NEG
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 4
47226: NEG
47227: PUSH
47228: LD_INT 4
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 4
47238: NEG
47239: PUSH
47240: LD_INT 5
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 5
47250: NEG
47251: PUSH
47252: LD_INT 4
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 5
47262: NEG
47263: PUSH
47264: LD_INT 5
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 5
47274: NEG
47275: PUSH
47276: LD_INT 6
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 6
47286: NEG
47287: PUSH
47288: LD_INT 5
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 6
47298: NEG
47299: PUSH
47300: LD_INT 6
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47322: LD_ADDR_VAR 0 41
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47366: LD_ADDR_VAR 0 42
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47407: LD_ADDR_VAR 0 43
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47447: LD_ADDR_VAR 0 44
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47488: LD_ADDR_VAR 0 45
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47532: LD_ADDR_VAR 0 46
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47578: LD_ADDR_VAR 0 47
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47611: LD_ADDR_VAR 0 48
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47642: LD_ADDR_VAR 0 49
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47671: LD_ADDR_VAR 0 50
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47700: LD_ADDR_VAR 0 51
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47731: LD_ADDR_VAR 0 52
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47764: LD_ADDR_VAR 0 53
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 3
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47808: LD_ADDR_VAR 0 54
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47849: LD_ADDR_VAR 0 55
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47889: LD_ADDR_VAR 0 56
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47930: LD_ADDR_VAR 0 57
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47974: LD_ADDR_VAR 0 58
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 3
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48020: LD_ADDR_VAR 0 59
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48064: LD_ADDR_VAR 0 60
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48105: LD_ADDR_VAR 0 61
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48145: LD_ADDR_VAR 0 62
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48186: LD_ADDR_VAR 0 63
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48230: LD_ADDR_VAR 0 64
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: LIST
48275: ST_TO_ADDR
// end ; 2 :
48276: GO 51542
48278: LD_INT 2
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 51541
48286: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48287: LD_ADDR_VAR 0 29
48291: PUSH
48292: LD_INT 4
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 4
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 5
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 4
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 5
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 4
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 4
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: PUSH
48428: LD_INT 4
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 4
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 4
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 4
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 5
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 5
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 4
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 5
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 4
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 4
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 4
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 4
48672: NEG
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 4
48684: NEG
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: LD_INT 4
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: NEG
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 5
48732: NEG
48733: PUSH
48734: LD_INT 4
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 5
48744: NEG
48745: PUSH
48746: LD_INT 5
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: LD_INT 5
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 5
48768: NEG
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48825: LD_ADDR_VAR 0 30
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: LD_INT 4
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 5
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: PUSH
48863: LD_INT 5
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 4
48872: PUSH
48873: LD_INT 5
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: LD_INT 4
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 5
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: LD_INT 5
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 4
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 4
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 4
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 4
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 5
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 5
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 5
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 4
49177: NEG
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: NEG
49190: PUSH
49191: LD_INT 4
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 4
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 4
49213: NEG
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 4
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 5
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 3
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 4
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 5
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 5
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49372: LD_ADDR_VAR 0 31
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 4
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 5
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 5
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 4
49528: NEG
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 4
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 4
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: LD_INT 4
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 4
49586: NEG
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 4
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 3
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: LD_INT 3
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 5
49634: NEG
49635: PUSH
49636: LD_INT 4
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 5
49646: NEG
49647: PUSH
49648: LD_INT 5
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: LD_INT 5
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 5
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 4
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 4
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 4
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 5
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 4
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 5
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49922: LD_ADDR_VAR 0 32
49926: PUSH
49927: LD_INT 4
49929: NEG
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 5
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 5
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 5
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 4
50091: NEG
50092: PUSH
50093: LD_INT 3
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 4
50103: NEG
50104: PUSH
50105: LD_INT 4
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 4
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 4
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 4
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 5
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 4
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 5
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 5
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 4
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 4
50334: PUSH
50335: LD_INT 4
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 5
50354: PUSH
50355: LD_INT 4
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 5
50364: PUSH
50365: LD_INT 5
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: PUSH
50385: LD_INT 4
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 5
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50469: LD_ADDR_VAR 0 33
50473: PUSH
50474: LD_INT 4
50476: NEG
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: LD_INT 5
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 4
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 5
50536: NEG
50537: PUSH
50538: LD_INT 4
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 5
50548: NEG
50549: PUSH
50550: LD_INT 5
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: NEG
50561: PUSH
50562: LD_INT 5
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 5
50572: NEG
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 4
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 4
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 4
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 5
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 4
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 5
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 4
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 4
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 5
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 5
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 4
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 5
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51007: LD_ADDR_VAR 0 34
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 4
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 5
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 4
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 5
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 5
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 4
51209: PUSH
51210: LD_INT 4
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 5
51229: PUSH
51230: LD_INT 4
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 5
51239: PUSH
51240: LD_INT 5
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: LD_INT 5
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 5
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 5
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 4
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 4
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 4
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 4
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 5
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 5
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 5
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// end ; end ;
51539: GO 51542
51541: POP
// case btype of b_depot , b_warehouse :
51542: LD_VAR 0 1
51546: PUSH
51547: LD_INT 0
51549: DOUBLE
51550: EQUAL
51551: IFTRUE 51561
51553: LD_INT 1
51555: DOUBLE
51556: EQUAL
51557: IFTRUE 51561
51559: GO 51762
51561: POP
// case nation of nation_american :
51562: LD_VAR 0 5
51566: PUSH
51567: LD_INT 1
51569: DOUBLE
51570: EQUAL
51571: IFTRUE 51575
51573: GO 51631
51575: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51576: LD_ADDR_VAR 0 9
51580: PUSH
51581: LD_VAR 0 11
51585: PUSH
51586: LD_VAR 0 12
51590: PUSH
51591: LD_VAR 0 13
51595: PUSH
51596: LD_VAR 0 14
51600: PUSH
51601: LD_VAR 0 15
51605: PUSH
51606: LD_VAR 0 16
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: PUSH
51619: LD_VAR 0 4
51623: PUSH
51624: LD_INT 1
51626: PLUS
51627: ARRAY
51628: ST_TO_ADDR
51629: GO 51760
51631: LD_INT 2
51633: DOUBLE
51634: EQUAL
51635: IFTRUE 51639
51637: GO 51695
51639: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51640: LD_ADDR_VAR 0 9
51644: PUSH
51645: LD_VAR 0 17
51649: PUSH
51650: LD_VAR 0 18
51654: PUSH
51655: LD_VAR 0 19
51659: PUSH
51660: LD_VAR 0 20
51664: PUSH
51665: LD_VAR 0 21
51669: PUSH
51670: LD_VAR 0 22
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 4
51687: PUSH
51688: LD_INT 1
51690: PLUS
51691: ARRAY
51692: ST_TO_ADDR
51693: GO 51760
51695: LD_INT 3
51697: DOUBLE
51698: EQUAL
51699: IFTRUE 51703
51701: GO 51759
51703: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51704: LD_ADDR_VAR 0 9
51708: PUSH
51709: LD_VAR 0 23
51713: PUSH
51714: LD_VAR 0 24
51718: PUSH
51719: LD_VAR 0 25
51723: PUSH
51724: LD_VAR 0 26
51728: PUSH
51729: LD_VAR 0 27
51733: PUSH
51734: LD_VAR 0 28
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: PUSH
51747: LD_VAR 0 4
51751: PUSH
51752: LD_INT 1
51754: PLUS
51755: ARRAY
51756: ST_TO_ADDR
51757: GO 51760
51759: POP
51760: GO 52315
51762: LD_INT 2
51764: DOUBLE
51765: EQUAL
51766: IFTRUE 51776
51768: LD_INT 3
51770: DOUBLE
51771: EQUAL
51772: IFTRUE 51776
51774: GO 51832
51776: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51777: LD_ADDR_VAR 0 9
51781: PUSH
51782: LD_VAR 0 29
51786: PUSH
51787: LD_VAR 0 30
51791: PUSH
51792: LD_VAR 0 31
51796: PUSH
51797: LD_VAR 0 32
51801: PUSH
51802: LD_VAR 0 33
51806: PUSH
51807: LD_VAR 0 34
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: PUSH
51820: LD_VAR 0 4
51824: PUSH
51825: LD_INT 1
51827: PLUS
51828: ARRAY
51829: ST_TO_ADDR
51830: GO 52315
51832: LD_INT 16
51834: DOUBLE
51835: EQUAL
51836: IFTRUE 51894
51838: LD_INT 17
51840: DOUBLE
51841: EQUAL
51842: IFTRUE 51894
51844: LD_INT 18
51846: DOUBLE
51847: EQUAL
51848: IFTRUE 51894
51850: LD_INT 19
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51894
51856: LD_INT 22
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51894
51862: LD_INT 20
51864: DOUBLE
51865: EQUAL
51866: IFTRUE 51894
51868: LD_INT 21
51870: DOUBLE
51871: EQUAL
51872: IFTRUE 51894
51874: LD_INT 23
51876: DOUBLE
51877: EQUAL
51878: IFTRUE 51894
51880: LD_INT 24
51882: DOUBLE
51883: EQUAL
51884: IFTRUE 51894
51886: LD_INT 25
51888: DOUBLE
51889: EQUAL
51890: IFTRUE 51894
51892: GO 51950
51894: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51895: LD_ADDR_VAR 0 9
51899: PUSH
51900: LD_VAR 0 35
51904: PUSH
51905: LD_VAR 0 36
51909: PUSH
51910: LD_VAR 0 37
51914: PUSH
51915: LD_VAR 0 38
51919: PUSH
51920: LD_VAR 0 39
51924: PUSH
51925: LD_VAR 0 40
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: PUSH
51938: LD_VAR 0 4
51942: PUSH
51943: LD_INT 1
51945: PLUS
51946: ARRAY
51947: ST_TO_ADDR
51948: GO 52315
51950: LD_INT 6
51952: DOUBLE
51953: EQUAL
51954: IFTRUE 52006
51956: LD_INT 7
51958: DOUBLE
51959: EQUAL
51960: IFTRUE 52006
51962: LD_INT 8
51964: DOUBLE
51965: EQUAL
51966: IFTRUE 52006
51968: LD_INT 13
51970: DOUBLE
51971: EQUAL
51972: IFTRUE 52006
51974: LD_INT 12
51976: DOUBLE
51977: EQUAL
51978: IFTRUE 52006
51980: LD_INT 15
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 52006
51986: LD_INT 11
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 52006
51992: LD_INT 14
51994: DOUBLE
51995: EQUAL
51996: IFTRUE 52006
51998: LD_INT 10
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52006
52004: GO 52062
52006: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52007: LD_ADDR_VAR 0 9
52011: PUSH
52012: LD_VAR 0 41
52016: PUSH
52017: LD_VAR 0 42
52021: PUSH
52022: LD_VAR 0 43
52026: PUSH
52027: LD_VAR 0 44
52031: PUSH
52032: LD_VAR 0 45
52036: PUSH
52037: LD_VAR 0 46
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: PUSH
52050: LD_VAR 0 4
52054: PUSH
52055: LD_INT 1
52057: PLUS
52058: ARRAY
52059: ST_TO_ADDR
52060: GO 52315
52062: LD_INT 36
52064: DOUBLE
52065: EQUAL
52066: IFTRUE 52070
52068: GO 52126
52070: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52071: LD_ADDR_VAR 0 9
52075: PUSH
52076: LD_VAR 0 47
52080: PUSH
52081: LD_VAR 0 48
52085: PUSH
52086: LD_VAR 0 49
52090: PUSH
52091: LD_VAR 0 50
52095: PUSH
52096: LD_VAR 0 51
52100: PUSH
52101: LD_VAR 0 52
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: PUSH
52114: LD_VAR 0 4
52118: PUSH
52119: LD_INT 1
52121: PLUS
52122: ARRAY
52123: ST_TO_ADDR
52124: GO 52315
52126: LD_INT 4
52128: DOUBLE
52129: EQUAL
52130: IFTRUE 52152
52132: LD_INT 5
52134: DOUBLE
52135: EQUAL
52136: IFTRUE 52152
52138: LD_INT 34
52140: DOUBLE
52141: EQUAL
52142: IFTRUE 52152
52144: LD_INT 37
52146: DOUBLE
52147: EQUAL
52148: IFTRUE 52152
52150: GO 52208
52152: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52153: LD_ADDR_VAR 0 9
52157: PUSH
52158: LD_VAR 0 53
52162: PUSH
52163: LD_VAR 0 54
52167: PUSH
52168: LD_VAR 0 55
52172: PUSH
52173: LD_VAR 0 56
52177: PUSH
52178: LD_VAR 0 57
52182: PUSH
52183: LD_VAR 0 58
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: PUSH
52196: LD_VAR 0 4
52200: PUSH
52201: LD_INT 1
52203: PLUS
52204: ARRAY
52205: ST_TO_ADDR
52206: GO 52315
52208: LD_INT 31
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52258
52214: LD_INT 32
52216: DOUBLE
52217: EQUAL
52218: IFTRUE 52258
52220: LD_INT 33
52222: DOUBLE
52223: EQUAL
52224: IFTRUE 52258
52226: LD_INT 27
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52258
52232: LD_INT 26
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52258
52238: LD_INT 28
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52258
52244: LD_INT 29
52246: DOUBLE
52247: EQUAL
52248: IFTRUE 52258
52250: LD_INT 30
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52258
52256: GO 52314
52258: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52259: LD_ADDR_VAR 0 9
52263: PUSH
52264: LD_VAR 0 59
52268: PUSH
52269: LD_VAR 0 60
52273: PUSH
52274: LD_VAR 0 61
52278: PUSH
52279: LD_VAR 0 62
52283: PUSH
52284: LD_VAR 0 63
52288: PUSH
52289: LD_VAR 0 64
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: PUSH
52302: LD_VAR 0 4
52306: PUSH
52307: LD_INT 1
52309: PLUS
52310: ARRAY
52311: ST_TO_ADDR
52312: GO 52315
52314: POP
// temp_list2 = [ ] ;
52315: LD_ADDR_VAR 0 10
52319: PUSH
52320: EMPTY
52321: ST_TO_ADDR
// for i in temp_list do
52322: LD_ADDR_VAR 0 8
52326: PUSH
52327: LD_VAR 0 9
52331: PUSH
52332: FOR_IN
52333: IFFALSE 52385
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52335: LD_ADDR_VAR 0 10
52339: PUSH
52340: LD_VAR 0 10
52344: PUSH
52345: LD_VAR 0 8
52349: PUSH
52350: LD_INT 1
52352: ARRAY
52353: PUSH
52354: LD_VAR 0 2
52358: PLUS
52359: PUSH
52360: LD_VAR 0 8
52364: PUSH
52365: LD_INT 2
52367: ARRAY
52368: PUSH
52369: LD_VAR 0 3
52373: PLUS
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: ADD
52382: ST_TO_ADDR
52383: GO 52332
52385: POP
52386: POP
// result = temp_list2 ;
52387: LD_ADDR_VAR 0 7
52391: PUSH
52392: LD_VAR 0 10
52396: ST_TO_ADDR
// end ;
52397: LD_VAR 0 7
52401: RET
// export function EnemyInRange ( unit , dist ) ; begin
52402: LD_INT 0
52404: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52405: LD_ADDR_VAR 0 3
52409: PUSH
52410: LD_VAR 0 1
52414: PPUSH
52415: CALL_OW 255
52419: PPUSH
52420: LD_VAR 0 1
52424: PPUSH
52425: CALL_OW 250
52429: PPUSH
52430: LD_VAR 0 1
52434: PPUSH
52435: CALL_OW 251
52439: PPUSH
52440: LD_VAR 0 2
52444: PPUSH
52445: CALL 25798 0 4
52449: PUSH
52450: LD_INT 4
52452: ARRAY
52453: ST_TO_ADDR
// end ;
52454: LD_VAR 0 3
52458: RET
// export function PlayerSeeMe ( unit ) ; begin
52459: LD_INT 0
52461: PPUSH
// result := See ( your_side , unit ) ;
52462: LD_ADDR_VAR 0 2
52466: PUSH
52467: LD_OWVAR 2
52471: PPUSH
52472: LD_VAR 0 1
52476: PPUSH
52477: CALL_OW 292
52481: ST_TO_ADDR
// end ;
52482: LD_VAR 0 2
52486: RET
// export function ReverseDir ( unit ) ; begin
52487: LD_INT 0
52489: PPUSH
// if not unit then
52490: LD_VAR 0 1
52494: NOT
52495: IFFALSE 52499
// exit ;
52497: GO 52522
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52499: LD_ADDR_VAR 0 2
52503: PUSH
52504: LD_VAR 0 1
52508: PPUSH
52509: CALL_OW 254
52513: PUSH
52514: LD_INT 3
52516: PLUS
52517: PUSH
52518: LD_INT 6
52520: MOD
52521: ST_TO_ADDR
// end ;
52522: LD_VAR 0 2
52526: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52527: LD_INT 0
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
// if not hexes then
52534: LD_VAR 0 2
52538: NOT
52539: IFFALSE 52543
// exit ;
52541: GO 52691
// dist := 9999 ;
52543: LD_ADDR_VAR 0 5
52547: PUSH
52548: LD_INT 9999
52550: ST_TO_ADDR
// for i = 1 to hexes do
52551: LD_ADDR_VAR 0 4
52555: PUSH
52556: DOUBLE
52557: LD_INT 1
52559: DEC
52560: ST_TO_ADDR
52561: LD_VAR 0 2
52565: PUSH
52566: FOR_TO
52567: IFFALSE 52679
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52569: LD_VAR 0 1
52573: PPUSH
52574: LD_VAR 0 2
52578: PUSH
52579: LD_VAR 0 4
52583: ARRAY
52584: PUSH
52585: LD_INT 1
52587: ARRAY
52588: PPUSH
52589: LD_VAR 0 2
52593: PUSH
52594: LD_VAR 0 4
52598: ARRAY
52599: PUSH
52600: LD_INT 2
52602: ARRAY
52603: PPUSH
52604: CALL_OW 297
52608: PUSH
52609: LD_VAR 0 5
52613: LESS
52614: IFFALSE 52677
// begin hex := hexes [ i ] ;
52616: LD_ADDR_VAR 0 7
52620: PUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_VAR 0 4
52630: ARRAY
52631: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52632: LD_ADDR_VAR 0 5
52636: PUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: LD_VAR 0 2
52646: PUSH
52647: LD_VAR 0 4
52651: ARRAY
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 2
52661: PUSH
52662: LD_VAR 0 4
52666: ARRAY
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PPUSH
52672: CALL_OW 297
52676: ST_TO_ADDR
// end ; end ;
52677: GO 52566
52679: POP
52680: POP
// result := hex ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_VAR 0 7
52690: ST_TO_ADDR
// end ;
52691: LD_VAR 0 3
52695: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52696: LD_INT 0
52698: PPUSH
52699: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52700: LD_VAR 0 1
52704: NOT
52705: PUSH
52706: LD_VAR 0 1
52710: PUSH
52711: LD_INT 21
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 23
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PPUSH
52735: CALL_OW 69
52739: IN
52740: NOT
52741: OR
52742: IFFALSE 52746
// exit ;
52744: GO 52793
// for i = 1 to 3 do
52746: LD_ADDR_VAR 0 3
52750: PUSH
52751: DOUBLE
52752: LD_INT 1
52754: DEC
52755: ST_TO_ADDR
52756: LD_INT 3
52758: PUSH
52759: FOR_TO
52760: IFFALSE 52791
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52762: LD_VAR 0 1
52766: PPUSH
52767: CALL_OW 250
52771: PPUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 251
52781: PPUSH
52782: LD_INT 1
52784: PPUSH
52785: CALL_OW 453
52789: GO 52759
52791: POP
52792: POP
// end ;
52793: LD_VAR 0 2
52797: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52798: LD_INT 0
52800: PPUSH
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52806: LD_VAR 0 1
52810: NOT
52811: PUSH
52812: LD_VAR 0 2
52816: NOT
52817: OR
52818: PUSH
52819: LD_VAR 0 1
52823: PPUSH
52824: CALL_OW 314
52828: OR
52829: IFFALSE 52833
// exit ;
52831: GO 53274
// x := GetX ( enemy_unit ) ;
52833: LD_ADDR_VAR 0 7
52837: PUSH
52838: LD_VAR 0 2
52842: PPUSH
52843: CALL_OW 250
52847: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52848: LD_ADDR_VAR 0 8
52852: PUSH
52853: LD_VAR 0 2
52857: PPUSH
52858: CALL_OW 251
52862: ST_TO_ADDR
// if not x or not y then
52863: LD_VAR 0 7
52867: NOT
52868: PUSH
52869: LD_VAR 0 8
52873: NOT
52874: OR
52875: IFFALSE 52879
// exit ;
52877: GO 53274
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52879: LD_ADDR_VAR 0 6
52883: PUSH
52884: LD_VAR 0 7
52888: PPUSH
52889: LD_INT 0
52891: PPUSH
52892: LD_INT 4
52894: PPUSH
52895: CALL_OW 272
52899: PUSH
52900: LD_VAR 0 8
52904: PPUSH
52905: LD_INT 0
52907: PPUSH
52908: LD_INT 4
52910: PPUSH
52911: CALL_OW 273
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_VAR 0 7
52924: PPUSH
52925: LD_INT 1
52927: PPUSH
52928: LD_INT 4
52930: PPUSH
52931: CALL_OW 272
52935: PUSH
52936: LD_VAR 0 8
52940: PPUSH
52941: LD_INT 1
52943: PPUSH
52944: LD_INT 4
52946: PPUSH
52947: CALL_OW 273
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_VAR 0 7
52960: PPUSH
52961: LD_INT 2
52963: PPUSH
52964: LD_INT 4
52966: PPUSH
52967: CALL_OW 272
52971: PUSH
52972: LD_VAR 0 8
52976: PPUSH
52977: LD_INT 2
52979: PPUSH
52980: LD_INT 4
52982: PPUSH
52983: CALL_OW 273
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_VAR 0 7
52996: PPUSH
52997: LD_INT 3
52999: PPUSH
53000: LD_INT 4
53002: PPUSH
53003: CALL_OW 272
53007: PUSH
53008: LD_VAR 0 8
53012: PPUSH
53013: LD_INT 3
53015: PPUSH
53016: LD_INT 4
53018: PPUSH
53019: CALL_OW 273
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_VAR 0 7
53032: PPUSH
53033: LD_INT 4
53035: PPUSH
53036: LD_INT 4
53038: PPUSH
53039: CALL_OW 272
53043: PUSH
53044: LD_VAR 0 8
53048: PPUSH
53049: LD_INT 4
53051: PPUSH
53052: LD_INT 4
53054: PPUSH
53055: CALL_OW 273
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_VAR 0 7
53068: PPUSH
53069: LD_INT 5
53071: PPUSH
53072: LD_INT 4
53074: PPUSH
53075: CALL_OW 272
53079: PUSH
53080: LD_VAR 0 8
53084: PPUSH
53085: LD_INT 5
53087: PPUSH
53088: LD_INT 4
53090: PPUSH
53091: CALL_OW 273
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// for i = tmp downto 1 do
53108: LD_ADDR_VAR 0 4
53112: PUSH
53113: DOUBLE
53114: LD_VAR 0 6
53118: INC
53119: ST_TO_ADDR
53120: LD_INT 1
53122: PUSH
53123: FOR_DOWNTO
53124: IFFALSE 53225
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53126: LD_VAR 0 6
53130: PUSH
53131: LD_VAR 0 4
53135: ARRAY
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PPUSH
53141: LD_VAR 0 6
53145: PUSH
53146: LD_VAR 0 4
53150: ARRAY
53151: PUSH
53152: LD_INT 2
53154: ARRAY
53155: PPUSH
53156: CALL_OW 488
53160: NOT
53161: PUSH
53162: LD_VAR 0 6
53166: PUSH
53167: LD_VAR 0 4
53171: ARRAY
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: PPUSH
53177: LD_VAR 0 6
53181: PUSH
53182: LD_VAR 0 4
53186: ARRAY
53187: PUSH
53188: LD_INT 2
53190: ARRAY
53191: PPUSH
53192: CALL_OW 428
53196: PUSH
53197: LD_INT 0
53199: NONEQUAL
53200: OR
53201: IFFALSE 53223
// tmp := Delete ( tmp , i ) ;
53203: LD_ADDR_VAR 0 6
53207: PUSH
53208: LD_VAR 0 6
53212: PPUSH
53213: LD_VAR 0 4
53217: PPUSH
53218: CALL_OW 3
53222: ST_TO_ADDR
53223: GO 53123
53225: POP
53226: POP
// j := GetClosestHex ( unit , tmp ) ;
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_VAR 0 1
53236: PPUSH
53237: LD_VAR 0 6
53241: PPUSH
53242: CALL 52527 0 2
53246: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53247: LD_VAR 0 1
53251: PPUSH
53252: LD_VAR 0 5
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: PPUSH
53261: LD_VAR 0 5
53265: PUSH
53266: LD_INT 2
53268: ARRAY
53269: PPUSH
53270: CALL_OW 111
// end ;
53274: LD_VAR 0 3
53278: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53279: LD_INT 0
53281: PPUSH
53282: PPUSH
53283: PPUSH
// uc_side = 0 ;
53284: LD_ADDR_OWVAR 20
53288: PUSH
53289: LD_INT 0
53291: ST_TO_ADDR
// uc_nation = 0 ;
53292: LD_ADDR_OWVAR 21
53296: PUSH
53297: LD_INT 0
53299: ST_TO_ADDR
// InitHc_All ( ) ;
53300: CALL_OW 584
// InitVc ;
53304: CALL_OW 20
// if mastodonts then
53308: LD_VAR 0 6
53312: IFFALSE 53379
// for i = 1 to mastodonts do
53314: LD_ADDR_VAR 0 11
53318: PUSH
53319: DOUBLE
53320: LD_INT 1
53322: DEC
53323: ST_TO_ADDR
53324: LD_VAR 0 6
53328: PUSH
53329: FOR_TO
53330: IFFALSE 53377
// begin vc_chassis := 31 ;
53332: LD_ADDR_OWVAR 37
53336: PUSH
53337: LD_INT 31
53339: ST_TO_ADDR
// vc_control := control_rider ;
53340: LD_ADDR_OWVAR 38
53344: PUSH
53345: LD_INT 4
53347: ST_TO_ADDR
// animal := CreateVehicle ;
53348: LD_ADDR_VAR 0 12
53352: PUSH
53353: CALL_OW 45
53357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53358: LD_VAR 0 12
53362: PPUSH
53363: LD_VAR 0 8
53367: PPUSH
53368: LD_INT 0
53370: PPUSH
53371: CALL 55567 0 3
// end ;
53375: GO 53329
53377: POP
53378: POP
// if horses then
53379: LD_VAR 0 5
53383: IFFALSE 53450
// for i = 1 to horses do
53385: LD_ADDR_VAR 0 11
53389: PUSH
53390: DOUBLE
53391: LD_INT 1
53393: DEC
53394: ST_TO_ADDR
53395: LD_VAR 0 5
53399: PUSH
53400: FOR_TO
53401: IFFALSE 53448
// begin hc_class := 21 ;
53403: LD_ADDR_OWVAR 28
53407: PUSH
53408: LD_INT 21
53410: ST_TO_ADDR
// hc_gallery :=  ;
53411: LD_ADDR_OWVAR 33
53415: PUSH
53416: LD_STRING 
53418: ST_TO_ADDR
// animal := CreateHuman ;
53419: LD_ADDR_VAR 0 12
53423: PUSH
53424: CALL_OW 44
53428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53429: LD_VAR 0 12
53433: PPUSH
53434: LD_VAR 0 8
53438: PPUSH
53439: LD_INT 0
53441: PPUSH
53442: CALL 55567 0 3
// end ;
53446: GO 53400
53448: POP
53449: POP
// if birds then
53450: LD_VAR 0 1
53454: IFFALSE 53521
// for i = 1 to birds do
53456: LD_ADDR_VAR 0 11
53460: PUSH
53461: DOUBLE
53462: LD_INT 1
53464: DEC
53465: ST_TO_ADDR
53466: LD_VAR 0 1
53470: PUSH
53471: FOR_TO
53472: IFFALSE 53519
// begin hc_class = 18 ;
53474: LD_ADDR_OWVAR 28
53478: PUSH
53479: LD_INT 18
53481: ST_TO_ADDR
// hc_gallery =  ;
53482: LD_ADDR_OWVAR 33
53486: PUSH
53487: LD_STRING 
53489: ST_TO_ADDR
// animal := CreateHuman ;
53490: LD_ADDR_VAR 0 12
53494: PUSH
53495: CALL_OW 44
53499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53500: LD_VAR 0 12
53504: PPUSH
53505: LD_VAR 0 8
53509: PPUSH
53510: LD_INT 0
53512: PPUSH
53513: CALL 55567 0 3
// end ;
53517: GO 53471
53519: POP
53520: POP
// if tigers then
53521: LD_VAR 0 2
53525: IFFALSE 53609
// for i = 1 to tigers do
53527: LD_ADDR_VAR 0 11
53531: PUSH
53532: DOUBLE
53533: LD_INT 1
53535: DEC
53536: ST_TO_ADDR
53537: LD_VAR 0 2
53541: PUSH
53542: FOR_TO
53543: IFFALSE 53607
// begin hc_class = class_tiger ;
53545: LD_ADDR_OWVAR 28
53549: PUSH
53550: LD_INT 14
53552: ST_TO_ADDR
// hc_gallery =  ;
53553: LD_ADDR_OWVAR 33
53557: PUSH
53558: LD_STRING 
53560: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53561: LD_ADDR_OWVAR 35
53565: PUSH
53566: LD_INT 7
53568: NEG
53569: PPUSH
53570: LD_INT 7
53572: PPUSH
53573: CALL_OW 12
53577: ST_TO_ADDR
// animal := CreateHuman ;
53578: LD_ADDR_VAR 0 12
53582: PUSH
53583: CALL_OW 44
53587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53588: LD_VAR 0 12
53592: PPUSH
53593: LD_VAR 0 8
53597: PPUSH
53598: LD_INT 0
53600: PPUSH
53601: CALL 55567 0 3
// end ;
53605: GO 53542
53607: POP
53608: POP
// if apemans then
53609: LD_VAR 0 3
53613: IFFALSE 53736
// for i = 1 to apemans do
53615: LD_ADDR_VAR 0 11
53619: PUSH
53620: DOUBLE
53621: LD_INT 1
53623: DEC
53624: ST_TO_ADDR
53625: LD_VAR 0 3
53629: PUSH
53630: FOR_TO
53631: IFFALSE 53734
// begin hc_class = class_apeman ;
53633: LD_ADDR_OWVAR 28
53637: PUSH
53638: LD_INT 12
53640: ST_TO_ADDR
// hc_gallery =  ;
53641: LD_ADDR_OWVAR 33
53645: PUSH
53646: LD_STRING 
53648: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53649: LD_ADDR_OWVAR 35
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PPUSH
53658: LD_INT 2
53660: PPUSH
53661: CALL_OW 12
53665: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53666: LD_ADDR_OWVAR 31
53670: PUSH
53671: LD_INT 1
53673: PPUSH
53674: LD_INT 3
53676: PPUSH
53677: CALL_OW 12
53681: PUSH
53682: LD_INT 1
53684: PPUSH
53685: LD_INT 3
53687: PPUSH
53688: CALL_OW 12
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: ST_TO_ADDR
// animal := CreateHuman ;
53705: LD_ADDR_VAR 0 12
53709: PUSH
53710: CALL_OW 44
53714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53715: LD_VAR 0 12
53719: PPUSH
53720: LD_VAR 0 8
53724: PPUSH
53725: LD_INT 0
53727: PPUSH
53728: CALL 55567 0 3
// end ;
53732: GO 53630
53734: POP
53735: POP
// if enchidnas then
53736: LD_VAR 0 4
53740: IFFALSE 53807
// for i = 1 to enchidnas do
53742: LD_ADDR_VAR 0 11
53746: PUSH
53747: DOUBLE
53748: LD_INT 1
53750: DEC
53751: ST_TO_ADDR
53752: LD_VAR 0 4
53756: PUSH
53757: FOR_TO
53758: IFFALSE 53805
// begin hc_class = 13 ;
53760: LD_ADDR_OWVAR 28
53764: PUSH
53765: LD_INT 13
53767: ST_TO_ADDR
// hc_gallery =  ;
53768: LD_ADDR_OWVAR 33
53772: PUSH
53773: LD_STRING 
53775: ST_TO_ADDR
// animal := CreateHuman ;
53776: LD_ADDR_VAR 0 12
53780: PUSH
53781: CALL_OW 44
53785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53786: LD_VAR 0 12
53790: PPUSH
53791: LD_VAR 0 8
53795: PPUSH
53796: LD_INT 0
53798: PPUSH
53799: CALL 55567 0 3
// end ;
53803: GO 53757
53805: POP
53806: POP
// if fishes then
53807: LD_VAR 0 7
53811: IFFALSE 53878
// for i = 1 to fishes do
53813: LD_ADDR_VAR 0 11
53817: PUSH
53818: DOUBLE
53819: LD_INT 1
53821: DEC
53822: ST_TO_ADDR
53823: LD_VAR 0 7
53827: PUSH
53828: FOR_TO
53829: IFFALSE 53876
// begin hc_class = 20 ;
53831: LD_ADDR_OWVAR 28
53835: PUSH
53836: LD_INT 20
53838: ST_TO_ADDR
// hc_gallery =  ;
53839: LD_ADDR_OWVAR 33
53843: PUSH
53844: LD_STRING 
53846: ST_TO_ADDR
// animal := CreateHuman ;
53847: LD_ADDR_VAR 0 12
53851: PUSH
53852: CALL_OW 44
53856: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53857: LD_VAR 0 12
53861: PPUSH
53862: LD_VAR 0 9
53866: PPUSH
53867: LD_INT 0
53869: PPUSH
53870: CALL 55567 0 3
// end ;
53874: GO 53828
53876: POP
53877: POP
// end ;
53878: LD_VAR 0 10
53882: RET
// export function WantHeal ( sci , unit ) ; begin
53883: LD_INT 0
53885: PPUSH
// if GetTaskList ( sci ) > 0 then
53886: LD_VAR 0 1
53890: PPUSH
53891: CALL_OW 437
53895: PUSH
53896: LD_INT 0
53898: GREATER
53899: IFFALSE 53969
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 437
53910: PUSH
53911: LD_INT 1
53913: ARRAY
53914: PUSH
53915: LD_INT 1
53917: ARRAY
53918: PUSH
53919: LD_STRING l
53921: EQUAL
53922: PUSH
53923: LD_VAR 0 1
53927: PPUSH
53928: CALL_OW 437
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_INT 4
53939: ARRAY
53940: PUSH
53941: LD_VAR 0 2
53945: EQUAL
53946: AND
53947: IFFALSE 53959
// result := true else
53949: LD_ADDR_VAR 0 3
53953: PUSH
53954: LD_INT 1
53956: ST_TO_ADDR
53957: GO 53967
// result := false ;
53959: LD_ADDR_VAR 0 3
53963: PUSH
53964: LD_INT 0
53966: ST_TO_ADDR
// end else
53967: GO 53977
// result := false ;
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 0
53976: ST_TO_ADDR
// end ;
53977: LD_VAR 0 3
53981: RET
// export function HealTarget ( sci ) ; begin
53982: LD_INT 0
53984: PPUSH
// if not sci then
53985: LD_VAR 0 1
53989: NOT
53990: IFFALSE 53994
// exit ;
53992: GO 54059
// result := 0 ;
53994: LD_ADDR_VAR 0 2
53998: PUSH
53999: LD_INT 0
54001: ST_TO_ADDR
// if GetTaskList ( sci ) then
54002: LD_VAR 0 1
54006: PPUSH
54007: CALL_OW 437
54011: IFFALSE 54059
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54013: LD_VAR 0 1
54017: PPUSH
54018: CALL_OW 437
54022: PUSH
54023: LD_INT 1
54025: ARRAY
54026: PUSH
54027: LD_INT 1
54029: ARRAY
54030: PUSH
54031: LD_STRING l
54033: EQUAL
54034: IFFALSE 54059
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54036: LD_ADDR_VAR 0 2
54040: PUSH
54041: LD_VAR 0 1
54045: PPUSH
54046: CALL_OW 437
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PUSH
54055: LD_INT 4
54057: ARRAY
54058: ST_TO_ADDR
// end ;
54059: LD_VAR 0 2
54063: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54064: LD_INT 0
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
// if not base_units then
54070: LD_VAR 0 1
54074: NOT
54075: IFFALSE 54079
// exit ;
54077: GO 54166
// result := false ;
54079: LD_ADDR_VAR 0 2
54083: PUSH
54084: LD_INT 0
54086: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54087: LD_ADDR_VAR 0 5
54091: PUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: LD_INT 21
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PPUSH
54107: CALL_OW 72
54111: ST_TO_ADDR
// if not tmp then
54112: LD_VAR 0 5
54116: NOT
54117: IFFALSE 54121
// exit ;
54119: GO 54166
// for i in tmp do
54121: LD_ADDR_VAR 0 3
54125: PUSH
54126: LD_VAR 0 5
54130: PUSH
54131: FOR_IN
54132: IFFALSE 54164
// begin result := EnemyInRange ( i , 22 ) ;
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: LD_VAR 0 3
54143: PPUSH
54144: LD_INT 22
54146: PPUSH
54147: CALL 52402 0 2
54151: ST_TO_ADDR
// if result then
54152: LD_VAR 0 2
54156: IFFALSE 54162
// exit ;
54158: POP
54159: POP
54160: GO 54166
// end ;
54162: GO 54131
54164: POP
54165: POP
// end ;
54166: LD_VAR 0 2
54170: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54171: LD_INT 0
54173: PPUSH
54174: PPUSH
// if not units then
54175: LD_VAR 0 1
54179: NOT
54180: IFFALSE 54184
// exit ;
54182: GO 54254
// result := [ ] ;
54184: LD_ADDR_VAR 0 3
54188: PUSH
54189: EMPTY
54190: ST_TO_ADDR
// for i in units do
54191: LD_ADDR_VAR 0 4
54195: PUSH
54196: LD_VAR 0 1
54200: PUSH
54201: FOR_IN
54202: IFFALSE 54252
// if GetTag ( i ) = tag then
54204: LD_VAR 0 4
54208: PPUSH
54209: CALL_OW 110
54213: PUSH
54214: LD_VAR 0 2
54218: EQUAL
54219: IFFALSE 54250
// result := Replace ( result , result + 1 , i ) ;
54221: LD_ADDR_VAR 0 3
54225: PUSH
54226: LD_VAR 0 3
54230: PPUSH
54231: LD_VAR 0 3
54235: PUSH
54236: LD_INT 1
54238: PLUS
54239: PPUSH
54240: LD_VAR 0 4
54244: PPUSH
54245: CALL_OW 1
54249: ST_TO_ADDR
54250: GO 54201
54252: POP
54253: POP
// end ;
54254: LD_VAR 0 3
54258: RET
// export function IsDriver ( un ) ; begin
54259: LD_INT 0
54261: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54262: LD_ADDR_VAR 0 2
54266: PUSH
54267: LD_VAR 0 1
54271: PUSH
54272: LD_INT 55
54274: PUSH
54275: EMPTY
54276: LIST
54277: PPUSH
54278: CALL_OW 69
54282: IN
54283: ST_TO_ADDR
// end ;
54284: LD_VAR 0 2
54288: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54289: LD_INT 0
54291: PPUSH
54292: PPUSH
// list := [ ] ;
54293: LD_ADDR_VAR 0 5
54297: PUSH
54298: EMPTY
54299: ST_TO_ADDR
// case d of 0 :
54300: LD_VAR 0 3
54304: PUSH
54305: LD_INT 0
54307: DOUBLE
54308: EQUAL
54309: IFTRUE 54313
54311: GO 54446
54313: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54314: LD_ADDR_VAR 0 5
54318: PUSH
54319: LD_VAR 0 1
54323: PUSH
54324: LD_INT 4
54326: MINUS
54327: PUSH
54328: LD_VAR 0 2
54332: PUSH
54333: LD_INT 4
54335: MINUS
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: PUSH
54345: LD_VAR 0 1
54349: PUSH
54350: LD_INT 3
54352: MINUS
54353: PUSH
54354: LD_VAR 0 2
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: PUSH
54367: LD_VAR 0 1
54371: PUSH
54372: LD_INT 4
54374: PLUS
54375: PUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 4
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: PUSH
54389: LD_VAR 0 1
54393: PUSH
54394: LD_INT 3
54396: PLUS
54397: PUSH
54398: LD_VAR 0 2
54402: PUSH
54403: LD_INT 3
54405: PLUS
54406: PUSH
54407: LD_INT 5
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: PUSH
54415: LD_VAR 0 1
54419: PUSH
54420: LD_VAR 0 2
54424: PUSH
54425: LD_INT 4
54427: PLUS
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
// end ; 1 :
54444: GO 55144
54446: LD_INT 1
54448: DOUBLE
54449: EQUAL
54450: IFTRUE 54454
54452: GO 54587
54454: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54455: LD_ADDR_VAR 0 5
54459: PUSH
54460: LD_VAR 0 1
54464: PUSH
54465: LD_VAR 0 2
54469: PUSH
54470: LD_INT 4
54472: MINUS
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: PUSH
54482: LD_VAR 0 1
54486: PUSH
54487: LD_INT 3
54489: MINUS
54490: PUSH
54491: LD_VAR 0 2
54495: PUSH
54496: LD_INT 3
54498: MINUS
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: PUSH
54508: LD_VAR 0 1
54512: PUSH
54513: LD_INT 4
54515: MINUS
54516: PUSH
54517: LD_VAR 0 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: PUSH
54530: LD_VAR 0 1
54534: PUSH
54535: LD_VAR 0 2
54539: PUSH
54540: LD_INT 3
54542: PLUS
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: LD_VAR 0 1
54556: PUSH
54557: LD_INT 4
54559: PLUS
54560: PUSH
54561: LD_VAR 0 2
54565: PUSH
54566: LD_INT 4
54568: PLUS
54569: PUSH
54570: LD_INT 5
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: ST_TO_ADDR
// end ; 2 :
54585: GO 55144
54587: LD_INT 2
54589: DOUBLE
54590: EQUAL
54591: IFTRUE 54595
54593: GO 54724
54595: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_VAR 0 1
54605: PUSH
54606: LD_VAR 0 2
54610: PUSH
54611: LD_INT 3
54613: MINUS
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 1
54627: PUSH
54628: LD_INT 4
54630: PLUS
54631: PUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_INT 4
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 1
54649: PUSH
54650: LD_VAR 0 2
54654: PUSH
54655: LD_INT 4
54657: PLUS
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: PUSH
54667: LD_VAR 0 1
54671: PUSH
54672: LD_INT 3
54674: MINUS
54675: PUSH
54676: LD_VAR 0 2
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 4
54696: MINUS
54697: PUSH
54698: LD_VAR 0 2
54702: PUSH
54703: LD_INT 4
54705: MINUS
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// end ; 3 :
54722: GO 55144
54724: LD_INT 3
54726: DOUBLE
54727: EQUAL
54728: IFTRUE 54732
54730: GO 54865
54732: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54733: LD_ADDR_VAR 0 5
54737: PUSH
54738: LD_VAR 0 1
54742: PUSH
54743: LD_INT 3
54745: PLUS
54746: PUSH
54747: LD_VAR 0 2
54751: PUSH
54752: LD_INT 4
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: PUSH
54760: LD_VAR 0 1
54764: PUSH
54765: LD_INT 4
54767: PLUS
54768: PUSH
54769: LD_VAR 0 2
54773: PUSH
54774: LD_INT 4
54776: PLUS
54777: PUSH
54778: LD_INT 5
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: PUSH
54786: LD_VAR 0 1
54790: PUSH
54791: LD_INT 4
54793: MINUS
54794: PUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: PUSH
54808: LD_VAR 0 1
54812: PUSH
54813: LD_VAR 0 2
54817: PUSH
54818: LD_INT 4
54820: MINUS
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: PUSH
54830: LD_VAR 0 1
54834: PUSH
54835: LD_INT 3
54837: MINUS
54838: PUSH
54839: LD_VAR 0 2
54843: PUSH
54844: LD_INT 3
54846: MINUS
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// end ; 4 :
54863: GO 55144
54865: LD_INT 4
54867: DOUBLE
54868: EQUAL
54869: IFTRUE 54873
54871: GO 55006
54873: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54874: LD_ADDR_VAR 0 5
54878: PUSH
54879: LD_VAR 0 1
54883: PUSH
54884: LD_VAR 0 2
54888: PUSH
54889: LD_INT 4
54891: PLUS
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: PUSH
54901: LD_VAR 0 1
54905: PUSH
54906: LD_INT 3
54908: PLUS
54909: PUSH
54910: LD_VAR 0 2
54914: PUSH
54915: LD_INT 3
54917: PLUS
54918: PUSH
54919: LD_INT 5
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: PUSH
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 4
54934: PLUS
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 4
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: PUSH
54949: LD_VAR 0 1
54953: PUSH
54954: LD_VAR 0 2
54958: PUSH
54959: LD_INT 3
54961: MINUS
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: PUSH
54971: LD_VAR 0 1
54975: PUSH
54976: LD_INT 4
54978: MINUS
54979: PUSH
54980: LD_VAR 0 2
54984: PUSH
54985: LD_INT 4
54987: MINUS
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// end ; 5 :
55004: GO 55144
55006: LD_INT 5
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55014
55012: GO 55143
55014: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55015: LD_ADDR_VAR 0 5
55019: PUSH
55020: LD_VAR 0 1
55024: PUSH
55025: LD_INT 4
55027: MINUS
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: PUSH
55042: LD_VAR 0 1
55046: PUSH
55047: LD_VAR 0 2
55051: PUSH
55052: LD_INT 4
55054: MINUS
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: PUSH
55064: LD_VAR 0 1
55068: PUSH
55069: LD_INT 4
55071: PLUS
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 4
55080: PLUS
55081: PUSH
55082: LD_INT 5
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PUSH
55090: LD_VAR 0 1
55094: PUSH
55095: LD_INT 3
55097: PLUS
55098: PUSH
55099: LD_VAR 0 2
55103: PUSH
55104: LD_INT 4
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: PUSH
55112: LD_VAR 0 1
55116: PUSH
55117: LD_VAR 0 2
55121: PUSH
55122: LD_INT 3
55124: PLUS
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// end ; end ;
55141: GO 55144
55143: POP
// result := list ;
55144: LD_ADDR_VAR 0 4
55148: PUSH
55149: LD_VAR 0 5
55153: ST_TO_ADDR
// end ;
55154: LD_VAR 0 4
55158: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55159: LD_INT 0
55161: PPUSH
55162: PPUSH
55163: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55164: LD_VAR 0 1
55168: NOT
55169: PUSH
55170: LD_VAR 0 2
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 4
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: IN
55193: NOT
55194: OR
55195: IFFALSE 55199
// exit ;
55197: GO 55291
// tmp := [ ] ;
55199: LD_ADDR_VAR 0 5
55203: PUSH
55204: EMPTY
55205: ST_TO_ADDR
// for i in units do
55206: LD_ADDR_VAR 0 4
55210: PUSH
55211: LD_VAR 0 1
55215: PUSH
55216: FOR_IN
55217: IFFALSE 55260
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55219: LD_ADDR_VAR 0 5
55223: PUSH
55224: LD_VAR 0 5
55228: PPUSH
55229: LD_VAR 0 5
55233: PUSH
55234: LD_INT 1
55236: PLUS
55237: PPUSH
55238: LD_VAR 0 4
55242: PPUSH
55243: LD_VAR 0 2
55247: PPUSH
55248: CALL_OW 259
55252: PPUSH
55253: CALL_OW 2
55257: ST_TO_ADDR
55258: GO 55216
55260: POP
55261: POP
// if not tmp then
55262: LD_VAR 0 5
55266: NOT
55267: IFFALSE 55271
// exit ;
55269: GO 55291
// result := SortListByListDesc ( units , tmp ) ;
55271: LD_ADDR_VAR 0 3
55275: PUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: LD_VAR 0 5
55285: PPUSH
55286: CALL_OW 77
55290: ST_TO_ADDR
// end ;
55291: LD_VAR 0 3
55295: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55296: LD_INT 0
55298: PPUSH
55299: PPUSH
55300: PPUSH
// result := false ;
55301: LD_ADDR_VAR 0 3
55305: PUSH
55306: LD_INT 0
55308: ST_TO_ADDR
// x := GetX ( building ) ;
55309: LD_ADDR_VAR 0 4
55313: PUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: CALL_OW 250
55323: ST_TO_ADDR
// y := GetY ( building ) ;
55324: LD_ADDR_VAR 0 5
55328: PUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: CALL_OW 251
55338: ST_TO_ADDR
// if not building or not x or not y then
55339: LD_VAR 0 2
55343: NOT
55344: PUSH
55345: LD_VAR 0 4
55349: NOT
55350: OR
55351: PUSH
55352: LD_VAR 0 5
55356: NOT
55357: OR
55358: IFFALSE 55362
// exit ;
55360: GO 55454
// if GetTaskList ( unit ) then
55362: LD_VAR 0 1
55366: PPUSH
55367: CALL_OW 437
55371: IFFALSE 55454
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55373: LD_STRING e
55375: PUSH
55376: LD_VAR 0 1
55380: PPUSH
55381: CALL_OW 437
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: PUSH
55390: LD_INT 1
55392: ARRAY
55393: EQUAL
55394: PUSH
55395: LD_VAR 0 4
55399: PUSH
55400: LD_VAR 0 1
55404: PPUSH
55405: CALL_OW 437
55409: PUSH
55410: LD_INT 1
55412: ARRAY
55413: PUSH
55414: LD_INT 2
55416: ARRAY
55417: EQUAL
55418: AND
55419: PUSH
55420: LD_VAR 0 5
55424: PUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: CALL_OW 437
55434: PUSH
55435: LD_INT 1
55437: ARRAY
55438: PUSH
55439: LD_INT 3
55441: ARRAY
55442: EQUAL
55443: AND
55444: IFFALSE 55454
// result := true end ;
55446: LD_ADDR_VAR 0 3
55450: PUSH
55451: LD_INT 1
55453: ST_TO_ADDR
// end ;
55454: LD_VAR 0 3
55458: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55459: LD_INT 0
55461: PPUSH
// result := false ;
55462: LD_ADDR_VAR 0 4
55466: PUSH
55467: LD_INT 0
55469: ST_TO_ADDR
// if GetTaskList ( unit ) then
55470: LD_VAR 0 1
55474: PPUSH
55475: CALL_OW 437
55479: IFFALSE 55562
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55481: LD_STRING M
55483: PUSH
55484: LD_VAR 0 1
55488: PPUSH
55489: CALL_OW 437
55493: PUSH
55494: LD_INT 1
55496: ARRAY
55497: PUSH
55498: LD_INT 1
55500: ARRAY
55501: EQUAL
55502: PUSH
55503: LD_VAR 0 2
55507: PUSH
55508: LD_VAR 0 1
55512: PPUSH
55513: CALL_OW 437
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: LD_INT 2
55524: ARRAY
55525: EQUAL
55526: AND
55527: PUSH
55528: LD_VAR 0 3
55532: PUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: CALL_OW 437
55542: PUSH
55543: LD_INT 1
55545: ARRAY
55546: PUSH
55547: LD_INT 3
55549: ARRAY
55550: EQUAL
55551: AND
55552: IFFALSE 55562
// result := true ;
55554: LD_ADDR_VAR 0 4
55558: PUSH
55559: LD_INT 1
55561: ST_TO_ADDR
// end ; end ;
55562: LD_VAR 0 4
55566: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
// if not unit or not area then
55573: LD_VAR 0 1
55577: NOT
55578: PUSH
55579: LD_VAR 0 2
55583: NOT
55584: OR
55585: IFFALSE 55589
// exit ;
55587: GO 55753
// tmp := AreaToList ( area , i ) ;
55589: LD_ADDR_VAR 0 6
55593: PUSH
55594: LD_VAR 0 2
55598: PPUSH
55599: LD_VAR 0 5
55603: PPUSH
55604: CALL_OW 517
55608: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55609: LD_ADDR_VAR 0 5
55613: PUSH
55614: DOUBLE
55615: LD_INT 1
55617: DEC
55618: ST_TO_ADDR
55619: LD_VAR 0 6
55623: PUSH
55624: LD_INT 1
55626: ARRAY
55627: PUSH
55628: FOR_TO
55629: IFFALSE 55751
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55631: LD_ADDR_VAR 0 7
55635: PUSH
55636: LD_VAR 0 6
55640: PUSH
55641: LD_INT 1
55643: ARRAY
55644: PUSH
55645: LD_VAR 0 5
55649: ARRAY
55650: PUSH
55651: LD_VAR 0 6
55655: PUSH
55656: LD_INT 2
55658: ARRAY
55659: PUSH
55660: LD_VAR 0 5
55664: ARRAY
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55670: LD_VAR 0 7
55674: PUSH
55675: LD_INT 1
55677: ARRAY
55678: PPUSH
55679: LD_VAR 0 7
55683: PUSH
55684: LD_INT 2
55686: ARRAY
55687: PPUSH
55688: CALL_OW 428
55692: PUSH
55693: LD_INT 0
55695: EQUAL
55696: IFFALSE 55749
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55698: LD_VAR 0 1
55702: PPUSH
55703: LD_VAR 0 7
55707: PUSH
55708: LD_INT 1
55710: ARRAY
55711: PPUSH
55712: LD_VAR 0 7
55716: PUSH
55717: LD_INT 2
55719: ARRAY
55720: PPUSH
55721: LD_VAR 0 3
55725: PPUSH
55726: CALL_OW 48
// result := IsPlaced ( unit ) ;
55730: LD_ADDR_VAR 0 4
55734: PUSH
55735: LD_VAR 0 1
55739: PPUSH
55740: CALL_OW 305
55744: ST_TO_ADDR
// exit ;
55745: POP
55746: POP
55747: GO 55753
// end ; end ;
55749: GO 55628
55751: POP
55752: POP
// end ;
55753: LD_VAR 0 4
55757: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55758: LD_INT 0
55760: PPUSH
55761: PPUSH
55762: PPUSH
// if not side or side > 8 then
55763: LD_VAR 0 1
55767: NOT
55768: PUSH
55769: LD_VAR 0 1
55773: PUSH
55774: LD_INT 8
55776: GREATER
55777: OR
55778: IFFALSE 55782
// exit ;
55780: GO 55969
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55782: LD_ADDR_VAR 0 4
55786: PUSH
55787: LD_INT 22
55789: PUSH
55790: LD_VAR 0 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 21
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PPUSH
55813: CALL_OW 69
55817: ST_TO_ADDR
// if not tmp then
55818: LD_VAR 0 4
55822: NOT
55823: IFFALSE 55827
// exit ;
55825: GO 55969
// enable_addtolog := true ;
55827: LD_ADDR_OWVAR 81
55831: PUSH
55832: LD_INT 1
55834: ST_TO_ADDR
// AddToLog ( [ ) ;
55835: LD_STRING [
55837: PPUSH
55838: CALL_OW 561
// for i in tmp do
55842: LD_ADDR_VAR 0 3
55846: PUSH
55847: LD_VAR 0 4
55851: PUSH
55852: FOR_IN
55853: IFFALSE 55960
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55855: LD_STRING [
55857: PUSH
55858: LD_VAR 0 3
55862: PPUSH
55863: CALL_OW 266
55867: STR
55868: PUSH
55869: LD_STRING , 
55871: STR
55872: PUSH
55873: LD_VAR 0 3
55877: PPUSH
55878: CALL_OW 250
55882: STR
55883: PUSH
55884: LD_STRING , 
55886: STR
55887: PUSH
55888: LD_VAR 0 3
55892: PPUSH
55893: CALL_OW 251
55897: STR
55898: PUSH
55899: LD_STRING , 
55901: STR
55902: PUSH
55903: LD_VAR 0 3
55907: PPUSH
55908: CALL_OW 254
55912: STR
55913: PUSH
55914: LD_STRING , 
55916: STR
55917: PUSH
55918: LD_VAR 0 3
55922: PPUSH
55923: LD_INT 1
55925: PPUSH
55926: CALL_OW 268
55930: STR
55931: PUSH
55932: LD_STRING , 
55934: STR
55935: PUSH
55936: LD_VAR 0 3
55940: PPUSH
55941: LD_INT 2
55943: PPUSH
55944: CALL_OW 268
55948: STR
55949: PUSH
55950: LD_STRING ],
55952: STR
55953: PPUSH
55954: CALL_OW 561
// end ;
55958: GO 55852
55960: POP
55961: POP
// AddToLog ( ]; ) ;
55962: LD_STRING ];
55964: PPUSH
55965: CALL_OW 561
// end ;
55969: LD_VAR 0 2
55973: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55974: LD_INT 0
55976: PPUSH
55977: PPUSH
55978: PPUSH
55979: PPUSH
55980: PPUSH
// if not area or not rate or not max then
55981: LD_VAR 0 1
55985: NOT
55986: PUSH
55987: LD_VAR 0 2
55991: NOT
55992: OR
55993: PUSH
55994: LD_VAR 0 4
55998: NOT
55999: OR
56000: IFFALSE 56004
// exit ;
56002: GO 56196
// while 1 do
56004: LD_INT 1
56006: IFFALSE 56196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56008: LD_ADDR_VAR 0 9
56012: PUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: LD_INT 1
56020: PPUSH
56021: CALL_OW 287
56025: PUSH
56026: LD_INT 10
56028: MUL
56029: ST_TO_ADDR
// r := rate / 10 ;
56030: LD_ADDR_VAR 0 7
56034: PUSH
56035: LD_VAR 0 2
56039: PUSH
56040: LD_INT 10
56042: DIVREAL
56043: ST_TO_ADDR
// time := 1 1$00 ;
56044: LD_ADDR_VAR 0 8
56048: PUSH
56049: LD_INT 2100
56051: ST_TO_ADDR
// if amount < min then
56052: LD_VAR 0 9
56056: PUSH
56057: LD_VAR 0 3
56061: LESS
56062: IFFALSE 56080
// r := r * 2 else
56064: LD_ADDR_VAR 0 7
56068: PUSH
56069: LD_VAR 0 7
56073: PUSH
56074: LD_INT 2
56076: MUL
56077: ST_TO_ADDR
56078: GO 56106
// if amount > max then
56080: LD_VAR 0 9
56084: PUSH
56085: LD_VAR 0 4
56089: GREATER
56090: IFFALSE 56106
// r := r / 2 ;
56092: LD_ADDR_VAR 0 7
56096: PUSH
56097: LD_VAR 0 7
56101: PUSH
56102: LD_INT 2
56104: DIVREAL
56105: ST_TO_ADDR
// time := time / r ;
56106: LD_ADDR_VAR 0 8
56110: PUSH
56111: LD_VAR 0 8
56115: PUSH
56116: LD_VAR 0 7
56120: DIVREAL
56121: ST_TO_ADDR
// if time < 0 then
56122: LD_VAR 0 8
56126: PUSH
56127: LD_INT 0
56129: LESS
56130: IFFALSE 56147
// time := time * - 1 ;
56132: LD_ADDR_VAR 0 8
56136: PUSH
56137: LD_VAR 0 8
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: MUL
56146: ST_TO_ADDR
// wait ( time ) ;
56147: LD_VAR 0 8
56151: PPUSH
56152: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56156: LD_INT 35
56158: PPUSH
56159: LD_INT 875
56161: PPUSH
56162: CALL_OW 12
56166: PPUSH
56167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56171: LD_INT 1
56173: PPUSH
56174: LD_INT 5
56176: PPUSH
56177: CALL_OW 12
56181: PPUSH
56182: LD_VAR 0 1
56186: PPUSH
56187: LD_INT 1
56189: PPUSH
56190: CALL_OW 55
// end ;
56194: GO 56004
// end ;
56196: LD_VAR 0 5
56200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56201: LD_INT 0
56203: PPUSH
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
56208: PPUSH
56209: PPUSH
56210: PPUSH
// if not turrets or not factories then
56211: LD_VAR 0 1
56215: NOT
56216: PUSH
56217: LD_VAR 0 2
56221: NOT
56222: OR
56223: IFFALSE 56227
// exit ;
56225: GO 56534
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56227: LD_ADDR_VAR 0 10
56231: PUSH
56232: LD_INT 5
56234: PUSH
56235: LD_INT 6
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 5
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 24
56269: PUSH
56270: LD_INT 25
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 23
56279: PUSH
56280: LD_INT 27
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 42
56293: PUSH
56294: LD_INT 43
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 44
56303: PUSH
56304: LD_INT 46
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 45
56313: PUSH
56314: LD_INT 47
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// result := [ ] ;
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: EMPTY
56337: ST_TO_ADDR
// for i in turrets do
56338: LD_ADDR_VAR 0 4
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: FOR_IN
56349: IFFALSE 56532
// begin nat := GetNation ( i ) ;
56351: LD_ADDR_VAR 0 7
56355: PUSH
56356: LD_VAR 0 4
56360: PPUSH
56361: CALL_OW 248
56365: ST_TO_ADDR
// weapon := 0 ;
56366: LD_ADDR_VAR 0 8
56370: PUSH
56371: LD_INT 0
56373: ST_TO_ADDR
// if not nat then
56374: LD_VAR 0 7
56378: NOT
56379: IFFALSE 56383
// continue ;
56381: GO 56348
// for j in list [ nat ] do
56383: LD_ADDR_VAR 0 5
56387: PUSH
56388: LD_VAR 0 10
56392: PUSH
56393: LD_VAR 0 7
56397: ARRAY
56398: PUSH
56399: FOR_IN
56400: IFFALSE 56441
// if GetBWeapon ( i ) = j [ 1 ] then
56402: LD_VAR 0 4
56406: PPUSH
56407: CALL_OW 269
56411: PUSH
56412: LD_VAR 0 5
56416: PUSH
56417: LD_INT 1
56419: ARRAY
56420: EQUAL
56421: IFFALSE 56439
// begin weapon := j [ 2 ] ;
56423: LD_ADDR_VAR 0 8
56427: PUSH
56428: LD_VAR 0 5
56432: PUSH
56433: LD_INT 2
56435: ARRAY
56436: ST_TO_ADDR
// break ;
56437: GO 56441
// end ;
56439: GO 56399
56441: POP
56442: POP
// if not weapon then
56443: LD_VAR 0 8
56447: NOT
56448: IFFALSE 56452
// continue ;
56450: GO 56348
// for k in factories do
56452: LD_ADDR_VAR 0 6
56456: PUSH
56457: LD_VAR 0 2
56461: PUSH
56462: FOR_IN
56463: IFFALSE 56528
// begin weapons := AvailableWeaponList ( k ) ;
56465: LD_ADDR_VAR 0 9
56469: PUSH
56470: LD_VAR 0 6
56474: PPUSH
56475: CALL_OW 478
56479: ST_TO_ADDR
// if not weapons then
56480: LD_VAR 0 9
56484: NOT
56485: IFFALSE 56489
// continue ;
56487: GO 56462
// if weapon in weapons then
56489: LD_VAR 0 8
56493: PUSH
56494: LD_VAR 0 9
56498: IN
56499: IFFALSE 56526
// begin result := [ i , weapon ] ;
56501: LD_ADDR_VAR 0 3
56505: PUSH
56506: LD_VAR 0 4
56510: PUSH
56511: LD_VAR 0 8
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// exit ;
56520: POP
56521: POP
56522: POP
56523: POP
56524: GO 56534
// end ; end ;
56526: GO 56462
56528: POP
56529: POP
// end ;
56530: GO 56348
56532: POP
56533: POP
// end ;
56534: LD_VAR 0 3
56538: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56539: LD_INT 0
56541: PPUSH
// if not side or side > 8 then
56542: LD_VAR 0 3
56546: NOT
56547: PUSH
56548: LD_VAR 0 3
56552: PUSH
56553: LD_INT 8
56555: GREATER
56556: OR
56557: IFFALSE 56561
// exit ;
56559: GO 56620
// if not range then
56561: LD_VAR 0 4
56565: NOT
56566: IFFALSE 56577
// range := - 12 ;
56568: LD_ADDR_VAR 0 4
56572: PUSH
56573: LD_INT 12
56575: NEG
56576: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56577: LD_VAR 0 1
56581: PPUSH
56582: LD_VAR 0 2
56586: PPUSH
56587: LD_VAR 0 3
56591: PPUSH
56592: LD_VAR 0 4
56596: PPUSH
56597: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_VAR 0 2
56610: PPUSH
56611: LD_VAR 0 3
56615: PPUSH
56616: CALL_OW 331
// end ;
56620: LD_VAR 0 5
56624: RET
// export function Video ( mode ) ; begin
56625: LD_INT 0
56627: PPUSH
// ingame_video = mode ;
56628: LD_ADDR_OWVAR 52
56632: PUSH
56633: LD_VAR 0 1
56637: ST_TO_ADDR
// interface_hidden = mode ;
56638: LD_ADDR_OWVAR 54
56642: PUSH
56643: LD_VAR 0 1
56647: ST_TO_ADDR
// end ;
56648: LD_VAR 0 2
56652: RET
// export function Join ( array , element ) ; begin
56653: LD_INT 0
56655: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56656: LD_ADDR_VAR 0 3
56660: PUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: LD_VAR 0 1
56670: PUSH
56671: LD_INT 1
56673: PLUS
56674: PPUSH
56675: LD_VAR 0 2
56679: PPUSH
56680: CALL_OW 1
56684: ST_TO_ADDR
// end ;
56685: LD_VAR 0 3
56689: RET
// export function JoinUnion ( array , element ) ; begin
56690: LD_INT 0
56692: PPUSH
// result := array union element ;
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: LD_VAR 0 1
56702: PUSH
56703: LD_VAR 0 2
56707: UNION
56708: ST_TO_ADDR
// end ;
56709: LD_VAR 0 3
56713: RET
// export function GetBehemoths ( side ) ; begin
56714: LD_INT 0
56716: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56717: LD_ADDR_VAR 0 2
56721: PUSH
56722: LD_INT 22
56724: PUSH
56725: LD_VAR 0 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 31
56736: PUSH
56737: LD_INT 25
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PPUSH
56748: CALL_OW 69
56752: ST_TO_ADDR
// end ;
56753: LD_VAR 0 2
56757: RET
// export function Shuffle ( array ) ; var i , index ; begin
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
// result := [ ] ;
56763: LD_ADDR_VAR 0 2
56767: PUSH
56768: EMPTY
56769: ST_TO_ADDR
// if not array then
56770: LD_VAR 0 1
56774: NOT
56775: IFFALSE 56779
// exit ;
56777: GO 56878
// Randomize ;
56779: CALL_OW 10
// for i = array downto 1 do
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: DOUBLE
56789: LD_VAR 0 1
56793: INC
56794: ST_TO_ADDR
56795: LD_INT 1
56797: PUSH
56798: FOR_DOWNTO
56799: IFFALSE 56876
// begin index := rand ( 1 , array ) ;
56801: LD_ADDR_VAR 0 4
56805: PUSH
56806: LD_INT 1
56808: PPUSH
56809: LD_VAR 0 1
56813: PPUSH
56814: CALL_OW 12
56818: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56819: LD_ADDR_VAR 0 2
56823: PUSH
56824: LD_VAR 0 2
56828: PPUSH
56829: LD_VAR 0 2
56833: PUSH
56834: LD_INT 1
56836: PLUS
56837: PPUSH
56838: LD_VAR 0 1
56842: PUSH
56843: LD_VAR 0 4
56847: ARRAY
56848: PPUSH
56849: CALL_OW 2
56853: ST_TO_ADDR
// array := Delete ( array , index ) ;
56854: LD_ADDR_VAR 0 1
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_VAR 0 4
56868: PPUSH
56869: CALL_OW 3
56873: ST_TO_ADDR
// end ;
56874: GO 56798
56876: POP
56877: POP
// end ;
56878: LD_VAR 0 2
56882: RET
// export function GetBaseMaterials ( base ) ; begin
56883: LD_INT 0
56885: PPUSH
// result := [ 0 , 0 , 0 ] ;
56886: LD_ADDR_VAR 0 2
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// if not base then
56905: LD_VAR 0 1
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 56963
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56914: LD_ADDR_VAR 0 2
56918: PUSH
56919: LD_VAR 0 1
56923: PPUSH
56924: LD_INT 1
56926: PPUSH
56927: CALL_OW 275
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_INT 2
56939: PPUSH
56940: CALL_OW 275
56944: PUSH
56945: LD_VAR 0 1
56949: PPUSH
56950: LD_INT 3
56952: PPUSH
56953: CALL_OW 275
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// end ;
56963: LD_VAR 0 2
56967: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56968: LD_INT 0
56970: PPUSH
56971: PPUSH
// result := array ;
56972: LD_ADDR_VAR 0 3
56976: PUSH
56977: LD_VAR 0 1
56981: ST_TO_ADDR
// if size > 0 then
56982: LD_VAR 0 2
56986: PUSH
56987: LD_INT 0
56989: GREATER
56990: IFFALSE 57036
// for i := array downto size do
56992: LD_ADDR_VAR 0 4
56996: PUSH
56997: DOUBLE
56998: LD_VAR 0 1
57002: INC
57003: ST_TO_ADDR
57004: LD_VAR 0 2
57008: PUSH
57009: FOR_DOWNTO
57010: IFFALSE 57034
// result := Delete ( result , result ) ;
57012: LD_ADDR_VAR 0 3
57016: PUSH
57017: LD_VAR 0 3
57021: PPUSH
57022: LD_VAR 0 3
57026: PPUSH
57027: CALL_OW 3
57031: ST_TO_ADDR
57032: GO 57009
57034: POP
57035: POP
// end ;
57036: LD_VAR 0 3
57040: RET
// export function ComExit ( unit ) ; var tmp ; begin
57041: LD_INT 0
57043: PPUSH
57044: PPUSH
// if not IsInUnit ( unit ) then
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL_OW 310
57054: NOT
57055: IFFALSE 57059
// exit ;
57057: GO 57119
// tmp := IsInUnit ( unit ) ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_VAR 0 1
57068: PPUSH
57069: CALL_OW 310
57073: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57074: LD_VAR 0 3
57078: PPUSH
57079: CALL_OW 247
57083: PUSH
57084: LD_INT 2
57086: EQUAL
57087: IFFALSE 57100
// ComExitVehicle ( unit ) else
57089: LD_VAR 0 1
57093: PPUSH
57094: CALL_OW 121
57098: GO 57109
// ComExitBuilding ( unit ) ;
57100: LD_VAR 0 1
57104: PPUSH
57105: CALL_OW 122
// result := tmp ;
57109: LD_ADDR_VAR 0 2
57113: PUSH
57114: LD_VAR 0 3
57118: ST_TO_ADDR
// end ;
57119: LD_VAR 0 2
57123: RET
// export function ComExitAll ( units ) ; var i ; begin
57124: LD_INT 0
57126: PPUSH
57127: PPUSH
// if not units then
57128: LD_VAR 0 1
57132: NOT
57133: IFFALSE 57137
// exit ;
57135: GO 57163
// for i in units do
57137: LD_ADDR_VAR 0 3
57141: PUSH
57142: LD_VAR 0 1
57146: PUSH
57147: FOR_IN
57148: IFFALSE 57161
// ComExit ( i ) ;
57150: LD_VAR 0 3
57154: PPUSH
57155: CALL 57041 0 1
57159: GO 57147
57161: POP
57162: POP
// end ;
57163: LD_VAR 0 2
57167: RET
// export function ResetHc ; begin
57168: LD_INT 0
57170: PPUSH
// InitHc ;
57171: CALL_OW 19
// hc_importance := 0 ;
57175: LD_ADDR_OWVAR 32
57179: PUSH
57180: LD_INT 0
57182: ST_TO_ADDR
// end ;
57183: LD_VAR 0 1
57187: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57188: LD_INT 0
57190: PPUSH
57191: PPUSH
57192: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57193: LD_ADDR_VAR 0 6
57197: PUSH
57198: LD_VAR 0 1
57202: PUSH
57203: LD_VAR 0 3
57207: PLUS
57208: PUSH
57209: LD_INT 2
57211: DIV
57212: ST_TO_ADDR
// if _x < 0 then
57213: LD_VAR 0 6
57217: PUSH
57218: LD_INT 0
57220: LESS
57221: IFFALSE 57238
// _x := _x * - 1 ;
57223: LD_ADDR_VAR 0 6
57227: PUSH
57228: LD_VAR 0 6
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: MUL
57237: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57238: LD_ADDR_VAR 0 7
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_VAR 0 4
57252: PLUS
57253: PUSH
57254: LD_INT 2
57256: DIV
57257: ST_TO_ADDR
// if _y < 0 then
57258: LD_VAR 0 7
57262: PUSH
57263: LD_INT 0
57265: LESS
57266: IFFALSE 57283
// _y := _y * - 1 ;
57268: LD_ADDR_VAR 0 7
57272: PUSH
57273: LD_VAR 0 7
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: MUL
57282: ST_TO_ADDR
// result := [ _x , _y ] ;
57283: LD_ADDR_VAR 0 5
57287: PUSH
57288: LD_VAR 0 6
57292: PUSH
57293: LD_VAR 0 7
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// end ;
57302: LD_VAR 0 5
57306: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57307: LD_INT 0
57309: PPUSH
57310: PPUSH
57311: PPUSH
57312: PPUSH
// task := GetTaskList ( unit ) ;
57313: LD_ADDR_VAR 0 7
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 437
57327: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57328: LD_VAR 0 7
57332: NOT
57333: PUSH
57334: LD_VAR 0 1
57338: PPUSH
57339: LD_VAR 0 2
57343: PPUSH
57344: CALL_OW 308
57348: NOT
57349: AND
57350: IFFALSE 57354
// exit ;
57352: GO 57472
// if IsInArea ( unit , area ) then
57354: LD_VAR 0 1
57358: PPUSH
57359: LD_VAR 0 2
57363: PPUSH
57364: CALL_OW 308
57368: IFFALSE 57386
// begin ComMoveToArea ( unit , goAway ) ;
57370: LD_VAR 0 1
57374: PPUSH
57375: LD_VAR 0 3
57379: PPUSH
57380: CALL_OW 113
// exit ;
57384: GO 57472
// end ; if task [ 1 ] [ 1 ] <> M then
57386: LD_VAR 0 7
57390: PUSH
57391: LD_INT 1
57393: ARRAY
57394: PUSH
57395: LD_INT 1
57397: ARRAY
57398: PUSH
57399: LD_STRING M
57401: NONEQUAL
57402: IFFALSE 57406
// exit ;
57404: GO 57472
// x := task [ 1 ] [ 2 ] ;
57406: LD_ADDR_VAR 0 5
57410: PUSH
57411: LD_VAR 0 7
57415: PUSH
57416: LD_INT 1
57418: ARRAY
57419: PUSH
57420: LD_INT 2
57422: ARRAY
57423: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57424: LD_ADDR_VAR 0 6
57428: PUSH
57429: LD_VAR 0 7
57433: PUSH
57434: LD_INT 1
57436: ARRAY
57437: PUSH
57438: LD_INT 3
57440: ARRAY
57441: ST_TO_ADDR
// if InArea ( x , y , area ) then
57442: LD_VAR 0 5
57446: PPUSH
57447: LD_VAR 0 6
57451: PPUSH
57452: LD_VAR 0 2
57456: PPUSH
57457: CALL_OW 309
57461: IFFALSE 57472
// ComStop ( unit ) ;
57463: LD_VAR 0 1
57467: PPUSH
57468: CALL_OW 141
// end ;
57472: LD_VAR 0 4
57476: RET
// export function Abs ( value ) ; begin
57477: LD_INT 0
57479: PPUSH
// result := value ;
57480: LD_ADDR_VAR 0 2
57484: PUSH
57485: LD_VAR 0 1
57489: ST_TO_ADDR
// if value < 0 then
57490: LD_VAR 0 1
57494: PUSH
57495: LD_INT 0
57497: LESS
57498: IFFALSE 57515
// result := value * - 1 ;
57500: LD_ADDR_VAR 0 2
57504: PUSH
57505: LD_VAR 0 1
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: MUL
57514: ST_TO_ADDR
// end ;
57515: LD_VAR 0 2
57519: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57520: LD_INT 0
57522: PPUSH
57523: PPUSH
57524: PPUSH
57525: PPUSH
57526: PPUSH
57527: PPUSH
57528: PPUSH
57529: PPUSH
// if not unit or not building then
57530: LD_VAR 0 1
57534: NOT
57535: PUSH
57536: LD_VAR 0 2
57540: NOT
57541: OR
57542: IFFALSE 57546
// exit ;
57544: GO 57772
// x := GetX ( building ) ;
57546: LD_ADDR_VAR 0 4
57550: PUSH
57551: LD_VAR 0 2
57555: PPUSH
57556: CALL_OW 250
57560: ST_TO_ADDR
// y := GetY ( building ) ;
57561: LD_ADDR_VAR 0 6
57565: PUSH
57566: LD_VAR 0 2
57570: PPUSH
57571: CALL_OW 251
57575: ST_TO_ADDR
// d := GetDir ( building ) ;
57576: LD_ADDR_VAR 0 8
57580: PUSH
57581: LD_VAR 0 2
57585: PPUSH
57586: CALL_OW 254
57590: ST_TO_ADDR
// r := 4 ;
57591: LD_ADDR_VAR 0 9
57595: PUSH
57596: LD_INT 4
57598: ST_TO_ADDR
// for i := 1 to 5 do
57599: LD_ADDR_VAR 0 10
57603: PUSH
57604: DOUBLE
57605: LD_INT 1
57607: DEC
57608: ST_TO_ADDR
57609: LD_INT 5
57611: PUSH
57612: FOR_TO
57613: IFFALSE 57770
// begin _x := ShiftX ( x , d , r + i ) ;
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: LD_VAR 0 4
57624: PPUSH
57625: LD_VAR 0 8
57629: PPUSH
57630: LD_VAR 0 9
57634: PUSH
57635: LD_VAR 0 10
57639: PLUS
57640: PPUSH
57641: CALL_OW 272
57645: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57646: LD_ADDR_VAR 0 7
57650: PUSH
57651: LD_VAR 0 6
57655: PPUSH
57656: LD_VAR 0 8
57660: PPUSH
57661: LD_VAR 0 9
57665: PUSH
57666: LD_VAR 0 10
57670: PLUS
57671: PPUSH
57672: CALL_OW 273
57676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57677: LD_VAR 0 5
57681: PPUSH
57682: LD_VAR 0 7
57686: PPUSH
57687: CALL_OW 488
57691: PUSH
57692: LD_VAR 0 5
57696: PPUSH
57697: LD_VAR 0 7
57701: PPUSH
57702: CALL_OW 428
57706: PPUSH
57707: CALL_OW 247
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: IN
57722: NOT
57723: AND
57724: IFFALSE 57768
// begin ComMoveXY ( unit , _x , _y ) ;
57726: LD_VAR 0 1
57730: PPUSH
57731: LD_VAR 0 5
57735: PPUSH
57736: LD_VAR 0 7
57740: PPUSH
57741: CALL_OW 111
// result := [ _x , _y ] ;
57745: LD_ADDR_VAR 0 3
57749: PUSH
57750: LD_VAR 0 5
57754: PUSH
57755: LD_VAR 0 7
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// exit ;
57764: POP
57765: POP
57766: GO 57772
// end ; end ;
57768: GO 57612
57770: POP
57771: POP
// end ;
57772: LD_VAR 0 3
57776: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57777: LD_INT 0
57779: PPUSH
57780: PPUSH
57781: PPUSH
// result := 0 ;
57782: LD_ADDR_VAR 0 3
57786: PUSH
57787: LD_INT 0
57789: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57790: LD_VAR 0 1
57794: PUSH
57795: LD_INT 0
57797: LESS
57798: PUSH
57799: LD_VAR 0 1
57803: PUSH
57804: LD_INT 8
57806: GREATER
57807: OR
57808: PUSH
57809: LD_VAR 0 2
57813: PUSH
57814: LD_INT 0
57816: LESS
57817: OR
57818: PUSH
57819: LD_VAR 0 2
57823: PUSH
57824: LD_INT 8
57826: GREATER
57827: OR
57828: IFFALSE 57832
// exit ;
57830: GO 57907
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57832: LD_ADDR_VAR 0 4
57836: PUSH
57837: LD_INT 22
57839: PUSH
57840: LD_VAR 0 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PPUSH
57849: CALL_OW 69
57853: PUSH
57854: FOR_IN
57855: IFFALSE 57905
// begin un := UnitShoot ( i ) ;
57857: LD_ADDR_VAR 0 5
57861: PUSH
57862: LD_VAR 0 4
57866: PPUSH
57867: CALL_OW 504
57871: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57872: LD_VAR 0 5
57876: PPUSH
57877: CALL_OW 255
57881: PUSH
57882: LD_VAR 0 1
57886: EQUAL
57887: IFFALSE 57903
// begin result := un ;
57889: LD_ADDR_VAR 0 3
57893: PUSH
57894: LD_VAR 0 5
57898: ST_TO_ADDR
// exit ;
57899: POP
57900: POP
57901: GO 57907
// end ; end ;
57903: GO 57854
57905: POP
57906: POP
// end ;
57907: LD_VAR 0 3
57911: RET
// export function GetCargoBay ( units ) ; begin
57912: LD_INT 0
57914: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57915: LD_ADDR_VAR 0 2
57919: PUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 34
57930: PUSH
57931: LD_INT 12
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 34
57940: PUSH
57941: LD_INT 51
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 34
57950: PUSH
57951: LD_INT 32
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 34
57960: PUSH
57961: LD_EXP 78
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: PPUSH
57977: CALL_OW 72
57981: ST_TO_ADDR
// end ;
57982: LD_VAR 0 2
57986: RET
// export function Negate ( value ) ; begin
57987: LD_INT 0
57989: PPUSH
// result := not value ;
57990: LD_ADDR_VAR 0 2
57994: PUSH
57995: LD_VAR 0 1
57999: NOT
58000: ST_TO_ADDR
// end ;
58001: LD_VAR 0 2
58005: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
58006: LD_INT 0
58008: PPUSH
// if x1 = x2 then
58009: LD_VAR 0 1
58013: PUSH
58014: LD_VAR 0 3
58018: EQUAL
58019: IFFALSE 58053
// begin if y1 > y2 then
58021: LD_VAR 0 2
58025: PUSH
58026: LD_VAR 0 4
58030: GREATER
58031: IFFALSE 58043
// result := 0 else
58033: LD_ADDR_VAR 0 5
58037: PUSH
58038: LD_INT 0
58040: ST_TO_ADDR
58041: GO 58051
// result := 3 ;
58043: LD_ADDR_VAR 0 5
58047: PUSH
58048: LD_INT 3
58050: ST_TO_ADDR
// exit ;
58051: GO 58139
// end ; if y1 = y2 then
58053: LD_VAR 0 2
58057: PUSH
58058: LD_VAR 0 4
58062: EQUAL
58063: IFFALSE 58097
// begin if x1 > x2 then
58065: LD_VAR 0 1
58069: PUSH
58070: LD_VAR 0 3
58074: GREATER
58075: IFFALSE 58087
// result := 1 else
58077: LD_ADDR_VAR 0 5
58081: PUSH
58082: LD_INT 1
58084: ST_TO_ADDR
58085: GO 58095
// result := 4 ;
58087: LD_ADDR_VAR 0 5
58091: PUSH
58092: LD_INT 4
58094: ST_TO_ADDR
// exit ;
58095: GO 58139
// end ; if x1 > x2 and y1 > y2 then
58097: LD_VAR 0 1
58101: PUSH
58102: LD_VAR 0 3
58106: GREATER
58107: PUSH
58108: LD_VAR 0 2
58112: PUSH
58113: LD_VAR 0 4
58117: GREATER
58118: AND
58119: IFFALSE 58131
// result := 2 else
58121: LD_ADDR_VAR 0 5
58125: PUSH
58126: LD_INT 2
58128: ST_TO_ADDR
58129: GO 58139
// result := 5 ;
58131: LD_ADDR_VAR 0 5
58135: PUSH
58136: LD_INT 5
58138: ST_TO_ADDR
// end ;
58139: LD_VAR 0 5
58143: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58144: LD_INT 0
58146: PPUSH
58147: PPUSH
// if not driver or not IsInUnit ( driver ) then
58148: LD_VAR 0 1
58152: NOT
58153: PUSH
58154: LD_VAR 0 1
58158: PPUSH
58159: CALL_OW 310
58163: NOT
58164: OR
58165: IFFALSE 58169
// exit ;
58167: GO 58259
// vehicle := IsInUnit ( driver ) ;
58169: LD_ADDR_VAR 0 3
58173: PUSH
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL_OW 310
58183: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58184: LD_VAR 0 1
58188: PPUSH
58189: LD_STRING \
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: PUSH
58219: LD_STRING E
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PPUSH
58255: CALL_OW 446
// end ;
58259: LD_VAR 0 2
58263: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58264: LD_INT 0
58266: PPUSH
58267: PPUSH
// if not driver or not IsInUnit ( driver ) then
58268: LD_VAR 0 1
58272: NOT
58273: PUSH
58274: LD_VAR 0 1
58278: PPUSH
58279: CALL_OW 310
58283: NOT
58284: OR
58285: IFFALSE 58289
// exit ;
58287: GO 58379
// vehicle := IsInUnit ( driver ) ;
58289: LD_ADDR_VAR 0 3
58293: PUSH
58294: LD_VAR 0 1
58298: PPUSH
58299: CALL_OW 310
58303: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58304: LD_VAR 0 1
58308: PPUSH
58309: LD_STRING \
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: PUSH
58339: LD_STRING E
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_VAR 0 3
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PPUSH
58375: CALL_OW 447
// end ;
58379: LD_VAR 0 2
58383: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58384: LD_INT 0
58386: PPUSH
58387: PPUSH
58388: PPUSH
// tmp := [ ] ;
58389: LD_ADDR_VAR 0 5
58393: PUSH
58394: EMPTY
58395: ST_TO_ADDR
// for i in units do
58396: LD_ADDR_VAR 0 4
58400: PUSH
58401: LD_VAR 0 1
58405: PUSH
58406: FOR_IN
58407: IFFALSE 58445
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58409: LD_ADDR_VAR 0 5
58413: PUSH
58414: LD_VAR 0 5
58418: PPUSH
58419: LD_VAR 0 5
58423: PUSH
58424: LD_INT 1
58426: PLUS
58427: PPUSH
58428: LD_VAR 0 4
58432: PPUSH
58433: CALL_OW 256
58437: PPUSH
58438: CALL_OW 2
58442: ST_TO_ADDR
58443: GO 58406
58445: POP
58446: POP
// if not tmp then
58447: LD_VAR 0 5
58451: NOT
58452: IFFALSE 58456
// exit ;
58454: GO 58504
// if asc then
58456: LD_VAR 0 2
58460: IFFALSE 58484
// result := SortListByListAsc ( units , tmp ) else
58462: LD_ADDR_VAR 0 3
58466: PUSH
58467: LD_VAR 0 1
58471: PPUSH
58472: LD_VAR 0 5
58476: PPUSH
58477: CALL_OW 76
58481: ST_TO_ADDR
58482: GO 58504
// result := SortListByListDesc ( units , tmp ) ;
58484: LD_ADDR_VAR 0 3
58488: PUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: LD_VAR 0 5
58498: PPUSH
58499: CALL_OW 77
58503: ST_TO_ADDR
// end ;
58504: LD_VAR 0 3
58508: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58509: LD_INT 0
58511: PPUSH
58512: PPUSH
// task := GetTaskList ( mech ) ;
58513: LD_ADDR_VAR 0 4
58517: PUSH
58518: LD_VAR 0 1
58522: PPUSH
58523: CALL_OW 437
58527: ST_TO_ADDR
// if not task then
58528: LD_VAR 0 4
58532: NOT
58533: IFFALSE 58537
// exit ;
58535: GO 58579
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58537: LD_ADDR_VAR 0 3
58541: PUSH
58542: LD_VAR 0 4
58546: PUSH
58547: LD_INT 1
58549: ARRAY
58550: PUSH
58551: LD_INT 1
58553: ARRAY
58554: PUSH
58555: LD_STRING r
58557: EQUAL
58558: PUSH
58559: LD_VAR 0 4
58563: PUSH
58564: LD_INT 1
58566: ARRAY
58567: PUSH
58568: LD_INT 4
58570: ARRAY
58571: PUSH
58572: LD_VAR 0 2
58576: EQUAL
58577: AND
58578: ST_TO_ADDR
// end ;
58579: LD_VAR 0 3
58583: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58584: LD_INT 0
58586: PPUSH
// SetDir ( unit , d ) ;
58587: LD_VAR 0 1
58591: PPUSH
58592: LD_VAR 0 4
58596: PPUSH
58597: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_VAR 0 2
58610: PPUSH
58611: LD_VAR 0 3
58615: PPUSH
58616: LD_VAR 0 5
58620: PPUSH
58621: CALL_OW 48
// end ;
58625: LD_VAR 0 6
58629: RET
// export function ToNaturalNumber ( number ) ; begin
58630: LD_INT 0
58632: PPUSH
// result := number div 1 ;
58633: LD_ADDR_VAR 0 2
58637: PUSH
58638: LD_VAR 0 1
58642: PUSH
58643: LD_INT 1
58645: DIV
58646: ST_TO_ADDR
// if number < 0 then
58647: LD_VAR 0 1
58651: PUSH
58652: LD_INT 0
58654: LESS
58655: IFFALSE 58665
// result := 0 ;
58657: LD_ADDR_VAR 0 2
58661: PUSH
58662: LD_INT 0
58664: ST_TO_ADDR
// end ;
58665: LD_VAR 0 2
58669: RET
// export function SortByClass ( units , class ) ; var un ; begin
58670: LD_INT 0
58672: PPUSH
58673: PPUSH
// if not units or not class then
58674: LD_VAR 0 1
58678: NOT
58679: PUSH
58680: LD_VAR 0 2
58684: NOT
58685: OR
58686: IFFALSE 58690
// exit ;
58688: GO 58785
// result := [ ] ;
58690: LD_ADDR_VAR 0 3
58694: PUSH
58695: EMPTY
58696: ST_TO_ADDR
// for un in units do
58697: LD_ADDR_VAR 0 4
58701: PUSH
58702: LD_VAR 0 1
58706: PUSH
58707: FOR_IN
58708: IFFALSE 58783
// if GetClass ( un ) = class then
58710: LD_VAR 0 4
58714: PPUSH
58715: CALL_OW 257
58719: PUSH
58720: LD_VAR 0 2
58724: EQUAL
58725: IFFALSE 58752
// result := Insert ( result , 1 , un ) else
58727: LD_ADDR_VAR 0 3
58731: PUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: LD_INT 1
58739: PPUSH
58740: LD_VAR 0 4
58744: PPUSH
58745: CALL_OW 2
58749: ST_TO_ADDR
58750: GO 58781
// result := Replace ( result , result + 1 , un ) ;
58752: LD_ADDR_VAR 0 3
58756: PUSH
58757: LD_VAR 0 3
58761: PPUSH
58762: LD_VAR 0 3
58766: PUSH
58767: LD_INT 1
58769: PLUS
58770: PPUSH
58771: LD_VAR 0 4
58775: PPUSH
58776: CALL_OW 1
58780: ST_TO_ADDR
58781: GO 58707
58783: POP
58784: POP
// end ;
58785: LD_VAR 0 3
58789: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58790: LD_INT 0
58792: PPUSH
58793: PPUSH
58794: PPUSH
58795: PPUSH
58796: PPUSH
58797: PPUSH
58798: PPUSH
// result := [ ] ;
58799: LD_ADDR_VAR 0 4
58803: PUSH
58804: EMPTY
58805: ST_TO_ADDR
// if x - r < 0 then
58806: LD_VAR 0 1
58810: PUSH
58811: LD_VAR 0 3
58815: MINUS
58816: PUSH
58817: LD_INT 0
58819: LESS
58820: IFFALSE 58832
// min_x := 0 else
58822: LD_ADDR_VAR 0 8
58826: PUSH
58827: LD_INT 0
58829: ST_TO_ADDR
58830: GO 58848
// min_x := x - r ;
58832: LD_ADDR_VAR 0 8
58836: PUSH
58837: LD_VAR 0 1
58841: PUSH
58842: LD_VAR 0 3
58846: MINUS
58847: ST_TO_ADDR
// if y - r < 0 then
58848: LD_VAR 0 2
58852: PUSH
58853: LD_VAR 0 3
58857: MINUS
58858: PUSH
58859: LD_INT 0
58861: LESS
58862: IFFALSE 58874
// min_y := 0 else
58864: LD_ADDR_VAR 0 7
58868: PUSH
58869: LD_INT 0
58871: ST_TO_ADDR
58872: GO 58890
// min_y := y - r ;
58874: LD_ADDR_VAR 0 7
58878: PUSH
58879: LD_VAR 0 2
58883: PUSH
58884: LD_VAR 0 3
58888: MINUS
58889: ST_TO_ADDR
// max_x := x + r ;
58890: LD_ADDR_VAR 0 9
58894: PUSH
58895: LD_VAR 0 1
58899: PUSH
58900: LD_VAR 0 3
58904: PLUS
58905: ST_TO_ADDR
// max_y := y + r ;
58906: LD_ADDR_VAR 0 10
58910: PUSH
58911: LD_VAR 0 2
58915: PUSH
58916: LD_VAR 0 3
58920: PLUS
58921: ST_TO_ADDR
// for _x = min_x to max_x do
58922: LD_ADDR_VAR 0 5
58926: PUSH
58927: DOUBLE
58928: LD_VAR 0 8
58932: DEC
58933: ST_TO_ADDR
58934: LD_VAR 0 9
58938: PUSH
58939: FOR_TO
58940: IFFALSE 59041
// for _y = min_y to max_y do
58942: LD_ADDR_VAR 0 6
58946: PUSH
58947: DOUBLE
58948: LD_VAR 0 7
58952: DEC
58953: ST_TO_ADDR
58954: LD_VAR 0 10
58958: PUSH
58959: FOR_TO
58960: IFFALSE 59037
// begin if not ValidHex ( _x , _y ) then
58962: LD_VAR 0 5
58966: PPUSH
58967: LD_VAR 0 6
58971: PPUSH
58972: CALL_OW 488
58976: NOT
58977: IFFALSE 58981
// continue ;
58979: GO 58959
// if GetResourceTypeXY ( _x , _y ) then
58981: LD_VAR 0 5
58985: PPUSH
58986: LD_VAR 0 6
58990: PPUSH
58991: CALL_OW 283
58995: IFFALSE 59035
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58997: LD_ADDR_VAR 0 4
59001: PUSH
59002: LD_VAR 0 4
59006: PPUSH
59007: LD_VAR 0 4
59011: PUSH
59012: LD_INT 1
59014: PLUS
59015: PPUSH
59016: LD_VAR 0 5
59020: PUSH
59021: LD_VAR 0 6
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PPUSH
59030: CALL_OW 1
59034: ST_TO_ADDR
// end ;
59035: GO 58959
59037: POP
59038: POP
59039: GO 58939
59041: POP
59042: POP
// end ;
59043: LD_VAR 0 4
59047: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
59048: LD_INT 0
59050: PPUSH
59051: PPUSH
59052: PPUSH
59053: PPUSH
59054: PPUSH
59055: PPUSH
// if not units then
59056: LD_VAR 0 1
59060: NOT
59061: IFFALSE 59065
// exit ;
59063: GO 59466
// result := UnitFilter ( units , [ f_ok ] ) ;
59065: LD_ADDR_VAR 0 3
59069: PUSH
59070: LD_VAR 0 1
59074: PPUSH
59075: LD_INT 50
59077: PUSH
59078: EMPTY
59079: LIST
59080: PPUSH
59081: CALL_OW 72
59085: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59086: LD_ADDR_VAR 0 7
59090: PUSH
59091: LD_VAR 0 1
59095: PUSH
59096: LD_INT 1
59098: ARRAY
59099: PPUSH
59100: CALL_OW 255
59104: ST_TO_ADDR
// if not result then
59105: LD_VAR 0 3
59109: NOT
59110: IFFALSE 59114
// exit ;
59112: GO 59466
// for i in result do
59114: LD_ADDR_VAR 0 4
59118: PUSH
59119: LD_VAR 0 3
59123: PUSH
59124: FOR_IN
59125: IFFALSE 59464
// begin tag := GetTag ( i ) + 1 ;
59127: LD_ADDR_VAR 0 8
59131: PUSH
59132: LD_VAR 0 4
59136: PPUSH
59137: CALL_OW 110
59141: PUSH
59142: LD_INT 1
59144: PLUS
59145: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59146: LD_ADDR_VAR 0 6
59150: PUSH
59151: LD_VAR 0 4
59155: PPUSH
59156: CALL_OW 250
59160: PPUSH
59161: LD_VAR 0 4
59165: PPUSH
59166: CALL_OW 251
59170: PPUSH
59171: LD_INT 6
59173: PPUSH
59174: CALL 58790 0 3
59178: ST_TO_ADDR
// if cr then
59179: LD_VAR 0 6
59183: IFFALSE 59222
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59185: LD_VAR 0 4
59189: PPUSH
59190: LD_VAR 0 6
59194: PUSH
59195: LD_INT 1
59197: ARRAY
59198: PUSH
59199: LD_INT 1
59201: ARRAY
59202: PPUSH
59203: LD_VAR 0 6
59207: PUSH
59208: LD_INT 1
59210: ARRAY
59211: PUSH
59212: LD_INT 2
59214: ARRAY
59215: PPUSH
59216: CALL_OW 116
59220: GO 59462
// if path > tag then
59222: LD_VAR 0 2
59226: PUSH
59227: LD_VAR 0 8
59231: GREATER
59232: IFFALSE 59410
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
59234: LD_ADDR_VAR 0 5
59238: PUSH
59239: LD_INT 81
59241: PUSH
59242: LD_VAR 0 7
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 91
59253: PUSH
59254: LD_VAR 0 4
59258: PUSH
59259: LD_INT 12
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PPUSH
59271: CALL_OW 69
59275: ST_TO_ADDR
// if enemy then
59276: LD_VAR 0 5
59280: IFFALSE 59308
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59282: LD_VAR 0 4
59286: PPUSH
59287: LD_VAR 0 5
59291: PPUSH
59292: LD_VAR 0 4
59296: PPUSH
59297: CALL_OW 74
59301: PPUSH
59302: CALL_OW 115
59306: GO 59408
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59308: LD_VAR 0 4
59312: PPUSH
59313: LD_VAR 0 2
59317: PUSH
59318: LD_VAR 0 8
59322: ARRAY
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PPUSH
59328: LD_VAR 0 2
59332: PUSH
59333: LD_VAR 0 8
59337: ARRAY
59338: PUSH
59339: LD_INT 2
59341: ARRAY
59342: PPUSH
59343: CALL_OW 297
59347: PUSH
59348: LD_INT 6
59350: GREATER
59351: IFFALSE 59394
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59353: LD_VAR 0 4
59357: PPUSH
59358: LD_VAR 0 2
59362: PUSH
59363: LD_VAR 0 8
59367: ARRAY
59368: PUSH
59369: LD_INT 1
59371: ARRAY
59372: PPUSH
59373: LD_VAR 0 2
59377: PUSH
59378: LD_VAR 0 8
59382: ARRAY
59383: PUSH
59384: LD_INT 2
59386: ARRAY
59387: PPUSH
59388: CALL_OW 114
59392: GO 59408
// SetTag ( i , tag ) ;
59394: LD_VAR 0 4
59398: PPUSH
59399: LD_VAR 0 8
59403: PPUSH
59404: CALL_OW 109
// end else
59408: GO 59462
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59410: LD_ADDR_VAR 0 5
59414: PUSH
59415: LD_INT 81
59417: PUSH
59418: LD_VAR 0 7
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PPUSH
59427: CALL_OW 69
59431: ST_TO_ADDR
// if enemy then
59432: LD_VAR 0 5
59436: IFFALSE 59462
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59438: LD_VAR 0 4
59442: PPUSH
59443: LD_VAR 0 5
59447: PPUSH
59448: LD_VAR 0 4
59452: PPUSH
59453: CALL_OW 74
59457: PPUSH
59458: CALL_OW 115
// end ; end ;
59462: GO 59124
59464: POP
59465: POP
// end ; end_of_file
59466: LD_VAR 0 3
59470: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
59471: LD_INT 0
59473: PPUSH
// ar_miner := 81 ;
59474: LD_ADDR_EXP 84
59478: PUSH
59479: LD_INT 81
59481: ST_TO_ADDR
// ar_crane := 88 ;
59482: LD_ADDR_EXP 83
59486: PUSH
59487: LD_INT 88
59489: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
59490: LD_ADDR_EXP 78
59494: PUSH
59495: LD_INT 89
59497: ST_TO_ADDR
// us_hack := 99 ;
59498: LD_ADDR_EXP 79
59502: PUSH
59503: LD_INT 99
59505: ST_TO_ADDR
// us_artillery := 97 ;
59506: LD_ADDR_EXP 80
59510: PUSH
59511: LD_INT 97
59513: ST_TO_ADDR
// ar_bio_bomb := 91 ;
59514: LD_ADDR_EXP 81
59518: PUSH
59519: LD_INT 91
59521: ST_TO_ADDR
// ar_mortar := 92 ;
59522: LD_ADDR_EXP 82
59526: PUSH
59527: LD_INT 92
59529: ST_TO_ADDR
// ru_radar := 98 ;
59530: LD_ADDR_EXP 77
59534: PUSH
59535: LD_INT 98
59537: ST_TO_ADDR
// tech_Artillery := 80 ;
59538: LD_ADDR_EXP 85
59542: PUSH
59543: LD_INT 80
59545: ST_TO_ADDR
// tech_RadMat := 81 ;
59546: LD_ADDR_EXP 86
59550: PUSH
59551: LD_INT 81
59553: ST_TO_ADDR
// tech_BasicTools := 82 ;
59554: LD_ADDR_EXP 87
59558: PUSH
59559: LD_INT 82
59561: ST_TO_ADDR
// tech_Cargo := 83 ;
59562: LD_ADDR_EXP 88
59566: PUSH
59567: LD_INT 83
59569: ST_TO_ADDR
// tech_Track := 84 ;
59570: LD_ADDR_EXP 89
59574: PUSH
59575: LD_INT 84
59577: ST_TO_ADDR
// tech_Crane := 85 ;
59578: LD_ADDR_EXP 90
59582: PUSH
59583: LD_INT 85
59585: ST_TO_ADDR
// tech_Bulldozer := 86 ;
59586: LD_ADDR_EXP 91
59590: PUSH
59591: LD_INT 86
59593: ST_TO_ADDR
// tech_Hovercraft := 87 ;
59594: LD_ADDR_EXP 92
59598: PUSH
59599: LD_INT 87
59601: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
59602: LD_ADDR_EXP 93
59606: PUSH
59607: LD_INT 88
59609: ST_TO_ADDR
// class_mastodont := 31 ;
59610: LD_ADDR_EXP 94
59614: PUSH
59615: LD_INT 31
59617: ST_TO_ADDR
// class_horse := 21 ;
59618: LD_ADDR_EXP 95
59622: PUSH
59623: LD_INT 21
59625: ST_TO_ADDR
// end ;
59626: LD_VAR 0 1
59630: RET
// every 1 do
59631: GO 59633
59633: DISABLE
// InitGlobalVariables ; end_of_file
59634: CALL 59471 0 0
59638: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59639: LD_VAR 0 1
59643: PPUSH
59644: LD_VAR 0 2
59648: PPUSH
59649: LD_VAR 0 3
59653: PPUSH
59654: LD_VAR 0 4
59658: PPUSH
59659: LD_VAR 0 5
59663: PPUSH
59664: LD_VAR 0 6
59668: PPUSH
59669: CALL 1963 0 6
// end ;
59673: PPOPN 6
59675: END
