// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// export globalGameSaveCounter ; every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// every 0 0$1 do
1977: GO 1979
1979: DISABLE
// begin globalGameSaveCounter := 0 ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_INT 0
1987: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1988: LD_STRING setGameSaveCounter(0)
1990: PPUSH
1991: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1995: LD_STRING initStreamRollete();
1997: PPUSH
1998: CALL_OW 559
// InitStreamMode ;
2002: CALL 3328 0 0
// DefineStreamItems ( false ) ;
2006: LD_INT 0
2008: PPUSH
2009: CALL 3792 0 1
// end ;
2013: END
// export function SOS_MapStart ( ) ; begin
2014: LD_INT 0
2016: PPUSH
// if streamModeActive then
2017: LD_EXP 8
2021: IFFALSE 2030
// DefineStreamItems ( true ) ;
2023: LD_INT 1
2025: PPUSH
2026: CALL 3792 0 1
// UpdateLuaVariables ( ) ;
2030: CALL 2047 0 0
// UpdateFactoryWaypoints ( ) ;
2034: CALL 16653 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2038: CALL 16910 0 0
// end ;
2042: LD_VAR 0 1
2046: RET
// function UpdateLuaVariables ( ) ; begin
2047: LD_INT 0
2049: PPUSH
// if globalGameSaveCounter then
2050: LD_EXP 7
2054: IFFALSE 2088
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2056: LD_ADDR_EXP 7
2060: PUSH
2061: LD_EXP 7
2065: PPUSH
2066: CALL 61030 0 1
2070: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2071: LD_STRING setGameSaveCounter(
2073: PUSH
2074: LD_EXP 7
2078: STR
2079: PUSH
2080: LD_STRING )
2082: STR
2083: PPUSH
2084: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2088: LD_STRING setGameDifficulty(
2090: PUSH
2091: LD_OWVAR 67
2095: STR
2096: PUSH
2097: LD_STRING )
2099: STR
2100: PPUSH
2101: CALL_OW 559
// end ;
2105: LD_VAR 0 1
2109: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2110: LD_INT 0
2112: PPUSH
// if p2 = stream_mode then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_INT 100
2120: EQUAL
2121: IFFALSE 3124
// begin if not StreamModeActive then
2123: LD_EXP 8
2127: NOT
2128: IFFALSE 2138
// StreamModeActive := true ;
2130: LD_ADDR_EXP 8
2134: PUSH
2135: LD_INT 1
2137: ST_TO_ADDR
// if p3 = 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: EQUAL
2146: IFFALSE 2152
// InitStreamMode ;
2148: CALL 3328 0 0
// if p3 = 1 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 1
2159: EQUAL
2160: IFFALSE 2170
// sRocket := true ;
2162: LD_ADDR_EXP 13
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 2 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 2
2177: EQUAL
2178: IFFALSE 2188
// sSpeed := true ;
2180: LD_ADDR_EXP 12
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 3 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 3
2195: EQUAL
2196: IFFALSE 2206
// sEngine := true ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 4 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 4
2213: EQUAL
2214: IFFALSE 2224
// sSpec := true ;
2216: LD_ADDR_EXP 11
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 5 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 5
2231: EQUAL
2232: IFFALSE 2242
// sLevel := true ;
2234: LD_ADDR_EXP 15
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 6 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 6
2249: EQUAL
2250: IFFALSE 2260
// sArmoury := true ;
2252: LD_ADDR_EXP 16
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 7 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: IFFALSE 2278
// sRadar := true ;
2270: LD_ADDR_EXP 17
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 8 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 8
2285: EQUAL
2286: IFFALSE 2296
// sBunker := true ;
2288: LD_ADDR_EXP 18
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 9 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 9
2303: EQUAL
2304: IFFALSE 2314
// sHack := true ;
2306: LD_ADDR_EXP 19
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 10 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: EQUAL
2322: IFFALSE 2332
// sFire := true ;
2324: LD_ADDR_EXP 20
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 11 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 11
2339: EQUAL
2340: IFFALSE 2350
// sRefresh := true ;
2342: LD_ADDR_EXP 21
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 12 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 12
2357: EQUAL
2358: IFFALSE 2368
// sExp := true ;
2360: LD_ADDR_EXP 22
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 13 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 13
2375: EQUAL
2376: IFFALSE 2386
// sDepot := true ;
2378: LD_ADDR_EXP 23
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 14 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 14
2393: EQUAL
2394: IFFALSE 2404
// sFlag := true ;
2396: LD_ADDR_EXP 24
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 15 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 15
2411: EQUAL
2412: IFFALSE 2422
// sKamikadze := true ;
2414: LD_ADDR_EXP 32
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 16 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 16
2429: EQUAL
2430: IFFALSE 2440
// sTroll := true ;
2432: LD_ADDR_EXP 33
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 17 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 17
2447: EQUAL
2448: IFFALSE 2458
// sSlow := true ;
2450: LD_ADDR_EXP 34
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// if p3 = 18 then
2458: LD_VAR 0 3
2462: PUSH
2463: LD_INT 18
2465: EQUAL
2466: IFFALSE 2476
// sLack := true ;
2468: LD_ADDR_EXP 35
2472: PUSH
2473: LD_INT 1
2475: ST_TO_ADDR
// if p3 = 19 then
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 19
2483: EQUAL
2484: IFFALSE 2494
// sTank := true ;
2486: LD_ADDR_EXP 37
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// if p3 = 20 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 20
2501: EQUAL
2502: IFFALSE 2512
// sRemote := true ;
2504: LD_ADDR_EXP 38
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// if p3 = 21 then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 21
2519: EQUAL
2520: IFFALSE 2530
// sPowell := true ;
2522: LD_ADDR_EXP 39
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// if p3 = 22 then
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 22
2537: EQUAL
2538: IFFALSE 2548
// sTeleport := true ;
2540: LD_ADDR_EXP 42
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// if p3 = 23 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 23
2555: EQUAL
2556: IFFALSE 2566
// sOilTower := true ;
2558: LD_ADDR_EXP 44
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// if p3 = 24 then
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 24
2573: EQUAL
2574: IFFALSE 2584
// sShovel := true ;
2576: LD_ADDR_EXP 45
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// if p3 = 25 then
2584: LD_VAR 0 3
2588: PUSH
2589: LD_INT 25
2591: EQUAL
2592: IFFALSE 2602
// sSheik := true ;
2594: LD_ADDR_EXP 46
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// if p3 = 26 then
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 26
2609: EQUAL
2610: IFFALSE 2620
// sEarthquake := true ;
2612: LD_ADDR_EXP 48
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if p3 = 27 then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 27
2627: EQUAL
2628: IFFALSE 2638
// sAI := true ;
2630: LD_ADDR_EXP 49
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// if p3 = 28 then
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 28
2645: EQUAL
2646: IFFALSE 2656
// sCargo := true ;
2648: LD_ADDR_EXP 52
2652: PUSH
2653: LD_INT 1
2655: ST_TO_ADDR
// if p3 = 29 then
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 29
2663: EQUAL
2664: IFFALSE 2674
// sDLaser := true ;
2666: LD_ADDR_EXP 53
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// if p3 = 30 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 30
2681: EQUAL
2682: IFFALSE 2692
// sExchange := true ;
2684: LD_ADDR_EXP 54
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// if p3 = 31 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 31
2699: EQUAL
2700: IFFALSE 2710
// sFac := true ;
2702: LD_ADDR_EXP 55
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// if p3 = 32 then
2710: LD_VAR 0 3
2714: PUSH
2715: LD_INT 32
2717: EQUAL
2718: IFFALSE 2728
// sPower := true ;
2720: LD_ADDR_EXP 56
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// if p3 = 33 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 33
2735: EQUAL
2736: IFFALSE 2746
// sRandom := true ;
2738: LD_ADDR_EXP 57
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if p3 = 34 then
2746: LD_VAR 0 3
2750: PUSH
2751: LD_INT 34
2753: EQUAL
2754: IFFALSE 2764
// sShield := true ;
2756: LD_ADDR_EXP 58
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// if p3 = 35 then
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 35
2771: EQUAL
2772: IFFALSE 2782
// sTime := true ;
2774: LD_ADDR_EXP 59
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// if p3 = 36 then
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 36
2789: EQUAL
2790: IFFALSE 2800
// sTools := true ;
2792: LD_ADDR_EXP 60
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// if p3 = 101 then
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 101
2807: EQUAL
2808: IFFALSE 2818
// sSold := true ;
2810: LD_ADDR_EXP 25
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// if p3 = 102 then
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 102
2825: EQUAL
2826: IFFALSE 2836
// sDiff := true ;
2828: LD_ADDR_EXP 26
2832: PUSH
2833: LD_INT 1
2835: ST_TO_ADDR
// if p3 = 103 then
2836: LD_VAR 0 3
2840: PUSH
2841: LD_INT 103
2843: EQUAL
2844: IFFALSE 2854
// sFog := true ;
2846: LD_ADDR_EXP 29
2850: PUSH
2851: LD_INT 1
2853: ST_TO_ADDR
// if p3 = 104 then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 104
2861: EQUAL
2862: IFFALSE 2872
// sReset := true ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// if p3 = 105 then
2872: LD_VAR 0 3
2876: PUSH
2877: LD_INT 105
2879: EQUAL
2880: IFFALSE 2890
// sSun := true ;
2882: LD_ADDR_EXP 31
2886: PUSH
2887: LD_INT 1
2889: ST_TO_ADDR
// if p3 = 106 then
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 106
2897: EQUAL
2898: IFFALSE 2908
// sTiger := true ;
2900: LD_ADDR_EXP 27
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// if p3 = 107 then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 107
2915: EQUAL
2916: IFFALSE 2926
// sBomb := true ;
2918: LD_ADDR_EXP 28
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// if p3 = 108 then
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 108
2933: EQUAL
2934: IFFALSE 2944
// sWound := true ;
2936: LD_ADDR_EXP 36
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// if p3 = 109 then
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 109
2951: EQUAL
2952: IFFALSE 2962
// sBetray := true ;
2954: LD_ADDR_EXP 40
2958: PUSH
2959: LD_INT 1
2961: ST_TO_ADDR
// if p3 = 110 then
2962: LD_VAR 0 3
2966: PUSH
2967: LD_INT 110
2969: EQUAL
2970: IFFALSE 2980
// sContamin := true ;
2972: LD_ADDR_EXP 41
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// if p3 = 111 then
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 111
2987: EQUAL
2988: IFFALSE 2998
// sOil := true ;
2990: LD_ADDR_EXP 43
2994: PUSH
2995: LD_INT 1
2997: ST_TO_ADDR
// if p3 = 112 then
2998: LD_VAR 0 3
3002: PUSH
3003: LD_INT 112
3005: EQUAL
3006: IFFALSE 3016
// sStu := true ;
3008: LD_ADDR_EXP 47
3012: PUSH
3013: LD_INT 1
3015: ST_TO_ADDR
// if p3 = 113 then
3016: LD_VAR 0 3
3020: PUSH
3021: LD_INT 113
3023: EQUAL
3024: IFFALSE 3034
// sBazooka := true ;
3026: LD_ADDR_EXP 50
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// if p3 = 114 then
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 114
3041: EQUAL
3042: IFFALSE 3052
// sMortar := true ;
3044: LD_ADDR_EXP 51
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// if p3 = 115 then
3052: LD_VAR 0 3
3056: PUSH
3057: LD_INT 115
3059: EQUAL
3060: IFFALSE 3070
// sRanger := true ;
3062: LD_ADDR_EXP 61
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// if p3 = 116 then
3070: LD_VAR 0 3
3074: PUSH
3075: LD_INT 116
3077: EQUAL
3078: IFFALSE 3088
// sComputer := true ;
3080: LD_ADDR_EXP 62
3084: PUSH
3085: LD_INT 1
3087: ST_TO_ADDR
// if p3 = 117 then
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 117
3095: EQUAL
3096: IFFALSE 3106
// s30 := true ;
3098: LD_ADDR_EXP 63
3102: PUSH
3103: LD_INT 1
3105: ST_TO_ADDR
// if p3 = 118 then
3106: LD_VAR 0 3
3110: PUSH
3111: LD_INT 118
3113: EQUAL
3114: IFFALSE 3124
// s60 := true ;
3116: LD_ADDR_EXP 64
3120: PUSH
3121: LD_INT 1
3123: ST_TO_ADDR
// end ; if p2 = hack_mode then
3124: LD_VAR 0 2
3128: PUSH
3129: LD_INT 101
3131: EQUAL
3132: IFFALSE 3260
// begin case p3 of 1 :
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 1
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3154
3147: POP
// hHackUnlimitedResources ; 2 :
3148: CALL 15399 0 0
3152: GO 3260
3154: LD_INT 2
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3169
3162: POP
// hHackSetLevel10 ; 3 :
3163: CALL 15532 0 0
3167: GO 3260
3169: LD_INT 3
3171: DOUBLE
3172: EQUAL
3173: IFTRUE 3177
3175: GO 3184
3177: POP
// hHackSetLevel10YourUnits ; 4 :
3178: CALL 15617 0 0
3182: GO 3260
3184: LD_INT 4
3186: DOUBLE
3187: EQUAL
3188: IFTRUE 3192
3190: GO 3199
3192: POP
// hHackInvincible ; 5 :
3193: CALL 16065 0 0
3197: GO 3260
3199: LD_INT 5
3201: DOUBLE
3202: EQUAL
3203: IFTRUE 3207
3205: GO 3214
3207: POP
// hHackInvisible ; 6 :
3208: CALL 16176 0 0
3212: GO 3260
3214: LD_INT 6
3216: DOUBLE
3217: EQUAL
3218: IFTRUE 3222
3220: GO 3229
3222: POP
// hHackChangeYourSide ; 7 :
3223: CALL 16233 0 0
3227: GO 3260
3229: LD_INT 7
3231: DOUBLE
3232: EQUAL
3233: IFTRUE 3237
3235: GO 3244
3237: POP
// hHackChangeUnitSide ; 8 :
3238: CALL 16275 0 0
3242: GO 3260
3244: LD_INT 8
3246: DOUBLE
3247: EQUAL
3248: IFTRUE 3252
3250: GO 3259
3252: POP
// hHackFog ; end ;
3253: CALL 16376 0 0
3257: GO 3260
3259: POP
// end ; if p2 = game_save_mode then
3260: LD_VAR 0 2
3264: PUSH
3265: LD_INT 102
3267: EQUAL
3268: IFFALSE 3323
// begin if p3 = 1 then
3270: LD_VAR 0 3
3274: PUSH
3275: LD_INT 1
3277: EQUAL
3278: IFFALSE 3290
// globalGameSaveCounter := p4 ;
3280: LD_ADDR_EXP 7
3284: PUSH
3285: LD_VAR 0 4
3289: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 2
3297: EQUAL
3298: PUSH
3299: LD_EXP 7
3303: AND
3304: IFFALSE 3323
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3306: LD_STRING setGameSaveCounter(
3308: PUSH
3309: LD_EXP 7
3313: STR
3314: PUSH
3315: LD_STRING )
3317: STR
3318: PPUSH
3319: CALL_OW 559
// end ; end ;
3323: LD_VAR 0 7
3327: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3328: LD_INT 0
3330: PPUSH
// streamModeActive := false ;
3331: LD_ADDR_EXP 8
3335: PUSH
3336: LD_INT 0
3338: ST_TO_ADDR
// normalCounter := 36 ;
3339: LD_ADDR_EXP 9
3343: PUSH
3344: LD_INT 36
3346: ST_TO_ADDR
// hardcoreCounter := 18 ;
3347: LD_ADDR_EXP 10
3351: PUSH
3352: LD_INT 18
3354: ST_TO_ADDR
// sRocket := false ;
3355: LD_ADDR_EXP 13
3359: PUSH
3360: LD_INT 0
3362: ST_TO_ADDR
// sSpeed := false ;
3363: LD_ADDR_EXP 12
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// sEngine := false ;
3371: LD_ADDR_EXP 14
3375: PUSH
3376: LD_INT 0
3378: ST_TO_ADDR
// sSpec := false ;
3379: LD_ADDR_EXP 11
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// sLevel := false ;
3387: LD_ADDR_EXP 15
3391: PUSH
3392: LD_INT 0
3394: ST_TO_ADDR
// sArmoury := false ;
3395: LD_ADDR_EXP 16
3399: PUSH
3400: LD_INT 0
3402: ST_TO_ADDR
// sRadar := false ;
3403: LD_ADDR_EXP 17
3407: PUSH
3408: LD_INT 0
3410: ST_TO_ADDR
// sBunker := false ;
3411: LD_ADDR_EXP 18
3415: PUSH
3416: LD_INT 0
3418: ST_TO_ADDR
// sHack := false ;
3419: LD_ADDR_EXP 19
3423: PUSH
3424: LD_INT 0
3426: ST_TO_ADDR
// sFire := false ;
3427: LD_ADDR_EXP 20
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// sRefresh := false ;
3435: LD_ADDR_EXP 21
3439: PUSH
3440: LD_INT 0
3442: ST_TO_ADDR
// sExp := false ;
3443: LD_ADDR_EXP 22
3447: PUSH
3448: LD_INT 0
3450: ST_TO_ADDR
// sDepot := false ;
3451: LD_ADDR_EXP 23
3455: PUSH
3456: LD_INT 0
3458: ST_TO_ADDR
// sFlag := false ;
3459: LD_ADDR_EXP 24
3463: PUSH
3464: LD_INT 0
3466: ST_TO_ADDR
// sKamikadze := false ;
3467: LD_ADDR_EXP 32
3471: PUSH
3472: LD_INT 0
3474: ST_TO_ADDR
// sTroll := false ;
3475: LD_ADDR_EXP 33
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// sSlow := false ;
3483: LD_ADDR_EXP 34
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// sLack := false ;
3491: LD_ADDR_EXP 35
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// sTank := false ;
3499: LD_ADDR_EXP 37
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// sRemote := false ;
3507: LD_ADDR_EXP 38
3511: PUSH
3512: LD_INT 0
3514: ST_TO_ADDR
// sPowell := false ;
3515: LD_ADDR_EXP 39
3519: PUSH
3520: LD_INT 0
3522: ST_TO_ADDR
// sTeleport := false ;
3523: LD_ADDR_EXP 42
3527: PUSH
3528: LD_INT 0
3530: ST_TO_ADDR
// sOilTower := false ;
3531: LD_ADDR_EXP 44
3535: PUSH
3536: LD_INT 0
3538: ST_TO_ADDR
// sShovel := false ;
3539: LD_ADDR_EXP 45
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// sSheik := false ;
3547: LD_ADDR_EXP 46
3551: PUSH
3552: LD_INT 0
3554: ST_TO_ADDR
// sEarthquake := false ;
3555: LD_ADDR_EXP 48
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// sAI := false ;
3563: LD_ADDR_EXP 49
3567: PUSH
3568: LD_INT 0
3570: ST_TO_ADDR
// sCargo := false ;
3571: LD_ADDR_EXP 52
3575: PUSH
3576: LD_INT 0
3578: ST_TO_ADDR
// sDLaser := false ;
3579: LD_ADDR_EXP 53
3583: PUSH
3584: LD_INT 0
3586: ST_TO_ADDR
// sExchange := false ;
3587: LD_ADDR_EXP 54
3591: PUSH
3592: LD_INT 0
3594: ST_TO_ADDR
// sFac := false ;
3595: LD_ADDR_EXP 55
3599: PUSH
3600: LD_INT 0
3602: ST_TO_ADDR
// sPower := false ;
3603: LD_ADDR_EXP 56
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// sRandom := false ;
3611: LD_ADDR_EXP 57
3615: PUSH
3616: LD_INT 0
3618: ST_TO_ADDR
// sShield := false ;
3619: LD_ADDR_EXP 58
3623: PUSH
3624: LD_INT 0
3626: ST_TO_ADDR
// sTime := false ;
3627: LD_ADDR_EXP 59
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// sTools := false ;
3635: LD_ADDR_EXP 60
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// sSold := false ;
3643: LD_ADDR_EXP 25
3647: PUSH
3648: LD_INT 0
3650: ST_TO_ADDR
// sDiff := false ;
3651: LD_ADDR_EXP 26
3655: PUSH
3656: LD_INT 0
3658: ST_TO_ADDR
// sFog := false ;
3659: LD_ADDR_EXP 29
3663: PUSH
3664: LD_INT 0
3666: ST_TO_ADDR
// sReset := false ;
3667: LD_ADDR_EXP 30
3671: PUSH
3672: LD_INT 0
3674: ST_TO_ADDR
// sSun := false ;
3675: LD_ADDR_EXP 31
3679: PUSH
3680: LD_INT 0
3682: ST_TO_ADDR
// sTiger := false ;
3683: LD_ADDR_EXP 27
3687: PUSH
3688: LD_INT 0
3690: ST_TO_ADDR
// sBomb := false ;
3691: LD_ADDR_EXP 28
3695: PUSH
3696: LD_INT 0
3698: ST_TO_ADDR
// sWound := false ;
3699: LD_ADDR_EXP 36
3703: PUSH
3704: LD_INT 0
3706: ST_TO_ADDR
// sBetray := false ;
3707: LD_ADDR_EXP 40
3711: PUSH
3712: LD_INT 0
3714: ST_TO_ADDR
// sContamin := false ;
3715: LD_ADDR_EXP 41
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// sOil := false ;
3723: LD_ADDR_EXP 43
3727: PUSH
3728: LD_INT 0
3730: ST_TO_ADDR
// sStu := false ;
3731: LD_ADDR_EXP 47
3735: PUSH
3736: LD_INT 0
3738: ST_TO_ADDR
// sBazooka := false ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_INT 0
3746: ST_TO_ADDR
// sMortar := false ;
3747: LD_ADDR_EXP 51
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// sRanger := false ;
3755: LD_ADDR_EXP 61
3759: PUSH
3760: LD_INT 0
3762: ST_TO_ADDR
// sComputer := false ;
3763: LD_ADDR_EXP 62
3767: PUSH
3768: LD_INT 0
3770: ST_TO_ADDR
// s30 := false ;
3771: LD_ADDR_EXP 63
3775: PUSH
3776: LD_INT 0
3778: ST_TO_ADDR
// s60 := false ;
3779: LD_ADDR_EXP 64
3783: PUSH
3784: LD_INT 0
3786: ST_TO_ADDR
// end ;
3787: LD_VAR 0 1
3791: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
// result := [ ] ;
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: EMPTY
3807: ST_TO_ADDR
// if campaign_id = 1 then
3808: LD_OWVAR 69
3812: PUSH
3813: LD_INT 1
3815: EQUAL
3816: IFFALSE 6982
// begin case mission_number of 1 :
3818: LD_OWVAR 70
3822: PUSH
3823: LD_INT 1
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3907
3831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 11
3845: PUSH
3846: LD_INT 12
3848: PUSH
3849: LD_INT 15
3851: PUSH
3852: LD_INT 16
3854: PUSH
3855: LD_INT 22
3857: PUSH
3858: LD_INT 23
3860: PUSH
3861: LD_INT 26
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 101
3877: PUSH
3878: LD_INT 102
3880: PUSH
3881: LD_INT 106
3883: PUSH
3884: LD_INT 116
3886: PUSH
3887: LD_INT 117
3889: PUSH
3890: LD_INT 118
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: ST_TO_ADDR
3905: GO 6980
3907: LD_INT 2
3909: DOUBLE
3910: EQUAL
3911: IFTRUE 3915
3913: GO 3999
3915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: LD_INT 2
3923: PUSH
3924: LD_INT 4
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 12
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: LD_INT 16
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 23
3944: PUSH
3945: LD_INT 26
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 101
3961: PUSH
3962: LD_INT 102
3964: PUSH
3965: LD_INT 105
3967: PUSH
3968: LD_INT 106
3970: PUSH
3971: LD_INT 108
3973: PUSH
3974: LD_INT 116
3976: PUSH
3977: LD_INT 117
3979: PUSH
3980: LD_INT 118
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: ST_TO_ADDR
3997: GO 6980
3999: LD_INT 3
4001: DOUBLE
4002: EQUAL
4003: IFTRUE 4007
4005: GO 4095
4007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4008: LD_ADDR_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: LD_INT 11
4024: PUSH
4025: LD_INT 12
4027: PUSH
4028: LD_INT 15
4030: PUSH
4031: LD_INT 16
4033: PUSH
4034: LD_INT 22
4036: PUSH
4037: LD_INT 26
4039: PUSH
4040: LD_INT 36
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 101
4057: PUSH
4058: LD_INT 102
4060: PUSH
4061: LD_INT 105
4063: PUSH
4064: LD_INT 106
4066: PUSH
4067: LD_INT 108
4069: PUSH
4070: LD_INT 116
4072: PUSH
4073: LD_INT 117
4075: PUSH
4076: LD_INT 118
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: ST_TO_ADDR
4093: GO 6980
4095: LD_INT 4
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4103
4101: GO 4199
4103: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: LD_INT 8
4120: PUSH
4121: LD_INT 11
4123: PUSH
4124: LD_INT 12
4126: PUSH
4127: LD_INT 15
4129: PUSH
4130: LD_INT 16
4132: PUSH
4133: LD_INT 22
4135: PUSH
4136: LD_INT 23
4138: PUSH
4139: LD_INT 26
4141: PUSH
4142: LD_INT 36
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 101
4161: PUSH
4162: LD_INT 102
4164: PUSH
4165: LD_INT 105
4167: PUSH
4168: LD_INT 106
4170: PUSH
4171: LD_INT 108
4173: PUSH
4174: LD_INT 116
4176: PUSH
4177: LD_INT 117
4179: PUSH
4180: LD_INT 118
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: ST_TO_ADDR
4197: GO 6980
4199: LD_INT 5
4201: DOUBLE
4202: EQUAL
4203: IFTRUE 4207
4205: GO 4319
4207: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: LD_INT 5
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: LD_INT 8
4227: PUSH
4228: LD_INT 11
4230: PUSH
4231: LD_INT 12
4233: PUSH
4234: LD_INT 15
4236: PUSH
4237: LD_INT 16
4239: PUSH
4240: LD_INT 22
4242: PUSH
4243: LD_INT 23
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 26
4251: PUSH
4252: LD_INT 36
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 101
4273: PUSH
4274: LD_INT 102
4276: PUSH
4277: LD_INT 105
4279: PUSH
4280: LD_INT 106
4282: PUSH
4283: LD_INT 108
4285: PUSH
4286: LD_INT 109
4288: PUSH
4289: LD_INT 112
4291: PUSH
4292: LD_INT 116
4294: PUSH
4295: LD_INT 117
4297: PUSH
4298: LD_INT 118
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: ST_TO_ADDR
4317: GO 6980
4319: LD_INT 6
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4459
4327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: LD_INT 2
4335: PUSH
4336: LD_INT 4
4338: PUSH
4339: LD_INT 5
4341: PUSH
4342: LD_INT 6
4344: PUSH
4345: LD_INT 8
4347: PUSH
4348: LD_INT 11
4350: PUSH
4351: LD_INT 12
4353: PUSH
4354: LD_INT 15
4356: PUSH
4357: LD_INT 16
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 26
4377: PUSH
4378: LD_INT 30
4380: PUSH
4381: LD_INT 31
4383: PUSH
4384: LD_INT 32
4386: PUSH
4387: LD_INT 36
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 101
4413: PUSH
4414: LD_INT 102
4416: PUSH
4417: LD_INT 105
4419: PUSH
4420: LD_INT 106
4422: PUSH
4423: LD_INT 108
4425: PUSH
4426: LD_INT 109
4428: PUSH
4429: LD_INT 112
4431: PUSH
4432: LD_INT 116
4434: PUSH
4435: LD_INT 117
4437: PUSH
4438: LD_INT 118
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: ST_TO_ADDR
4457: GO 6980
4459: LD_INT 7
4461: DOUBLE
4462: EQUAL
4463: IFTRUE 4467
4465: GO 4579
4467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 7
4484: PUSH
4485: LD_INT 11
4487: PUSH
4488: LD_INT 12
4490: PUSH
4491: LD_INT 15
4493: PUSH
4494: LD_INT 16
4496: PUSH
4497: LD_INT 20
4499: PUSH
4500: LD_INT 21
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 23
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 101
4533: PUSH
4534: LD_INT 102
4536: PUSH
4537: LD_INT 103
4539: PUSH
4540: LD_INT 105
4542: PUSH
4543: LD_INT 106
4545: PUSH
4546: LD_INT 108
4548: PUSH
4549: LD_INT 112
4551: PUSH
4552: LD_INT 116
4554: PUSH
4555: LD_INT 117
4557: PUSH
4558: LD_INT 118
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 6980
4579: LD_INT 8
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4727
4587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4588: LD_ADDR_VAR 0 2
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: LD_INT 4
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: LD_INT 6
4604: PUSH
4605: LD_INT 7
4607: PUSH
4608: LD_INT 8
4610: PUSH
4611: LD_INT 11
4613: PUSH
4614: LD_INT 12
4616: PUSH
4617: LD_INT 15
4619: PUSH
4620: LD_INT 16
4622: PUSH
4623: LD_INT 20
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 23
4634: PUSH
4635: LD_INT 25
4637: PUSH
4638: LD_INT 26
4640: PUSH
4641: LD_INT 30
4643: PUSH
4644: LD_INT 31
4646: PUSH
4647: LD_INT 32
4649: PUSH
4650: LD_INT 36
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 101
4677: PUSH
4678: LD_INT 102
4680: PUSH
4681: LD_INT 103
4683: PUSH
4684: LD_INT 105
4686: PUSH
4687: LD_INT 106
4689: PUSH
4690: LD_INT 108
4692: PUSH
4693: LD_INT 109
4695: PUSH
4696: LD_INT 112
4698: PUSH
4699: LD_INT 116
4701: PUSH
4702: LD_INT 117
4704: PUSH
4705: LD_INT 118
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: ST_TO_ADDR
4725: GO 6980
4727: LD_INT 9
4729: DOUBLE
4730: EQUAL
4731: IFTRUE 4735
4733: GO 4883
4735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: LD_INT 5
4749: PUSH
4750: LD_INT 6
4752: PUSH
4753: LD_INT 7
4755: PUSH
4756: LD_INT 8
4758: PUSH
4759: LD_INT 11
4761: PUSH
4762: LD_INT 12
4764: PUSH
4765: LD_INT 15
4767: PUSH
4768: LD_INT 16
4770: PUSH
4771: LD_INT 20
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 23
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 26
4788: PUSH
4789: LD_INT 28
4791: PUSH
4792: LD_INT 30
4794: PUSH
4795: LD_INT 31
4797: PUSH
4798: LD_INT 32
4800: PUSH
4801: LD_INT 36
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 101
4829: PUSH
4830: LD_INT 102
4832: PUSH
4833: LD_INT 103
4835: PUSH
4836: LD_INT 105
4838: PUSH
4839: LD_INT 106
4841: PUSH
4842: LD_INT 108
4844: PUSH
4845: LD_INT 109
4847: PUSH
4848: LD_INT 112
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 116
4856: PUSH
4857: LD_INT 117
4859: PUSH
4860: LD_INT 118
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: ST_TO_ADDR
4881: GO 6980
4883: LD_INT 10
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 5087
4891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: LD_INT 6
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: LD_INT 8
4914: PUSH
4915: LD_INT 9
4917: PUSH
4918: LD_INT 10
4920: PUSH
4921: LD_INT 11
4923: PUSH
4924: LD_INT 12
4926: PUSH
4927: LD_INT 13
4929: PUSH
4930: LD_INT 14
4932: PUSH
4933: LD_INT 15
4935: PUSH
4936: LD_INT 16
4938: PUSH
4939: LD_INT 17
4941: PUSH
4942: LD_INT 18
4944: PUSH
4945: LD_INT 19
4947: PUSH
4948: LD_INT 20
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 23
4959: PUSH
4960: LD_INT 24
4962: PUSH
4963: LD_INT 25
4965: PUSH
4966: LD_INT 26
4968: PUSH
4969: LD_INT 28
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 36
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 101
5017: PUSH
5018: LD_INT 102
5020: PUSH
5021: LD_INT 103
5023: PUSH
5024: LD_INT 104
5026: PUSH
5027: LD_INT 105
5029: PUSH
5030: LD_INT 106
5032: PUSH
5033: LD_INT 107
5035: PUSH
5036: LD_INT 108
5038: PUSH
5039: LD_INT 109
5041: PUSH
5042: LD_INT 110
5044: PUSH
5045: LD_INT 111
5047: PUSH
5048: LD_INT 112
5050: PUSH
5051: LD_INT 114
5053: PUSH
5054: LD_INT 116
5056: PUSH
5057: LD_INT 117
5059: PUSH
5060: LD_INT 118
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: ST_TO_ADDR
5085: GO 6980
5087: LD_INT 11
5089: DOUBLE
5090: EQUAL
5091: IFTRUE 5095
5093: GO 5299
5095: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5096: LD_ADDR_VAR 0 2
5100: PUSH
5101: LD_INT 2
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 6
5115: PUSH
5116: LD_INT 7
5118: PUSH
5119: LD_INT 8
5121: PUSH
5122: LD_INT 9
5124: PUSH
5125: LD_INT 10
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 12
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: LD_INT 14
5139: PUSH
5140: LD_INT 15
5142: PUSH
5143: LD_INT 16
5145: PUSH
5146: LD_INT 17
5148: PUSH
5149: LD_INT 18
5151: PUSH
5152: LD_INT 19
5154: PUSH
5155: LD_INT 20
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 22
5163: PUSH
5164: LD_INT 23
5166: PUSH
5167: LD_INT 24
5169: PUSH
5170: LD_INT 25
5172: PUSH
5173: LD_INT 26
5175: PUSH
5176: LD_INT 28
5178: PUSH
5179: LD_INT 30
5181: PUSH
5182: LD_INT 31
5184: PUSH
5185: LD_INT 32
5187: PUSH
5188: LD_INT 34
5190: PUSH
5191: LD_INT 36
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 101
5229: PUSH
5230: LD_INT 102
5232: PUSH
5233: LD_INT 103
5235: PUSH
5236: LD_INT 104
5238: PUSH
5239: LD_INT 105
5241: PUSH
5242: LD_INT 106
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 108
5250: PUSH
5251: LD_INT 109
5253: PUSH
5254: LD_INT 110
5256: PUSH
5257: LD_INT 111
5259: PUSH
5260: LD_INT 112
5262: PUSH
5263: LD_INT 114
5265: PUSH
5266: LD_INT 116
5268: PUSH
5269: LD_INT 117
5271: PUSH
5272: LD_INT 118
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: ST_TO_ADDR
5297: GO 6980
5299: LD_INT 12
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5307
5305: GO 5527
5307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5308: LD_ADDR_VAR 0 2
5312: PUSH
5313: LD_INT 1
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 4
5324: PUSH
5325: LD_INT 5
5327: PUSH
5328: LD_INT 6
5330: PUSH
5331: LD_INT 7
5333: PUSH
5334: LD_INT 8
5336: PUSH
5337: LD_INT 9
5339: PUSH
5340: LD_INT 10
5342: PUSH
5343: LD_INT 11
5345: PUSH
5346: LD_INT 12
5348: PUSH
5349: LD_INT 13
5351: PUSH
5352: LD_INT 14
5354: PUSH
5355: LD_INT 15
5357: PUSH
5358: LD_INT 16
5360: PUSH
5361: LD_INT 17
5363: PUSH
5364: LD_INT 18
5366: PUSH
5367: LD_INT 19
5369: PUSH
5370: LD_INT 20
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 22
5378: PUSH
5379: LD_INT 23
5381: PUSH
5382: LD_INT 24
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 26
5390: PUSH
5391: LD_INT 27
5393: PUSH
5394: LD_INT 28
5396: PUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 31
5402: PUSH
5403: LD_INT 32
5405: PUSH
5406: LD_INT 33
5408: PUSH
5409: LD_INT 34
5411: PUSH
5412: LD_INT 36
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 101
5453: PUSH
5454: LD_INT 102
5456: PUSH
5457: LD_INT 103
5459: PUSH
5460: LD_INT 104
5462: PUSH
5463: LD_INT 105
5465: PUSH
5466: LD_INT 106
5468: PUSH
5469: LD_INT 107
5471: PUSH
5472: LD_INT 108
5474: PUSH
5475: LD_INT 109
5477: PUSH
5478: LD_INT 110
5480: PUSH
5481: LD_INT 111
5483: PUSH
5484: LD_INT 112
5486: PUSH
5487: LD_INT 113
5489: PUSH
5490: LD_INT 114
5492: PUSH
5493: LD_INT 116
5495: PUSH
5496: LD_INT 117
5498: PUSH
5499: LD_INT 118
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 6980
5527: LD_INT 13
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5743
5535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 3
5549: PUSH
5550: LD_INT 4
5552: PUSH
5553: LD_INT 5
5555: PUSH
5556: LD_INT 8
5558: PUSH
5559: LD_INT 9
5561: PUSH
5562: LD_INT 10
5564: PUSH
5565: LD_INT 11
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: LD_INT 14
5573: PUSH
5574: LD_INT 15
5576: PUSH
5577: LD_INT 16
5579: PUSH
5580: LD_INT 17
5582: PUSH
5583: LD_INT 18
5585: PUSH
5586: LD_INT 19
5588: PUSH
5589: LD_INT 20
5591: PUSH
5592: LD_INT 21
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_INT 23
5600: PUSH
5601: LD_INT 24
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 26
5609: PUSH
5610: LD_INT 27
5612: PUSH
5613: LD_INT 28
5615: PUSH
5616: LD_INT 30
5618: PUSH
5619: LD_INT 31
5621: PUSH
5622: LD_INT 32
5624: PUSH
5625: LD_INT 33
5627: PUSH
5628: LD_INT 34
5630: PUSH
5631: LD_INT 36
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 101
5669: PUSH
5670: LD_INT 102
5672: PUSH
5673: LD_INT 103
5675: PUSH
5676: LD_INT 104
5678: PUSH
5679: LD_INT 105
5681: PUSH
5682: LD_INT 106
5684: PUSH
5685: LD_INT 107
5687: PUSH
5688: LD_INT 108
5690: PUSH
5691: LD_INT 109
5693: PUSH
5694: LD_INT 110
5696: PUSH
5697: LD_INT 111
5699: PUSH
5700: LD_INT 112
5702: PUSH
5703: LD_INT 113
5705: PUSH
5706: LD_INT 114
5708: PUSH
5709: LD_INT 116
5711: PUSH
5712: LD_INT 117
5714: PUSH
5715: LD_INT 118
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6980
5743: LD_INT 14
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5975
5751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 3
5765: PUSH
5766: LD_INT 4
5768: PUSH
5769: LD_INT 5
5771: PUSH
5772: LD_INT 6
5774: PUSH
5775: LD_INT 7
5777: PUSH
5778: LD_INT 8
5780: PUSH
5781: LD_INT 9
5783: PUSH
5784: LD_INT 10
5786: PUSH
5787: LD_INT 11
5789: PUSH
5790: LD_INT 12
5792: PUSH
5793: LD_INT 13
5795: PUSH
5796: LD_INT 14
5798: PUSH
5799: LD_INT 15
5801: PUSH
5802: LD_INT 16
5804: PUSH
5805: LD_INT 17
5807: PUSH
5808: LD_INT 18
5810: PUSH
5811: LD_INT 19
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 24
5828: PUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 26
5834: PUSH
5835: LD_INT 27
5837: PUSH
5838: LD_INT 28
5840: PUSH
5841: LD_INT 29
5843: PUSH
5844: LD_INT 30
5846: PUSH
5847: LD_INT 31
5849: PUSH
5850: LD_INT 32
5852: PUSH
5853: LD_INT 33
5855: PUSH
5856: LD_INT 34
5858: PUSH
5859: LD_INT 36
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 101
5901: PUSH
5902: LD_INT 102
5904: PUSH
5905: LD_INT 103
5907: PUSH
5908: LD_INT 104
5910: PUSH
5911: LD_INT 105
5913: PUSH
5914: LD_INT 106
5916: PUSH
5917: LD_INT 107
5919: PUSH
5920: LD_INT 108
5922: PUSH
5923: LD_INT 109
5925: PUSH
5926: LD_INT 110
5928: PUSH
5929: LD_INT 111
5931: PUSH
5932: LD_INT 112
5934: PUSH
5935: LD_INT 113
5937: PUSH
5938: LD_INT 114
5940: PUSH
5941: LD_INT 116
5943: PUSH
5944: LD_INT 117
5946: PUSH
5947: LD_INT 118
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: ST_TO_ADDR
5973: GO 6980
5975: LD_INT 15
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 6207
5983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: LD_INT 2
5994: PUSH
5995: LD_INT 3
5997: PUSH
5998: LD_INT 4
6000: PUSH
6001: LD_INT 5
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: LD_INT 7
6009: PUSH
6010: LD_INT 8
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: LD_INT 10
6018: PUSH
6019: LD_INT 11
6021: PUSH
6022: LD_INT 12
6024: PUSH
6025: LD_INT 13
6027: PUSH
6028: LD_INT 14
6030: PUSH
6031: LD_INT 15
6033: PUSH
6034: LD_INT 16
6036: PUSH
6037: LD_INT 17
6039: PUSH
6040: LD_INT 18
6042: PUSH
6043: LD_INT 19
6045: PUSH
6046: LD_INT 20
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: LD_INT 25
6063: PUSH
6064: LD_INT 26
6066: PUSH
6067: LD_INT 27
6069: PUSH
6070: LD_INT 28
6072: PUSH
6073: LD_INT 29
6075: PUSH
6076: LD_INT 30
6078: PUSH
6079: LD_INT 31
6081: PUSH
6082: LD_INT 32
6084: PUSH
6085: LD_INT 33
6087: PUSH
6088: LD_INT 34
6090: PUSH
6091: LD_INT 36
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 101
6133: PUSH
6134: LD_INT 102
6136: PUSH
6137: LD_INT 103
6139: PUSH
6140: LD_INT 104
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 107
6151: PUSH
6152: LD_INT 108
6154: PUSH
6155: LD_INT 109
6157: PUSH
6158: LD_INT 110
6160: PUSH
6161: LD_INT 111
6163: PUSH
6164: LD_INT 112
6166: PUSH
6167: LD_INT 113
6169: PUSH
6170: LD_INT 114
6172: PUSH
6173: LD_INT 116
6175: PUSH
6176: LD_INT 117
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
6205: GO 6980
6207: LD_INT 16
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6351
6215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: LD_INT 7
6232: PUSH
6233: LD_INT 11
6235: PUSH
6236: LD_INT 12
6238: PUSH
6239: LD_INT 15
6241: PUSH
6242: LD_INT 16
6244: PUSH
6245: LD_INT 20
6247: PUSH
6248: LD_INT 21
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 23
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 30
6265: PUSH
6266: LD_INT 31
6268: PUSH
6269: LD_INT 32
6271: PUSH
6272: LD_INT 33
6274: PUSH
6275: LD_INT 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 101
6301: PUSH
6302: LD_INT 102
6304: PUSH
6305: LD_INT 103
6307: PUSH
6308: LD_INT 106
6310: PUSH
6311: LD_INT 108
6313: PUSH
6314: LD_INT 112
6316: PUSH
6317: LD_INT 113
6319: PUSH
6320: LD_INT 114
6322: PUSH
6323: LD_INT 116
6325: PUSH
6326: LD_INT 117
6328: PUSH
6329: LD_INT 118
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 6980
6351: LD_INT 17
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6583
6359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: LD_INT 6
6382: PUSH
6383: LD_INT 7
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 9
6391: PUSH
6392: LD_INT 10
6394: PUSH
6395: LD_INT 11
6397: PUSH
6398: LD_INT 12
6400: PUSH
6401: LD_INT 13
6403: PUSH
6404: LD_INT 14
6406: PUSH
6407: LD_INT 15
6409: PUSH
6410: LD_INT 16
6412: PUSH
6413: LD_INT 17
6415: PUSH
6416: LD_INT 18
6418: PUSH
6419: LD_INT 19
6421: PUSH
6422: LD_INT 20
6424: PUSH
6425: LD_INT 21
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 26
6442: PUSH
6443: LD_INT 27
6445: PUSH
6446: LD_INT 28
6448: PUSH
6449: LD_INT 29
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 31
6457: PUSH
6458: LD_INT 32
6460: PUSH
6461: LD_INT 33
6463: PUSH
6464: LD_INT 34
6466: PUSH
6467: LD_INT 36
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 101
6509: PUSH
6510: LD_INT 102
6512: PUSH
6513: LD_INT 103
6515: PUSH
6516: LD_INT 104
6518: PUSH
6519: LD_INT 105
6521: PUSH
6522: LD_INT 106
6524: PUSH
6525: LD_INT 107
6527: PUSH
6528: LD_INT 108
6530: PUSH
6531: LD_INT 109
6533: PUSH
6534: LD_INT 110
6536: PUSH
6537: LD_INT 111
6539: PUSH
6540: LD_INT 112
6542: PUSH
6543: LD_INT 113
6545: PUSH
6546: LD_INT 114
6548: PUSH
6549: LD_INT 116
6551: PUSH
6552: LD_INT 117
6554: PUSH
6555: LD_INT 118
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: ST_TO_ADDR
6581: GO 6980
6583: LD_INT 18
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6739
6591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6592: LD_ADDR_VAR 0 2
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: LD_INT 4
6602: PUSH
6603: LD_INT 5
6605: PUSH
6606: LD_INT 7
6608: PUSH
6609: LD_INT 11
6611: PUSH
6612: LD_INT 12
6614: PUSH
6615: LD_INT 15
6617: PUSH
6618: LD_INT 16
6620: PUSH
6621: LD_INT 20
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 23
6632: PUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 26
6638: PUSH
6639: LD_INT 30
6641: PUSH
6642: LD_INT 31
6644: PUSH
6645: LD_INT 32
6647: PUSH
6648: LD_INT 33
6650: PUSH
6651: LD_INT 34
6653: PUSH
6654: LD_INT 35
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 101
6685: PUSH
6686: LD_INT 102
6688: PUSH
6689: LD_INT 103
6691: PUSH
6692: LD_INT 106
6694: PUSH
6695: LD_INT 108
6697: PUSH
6698: LD_INT 112
6700: PUSH
6701: LD_INT 113
6703: PUSH
6704: LD_INT 114
6706: PUSH
6707: LD_INT 115
6709: PUSH
6710: LD_INT 116
6712: PUSH
6713: LD_INT 117
6715: PUSH
6716: LD_INT 118
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 6980
6739: LD_INT 19
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6979
6747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 9
6779: PUSH
6780: LD_INT 10
6782: PUSH
6783: LD_INT 11
6785: PUSH
6786: LD_INT 12
6788: PUSH
6789: LD_INT 13
6791: PUSH
6792: LD_INT 14
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 17
6803: PUSH
6804: LD_INT 18
6806: PUSH
6807: LD_INT 19
6809: PUSH
6810: LD_INT 20
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 23
6821: PUSH
6822: LD_INT 24
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: LD_INT 26
6830: PUSH
6831: LD_INT 27
6833: PUSH
6834: LD_INT 28
6836: PUSH
6837: LD_INT 29
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 31
6845: PUSH
6846: LD_INT 32
6848: PUSH
6849: LD_INT 33
6851: PUSH
6852: LD_INT 34
6854: PUSH
6855: LD_INT 35
6857: PUSH
6858: LD_INT 36
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 101
6901: PUSH
6902: LD_INT 102
6904: PUSH
6905: LD_INT 103
6907: PUSH
6908: LD_INT 104
6910: PUSH
6911: LD_INT 105
6913: PUSH
6914: LD_INT 106
6916: PUSH
6917: LD_INT 107
6919: PUSH
6920: LD_INT 108
6922: PUSH
6923: LD_INT 109
6925: PUSH
6926: LD_INT 110
6928: PUSH
6929: LD_INT 111
6931: PUSH
6932: LD_INT 112
6934: PUSH
6935: LD_INT 113
6937: PUSH
6938: LD_INT 114
6940: PUSH
6941: LD_INT 115
6943: PUSH
6944: LD_INT 116
6946: PUSH
6947: LD_INT 117
6949: PUSH
6950: LD_INT 118
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 6980
6979: POP
// end else
6980: GO 7211
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: LD_INT 4
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: LD_INT 6
7004: PUSH
7005: LD_INT 7
7007: PUSH
7008: LD_INT 8
7010: PUSH
7011: LD_INT 9
7013: PUSH
7014: LD_INT 10
7016: PUSH
7017: LD_INT 11
7019: PUSH
7020: LD_INT 12
7022: PUSH
7023: LD_INT 13
7025: PUSH
7026: LD_INT 14
7028: PUSH
7029: LD_INT 15
7031: PUSH
7032: LD_INT 16
7034: PUSH
7035: LD_INT 17
7037: PUSH
7038: LD_INT 18
7040: PUSH
7041: LD_INT 19
7043: PUSH
7044: LD_INT 20
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 23
7055: PUSH
7056: LD_INT 24
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 27
7067: PUSH
7068: LD_INT 28
7070: PUSH
7071: LD_INT 29
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 31
7079: PUSH
7080: LD_INT 32
7082: PUSH
7083: LD_INT 33
7085: PUSH
7086: LD_INT 34
7088: PUSH
7089: LD_INT 35
7091: PUSH
7092: LD_INT 36
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 101
7135: PUSH
7136: LD_INT 102
7138: PUSH
7139: LD_INT 103
7141: PUSH
7142: LD_INT 104
7144: PUSH
7145: LD_INT 105
7147: PUSH
7148: LD_INT 106
7150: PUSH
7151: LD_INT 107
7153: PUSH
7154: LD_INT 108
7156: PUSH
7157: LD_INT 109
7159: PUSH
7160: LD_INT 110
7162: PUSH
7163: LD_INT 111
7165: PUSH
7166: LD_INT 112
7168: PUSH
7169: LD_INT 113
7171: PUSH
7172: LD_INT 114
7174: PUSH
7175: LD_INT 115
7177: PUSH
7178: LD_INT 116
7180: PUSH
7181: LD_INT 117
7183: PUSH
7184: LD_INT 118
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: ST_TO_ADDR
// if result then
7211: LD_VAR 0 2
7215: IFFALSE 8001
// begin normal :=  ;
7217: LD_ADDR_VAR 0 5
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hardcore :=  ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// active :=  ;
7233: LD_ADDR_VAR 0 7
7237: PUSH
7238: LD_STRING 
7240: ST_TO_ADDR
// for i = 1 to normalCounter do
7241: LD_ADDR_VAR 0 8
7245: PUSH
7246: DOUBLE
7247: LD_INT 1
7249: DEC
7250: ST_TO_ADDR
7251: LD_EXP 9
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7358
// begin tmp := 0 ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_STRING 0
7266: ST_TO_ADDR
// if result [ 1 ] then
7267: LD_VAR 0 2
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: IFFALSE 7340
// if result [ 1 ] [ 1 ] = i then
7277: LD_VAR 0 2
7281: PUSH
7282: LD_INT 1
7284: ARRAY
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: PUSH
7290: LD_VAR 0 8
7294: EQUAL
7295: IFFALSE 7340
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PPUSH
7319: LD_INT 1
7321: PPUSH
7322: CALL_OW 3
7326: PPUSH
7327: CALL_OW 1
7331: ST_TO_ADDR
// tmp := 1 ;
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_STRING 1
7339: ST_TO_ADDR
// end ; normal := normal & tmp ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_VAR 0 5
7349: PUSH
7350: LD_VAR 0 3
7354: STR
7355: ST_TO_ADDR
// end ;
7356: GO 7256
7358: POP
7359: POP
// for i = 1 to hardcoreCounter do
7360: LD_ADDR_VAR 0 8
7364: PUSH
7365: DOUBLE
7366: LD_INT 1
7368: DEC
7369: ST_TO_ADDR
7370: LD_EXP 10
7374: PUSH
7375: FOR_TO
7376: IFFALSE 7481
// begin tmp := 0 ;
7378: LD_ADDR_VAR 0 3
7382: PUSH
7383: LD_STRING 0
7385: ST_TO_ADDR
// if result [ 2 ] then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: IFFALSE 7463
// if result [ 2 ] [ 1 ] = 100 + i then
7396: LD_VAR 0 2
7400: PUSH
7401: LD_INT 2
7403: ARRAY
7404: PUSH
7405: LD_INT 1
7407: ARRAY
7408: PUSH
7409: LD_INT 100
7411: PUSH
7412: LD_VAR 0 8
7416: PLUS
7417: EQUAL
7418: IFFALSE 7463
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7420: LD_ADDR_VAR 0 2
7424: PUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: LD_VAR 0 2
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 3
7449: PPUSH
7450: CALL_OW 1
7454: ST_TO_ADDR
// tmp := 1 ;
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: LD_STRING 1
7462: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7463: LD_ADDR_VAR 0 6
7467: PUSH
7468: LD_VAR 0 6
7472: PUSH
7473: LD_VAR 0 3
7477: STR
7478: ST_TO_ADDR
// end ;
7479: GO 7375
7481: POP
7482: POP
// if isGameLoad then
7483: LD_VAR 0 1
7487: IFFALSE 7962
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7489: LD_ADDR_VAR 0 4
7493: PUSH
7494: LD_EXP 13
7498: PUSH
7499: LD_EXP 12
7503: PUSH
7504: LD_EXP 14
7508: PUSH
7509: LD_EXP 11
7513: PUSH
7514: LD_EXP 15
7518: PUSH
7519: LD_EXP 16
7523: PUSH
7524: LD_EXP 17
7528: PUSH
7529: LD_EXP 18
7533: PUSH
7534: LD_EXP 19
7538: PUSH
7539: LD_EXP 20
7543: PUSH
7544: LD_EXP 21
7548: PUSH
7549: LD_EXP 22
7553: PUSH
7554: LD_EXP 23
7558: PUSH
7559: LD_EXP 24
7563: PUSH
7564: LD_EXP 32
7568: PUSH
7569: LD_EXP 33
7573: PUSH
7574: LD_EXP 34
7578: PUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_EXP 37
7588: PUSH
7589: LD_EXP 38
7593: PUSH
7594: LD_EXP 39
7598: PUSH
7599: LD_EXP 42
7603: PUSH
7604: LD_EXP 44
7608: PUSH
7609: LD_EXP 45
7613: PUSH
7614: LD_EXP 46
7618: PUSH
7619: LD_EXP 48
7623: PUSH
7624: LD_EXP 49
7628: PUSH
7629: LD_EXP 52
7633: PUSH
7634: LD_EXP 53
7638: PUSH
7639: LD_EXP 54
7643: PUSH
7644: LD_EXP 55
7648: PUSH
7649: LD_EXP 56
7653: PUSH
7654: LD_EXP 57
7658: PUSH
7659: LD_EXP 58
7663: PUSH
7664: LD_EXP 59
7668: PUSH
7669: LD_EXP 60
7673: PUSH
7674: LD_EXP 25
7678: PUSH
7679: LD_EXP 26
7683: PUSH
7684: LD_EXP 29
7688: PUSH
7689: LD_EXP 30
7693: PUSH
7694: LD_EXP 31
7698: PUSH
7699: LD_EXP 27
7703: PUSH
7704: LD_EXP 28
7708: PUSH
7709: LD_EXP 36
7713: PUSH
7714: LD_EXP 40
7718: PUSH
7719: LD_EXP 41
7723: PUSH
7724: LD_EXP 43
7728: PUSH
7729: LD_EXP 47
7733: PUSH
7734: LD_EXP 50
7738: PUSH
7739: LD_EXP 51
7743: PUSH
7744: LD_EXP 61
7748: PUSH
7749: LD_EXP 62
7753: PUSH
7754: LD_EXP 63
7758: PUSH
7759: LD_EXP 64
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
// tmp :=  ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_STRING 
7827: ST_TO_ADDR
// for i = 1 to normalCounter do
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_EXP 9
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7880
// begin if flags [ i ] then
7846: LD_VAR 0 4
7850: PUSH
7851: LD_VAR 0 8
7855: ARRAY
7856: IFFALSE 7878
// tmp := tmp & i & ; ;
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 8
7872: STR
7873: PUSH
7874: LD_STRING ;
7876: STR
7877: ST_TO_ADDR
// end ;
7878: GO 7843
7880: POP
7881: POP
// for i = 1 to hardcoreCounter do
7882: LD_ADDR_VAR 0 8
7886: PUSH
7887: DOUBLE
7888: LD_INT 1
7890: DEC
7891: ST_TO_ADDR
7892: LD_EXP 10
7896: PUSH
7897: FOR_TO
7898: IFFALSE 7944
// begin if flags [ normalCounter + i ] then
7900: LD_VAR 0 4
7904: PUSH
7905: LD_EXP 9
7909: PUSH
7910: LD_VAR 0 8
7914: PLUS
7915: ARRAY
7916: IFFALSE 7942
// tmp := tmp & ( 100 + i ) & ; ;
7918: LD_ADDR_VAR 0 3
7922: PUSH
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 100
7930: PUSH
7931: LD_VAR 0 8
7935: PLUS
7936: STR
7937: PUSH
7938: LD_STRING ;
7940: STR
7941: ST_TO_ADDR
// end ;
7942: GO 7897
7944: POP
7945: POP
// if tmp then
7946: LD_VAR 0 3
7950: IFFALSE 7962
// active := tmp ;
7952: LD_ADDR_VAR 0 7
7956: PUSH
7957: LD_VAR 0 3
7961: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7962: LD_STRING getStreamItemsFromMission("
7964: PUSH
7965: LD_VAR 0 5
7969: STR
7970: PUSH
7971: LD_STRING ","
7973: STR
7974: PUSH
7975: LD_VAR 0 6
7979: STR
7980: PUSH
7981: LD_STRING ","
7983: STR
7984: PUSH
7985: LD_VAR 0 7
7989: STR
7990: PUSH
7991: LD_STRING ")
7993: STR
7994: PPUSH
7995: CALL_OW 559
// end else
7999: GO 8008
// ToLua ( getStreamItemsFromMission("","","") ) ;
8001: LD_STRING getStreamItemsFromMission("","","")
8003: PPUSH
8004: CALL_OW 559
// end ;
8008: LD_VAR 0 2
8012: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8013: LD_EXP 8
8017: PUSH
8018: LD_EXP 13
8022: AND
8023: IFFALSE 8147
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
8031: PPUSH
// begin enable ;
8032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 22
8040: PUSH
8041: LD_OWVAR 2
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 34
8055: PUSH
8056: LD_INT 7
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 34
8065: PUSH
8066: LD_INT 45
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 34
8075: PUSH
8076: LD_INT 28
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 34
8085: PUSH
8086: LD_INT 47
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if not tmp then
8109: LD_VAR 0 2
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8147
// for i in tmp do
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8145
// begin SetLives ( i , 0 ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 234
// end ;
8143: GO 8128
8145: POP
8146: POP
// end ;
8147: PPOPN 2
8149: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8150: LD_EXP 8
8154: PUSH
8155: LD_EXP 14
8159: AND
8160: IFFALSE 8244
8162: GO 8164
8164: DISABLE
8165: LD_INT 0
8167: PPUSH
8168: PPUSH
// begin enable ;
8169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8170: LD_ADDR_VAR 0 2
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_OWVAR 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 32
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// if not tmp then
8206: LD_VAR 0 2
8210: NOT
8211: IFFALSE 8215
// exit ;
8213: GO 8244
// for i in tmp do
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 2
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8242
// begin SetLives ( i , 0 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 0
8235: PPUSH
8236: CALL_OW 234
// end ;
8240: GO 8225
8242: POP
8243: POP
// end ;
8244: PPOPN 2
8246: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8247: LD_EXP 8
8251: PUSH
8252: LD_EXP 11
8256: AND
8257: IFFALSE 8350
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
// begin enable ;
8265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 22
8273: PUSH
8274: LD_OWVAR 2
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 2
8285: PUSH
8286: LD_INT 25
8288: PUSH
8289: LD_INT 5
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 9
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 25
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 69
8330: PUSH
8331: FOR_IN
8332: IFFALSE 8348
// begin SetClass ( i , 1 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 336
// end ;
8346: GO 8331
8348: POP
8349: POP
// end ;
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8353: LD_EXP 8
8357: PUSH
8358: LD_EXP 12
8362: AND
8363: PUSH
8364: LD_OWVAR 65
8368: PUSH
8369: LD_INT 7
8371: LESS
8372: AND
8373: IFFALSE 8387
8375: GO 8377
8377: DISABLE
// begin enable ;
8378: ENABLE
// game_speed := 7 ;
8379: LD_ADDR_OWVAR 65
8383: PUSH
8384: LD_INT 7
8386: ST_TO_ADDR
// end ;
8387: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8388: LD_EXP 8
8392: PUSH
8393: LD_EXP 15
8397: AND
8398: IFFALSE 8600
8400: GO 8402
8402: DISABLE
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
8407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8408: LD_ADDR_VAR 0 3
8412: PUSH
8413: LD_INT 81
8415: PUSH
8416: LD_OWVAR 2
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 21
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not tmp then
8444: LD_VAR 0 3
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8600
// if tmp > 5 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 5
8460: GREATER
8461: IFFALSE 8473
// k := 5 else
8463: LD_ADDR_VAR 0 2
8467: PUSH
8468: LD_INT 5
8470: ST_TO_ADDR
8471: GO 8483
// k := tmp ;
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_VAR 0 3
8482: ST_TO_ADDR
// for i := 1 to k do
8483: LD_ADDR_VAR 0 1
8487: PUSH
8488: DOUBLE
8489: LD_INT 1
8491: DEC
8492: ST_TO_ADDR
8493: LD_VAR 0 2
8497: PUSH
8498: FOR_TO
8499: IFFALSE 8598
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 1
8516: PUSH
8517: LD_INT 4
8519: MOD
8520: PUSH
8521: LD_INT 1
8523: PLUS
8524: PPUSH
8525: CALL_OW 259
8529: PUSH
8530: LD_INT 10
8532: LESS
8533: IFFALSE 8596
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8535: LD_VAR 0 3
8539: PUSH
8540: LD_VAR 0 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 1
8550: PUSH
8551: LD_INT 4
8553: MOD
8554: PUSH
8555: LD_INT 1
8557: PLUS
8558: PPUSH
8559: LD_VAR 0 3
8563: PUSH
8564: LD_VAR 0 1
8568: ARRAY
8569: PPUSH
8570: LD_VAR 0 1
8574: PUSH
8575: LD_INT 4
8577: MOD
8578: PUSH
8579: LD_INT 1
8581: PLUS
8582: PPUSH
8583: CALL_OW 259
8587: PUSH
8588: LD_INT 1
8590: PLUS
8591: PPUSH
8592: CALL_OW 237
8596: GO 8498
8598: POP
8599: POP
// end ;
8600: PPOPN 3
8602: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8603: LD_EXP 8
8607: PUSH
8608: LD_EXP 16
8612: AND
8613: IFFALSE 8633
8615: GO 8617
8617: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8618: LD_INT 4
8620: PPUSH
8621: LD_OWVAR 2
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 324
8633: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8634: LD_EXP 8
8638: PUSH
8639: LD_EXP 45
8643: AND
8644: IFFALSE 8664
8646: GO 8648
8648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8649: LD_INT 19
8651: PPUSH
8652: LD_OWVAR 2
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 324
8664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8665: LD_EXP 8
8669: PUSH
8670: LD_EXP 17
8674: AND
8675: IFFALSE 8777
8677: GO 8679
8679: DISABLE
8680: LD_INT 0
8682: PPUSH
8683: PPUSH
// begin enable ;
8684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8685: LD_ADDR_VAR 0 2
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_OWVAR 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 11
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 34
8717: PUSH
8718: LD_INT 30
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: ST_TO_ADDR
// if not tmp then
8739: LD_VAR 0 2
8743: NOT
8744: IFFALSE 8748
// exit ;
8746: GO 8777
// for i in tmp do
8748: LD_ADDR_VAR 0 1
8752: PUSH
8753: LD_VAR 0 2
8757: PUSH
8758: FOR_IN
8759: IFFALSE 8775
// begin SetLives ( i , 0 ) ;
8761: LD_VAR 0 1
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 234
// end ;
8773: GO 8758
8775: POP
8776: POP
// end ;
8777: PPOPN 2
8779: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8780: LD_EXP 8
8784: PUSH
8785: LD_EXP 18
8789: AND
8790: IFFALSE 8810
8792: GO 8794
8794: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8795: LD_INT 32
8797: PPUSH
8798: LD_OWVAR 2
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 324
8810: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8811: LD_EXP 8
8815: PUSH
8816: LD_EXP 19
8820: AND
8821: IFFALSE 9002
8823: GO 8825
8825: DISABLE
8826: LD_INT 0
8828: PPUSH
8829: PPUSH
8830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8831: LD_ADDR_VAR 0 2
8835: PUSH
8836: LD_INT 22
8838: PUSH
8839: LD_OWVAR 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: ST_TO_ADDR
// if not tmp then
8867: LD_VAR 0 2
8871: NOT
8872: IFFALSE 8876
// exit ;
8874: GO 9002
// side := 0 ;
8876: LD_ADDR_VAR 0 3
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// for i := 1 to 8 do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: DOUBLE
8890: LD_INT 1
8892: DEC
8893: ST_TO_ADDR
8894: LD_INT 8
8896: PUSH
8897: FOR_TO
8898: IFFALSE 8946
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8900: LD_OWVAR 2
8904: PUSH
8905: LD_VAR 0 1
8909: NONEQUAL
8910: PUSH
8911: LD_OWVAR 2
8915: PPUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 81
8925: PUSH
8926: LD_INT 2
8928: EQUAL
8929: AND
8930: IFFALSE 8944
// begin side := i ;
8932: LD_ADDR_VAR 0 3
8936: PUSH
8937: LD_VAR 0 1
8941: ST_TO_ADDR
// break ;
8942: GO 8946
// end ;
8944: GO 8897
8946: POP
8947: POP
// if not side then
8948: LD_VAR 0 3
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9002
// for i := 1 to tmp do
8957: LD_ADDR_VAR 0 1
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 2
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9000
// if Prob ( 60 ) then
8975: LD_INT 60
8977: PPUSH
8978: CALL_OW 13
8982: IFFALSE 8998
// SetSide ( i , side ) ;
8984: LD_VAR 0 1
8988: PPUSH
8989: LD_VAR 0 3
8993: PPUSH
8994: CALL_OW 235
8998: GO 8972
9000: POP
9001: POP
// end ;
9002: PPOPN 3
9004: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9005: LD_EXP 8
9009: PUSH
9010: LD_EXP 21
9014: AND
9015: IFFALSE 9134
9017: GO 9019
9019: DISABLE
9020: LD_INT 0
9022: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9023: LD_ADDR_VAR 0 1
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_OWVAR 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 3
9052: PUSH
9053: LD_INT 23
9055: PUSH
9056: LD_INT 0
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 69
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9132
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9080: LD_VAR 0 1
9084: PPUSH
9085: CALL_OW 257
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: IN
9108: IFFALSE 9130
// SetClass ( un , rand ( 1 , 4 ) ) ;
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 4
9120: PPUSH
9121: CALL_OW 12
9125: PPUSH
9126: CALL_OW 336
9130: GO 9077
9132: POP
9133: POP
// end ;
9134: PPOPN 1
9136: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9137: LD_EXP 8
9141: PUSH
9142: LD_EXP 20
9146: AND
9147: IFFALSE 9226
9149: GO 9151
9151: DISABLE
9152: LD_INT 0
9154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_OWVAR 2
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 21
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL_OW 69
9190: ST_TO_ADDR
// if not tmp then
9191: LD_VAR 0 1
9195: NOT
9196: IFFALSE 9200
// exit ;
9198: GO 9226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9200: LD_VAR 0 1
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: PPUSH
9219: LD_INT 100
9221: PPUSH
9222: CALL_OW 234
// end ;
9226: PPOPN 1
9228: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9229: LD_EXP 8
9233: PUSH
9234: LD_EXP 22
9238: AND
9239: IFFALSE 9337
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9247: LD_ADDR_VAR 0 1
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_OWVAR 2
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: ST_TO_ADDR
// if not tmp then
9283: LD_VAR 0 1
9287: NOT
9288: IFFALSE 9292
// exit ;
9290: GO 9337
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9292: LD_VAR 0 1
9296: PUSH
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL_OW 12
9309: ARRAY
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: LD_INT 4
9316: PPUSH
9317: CALL_OW 12
9321: PPUSH
9322: LD_INT 3000
9324: PPUSH
9325: LD_INT 9000
9327: PPUSH
9328: CALL_OW 12
9332: PPUSH
9333: CALL_OW 492
// end ;
9337: PPOPN 1
9339: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9340: LD_EXP 8
9344: PUSH
9345: LD_EXP 23
9349: AND
9350: IFFALSE 9370
9352: GO 9354
9354: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9355: LD_INT 1
9357: PPUSH
9358: LD_OWVAR 2
9362: PPUSH
9363: LD_INT 0
9365: PPUSH
9366: CALL_OW 324
9370: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9371: LD_EXP 8
9375: PUSH
9376: LD_EXP 24
9380: AND
9381: IFFALSE 9464
9383: GO 9385
9385: DISABLE
9386: LD_INT 0
9388: PPUSH
9389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: LD_INT 22
9397: PUSH
9398: LD_OWVAR 2
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: ST_TO_ADDR
// if not tmp then
9426: LD_VAR 0 2
9430: NOT
9431: IFFALSE 9435
// exit ;
9433: GO 9464
// for i in tmp do
9435: LD_ADDR_VAR 0 1
9439: PUSH
9440: LD_VAR 0 2
9444: PUSH
9445: FOR_IN
9446: IFFALSE 9462
// SetBLevel ( i , 10 ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 10
9455: PPUSH
9456: CALL_OW 241
9460: GO 9445
9462: POP
9463: POP
// end ;
9464: PPOPN 2
9466: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9467: LD_EXP 8
9471: PUSH
9472: LD_EXP 25
9476: AND
9477: IFFALSE 9588
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
9486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9487: LD_ADDR_VAR 0 3
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_OWVAR 2
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 25
9506: PUSH
9507: LD_INT 1
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 69
9522: ST_TO_ADDR
// if not tmp then
9523: LD_VAR 0 3
9527: NOT
9528: IFFALSE 9532
// exit ;
9530: GO 9588
// un := tmp [ rand ( 1 , tmp ) ] ;
9532: LD_ADDR_VAR 0 2
9536: PUSH
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: CALL_OW 12
9554: ARRAY
9555: ST_TO_ADDR
// if Crawls ( un ) then
9556: LD_VAR 0 2
9560: PPUSH
9561: CALL_OW 318
9565: IFFALSE 9576
// ComWalk ( un ) ;
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9576: LD_VAR 0 2
9580: PPUSH
9581: LD_INT 5
9583: PPUSH
9584: CALL_OW 336
// end ;
9588: PPOPN 3
9590: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9591: LD_EXP 8
9595: PUSH
9596: LD_EXP 26
9600: AND
9601: PUSH
9602: LD_OWVAR 67
9606: PUSH
9607: LD_INT 4
9609: LESS
9610: AND
9611: IFFALSE 9630
9613: GO 9615
9615: DISABLE
// begin Difficulty := Difficulty + 1 ;
9616: LD_ADDR_OWVAR 67
9620: PUSH
9621: LD_OWVAR 67
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// end ;
9630: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9631: LD_EXP 8
9635: PUSH
9636: LD_EXP 27
9640: AND
9641: IFFALSE 9744
9643: GO 9645
9645: DISABLE
9646: LD_INT 0
9648: PPUSH
// begin for i := 1 to 5 do
9649: LD_ADDR_VAR 0 1
9653: PUSH
9654: DOUBLE
9655: LD_INT 1
9657: DEC
9658: ST_TO_ADDR
9659: LD_INT 5
9661: PUSH
9662: FOR_TO
9663: IFFALSE 9742
// begin uc_nation := nation_nature ;
9665: LD_ADDR_OWVAR 21
9669: PUSH
9670: LD_INT 0
9672: ST_TO_ADDR
// uc_side := 0 ;
9673: LD_ADDR_OWVAR 20
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9681: LD_ADDR_OWVAR 29
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 12
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
// hc_agressivity := 20 ;
9696: LD_ADDR_OWVAR 35
9700: PUSH
9701: LD_INT 20
9703: ST_TO_ADDR
// hc_class := class_tiger ;
9704: LD_ADDR_OWVAR 28
9708: PUSH
9709: LD_INT 14
9711: ST_TO_ADDR
// hc_gallery :=  ;
9712: LD_ADDR_OWVAR 33
9716: PUSH
9717: LD_STRING 
9719: ST_TO_ADDR
// hc_name :=  ;
9720: LD_ADDR_OWVAR 26
9724: PUSH
9725: LD_STRING 
9727: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9728: CALL_OW 44
9732: PPUSH
9733: LD_INT 0
9735: PPUSH
9736: CALL_OW 51
// end ;
9740: GO 9662
9742: POP
9743: POP
// end ;
9744: PPOPN 1
9746: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9747: LD_EXP 8
9751: PUSH
9752: LD_EXP 28
9756: AND
9757: IFFALSE 9766
9759: GO 9761
9761: DISABLE
// StreamSibBomb ;
9762: CALL 9767 0 0
9766: END
// export function StreamSibBomb ; var i , x , y ; begin
9767: LD_INT 0
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
// result := false ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_INT 0
9780: ST_TO_ADDR
// for i := 1 to 16 do
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_INT 16
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9994
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9797: LD_ADDR_VAR 0 3
9801: PUSH
9802: LD_INT 10
9804: PUSH
9805: LD_INT 20
9807: PUSH
9808: LD_INT 30
9810: PUSH
9811: LD_INT 40
9813: PUSH
9814: LD_INT 50
9816: PUSH
9817: LD_INT 60
9819: PUSH
9820: LD_INT 70
9822: PUSH
9823: LD_INT 80
9825: PUSH
9826: LD_INT 90
9828: PUSH
9829: LD_INT 100
9831: PUSH
9832: LD_INT 110
9834: PUSH
9835: LD_INT 120
9837: PUSH
9838: LD_INT 130
9840: PUSH
9841: LD_INT 140
9843: PUSH
9844: LD_INT 150
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 1
9866: PPUSH
9867: LD_INT 15
9869: PPUSH
9870: CALL_OW 12
9874: ARRAY
9875: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9876: LD_ADDR_VAR 0 4
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 20
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 40
9892: PUSH
9893: LD_INT 50
9895: PUSH
9896: LD_INT 60
9898: PUSH
9899: LD_INT 70
9901: PUSH
9902: LD_INT 80
9904: PUSH
9905: LD_INT 90
9907: PUSH
9908: LD_INT 100
9910: PUSH
9911: LD_INT 110
9913: PUSH
9914: LD_INT 120
9916: PUSH
9917: LD_INT 130
9919: PUSH
9920: LD_INT 140
9922: PUSH
9923: LD_INT 150
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 15
9948: PPUSH
9949: CALL_OW 12
9953: ARRAY
9954: ST_TO_ADDR
// if ValidHex ( x , y ) then
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_VAR 0 4
9964: PPUSH
9965: CALL_OW 488
9969: IFFALSE 9992
// begin result := [ x , y ] ;
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: LD_VAR 0 3
9980: PUSH
9981: LD_VAR 0 4
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// break ;
9990: GO 9994
// end ; end ;
9992: GO 9794
9994: POP
9995: POP
// if result then
9996: LD_VAR 0 1
10000: IFFALSE 10060
// begin ToLua ( playSibBomb() ) ;
10002: LD_STRING playSibBomb()
10004: PPUSH
10005: CALL_OW 559
// wait ( 0 0$14 ) ;
10009: LD_INT 490
10011: PPUSH
10012: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10016: LD_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_VAR 0 1
10029: PUSH
10030: LD_INT 2
10032: ARRAY
10033: PPUSH
10034: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10038: LD_VAR 0 1
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: LD_VAR 0 1
10051: PUSH
10052: LD_INT 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 429
// end ; end ;
10060: LD_VAR 0 1
10064: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10065: LD_EXP 8
10069: PUSH
10070: LD_EXP 30
10074: AND
10075: IFFALSE 10087
10077: GO 10079
10079: DISABLE
// YouLost (  ) ;
10080: LD_STRING 
10082: PPUSH
10083: CALL_OW 104
10087: END
// every 0 0$1 trigger StreamModeActive and sFog do
10088: LD_EXP 8
10092: PUSH
10093: LD_EXP 29
10097: AND
10098: IFFALSE 10112
10100: GO 10102
10102: DISABLE
// FogOff ( your_side ) ;
10103: LD_OWVAR 2
10107: PPUSH
10108: CALL_OW 344
10112: END
// every 0 0$1 trigger StreamModeActive and sSun do
10113: LD_EXP 8
10117: PUSH
10118: LD_EXP 31
10122: AND
10123: IFFALSE 10151
10125: GO 10127
10127: DISABLE
// begin solar_recharge_percent := 0 ;
10128: LD_ADDR_OWVAR 79
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10136: LD_INT 10500
10138: PPUSH
10139: CALL_OW 67
// solar_recharge_percent := 100 ;
10143: LD_ADDR_OWVAR 79
10147: PUSH
10148: LD_INT 100
10150: ST_TO_ADDR
// end ;
10151: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10152: LD_EXP 8
10156: PUSH
10157: LD_EXP 32
10161: AND
10162: IFFALSE 10401
10164: GO 10166
10166: DISABLE
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
10171: PPUSH
// begin tmp := [ ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: EMPTY
10178: ST_TO_ADDR
// for i := 1 to 6 do
10179: LD_ADDR_VAR 0 1
10183: PUSH
10184: DOUBLE
10185: LD_INT 1
10187: DEC
10188: ST_TO_ADDR
10189: LD_INT 6
10191: PUSH
10192: FOR_TO
10193: IFFALSE 10298
// begin uc_nation := nation_nature ;
10195: LD_ADDR_OWVAR 21
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// uc_side := 0 ;
10203: LD_ADDR_OWVAR 20
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10211: LD_ADDR_OWVAR 29
10215: PUSH
10216: LD_INT 12
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
// hc_agressivity := 20 ;
10226: LD_ADDR_OWVAR 35
10230: PUSH
10231: LD_INT 20
10233: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10234: LD_ADDR_OWVAR 28
10238: PUSH
10239: LD_INT 17
10241: ST_TO_ADDR
// hc_gallery :=  ;
10242: LD_ADDR_OWVAR 33
10246: PUSH
10247: LD_STRING 
10249: ST_TO_ADDR
// hc_name :=  ;
10250: LD_ADDR_OWVAR 26
10254: PUSH
10255: LD_STRING 
10257: ST_TO_ADDR
// un := CreateHuman ;
10258: LD_ADDR_VAR 0 2
10262: PUSH
10263: CALL_OW 44
10267: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10268: LD_VAR 0 2
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 51
// tmp := tmp ^ un ;
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: LD_VAR 0 3
10289: PUSH
10290: LD_VAR 0 2
10294: ADD
10295: ST_TO_ADDR
// end ;
10296: GO 10192
10298: POP
10299: POP
// repeat wait ( 0 0$1 ) ;
10300: LD_INT 35
10302: PPUSH
10303: CALL_OW 67
// for un in tmp do
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10392
// begin if IsDead ( un ) then
10320: LD_VAR 0 2
10324: PPUSH
10325: CALL_OW 301
10329: IFFALSE 10349
// begin tmp := tmp diff un ;
10331: LD_ADDR_VAR 0 3
10335: PUSH
10336: LD_VAR 0 3
10340: PUSH
10341: LD_VAR 0 2
10345: DIFF
10346: ST_TO_ADDR
// continue ;
10347: GO 10317
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10349: LD_VAR 0 2
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 0
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: CALL_OW 115
// end ;
10390: GO 10317
10392: POP
10393: POP
// until not tmp ;
10394: LD_VAR 0 3
10398: NOT
10399: IFFALSE 10300
// end ;
10401: PPOPN 3
10403: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10404: LD_EXP 8
10408: PUSH
10409: LD_EXP 33
10413: AND
10414: IFFALSE 10468
10416: GO 10418
10418: DISABLE
// begin ToLua ( displayTroll(); ) ;
10419: LD_STRING displayTroll();
10421: PPUSH
10422: CALL_OW 559
// wait ( 3 3$00 ) ;
10426: LD_INT 6300
10428: PPUSH
10429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10433: LD_STRING hideTroll();
10435: PPUSH
10436: CALL_OW 559
// wait ( 1 1$00 ) ;
10440: LD_INT 2100
10442: PPUSH
10443: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10447: LD_STRING displayTroll();
10449: PPUSH
10450: CALL_OW 559
// wait ( 1 1$00 ) ;
10454: LD_INT 2100
10456: PPUSH
10457: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10461: LD_STRING hideTroll();
10463: PPUSH
10464: CALL_OW 559
// end ;
10468: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10469: LD_EXP 8
10473: PUSH
10474: LD_EXP 34
10478: AND
10479: IFFALSE 10542
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
// begin p := 0 ;
10487: LD_ADDR_VAR 0 1
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// repeat game_speed := 1 ;
10495: LD_ADDR_OWVAR 65
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10503: LD_INT 35
10505: PPUSH
10506: CALL_OW 67
// p := p + 1 ;
10510: LD_ADDR_VAR 0 1
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: LD_INT 1
10522: PLUS
10523: ST_TO_ADDR
// until p >= 60 ;
10524: LD_VAR 0 1
10528: PUSH
10529: LD_INT 60
10531: GREATEREQUAL
10532: IFFALSE 10495
// game_speed := 4 ;
10534: LD_ADDR_OWVAR 65
10538: PUSH
10539: LD_INT 4
10541: ST_TO_ADDR
// end ;
10542: PPOPN 1
10544: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10545: LD_EXP 8
10549: PUSH
10550: LD_EXP 35
10554: AND
10555: IFFALSE 10701
10557: GO 10559
10559: DISABLE
10560: LD_INT 0
10562: PPUSH
10563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10564: LD_ADDR_VAR 0 1
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: LD_OWVAR 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 30
10586: PUSH
10587: LD_INT 0
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PPUSH
10613: CALL_OW 69
10617: ST_TO_ADDR
// if not depot then
10618: LD_VAR 0 1
10622: NOT
10623: IFFALSE 10627
// exit ;
10625: GO 10701
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 12
10649: ARRAY
10650: PPUSH
10651: CALL_OW 274
10655: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: LD_INT 0
10666: PPUSH
10667: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10671: LD_VAR 0 2
10675: PPUSH
10676: LD_INT 2
10678: PPUSH
10679: LD_INT 0
10681: PPUSH
10682: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_INT 3
10693: PPUSH
10694: LD_INT 0
10696: PPUSH
10697: CALL_OW 277
// end ;
10701: PPOPN 2
10703: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10704: LD_EXP 8
10708: PUSH
10709: LD_EXP 36
10713: AND
10714: IFFALSE 10811
10716: GO 10718
10718: DISABLE
10719: LD_INT 0
10721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10722: LD_ADDR_VAR 0 1
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_OWVAR 2
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 3
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: ST_TO_ADDR
// if not tmp then
10776: LD_VAR 0 1
10780: NOT
10781: IFFALSE 10785
// exit ;
10783: GO 10811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10785: LD_VAR 0 1
10789: PUSH
10790: LD_INT 1
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 12
10802: ARRAY
10803: PPUSH
10804: LD_INT 200
10806: PPUSH
10807: CALL_OW 234
// end ;
10811: PPOPN 1
10813: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10814: LD_EXP 8
10818: PUSH
10819: LD_EXP 37
10823: AND
10824: IFFALSE 10903
10826: GO 10828
10828: DISABLE
10829: LD_INT 0
10831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_OWVAR 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// if not tmp then
10868: LD_VAR 0 1
10872: NOT
10873: IFFALSE 10877
// exit ;
10875: GO 10903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10877: LD_VAR 0 1
10881: PUSH
10882: LD_INT 1
10884: PPUSH
10885: LD_VAR 0 1
10889: PPUSH
10890: CALL_OW 12
10894: ARRAY
10895: PPUSH
10896: LD_INT 60
10898: PPUSH
10899: CALL_OW 234
// end ;
10903: PPOPN 1
10905: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10906: LD_EXP 8
10910: PUSH
10911: LD_EXP 38
10915: AND
10916: IFFALSE 11015
10918: GO 10920
10920: DISABLE
10921: LD_INT 0
10923: PPUSH
10924: PPUSH
// begin enable ;
10925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_OWVAR 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 61
10945: PUSH
10946: EMPTY
10947: LIST
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: ST_TO_ADDR
// if not tmp then
10969: LD_VAR 0 1
10973: NOT
10974: IFFALSE 10978
// exit ;
10976: GO 11015
// for i in tmp do
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11013
// if IsControledBy ( i ) then
10991: LD_VAR 0 2
10995: PPUSH
10996: CALL_OW 312
11000: IFFALSE 11011
// ComUnlink ( i ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: CALL_OW 136
11011: GO 10988
11013: POP
11014: POP
// end ;
11015: PPOPN 2
11017: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11018: LD_EXP 8
11022: PUSH
11023: LD_EXP 39
11027: AND
11028: IFFALSE 11168
11030: GO 11032
11032: DISABLE
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
// begin ToLua ( displayPowell(); ) ;
11037: LD_STRING displayPowell();
11039: PPUSH
11040: CALL_OW 559
// uc_side := 0 ;
11044: LD_ADDR_OWVAR 20
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// uc_nation := 2 ;
11052: LD_ADDR_OWVAR 21
11056: PUSH
11057: LD_INT 2
11059: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11060: LD_ADDR_OWVAR 37
11064: PUSH
11065: LD_INT 14
11067: ST_TO_ADDR
// vc_engine := engine_siberite ;
11068: LD_ADDR_OWVAR 39
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// vc_control := control_apeman ;
11076: LD_ADDR_OWVAR 38
11080: PUSH
11081: LD_INT 5
11083: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11084: LD_ADDR_OWVAR 40
11088: PUSH
11089: LD_INT 29
11091: ST_TO_ADDR
// un := CreateVehicle ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: CALL_OW 45
11101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11102: LD_VAR 0 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11114: LD_INT 35
11116: PPUSH
11117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11121: LD_VAR 0 2
11125: PPUSH
11126: LD_INT 22
11128: PUSH
11129: LD_OWVAR 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 69
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 74
11152: PPUSH
11153: CALL_OW 115
// until IsDead ( un ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: CALL_OW 301
11166: IFFALSE 11114
// end ;
11168: PPOPN 2
11170: END
// every 0 0$1 trigger StreamModeActive and sStu do
11171: LD_EXP 8
11175: PUSH
11176: LD_EXP 47
11180: AND
11181: IFFALSE 11197
11183: GO 11185
11185: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11186: LD_STRING displayStucuk();
11188: PPUSH
11189: CALL_OW 559
// ResetFog ;
11193: CALL_OW 335
// end ;
11197: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11198: LD_EXP 8
11202: PUSH
11203: LD_EXP 40
11207: AND
11208: IFFALSE 11349
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 2
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11349
// un := tmp [ rand ( 1 , tmp ) ] ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_VAR 0 2
11271: PUSH
11272: LD_INT 1
11274: PPUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 12
11284: ARRAY
11285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_OWVAR 3
11307: PUSH
11308: LD_VAR 0 1
11312: DIFF
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 74
11323: PPUSH
11324: CALL_OW 115
// wait ( 0 0$20 ) ;
11328: LD_INT 700
11330: PPUSH
11331: CALL_OW 67
// SetSide ( un , your_side ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_OWVAR 2
11344: PPUSH
11345: CALL_OW 235
// end ;
11349: PPOPN 2
11351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11352: LD_EXP 8
11356: PUSH
11357: LD_EXP 41
11361: AND
11362: IFFALSE 11468
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11370: LD_ADDR_VAR 0 1
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_OWVAR 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: ST_TO_ADDR
// if not depot then
11424: LD_VAR 0 1
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11468
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 1
11440: ARRAY
11441: PPUSH
11442: CALL_OW 250
11446: PPUSH
11447: LD_VAR 0 1
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PPUSH
11456: CALL_OW 251
11460: PPUSH
11461: LD_INT 70
11463: PPUSH
11464: CALL_OW 495
// end ;
11468: PPOPN 1
11470: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11471: LD_EXP 8
11475: PUSH
11476: LD_EXP 42
11480: AND
11481: IFFALSE 11692
11483: GO 11485
11485: DISABLE
11486: LD_INT 0
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11493: LD_ADDR_VAR 0 5
11497: PUSH
11498: LD_INT 22
11500: PUSH
11501: LD_OWVAR 2
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PPUSH
11524: CALL_OW 69
11528: ST_TO_ADDR
// if not tmp then
11529: LD_VAR 0 5
11533: NOT
11534: IFFALSE 11538
// exit ;
11536: GO 11692
// for i in tmp do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_VAR 0 5
11547: PUSH
11548: FOR_IN
11549: IFFALSE 11690
// begin d := rand ( 0 , 5 ) ;
11551: LD_ADDR_VAR 0 4
11555: PUSH
11556: LD_INT 0
11558: PPUSH
11559: LD_INT 5
11561: PPUSH
11562: CALL_OW 12
11566: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11567: LD_ADDR_VAR 0 2
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 250
11581: PPUSH
11582: LD_VAR 0 4
11586: PPUSH
11587: LD_INT 3
11589: PPUSH
11590: LD_INT 12
11592: PPUSH
11593: CALL_OW 12
11597: PPUSH
11598: CALL_OW 272
11602: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11603: LD_ADDR_VAR 0 3
11607: PUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 251
11617: PPUSH
11618: LD_VAR 0 4
11622: PPUSH
11623: LD_INT 3
11625: PPUSH
11626: LD_INT 12
11628: PPUSH
11629: CALL_OW 12
11633: PPUSH
11634: CALL_OW 273
11638: ST_TO_ADDR
// if ValidHex ( x , y ) then
11639: LD_VAR 0 2
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: CALL_OW 488
11653: IFFALSE 11688
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11655: LD_VAR 0 1
11659: PPUSH
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 3
11672: PPUSH
11673: LD_INT 6
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 483
// end ;
11688: GO 11548
11690: POP
11691: POP
// end ;
11692: PPOPN 5
11694: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11695: LD_EXP 8
11699: PUSH
11700: LD_EXP 43
11704: AND
11705: IFFALSE 11799
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_OWVAR 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 32
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 21
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: ST_TO_ADDR
// if not tmp then
11761: LD_VAR 0 2
11765: NOT
11766: IFFALSE 11770
// exit ;
11768: GO 11799
// for i in tmp do
11770: LD_ADDR_VAR 0 1
11774: PUSH
11775: LD_VAR 0 2
11779: PUSH
11780: FOR_IN
11781: IFFALSE 11797
// SetFuel ( i , 0 ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 240
11795: GO 11780
11797: POP
11798: POP
// end ;
11799: PPOPN 2
11801: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11802: LD_EXP 8
11806: PUSH
11807: LD_EXP 44
11811: AND
11812: IFFALSE 11878
11814: GO 11816
11816: DISABLE
11817: LD_INT 0
11819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 30
11839: PUSH
11840: LD_INT 29
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 1
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 11878
// DestroyUnit ( tmp [ 1 ] ) ;
11865: LD_VAR 0 1
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PPUSH
11874: CALL_OW 65
// end ;
11878: PPOPN 1
11880: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 46
11890: AND
11891: IFFALSE 12020
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
// begin uc_side := 0 ;
11899: LD_ADDR_OWVAR 20
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// uc_nation := nation_arabian ;
11907: LD_ADDR_OWVAR 21
11911: PUSH
11912: LD_INT 2
11914: ST_TO_ADDR
// hc_gallery :=  ;
11915: LD_ADDR_OWVAR 33
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// hc_name :=  ;
11923: LD_ADDR_OWVAR 26
11927: PUSH
11928: LD_STRING 
11930: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11931: LD_INT 1
11933: PPUSH
11934: LD_INT 11
11936: PPUSH
11937: LD_INT 10
11939: PPUSH
11940: CALL_OW 380
// un := CreateHuman ;
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: CALL_OW 44
11953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11966: LD_INT 35
11968: PPUSH
11969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_INT 22
11980: PUSH
11981: LD_OWVAR 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PPUSH
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 74
12004: PPUSH
12005: CALL_OW 115
// until IsDead ( un ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: CALL_OW 301
12018: IFFALSE 11966
// end ;
12020: PPOPN 1
12022: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12023: LD_EXP 8
12027: PUSH
12028: LD_EXP 48
12032: AND
12033: IFFALSE 12045
12035: GO 12037
12037: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12038: LD_STRING earthquake(getX(game), 0, 32)
12040: PPUSH
12041: CALL_OW 559
12045: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12046: LD_EXP 8
12050: PUSH
12051: LD_EXP 49
12055: AND
12056: IFFALSE 12147
12058: GO 12060
12060: DISABLE
12061: LD_INT 0
12063: PPUSH
// begin enable ;
12064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_OWVAR 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 21
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 33
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 69
12111: ST_TO_ADDR
// if not tmp then
12112: LD_VAR 0 1
12116: NOT
12117: IFFALSE 12121
// exit ;
12119: GO 12147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 1
12128: PPUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 12
12138: ARRAY
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 234
// end ;
12147: PPOPN 1
12149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12150: LD_EXP 8
12154: PUSH
12155: LD_EXP 50
12159: AND
12160: IFFALSE 12301
12162: GO 12164
12164: DISABLE
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_OWVAR 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 25
12189: PUSH
12190: LD_INT 1
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 69
12205: ST_TO_ADDR
// if not tmp then
12206: LD_VAR 0 3
12210: NOT
12211: IFFALSE 12215
// exit ;
12213: GO 12301
// un := tmp [ rand ( 1 , tmp ) ] ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 1
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: CALL_OW 12
12237: ARRAY
12238: ST_TO_ADDR
// if Crawls ( un ) then
12239: LD_VAR 0 2
12243: PPUSH
12244: CALL_OW 318
12248: IFFALSE 12259
// ComWalk ( un ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12259: LD_VAR 0 2
12263: PPUSH
12264: LD_INT 9
12266: PPUSH
12267: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12271: LD_INT 28
12273: PPUSH
12274: LD_OWVAR 2
12278: PPUSH
12279: LD_INT 2
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12286: LD_INT 29
12288: PPUSH
12289: LD_OWVAR 2
12293: PPUSH
12294: LD_INT 2
12296: PPUSH
12297: CALL_OW 322
// end ;
12301: PPOPN 3
12303: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12304: LD_EXP 8
12308: PUSH
12309: LD_EXP 51
12313: AND
12314: IFFALSE 12425
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12425
// un := tmp [ rand ( 1 , tmp ) ] ;
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: PUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: CALL_OW 12
12391: ARRAY
12392: ST_TO_ADDR
// if Crawls ( un ) then
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 318
12402: IFFALSE 12413
// ComWalk ( un ) ;
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12413: LD_VAR 0 2
12417: PPUSH
12418: LD_INT 8
12420: PPUSH
12421: CALL_OW 336
// end ;
12425: PPOPN 3
12427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12428: LD_EXP 8
12432: PUSH
12433: LD_EXP 52
12437: AND
12438: IFFALSE 12582
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_OWVAR 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 21
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 34
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 34
12489: PUSH
12490: LD_INT 51
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 34
12499: PUSH
12500: LD_INT 32
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: ST_TO_ADDR
// if not tmp then
12523: LD_VAR 0 2
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12582
// for i in tmp do
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_VAR 0 2
12541: PUSH
12542: FOR_IN
12543: IFFALSE 12580
// if GetCargo ( i , mat_artifact ) = 0 then
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 4
12552: PPUSH
12553: CALL_OW 289
12557: PUSH
12558: LD_INT 0
12560: EQUAL
12561: IFFALSE 12578
// SetCargo ( i , mat_siberit , 100 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 3
12570: PPUSH
12571: LD_INT 100
12573: PPUSH
12574: CALL_OW 290
12578: GO 12542
12580: POP
12581: POP
// end ;
12582: PPOPN 2
12584: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12585: LD_EXP 8
12589: PUSH
12590: LD_EXP 53
12594: AND
12595: IFFALSE 12778
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_OWVAR 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: ST_TO_ADDR
// if not tmp then
12626: LD_VAR 0 2
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12778
// for i := 1 to 2 do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 2
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12776
// begin uc_side := your_side ;
12651: LD_ADDR_OWVAR 20
12655: PUSH
12656: LD_OWVAR 2
12660: ST_TO_ADDR
// uc_nation := nation_american ;
12661: LD_ADDR_OWVAR 21
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// vc_chassis := us_morphling ;
12669: LD_ADDR_OWVAR 37
12673: PUSH
12674: LD_INT 5
12676: ST_TO_ADDR
// vc_engine := engine_siberite ;
12677: LD_ADDR_OWVAR 39
12681: PUSH
12682: LD_INT 3
12684: ST_TO_ADDR
// vc_control := control_computer ;
12685: LD_ADDR_OWVAR 38
12689: PUSH
12690: LD_INT 3
12692: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12693: LD_ADDR_OWVAR 40
12697: PUSH
12698: LD_INT 10
12700: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12701: LD_VAR 0 2
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: PPUSH
12710: CALL_OW 310
12714: NOT
12715: IFFALSE 12762
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12717: CALL_OW 45
12721: PPUSH
12722: LD_VAR 0 2
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: CALL_OW 250
12735: PPUSH
12736: LD_VAR 0 2
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 251
12749: PPUSH
12750: LD_INT 12
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 50
12760: GO 12774
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12762: CALL_OW 45
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 51
// end ;
12774: GO 12648
12776: POP
12777: POP
// end ;
12778: PPOPN 2
12780: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12781: LD_EXP 8
12785: PUSH
12786: LD_EXP 54
12790: AND
12791: IFFALSE 13013
12793: GO 12795
12795: DISABLE
12796: LD_INT 0
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12804: LD_ADDR_VAR 0 6
12808: PUSH
12809: LD_INT 22
12811: PUSH
12812: LD_OWVAR 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: LD_INT 23
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// if not tmp then
12858: LD_VAR 0 6
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 13013
// s1 := rand ( 1 , 4 ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 4
12877: PPUSH
12878: CALL_OW 12
12882: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12883: LD_ADDR_VAR 0 4
12887: PUSH
12888: LD_VAR 0 6
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: CALL_OW 259
12906: ST_TO_ADDR
// if s1 = 1 then
12907: LD_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: EQUAL
12915: IFFALSE 12935
// s2 := rand ( 2 , 4 ) else
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_INT 2
12924: PPUSH
12925: LD_INT 4
12927: PPUSH
12928: CALL_OW 12
12932: ST_TO_ADDR
12933: GO 12943
// s2 := 1 ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12943: LD_ADDR_VAR 0 5
12947: PUSH
12948: LD_VAR 0 6
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: CALL_OW 259
12966: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12967: LD_VAR 0 6
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: LD_VAR 0 5
12985: PPUSH
12986: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12990: LD_VAR 0 6
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_VAR 0 4
13008: PPUSH
13009: CALL_OW 237
// end ;
13013: PPOPN 6
13015: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13016: LD_EXP 8
13020: PUSH
13021: LD_EXP 55
13025: AND
13026: IFFALSE 13105
13028: GO 13030
13030: DISABLE
13031: LD_INT 0
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 3
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// if not tmp then
13070: LD_VAR 0 1
13074: NOT
13075: IFFALSE 13079
// exit ;
13077: GO 13105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13079: LD_VAR 0 1
13083: PUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 12
13096: ARRAY
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 234
// end ;
13105: PPOPN 1
13107: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13108: LD_EXP 8
13112: PUSH
13113: LD_EXP 56
13117: AND
13118: IFFALSE 13230
13120: GO 13122
13122: DISABLE
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_OWVAR 2
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 27
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 30
13159: PUSH
13160: LD_INT 26
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 30
13169: PUSH
13170: LD_INT 28
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 2
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13230
// for i in tmp do
13201: LD_ADDR_VAR 0 1
13205: PUSH
13206: LD_VAR 0 2
13210: PUSH
13211: FOR_IN
13212: IFFALSE 13228
// SetLives ( i , 1 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 234
13226: GO 13211
13228: POP
13229: POP
// end ;
13230: PPOPN 2
13232: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13233: LD_EXP 8
13237: PUSH
13238: LD_EXP 57
13242: AND
13243: IFFALSE 13530
13245: GO 13247
13247: DISABLE
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
// begin i := rand ( 1 , 7 ) ;
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 7
13263: PPUSH
13264: CALL_OW 12
13268: ST_TO_ADDR
// case i of 1 :
13269: LD_VAR 0 1
13273: PUSH
13274: LD_INT 1
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13292
13282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13283: LD_STRING earthquake(getX(game), 0, 32)
13285: PPUSH
13286: CALL_OW 559
13290: GO 13530
13292: LD_INT 2
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13314
13300: POP
// begin ToLua ( displayStucuk(); ) ;
13301: LD_STRING displayStucuk();
13303: PPUSH
13304: CALL_OW 559
// ResetFog ;
13308: CALL_OW 335
// end ; 3 :
13312: GO 13530
13314: LD_INT 3
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13426
13322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13323: LD_ADDR_VAR 0 2
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_OWVAR 2
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 69
13358: ST_TO_ADDR
// if not tmp then
13359: LD_VAR 0 2
13363: NOT
13364: IFFALSE 13368
// exit ;
13366: GO 13530
// un := tmp [ rand ( 1 , tmp ) ] ;
13368: LD_ADDR_VAR 0 3
13372: PUSH
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 1
13380: PPUSH
13381: LD_VAR 0 2
13385: PPUSH
13386: CALL_OW 12
13390: ARRAY
13391: ST_TO_ADDR
// if Crawls ( un ) then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 318
13401: IFFALSE 13412
// ComWalk ( un ) ;
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 8
13419: PPUSH
13420: CALL_OW 336
// end ; 4 :
13424: GO 13530
13426: LD_INT 4
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13508
13434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_OWVAR 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 29
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 69
13470: ST_TO_ADDR
// if not tmp then
13471: LD_VAR 0 2
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13480: LD_VAR 0 2
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13493: LD_VAR 0 2
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: CALL_OW 65
// end ; 5 .. 7 :
13506: GO 13530
13508: LD_INT 5
13510: DOUBLE
13511: GREATEREQUAL
13512: IFFALSE 13520
13514: LD_INT 7
13516: DOUBLE
13517: LESSEQUAL
13518: IFTRUE 13522
13520: GO 13529
13522: POP
// StreamSibBomb ; end ;
13523: CALL 9767 0 0
13527: GO 13530
13529: POP
// end ;
13530: PPOPN 3
13532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13533: LD_EXP 8
13537: PUSH
13538: LD_EXP 58
13542: AND
13543: IFFALSE 13699
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13553: LD_ADDR_VAR 0 2
13557: PUSH
13558: LD_INT 81
13560: PUSH
13561: LD_OWVAR 2
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 21
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 69
13606: ST_TO_ADDR
// if not tmp then
13607: LD_VAR 0 2
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 13699
// p := 0 ;
13616: LD_ADDR_VAR 0 3
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// p := p + 1 ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 1
13643: PLUS
13644: ST_TO_ADDR
// for i in tmp do
13645: LD_ADDR_VAR 0 1
13649: PUSH
13650: LD_VAR 0 2
13654: PUSH
13655: FOR_IN
13656: IFFALSE 13687
// if GetLives ( i ) < 1000 then
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 256
13667: PUSH
13668: LD_INT 1000
13670: LESS
13671: IFFALSE 13685
// SetLives ( i , 1000 ) ;
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 1000
13680: PPUSH
13681: CALL_OW 234
13685: GO 13655
13687: POP
13688: POP
// until p > 20 ;
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 20
13696: GREATER
13697: IFFALSE 13624
// end ;
13699: PPOPN 3
13701: END
// every 0 0$1 trigger StreamModeActive and sTime do
13702: LD_EXP 8
13706: PUSH
13707: LD_EXP 59
13711: AND
13712: IFFALSE 13747
13714: GO 13716
13716: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13717: LD_INT 28
13719: PPUSH
13720: LD_OWVAR 2
13724: PPUSH
13725: LD_INT 2
13727: PPUSH
13728: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13732: LD_INT 30
13734: PPUSH
13735: LD_OWVAR 2
13739: PPUSH
13740: LD_INT 2
13742: PPUSH
13743: CALL_OW 322
// end ;
13747: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13748: LD_EXP 8
13752: PUSH
13753: LD_EXP 60
13757: AND
13758: IFFALSE 13879
13760: GO 13762
13762: DISABLE
13763: LD_INT 0
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13767: LD_ADDR_VAR 0 2
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 3
13796: PUSH
13797: LD_INT 23
13799: PUSH
13800: LD_INT 0
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: ST_TO_ADDR
// if not tmp then
13821: LD_VAR 0 2
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13879
// for i in tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_VAR 0 2
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13877
// begin if Crawls ( i ) then
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 318
13852: IFFALSE 13863
// ComWalk ( i ) ;
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 138
// SetClass ( i , 2 ) ;
13863: LD_VAR 0 1
13867: PPUSH
13868: LD_INT 2
13870: PPUSH
13871: CALL_OW 336
// end ;
13875: GO 13840
13877: POP
13878: POP
// end ;
13879: PPOPN 2
13881: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13882: LD_EXP 8
13886: PUSH
13887: LD_EXP 61
13891: AND
13892: IFFALSE 14180
13894: GO 13896
13896: DISABLE
13897: LD_INT 0
13899: PPUSH
13900: PPUSH
13901: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13902: LD_OWVAR 2
13906: PPUSH
13907: LD_INT 9
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13920: LD_INT 9
13922: PPUSH
13923: LD_OWVAR 2
13927: PPUSH
13928: CALL_OW 343
// uc_side := 9 ;
13932: LD_ADDR_OWVAR 20
13936: PUSH
13937: LD_INT 9
13939: ST_TO_ADDR
// uc_nation := 2 ;
13940: LD_ADDR_OWVAR 21
13944: PUSH
13945: LD_INT 2
13947: ST_TO_ADDR
// hc_name := Dark Warrior ;
13948: LD_ADDR_OWVAR 26
13952: PUSH
13953: LD_STRING Dark Warrior
13955: ST_TO_ADDR
// hc_gallery :=  ;
13956: LD_ADDR_OWVAR 33
13960: PUSH
13961: LD_STRING 
13963: ST_TO_ADDR
// hc_noskilllimit := true ;
13964: LD_ADDR_OWVAR 76
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13972: LD_ADDR_OWVAR 31
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: ST_TO_ADDR
// un := CreateHuman ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: CALL_OW 44
14004: ST_TO_ADDR
// hc_noskilllimit := false ;
14005: LD_ADDR_OWVAR 76
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14013: LD_VAR 0 3
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 51
// ToLua ( playRanger() ) ;
14025: LD_STRING playRanger()
14027: PPUSH
14028: CALL_OW 559
// p := 0 ;
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: LD_INT 0
14039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14040: LD_INT 35
14042: PPUSH
14043: CALL_OW 67
// p := p + 1 ;
14047: LD_ADDR_VAR 0 2
14051: PUSH
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 1
14059: PLUS
14060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14061: LD_VAR 0 3
14065: PPUSH
14066: CALL_OW 256
14070: PUSH
14071: LD_INT 1000
14073: LESS
14074: IFFALSE 14088
// SetLives ( un , 1000 ) ;
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1000
14083: PPUSH
14084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 81
14095: PUSH
14096: LD_OWVAR 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_VAR 0 3
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: PPUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: CALL_OW 74
14139: PPUSH
14140: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14144: LD_VAR 0 2
14148: PUSH
14149: LD_INT 80
14151: GREATER
14152: PUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: CALL_OW 301
14162: OR
14163: IFFALSE 14040
// if un then
14165: LD_VAR 0 3
14169: IFFALSE 14180
// RemoveUnit ( un ) ;
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 64
// end ;
14180: PPOPN 3
14182: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14183: LD_EXP 62
14187: IFFALSE 14303
14189: GO 14191
14191: DISABLE
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_INT 81
14204: PUSH
14205: LD_OWVAR 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14233: LD_STRING playComputer()
14235: PPUSH
14236: CALL_OW 559
// if not tmp then
14240: LD_VAR 0 2
14244: NOT
14245: IFFALSE 14249
// exit ;
14247: GO 14303
// for i in tmp do
14249: LD_ADDR_VAR 0 1
14253: PUSH
14254: LD_VAR 0 2
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14301
// for j := 1 to 4 do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: DOUBLE
14268: LD_INT 1
14270: DEC
14271: ST_TO_ADDR
14272: LD_INT 4
14274: PUSH
14275: FOR_TO
14276: IFFALSE 14297
// SetSkill ( i , j , 10 ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_INT 10
14290: PPUSH
14291: CALL_OW 237
14295: GO 14275
14297: POP
14298: POP
14299: GO 14259
14301: POP
14302: POP
// end ;
14303: PPOPN 3
14305: END
// every 0 0$1 trigger s30 do var i , tmp ;
14306: LD_EXP 63
14310: IFFALSE 14379
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_OWVAR 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 69
14340: ST_TO_ADDR
// if not tmp then
14341: LD_VAR 0 2
14345: NOT
14346: IFFALSE 14350
// exit ;
14348: GO 14379
// for i in tmp do
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_VAR 0 2
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14377
// SetLives ( i , 300 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_INT 300
14370: PPUSH
14371: CALL_OW 234
14375: GO 14360
14377: POP
14378: POP
// end ;
14379: PPOPN 2
14381: END
// every 0 0$1 trigger s60 do var i , tmp ;
14382: LD_EXP 64
14386: IFFALSE 14455
14388: GO 14390
14390: DISABLE
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_OWVAR 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: ST_TO_ADDR
// if not tmp then
14417: LD_VAR 0 2
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14455
// for i in tmp do
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 2
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14453
// SetLives ( i , 600 ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: LD_INT 600
14446: PPUSH
14447: CALL_OW 234
14451: GO 14436
14453: POP
14454: POP
// end ;
14455: PPOPN 2
14457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14458: LD_INT 0
14460: PPUSH
// case cmd of 301 :
14461: LD_VAR 0 1
14465: PUSH
14466: LD_INT 301
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14506
14474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14475: LD_VAR 0 6
14479: PPUSH
14480: LD_VAR 0 7
14484: PPUSH
14485: LD_VAR 0 8
14489: PPUSH
14490: LD_VAR 0 4
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: CALL 15707 0 5
14504: GO 14627
14506: LD_INT 302
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14551
14514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14515: LD_VAR 0 6
14519: PPUSH
14520: LD_VAR 0 7
14524: PPUSH
14525: LD_VAR 0 8
14529: PPUSH
14530: LD_VAR 0 9
14534: PPUSH
14535: LD_VAR 0 4
14539: PPUSH
14540: LD_VAR 0 5
14544: PPUSH
14545: CALL 15798 0 6
14549: GO 14627
14551: LD_INT 303
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14596
14559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14560: LD_VAR 0 6
14564: PPUSH
14565: LD_VAR 0 7
14569: PPUSH
14570: LD_VAR 0 8
14574: PPUSH
14575: LD_VAR 0 9
14579: PPUSH
14580: LD_VAR 0 4
14584: PPUSH
14585: LD_VAR 0 5
14589: PPUSH
14590: CALL 14632 0 6
14594: GO 14627
14596: LD_INT 304
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14626
14604: POP
// hHackTeleport ( unit , x , y ) ; end ;
14605: LD_VAR 0 2
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: LD_VAR 0 5
14619: PPUSH
14620: CALL 16391 0 3
14624: GO 14627
14626: POP
// end ;
14627: LD_VAR 0 12
14631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: LESS
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 3
14652: GREATER
14653: OR
14654: PUSH
14655: LD_VAR 0 5
14659: PPUSH
14660: LD_VAR 0 6
14664: PPUSH
14665: CALL_OW 428
14669: OR
14670: IFFALSE 14674
// exit ;
14672: GO 15394
// uc_side := your_side ;
14674: LD_ADDR_OWVAR 20
14678: PUSH
14679: LD_OWVAR 2
14683: ST_TO_ADDR
// uc_nation := nation ;
14684: LD_ADDR_OWVAR 21
14688: PUSH
14689: LD_VAR 0 1
14693: ST_TO_ADDR
// bc_level = 1 ;
14694: LD_ADDR_OWVAR 43
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// case btype of 1 :
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 1
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14726
14715: POP
// bc_type := b_depot ; 2 :
14716: LD_ADDR_OWVAR 42
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
14724: GO 15338
14726: LD_INT 2
14728: DOUBLE
14729: EQUAL
14730: IFTRUE 14734
14732: GO 14745
14734: POP
// bc_type := b_warehouse ; 3 :
14735: LD_ADDR_OWVAR 42
14739: PUSH
14740: LD_INT 1
14742: ST_TO_ADDR
14743: GO 15338
14745: LD_INT 3
14747: DOUBLE
14748: EQUAL
14749: IFTRUE 14753
14751: GO 14764
14753: POP
// bc_type := b_lab ; 4 .. 9 :
14754: LD_ADDR_OWVAR 42
14758: PUSH
14759: LD_INT 6
14761: ST_TO_ADDR
14762: GO 15338
14764: LD_INT 4
14766: DOUBLE
14767: GREATEREQUAL
14768: IFFALSE 14776
14770: LD_INT 9
14772: DOUBLE
14773: LESSEQUAL
14774: IFTRUE 14778
14776: GO 14830
14778: POP
// begin bc_type := b_lab_half ;
14779: LD_ADDR_OWVAR 42
14783: PUSH
14784: LD_INT 7
14786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14787: LD_ADDR_OWVAR 44
14791: PUSH
14792: LD_INT 10
14794: PUSH
14795: LD_INT 11
14797: PUSH
14798: LD_INT 12
14800: PUSH
14801: LD_INT 15
14803: PUSH
14804: LD_INT 14
14806: PUSH
14807: LD_INT 13
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: LD_INT 3
14825: MINUS
14826: ARRAY
14827: ST_TO_ADDR
// end ; 10 .. 13 :
14828: GO 15338
14830: LD_INT 10
14832: DOUBLE
14833: GREATEREQUAL
14834: IFFALSE 14842
14836: LD_INT 13
14838: DOUBLE
14839: LESSEQUAL
14840: IFTRUE 14844
14842: GO 14921
14844: POP
// begin bc_type := b_lab_full ;
14845: LD_ADDR_OWVAR 42
14849: PUSH
14850: LD_INT 8
14852: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14853: LD_ADDR_OWVAR 44
14857: PUSH
14858: LD_INT 10
14860: PUSH
14861: LD_INT 12
14863: PUSH
14864: LD_INT 14
14866: PUSH
14867: LD_INT 13
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: PUSH
14876: LD_VAR 0 2
14880: PUSH
14881: LD_INT 9
14883: MINUS
14884: ARRAY
14885: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14886: LD_ADDR_OWVAR 45
14890: PUSH
14891: LD_INT 11
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 12
14899: PUSH
14900: LD_INT 15
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: LD_VAR 0 2
14913: PUSH
14914: LD_INT 9
14916: MINUS
14917: ARRAY
14918: ST_TO_ADDR
// end ; 14 :
14919: GO 15338
14921: LD_INT 14
14923: DOUBLE
14924: EQUAL
14925: IFTRUE 14929
14927: GO 14940
14929: POP
// bc_type := b_workshop ; 15 :
14930: LD_ADDR_OWVAR 42
14934: PUSH
14935: LD_INT 2
14937: ST_TO_ADDR
14938: GO 15338
14940: LD_INT 15
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14959
14948: POP
// bc_type := b_factory ; 16 :
14949: LD_ADDR_OWVAR 42
14953: PUSH
14954: LD_INT 3
14956: ST_TO_ADDR
14957: GO 15338
14959: LD_INT 16
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 14978
14967: POP
// bc_type := b_ext_gun ; 17 :
14968: LD_ADDR_OWVAR 42
14972: PUSH
14973: LD_INT 17
14975: ST_TO_ADDR
14976: GO 15338
14978: LD_INT 17
14980: DOUBLE
14981: EQUAL
14982: IFTRUE 14986
14984: GO 15014
14986: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14987: LD_ADDR_OWVAR 42
14991: PUSH
14992: LD_INT 19
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 19
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: LD_VAR 0 1
15010: ARRAY
15011: ST_TO_ADDR
15012: GO 15338
15014: LD_INT 18
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15033
15022: POP
// bc_type := b_ext_radar ; 19 :
15023: LD_ADDR_OWVAR 42
15027: PUSH
15028: LD_INT 20
15030: ST_TO_ADDR
15031: GO 15338
15033: LD_INT 19
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15052
15041: POP
// bc_type := b_ext_radio ; 20 :
15042: LD_ADDR_OWVAR 42
15046: PUSH
15047: LD_INT 22
15049: ST_TO_ADDR
15050: GO 15338
15052: LD_INT 20
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15071
15060: POP
// bc_type := b_ext_siberium ; 21 :
15061: LD_ADDR_OWVAR 42
15065: PUSH
15066: LD_INT 21
15068: ST_TO_ADDR
15069: GO 15338
15071: LD_INT 21
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15090
15079: POP
// bc_type := b_ext_computer ; 22 :
15080: LD_ADDR_OWVAR 42
15084: PUSH
15085: LD_INT 24
15087: ST_TO_ADDR
15088: GO 15338
15090: LD_INT 22
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15109
15098: POP
// bc_type := b_ext_track ; 23 :
15099: LD_ADDR_OWVAR 42
15103: PUSH
15104: LD_INT 16
15106: ST_TO_ADDR
15107: GO 15338
15109: LD_INT 23
15111: DOUBLE
15112: EQUAL
15113: IFTRUE 15117
15115: GO 15128
15117: POP
// bc_type := b_ext_laser ; 24 :
15118: LD_ADDR_OWVAR 42
15122: PUSH
15123: LD_INT 25
15125: ST_TO_ADDR
15126: GO 15338
15128: LD_INT 24
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15147
15136: POP
// bc_type := b_control_tower ; 25 :
15137: LD_ADDR_OWVAR 42
15141: PUSH
15142: LD_INT 36
15144: ST_TO_ADDR
15145: GO 15338
15147: LD_INT 25
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15166
15155: POP
// bc_type := b_breastwork ; 26 :
15156: LD_ADDR_OWVAR 42
15160: PUSH
15161: LD_INT 31
15163: ST_TO_ADDR
15164: GO 15338
15166: LD_INT 26
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15185
15174: POP
// bc_type := b_bunker ; 27 :
15175: LD_ADDR_OWVAR 42
15179: PUSH
15180: LD_INT 32
15182: ST_TO_ADDR
15183: GO 15338
15185: LD_INT 27
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15204
15193: POP
// bc_type := b_turret ; 28 :
15194: LD_ADDR_OWVAR 42
15198: PUSH
15199: LD_INT 33
15201: ST_TO_ADDR
15202: GO 15338
15204: LD_INT 28
15206: DOUBLE
15207: EQUAL
15208: IFTRUE 15212
15210: GO 15223
15212: POP
// bc_type := b_armoury ; 29 :
15213: LD_ADDR_OWVAR 42
15217: PUSH
15218: LD_INT 4
15220: ST_TO_ADDR
15221: GO 15338
15223: LD_INT 29
15225: DOUBLE
15226: EQUAL
15227: IFTRUE 15231
15229: GO 15242
15231: POP
// bc_type := b_barracks ; 30 :
15232: LD_ADDR_OWVAR 42
15236: PUSH
15237: LD_INT 5
15239: ST_TO_ADDR
15240: GO 15338
15242: LD_INT 30
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15261
15250: POP
// bc_type := b_solar_power ; 31 :
15251: LD_ADDR_OWVAR 42
15255: PUSH
15256: LD_INT 27
15258: ST_TO_ADDR
15259: GO 15338
15261: LD_INT 31
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15280
15269: POP
// bc_type := b_oil_power ; 32 :
15270: LD_ADDR_OWVAR 42
15274: PUSH
15275: LD_INT 26
15277: ST_TO_ADDR
15278: GO 15338
15280: LD_INT 32
15282: DOUBLE
15283: EQUAL
15284: IFTRUE 15288
15286: GO 15299
15288: POP
// bc_type := b_siberite_power ; 33 :
15289: LD_ADDR_OWVAR 42
15293: PUSH
15294: LD_INT 28
15296: ST_TO_ADDR
15297: GO 15338
15299: LD_INT 33
15301: DOUBLE
15302: EQUAL
15303: IFTRUE 15307
15305: GO 15318
15307: POP
// bc_type := b_oil_mine ; 34 :
15308: LD_ADDR_OWVAR 42
15312: PUSH
15313: LD_INT 29
15315: ST_TO_ADDR
15316: GO 15338
15318: LD_INT 34
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15337
15326: POP
// bc_type := b_siberite_mine ; end ;
15327: LD_ADDR_OWVAR 42
15331: PUSH
15332: LD_INT 30
15334: ST_TO_ADDR
15335: GO 15338
15337: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15338: LD_ADDR_VAR 0 8
15342: PUSH
15343: LD_VAR 0 5
15347: PPUSH
15348: LD_VAR 0 6
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: CALL_OW 47
15362: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15363: LD_OWVAR 42
15367: PUSH
15368: LD_INT 32
15370: PUSH
15371: LD_INT 33
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: IN
15378: IFFALSE 15394
// PlaceWeaponTurret ( b , weapon ) ;
15380: LD_VAR 0 8
15384: PPUSH
15385: LD_VAR 0 4
15389: PPUSH
15390: CALL_OW 431
// end ;
15394: LD_VAR 0 7
15398: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15399: LD_INT 0
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15405: LD_ADDR_VAR 0 4
15409: PUSH
15410: LD_INT 22
15412: PUSH
15413: LD_OWVAR 2
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 2
15424: PUSH
15425: LD_INT 30
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 30
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: ST_TO_ADDR
// if not tmp then
15459: LD_VAR 0 4
15463: NOT
15464: IFFALSE 15468
// exit ;
15466: GO 15527
// for i in tmp do
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: LD_VAR 0 4
15477: PUSH
15478: FOR_IN
15479: IFFALSE 15525
// for j = 1 to 3 do
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_INT 3
15493: PUSH
15494: FOR_TO
15495: IFFALSE 15521
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 274
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 99999
15514: PPUSH
15515: CALL_OW 277
15519: GO 15494
15521: POP
15522: POP
15523: GO 15478
15525: POP
15526: POP
// end ;
15527: LD_VAR 0 1
15531: RET
// export function hHackSetLevel10 ; var i , j ; begin
15532: LD_INT 0
15534: PPUSH
15535: PPUSH
15536: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: PUSH
15557: FOR_IN
15558: IFFALSE 15610
// if IsSelected ( i ) then
15560: LD_VAR 0 2
15564: PPUSH
15565: CALL_OW 306
15569: IFFALSE 15608
// begin for j := 1 to 4 do
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: DOUBLE
15577: LD_INT 1
15579: DEC
15580: ST_TO_ADDR
15581: LD_INT 4
15583: PUSH
15584: FOR_TO
15585: IFFALSE 15606
// SetSkill ( i , j , 10 ) ;
15587: LD_VAR 0 2
15591: PPUSH
15592: LD_VAR 0 3
15596: PPUSH
15597: LD_INT 10
15599: PPUSH
15600: CALL_OW 237
15604: GO 15584
15606: POP
15607: POP
// end ;
15608: GO 15557
15610: POP
15611: POP
// end ;
15612: LD_VAR 0 1
15616: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15617: LD_INT 0
15619: PPUSH
15620: PPUSH
15621: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15622: LD_ADDR_VAR 0 2
15626: PUSH
15627: LD_INT 22
15629: PUSH
15630: LD_OWVAR 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 21
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: PUSH
15658: FOR_IN
15659: IFFALSE 15700
// begin for j := 1 to 4 do
15661: LD_ADDR_VAR 0 3
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_INT 4
15673: PUSH
15674: FOR_TO
15675: IFFALSE 15696
// SetSkill ( i , j , 10 ) ;
15677: LD_VAR 0 2
15681: PPUSH
15682: LD_VAR 0 3
15686: PPUSH
15687: LD_INT 10
15689: PPUSH
15690: CALL_OW 237
15694: GO 15674
15696: POP
15697: POP
// end ;
15698: GO 15658
15700: POP
15701: POP
// end ;
15702: LD_VAR 0 1
15706: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15707: LD_INT 0
15709: PPUSH
// uc_side := your_side ;
15710: LD_ADDR_OWVAR 20
15714: PUSH
15715: LD_OWVAR 2
15719: ST_TO_ADDR
// uc_nation := nation ;
15720: LD_ADDR_OWVAR 21
15724: PUSH
15725: LD_VAR 0 1
15729: ST_TO_ADDR
// InitHc ;
15730: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15734: LD_INT 0
15736: PPUSH
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_VAR 0 3
15746: PPUSH
15747: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15751: LD_VAR 0 4
15755: PPUSH
15756: LD_VAR 0 5
15760: PPUSH
15761: CALL_OW 428
15765: PUSH
15766: LD_INT 0
15768: EQUAL
15769: IFFALSE 15793
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15771: CALL_OW 44
15775: PPUSH
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 5
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: CALL_OW 48
// end ;
15793: LD_VAR 0 6
15797: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
// uc_side := your_side ;
15802: LD_ADDR_OWVAR 20
15806: PUSH
15807: LD_OWVAR 2
15811: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: LD_INT 3
15825: PUSH
15826: LD_INT 4
15828: PUSH
15829: LD_INT 5
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: IN
15839: IFFALSE 15851
// uc_nation := nation_american else
15841: LD_ADDR_OWVAR 21
15845: PUSH
15846: LD_INT 1
15848: ST_TO_ADDR
15849: GO 15894
// if chassis in [ 11 , 12 , 13 , 14 ] then
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 11
15858: PUSH
15859: LD_INT 12
15861: PUSH
15862: LD_INT 13
15864: PUSH
15865: LD_INT 14
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: IN
15874: IFFALSE 15886
// uc_nation := nation_arabian else
15876: LD_ADDR_OWVAR 21
15880: PUSH
15881: LD_INT 2
15883: ST_TO_ADDR
15884: GO 15894
// uc_nation := nation_russian ;
15886: LD_ADDR_OWVAR 21
15890: PUSH
15891: LD_INT 3
15893: ST_TO_ADDR
// vc_chassis := chassis ;
15894: LD_ADDR_OWVAR 37
15898: PUSH
15899: LD_VAR 0 1
15903: ST_TO_ADDR
// vc_engine := engine ;
15904: LD_ADDR_OWVAR 39
15908: PUSH
15909: LD_VAR 0 2
15913: ST_TO_ADDR
// vc_control := control ;
15914: LD_ADDR_OWVAR 38
15918: PUSH
15919: LD_VAR 0 3
15923: ST_TO_ADDR
// vc_weapon := weapon ;
15924: LD_ADDR_OWVAR 40
15928: PUSH
15929: LD_VAR 0 4
15933: ST_TO_ADDR
// un := CreateVehicle ;
15934: LD_ADDR_VAR 0 8
15938: PUSH
15939: CALL_OW 45
15943: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15944: LD_VAR 0 8
15948: PPUSH
15949: LD_INT 0
15951: PPUSH
15952: LD_INT 5
15954: PPUSH
15955: CALL_OW 12
15959: PPUSH
15960: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15964: LD_VAR 0 8
15968: PPUSH
15969: LD_VAR 0 5
15973: PPUSH
15974: LD_VAR 0 6
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: CALL_OW 48
// end ;
15986: LD_VAR 0 7
15990: RET
// export hInvincible ; every 1 do
15991: GO 15993
15993: DISABLE
// hInvincible := [ ] ;
15994: LD_ADDR_EXP 65
15998: PUSH
15999: EMPTY
16000: ST_TO_ADDR
16001: END
// every 10 do var i ;
16002: GO 16004
16004: DISABLE
16005: LD_INT 0
16007: PPUSH
// begin enable ;
16008: ENABLE
// if not hInvincible then
16009: LD_EXP 65
16013: NOT
16014: IFFALSE 16018
// exit ;
16016: GO 16062
// for i in hInvincible do
16018: LD_ADDR_VAR 0 1
16022: PUSH
16023: LD_EXP 65
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16060
// if GetLives ( i ) < 1000 then
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 256
16040: PUSH
16041: LD_INT 1000
16043: LESS
16044: IFFALSE 16058
// SetLives ( i , 1000 ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: LD_INT 1000
16053: PPUSH
16054: CALL_OW 234
16058: GO 16028
16060: POP
16061: POP
// end ;
16062: PPOPN 1
16064: END
// export function hHackInvincible ; var i ; begin
16065: LD_INT 0
16067: PPUSH
16068: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 21
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 69
16106: PUSH
16107: FOR_IN
16108: IFFALSE 16169
// if IsSelected ( i ) then
16110: LD_VAR 0 2
16114: PPUSH
16115: CALL_OW 306
16119: IFFALSE 16167
// begin if i in hInvincible then
16121: LD_VAR 0 2
16125: PUSH
16126: LD_EXP 65
16130: IN
16131: IFFALSE 16151
// hInvincible := hInvincible diff i else
16133: LD_ADDR_EXP 65
16137: PUSH
16138: LD_EXP 65
16142: PUSH
16143: LD_VAR 0 2
16147: DIFF
16148: ST_TO_ADDR
16149: GO 16167
// hInvincible := hInvincible union i ;
16151: LD_ADDR_EXP 65
16155: PUSH
16156: LD_EXP 65
16160: PUSH
16161: LD_VAR 0 2
16165: UNION
16166: ST_TO_ADDR
// end ;
16167: GO 16107
16169: POP
16170: POP
// end ;
16171: LD_VAR 0 1
16175: RET
// export function hHackInvisible ; var i , j ; begin
16176: LD_INT 0
16178: PPUSH
16179: PPUSH
16180: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: PUSH
16201: FOR_IN
16202: IFFALSE 16226
// if IsSelected ( i ) then
16204: LD_VAR 0 2
16208: PPUSH
16209: CALL_OW 306
16213: IFFALSE 16224
// ComForceInvisible ( i ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: CALL_OW 496
16224: GO 16201
16226: POP
16227: POP
// end ;
16228: LD_VAR 0 1
16232: RET
// export function hHackChangeYourSide ; begin
16233: LD_INT 0
16235: PPUSH
// if your_side = 8 then
16236: LD_OWVAR 2
16240: PUSH
16241: LD_INT 8
16243: EQUAL
16244: IFFALSE 16256
// your_side := 0 else
16246: LD_ADDR_OWVAR 2
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
16254: GO 16270
// your_side := your_side + 1 ;
16256: LD_ADDR_OWVAR 2
16260: PUSH
16261: LD_OWVAR 2
16265: PUSH
16266: LD_INT 1
16268: PLUS
16269: ST_TO_ADDR
// end ;
16270: LD_VAR 0 1
16274: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16275: LD_INT 0
16277: PPUSH
16278: PPUSH
16279: PPUSH
// for i in all_units do
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: LD_OWVAR 3
16289: PUSH
16290: FOR_IN
16291: IFFALSE 16369
// if IsSelected ( i ) then
16293: LD_VAR 0 2
16297: PPUSH
16298: CALL_OW 306
16302: IFFALSE 16367
// begin j := GetSide ( i ) ;
16304: LD_ADDR_VAR 0 3
16308: PUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL_OW 255
16318: ST_TO_ADDR
// if j = 8 then
16319: LD_VAR 0 3
16323: PUSH
16324: LD_INT 8
16326: EQUAL
16327: IFFALSE 16339
// j := 0 else
16329: LD_ADDR_VAR 0 3
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
16337: GO 16353
// j := j + 1 ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 1
16351: PLUS
16352: ST_TO_ADDR
// SetSide ( i , j ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_VAR 0 3
16362: PPUSH
16363: CALL_OW 235
// end ;
16367: GO 16290
16369: POP
16370: POP
// end ;
16371: LD_VAR 0 1
16375: RET
// export function hHackFog ; begin
16376: LD_INT 0
16378: PPUSH
// FogOff ( true ) ;
16379: LD_INT 1
16381: PPUSH
16382: CALL_OW 344
// end ;
16386: LD_VAR 0 1
16390: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16391: LD_INT 0
16393: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16394: LD_VAR 0 1
16398: PPUSH
16399: LD_VAR 0 2
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 483
// CenterOnXY ( x , y ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: CALL_OW 84
// end ;
16433: LD_VAR 0 4
16437: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16442: LD_VAR 0 1
16446: NOT
16447: PUSH
16448: LD_VAR 0 2
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: CALL_OW 488
16462: NOT
16463: OR
16464: PUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL_OW 266
16474: PUSH
16475: LD_INT 3
16477: NONEQUAL
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 247
16488: PUSH
16489: LD_INT 1
16491: EQUAL
16492: NOT
16493: AND
16494: OR
16495: IFFALSE 16499
// exit ;
16497: GO 16648
// if GetType ( factory ) = unit_human then
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 247
16508: PUSH
16509: LD_INT 1
16511: EQUAL
16512: IFFALSE 16529
// factory := IsInUnit ( factory ) ;
16514: LD_ADDR_VAR 0 1
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 310
16528: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 266
16538: PUSH
16539: LD_INT 3
16541: NONEQUAL
16542: IFFALSE 16546
// exit ;
16544: GO 16648
// if HexInfo ( x , y ) = factory then
16546: LD_VAR 0 2
16550: PPUSH
16551: LD_VAR 0 3
16555: PPUSH
16556: CALL_OW 428
16560: PUSH
16561: LD_VAR 0 1
16565: EQUAL
16566: IFFALSE 16593
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16568: LD_ADDR_EXP 66
16572: PUSH
16573: LD_EXP 66
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: LD_INT 0
16585: PPUSH
16586: CALL_OW 1
16590: ST_TO_ADDR
16591: GO 16644
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16593: LD_ADDR_EXP 66
16597: PUSH
16598: LD_EXP 66
16602: PPUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 255
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: LD_VAR 0 2
16627: PUSH
16628: LD_VAR 0 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 1
16643: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16644: CALL 16653 0 0
// end ;
16648: LD_VAR 0 4
16652: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16653: LD_INT 0
16655: PPUSH
16656: PPUSH
16657: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16658: LD_STRING resetFactoryWaypoint();
16660: PPUSH
16661: CALL_OW 559
// if factoryWaypoints then
16665: LD_EXP 66
16669: IFFALSE 16795
// begin list := PrepareArray ( factoryWaypoints ) ;
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_EXP 66
16680: PPUSH
16681: CALL 63427 0 1
16685: ST_TO_ADDR
// for i := 1 to list do
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: DOUBLE
16692: LD_INT 1
16694: DEC
16695: ST_TO_ADDR
16696: LD_VAR 0 3
16700: PUSH
16701: FOR_TO
16702: IFFALSE 16793
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16704: LD_STRING setFactoryWaypointXY(
16706: PUSH
16707: LD_VAR 0 3
16711: PUSH
16712: LD_VAR 0 2
16716: ARRAY
16717: PUSH
16718: LD_INT 1
16720: ARRAY
16721: STR
16722: PUSH
16723: LD_STRING ,
16725: STR
16726: PUSH
16727: LD_VAR 0 3
16731: PUSH
16732: LD_VAR 0 2
16736: ARRAY
16737: PUSH
16738: LD_INT 2
16740: ARRAY
16741: STR
16742: PUSH
16743: LD_STRING ,
16745: STR
16746: PUSH
16747: LD_VAR 0 3
16751: PUSH
16752: LD_VAR 0 2
16756: ARRAY
16757: PUSH
16758: LD_INT 3
16760: ARRAY
16761: STR
16762: PUSH
16763: LD_STRING ,
16765: STR
16766: PUSH
16767: LD_VAR 0 3
16771: PUSH
16772: LD_VAR 0 2
16776: ARRAY
16777: PUSH
16778: LD_INT 4
16780: ARRAY
16781: STR
16782: PUSH
16783: LD_STRING )
16785: STR
16786: PPUSH
16787: CALL_OW 559
16791: GO 16701
16793: POP
16794: POP
// end ; end ;
16795: LD_VAR 0 1
16799: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16800: LD_INT 0
16802: PPUSH
// if HexInfo ( x , y ) = warehouse then
16803: LD_VAR 0 2
16807: PPUSH
16808: LD_VAR 0 3
16812: PPUSH
16813: CALL_OW 428
16817: PUSH
16818: LD_VAR 0 1
16822: EQUAL
16823: IFFALSE 16850
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16825: LD_ADDR_EXP 67
16829: PUSH
16830: LD_EXP 67
16834: PPUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: LD_INT 0
16842: PPUSH
16843: CALL_OW 1
16847: ST_TO_ADDR
16848: GO 16901
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16850: LD_ADDR_EXP 67
16854: PUSH
16855: LD_EXP 67
16859: PPUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 255
16874: PUSH
16875: LD_VAR 0 1
16879: PUSH
16880: LD_VAR 0 2
16884: PUSH
16885: LD_VAR 0 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PPUSH
16896: CALL_OW 1
16900: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16901: CALL 16910 0 0
// end ;
16905: LD_VAR 0 4
16909: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16910: LD_INT 0
16912: PPUSH
16913: PPUSH
16914: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16915: LD_STRING resetWarehouseGatheringPoints();
16917: PPUSH
16918: CALL_OW 559
// if warehouseGatheringPoints then
16922: LD_EXP 67
16926: IFFALSE 17052
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16928: LD_ADDR_VAR 0 3
16932: PUSH
16933: LD_EXP 67
16937: PPUSH
16938: CALL 63427 0 1
16942: ST_TO_ADDR
// for i := 1 to list do
16943: LD_ADDR_VAR 0 2
16947: PUSH
16948: DOUBLE
16949: LD_INT 1
16951: DEC
16952: ST_TO_ADDR
16953: LD_VAR 0 3
16957: PUSH
16958: FOR_TO
16959: IFFALSE 17050
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16961: LD_STRING setWarehouseGatheringPointXY(
16963: PUSH
16964: LD_VAR 0 3
16968: PUSH
16969: LD_VAR 0 2
16973: ARRAY
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: STR
16979: PUSH
16980: LD_STRING ,
16982: STR
16983: PUSH
16984: LD_VAR 0 3
16988: PUSH
16989: LD_VAR 0 2
16993: ARRAY
16994: PUSH
16995: LD_INT 2
16997: ARRAY
16998: STR
16999: PUSH
17000: LD_STRING ,
17002: STR
17003: PUSH
17004: LD_VAR 0 3
17008: PUSH
17009: LD_VAR 0 2
17013: ARRAY
17014: PUSH
17015: LD_INT 3
17017: ARRAY
17018: STR
17019: PUSH
17020: LD_STRING ,
17022: STR
17023: PUSH
17024: LD_VAR 0 3
17028: PUSH
17029: LD_VAR 0 2
17033: ARRAY
17034: PUSH
17035: LD_INT 4
17037: ARRAY
17038: STR
17039: PUSH
17040: LD_STRING )
17042: STR
17043: PPUSH
17044: CALL_OW 559
17048: GO 16958
17050: POP
17051: POP
// end ; end ;
17052: LD_VAR 0 1
17056: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17057: LD_EXP 67
17061: IFFALSE 17746
17063: GO 17065
17065: DISABLE
17066: LD_INT 0
17068: PPUSH
17069: PPUSH
17070: PPUSH
17071: PPUSH
17072: PPUSH
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
// begin enable ;
17077: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_EXP 67
17087: PPUSH
17088: CALL 63427 0 1
17092: ST_TO_ADDR
// if not list then
17093: LD_VAR 0 3
17097: NOT
17098: IFFALSE 17102
// exit ;
17100: GO 17746
// for i := 1 to list do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: DOUBLE
17108: LD_INT 1
17110: DEC
17111: ST_TO_ADDR
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_TO
17118: IFFALSE 17744
// begin depot := list [ i ] [ 2 ] ;
17120: LD_ADDR_VAR 0 8
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_VAR 0 1
17134: ARRAY
17135: PUSH
17136: LD_INT 2
17138: ARRAY
17139: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17140: LD_ADDR_VAR 0 5
17144: PUSH
17145: LD_VAR 0 3
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PUSH
17156: LD_INT 1
17158: ARRAY
17159: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17160: LD_VAR 0 8
17164: PPUSH
17165: CALL_OW 301
17169: PUSH
17170: LD_VAR 0 5
17174: PUSH
17175: LD_VAR 0 8
17179: PPUSH
17180: CALL_OW 255
17184: NONEQUAL
17185: OR
17186: IFFALSE 17215
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17188: LD_ADDR_EXP 67
17192: PUSH
17193: LD_EXP 67
17197: PPUSH
17198: LD_VAR 0 8
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: CALL_OW 1
17210: ST_TO_ADDR
// exit ;
17211: POP
17212: POP
17213: GO 17746
// end ; x := list [ i ] [ 3 ] ;
17215: LD_ADDR_VAR 0 6
17219: PUSH
17220: LD_VAR 0 3
17224: PUSH
17225: LD_VAR 0 1
17229: ARRAY
17230: PUSH
17231: LD_INT 3
17233: ARRAY
17234: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17235: LD_ADDR_VAR 0 7
17239: PUSH
17240: LD_VAR 0 3
17244: PUSH
17245: LD_VAR 0 1
17249: ARRAY
17250: PUSH
17251: LD_INT 4
17253: ARRAY
17254: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17255: LD_ADDR_VAR 0 9
17259: PUSH
17260: LD_VAR 0 6
17264: PPUSH
17265: LD_VAR 0 7
17269: PPUSH
17270: LD_INT 16
17272: PPUSH
17273: CALL 62015 0 3
17277: ST_TO_ADDR
// if not cratesNearbyPoint then
17278: LD_VAR 0 9
17282: NOT
17283: IFFALSE 17289
// exit ;
17285: POP
17286: POP
17287: GO 17746
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17289: LD_ADDR_VAR 0 4
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_VAR 0 5
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 3
17308: PUSH
17309: LD_INT 60
17311: PUSH
17312: EMPTY
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 91
17321: PUSH
17322: LD_VAR 0 8
17326: PUSH
17327: LD_INT 6
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 25
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 25
17350: PUSH
17351: LD_INT 16
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: PUSH
17374: LD_VAR 0 8
17378: PPUSH
17379: CALL_OW 313
17383: PPUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 60
17389: PUSH
17390: EMPTY
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: LD_INT 25
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 25
17412: PUSH
17413: LD_INT 16
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PPUSH
17429: CALL_OW 72
17433: UNION
17434: ST_TO_ADDR
// if tmp then
17435: LD_VAR 0 4
17439: IFFALSE 17519
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17441: LD_ADDR_VAR 0 4
17445: PUSH
17446: LD_VAR 0 4
17450: PPUSH
17451: LD_INT 3
17453: PPUSH
17454: CALL 59984 0 2
17458: ST_TO_ADDR
// for j in tmp do
17459: LD_ADDR_VAR 0 2
17463: PUSH
17464: LD_VAR 0 4
17468: PUSH
17469: FOR_IN
17470: IFFALSE 17513
// begin if IsInUnit ( j ) then
17472: LD_VAR 0 2
17476: PPUSH
17477: CALL_OW 310
17481: IFFALSE 17492
// ComExit ( j ) ;
17483: LD_VAR 0 2
17487: PPUSH
17488: CALL 60067 0 1
// AddComCollect ( j , x , y ) ;
17492: LD_VAR 0 2
17496: PPUSH
17497: LD_VAR 0 6
17501: PPUSH
17502: LD_VAR 0 7
17506: PPUSH
17507: CALL_OW 177
// end ;
17511: GO 17469
17513: POP
17514: POP
// exit ;
17515: POP
17516: POP
17517: GO 17746
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17519: LD_ADDR_VAR 0 4
17523: PUSH
17524: LD_INT 22
17526: PUSH
17527: LD_VAR 0 5
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 91
17538: PUSH
17539: LD_VAR 0 8
17543: PUSH
17544: LD_INT 8
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 34
17557: PUSH
17558: LD_INT 12
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 34
17567: PUSH
17568: LD_INT 51
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 34
17577: PUSH
17578: LD_INT 32
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 34
17587: PUSH
17588: LD_INT 89
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PPUSH
17607: CALL_OW 69
17611: ST_TO_ADDR
// if tmp then
17612: LD_VAR 0 4
17616: IFFALSE 17742
// begin for j in tmp do
17618: LD_ADDR_VAR 0 2
17622: PUSH
17623: LD_VAR 0 4
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17740
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 262
17640: PUSH
17641: LD_INT 3
17643: EQUAL
17644: PUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: CALL_OW 261
17654: PUSH
17655: LD_INT 20
17657: GREATER
17658: OR
17659: PUSH
17660: LD_VAR 0 2
17664: PPUSH
17665: CALL_OW 314
17669: NOT
17670: AND
17671: PUSH
17672: LD_VAR 0 2
17676: PPUSH
17677: CALL_OW 263
17681: PUSH
17682: LD_INT 1
17684: NONEQUAL
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 311
17695: OR
17696: AND
17697: IFFALSE 17738
// begin ComCollect ( j , x , y ) ;
17699: LD_VAR 0 2
17703: PPUSH
17704: LD_VAR 0 6
17708: PPUSH
17709: LD_VAR 0 7
17713: PPUSH
17714: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_VAR 0 8
17727: PPUSH
17728: CALL_OW 172
// exit ;
17732: POP
17733: POP
17734: POP
17735: POP
17736: GO 17746
// end ;
17738: GO 17628
17740: POP
17741: POP
// end ; end ;
17742: GO 17117
17744: POP
17745: POP
// end ; end_of_file
17746: PPOPN 9
17748: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17749: LD_INT 0
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 264
17764: PUSH
17765: LD_INT 91
17767: EQUAL
17768: IFFALSE 17840
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17770: LD_INT 68
17772: PPUSH
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL_OW 255
17782: PPUSH
17783: CALL_OW 321
17787: PUSH
17788: LD_INT 2
17790: EQUAL
17791: IFFALSE 17803
// eff := 70 else
17793: LD_ADDR_VAR 0 4
17797: PUSH
17798: LD_INT 70
17800: ST_TO_ADDR
17801: GO 17811
// eff := 30 ;
17803: LD_ADDR_VAR 0 4
17807: PUSH
17808: LD_INT 30
17810: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17811: LD_VAR 0 1
17815: PPUSH
17816: CALL_OW 250
17820: PPUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 251
17830: PPUSH
17831: LD_VAR 0 4
17835: PPUSH
17836: CALL_OW 495
// end ; end ;
17840: LD_VAR 0 2
17844: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17845: LD_INT 0
17847: PPUSH
// end ;
17848: LD_VAR 0 4
17852: RET
// export function SOS_Command ( cmd ) ; begin
17853: LD_INT 0
17855: PPUSH
// end ;
17856: LD_VAR 0 2
17860: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17861: LD_INT 0
17863: PPUSH
// end ;
17864: LD_VAR 0 6
17868: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17869: LD_INT 0
17871: PPUSH
17872: PPUSH
// if not vehicle or not factory then
17873: LD_VAR 0 1
17877: NOT
17878: PUSH
17879: LD_VAR 0 2
17883: NOT
17884: OR
17885: IFFALSE 17889
// exit ;
17887: GO 18120
// if factoryWaypoints >= factory then
17889: LD_EXP 66
17893: PUSH
17894: LD_VAR 0 2
17898: GREATEREQUAL
17899: IFFALSE 18120
// if factoryWaypoints [ factory ] then
17901: LD_EXP 66
17905: PUSH
17906: LD_VAR 0 2
17910: ARRAY
17911: IFFALSE 18120
// begin if GetControl ( vehicle ) = control_manual then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 263
17922: PUSH
17923: LD_INT 1
17925: EQUAL
17926: IFFALSE 18007
// begin driver := IsDrivenBy ( vehicle ) ;
17928: LD_ADDR_VAR 0 4
17932: PUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 311
17942: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_EXP 66
17952: PUSH
17953: LD_VAR 0 2
17957: ARRAY
17958: PUSH
17959: LD_INT 3
17961: ARRAY
17962: PPUSH
17963: LD_EXP 66
17967: PUSH
17968: LD_VAR 0 2
17972: ARRAY
17973: PUSH
17974: LD_INT 4
17976: ARRAY
17977: PPUSH
17978: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17982: LD_VAR 0 4
17986: PPUSH
17987: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17991: LD_VAR 0 4
17995: PPUSH
17996: LD_VAR 0 2
18000: PPUSH
18001: CALL_OW 180
// end else
18005: GO 18120
// if GetControl ( vehicle ) = control_remote then
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 263
18016: PUSH
18017: LD_INT 2
18019: EQUAL
18020: IFFALSE 18081
// begin wait ( 0 0$2 ) ;
18022: LD_INT 70
18024: PPUSH
18025: CALL_OW 67
// if Connect ( vehicle ) then
18029: LD_VAR 0 1
18033: PPUSH
18034: CALL 30307 0 1
18038: IFFALSE 18079
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18040: LD_VAR 0 1
18044: PPUSH
18045: LD_EXP 66
18049: PUSH
18050: LD_VAR 0 2
18054: ARRAY
18055: PUSH
18056: LD_INT 3
18058: ARRAY
18059: PPUSH
18060: LD_EXP 66
18064: PUSH
18065: LD_VAR 0 2
18069: ARRAY
18070: PUSH
18071: LD_INT 4
18073: ARRAY
18074: PPUSH
18075: CALL_OW 171
// end else
18079: GO 18120
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18081: LD_VAR 0 1
18085: PPUSH
18086: LD_EXP 66
18090: PUSH
18091: LD_VAR 0 2
18095: ARRAY
18096: PUSH
18097: LD_INT 3
18099: ARRAY
18100: PPUSH
18101: LD_EXP 66
18105: PUSH
18106: LD_VAR 0 2
18110: ARRAY
18111: PUSH
18112: LD_INT 4
18114: ARRAY
18115: PPUSH
18116: CALL_OW 171
// end ; end ;
18120: LD_VAR 0 3
18124: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18125: LD_INT 0
18127: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18128: LD_VAR 0 1
18132: PUSH
18133: LD_INT 250
18135: EQUAL
18136: PUSH
18137: LD_VAR 0 2
18141: PPUSH
18142: CALL_OW 264
18146: PUSH
18147: LD_INT 81
18149: EQUAL
18150: AND
18151: IFFALSE 18172
// MinerPlaceMine ( unit , x , y ) ;
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_VAR 0 4
18162: PPUSH
18163: LD_VAR 0 5
18167: PPUSH
18168: CALL 20557 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 251
18179: EQUAL
18180: PUSH
18181: LD_VAR 0 2
18185: PPUSH
18186: CALL_OW 264
18190: PUSH
18191: LD_INT 81
18193: EQUAL
18194: AND
18195: IFFALSE 18216
// MinerDetonateMine ( unit , x , y ) ;
18197: LD_VAR 0 2
18201: PPUSH
18202: LD_VAR 0 4
18206: PPUSH
18207: LD_VAR 0 5
18211: PPUSH
18212: CALL 20832 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18216: LD_VAR 0 1
18220: PUSH
18221: LD_INT 252
18223: EQUAL
18224: PUSH
18225: LD_VAR 0 2
18229: PPUSH
18230: CALL_OW 264
18234: PUSH
18235: LD_INT 81
18237: EQUAL
18238: AND
18239: IFFALSE 18260
// MinerCreateMinefield ( unit , x , y ) ;
18241: LD_VAR 0 2
18245: PPUSH
18246: LD_VAR 0 4
18250: PPUSH
18251: LD_VAR 0 5
18255: PPUSH
18256: CALL 21249 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18260: LD_VAR 0 1
18264: PUSH
18265: LD_INT 253
18267: EQUAL
18268: PUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: CALL_OW 257
18278: PUSH
18279: LD_INT 5
18281: EQUAL
18282: AND
18283: IFFALSE 18304
// ComBinocular ( unit , x , y ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_VAR 0 5
18299: PPUSH
18300: CALL 21618 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 254
18311: EQUAL
18312: PUSH
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 264
18322: PUSH
18323: LD_INT 99
18325: EQUAL
18326: AND
18327: PUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: CALL_OW 263
18337: PUSH
18338: LD_INT 3
18340: EQUAL
18341: AND
18342: IFFALSE 18358
// HackDestroyVehicle ( unit , selectedUnit ) ;
18344: LD_VAR 0 2
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: CALL 19921 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18358: LD_VAR 0 1
18362: PUSH
18363: LD_INT 255
18365: EQUAL
18366: PUSH
18367: LD_VAR 0 2
18371: PPUSH
18372: CALL_OW 264
18376: PUSH
18377: LD_INT 14
18379: PUSH
18380: LD_INT 53
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: IN
18387: AND
18388: PUSH
18389: LD_VAR 0 4
18393: PPUSH
18394: LD_VAR 0 5
18398: PPUSH
18399: CALL_OW 488
18403: AND
18404: IFFALSE 18428
// CutTreeXYR ( unit , x , y , 12 ) ;
18406: LD_VAR 0 2
18410: PPUSH
18411: LD_VAR 0 4
18415: PPUSH
18416: LD_VAR 0 5
18420: PPUSH
18421: LD_INT 12
18423: PPUSH
18424: CALL 18491 0 4
// if cmd = 256 then
18428: LD_VAR 0 1
18432: PUSH
18433: LD_INT 256
18435: EQUAL
18436: IFFALSE 18457
// SetFactoryWaypoint ( unit , x , y ) ;
18438: LD_VAR 0 2
18442: PPUSH
18443: LD_VAR 0 4
18447: PPUSH
18448: LD_VAR 0 5
18452: PPUSH
18453: CALL 16438 0 3
// if cmd = 257 then
18457: LD_VAR 0 1
18461: PUSH
18462: LD_INT 257
18464: EQUAL
18465: IFFALSE 18486
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18467: LD_VAR 0 2
18471: PPUSH
18472: LD_VAR 0 4
18476: PPUSH
18477: LD_VAR 0 5
18481: PPUSH
18482: CALL 16800 0 3
// end ;
18486: LD_VAR 0 6
18490: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18491: LD_INT 0
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18502: LD_VAR 0 1
18506: NOT
18507: PUSH
18508: LD_VAR 0 2
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: CALL_OW 488
18522: NOT
18523: OR
18524: PUSH
18525: LD_VAR 0 4
18529: NOT
18530: OR
18531: IFFALSE 18535
// exit ;
18533: GO 18875
// list := [ ] ;
18535: LD_ADDR_VAR 0 13
18539: PUSH
18540: EMPTY
18541: ST_TO_ADDR
// if x - r < 0 then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 4
18551: MINUS
18552: PUSH
18553: LD_INT 0
18555: LESS
18556: IFFALSE 18568
// min_x := 0 else
18558: LD_ADDR_VAR 0 7
18562: PUSH
18563: LD_INT 0
18565: ST_TO_ADDR
18566: GO 18584
// min_x := x - r ;
18568: LD_ADDR_VAR 0 7
18572: PUSH
18573: LD_VAR 0 2
18577: PUSH
18578: LD_VAR 0 4
18582: MINUS
18583: ST_TO_ADDR
// if y - r < 0 then
18584: LD_VAR 0 3
18588: PUSH
18589: LD_VAR 0 4
18593: MINUS
18594: PUSH
18595: LD_INT 0
18597: LESS
18598: IFFALSE 18610
// min_y := 0 else
18600: LD_ADDR_VAR 0 8
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
18608: GO 18626
// min_y := y - r ;
18610: LD_ADDR_VAR 0 8
18614: PUSH
18615: LD_VAR 0 3
18619: PUSH
18620: LD_VAR 0 4
18624: MINUS
18625: ST_TO_ADDR
// max_x := x + r ;
18626: LD_ADDR_VAR 0 9
18630: PUSH
18631: LD_VAR 0 2
18635: PUSH
18636: LD_VAR 0 4
18640: PLUS
18641: ST_TO_ADDR
// max_y := y + r ;
18642: LD_ADDR_VAR 0 10
18646: PUSH
18647: LD_VAR 0 3
18651: PUSH
18652: LD_VAR 0 4
18656: PLUS
18657: ST_TO_ADDR
// for _x = min_x to max_x do
18658: LD_ADDR_VAR 0 11
18662: PUSH
18663: DOUBLE
18664: LD_VAR 0 7
18668: DEC
18669: ST_TO_ADDR
18670: LD_VAR 0 9
18674: PUSH
18675: FOR_TO
18676: IFFALSE 18793
// for _y = min_y to max_y do
18678: LD_ADDR_VAR 0 12
18682: PUSH
18683: DOUBLE
18684: LD_VAR 0 8
18688: DEC
18689: ST_TO_ADDR
18690: LD_VAR 0 10
18694: PUSH
18695: FOR_TO
18696: IFFALSE 18789
// begin if not ValidHex ( _x , _y ) then
18698: LD_VAR 0 11
18702: PPUSH
18703: LD_VAR 0 12
18707: PPUSH
18708: CALL_OW 488
18712: NOT
18713: IFFALSE 18717
// continue ;
18715: GO 18695
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18717: LD_VAR 0 11
18721: PPUSH
18722: LD_VAR 0 12
18726: PPUSH
18727: CALL_OW 351
18731: PUSH
18732: LD_VAR 0 11
18736: PPUSH
18737: LD_VAR 0 12
18741: PPUSH
18742: CALL_OW 554
18746: AND
18747: IFFALSE 18787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18749: LD_ADDR_VAR 0 13
18753: PUSH
18754: LD_VAR 0 13
18758: PPUSH
18759: LD_VAR 0 13
18763: PUSH
18764: LD_INT 1
18766: PLUS
18767: PPUSH
18768: LD_VAR 0 11
18772: PUSH
18773: LD_VAR 0 12
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PPUSH
18782: CALL_OW 2
18786: ST_TO_ADDR
// end ;
18787: GO 18695
18789: POP
18790: POP
18791: GO 18675
18793: POP
18794: POP
// if not list then
18795: LD_VAR 0 13
18799: NOT
18800: IFFALSE 18804
// exit ;
18802: GO 18875
// for i in list do
18804: LD_ADDR_VAR 0 6
18808: PUSH
18809: LD_VAR 0 13
18813: PUSH
18814: FOR_IN
18815: IFFALSE 18873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18817: LD_VAR 0 1
18821: PPUSH
18822: LD_STRING M
18824: PUSH
18825: LD_VAR 0 6
18829: PUSH
18830: LD_INT 1
18832: ARRAY
18833: PUSH
18834: LD_VAR 0 6
18838: PUSH
18839: LD_INT 2
18841: ARRAY
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: PPUSH
18867: CALL_OW 447
18871: GO 18814
18873: POP
18874: POP
// end ;
18875: LD_VAR 0 5
18879: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18880: LD_EXP 69
18884: NOT
18885: IFFALSE 18935
18887: GO 18889
18889: DISABLE
// begin initHack := true ;
18890: LD_ADDR_EXP 69
18894: PUSH
18895: LD_INT 1
18897: ST_TO_ADDR
// hackTanks := [ ] ;
18898: LD_ADDR_EXP 70
18902: PUSH
18903: EMPTY
18904: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18905: LD_ADDR_EXP 71
18909: PUSH
18910: EMPTY
18911: ST_TO_ADDR
// hackLimit := 3 ;
18912: LD_ADDR_EXP 72
18916: PUSH
18917: LD_INT 3
18919: ST_TO_ADDR
// hackDist := 12 ;
18920: LD_ADDR_EXP 73
18924: PUSH
18925: LD_INT 12
18927: ST_TO_ADDR
// hackCounter := [ ] ;
18928: LD_ADDR_EXP 74
18932: PUSH
18933: EMPTY
18934: ST_TO_ADDR
// end ;
18935: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18936: LD_EXP 69
18940: PUSH
18941: LD_INT 34
18943: PUSH
18944: LD_INT 99
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: AND
18956: IFFALSE 19209
18958: GO 18960
18960: DISABLE
18961: LD_INT 0
18963: PPUSH
18964: PPUSH
// begin enable ;
18965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18966: LD_ADDR_VAR 0 1
18970: PUSH
18971: LD_INT 34
18973: PUSH
18974: LD_INT 99
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: PUSH
18986: FOR_IN
18987: IFFALSE 19207
// begin if not i in hackTanks then
18989: LD_VAR 0 1
18993: PUSH
18994: LD_EXP 70
18998: IN
18999: NOT
19000: IFFALSE 19083
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19002: LD_ADDR_EXP 70
19006: PUSH
19007: LD_EXP 70
19011: PPUSH
19012: LD_EXP 70
19016: PUSH
19017: LD_INT 1
19019: PLUS
19020: PPUSH
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 1
19030: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19031: LD_ADDR_EXP 71
19035: PUSH
19036: LD_EXP 71
19040: PPUSH
19041: LD_EXP 71
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: EMPTY
19051: PPUSH
19052: CALL_OW 1
19056: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19057: LD_ADDR_EXP 74
19061: PUSH
19062: LD_EXP 74
19066: PPUSH
19067: LD_EXP 74
19071: PUSH
19072: LD_INT 1
19074: PLUS
19075: PPUSH
19076: EMPTY
19077: PPUSH
19078: CALL_OW 1
19082: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 302
19092: NOT
19093: IFFALSE 19106
// begin HackUnlinkAll ( i ) ;
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL 19212 0 1
// continue ;
19104: GO 18986
// end ; HackCheckCapturedStatus ( i ) ;
19106: LD_VAR 0 1
19110: PPUSH
19111: CALL 19655 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19115: LD_ADDR_VAR 0 2
19119: PUSH
19120: LD_INT 81
19122: PUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 255
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 33
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 91
19149: PUSH
19150: LD_VAR 0 1
19154: PUSH
19155: LD_EXP 73
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 50
19167: PUSH
19168: EMPTY
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: ST_TO_ADDR
// if not tmp then
19182: LD_VAR 0 2
19186: NOT
19187: IFFALSE 19191
// continue ;
19189: GO 18986
// HackLink ( i , tmp ) ;
19191: LD_VAR 0 1
19195: PPUSH
19196: LD_VAR 0 2
19200: PPUSH
19201: CALL 19348 0 2
// end ;
19205: GO 18986
19207: POP
19208: POP
// end ;
19209: PPOPN 2
19211: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19212: LD_INT 0
19214: PPUSH
19215: PPUSH
19216: PPUSH
// if not hack in hackTanks then
19217: LD_VAR 0 1
19221: PUSH
19222: LD_EXP 70
19226: IN
19227: NOT
19228: IFFALSE 19232
// exit ;
19230: GO 19343
// index := GetElementIndex ( hackTanks , hack ) ;
19232: LD_ADDR_VAR 0 4
19236: PUSH
19237: LD_EXP 70
19241: PPUSH
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL 27123 0 2
19251: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19252: LD_EXP 71
19256: PUSH
19257: LD_VAR 0 4
19261: ARRAY
19262: IFFALSE 19343
// begin for i in hackTanksCaptured [ index ] do
19264: LD_ADDR_VAR 0 3
19268: PUSH
19269: LD_EXP 71
19273: PUSH
19274: LD_VAR 0 4
19278: ARRAY
19279: PUSH
19280: FOR_IN
19281: IFFALSE 19307
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: LD_VAR 0 3
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: PPUSH
19301: CALL_OW 235
19305: GO 19280
19307: POP
19308: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19309: LD_ADDR_EXP 71
19313: PUSH
19314: LD_EXP 71
19318: PPUSH
19319: LD_VAR 0 4
19323: PPUSH
19324: EMPTY
19325: PPUSH
19326: CALL_OW 1
19330: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_INT 0
19338: PPUSH
19339: CALL_OW 505
// end ; end ;
19343: LD_VAR 0 2
19347: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
19352: PPUSH
// if not hack in hackTanks or not vehicles then
19353: LD_VAR 0 1
19357: PUSH
19358: LD_EXP 70
19362: IN
19363: NOT
19364: PUSH
19365: LD_VAR 0 2
19369: NOT
19370: OR
19371: IFFALSE 19375
// exit ;
19373: GO 19650
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: LD_VAR 0 2
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: CALL 27773 0 4
19400: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19401: LD_ADDR_VAR 0 5
19405: PUSH
19406: LD_EXP 70
19410: PPUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL 27123 0 2
19420: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19421: LD_EXP 71
19425: PUSH
19426: LD_VAR 0 5
19430: ARRAY
19431: PUSH
19432: LD_EXP 72
19436: LESS
19437: IFFALSE 19626
// begin for i := 1 to vehicles do
19439: LD_ADDR_VAR 0 4
19443: PUSH
19444: DOUBLE
19445: LD_INT 1
19447: DEC
19448: ST_TO_ADDR
19449: LD_VAR 0 2
19453: PUSH
19454: FOR_TO
19455: IFFALSE 19624
// begin if hackTanksCaptured [ index ] = hackLimit then
19457: LD_EXP 71
19461: PUSH
19462: LD_VAR 0 5
19466: ARRAY
19467: PUSH
19468: LD_EXP 72
19472: EQUAL
19473: IFFALSE 19477
// break ;
19475: GO 19624
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19477: LD_ADDR_EXP 74
19481: PUSH
19482: LD_EXP 74
19486: PPUSH
19487: LD_VAR 0 5
19491: PPUSH
19492: LD_EXP 74
19496: PUSH
19497: LD_VAR 0 5
19501: ARRAY
19502: PUSH
19503: LD_INT 1
19505: PLUS
19506: PPUSH
19507: CALL_OW 1
19511: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19512: LD_ADDR_EXP 71
19516: PUSH
19517: LD_EXP 71
19521: PPUSH
19522: LD_VAR 0 5
19526: PUSH
19527: LD_EXP 71
19531: PUSH
19532: LD_VAR 0 5
19536: ARRAY
19537: PUSH
19538: LD_INT 1
19540: PLUS
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: LD_VAR 0 2
19550: PUSH
19551: LD_VAR 0 4
19555: ARRAY
19556: PUSH
19557: LD_VAR 0 2
19561: PUSH
19562: LD_VAR 0 4
19566: ARRAY
19567: PPUSH
19568: CALL_OW 255
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL 27338 0 3
19581: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19582: LD_VAR 0 2
19586: PUSH
19587: LD_VAR 0 4
19591: ARRAY
19592: PPUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 255
19602: PPUSH
19603: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19607: LD_VAR 0 2
19611: PUSH
19612: LD_VAR 0 4
19616: ARRAY
19617: PPUSH
19618: CALL_OW 141
// end ;
19622: GO 19454
19624: POP
19625: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19626: LD_VAR 0 1
19630: PPUSH
19631: LD_EXP 71
19635: PUSH
19636: LD_VAR 0 5
19640: ARRAY
19641: PUSH
19642: LD_INT 0
19644: PLUS
19645: PPUSH
19646: CALL_OW 505
// end ;
19650: LD_VAR 0 3
19654: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19655: LD_INT 0
19657: PPUSH
19658: PPUSH
19659: PPUSH
19660: PPUSH
// if not hack in hackTanks then
19661: LD_VAR 0 1
19665: PUSH
19666: LD_EXP 70
19670: IN
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 19916
// index := GetElementIndex ( hackTanks , hack ) ;
19676: LD_ADDR_VAR 0 4
19680: PUSH
19681: LD_EXP 70
19685: PPUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL 27123 0 2
19695: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19696: LD_ADDR_VAR 0 3
19700: PUSH
19701: DOUBLE
19702: LD_EXP 71
19706: PUSH
19707: LD_VAR 0 4
19711: ARRAY
19712: INC
19713: ST_TO_ADDR
19714: LD_INT 1
19716: PUSH
19717: FOR_DOWNTO
19718: IFFALSE 19890
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: LD_EXP 71
19729: PUSH
19730: LD_VAR 0 4
19734: ARRAY
19735: PUSH
19736: LD_VAR 0 3
19740: ARRAY
19741: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19742: LD_VAR 0 5
19746: PUSH
19747: LD_INT 1
19749: ARRAY
19750: PPUSH
19751: CALL_OW 302
19755: NOT
19756: PUSH
19757: LD_VAR 0 5
19761: PUSH
19762: LD_INT 1
19764: ARRAY
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_VAR 0 1
19775: PPUSH
19776: CALL_OW 255
19780: NONEQUAL
19781: OR
19782: IFFALSE 19888
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19784: LD_VAR 0 5
19788: PUSH
19789: LD_INT 1
19791: ARRAY
19792: PPUSH
19793: CALL_OW 305
19797: PUSH
19798: LD_VAR 0 5
19802: PUSH
19803: LD_INT 1
19805: ARRAY
19806: PPUSH
19807: CALL_OW 255
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 255
19821: EQUAL
19822: AND
19823: IFFALSE 19847
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19825: LD_VAR 0 5
19829: PUSH
19830: LD_INT 1
19832: ARRAY
19833: PPUSH
19834: LD_VAR 0 5
19838: PUSH
19839: LD_INT 2
19841: ARRAY
19842: PPUSH
19843: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19847: LD_ADDR_EXP 71
19851: PUSH
19852: LD_EXP 71
19856: PPUSH
19857: LD_VAR 0 4
19861: PPUSH
19862: LD_EXP 71
19866: PUSH
19867: LD_VAR 0 4
19871: ARRAY
19872: PPUSH
19873: LD_VAR 0 3
19877: PPUSH
19878: CALL_OW 3
19882: PPUSH
19883: CALL_OW 1
19887: ST_TO_ADDR
// end ; end ;
19888: GO 19717
19890: POP
19891: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_EXP 71
19901: PUSH
19902: LD_VAR 0 4
19906: ARRAY
19907: PUSH
19908: LD_INT 0
19910: PLUS
19911: PPUSH
19912: CALL_OW 505
// end ;
19916: LD_VAR 0 2
19920: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
19925: PPUSH
19926: PPUSH
// if not hack in hackTanks then
19927: LD_VAR 0 1
19931: PUSH
19932: LD_EXP 70
19936: IN
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 20027
// index := GetElementIndex ( hackTanks , hack ) ;
19942: LD_ADDR_VAR 0 5
19946: PUSH
19947: LD_EXP 70
19951: PPUSH
19952: LD_VAR 0 1
19956: PPUSH
19957: CALL 27123 0 2
19961: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19962: LD_ADDR_VAR 0 4
19966: PUSH
19967: DOUBLE
19968: LD_INT 1
19970: DEC
19971: ST_TO_ADDR
19972: LD_EXP 71
19976: PUSH
19977: LD_VAR 0 5
19981: ARRAY
19982: PUSH
19983: FOR_TO
19984: IFFALSE 20025
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19986: LD_EXP 71
19990: PUSH
19991: LD_VAR 0 5
19995: ARRAY
19996: PUSH
19997: LD_VAR 0 4
20001: ARRAY
20002: PUSH
20003: LD_INT 1
20005: ARRAY
20006: PUSH
20007: LD_VAR 0 2
20011: EQUAL
20012: IFFALSE 20023
// KillUnit ( vehicle ) ;
20014: LD_VAR 0 2
20018: PPUSH
20019: CALL_OW 66
20023: GO 19983
20025: POP
20026: POP
// end ;
20027: LD_VAR 0 3
20031: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20032: LD_EXP 75
20036: NOT
20037: IFFALSE 20072
20039: GO 20041
20041: DISABLE
// begin initMiner := true ;
20042: LD_ADDR_EXP 75
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// minersList := [ ] ;
20050: LD_ADDR_EXP 76
20054: PUSH
20055: EMPTY
20056: ST_TO_ADDR
// minerMinesList := [ ] ;
20057: LD_ADDR_EXP 77
20061: PUSH
20062: EMPTY
20063: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20064: LD_ADDR_EXP 78
20068: PUSH
20069: LD_INT 5
20071: ST_TO_ADDR
// end ;
20072: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20073: LD_EXP 75
20077: PUSH
20078: LD_INT 34
20080: PUSH
20081: LD_INT 81
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PPUSH
20088: CALL_OW 69
20092: AND
20093: IFFALSE 20554
20095: GO 20097
20097: DISABLE
20098: LD_INT 0
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
// begin enable ;
20104: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20105: LD_ADDR_VAR 0 1
20109: PUSH
20110: LD_INT 34
20112: PUSH
20113: LD_INT 81
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20198
// begin if not i in minersList then
20128: LD_VAR 0 1
20132: PUSH
20133: LD_EXP 76
20137: IN
20138: NOT
20139: IFFALSE 20196
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20141: LD_ADDR_EXP 76
20145: PUSH
20146: LD_EXP 76
20150: PPUSH
20151: LD_EXP 76
20155: PUSH
20156: LD_INT 1
20158: PLUS
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 1
20169: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20170: LD_ADDR_EXP 77
20174: PUSH
20175: LD_EXP 77
20179: PPUSH
20180: LD_EXP 77
20184: PUSH
20185: LD_INT 1
20187: PLUS
20188: PPUSH
20189: EMPTY
20190: PPUSH
20191: CALL_OW 1
20195: ST_TO_ADDR
// end end ;
20196: GO 20125
20198: POP
20199: POP
// for i := minerMinesList downto 1 do
20200: LD_ADDR_VAR 0 1
20204: PUSH
20205: DOUBLE
20206: LD_EXP 77
20210: INC
20211: ST_TO_ADDR
20212: LD_INT 1
20214: PUSH
20215: FOR_DOWNTO
20216: IFFALSE 20552
// begin if IsLive ( minersList [ i ] ) then
20218: LD_EXP 76
20222: PUSH
20223: LD_VAR 0 1
20227: ARRAY
20228: PPUSH
20229: CALL_OW 300
20233: IFFALSE 20261
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20235: LD_EXP 76
20239: PUSH
20240: LD_VAR 0 1
20244: ARRAY
20245: PPUSH
20246: LD_EXP 77
20250: PUSH
20251: LD_VAR 0 1
20255: ARRAY
20256: PPUSH
20257: CALL_OW 505
// if not minerMinesList [ i ] then
20261: LD_EXP 77
20265: PUSH
20266: LD_VAR 0 1
20270: ARRAY
20271: NOT
20272: IFFALSE 20276
// continue ;
20274: GO 20215
// for j := minerMinesList [ i ] downto 1 do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: DOUBLE
20282: LD_EXP 77
20286: PUSH
20287: LD_VAR 0 1
20291: ARRAY
20292: INC
20293: ST_TO_ADDR
20294: LD_INT 1
20296: PUSH
20297: FOR_DOWNTO
20298: IFFALSE 20548
// begin side := GetSide ( minersList [ i ] ) ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_EXP 76
20309: PUSH
20310: LD_VAR 0 1
20314: ARRAY
20315: PPUSH
20316: CALL_OW 255
20320: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_EXP 77
20330: PUSH
20331: LD_VAR 0 1
20335: ARRAY
20336: PUSH
20337: LD_VAR 0 2
20341: ARRAY
20342: PUSH
20343: LD_INT 1
20345: ARRAY
20346: PPUSH
20347: LD_EXP 77
20351: PUSH
20352: LD_VAR 0 1
20356: ARRAY
20357: PUSH
20358: LD_VAR 0 2
20362: ARRAY
20363: PUSH
20364: LD_INT 2
20366: ARRAY
20367: PPUSH
20368: CALL_OW 428
20372: ST_TO_ADDR
// if not tmp then
20373: LD_VAR 0 4
20377: NOT
20378: IFFALSE 20382
// continue ;
20380: GO 20297
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20382: LD_VAR 0 4
20386: PUSH
20387: LD_INT 81
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PPUSH
20399: CALL_OW 69
20403: IN
20404: PUSH
20405: LD_EXP 77
20409: PUSH
20410: LD_VAR 0 1
20414: ARRAY
20415: PUSH
20416: LD_VAR 0 2
20420: ARRAY
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: LD_EXP 77
20430: PUSH
20431: LD_VAR 0 1
20435: ARRAY
20436: PUSH
20437: LD_VAR 0 2
20441: ARRAY
20442: PUSH
20443: LD_INT 2
20445: ARRAY
20446: PPUSH
20447: CALL_OW 458
20451: AND
20452: IFFALSE 20546
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20454: LD_EXP 77
20458: PUSH
20459: LD_VAR 0 1
20463: ARRAY
20464: PUSH
20465: LD_VAR 0 2
20469: ARRAY
20470: PUSH
20471: LD_INT 1
20473: ARRAY
20474: PPUSH
20475: LD_EXP 77
20479: PUSH
20480: LD_VAR 0 1
20484: ARRAY
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 2
20494: ARRAY
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20505: LD_ADDR_EXP 77
20509: PUSH
20510: LD_EXP 77
20514: PPUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: LD_EXP 77
20524: PUSH
20525: LD_VAR 0 1
20529: ARRAY
20530: PPUSH
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL_OW 3
20540: PPUSH
20541: CALL_OW 1
20545: ST_TO_ADDR
// end ; end ;
20546: GO 20297
20548: POP
20549: POP
// end ;
20550: GO 20215
20552: POP
20553: POP
// end ;
20554: PPOPN 4
20556: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20557: LD_INT 0
20559: PPUSH
20560: PPUSH
// result := false ;
20561: LD_ADDR_VAR 0 4
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 264
20578: PUSH
20579: LD_INT 81
20581: EQUAL
20582: NOT
20583: IFFALSE 20587
// exit ;
20585: GO 20827
// index := GetElementIndex ( minersList , unit ) ;
20587: LD_ADDR_VAR 0 5
20591: PUSH
20592: LD_EXP 76
20596: PPUSH
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL 27123 0 2
20606: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20607: LD_EXP 77
20611: PUSH
20612: LD_VAR 0 5
20616: ARRAY
20617: PUSH
20618: LD_EXP 78
20622: GREATEREQUAL
20623: IFFALSE 20627
// exit ;
20625: GO 20827
// ComMoveXY ( unit , x , y ) ;
20627: LD_VAR 0 1
20631: PPUSH
20632: LD_VAR 0 2
20636: PPUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20646: LD_INT 35
20648: PPUSH
20649: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_VAR 0 2
20662: PPUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: CALL 58478 0 3
20672: NOT
20673: PUSH
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 314
20683: AND
20684: IFFALSE 20688
// exit ;
20686: GO 20827
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20688: LD_VAR 0 2
20692: PPUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: CALL_OW 428
20702: PUSH
20703: LD_VAR 0 1
20707: EQUAL
20708: PUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 314
20718: NOT
20719: AND
20720: IFFALSE 20646
// PlaySoundXY ( x , y , PlantMine ) ;
20722: LD_VAR 0 2
20726: PPUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_STRING PlantMine
20734: PPUSH
20735: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20739: LD_VAR 0 2
20743: PPUSH
20744: LD_VAR 0 3
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 255
20758: PPUSH
20759: LD_INT 0
20761: PPUSH
20762: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20766: LD_ADDR_EXP 77
20770: PUSH
20771: LD_EXP 77
20775: PPUSH
20776: LD_VAR 0 5
20780: PUSH
20781: LD_EXP 77
20785: PUSH
20786: LD_VAR 0 5
20790: ARRAY
20791: PUSH
20792: LD_INT 1
20794: PLUS
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: LD_VAR 0 2
20804: PUSH
20805: LD_VAR 0 3
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL 27338 0 3
20818: ST_TO_ADDR
// result := true ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// end ;
20827: LD_VAR 0 4
20831: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20832: LD_INT 0
20834: PPUSH
20835: PPUSH
20836: PPUSH
// if not unit in minersList then
20837: LD_VAR 0 1
20841: PUSH
20842: LD_EXP 76
20846: IN
20847: NOT
20848: IFFALSE 20852
// exit ;
20850: GO 21244
// index := GetElementIndex ( minersList , unit ) ;
20852: LD_ADDR_VAR 0 6
20856: PUSH
20857: LD_EXP 76
20861: PPUSH
20862: LD_VAR 0 1
20866: PPUSH
20867: CALL 27123 0 2
20871: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20872: LD_ADDR_VAR 0 5
20876: PUSH
20877: DOUBLE
20878: LD_EXP 77
20882: PUSH
20883: LD_VAR 0 6
20887: ARRAY
20888: INC
20889: ST_TO_ADDR
20890: LD_INT 1
20892: PUSH
20893: FOR_DOWNTO
20894: IFFALSE 21055
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20896: LD_EXP 77
20900: PUSH
20901: LD_VAR 0 6
20905: ARRAY
20906: PUSH
20907: LD_VAR 0 5
20911: ARRAY
20912: PUSH
20913: LD_INT 1
20915: ARRAY
20916: PUSH
20917: LD_VAR 0 2
20921: EQUAL
20922: PUSH
20923: LD_EXP 77
20927: PUSH
20928: LD_VAR 0 6
20932: ARRAY
20933: PUSH
20934: LD_VAR 0 5
20938: ARRAY
20939: PUSH
20940: LD_INT 2
20942: ARRAY
20943: PUSH
20944: LD_VAR 0 3
20948: EQUAL
20949: AND
20950: IFFALSE 21053
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20952: LD_EXP 77
20956: PUSH
20957: LD_VAR 0 6
20961: ARRAY
20962: PUSH
20963: LD_VAR 0 5
20967: ARRAY
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: PPUSH
20973: LD_EXP 77
20977: PUSH
20978: LD_VAR 0 6
20982: ARRAY
20983: PUSH
20984: LD_VAR 0 5
20988: ARRAY
20989: PUSH
20990: LD_INT 2
20992: ARRAY
20993: PPUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 255
21003: PPUSH
21004: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21008: LD_ADDR_EXP 77
21012: PUSH
21013: LD_EXP 77
21017: PPUSH
21018: LD_VAR 0 6
21022: PPUSH
21023: LD_EXP 77
21027: PUSH
21028: LD_VAR 0 6
21032: ARRAY
21033: PPUSH
21034: LD_VAR 0 5
21038: PPUSH
21039: CALL_OW 3
21043: PPUSH
21044: CALL_OW 1
21048: ST_TO_ADDR
// exit ;
21049: POP
21050: POP
21051: GO 21244
// end ; end ;
21053: GO 20893
21055: POP
21056: POP
// for i := minerMinesList [ index ] downto 1 do
21057: LD_ADDR_VAR 0 5
21061: PUSH
21062: DOUBLE
21063: LD_EXP 77
21067: PUSH
21068: LD_VAR 0 6
21072: ARRAY
21073: INC
21074: ST_TO_ADDR
21075: LD_INT 1
21077: PUSH
21078: FOR_DOWNTO
21079: IFFALSE 21242
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21081: LD_EXP 77
21085: PUSH
21086: LD_VAR 0 6
21090: ARRAY
21091: PUSH
21092: LD_VAR 0 5
21096: ARRAY
21097: PUSH
21098: LD_INT 1
21100: ARRAY
21101: PPUSH
21102: LD_EXP 77
21106: PUSH
21107: LD_VAR 0 6
21111: ARRAY
21112: PUSH
21113: LD_VAR 0 5
21117: ARRAY
21118: PUSH
21119: LD_INT 2
21121: ARRAY
21122: PPUSH
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: CALL_OW 298
21137: PUSH
21138: LD_INT 6
21140: LESS
21141: IFFALSE 21240
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21143: LD_EXP 77
21147: PUSH
21148: LD_VAR 0 6
21152: ARRAY
21153: PUSH
21154: LD_VAR 0 5
21158: ARRAY
21159: PUSH
21160: LD_INT 1
21162: ARRAY
21163: PPUSH
21164: LD_EXP 77
21168: PUSH
21169: LD_VAR 0 6
21173: ARRAY
21174: PUSH
21175: LD_VAR 0 5
21179: ARRAY
21180: PUSH
21181: LD_INT 2
21183: ARRAY
21184: PPUSH
21185: LD_VAR 0 1
21189: PPUSH
21190: CALL_OW 255
21194: PPUSH
21195: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21199: LD_ADDR_EXP 77
21203: PUSH
21204: LD_EXP 77
21208: PPUSH
21209: LD_VAR 0 6
21213: PPUSH
21214: LD_EXP 77
21218: PUSH
21219: LD_VAR 0 6
21223: ARRAY
21224: PPUSH
21225: LD_VAR 0 5
21229: PPUSH
21230: CALL_OW 3
21234: PPUSH
21235: CALL_OW 1
21239: ST_TO_ADDR
// end ; end ;
21240: GO 21078
21242: POP
21243: POP
// end ;
21244: LD_VAR 0 4
21248: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21249: LD_INT 0
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 264
21269: PUSH
21270: LD_INT 81
21272: EQUAL
21273: NOT
21274: PUSH
21275: LD_VAR 0 1
21279: PUSH
21280: LD_EXP 76
21284: IN
21285: NOT
21286: OR
21287: IFFALSE 21291
// exit ;
21289: GO 21613
// index := GetElementIndex ( minersList , unit ) ;
21291: LD_ADDR_VAR 0 6
21295: PUSH
21296: LD_EXP 76
21300: PPUSH
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL 27123 0 2
21310: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21311: LD_ADDR_VAR 0 8
21315: PUSH
21316: LD_EXP 78
21320: PUSH
21321: LD_EXP 77
21325: PUSH
21326: LD_VAR 0 6
21330: ARRAY
21331: MINUS
21332: ST_TO_ADDR
// if not minesFreeAmount then
21333: LD_VAR 0 8
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21613
// tmp := [ ] ;
21342: LD_ADDR_VAR 0 7
21346: PUSH
21347: EMPTY
21348: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21349: LD_ADDR_VAR 0 5
21353: PUSH
21354: DOUBLE
21355: LD_INT 1
21357: DEC
21358: ST_TO_ADDR
21359: LD_VAR 0 8
21363: PUSH
21364: FOR_TO
21365: IFFALSE 21560
// begin _d := rand ( 0 , 5 ) ;
21367: LD_ADDR_VAR 0 11
21371: PUSH
21372: LD_INT 0
21374: PPUSH
21375: LD_INT 5
21377: PPUSH
21378: CALL_OW 12
21382: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21383: LD_ADDR_VAR 0 12
21387: PUSH
21388: LD_INT 2
21390: PPUSH
21391: LD_INT 6
21393: PPUSH
21394: CALL_OW 12
21398: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21399: LD_ADDR_VAR 0 9
21403: PUSH
21404: LD_VAR 0 2
21408: PPUSH
21409: LD_VAR 0 11
21413: PPUSH
21414: LD_VAR 0 12
21418: PPUSH
21419: CALL_OW 272
21423: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21424: LD_ADDR_VAR 0 10
21428: PUSH
21429: LD_VAR 0 3
21433: PPUSH
21434: LD_VAR 0 11
21438: PPUSH
21439: LD_VAR 0 12
21443: PPUSH
21444: CALL_OW 273
21448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21449: LD_VAR 0 9
21453: PPUSH
21454: LD_VAR 0 10
21458: PPUSH
21459: CALL_OW 488
21463: PUSH
21464: LD_VAR 0 9
21468: PUSH
21469: LD_VAR 0 10
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_VAR 0 7
21482: IN
21483: NOT
21484: AND
21485: PUSH
21486: LD_VAR 0 9
21490: PPUSH
21491: LD_VAR 0 10
21495: PPUSH
21496: CALL_OW 458
21500: NOT
21501: AND
21502: IFFALSE 21544
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21504: LD_ADDR_VAR 0 7
21508: PUSH
21509: LD_VAR 0 7
21513: PPUSH
21514: LD_VAR 0 7
21518: PUSH
21519: LD_INT 1
21521: PLUS
21522: PPUSH
21523: LD_VAR 0 9
21527: PUSH
21528: LD_VAR 0 10
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PPUSH
21537: CALL_OW 1
21541: ST_TO_ADDR
21542: GO 21558
// i := i - 1 ;
21544: LD_ADDR_VAR 0 5
21548: PUSH
21549: LD_VAR 0 5
21553: PUSH
21554: LD_INT 1
21556: MINUS
21557: ST_TO_ADDR
// end ;
21558: GO 21364
21560: POP
21561: POP
// for i in tmp do
21562: LD_ADDR_VAR 0 5
21566: PUSH
21567: LD_VAR 0 7
21571: PUSH
21572: FOR_IN
21573: IFFALSE 21611
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21575: LD_VAR 0 1
21579: PPUSH
21580: LD_VAR 0 5
21584: PUSH
21585: LD_INT 1
21587: ARRAY
21588: PPUSH
21589: LD_VAR 0 5
21593: PUSH
21594: LD_INT 2
21596: ARRAY
21597: PPUSH
21598: CALL 20557 0 3
21602: NOT
21603: IFFALSE 21609
// exit ;
21605: POP
21606: POP
21607: GO 21613
21609: GO 21572
21611: POP
21612: POP
// end ;
21613: LD_VAR 0 4
21617: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21618: LD_INT 0
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
// if not GetClass ( unit ) = class_sniper then
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 257
21636: PUSH
21637: LD_INT 5
21639: EQUAL
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 22033
// dist := 8 ;
21645: LD_ADDR_VAR 0 5
21649: PUSH
21650: LD_INT 8
21652: ST_TO_ADDR
// viewRange := 12 ;
21653: LD_ADDR_VAR 0 7
21657: PUSH
21658: LD_INT 12
21660: ST_TO_ADDR
// side := GetSide ( unit ) ;
21661: LD_ADDR_VAR 0 6
21665: PUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21676: LD_INT 61
21678: PPUSH
21679: LD_VAR 0 6
21683: PPUSH
21684: CALL_OW 321
21688: PUSH
21689: LD_INT 2
21691: EQUAL
21692: IFFALSE 21702
// viewRange := 16 ;
21694: LD_ADDR_VAR 0 7
21698: PUSH
21699: LD_INT 16
21701: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_VAR 0 2
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: CALL_OW 297
21721: PUSH
21722: LD_VAR 0 5
21726: GREATER
21727: IFFALSE 21806
// begin ComMoveXY ( unit , x , y ) ;
21729: LD_VAR 0 1
21733: PPUSH
21734: LD_VAR 0 2
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21748: LD_INT 35
21750: PPUSH
21751: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_VAR 0 2
21764: PPUSH
21765: LD_VAR 0 3
21769: PPUSH
21770: CALL 58478 0 3
21774: NOT
21775: IFFALSE 21779
// exit ;
21777: GO 22033
// until GetDistUnitXY ( unit , x , y ) < dist ;
21779: LD_VAR 0 1
21783: PPUSH
21784: LD_VAR 0 2
21788: PPUSH
21789: LD_VAR 0 3
21793: PPUSH
21794: CALL_OW 297
21798: PUSH
21799: LD_VAR 0 5
21803: LESS
21804: IFFALSE 21748
// end ; ComTurnXY ( unit , x , y ) ;
21806: LD_VAR 0 1
21810: PPUSH
21811: LD_VAR 0 2
21815: PPUSH
21816: LD_VAR 0 3
21820: PPUSH
21821: CALL_OW 118
// wait ( 5 ) ;
21825: LD_INT 5
21827: PPUSH
21828: CALL_OW 67
// _d := GetDir ( unit ) ;
21832: LD_ADDR_VAR 0 10
21836: PUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 254
21846: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21847: LD_ADDR_VAR 0 8
21851: PUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 250
21861: PPUSH
21862: LD_VAR 0 10
21866: PPUSH
21867: LD_VAR 0 5
21871: PPUSH
21872: CALL_OW 272
21876: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21877: LD_ADDR_VAR 0 9
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 251
21891: PPUSH
21892: LD_VAR 0 10
21896: PPUSH
21897: LD_VAR 0 5
21901: PPUSH
21902: CALL_OW 273
21906: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21907: LD_VAR 0 8
21911: PPUSH
21912: LD_VAR 0 9
21916: PPUSH
21917: CALL_OW 488
21921: NOT
21922: IFFALSE 21926
// exit ;
21924: GO 22033
// ComAnimCustom ( unit , 1 ) ;
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_INT 1
21933: PPUSH
21934: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21938: LD_VAR 0 8
21942: PPUSH
21943: LD_VAR 0 9
21947: PPUSH
21948: LD_VAR 0 6
21952: PPUSH
21953: LD_VAR 0 7
21957: PPUSH
21958: CALL_OW 330
// repeat wait ( 1 ) ;
21962: LD_INT 1
21964: PPUSH
21965: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 316
21978: PUSH
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 314
21988: OR
21989: PUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 302
21999: NOT
22000: OR
22001: PUSH
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 301
22011: OR
22012: IFFALSE 21962
// RemoveSeeing ( _x , _y , side ) ;
22014: LD_VAR 0 8
22018: PPUSH
22019: LD_VAR 0 9
22023: PPUSH
22024: LD_VAR 0 6
22028: PPUSH
22029: CALL_OW 331
// end ; end_of_file
22033: LD_VAR 0 4
22037: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22038: LD_VAR 0 1
22042: PUSH
22043: LD_INT 200
22045: DOUBLE
22046: GREATEREQUAL
22047: IFFALSE 22055
22049: LD_INT 299
22051: DOUBLE
22052: LESSEQUAL
22053: IFTRUE 22057
22055: GO 22089
22057: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_VAR 0 2
22067: PPUSH
22068: LD_VAR 0 3
22072: PPUSH
22073: LD_VAR 0 4
22077: PPUSH
22078: LD_VAR 0 5
22082: PPUSH
22083: CALL 18125 0 5
22087: GO 22166
22089: LD_INT 300
22091: DOUBLE
22092: GREATEREQUAL
22093: IFFALSE 22101
22095: LD_INT 399
22097: DOUBLE
22098: LESSEQUAL
22099: IFTRUE 22103
22101: GO 22165
22103: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22104: LD_VAR 0 1
22108: PPUSH
22109: LD_VAR 0 2
22113: PPUSH
22114: LD_VAR 0 3
22118: PPUSH
22119: LD_VAR 0 4
22123: PPUSH
22124: LD_VAR 0 5
22128: PPUSH
22129: LD_VAR 0 6
22133: PPUSH
22134: LD_VAR 0 7
22138: PPUSH
22139: LD_VAR 0 8
22143: PPUSH
22144: LD_VAR 0 9
22148: PPUSH
22149: LD_VAR 0 10
22153: PPUSH
22154: LD_VAR 0 11
22158: PPUSH
22159: CALL 14458 0 11
22163: GO 22166
22165: POP
// end ;
22166: PPOPN 11
22168: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_VAR 0 2
22178: PPUSH
22179: LD_VAR 0 3
22183: PPUSH
22184: LD_VAR 0 4
22188: PPUSH
22189: LD_VAR 0 5
22193: PPUSH
22194: CALL 17861 0 5
// end ; end_of_file
22198: PPOPN 5
22200: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22201: LD_INT 0
22203: PPUSH
22204: PPUSH
// if exist_mode then
22205: LD_VAR 0 2
22209: IFFALSE 22234
// unit := CreateCharacter ( prefix & ident ) else
22211: LD_ADDR_VAR 0 5
22215: PUSH
22216: LD_VAR 0 3
22220: PUSH
22221: LD_VAR 0 1
22225: STR
22226: PPUSH
22227: CALL_OW 34
22231: ST_TO_ADDR
22232: GO 22249
// unit := NewCharacter ( ident ) ;
22234: LD_ADDR_VAR 0 5
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 25
22248: ST_TO_ADDR
// result := unit ;
22249: LD_ADDR_VAR 0 4
22253: PUSH
22254: LD_VAR 0 5
22258: ST_TO_ADDR
// end ;
22259: LD_VAR 0 4
22263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22264: LD_INT 0
22266: PPUSH
22267: PPUSH
// if not side or not nation then
22268: LD_VAR 0 1
22272: NOT
22273: PUSH
22274: LD_VAR 0 2
22278: NOT
22279: OR
22280: IFFALSE 22284
// exit ;
22282: GO 23052
// case nation of nation_american :
22284: LD_VAR 0 2
22288: PUSH
22289: LD_INT 1
22291: DOUBLE
22292: EQUAL
22293: IFTRUE 22297
22295: GO 22511
22297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22298: LD_ADDR_VAR 0 4
22302: PUSH
22303: LD_INT 35
22305: PUSH
22306: LD_INT 45
22308: PUSH
22309: LD_INT 46
22311: PUSH
22312: LD_INT 47
22314: PUSH
22315: LD_INT 82
22317: PUSH
22318: LD_INT 83
22320: PUSH
22321: LD_INT 84
22323: PUSH
22324: LD_INT 85
22326: PUSH
22327: LD_INT 86
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 6
22338: PUSH
22339: LD_INT 15
22341: PUSH
22342: LD_INT 16
22344: PUSH
22345: LD_INT 7
22347: PUSH
22348: LD_INT 12
22350: PUSH
22351: LD_INT 13
22353: PUSH
22354: LD_INT 10
22356: PUSH
22357: LD_INT 14
22359: PUSH
22360: LD_INT 20
22362: PUSH
22363: LD_INT 21
22365: PUSH
22366: LD_INT 22
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 32
22374: PUSH
22375: LD_INT 27
22377: PUSH
22378: LD_INT 36
22380: PUSH
22381: LD_INT 69
22383: PUSH
22384: LD_INT 39
22386: PUSH
22387: LD_INT 34
22389: PUSH
22390: LD_INT 40
22392: PUSH
22393: LD_INT 48
22395: PUSH
22396: LD_INT 49
22398: PUSH
22399: LD_INT 50
22401: PUSH
22402: LD_INT 51
22404: PUSH
22405: LD_INT 52
22407: PUSH
22408: LD_INT 53
22410: PUSH
22411: LD_INT 54
22413: PUSH
22414: LD_INT 55
22416: PUSH
22417: LD_INT 56
22419: PUSH
22420: LD_INT 57
22422: PUSH
22423: LD_INT 58
22425: PUSH
22426: LD_INT 59
22428: PUSH
22429: LD_INT 60
22431: PUSH
22432: LD_INT 61
22434: PUSH
22435: LD_INT 62
22437: PUSH
22438: LD_INT 80
22440: PUSH
22441: LD_INT 82
22443: PUSH
22444: LD_INT 83
22446: PUSH
22447: LD_INT 84
22449: PUSH
22450: LD_INT 85
22452: PUSH
22453: LD_INT 86
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: ST_TO_ADDR
22509: GO 22976
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22745
22519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22520: LD_ADDR_VAR 0 4
22524: PUSH
22525: LD_INT 35
22527: PUSH
22528: LD_INT 45
22530: PUSH
22531: LD_INT 46
22533: PUSH
22534: LD_INT 47
22536: PUSH
22537: LD_INT 82
22539: PUSH
22540: LD_INT 83
22542: PUSH
22543: LD_INT 84
22545: PUSH
22546: LD_INT 85
22548: PUSH
22549: LD_INT 87
22551: PUSH
22552: LD_INT 70
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: LD_INT 11
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: LD_INT 5
22569: PUSH
22570: LD_INT 6
22572: PUSH
22573: LD_INT 15
22575: PUSH
22576: LD_INT 18
22578: PUSH
22579: LD_INT 7
22581: PUSH
22582: LD_INT 17
22584: PUSH
22585: LD_INT 8
22587: PUSH
22588: LD_INT 20
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 72
22599: PUSH
22600: LD_INT 26
22602: PUSH
22603: LD_INT 69
22605: PUSH
22606: LD_INT 39
22608: PUSH
22609: LD_INT 40
22611: PUSH
22612: LD_INT 41
22614: PUSH
22615: LD_INT 42
22617: PUSH
22618: LD_INT 43
22620: PUSH
22621: LD_INT 48
22623: PUSH
22624: LD_INT 49
22626: PUSH
22627: LD_INT 50
22629: PUSH
22630: LD_INT 51
22632: PUSH
22633: LD_INT 52
22635: PUSH
22636: LD_INT 53
22638: PUSH
22639: LD_INT 54
22641: PUSH
22642: LD_INT 55
22644: PUSH
22645: LD_INT 56
22647: PUSH
22648: LD_INT 60
22650: PUSH
22651: LD_INT 61
22653: PUSH
22654: LD_INT 62
22656: PUSH
22657: LD_INT 66
22659: PUSH
22660: LD_INT 67
22662: PUSH
22663: LD_INT 68
22665: PUSH
22666: LD_INT 81
22668: PUSH
22669: LD_INT 82
22671: PUSH
22672: LD_INT 83
22674: PUSH
22675: LD_INT 84
22677: PUSH
22678: LD_INT 85
22680: PUSH
22681: LD_INT 87
22683: PUSH
22684: LD_INT 88
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: ST_TO_ADDR
22743: GO 22976
22745: LD_INT 3
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22975
22753: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22754: LD_ADDR_VAR 0 4
22758: PUSH
22759: LD_INT 46
22761: PUSH
22762: LD_INT 47
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: LD_INT 82
22773: PUSH
22774: LD_INT 83
22776: PUSH
22777: LD_INT 84
22779: PUSH
22780: LD_INT 85
22782: PUSH
22783: LD_INT 86
22785: PUSH
22786: LD_INT 11
22788: PUSH
22789: LD_INT 9
22791: PUSH
22792: LD_INT 20
22794: PUSH
22795: LD_INT 19
22797: PUSH
22798: LD_INT 21
22800: PUSH
22801: LD_INT 24
22803: PUSH
22804: LD_INT 22
22806: PUSH
22807: LD_INT 25
22809: PUSH
22810: LD_INT 28
22812: PUSH
22813: LD_INT 29
22815: PUSH
22816: LD_INT 30
22818: PUSH
22819: LD_INT 31
22821: PUSH
22822: LD_INT 37
22824: PUSH
22825: LD_INT 38
22827: PUSH
22828: LD_INT 32
22830: PUSH
22831: LD_INT 27
22833: PUSH
22834: LD_INT 33
22836: PUSH
22837: LD_INT 69
22839: PUSH
22840: LD_INT 39
22842: PUSH
22843: LD_INT 34
22845: PUSH
22846: LD_INT 40
22848: PUSH
22849: LD_INT 71
22851: PUSH
22852: LD_INT 23
22854: PUSH
22855: LD_INT 44
22857: PUSH
22858: LD_INT 48
22860: PUSH
22861: LD_INT 49
22863: PUSH
22864: LD_INT 50
22866: PUSH
22867: LD_INT 51
22869: PUSH
22870: LD_INT 52
22872: PUSH
22873: LD_INT 53
22875: PUSH
22876: LD_INT 54
22878: PUSH
22879: LD_INT 55
22881: PUSH
22882: LD_INT 56
22884: PUSH
22885: LD_INT 57
22887: PUSH
22888: LD_INT 58
22890: PUSH
22891: LD_INT 59
22893: PUSH
22894: LD_INT 63
22896: PUSH
22897: LD_INT 64
22899: PUSH
22900: LD_INT 65
22902: PUSH
22903: LD_INT 82
22905: PUSH
22906: LD_INT 83
22908: PUSH
22909: LD_INT 84
22911: PUSH
22912: LD_INT 85
22914: PUSH
22915: LD_INT 86
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
22973: GO 22976
22975: POP
// if state > - 1 and state < 3 then
22976: LD_VAR 0 3
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: GREATER
22985: PUSH
22986: LD_VAR 0 3
22990: PUSH
22991: LD_INT 3
22993: LESS
22994: AND
22995: IFFALSE 23052
// for i in result do
22997: LD_ADDR_VAR 0 5
23001: PUSH
23002: LD_VAR 0 4
23006: PUSH
23007: FOR_IN
23008: IFFALSE 23050
// if GetTech ( i , side ) <> state then
23010: LD_VAR 0 5
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 321
23024: PUSH
23025: LD_VAR 0 3
23029: NONEQUAL
23030: IFFALSE 23048
// result := result diff i ;
23032: LD_ADDR_VAR 0 4
23036: PUSH
23037: LD_VAR 0 4
23041: PUSH
23042: LD_VAR 0 5
23046: DIFF
23047: ST_TO_ADDR
23048: GO 23007
23050: POP
23051: POP
// end ;
23052: LD_VAR 0 4
23056: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23057: LD_INT 0
23059: PPUSH
23060: PPUSH
23061: PPUSH
// result := true ;
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_INT 1
23069: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23070: LD_ADDR_VAR 0 5
23074: PUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 480
23084: ST_TO_ADDR
// if not tmp then
23085: LD_VAR 0 5
23089: NOT
23090: IFFALSE 23094
// exit ;
23092: GO 23143
// for i in tmp do
23094: LD_ADDR_VAR 0 4
23098: PUSH
23099: LD_VAR 0 5
23103: PUSH
23104: FOR_IN
23105: IFFALSE 23141
// if GetTech ( i , side ) <> state_researched then
23107: LD_VAR 0 4
23111: PPUSH
23112: LD_VAR 0 1
23116: PPUSH
23117: CALL_OW 321
23121: PUSH
23122: LD_INT 2
23124: NONEQUAL
23125: IFFALSE 23139
// begin result := false ;
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_INT 0
23134: ST_TO_ADDR
// exit ;
23135: POP
23136: POP
23137: GO 23143
// end ;
23139: GO 23104
23141: POP
23142: POP
// end ;
23143: LD_VAR 0 3
23147: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23148: LD_INT 0
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23163: LD_VAR 0 1
23167: NOT
23168: PUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 257
23178: PUSH
23179: LD_INT 9
23181: NONEQUAL
23182: OR
23183: IFFALSE 23187
// exit ;
23185: GO 23760
// side := GetSide ( unit ) ;
23187: LD_ADDR_VAR 0 9
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 255
23201: ST_TO_ADDR
// tech_space := tech_spacanom ;
23202: LD_ADDR_VAR 0 12
23206: PUSH
23207: LD_INT 29
23209: ST_TO_ADDR
// tech_time := tech_taurad ;
23210: LD_ADDR_VAR 0 13
23214: PUSH
23215: LD_INT 28
23217: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23218: LD_ADDR_VAR 0 11
23222: PUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 310
23232: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23233: LD_VAR 0 11
23237: PPUSH
23238: CALL_OW 247
23242: PUSH
23243: LD_INT 2
23245: EQUAL
23246: IFFALSE 23250
// exit ;
23248: GO 23760
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23250: LD_ADDR_VAR 0 8
23254: PUSH
23255: LD_INT 81
23257: PUSH
23258: LD_VAR 0 9
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: LD_INT 21
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 8
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23760
// if in_unit then
23302: LD_VAR 0 11
23306: IFFALSE 23330
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23308: LD_ADDR_VAR 0 10
23312: PUSH
23313: LD_VAR 0 8
23317: PPUSH
23318: LD_VAR 0 11
23322: PPUSH
23323: CALL_OW 74
23327: ST_TO_ADDR
23328: GO 23350
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23330: LD_ADDR_VAR 0 10
23334: PUSH
23335: LD_VAR 0 8
23339: PPUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 74
23349: ST_TO_ADDR
// if not enemy then
23350: LD_VAR 0 10
23354: NOT
23355: IFFALSE 23359
// exit ;
23357: GO 23760
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23359: LD_VAR 0 11
23363: PUSH
23364: LD_VAR 0 11
23368: PPUSH
23369: LD_VAR 0 10
23373: PPUSH
23374: CALL_OW 296
23378: PUSH
23379: LD_INT 13
23381: GREATER
23382: AND
23383: PUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: LD_VAR 0 10
23393: PPUSH
23394: CALL_OW 296
23398: PUSH
23399: LD_INT 12
23401: GREATER
23402: OR
23403: IFFALSE 23407
// exit ;
23405: GO 23760
// missile := [ 1 ] ;
23407: LD_ADDR_VAR 0 14
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23418: LD_VAR 0 9
23422: PPUSH
23423: LD_VAR 0 12
23427: PPUSH
23428: CALL_OW 325
23432: IFFALSE 23461
// missile := Replace ( missile , missile + 1 , 2 ) ;
23434: LD_ADDR_VAR 0 14
23438: PUSH
23439: LD_VAR 0 14
23443: PPUSH
23444: LD_VAR 0 14
23448: PUSH
23449: LD_INT 1
23451: PLUS
23452: PPUSH
23453: LD_INT 2
23455: PPUSH
23456: CALL_OW 1
23460: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23461: LD_VAR 0 9
23465: PPUSH
23466: LD_VAR 0 13
23470: PPUSH
23471: CALL_OW 325
23475: PUSH
23476: LD_VAR 0 10
23480: PPUSH
23481: CALL_OW 255
23485: PPUSH
23486: LD_VAR 0 13
23490: PPUSH
23491: CALL_OW 325
23495: NOT
23496: AND
23497: IFFALSE 23526
// missile := Replace ( missile , missile + 1 , 3 ) ;
23499: LD_ADDR_VAR 0 14
23503: PUSH
23504: LD_VAR 0 14
23508: PPUSH
23509: LD_VAR 0 14
23513: PUSH
23514: LD_INT 1
23516: PLUS
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: CALL_OW 1
23525: ST_TO_ADDR
// if missile < 2 then
23526: LD_VAR 0 14
23530: PUSH
23531: LD_INT 2
23533: LESS
23534: IFFALSE 23538
// exit ;
23536: GO 23760
// x := GetX ( enemy ) ;
23538: LD_ADDR_VAR 0 4
23542: PUSH
23543: LD_VAR 0 10
23547: PPUSH
23548: CALL_OW 250
23552: ST_TO_ADDR
// y := GetY ( enemy ) ;
23553: LD_ADDR_VAR 0 5
23557: PUSH
23558: LD_VAR 0 10
23562: PPUSH
23563: CALL_OW 251
23567: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23568: LD_ADDR_VAR 0 6
23572: PUSH
23573: LD_VAR 0 4
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PPUSH
23582: LD_INT 1
23584: PPUSH
23585: CALL_OW 12
23589: PLUS
23590: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23591: LD_ADDR_VAR 0 7
23595: PUSH
23596: LD_VAR 0 5
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PPUSH
23605: LD_INT 1
23607: PPUSH
23608: CALL_OW 12
23612: PLUS
23613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23614: LD_VAR 0 6
23618: PPUSH
23619: LD_VAR 0 7
23623: PPUSH
23624: CALL_OW 488
23628: NOT
23629: IFFALSE 23651
// begin _x := x ;
23631: LD_ADDR_VAR 0 6
23635: PUSH
23636: LD_VAR 0 4
23640: ST_TO_ADDR
// _y := y ;
23641: LD_ADDR_VAR 0 7
23645: PUSH
23646: LD_VAR 0 5
23650: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23651: LD_ADDR_VAR 0 3
23655: PUSH
23656: LD_INT 1
23658: PPUSH
23659: LD_VAR 0 14
23663: PPUSH
23664: CALL_OW 12
23668: ST_TO_ADDR
// case i of 1 :
23669: LD_VAR 0 3
23673: PUSH
23674: LD_INT 1
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23699
23682: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23683: LD_VAR 0 1
23687: PPUSH
23688: LD_VAR 0 10
23692: PPUSH
23693: CALL_OW 115
23697: GO 23760
23699: LD_INT 2
23701: DOUBLE
23702: EQUAL
23703: IFTRUE 23707
23705: GO 23729
23707: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23708: LD_VAR 0 1
23712: PPUSH
23713: LD_VAR 0 6
23717: PPUSH
23718: LD_VAR 0 7
23722: PPUSH
23723: CALL_OW 153
23727: GO 23760
23729: LD_INT 3
23731: DOUBLE
23732: EQUAL
23733: IFTRUE 23737
23735: GO 23759
23737: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23738: LD_VAR 0 1
23742: PPUSH
23743: LD_VAR 0 6
23747: PPUSH
23748: LD_VAR 0 7
23752: PPUSH
23753: CALL_OW 154
23757: GO 23760
23759: POP
// end ;
23760: LD_VAR 0 2
23764: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23765: LD_INT 0
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
// if not unit or not building then
23773: LD_VAR 0 1
23777: NOT
23778: PUSH
23779: LD_VAR 0 2
23783: NOT
23784: OR
23785: IFFALSE 23789
// exit ;
23787: GO 23947
// x := GetX ( building ) ;
23789: LD_ADDR_VAR 0 5
23793: PUSH
23794: LD_VAR 0 2
23798: PPUSH
23799: CALL_OW 250
23803: ST_TO_ADDR
// y := GetY ( building ) ;
23804: LD_ADDR_VAR 0 6
23808: PUSH
23809: LD_VAR 0 2
23813: PPUSH
23814: CALL_OW 251
23818: ST_TO_ADDR
// for i = 0 to 5 do
23819: LD_ADDR_VAR 0 4
23823: PUSH
23824: DOUBLE
23825: LD_INT 0
23827: DEC
23828: ST_TO_ADDR
23829: LD_INT 5
23831: PUSH
23832: FOR_TO
23833: IFFALSE 23945
// begin _x := ShiftX ( x , i , 3 ) ;
23835: LD_ADDR_VAR 0 7
23839: PUSH
23840: LD_VAR 0 5
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: LD_INT 3
23852: PPUSH
23853: CALL_OW 272
23857: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23858: LD_ADDR_VAR 0 8
23862: PUSH
23863: LD_VAR 0 6
23867: PPUSH
23868: LD_VAR 0 4
23872: PPUSH
23873: LD_INT 3
23875: PPUSH
23876: CALL_OW 273
23880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23881: LD_VAR 0 7
23885: PPUSH
23886: LD_VAR 0 8
23890: PPUSH
23891: CALL_OW 488
23895: NOT
23896: IFFALSE 23900
// continue ;
23898: GO 23832
// if HexInfo ( _x , _y ) = 0 then
23900: LD_VAR 0 7
23904: PPUSH
23905: LD_VAR 0 8
23909: PPUSH
23910: CALL_OW 428
23914: PUSH
23915: LD_INT 0
23917: EQUAL
23918: IFFALSE 23943
// begin ComMoveXY ( unit , _x , _y ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_VAR 0 7
23929: PPUSH
23930: LD_VAR 0 8
23934: PPUSH
23935: CALL_OW 111
// exit ;
23939: POP
23940: POP
23941: GO 23947
// end ; end ;
23943: GO 23832
23945: POP
23946: POP
// end ;
23947: LD_VAR 0 3
23951: RET
// export function ScanBase ( side , base_area ) ; begin
23952: LD_INT 0
23954: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23955: LD_ADDR_VAR 0 3
23959: PUSH
23960: LD_VAR 0 2
23964: PPUSH
23965: LD_INT 81
23967: PUSH
23968: LD_VAR 0 1
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PPUSH
23977: CALL_OW 70
23981: ST_TO_ADDR
// end ;
23982: LD_VAR 0 3
23986: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23987: LD_INT 0
23989: PPUSH
23990: PPUSH
23991: PPUSH
23992: PPUSH
// result := false ;
23993: LD_ADDR_VAR 0 2
23997: PUSH
23998: LD_INT 0
24000: ST_TO_ADDR
// side := GetSide ( unit ) ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 255
24015: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24016: LD_ADDR_VAR 0 4
24020: PUSH
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 248
24030: ST_TO_ADDR
// case nat of 1 :
24031: LD_VAR 0 4
24035: PUSH
24036: LD_INT 1
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24055
24044: POP
// tech := tech_lassight ; 2 :
24045: LD_ADDR_VAR 0 5
24049: PUSH
24050: LD_INT 12
24052: ST_TO_ADDR
24053: GO 24094
24055: LD_INT 2
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// tech := tech_mortar ; 3 :
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_INT 41
24071: ST_TO_ADDR
24072: GO 24094
24074: LD_INT 3
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// tech := tech_bazooka ; end ;
24083: LD_ADDR_VAR 0 5
24087: PUSH
24088: LD_INT 44
24090: ST_TO_ADDR
24091: GO 24094
24093: POP
// if Researched ( side , tech ) then
24094: LD_VAR 0 3
24098: PPUSH
24099: LD_VAR 0 5
24103: PPUSH
24104: CALL_OW 325
24108: IFFALSE 24135
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24110: LD_ADDR_VAR 0 2
24114: PUSH
24115: LD_INT 5
24117: PUSH
24118: LD_INT 8
24120: PUSH
24121: LD_INT 9
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_VAR 0 4
24133: ARRAY
24134: ST_TO_ADDR
// end ;
24135: LD_VAR 0 2
24139: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24140: LD_INT 0
24142: PPUSH
24143: PPUSH
24144: PPUSH
// if not mines then
24145: LD_VAR 0 2
24149: NOT
24150: IFFALSE 24154
// exit ;
24152: GO 24298
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24154: LD_ADDR_VAR 0 5
24158: PUSH
24159: LD_INT 81
24161: PUSH
24162: LD_VAR 0 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 21
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PPUSH
24192: CALL_OW 69
24196: ST_TO_ADDR
// for i in mines do
24197: LD_ADDR_VAR 0 4
24201: PUSH
24202: LD_VAR 0 2
24206: PUSH
24207: FOR_IN
24208: IFFALSE 24296
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24210: LD_VAR 0 4
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: LD_VAR 0 4
24223: PUSH
24224: LD_INT 2
24226: ARRAY
24227: PPUSH
24228: CALL_OW 458
24232: NOT
24233: IFFALSE 24237
// continue ;
24235: GO 24207
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24237: LD_VAR 0 4
24241: PUSH
24242: LD_INT 1
24244: ARRAY
24245: PPUSH
24246: LD_VAR 0 4
24250: PUSH
24251: LD_INT 2
24253: ARRAY
24254: PPUSH
24255: CALL_OW 428
24259: PUSH
24260: LD_VAR 0 5
24264: IN
24265: IFFALSE 24294
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24267: LD_VAR 0 4
24271: PUSH
24272: LD_INT 1
24274: ARRAY
24275: PPUSH
24276: LD_VAR 0 4
24280: PUSH
24281: LD_INT 2
24283: ARRAY
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL_OW 456
// end ;
24294: GO 24207
24296: POP
24297: POP
// end ;
24298: LD_VAR 0 3
24302: RET
// export function Count ( array ) ; var i ; begin
24303: LD_INT 0
24305: PPUSH
24306: PPUSH
// result := 0 ;
24307: LD_ADDR_VAR 0 2
24311: PUSH
24312: LD_INT 0
24314: ST_TO_ADDR
// for i in array do
24315: LD_ADDR_VAR 0 3
24319: PUSH
24320: LD_VAR 0 1
24324: PUSH
24325: FOR_IN
24326: IFFALSE 24350
// if i then
24328: LD_VAR 0 3
24332: IFFALSE 24348
// result := result + 1 ;
24334: LD_ADDR_VAR 0 2
24338: PUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: PLUS
24347: ST_TO_ADDR
24348: GO 24325
24350: POP
24351: POP
// end ;
24352: LD_VAR 0 2
24356: RET
// export function IsEmpty ( building ) ; begin
24357: LD_INT 0
24359: PPUSH
// if not building then
24360: LD_VAR 0 1
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24412
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_VAR 0 1
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: CALL_OW 255
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 58
24398: PUSH
24399: EMPTY
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PPUSH
24406: CALL_OW 69
24410: IN
24411: ST_TO_ADDR
// end ;
24412: LD_VAR 0 2
24416: RET
// export function IsNotFull ( building ) ; var places ; begin
24417: LD_INT 0
24419: PPUSH
24420: PPUSH
// if not building then
24421: LD_VAR 0 1
24425: NOT
24426: IFFALSE 24430
// exit ;
24428: GO 24601
// result := false ;
24430: LD_ADDR_VAR 0 2
24434: PUSH
24435: LD_INT 0
24437: ST_TO_ADDR
// places := 0 ;
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_INT 0
24445: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24446: LD_VAR 0 1
24450: PPUSH
24451: CALL_OW 266
24455: PUSH
24456: LD_INT 0
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24518
24462: LD_INT 1
24464: DOUBLE
24465: EQUAL
24466: IFTRUE 24518
24468: LD_INT 6
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24518
24474: LD_INT 7
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24518
24480: LD_INT 8
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24518
24486: LD_INT 4
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24518
24492: LD_INT 5
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24518
24498: LD_INT 2
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24518
24504: LD_INT 3
24506: DOUBLE
24507: EQUAL
24508: IFTRUE 24518
24510: LD_INT 35
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24529
24518: POP
// places := 6 ; b_bunker , b_breastwork :
24519: LD_ADDR_VAR 0 3
24523: PUSH
24524: LD_INT 6
24526: ST_TO_ADDR
24527: GO 24574
24529: LD_INT 32
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24543
24535: LD_INT 31
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24554
24543: POP
// places := 1 ; b_control_tower :
24544: LD_ADDR_VAR 0 3
24548: PUSH
24549: LD_INT 1
24551: ST_TO_ADDR
24552: GO 24574
24554: LD_INT 36
24556: DOUBLE
24557: EQUAL
24558: IFTRUE 24562
24560: GO 24573
24562: POP
// places := 3 ; end ;
24563: LD_ADDR_VAR 0 3
24567: PUSH
24568: LD_INT 3
24570: ST_TO_ADDR
24571: GO 24574
24573: POP
// if places then
24574: LD_VAR 0 3
24578: IFFALSE 24601
// result := UnitsInside ( building ) < places ;
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: LD_VAR 0 1
24589: PPUSH
24590: CALL_OW 313
24594: PUSH
24595: LD_VAR 0 3
24599: LESS
24600: ST_TO_ADDR
// end ;
24601: LD_VAR 0 2
24605: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24606: LD_INT 0
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
// tmp := [ ] ;
24612: LD_ADDR_VAR 0 3
24616: PUSH
24617: EMPTY
24618: ST_TO_ADDR
// list := [ ] ;
24619: LD_ADDR_VAR 0 5
24623: PUSH
24624: EMPTY
24625: ST_TO_ADDR
// for i = 16 to 25 do
24626: LD_ADDR_VAR 0 4
24630: PUSH
24631: DOUBLE
24632: LD_INT 16
24634: DEC
24635: ST_TO_ADDR
24636: LD_INT 25
24638: PUSH
24639: FOR_TO
24640: IFFALSE 24713
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24642: LD_ADDR_VAR 0 3
24646: PUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 22
24654: PUSH
24655: LD_VAR 0 1
24659: PPUSH
24660: CALL_OW 255
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 91
24671: PUSH
24672: LD_VAR 0 1
24676: PUSH
24677: LD_INT 6
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_VAR 0 4
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ADD
24710: ST_TO_ADDR
24711: GO 24639
24713: POP
24714: POP
// for i = 1 to tmp do
24715: LD_ADDR_VAR 0 4
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_VAR 0 3
24729: PUSH
24730: FOR_TO
24731: IFFALSE 24819
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24733: LD_ADDR_VAR 0 5
24737: PUSH
24738: LD_VAR 0 5
24742: PUSH
24743: LD_VAR 0 3
24747: PUSH
24748: LD_VAR 0 4
24752: ARRAY
24753: PPUSH
24754: CALL_OW 266
24758: PUSH
24759: LD_VAR 0 3
24763: PUSH
24764: LD_VAR 0 4
24768: ARRAY
24769: PPUSH
24770: CALL_OW 250
24774: PUSH
24775: LD_VAR 0 3
24779: PUSH
24780: LD_VAR 0 4
24784: ARRAY
24785: PPUSH
24786: CALL_OW 251
24790: PUSH
24791: LD_VAR 0 3
24795: PUSH
24796: LD_VAR 0 4
24800: ARRAY
24801: PPUSH
24802: CALL_OW 254
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: ADD
24816: ST_TO_ADDR
24817: GO 24730
24819: POP
24820: POP
// result := list ;
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_VAR 0 5
24830: ST_TO_ADDR
// end ;
24831: LD_VAR 0 2
24835: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24836: LD_INT 0
24838: PPUSH
24839: PPUSH
24840: PPUSH
24841: PPUSH
24842: PPUSH
24843: PPUSH
24844: PPUSH
// if not factory then
24845: LD_VAR 0 1
24849: NOT
24850: IFFALSE 24854
// exit ;
24852: GO 25447
// if control = control_apeman then
24854: LD_VAR 0 4
24858: PUSH
24859: LD_INT 5
24861: EQUAL
24862: IFFALSE 24971
// begin tmp := UnitsInside ( factory ) ;
24864: LD_ADDR_VAR 0 8
24868: PUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: CALL_OW 313
24878: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24879: LD_VAR 0 8
24883: PPUSH
24884: LD_INT 25
24886: PUSH
24887: LD_INT 12
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 72
24898: NOT
24899: IFFALSE 24909
// control := control_manual ;
24901: LD_ADDR_VAR 0 4
24905: PUSH
24906: LD_INT 1
24908: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24909: LD_ADDR_VAR 0 8
24913: PUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL 24606 0 1
24923: ST_TO_ADDR
// if tmp then
24924: LD_VAR 0 8
24928: IFFALSE 24971
// begin for i in tmp do
24930: LD_ADDR_VAR 0 7
24934: PUSH
24935: LD_VAR 0 8
24939: PUSH
24940: FOR_IN
24941: IFFALSE 24969
// if i [ 1 ] = b_ext_radio then
24943: LD_VAR 0 7
24947: PUSH
24948: LD_INT 1
24950: ARRAY
24951: PUSH
24952: LD_INT 22
24954: EQUAL
24955: IFFALSE 24967
// begin control := control_remote ;
24957: LD_ADDR_VAR 0 4
24961: PUSH
24962: LD_INT 2
24964: ST_TO_ADDR
// break ;
24965: GO 24969
// end ;
24967: GO 24940
24969: POP
24970: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24971: LD_VAR 0 1
24975: PPUSH
24976: LD_VAR 0 2
24980: PPUSH
24981: LD_VAR 0 3
24985: PPUSH
24986: LD_VAR 0 4
24990: PPUSH
24991: LD_VAR 0 5
24995: PPUSH
24996: CALL_OW 448
25000: IFFALSE 25035
// begin result := [ chassis , engine , control , weapon ] ;
25002: LD_ADDR_VAR 0 6
25006: PUSH
25007: LD_VAR 0 2
25011: PUSH
25012: LD_VAR 0 3
25016: PUSH
25017: LD_VAR 0 4
25021: PUSH
25022: LD_VAR 0 5
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
// exit ;
25033: GO 25447
// end ; _chassis := AvailableChassisList ( factory ) ;
25035: LD_ADDR_VAR 0 9
25039: PUSH
25040: LD_VAR 0 1
25044: PPUSH
25045: CALL_OW 475
25049: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25050: LD_ADDR_VAR 0 11
25054: PUSH
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 476
25064: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25065: LD_ADDR_VAR 0 12
25069: PUSH
25070: LD_VAR 0 1
25074: PPUSH
25075: CALL_OW 477
25079: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25080: LD_ADDR_VAR 0 10
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 478
25094: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25095: LD_VAR 0 9
25099: NOT
25100: PUSH
25101: LD_VAR 0 11
25105: NOT
25106: OR
25107: PUSH
25108: LD_VAR 0 12
25112: NOT
25113: OR
25114: PUSH
25115: LD_VAR 0 10
25119: NOT
25120: OR
25121: IFFALSE 25156
// begin result := [ chassis , engine , control , weapon ] ;
25123: LD_ADDR_VAR 0 6
25127: PUSH
25128: LD_VAR 0 2
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_VAR 0 4
25142: PUSH
25143: LD_VAR 0 5
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// exit ;
25154: GO 25447
// end ; if not chassis in _chassis then
25156: LD_VAR 0 2
25160: PUSH
25161: LD_VAR 0 9
25165: IN
25166: NOT
25167: IFFALSE 25193
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25169: LD_ADDR_VAR 0 2
25173: PUSH
25174: LD_VAR 0 9
25178: PUSH
25179: LD_INT 1
25181: PPUSH
25182: LD_VAR 0 9
25186: PPUSH
25187: CALL_OW 12
25191: ARRAY
25192: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25193: LD_VAR 0 2
25197: PPUSH
25198: LD_VAR 0 3
25202: PPUSH
25203: CALL 25452 0 2
25207: NOT
25208: IFFALSE 25267
// repeat engine := _engine [ 1 ] ;
25210: LD_ADDR_VAR 0 3
25214: PUSH
25215: LD_VAR 0 11
25219: PUSH
25220: LD_INT 1
25222: ARRAY
25223: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25224: LD_ADDR_VAR 0 11
25228: PUSH
25229: LD_VAR 0 11
25233: PPUSH
25234: LD_INT 1
25236: PPUSH
25237: CALL_OW 3
25241: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25242: LD_VAR 0 2
25246: PPUSH
25247: LD_VAR 0 3
25251: PPUSH
25252: CALL 25452 0 2
25256: PUSH
25257: LD_VAR 0 11
25261: PUSH
25262: EMPTY
25263: EQUAL
25264: OR
25265: IFFALSE 25210
// if not control in _control then
25267: LD_VAR 0 4
25271: PUSH
25272: LD_VAR 0 12
25276: IN
25277: NOT
25278: IFFALSE 25304
// control := _control [ rand ( 1 , _control ) ] ;
25280: LD_ADDR_VAR 0 4
25284: PUSH
25285: LD_VAR 0 12
25289: PUSH
25290: LD_INT 1
25292: PPUSH
25293: LD_VAR 0 12
25297: PPUSH
25298: CALL_OW 12
25302: ARRAY
25303: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25304: LD_VAR 0 2
25308: PPUSH
25309: LD_VAR 0 5
25313: PPUSH
25314: CALL 25672 0 2
25318: NOT
25319: IFFALSE 25378
// repeat weapon := _weapon [ 1 ] ;
25321: LD_ADDR_VAR 0 5
25325: PUSH
25326: LD_VAR 0 10
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25335: LD_ADDR_VAR 0 10
25339: PUSH
25340: LD_VAR 0 10
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 3
25352: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25353: LD_VAR 0 2
25357: PPUSH
25358: LD_VAR 0 5
25362: PPUSH
25363: CALL 25672 0 2
25367: PUSH
25368: LD_VAR 0 10
25372: PUSH
25373: EMPTY
25374: EQUAL
25375: OR
25376: IFFALSE 25321
// result := [ ] ;
25378: LD_ADDR_VAR 0 6
25382: PUSH
25383: EMPTY
25384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25385: LD_VAR 0 1
25389: PPUSH
25390: LD_VAR 0 2
25394: PPUSH
25395: LD_VAR 0 3
25399: PPUSH
25400: LD_VAR 0 4
25404: PPUSH
25405: LD_VAR 0 5
25409: PPUSH
25410: CALL_OW 448
25414: IFFALSE 25447
// result := [ chassis , engine , control , weapon ] ;
25416: LD_ADDR_VAR 0 6
25420: PUSH
25421: LD_VAR 0 2
25425: PUSH
25426: LD_VAR 0 3
25430: PUSH
25431: LD_VAR 0 4
25435: PUSH
25436: LD_VAR 0 5
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: ST_TO_ADDR
// end ;
25447: LD_VAR 0 6
25451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25452: LD_INT 0
25454: PPUSH
// if not chassis or not engine then
25455: LD_VAR 0 1
25459: NOT
25460: PUSH
25461: LD_VAR 0 2
25465: NOT
25466: OR
25467: IFFALSE 25471
// exit ;
25469: GO 25667
// case engine of engine_solar :
25471: LD_VAR 0 2
25475: PUSH
25476: LD_INT 2
25478: DOUBLE
25479: EQUAL
25480: IFTRUE 25484
25482: GO 25522
25484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25485: LD_ADDR_VAR 0 3
25489: PUSH
25490: LD_INT 11
25492: PUSH
25493: LD_INT 12
25495: PUSH
25496: LD_INT 13
25498: PUSH
25499: LD_INT 14
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: ST_TO_ADDR
25520: GO 25651
25522: LD_INT 1
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25592
25530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: LD_INT 11
25538: PUSH
25539: LD_INT 12
25541: PUSH
25542: LD_INT 13
25544: PUSH
25545: LD_INT 14
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: LD_INT 4
25559: PUSH
25560: LD_INT 5
25562: PUSH
25563: LD_INT 21
25565: PUSH
25566: LD_INT 23
25568: PUSH
25569: LD_INT 22
25571: PUSH
25572: LD_INT 24
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
25590: GO 25651
25592: LD_INT 3
25594: DOUBLE
25595: EQUAL
25596: IFTRUE 25600
25598: GO 25650
25600: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25601: LD_ADDR_VAR 0 3
25605: PUSH
25606: LD_INT 13
25608: PUSH
25609: LD_INT 14
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 3
25617: PUSH
25618: LD_INT 4
25620: PUSH
25621: LD_INT 5
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 23
25632: PUSH
25633: LD_INT 24
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: ST_TO_ADDR
25648: GO 25651
25650: POP
// result := ( chassis in result ) ;
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: LD_VAR 0 1
25660: PUSH
25661: LD_VAR 0 3
25665: IN
25666: ST_TO_ADDR
// end ;
25667: LD_VAR 0 3
25671: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25672: LD_INT 0
25674: PPUSH
// if not chassis or not weapon then
25675: LD_VAR 0 1
25679: NOT
25680: PUSH
25681: LD_VAR 0 2
25685: NOT
25686: OR
25687: IFFALSE 25691
// exit ;
25689: GO 26751
// case weapon of us_machine_gun :
25691: LD_VAR 0 2
25695: PUSH
25696: LD_INT 2
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25734
25704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: LD_INT 4
25721: PUSH
25722: LD_INT 5
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: ST_TO_ADDR
25732: GO 26735
25734: LD_INT 3
25736: DOUBLE
25737: EQUAL
25738: IFTRUE 25742
25740: GO 25772
25742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: LD_INT 3
25756: PUSH
25757: LD_INT 4
25759: PUSH
25760: LD_INT 5
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: ST_TO_ADDR
25770: GO 26735
25772: LD_INT 11
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25780
25778: GO 25810
25780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 3
25794: PUSH
25795: LD_INT 4
25797: PUSH
25798: LD_INT 5
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 26735
25810: LD_INT 4
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 25844
25818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 3
25829: PUSH
25830: LD_INT 4
25832: PUSH
25833: LD_INT 5
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: ST_TO_ADDR
25842: GO 26735
25844: LD_INT 5
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25878
25852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: LD_INT 4
25866: PUSH
25867: LD_INT 5
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: ST_TO_ADDR
25876: GO 26735
25878: LD_INT 9
25880: DOUBLE
25881: EQUAL
25882: IFTRUE 25886
25884: GO 25912
25886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25887: LD_ADDR_VAR 0 3
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 3
25897: PUSH
25898: LD_INT 4
25900: PUSH
25901: LD_INT 5
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
25910: GO 26735
25912: LD_INT 7
25914: DOUBLE
25915: EQUAL
25916: IFTRUE 25920
25918: GO 25946
25920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: LD_INT 4
25934: PUSH
25935: LD_INT 5
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
25944: GO 26735
25946: LD_INT 12
25948: DOUBLE
25949: EQUAL
25950: IFTRUE 25954
25952: GO 25980
25954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25955: LD_ADDR_VAR 0 3
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: LD_INT 4
25968: PUSH
25969: LD_INT 5
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: ST_TO_ADDR
25978: GO 26735
25980: LD_INT 13
25982: DOUBLE
25983: EQUAL
25984: IFTRUE 25988
25986: GO 26014
25988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: LD_INT 4
26002: PUSH
26003: LD_INT 5
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
26012: GO 26735
26014: LD_INT 14
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26040
26022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_INT 4
26030: PUSH
26031: LD_INT 5
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: ST_TO_ADDR
26038: GO 26735
26040: LD_INT 6
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26066
26048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_INT 4
26056: PUSH
26057: LD_INT 5
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: ST_TO_ADDR
26064: GO 26735
26066: LD_INT 10
26068: DOUBLE
26069: EQUAL
26070: IFTRUE 26074
26072: GO 26092
26074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26075: LD_ADDR_VAR 0 3
26079: PUSH
26080: LD_INT 4
26082: PUSH
26083: LD_INT 5
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: ST_TO_ADDR
26090: GO 26735
26092: LD_INT 22
26094: DOUBLE
26095: EQUAL
26096: IFTRUE 26100
26098: GO 26126
26100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_INT 11
26108: PUSH
26109: LD_INT 12
26111: PUSH
26112: LD_INT 13
26114: PUSH
26115: LD_INT 14
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
26124: GO 26735
26126: LD_INT 23
26128: DOUBLE
26129: EQUAL
26130: IFTRUE 26134
26132: GO 26160
26134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 11
26142: PUSH
26143: LD_INT 12
26145: PUSH
26146: LD_INT 13
26148: PUSH
26149: LD_INT 14
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: ST_TO_ADDR
26158: GO 26735
26160: LD_INT 24
26162: DOUBLE
26163: EQUAL
26164: IFTRUE 26168
26166: GO 26194
26168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26169: LD_ADDR_VAR 0 3
26173: PUSH
26174: LD_INT 11
26176: PUSH
26177: LD_INT 12
26179: PUSH
26180: LD_INT 13
26182: PUSH
26183: LD_INT 14
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
26192: GO 26735
26194: LD_INT 30
26196: DOUBLE
26197: EQUAL
26198: IFTRUE 26202
26200: GO 26228
26202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26203: LD_ADDR_VAR 0 3
26207: PUSH
26208: LD_INT 11
26210: PUSH
26211: LD_INT 12
26213: PUSH
26214: LD_INT 13
26216: PUSH
26217: LD_INT 14
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
26226: GO 26735
26228: LD_INT 25
26230: DOUBLE
26231: EQUAL
26232: IFTRUE 26236
26234: GO 26254
26236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_INT 13
26244: PUSH
26245: LD_INT 14
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: ST_TO_ADDR
26252: GO 26735
26254: LD_INT 27
26256: DOUBLE
26257: EQUAL
26258: IFTRUE 26262
26260: GO 26280
26262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26263: LD_ADDR_VAR 0 3
26267: PUSH
26268: LD_INT 13
26270: PUSH
26271: LD_INT 14
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: ST_TO_ADDR
26278: GO 26735
26280: LD_INT 92
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26314
26288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26289: LD_ADDR_VAR 0 3
26293: PUSH
26294: LD_INT 11
26296: PUSH
26297: LD_INT 12
26299: PUSH
26300: LD_INT 13
26302: PUSH
26303: LD_INT 14
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: ST_TO_ADDR
26312: GO 26735
26314: LD_INT 28
26316: DOUBLE
26317: EQUAL
26318: IFTRUE 26322
26320: GO 26340
26322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: LD_INT 13
26330: PUSH
26331: LD_INT 14
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: ST_TO_ADDR
26338: GO 26735
26340: LD_INT 29
26342: DOUBLE
26343: EQUAL
26344: IFTRUE 26348
26346: GO 26366
26348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26349: LD_ADDR_VAR 0 3
26353: PUSH
26354: LD_INT 13
26356: PUSH
26357: LD_INT 14
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: ST_TO_ADDR
26364: GO 26735
26366: LD_INT 31
26368: DOUBLE
26369: EQUAL
26370: IFTRUE 26374
26372: GO 26392
26374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_INT 13
26382: PUSH
26383: LD_INT 14
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: ST_TO_ADDR
26390: GO 26735
26392: LD_INT 26
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26418
26400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 13
26408: PUSH
26409: LD_INT 14
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: ST_TO_ADDR
26416: GO 26735
26418: LD_INT 42
26420: DOUBLE
26421: EQUAL
26422: IFTRUE 26426
26424: GO 26452
26426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_INT 21
26434: PUSH
26435: LD_INT 22
26437: PUSH
26438: LD_INT 23
26440: PUSH
26441: LD_INT 24
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
26450: GO 26735
26452: LD_INT 43
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26486
26460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_INT 21
26468: PUSH
26469: LD_INT 22
26471: PUSH
26472: LD_INT 23
26474: PUSH
26475: LD_INT 24
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
26484: GO 26735
26486: LD_INT 44
26488: DOUBLE
26489: EQUAL
26490: IFTRUE 26494
26492: GO 26520
26494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 21
26502: PUSH
26503: LD_INT 22
26505: PUSH
26506: LD_INT 23
26508: PUSH
26509: LD_INT 24
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: ST_TO_ADDR
26518: GO 26735
26520: LD_INT 45
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26528
26526: GO 26554
26528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26529: LD_ADDR_VAR 0 3
26533: PUSH
26534: LD_INT 21
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_INT 23
26542: PUSH
26543: LD_INT 24
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
26552: GO 26735
26554: LD_INT 49
26556: DOUBLE
26557: EQUAL
26558: IFTRUE 26562
26560: GO 26588
26562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_INT 21
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_INT 23
26576: PUSH
26577: LD_INT 24
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
26586: GO 26735
26588: LD_INT 51
26590: DOUBLE
26591: EQUAL
26592: IFTRUE 26596
26594: GO 26622
26596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 21
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_INT 23
26610: PUSH
26611: LD_INT 24
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: ST_TO_ADDR
26620: GO 26735
26622: LD_INT 52
26624: DOUBLE
26625: EQUAL
26626: IFTRUE 26630
26628: GO 26656
26630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_INT 21
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_INT 23
26644: PUSH
26645: LD_INT 24
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: ST_TO_ADDR
26654: GO 26735
26656: LD_INT 53
26658: DOUBLE
26659: EQUAL
26660: IFTRUE 26664
26662: GO 26682
26664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26665: LD_ADDR_VAR 0 3
26669: PUSH
26670: LD_INT 23
26672: PUSH
26673: LD_INT 24
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: ST_TO_ADDR
26680: GO 26735
26682: LD_INT 46
26684: DOUBLE
26685: EQUAL
26686: IFTRUE 26690
26688: GO 26708
26690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26691: LD_ADDR_VAR 0 3
26695: PUSH
26696: LD_INT 23
26698: PUSH
26699: LD_INT 24
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: ST_TO_ADDR
26706: GO 26735
26708: LD_INT 47
26710: DOUBLE
26711: EQUAL
26712: IFTRUE 26716
26714: GO 26734
26716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_INT 23
26724: PUSH
26725: LD_INT 24
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: ST_TO_ADDR
26732: GO 26735
26734: POP
// result := ( chassis in result ) ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_VAR 0 3
26749: IN
26750: ST_TO_ADDR
// end ;
26751: LD_VAR 0 3
26755: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
// result := array ;
26765: LD_ADDR_VAR 0 5
26769: PUSH
26770: LD_VAR 0 1
26774: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26775: LD_VAR 0 1
26779: NOT
26780: PUSH
26781: LD_VAR 0 2
26785: NOT
26786: OR
26787: PUSH
26788: LD_VAR 0 3
26792: NOT
26793: OR
26794: PUSH
26795: LD_VAR 0 2
26799: PUSH
26800: LD_VAR 0 1
26804: GREATER
26805: OR
26806: PUSH
26807: LD_VAR 0 3
26811: PUSH
26812: LD_VAR 0 1
26816: GREATER
26817: OR
26818: IFFALSE 26822
// exit ;
26820: GO 27118
// if direction then
26822: LD_VAR 0 4
26826: IFFALSE 26890
// begin d := 1 ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_INT 1
26835: ST_TO_ADDR
// if i_from > i_to then
26836: LD_VAR 0 2
26840: PUSH
26841: LD_VAR 0 3
26845: GREATER
26846: IFFALSE 26872
// length := ( array - i_from ) + i_to else
26848: LD_ADDR_VAR 0 11
26852: PUSH
26853: LD_VAR 0 1
26857: PUSH
26858: LD_VAR 0 2
26862: MINUS
26863: PUSH
26864: LD_VAR 0 3
26868: PLUS
26869: ST_TO_ADDR
26870: GO 26888
// length := i_to - i_from ;
26872: LD_ADDR_VAR 0 11
26876: PUSH
26877: LD_VAR 0 3
26881: PUSH
26882: LD_VAR 0 2
26886: MINUS
26887: ST_TO_ADDR
// end else
26888: GO 26951
// begin d := - 1 ;
26890: LD_ADDR_VAR 0 9
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: ST_TO_ADDR
// if i_from > i_to then
26899: LD_VAR 0 2
26903: PUSH
26904: LD_VAR 0 3
26908: GREATER
26909: IFFALSE 26929
// length := i_from - i_to else
26911: LD_ADDR_VAR 0 11
26915: PUSH
26916: LD_VAR 0 2
26920: PUSH
26921: LD_VAR 0 3
26925: MINUS
26926: ST_TO_ADDR
26927: GO 26951
// length := ( array - i_to ) + i_from ;
26929: LD_ADDR_VAR 0 11
26933: PUSH
26934: LD_VAR 0 1
26938: PUSH
26939: LD_VAR 0 3
26943: MINUS
26944: PUSH
26945: LD_VAR 0 2
26949: PLUS
26950: ST_TO_ADDR
// end ; if not length then
26951: LD_VAR 0 11
26955: NOT
26956: IFFALSE 26960
// exit ;
26958: GO 27118
// tmp := array ;
26960: LD_ADDR_VAR 0 10
26964: PUSH
26965: LD_VAR 0 1
26969: ST_TO_ADDR
// for i = 1 to length do
26970: LD_ADDR_VAR 0 6
26974: PUSH
26975: DOUBLE
26976: LD_INT 1
26978: DEC
26979: ST_TO_ADDR
26980: LD_VAR 0 11
26984: PUSH
26985: FOR_TO
26986: IFFALSE 27106
// begin for j = 1 to array do
26988: LD_ADDR_VAR 0 7
26992: PUSH
26993: DOUBLE
26994: LD_INT 1
26996: DEC
26997: ST_TO_ADDR
26998: LD_VAR 0 1
27002: PUSH
27003: FOR_TO
27004: IFFALSE 27092
// begin k := j + d ;
27006: LD_ADDR_VAR 0 8
27010: PUSH
27011: LD_VAR 0 7
27015: PUSH
27016: LD_VAR 0 9
27020: PLUS
27021: ST_TO_ADDR
// if k > array then
27022: LD_VAR 0 8
27026: PUSH
27027: LD_VAR 0 1
27031: GREATER
27032: IFFALSE 27042
// k := 1 ;
27034: LD_ADDR_VAR 0 8
27038: PUSH
27039: LD_INT 1
27041: ST_TO_ADDR
// if not k then
27042: LD_VAR 0 8
27046: NOT
27047: IFFALSE 27059
// k := array ;
27049: LD_ADDR_VAR 0 8
27053: PUSH
27054: LD_VAR 0 1
27058: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27059: LD_ADDR_VAR 0 10
27063: PUSH
27064: LD_VAR 0 10
27068: PPUSH
27069: LD_VAR 0 8
27073: PPUSH
27074: LD_VAR 0 1
27078: PUSH
27079: LD_VAR 0 7
27083: ARRAY
27084: PPUSH
27085: CALL_OW 1
27089: ST_TO_ADDR
// end ;
27090: GO 27003
27092: POP
27093: POP
// array := tmp ;
27094: LD_ADDR_VAR 0 1
27098: PUSH
27099: LD_VAR 0 10
27103: ST_TO_ADDR
// end ;
27104: GO 26985
27106: POP
27107: POP
// result := array ;
27108: LD_ADDR_VAR 0 5
27112: PUSH
27113: LD_VAR 0 1
27117: ST_TO_ADDR
// end ;
27118: LD_VAR 0 5
27122: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
// result := 0 ;
27127: LD_ADDR_VAR 0 3
27131: PUSH
27132: LD_INT 0
27134: ST_TO_ADDR
// if not array or not value in array then
27135: LD_VAR 0 1
27139: NOT
27140: PUSH
27141: LD_VAR 0 2
27145: PUSH
27146: LD_VAR 0 1
27150: IN
27151: NOT
27152: OR
27153: IFFALSE 27157
// exit ;
27155: GO 27211
// for i = 1 to array do
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: DOUBLE
27163: LD_INT 1
27165: DEC
27166: ST_TO_ADDR
27167: LD_VAR 0 1
27171: PUSH
27172: FOR_TO
27173: IFFALSE 27209
// if value = array [ i ] then
27175: LD_VAR 0 2
27179: PUSH
27180: LD_VAR 0 1
27184: PUSH
27185: LD_VAR 0 4
27189: ARRAY
27190: EQUAL
27191: IFFALSE 27207
// begin result := i ;
27193: LD_ADDR_VAR 0 3
27197: PUSH
27198: LD_VAR 0 4
27202: ST_TO_ADDR
// exit ;
27203: POP
27204: POP
27205: GO 27211
// end ;
27207: GO 27172
27209: POP
27210: POP
// end ;
27211: LD_VAR 0 3
27215: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27216: LD_INT 0
27218: PPUSH
// vc_chassis := chassis ;
27219: LD_ADDR_OWVAR 37
27223: PUSH
27224: LD_VAR 0 1
27228: ST_TO_ADDR
// vc_engine := engine ;
27229: LD_ADDR_OWVAR 39
27233: PUSH
27234: LD_VAR 0 2
27238: ST_TO_ADDR
// vc_control := control ;
27239: LD_ADDR_OWVAR 38
27243: PUSH
27244: LD_VAR 0 3
27248: ST_TO_ADDR
// vc_weapon := weapon ;
27249: LD_ADDR_OWVAR 40
27253: PUSH
27254: LD_VAR 0 4
27258: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27259: LD_ADDR_OWVAR 41
27263: PUSH
27264: LD_VAR 0 5
27268: ST_TO_ADDR
// end ;
27269: LD_VAR 0 6
27273: RET
// export function WantPlant ( unit ) ; var task ; begin
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
// result := false ;
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: LD_INT 0
27285: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27286: LD_ADDR_VAR 0 3
27290: PUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 437
27300: ST_TO_ADDR
// if task then
27301: LD_VAR 0 3
27305: IFFALSE 27333
// if task [ 1 ] [ 1 ] = p then
27307: LD_VAR 0 3
27311: PUSH
27312: LD_INT 1
27314: ARRAY
27315: PUSH
27316: LD_INT 1
27318: ARRAY
27319: PUSH
27320: LD_STRING p
27322: EQUAL
27323: IFFALSE 27333
// result := true ;
27325: LD_ADDR_VAR 0 2
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// end ;
27333: LD_VAR 0 2
27337: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27338: LD_INT 0
27340: PPUSH
27341: PPUSH
27342: PPUSH
27343: PPUSH
// if pos < 1 then
27344: LD_VAR 0 2
27348: PUSH
27349: LD_INT 1
27351: LESS
27352: IFFALSE 27356
// exit ;
27354: GO 27659
// if pos = 1 then
27356: LD_VAR 0 2
27360: PUSH
27361: LD_INT 1
27363: EQUAL
27364: IFFALSE 27397
// result := Replace ( arr , pos [ 1 ] , value ) else
27366: LD_ADDR_VAR 0 4
27370: PUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: LD_VAR 0 2
27380: PUSH
27381: LD_INT 1
27383: ARRAY
27384: PPUSH
27385: LD_VAR 0 3
27389: PPUSH
27390: CALL_OW 1
27394: ST_TO_ADDR
27395: GO 27659
// begin tmp := arr ;
27397: LD_ADDR_VAR 0 6
27401: PUSH
27402: LD_VAR 0 1
27406: ST_TO_ADDR
// s_arr := [ tmp ] ;
27407: LD_ADDR_VAR 0 7
27411: PUSH
27412: LD_VAR 0 6
27416: PUSH
27417: EMPTY
27418: LIST
27419: ST_TO_ADDR
// for i = 1 to pos - 1 do
27420: LD_ADDR_VAR 0 5
27424: PUSH
27425: DOUBLE
27426: LD_INT 1
27428: DEC
27429: ST_TO_ADDR
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: MINUS
27438: PUSH
27439: FOR_TO
27440: IFFALSE 27485
// begin tmp := tmp [ pos [ i ] ] ;
27442: LD_ADDR_VAR 0 6
27446: PUSH
27447: LD_VAR 0 6
27451: PUSH
27452: LD_VAR 0 2
27456: PUSH
27457: LD_VAR 0 5
27461: ARRAY
27462: ARRAY
27463: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27464: LD_ADDR_VAR 0 7
27468: PUSH
27469: LD_VAR 0 7
27473: PUSH
27474: LD_VAR 0 6
27478: PUSH
27479: EMPTY
27480: LIST
27481: ADD
27482: ST_TO_ADDR
// end ;
27483: GO 27439
27485: POP
27486: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27487: LD_ADDR_VAR 0 6
27491: PUSH
27492: LD_VAR 0 6
27496: PPUSH
27497: LD_VAR 0 2
27501: PUSH
27502: LD_VAR 0 2
27506: ARRAY
27507: PPUSH
27508: LD_VAR 0 3
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27518: LD_ADDR_VAR 0 7
27522: PUSH
27523: LD_VAR 0 7
27527: PPUSH
27528: LD_VAR 0 7
27532: PPUSH
27533: LD_VAR 0 6
27537: PPUSH
27538: CALL_OW 1
27542: ST_TO_ADDR
// for i = s_arr downto 2 do
27543: LD_ADDR_VAR 0 5
27547: PUSH
27548: DOUBLE
27549: LD_VAR 0 7
27553: INC
27554: ST_TO_ADDR
27555: LD_INT 2
27557: PUSH
27558: FOR_DOWNTO
27559: IFFALSE 27643
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27561: LD_ADDR_VAR 0 6
27565: PUSH
27566: LD_VAR 0 7
27570: PUSH
27571: LD_VAR 0 5
27575: PUSH
27576: LD_INT 1
27578: MINUS
27579: ARRAY
27580: PPUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_VAR 0 5
27590: PUSH
27591: LD_INT 1
27593: MINUS
27594: ARRAY
27595: PPUSH
27596: LD_VAR 0 7
27600: PUSH
27601: LD_VAR 0 5
27605: ARRAY
27606: PPUSH
27607: CALL_OW 1
27611: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27612: LD_ADDR_VAR 0 7
27616: PUSH
27617: LD_VAR 0 7
27621: PPUSH
27622: LD_VAR 0 5
27626: PUSH
27627: LD_INT 1
27629: MINUS
27630: PPUSH
27631: LD_VAR 0 6
27635: PPUSH
27636: CALL_OW 1
27640: ST_TO_ADDR
// end ;
27641: GO 27558
27643: POP
27644: POP
// result := s_arr [ 1 ] ;
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: LD_VAR 0 7
27654: PUSH
27655: LD_INT 1
27657: ARRAY
27658: ST_TO_ADDR
// end ; end ;
27659: LD_VAR 0 4
27663: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27664: LD_INT 0
27666: PPUSH
27667: PPUSH
// if not list then
27668: LD_VAR 0 1
27672: NOT
27673: IFFALSE 27677
// exit ;
27675: GO 27768
// i := list [ pos1 ] ;
27677: LD_ADDR_VAR 0 5
27681: PUSH
27682: LD_VAR 0 1
27686: PUSH
27687: LD_VAR 0 2
27691: ARRAY
27692: ST_TO_ADDR
// if not i then
27693: LD_VAR 0 5
27697: NOT
27698: IFFALSE 27702
// exit ;
27700: GO 27768
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27702: LD_ADDR_VAR 0 1
27706: PUSH
27707: LD_VAR 0 1
27711: PPUSH
27712: LD_VAR 0 2
27716: PPUSH
27717: LD_VAR 0 1
27721: PUSH
27722: LD_VAR 0 3
27726: ARRAY
27727: PPUSH
27728: CALL_OW 1
27732: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_VAR 0 1
27742: PPUSH
27743: LD_VAR 0 3
27747: PPUSH
27748: LD_VAR 0 5
27752: PPUSH
27753: CALL_OW 1
27757: ST_TO_ADDR
// result := list ;
27758: LD_ADDR_VAR 0 4
27762: PUSH
27763: LD_VAR 0 1
27767: ST_TO_ADDR
// end ;
27768: LD_VAR 0 4
27772: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27773: LD_INT 0
27775: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27776: LD_ADDR_VAR 0 5
27780: PUSH
27781: LD_VAR 0 1
27785: PPUSH
27786: CALL_OW 250
27790: PPUSH
27791: LD_VAR 0 1
27795: PPUSH
27796: CALL_OW 251
27800: PPUSH
27801: LD_VAR 0 2
27805: PPUSH
27806: LD_VAR 0 3
27810: PPUSH
27811: LD_VAR 0 4
27815: PPUSH
27816: CALL 27826 0 5
27820: ST_TO_ADDR
// end ;
27821: LD_VAR 0 5
27825: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27826: LD_INT 0
27828: PPUSH
27829: PPUSH
27830: PPUSH
27831: PPUSH
// if not list then
27832: LD_VAR 0 3
27836: NOT
27837: IFFALSE 27841
// exit ;
27839: GO 28229
// result := [ ] ;
27841: LD_ADDR_VAR 0 6
27845: PUSH
27846: EMPTY
27847: ST_TO_ADDR
// for i in list do
27848: LD_ADDR_VAR 0 7
27852: PUSH
27853: LD_VAR 0 3
27857: PUSH
27858: FOR_IN
27859: IFFALSE 28061
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27861: LD_ADDR_VAR 0 9
27865: PUSH
27866: LD_VAR 0 7
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: LD_VAR 0 2
27880: PPUSH
27881: CALL_OW 297
27885: ST_TO_ADDR
// if not result then
27886: LD_VAR 0 6
27890: NOT
27891: IFFALSE 27917
// result := [ [ i , tmp ] ] else
27893: LD_ADDR_VAR 0 6
27897: PUSH
27898: LD_VAR 0 7
27902: PUSH
27903: LD_VAR 0 9
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: ST_TO_ADDR
27915: GO 28059
// begin if result [ result ] [ 2 ] < tmp then
27917: LD_VAR 0 6
27921: PUSH
27922: LD_VAR 0 6
27926: ARRAY
27927: PUSH
27928: LD_INT 2
27930: ARRAY
27931: PUSH
27932: LD_VAR 0 9
27936: LESS
27937: IFFALSE 27979
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27939: LD_ADDR_VAR 0 6
27943: PUSH
27944: LD_VAR 0 6
27948: PPUSH
27949: LD_VAR 0 6
27953: PUSH
27954: LD_INT 1
27956: PLUS
27957: PPUSH
27958: LD_VAR 0 7
27962: PUSH
27963: LD_VAR 0 9
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PPUSH
27972: CALL_OW 2
27976: ST_TO_ADDR
27977: GO 28059
// for j = 1 to result do
27979: LD_ADDR_VAR 0 8
27983: PUSH
27984: DOUBLE
27985: LD_INT 1
27987: DEC
27988: ST_TO_ADDR
27989: LD_VAR 0 6
27993: PUSH
27994: FOR_TO
27995: IFFALSE 28057
// begin if tmp < result [ j ] [ 2 ] then
27997: LD_VAR 0 9
28001: PUSH
28002: LD_VAR 0 6
28006: PUSH
28007: LD_VAR 0 8
28011: ARRAY
28012: PUSH
28013: LD_INT 2
28015: ARRAY
28016: LESS
28017: IFFALSE 28055
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28019: LD_ADDR_VAR 0 6
28023: PUSH
28024: LD_VAR 0 6
28028: PPUSH
28029: LD_VAR 0 8
28033: PPUSH
28034: LD_VAR 0 7
28038: PUSH
28039: LD_VAR 0 9
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 2
28052: ST_TO_ADDR
// break ;
28053: GO 28057
// end ; end ;
28055: GO 27994
28057: POP
28058: POP
// end ; end ;
28059: GO 27858
28061: POP
28062: POP
// if result and not asc then
28063: LD_VAR 0 6
28067: PUSH
28068: LD_VAR 0 4
28072: NOT
28073: AND
28074: IFFALSE 28149
// begin tmp := result ;
28076: LD_ADDR_VAR 0 9
28080: PUSH
28081: LD_VAR 0 6
28085: ST_TO_ADDR
// for i = tmp downto 1 do
28086: LD_ADDR_VAR 0 7
28090: PUSH
28091: DOUBLE
28092: LD_VAR 0 9
28096: INC
28097: ST_TO_ADDR
28098: LD_INT 1
28100: PUSH
28101: FOR_DOWNTO
28102: IFFALSE 28147
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28104: LD_ADDR_VAR 0 6
28108: PUSH
28109: LD_VAR 0 6
28113: PPUSH
28114: LD_VAR 0 9
28118: PUSH
28119: LD_VAR 0 7
28123: MINUS
28124: PUSH
28125: LD_INT 1
28127: PLUS
28128: PPUSH
28129: LD_VAR 0 9
28133: PUSH
28134: LD_VAR 0 7
28138: ARRAY
28139: PPUSH
28140: CALL_OW 1
28144: ST_TO_ADDR
28145: GO 28101
28147: POP
28148: POP
// end ; tmp := [ ] ;
28149: LD_ADDR_VAR 0 9
28153: PUSH
28154: EMPTY
28155: ST_TO_ADDR
// if mode then
28156: LD_VAR 0 5
28160: IFFALSE 28229
// begin for i = 1 to result do
28162: LD_ADDR_VAR 0 7
28166: PUSH
28167: DOUBLE
28168: LD_INT 1
28170: DEC
28171: ST_TO_ADDR
28172: LD_VAR 0 6
28176: PUSH
28177: FOR_TO
28178: IFFALSE 28217
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_VAR 0 9
28189: PPUSH
28190: LD_VAR 0 7
28194: PPUSH
28195: LD_VAR 0 6
28199: PUSH
28200: LD_VAR 0 7
28204: ARRAY
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: CALL_OW 1
28214: ST_TO_ADDR
28215: GO 28177
28217: POP
28218: POP
// result := tmp ;
28219: LD_ADDR_VAR 0 6
28223: PUSH
28224: LD_VAR 0 9
28228: ST_TO_ADDR
// end ; end ;
28229: LD_VAR 0 6
28233: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28234: LD_INT 0
28236: PPUSH
28237: PPUSH
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28242: LD_ADDR_VAR 0 5
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// if not x or not y then
28264: LD_VAR 0 2
28268: NOT
28269: PUSH
28270: LD_VAR 0 3
28274: NOT
28275: OR
28276: IFFALSE 28280
// exit ;
28278: GO 29930
// if not range then
28280: LD_VAR 0 4
28284: NOT
28285: IFFALSE 28295
// range := 10 ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_INT 10
28294: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28295: LD_ADDR_VAR 0 8
28299: PUSH
28300: LD_INT 81
28302: PUSH
28303: LD_VAR 0 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 92
28314: PUSH
28315: LD_VAR 0 2
28319: PUSH
28320: LD_VAR 0 3
28324: PUSH
28325: LD_VAR 0 4
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: LD_INT 21
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 69
28362: ST_TO_ADDR
// if not tmp then
28363: LD_VAR 0 8
28367: NOT
28368: IFFALSE 28372
// exit ;
28370: GO 29930
// for i in tmp do
28372: LD_ADDR_VAR 0 6
28376: PUSH
28377: LD_VAR 0 8
28381: PUSH
28382: FOR_IN
28383: IFFALSE 29905
// begin points := [ 0 , 0 , 0 ] ;
28385: LD_ADDR_VAR 0 9
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// bpoints := 1 ;
28404: LD_ADDR_VAR 0 10
28408: PUSH
28409: LD_INT 1
28411: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 247
28421: PUSH
28422: LD_INT 1
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28430
28428: GO 29008
28430: POP
// begin if GetClass ( i ) = 1 then
28431: LD_VAR 0 6
28435: PPUSH
28436: CALL_OW 257
28440: PUSH
28441: LD_INT 1
28443: EQUAL
28444: IFFALSE 28465
// points := [ 10 , 5 , 3 ] ;
28446: LD_ADDR_VAR 0 9
28450: PUSH
28451: LD_INT 10
28453: PUSH
28454: LD_INT 5
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28465: LD_VAR 0 6
28469: PPUSH
28470: CALL_OW 257
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: IN
28489: IFFALSE 28510
// points := [ 3 , 2 , 1 ] ;
28491: LD_ADDR_VAR 0 9
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28510: LD_VAR 0 6
28514: PPUSH
28515: CALL_OW 257
28519: PUSH
28520: LD_INT 5
28522: EQUAL
28523: IFFALSE 28544
// points := [ 130 , 5 , 2 ] ;
28525: LD_ADDR_VAR 0 9
28529: PUSH
28530: LD_INT 130
28532: PUSH
28533: LD_INT 5
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28544: LD_VAR 0 6
28548: PPUSH
28549: CALL_OW 257
28553: PUSH
28554: LD_INT 8
28556: EQUAL
28557: IFFALSE 28578
// points := [ 35 , 35 , 30 ] ;
28559: LD_ADDR_VAR 0 9
28563: PUSH
28564: LD_INT 35
28566: PUSH
28567: LD_INT 35
28569: PUSH
28570: LD_INT 30
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 257
28587: PUSH
28588: LD_INT 9
28590: EQUAL
28591: IFFALSE 28612
// points := [ 20 , 55 , 40 ] ;
28593: LD_ADDR_VAR 0 9
28597: PUSH
28598: LD_INT 20
28600: PUSH
28601: LD_INT 55
28603: PUSH
28604: LD_INT 40
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28612: LD_VAR 0 6
28616: PPUSH
28617: CALL_OW 257
28621: PUSH
28622: LD_INT 12
28624: PUSH
28625: LD_INT 16
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: IN
28632: IFFALSE 28653
// points := [ 5 , 3 , 2 ] ;
28634: LD_ADDR_VAR 0 9
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: LD_INT 3
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28653: LD_VAR 0 6
28657: PPUSH
28658: CALL_OW 257
28662: PUSH
28663: LD_INT 17
28665: EQUAL
28666: IFFALSE 28687
// points := [ 100 , 50 , 75 ] ;
28668: LD_ADDR_VAR 0 9
28672: PUSH
28673: LD_INT 100
28675: PUSH
28676: LD_INT 50
28678: PUSH
28679: LD_INT 75
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28687: LD_VAR 0 6
28691: PPUSH
28692: CALL_OW 257
28696: PUSH
28697: LD_INT 15
28699: EQUAL
28700: IFFALSE 28721
// points := [ 10 , 5 , 3 ] ;
28702: LD_ADDR_VAR 0 9
28706: PUSH
28707: LD_INT 10
28709: PUSH
28710: LD_INT 5
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28721: LD_VAR 0 6
28725: PPUSH
28726: CALL_OW 257
28730: PUSH
28731: LD_INT 14
28733: EQUAL
28734: IFFALSE 28755
// points := [ 10 , 0 , 0 ] ;
28736: LD_ADDR_VAR 0 9
28740: PUSH
28741: LD_INT 10
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28755: LD_VAR 0 6
28759: PPUSH
28760: CALL_OW 257
28764: PUSH
28765: LD_INT 11
28767: EQUAL
28768: IFFALSE 28789
// points := [ 30 , 10 , 5 ] ;
28770: LD_ADDR_VAR 0 9
28774: PUSH
28775: LD_INT 30
28777: PUSH
28778: LD_INT 10
28780: PUSH
28781: LD_INT 5
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28789: LD_VAR 0 1
28793: PPUSH
28794: LD_INT 5
28796: PPUSH
28797: CALL_OW 321
28801: PUSH
28802: LD_INT 2
28804: EQUAL
28805: IFFALSE 28822
// bpoints := bpoints * 1.8 ;
28807: LD_ADDR_VAR 0 10
28811: PUSH
28812: LD_VAR 0 10
28816: PUSH
28817: LD_REAL  1.80000000000000E+0000
28820: MUL
28821: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28822: LD_VAR 0 6
28826: PPUSH
28827: CALL_OW 257
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 4
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: IN
28850: PUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: LD_INT 51
28858: PPUSH
28859: CALL_OW 321
28863: PUSH
28864: LD_INT 2
28866: EQUAL
28867: AND
28868: IFFALSE 28885
// bpoints := bpoints * 1.2 ;
28870: LD_ADDR_VAR 0 10
28874: PUSH
28875: LD_VAR 0 10
28879: PUSH
28880: LD_REAL  1.20000000000000E+0000
28883: MUL
28884: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28885: LD_VAR 0 6
28889: PPUSH
28890: CALL_OW 257
28894: PUSH
28895: LD_INT 5
28897: PUSH
28898: LD_INT 7
28900: PUSH
28901: LD_INT 9
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: IN
28909: PUSH
28910: LD_VAR 0 1
28914: PPUSH
28915: LD_INT 52
28917: PPUSH
28918: CALL_OW 321
28922: PUSH
28923: LD_INT 2
28925: EQUAL
28926: AND
28927: IFFALSE 28944
// bpoints := bpoints * 1.5 ;
28929: LD_ADDR_VAR 0 10
28933: PUSH
28934: LD_VAR 0 10
28938: PUSH
28939: LD_REAL  1.50000000000000E+0000
28942: MUL
28943: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28944: LD_VAR 0 1
28948: PPUSH
28949: LD_INT 66
28951: PPUSH
28952: CALL_OW 321
28956: PUSH
28957: LD_INT 2
28959: EQUAL
28960: IFFALSE 28977
// bpoints := bpoints * 1.1 ;
28962: LD_ADDR_VAR 0 10
28966: PUSH
28967: LD_VAR 0 10
28971: PUSH
28972: LD_REAL  1.10000000000000E+0000
28975: MUL
28976: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28977: LD_ADDR_VAR 0 10
28981: PUSH
28982: LD_VAR 0 10
28986: PUSH
28987: LD_VAR 0 6
28991: PPUSH
28992: LD_INT 1
28994: PPUSH
28995: CALL_OW 259
28999: PUSH
29000: LD_REAL  1.15000000000000E+0000
29003: MUL
29004: MUL
29005: ST_TO_ADDR
// end ; unit_vehicle :
29006: GO 29834
29008: LD_INT 2
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29822
29016: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29017: LD_VAR 0 6
29021: PPUSH
29022: CALL_OW 264
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 42
29032: PUSH
29033: LD_INT 24
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: IN
29041: IFFALSE 29062
// points := [ 25 , 5 , 3 ] ;
29043: LD_ADDR_VAR 0 9
29047: PUSH
29048: LD_INT 25
29050: PUSH
29051: LD_INT 5
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29062: LD_VAR 0 6
29066: PPUSH
29067: CALL_OW 264
29071: PUSH
29072: LD_INT 4
29074: PUSH
29075: LD_INT 43
29077: PUSH
29078: LD_INT 25
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: IN
29086: IFFALSE 29107
// points := [ 40 , 15 , 5 ] ;
29088: LD_ADDR_VAR 0 9
29092: PUSH
29093: LD_INT 40
29095: PUSH
29096: LD_INT 15
29098: PUSH
29099: LD_INT 5
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29107: LD_VAR 0 6
29111: PPUSH
29112: CALL_OW 264
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: LD_INT 23
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: IN
29127: IFFALSE 29148
// points := [ 7 , 25 , 8 ] ;
29129: LD_ADDR_VAR 0 9
29133: PUSH
29134: LD_INT 7
29136: PUSH
29137: LD_INT 25
29139: PUSH
29140: LD_INT 8
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29148: LD_VAR 0 6
29152: PPUSH
29153: CALL_OW 264
29157: PUSH
29158: LD_INT 5
29160: PUSH
29161: LD_INT 27
29163: PUSH
29164: LD_INT 44
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: IN
29172: IFFALSE 29193
// points := [ 14 , 50 , 16 ] ;
29174: LD_ADDR_VAR 0 9
29178: PUSH
29179: LD_INT 14
29181: PUSH
29182: LD_INT 50
29184: PUSH
29185: LD_INT 16
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29193: LD_VAR 0 6
29197: PPUSH
29198: CALL_OW 264
29202: PUSH
29203: LD_INT 6
29205: PUSH
29206: LD_INT 46
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: IN
29213: IFFALSE 29234
// points := [ 32 , 120 , 70 ] ;
29215: LD_ADDR_VAR 0 9
29219: PUSH
29220: LD_INT 32
29222: PUSH
29223: LD_INT 120
29225: PUSH
29226: LD_INT 70
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29234: LD_VAR 0 6
29238: PPUSH
29239: CALL_OW 264
29243: PUSH
29244: LD_INT 7
29246: PUSH
29247: LD_INT 28
29249: PUSH
29250: LD_INT 45
29252: PUSH
29253: LD_INT 92
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: IN
29262: IFFALSE 29283
// points := [ 35 , 20 , 45 ] ;
29264: LD_ADDR_VAR 0 9
29268: PUSH
29269: LD_INT 35
29271: PUSH
29272: LD_INT 20
29274: PUSH
29275: LD_INT 45
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29283: LD_VAR 0 6
29287: PPUSH
29288: CALL_OW 264
29292: PUSH
29293: LD_INT 47
29295: PUSH
29296: EMPTY
29297: LIST
29298: IN
29299: IFFALSE 29320
// points := [ 67 , 45 , 75 ] ;
29301: LD_ADDR_VAR 0 9
29305: PUSH
29306: LD_INT 67
29308: PUSH
29309: LD_INT 45
29311: PUSH
29312: LD_INT 75
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29320: LD_VAR 0 6
29324: PPUSH
29325: CALL_OW 264
29329: PUSH
29330: LD_INT 26
29332: PUSH
29333: EMPTY
29334: LIST
29335: IN
29336: IFFALSE 29357
// points := [ 120 , 30 , 80 ] ;
29338: LD_ADDR_VAR 0 9
29342: PUSH
29343: LD_INT 120
29345: PUSH
29346: LD_INT 30
29348: PUSH
29349: LD_INT 80
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29357: LD_VAR 0 6
29361: PPUSH
29362: CALL_OW 264
29366: PUSH
29367: LD_INT 22
29369: PUSH
29370: EMPTY
29371: LIST
29372: IN
29373: IFFALSE 29394
// points := [ 40 , 1 , 1 ] ;
29375: LD_ADDR_VAR 0 9
29379: PUSH
29380: LD_INT 40
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29394: LD_VAR 0 6
29398: PPUSH
29399: CALL_OW 264
29403: PUSH
29404: LD_INT 29
29406: PUSH
29407: EMPTY
29408: LIST
29409: IN
29410: IFFALSE 29431
// points := [ 70 , 200 , 400 ] ;
29412: LD_ADDR_VAR 0 9
29416: PUSH
29417: LD_INT 70
29419: PUSH
29420: LD_INT 200
29422: PUSH
29423: LD_INT 400
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29431: LD_VAR 0 6
29435: PPUSH
29436: CALL_OW 264
29440: PUSH
29441: LD_INT 14
29443: PUSH
29444: LD_INT 53
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: IN
29451: IFFALSE 29472
// points := [ 40 , 10 , 20 ] ;
29453: LD_ADDR_VAR 0 9
29457: PUSH
29458: LD_INT 40
29460: PUSH
29461: LD_INT 10
29463: PUSH
29464: LD_INT 20
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29472: LD_VAR 0 6
29476: PPUSH
29477: CALL_OW 264
29481: PUSH
29482: LD_INT 9
29484: PUSH
29485: EMPTY
29486: LIST
29487: IN
29488: IFFALSE 29509
// points := [ 5 , 70 , 20 ] ;
29490: LD_ADDR_VAR 0 9
29494: PUSH
29495: LD_INT 5
29497: PUSH
29498: LD_INT 70
29500: PUSH
29501: LD_INT 20
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29509: LD_VAR 0 6
29513: PPUSH
29514: CALL_OW 264
29518: PUSH
29519: LD_INT 10
29521: PUSH
29522: EMPTY
29523: LIST
29524: IN
29525: IFFALSE 29546
// points := [ 35 , 110 , 70 ] ;
29527: LD_ADDR_VAR 0 9
29531: PUSH
29532: LD_INT 35
29534: PUSH
29535: LD_INT 110
29537: PUSH
29538: LD_INT 70
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29546: LD_VAR 0 6
29550: PPUSH
29551: CALL_OW 265
29555: PUSH
29556: LD_INT 25
29558: EQUAL
29559: IFFALSE 29580
// points := [ 80 , 65 , 100 ] ;
29561: LD_ADDR_VAR 0 9
29565: PUSH
29566: LD_INT 80
29568: PUSH
29569: LD_INT 65
29571: PUSH
29572: LD_INT 100
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29580: LD_VAR 0 6
29584: PPUSH
29585: CALL_OW 263
29589: PUSH
29590: LD_INT 1
29592: EQUAL
29593: IFFALSE 29628
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29595: LD_ADDR_VAR 0 10
29599: PUSH
29600: LD_VAR 0 10
29604: PUSH
29605: LD_VAR 0 6
29609: PPUSH
29610: CALL_OW 311
29614: PPUSH
29615: LD_INT 3
29617: PPUSH
29618: CALL_OW 259
29622: PUSH
29623: LD_INT 4
29625: MUL
29626: MUL
29627: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29628: LD_VAR 0 6
29632: PPUSH
29633: CALL_OW 263
29637: PUSH
29638: LD_INT 2
29640: EQUAL
29641: IFFALSE 29692
// begin j := IsControledBy ( i ) ;
29643: LD_ADDR_VAR 0 7
29647: PUSH
29648: LD_VAR 0 6
29652: PPUSH
29653: CALL_OW 312
29657: ST_TO_ADDR
// if j then
29658: LD_VAR 0 7
29662: IFFALSE 29692
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29664: LD_ADDR_VAR 0 10
29668: PUSH
29669: LD_VAR 0 10
29673: PUSH
29674: LD_VAR 0 7
29678: PPUSH
29679: LD_INT 3
29681: PPUSH
29682: CALL_OW 259
29686: PUSH
29687: LD_INT 3
29689: MUL
29690: MUL
29691: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29692: LD_VAR 0 6
29696: PPUSH
29697: CALL_OW 264
29701: PUSH
29702: LD_INT 5
29704: PUSH
29705: LD_INT 6
29707: PUSH
29708: LD_INT 46
29710: PUSH
29711: LD_INT 44
29713: PUSH
29714: LD_INT 47
29716: PUSH
29717: LD_INT 45
29719: PUSH
29720: LD_INT 28
29722: PUSH
29723: LD_INT 7
29725: PUSH
29726: LD_INT 27
29728: PUSH
29729: LD_INT 29
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: IN
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: LD_INT 52
29752: PPUSH
29753: CALL_OW 321
29757: PUSH
29758: LD_INT 2
29760: EQUAL
29761: AND
29762: IFFALSE 29779
// bpoints := bpoints * 1.2 ;
29764: LD_ADDR_VAR 0 10
29768: PUSH
29769: LD_VAR 0 10
29773: PUSH
29774: LD_REAL  1.20000000000000E+0000
29777: MUL
29778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29779: LD_VAR 0 6
29783: PPUSH
29784: CALL_OW 264
29788: PUSH
29789: LD_INT 6
29791: PUSH
29792: LD_INT 46
29794: PUSH
29795: LD_INT 47
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: IN
29803: IFFALSE 29820
// bpoints := bpoints * 1.2 ;
29805: LD_ADDR_VAR 0 10
29809: PUSH
29810: LD_VAR 0 10
29814: PUSH
29815: LD_REAL  1.20000000000000E+0000
29818: MUL
29819: ST_TO_ADDR
// end ; unit_building :
29820: GO 29834
29822: LD_INT 3
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29833
29830: POP
// ; end ;
29831: GO 29834
29833: POP
// for j = 1 to 3 do
29834: LD_ADDR_VAR 0 7
29838: PUSH
29839: DOUBLE
29840: LD_INT 1
29842: DEC
29843: ST_TO_ADDR
29844: LD_INT 3
29846: PUSH
29847: FOR_TO
29848: IFFALSE 29901
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29850: LD_ADDR_VAR 0 5
29854: PUSH
29855: LD_VAR 0 5
29859: PPUSH
29860: LD_VAR 0 7
29864: PPUSH
29865: LD_VAR 0 5
29869: PUSH
29870: LD_VAR 0 7
29874: ARRAY
29875: PUSH
29876: LD_VAR 0 9
29880: PUSH
29881: LD_VAR 0 7
29885: ARRAY
29886: PUSH
29887: LD_VAR 0 10
29891: MUL
29892: PLUS
29893: PPUSH
29894: CALL_OW 1
29898: ST_TO_ADDR
29899: GO 29847
29901: POP
29902: POP
// end ;
29903: GO 28382
29905: POP
29906: POP
// result := Replace ( result , 4 , tmp ) ;
29907: LD_ADDR_VAR 0 5
29911: PUSH
29912: LD_VAR 0 5
29916: PPUSH
29917: LD_INT 4
29919: PPUSH
29920: LD_VAR 0 8
29924: PPUSH
29925: CALL_OW 1
29929: ST_TO_ADDR
// end ;
29930: LD_VAR 0 5
29934: RET
// export function DangerAtRange ( unit , range ) ; begin
29935: LD_INT 0
29937: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29938: LD_ADDR_VAR 0 3
29942: PUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL_OW 255
29952: PPUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 250
29962: PPUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 251
29972: PPUSH
29973: LD_VAR 0 2
29977: PPUSH
29978: CALL 28234 0 4
29982: ST_TO_ADDR
// end ;
29983: LD_VAR 0 3
29987: RET
// export function DangerInArea ( side , area ) ; begin
29988: LD_INT 0
29990: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_VAR 0 2
30000: PPUSH
30001: LD_INT 81
30003: PUSH
30004: LD_VAR 0 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 70
30017: ST_TO_ADDR
// end ;
30018: LD_VAR 0 3
30022: RET
// export function IsExtension ( b ) ; begin
30023: LD_INT 0
30025: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30026: LD_ADDR_VAR 0 2
30030: PUSH
30031: LD_VAR 0 1
30035: PUSH
30036: LD_INT 23
30038: PUSH
30039: LD_INT 20
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_INT 17
30047: PUSH
30048: LD_INT 24
30050: PUSH
30051: LD_INT 21
30053: PUSH
30054: LD_INT 19
30056: PUSH
30057: LD_INT 16
30059: PUSH
30060: LD_INT 25
30062: PUSH
30063: LD_INT 18
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: IN
30078: ST_TO_ADDR
// end ;
30079: LD_VAR 0 2
30083: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30084: LD_INT 0
30086: PPUSH
30087: PPUSH
30088: PPUSH
// result := [ ] ;
30089: LD_ADDR_VAR 0 4
30093: PUSH
30094: EMPTY
30095: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30096: LD_ADDR_VAR 0 5
30100: PUSH
30101: LD_VAR 0 2
30105: PPUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 3
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PPUSH
30116: CALL_OW 70
30120: ST_TO_ADDR
// if not tmp then
30121: LD_VAR 0 5
30125: NOT
30126: IFFALSE 30130
// exit ;
30128: GO 30194
// if checkLink then
30130: LD_VAR 0 3
30134: IFFALSE 30184
// begin for i in tmp do
30136: LD_ADDR_VAR 0 6
30140: PUSH
30141: LD_VAR 0 5
30145: PUSH
30146: FOR_IN
30147: IFFALSE 30182
// if GetBase ( i ) <> base then
30149: LD_VAR 0 6
30153: PPUSH
30154: CALL_OW 274
30158: PUSH
30159: LD_VAR 0 1
30163: NONEQUAL
30164: IFFALSE 30180
// ComLinkToBase ( base , i ) ;
30166: LD_VAR 0 1
30170: PPUSH
30171: LD_VAR 0 6
30175: PPUSH
30176: CALL_OW 169
30180: GO 30146
30182: POP
30183: POP
// end ; result := tmp ;
30184: LD_ADDR_VAR 0 4
30188: PUSH
30189: LD_VAR 0 5
30193: ST_TO_ADDR
// end ;
30194: LD_VAR 0 4
30198: RET
// export function ComComplete ( units , b ) ; var i ; begin
30199: LD_INT 0
30201: PPUSH
30202: PPUSH
// if not units then
30203: LD_VAR 0 1
30207: NOT
30208: IFFALSE 30212
// exit ;
30210: GO 30302
// for i in units do
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 1
30221: PUSH
30222: FOR_IN
30223: IFFALSE 30300
// if BuildingStatus ( b ) = bs_build then
30225: LD_VAR 0 2
30229: PPUSH
30230: CALL_OW 461
30234: PUSH
30235: LD_INT 1
30237: EQUAL
30238: IFFALSE 30298
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30240: LD_VAR 0 4
30244: PPUSH
30245: LD_STRING h
30247: PUSH
30248: LD_VAR 0 2
30252: PPUSH
30253: CALL_OW 250
30257: PUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: CALL_OW 251
30267: PUSH
30268: LD_VAR 0 2
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: PPUSH
30294: CALL_OW 446
30298: GO 30222
30300: POP
30301: POP
// end ;
30302: LD_VAR 0 3
30306: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30307: LD_INT 0
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30315: LD_VAR 0 1
30319: NOT
30320: PUSH
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 263
30330: PUSH
30331: LD_INT 2
30333: NONEQUAL
30334: OR
30335: IFFALSE 30339
// exit ;
30337: GO 30655
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30339: LD_ADDR_VAR 0 6
30343: PUSH
30344: LD_INT 22
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 255
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 30
30366: PUSH
30367: LD_INT 36
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 34
30376: PUSH
30377: LD_INT 31
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PPUSH
30393: CALL_OW 69
30397: ST_TO_ADDR
// if not tmp then
30398: LD_VAR 0 6
30402: NOT
30403: IFFALSE 30407
// exit ;
30405: GO 30655
// result := [ ] ;
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: EMPTY
30413: ST_TO_ADDR
// for i in tmp do
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: LD_VAR 0 6
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30496
// begin t := UnitsInside ( i ) ;
30427: LD_ADDR_VAR 0 4
30431: PUSH
30432: LD_VAR 0 3
30436: PPUSH
30437: CALL_OW 313
30441: ST_TO_ADDR
// if t then
30442: LD_VAR 0 4
30446: IFFALSE 30494
// for j in t do
30448: LD_ADDR_VAR 0 7
30452: PUSH
30453: LD_VAR 0 4
30457: PUSH
30458: FOR_IN
30459: IFFALSE 30492
// result := Replace ( result , result + 1 , j ) ;
30461: LD_ADDR_VAR 0 2
30465: PUSH
30466: LD_VAR 0 2
30470: PPUSH
30471: LD_VAR 0 2
30475: PUSH
30476: LD_INT 1
30478: PLUS
30479: PPUSH
30480: LD_VAR 0 7
30484: PPUSH
30485: CALL_OW 1
30489: ST_TO_ADDR
30490: GO 30458
30492: POP
30493: POP
// end ;
30494: GO 30424
30496: POP
30497: POP
// if not result then
30498: LD_VAR 0 2
30502: NOT
30503: IFFALSE 30507
// exit ;
30505: GO 30655
// mech := result [ 1 ] ;
30507: LD_ADDR_VAR 0 5
30511: PUSH
30512: LD_VAR 0 2
30516: PUSH
30517: LD_INT 1
30519: ARRAY
30520: ST_TO_ADDR
// if result > 1 then
30521: LD_VAR 0 2
30525: PUSH
30526: LD_INT 1
30528: GREATER
30529: IFFALSE 30641
// begin for i = 2 to result do
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: DOUBLE
30537: LD_INT 2
30539: DEC
30540: ST_TO_ADDR
30541: LD_VAR 0 2
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30639
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30549: LD_ADDR_VAR 0 4
30553: PUSH
30554: LD_VAR 0 2
30558: PUSH
30559: LD_VAR 0 3
30563: ARRAY
30564: PPUSH
30565: LD_INT 3
30567: PPUSH
30568: CALL_OW 259
30572: PUSH
30573: LD_VAR 0 2
30577: PUSH
30578: LD_VAR 0 3
30582: ARRAY
30583: PPUSH
30584: CALL_OW 432
30588: MINUS
30589: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30590: LD_VAR 0 4
30594: PUSH
30595: LD_VAR 0 5
30599: PPUSH
30600: LD_INT 3
30602: PPUSH
30603: CALL_OW 259
30607: PUSH
30608: LD_VAR 0 5
30612: PPUSH
30613: CALL_OW 432
30617: MINUS
30618: GREATEREQUAL
30619: IFFALSE 30637
// mech := result [ i ] ;
30621: LD_ADDR_VAR 0 5
30625: PUSH
30626: LD_VAR 0 2
30630: PUSH
30631: LD_VAR 0 3
30635: ARRAY
30636: ST_TO_ADDR
// end ;
30637: GO 30546
30639: POP
30640: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30641: LD_VAR 0 1
30645: PPUSH
30646: LD_VAR 0 5
30650: PPUSH
30651: CALL_OW 135
// end ;
30655: LD_VAR 0 2
30659: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30660: LD_INT 0
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// result := [ ] ;
30675: LD_ADDR_VAR 0 7
30679: PUSH
30680: EMPTY
30681: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30682: LD_VAR 0 1
30686: PPUSH
30687: CALL_OW 266
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: IN
30702: NOT
30703: IFFALSE 30707
// exit ;
30705: GO 32341
// if name then
30707: LD_VAR 0 3
30711: IFFALSE 30727
// SetBName ( base_dep , name ) ;
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_VAR 0 3
30722: PPUSH
30723: CALL_OW 500
// base := GetBase ( base_dep ) ;
30727: LD_ADDR_VAR 0 15
30731: PUSH
30732: LD_VAR 0 1
30736: PPUSH
30737: CALL_OW 274
30741: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30742: LD_ADDR_VAR 0 16
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 255
30756: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30757: LD_ADDR_VAR 0 17
30761: PUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: CALL_OW 248
30771: ST_TO_ADDR
// if sources then
30772: LD_VAR 0 5
30776: IFFALSE 30823
// for i = 1 to 3 do
30778: LD_ADDR_VAR 0 8
30782: PUSH
30783: DOUBLE
30784: LD_INT 1
30786: DEC
30787: ST_TO_ADDR
30788: LD_INT 3
30790: PUSH
30791: FOR_TO
30792: IFFALSE 30821
// AddResourceType ( base , i , sources [ i ] ) ;
30794: LD_VAR 0 15
30798: PPUSH
30799: LD_VAR 0 8
30803: PPUSH
30804: LD_VAR 0 5
30808: PUSH
30809: LD_VAR 0 8
30813: ARRAY
30814: PPUSH
30815: CALL_OW 276
30819: GO 30791
30821: POP
30822: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30823: LD_ADDR_VAR 0 18
30827: PUSH
30828: LD_VAR 0 15
30832: PPUSH
30833: LD_VAR 0 2
30837: PPUSH
30838: LD_INT 1
30840: PPUSH
30841: CALL 30084 0 3
30845: ST_TO_ADDR
// InitHc ;
30846: CALL_OW 19
// InitUc ;
30850: CALL_OW 18
// uc_side := side ;
30854: LD_ADDR_OWVAR 20
30858: PUSH
30859: LD_VAR 0 16
30863: ST_TO_ADDR
// uc_nation := nation ;
30864: LD_ADDR_OWVAR 21
30868: PUSH
30869: LD_VAR 0 17
30873: ST_TO_ADDR
// if buildings then
30874: LD_VAR 0 18
30878: IFFALSE 32200
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30880: LD_ADDR_VAR 0 19
30884: PUSH
30885: LD_VAR 0 18
30889: PPUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 30
30895: PUSH
30896: LD_INT 29
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: PPUSH
30918: CALL_OW 72
30922: ST_TO_ADDR
// if tmp then
30923: LD_VAR 0 19
30927: IFFALSE 30975
// for i in tmp do
30929: LD_ADDR_VAR 0 8
30933: PUSH
30934: LD_VAR 0 19
30938: PUSH
30939: FOR_IN
30940: IFFALSE 30973
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30942: LD_VAR 0 8
30946: PPUSH
30947: CALL_OW 250
30951: PPUSH
30952: LD_VAR 0 8
30956: PPUSH
30957: CALL_OW 251
30961: PPUSH
30962: LD_VAR 0 16
30966: PPUSH
30967: CALL_OW 441
30971: GO 30939
30973: POP
30974: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30975: LD_VAR 0 18
30979: PPUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 30
30985: PUSH
30986: LD_INT 32
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 33
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: PPUSH
31008: CALL_OW 72
31012: IFFALSE 31100
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31014: LD_ADDR_VAR 0 8
31018: PUSH
31019: LD_VAR 0 18
31023: PPUSH
31024: LD_INT 2
31026: PUSH
31027: LD_INT 30
31029: PUSH
31030: LD_INT 32
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 30
31039: PUSH
31040: LD_INT 33
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: PPUSH
31052: CALL_OW 72
31056: PUSH
31057: FOR_IN
31058: IFFALSE 31098
// begin if not GetBWeapon ( i ) then
31060: LD_VAR 0 8
31064: PPUSH
31065: CALL_OW 269
31069: NOT
31070: IFFALSE 31096
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31072: LD_VAR 0 8
31076: PPUSH
31077: LD_VAR 0 8
31081: PPUSH
31082: LD_VAR 0 2
31086: PPUSH
31087: CALL 32346 0 2
31091: PPUSH
31092: CALL_OW 431
// end ;
31096: GO 31057
31098: POP
31099: POP
// end ; for i = 1 to personel do
31100: LD_ADDR_VAR 0 8
31104: PUSH
31105: DOUBLE
31106: LD_INT 1
31108: DEC
31109: ST_TO_ADDR
31110: LD_VAR 0 6
31114: PUSH
31115: FOR_TO
31116: IFFALSE 32180
// begin if i > 4 then
31118: LD_VAR 0 8
31122: PUSH
31123: LD_INT 4
31125: GREATER
31126: IFFALSE 31130
// break ;
31128: GO 32180
// case i of 1 :
31130: LD_VAR 0 8
31134: PUSH
31135: LD_INT 1
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31223
31143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31144: LD_ADDR_VAR 0 12
31148: PUSH
31149: LD_VAR 0 18
31153: PPUSH
31154: LD_INT 22
31156: PUSH
31157: LD_VAR 0 16
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 58
31168: PUSH
31169: EMPTY
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: LD_INT 32
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 30
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 30
31197: PUSH
31198: LD_INT 5
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: PPUSH
31216: CALL_OW 72
31220: ST_TO_ADDR
31221: GO 31445
31223: LD_INT 2
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31293
31231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31232: LD_ADDR_VAR 0 12
31236: PUSH
31237: LD_VAR 0 18
31241: PPUSH
31242: LD_INT 22
31244: PUSH
31245: LD_VAR 0 16
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 30
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 30
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PPUSH
31286: CALL_OW 72
31290: ST_TO_ADDR
31291: GO 31445
31293: LD_INT 3
31295: DOUBLE
31296: EQUAL
31297: IFTRUE 31301
31299: GO 31363
31301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31302: LD_ADDR_VAR 0 12
31306: PUSH
31307: LD_VAR 0 18
31311: PPUSH
31312: LD_INT 22
31314: PUSH
31315: LD_VAR 0 16
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: LD_INT 30
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 30
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PPUSH
31356: CALL_OW 72
31360: ST_TO_ADDR
31361: GO 31445
31363: LD_INT 4
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31371
31369: GO 31444
31371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31372: LD_ADDR_VAR 0 12
31376: PUSH
31377: LD_VAR 0 18
31381: PPUSH
31382: LD_INT 22
31384: PUSH
31385: LD_VAR 0 16
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 30
31399: PUSH
31400: LD_INT 6
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 30
31409: PUSH
31410: LD_INT 7
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 30
31419: PUSH
31420: LD_INT 8
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 72
31441: ST_TO_ADDR
31442: GO 31445
31444: POP
// if i = 1 then
31445: LD_VAR 0 8
31449: PUSH
31450: LD_INT 1
31452: EQUAL
31453: IFFALSE 31564
// begin tmp := [ ] ;
31455: LD_ADDR_VAR 0 19
31459: PUSH
31460: EMPTY
31461: ST_TO_ADDR
// for j in f do
31462: LD_ADDR_VAR 0 9
31466: PUSH
31467: LD_VAR 0 12
31471: PUSH
31472: FOR_IN
31473: IFFALSE 31546
// if GetBType ( j ) = b_bunker then
31475: LD_VAR 0 9
31479: PPUSH
31480: CALL_OW 266
31484: PUSH
31485: LD_INT 32
31487: EQUAL
31488: IFFALSE 31515
// tmp := Insert ( tmp , 1 , j ) else
31490: LD_ADDR_VAR 0 19
31494: PUSH
31495: LD_VAR 0 19
31499: PPUSH
31500: LD_INT 1
31502: PPUSH
31503: LD_VAR 0 9
31507: PPUSH
31508: CALL_OW 2
31512: ST_TO_ADDR
31513: GO 31544
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31515: LD_ADDR_VAR 0 19
31519: PUSH
31520: LD_VAR 0 19
31524: PPUSH
31525: LD_VAR 0 19
31529: PUSH
31530: LD_INT 1
31532: PLUS
31533: PPUSH
31534: LD_VAR 0 9
31538: PPUSH
31539: CALL_OW 2
31543: ST_TO_ADDR
31544: GO 31472
31546: POP
31547: POP
// if tmp then
31548: LD_VAR 0 19
31552: IFFALSE 31564
// f := tmp ;
31554: LD_ADDR_VAR 0 12
31558: PUSH
31559: LD_VAR 0 19
31563: ST_TO_ADDR
// end ; x := personel [ i ] ;
31564: LD_ADDR_VAR 0 13
31568: PUSH
31569: LD_VAR 0 6
31573: PUSH
31574: LD_VAR 0 8
31578: ARRAY
31579: ST_TO_ADDR
// if x = - 1 then
31580: LD_VAR 0 13
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: EQUAL
31589: IFFALSE 31798
// begin for j in f do
31591: LD_ADDR_VAR 0 9
31595: PUSH
31596: LD_VAR 0 12
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31794
// repeat InitHc ;
31604: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31608: LD_VAR 0 9
31612: PPUSH
31613: CALL_OW 266
31617: PUSH
31618: LD_INT 5
31620: EQUAL
31621: IFFALSE 31691
// begin if UnitsInside ( j ) < 3 then
31623: LD_VAR 0 9
31627: PPUSH
31628: CALL_OW 313
31632: PUSH
31633: LD_INT 3
31635: LESS
31636: IFFALSE 31672
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31638: LD_INT 0
31640: PPUSH
31641: LD_INT 5
31643: PUSH
31644: LD_INT 8
31646: PUSH
31647: LD_INT 9
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: PUSH
31655: LD_VAR 0 17
31659: ARRAY
31660: PPUSH
31661: LD_VAR 0 4
31665: PPUSH
31666: CALL_OW 380
31670: GO 31689
// PrepareHuman ( false , i , skill ) ;
31672: LD_INT 0
31674: PPUSH
31675: LD_VAR 0 8
31679: PPUSH
31680: LD_VAR 0 4
31684: PPUSH
31685: CALL_OW 380
// end else
31689: GO 31708
// PrepareHuman ( false , i , skill ) ;
31691: LD_INT 0
31693: PPUSH
31694: LD_VAR 0 8
31698: PPUSH
31699: LD_VAR 0 4
31703: PPUSH
31704: CALL_OW 380
// un := CreateHuman ;
31708: LD_ADDR_VAR 0 14
31712: PUSH
31713: CALL_OW 44
31717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31718: LD_ADDR_VAR 0 7
31722: PUSH
31723: LD_VAR 0 7
31727: PPUSH
31728: LD_INT 1
31730: PPUSH
31731: LD_VAR 0 14
31735: PPUSH
31736: CALL_OW 2
31740: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31741: LD_VAR 0 14
31745: PPUSH
31746: LD_VAR 0 9
31750: PPUSH
31751: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31755: LD_VAR 0 9
31759: PPUSH
31760: CALL_OW 313
31764: PUSH
31765: LD_INT 6
31767: EQUAL
31768: PUSH
31769: LD_VAR 0 9
31773: PPUSH
31774: CALL_OW 266
31778: PUSH
31779: LD_INT 32
31781: PUSH
31782: LD_INT 31
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: IN
31789: OR
31790: IFFALSE 31604
31792: GO 31601
31794: POP
31795: POP
// end else
31796: GO 32178
// for j = 1 to x do
31798: LD_ADDR_VAR 0 9
31802: PUSH
31803: DOUBLE
31804: LD_INT 1
31806: DEC
31807: ST_TO_ADDR
31808: LD_VAR 0 13
31812: PUSH
31813: FOR_TO
31814: IFFALSE 32176
// begin InitHc ;
31816: CALL_OW 19
// if not f then
31820: LD_VAR 0 12
31824: NOT
31825: IFFALSE 31914
// begin PrepareHuman ( false , i , skill ) ;
31827: LD_INT 0
31829: PPUSH
31830: LD_VAR 0 8
31834: PPUSH
31835: LD_VAR 0 4
31839: PPUSH
31840: CALL_OW 380
// un := CreateHuman ;
31844: LD_ADDR_VAR 0 14
31848: PUSH
31849: CALL_OW 44
31853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31854: LD_ADDR_VAR 0 7
31858: PUSH
31859: LD_VAR 0 7
31863: PPUSH
31864: LD_INT 1
31866: PPUSH
31867: LD_VAR 0 14
31871: PPUSH
31872: CALL_OW 2
31876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31877: LD_VAR 0 14
31881: PPUSH
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 250
31891: PPUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 251
31901: PPUSH
31902: LD_INT 10
31904: PPUSH
31905: LD_INT 0
31907: PPUSH
31908: CALL_OW 50
// continue ;
31912: GO 31813
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31914: LD_VAR 0 12
31918: PUSH
31919: LD_INT 1
31921: ARRAY
31922: PPUSH
31923: CALL_OW 313
31927: PUSH
31928: LD_VAR 0 12
31932: PUSH
31933: LD_INT 1
31935: ARRAY
31936: PPUSH
31937: CALL_OW 266
31941: PUSH
31942: LD_INT 32
31944: PUSH
31945: LD_INT 31
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: IN
31952: AND
31953: PUSH
31954: LD_VAR 0 12
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PPUSH
31963: CALL_OW 313
31967: PUSH
31968: LD_INT 6
31970: EQUAL
31971: OR
31972: IFFALSE 31992
// f := Delete ( f , 1 ) ;
31974: LD_ADDR_VAR 0 12
31978: PUSH
31979: LD_VAR 0 12
31983: PPUSH
31984: LD_INT 1
31986: PPUSH
31987: CALL_OW 3
31991: ST_TO_ADDR
// if not f then
31992: LD_VAR 0 12
31996: NOT
31997: IFFALSE 32015
// begin x := x + 2 ;
31999: LD_ADDR_VAR 0 13
32003: PUSH
32004: LD_VAR 0 13
32008: PUSH
32009: LD_INT 2
32011: PLUS
32012: ST_TO_ADDR
// continue ;
32013: GO 31813
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32015: LD_VAR 0 12
32019: PUSH
32020: LD_INT 1
32022: ARRAY
32023: PPUSH
32024: CALL_OW 266
32028: PUSH
32029: LD_INT 5
32031: EQUAL
32032: IFFALSE 32106
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32034: LD_VAR 0 12
32038: PUSH
32039: LD_INT 1
32041: ARRAY
32042: PPUSH
32043: CALL_OW 313
32047: PUSH
32048: LD_INT 3
32050: LESS
32051: IFFALSE 32087
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32053: LD_INT 0
32055: PPUSH
32056: LD_INT 5
32058: PUSH
32059: LD_INT 8
32061: PUSH
32062: LD_INT 9
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: PUSH
32070: LD_VAR 0 17
32074: ARRAY
32075: PPUSH
32076: LD_VAR 0 4
32080: PPUSH
32081: CALL_OW 380
32085: GO 32104
// PrepareHuman ( false , i , skill ) ;
32087: LD_INT 0
32089: PPUSH
32090: LD_VAR 0 8
32094: PPUSH
32095: LD_VAR 0 4
32099: PPUSH
32100: CALL_OW 380
// end else
32104: GO 32123
// PrepareHuman ( false , i , skill ) ;
32106: LD_INT 0
32108: PPUSH
32109: LD_VAR 0 8
32113: PPUSH
32114: LD_VAR 0 4
32118: PPUSH
32119: CALL_OW 380
// un := CreateHuman ;
32123: LD_ADDR_VAR 0 14
32127: PUSH
32128: CALL_OW 44
32132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32133: LD_ADDR_VAR 0 7
32137: PUSH
32138: LD_VAR 0 7
32142: PPUSH
32143: LD_INT 1
32145: PPUSH
32146: LD_VAR 0 14
32150: PPUSH
32151: CALL_OW 2
32155: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32156: LD_VAR 0 14
32160: PPUSH
32161: LD_VAR 0 12
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: CALL_OW 52
// end ;
32174: GO 31813
32176: POP
32177: POP
// end ;
32178: GO 31115
32180: POP
32181: POP
// result := result ^ buildings ;
32182: LD_ADDR_VAR 0 7
32186: PUSH
32187: LD_VAR 0 7
32191: PUSH
32192: LD_VAR 0 18
32196: ADD
32197: ST_TO_ADDR
// end else
32198: GO 32341
// begin for i = 1 to personel do
32200: LD_ADDR_VAR 0 8
32204: PUSH
32205: DOUBLE
32206: LD_INT 1
32208: DEC
32209: ST_TO_ADDR
32210: LD_VAR 0 6
32214: PUSH
32215: FOR_TO
32216: IFFALSE 32339
// begin if i > 4 then
32218: LD_VAR 0 8
32222: PUSH
32223: LD_INT 4
32225: GREATER
32226: IFFALSE 32230
// break ;
32228: GO 32339
// x := personel [ i ] ;
32230: LD_ADDR_VAR 0 13
32234: PUSH
32235: LD_VAR 0 6
32239: PUSH
32240: LD_VAR 0 8
32244: ARRAY
32245: ST_TO_ADDR
// if x = - 1 then
32246: LD_VAR 0 13
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: EQUAL
32255: IFFALSE 32259
// continue ;
32257: GO 32215
// PrepareHuman ( false , i , skill ) ;
32259: LD_INT 0
32261: PPUSH
32262: LD_VAR 0 8
32266: PPUSH
32267: LD_VAR 0 4
32271: PPUSH
32272: CALL_OW 380
// un := CreateHuman ;
32276: LD_ADDR_VAR 0 14
32280: PUSH
32281: CALL_OW 44
32285: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32286: LD_VAR 0 14
32290: PPUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: CALL_OW 250
32300: PPUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 251
32310: PPUSH
32311: LD_INT 10
32313: PPUSH
32314: LD_INT 0
32316: PPUSH
32317: CALL_OW 50
// result := result ^ un ;
32321: LD_ADDR_VAR 0 7
32325: PUSH
32326: LD_VAR 0 7
32330: PUSH
32331: LD_VAR 0 14
32335: ADD
32336: ST_TO_ADDR
// end ;
32337: GO 32215
32339: POP
32340: POP
// end ; end ;
32341: LD_VAR 0 7
32345: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32346: LD_INT 0
32348: PPUSH
32349: PPUSH
32350: PPUSH
32351: PPUSH
32352: PPUSH
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
// result := false ;
32364: LD_ADDR_VAR 0 3
32368: PUSH
32369: LD_INT 0
32371: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32372: LD_VAR 0 1
32376: NOT
32377: PUSH
32378: LD_VAR 0 1
32382: PPUSH
32383: CALL_OW 266
32387: PUSH
32388: LD_INT 32
32390: PUSH
32391: LD_INT 33
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: IN
32398: NOT
32399: OR
32400: IFFALSE 32404
// exit ;
32402: GO 33513
// nat := GetNation ( tower ) ;
32404: LD_ADDR_VAR 0 12
32408: PUSH
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 248
32418: ST_TO_ADDR
// side := GetSide ( tower ) ;
32419: LD_ADDR_VAR 0 16
32423: PUSH
32424: LD_VAR 0 1
32428: PPUSH
32429: CALL_OW 255
32433: ST_TO_ADDR
// x := GetX ( tower ) ;
32434: LD_ADDR_VAR 0 10
32438: PUSH
32439: LD_VAR 0 1
32443: PPUSH
32444: CALL_OW 250
32448: ST_TO_ADDR
// y := GetY ( tower ) ;
32449: LD_ADDR_VAR 0 11
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 251
32463: ST_TO_ADDR
// if not x or not y then
32464: LD_VAR 0 10
32468: NOT
32469: PUSH
32470: LD_VAR 0 11
32474: NOT
32475: OR
32476: IFFALSE 32480
// exit ;
32478: GO 33513
// weapon := 0 ;
32480: LD_ADDR_VAR 0 18
32484: PUSH
32485: LD_INT 0
32487: ST_TO_ADDR
// fac_list := [ ] ;
32488: LD_ADDR_VAR 0 17
32492: PUSH
32493: EMPTY
32494: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32495: LD_ADDR_VAR 0 6
32499: PUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: CALL_OW 274
32509: PPUSH
32510: LD_VAR 0 2
32514: PPUSH
32515: LD_INT 0
32517: PPUSH
32518: CALL 30084 0 3
32522: PPUSH
32523: LD_INT 30
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PPUSH
32533: CALL_OW 72
32537: ST_TO_ADDR
// if not factories then
32538: LD_VAR 0 6
32542: NOT
32543: IFFALSE 32547
// exit ;
32545: GO 33513
// for i in factories do
32547: LD_ADDR_VAR 0 8
32551: PUSH
32552: LD_VAR 0 6
32556: PUSH
32557: FOR_IN
32558: IFFALSE 32583
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32560: LD_ADDR_VAR 0 17
32564: PUSH
32565: LD_VAR 0 17
32569: PUSH
32570: LD_VAR 0 8
32574: PPUSH
32575: CALL_OW 478
32579: UNION
32580: ST_TO_ADDR
32581: GO 32557
32583: POP
32584: POP
// if not fac_list then
32585: LD_VAR 0 17
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 33513
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32594: LD_ADDR_VAR 0 5
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: LD_INT 5
32604: PUSH
32605: LD_INT 9
32607: PUSH
32608: LD_INT 10
32610: PUSH
32611: LD_INT 6
32613: PUSH
32614: LD_INT 7
32616: PUSH
32617: LD_INT 11
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 27
32631: PUSH
32632: LD_INT 28
32634: PUSH
32635: LD_INT 26
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 43
32649: PUSH
32650: LD_INT 44
32652: PUSH
32653: LD_INT 46
32655: PUSH
32656: LD_INT 45
32658: PUSH
32659: LD_INT 47
32661: PUSH
32662: LD_INT 49
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: PUSH
32678: LD_VAR 0 12
32682: ARRAY
32683: ST_TO_ADDR
// list := list isect fac_list ;
32684: LD_ADDR_VAR 0 5
32688: PUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_VAR 0 17
32698: ISECT
32699: ST_TO_ADDR
// if not list then
32700: LD_VAR 0 5
32704: NOT
32705: IFFALSE 32709
// exit ;
32707: GO 33513
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32709: LD_VAR 0 12
32713: PUSH
32714: LD_INT 3
32716: EQUAL
32717: PUSH
32718: LD_INT 49
32720: PUSH
32721: LD_VAR 0 5
32725: IN
32726: AND
32727: PUSH
32728: LD_INT 31
32730: PPUSH
32731: LD_VAR 0 16
32735: PPUSH
32736: CALL_OW 321
32740: PUSH
32741: LD_INT 2
32743: EQUAL
32744: AND
32745: IFFALSE 32805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32747: LD_INT 22
32749: PUSH
32750: LD_VAR 0 16
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 35
32761: PUSH
32762: LD_INT 49
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 91
32771: PUSH
32772: LD_VAR 0 1
32776: PUSH
32777: LD_INT 10
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: LIST
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: PPUSH
32790: CALL_OW 69
32794: NOT
32795: IFFALSE 32805
// weapon := ru_time_lapser ;
32797: LD_ADDR_VAR 0 18
32801: PUSH
32802: LD_INT 49
32804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32805: LD_VAR 0 12
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: IN
32820: PUSH
32821: LD_INT 11
32823: PUSH
32824: LD_VAR 0 5
32828: IN
32829: PUSH
32830: LD_INT 30
32832: PUSH
32833: LD_VAR 0 5
32837: IN
32838: OR
32839: AND
32840: PUSH
32841: LD_INT 6
32843: PPUSH
32844: LD_VAR 0 16
32848: PPUSH
32849: CALL_OW 321
32853: PUSH
32854: LD_INT 2
32856: EQUAL
32857: AND
32858: IFFALSE 33023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32860: LD_INT 22
32862: PUSH
32863: LD_VAR 0 16
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 35
32877: PUSH
32878: LD_INT 11
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 35
32887: PUSH
32888: LD_INT 30
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 91
32902: PUSH
32903: LD_VAR 0 1
32907: PUSH
32908: LD_INT 18
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 69
32925: NOT
32926: PUSH
32927: LD_INT 22
32929: PUSH
32930: LD_VAR 0 16
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 30
32944: PUSH
32945: LD_INT 32
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: LD_INT 33
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 91
32969: PUSH
32970: LD_VAR 0 1
32974: PUSH
32975: LD_INT 12
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: PPUSH
32991: CALL_OW 69
32995: PUSH
32996: LD_INT 2
32998: GREATER
32999: AND
33000: IFFALSE 33023
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33002: LD_ADDR_VAR 0 18
33006: PUSH
33007: LD_INT 11
33009: PUSH
33010: LD_INT 30
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_VAR 0 12
33021: ARRAY
33022: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33023: LD_VAR 0 18
33027: NOT
33028: PUSH
33029: LD_INT 40
33031: PPUSH
33032: LD_VAR 0 16
33036: PPUSH
33037: CALL_OW 321
33041: PUSH
33042: LD_INT 2
33044: EQUAL
33045: AND
33046: PUSH
33047: LD_INT 7
33049: PUSH
33050: LD_VAR 0 5
33054: IN
33055: PUSH
33056: LD_INT 28
33058: PUSH
33059: LD_VAR 0 5
33063: IN
33064: OR
33065: PUSH
33066: LD_INT 45
33068: PUSH
33069: LD_VAR 0 5
33073: IN
33074: OR
33075: AND
33076: IFFALSE 33330
// begin hex := GetHexInfo ( x , y ) ;
33078: LD_ADDR_VAR 0 4
33082: PUSH
33083: LD_VAR 0 10
33087: PPUSH
33088: LD_VAR 0 11
33092: PPUSH
33093: CALL_OW 546
33097: ST_TO_ADDR
// if hex [ 1 ] then
33098: LD_VAR 0 4
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: IFFALSE 33110
// exit ;
33108: GO 33513
// height := hex [ 2 ] ;
33110: LD_ADDR_VAR 0 15
33114: PUSH
33115: LD_VAR 0 4
33119: PUSH
33120: LD_INT 2
33122: ARRAY
33123: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33124: LD_ADDR_VAR 0 14
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 5
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: ST_TO_ADDR
// for i in tmp do
33147: LD_ADDR_VAR 0 8
33151: PUSH
33152: LD_VAR 0 14
33156: PUSH
33157: FOR_IN
33158: IFFALSE 33328
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33160: LD_ADDR_VAR 0 9
33164: PUSH
33165: LD_VAR 0 10
33169: PPUSH
33170: LD_VAR 0 8
33174: PPUSH
33175: LD_INT 5
33177: PPUSH
33178: CALL_OW 272
33182: PUSH
33183: LD_VAR 0 11
33187: PPUSH
33188: LD_VAR 0 8
33192: PPUSH
33193: LD_INT 5
33195: PPUSH
33196: CALL_OW 273
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33205: LD_VAR 0 9
33209: PUSH
33210: LD_INT 1
33212: ARRAY
33213: PPUSH
33214: LD_VAR 0 9
33218: PUSH
33219: LD_INT 2
33221: ARRAY
33222: PPUSH
33223: CALL_OW 488
33227: IFFALSE 33326
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33229: LD_ADDR_VAR 0 4
33233: PUSH
33234: LD_VAR 0 9
33238: PUSH
33239: LD_INT 1
33241: ARRAY
33242: PPUSH
33243: LD_VAR 0 9
33247: PUSH
33248: LD_INT 2
33250: ARRAY
33251: PPUSH
33252: CALL_OW 546
33256: ST_TO_ADDR
// if hex [ 1 ] then
33257: LD_VAR 0 4
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: IFFALSE 33269
// continue ;
33267: GO 33157
// h := hex [ 2 ] ;
33269: LD_ADDR_VAR 0 13
33273: PUSH
33274: LD_VAR 0 4
33278: PUSH
33279: LD_INT 2
33281: ARRAY
33282: ST_TO_ADDR
// if h + 7 < height then
33283: LD_VAR 0 13
33287: PUSH
33288: LD_INT 7
33290: PLUS
33291: PUSH
33292: LD_VAR 0 15
33296: LESS
33297: IFFALSE 33326
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33299: LD_ADDR_VAR 0 18
33303: PUSH
33304: LD_INT 7
33306: PUSH
33307: LD_INT 28
33309: PUSH
33310: LD_INT 45
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: PUSH
33318: LD_VAR 0 12
33322: ARRAY
33323: ST_TO_ADDR
// break ;
33324: GO 33328
// end ; end ; end ;
33326: GO 33157
33328: POP
33329: POP
// end ; if not weapon then
33330: LD_VAR 0 18
33334: NOT
33335: IFFALSE 33395
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33337: LD_ADDR_VAR 0 5
33341: PUSH
33342: LD_VAR 0 5
33346: PUSH
33347: LD_INT 11
33349: PUSH
33350: LD_INT 30
33352: PUSH
33353: LD_INT 49
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: LIST
33360: DIFF
33361: ST_TO_ADDR
// if not list then
33362: LD_VAR 0 5
33366: NOT
33367: IFFALSE 33371
// exit ;
33369: GO 33513
// weapon := list [ rand ( 1 , list ) ] ;
33371: LD_ADDR_VAR 0 18
33375: PUSH
33376: LD_VAR 0 5
33380: PUSH
33381: LD_INT 1
33383: PPUSH
33384: LD_VAR 0 5
33388: PPUSH
33389: CALL_OW 12
33393: ARRAY
33394: ST_TO_ADDR
// end ; if weapon then
33395: LD_VAR 0 18
33399: IFFALSE 33513
// begin tmp := CostOfWeapon ( weapon ) ;
33401: LD_ADDR_VAR 0 14
33405: PUSH
33406: LD_VAR 0 18
33410: PPUSH
33411: CALL_OW 451
33415: ST_TO_ADDR
// j := GetBase ( tower ) ;
33416: LD_ADDR_VAR 0 9
33420: PUSH
33421: LD_VAR 0 1
33425: PPUSH
33426: CALL_OW 274
33430: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33431: LD_VAR 0 9
33435: PPUSH
33436: LD_INT 1
33438: PPUSH
33439: CALL_OW 275
33443: PUSH
33444: LD_VAR 0 14
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: GREATEREQUAL
33453: PUSH
33454: LD_VAR 0 9
33458: PPUSH
33459: LD_INT 2
33461: PPUSH
33462: CALL_OW 275
33466: PUSH
33467: LD_VAR 0 14
33471: PUSH
33472: LD_INT 2
33474: ARRAY
33475: GREATEREQUAL
33476: AND
33477: PUSH
33478: LD_VAR 0 9
33482: PPUSH
33483: LD_INT 3
33485: PPUSH
33486: CALL_OW 275
33490: PUSH
33491: LD_VAR 0 14
33495: PUSH
33496: LD_INT 3
33498: ARRAY
33499: GREATEREQUAL
33500: AND
33501: IFFALSE 33513
// result := weapon ;
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_VAR 0 18
33512: ST_TO_ADDR
// end ; end ;
33513: LD_VAR 0 3
33517: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33518: LD_INT 0
33520: PPUSH
33521: PPUSH
// result := true ;
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 1
33529: ST_TO_ADDR
// if array1 = array2 then
33530: LD_VAR 0 1
33534: PUSH
33535: LD_VAR 0 2
33539: EQUAL
33540: IFFALSE 33600
// begin for i = 1 to array1 do
33542: LD_ADDR_VAR 0 4
33546: PUSH
33547: DOUBLE
33548: LD_INT 1
33550: DEC
33551: ST_TO_ADDR
33552: LD_VAR 0 1
33556: PUSH
33557: FOR_TO
33558: IFFALSE 33596
// if array1 [ i ] <> array2 [ i ] then
33560: LD_VAR 0 1
33564: PUSH
33565: LD_VAR 0 4
33569: ARRAY
33570: PUSH
33571: LD_VAR 0 2
33575: PUSH
33576: LD_VAR 0 4
33580: ARRAY
33581: NONEQUAL
33582: IFFALSE 33594
// begin result := false ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_INT 0
33591: ST_TO_ADDR
// break ;
33592: GO 33596
// end ;
33594: GO 33557
33596: POP
33597: POP
// end else
33598: GO 33608
// result := false ;
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: LD_INT 0
33607: ST_TO_ADDR
// end ;
33608: LD_VAR 0 3
33612: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33613: LD_INT 0
33615: PPUSH
33616: PPUSH
// if not array1 or not array2 then
33617: LD_VAR 0 1
33621: NOT
33622: PUSH
33623: LD_VAR 0 2
33627: NOT
33628: OR
33629: IFFALSE 33633
// exit ;
33631: GO 33697
// result := true ;
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_INT 1
33640: ST_TO_ADDR
// for i = 1 to array1 do
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: DOUBLE
33647: LD_INT 1
33649: DEC
33650: ST_TO_ADDR
33651: LD_VAR 0 1
33655: PUSH
33656: FOR_TO
33657: IFFALSE 33695
// if array1 [ i ] <> array2 [ i ] then
33659: LD_VAR 0 1
33663: PUSH
33664: LD_VAR 0 4
33668: ARRAY
33669: PUSH
33670: LD_VAR 0 2
33674: PUSH
33675: LD_VAR 0 4
33679: ARRAY
33680: NONEQUAL
33681: IFFALSE 33693
// begin result := false ;
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 0
33690: ST_TO_ADDR
// break ;
33691: GO 33695
// end ;
33693: GO 33656
33695: POP
33696: POP
// end ;
33697: LD_VAR 0 3
33701: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33702: LD_INT 0
33704: PPUSH
33705: PPUSH
33706: PPUSH
// pom := GetBase ( fac ) ;
33707: LD_ADDR_VAR 0 5
33711: PUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 274
33721: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33722: LD_ADDR_VAR 0 4
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_INT 1
33734: ARRAY
33735: PPUSH
33736: LD_VAR 0 2
33740: PUSH
33741: LD_INT 2
33743: ARRAY
33744: PPUSH
33745: LD_VAR 0 2
33749: PUSH
33750: LD_INT 3
33752: ARRAY
33753: PPUSH
33754: LD_VAR 0 2
33758: PUSH
33759: LD_INT 4
33761: ARRAY
33762: PPUSH
33763: CALL_OW 449
33767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 5
33777: PPUSH
33778: LD_INT 1
33780: PPUSH
33781: CALL_OW 275
33785: PUSH
33786: LD_VAR 0 4
33790: PUSH
33791: LD_INT 1
33793: ARRAY
33794: GREATEREQUAL
33795: PUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: LD_INT 2
33803: PPUSH
33804: CALL_OW 275
33808: PUSH
33809: LD_VAR 0 4
33813: PUSH
33814: LD_INT 2
33816: ARRAY
33817: GREATEREQUAL
33818: AND
33819: PUSH
33820: LD_VAR 0 5
33824: PPUSH
33825: LD_INT 3
33827: PPUSH
33828: CALL_OW 275
33832: PUSH
33833: LD_VAR 0 4
33837: PUSH
33838: LD_INT 3
33840: ARRAY
33841: GREATEREQUAL
33842: AND
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 3
33848: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
// pom := GetBase ( building ) ;
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 274
33869: ST_TO_ADDR
// if not pom then
33870: LD_VAR 0 3
33874: NOT
33875: IFFALSE 33879
// exit ;
33877: GO 34049
// btype := GetBType ( building ) ;
33879: LD_ADDR_VAR 0 5
33883: PUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL_OW 266
33893: ST_TO_ADDR
// if btype = b_armoury then
33894: LD_VAR 0 5
33898: PUSH
33899: LD_INT 4
33901: EQUAL
33902: IFFALSE 33912
// btype := b_barracks ;
33904: LD_ADDR_VAR 0 5
33908: PUSH
33909: LD_INT 5
33911: ST_TO_ADDR
// if btype = b_depot then
33912: LD_VAR 0 5
33916: PUSH
33917: LD_INT 0
33919: EQUAL
33920: IFFALSE 33930
// btype := b_warehouse ;
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: LD_INT 1
33929: ST_TO_ADDR
// if btype = b_workshop then
33930: LD_VAR 0 5
33934: PUSH
33935: LD_INT 2
33937: EQUAL
33938: IFFALSE 33948
// btype := b_factory ;
33940: LD_ADDR_VAR 0 5
33944: PUSH
33945: LD_INT 3
33947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33948: LD_ADDR_VAR 0 4
33952: PUSH
33953: LD_VAR 0 5
33957: PPUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 248
33967: PPUSH
33968: CALL_OW 450
33972: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33973: LD_ADDR_VAR 0 2
33977: PUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: LD_INT 1
33985: PPUSH
33986: CALL_OW 275
33990: PUSH
33991: LD_VAR 0 4
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: GREATEREQUAL
34000: PUSH
34001: LD_VAR 0 3
34005: PPUSH
34006: LD_INT 2
34008: PPUSH
34009: CALL_OW 275
34013: PUSH
34014: LD_VAR 0 4
34018: PUSH
34019: LD_INT 2
34021: ARRAY
34022: GREATEREQUAL
34023: AND
34024: PUSH
34025: LD_VAR 0 3
34029: PPUSH
34030: LD_INT 3
34032: PPUSH
34033: CALL_OW 275
34037: PUSH
34038: LD_VAR 0 4
34042: PUSH
34043: LD_INT 3
34045: ARRAY
34046: GREATEREQUAL
34047: AND
34048: ST_TO_ADDR
// end ;
34049: LD_VAR 0 2
34053: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34054: LD_INT 0
34056: PPUSH
34057: PPUSH
34058: PPUSH
// pom := GetBase ( building ) ;
34059: LD_ADDR_VAR 0 4
34063: PUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 274
34073: ST_TO_ADDR
// if not pom then
34074: LD_VAR 0 4
34078: NOT
34079: IFFALSE 34083
// exit ;
34081: GO 34184
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34083: LD_ADDR_VAR 0 5
34087: PUSH
34088: LD_VAR 0 2
34092: PPUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 248
34102: PPUSH
34103: CALL_OW 450
34107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34108: LD_ADDR_VAR 0 3
34112: PUSH
34113: LD_VAR 0 4
34117: PPUSH
34118: LD_INT 1
34120: PPUSH
34121: CALL_OW 275
34125: PUSH
34126: LD_VAR 0 5
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: GREATEREQUAL
34135: PUSH
34136: LD_VAR 0 4
34140: PPUSH
34141: LD_INT 2
34143: PPUSH
34144: CALL_OW 275
34148: PUSH
34149: LD_VAR 0 5
34153: PUSH
34154: LD_INT 2
34156: ARRAY
34157: GREATEREQUAL
34158: AND
34159: PUSH
34160: LD_VAR 0 4
34164: PPUSH
34165: LD_INT 3
34167: PPUSH
34168: CALL_OW 275
34172: PUSH
34173: LD_VAR 0 5
34177: PUSH
34178: LD_INT 3
34180: ARRAY
34181: GREATEREQUAL
34182: AND
34183: ST_TO_ADDR
// end ;
34184: LD_VAR 0 3
34188: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34189: LD_INT 0
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
// result := false ;
34202: LD_ADDR_VAR 0 8
34206: PUSH
34207: LD_INT 0
34209: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34210: LD_VAR 0 5
34214: NOT
34215: PUSH
34216: LD_VAR 0 1
34220: NOT
34221: OR
34222: PUSH
34223: LD_VAR 0 2
34227: NOT
34228: OR
34229: PUSH
34230: LD_VAR 0 3
34234: NOT
34235: OR
34236: IFFALSE 34240
// exit ;
34238: GO 35054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34240: LD_ADDR_VAR 0 14
34244: PUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_VAR 0 2
34254: PPUSH
34255: LD_VAR 0 3
34259: PPUSH
34260: LD_VAR 0 4
34264: PPUSH
34265: LD_VAR 0 5
34269: PUSH
34270: LD_INT 1
34272: ARRAY
34273: PPUSH
34274: CALL_OW 248
34278: PPUSH
34279: LD_INT 0
34281: PPUSH
34282: CALL 36287 0 6
34286: ST_TO_ADDR
// if not hexes then
34287: LD_VAR 0 14
34291: NOT
34292: IFFALSE 34296
// exit ;
34294: GO 35054
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34296: LD_ADDR_VAR 0 17
34300: PUSH
34301: LD_VAR 0 5
34305: PPUSH
34306: LD_INT 22
34308: PUSH
34309: LD_VAR 0 13
34313: PPUSH
34314: CALL_OW 255
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: LD_INT 30
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 30
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PPUSH
34355: CALL_OW 72
34359: ST_TO_ADDR
// for i = 1 to hexes do
34360: LD_ADDR_VAR 0 9
34364: PUSH
34365: DOUBLE
34366: LD_INT 1
34368: DEC
34369: ST_TO_ADDR
34370: LD_VAR 0 14
34374: PUSH
34375: FOR_TO
34376: IFFALSE 35052
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34378: LD_ADDR_VAR 0 13
34382: PUSH
34383: LD_VAR 0 14
34387: PUSH
34388: LD_VAR 0 9
34392: ARRAY
34393: PUSH
34394: LD_INT 1
34396: ARRAY
34397: PPUSH
34398: LD_VAR 0 14
34402: PUSH
34403: LD_VAR 0 9
34407: ARRAY
34408: PUSH
34409: LD_INT 2
34411: ARRAY
34412: PPUSH
34413: CALL_OW 428
34417: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34418: LD_VAR 0 14
34422: PUSH
34423: LD_VAR 0 9
34427: ARRAY
34428: PUSH
34429: LD_INT 1
34431: ARRAY
34432: PPUSH
34433: LD_VAR 0 14
34437: PUSH
34438: LD_VAR 0 9
34442: ARRAY
34443: PUSH
34444: LD_INT 2
34446: ARRAY
34447: PPUSH
34448: CALL_OW 351
34452: PUSH
34453: LD_VAR 0 14
34457: PUSH
34458: LD_VAR 0 9
34462: ARRAY
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 14
34472: PUSH
34473: LD_VAR 0 9
34477: ARRAY
34478: PUSH
34479: LD_INT 2
34481: ARRAY
34482: PPUSH
34483: CALL_OW 488
34487: NOT
34488: OR
34489: PUSH
34490: LD_VAR 0 13
34494: PPUSH
34495: CALL_OW 247
34499: PUSH
34500: LD_INT 3
34502: EQUAL
34503: OR
34504: IFFALSE 34510
// exit ;
34506: POP
34507: POP
34508: GO 35054
// if not tmp then
34510: LD_VAR 0 13
34514: NOT
34515: IFFALSE 34519
// continue ;
34517: GO 34375
// result := true ;
34519: LD_ADDR_VAR 0 8
34523: PUSH
34524: LD_INT 1
34526: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34527: LD_VAR 0 6
34531: PUSH
34532: LD_VAR 0 13
34536: PPUSH
34537: CALL_OW 247
34541: PUSH
34542: LD_INT 2
34544: EQUAL
34545: AND
34546: PUSH
34547: LD_VAR 0 13
34551: PPUSH
34552: CALL_OW 263
34556: PUSH
34557: LD_INT 1
34559: EQUAL
34560: AND
34561: IFFALSE 34725
// begin if IsDrivenBy ( tmp ) then
34563: LD_VAR 0 13
34567: PPUSH
34568: CALL_OW 311
34572: IFFALSE 34576
// continue ;
34574: GO 34375
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34576: LD_VAR 0 6
34580: PPUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 60
34586: PUSH
34587: EMPTY
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 55
34599: PUSH
34600: EMPTY
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PPUSH
34611: CALL_OW 72
34615: IFFALSE 34723
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34617: LD_ADDR_VAR 0 18
34621: PUSH
34622: LD_VAR 0 6
34626: PPUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 60
34632: PUSH
34633: EMPTY
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: LD_INT 55
34645: PUSH
34646: EMPTY
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PPUSH
34657: CALL_OW 72
34661: PUSH
34662: LD_INT 1
34664: ARRAY
34665: ST_TO_ADDR
// if IsInUnit ( driver ) then
34666: LD_VAR 0 18
34670: PPUSH
34671: CALL_OW 310
34675: IFFALSE 34686
// ComExit ( driver ) ;
34677: LD_VAR 0 18
34681: PPUSH
34682: CALL 60067 0 1
// AddComEnterUnit ( driver , tmp ) ;
34686: LD_VAR 0 18
34690: PPUSH
34691: LD_VAR 0 13
34695: PPUSH
34696: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34700: LD_VAR 0 18
34704: PPUSH
34705: LD_VAR 0 7
34709: PPUSH
34710: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34714: LD_VAR 0 18
34718: PPUSH
34719: CALL_OW 181
// end ; continue ;
34723: GO 34375
// end ; if not cleaners or not tmp in cleaners then
34725: LD_VAR 0 6
34729: NOT
34730: PUSH
34731: LD_VAR 0 13
34735: PUSH
34736: LD_VAR 0 6
34740: IN
34741: NOT
34742: OR
34743: IFFALSE 35050
// begin if dep then
34745: LD_VAR 0 17
34749: IFFALSE 34885
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34751: LD_ADDR_VAR 0 16
34755: PUSH
34756: LD_VAR 0 17
34760: PUSH
34761: LD_INT 1
34763: ARRAY
34764: PPUSH
34765: CALL_OW 250
34769: PPUSH
34770: LD_VAR 0 17
34774: PUSH
34775: LD_INT 1
34777: ARRAY
34778: PPUSH
34779: CALL_OW 254
34783: PPUSH
34784: LD_INT 5
34786: PPUSH
34787: CALL_OW 272
34791: PUSH
34792: LD_VAR 0 17
34796: PUSH
34797: LD_INT 1
34799: ARRAY
34800: PPUSH
34801: CALL_OW 251
34805: PPUSH
34806: LD_VAR 0 17
34810: PUSH
34811: LD_INT 1
34813: ARRAY
34814: PPUSH
34815: CALL_OW 254
34819: PPUSH
34820: LD_INT 5
34822: PPUSH
34823: CALL_OW 273
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34832: LD_VAR 0 16
34836: PUSH
34837: LD_INT 1
34839: ARRAY
34840: PPUSH
34841: LD_VAR 0 16
34845: PUSH
34846: LD_INT 2
34848: ARRAY
34849: PPUSH
34850: CALL_OW 488
34854: IFFALSE 34885
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34856: LD_VAR 0 13
34860: PPUSH
34861: LD_VAR 0 16
34865: PUSH
34866: LD_INT 1
34868: ARRAY
34869: PPUSH
34870: LD_VAR 0 16
34874: PUSH
34875: LD_INT 2
34877: ARRAY
34878: PPUSH
34879: CALL_OW 111
// continue ;
34883: GO 34375
// end ; end ; r := GetDir ( tmp ) ;
34885: LD_ADDR_VAR 0 15
34889: PUSH
34890: LD_VAR 0 13
34894: PPUSH
34895: CALL_OW 254
34899: ST_TO_ADDR
// if r = 5 then
34900: LD_VAR 0 15
34904: PUSH
34905: LD_INT 5
34907: EQUAL
34908: IFFALSE 34918
// r := 0 ;
34910: LD_ADDR_VAR 0 15
34914: PUSH
34915: LD_INT 0
34917: ST_TO_ADDR
// for j = r to 5 do
34918: LD_ADDR_VAR 0 10
34922: PUSH
34923: DOUBLE
34924: LD_VAR 0 15
34928: DEC
34929: ST_TO_ADDR
34930: LD_INT 5
34932: PUSH
34933: FOR_TO
34934: IFFALSE 35048
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34936: LD_ADDR_VAR 0 11
34940: PUSH
34941: LD_VAR 0 13
34945: PPUSH
34946: CALL_OW 250
34950: PPUSH
34951: LD_VAR 0 10
34955: PPUSH
34956: LD_INT 2
34958: PPUSH
34959: CALL_OW 272
34963: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34964: LD_ADDR_VAR 0 12
34968: PUSH
34969: LD_VAR 0 13
34973: PPUSH
34974: CALL_OW 251
34978: PPUSH
34979: LD_VAR 0 10
34983: PPUSH
34984: LD_INT 2
34986: PPUSH
34987: CALL_OW 273
34991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34992: LD_VAR 0 11
34996: PPUSH
34997: LD_VAR 0 12
35001: PPUSH
35002: CALL_OW 488
35006: PUSH
35007: LD_VAR 0 11
35011: PPUSH
35012: LD_VAR 0 12
35016: PPUSH
35017: CALL_OW 428
35021: NOT
35022: AND
35023: IFFALSE 35046
// begin ComMoveXY ( tmp , _x , _y ) ;
35025: LD_VAR 0 13
35029: PPUSH
35030: LD_VAR 0 11
35034: PPUSH
35035: LD_VAR 0 12
35039: PPUSH
35040: CALL_OW 111
// break ;
35044: GO 35048
// end ; end ;
35046: GO 34933
35048: POP
35049: POP
// end ; end ;
35050: GO 34375
35052: POP
35053: POP
// end ;
35054: LD_VAR 0 8
35058: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35059: LD_INT 0
35061: PPUSH
// result := true ;
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35070: LD_VAR 0 2
35074: PUSH
35075: LD_INT 24
35077: DOUBLE
35078: EQUAL
35079: IFTRUE 35089
35081: LD_INT 33
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35114
35089: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_INT 32
35097: PPUSH
35098: LD_VAR 0 1
35102: PPUSH
35103: CALL_OW 321
35107: PUSH
35108: LD_INT 2
35110: EQUAL
35111: ST_TO_ADDR
35112: GO 35430
35114: LD_INT 20
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35147
35122: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_INT 6
35130: PPUSH
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 321
35140: PUSH
35141: LD_INT 2
35143: EQUAL
35144: ST_TO_ADDR
35145: GO 35430
35147: LD_INT 22
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35161
35153: LD_INT 36
35155: DOUBLE
35156: EQUAL
35157: IFTRUE 35161
35159: GO 35186
35161: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: LD_INT 15
35169: PPUSH
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 321
35179: PUSH
35180: LD_INT 2
35182: EQUAL
35183: ST_TO_ADDR
35184: GO 35430
35186: LD_INT 30
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35219
35194: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35195: LD_ADDR_VAR 0 3
35199: PUSH
35200: LD_INT 20
35202: PPUSH
35203: LD_VAR 0 1
35207: PPUSH
35208: CALL_OW 321
35212: PUSH
35213: LD_INT 2
35215: EQUAL
35216: ST_TO_ADDR
35217: GO 35430
35219: LD_INT 28
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35233
35225: LD_INT 21
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35258
35233: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 21
35241: PPUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 321
35251: PUSH
35252: LD_INT 2
35254: EQUAL
35255: ST_TO_ADDR
35256: GO 35430
35258: LD_INT 16
35260: DOUBLE
35261: EQUAL
35262: IFTRUE 35266
35264: GO 35291
35266: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35267: LD_ADDR_VAR 0 3
35271: PUSH
35272: LD_INT 84
35274: PPUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 321
35284: PUSH
35285: LD_INT 2
35287: EQUAL
35288: ST_TO_ADDR
35289: GO 35430
35291: LD_INT 19
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35305
35297: LD_INT 23
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35305
35303: GO 35330
35305: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: LD_INT 83
35313: PPUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 321
35323: PUSH
35324: LD_INT 2
35326: EQUAL
35327: ST_TO_ADDR
35328: GO 35430
35330: LD_INT 17
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35338
35336: GO 35363
35338: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 39
35346: PPUSH
35347: LD_VAR 0 1
35351: PPUSH
35352: CALL_OW 321
35356: PUSH
35357: LD_INT 2
35359: EQUAL
35360: ST_TO_ADDR
35361: GO 35430
35363: LD_INT 18
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35396
35371: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_INT 40
35379: PPUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 321
35389: PUSH
35390: LD_INT 2
35392: EQUAL
35393: ST_TO_ADDR
35394: GO 35430
35396: LD_INT 27
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35429
35404: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35405: LD_ADDR_VAR 0 3
35409: PUSH
35410: LD_INT 35
35412: PPUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 321
35422: PUSH
35423: LD_INT 2
35425: EQUAL
35426: ST_TO_ADDR
35427: GO 35430
35429: POP
// end ;
35430: LD_VAR 0 3
35434: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35435: LD_INT 0
35437: PPUSH
35438: PPUSH
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
// result := false ;
35448: LD_ADDR_VAR 0 6
35452: PUSH
35453: LD_INT 0
35455: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35456: LD_VAR 0 1
35460: NOT
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 266
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: IN
35482: NOT
35483: OR
35484: PUSH
35485: LD_VAR 0 2
35489: NOT
35490: OR
35491: PUSH
35492: LD_VAR 0 5
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: LD_INT 4
35511: PUSH
35512: LD_INT 5
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: IN
35523: NOT
35524: OR
35525: PUSH
35526: LD_VAR 0 3
35530: PPUSH
35531: LD_VAR 0 4
35535: PPUSH
35536: CALL_OW 488
35540: NOT
35541: OR
35542: IFFALSE 35546
// exit ;
35544: GO 36282
// side := GetSide ( depot ) ;
35546: LD_ADDR_VAR 0 9
35550: PUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 255
35560: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35561: LD_VAR 0 9
35565: PPUSH
35566: LD_VAR 0 2
35570: PPUSH
35571: CALL 35059 0 2
35575: NOT
35576: IFFALSE 35580
// exit ;
35578: GO 36282
// pom := GetBase ( depot ) ;
35580: LD_ADDR_VAR 0 10
35584: PUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 274
35594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35595: LD_ADDR_VAR 0 11
35599: PUSH
35600: LD_VAR 0 2
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 248
35614: PPUSH
35615: CALL_OW 450
35619: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35620: LD_VAR 0 10
35624: PPUSH
35625: LD_INT 1
35627: PPUSH
35628: CALL_OW 275
35632: PUSH
35633: LD_VAR 0 11
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: GREATEREQUAL
35642: PUSH
35643: LD_VAR 0 10
35647: PPUSH
35648: LD_INT 2
35650: PPUSH
35651: CALL_OW 275
35655: PUSH
35656: LD_VAR 0 11
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: GREATEREQUAL
35665: AND
35666: PUSH
35667: LD_VAR 0 10
35671: PPUSH
35672: LD_INT 3
35674: PPUSH
35675: CALL_OW 275
35679: PUSH
35680: LD_VAR 0 11
35684: PUSH
35685: LD_INT 3
35687: ARRAY
35688: GREATEREQUAL
35689: AND
35690: NOT
35691: IFFALSE 35695
// exit ;
35693: GO 36282
// if GetBType ( depot ) = b_depot then
35695: LD_VAR 0 1
35699: PPUSH
35700: CALL_OW 266
35704: PUSH
35705: LD_INT 0
35707: EQUAL
35708: IFFALSE 35720
// dist := 28 else
35710: LD_ADDR_VAR 0 14
35714: PUSH
35715: LD_INT 28
35717: ST_TO_ADDR
35718: GO 35728
// dist := 36 ;
35720: LD_ADDR_VAR 0 14
35724: PUSH
35725: LD_INT 36
35727: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35728: LD_VAR 0 1
35732: PPUSH
35733: LD_VAR 0 3
35737: PPUSH
35738: LD_VAR 0 4
35742: PPUSH
35743: CALL_OW 297
35747: PUSH
35748: LD_VAR 0 14
35752: GREATER
35753: IFFALSE 35757
// exit ;
35755: GO 36282
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35757: LD_ADDR_VAR 0 12
35761: PUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: LD_VAR 0 3
35771: PPUSH
35772: LD_VAR 0 4
35776: PPUSH
35777: LD_VAR 0 5
35781: PPUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 248
35791: PPUSH
35792: LD_INT 0
35794: PPUSH
35795: CALL 36287 0 6
35799: ST_TO_ADDR
// if not hexes then
35800: LD_VAR 0 12
35804: NOT
35805: IFFALSE 35809
// exit ;
35807: GO 36282
// hex := GetHexInfo ( x , y ) ;
35809: LD_ADDR_VAR 0 15
35813: PUSH
35814: LD_VAR 0 3
35818: PPUSH
35819: LD_VAR 0 4
35823: PPUSH
35824: CALL_OW 546
35828: ST_TO_ADDR
// if hex [ 1 ] then
35829: LD_VAR 0 15
35833: PUSH
35834: LD_INT 1
35836: ARRAY
35837: IFFALSE 35841
// exit ;
35839: GO 36282
// height := hex [ 2 ] ;
35841: LD_ADDR_VAR 0 13
35845: PUSH
35846: LD_VAR 0 15
35850: PUSH
35851: LD_INT 2
35853: ARRAY
35854: ST_TO_ADDR
// for i = 1 to hexes do
35855: LD_ADDR_VAR 0 7
35859: PUSH
35860: DOUBLE
35861: LD_INT 1
35863: DEC
35864: ST_TO_ADDR
35865: LD_VAR 0 12
35869: PUSH
35870: FOR_TO
35871: IFFALSE 36201
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35873: LD_VAR 0 12
35877: PUSH
35878: LD_VAR 0 7
35882: ARRAY
35883: PUSH
35884: LD_INT 1
35886: ARRAY
35887: PPUSH
35888: LD_VAR 0 12
35892: PUSH
35893: LD_VAR 0 7
35897: ARRAY
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: CALL_OW 488
35907: NOT
35908: PUSH
35909: LD_VAR 0 12
35913: PUSH
35914: LD_VAR 0 7
35918: ARRAY
35919: PUSH
35920: LD_INT 1
35922: ARRAY
35923: PPUSH
35924: LD_VAR 0 12
35928: PUSH
35929: LD_VAR 0 7
35933: ARRAY
35934: PUSH
35935: LD_INT 2
35937: ARRAY
35938: PPUSH
35939: CALL_OW 428
35943: PUSH
35944: LD_INT 0
35946: GREATER
35947: OR
35948: PUSH
35949: LD_VAR 0 12
35953: PUSH
35954: LD_VAR 0 7
35958: ARRAY
35959: PUSH
35960: LD_INT 1
35962: ARRAY
35963: PPUSH
35964: LD_VAR 0 12
35968: PUSH
35969: LD_VAR 0 7
35973: ARRAY
35974: PUSH
35975: LD_INT 2
35977: ARRAY
35978: PPUSH
35979: CALL_OW 351
35983: OR
35984: IFFALSE 35990
// exit ;
35986: POP
35987: POP
35988: GO 36282
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35990: LD_ADDR_VAR 0 8
35994: PUSH
35995: LD_VAR 0 12
35999: PUSH
36000: LD_VAR 0 7
36004: ARRAY
36005: PUSH
36006: LD_INT 1
36008: ARRAY
36009: PPUSH
36010: LD_VAR 0 12
36014: PUSH
36015: LD_VAR 0 7
36019: ARRAY
36020: PUSH
36021: LD_INT 2
36023: ARRAY
36024: PPUSH
36025: CALL_OW 546
36029: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36030: LD_VAR 0 8
36034: PUSH
36035: LD_INT 1
36037: ARRAY
36038: PUSH
36039: LD_VAR 0 8
36043: PUSH
36044: LD_INT 2
36046: ARRAY
36047: PUSH
36048: LD_VAR 0 13
36052: PUSH
36053: LD_INT 2
36055: PLUS
36056: GREATER
36057: OR
36058: PUSH
36059: LD_VAR 0 8
36063: PUSH
36064: LD_INT 2
36066: ARRAY
36067: PUSH
36068: LD_VAR 0 13
36072: PUSH
36073: LD_INT 2
36075: MINUS
36076: LESS
36077: OR
36078: PUSH
36079: LD_VAR 0 8
36083: PUSH
36084: LD_INT 3
36086: ARRAY
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 8
36093: PUSH
36094: LD_INT 9
36096: PUSH
36097: LD_INT 10
36099: PUSH
36100: LD_INT 11
36102: PUSH
36103: LD_INT 12
36105: PUSH
36106: LD_INT 13
36108: PUSH
36109: LD_INT 16
36111: PUSH
36112: LD_INT 17
36114: PUSH
36115: LD_INT 18
36117: PUSH
36118: LD_INT 19
36120: PUSH
36121: LD_INT 20
36123: PUSH
36124: LD_INT 21
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: IN
36142: NOT
36143: OR
36144: PUSH
36145: LD_VAR 0 8
36149: PUSH
36150: LD_INT 5
36152: ARRAY
36153: NOT
36154: OR
36155: PUSH
36156: LD_VAR 0 8
36160: PUSH
36161: LD_INT 6
36163: ARRAY
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 7
36173: PUSH
36174: LD_INT 9
36176: PUSH
36177: LD_INT 10
36179: PUSH
36180: LD_INT 11
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: IN
36191: NOT
36192: OR
36193: IFFALSE 36199
// exit ;
36195: POP
36196: POP
36197: GO 36282
// end ;
36199: GO 35870
36201: POP
36202: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36203: LD_VAR 0 9
36207: PPUSH
36208: LD_VAR 0 3
36212: PPUSH
36213: LD_VAR 0 4
36217: PPUSH
36218: LD_INT 20
36220: PPUSH
36221: CALL 28234 0 4
36225: PUSH
36226: LD_INT 4
36228: ARRAY
36229: IFFALSE 36233
// exit ;
36231: GO 36282
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36233: LD_VAR 0 2
36237: PUSH
36238: LD_INT 29
36240: PUSH
36241: LD_INT 30
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: IN
36248: PUSH
36249: LD_VAR 0 3
36253: PPUSH
36254: LD_VAR 0 4
36258: PPUSH
36259: LD_VAR 0 9
36263: PPUSH
36264: CALL_OW 440
36268: NOT
36269: AND
36270: IFFALSE 36274
// exit ;
36272: GO 36282
// result := true ;
36274: LD_ADDR_VAR 0 6
36278: PUSH
36279: LD_INT 1
36281: ST_TO_ADDR
// end ;
36282: LD_VAR 0 6
36286: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36287: LD_INT 0
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
// result = [ ] ;
36347: LD_ADDR_VAR 0 7
36351: PUSH
36352: EMPTY
36353: ST_TO_ADDR
// temp_list = [ ] ;
36354: LD_ADDR_VAR 0 9
36358: PUSH
36359: EMPTY
36360: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36361: LD_VAR 0 4
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: LD_INT 4
36380: PUSH
36381: LD_INT 5
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: IN
36392: NOT
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: IN
36409: PUSH
36410: LD_VAR 0 5
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: IN
36429: NOT
36430: AND
36431: OR
36432: IFFALSE 36436
// exit ;
36434: GO 54827
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36436: LD_VAR 0 1
36440: PUSH
36441: LD_INT 6
36443: PUSH
36444: LD_INT 7
36446: PUSH
36447: LD_INT 8
36449: PUSH
36450: LD_INT 13
36452: PUSH
36453: LD_INT 12
36455: PUSH
36456: LD_INT 15
36458: PUSH
36459: LD_INT 11
36461: PUSH
36462: LD_INT 14
36464: PUSH
36465: LD_INT 10
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: IN
36479: IFFALSE 36489
// btype = b_lab ;
36481: LD_ADDR_VAR 0 1
36485: PUSH
36486: LD_INT 6
36488: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36489: LD_VAR 0 6
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: IN
36508: NOT
36509: PUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 3
36526: PUSH
36527: LD_INT 6
36529: PUSH
36530: LD_INT 36
36532: PUSH
36533: LD_INT 4
36535: PUSH
36536: LD_INT 5
36538: PUSH
36539: LD_INT 31
36541: PUSH
36542: LD_INT 32
36544: PUSH
36545: LD_INT 33
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: IN
36561: NOT
36562: PUSH
36563: LD_VAR 0 6
36567: PUSH
36568: LD_INT 1
36570: EQUAL
36571: AND
36572: OR
36573: PUSH
36574: LD_VAR 0 1
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: IN
36589: NOT
36590: PUSH
36591: LD_VAR 0 6
36595: PUSH
36596: LD_INT 2
36598: EQUAL
36599: AND
36600: OR
36601: IFFALSE 36611
// mode = 0 ;
36603: LD_ADDR_VAR 0 6
36607: PUSH
36608: LD_INT 0
36610: ST_TO_ADDR
// case mode of 0 :
36611: LD_VAR 0 6
36615: PUSH
36616: LD_INT 0
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 48077
36624: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36625: LD_ADDR_VAR 0 11
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36818: LD_ADDR_VAR 0 12
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 3
36975: NEG
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37014: LD_ADDR_VAR 0 13
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 2
37137: NEG
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: LD_INT 3
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 3
37185: NEG
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37213: LD_ADDR_VAR 0 14
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 3
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 3
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37409: LD_ADDR_VAR 0 15
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: NEG
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37602: LD_ADDR_VAR 0 16
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37795: LD_ADDR_VAR 0 17
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38025: LD_ADDR_VAR 0 18
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38255: LD_ADDR_VAR 0 19
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38485: LD_ADDR_VAR 0 20
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38715: LD_ADDR_VAR 0 21
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38945: LD_ADDR_VAR 0 22
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39175: LD_ADDR_VAR 0 23
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 2
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 3
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39455: LD_ADDR_VAR 0 24
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 3
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39731: LD_ADDR_VAR 0 25
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 3
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40005: LD_ADDR_VAR 0 26
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 2
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40281: LD_ADDR_VAR 0 27
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 2
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40561: LD_ADDR_VAR 0 28
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: LD_INT 2
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 3
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: NEG
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40843: LD_ADDR_VAR 0 29
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 3
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 3
41087: NEG
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41122: LD_ADDR_VAR 0 30
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 3
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41400: LD_ADDR_VAR 0 31
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 3
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41678: LD_ADDR_VAR 0 32
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41956: LD_ADDR_VAR 0 33
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42235: LD_ADDR_VAR 0 34
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42515: LD_ADDR_VAR 0 35
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42627: LD_ADDR_VAR 0 36
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42739: LD_ADDR_VAR 0 37
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42851: LD_ADDR_VAR 0 38
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42963: LD_ADDR_VAR 0 39
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43075: LD_ADDR_VAR 0 40
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43187: LD_ADDR_VAR 0 41
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 3
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43537: LD_ADDR_VAR 0 42
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 3
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: LD_INT 3
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43887: LD_ADDR_VAR 0 43
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44235: LD_ADDR_VAR 0 44
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 3
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: NEG
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 3
44544: NEG
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44585: LD_ADDR_VAR 0 45
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 3
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: NEG
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44935: LD_ADDR_VAR 0 46
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 3
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 3
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45283: LD_ADDR_VAR 0 47
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45434: LD_ADDR_VAR 0 48
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45581: LD_ADDR_VAR 0 49
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45725: LD_ADDR_VAR 0 50
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45869: LD_ADDR_VAR 0 51
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46016: LD_ADDR_VAR 0 52
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46167: LD_ADDR_VAR 0 53
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46397: LD_ADDR_VAR 0 54
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46627: LD_ADDR_VAR 0 55
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46857: LD_ADDR_VAR 0 56
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47087: LD_ADDR_VAR 0 57
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47317: LD_ADDR_VAR 0 58
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47547: LD_ADDR_VAR 0 59
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47635: LD_ADDR_VAR 0 60
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47723: LD_ADDR_VAR 0 61
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47811: LD_ADDR_VAR 0 62
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47899: LD_ADDR_VAR 0 63
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47987: LD_ADDR_VAR 0 64
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// end ; 1 :
48075: GO 53972
48077: LD_INT 1
48079: DOUBLE
48080: EQUAL
48081: IFTRUE 48085
48083: GO 50708
48085: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48086: LD_ADDR_VAR 0 11
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48130: LD_ADDR_VAR 0 12
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48171: LD_ADDR_VAR 0 13
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48211: LD_ADDR_VAR 0 14
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48252: LD_ADDR_VAR 0 15
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48296: LD_ADDR_VAR 0 16
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 3
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48342: LD_ADDR_VAR 0 17
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48386: LD_ADDR_VAR 0 18
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 3
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48427: LD_ADDR_VAR 0 19
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48467: LD_ADDR_VAR 0 20
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48508: LD_ADDR_VAR 0 21
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48552: LD_ADDR_VAR 0 22
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 3
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48598: LD_ADDR_VAR 0 23
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48642: LD_ADDR_VAR 0 24
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 4
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48683: LD_ADDR_VAR 0 25
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 4
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 4
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48723: LD_ADDR_VAR 0 26
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 4
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48764: LD_ADDR_VAR 0 27
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48808: LD_ADDR_VAR 0 28
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: LD_INT 4
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 4
48839: NEG
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48854: LD_ADDR_VAR 0 29
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 4
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 4
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 5
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 5
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 4
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 6
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 6
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 5
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49009: LD_ADDR_VAR 0 30
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 4
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 4
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 5
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 5
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 5
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 6
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 6
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49152: LD_ADDR_VAR 0 31
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 4
49199: PUSH
49200: LD_INT 4
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: LD_INT 4
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: LD_INT 4
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 5
49229: PUSH
49230: LD_INT 5
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: PUSH
49240: LD_INT 5
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 6
49249: PUSH
49250: LD_INT 5
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 6
49259: PUSH
49260: LD_INT 6
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 5
49269: PUSH
49270: LD_INT 6
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49291: LD_ADDR_VAR 0 32
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 4
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 4
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 5
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 5
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 4
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 6
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 6
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49434: LD_ADDR_VAR 0 33
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 4
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 5
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 5
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 5
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 6
49554: NEG
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 6
49565: NEG
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49589: LD_ADDR_VAR 0 34
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 3
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 4
49644: NEG
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 4
49656: NEG
49657: PUSH
49658: LD_INT 4
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: LD_INT 5
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: LD_INT 4
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 5
49692: NEG
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 5
49704: NEG
49705: PUSH
49706: LD_INT 6
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 6
49716: NEG
49717: PUSH
49718: LD_INT 5
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 6
49728: NEG
49729: PUSH
49730: LD_INT 6
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49752: LD_ADDR_VAR 0 41
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49796: LD_ADDR_VAR 0 42
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49837: LD_ADDR_VAR 0 43
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49877: LD_ADDR_VAR 0 44
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49918: LD_ADDR_VAR 0 45
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49962: LD_ADDR_VAR 0 46
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: LIST
50007: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50008: LD_ADDR_VAR 0 47
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50041: LD_ADDR_VAR 0 48
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50072: LD_ADDR_VAR 0 49
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50101: LD_ADDR_VAR 0 50
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50130: LD_ADDR_VAR 0 51
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50161: LD_ADDR_VAR 0 52
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50194: LD_ADDR_VAR 0 53
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50238: LD_ADDR_VAR 0 54
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50279: LD_ADDR_VAR 0 55
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50319: LD_ADDR_VAR 0 56
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 3
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 57
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50404: LD_ADDR_VAR 0 58
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50450: LD_ADDR_VAR 0 59
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50494: LD_ADDR_VAR 0 60
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50535: LD_ADDR_VAR 0 61
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50575: LD_ADDR_VAR 0 62
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50616: LD_ADDR_VAR 0 63
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50660: LD_ADDR_VAR 0 64
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// end ; 2 :
50706: GO 53972
50708: LD_INT 2
50710: DOUBLE
50711: EQUAL
50712: IFTRUE 50716
50714: GO 53971
50716: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50717: LD_ADDR_VAR 0 29
50721: PUSH
50722: LD_INT 4
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 4
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 5
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 5
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 5
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 4
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 4
50847: PUSH
50848: LD_INT 4
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: LD_INT 4
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 3
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 5
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 5
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 4
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 5
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 4
51056: NEG
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 4
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 4
51102: NEG
51103: PUSH
51104: LD_INT 4
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 4
51114: NEG
51115: PUSH
51116: LD_INT 5
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 4
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 4
51150: NEG
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 5
51162: NEG
51163: PUSH
51164: LD_INT 4
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 5
51174: NEG
51175: PUSH
51176: LD_INT 5
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: NEG
51187: PUSH
51188: LD_INT 5
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51255: LD_ADDR_VAR 0 30
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 4
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 5
51292: PUSH
51293: LD_INT 5
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: LD_INT 5
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 4
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: LD_INT 5
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 4
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 4
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 4
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 5
51501: NEG
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 5
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 5
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 3
51547: NEG
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: LD_INT 4
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 4
51607: NEG
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: LD_INT 4
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 4
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 4
51643: NEG
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 4
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 5
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 4
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 4
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 5
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 5
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51802: LD_ADDR_VAR 0 31
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 5
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 4
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 5
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: LD_INT 3
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 3
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 4
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 4
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: NEG
52005: PUSH
52006: LD_INT 4
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 4
52016: NEG
52017: PUSH
52018: LD_INT 5
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 4
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 4
52052: NEG
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 5
52064: NEG
52065: PUSH
52066: LD_INT 4
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 5
52076: NEG
52077: PUSH
52078: LD_INT 5
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: LD_INT 5
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 3
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 4
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 4
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 5
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52352: LD_ADDR_VAR 0 32
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 4
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 5
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 5
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 5
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: NEG
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: LD_INT 4
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 4
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 4
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 4
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 5
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 4
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 4
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 5
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 5
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 4
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 4
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 4
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: LD_INT 4
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 5
52784: PUSH
52785: LD_INT 4
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: LD_INT 5
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 5
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52899: LD_ADDR_VAR 0 33
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 4
52918: NEG
52919: PUSH
52920: LD_INT 5
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: NEG
52931: PUSH
52932: LD_INT 4
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 4
52954: NEG
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 5
52966: NEG
52967: PUSH
52968: LD_INT 4
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 5
52978: NEG
52979: PUSH
52980: LD_INT 5
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 5
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 5
53002: NEG
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 4
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 4
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 4
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 4
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 4
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 5
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 5
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: PUSH
53240: LD_INT 4
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 4
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 4
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 5
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 5
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53437: LD_ADDR_VAR 0 34
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 5
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 4
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 5
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 5
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 4
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 4
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 5
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 5
53669: PUSH
53670: LD_INT 5
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 4
53679: PUSH
53680: LD_INT 5
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 4
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: LD_INT 5
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 4
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 4
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 5
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 5
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 5
53901: NEG
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// end ; end ;
53969: GO 53972
53971: POP
// case btype of b_depot , b_warehouse :
53972: LD_VAR 0 1
53976: PUSH
53977: LD_INT 0
53979: DOUBLE
53980: EQUAL
53981: IFTRUE 53991
53983: LD_INT 1
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 53991
53989: GO 54192
53991: POP
// case nation of nation_american :
53992: LD_VAR 0 5
53996: PUSH
53997: LD_INT 1
53999: DOUBLE
54000: EQUAL
54001: IFTRUE 54005
54003: GO 54061
54005: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54006: LD_ADDR_VAR 0 9
54010: PUSH
54011: LD_VAR 0 11
54015: PUSH
54016: LD_VAR 0 12
54020: PUSH
54021: LD_VAR 0 13
54025: PUSH
54026: LD_VAR 0 14
54030: PUSH
54031: LD_VAR 0 15
54035: PUSH
54036: LD_VAR 0 16
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: PUSH
54049: LD_VAR 0 4
54053: PUSH
54054: LD_INT 1
54056: PLUS
54057: ARRAY
54058: ST_TO_ADDR
54059: GO 54190
54061: LD_INT 2
54063: DOUBLE
54064: EQUAL
54065: IFTRUE 54069
54067: GO 54125
54069: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54070: LD_ADDR_VAR 0 9
54074: PUSH
54075: LD_VAR 0 17
54079: PUSH
54080: LD_VAR 0 18
54084: PUSH
54085: LD_VAR 0 19
54089: PUSH
54090: LD_VAR 0 20
54094: PUSH
54095: LD_VAR 0 21
54099: PUSH
54100: LD_VAR 0 22
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: PUSH
54113: LD_VAR 0 4
54117: PUSH
54118: LD_INT 1
54120: PLUS
54121: ARRAY
54122: ST_TO_ADDR
54123: GO 54190
54125: LD_INT 3
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54133
54131: GO 54189
54133: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54134: LD_ADDR_VAR 0 9
54138: PUSH
54139: LD_VAR 0 23
54143: PUSH
54144: LD_VAR 0 24
54148: PUSH
54149: LD_VAR 0 25
54153: PUSH
54154: LD_VAR 0 26
54158: PUSH
54159: LD_VAR 0 27
54163: PUSH
54164: LD_VAR 0 28
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: PUSH
54177: LD_VAR 0 4
54181: PUSH
54182: LD_INT 1
54184: PLUS
54185: ARRAY
54186: ST_TO_ADDR
54187: GO 54190
54189: POP
54190: GO 54745
54192: LD_INT 2
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54206
54198: LD_INT 3
54200: DOUBLE
54201: EQUAL
54202: IFTRUE 54206
54204: GO 54262
54206: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54207: LD_ADDR_VAR 0 9
54211: PUSH
54212: LD_VAR 0 29
54216: PUSH
54217: LD_VAR 0 30
54221: PUSH
54222: LD_VAR 0 31
54226: PUSH
54227: LD_VAR 0 32
54231: PUSH
54232: LD_VAR 0 33
54236: PUSH
54237: LD_VAR 0 34
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: PUSH
54250: LD_VAR 0 4
54254: PUSH
54255: LD_INT 1
54257: PLUS
54258: ARRAY
54259: ST_TO_ADDR
54260: GO 54745
54262: LD_INT 16
54264: DOUBLE
54265: EQUAL
54266: IFTRUE 54324
54268: LD_INT 17
54270: DOUBLE
54271: EQUAL
54272: IFTRUE 54324
54274: LD_INT 18
54276: DOUBLE
54277: EQUAL
54278: IFTRUE 54324
54280: LD_INT 19
54282: DOUBLE
54283: EQUAL
54284: IFTRUE 54324
54286: LD_INT 22
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54324
54292: LD_INT 20
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54324
54298: LD_INT 21
54300: DOUBLE
54301: EQUAL
54302: IFTRUE 54324
54304: LD_INT 23
54306: DOUBLE
54307: EQUAL
54308: IFTRUE 54324
54310: LD_INT 24
54312: DOUBLE
54313: EQUAL
54314: IFTRUE 54324
54316: LD_INT 25
54318: DOUBLE
54319: EQUAL
54320: IFTRUE 54324
54322: GO 54380
54324: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54325: LD_ADDR_VAR 0 9
54329: PUSH
54330: LD_VAR 0 35
54334: PUSH
54335: LD_VAR 0 36
54339: PUSH
54340: LD_VAR 0 37
54344: PUSH
54345: LD_VAR 0 38
54349: PUSH
54350: LD_VAR 0 39
54354: PUSH
54355: LD_VAR 0 40
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: PUSH
54368: LD_VAR 0 4
54372: PUSH
54373: LD_INT 1
54375: PLUS
54376: ARRAY
54377: ST_TO_ADDR
54378: GO 54745
54380: LD_INT 6
54382: DOUBLE
54383: EQUAL
54384: IFTRUE 54436
54386: LD_INT 7
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54436
54392: LD_INT 8
54394: DOUBLE
54395: EQUAL
54396: IFTRUE 54436
54398: LD_INT 13
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54436
54404: LD_INT 12
54406: DOUBLE
54407: EQUAL
54408: IFTRUE 54436
54410: LD_INT 15
54412: DOUBLE
54413: EQUAL
54414: IFTRUE 54436
54416: LD_INT 11
54418: DOUBLE
54419: EQUAL
54420: IFTRUE 54436
54422: LD_INT 14
54424: DOUBLE
54425: EQUAL
54426: IFTRUE 54436
54428: LD_INT 10
54430: DOUBLE
54431: EQUAL
54432: IFTRUE 54436
54434: GO 54492
54436: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54437: LD_ADDR_VAR 0 9
54441: PUSH
54442: LD_VAR 0 41
54446: PUSH
54447: LD_VAR 0 42
54451: PUSH
54452: LD_VAR 0 43
54456: PUSH
54457: LD_VAR 0 44
54461: PUSH
54462: LD_VAR 0 45
54466: PUSH
54467: LD_VAR 0 46
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: PUSH
54480: LD_VAR 0 4
54484: PUSH
54485: LD_INT 1
54487: PLUS
54488: ARRAY
54489: ST_TO_ADDR
54490: GO 54745
54492: LD_INT 36
54494: DOUBLE
54495: EQUAL
54496: IFTRUE 54500
54498: GO 54556
54500: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54501: LD_ADDR_VAR 0 9
54505: PUSH
54506: LD_VAR 0 47
54510: PUSH
54511: LD_VAR 0 48
54515: PUSH
54516: LD_VAR 0 49
54520: PUSH
54521: LD_VAR 0 50
54525: PUSH
54526: LD_VAR 0 51
54530: PUSH
54531: LD_VAR 0 52
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: PUSH
54544: LD_VAR 0 4
54548: PUSH
54549: LD_INT 1
54551: PLUS
54552: ARRAY
54553: ST_TO_ADDR
54554: GO 54745
54556: LD_INT 4
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54582
54562: LD_INT 5
54564: DOUBLE
54565: EQUAL
54566: IFTRUE 54582
54568: LD_INT 34
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54582
54574: LD_INT 37
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54582
54580: GO 54638
54582: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54583: LD_ADDR_VAR 0 9
54587: PUSH
54588: LD_VAR 0 53
54592: PUSH
54593: LD_VAR 0 54
54597: PUSH
54598: LD_VAR 0 55
54602: PUSH
54603: LD_VAR 0 56
54607: PUSH
54608: LD_VAR 0 57
54612: PUSH
54613: LD_VAR 0 58
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: PUSH
54626: LD_VAR 0 4
54630: PUSH
54631: LD_INT 1
54633: PLUS
54634: ARRAY
54635: ST_TO_ADDR
54636: GO 54745
54638: LD_INT 31
54640: DOUBLE
54641: EQUAL
54642: IFTRUE 54688
54644: LD_INT 32
54646: DOUBLE
54647: EQUAL
54648: IFTRUE 54688
54650: LD_INT 33
54652: DOUBLE
54653: EQUAL
54654: IFTRUE 54688
54656: LD_INT 27
54658: DOUBLE
54659: EQUAL
54660: IFTRUE 54688
54662: LD_INT 26
54664: DOUBLE
54665: EQUAL
54666: IFTRUE 54688
54668: LD_INT 28
54670: DOUBLE
54671: EQUAL
54672: IFTRUE 54688
54674: LD_INT 29
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54688
54680: LD_INT 30
54682: DOUBLE
54683: EQUAL
54684: IFTRUE 54688
54686: GO 54744
54688: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54689: LD_ADDR_VAR 0 9
54693: PUSH
54694: LD_VAR 0 59
54698: PUSH
54699: LD_VAR 0 60
54703: PUSH
54704: LD_VAR 0 61
54708: PUSH
54709: LD_VAR 0 62
54713: PUSH
54714: LD_VAR 0 63
54718: PUSH
54719: LD_VAR 0 64
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: PUSH
54732: LD_VAR 0 4
54736: PUSH
54737: LD_INT 1
54739: PLUS
54740: ARRAY
54741: ST_TO_ADDR
54742: GO 54745
54744: POP
// temp_list2 = [ ] ;
54745: LD_ADDR_VAR 0 10
54749: PUSH
54750: EMPTY
54751: ST_TO_ADDR
// for i in temp_list do
54752: LD_ADDR_VAR 0 8
54756: PUSH
54757: LD_VAR 0 9
54761: PUSH
54762: FOR_IN
54763: IFFALSE 54815
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54765: LD_ADDR_VAR 0 10
54769: PUSH
54770: LD_VAR 0 10
54774: PUSH
54775: LD_VAR 0 8
54779: PUSH
54780: LD_INT 1
54782: ARRAY
54783: PUSH
54784: LD_VAR 0 2
54788: PLUS
54789: PUSH
54790: LD_VAR 0 8
54794: PUSH
54795: LD_INT 2
54797: ARRAY
54798: PUSH
54799: LD_VAR 0 3
54803: PLUS
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: ADD
54812: ST_TO_ADDR
54813: GO 54762
54815: POP
54816: POP
// result = temp_list2 ;
54817: LD_ADDR_VAR 0 7
54821: PUSH
54822: LD_VAR 0 10
54826: ST_TO_ADDR
// end ;
54827: LD_VAR 0 7
54831: RET
// export function EnemyInRange ( unit , dist ) ; begin
54832: LD_INT 0
54834: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54835: LD_ADDR_VAR 0 3
54839: PUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: CALL_OW 255
54849: PPUSH
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 250
54859: PPUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 251
54869: PPUSH
54870: LD_VAR 0 2
54874: PPUSH
54875: CALL 28234 0 4
54879: PUSH
54880: LD_INT 4
54882: ARRAY
54883: ST_TO_ADDR
// end ;
54884: LD_VAR 0 3
54888: RET
// export function PlayerSeeMe ( unit ) ; begin
54889: LD_INT 0
54891: PPUSH
// result := See ( your_side , unit ) ;
54892: LD_ADDR_VAR 0 2
54896: PUSH
54897: LD_OWVAR 2
54901: PPUSH
54902: LD_VAR 0 1
54906: PPUSH
54907: CALL_OW 292
54911: ST_TO_ADDR
// end ;
54912: LD_VAR 0 2
54916: RET
// export function ReverseDir ( unit ) ; begin
54917: LD_INT 0
54919: PPUSH
// if not unit then
54920: LD_VAR 0 1
54924: NOT
54925: IFFALSE 54929
// exit ;
54927: GO 54952
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54929: LD_ADDR_VAR 0 2
54933: PUSH
54934: LD_VAR 0 1
54938: PPUSH
54939: CALL_OW 254
54943: PUSH
54944: LD_INT 3
54946: PLUS
54947: PUSH
54948: LD_INT 6
54950: MOD
54951: ST_TO_ADDR
// end ;
54952: LD_VAR 0 2
54956: RET
// export function ReverseArray ( array ) ; var i ; begin
54957: LD_INT 0
54959: PPUSH
54960: PPUSH
// if not array then
54961: LD_VAR 0 1
54965: NOT
54966: IFFALSE 54970
// exit ;
54968: GO 55025
// result := [ ] ;
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: EMPTY
54976: ST_TO_ADDR
// for i := array downto 1 do
54977: LD_ADDR_VAR 0 3
54981: PUSH
54982: DOUBLE
54983: LD_VAR 0 1
54987: INC
54988: ST_TO_ADDR
54989: LD_INT 1
54991: PUSH
54992: FOR_DOWNTO
54993: IFFALSE 55023
// result := Join ( result , array [ i ] ) ;
54995: LD_ADDR_VAR 0 2
54999: PUSH
55000: LD_VAR 0 2
55004: PPUSH
55005: LD_VAR 0 1
55009: PUSH
55010: LD_VAR 0 3
55014: ARRAY
55015: PPUSH
55016: CALL 59669 0 2
55020: ST_TO_ADDR
55021: GO 54992
55023: POP
55024: POP
// end ;
55025: LD_VAR 0 2
55029: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55030: LD_INT 0
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
// if not unit or not hexes then
55038: LD_VAR 0 1
55042: NOT
55043: PUSH
55044: LD_VAR 0 2
55048: NOT
55049: OR
55050: IFFALSE 55054
// exit ;
55052: GO 55177
// dist := 9999 ;
55054: LD_ADDR_VAR 0 5
55058: PUSH
55059: LD_INT 9999
55061: ST_TO_ADDR
// for i = 1 to hexes do
55062: LD_ADDR_VAR 0 4
55066: PUSH
55067: DOUBLE
55068: LD_INT 1
55070: DEC
55071: ST_TO_ADDR
55072: LD_VAR 0 2
55076: PUSH
55077: FOR_TO
55078: IFFALSE 55165
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55080: LD_ADDR_VAR 0 6
55084: PUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: LD_VAR 0 2
55094: PUSH
55095: LD_VAR 0 4
55099: ARRAY
55100: PUSH
55101: LD_INT 1
55103: ARRAY
55104: PPUSH
55105: LD_VAR 0 2
55109: PUSH
55110: LD_VAR 0 4
55114: ARRAY
55115: PUSH
55116: LD_INT 2
55118: ARRAY
55119: PPUSH
55120: CALL_OW 297
55124: ST_TO_ADDR
// if tdist < dist then
55125: LD_VAR 0 6
55129: PUSH
55130: LD_VAR 0 5
55134: LESS
55135: IFFALSE 55163
// begin hex := hexes [ i ] ;
55137: LD_ADDR_VAR 0 8
55141: PUSH
55142: LD_VAR 0 2
55146: PUSH
55147: LD_VAR 0 4
55151: ARRAY
55152: ST_TO_ADDR
// dist := tdist ;
55153: LD_ADDR_VAR 0 5
55157: PUSH
55158: LD_VAR 0 6
55162: ST_TO_ADDR
// end ; end ;
55163: GO 55077
55165: POP
55166: POP
// result := hex ;
55167: LD_ADDR_VAR 0 3
55171: PUSH
55172: LD_VAR 0 8
55176: ST_TO_ADDR
// end ;
55177: LD_VAR 0 3
55181: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55182: LD_INT 0
55184: PPUSH
55185: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55186: LD_VAR 0 1
55190: NOT
55191: PUSH
55192: LD_VAR 0 1
55196: PUSH
55197: LD_INT 21
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 23
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PPUSH
55221: CALL_OW 69
55225: IN
55226: NOT
55227: OR
55228: IFFALSE 55232
// exit ;
55230: GO 55279
// for i = 1 to 3 do
55232: LD_ADDR_VAR 0 3
55236: PUSH
55237: DOUBLE
55238: LD_INT 1
55240: DEC
55241: ST_TO_ADDR
55242: LD_INT 3
55244: PUSH
55245: FOR_TO
55246: IFFALSE 55277
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55248: LD_VAR 0 1
55252: PPUSH
55253: CALL_OW 250
55257: PPUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 251
55267: PPUSH
55268: LD_INT 1
55270: PPUSH
55271: CALL_OW 453
55275: GO 55245
55277: POP
55278: POP
// end ;
55279: LD_VAR 0 2
55283: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55284: LD_INT 0
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55292: LD_VAR 0 1
55296: NOT
55297: PUSH
55298: LD_VAR 0 2
55302: NOT
55303: OR
55304: PUSH
55305: LD_VAR 0 1
55309: PPUSH
55310: CALL_OW 314
55314: OR
55315: IFFALSE 55319
// exit ;
55317: GO 55786
// if GetLives ( i ) < 250 then
55319: LD_VAR 0 4
55323: PPUSH
55324: CALL_OW 256
55328: PUSH
55329: LD_INT 250
55331: LESS
55332: IFFALSE 55345
// begin ComAutodestruct ( i ) ;
55334: LD_VAR 0 4
55338: PPUSH
55339: CALL 55182 0 1
// exit ;
55343: GO 55786
// end ; x := GetX ( enemy_unit ) ;
55345: LD_ADDR_VAR 0 7
55349: PUSH
55350: LD_VAR 0 2
55354: PPUSH
55355: CALL_OW 250
55359: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55360: LD_ADDR_VAR 0 8
55364: PUSH
55365: LD_VAR 0 2
55369: PPUSH
55370: CALL_OW 251
55374: ST_TO_ADDR
// if not x or not y then
55375: LD_VAR 0 7
55379: NOT
55380: PUSH
55381: LD_VAR 0 8
55385: NOT
55386: OR
55387: IFFALSE 55391
// exit ;
55389: GO 55786
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55391: LD_ADDR_VAR 0 6
55395: PUSH
55396: LD_VAR 0 7
55400: PPUSH
55401: LD_INT 0
55403: PPUSH
55404: LD_INT 4
55406: PPUSH
55407: CALL_OW 272
55411: PUSH
55412: LD_VAR 0 8
55416: PPUSH
55417: LD_INT 0
55419: PPUSH
55420: LD_INT 4
55422: PPUSH
55423: CALL_OW 273
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_VAR 0 7
55436: PPUSH
55437: LD_INT 1
55439: PPUSH
55440: LD_INT 4
55442: PPUSH
55443: CALL_OW 272
55447: PUSH
55448: LD_VAR 0 8
55452: PPUSH
55453: LD_INT 1
55455: PPUSH
55456: LD_INT 4
55458: PPUSH
55459: CALL_OW 273
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_VAR 0 7
55472: PPUSH
55473: LD_INT 2
55475: PPUSH
55476: LD_INT 4
55478: PPUSH
55479: CALL_OW 272
55483: PUSH
55484: LD_VAR 0 8
55488: PPUSH
55489: LD_INT 2
55491: PPUSH
55492: LD_INT 4
55494: PPUSH
55495: CALL_OW 273
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_VAR 0 7
55508: PPUSH
55509: LD_INT 3
55511: PPUSH
55512: LD_INT 4
55514: PPUSH
55515: CALL_OW 272
55519: PUSH
55520: LD_VAR 0 8
55524: PPUSH
55525: LD_INT 3
55527: PPUSH
55528: LD_INT 4
55530: PPUSH
55531: CALL_OW 273
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_VAR 0 7
55544: PPUSH
55545: LD_INT 4
55547: PPUSH
55548: LD_INT 4
55550: PPUSH
55551: CALL_OW 272
55555: PUSH
55556: LD_VAR 0 8
55560: PPUSH
55561: LD_INT 4
55563: PPUSH
55564: LD_INT 4
55566: PPUSH
55567: CALL_OW 273
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_VAR 0 7
55580: PPUSH
55581: LD_INT 5
55583: PPUSH
55584: LD_INT 4
55586: PPUSH
55587: CALL_OW 272
55591: PUSH
55592: LD_VAR 0 8
55596: PPUSH
55597: LD_INT 5
55599: PPUSH
55600: LD_INT 4
55602: PPUSH
55603: CALL_OW 273
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// for i = tmp downto 1 do
55620: LD_ADDR_VAR 0 4
55624: PUSH
55625: DOUBLE
55626: LD_VAR 0 6
55630: INC
55631: ST_TO_ADDR
55632: LD_INT 1
55634: PUSH
55635: FOR_DOWNTO
55636: IFFALSE 55737
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55638: LD_VAR 0 6
55642: PUSH
55643: LD_VAR 0 4
55647: ARRAY
55648: PUSH
55649: LD_INT 1
55651: ARRAY
55652: PPUSH
55653: LD_VAR 0 6
55657: PUSH
55658: LD_VAR 0 4
55662: ARRAY
55663: PUSH
55664: LD_INT 2
55666: ARRAY
55667: PPUSH
55668: CALL_OW 488
55672: NOT
55673: PUSH
55674: LD_VAR 0 6
55678: PUSH
55679: LD_VAR 0 4
55683: ARRAY
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PPUSH
55689: LD_VAR 0 6
55693: PUSH
55694: LD_VAR 0 4
55698: ARRAY
55699: PUSH
55700: LD_INT 2
55702: ARRAY
55703: PPUSH
55704: CALL_OW 428
55708: PUSH
55709: LD_INT 0
55711: NONEQUAL
55712: OR
55713: IFFALSE 55735
// tmp := Delete ( tmp , i ) ;
55715: LD_ADDR_VAR 0 6
55719: PUSH
55720: LD_VAR 0 6
55724: PPUSH
55725: LD_VAR 0 4
55729: PPUSH
55730: CALL_OW 3
55734: ST_TO_ADDR
55735: GO 55635
55737: POP
55738: POP
// j := GetClosestHex ( unit , tmp ) ;
55739: LD_ADDR_VAR 0 5
55743: PUSH
55744: LD_VAR 0 1
55748: PPUSH
55749: LD_VAR 0 6
55753: PPUSH
55754: CALL 55030 0 2
55758: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55759: LD_VAR 0 1
55763: PPUSH
55764: LD_VAR 0 5
55768: PUSH
55769: LD_INT 1
55771: ARRAY
55772: PPUSH
55773: LD_VAR 0 5
55777: PUSH
55778: LD_INT 2
55780: ARRAY
55781: PPUSH
55782: CALL_OW 111
// end ;
55786: LD_VAR 0 3
55790: RET
// export function PrepareApemanSoldier ( ) ; begin
55791: LD_INT 0
55793: PPUSH
// uc_nation := 0 ;
55794: LD_ADDR_OWVAR 21
55798: PUSH
55799: LD_INT 0
55801: ST_TO_ADDR
// hc_sex := sex_male ;
55802: LD_ADDR_OWVAR 27
55806: PUSH
55807: LD_INT 1
55809: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55810: LD_ADDR_OWVAR 28
55814: PUSH
55815: LD_INT 15
55817: ST_TO_ADDR
// hc_gallery :=  ;
55818: LD_ADDR_OWVAR 33
55822: PUSH
55823: LD_STRING 
55825: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55826: LD_ADDR_OWVAR 31
55830: PUSH
55831: LD_INT 0
55833: PPUSH
55834: LD_INT 3
55836: PPUSH
55837: CALL_OW 12
55841: PUSH
55842: LD_INT 0
55844: PPUSH
55845: LD_INT 3
55847: PPUSH
55848: CALL_OW 12
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// end ;
55865: LD_VAR 0 1
55869: RET
// export function PrepareApemanEngineer ( ) ; begin
55870: LD_INT 0
55872: PPUSH
// uc_nation := 0 ;
55873: LD_ADDR_OWVAR 21
55877: PUSH
55878: LD_INT 0
55880: ST_TO_ADDR
// hc_sex := sex_male ;
55881: LD_ADDR_OWVAR 27
55885: PUSH
55886: LD_INT 1
55888: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55889: LD_ADDR_OWVAR 28
55893: PUSH
55894: LD_INT 16
55896: ST_TO_ADDR
// hc_gallery :=  ;
55897: LD_ADDR_OWVAR 33
55901: PUSH
55902: LD_STRING 
55904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55905: LD_ADDR_OWVAR 31
55909: PUSH
55910: LD_INT 0
55912: PPUSH
55913: LD_INT 3
55915: PPUSH
55916: CALL_OW 12
55920: PUSH
55921: LD_INT 0
55923: PPUSH
55924: LD_INT 3
55926: PPUSH
55927: CALL_OW 12
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// end ;
55944: LD_VAR 0 1
55948: RET
// export function PrepareApeman ( agressivity ) ; begin
55949: LD_INT 0
55951: PPUSH
// uc_side := 0 ;
55952: LD_ADDR_OWVAR 20
55956: PUSH
55957: LD_INT 0
55959: ST_TO_ADDR
// uc_nation := 0 ;
55960: LD_ADDR_OWVAR 21
55964: PUSH
55965: LD_INT 0
55967: ST_TO_ADDR
// hc_sex := sex_male ;
55968: LD_ADDR_OWVAR 27
55972: PUSH
55973: LD_INT 1
55975: ST_TO_ADDR
// hc_class := class_apeman ;
55976: LD_ADDR_OWVAR 28
55980: PUSH
55981: LD_INT 12
55983: ST_TO_ADDR
// hc_gallery :=  ;
55984: LD_ADDR_OWVAR 33
55988: PUSH
55989: LD_STRING 
55991: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55992: LD_ADDR_OWVAR 35
55996: PUSH
55997: LD_VAR 0 1
56001: NEG
56002: PPUSH
56003: LD_VAR 0 1
56007: PPUSH
56008: CALL_OW 12
56012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56013: LD_ADDR_OWVAR 31
56017: PUSH
56018: LD_INT 0
56020: PPUSH
56021: LD_INT 3
56023: PPUSH
56024: CALL_OW 12
56028: PUSH
56029: LD_INT 0
56031: PPUSH
56032: LD_INT 3
56034: PPUSH
56035: CALL_OW 12
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// end ;
56052: LD_VAR 0 2
56056: RET
// export function PrepareTiger ( agressivity ) ; begin
56057: LD_INT 0
56059: PPUSH
// uc_side := 0 ;
56060: LD_ADDR_OWVAR 20
56064: PUSH
56065: LD_INT 0
56067: ST_TO_ADDR
// uc_nation := 0 ;
56068: LD_ADDR_OWVAR 21
56072: PUSH
56073: LD_INT 0
56075: ST_TO_ADDR
// hc_class := class_tiger ;
56076: LD_ADDR_OWVAR 28
56080: PUSH
56081: LD_INT 14
56083: ST_TO_ADDR
// hc_gallery :=  ;
56084: LD_ADDR_OWVAR 33
56088: PUSH
56089: LD_STRING 
56091: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56092: LD_ADDR_OWVAR 35
56096: PUSH
56097: LD_VAR 0 1
56101: NEG
56102: PPUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 12
56112: ST_TO_ADDR
// end ;
56113: LD_VAR 0 2
56117: RET
// export function PrepareEnchidna ( ) ; begin
56118: LD_INT 0
56120: PPUSH
// uc_side := 0 ;
56121: LD_ADDR_OWVAR 20
56125: PUSH
56126: LD_INT 0
56128: ST_TO_ADDR
// uc_nation := 0 ;
56129: LD_ADDR_OWVAR 21
56133: PUSH
56134: LD_INT 0
56136: ST_TO_ADDR
// hc_class := class_baggie ;
56137: LD_ADDR_OWVAR 28
56141: PUSH
56142: LD_INT 13
56144: ST_TO_ADDR
// hc_gallery :=  ;
56145: LD_ADDR_OWVAR 33
56149: PUSH
56150: LD_STRING 
56152: ST_TO_ADDR
// end ;
56153: LD_VAR 0 1
56157: RET
// export function PrepareFrog ( ) ; begin
56158: LD_INT 0
56160: PPUSH
// uc_side := 0 ;
56161: LD_ADDR_OWVAR 20
56165: PUSH
56166: LD_INT 0
56168: ST_TO_ADDR
// uc_nation := 0 ;
56169: LD_ADDR_OWVAR 21
56173: PUSH
56174: LD_INT 0
56176: ST_TO_ADDR
// hc_class := class_frog ;
56177: LD_ADDR_OWVAR 28
56181: PUSH
56182: LD_INT 19
56184: ST_TO_ADDR
// hc_gallery :=  ;
56185: LD_ADDR_OWVAR 33
56189: PUSH
56190: LD_STRING 
56192: ST_TO_ADDR
// end ;
56193: LD_VAR 0 1
56197: RET
// export function PrepareFish ( ) ; begin
56198: LD_INT 0
56200: PPUSH
// uc_side := 0 ;
56201: LD_ADDR_OWVAR 20
56205: PUSH
56206: LD_INT 0
56208: ST_TO_ADDR
// uc_nation := 0 ;
56209: LD_ADDR_OWVAR 21
56213: PUSH
56214: LD_INT 0
56216: ST_TO_ADDR
// hc_class := class_fish ;
56217: LD_ADDR_OWVAR 28
56221: PUSH
56222: LD_INT 20
56224: ST_TO_ADDR
// hc_gallery :=  ;
56225: LD_ADDR_OWVAR 33
56229: PUSH
56230: LD_STRING 
56232: ST_TO_ADDR
// end ;
56233: LD_VAR 0 1
56237: RET
// export function PrepareBird ( ) ; begin
56238: LD_INT 0
56240: PPUSH
// uc_side := 0 ;
56241: LD_ADDR_OWVAR 20
56245: PUSH
56246: LD_INT 0
56248: ST_TO_ADDR
// uc_nation := 0 ;
56249: LD_ADDR_OWVAR 21
56253: PUSH
56254: LD_INT 0
56256: ST_TO_ADDR
// hc_class := class_phororhacos ;
56257: LD_ADDR_OWVAR 28
56261: PUSH
56262: LD_INT 18
56264: ST_TO_ADDR
// hc_gallery :=  ;
56265: LD_ADDR_OWVAR 33
56269: PUSH
56270: LD_STRING 
56272: ST_TO_ADDR
// end ;
56273: LD_VAR 0 1
56277: RET
// export function PrepareHorse ( ) ; begin
56278: LD_INT 0
56280: PPUSH
// uc_side := 0 ;
56281: LD_ADDR_OWVAR 20
56285: PUSH
56286: LD_INT 0
56288: ST_TO_ADDR
// uc_nation := 0 ;
56289: LD_ADDR_OWVAR 21
56293: PUSH
56294: LD_INT 0
56296: ST_TO_ADDR
// hc_class := class_horse ;
56297: LD_ADDR_OWVAR 28
56301: PUSH
56302: LD_INT 21
56304: ST_TO_ADDR
// hc_gallery :=  ;
56305: LD_ADDR_OWVAR 33
56309: PUSH
56310: LD_STRING 
56312: ST_TO_ADDR
// end ;
56313: LD_VAR 0 1
56317: RET
// export function PrepareMastodont ( ) ; begin
56318: LD_INT 0
56320: PPUSH
// uc_side := 0 ;
56321: LD_ADDR_OWVAR 20
56325: PUSH
56326: LD_INT 0
56328: ST_TO_ADDR
// uc_nation := 0 ;
56329: LD_ADDR_OWVAR 21
56333: PUSH
56334: LD_INT 0
56336: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56337: LD_ADDR_OWVAR 37
56341: PUSH
56342: LD_INT 31
56344: ST_TO_ADDR
// vc_control := control_rider ;
56345: LD_ADDR_OWVAR 38
56349: PUSH
56350: LD_INT 4
56352: ST_TO_ADDR
// end ;
56353: LD_VAR 0 1
56357: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56358: LD_INT 0
56360: PPUSH
56361: PPUSH
56362: PPUSH
// uc_side = 0 ;
56363: LD_ADDR_OWVAR 20
56367: PUSH
56368: LD_INT 0
56370: ST_TO_ADDR
// uc_nation = 0 ;
56371: LD_ADDR_OWVAR 21
56375: PUSH
56376: LD_INT 0
56378: ST_TO_ADDR
// InitHc_All ( ) ;
56379: CALL_OW 584
// InitVc ;
56383: CALL_OW 20
// if mastodonts then
56387: LD_VAR 0 6
56391: IFFALSE 56458
// for i = 1 to mastodonts do
56393: LD_ADDR_VAR 0 11
56397: PUSH
56398: DOUBLE
56399: LD_INT 1
56401: DEC
56402: ST_TO_ADDR
56403: LD_VAR 0 6
56407: PUSH
56408: FOR_TO
56409: IFFALSE 56456
// begin vc_chassis := 31 ;
56411: LD_ADDR_OWVAR 37
56415: PUSH
56416: LD_INT 31
56418: ST_TO_ADDR
// vc_control := control_rider ;
56419: LD_ADDR_OWVAR 38
56423: PUSH
56424: LD_INT 4
56426: ST_TO_ADDR
// animal := CreateVehicle ;
56427: LD_ADDR_VAR 0 12
56431: PUSH
56432: CALL_OW 45
56436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56437: LD_VAR 0 12
56441: PPUSH
56442: LD_VAR 0 8
56446: PPUSH
56447: LD_INT 0
56449: PPUSH
56450: CALL 58586 0 3
// end ;
56454: GO 56408
56456: POP
56457: POP
// if horses then
56458: LD_VAR 0 5
56462: IFFALSE 56529
// for i = 1 to horses do
56464: LD_ADDR_VAR 0 11
56468: PUSH
56469: DOUBLE
56470: LD_INT 1
56472: DEC
56473: ST_TO_ADDR
56474: LD_VAR 0 5
56478: PUSH
56479: FOR_TO
56480: IFFALSE 56527
// begin hc_class := 21 ;
56482: LD_ADDR_OWVAR 28
56486: PUSH
56487: LD_INT 21
56489: ST_TO_ADDR
// hc_gallery :=  ;
56490: LD_ADDR_OWVAR 33
56494: PUSH
56495: LD_STRING 
56497: ST_TO_ADDR
// animal := CreateHuman ;
56498: LD_ADDR_VAR 0 12
56502: PUSH
56503: CALL_OW 44
56507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56508: LD_VAR 0 12
56512: PPUSH
56513: LD_VAR 0 8
56517: PPUSH
56518: LD_INT 0
56520: PPUSH
56521: CALL 58586 0 3
// end ;
56525: GO 56479
56527: POP
56528: POP
// if birds then
56529: LD_VAR 0 1
56533: IFFALSE 56600
// for i = 1 to birds do
56535: LD_ADDR_VAR 0 11
56539: PUSH
56540: DOUBLE
56541: LD_INT 1
56543: DEC
56544: ST_TO_ADDR
56545: LD_VAR 0 1
56549: PUSH
56550: FOR_TO
56551: IFFALSE 56598
// begin hc_class = 18 ;
56553: LD_ADDR_OWVAR 28
56557: PUSH
56558: LD_INT 18
56560: ST_TO_ADDR
// hc_gallery =  ;
56561: LD_ADDR_OWVAR 33
56565: PUSH
56566: LD_STRING 
56568: ST_TO_ADDR
// animal := CreateHuman ;
56569: LD_ADDR_VAR 0 12
56573: PUSH
56574: CALL_OW 44
56578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56579: LD_VAR 0 12
56583: PPUSH
56584: LD_VAR 0 8
56588: PPUSH
56589: LD_INT 0
56591: PPUSH
56592: CALL 58586 0 3
// end ;
56596: GO 56550
56598: POP
56599: POP
// if tigers then
56600: LD_VAR 0 2
56604: IFFALSE 56688
// for i = 1 to tigers do
56606: LD_ADDR_VAR 0 11
56610: PUSH
56611: DOUBLE
56612: LD_INT 1
56614: DEC
56615: ST_TO_ADDR
56616: LD_VAR 0 2
56620: PUSH
56621: FOR_TO
56622: IFFALSE 56686
// begin hc_class = class_tiger ;
56624: LD_ADDR_OWVAR 28
56628: PUSH
56629: LD_INT 14
56631: ST_TO_ADDR
// hc_gallery =  ;
56632: LD_ADDR_OWVAR 33
56636: PUSH
56637: LD_STRING 
56639: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56640: LD_ADDR_OWVAR 35
56644: PUSH
56645: LD_INT 7
56647: NEG
56648: PPUSH
56649: LD_INT 7
56651: PPUSH
56652: CALL_OW 12
56656: ST_TO_ADDR
// animal := CreateHuman ;
56657: LD_ADDR_VAR 0 12
56661: PUSH
56662: CALL_OW 44
56666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56667: LD_VAR 0 12
56671: PPUSH
56672: LD_VAR 0 8
56676: PPUSH
56677: LD_INT 0
56679: PPUSH
56680: CALL 58586 0 3
// end ;
56684: GO 56621
56686: POP
56687: POP
// if apemans then
56688: LD_VAR 0 3
56692: IFFALSE 56815
// for i = 1 to apemans do
56694: LD_ADDR_VAR 0 11
56698: PUSH
56699: DOUBLE
56700: LD_INT 1
56702: DEC
56703: ST_TO_ADDR
56704: LD_VAR 0 3
56708: PUSH
56709: FOR_TO
56710: IFFALSE 56813
// begin hc_class = class_apeman ;
56712: LD_ADDR_OWVAR 28
56716: PUSH
56717: LD_INT 12
56719: ST_TO_ADDR
// hc_gallery =  ;
56720: LD_ADDR_OWVAR 33
56724: PUSH
56725: LD_STRING 
56727: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56728: LD_ADDR_OWVAR 35
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PPUSH
56737: LD_INT 2
56739: PPUSH
56740: CALL_OW 12
56744: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56745: LD_ADDR_OWVAR 31
56749: PUSH
56750: LD_INT 1
56752: PPUSH
56753: LD_INT 3
56755: PPUSH
56756: CALL_OW 12
56760: PUSH
56761: LD_INT 1
56763: PPUSH
56764: LD_INT 3
56766: PPUSH
56767: CALL_OW 12
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// animal := CreateHuman ;
56784: LD_ADDR_VAR 0 12
56788: PUSH
56789: CALL_OW 44
56793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56794: LD_VAR 0 12
56798: PPUSH
56799: LD_VAR 0 8
56803: PPUSH
56804: LD_INT 0
56806: PPUSH
56807: CALL 58586 0 3
// end ;
56811: GO 56709
56813: POP
56814: POP
// if enchidnas then
56815: LD_VAR 0 4
56819: IFFALSE 56886
// for i = 1 to enchidnas do
56821: LD_ADDR_VAR 0 11
56825: PUSH
56826: DOUBLE
56827: LD_INT 1
56829: DEC
56830: ST_TO_ADDR
56831: LD_VAR 0 4
56835: PUSH
56836: FOR_TO
56837: IFFALSE 56884
// begin hc_class = 13 ;
56839: LD_ADDR_OWVAR 28
56843: PUSH
56844: LD_INT 13
56846: ST_TO_ADDR
// hc_gallery =  ;
56847: LD_ADDR_OWVAR 33
56851: PUSH
56852: LD_STRING 
56854: ST_TO_ADDR
// animal := CreateHuman ;
56855: LD_ADDR_VAR 0 12
56859: PUSH
56860: CALL_OW 44
56864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56865: LD_VAR 0 12
56869: PPUSH
56870: LD_VAR 0 8
56874: PPUSH
56875: LD_INT 0
56877: PPUSH
56878: CALL 58586 0 3
// end ;
56882: GO 56836
56884: POP
56885: POP
// if fishes then
56886: LD_VAR 0 7
56890: IFFALSE 56957
// for i = 1 to fishes do
56892: LD_ADDR_VAR 0 11
56896: PUSH
56897: DOUBLE
56898: LD_INT 1
56900: DEC
56901: ST_TO_ADDR
56902: LD_VAR 0 7
56906: PUSH
56907: FOR_TO
56908: IFFALSE 56955
// begin hc_class = 20 ;
56910: LD_ADDR_OWVAR 28
56914: PUSH
56915: LD_INT 20
56917: ST_TO_ADDR
// hc_gallery =  ;
56918: LD_ADDR_OWVAR 33
56922: PUSH
56923: LD_STRING 
56925: ST_TO_ADDR
// animal := CreateHuman ;
56926: LD_ADDR_VAR 0 12
56930: PUSH
56931: CALL_OW 44
56935: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56936: LD_VAR 0 12
56940: PPUSH
56941: LD_VAR 0 9
56945: PPUSH
56946: LD_INT 0
56948: PPUSH
56949: CALL 58586 0 3
// end ;
56953: GO 56907
56955: POP
56956: POP
// end ;
56957: LD_VAR 0 10
56961: RET
// export function WantHeal ( sci , unit ) ; begin
56962: LD_INT 0
56964: PPUSH
// if GetTaskList ( sci ) > 0 then
56965: LD_VAR 0 1
56969: PPUSH
56970: CALL_OW 437
56974: PUSH
56975: LD_INT 0
56977: GREATER
56978: IFFALSE 57048
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 437
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PUSH
56994: LD_INT 1
56996: ARRAY
56997: PUSH
56998: LD_STRING l
57000: EQUAL
57001: PUSH
57002: LD_VAR 0 1
57006: PPUSH
57007: CALL_OW 437
57011: PUSH
57012: LD_INT 1
57014: ARRAY
57015: PUSH
57016: LD_INT 4
57018: ARRAY
57019: PUSH
57020: LD_VAR 0 2
57024: EQUAL
57025: AND
57026: IFFALSE 57038
// result := true else
57028: LD_ADDR_VAR 0 3
57032: PUSH
57033: LD_INT 1
57035: ST_TO_ADDR
57036: GO 57046
// result := false ;
57038: LD_ADDR_VAR 0 3
57042: PUSH
57043: LD_INT 0
57045: ST_TO_ADDR
// end else
57046: GO 57056
// result := false ;
57048: LD_ADDR_VAR 0 3
57052: PUSH
57053: LD_INT 0
57055: ST_TO_ADDR
// end ;
57056: LD_VAR 0 3
57060: RET
// export function HealTarget ( sci ) ; begin
57061: LD_INT 0
57063: PPUSH
// if not sci then
57064: LD_VAR 0 1
57068: NOT
57069: IFFALSE 57073
// exit ;
57071: GO 57138
// result := 0 ;
57073: LD_ADDR_VAR 0 2
57077: PUSH
57078: LD_INT 0
57080: ST_TO_ADDR
// if GetTaskList ( sci ) then
57081: LD_VAR 0 1
57085: PPUSH
57086: CALL_OW 437
57090: IFFALSE 57138
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57092: LD_VAR 0 1
57096: PPUSH
57097: CALL_OW 437
57101: PUSH
57102: LD_INT 1
57104: ARRAY
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PUSH
57110: LD_STRING l
57112: EQUAL
57113: IFFALSE 57138
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57115: LD_ADDR_VAR 0 2
57119: PUSH
57120: LD_VAR 0 1
57124: PPUSH
57125: CALL_OW 437
57129: PUSH
57130: LD_INT 1
57132: ARRAY
57133: PUSH
57134: LD_INT 4
57136: ARRAY
57137: ST_TO_ADDR
// end ;
57138: LD_VAR 0 2
57142: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57143: LD_INT 0
57145: PPUSH
57146: PPUSH
57147: PPUSH
57148: PPUSH
// if not base_units then
57149: LD_VAR 0 1
57153: NOT
57154: IFFALSE 57158
// exit ;
57156: GO 57245
// result := false ;
57158: LD_ADDR_VAR 0 2
57162: PUSH
57163: LD_INT 0
57165: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57166: LD_ADDR_VAR 0 5
57170: PUSH
57171: LD_VAR 0 1
57175: PPUSH
57176: LD_INT 21
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PPUSH
57186: CALL_OW 72
57190: ST_TO_ADDR
// if not tmp then
57191: LD_VAR 0 5
57195: NOT
57196: IFFALSE 57200
// exit ;
57198: GO 57245
// for i in tmp do
57200: LD_ADDR_VAR 0 3
57204: PUSH
57205: LD_VAR 0 5
57209: PUSH
57210: FOR_IN
57211: IFFALSE 57243
// begin result := EnemyInRange ( i , 22 ) ;
57213: LD_ADDR_VAR 0 2
57217: PUSH
57218: LD_VAR 0 3
57222: PPUSH
57223: LD_INT 22
57225: PPUSH
57226: CALL 54832 0 2
57230: ST_TO_ADDR
// if result then
57231: LD_VAR 0 2
57235: IFFALSE 57241
// exit ;
57237: POP
57238: POP
57239: GO 57245
// end ;
57241: GO 57210
57243: POP
57244: POP
// end ;
57245: LD_VAR 0 2
57249: RET
// export function FilterByTag ( units , tag ) ; begin
57250: LD_INT 0
57252: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57253: LD_ADDR_VAR 0 3
57257: PUSH
57258: LD_VAR 0 1
57262: PPUSH
57263: LD_INT 120
57265: PUSH
57266: LD_VAR 0 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PPUSH
57275: CALL_OW 72
57279: ST_TO_ADDR
// end ;
57280: LD_VAR 0 3
57284: RET
// export function IsDriver ( un ) ; begin
57285: LD_INT 0
57287: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57288: LD_ADDR_VAR 0 2
57292: PUSH
57293: LD_VAR 0 1
57297: PUSH
57298: LD_INT 55
57300: PUSH
57301: EMPTY
57302: LIST
57303: PPUSH
57304: CALL_OW 69
57308: IN
57309: ST_TO_ADDR
// end ;
57310: LD_VAR 0 2
57314: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57315: LD_INT 0
57317: PPUSH
57318: PPUSH
// list := [ ] ;
57319: LD_ADDR_VAR 0 5
57323: PUSH
57324: EMPTY
57325: ST_TO_ADDR
// case d of 0 :
57326: LD_VAR 0 3
57330: PUSH
57331: LD_INT 0
57333: DOUBLE
57334: EQUAL
57335: IFTRUE 57339
57337: GO 57472
57339: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57340: LD_ADDR_VAR 0 5
57344: PUSH
57345: LD_VAR 0 1
57349: PUSH
57350: LD_INT 4
57352: MINUS
57353: PUSH
57354: LD_VAR 0 2
57358: PUSH
57359: LD_INT 4
57361: MINUS
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_INT 3
57378: MINUS
57379: PUSH
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: PUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_INT 4
57400: PLUS
57401: PUSH
57402: LD_VAR 0 2
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: PUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 3
57422: PLUS
57423: PUSH
57424: LD_VAR 0 2
57428: PUSH
57429: LD_INT 3
57431: PLUS
57432: PUSH
57433: LD_INT 5
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: PUSH
57441: LD_VAR 0 1
57445: PUSH
57446: LD_VAR 0 2
57450: PUSH
57451: LD_INT 4
57453: PLUS
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// end ; 1 :
57470: GO 58170
57472: LD_INT 1
57474: DOUBLE
57475: EQUAL
57476: IFTRUE 57480
57478: GO 57613
57480: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57481: LD_ADDR_VAR 0 5
57485: PUSH
57486: LD_VAR 0 1
57490: PUSH
57491: LD_VAR 0 2
57495: PUSH
57496: LD_INT 4
57498: MINUS
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_INT 3
57515: MINUS
57516: PUSH
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 3
57524: MINUS
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: PUSH
57534: LD_VAR 0 1
57538: PUSH
57539: LD_INT 4
57541: MINUS
57542: PUSH
57543: LD_VAR 0 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_VAR 0 1
57560: PUSH
57561: LD_VAR 0 2
57565: PUSH
57566: LD_INT 3
57568: PLUS
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: PUSH
57578: LD_VAR 0 1
57582: PUSH
57583: LD_INT 4
57585: PLUS
57586: PUSH
57587: LD_VAR 0 2
57591: PUSH
57592: LD_INT 4
57594: PLUS
57595: PUSH
57596: LD_INT 5
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// end ; 2 :
57611: GO 58170
57613: LD_INT 2
57615: DOUBLE
57616: EQUAL
57617: IFTRUE 57621
57619: GO 57750
57621: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57622: LD_ADDR_VAR 0 5
57626: PUSH
57627: LD_VAR 0 1
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 3
57639: MINUS
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 4
57656: PLUS
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_INT 4
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 1
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_INT 4
57683: PLUS
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: PUSH
57693: LD_VAR 0 1
57697: PUSH
57698: LD_INT 3
57700: MINUS
57701: PUSH
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: PUSH
57715: LD_VAR 0 1
57719: PUSH
57720: LD_INT 4
57722: MINUS
57723: PUSH
57724: LD_VAR 0 2
57728: PUSH
57729: LD_INT 4
57731: MINUS
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// end ; 3 :
57748: GO 58170
57750: LD_INT 3
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57758
57756: GO 57891
57758: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57759: LD_ADDR_VAR 0 5
57763: PUSH
57764: LD_VAR 0 1
57768: PUSH
57769: LD_INT 3
57771: PLUS
57772: PUSH
57773: LD_VAR 0 2
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: PUSH
57786: LD_VAR 0 1
57790: PUSH
57791: LD_INT 4
57793: PLUS
57794: PUSH
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 4
57802: PLUS
57803: PUSH
57804: LD_INT 5
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: PUSH
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 4
57819: MINUS
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: PUSH
57834: LD_VAR 0 1
57838: PUSH
57839: LD_VAR 0 2
57843: PUSH
57844: LD_INT 4
57846: MINUS
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: PUSH
57856: LD_VAR 0 1
57860: PUSH
57861: LD_INT 3
57863: MINUS
57864: PUSH
57865: LD_VAR 0 2
57869: PUSH
57870: LD_INT 3
57872: MINUS
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// end ; 4 :
57889: GO 58170
57891: LD_INT 4
57893: DOUBLE
57894: EQUAL
57895: IFTRUE 57899
57897: GO 58032
57899: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57900: LD_ADDR_VAR 0 5
57904: PUSH
57905: LD_VAR 0 1
57909: PUSH
57910: LD_VAR 0 2
57914: PUSH
57915: LD_INT 4
57917: PLUS
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: PUSH
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 3
57934: PLUS
57935: PUSH
57936: LD_VAR 0 2
57940: PUSH
57941: LD_INT 3
57943: PLUS
57944: PUSH
57945: LD_INT 5
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_INT 4
57960: PLUS
57961: PUSH
57962: LD_VAR 0 2
57966: PUSH
57967: LD_INT 4
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: LD_VAR 0 1
57979: PUSH
57980: LD_VAR 0 2
57984: PUSH
57985: LD_INT 3
57987: MINUS
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: PUSH
57997: LD_VAR 0 1
58001: PUSH
58002: LD_INT 4
58004: MINUS
58005: PUSH
58006: LD_VAR 0 2
58010: PUSH
58011: LD_INT 4
58013: MINUS
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: ST_TO_ADDR
// end ; 5 :
58030: GO 58170
58032: LD_INT 5
58034: DOUBLE
58035: EQUAL
58036: IFTRUE 58040
58038: GO 58169
58040: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58041: LD_ADDR_VAR 0 5
58045: PUSH
58046: LD_VAR 0 1
58050: PUSH
58051: LD_INT 4
58053: MINUS
58054: PUSH
58055: LD_VAR 0 2
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 1
58072: PUSH
58073: LD_VAR 0 2
58077: PUSH
58078: LD_INT 4
58080: MINUS
58081: PUSH
58082: LD_INT 3
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: PUSH
58090: LD_VAR 0 1
58094: PUSH
58095: LD_INT 4
58097: PLUS
58098: PUSH
58099: LD_VAR 0 2
58103: PUSH
58104: LD_INT 4
58106: PLUS
58107: PUSH
58108: LD_INT 5
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: PUSH
58116: LD_VAR 0 1
58120: PUSH
58121: LD_INT 3
58123: PLUS
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: PUSH
58138: LD_VAR 0 1
58142: PUSH
58143: LD_VAR 0 2
58147: PUSH
58148: LD_INT 3
58150: PLUS
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// end ; end ;
58167: GO 58170
58169: POP
// result := list ;
58170: LD_ADDR_VAR 0 4
58174: PUSH
58175: LD_VAR 0 5
58179: ST_TO_ADDR
// end ;
58180: LD_VAR 0 4
58184: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58185: LD_INT 0
58187: PPUSH
58188: PPUSH
58189: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58190: LD_VAR 0 1
58194: NOT
58195: PUSH
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: IN
58219: NOT
58220: OR
58221: IFFALSE 58225
// exit ;
58223: GO 58308
// tmp := [ ] ;
58225: LD_ADDR_VAR 0 5
58229: PUSH
58230: EMPTY
58231: ST_TO_ADDR
// for i in units do
58232: LD_ADDR_VAR 0 4
58236: PUSH
58237: LD_VAR 0 1
58241: PUSH
58242: FOR_IN
58243: IFFALSE 58277
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58245: LD_ADDR_VAR 0 5
58249: PUSH
58250: LD_VAR 0 5
58254: PPUSH
58255: LD_VAR 0 4
58259: PPUSH
58260: LD_VAR 0 2
58264: PPUSH
58265: CALL_OW 259
58269: PPUSH
58270: CALL 59669 0 2
58274: ST_TO_ADDR
58275: GO 58242
58277: POP
58278: POP
// if not tmp then
58279: LD_VAR 0 5
58283: NOT
58284: IFFALSE 58288
// exit ;
58286: GO 58308
// result := SortListByListDesc ( units , tmp ) ;
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 5
58302: PPUSH
58303: CALL_OW 77
58307: ST_TO_ADDR
// end ;
58308: LD_VAR 0 3
58312: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58313: LD_INT 0
58315: PPUSH
58316: PPUSH
58317: PPUSH
// result := false ;
58318: LD_ADDR_VAR 0 3
58322: PUSH
58323: LD_INT 0
58325: ST_TO_ADDR
// if not building then
58326: LD_VAR 0 2
58330: NOT
58331: IFFALSE 58335
// exit ;
58333: GO 58473
// x := GetX ( building ) ;
58335: LD_ADDR_VAR 0 4
58339: PUSH
58340: LD_VAR 0 2
58344: PPUSH
58345: CALL_OW 250
58349: ST_TO_ADDR
// y := GetY ( building ) ;
58350: LD_ADDR_VAR 0 5
58354: PUSH
58355: LD_VAR 0 2
58359: PPUSH
58360: CALL_OW 251
58364: ST_TO_ADDR
// if not x or not y then
58365: LD_VAR 0 4
58369: NOT
58370: PUSH
58371: LD_VAR 0 5
58375: NOT
58376: OR
58377: IFFALSE 58381
// exit ;
58379: GO 58473
// if GetTaskList ( unit ) then
58381: LD_VAR 0 1
58385: PPUSH
58386: CALL_OW 437
58390: IFFALSE 58473
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58392: LD_STRING e
58394: PUSH
58395: LD_VAR 0 1
58399: PPUSH
58400: CALL_OW 437
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: PUSH
58409: LD_INT 1
58411: ARRAY
58412: EQUAL
58413: PUSH
58414: LD_VAR 0 4
58418: PUSH
58419: LD_VAR 0 1
58423: PPUSH
58424: CALL_OW 437
58428: PUSH
58429: LD_INT 1
58431: ARRAY
58432: PUSH
58433: LD_INT 2
58435: ARRAY
58436: EQUAL
58437: AND
58438: PUSH
58439: LD_VAR 0 5
58443: PUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: CALL_OW 437
58453: PUSH
58454: LD_INT 1
58456: ARRAY
58457: PUSH
58458: LD_INT 3
58460: ARRAY
58461: EQUAL
58462: AND
58463: IFFALSE 58473
// result := true end ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_INT 1
58472: ST_TO_ADDR
// end ;
58473: LD_VAR 0 3
58477: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58478: LD_INT 0
58480: PPUSH
// result := false ;
58481: LD_ADDR_VAR 0 4
58485: PUSH
58486: LD_INT 0
58488: ST_TO_ADDR
// if GetTaskList ( unit ) then
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL_OW 437
58498: IFFALSE 58581
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58500: LD_STRING M
58502: PUSH
58503: LD_VAR 0 1
58507: PPUSH
58508: CALL_OW 437
58512: PUSH
58513: LD_INT 1
58515: ARRAY
58516: PUSH
58517: LD_INT 1
58519: ARRAY
58520: EQUAL
58521: PUSH
58522: LD_VAR 0 2
58526: PUSH
58527: LD_VAR 0 1
58531: PPUSH
58532: CALL_OW 437
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PUSH
58541: LD_INT 2
58543: ARRAY
58544: EQUAL
58545: AND
58546: PUSH
58547: LD_VAR 0 3
58551: PUSH
58552: LD_VAR 0 1
58556: PPUSH
58557: CALL_OW 437
58561: PUSH
58562: LD_INT 1
58564: ARRAY
58565: PUSH
58566: LD_INT 3
58568: ARRAY
58569: EQUAL
58570: AND
58571: IFFALSE 58581
// result := true ;
58573: LD_ADDR_VAR 0 4
58577: PUSH
58578: LD_INT 1
58580: ST_TO_ADDR
// end ; end ;
58581: LD_VAR 0 4
58585: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58586: LD_INT 0
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
// if not unit or not area then
58592: LD_VAR 0 1
58596: NOT
58597: PUSH
58598: LD_VAR 0 2
58602: NOT
58603: OR
58604: IFFALSE 58608
// exit ;
58606: GO 58772
// tmp := AreaToList ( area , i ) ;
58608: LD_ADDR_VAR 0 6
58612: PUSH
58613: LD_VAR 0 2
58617: PPUSH
58618: LD_VAR 0 5
58622: PPUSH
58623: CALL_OW 517
58627: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58628: LD_ADDR_VAR 0 5
58632: PUSH
58633: DOUBLE
58634: LD_INT 1
58636: DEC
58637: ST_TO_ADDR
58638: LD_VAR 0 6
58642: PUSH
58643: LD_INT 1
58645: ARRAY
58646: PUSH
58647: FOR_TO
58648: IFFALSE 58770
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58650: LD_ADDR_VAR 0 7
58654: PUSH
58655: LD_VAR 0 6
58659: PUSH
58660: LD_INT 1
58662: ARRAY
58663: PUSH
58664: LD_VAR 0 5
58668: ARRAY
58669: PUSH
58670: LD_VAR 0 6
58674: PUSH
58675: LD_INT 2
58677: ARRAY
58678: PUSH
58679: LD_VAR 0 5
58683: ARRAY
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58689: LD_VAR 0 7
58693: PUSH
58694: LD_INT 1
58696: ARRAY
58697: PPUSH
58698: LD_VAR 0 7
58702: PUSH
58703: LD_INT 2
58705: ARRAY
58706: PPUSH
58707: CALL_OW 428
58711: PUSH
58712: LD_INT 0
58714: EQUAL
58715: IFFALSE 58768
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_VAR 0 7
58726: PUSH
58727: LD_INT 1
58729: ARRAY
58730: PPUSH
58731: LD_VAR 0 7
58735: PUSH
58736: LD_INT 2
58738: ARRAY
58739: PPUSH
58740: LD_VAR 0 3
58744: PPUSH
58745: CALL_OW 48
// result := IsPlaced ( unit ) ;
58749: LD_ADDR_VAR 0 4
58753: PUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 305
58763: ST_TO_ADDR
// exit ;
58764: POP
58765: POP
58766: GO 58772
// end ; end ;
58768: GO 58647
58770: POP
58771: POP
// end ;
58772: LD_VAR 0 4
58776: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
58781: PPUSH
// if not side or side > 8 then
58782: LD_VAR 0 1
58786: NOT
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: LD_INT 8
58795: GREATER
58796: OR
58797: IFFALSE 58801
// exit ;
58799: GO 58988
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58801: LD_ADDR_VAR 0 4
58805: PUSH
58806: LD_INT 22
58808: PUSH
58809: LD_VAR 0 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 21
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PPUSH
58832: CALL_OW 69
58836: ST_TO_ADDR
// if not tmp then
58837: LD_VAR 0 4
58841: NOT
58842: IFFALSE 58846
// exit ;
58844: GO 58988
// enable_addtolog := true ;
58846: LD_ADDR_OWVAR 81
58850: PUSH
58851: LD_INT 1
58853: ST_TO_ADDR
// AddToLog ( [ ) ;
58854: LD_STRING [
58856: PPUSH
58857: CALL_OW 561
// for i in tmp do
58861: LD_ADDR_VAR 0 3
58865: PUSH
58866: LD_VAR 0 4
58870: PUSH
58871: FOR_IN
58872: IFFALSE 58979
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58874: LD_STRING [
58876: PUSH
58877: LD_VAR 0 3
58881: PPUSH
58882: CALL_OW 266
58886: STR
58887: PUSH
58888: LD_STRING , 
58890: STR
58891: PUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: CALL_OW 250
58901: STR
58902: PUSH
58903: LD_STRING , 
58905: STR
58906: PUSH
58907: LD_VAR 0 3
58911: PPUSH
58912: CALL_OW 251
58916: STR
58917: PUSH
58918: LD_STRING , 
58920: STR
58921: PUSH
58922: LD_VAR 0 3
58926: PPUSH
58927: CALL_OW 254
58931: STR
58932: PUSH
58933: LD_STRING , 
58935: STR
58936: PUSH
58937: LD_VAR 0 3
58941: PPUSH
58942: LD_INT 1
58944: PPUSH
58945: CALL_OW 268
58949: STR
58950: PUSH
58951: LD_STRING , 
58953: STR
58954: PUSH
58955: LD_VAR 0 3
58959: PPUSH
58960: LD_INT 2
58962: PPUSH
58963: CALL_OW 268
58967: STR
58968: PUSH
58969: LD_STRING ],
58971: STR
58972: PPUSH
58973: CALL_OW 561
// end ;
58977: GO 58871
58979: POP
58980: POP
// AddToLog ( ]; ) ;
58981: LD_STRING ];
58983: PPUSH
58984: CALL_OW 561
// end ;
58988: LD_VAR 0 2
58992: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58993: LD_INT 0
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
58999: PPUSH
// if not area or not rate or not max then
59000: LD_VAR 0 1
59004: NOT
59005: PUSH
59006: LD_VAR 0 2
59010: NOT
59011: OR
59012: PUSH
59013: LD_VAR 0 4
59017: NOT
59018: OR
59019: IFFALSE 59023
// exit ;
59021: GO 59212
// while 1 do
59023: LD_INT 1
59025: IFFALSE 59212
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59027: LD_ADDR_VAR 0 9
59031: PUSH
59032: LD_VAR 0 1
59036: PPUSH
59037: LD_INT 1
59039: PPUSH
59040: CALL_OW 287
59044: PUSH
59045: LD_INT 10
59047: MUL
59048: ST_TO_ADDR
// r := rate / 10 ;
59049: LD_ADDR_VAR 0 7
59053: PUSH
59054: LD_VAR 0 2
59058: PUSH
59059: LD_INT 10
59061: DIVREAL
59062: ST_TO_ADDR
// time := 1 1$00 ;
59063: LD_ADDR_VAR 0 8
59067: PUSH
59068: LD_INT 2100
59070: ST_TO_ADDR
// if amount < min then
59071: LD_VAR 0 9
59075: PUSH
59076: LD_VAR 0 3
59080: LESS
59081: IFFALSE 59099
// r := r * 2 else
59083: LD_ADDR_VAR 0 7
59087: PUSH
59088: LD_VAR 0 7
59092: PUSH
59093: LD_INT 2
59095: MUL
59096: ST_TO_ADDR
59097: GO 59125
// if amount > max then
59099: LD_VAR 0 9
59103: PUSH
59104: LD_VAR 0 4
59108: GREATER
59109: IFFALSE 59125
// r := r / 2 ;
59111: LD_ADDR_VAR 0 7
59115: PUSH
59116: LD_VAR 0 7
59120: PUSH
59121: LD_INT 2
59123: DIVREAL
59124: ST_TO_ADDR
// time := time / r ;
59125: LD_ADDR_VAR 0 8
59129: PUSH
59130: LD_VAR 0 8
59134: PUSH
59135: LD_VAR 0 7
59139: DIVREAL
59140: ST_TO_ADDR
// if time < 0 then
59141: LD_VAR 0 8
59145: PUSH
59146: LD_INT 0
59148: LESS
59149: IFFALSE 59166
// time := time * - 1 ;
59151: LD_ADDR_VAR 0 8
59155: PUSH
59156: LD_VAR 0 8
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: MUL
59165: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59166: LD_VAR 0 8
59170: PUSH
59171: LD_INT 35
59173: PPUSH
59174: LD_INT 875
59176: PPUSH
59177: CALL_OW 12
59181: PLUS
59182: PPUSH
59183: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59187: LD_INT 1
59189: PPUSH
59190: LD_INT 5
59192: PPUSH
59193: CALL_OW 12
59197: PPUSH
59198: LD_VAR 0 1
59202: PPUSH
59203: LD_INT 1
59205: PPUSH
59206: CALL_OW 55
// end ;
59210: GO 59023
// end ;
59212: LD_VAR 0 5
59216: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59217: LD_INT 0
59219: PPUSH
59220: PPUSH
59221: PPUSH
59222: PPUSH
59223: PPUSH
59224: PPUSH
59225: PPUSH
59226: PPUSH
// if not turrets or not factories then
59227: LD_VAR 0 1
59231: NOT
59232: PUSH
59233: LD_VAR 0 2
59237: NOT
59238: OR
59239: IFFALSE 59243
// exit ;
59241: GO 59550
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59243: LD_ADDR_VAR 0 10
59247: PUSH
59248: LD_INT 5
59250: PUSH
59251: LD_INT 6
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 4
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 24
59285: PUSH
59286: LD_INT 25
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 23
59295: PUSH
59296: LD_INT 27
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 42
59309: PUSH
59310: LD_INT 43
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 44
59319: PUSH
59320: LD_INT 46
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 45
59329: PUSH
59330: LD_INT 47
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// result := [ ] ;
59347: LD_ADDR_VAR 0 3
59351: PUSH
59352: EMPTY
59353: ST_TO_ADDR
// for i in turrets do
59354: LD_ADDR_VAR 0 4
59358: PUSH
59359: LD_VAR 0 1
59363: PUSH
59364: FOR_IN
59365: IFFALSE 59548
// begin nat := GetNation ( i ) ;
59367: LD_ADDR_VAR 0 7
59371: PUSH
59372: LD_VAR 0 4
59376: PPUSH
59377: CALL_OW 248
59381: ST_TO_ADDR
// weapon := 0 ;
59382: LD_ADDR_VAR 0 8
59386: PUSH
59387: LD_INT 0
59389: ST_TO_ADDR
// if not nat then
59390: LD_VAR 0 7
59394: NOT
59395: IFFALSE 59399
// continue ;
59397: GO 59364
// for j in list [ nat ] do
59399: LD_ADDR_VAR 0 5
59403: PUSH
59404: LD_VAR 0 10
59408: PUSH
59409: LD_VAR 0 7
59413: ARRAY
59414: PUSH
59415: FOR_IN
59416: IFFALSE 59457
// if GetBWeapon ( i ) = j [ 1 ] then
59418: LD_VAR 0 4
59422: PPUSH
59423: CALL_OW 269
59427: PUSH
59428: LD_VAR 0 5
59432: PUSH
59433: LD_INT 1
59435: ARRAY
59436: EQUAL
59437: IFFALSE 59455
// begin weapon := j [ 2 ] ;
59439: LD_ADDR_VAR 0 8
59443: PUSH
59444: LD_VAR 0 5
59448: PUSH
59449: LD_INT 2
59451: ARRAY
59452: ST_TO_ADDR
// break ;
59453: GO 59457
// end ;
59455: GO 59415
59457: POP
59458: POP
// if not weapon then
59459: LD_VAR 0 8
59463: NOT
59464: IFFALSE 59468
// continue ;
59466: GO 59364
// for k in factories do
59468: LD_ADDR_VAR 0 6
59472: PUSH
59473: LD_VAR 0 2
59477: PUSH
59478: FOR_IN
59479: IFFALSE 59544
// begin weapons := AvailableWeaponList ( k ) ;
59481: LD_ADDR_VAR 0 9
59485: PUSH
59486: LD_VAR 0 6
59490: PPUSH
59491: CALL_OW 478
59495: ST_TO_ADDR
// if not weapons then
59496: LD_VAR 0 9
59500: NOT
59501: IFFALSE 59505
// continue ;
59503: GO 59478
// if weapon in weapons then
59505: LD_VAR 0 8
59509: PUSH
59510: LD_VAR 0 9
59514: IN
59515: IFFALSE 59542
// begin result := [ i , weapon ] ;
59517: LD_ADDR_VAR 0 3
59521: PUSH
59522: LD_VAR 0 4
59526: PUSH
59527: LD_VAR 0 8
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// exit ;
59536: POP
59537: POP
59538: POP
59539: POP
59540: GO 59550
// end ; end ;
59542: GO 59478
59544: POP
59545: POP
// end ;
59546: GO 59364
59548: POP
59549: POP
// end ;
59550: LD_VAR 0 3
59554: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59555: LD_INT 0
59557: PPUSH
// if not side or side > 8 then
59558: LD_VAR 0 3
59562: NOT
59563: PUSH
59564: LD_VAR 0 3
59568: PUSH
59569: LD_INT 8
59571: GREATER
59572: OR
59573: IFFALSE 59577
// exit ;
59575: GO 59636
// if not range then
59577: LD_VAR 0 4
59581: NOT
59582: IFFALSE 59593
// range := - 12 ;
59584: LD_ADDR_VAR 0 4
59588: PUSH
59589: LD_INT 12
59591: NEG
59592: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59593: LD_VAR 0 1
59597: PPUSH
59598: LD_VAR 0 2
59602: PPUSH
59603: LD_VAR 0 3
59607: PPUSH
59608: LD_VAR 0 4
59612: PPUSH
59613: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59617: LD_VAR 0 1
59621: PPUSH
59622: LD_VAR 0 2
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: CALL_OW 331
// end ;
59636: LD_VAR 0 5
59640: RET
// export function Video ( mode ) ; begin
59641: LD_INT 0
59643: PPUSH
// ingame_video = mode ;
59644: LD_ADDR_OWVAR 52
59648: PUSH
59649: LD_VAR 0 1
59653: ST_TO_ADDR
// interface_hidden = mode ;
59654: LD_ADDR_OWVAR 54
59658: PUSH
59659: LD_VAR 0 1
59663: ST_TO_ADDR
// end ;
59664: LD_VAR 0 2
59668: RET
// export function Join ( array , element ) ; begin
59669: LD_INT 0
59671: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59672: LD_ADDR_VAR 0 3
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: LD_VAR 0 1
59686: PUSH
59687: LD_INT 1
59689: PLUS
59690: PPUSH
59691: LD_VAR 0 2
59695: PPUSH
59696: CALL_OW 1
59700: ST_TO_ADDR
// end ;
59701: LD_VAR 0 3
59705: RET
// export function JoinUnion ( array , element ) ; begin
59706: LD_INT 0
59708: PPUSH
// result := array union element ;
59709: LD_ADDR_VAR 0 3
59713: PUSH
59714: LD_VAR 0 1
59718: PUSH
59719: LD_VAR 0 2
59723: UNION
59724: ST_TO_ADDR
// end ;
59725: LD_VAR 0 3
59729: RET
// export function GetBehemoths ( side ) ; begin
59730: LD_INT 0
59732: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59733: LD_ADDR_VAR 0 2
59737: PUSH
59738: LD_INT 22
59740: PUSH
59741: LD_VAR 0 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 31
59752: PUSH
59753: LD_INT 25
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PPUSH
59764: CALL_OW 69
59768: ST_TO_ADDR
// end ;
59769: LD_VAR 0 2
59773: RET
// export function Shuffle ( array ) ; var i , index ; begin
59774: LD_INT 0
59776: PPUSH
59777: PPUSH
59778: PPUSH
// result := [ ] ;
59779: LD_ADDR_VAR 0 2
59783: PUSH
59784: EMPTY
59785: ST_TO_ADDR
// if not array then
59786: LD_VAR 0 1
59790: NOT
59791: IFFALSE 59795
// exit ;
59793: GO 59894
// Randomize ;
59795: CALL_OW 10
// for i = array downto 1 do
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: DOUBLE
59805: LD_VAR 0 1
59809: INC
59810: ST_TO_ADDR
59811: LD_INT 1
59813: PUSH
59814: FOR_DOWNTO
59815: IFFALSE 59892
// begin index := rand ( 1 , array ) ;
59817: LD_ADDR_VAR 0 4
59821: PUSH
59822: LD_INT 1
59824: PPUSH
59825: LD_VAR 0 1
59829: PPUSH
59830: CALL_OW 12
59834: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59835: LD_ADDR_VAR 0 2
59839: PUSH
59840: LD_VAR 0 2
59844: PPUSH
59845: LD_VAR 0 2
59849: PUSH
59850: LD_INT 1
59852: PLUS
59853: PPUSH
59854: LD_VAR 0 1
59858: PUSH
59859: LD_VAR 0 4
59863: ARRAY
59864: PPUSH
59865: CALL_OW 2
59869: ST_TO_ADDR
// array := Delete ( array , index ) ;
59870: LD_ADDR_VAR 0 1
59874: PUSH
59875: LD_VAR 0 1
59879: PPUSH
59880: LD_VAR 0 4
59884: PPUSH
59885: CALL_OW 3
59889: ST_TO_ADDR
// end ;
59890: GO 59814
59892: POP
59893: POP
// end ;
59894: LD_VAR 0 2
59898: RET
// export function GetBaseMaterials ( base ) ; begin
59899: LD_INT 0
59901: PPUSH
// result := [ 0 , 0 , 0 ] ;
59902: LD_ADDR_VAR 0 2
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// if not base then
59921: LD_VAR 0 1
59925: NOT
59926: IFFALSE 59930
// exit ;
59928: GO 59979
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59930: LD_ADDR_VAR 0 2
59934: PUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: LD_INT 1
59942: PPUSH
59943: CALL_OW 275
59947: PUSH
59948: LD_VAR 0 1
59952: PPUSH
59953: LD_INT 2
59955: PPUSH
59956: CALL_OW 275
59960: PUSH
59961: LD_VAR 0 1
59965: PPUSH
59966: LD_INT 3
59968: PPUSH
59969: CALL_OW 275
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// end ;
59979: LD_VAR 0 2
59983: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59984: LD_INT 0
59986: PPUSH
59987: PPUSH
// result := array ;
59988: LD_ADDR_VAR 0 3
59992: PUSH
59993: LD_VAR 0 1
59997: ST_TO_ADDR
// if size >= result then
59998: LD_VAR 0 2
60002: PUSH
60003: LD_VAR 0 3
60007: GREATEREQUAL
60008: IFFALSE 60012
// exit ;
60010: GO 60062
// if size then
60012: LD_VAR 0 2
60016: IFFALSE 60062
// for i := array downto size do
60018: LD_ADDR_VAR 0 4
60022: PUSH
60023: DOUBLE
60024: LD_VAR 0 1
60028: INC
60029: ST_TO_ADDR
60030: LD_VAR 0 2
60034: PUSH
60035: FOR_DOWNTO
60036: IFFALSE 60060
// result := Delete ( result , result ) ;
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: LD_VAR 0 3
60047: PPUSH
60048: LD_VAR 0 3
60052: PPUSH
60053: CALL_OW 3
60057: ST_TO_ADDR
60058: GO 60035
60060: POP
60061: POP
// end ;
60062: LD_VAR 0 3
60066: RET
// export function ComExit ( unit ) ; var tmp ; begin
60067: LD_INT 0
60069: PPUSH
60070: PPUSH
// if not IsInUnit ( unit ) then
60071: LD_VAR 0 1
60075: PPUSH
60076: CALL_OW 310
60080: NOT
60081: IFFALSE 60085
// exit ;
60083: GO 60145
// tmp := IsInUnit ( unit ) ;
60085: LD_ADDR_VAR 0 3
60089: PUSH
60090: LD_VAR 0 1
60094: PPUSH
60095: CALL_OW 310
60099: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60100: LD_VAR 0 3
60104: PPUSH
60105: CALL_OW 247
60109: PUSH
60110: LD_INT 2
60112: EQUAL
60113: IFFALSE 60126
// ComExitVehicle ( unit ) else
60115: LD_VAR 0 1
60119: PPUSH
60120: CALL_OW 121
60124: GO 60135
// ComExitBuilding ( unit ) ;
60126: LD_VAR 0 1
60130: PPUSH
60131: CALL_OW 122
// result := tmp ;
60135: LD_ADDR_VAR 0 2
60139: PUSH
60140: LD_VAR 0 3
60144: ST_TO_ADDR
// end ;
60145: LD_VAR 0 2
60149: RET
// export function ComExitAll ( units ) ; var i ; begin
60150: LD_INT 0
60152: PPUSH
60153: PPUSH
// if not units then
60154: LD_VAR 0 1
60158: NOT
60159: IFFALSE 60163
// exit ;
60161: GO 60189
// for i in units do
60163: LD_ADDR_VAR 0 3
60167: PUSH
60168: LD_VAR 0 1
60172: PUSH
60173: FOR_IN
60174: IFFALSE 60187
// ComExit ( i ) ;
60176: LD_VAR 0 3
60180: PPUSH
60181: CALL 60067 0 1
60185: GO 60173
60187: POP
60188: POP
// end ;
60189: LD_VAR 0 2
60193: RET
// export function ResetHc ; begin
60194: LD_INT 0
60196: PPUSH
// InitHc ;
60197: CALL_OW 19
// hc_importance := 0 ;
60201: LD_ADDR_OWVAR 32
60205: PUSH
60206: LD_INT 0
60208: ST_TO_ADDR
// end ;
60209: LD_VAR 0 1
60213: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60214: LD_INT 0
60216: PPUSH
60217: PPUSH
60218: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60219: LD_ADDR_VAR 0 6
60223: PUSH
60224: LD_VAR 0 1
60228: PUSH
60229: LD_VAR 0 3
60233: PLUS
60234: PUSH
60235: LD_INT 2
60237: DIV
60238: ST_TO_ADDR
// if _x < 0 then
60239: LD_VAR 0 6
60243: PUSH
60244: LD_INT 0
60246: LESS
60247: IFFALSE 60264
// _x := _x * - 1 ;
60249: LD_ADDR_VAR 0 6
60253: PUSH
60254: LD_VAR 0 6
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: MUL
60263: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60264: LD_ADDR_VAR 0 7
60268: PUSH
60269: LD_VAR 0 2
60273: PUSH
60274: LD_VAR 0 4
60278: PLUS
60279: PUSH
60280: LD_INT 2
60282: DIV
60283: ST_TO_ADDR
// if _y < 0 then
60284: LD_VAR 0 7
60288: PUSH
60289: LD_INT 0
60291: LESS
60292: IFFALSE 60309
// _y := _y * - 1 ;
60294: LD_ADDR_VAR 0 7
60298: PUSH
60299: LD_VAR 0 7
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: MUL
60308: ST_TO_ADDR
// result := [ _x , _y ] ;
60309: LD_ADDR_VAR 0 5
60313: PUSH
60314: LD_VAR 0 6
60318: PUSH
60319: LD_VAR 0 7
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// end ;
60328: LD_VAR 0 5
60332: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60333: LD_INT 0
60335: PPUSH
60336: PPUSH
60337: PPUSH
60338: PPUSH
// task := GetTaskList ( unit ) ;
60339: LD_ADDR_VAR 0 7
60343: PUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: CALL_OW 437
60353: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60354: LD_VAR 0 7
60358: NOT
60359: PUSH
60360: LD_VAR 0 1
60364: PPUSH
60365: LD_VAR 0 2
60369: PPUSH
60370: CALL_OW 308
60374: NOT
60375: AND
60376: IFFALSE 60380
// exit ;
60378: GO 60498
// if IsInArea ( unit , area ) then
60380: LD_VAR 0 1
60384: PPUSH
60385: LD_VAR 0 2
60389: PPUSH
60390: CALL_OW 308
60394: IFFALSE 60412
// begin ComMoveToArea ( unit , goAway ) ;
60396: LD_VAR 0 1
60400: PPUSH
60401: LD_VAR 0 3
60405: PPUSH
60406: CALL_OW 113
// exit ;
60410: GO 60498
// end ; if task [ 1 ] [ 1 ] <> M then
60412: LD_VAR 0 7
60416: PUSH
60417: LD_INT 1
60419: ARRAY
60420: PUSH
60421: LD_INT 1
60423: ARRAY
60424: PUSH
60425: LD_STRING M
60427: NONEQUAL
60428: IFFALSE 60432
// exit ;
60430: GO 60498
// x := task [ 1 ] [ 2 ] ;
60432: LD_ADDR_VAR 0 5
60436: PUSH
60437: LD_VAR 0 7
60441: PUSH
60442: LD_INT 1
60444: ARRAY
60445: PUSH
60446: LD_INT 2
60448: ARRAY
60449: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60450: LD_ADDR_VAR 0 6
60454: PUSH
60455: LD_VAR 0 7
60459: PUSH
60460: LD_INT 1
60462: ARRAY
60463: PUSH
60464: LD_INT 3
60466: ARRAY
60467: ST_TO_ADDR
// if InArea ( x , y , area ) then
60468: LD_VAR 0 5
60472: PPUSH
60473: LD_VAR 0 6
60477: PPUSH
60478: LD_VAR 0 2
60482: PPUSH
60483: CALL_OW 309
60487: IFFALSE 60498
// ComStop ( unit ) ;
60489: LD_VAR 0 1
60493: PPUSH
60494: CALL_OW 141
// end ;
60498: LD_VAR 0 4
60502: RET
// export function Abs ( value ) ; begin
60503: LD_INT 0
60505: PPUSH
// result := value ;
60506: LD_ADDR_VAR 0 2
60510: PUSH
60511: LD_VAR 0 1
60515: ST_TO_ADDR
// if value < 0 then
60516: LD_VAR 0 1
60520: PUSH
60521: LD_INT 0
60523: LESS
60524: IFFALSE 60541
// result := value * - 1 ;
60526: LD_ADDR_VAR 0 2
60530: PUSH
60531: LD_VAR 0 1
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: MUL
60540: ST_TO_ADDR
// end ;
60541: LD_VAR 0 2
60545: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60546: LD_INT 0
60548: PPUSH
60549: PPUSH
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
// if not unit or not building then
60556: LD_VAR 0 1
60560: NOT
60561: PUSH
60562: LD_VAR 0 2
60566: NOT
60567: OR
60568: IFFALSE 60572
// exit ;
60570: GO 60798
// x := GetX ( building ) ;
60572: LD_ADDR_VAR 0 4
60576: PUSH
60577: LD_VAR 0 2
60581: PPUSH
60582: CALL_OW 250
60586: ST_TO_ADDR
// y := GetY ( building ) ;
60587: LD_ADDR_VAR 0 6
60591: PUSH
60592: LD_VAR 0 2
60596: PPUSH
60597: CALL_OW 251
60601: ST_TO_ADDR
// d := GetDir ( building ) ;
60602: LD_ADDR_VAR 0 8
60606: PUSH
60607: LD_VAR 0 2
60611: PPUSH
60612: CALL_OW 254
60616: ST_TO_ADDR
// r := 4 ;
60617: LD_ADDR_VAR 0 9
60621: PUSH
60622: LD_INT 4
60624: ST_TO_ADDR
// for i := 1 to 5 do
60625: LD_ADDR_VAR 0 10
60629: PUSH
60630: DOUBLE
60631: LD_INT 1
60633: DEC
60634: ST_TO_ADDR
60635: LD_INT 5
60637: PUSH
60638: FOR_TO
60639: IFFALSE 60796
// begin _x := ShiftX ( x , d , r + i ) ;
60641: LD_ADDR_VAR 0 5
60645: PUSH
60646: LD_VAR 0 4
60650: PPUSH
60651: LD_VAR 0 8
60655: PPUSH
60656: LD_VAR 0 9
60660: PUSH
60661: LD_VAR 0 10
60665: PLUS
60666: PPUSH
60667: CALL_OW 272
60671: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60672: LD_ADDR_VAR 0 7
60676: PUSH
60677: LD_VAR 0 6
60681: PPUSH
60682: LD_VAR 0 8
60686: PPUSH
60687: LD_VAR 0 9
60691: PUSH
60692: LD_VAR 0 10
60696: PLUS
60697: PPUSH
60698: CALL_OW 273
60702: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60703: LD_VAR 0 5
60707: PPUSH
60708: LD_VAR 0 7
60712: PPUSH
60713: CALL_OW 488
60717: PUSH
60718: LD_VAR 0 5
60722: PPUSH
60723: LD_VAR 0 7
60727: PPUSH
60728: CALL_OW 428
60732: PPUSH
60733: CALL_OW 247
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: IN
60748: NOT
60749: AND
60750: IFFALSE 60794
// begin ComMoveXY ( unit , _x , _y ) ;
60752: LD_VAR 0 1
60756: PPUSH
60757: LD_VAR 0 5
60761: PPUSH
60762: LD_VAR 0 7
60766: PPUSH
60767: CALL_OW 111
// result := [ _x , _y ] ;
60771: LD_ADDR_VAR 0 3
60775: PUSH
60776: LD_VAR 0 5
60780: PUSH
60781: LD_VAR 0 7
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// exit ;
60790: POP
60791: POP
60792: GO 60798
// end ; end ;
60794: GO 60638
60796: POP
60797: POP
// end ;
60798: LD_VAR 0 3
60802: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60803: LD_INT 0
60805: PPUSH
60806: PPUSH
60807: PPUSH
// result := 0 ;
60808: LD_ADDR_VAR 0 3
60812: PUSH
60813: LD_INT 0
60815: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60816: LD_VAR 0 1
60820: PUSH
60821: LD_INT 0
60823: LESS
60824: PUSH
60825: LD_VAR 0 1
60829: PUSH
60830: LD_INT 8
60832: GREATER
60833: OR
60834: PUSH
60835: LD_VAR 0 2
60839: PUSH
60840: LD_INT 0
60842: LESS
60843: OR
60844: PUSH
60845: LD_VAR 0 2
60849: PUSH
60850: LD_INT 8
60852: GREATER
60853: OR
60854: IFFALSE 60858
// exit ;
60856: GO 60933
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60858: LD_ADDR_VAR 0 4
60862: PUSH
60863: LD_INT 22
60865: PUSH
60866: LD_VAR 0 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PPUSH
60875: CALL_OW 69
60879: PUSH
60880: FOR_IN
60881: IFFALSE 60931
// begin un := UnitShoot ( i ) ;
60883: LD_ADDR_VAR 0 5
60887: PUSH
60888: LD_VAR 0 4
60892: PPUSH
60893: CALL_OW 504
60897: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60898: LD_VAR 0 5
60902: PPUSH
60903: CALL_OW 255
60907: PUSH
60908: LD_VAR 0 1
60912: EQUAL
60913: IFFALSE 60929
// begin result := un ;
60915: LD_ADDR_VAR 0 3
60919: PUSH
60920: LD_VAR 0 5
60924: ST_TO_ADDR
// exit ;
60925: POP
60926: POP
60927: GO 60933
// end ; end ;
60929: GO 60880
60931: POP
60932: POP
// end ;
60933: LD_VAR 0 3
60937: RET
// export function GetCargoBay ( units ) ; begin
60938: LD_INT 0
60940: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60941: LD_ADDR_VAR 0 2
60945: PUSH
60946: LD_VAR 0 1
60950: PPUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 34
60956: PUSH
60957: LD_INT 12
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 34
60966: PUSH
60967: LD_INT 51
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 34
60976: PUSH
60977: LD_INT 32
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 34
60986: PUSH
60987: LD_INT 89
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: PPUSH
61001: CALL_OW 72
61005: ST_TO_ADDR
// end ;
61006: LD_VAR 0 2
61010: RET
// export function Negate ( value ) ; begin
61011: LD_INT 0
61013: PPUSH
// result := not value ;
61014: LD_ADDR_VAR 0 2
61018: PUSH
61019: LD_VAR 0 1
61023: NOT
61024: ST_TO_ADDR
// end ;
61025: LD_VAR 0 2
61029: RET
// export function Inc ( value ) ; begin
61030: LD_INT 0
61032: PPUSH
// result := value + 1 ;
61033: LD_ADDR_VAR 0 2
61037: PUSH
61038: LD_VAR 0 1
61042: PUSH
61043: LD_INT 1
61045: PLUS
61046: ST_TO_ADDR
// end ;
61047: LD_VAR 0 2
61051: RET
// export function Dec ( value ) ; begin
61052: LD_INT 0
61054: PPUSH
// result := value - 1 ;
61055: LD_ADDR_VAR 0 2
61059: PUSH
61060: LD_VAR 0 1
61064: PUSH
61065: LD_INT 1
61067: MINUS
61068: ST_TO_ADDR
// end ;
61069: LD_VAR 0 2
61073: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61074: LD_INT 0
61076: PPUSH
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
61081: PPUSH
61082: PPUSH
61083: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61084: LD_VAR 0 1
61088: PPUSH
61089: LD_VAR 0 2
61093: PPUSH
61094: CALL_OW 488
61098: NOT
61099: PUSH
61100: LD_VAR 0 3
61104: PPUSH
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL_OW 488
61114: NOT
61115: OR
61116: IFFALSE 61129
// begin result := - 1 ;
61118: LD_ADDR_VAR 0 5
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: ST_TO_ADDR
// exit ;
61127: GO 61364
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61129: LD_ADDR_VAR 0 12
61133: PUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: LD_VAR 0 2
61143: PPUSH
61144: LD_VAR 0 3
61148: PPUSH
61149: LD_VAR 0 4
61153: PPUSH
61154: CALL 60214 0 4
61158: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61159: LD_ADDR_VAR 0 11
61163: PUSH
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_VAR 0 2
61173: PPUSH
61174: LD_VAR 0 12
61178: PUSH
61179: LD_INT 1
61181: ARRAY
61182: PPUSH
61183: LD_VAR 0 12
61187: PUSH
61188: LD_INT 2
61190: ARRAY
61191: PPUSH
61192: CALL_OW 298
61196: ST_TO_ADDR
// distance := 9999 ;
61197: LD_ADDR_VAR 0 10
61201: PUSH
61202: LD_INT 9999
61204: ST_TO_ADDR
// for i := 0 to 5 do
61205: LD_ADDR_VAR 0 6
61209: PUSH
61210: DOUBLE
61211: LD_INT 0
61213: DEC
61214: ST_TO_ADDR
61215: LD_INT 5
61217: PUSH
61218: FOR_TO
61219: IFFALSE 61362
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61221: LD_ADDR_VAR 0 7
61225: PUSH
61226: LD_VAR 0 1
61230: PPUSH
61231: LD_VAR 0 6
61235: PPUSH
61236: LD_VAR 0 11
61240: PPUSH
61241: CALL_OW 272
61245: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61246: LD_ADDR_VAR 0 8
61250: PUSH
61251: LD_VAR 0 2
61255: PPUSH
61256: LD_VAR 0 6
61260: PPUSH
61261: LD_VAR 0 11
61265: PPUSH
61266: CALL_OW 273
61270: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61271: LD_VAR 0 7
61275: PPUSH
61276: LD_VAR 0 8
61280: PPUSH
61281: CALL_OW 488
61285: NOT
61286: IFFALSE 61290
// continue ;
61288: GO 61218
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61290: LD_ADDR_VAR 0 9
61294: PUSH
61295: LD_VAR 0 12
61299: PUSH
61300: LD_INT 1
61302: ARRAY
61303: PPUSH
61304: LD_VAR 0 12
61308: PUSH
61309: LD_INT 2
61311: ARRAY
61312: PPUSH
61313: LD_VAR 0 7
61317: PPUSH
61318: LD_VAR 0 8
61322: PPUSH
61323: CALL_OW 298
61327: ST_TO_ADDR
// if tmp < distance then
61328: LD_VAR 0 9
61332: PUSH
61333: LD_VAR 0 10
61337: LESS
61338: IFFALSE 61360
// begin result := i ;
61340: LD_ADDR_VAR 0 5
61344: PUSH
61345: LD_VAR 0 6
61349: ST_TO_ADDR
// distance := tmp ;
61350: LD_ADDR_VAR 0 10
61354: PUSH
61355: LD_VAR 0 9
61359: ST_TO_ADDR
// end ; end ;
61360: GO 61218
61362: POP
61363: POP
// end ;
61364: LD_VAR 0 5
61368: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61369: LD_INT 0
61371: PPUSH
61372: PPUSH
// if not driver or not IsInUnit ( driver ) then
61373: LD_VAR 0 1
61377: NOT
61378: PUSH
61379: LD_VAR 0 1
61383: PPUSH
61384: CALL_OW 310
61388: NOT
61389: OR
61390: IFFALSE 61394
// exit ;
61392: GO 61484
// vehicle := IsInUnit ( driver ) ;
61394: LD_ADDR_VAR 0 3
61398: PUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: CALL_OW 310
61408: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61409: LD_VAR 0 1
61413: PPUSH
61414: LD_STRING \
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: PUSH
61444: LD_STRING E
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_VAR 0 3
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PPUSH
61480: CALL_OW 446
// end ;
61484: LD_VAR 0 2
61488: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61489: LD_INT 0
61491: PPUSH
61492: PPUSH
// if not driver or not IsInUnit ( driver ) then
61493: LD_VAR 0 1
61497: NOT
61498: PUSH
61499: LD_VAR 0 1
61503: PPUSH
61504: CALL_OW 310
61508: NOT
61509: OR
61510: IFFALSE 61514
// exit ;
61512: GO 61604
// vehicle := IsInUnit ( driver ) ;
61514: LD_ADDR_VAR 0 3
61518: PUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: CALL_OW 310
61528: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61529: LD_VAR 0 1
61533: PPUSH
61534: LD_STRING \
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: LD_STRING E
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_VAR 0 3
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PPUSH
61600: CALL_OW 447
// end ;
61604: LD_VAR 0 2
61608: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61609: LD_INT 0
61611: PPUSH
61612: PPUSH
61613: PPUSH
// tmp := [ ] ;
61614: LD_ADDR_VAR 0 5
61618: PUSH
61619: EMPTY
61620: ST_TO_ADDR
// for i in units do
61621: LD_ADDR_VAR 0 4
61625: PUSH
61626: LD_VAR 0 1
61630: PUSH
61631: FOR_IN
61632: IFFALSE 61670
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61634: LD_ADDR_VAR 0 5
61638: PUSH
61639: LD_VAR 0 5
61643: PPUSH
61644: LD_VAR 0 5
61648: PUSH
61649: LD_INT 1
61651: PLUS
61652: PPUSH
61653: LD_VAR 0 4
61657: PPUSH
61658: CALL_OW 256
61662: PPUSH
61663: CALL_OW 2
61667: ST_TO_ADDR
61668: GO 61631
61670: POP
61671: POP
// if not tmp then
61672: LD_VAR 0 5
61676: NOT
61677: IFFALSE 61681
// exit ;
61679: GO 61729
// if asc then
61681: LD_VAR 0 2
61685: IFFALSE 61709
// result := SortListByListAsc ( units , tmp ) else
61687: LD_ADDR_VAR 0 3
61691: PUSH
61692: LD_VAR 0 1
61696: PPUSH
61697: LD_VAR 0 5
61701: PPUSH
61702: CALL_OW 76
61706: ST_TO_ADDR
61707: GO 61729
// result := SortListByListDesc ( units , tmp ) ;
61709: LD_ADDR_VAR 0 3
61713: PUSH
61714: LD_VAR 0 1
61718: PPUSH
61719: LD_VAR 0 5
61723: PPUSH
61724: CALL_OW 77
61728: ST_TO_ADDR
// end ;
61729: LD_VAR 0 3
61733: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61734: LD_INT 0
61736: PPUSH
61737: PPUSH
// task := GetTaskList ( mech ) ;
61738: LD_ADDR_VAR 0 4
61742: PUSH
61743: LD_VAR 0 1
61747: PPUSH
61748: CALL_OW 437
61752: ST_TO_ADDR
// if not task then
61753: LD_VAR 0 4
61757: NOT
61758: IFFALSE 61762
// exit ;
61760: GO 61804
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_VAR 0 4
61771: PUSH
61772: LD_INT 1
61774: ARRAY
61775: PUSH
61776: LD_INT 1
61778: ARRAY
61779: PUSH
61780: LD_STRING r
61782: EQUAL
61783: PUSH
61784: LD_VAR 0 4
61788: PUSH
61789: LD_INT 1
61791: ARRAY
61792: PUSH
61793: LD_INT 4
61795: ARRAY
61796: PUSH
61797: LD_VAR 0 2
61801: EQUAL
61802: AND
61803: ST_TO_ADDR
// end ;
61804: LD_VAR 0 3
61808: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61809: LD_INT 0
61811: PPUSH
// SetDir ( unit , d ) ;
61812: LD_VAR 0 1
61816: PPUSH
61817: LD_VAR 0 4
61821: PPUSH
61822: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61826: LD_VAR 0 1
61830: PPUSH
61831: LD_VAR 0 2
61835: PPUSH
61836: LD_VAR 0 3
61840: PPUSH
61841: LD_VAR 0 5
61845: PPUSH
61846: CALL_OW 48
// end ;
61850: LD_VAR 0 6
61854: RET
// export function ToNaturalNumber ( number ) ; begin
61855: LD_INT 0
61857: PPUSH
// result := number div 1 ;
61858: LD_ADDR_VAR 0 2
61862: PUSH
61863: LD_VAR 0 1
61867: PUSH
61868: LD_INT 1
61870: DIV
61871: ST_TO_ADDR
// if number < 0 then
61872: LD_VAR 0 1
61876: PUSH
61877: LD_INT 0
61879: LESS
61880: IFFALSE 61890
// result := 0 ;
61882: LD_ADDR_VAR 0 2
61886: PUSH
61887: LD_INT 0
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 2
61894: RET
// export function SortByClass ( units , class ) ; var un ; begin
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
// if not units or not class then
61899: LD_VAR 0 1
61903: NOT
61904: PUSH
61905: LD_VAR 0 2
61909: NOT
61910: OR
61911: IFFALSE 61915
// exit ;
61913: GO 62010
// result := [ ] ;
61915: LD_ADDR_VAR 0 3
61919: PUSH
61920: EMPTY
61921: ST_TO_ADDR
// for un in units do
61922: LD_ADDR_VAR 0 4
61926: PUSH
61927: LD_VAR 0 1
61931: PUSH
61932: FOR_IN
61933: IFFALSE 62008
// if GetClass ( un ) = class then
61935: LD_VAR 0 4
61939: PPUSH
61940: CALL_OW 257
61944: PUSH
61945: LD_VAR 0 2
61949: EQUAL
61950: IFFALSE 61977
// result := Insert ( result , 1 , un ) else
61952: LD_ADDR_VAR 0 3
61956: PUSH
61957: LD_VAR 0 3
61961: PPUSH
61962: LD_INT 1
61964: PPUSH
61965: LD_VAR 0 4
61969: PPUSH
61970: CALL_OW 2
61974: ST_TO_ADDR
61975: GO 62006
// result := Replace ( result , result + 1 , un ) ;
61977: LD_ADDR_VAR 0 3
61981: PUSH
61982: LD_VAR 0 3
61986: PPUSH
61987: LD_VAR 0 3
61991: PUSH
61992: LD_INT 1
61994: PLUS
61995: PPUSH
61996: LD_VAR 0 4
62000: PPUSH
62001: CALL_OW 1
62005: ST_TO_ADDR
62006: GO 61932
62008: POP
62009: POP
// end ;
62010: LD_VAR 0 3
62014: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62015: LD_INT 0
62017: PPUSH
62018: PPUSH
62019: PPUSH
62020: PPUSH
62021: PPUSH
62022: PPUSH
62023: PPUSH
// result := [ ] ;
62024: LD_ADDR_VAR 0 4
62028: PUSH
62029: EMPTY
62030: ST_TO_ADDR
// if x - r < 0 then
62031: LD_VAR 0 1
62035: PUSH
62036: LD_VAR 0 3
62040: MINUS
62041: PUSH
62042: LD_INT 0
62044: LESS
62045: IFFALSE 62057
// min_x := 0 else
62047: LD_ADDR_VAR 0 8
62051: PUSH
62052: LD_INT 0
62054: ST_TO_ADDR
62055: GO 62073
// min_x := x - r ;
62057: LD_ADDR_VAR 0 8
62061: PUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_VAR 0 3
62071: MINUS
62072: ST_TO_ADDR
// if y - r < 0 then
62073: LD_VAR 0 2
62077: PUSH
62078: LD_VAR 0 3
62082: MINUS
62083: PUSH
62084: LD_INT 0
62086: LESS
62087: IFFALSE 62099
// min_y := 0 else
62089: LD_ADDR_VAR 0 7
62093: PUSH
62094: LD_INT 0
62096: ST_TO_ADDR
62097: GO 62115
// min_y := y - r ;
62099: LD_ADDR_VAR 0 7
62103: PUSH
62104: LD_VAR 0 2
62108: PUSH
62109: LD_VAR 0 3
62113: MINUS
62114: ST_TO_ADDR
// max_x := x + r ;
62115: LD_ADDR_VAR 0 9
62119: PUSH
62120: LD_VAR 0 1
62124: PUSH
62125: LD_VAR 0 3
62129: PLUS
62130: ST_TO_ADDR
// max_y := y + r ;
62131: LD_ADDR_VAR 0 10
62135: PUSH
62136: LD_VAR 0 2
62140: PUSH
62141: LD_VAR 0 3
62145: PLUS
62146: ST_TO_ADDR
// for _x = min_x to max_x do
62147: LD_ADDR_VAR 0 5
62151: PUSH
62152: DOUBLE
62153: LD_VAR 0 8
62157: DEC
62158: ST_TO_ADDR
62159: LD_VAR 0 9
62163: PUSH
62164: FOR_TO
62165: IFFALSE 62266
// for _y = min_y to max_y do
62167: LD_ADDR_VAR 0 6
62171: PUSH
62172: DOUBLE
62173: LD_VAR 0 7
62177: DEC
62178: ST_TO_ADDR
62179: LD_VAR 0 10
62183: PUSH
62184: FOR_TO
62185: IFFALSE 62262
// begin if not ValidHex ( _x , _y ) then
62187: LD_VAR 0 5
62191: PPUSH
62192: LD_VAR 0 6
62196: PPUSH
62197: CALL_OW 488
62201: NOT
62202: IFFALSE 62206
// continue ;
62204: GO 62184
// if GetResourceTypeXY ( _x , _y ) then
62206: LD_VAR 0 5
62210: PPUSH
62211: LD_VAR 0 6
62215: PPUSH
62216: CALL_OW 283
62220: IFFALSE 62260
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62222: LD_ADDR_VAR 0 4
62226: PUSH
62227: LD_VAR 0 4
62231: PPUSH
62232: LD_VAR 0 4
62236: PUSH
62237: LD_INT 1
62239: PLUS
62240: PPUSH
62241: LD_VAR 0 5
62245: PUSH
62246: LD_VAR 0 6
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PPUSH
62255: CALL_OW 1
62259: ST_TO_ADDR
// end ;
62260: GO 62184
62262: POP
62263: POP
62264: GO 62164
62266: POP
62267: POP
// end ;
62268: LD_VAR 0 4
62272: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62273: LD_INT 0
62275: PPUSH
62276: PPUSH
62277: PPUSH
62278: PPUSH
62279: PPUSH
62280: PPUSH
62281: PPUSH
62282: PPUSH
// if not units then
62283: LD_VAR 0 1
62287: NOT
62288: IFFALSE 62292
// exit ;
62290: GO 62816
// result := UnitFilter ( units , [ f_ok ] ) ;
62292: LD_ADDR_VAR 0 3
62296: PUSH
62297: LD_VAR 0 1
62301: PPUSH
62302: LD_INT 50
62304: PUSH
62305: EMPTY
62306: LIST
62307: PPUSH
62308: CALL_OW 72
62312: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62313: LD_ADDR_VAR 0 8
62317: PUSH
62318: LD_VAR 0 1
62322: PUSH
62323: LD_INT 1
62325: ARRAY
62326: PPUSH
62327: CALL_OW 255
62331: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62332: LD_ADDR_VAR 0 10
62336: PUSH
62337: LD_INT 29
62339: PUSH
62340: LD_INT 91
62342: PUSH
62343: LD_INT 49
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// if not result then
62351: LD_VAR 0 3
62355: NOT
62356: IFFALSE 62360
// exit ;
62358: GO 62816
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62360: LD_ADDR_VAR 0 5
62364: PUSH
62365: LD_INT 81
62367: PUSH
62368: LD_VAR 0 8
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PPUSH
62377: CALL_OW 69
62381: ST_TO_ADDR
// for i in result do
62382: LD_ADDR_VAR 0 4
62386: PUSH
62387: LD_VAR 0 3
62391: PUSH
62392: FOR_IN
62393: IFFALSE 62814
// begin tag := GetTag ( i ) + 1 ;
62395: LD_ADDR_VAR 0 9
62399: PUSH
62400: LD_VAR 0 4
62404: PPUSH
62405: CALL_OW 110
62409: PUSH
62410: LD_INT 1
62412: PLUS
62413: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62414: LD_ADDR_VAR 0 7
62418: PUSH
62419: LD_VAR 0 4
62423: PPUSH
62424: CALL_OW 250
62428: PPUSH
62429: LD_VAR 0 4
62433: PPUSH
62434: CALL_OW 251
62438: PPUSH
62439: LD_INT 6
62441: PPUSH
62442: CALL 62015 0 3
62446: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62447: LD_VAR 0 4
62451: PPUSH
62452: CALL_OW 247
62456: PUSH
62457: LD_INT 2
62459: EQUAL
62460: PUSH
62461: LD_VAR 0 7
62465: AND
62466: PUSH
62467: LD_VAR 0 4
62471: PPUSH
62472: CALL_OW 264
62476: PUSH
62477: LD_VAR 0 10
62481: IN
62482: NOT
62483: AND
62484: IFFALSE 62523
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62486: LD_VAR 0 4
62490: PPUSH
62491: LD_VAR 0 7
62495: PUSH
62496: LD_INT 1
62498: ARRAY
62499: PUSH
62500: LD_INT 1
62502: ARRAY
62503: PPUSH
62504: LD_VAR 0 7
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PUSH
62513: LD_INT 2
62515: ARRAY
62516: PPUSH
62517: CALL_OW 116
62521: GO 62812
// if path > tag then
62523: LD_VAR 0 2
62527: PUSH
62528: LD_VAR 0 9
62532: GREATER
62533: IFFALSE 62741
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62535: LD_ADDR_VAR 0 6
62539: PUSH
62540: LD_VAR 0 5
62544: PPUSH
62545: LD_INT 91
62547: PUSH
62548: LD_VAR 0 4
62552: PUSH
62553: LD_INT 8
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: PPUSH
62561: CALL_OW 72
62565: ST_TO_ADDR
// if nearEnemy then
62566: LD_VAR 0 6
62570: IFFALSE 62639
// begin if GetWeapon ( i ) = ru_time_lapser then
62572: LD_VAR 0 4
62576: PPUSH
62577: CALL_OW 264
62581: PUSH
62582: LD_INT 49
62584: EQUAL
62585: IFFALSE 62613
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62587: LD_VAR 0 4
62591: PPUSH
62592: LD_VAR 0 6
62596: PPUSH
62597: LD_VAR 0 4
62601: PPUSH
62602: CALL_OW 74
62606: PPUSH
62607: CALL_OW 112
62611: GO 62637
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62613: LD_VAR 0 4
62617: PPUSH
62618: LD_VAR 0 6
62622: PPUSH
62623: LD_VAR 0 4
62627: PPUSH
62628: CALL_OW 74
62632: PPUSH
62633: CALL_OW 115
// end else
62637: GO 62739
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62639: LD_VAR 0 4
62643: PPUSH
62644: LD_VAR 0 2
62648: PUSH
62649: LD_VAR 0 9
62653: ARRAY
62654: PUSH
62655: LD_INT 1
62657: ARRAY
62658: PPUSH
62659: LD_VAR 0 2
62663: PUSH
62664: LD_VAR 0 9
62668: ARRAY
62669: PUSH
62670: LD_INT 2
62672: ARRAY
62673: PPUSH
62674: CALL_OW 297
62678: PUSH
62679: LD_INT 6
62681: GREATER
62682: IFFALSE 62725
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62684: LD_VAR 0 4
62688: PPUSH
62689: LD_VAR 0 2
62693: PUSH
62694: LD_VAR 0 9
62698: ARRAY
62699: PUSH
62700: LD_INT 1
62702: ARRAY
62703: PPUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_VAR 0 9
62713: ARRAY
62714: PUSH
62715: LD_INT 2
62717: ARRAY
62718: PPUSH
62719: CALL_OW 114
62723: GO 62739
// SetTag ( i , tag ) ;
62725: LD_VAR 0 4
62729: PPUSH
62730: LD_VAR 0 9
62734: PPUSH
62735: CALL_OW 109
// end else
62739: GO 62812
// if enemy then
62741: LD_VAR 0 5
62745: IFFALSE 62812
// begin if GetWeapon ( i ) = ru_time_lapser then
62747: LD_VAR 0 4
62751: PPUSH
62752: CALL_OW 264
62756: PUSH
62757: LD_INT 49
62759: EQUAL
62760: IFFALSE 62788
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62762: LD_VAR 0 4
62766: PPUSH
62767: LD_VAR 0 5
62771: PPUSH
62772: LD_VAR 0 4
62776: PPUSH
62777: CALL_OW 74
62781: PPUSH
62782: CALL_OW 112
62786: GO 62812
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62788: LD_VAR 0 4
62792: PPUSH
62793: LD_VAR 0 5
62797: PPUSH
62798: LD_VAR 0 4
62802: PPUSH
62803: CALL_OW 74
62807: PPUSH
62808: CALL_OW 115
// end ; end ;
62812: GO 62392
62814: POP
62815: POP
// end ;
62816: LD_VAR 0 3
62820: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62821: LD_INT 0
62823: PPUSH
62824: PPUSH
62825: PPUSH
// if not unit or IsInUnit ( unit ) then
62826: LD_VAR 0 1
62830: NOT
62831: PUSH
62832: LD_VAR 0 1
62836: PPUSH
62837: CALL_OW 310
62841: OR
62842: IFFALSE 62846
// exit ;
62844: GO 62937
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62846: LD_ADDR_VAR 0 4
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: CALL_OW 250
62860: PPUSH
62861: LD_VAR 0 2
62865: PPUSH
62866: LD_INT 1
62868: PPUSH
62869: CALL_OW 272
62873: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62874: LD_ADDR_VAR 0 5
62878: PUSH
62879: LD_VAR 0 1
62883: PPUSH
62884: CALL_OW 251
62888: PPUSH
62889: LD_VAR 0 2
62893: PPUSH
62894: LD_INT 1
62896: PPUSH
62897: CALL_OW 273
62901: ST_TO_ADDR
// if ValidHex ( x , y ) then
62902: LD_VAR 0 4
62906: PPUSH
62907: LD_VAR 0 5
62911: PPUSH
62912: CALL_OW 488
62916: IFFALSE 62937
// ComTurnXY ( unit , x , y ) ;
62918: LD_VAR 0 1
62922: PPUSH
62923: LD_VAR 0 4
62927: PPUSH
62928: LD_VAR 0 5
62932: PPUSH
62933: CALL_OW 118
// end ;
62937: LD_VAR 0 3
62941: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62942: LD_INT 0
62944: PPUSH
62945: PPUSH
// result := false ;
62946: LD_ADDR_VAR 0 3
62950: PUSH
62951: LD_INT 0
62953: ST_TO_ADDR
// if not units then
62954: LD_VAR 0 2
62958: NOT
62959: IFFALSE 62963
// exit ;
62961: GO 63008
// for i in units do
62963: LD_ADDR_VAR 0 4
62967: PUSH
62968: LD_VAR 0 2
62972: PUSH
62973: FOR_IN
62974: IFFALSE 63006
// if See ( side , i ) then
62976: LD_VAR 0 1
62980: PPUSH
62981: LD_VAR 0 4
62985: PPUSH
62986: CALL_OW 292
62990: IFFALSE 63004
// begin result := true ;
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: LD_INT 1
62999: ST_TO_ADDR
// exit ;
63000: POP
63001: POP
63002: GO 63008
// end ;
63004: GO 62973
63006: POP
63007: POP
// end ;
63008: LD_VAR 0 3
63012: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63013: LD_INT 0
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
// if not unit or not points then
63019: LD_VAR 0 1
63023: NOT
63024: PUSH
63025: LD_VAR 0 2
63029: NOT
63030: OR
63031: IFFALSE 63035
// exit ;
63033: GO 63125
// dist := 99999 ;
63035: LD_ADDR_VAR 0 5
63039: PUSH
63040: LD_INT 99999
63042: ST_TO_ADDR
// for i in points do
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: LD_VAR 0 2
63052: PUSH
63053: FOR_IN
63054: IFFALSE 63123
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63056: LD_ADDR_VAR 0 6
63060: PUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: LD_VAR 0 4
63070: PUSH
63071: LD_INT 1
63073: ARRAY
63074: PPUSH
63075: LD_VAR 0 4
63079: PUSH
63080: LD_INT 2
63082: ARRAY
63083: PPUSH
63084: CALL_OW 297
63088: ST_TO_ADDR
// if tmpDist < dist then
63089: LD_VAR 0 6
63093: PUSH
63094: LD_VAR 0 5
63098: LESS
63099: IFFALSE 63121
// begin result := i ;
63101: LD_ADDR_VAR 0 3
63105: PUSH
63106: LD_VAR 0 4
63110: ST_TO_ADDR
// dist := tmpDist ;
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: LD_VAR 0 6
63120: ST_TO_ADDR
// end ; end ;
63121: GO 63053
63123: POP
63124: POP
// end ;
63125: LD_VAR 0 3
63129: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63130: LD_INT 0
63132: PPUSH
// uc_side := side ;
63133: LD_ADDR_OWVAR 20
63137: PUSH
63138: LD_VAR 0 1
63142: ST_TO_ADDR
// uc_nation := 3 ;
63143: LD_ADDR_OWVAR 21
63147: PUSH
63148: LD_INT 3
63150: ST_TO_ADDR
// vc_chassis := 25 ;
63151: LD_ADDR_OWVAR 37
63155: PUSH
63156: LD_INT 25
63158: ST_TO_ADDR
// vc_engine := engine_siberite ;
63159: LD_ADDR_OWVAR 39
63163: PUSH
63164: LD_INT 3
63166: ST_TO_ADDR
// vc_control := control_computer ;
63167: LD_ADDR_OWVAR 38
63171: PUSH
63172: LD_INT 3
63174: ST_TO_ADDR
// vc_weapon := 59 ;
63175: LD_ADDR_OWVAR 40
63179: PUSH
63180: LD_INT 59
63182: ST_TO_ADDR
// result := CreateVehicle ;
63183: LD_ADDR_VAR 0 5
63187: PUSH
63188: CALL_OW 45
63192: ST_TO_ADDR
// SetDir ( result , d ) ;
63193: LD_VAR 0 5
63197: PPUSH
63198: LD_VAR 0 4
63202: PPUSH
63203: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63207: LD_VAR 0 5
63211: PPUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: LD_VAR 0 3
63221: PPUSH
63222: LD_INT 0
63224: PPUSH
63225: CALL_OW 48
// end ;
63229: LD_VAR 0 5
63233: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63234: LD_INT 0
63236: PPUSH
63237: PPUSH
63238: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63239: LD_ADDR_VAR 0 2
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63262: LD_VAR 0 1
63266: NOT
63267: PUSH
63268: LD_VAR 0 1
63272: PPUSH
63273: CALL_OW 264
63277: PUSH
63278: LD_INT 12
63280: PUSH
63281: LD_INT 51
63283: PUSH
63284: LD_INT 32
63286: PUSH
63287: LD_INT 89
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: IN
63296: NOT
63297: OR
63298: IFFALSE 63302
// exit ;
63300: GO 63400
// for i := 1 to 3 do
63302: LD_ADDR_VAR 0 3
63306: PUSH
63307: DOUBLE
63308: LD_INT 1
63310: DEC
63311: ST_TO_ADDR
63312: LD_INT 3
63314: PUSH
63315: FOR_TO
63316: IFFALSE 63398
// begin tmp := GetCargo ( cargo , i ) ;
63318: LD_ADDR_VAR 0 4
63322: PUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_VAR 0 3
63332: PPUSH
63333: CALL_OW 289
63337: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63338: LD_ADDR_VAR 0 2
63342: PUSH
63343: LD_VAR 0 2
63347: PPUSH
63348: LD_VAR 0 3
63352: PPUSH
63353: LD_VAR 0 4
63357: PPUSH
63358: CALL_OW 1
63362: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63363: LD_ADDR_VAR 0 2
63367: PUSH
63368: LD_VAR 0 2
63372: PPUSH
63373: LD_INT 4
63375: PPUSH
63376: LD_VAR 0 2
63380: PUSH
63381: LD_INT 4
63383: ARRAY
63384: PUSH
63385: LD_VAR 0 4
63389: PLUS
63390: PPUSH
63391: CALL_OW 1
63395: ST_TO_ADDR
// end ;
63396: GO 63315
63398: POP
63399: POP
// end ;
63400: LD_VAR 0 2
63404: RET
// export function Length ( array ) ; begin
63405: LD_INT 0
63407: PPUSH
// result := array + 0 ;
63408: LD_ADDR_VAR 0 2
63412: PUSH
63413: LD_VAR 0 1
63417: PUSH
63418: LD_INT 0
63420: PLUS
63421: ST_TO_ADDR
// end ;
63422: LD_VAR 0 2
63426: RET
// export function PrepareArray ( array ) ; begin
63427: LD_INT 0
63429: PPUSH
// result := array diff 0 ;
63430: LD_ADDR_VAR 0 2
63434: PUSH
63435: LD_VAR 0 1
63439: PUSH
63440: LD_INT 0
63442: DIFF
63443: ST_TO_ADDR
// if not result [ 1 ] then
63444: LD_VAR 0 2
63448: PUSH
63449: LD_INT 1
63451: ARRAY
63452: NOT
63453: IFFALSE 63473
// result := Delete ( result , 1 ) ;
63455: LD_ADDR_VAR 0 2
63459: PUSH
63460: LD_VAR 0 2
63464: PPUSH
63465: LD_INT 1
63467: PPUSH
63468: CALL_OW 3
63472: ST_TO_ADDR
// end ;
63473: LD_VAR 0 2
63477: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
63482: PPUSH
63483: PPUSH
// sibRocketRange := 25 ;
63484: LD_ADDR_VAR 0 6
63488: PUSH
63489: LD_INT 25
63491: ST_TO_ADDR
// result := false ;
63492: LD_ADDR_VAR 0 4
63496: PUSH
63497: LD_INT 0
63499: ST_TO_ADDR
// for i := 0 to 5 do
63500: LD_ADDR_VAR 0 5
63504: PUSH
63505: DOUBLE
63506: LD_INT 0
63508: DEC
63509: ST_TO_ADDR
63510: LD_INT 5
63512: PUSH
63513: FOR_TO
63514: IFFALSE 63581
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63516: LD_VAR 0 1
63520: PPUSH
63521: LD_VAR 0 5
63525: PPUSH
63526: LD_VAR 0 6
63530: PPUSH
63531: CALL_OW 272
63535: PPUSH
63536: LD_VAR 0 2
63540: PPUSH
63541: LD_VAR 0 5
63545: PPUSH
63546: LD_VAR 0 6
63550: PPUSH
63551: CALL_OW 273
63555: PPUSH
63556: LD_VAR 0 3
63560: PPUSH
63561: CALL_OW 309
63565: IFFALSE 63579
// begin result := true ;
63567: LD_ADDR_VAR 0 4
63571: PUSH
63572: LD_INT 1
63574: ST_TO_ADDR
// exit ;
63575: POP
63576: POP
63577: GO 63583
// end ;
63579: GO 63513
63581: POP
63582: POP
// end ;
63583: LD_VAR 0 4
63587: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63588: LD_INT 0
63590: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63591: LD_VAR 0 1
63595: PPUSH
63596: LD_VAR 0 2
63600: PPUSH
63601: LD_INT 0
63603: PPUSH
63604: LD_INT 0
63606: PPUSH
63607: LD_INT 1
63609: PPUSH
63610: LD_INT 0
63612: PPUSH
63613: CALL_OW 587
// end ; end_of_file
63617: LD_VAR 0 3
63621: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63622: LD_VAR 0 1
63626: PPUSH
63627: LD_VAR 0 2
63631: PPUSH
63632: LD_VAR 0 3
63636: PPUSH
63637: LD_VAR 0 4
63641: PPUSH
63642: LD_VAR 0 5
63646: PPUSH
63647: LD_VAR 0 6
63651: PPUSH
63652: CALL 2110 0 6
// end ;
63656: PPOPN 6
63658: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63659: LD_INT 0
63661: PPUSH
// begin if not units then
63662: LD_VAR 0 1
63666: NOT
63667: IFFALSE 63671
// exit ;
63669: GO 63671
// end ;
63671: PPOPN 7
63673: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63674: CALL 2014 0 0
// end ;
63678: PPOPN 1
63680: END
