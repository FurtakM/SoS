// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 958 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 10
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 10
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 10
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 10
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 9
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 10
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// for i = 1 to 3 do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_INT 3
 920: PUSH
 921: FOR_TO
 922: IFFALSE 951
// begin animal := CreateHuman ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: CALL_OW 44
 933: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 934: LD_VAR 0 3
 938: PPUSH
 939: LD_INT 11
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// end ;
 949: GO 921
 951: POP
 952: POP
// end ; end_of_file
 953: LD_VAR 0 1
 957: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 958: LD_INT 0
 960: PPUSH
// score_player := 0 ;
 961: LD_ADDR_EXP 28
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// score_enemy1 := 0 ;
 969: LD_ADDR_EXP 29
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// score_enemy2 := 0 ;
 977: LD_ADDR_EXP 30
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// score_enemy3 := 0 ;
 985: LD_ADDR_EXP 31
 989: PUSH
 990: LD_INT 0
 992: ST_TO_ADDR
// score_enemy4 := 0 ;
 993: LD_ADDR_EXP 32
 997: PUSH
 998: LD_INT 0
1000: ST_TO_ADDR
// score_enemy5 := 0 ;
1001: LD_ADDR_EXP 33
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// score_enemy6 := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// score_enemy7 := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// if difficulty > 1 then
1025: LD_OWVAR 67
1029: PUSH
1030: LD_INT 1
1032: GREATER
1033: IFFALSE 1045
// class_2 := class_sniper else
1035: LD_ADDR_EXP 26
1039: PUSH
1040: LD_INT 5
1042: ST_TO_ADDR
1043: GO 1053
// class_2 := class_soldier ;
1045: LD_ADDR_EXP 26
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// uc_side := 1 ;
1053: LD_ADDR_OWVAR 20
1057: PUSH
1058: LD_INT 1
1060: ST_TO_ADDR
// uc_nation := 1 ;
1061: LD_ADDR_OWVAR 21
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// hc_name :=  ;
1069: LD_ADDR_OWVAR 26
1073: PUSH
1074: LD_STRING 
1076: ST_TO_ADDR
// hc_sex := sex_male ;
1077: LD_ADDR_OWVAR 27
1081: PUSH
1082: LD_INT 1
1084: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1085: LD_ADDR_OWVAR 29
1089: PUSH
1090: LD_INT 12
1092: PUSH
1093: LD_INT 11
1095: PUSH
1096: LD_INT 10
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_OWVAR 67
1108: ARRAY
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: ST_TO_ADDR
// hc_class := class_1 ;
1117: LD_ADDR_OWVAR 28
1121: PUSH
1122: LD_EXP 25
1126: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1127: LD_ADDR_OWVAR 31
1131: PUSH
1132: LD_INT 10
1134: PUSH
1135: LD_INT 7
1137: PUSH
1138: LD_INT 5
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 0
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// hc_gallery :=  ;
1167: LD_ADDR_OWVAR 33
1171: PUSH
1172: LD_STRING 
1174: ST_TO_ADDR
// player := CreateHuman ;
1175: LD_ADDR_EXP 19
1179: PUSH
1180: CALL_OW 44
1184: ST_TO_ADDR
// uc_side := 2 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 2
1192: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1193: LD_ADDR_EXP 26
1197: PUSH
1198: LD_INT 5
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 1
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 12
1218: ARRAY
1219: ST_TO_ADDR
// hc_sex := sex_male ;
1220: LD_ADDR_OWVAR 27
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1228: LD_ADDR_OWVAR 29
1232: PUSH
1233: LD_INT 11
1235: PUSH
1236: LD_INT 12
1238: PUSH
1239: LD_INT 13
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: LD_INT 10
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: ST_TO_ADDR
// hc_class := class_2 ;
1260: LD_ADDR_OWVAR 28
1264: PUSH
1265: LD_EXP 26
1269: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1270: LD_ADDR_OWVAR 31
1274: PUSH
1275: LD_INT 8
1277: PUSH
1278: LD_INT 9
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PUSH
1295: LD_INT 0
1297: PUSH
1298: LD_INT 0
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// hc_gallery :=  ;
1310: LD_ADDR_OWVAR 33
1314: PUSH
1315: LD_STRING 
1317: ST_TO_ADDR
// player_1 := CreateHuman ;
1318: LD_ADDR_EXP 17
1322: PUSH
1323: CALL_OW 44
1327: ST_TO_ADDR
// uc_side := 3 ;
1328: LD_ADDR_OWVAR 20
1332: PUSH
1333: LD_INT 3
1335: ST_TO_ADDR
// uc_nation := 1 ;
1336: LD_ADDR_OWVAR 21
1340: PUSH
1341: LD_INT 1
1343: ST_TO_ADDR
// hc_sex := sex_male ;
1344: LD_ADDR_OWVAR 27
1348: PUSH
1349: LD_INT 1
1351: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1352: LD_ADDR_OWVAR 29
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: LD_INT 11
1362: PUSH
1363: LD_INT 12
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PUSH
1377: LD_INT 10
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1384: LD_ADDR_EXP 26
1388: PUSH
1389: LD_INT 5
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 2
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: ST_TO_ADDR
// hc_class := class_2 ;
1411: LD_ADDR_OWVAR 28
1415: PUSH
1416: LD_EXP 26
1420: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1421: LD_ADDR_OWVAR 31
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 7
1431: PUSH
1432: LD_INT 10
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_OWVAR 67
1444: ARRAY
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// hc_gallery :=  ;
1461: LD_ADDR_OWVAR 33
1465: PUSH
1466: LD_STRING 
1468: ST_TO_ADDR
// player_2 := CreateHuman ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1479: LD_ADDR_EXP 26
1483: PUSH
1484: LD_INT 5
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: CALL_OW 12
1504: ARRAY
1505: ST_TO_ADDR
// hc_class := class_2 ;
1506: LD_ADDR_OWVAR 28
1510: PUSH
1511: LD_EXP 26
1515: ST_TO_ADDR
// player_3 := CreateHuman ;
1516: LD_ADDR_EXP 20
1520: PUSH
1521: CALL_OW 44
1525: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1526: LD_ADDR_EXP 26
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PPUSH
1544: LD_INT 2
1546: PPUSH
1547: CALL_OW 12
1551: ARRAY
1552: ST_TO_ADDR
// hc_class := class_2 ;
1553: LD_ADDR_OWVAR 28
1557: PUSH
1558: LD_EXP 26
1562: ST_TO_ADDR
// player_4 := CreateHuman ;
1563: LD_ADDR_EXP 21
1567: PUSH
1568: CALL_OW 44
1572: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1573: LD_ADDR_EXP 26
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 1
1590: PPUSH
1591: LD_INT 2
1593: PPUSH
1594: CALL_OW 12
1598: ARRAY
1599: ST_TO_ADDR
// hc_class := class_2 ;
1600: LD_ADDR_OWVAR 28
1604: PUSH
1605: LD_EXP 26
1609: ST_TO_ADDR
// player_5 := CreateHuman ;
1610: LD_ADDR_EXP 22
1614: PUSH
1615: CALL_OW 44
1619: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 5
1627: PUSH
1628: LD_INT 1
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 2
1640: PPUSH
1641: CALL_OW 12
1645: ARRAY
1646: ST_TO_ADDR
// hc_class := class_2 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_EXP 26
1656: ST_TO_ADDR
// player_6 := CreateHuman ;
1657: LD_ADDR_EXP 23
1661: PUSH
1662: CALL_OW 44
1666: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 5
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 2
1687: PPUSH
1688: CALL_OW 12
1692: ARRAY
1693: ST_TO_ADDR
// hc_class := class_2 ;
1694: LD_ADDR_OWVAR 28
1698: PUSH
1699: LD_EXP 26
1703: ST_TO_ADDR
// player_7 := CreateHuman ;
1704: LD_ADDR_EXP 24
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1714: LD_EXP 17
1718: PPUSH
1719: LD_INT 1
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1729: LD_EXP 18
1733: PPUSH
1734: LD_INT 2
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1744: LD_EXP 19
1748: PPUSH
1749: LD_INT 4
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1759: LD_EXP 20
1763: PPUSH
1764: LD_INT 3
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1774: LD_EXP 21
1778: PPUSH
1779: LD_INT 5
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1789: LD_EXP 22
1793: PPUSH
1794: LD_INT 6
1796: PPUSH
1797: LD_INT 0
1799: PPUSH
1800: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1804: LD_EXP 23
1808: PPUSH
1809: LD_INT 7
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1819: LD_EXP 24
1823: PPUSH
1824: LD_INT 8
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1834: LD_EXP 19
1838: PPUSH
1839: CALL_OW 87
// end ;
1843: LD_VAR 0 1
1847: RET
// every 0 0$01 trigger player do var i , un , tab ;
1848: LD_EXP 19
1852: IFFALSE 2181
1854: GO 1856
1856: DISABLE
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// begin enable ;
1862: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1863: LD_ADDR_VAR 0 3
1867: PUSH
1868: LD_EXP 17
1872: PUSH
1873: LD_EXP 18
1877: PUSH
1878: LD_EXP 20
1882: PUSH
1883: LD_EXP 21
1887: PUSH
1888: LD_EXP 22
1892: PUSH
1893: LD_EXP 23
1897: PUSH
1898: LD_EXP 24
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 24
1924: PUSH
1925: LD_INT 250
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 72
1936: ST_TO_ADDR
// for i = 1 to un do
1937: LD_ADDR_VAR 0 1
1941: PUSH
1942: DOUBLE
1943: LD_INT 1
1945: DEC
1946: ST_TO_ADDR
1947: LD_VAR 0 2
1951: PUSH
1952: FOR_TO
1953: IFFALSE 2179
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1955: LD_VAR 0 2
1959: PUSH
1960: LD_VAR 0 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 300
1970: PUSH
1971: LD_VAR 0 2
1975: PUSH
1976: LD_VAR 0 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 314
1986: NOT
1987: AND
1988: IFFALSE 2177
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1990: LD_INT 22
1992: PUSH
1993: LD_INT 0
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_VAR 0 1
2014: ARRAY
2015: PPUSH
2016: CALL_OW 74
2020: PPUSH
2021: LD_VAR 0 2
2025: PUSH
2026: LD_VAR 0 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 296
2036: PUSH
2037: LD_INT 8
2039: GREATER
2040: IFFALSE 2131
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: PPUSH
2053: LD_INT 22
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: PPUSH
2068: LD_VAR 0 2
2072: PUSH
2073: LD_VAR 0 1
2077: ARRAY
2078: PPUSH
2079: CALL_OW 74
2083: PPUSH
2084: CALL_OW 250
2088: PPUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 0
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: PPUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_VAR 0 1
2113: ARRAY
2114: PPUSH
2115: CALL_OW 74
2119: PPUSH
2120: CALL_OW 251
2124: PPUSH
2125: CALL_OW 111
2129: GO 2177
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2131: LD_VAR 0 2
2135: PUSH
2136: LD_VAR 0 1
2140: ARRAY
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 69
2156: PPUSH
2157: LD_VAR 0 2
2161: PUSH
2162: LD_VAR 0 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 74
2172: PPUSH
2173: CALL_OW 115
// end ;
2177: GO 1952
2179: POP
2180: POP
// end ; end_of_file
2181: PPOPN 3
2183: END
// on UnitGoesToRed ( un ) do begin if un = player then
2184: LD_VAR 0 1
2188: PUSH
2189: LD_EXP 19
2193: EQUAL
2194: IFFALSE 2203
// YouLost ( hunt2 ) ;
2196: LD_STRING hunt2
2198: PPUSH
2199: CALL_OW 104
// end ;
2203: PPOPN 1
2205: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2206: LD_INT 0
2208: PPUSH
2209: PPUSH
2210: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2211: LD_ADDR_VAR 0 4
2215: PUSH
2216: LD_EXP 19
2220: PUSH
2221: LD_EXP 17
2225: PUSH
2226: LD_EXP 18
2230: PUSH
2231: LD_EXP 20
2235: PUSH
2236: LD_EXP 21
2240: PUSH
2241: LD_EXP 22
2245: PUSH
2246: LD_EXP 23
2250: PUSH
2251: LD_EXP 24
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: PUSH
2276: LD_INT 0
2278: EQUAL
2279: PUSH
2280: LD_VAR 0 1
2284: PPUSH
2285: CALL_OW 110
2289: PUSH
2290: LD_INT 100
2292: NEG
2293: NONEQUAL
2294: AND
2295: IFFALSE 2693
// begin play := killer_unit ;
2297: LD_ADDR_VAR 0 6
2301: PUSH
2302: LD_VAR 0 3
2306: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2307: LD_VAR 0 1
2311: PPUSH
2312: CALL_OW 257
2316: PUSH
2317: LD_INT 18
2319: DOUBLE
2320: EQUAL
2321: IFTRUE 2325
2323: GO 2338
2325: POP
// score := PB ; class_tiger :
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_EXP 11
2335: ST_TO_ADDR
2336: GO 2444
2338: LD_INT 14
2340: DOUBLE
2341: EQUAL
2342: IFTRUE 2346
2344: GO 2359
2346: POP
// score := PT ; class_fish :
2347: LD_ADDR_VAR 0 5
2351: PUSH
2352: LD_EXP 12
2356: ST_TO_ADDR
2357: GO 2444
2359: LD_INT 20
2361: DOUBLE
2362: EQUAL
2363: IFTRUE 2367
2365: GO 2380
2367: POP
// score := PF ; 21 :
2368: LD_ADDR_VAR 0 5
2372: PUSH
2373: LD_EXP 13
2377: ST_TO_ADDR
2378: GO 2444
2380: LD_INT 21
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2401
2388: POP
// score := PH ; 13 :
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_EXP 14
2398: ST_TO_ADDR
2399: GO 2444
2401: LD_INT 13
2403: DOUBLE
2404: EQUAL
2405: IFTRUE 2409
2407: GO 2422
2409: POP
// score := PE ; class_apeman :
2410: LD_ADDR_VAR 0 5
2414: PUSH
2415: LD_EXP 10
2419: ST_TO_ADDR
2420: GO 2444
2422: LD_INT 12
2424: DOUBLE
2425: EQUAL
2426: IFTRUE 2430
2428: GO 2443
2430: POP
// score := PA ; end ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_EXP 16
2440: ST_TO_ADDR
2441: GO 2444
2443: POP
// if GetChassis ( un ) = 31 then
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL_OW 265
2453: PUSH
2454: LD_INT 31
2456: EQUAL
2457: IFFALSE 2469
// score := PM ;
2459: LD_ADDR_VAR 0 5
2463: PUSH
2464: LD_EXP 15
2468: ST_TO_ADDR
// if play = player then
2469: LD_VAR 0 6
2473: PUSH
2474: LD_EXP 19
2478: EQUAL
2479: IFFALSE 2497
// score_player := score_player + score ;
2481: LD_ADDR_EXP 28
2485: PUSH
2486: LD_EXP 28
2490: PUSH
2491: LD_VAR 0 5
2495: PLUS
2496: ST_TO_ADDR
// if play = player_1 then
2497: LD_VAR 0 6
2501: PUSH
2502: LD_EXP 17
2506: EQUAL
2507: IFFALSE 2525
// score_enemy1 := score_enemy1 + score ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PUSH
2519: LD_VAR 0 5
2523: PLUS
2524: ST_TO_ADDR
// if play = player_2 then
2525: LD_VAR 0 6
2529: PUSH
2530: LD_EXP 18
2534: EQUAL
2535: IFFALSE 2553
// score_enemy2 := score_enemy2 + score ;
2537: LD_ADDR_EXP 30
2541: PUSH
2542: LD_EXP 30
2546: PUSH
2547: LD_VAR 0 5
2551: PLUS
2552: ST_TO_ADDR
// if play = player_3 then
2553: LD_VAR 0 6
2557: PUSH
2558: LD_EXP 20
2562: EQUAL
2563: IFFALSE 2581
// score_enemy3 := score_enemy3 + score ;
2565: LD_ADDR_EXP 31
2569: PUSH
2570: LD_EXP 31
2574: PUSH
2575: LD_VAR 0 5
2579: PLUS
2580: ST_TO_ADDR
// if play = player_4 then
2581: LD_VAR 0 6
2585: PUSH
2586: LD_EXP 21
2590: EQUAL
2591: IFFALSE 2609
// score_enemy4 := score_enemy4 + score ;
2593: LD_ADDR_EXP 32
2597: PUSH
2598: LD_EXP 32
2602: PUSH
2603: LD_VAR 0 5
2607: PLUS
2608: ST_TO_ADDR
// if play = player_5 then
2609: LD_VAR 0 6
2613: PUSH
2614: LD_EXP 22
2618: EQUAL
2619: IFFALSE 2637
// score_enemy5 := score_enemy5 + score ;
2621: LD_ADDR_EXP 33
2625: PUSH
2626: LD_EXP 33
2630: PUSH
2631: LD_VAR 0 5
2635: PLUS
2636: ST_TO_ADDR
// if play = player_6 then
2637: LD_VAR 0 6
2641: PUSH
2642: LD_EXP 23
2646: EQUAL
2647: IFFALSE 2665
// score_enemy6 := score_enemy6 + score ;
2649: LD_ADDR_EXP 34
2653: PUSH
2654: LD_EXP 34
2658: PUSH
2659: LD_VAR 0 5
2663: PLUS
2664: ST_TO_ADDR
// if play = player_7 then
2665: LD_VAR 0 6
2669: PUSH
2670: LD_EXP 24
2674: EQUAL
2675: IFFALSE 2693
// score_enemy7 := score_enemy7 + score ;
2677: LD_ADDR_EXP 35
2681: PUSH
2682: LD_EXP 35
2686: PUSH
2687: LD_VAR 0 5
2691: PLUS
2692: ST_TO_ADDR
// end ; end ;
2693: PPOPN 6
2695: END
// every 10 do
2696: GO 2698
2698: DISABLE
// begin enable ;
2699: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2700: LD_ADDR_OWVAR 47
2704: PUSH
2705: LD_STRING #player1
2707: PUSH
2708: LD_EXP 28
2712: PUSH
2713: LD_STRING #player2
2715: PUSH
2716: LD_EXP 29
2720: PUSH
2721: LD_STRING #player3
2723: PUSH
2724: LD_EXP 30
2728: PUSH
2729: LD_STRING #player4
2731: PUSH
2732: LD_EXP 31
2736: PUSH
2737: LD_STRING #player5
2739: PUSH
2740: LD_EXP 32
2744: PUSH
2745: LD_STRING #player6
2747: PUSH
2748: LD_EXP 33
2752: PUSH
2753: LD_STRING #player7
2755: PUSH
2756: LD_EXP 34
2760: PUSH
2761: LD_STRING #player8
2763: PUSH
2764: LD_EXP 35
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: ST_TO_ADDR
// end ;
2787: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2788: LD_VAR 0 1
2792: PUSH
2793: LD_OWVAR 2
2797: EQUAL
2798: PUSH
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: AND
2808: IFFALSE 2817
// YouLost ( hunt1 ) ;
2810: LD_STRING hunt1
2812: PPUSH
2813: CALL_OW 104
// end ;
2817: PPOPN 2
2819: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2820: LD_INT 22
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 0
2837: EQUAL
2838: IFFALSE 2947
2840: GO 2842
2842: DISABLE
// begin Wait ( 0 0$03 ) ;
2843: LD_INT 105
2845: PPUSH
2846: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2850: LD_EXP 28
2854: PUSH
2855: LD_EXP 29
2859: GREATER
2860: PUSH
2861: LD_EXP 28
2865: PUSH
2866: LD_EXP 30
2870: GREATER
2871: AND
2872: PUSH
2873: LD_EXP 28
2877: PUSH
2878: LD_EXP 31
2882: GREATER
2883: AND
2884: PUSH
2885: LD_EXP 28
2889: PUSH
2890: LD_EXP 32
2894: GREATER
2895: AND
2896: PUSH
2897: LD_EXP 28
2901: PUSH
2902: LD_EXP 33
2906: GREATER
2907: AND
2908: PUSH
2909: LD_EXP 28
2913: PUSH
2914: LD_EXP 34
2918: GREATER
2919: AND
2920: PUSH
2921: LD_EXP 28
2925: PUSH
2926: LD_EXP 35
2930: GREATER
2931: AND
2932: IFFALSE 2940
// YouWin else
2934: CALL_OW 103
2938: GO 2947
// YouLost ( hunt3 ) ;
2940: LD_STRING hunt3
2942: PPUSH
2943: CALL_OW 104
// end ; end_of_file end_of_file
2947: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
2948: GO 2950
2950: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2951: LD_STRING initStreamRollete();
2953: PPUSH
2954: CALL_OW 559
// InitStreamMode ;
2958: CALL 2967 0 0
// DefineStreamItems ( ) ;
2962: CALL 3407 0 0
// end ;
2966: END
// function InitStreamMode ; begin
2967: LD_INT 0
2969: PPUSH
// streamModeActive := false ;
2970: LD_ADDR_EXP 36
2974: PUSH
2975: LD_INT 0
2977: ST_TO_ADDR
// normalCounter := 26 ;
2978: LD_ADDR_EXP 37
2982: PUSH
2983: LD_INT 26
2985: ST_TO_ADDR
// hardcoreCounter := 12 ;
2986: LD_ADDR_EXP 38
2990: PUSH
2991: LD_INT 12
2993: ST_TO_ADDR
// sRocket := false ;
2994: LD_ADDR_EXP 41
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// sSpeed := false ;
3002: LD_ADDR_EXP 40
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// sEngine := false ;
3010: LD_ADDR_EXP 42
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// sSpec := false ;
3018: LD_ADDR_EXP 39
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// sLevel := false ;
3026: LD_ADDR_EXP 43
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// sArmoury := false ;
3034: LD_ADDR_EXP 44
3038: PUSH
3039: LD_INT 0
3041: ST_TO_ADDR
// sRadar := false ;
3042: LD_ADDR_EXP 45
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// sBunker := false ;
3050: LD_ADDR_EXP 46
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// sHack := false ;
3058: LD_ADDR_EXP 47
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// sFire := false ;
3066: LD_ADDR_EXP 48
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// sRefresh := false ;
3074: LD_ADDR_EXP 49
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// sExp := false ;
3082: LD_ADDR_EXP 50
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// sDepot := false ;
3090: LD_ADDR_EXP 51
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// sFlag := false ;
3098: LD_ADDR_EXP 52
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// sKamikadze := false ;
3106: LD_ADDR_EXP 60
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// sTroll := false ;
3114: LD_ADDR_EXP 61
3118: PUSH
3119: LD_INT 0
3121: ST_TO_ADDR
// sSlow := false ;
3122: LD_ADDR_EXP 62
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// sLack := false ;
3130: LD_ADDR_EXP 63
3134: PUSH
3135: LD_INT 0
3137: ST_TO_ADDR
// sTank := false ;
3138: LD_ADDR_EXP 65
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// sRemote := false ;
3146: LD_ADDR_EXP 66
3150: PUSH
3151: LD_INT 0
3153: ST_TO_ADDR
// sPowell := false ;
3154: LD_ADDR_EXP 67
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// sTeleport := false ;
3162: LD_ADDR_EXP 70
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// sOilTower := false ;
3170: LD_ADDR_EXP 72
3174: PUSH
3175: LD_INT 0
3177: ST_TO_ADDR
// sShovel := false ;
3178: LD_ADDR_EXP 73
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// sSheik := false ;
3186: LD_ADDR_EXP 74
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// sEarthquake := false ;
3194: LD_ADDR_EXP 76
3198: PUSH
3199: LD_INT 0
3201: ST_TO_ADDR
// sAI := false ;
3202: LD_ADDR_EXP 77
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// sCargo := false ;
3210: LD_ADDR_EXP 80
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sDLaser := false ;
3218: LD_ADDR_EXP 81
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sExchange := false ;
3226: LD_ADDR_EXP 82
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sFac := false ;
3234: LD_ADDR_EXP 83
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sPower := false ;
3242: LD_ADDR_EXP 84
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sRandom := false ;
3250: LD_ADDR_EXP 85
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sShield := false ;
3258: LD_ADDR_EXP 86
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sTime := false ;
3266: LD_ADDR_EXP 87
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sTools := false ;
3274: LD_ADDR_EXP 88
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sSold := false ;
3282: LD_ADDR_EXP 53
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sDiff := false ;
3290: LD_ADDR_EXP 54
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sFog := false ;
3298: LD_ADDR_EXP 57
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sReset := false ;
3306: LD_ADDR_EXP 58
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sSun := false ;
3314: LD_ADDR_EXP 59
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sTiger := false ;
3322: LD_ADDR_EXP 55
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sBomb := false ;
3330: LD_ADDR_EXP 56
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sWound := false ;
3338: LD_ADDR_EXP 64
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sBetray := false ;
3346: LD_ADDR_EXP 68
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sContamin := false ;
3354: LD_ADDR_EXP 69
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sOil := false ;
3362: LD_ADDR_EXP 71
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sStu := false ;
3370: LD_ADDR_EXP 75
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sBazooka := false ;
3378: LD_ADDR_EXP 78
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sMortar := false ;
3386: LD_ADDR_EXP 79
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sRanger := false ;
3394: LD_ADDR_EXP 89
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// end ;
3402: LD_VAR 0 1
3406: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3407: LD_INT 0
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
// result := [ ] ;
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: EMPTY
3420: ST_TO_ADDR
// if campaign_id = 1 then
3421: LD_OWVAR 69
3425: PUSH
3426: LD_INT 1
3428: EQUAL
3429: IFFALSE 6377
// begin case mission_number of 1 :
3431: LD_OWVAR 70
3435: PUSH
3436: LD_INT 1
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3508
3444: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: LD_INT 4
3455: PUSH
3456: LD_INT 11
3458: PUSH
3459: LD_INT 12
3461: PUSH
3462: LD_INT 15
3464: PUSH
3465: LD_INT 16
3467: PUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 23
3473: PUSH
3474: LD_INT 26
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 101
3490: PUSH
3491: LD_INT 102
3493: PUSH
3494: LD_INT 106
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: ST_TO_ADDR
3506: GO 6377
3508: LD_INT 2
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3588
3516: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3517: LD_ADDR_VAR 0 1
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 11
3530: PUSH
3531: LD_INT 12
3533: PUSH
3534: LD_INT 15
3536: PUSH
3537: LD_INT 16
3539: PUSH
3540: LD_INT 22
3542: PUSH
3543: LD_INT 23
3545: PUSH
3546: LD_INT 26
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 101
3562: PUSH
3563: LD_INT 102
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 106
3571: PUSH
3572: LD_INT 108
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: ST_TO_ADDR
3586: GO 6377
3588: LD_INT 3
3590: DOUBLE
3591: EQUAL
3592: IFTRUE 3596
3594: GO 3672
3596: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3597: LD_ADDR_VAR 0 1
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: LD_INT 4
3607: PUSH
3608: LD_INT 5
3610: PUSH
3611: LD_INT 11
3613: PUSH
3614: LD_INT 12
3616: PUSH
3617: LD_INT 15
3619: PUSH
3620: LD_INT 16
3622: PUSH
3623: LD_INT 22
3625: PUSH
3626: LD_INT 26
3628: PUSH
3629: LD_INT 36
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 101
3646: PUSH
3647: LD_INT 102
3649: PUSH
3650: LD_INT 105
3652: PUSH
3653: LD_INT 106
3655: PUSH
3656: LD_INT 108
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: ST_TO_ADDR
3670: GO 6377
3672: LD_INT 4
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3764
3680: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3681: LD_ADDR_VAR 0 1
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: LD_INT 4
3691: PUSH
3692: LD_INT 5
3694: PUSH
3695: LD_INT 8
3697: PUSH
3698: LD_INT 11
3700: PUSH
3701: LD_INT 12
3703: PUSH
3704: LD_INT 15
3706: PUSH
3707: LD_INT 16
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 23
3715: PUSH
3716: LD_INT 26
3718: PUSH
3719: LD_INT 36
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 101
3738: PUSH
3739: LD_INT 102
3741: PUSH
3742: LD_INT 105
3744: PUSH
3745: LD_INT 106
3747: PUSH
3748: LD_INT 108
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 6377
3764: LD_INT 5
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3872
3772: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3773: LD_ADDR_VAR 0 1
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: LD_INT 5
3786: PUSH
3787: LD_INT 6
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 11
3795: PUSH
3796: LD_INT 12
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 16
3804: PUSH
3805: LD_INT 22
3807: PUSH
3808: LD_INT 23
3810: PUSH
3811: LD_INT 25
3813: PUSH
3814: LD_INT 26
3816: PUSH
3817: LD_INT 36
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 101
3838: PUSH
3839: LD_INT 102
3841: PUSH
3842: LD_INT 105
3844: PUSH
3845: LD_INT 106
3847: PUSH
3848: LD_INT 108
3850: PUSH
3851: LD_INT 109
3853: PUSH
3854: LD_INT 112
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6377
3872: LD_INT 6
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 4000
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3881: LD_ADDR_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 11
3903: PUSH
3904: LD_INT 12
3906: PUSH
3907: LD_INT 15
3909: PUSH
3910: LD_INT 16
3912: PUSH
3913: LD_INT 20
3915: PUSH
3916: LD_INT 21
3918: PUSH
3919: LD_INT 22
3921: PUSH
3922: LD_INT 23
3924: PUSH
3925: LD_INT 25
3927: PUSH
3928: LD_INT 26
3930: PUSH
3931: LD_INT 30
3933: PUSH
3934: LD_INT 31
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 36
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 101
3966: PUSH
3967: LD_INT 102
3969: PUSH
3970: LD_INT 105
3972: PUSH
3973: LD_INT 106
3975: PUSH
3976: LD_INT 108
3978: PUSH
3979: LD_INT 109
3981: PUSH
3982: LD_INT 112
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: ST_TO_ADDR
3998: GO 6377
4000: LD_INT 7
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4008
4006: GO 4108
4008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4009: LD_ADDR_VAR 0 1
4013: PUSH
4014: LD_INT 2
4016: PUSH
4017: LD_INT 4
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 7
4025: PUSH
4026: LD_INT 11
4028: PUSH
4029: LD_INT 12
4031: PUSH
4032: LD_INT 15
4034: PUSH
4035: LD_INT 16
4037: PUSH
4038: LD_INT 20
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 22
4046: PUSH
4047: LD_INT 23
4049: PUSH
4050: LD_INT 25
4052: PUSH
4053: LD_INT 26
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 103
4080: PUSH
4081: LD_INT 105
4083: PUSH
4084: LD_INT 106
4086: PUSH
4087: LD_INT 108
4089: PUSH
4090: LD_INT 112
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: ST_TO_ADDR
4106: GO 6377
4108: LD_INT 8
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4244
4116: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: LD_INT 8
4139: PUSH
4140: LD_INT 11
4142: PUSH
4143: LD_INT 12
4145: PUSH
4146: LD_INT 15
4148: PUSH
4149: LD_INT 16
4151: PUSH
4152: LD_INT 20
4154: PUSH
4155: LD_INT 21
4157: PUSH
4158: LD_INT 22
4160: PUSH
4161: LD_INT 23
4163: PUSH
4164: LD_INT 25
4166: PUSH
4167: LD_INT 26
4169: PUSH
4170: LD_INT 30
4172: PUSH
4173: LD_INT 31
4175: PUSH
4176: LD_INT 32
4178: PUSH
4179: LD_INT 36
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 101
4206: PUSH
4207: LD_INT 102
4209: PUSH
4210: LD_INT 103
4212: PUSH
4213: LD_INT 105
4215: PUSH
4216: LD_INT 106
4218: PUSH
4219: LD_INT 108
4221: PUSH
4222: LD_INT 109
4224: PUSH
4225: LD_INT 112
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: ST_TO_ADDR
4242: GO 6377
4244: LD_INT 9
4246: DOUBLE
4247: EQUAL
4248: IFTRUE 4252
4250: GO 4388
4252: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4253: LD_ADDR_VAR 0 1
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: LD_INT 4
4263: PUSH
4264: LD_INT 5
4266: PUSH
4267: LD_INT 6
4269: PUSH
4270: LD_INT 7
4272: PUSH
4273: LD_INT 8
4275: PUSH
4276: LD_INT 11
4278: PUSH
4279: LD_INT 12
4281: PUSH
4282: LD_INT 15
4284: PUSH
4285: LD_INT 16
4287: PUSH
4288: LD_INT 20
4290: PUSH
4291: LD_INT 21
4293: PUSH
4294: LD_INT 22
4296: PUSH
4297: LD_INT 23
4299: PUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 26
4305: PUSH
4306: LD_INT 28
4308: PUSH
4309: LD_INT 30
4311: PUSH
4312: LD_INT 31
4314: PUSH
4315: LD_INT 32
4317: PUSH
4318: LD_INT 36
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 102
4349: PUSH
4350: LD_INT 103
4352: PUSH
4353: LD_INT 105
4355: PUSH
4356: LD_INT 106
4358: PUSH
4359: LD_INT 108
4361: PUSH
4362: LD_INT 109
4364: PUSH
4365: LD_INT 112
4367: PUSH
4368: LD_INT 114
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: ST_TO_ADDR
4386: GO 6377
4388: LD_INT 10
4390: DOUBLE
4391: EQUAL
4392: IFTRUE 4396
4394: GO 4580
4396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4397: LD_ADDR_VAR 0 1
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 6
4413: PUSH
4414: LD_INT 7
4416: PUSH
4417: LD_INT 8
4419: PUSH
4420: LD_INT 9
4422: PUSH
4423: LD_INT 10
4425: PUSH
4426: LD_INT 11
4428: PUSH
4429: LD_INT 12
4431: PUSH
4432: LD_INT 13
4434: PUSH
4435: LD_INT 14
4437: PUSH
4438: LD_INT 15
4440: PUSH
4441: LD_INT 16
4443: PUSH
4444: LD_INT 17
4446: PUSH
4447: LD_INT 18
4449: PUSH
4450: LD_INT 19
4452: PUSH
4453: LD_INT 20
4455: PUSH
4456: LD_INT 21
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 26
4473: PUSH
4474: LD_INT 28
4476: PUSH
4477: LD_INT 30
4479: PUSH
4480: LD_INT 31
4482: PUSH
4483: LD_INT 32
4485: PUSH
4486: LD_INT 36
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 101
4522: PUSH
4523: LD_INT 102
4525: PUSH
4526: LD_INT 103
4528: PUSH
4529: LD_INT 104
4531: PUSH
4532: LD_INT 105
4534: PUSH
4535: LD_INT 106
4537: PUSH
4538: LD_INT 107
4540: PUSH
4541: LD_INT 108
4543: PUSH
4544: LD_INT 109
4546: PUSH
4547: LD_INT 110
4549: PUSH
4550: LD_INT 111
4552: PUSH
4553: LD_INT 112
4555: PUSH
4556: LD_INT 114
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: ST_TO_ADDR
4578: GO 6377
4580: LD_INT 11
4582: DOUBLE
4583: EQUAL
4584: IFTRUE 4588
4586: GO 4780
4588: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 3
4599: PUSH
4600: LD_INT 4
4602: PUSH
4603: LD_INT 5
4605: PUSH
4606: LD_INT 6
4608: PUSH
4609: LD_INT 7
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: LD_INT 9
4617: PUSH
4618: LD_INT 10
4620: PUSH
4621: LD_INT 11
4623: PUSH
4624: LD_INT 12
4626: PUSH
4627: LD_INT 13
4629: PUSH
4630: LD_INT 14
4632: PUSH
4633: LD_INT 15
4635: PUSH
4636: LD_INT 16
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 18
4644: PUSH
4645: LD_INT 19
4647: PUSH
4648: LD_INT 20
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 23
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 25
4665: PUSH
4666: LD_INT 26
4668: PUSH
4669: LD_INT 28
4671: PUSH
4672: LD_INT 30
4674: PUSH
4675: LD_INT 31
4677: PUSH
4678: LD_INT 32
4680: PUSH
4681: LD_INT 34
4683: PUSH
4684: LD_INT 36
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 101
4722: PUSH
4723: LD_INT 102
4725: PUSH
4726: LD_INT 103
4728: PUSH
4729: LD_INT 104
4731: PUSH
4732: LD_INT 105
4734: PUSH
4735: LD_INT 106
4737: PUSH
4738: LD_INT 107
4740: PUSH
4741: LD_INT 108
4743: PUSH
4744: LD_INT 109
4746: PUSH
4747: LD_INT 110
4749: PUSH
4750: LD_INT 111
4752: PUSH
4753: LD_INT 112
4755: PUSH
4756: LD_INT 114
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: ST_TO_ADDR
4778: GO 6377
4780: LD_INT 12
4782: DOUBLE
4783: EQUAL
4784: IFTRUE 4788
4786: GO 4996
4788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4789: LD_ADDR_VAR 0 1
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: LD_INT 6
4811: PUSH
4812: LD_INT 7
4814: PUSH
4815: LD_INT 8
4817: PUSH
4818: LD_INT 9
4820: PUSH
4821: LD_INT 10
4823: PUSH
4824: LD_INT 11
4826: PUSH
4827: LD_INT 12
4829: PUSH
4830: LD_INT 13
4832: PUSH
4833: LD_INT 14
4835: PUSH
4836: LD_INT 15
4838: PUSH
4839: LD_INT 16
4841: PUSH
4842: LD_INT 17
4844: PUSH
4845: LD_INT 18
4847: PUSH
4848: LD_INT 19
4850: PUSH
4851: LD_INT 20
4853: PUSH
4854: LD_INT 21
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 23
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: LD_INT 25
4868: PUSH
4869: LD_INT 26
4871: PUSH
4872: LD_INT 27
4874: PUSH
4875: LD_INT 28
4877: PUSH
4878: LD_INT 30
4880: PUSH
4881: LD_INT 31
4883: PUSH
4884: LD_INT 32
4886: PUSH
4887: LD_INT 33
4889: PUSH
4890: LD_INT 34
4892: PUSH
4893: LD_INT 36
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 101
4934: PUSH
4935: LD_INT 102
4937: PUSH
4938: LD_INT 103
4940: PUSH
4941: LD_INT 104
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: LD_INT 107
4952: PUSH
4953: LD_INT 108
4955: PUSH
4956: LD_INT 109
4958: PUSH
4959: LD_INT 110
4961: PUSH
4962: LD_INT 111
4964: PUSH
4965: LD_INT 112
4967: PUSH
4968: LD_INT 113
4970: PUSH
4971: LD_INT 114
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: ST_TO_ADDR
4994: GO 6377
4996: LD_INT 13
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5212
5004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5005: LD_ADDR_VAR 0 1
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: LD_INT 7
5030: PUSH
5031: LD_INT 8
5033: PUSH
5034: LD_INT 9
5036: PUSH
5037: LD_INT 10
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 12
5045: PUSH
5046: LD_INT 13
5048: PUSH
5049: LD_INT 14
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: LD_INT 16
5057: PUSH
5058: LD_INT 17
5060: PUSH
5061: LD_INT 18
5063: PUSH
5064: LD_INT 19
5066: PUSH
5067: LD_INT 20
5069: PUSH
5070: LD_INT 21
5072: PUSH
5073: LD_INT 22
5075: PUSH
5076: LD_INT 23
5078: PUSH
5079: LD_INT 24
5081: PUSH
5082: LD_INT 25
5084: PUSH
5085: LD_INT 26
5087: PUSH
5088: LD_INT 27
5090: PUSH
5091: LD_INT 28
5093: PUSH
5094: LD_INT 30
5096: PUSH
5097: LD_INT 31
5099: PUSH
5100: LD_INT 32
5102: PUSH
5103: LD_INT 33
5105: PUSH
5106: LD_INT 34
5108: PUSH
5109: LD_INT 36
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 101
5150: PUSH
5151: LD_INT 102
5153: PUSH
5154: LD_INT 103
5156: PUSH
5157: LD_INT 104
5159: PUSH
5160: LD_INT 105
5162: PUSH
5163: LD_INT 106
5165: PUSH
5166: LD_INT 107
5168: PUSH
5169: LD_INT 108
5171: PUSH
5172: LD_INT 109
5174: PUSH
5175: LD_INT 110
5177: PUSH
5178: LD_INT 111
5180: PUSH
5181: LD_INT 112
5183: PUSH
5184: LD_INT 113
5186: PUSH
5187: LD_INT 114
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: ST_TO_ADDR
5210: GO 6377
5212: LD_INT 14
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5432
5220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5221: LD_ADDR_VAR 0 1
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 3
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 5
5240: PUSH
5241: LD_INT 6
5243: PUSH
5244: LD_INT 7
5246: PUSH
5247: LD_INT 8
5249: PUSH
5250: LD_INT 9
5252: PUSH
5253: LD_INT 10
5255: PUSH
5256: LD_INT 11
5258: PUSH
5259: LD_INT 12
5261: PUSH
5262: LD_INT 13
5264: PUSH
5265: LD_INT 14
5267: PUSH
5268: LD_INT 15
5270: PUSH
5271: LD_INT 16
5273: PUSH
5274: LD_INT 17
5276: PUSH
5277: LD_INT 18
5279: PUSH
5280: LD_INT 19
5282: PUSH
5283: LD_INT 20
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 23
5294: PUSH
5295: LD_INT 24
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 26
5303: PUSH
5304: LD_INT 27
5306: PUSH
5307: LD_INT 28
5309: PUSH
5310: LD_INT 29
5312: PUSH
5313: LD_INT 30
5315: PUSH
5316: LD_INT 31
5318: PUSH
5319: LD_INT 32
5321: PUSH
5322: LD_INT 33
5324: PUSH
5325: LD_INT 34
5327: PUSH
5328: LD_INT 36
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 101
5370: PUSH
5371: LD_INT 102
5373: PUSH
5374: LD_INT 103
5376: PUSH
5377: LD_INT 104
5379: PUSH
5380: LD_INT 105
5382: PUSH
5383: LD_INT 106
5385: PUSH
5386: LD_INT 107
5388: PUSH
5389: LD_INT 108
5391: PUSH
5392: LD_INT 109
5394: PUSH
5395: LD_INT 110
5397: PUSH
5398: LD_INT 111
5400: PUSH
5401: LD_INT 112
5403: PUSH
5404: LD_INT 113
5406: PUSH
5407: LD_INT 114
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: ST_TO_ADDR
5430: GO 6377
5432: LD_INT 15
5434: DOUBLE
5435: EQUAL
5436: IFTRUE 5440
5438: GO 5652
5440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 4
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: LD_INT 6
5463: PUSH
5464: LD_INT 7
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: LD_INT 9
5472: PUSH
5473: LD_INT 10
5475: PUSH
5476: LD_INT 11
5478: PUSH
5479: LD_INT 12
5481: PUSH
5482: LD_INT 13
5484: PUSH
5485: LD_INT 14
5487: PUSH
5488: LD_INT 15
5490: PUSH
5491: LD_INT 16
5493: PUSH
5494: LD_INT 17
5496: PUSH
5497: LD_INT 18
5499: PUSH
5500: LD_INT 19
5502: PUSH
5503: LD_INT 20
5505: PUSH
5506: LD_INT 21
5508: PUSH
5509: LD_INT 22
5511: PUSH
5512: LD_INT 23
5514: PUSH
5515: LD_INT 24
5517: PUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 26
5523: PUSH
5524: LD_INT 27
5526: PUSH
5527: LD_INT 28
5529: PUSH
5530: LD_INT 29
5532: PUSH
5533: LD_INT 30
5535: PUSH
5536: LD_INT 31
5538: PUSH
5539: LD_INT 32
5541: PUSH
5542: LD_INT 33
5544: PUSH
5545: LD_INT 34
5547: PUSH
5548: LD_INT 36
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 101
5590: PUSH
5591: LD_INT 102
5593: PUSH
5594: LD_INT 103
5596: PUSH
5597: LD_INT 104
5599: PUSH
5600: LD_INT 105
5602: PUSH
5603: LD_INT 106
5605: PUSH
5606: LD_INT 107
5608: PUSH
5609: LD_INT 108
5611: PUSH
5612: LD_INT 109
5614: PUSH
5615: LD_INT 110
5617: PUSH
5618: LD_INT 111
5620: PUSH
5621: LD_INT 112
5623: PUSH
5624: LD_INT 113
5626: PUSH
5627: LD_INT 114
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: ST_TO_ADDR
5650: GO 6377
5652: LD_INT 16
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5784
5660: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5661: LD_ADDR_VAR 0 1
5665: PUSH
5666: LD_INT 2
5668: PUSH
5669: LD_INT 4
5671: PUSH
5672: LD_INT 5
5674: PUSH
5675: LD_INT 7
5677: PUSH
5678: LD_INT 11
5680: PUSH
5681: LD_INT 12
5683: PUSH
5684: LD_INT 15
5686: PUSH
5687: LD_INT 16
5689: PUSH
5690: LD_INT 20
5692: PUSH
5693: LD_INT 21
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 23
5701: PUSH
5702: LD_INT 25
5704: PUSH
5705: LD_INT 26
5707: PUSH
5708: LD_INT 30
5710: PUSH
5711: LD_INT 31
5713: PUSH
5714: LD_INT 32
5716: PUSH
5717: LD_INT 33
5719: PUSH
5720: LD_INT 34
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 101
5746: PUSH
5747: LD_INT 102
5749: PUSH
5750: LD_INT 103
5752: PUSH
5753: LD_INT 106
5755: PUSH
5756: LD_INT 108
5758: PUSH
5759: LD_INT 112
5761: PUSH
5762: LD_INT 113
5764: PUSH
5765: LD_INT 114
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: ST_TO_ADDR
5782: GO 6377
5784: LD_INT 17
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 6004
5792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5793: LD_ADDR_VAR 0 1
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: LD_INT 2
5803: PUSH
5804: LD_INT 3
5806: PUSH
5807: LD_INT 4
5809: PUSH
5810: LD_INT 5
5812: PUSH
5813: LD_INT 6
5815: PUSH
5816: LD_INT 7
5818: PUSH
5819: LD_INT 8
5821: PUSH
5822: LD_INT 9
5824: PUSH
5825: LD_INT 10
5827: PUSH
5828: LD_INT 11
5830: PUSH
5831: LD_INT 12
5833: PUSH
5834: LD_INT 13
5836: PUSH
5837: LD_INT 14
5839: PUSH
5840: LD_INT 15
5842: PUSH
5843: LD_INT 16
5845: PUSH
5846: LD_INT 17
5848: PUSH
5849: LD_INT 18
5851: PUSH
5852: LD_INT 19
5854: PUSH
5855: LD_INT 20
5857: PUSH
5858: LD_INT 21
5860: PUSH
5861: LD_INT 22
5863: PUSH
5864: LD_INT 23
5866: PUSH
5867: LD_INT 24
5869: PUSH
5870: LD_INT 25
5872: PUSH
5873: LD_INT 26
5875: PUSH
5876: LD_INT 27
5878: PUSH
5879: LD_INT 28
5881: PUSH
5882: LD_INT 29
5884: PUSH
5885: LD_INT 30
5887: PUSH
5888: LD_INT 31
5890: PUSH
5891: LD_INT 32
5893: PUSH
5894: LD_INT 33
5896: PUSH
5897: LD_INT 34
5899: PUSH
5900: LD_INT 36
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 101
5942: PUSH
5943: LD_INT 102
5945: PUSH
5946: LD_INT 103
5948: PUSH
5949: LD_INT 104
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 106
5957: PUSH
5958: LD_INT 107
5960: PUSH
5961: LD_INT 108
5963: PUSH
5964: LD_INT 109
5966: PUSH
5967: LD_INT 110
5969: PUSH
5970: LD_INT 111
5972: PUSH
5973: LD_INT 112
5975: PUSH
5976: LD_INT 113
5978: PUSH
5979: LD_INT 114
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: ST_TO_ADDR
6002: GO 6377
6004: LD_INT 18
6006: DOUBLE
6007: EQUAL
6008: IFTRUE 6012
6010: GO 6148
6012: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6013: LD_ADDR_VAR 0 1
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 4
6023: PUSH
6024: LD_INT 5
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: LD_INT 11
6032: PUSH
6033: LD_INT 12
6035: PUSH
6036: LD_INT 15
6038: PUSH
6039: LD_INT 16
6041: PUSH
6042: LD_INT 20
6044: PUSH
6045: LD_INT 21
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_INT 23
6053: PUSH
6054: LD_INT 25
6056: PUSH
6057: LD_INT 26
6059: PUSH
6060: LD_INT 30
6062: PUSH
6063: LD_INT 31
6065: PUSH
6066: LD_INT 32
6068: PUSH
6069: LD_INT 33
6071: PUSH
6072: LD_INT 34
6074: PUSH
6075: LD_INT 35
6077: PUSH
6078: LD_INT 36
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 101
6106: PUSH
6107: LD_INT 102
6109: PUSH
6110: LD_INT 103
6112: PUSH
6113: LD_INT 106
6115: PUSH
6116: LD_INT 108
6118: PUSH
6119: LD_INT 112
6121: PUSH
6122: LD_INT 113
6124: PUSH
6125: LD_INT 114
6127: PUSH
6128: LD_INT 115
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: ST_TO_ADDR
6146: GO 6377
6148: LD_INT 19
6150: DOUBLE
6151: EQUAL
6152: IFTRUE 6156
6154: GO 6376
6156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6157: LD_ADDR_VAR 0 1
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 5
6176: PUSH
6177: LD_INT 6
6179: PUSH
6180: LD_INT 7
6182: PUSH
6183: LD_INT 8
6185: PUSH
6186: LD_INT 9
6188: PUSH
6189: LD_INT 10
6191: PUSH
6192: LD_INT 11
6194: PUSH
6195: LD_INT 12
6197: PUSH
6198: LD_INT 13
6200: PUSH
6201: LD_INT 14
6203: PUSH
6204: LD_INT 15
6206: PUSH
6207: LD_INT 16
6209: PUSH
6210: LD_INT 17
6212: PUSH
6213: LD_INT 18
6215: PUSH
6216: LD_INT 19
6218: PUSH
6219: LD_INT 20
6221: PUSH
6222: LD_INT 21
6224: PUSH
6225: LD_INT 22
6227: PUSH
6228: LD_INT 23
6230: PUSH
6231: LD_INT 24
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 26
6239: PUSH
6240: LD_INT 27
6242: PUSH
6243: LD_INT 28
6245: PUSH
6246: LD_INT 29
6248: PUSH
6249: LD_INT 30
6251: PUSH
6252: LD_INT 31
6254: PUSH
6255: LD_INT 32
6257: PUSH
6258: LD_INT 33
6260: PUSH
6261: LD_INT 34
6263: PUSH
6264: LD_INT 35
6266: PUSH
6267: LD_INT 36
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 101
6310: PUSH
6311: LD_INT 102
6313: PUSH
6314: LD_INT 103
6316: PUSH
6317: LD_INT 104
6319: PUSH
6320: LD_INT 105
6322: PUSH
6323: LD_INT 106
6325: PUSH
6326: LD_INT 107
6328: PUSH
6329: LD_INT 108
6331: PUSH
6332: LD_INT 109
6334: PUSH
6335: LD_INT 110
6337: PUSH
6338: LD_INT 111
6340: PUSH
6341: LD_INT 112
6343: PUSH
6344: LD_INT 113
6346: PUSH
6347: LD_INT 114
6349: PUSH
6350: LD_INT 115
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: ST_TO_ADDR
6374: GO 6377
6376: POP
// end ; if result then
6377: LD_VAR 0 1
6381: IFFALSE 6670
// begin normal :=  ;
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_STRING 
6390: ST_TO_ADDR
// hardcore :=  ;
6391: LD_ADDR_VAR 0 4
6395: PUSH
6396: LD_STRING 
6398: ST_TO_ADDR
// for i = 1 to normalCounter do
6399: LD_ADDR_VAR 0 5
6403: PUSH
6404: DOUBLE
6405: LD_INT 1
6407: DEC
6408: ST_TO_ADDR
6409: LD_EXP 37
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6516
// begin tmp := 0 ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_STRING 0
6424: ST_TO_ADDR
// if result [ 1 ] then
6425: LD_VAR 0 1
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: IFFALSE 6498
// if result [ 1 ] [ 1 ] = i then
6435: LD_VAR 0 1
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: PUSH
6448: LD_VAR 0 5
6452: EQUAL
6453: IFFALSE 6498
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: LD_VAR 0 1
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 3
6484: PPUSH
6485: CALL_OW 1
6489: ST_TO_ADDR
// tmp := 1 ;
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_STRING 1
6497: ST_TO_ADDR
// end ; normal := normal & tmp ;
6498: LD_ADDR_VAR 0 3
6502: PUSH
6503: LD_VAR 0 3
6507: PUSH
6508: LD_VAR 0 2
6512: STR
6513: ST_TO_ADDR
// end ;
6514: GO 6414
6516: POP
6517: POP
// for i = 1 to hardcoreCounter do
6518: LD_ADDR_VAR 0 5
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_EXP 38
6532: PUSH
6533: FOR_TO
6534: IFFALSE 6639
// begin tmp := 0 ;
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_STRING 0
6543: ST_TO_ADDR
// if result [ 2 ] then
6544: LD_VAR 0 1
6548: PUSH
6549: LD_INT 2
6551: ARRAY
6552: IFFALSE 6621
// if result [ 2 ] [ 1 ] = 100 + i then
6554: LD_VAR 0 1
6558: PUSH
6559: LD_INT 2
6561: ARRAY
6562: PUSH
6563: LD_INT 1
6565: ARRAY
6566: PUSH
6567: LD_INT 100
6569: PUSH
6570: LD_VAR 0 5
6574: PLUS
6575: EQUAL
6576: IFFALSE 6621
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6578: LD_ADDR_VAR 0 1
6582: PUSH
6583: LD_VAR 0 1
6587: PPUSH
6588: LD_INT 2
6590: PPUSH
6591: LD_VAR 0 1
6595: PUSH
6596: LD_INT 2
6598: ARRAY
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 3
6607: PPUSH
6608: CALL_OW 1
6612: ST_TO_ADDR
// tmp := 1 ;
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: LD_STRING 1
6620: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6621: LD_ADDR_VAR 0 4
6625: PUSH
6626: LD_VAR 0 4
6630: PUSH
6631: LD_VAR 0 2
6635: STR
6636: ST_TO_ADDR
// end ;
6637: GO 6533
6639: POP
6640: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6641: LD_STRING getStreamItemsFromMission("
6643: PUSH
6644: LD_VAR 0 3
6648: STR
6649: PUSH
6650: LD_STRING ","
6652: STR
6653: PUSH
6654: LD_VAR 0 4
6658: STR
6659: PUSH
6660: LD_STRING ")
6662: STR
6663: PPUSH
6664: CALL_OW 559
// end else
6668: GO 6677
// ToLua ( getStreamItemsFromMission("","") ) ;
6670: LD_STRING getStreamItemsFromMission("","")
6672: PPUSH
6673: CALL_OW 559
// end ;
6677: LD_VAR 0 1
6681: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 100
6689: EQUAL
6690: IFFALSE 7639
// begin if not StreamModeActive then
6692: LD_EXP 36
6696: NOT
6697: IFFALSE 6707
// StreamModeActive := true ;
6699: LD_ADDR_EXP 36
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// if p3 = 0 then
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 0
6714: EQUAL
6715: IFFALSE 6721
// InitStreamMode ;
6717: CALL 2967 0 0
// if p3 = 1 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_INT 1
6728: EQUAL
6729: IFFALSE 6739
// sRocket := true ;
6731: LD_ADDR_EXP 41
6735: PUSH
6736: LD_INT 1
6738: ST_TO_ADDR
// if p3 = 2 then
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 2
6746: EQUAL
6747: IFFALSE 6757
// sSpeed := true ;
6749: LD_ADDR_EXP 40
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// if p3 = 3 then
6757: LD_VAR 0 3
6761: PUSH
6762: LD_INT 3
6764: EQUAL
6765: IFFALSE 6775
// sEngine := true ;
6767: LD_ADDR_EXP 42
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// if p3 = 4 then
6775: LD_VAR 0 3
6779: PUSH
6780: LD_INT 4
6782: EQUAL
6783: IFFALSE 6793
// sSpec := true ;
6785: LD_ADDR_EXP 39
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// if p3 = 5 then
6793: LD_VAR 0 3
6797: PUSH
6798: LD_INT 5
6800: EQUAL
6801: IFFALSE 6811
// sLevel := true ;
6803: LD_ADDR_EXP 43
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// if p3 = 6 then
6811: LD_VAR 0 3
6815: PUSH
6816: LD_INT 6
6818: EQUAL
6819: IFFALSE 6829
// sArmoury := true ;
6821: LD_ADDR_EXP 44
6825: PUSH
6826: LD_INT 1
6828: ST_TO_ADDR
// if p3 = 7 then
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 7
6836: EQUAL
6837: IFFALSE 6847
// sRadar := true ;
6839: LD_ADDR_EXP 45
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// if p3 = 8 then
6847: LD_VAR 0 3
6851: PUSH
6852: LD_INT 8
6854: EQUAL
6855: IFFALSE 6865
// sBunker := true ;
6857: LD_ADDR_EXP 46
6861: PUSH
6862: LD_INT 1
6864: ST_TO_ADDR
// if p3 = 9 then
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 9
6872: EQUAL
6873: IFFALSE 6883
// sHack := true ;
6875: LD_ADDR_EXP 47
6879: PUSH
6880: LD_INT 1
6882: ST_TO_ADDR
// if p3 = 10 then
6883: LD_VAR 0 3
6887: PUSH
6888: LD_INT 10
6890: EQUAL
6891: IFFALSE 6901
// sFire := true ;
6893: LD_ADDR_EXP 48
6897: PUSH
6898: LD_INT 1
6900: ST_TO_ADDR
// if p3 = 11 then
6901: LD_VAR 0 3
6905: PUSH
6906: LD_INT 11
6908: EQUAL
6909: IFFALSE 6919
// sRefresh := true ;
6911: LD_ADDR_EXP 49
6915: PUSH
6916: LD_INT 1
6918: ST_TO_ADDR
// if p3 = 12 then
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 12
6926: EQUAL
6927: IFFALSE 6937
// sExp := true ;
6929: LD_ADDR_EXP 50
6933: PUSH
6934: LD_INT 1
6936: ST_TO_ADDR
// if p3 = 13 then
6937: LD_VAR 0 3
6941: PUSH
6942: LD_INT 13
6944: EQUAL
6945: IFFALSE 6955
// sDepot := true ;
6947: LD_ADDR_EXP 51
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// if p3 = 14 then
6955: LD_VAR 0 3
6959: PUSH
6960: LD_INT 14
6962: EQUAL
6963: IFFALSE 6973
// sFlag := true ;
6965: LD_ADDR_EXP 52
6969: PUSH
6970: LD_INT 1
6972: ST_TO_ADDR
// if p3 = 15 then
6973: LD_VAR 0 3
6977: PUSH
6978: LD_INT 15
6980: EQUAL
6981: IFFALSE 6991
// sKamikadze := true ;
6983: LD_ADDR_EXP 60
6987: PUSH
6988: LD_INT 1
6990: ST_TO_ADDR
// if p3 = 16 then
6991: LD_VAR 0 3
6995: PUSH
6996: LD_INT 16
6998: EQUAL
6999: IFFALSE 7009
// sTroll := true ;
7001: LD_ADDR_EXP 61
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// if p3 = 17 then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 17
7016: EQUAL
7017: IFFALSE 7027
// sSlow := true ;
7019: LD_ADDR_EXP 62
7023: PUSH
7024: LD_INT 1
7026: ST_TO_ADDR
// if p3 = 18 then
7027: LD_VAR 0 3
7031: PUSH
7032: LD_INT 18
7034: EQUAL
7035: IFFALSE 7045
// sLack := true ;
7037: LD_ADDR_EXP 63
7041: PUSH
7042: LD_INT 1
7044: ST_TO_ADDR
// if p3 = 19 then
7045: LD_VAR 0 3
7049: PUSH
7050: LD_INT 19
7052: EQUAL
7053: IFFALSE 7063
// sTank := true ;
7055: LD_ADDR_EXP 65
7059: PUSH
7060: LD_INT 1
7062: ST_TO_ADDR
// if p3 = 20 then
7063: LD_VAR 0 3
7067: PUSH
7068: LD_INT 20
7070: EQUAL
7071: IFFALSE 7081
// sRemote := true ;
7073: LD_ADDR_EXP 66
7077: PUSH
7078: LD_INT 1
7080: ST_TO_ADDR
// if p3 = 21 then
7081: LD_VAR 0 3
7085: PUSH
7086: LD_INT 21
7088: EQUAL
7089: IFFALSE 7099
// sPowell := true ;
7091: LD_ADDR_EXP 67
7095: PUSH
7096: LD_INT 1
7098: ST_TO_ADDR
// if p3 = 22 then
7099: LD_VAR 0 3
7103: PUSH
7104: LD_INT 22
7106: EQUAL
7107: IFFALSE 7117
// sTeleport := true ;
7109: LD_ADDR_EXP 70
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// if p3 = 23 then
7117: LD_VAR 0 3
7121: PUSH
7122: LD_INT 23
7124: EQUAL
7125: IFFALSE 7135
// sOilTower := true ;
7127: LD_ADDR_EXP 72
7131: PUSH
7132: LD_INT 1
7134: ST_TO_ADDR
// if p3 = 24 then
7135: LD_VAR 0 3
7139: PUSH
7140: LD_INT 24
7142: EQUAL
7143: IFFALSE 7153
// sShovel := true ;
7145: LD_ADDR_EXP 73
7149: PUSH
7150: LD_INT 1
7152: ST_TO_ADDR
// if p3 = 25 then
7153: LD_VAR 0 3
7157: PUSH
7158: LD_INT 25
7160: EQUAL
7161: IFFALSE 7171
// sSheik := true ;
7163: LD_ADDR_EXP 74
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// if p3 = 26 then
7171: LD_VAR 0 3
7175: PUSH
7176: LD_INT 26
7178: EQUAL
7179: IFFALSE 7189
// sEarthquake := true ;
7181: LD_ADDR_EXP 76
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
// if p3 = 27 then
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 27
7196: EQUAL
7197: IFFALSE 7207
// sAI := true ;
7199: LD_ADDR_EXP 77
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// if p3 = 28 then
7207: LD_VAR 0 3
7211: PUSH
7212: LD_INT 28
7214: EQUAL
7215: IFFALSE 7225
// sCargo := true ;
7217: LD_ADDR_EXP 80
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// if p3 = 29 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 29
7232: EQUAL
7233: IFFALSE 7243
// sDLaser := true ;
7235: LD_ADDR_EXP 81
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// if p3 = 30 then
7243: LD_VAR 0 3
7247: PUSH
7248: LD_INT 30
7250: EQUAL
7251: IFFALSE 7261
// sExchange := true ;
7253: LD_ADDR_EXP 82
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// if p3 = 31 then
7261: LD_VAR 0 3
7265: PUSH
7266: LD_INT 31
7268: EQUAL
7269: IFFALSE 7279
// sFac := true ;
7271: LD_ADDR_EXP 83
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// if p3 = 32 then
7279: LD_VAR 0 3
7283: PUSH
7284: LD_INT 32
7286: EQUAL
7287: IFFALSE 7297
// sPower := true ;
7289: LD_ADDR_EXP 84
7293: PUSH
7294: LD_INT 1
7296: ST_TO_ADDR
// if p3 = 33 then
7297: LD_VAR 0 3
7301: PUSH
7302: LD_INT 33
7304: EQUAL
7305: IFFALSE 7315
// sRandom := true ;
7307: LD_ADDR_EXP 85
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// if p3 = 34 then
7315: LD_VAR 0 3
7319: PUSH
7320: LD_INT 34
7322: EQUAL
7323: IFFALSE 7333
// sShield := true ;
7325: LD_ADDR_EXP 86
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// if p3 = 35 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 35
7340: EQUAL
7341: IFFALSE 7351
// sTime := true ;
7343: LD_ADDR_EXP 87
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// if p3 = 36 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 36
7358: EQUAL
7359: IFFALSE 7369
// sTools := true ;
7361: LD_ADDR_EXP 88
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// if p3 = 101 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 101
7376: EQUAL
7377: IFFALSE 7387
// sSold := true ;
7379: LD_ADDR_EXP 53
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// if p3 = 102 then
7387: LD_VAR 0 3
7391: PUSH
7392: LD_INT 102
7394: EQUAL
7395: IFFALSE 7405
// sDiff := true ;
7397: LD_ADDR_EXP 54
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if p3 = 103 then
7405: LD_VAR 0 3
7409: PUSH
7410: LD_INT 103
7412: EQUAL
7413: IFFALSE 7423
// sFog := true ;
7415: LD_ADDR_EXP 57
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if p3 = 104 then
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 104
7430: EQUAL
7431: IFFALSE 7441
// sReset := true ;
7433: LD_ADDR_EXP 58
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// if p3 = 105 then
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 105
7448: EQUAL
7449: IFFALSE 7459
// sSun := true ;
7451: LD_ADDR_EXP 59
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 106 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 106
7466: EQUAL
7467: IFFALSE 7477
// sTiger := true ;
7469: LD_ADDR_EXP 55
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 107 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 107
7484: EQUAL
7485: IFFALSE 7495
// sBomb := true ;
7487: LD_ADDR_EXP 56
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if p3 = 108 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 108
7502: EQUAL
7503: IFFALSE 7513
// sWound := true ;
7505: LD_ADDR_EXP 64
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if p3 = 109 then
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 109
7520: EQUAL
7521: IFFALSE 7531
// sBetray := true ;
7523: LD_ADDR_EXP 68
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// if p3 = 110 then
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 110
7538: EQUAL
7539: IFFALSE 7549
// sContamin := true ;
7541: LD_ADDR_EXP 69
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if p3 = 111 then
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 111
7556: EQUAL
7557: IFFALSE 7567
// sOil := true ;
7559: LD_ADDR_EXP 71
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// if p3 = 112 then
7567: LD_VAR 0 3
7571: PUSH
7572: LD_INT 112
7574: EQUAL
7575: IFFALSE 7585
// sStu := true ;
7577: LD_ADDR_EXP 75
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// if p3 = 113 then
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 113
7592: EQUAL
7593: IFFALSE 7603
// sBazooka := true ;
7595: LD_ADDR_EXP 78
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// if p3 = 114 then
7603: LD_VAR 0 3
7607: PUSH
7608: LD_INT 114
7610: EQUAL
7611: IFFALSE 7621
// sMortar := true ;
7613: LD_ADDR_EXP 79
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// if p3 = 115 then
7621: LD_VAR 0 3
7625: PUSH
7626: LD_INT 115
7628: EQUAL
7629: IFFALSE 7639
// sRanger := true ;
7631: LD_ADDR_EXP 89
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// end ; end ;
7639: PPOPN 6
7641: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7642: LD_EXP 36
7646: PUSH
7647: LD_EXP 41
7651: AND
7652: IFFALSE 7776
7654: GO 7656
7656: DISABLE
7657: LD_INT 0
7659: PPUSH
7660: PPUSH
// begin enable ;
7661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7662: LD_ADDR_VAR 0 2
7666: PUSH
7667: LD_INT 22
7669: PUSH
7670: LD_OWVAR 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 2
7681: PUSH
7682: LD_INT 34
7684: PUSH
7685: LD_INT 7
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 34
7694: PUSH
7695: LD_INT 45
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 34
7704: PUSH
7705: LD_INT 28
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 34
7714: PUSH
7715: LD_INT 47
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 69
7737: ST_TO_ADDR
// if not tmp then
7738: LD_VAR 0 2
7742: NOT
7743: IFFALSE 7747
// exit ;
7745: GO 7776
// for i in tmp do
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_VAR 0 2
7756: PUSH
7757: FOR_IN
7758: IFFALSE 7774
// begin SetLives ( i , 0 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 0
7767: PPUSH
7768: CALL_OW 234
// end ;
7772: GO 7757
7774: POP
7775: POP
// end ;
7776: PPOPN 2
7778: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7779: LD_EXP 36
7783: PUSH
7784: LD_EXP 42
7788: AND
7789: IFFALSE 7873
7791: GO 7793
7793: DISABLE
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
// begin enable ;
7798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7799: LD_ADDR_VAR 0 2
7803: PUSH
7804: LD_INT 22
7806: PUSH
7807: LD_OWVAR 2
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 32
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// if not tmp then
7835: LD_VAR 0 2
7839: NOT
7840: IFFALSE 7844
// exit ;
7842: GO 7873
// for i in tmp do
7844: LD_ADDR_VAR 0 1
7848: PUSH
7849: LD_VAR 0 2
7853: PUSH
7854: FOR_IN
7855: IFFALSE 7871
// begin SetLives ( i , 0 ) ;
7857: LD_VAR 0 1
7861: PPUSH
7862: LD_INT 0
7864: PPUSH
7865: CALL_OW 234
// end ;
7869: GO 7854
7871: POP
7872: POP
// end ;
7873: PPOPN 2
7875: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7876: LD_EXP 36
7880: PUSH
7881: LD_EXP 39
7885: AND
7886: IFFALSE 7979
7888: GO 7890
7890: DISABLE
7891: LD_INT 0
7893: PPUSH
// begin enable ;
7894: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_OWVAR 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 5
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 25
7927: PUSH
7928: LD_INT 9
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 8
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PUSH
7960: FOR_IN
7961: IFFALSE 7977
// begin SetClass ( i , 1 ) ;
7963: LD_VAR 0 1
7967: PPUSH
7968: LD_INT 1
7970: PPUSH
7971: CALL_OW 336
// end ;
7975: GO 7960
7977: POP
7978: POP
// end ;
7979: PPOPN 1
7981: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7982: LD_EXP 36
7986: PUSH
7987: LD_EXP 40
7991: AND
7992: PUSH
7993: LD_OWVAR 65
7997: PUSH
7998: LD_INT 7
8000: LESS
8001: AND
8002: IFFALSE 8016
8004: GO 8006
8006: DISABLE
// begin enable ;
8007: ENABLE
// game_speed := 7 ;
8008: LD_ADDR_OWVAR 65
8012: PUSH
8013: LD_INT 7
8015: ST_TO_ADDR
// end ;
8016: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8017: LD_EXP 36
8021: PUSH
8022: LD_EXP 43
8026: AND
8027: IFFALSE 8229
8029: GO 8031
8031: DISABLE
8032: LD_INT 0
8034: PPUSH
8035: PPUSH
8036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8037: LD_ADDR_VAR 0 3
8041: PUSH
8042: LD_INT 81
8044: PUSH
8045: LD_OWVAR 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 21
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PPUSH
8068: CALL_OW 69
8072: ST_TO_ADDR
// if not tmp then
8073: LD_VAR 0 3
8077: NOT
8078: IFFALSE 8082
// exit ;
8080: GO 8229
// if tmp > 5 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 5
8089: GREATER
8090: IFFALSE 8102
// k := 5 else
8092: LD_ADDR_VAR 0 2
8096: PUSH
8097: LD_INT 5
8099: ST_TO_ADDR
8100: GO 8112
// k := tmp ;
8102: LD_ADDR_VAR 0 2
8106: PUSH
8107: LD_VAR 0 3
8111: ST_TO_ADDR
// for i := 1 to k do
8112: LD_ADDR_VAR 0 1
8116: PUSH
8117: DOUBLE
8118: LD_INT 1
8120: DEC
8121: ST_TO_ADDR
8122: LD_VAR 0 2
8126: PUSH
8127: FOR_TO
8128: IFFALSE 8227
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8130: LD_VAR 0 3
8134: PUSH
8135: LD_VAR 0 1
8139: ARRAY
8140: PPUSH
8141: LD_VAR 0 1
8145: PUSH
8146: LD_INT 4
8148: MOD
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: PPUSH
8154: CALL_OW 259
8158: PUSH
8159: LD_INT 10
8161: LESS
8162: IFFALSE 8225
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8164: LD_VAR 0 3
8168: PUSH
8169: LD_VAR 0 1
8173: ARRAY
8174: PPUSH
8175: LD_VAR 0 1
8179: PUSH
8180: LD_INT 4
8182: MOD
8183: PUSH
8184: LD_INT 1
8186: PLUS
8187: PPUSH
8188: LD_VAR 0 3
8192: PUSH
8193: LD_VAR 0 1
8197: ARRAY
8198: PPUSH
8199: LD_VAR 0 1
8203: PUSH
8204: LD_INT 4
8206: MOD
8207: PUSH
8208: LD_INT 1
8210: PLUS
8211: PPUSH
8212: CALL_OW 259
8216: PUSH
8217: LD_INT 1
8219: PLUS
8220: PPUSH
8221: CALL_OW 237
8225: GO 8127
8227: POP
8228: POP
// end ;
8229: PPOPN 3
8231: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8232: LD_EXP 36
8236: PUSH
8237: LD_EXP 44
8241: AND
8242: IFFALSE 8262
8244: GO 8246
8246: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8247: LD_INT 4
8249: PPUSH
8250: LD_OWVAR 2
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 324
8262: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8263: LD_EXP 36
8267: PUSH
8268: LD_EXP 73
8272: AND
8273: IFFALSE 8293
8275: GO 8277
8277: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8278: LD_INT 19
8280: PPUSH
8281: LD_OWVAR 2
8285: PPUSH
8286: LD_INT 0
8288: PPUSH
8289: CALL_OW 324
8293: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8294: LD_EXP 36
8298: PUSH
8299: LD_EXP 45
8303: AND
8304: IFFALSE 8406
8306: GO 8308
8308: DISABLE
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
// begin enable ;
8313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_OWVAR 2
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: LD_INT 34
8336: PUSH
8337: LD_INT 11
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 34
8346: PUSH
8347: LD_INT 30
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PPUSH
8363: CALL_OW 69
8367: ST_TO_ADDR
// if not tmp then
8368: LD_VAR 0 2
8372: NOT
8373: IFFALSE 8377
// exit ;
8375: GO 8406
// for i in tmp do
8377: LD_ADDR_VAR 0 1
8381: PUSH
8382: LD_VAR 0 2
8386: PUSH
8387: FOR_IN
8388: IFFALSE 8404
// begin SetLives ( i , 0 ) ;
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 234
// end ;
8402: GO 8387
8404: POP
8405: POP
// end ;
8406: PPOPN 2
8408: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8409: LD_EXP 36
8413: PUSH
8414: LD_EXP 46
8418: AND
8419: IFFALSE 8439
8421: GO 8423
8423: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8424: LD_INT 32
8426: PPUSH
8427: LD_OWVAR 2
8431: PPUSH
8432: LD_INT 0
8434: PPUSH
8435: CALL_OW 324
8439: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8440: LD_EXP 36
8444: PUSH
8445: LD_EXP 47
8449: AND
8450: IFFALSE 8631
8452: GO 8454
8454: DISABLE
8455: LD_INT 0
8457: PPUSH
8458: PPUSH
8459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8460: LD_ADDR_VAR 0 2
8464: PUSH
8465: LD_INT 22
8467: PUSH
8468: LD_OWVAR 2
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 33
8479: PUSH
8480: LD_INT 3
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PPUSH
8491: CALL_OW 69
8495: ST_TO_ADDR
// if not tmp then
8496: LD_VAR 0 2
8500: NOT
8501: IFFALSE 8505
// exit ;
8503: GO 8631
// side := 0 ;
8505: LD_ADDR_VAR 0 3
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// for i := 1 to 8 do
8513: LD_ADDR_VAR 0 1
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_INT 8
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8575
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8529: LD_OWVAR 2
8533: PUSH
8534: LD_VAR 0 1
8538: NONEQUAL
8539: PUSH
8540: LD_OWVAR 2
8544: PPUSH
8545: LD_VAR 0 1
8549: PPUSH
8550: CALL_OW 81
8554: PUSH
8555: LD_INT 2
8557: EQUAL
8558: AND
8559: IFFALSE 8573
// begin side := i ;
8561: LD_ADDR_VAR 0 3
8565: PUSH
8566: LD_VAR 0 1
8570: ST_TO_ADDR
// break ;
8571: GO 8575
// end ;
8573: GO 8526
8575: POP
8576: POP
// if not side then
8577: LD_VAR 0 3
8581: NOT
8582: IFFALSE 8586
// exit ;
8584: GO 8631
// for i := 1 to tmp do
8586: LD_ADDR_VAR 0 1
8590: PUSH
8591: DOUBLE
8592: LD_INT 1
8594: DEC
8595: ST_TO_ADDR
8596: LD_VAR 0 2
8600: PUSH
8601: FOR_TO
8602: IFFALSE 8629
// if Prob ( 30 ) then
8604: LD_INT 30
8606: PPUSH
8607: CALL_OW 13
8611: IFFALSE 8627
// SetSide ( i , side ) ;
8613: LD_VAR 0 1
8617: PPUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: CALL_OW 235
8627: GO 8601
8629: POP
8630: POP
// end ;
8631: PPOPN 3
8633: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8634: LD_EXP 36
8638: PUSH
8639: LD_EXP 49
8643: AND
8644: IFFALSE 8763
8646: GO 8648
8648: DISABLE
8649: LD_INT 0
8651: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8652: LD_ADDR_VAR 0 1
8656: PUSH
8657: LD_INT 22
8659: PUSH
8660: LD_OWVAR 2
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 21
8671: PUSH
8672: LD_INT 1
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 3
8681: PUSH
8682: LD_INT 23
8684: PUSH
8685: LD_INT 0
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: PUSH
8706: FOR_IN
8707: IFFALSE 8761
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 257
8718: PUSH
8719: LD_INT 1
8721: PUSH
8722: LD_INT 2
8724: PUSH
8725: LD_INT 3
8727: PUSH
8728: LD_INT 4
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: IN
8737: IFFALSE 8759
// SetClass ( un , rand ( 1 , 4 ) ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 4
8749: PPUSH
8750: CALL_OW 12
8754: PPUSH
8755: CALL_OW 336
8759: GO 8706
8761: POP
8762: POP
// end ;
8763: PPOPN 1
8765: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8766: LD_EXP 36
8770: PUSH
8771: LD_EXP 48
8775: AND
8776: IFFALSE 8855
8778: GO 8780
8780: DISABLE
8781: LD_INT 0
8783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_OWVAR 2
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 21
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PPUSH
8815: CALL_OW 69
8819: ST_TO_ADDR
// if not tmp then
8820: LD_VAR 0 1
8824: NOT
8825: IFFALSE 8829
// exit ;
8827: GO 8855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8829: LD_VAR 0 1
8833: PUSH
8834: LD_INT 1
8836: PPUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 12
8846: ARRAY
8847: PPUSH
8848: LD_INT 100
8850: PPUSH
8851: CALL_OW 234
// end ;
8855: PPOPN 1
8857: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8858: LD_EXP 36
8862: PUSH
8863: LD_EXP 50
8867: AND
8868: IFFALSE 8966
8870: GO 8872
8872: DISABLE
8873: LD_INT 0
8875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8876: LD_ADDR_VAR 0 1
8880: PUSH
8881: LD_INT 22
8883: PUSH
8884: LD_OWVAR 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 21
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: ST_TO_ADDR
// if not tmp then
8912: LD_VAR 0 1
8916: NOT
8917: IFFALSE 8921
// exit ;
8919: GO 8966
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8921: LD_VAR 0 1
8925: PUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_VAR 0 1
8933: PPUSH
8934: CALL_OW 12
8938: ARRAY
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 4
8945: PPUSH
8946: CALL_OW 12
8950: PPUSH
8951: LD_INT 3000
8953: PPUSH
8954: LD_INT 9000
8956: PPUSH
8957: CALL_OW 12
8961: PPUSH
8962: CALL_OW 492
// end ;
8966: PPOPN 1
8968: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8969: LD_EXP 36
8973: PUSH
8974: LD_EXP 51
8978: AND
8979: IFFALSE 8999
8981: GO 8983
8983: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8984: LD_INT 1
8986: PPUSH
8987: LD_OWVAR 2
8991: PPUSH
8992: LD_INT 0
8994: PPUSH
8995: CALL_OW 324
8999: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9000: LD_EXP 36
9004: PUSH
9005: LD_EXP 52
9009: AND
9010: IFFALSE 9093
9012: GO 9014
9014: DISABLE
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9019: LD_ADDR_VAR 0 2
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 21
9038: PUSH
9039: LD_INT 3
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: ST_TO_ADDR
// if not tmp then
9055: LD_VAR 0 2
9059: NOT
9060: IFFALSE 9064
// exit ;
9062: GO 9093
// for i in tmp do
9064: LD_ADDR_VAR 0 1
9068: PUSH
9069: LD_VAR 0 2
9073: PUSH
9074: FOR_IN
9075: IFFALSE 9091
// SetBLevel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 241
9089: GO 9074
9091: POP
9092: POP
// end ;
9093: PPOPN 2
9095: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9096: LD_EXP 36
9100: PUSH
9101: LD_EXP 53
9105: AND
9106: IFFALSE 9217
9108: GO 9110
9110: DISABLE
9111: LD_INT 0
9113: PPUSH
9114: PPUSH
9115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_INT 22
9123: PUSH
9124: LD_OWVAR 2
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 25
9135: PUSH
9136: LD_INT 1
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 69
9151: ST_TO_ADDR
// if not tmp then
9152: LD_VAR 0 3
9156: NOT
9157: IFFALSE 9161
// exit ;
9159: GO 9217
// un := tmp [ rand ( 1 , tmp ) ] ;
9161: LD_ADDR_VAR 0 2
9165: PUSH
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 1
9173: PPUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: CALL_OW 12
9183: ARRAY
9184: ST_TO_ADDR
// if Crawls ( un ) then
9185: LD_VAR 0 2
9189: PPUSH
9190: CALL_OW 318
9194: IFFALSE 9205
// ComWalk ( un ) ;
9196: LD_VAR 0 2
9200: PPUSH
9201: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9205: LD_VAR 0 2
9209: PPUSH
9210: LD_INT 5
9212: PPUSH
9213: CALL_OW 336
// end ;
9217: PPOPN 3
9219: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
9220: LD_EXP 36
9224: PUSH
9225: LD_EXP 54
9229: AND
9230: PUSH
9231: LD_OWVAR 67
9235: PUSH
9236: LD_INT 3
9238: LESS
9239: AND
9240: IFFALSE 9259
9242: GO 9244
9244: DISABLE
// Difficulty := Difficulty + 1 ;
9245: LD_ADDR_OWVAR 67
9249: PUSH
9250: LD_OWVAR 67
9254: PUSH
9255: LD_INT 1
9257: PLUS
9258: ST_TO_ADDR
9259: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9260: LD_EXP 36
9264: PUSH
9265: LD_EXP 55
9269: AND
9270: IFFALSE 9373
9272: GO 9274
9274: DISABLE
9275: LD_INT 0
9277: PPUSH
// begin for i := 1 to 5 do
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: DOUBLE
9284: LD_INT 1
9286: DEC
9287: ST_TO_ADDR
9288: LD_INT 5
9290: PUSH
9291: FOR_TO
9292: IFFALSE 9371
// begin uc_nation := nation_nature ;
9294: LD_ADDR_OWVAR 21
9298: PUSH
9299: LD_INT 0
9301: ST_TO_ADDR
// uc_side := 0 ;
9302: LD_ADDR_OWVAR 20
9306: PUSH
9307: LD_INT 0
9309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9310: LD_ADDR_OWVAR 29
9314: PUSH
9315: LD_INT 12
9317: PUSH
9318: LD_INT 12
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: ST_TO_ADDR
// hc_agressivity := 20 ;
9325: LD_ADDR_OWVAR 35
9329: PUSH
9330: LD_INT 20
9332: ST_TO_ADDR
// hc_class := class_tiger ;
9333: LD_ADDR_OWVAR 28
9337: PUSH
9338: LD_INT 14
9340: ST_TO_ADDR
// hc_gallery :=  ;
9341: LD_ADDR_OWVAR 33
9345: PUSH
9346: LD_STRING 
9348: ST_TO_ADDR
// hc_name :=  ;
9349: LD_ADDR_OWVAR 26
9353: PUSH
9354: LD_STRING 
9356: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9357: CALL_OW 44
9361: PPUSH
9362: LD_INT 0
9364: PPUSH
9365: CALL_OW 51
// end ;
9369: GO 9291
9371: POP
9372: POP
// end ;
9373: PPOPN 1
9375: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9376: LD_EXP 36
9380: PUSH
9381: LD_EXP 56
9385: AND
9386: IFFALSE 9395
9388: GO 9390
9390: DISABLE
// StreamSibBomb ;
9391: CALL 9396 0 0
9395: END
// export function StreamSibBomb ; var i , x , y ; begin
9396: LD_INT 0
9398: PPUSH
9399: PPUSH
9400: PPUSH
9401: PPUSH
// result := false ;
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: LD_INT 0
9409: ST_TO_ADDR
// for i := 1 to 16 do
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: DOUBLE
9416: LD_INT 1
9418: DEC
9419: ST_TO_ADDR
9420: LD_INT 16
9422: PUSH
9423: FOR_TO
9424: IFFALSE 9623
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: LD_INT 10
9433: PUSH
9434: LD_INT 20
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 40
9442: PUSH
9443: LD_INT 50
9445: PUSH
9446: LD_INT 60
9448: PUSH
9449: LD_INT 70
9451: PUSH
9452: LD_INT 80
9454: PUSH
9455: LD_INT 90
9457: PUSH
9458: LD_INT 100
9460: PUSH
9461: LD_INT 110
9463: PUSH
9464: LD_INT 120
9466: PUSH
9467: LD_INT 130
9469: PUSH
9470: LD_INT 140
9472: PUSH
9473: LD_INT 150
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 1
9495: PPUSH
9496: LD_INT 15
9498: PPUSH
9499: CALL_OW 12
9503: ARRAY
9504: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9505: LD_ADDR_VAR 0 4
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 20
9515: PUSH
9516: LD_INT 30
9518: PUSH
9519: LD_INT 40
9521: PUSH
9522: LD_INT 50
9524: PUSH
9525: LD_INT 60
9527: PUSH
9528: LD_INT 70
9530: PUSH
9531: LD_INT 80
9533: PUSH
9534: LD_INT 90
9536: PUSH
9537: LD_INT 100
9539: PUSH
9540: LD_INT 110
9542: PUSH
9543: LD_INT 120
9545: PUSH
9546: LD_INT 130
9548: PUSH
9549: LD_INT 140
9551: PUSH
9552: LD_INT 150
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 1
9574: PPUSH
9575: LD_INT 15
9577: PPUSH
9578: CALL_OW 12
9582: ARRAY
9583: ST_TO_ADDR
// if ValidHex ( x , y ) then
9584: LD_VAR 0 3
9588: PPUSH
9589: LD_VAR 0 4
9593: PPUSH
9594: CALL_OW 488
9598: IFFALSE 9621
// begin result := [ x , y ] ;
9600: LD_ADDR_VAR 0 1
9604: PUSH
9605: LD_VAR 0 3
9609: PUSH
9610: LD_VAR 0 4
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: ST_TO_ADDR
// break ;
9619: GO 9623
// end ; end ;
9621: GO 9423
9623: POP
9624: POP
// if result then
9625: LD_VAR 0 1
9629: IFFALSE 9689
// begin ToLua ( playSibBomb() ) ;
9631: LD_STRING playSibBomb()
9633: PPUSH
9634: CALL_OW 559
// wait ( 0 0$14 ) ;
9638: LD_INT 490
9640: PPUSH
9641: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9645: LD_VAR 0 1
9649: PUSH
9650: LD_INT 1
9652: ARRAY
9653: PPUSH
9654: LD_VAR 0 1
9658: PUSH
9659: LD_INT 2
9661: ARRAY
9662: PPUSH
9663: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9667: LD_VAR 0 1
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: PPUSH
9676: LD_VAR 0 1
9680: PUSH
9681: LD_INT 2
9683: ARRAY
9684: PPUSH
9685: CALL_OW 429
// end ; end ;
9689: LD_VAR 0 1
9693: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9694: LD_EXP 36
9698: PUSH
9699: LD_EXP 58
9703: AND
9704: IFFALSE 9716
9706: GO 9708
9708: DISABLE
// YouLost (  ) ;
9709: LD_STRING 
9711: PPUSH
9712: CALL_OW 104
9716: END
// every 0 0$1 trigger StreamModeActive and sFog do
9717: LD_EXP 36
9721: PUSH
9722: LD_EXP 57
9726: AND
9727: IFFALSE 9741
9729: GO 9731
9731: DISABLE
// FogOff ( your_side ) ;
9732: LD_OWVAR 2
9736: PPUSH
9737: CALL_OW 344
9741: END
// every 0 0$1 trigger StreamModeActive and sSun do
9742: LD_EXP 36
9746: PUSH
9747: LD_EXP 59
9751: AND
9752: IFFALSE 9780
9754: GO 9756
9756: DISABLE
// begin solar_recharge_percent := 0 ;
9757: LD_ADDR_OWVAR 79
9761: PUSH
9762: LD_INT 0
9764: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9765: LD_INT 10500
9767: PPUSH
9768: CALL_OW 67
// solar_recharge_percent := 100 ;
9772: LD_ADDR_OWVAR 79
9776: PUSH
9777: LD_INT 100
9779: ST_TO_ADDR
// end ;
9780: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9781: LD_EXP 36
9785: PUSH
9786: LD_EXP 60
9790: AND
9791: IFFALSE 10030
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// begin tmp := [ ] ;
9801: LD_ADDR_VAR 0 3
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for i := 1 to 6 do
9808: LD_ADDR_VAR 0 1
9812: PUSH
9813: DOUBLE
9814: LD_INT 1
9816: DEC
9817: ST_TO_ADDR
9818: LD_INT 6
9820: PUSH
9821: FOR_TO
9822: IFFALSE 9927
// begin uc_nation := nation_nature ;
9824: LD_ADDR_OWVAR 21
9828: PUSH
9829: LD_INT 0
9831: ST_TO_ADDR
// uc_side := 0 ;
9832: LD_ADDR_OWVAR 20
9836: PUSH
9837: LD_INT 0
9839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9840: LD_ADDR_OWVAR 29
9844: PUSH
9845: LD_INT 12
9847: PUSH
9848: LD_INT 12
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: ST_TO_ADDR
// hc_agressivity := 20 ;
9855: LD_ADDR_OWVAR 35
9859: PUSH
9860: LD_INT 20
9862: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9863: LD_ADDR_OWVAR 28
9867: PUSH
9868: LD_INT 17
9870: ST_TO_ADDR
// hc_gallery :=  ;
9871: LD_ADDR_OWVAR 33
9875: PUSH
9876: LD_STRING 
9878: ST_TO_ADDR
// hc_name :=  ;
9879: LD_ADDR_OWVAR 26
9883: PUSH
9884: LD_STRING 
9886: ST_TO_ADDR
// un := CreateHuman ;
9887: LD_ADDR_VAR 0 2
9891: PUSH
9892: CALL_OW 44
9896: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9897: LD_VAR 0 2
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 51
// tmp := tmp ^ un ;
9909: LD_ADDR_VAR 0 3
9913: PUSH
9914: LD_VAR 0 3
9918: PUSH
9919: LD_VAR 0 2
9923: ADD
9924: ST_TO_ADDR
// end ;
9925: GO 9821
9927: POP
9928: POP
// repeat wait ( 0 0$1 ) ;
9929: LD_INT 35
9931: PPUSH
9932: CALL_OW 67
// for un in tmp do
9936: LD_ADDR_VAR 0 2
9940: PUSH
9941: LD_VAR 0 3
9945: PUSH
9946: FOR_IN
9947: IFFALSE 10021
// begin if IsDead ( un ) then
9949: LD_VAR 0 2
9953: PPUSH
9954: CALL_OW 301
9958: IFFALSE 9978
// begin tmp := tmp diff un ;
9960: LD_ADDR_VAR 0 3
9964: PUSH
9965: LD_VAR 0 3
9969: PUSH
9970: LD_VAR 0 2
9974: DIFF
9975: ST_TO_ADDR
// continue ;
9976: GO 9946
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9978: LD_VAR 0 2
9982: PPUSH
9983: LD_INT 3
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_INT 0
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 69
10004: PPUSH
10005: LD_VAR 0 2
10009: PPUSH
10010: CALL_OW 74
10014: PPUSH
10015: CALL_OW 115
// end ;
10019: GO 9946
10021: POP
10022: POP
// until not tmp ;
10023: LD_VAR 0 3
10027: NOT
10028: IFFALSE 9929
// end ;
10030: PPOPN 3
10032: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10033: LD_EXP 36
10037: PUSH
10038: LD_EXP 61
10042: AND
10043: IFFALSE 10097
10045: GO 10047
10047: DISABLE
// begin ToLua ( displayTroll(); ) ;
10048: LD_STRING displayTroll();
10050: PPUSH
10051: CALL_OW 559
// wait ( 3 3$00 ) ;
10055: LD_INT 6300
10057: PPUSH
10058: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10062: LD_STRING hideTroll();
10064: PPUSH
10065: CALL_OW 559
// wait ( 1 1$00 ) ;
10069: LD_INT 2100
10071: PPUSH
10072: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10076: LD_STRING displayTroll();
10078: PPUSH
10079: CALL_OW 559
// wait ( 1 1$00 ) ;
10083: LD_INT 2100
10085: PPUSH
10086: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10090: LD_STRING hideTroll();
10092: PPUSH
10093: CALL_OW 559
// end ;
10097: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10098: LD_EXP 36
10102: PUSH
10103: LD_EXP 62
10107: AND
10108: IFFALSE 10171
10110: GO 10112
10112: DISABLE
10113: LD_INT 0
10115: PPUSH
// begin p := 0 ;
10116: LD_ADDR_VAR 0 1
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// repeat game_speed := 1 ;
10124: LD_ADDR_OWVAR 65
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10132: LD_INT 35
10134: PPUSH
10135: CALL_OW 67
// p := p + 1 ;
10139: LD_ADDR_VAR 0 1
10143: PUSH
10144: LD_VAR 0 1
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: ST_TO_ADDR
// until p >= 60 ;
10153: LD_VAR 0 1
10157: PUSH
10158: LD_INT 60
10160: GREATEREQUAL
10161: IFFALSE 10124
// game_speed := 4 ;
10163: LD_ADDR_OWVAR 65
10167: PUSH
10168: LD_INT 4
10170: ST_TO_ADDR
// end ;
10171: PPOPN 1
10173: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10174: LD_EXP 36
10178: PUSH
10179: LD_EXP 63
10183: AND
10184: IFFALSE 10330
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10193: LD_ADDR_VAR 0 1
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_OWVAR 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: LD_INT 30
10215: PUSH
10216: LD_INT 0
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 1
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: ST_TO_ADDR
// if not depot then
10247: LD_VAR 0 1
10251: NOT
10252: IFFALSE 10256
// exit ;
10254: GO 10330
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10256: LD_ADDR_VAR 0 2
10260: PUSH
10261: LD_VAR 0 1
10265: PUSH
10266: LD_INT 1
10268: PPUSH
10269: LD_VAR 0 1
10273: PPUSH
10274: CALL_OW 12
10278: ARRAY
10279: PPUSH
10280: CALL_OW 274
10284: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10285: LD_VAR 0 2
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: LD_INT 0
10295: PPUSH
10296: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10300: LD_VAR 0 2
10304: PPUSH
10305: LD_INT 2
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10315: LD_VAR 0 2
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: LD_INT 0
10325: PPUSH
10326: CALL_OW 277
// end ;
10330: PPOPN 2
10332: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10333: LD_EXP 36
10337: PUSH
10338: LD_EXP 64
10342: AND
10343: IFFALSE 10440
10345: GO 10347
10347: DISABLE
10348: LD_INT 0
10350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10351: LD_ADDR_VAR 0 1
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_OWVAR 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 3
10380: PUSH
10381: LD_INT 23
10383: PUSH
10384: LD_INT 0
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 69
10404: ST_TO_ADDR
// if not tmp then
10405: LD_VAR 0 1
10409: NOT
10410: IFFALSE 10414
// exit ;
10412: GO 10440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10414: LD_VAR 0 1
10418: PUSH
10419: LD_INT 1
10421: PPUSH
10422: LD_VAR 0 1
10426: PPUSH
10427: CALL_OW 12
10431: ARRAY
10432: PPUSH
10433: LD_INT 200
10435: PPUSH
10436: CALL_OW 234
// end ;
10440: PPOPN 1
10442: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10443: LD_EXP 36
10447: PUSH
10448: LD_EXP 65
10452: AND
10453: IFFALSE 10532
10455: GO 10457
10457: DISABLE
10458: LD_INT 0
10460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10461: LD_ADDR_VAR 0 1
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_OWVAR 2
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL_OW 69
10496: ST_TO_ADDR
// if not tmp then
10497: LD_VAR 0 1
10501: NOT
10502: IFFALSE 10506
// exit ;
10504: GO 10532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10506: LD_VAR 0 1
10510: PUSH
10511: LD_INT 1
10513: PPUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: CALL_OW 12
10523: ARRAY
10524: PPUSH
10525: LD_INT 60
10527: PPUSH
10528: CALL_OW 234
// end ;
10532: PPOPN 1
10534: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10535: LD_EXP 36
10539: PUSH
10540: LD_EXP 66
10544: AND
10545: IFFALSE 10644
10547: GO 10549
10549: DISABLE
10550: LD_INT 0
10552: PPUSH
10553: PPUSH
// begin enable ;
10554: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: LD_INT 22
10562: PUSH
10563: LD_OWVAR 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 61
10574: PUSH
10575: EMPTY
10576: LIST
10577: PUSH
10578: LD_INT 33
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 69
10597: ST_TO_ADDR
// if not tmp then
10598: LD_VAR 0 1
10602: NOT
10603: IFFALSE 10607
// exit ;
10605: GO 10644
// for i in tmp do
10607: LD_ADDR_VAR 0 2
10611: PUSH
10612: LD_VAR 0 1
10616: PUSH
10617: FOR_IN
10618: IFFALSE 10642
// if IsControledBy ( i ) then
10620: LD_VAR 0 2
10624: PPUSH
10625: CALL_OW 312
10629: IFFALSE 10640
// ComUnlink ( i ) ;
10631: LD_VAR 0 2
10635: PPUSH
10636: CALL_OW 136
10640: GO 10617
10642: POP
10643: POP
// end ;
10644: PPOPN 2
10646: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10647: LD_EXP 36
10651: PUSH
10652: LD_EXP 67
10656: AND
10657: IFFALSE 10791
10659: GO 10661
10661: DISABLE
10662: LD_INT 0
10664: PPUSH
10665: PPUSH
// begin ToLua ( displayPowell(); ) ;
10666: LD_STRING displayPowell();
10668: PPUSH
10669: CALL_OW 559
// uc_side := 0 ;
10673: LD_ADDR_OWVAR 20
10677: PUSH
10678: LD_INT 0
10680: ST_TO_ADDR
// uc_nation := 2 ;
10681: LD_ADDR_OWVAR 21
10685: PUSH
10686: LD_INT 2
10688: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10689: LD_ADDR_OWVAR 37
10693: PUSH
10694: LD_INT 14
10696: ST_TO_ADDR
// vc_engine := engine_siberite ;
10697: LD_ADDR_OWVAR 39
10701: PUSH
10702: LD_INT 3
10704: ST_TO_ADDR
// vc_control := control_apeman ;
10705: LD_ADDR_OWVAR 38
10709: PUSH
10710: LD_INT 5
10712: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10713: LD_ADDR_OWVAR 40
10717: PUSH
10718: LD_INT 29
10720: ST_TO_ADDR
// un := CreateVehicle ;
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: CALL_OW 45
10730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10731: LD_VAR 0 2
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10743: LD_INT 35
10745: PPUSH
10746: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10750: LD_VAR 0 2
10754: PPUSH
10755: LD_OWVAR 3
10759: PUSH
10760: LD_VAR 0 2
10764: DIFF
10765: PPUSH
10766: LD_VAR 0 2
10770: PPUSH
10771: CALL_OW 74
10775: PPUSH
10776: CALL_OW 115
// until IsOk ( un ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: CALL_OW 302
10789: IFFALSE 10743
// end ;
10791: PPOPN 2
10793: END
// every 0 0$1 trigger StreamModeActive and sStu do
10794: LD_EXP 36
10798: PUSH
10799: LD_EXP 75
10803: AND
10804: IFFALSE 10816
10806: GO 10808
10808: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10809: LD_STRING displayStucuk();
10811: PPUSH
10812: CALL_OW 559
// end ;
10816: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10817: LD_EXP 36
10821: PUSH
10822: LD_EXP 68
10826: AND
10827: IFFALSE 10968
10829: GO 10831
10831: DISABLE
10832: LD_INT 0
10834: PPUSH
10835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_INT 22
10843: PUSH
10844: LD_OWVAR 2
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 21
10855: PUSH
10856: LD_INT 1
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 69
10871: ST_TO_ADDR
// if not tmp then
10872: LD_VAR 0 2
10876: NOT
10877: IFFALSE 10881
// exit ;
10879: GO 10968
// un := tmp [ rand ( 1 , tmp ) ] ;
10881: LD_ADDR_VAR 0 1
10885: PUSH
10886: LD_VAR 0 2
10890: PUSH
10891: LD_INT 1
10893: PPUSH
10894: LD_VAR 0 2
10898: PPUSH
10899: CALL_OW 12
10903: ARRAY
10904: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10905: LD_VAR 0 1
10909: PPUSH
10910: LD_INT 0
10912: PPUSH
10913: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10917: LD_VAR 0 1
10921: PPUSH
10922: LD_OWVAR 3
10926: PUSH
10927: LD_VAR 0 1
10931: DIFF
10932: PPUSH
10933: LD_VAR 0 1
10937: PPUSH
10938: CALL_OW 74
10942: PPUSH
10943: CALL_OW 115
// wait ( 0 0$20 ) ;
10947: LD_INT 700
10949: PPUSH
10950: CALL_OW 67
// SetSide ( un , your_side ) ;
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_OWVAR 2
10963: PPUSH
10964: CALL_OW 235
// end ;
10968: PPOPN 2
10970: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10971: LD_EXP 36
10975: PUSH
10976: LD_EXP 69
10980: AND
10981: IFFALSE 11087
10983: GO 10985
10985: DISABLE
10986: LD_INT 0
10988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_OWVAR 2
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: LD_INT 30
11011: PUSH
11012: LD_INT 0
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 30
11021: PUSH
11022: LD_INT 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: ST_TO_ADDR
// if not depot then
11043: LD_VAR 0 1
11047: NOT
11048: IFFALSE 11052
// exit ;
11050: GO 11087
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11052: LD_VAR 0 1
11056: PUSH
11057: LD_INT 1
11059: ARRAY
11060: PPUSH
11061: CALL_OW 250
11065: PPUSH
11066: LD_VAR 0 1
11070: PUSH
11071: LD_INT 1
11073: ARRAY
11074: PPUSH
11075: CALL_OW 251
11079: PPUSH
11080: LD_INT 70
11082: PPUSH
11083: CALL_OW 495
// end ;
11087: PPOPN 1
11089: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11090: LD_EXP 36
11094: PUSH
11095: LD_EXP 70
11099: AND
11100: IFFALSE 11311
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11112: LD_ADDR_VAR 0 5
11116: PUSH
11117: LD_INT 22
11119: PUSH
11120: LD_OWVAR 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 69
11147: ST_TO_ADDR
// if not tmp then
11148: LD_VAR 0 5
11152: NOT
11153: IFFALSE 11157
// exit ;
11155: GO 11311
// for i in tmp do
11157: LD_ADDR_VAR 0 1
11161: PUSH
11162: LD_VAR 0 5
11166: PUSH
11167: FOR_IN
11168: IFFALSE 11309
// begin d := rand ( 0 , 5 ) ;
11170: LD_ADDR_VAR 0 4
11174: PUSH
11175: LD_INT 0
11177: PPUSH
11178: LD_INT 5
11180: PPUSH
11181: CALL_OW 12
11185: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11186: LD_ADDR_VAR 0 2
11190: PUSH
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 250
11200: PPUSH
11201: LD_VAR 0 4
11205: PPUSH
11206: LD_INT 3
11208: PPUSH
11209: LD_INT 12
11211: PPUSH
11212: CALL_OW 12
11216: PPUSH
11217: CALL_OW 272
11221: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 251
11236: PPUSH
11237: LD_VAR 0 4
11241: PPUSH
11242: LD_INT 3
11244: PPUSH
11245: LD_INT 12
11247: PPUSH
11248: CALL_OW 12
11252: PPUSH
11253: CALL_OW 273
11257: ST_TO_ADDR
// if ValidHex ( x , y ) then
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: CALL_OW 488
11272: IFFALSE 11307
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11274: LD_VAR 0 1
11278: PPUSH
11279: LD_VAR 0 2
11283: PPUSH
11284: LD_VAR 0 3
11288: PPUSH
11289: LD_INT 3
11291: PPUSH
11292: LD_INT 6
11294: PPUSH
11295: CALL_OW 12
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: CALL_OW 483
// end ;
11307: GO 11167
11309: POP
11310: POP
// end ;
11311: PPOPN 5
11313: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11314: LD_EXP 36
11318: PUSH
11319: LD_EXP 71
11323: AND
11324: IFFALSE 11418
11326: GO 11328
11328: DISABLE
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_OWVAR 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 32
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: ST_TO_ADDR
// if not tmp then
11380: LD_VAR 0 2
11384: NOT
11385: IFFALSE 11389
// exit ;
11387: GO 11418
// for i in tmp do
11389: LD_ADDR_VAR 0 1
11393: PUSH
11394: LD_VAR 0 2
11398: PUSH
11399: FOR_IN
11400: IFFALSE 11416
// SetFuel ( i , 0 ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 0
11409: PPUSH
11410: CALL_OW 240
11414: GO 11399
11416: POP
11417: POP
// end ;
11418: PPOPN 2
11420: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11421: LD_EXP 36
11425: PUSH
11426: LD_EXP 72
11430: AND
11431: IFFALSE 11497
11433: GO 11435
11435: DISABLE
11436: LD_INT 0
11438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_OWVAR 2
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 30
11458: PUSH
11459: LD_INT 29
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// if not tmp then
11475: LD_VAR 0 1
11479: NOT
11480: IFFALSE 11484
// exit ;
11482: GO 11497
// DestroyUnit ( tmp [ 1 ] ) ;
11484: LD_VAR 0 1
11488: PUSH
11489: LD_INT 1
11491: ARRAY
11492: PPUSH
11493: CALL_OW 65
// end ;
11497: PPOPN 1
11499: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11500: LD_EXP 36
11504: PUSH
11505: LD_EXP 74
11509: AND
11510: IFFALSE 11639
11512: GO 11514
11514: DISABLE
11515: LD_INT 0
11517: PPUSH
// begin uc_side := 0 ;
11518: LD_ADDR_OWVAR 20
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// uc_nation := nation_arabian ;
11526: LD_ADDR_OWVAR 21
11530: PUSH
11531: LD_INT 2
11533: ST_TO_ADDR
// hc_gallery :=  ;
11534: LD_ADDR_OWVAR 33
11538: PUSH
11539: LD_STRING 
11541: ST_TO_ADDR
// hc_name :=  ;
11542: LD_ADDR_OWVAR 26
11546: PUSH
11547: LD_STRING 
11549: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 11
11555: PPUSH
11556: LD_INT 10
11558: PPUSH
11559: CALL_OW 380
// un := CreateHuman ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: CALL_OW 44
11572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11585: LD_INT 35
11587: PPUSH
11588: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11592: LD_VAR 0 1
11596: PPUSH
11597: LD_INT 22
11599: PUSH
11600: LD_OWVAR 2
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PPUSH
11609: CALL_OW 69
11613: PPUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 74
11623: PPUSH
11624: CALL_OW 115
// until IsDead ( un ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: CALL_OW 301
11637: IFFALSE 11585
// end ;
11639: PPOPN 1
11641: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11642: LD_EXP 36
11646: PUSH
11647: LD_EXP 76
11651: AND
11652: IFFALSE 11664
11654: GO 11656
11656: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11657: LD_STRING earthquake(getX(game), 0, 32)
11659: PPUSH
11660: CALL_OW 559
11664: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11665: LD_EXP 36
11669: PUSH
11670: LD_EXP 77
11674: AND
11675: IFFALSE 11766
11677: GO 11679
11679: DISABLE
11680: LD_INT 0
11682: PPUSH
// begin enable ;
11683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11684: LD_ADDR_VAR 0 1
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_OWVAR 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 21
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 33
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: PPUSH
11726: CALL_OW 69
11730: ST_TO_ADDR
// if not tmp then
11731: LD_VAR 0 1
11735: NOT
11736: IFFALSE 11740
// exit ;
11738: GO 11766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11740: LD_VAR 0 1
11744: PUSH
11745: LD_INT 1
11747: PPUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 12
11757: ARRAY
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 234
// end ;
11766: PPOPN 1
11768: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11769: LD_EXP 36
11773: PUSH
11774: LD_EXP 78
11778: AND
11779: IFFALSE 11920
11781: GO 11783
11783: DISABLE
11784: LD_INT 0
11786: PPUSH
11787: PPUSH
11788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_OWVAR 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 25
11808: PUSH
11809: LD_INT 1
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PPUSH
11820: CALL_OW 69
11824: ST_TO_ADDR
// if not tmp then
11825: LD_VAR 0 3
11829: NOT
11830: IFFALSE 11834
// exit ;
11832: GO 11920
// un := tmp [ rand ( 1 , tmp ) ] ;
11834: LD_ADDR_VAR 0 2
11838: PUSH
11839: LD_VAR 0 3
11843: PUSH
11844: LD_INT 1
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: CALL_OW 12
11856: ARRAY
11857: ST_TO_ADDR
// if Crawls ( un ) then
11858: LD_VAR 0 2
11862: PPUSH
11863: CALL_OW 318
11867: IFFALSE 11878
// ComWalk ( un ) ;
11869: LD_VAR 0 2
11873: PPUSH
11874: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11878: LD_VAR 0 2
11882: PPUSH
11883: LD_INT 9
11885: PPUSH
11886: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11890: LD_INT 28
11892: PPUSH
11893: LD_OWVAR 2
11897: PPUSH
11898: LD_INT 2
11900: PPUSH
11901: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11905: LD_INT 29
11907: PPUSH
11908: LD_OWVAR 2
11912: PPUSH
11913: LD_INT 2
11915: PPUSH
11916: CALL_OW 322
// end ;
11920: PPOPN 3
11922: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11923: LD_EXP 36
11927: PUSH
11928: LD_EXP 79
11932: AND
11933: IFFALSE 12044
11935: GO 11937
11937: DISABLE
11938: LD_INT 0
11940: PPUSH
11941: PPUSH
11942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11943: LD_ADDR_VAR 0 3
11947: PUSH
11948: LD_INT 22
11950: PUSH
11951: LD_OWVAR 2
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 25
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PPUSH
11974: CALL_OW 69
11978: ST_TO_ADDR
// if not tmp then
11979: LD_VAR 0 3
11983: NOT
11984: IFFALSE 11988
// exit ;
11986: GO 12044
// un := tmp [ rand ( 1 , tmp ) ] ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: CALL_OW 12
12010: ARRAY
12011: ST_TO_ADDR
// if Crawls ( un ) then
12012: LD_VAR 0 2
12016: PPUSH
12017: CALL_OW 318
12021: IFFALSE 12032
// ComWalk ( un ) ;
12023: LD_VAR 0 2
12027: PPUSH
12028: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12032: LD_VAR 0 2
12036: PPUSH
12037: LD_INT 8
12039: PPUSH
12040: CALL_OW 336
// end ;
12044: PPOPN 3
12046: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12047: LD_EXP 36
12051: PUSH
12052: LD_EXP 80
12056: AND
12057: IFFALSE 12201
12059: GO 12061
12061: DISABLE
12062: LD_INT 0
12064: PPUSH
12065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12066: LD_ADDR_VAR 0 2
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_OWVAR 2
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 21
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: LD_INT 34
12098: PUSH
12099: LD_INT 12
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 34
12108: PUSH
12109: LD_INT 51
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 34
12118: PUSH
12119: LD_INT 32
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: PPUSH
12137: CALL_OW 69
12141: ST_TO_ADDR
// if not tmp then
12142: LD_VAR 0 2
12146: NOT
12147: IFFALSE 12151
// exit ;
12149: GO 12201
// for i in tmp do
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: LD_VAR 0 2
12160: PUSH
12161: FOR_IN
12162: IFFALSE 12199
// if GetCargo ( i , mat_artifact ) = 0 then
12164: LD_VAR 0 1
12168: PPUSH
12169: LD_INT 4
12171: PPUSH
12172: CALL_OW 289
12176: PUSH
12177: LD_INT 0
12179: EQUAL
12180: IFFALSE 12197
// SetCargo ( i , mat_siberit , 100 ) ;
12182: LD_VAR 0 1
12186: PPUSH
12187: LD_INT 3
12189: PPUSH
12190: LD_INT 100
12192: PPUSH
12193: CALL_OW 290
12197: GO 12161
12199: POP
12200: POP
// end ;
12201: PPOPN 2
12203: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12204: LD_EXP 36
12208: PUSH
12209: LD_EXP 81
12213: AND
12214: IFFALSE 12367
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_OWVAR 2
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 69
12244: ST_TO_ADDR
// if not tmp then
12245: LD_VAR 0 2
12249: NOT
12250: IFFALSE 12254
// exit ;
12252: GO 12367
// for i := 1 to 2 do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: DOUBLE
12260: LD_INT 1
12262: DEC
12263: ST_TO_ADDR
12264: LD_INT 2
12266: PUSH
12267: FOR_TO
12268: IFFALSE 12365
// begin uc_side := your_side ;
12270: LD_ADDR_OWVAR 20
12274: PUSH
12275: LD_OWVAR 2
12279: ST_TO_ADDR
// uc_nation := nation_american ;
12280: LD_ADDR_OWVAR 21
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// vc_chassis := us_morphling ;
12288: LD_ADDR_OWVAR 37
12292: PUSH
12293: LD_INT 5
12295: ST_TO_ADDR
// vc_engine := engine_siberite ;
12296: LD_ADDR_OWVAR 39
12300: PUSH
12301: LD_INT 3
12303: ST_TO_ADDR
// vc_control := control_computer ;
12304: LD_ADDR_OWVAR 38
12308: PUSH
12309: LD_INT 3
12311: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12312: LD_ADDR_OWVAR 40
12316: PUSH
12317: LD_INT 10
12319: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
12320: CALL_OW 45
12324: PPUSH
12325: LD_VAR 0 2
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 250
12338: PPUSH
12339: LD_VAR 0 2
12343: PUSH
12344: LD_INT 1
12346: ARRAY
12347: PPUSH
12348: CALL_OW 251
12352: PPUSH
12353: LD_INT 12
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 50
// end ;
12363: GO 12267
12365: POP
12366: POP
// end ;
12367: PPOPN 2
12369: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12370: LD_EXP 36
12374: PUSH
12375: LD_EXP 82
12379: AND
12380: IFFALSE 12602
12382: GO 12384
12384: DISABLE
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12393: LD_ADDR_VAR 0 6
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_OWVAR 2
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 21
12412: PUSH
12413: LD_INT 1
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 3
12422: PUSH
12423: LD_INT 23
12425: PUSH
12426: LD_INT 0
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: ST_TO_ADDR
// if not tmp then
12447: LD_VAR 0 6
12451: NOT
12452: IFFALSE 12456
// exit ;
12454: GO 12602
// s1 := rand ( 1 , 4 ) ;
12456: LD_ADDR_VAR 0 2
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_INT 4
12466: PPUSH
12467: CALL_OW 12
12471: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12472: LD_ADDR_VAR 0 4
12476: PUSH
12477: LD_VAR 0 6
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 259
12495: ST_TO_ADDR
// if s1 = 1 then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 1
12503: EQUAL
12504: IFFALSE 12524
// s2 := rand ( 2 , 4 ) else
12506: LD_ADDR_VAR 0 3
12510: PUSH
12511: LD_INT 2
12513: PPUSH
12514: LD_INT 4
12516: PPUSH
12517: CALL_OW 12
12521: ST_TO_ADDR
12522: GO 12532
// s2 := 1 ;
12524: LD_ADDR_VAR 0 3
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12532: LD_ADDR_VAR 0 5
12536: PUSH
12537: LD_VAR 0 6
12541: PUSH
12542: LD_INT 1
12544: ARRAY
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: CALL_OW 259
12555: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12556: LD_VAR 0 6
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: LD_VAR 0 5
12574: PPUSH
12575: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12579: LD_VAR 0 6
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: LD_VAR 0 3
12592: PPUSH
12593: LD_VAR 0 4
12597: PPUSH
12598: CALL_OW 237
// end ;
12602: PPOPN 6
12604: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12605: LD_EXP 36
12609: PUSH
12610: LD_EXP 83
12614: AND
12615: IFFALSE 12694
12617: GO 12619
12619: DISABLE
12620: LD_INT 0
12622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_OWVAR 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: ST_TO_ADDR
// if not tmp then
12659: LD_VAR 0 1
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: PPUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 12
12685: ARRAY
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 234
// end ;
12694: PPOPN 1
12696: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12697: LD_EXP 36
12701: PUSH
12702: LD_EXP 84
12706: AND
12707: IFFALSE 12819
12709: GO 12711
12711: DISABLE
12712: LD_INT 0
12714: PPUSH
12715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_INT 22
12723: PUSH
12724: LD_OWVAR 2
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 30
12738: PUSH
12739: LD_INT 27
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 30
12748: PUSH
12749: LD_INT 26
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 28
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 69
12780: ST_TO_ADDR
// if not tmp then
12781: LD_VAR 0 2
12785: NOT
12786: IFFALSE 12790
// exit ;
12788: GO 12819
// for i in tmp do
12790: LD_ADDR_VAR 0 1
12794: PUSH
12795: LD_VAR 0 2
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12817
// SetLives ( i , 1 ) ;
12803: LD_VAR 0 1
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: CALL_OW 234
12815: GO 12800
12817: POP
12818: POP
// end ;
12819: PPOPN 2
12821: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12822: LD_EXP 36
12826: PUSH
12827: LD_EXP 85
12831: AND
12832: IFFALSE 13102
12834: GO 12836
12836: DISABLE
12837: LD_INT 0
12839: PPUSH
12840: PPUSH
12841: PPUSH
// begin i := rand ( 1 , 7 ) ;
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_INT 1
12849: PPUSH
12850: LD_INT 7
12852: PPUSH
12853: CALL_OW 12
12857: ST_TO_ADDR
// case i of 1 :
12858: LD_VAR 0 1
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12881
12871: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12872: LD_STRING earthquake(getX(game), 0, 32)
12874: PPUSH
12875: CALL_OW 559
12879: GO 13102
12881: LD_INT 2
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12899
12889: POP
// ToLua ( displayStucuk(); ) ; 3 :
12890: LD_STRING displayStucuk();
12892: PPUSH
12893: CALL_OW 559
12897: GO 13102
12899: LD_INT 3
12901: DOUBLE
12902: EQUAL
12903: IFTRUE 12907
12905: GO 13011
12907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_OWVAR 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 25
12927: PUSH
12928: LD_INT 1
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: ST_TO_ADDR
// if not tmp then
12944: LD_VAR 0 2
12948: NOT
12949: IFFALSE 12953
// exit ;
12951: GO 13102
// un := tmp [ rand ( 1 , tmp ) ] ;
12953: LD_ADDR_VAR 0 3
12957: PUSH
12958: LD_VAR 0 2
12962: PUSH
12963: LD_INT 1
12965: PPUSH
12966: LD_VAR 0 2
12970: PPUSH
12971: CALL_OW 12
12975: ARRAY
12976: ST_TO_ADDR
// if Crawls ( un ) then
12977: LD_VAR 0 3
12981: PPUSH
12982: CALL_OW 318
12986: IFFALSE 12997
// ComWalk ( un ) ;
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12997: LD_VAR 0 3
13001: PPUSH
13002: LD_INT 8
13004: PPUSH
13005: CALL_OW 336
// end ; 4 :
13009: GO 13102
13011: LD_INT 4
13013: DOUBLE
13014: EQUAL
13015: IFTRUE 13019
13017: GO 13080
13019: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13020: LD_ADDR_VAR 0 2
13024: PUSH
13025: LD_INT 22
13027: PUSH
13028: LD_OWVAR 2
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 30
13039: PUSH
13040: LD_INT 29
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: ST_TO_ADDR
// if not tmp then
13056: LD_VAR 0 2
13060: NOT
13061: IFFALSE 13065
// exit ;
13063: GO 13102
// DestroyUnit ( tmp [ 1 ] ) ;
13065: LD_VAR 0 2
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 65
// end ; 5 .. 7 :
13078: GO 13102
13080: LD_INT 5
13082: DOUBLE
13083: GREATEREQUAL
13084: IFFALSE 13092
13086: LD_INT 7
13088: DOUBLE
13089: LESSEQUAL
13090: IFTRUE 13094
13092: GO 13101
13094: POP
// StreamSibBomb ; end ;
13095: CALL 9396 0 0
13099: GO 13102
13101: POP
// end ;
13102: PPOPN 3
13104: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13105: LD_EXP 36
13109: PUSH
13110: LD_EXP 86
13114: AND
13115: IFFALSE 13271
13117: GO 13119
13119: DISABLE
13120: LD_INT 0
13122: PPUSH
13123: PPUSH
13124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_INT 81
13132: PUSH
13133: LD_OWVAR 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 2
13144: PUSH
13145: LD_INT 21
13147: PUSH
13148: LD_INT 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: ST_TO_ADDR
// if not tmp then
13179: LD_VAR 0 2
13183: NOT
13184: IFFALSE 13188
// exit ;
13186: GO 13271
// p := 0 ;
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 0
13195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13196: LD_INT 35
13198: PPUSH
13199: CALL_OW 67
// p := p + 1 ;
13203: LD_ADDR_VAR 0 3
13207: PUSH
13208: LD_VAR 0 3
13212: PUSH
13213: LD_INT 1
13215: PLUS
13216: ST_TO_ADDR
// for i in tmp do
13217: LD_ADDR_VAR 0 1
13221: PUSH
13222: LD_VAR 0 2
13226: PUSH
13227: FOR_IN
13228: IFFALSE 13259
// if GetLives ( i ) < 1000 then
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 256
13239: PUSH
13240: LD_INT 1000
13242: LESS
13243: IFFALSE 13257
// SetLives ( i , 1000 ) ;
13245: LD_VAR 0 1
13249: PPUSH
13250: LD_INT 1000
13252: PPUSH
13253: CALL_OW 234
13257: GO 13227
13259: POP
13260: POP
// until p > 20 ;
13261: LD_VAR 0 3
13265: PUSH
13266: LD_INT 20
13268: GREATER
13269: IFFALSE 13196
// end ;
13271: PPOPN 3
13273: END
// every 0 0$1 trigger StreamModeActive and sTime do
13274: LD_EXP 36
13278: PUSH
13279: LD_EXP 87
13283: AND
13284: IFFALSE 13319
13286: GO 13288
13288: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13289: LD_INT 28
13291: PPUSH
13292: LD_OWVAR 2
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13304: LD_INT 30
13306: PPUSH
13307: LD_OWVAR 2
13311: PPUSH
13312: LD_INT 2
13314: PPUSH
13315: CALL_OW 322
// end ;
13319: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13320: LD_EXP 36
13324: PUSH
13325: LD_EXP 88
13329: AND
13330: IFFALSE 13451
13332: GO 13334
13334: DISABLE
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13339: LD_ADDR_VAR 0 2
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 21
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: LD_INT 23
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: ST_TO_ADDR
// if not tmp then
13393: LD_VAR 0 2
13397: NOT
13398: IFFALSE 13402
// exit ;
13400: GO 13451
// for i in tmp do
13402: LD_ADDR_VAR 0 1
13406: PUSH
13407: LD_VAR 0 2
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13449
// begin if Crawls ( i ) then
13415: LD_VAR 0 1
13419: PPUSH
13420: CALL_OW 318
13424: IFFALSE 13435
// ComWalk ( i ) ;
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 138
// SetClass ( i , 2 ) ;
13435: LD_VAR 0 1
13439: PPUSH
13440: LD_INT 2
13442: PPUSH
13443: CALL_OW 336
// end ;
13447: GO 13412
13449: POP
13450: POP
// end ;
13451: PPOPN 2
13453: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13454: LD_EXP 36
13458: PUSH
13459: LD_EXP 89
13463: AND
13464: IFFALSE 13669
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
13472: PPUSH
13473: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13474: LD_OWVAR 2
13478: PPUSH
13479: LD_INT 9
13481: PPUSH
13482: LD_INT 1
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13492: LD_INT 9
13494: PPUSH
13495: LD_OWVAR 2
13499: PPUSH
13500: CALL_OW 343
// hc_name := Dark Warrior ;
13504: LD_ADDR_OWVAR 26
13508: PUSH
13509: LD_STRING Dark Warrior
13511: ST_TO_ADDR
// hc_gallery :=  ;
13512: LD_ADDR_OWVAR 33
13516: PUSH
13517: LD_STRING 
13519: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
13520: LD_INT 1
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 10
13528: PPUSH
13529: CALL_OW 380
// un := CreateHuman ;
13533: LD_ADDR_VAR 0 3
13537: PUSH
13538: CALL_OW 44
13542: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 51
// p := 0 ;
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13563: LD_INT 35
13565: PPUSH
13566: CALL_OW 67
// if GetLives ( un ) < 1000 then
13570: LD_VAR 0 3
13574: PPUSH
13575: CALL_OW 256
13579: PUSH
13580: LD_INT 1000
13582: LESS
13583: IFFALSE 13597
// SetLives ( un , 1000 ) ;
13585: LD_VAR 0 3
13589: PPUSH
13590: LD_INT 1000
13592: PPUSH
13593: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
13597: LD_VAR 0 3
13601: PPUSH
13602: LD_INT 81
13604: PUSH
13605: LD_OWVAR 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PPUSH
13619: LD_VAR 0 3
13623: PPUSH
13624: CALL_OW 74
13628: PPUSH
13629: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13633: LD_VAR 0 2
13637: PUSH
13638: LD_INT 60
13640: GREATER
13641: PUSH
13642: LD_VAR 0 3
13646: PPUSH
13647: CALL_OW 301
13651: OR
13652: IFFALSE 13563
// if un then
13654: LD_VAR 0 3
13658: IFFALSE 13669
// RemoveUnit ( un ) ;
13660: LD_VAR 0 3
13664: PPUSH
13665: CALL_OW 64
// end ;
13669: PPOPN 3
13671: END
