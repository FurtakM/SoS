// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1306
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1304
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1304
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: IFFALSE 1277
1257: PUSH
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 4
1267: PPUSH
1268: CALL_OW 428
1272: PUSH
1273: LD_INT 0
1275: EQUAL
1276: AND
1277: IFFALSE 1304
// ComMoveXY ( hunters [ i ] , x , y ) ;
1279: LD_EXP 6
1283: PUSH
1284: LD_VAR 0 1
1288: ARRAY
1289: PPUSH
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: CALL_OW 111
// end ; end ; end ;
1304: GO 964
1306: POP
1307: POP
// end ; end_of_file
1308: PPOPN 5
1310: END
// on UnitGoesToRed ( un ) do var i ;
1311: LD_INT 0
1313: PPUSH
// begin if GetSide ( un ) = 1 then
1314: LD_VAR 0 1
1318: PPUSH
1319: CALL_OW 255
1323: PUSH
1324: LD_INT 1
1326: EQUAL
1327: IFFALSE 1336
// YouLost ( hunt2 ) ;
1329: LD_STRING hunt2
1331: PPUSH
1332: CALL_OW 104
// if GetSide ( un ) > 1 then
1336: LD_VAR 0 1
1340: PPUSH
1341: CALL_OW 255
1345: PUSH
1346: LD_INT 1
1348: GREATER
1349: IFFALSE 1402
// begin for i := 1 to 6 do
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: DOUBLE
1357: LD_INT 1
1359: DEC
1360: ST_TO_ADDR
1361: LD_INT 6
1363: PUSH
1364: FOR_TO
1365: IFFALSE 1388
// begin wait ( 0 0$1 ) ;
1367: LD_INT 35
1369: PPUSH
1370: CALL_OW 67
// SetLives ( un , 249 ) ;
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_INT 249
1381: PPUSH
1382: CALL_OW 234
// end ;
1386: GO 1364
1388: POP
1389: POP
// SetLives ( un , 1000 ) ;
1390: LD_VAR 0 1
1394: PPUSH
1395: LD_INT 1000
1397: PPUSH
1398: CALL_OW 234
// end ; end ;
1402: PPOPN 2
1404: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1405: LD_VAR 0 1
1409: PUSH
1410: LD_INT 1
1412: EQUAL
1413: IFFALSE 1425
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 1
1423: GREATER
1424: AND
1425: IFFALSE 1434
// YouLost ( hunt1 ) ;
1427: LD_STRING hunt1
1429: PPUSH
1430: CALL_OW 104
// end ;
1434: PPOPN 2
1436: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1437: LD_INT 0
1439: PPUSH
// begin point := 0 ;
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 0
1447: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 257
1457: PUSH
1458: LD_INT 20
1460: DOUBLE
1461: EQUAL
1462: IFTRUE 1466
1464: GO 1477
1466: POP
// point := 10 ; class_horse :
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_INT 10
1474: ST_TO_ADDR
1475: GO 1611
1477: LD_INT 21
1479: DOUBLE
1480: EQUAL
1481: IFTRUE 1485
1483: GO 1496
1485: POP
// point := 10 ; class_baggie :
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: LD_INT 10
1493: ST_TO_ADDR
1494: GO 1611
1496: LD_INT 13
1498: DOUBLE
1499: EQUAL
1500: IFTRUE 1504
1502: GO 1515
1504: POP
// point := 5 ; class_phororhacos :
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_INT 5
1512: ST_TO_ADDR
1513: GO 1611
1515: LD_INT 18
1517: DOUBLE
1518: EQUAL
1519: IFTRUE 1523
1521: GO 1534
1523: POP
// point := 10 ; class_tiger :
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: LD_INT 10
1531: ST_TO_ADDR
1532: GO 1611
1534: LD_INT 14
1536: DOUBLE
1537: EQUAL
1538: IFTRUE 1542
1540: GO 1553
1542: POP
// point := 20 ; class_apeman :
1543: LD_ADDR_VAR 0 4
1547: PUSH
1548: LD_INT 20
1550: ST_TO_ADDR
1551: GO 1611
1553: LD_INT 12
1555: DOUBLE
1556: EQUAL
1557: IFTRUE 1561
1559: GO 1572
1561: POP
// point := 30 ; class_apeman_soldier :
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_INT 30
1569: ST_TO_ADDR
1570: GO 1611
1572: LD_INT 15
1574: DOUBLE
1575: EQUAL
1576: IFTRUE 1580
1578: GO 1591
1580: POP
// point := 50 ; class_frog :
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_INT 50
1588: ST_TO_ADDR
1589: GO 1611
1591: LD_INT 19
1593: DOUBLE
1594: EQUAL
1595: IFTRUE 1599
1597: GO 1610
1599: POP
// point := 10 ; end ;
1600: LD_ADDR_VAR 0 4
1604: PUSH
1605: LD_INT 10
1607: ST_TO_ADDR
1608: GO 1611
1610: POP
// if point then
1611: LD_VAR 0 4
1615: IFFALSE 1654
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1617: LD_ADDR_EXP 5
1621: PUSH
1622: LD_EXP 5
1626: PPUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_EXP 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_VAR 0 4
1647: PLUS
1648: PPUSH
1649: CALL_OW 1
1653: ST_TO_ADDR
// end ;
1654: PPOPN 4
1656: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1657: LD_INT 22
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: PUSH
1672: LD_INT 10
1674: LESS
1675: IFFALSE 1789
1677: GO 1679
1679: DISABLE
// begin enable ;
1680: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1681: LD_INT 2
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 4
1692: PPUSH
1693: CALL_OW 12
1697: PUSH
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 2
1703: PPUSH
1704: CALL_OW 12
1708: PUSH
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: PUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: CALL_OW 12
1730: PUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 4
1736: PPUSH
1737: CALL_OW 12
1741: PUSH
1742: LD_INT 0
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: CALL_OW 12
1752: PUSH
1753: LD_INT 0
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: CALL_OW 12
1763: PUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 2
1769: PPUSH
1770: CALL_OW 12
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL 391 0 3
// end ;
1789: END
// every 0 0$1 do var i ;
1790: GO 1792
1792: DISABLE
1793: LD_INT 0
1795: PPUSH
// begin enable ;
1796: ENABLE
// display_strings := [ ] ;
1797: LD_ADDR_OWVAR 47
1801: PUSH
1802: EMPTY
1803: ST_TO_ADDR
// for i := 1 to huntersAmount do
1804: LD_ADDR_VAR 0 1
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_EXP 3
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1954
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1822: LD_ADDR_OWVAR 47
1826: PUSH
1827: LD_OWVAR 47
1831: PUSH
1832: LD_STRING #player
1834: PUSH
1835: LD_VAR 0 1
1839: STR
1840: PUSH
1841: LD_VAR 0 1
1845: PUSH
1846: LD_EXP 5
1850: PUSH
1851: LD_VAR 0 1
1855: ARRAY
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: ADD
1862: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1863: LD_EXP 5
1867: PUSH
1868: LD_VAR 0 1
1872: ARRAY
1873: PUSH
1874: LD_INT 750
1876: PUSH
1877: LD_INT 1250
1879: PUSH
1880: LD_INT 2000
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_OWVAR 67
1892: ARRAY
1893: GREATEREQUAL
1894: IFFALSE 1952
// begin if i = 1 then
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 1
1903: EQUAL
1904: IFFALSE 1945
// begin DialogueOn ;
1906: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1910: LD_STRING ACH_HUNT
1912: PPUSH
1913: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1917: LD_ADDR_OWVAR 47
1921: PUSH
1922: LD_STRING #hunting-win
1924: PUSH
1925: EMPTY
1926: LIST
1927: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1928: LD_INT 175
1930: PPUSH
1931: CALL_OW 68
// YouWin ;
1935: CALL_OW 103
// DialogueOff ;
1939: CALL_OW 7
// end else
1943: GO 1952
// YouLost ( hunt3 ) ;
1945: LD_STRING hunt3
1947: PPUSH
1948: CALL_OW 104
// end ; end ;
1952: GO 1819
1954: POP
1955: POP
// end ; end_of_file end_of_file
1956: PPOPN 1
1958: END
// export globalGameSaveCounter ; every 0 0$1 do
1959: GO 1961
1961: DISABLE
// begin enable ;
1962: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1963: LD_STRING updateTimer(
1965: PUSH
1966: LD_OWVAR 1
1970: STR
1971: PUSH
1972: LD_STRING );
1974: STR
1975: PPUSH
1976: CALL_OW 559
// end ;
1980: END
// every 0 0$1 do
1981: GO 1983
1983: DISABLE
// begin globalGameSaveCounter := 0 ;
1984: LD_ADDR_EXP 7
1988: PUSH
1989: LD_INT 0
1991: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1992: LD_STRING setGameSaveCounter(0)
1994: PPUSH
1995: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1999: LD_STRING initStreamRollete();
2001: PPUSH
2002: CALL_OW 559
// InitStreamMode ;
2006: CALL 3358 0 0
// DefineStreamItems ( false ) ;
2010: LD_INT 0
2012: PPUSH
2013: CALL 3822 0 1
// end ;
2017: END
// export function SOS_MapStart ( ) ; begin
2018: LD_INT 0
2020: PPUSH
// if streamModeActive then
2021: LD_EXP 8
2025: IFFALSE 2034
// DefineStreamItems ( true ) ;
2027: LD_INT 1
2029: PPUSH
2030: CALL 3822 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
2034: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
2036: PPUSH
2037: CALL_OW 559
// UpdateLuaVariables ( ) ;
2041: CALL 2058 0 0
// UpdateFactoryWaypoints ( ) ;
2045: CALL 16944 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2049: CALL 17196 0 0
// end ;
2053: LD_VAR 0 1
2057: RET
// function UpdateLuaVariables ( ) ; begin
2058: LD_INT 0
2060: PPUSH
// if globalGameSaveCounter then
2061: LD_EXP 7
2065: IFFALSE 2099
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2067: LD_ADDR_EXP 7
2071: PUSH
2072: LD_EXP 7
2076: PPUSH
2077: CALL 64255 0 1
2081: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2082: LD_STRING setGameSaveCounter(
2084: PUSH
2085: LD_EXP 7
2089: STR
2090: PUSH
2091: LD_STRING )
2093: STR
2094: PPUSH
2095: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2099: LD_STRING setGameDifficulty(
2101: PUSH
2102: LD_OWVAR 67
2106: STR
2107: PUSH
2108: LD_STRING )
2110: STR
2111: PPUSH
2112: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2116: LD_STRING displayDifficulty(
2118: PUSH
2119: LD_OWVAR 67
2123: STR
2124: PUSH
2125: LD_STRING )
2127: STR
2128: PPUSH
2129: CALL_OW 559
// end ;
2133: LD_VAR 0 1
2137: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2138: LD_INT 0
2140: PPUSH
// if p2 = stream_mode then
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 100
2148: EQUAL
2149: IFFALSE 3152
// begin if not StreamModeActive then
2151: LD_EXP 8
2155: NOT
2156: IFFALSE 2166
// StreamModeActive := true ;
2158: LD_ADDR_EXP 8
2162: PUSH
2163: LD_INT 1
2165: ST_TO_ADDR
// if p3 = 0 then
2166: LD_VAR 0 3
2170: PUSH
2171: LD_INT 0
2173: EQUAL
2174: IFFALSE 2180
// InitStreamMode ;
2176: CALL 3358 0 0
// if p3 = 1 then
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 1
2187: EQUAL
2188: IFFALSE 2198
// sRocket := true ;
2190: LD_ADDR_EXP 13
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// if p3 = 2 then
2198: LD_VAR 0 3
2202: PUSH
2203: LD_INT 2
2205: EQUAL
2206: IFFALSE 2216
// sSpeed := true ;
2208: LD_ADDR_EXP 12
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// if p3 = 3 then
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 3
2223: EQUAL
2224: IFFALSE 2234
// sEngine := true ;
2226: LD_ADDR_EXP 14
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// if p3 = 4 then
2234: LD_VAR 0 3
2238: PUSH
2239: LD_INT 4
2241: EQUAL
2242: IFFALSE 2252
// sSpec := true ;
2244: LD_ADDR_EXP 11
2248: PUSH
2249: LD_INT 1
2251: ST_TO_ADDR
// if p3 = 5 then
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 5
2259: EQUAL
2260: IFFALSE 2270
// sLevel := true ;
2262: LD_ADDR_EXP 15
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// if p3 = 6 then
2270: LD_VAR 0 3
2274: PUSH
2275: LD_INT 6
2277: EQUAL
2278: IFFALSE 2288
// sArmoury := true ;
2280: LD_ADDR_EXP 16
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// if p3 = 7 then
2288: LD_VAR 0 3
2292: PUSH
2293: LD_INT 7
2295: EQUAL
2296: IFFALSE 2306
// sRadar := true ;
2298: LD_ADDR_EXP 17
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// if p3 = 8 then
2306: LD_VAR 0 3
2310: PUSH
2311: LD_INT 8
2313: EQUAL
2314: IFFALSE 2324
// sBunker := true ;
2316: LD_ADDR_EXP 18
2320: PUSH
2321: LD_INT 1
2323: ST_TO_ADDR
// if p3 = 9 then
2324: LD_VAR 0 3
2328: PUSH
2329: LD_INT 9
2331: EQUAL
2332: IFFALSE 2342
// sHack := true ;
2334: LD_ADDR_EXP 19
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// if p3 = 10 then
2342: LD_VAR 0 3
2346: PUSH
2347: LD_INT 10
2349: EQUAL
2350: IFFALSE 2360
// sFire := true ;
2352: LD_ADDR_EXP 20
2356: PUSH
2357: LD_INT 1
2359: ST_TO_ADDR
// if p3 = 11 then
2360: LD_VAR 0 3
2364: PUSH
2365: LD_INT 11
2367: EQUAL
2368: IFFALSE 2378
// sRefresh := true ;
2370: LD_ADDR_EXP 21
2374: PUSH
2375: LD_INT 1
2377: ST_TO_ADDR
// if p3 = 12 then
2378: LD_VAR 0 3
2382: PUSH
2383: LD_INT 12
2385: EQUAL
2386: IFFALSE 2396
// sExp := true ;
2388: LD_ADDR_EXP 22
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// if p3 = 13 then
2396: LD_VAR 0 3
2400: PUSH
2401: LD_INT 13
2403: EQUAL
2404: IFFALSE 2414
// sDepot := true ;
2406: LD_ADDR_EXP 23
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// if p3 = 14 then
2414: LD_VAR 0 3
2418: PUSH
2419: LD_INT 14
2421: EQUAL
2422: IFFALSE 2432
// sFlag := true ;
2424: LD_ADDR_EXP 24
2428: PUSH
2429: LD_INT 1
2431: ST_TO_ADDR
// if p3 = 15 then
2432: LD_VAR 0 3
2436: PUSH
2437: LD_INT 15
2439: EQUAL
2440: IFFALSE 2450
// sKamikadze := true ;
2442: LD_ADDR_EXP 32
2446: PUSH
2447: LD_INT 1
2449: ST_TO_ADDR
// if p3 = 16 then
2450: LD_VAR 0 3
2454: PUSH
2455: LD_INT 16
2457: EQUAL
2458: IFFALSE 2468
// sTroll := true ;
2460: LD_ADDR_EXP 33
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// if p3 = 17 then
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 17
2475: EQUAL
2476: IFFALSE 2486
// sSlow := true ;
2478: LD_ADDR_EXP 34
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// if p3 = 18 then
2486: LD_VAR 0 3
2490: PUSH
2491: LD_INT 18
2493: EQUAL
2494: IFFALSE 2504
// sLack := true ;
2496: LD_ADDR_EXP 35
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// if p3 = 19 then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 19
2511: EQUAL
2512: IFFALSE 2522
// sTank := true ;
2514: LD_ADDR_EXP 37
2518: PUSH
2519: LD_INT 1
2521: ST_TO_ADDR
// if p3 = 20 then
2522: LD_VAR 0 3
2526: PUSH
2527: LD_INT 20
2529: EQUAL
2530: IFFALSE 2540
// sRemote := true ;
2532: LD_ADDR_EXP 38
2536: PUSH
2537: LD_INT 1
2539: ST_TO_ADDR
// if p3 = 21 then
2540: LD_VAR 0 3
2544: PUSH
2545: LD_INT 21
2547: EQUAL
2548: IFFALSE 2558
// sPowell := true ;
2550: LD_ADDR_EXP 39
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// if p3 = 22 then
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 22
2565: EQUAL
2566: IFFALSE 2576
// sTeleport := true ;
2568: LD_ADDR_EXP 42
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// if p3 = 23 then
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 23
2583: EQUAL
2584: IFFALSE 2594
// sOilTower := true ;
2586: LD_ADDR_EXP 44
2590: PUSH
2591: LD_INT 1
2593: ST_TO_ADDR
// if p3 = 24 then
2594: LD_VAR 0 3
2598: PUSH
2599: LD_INT 24
2601: EQUAL
2602: IFFALSE 2612
// sShovel := true ;
2604: LD_ADDR_EXP 45
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// if p3 = 25 then
2612: LD_VAR 0 3
2616: PUSH
2617: LD_INT 25
2619: EQUAL
2620: IFFALSE 2630
// sSheik := true ;
2622: LD_ADDR_EXP 46
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// if p3 = 26 then
2630: LD_VAR 0 3
2634: PUSH
2635: LD_INT 26
2637: EQUAL
2638: IFFALSE 2648
// sEarthquake := true ;
2640: LD_ADDR_EXP 48
2644: PUSH
2645: LD_INT 1
2647: ST_TO_ADDR
// if p3 = 27 then
2648: LD_VAR 0 3
2652: PUSH
2653: LD_INT 27
2655: EQUAL
2656: IFFALSE 2666
// sAI := true ;
2658: LD_ADDR_EXP 49
2662: PUSH
2663: LD_INT 1
2665: ST_TO_ADDR
// if p3 = 28 then
2666: LD_VAR 0 3
2670: PUSH
2671: LD_INT 28
2673: EQUAL
2674: IFFALSE 2684
// sCargo := true ;
2676: LD_ADDR_EXP 52
2680: PUSH
2681: LD_INT 1
2683: ST_TO_ADDR
// if p3 = 29 then
2684: LD_VAR 0 3
2688: PUSH
2689: LD_INT 29
2691: EQUAL
2692: IFFALSE 2702
// sDLaser := true ;
2694: LD_ADDR_EXP 53
2698: PUSH
2699: LD_INT 1
2701: ST_TO_ADDR
// if p3 = 30 then
2702: LD_VAR 0 3
2706: PUSH
2707: LD_INT 30
2709: EQUAL
2710: IFFALSE 2720
// sExchange := true ;
2712: LD_ADDR_EXP 54
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// if p3 = 31 then
2720: LD_VAR 0 3
2724: PUSH
2725: LD_INT 31
2727: EQUAL
2728: IFFALSE 2738
// sFac := true ;
2730: LD_ADDR_EXP 55
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// if p3 = 32 then
2738: LD_VAR 0 3
2742: PUSH
2743: LD_INT 32
2745: EQUAL
2746: IFFALSE 2756
// sPower := true ;
2748: LD_ADDR_EXP 56
2752: PUSH
2753: LD_INT 1
2755: ST_TO_ADDR
// if p3 = 33 then
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 33
2763: EQUAL
2764: IFFALSE 2774
// sRandom := true ;
2766: LD_ADDR_EXP 57
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// if p3 = 34 then
2774: LD_VAR 0 3
2778: PUSH
2779: LD_INT 34
2781: EQUAL
2782: IFFALSE 2792
// sShield := true ;
2784: LD_ADDR_EXP 58
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// if p3 = 35 then
2792: LD_VAR 0 3
2796: PUSH
2797: LD_INT 35
2799: EQUAL
2800: IFFALSE 2810
// sTime := true ;
2802: LD_ADDR_EXP 59
2806: PUSH
2807: LD_INT 1
2809: ST_TO_ADDR
// if p3 = 36 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 36
2817: EQUAL
2818: IFFALSE 2828
// sTools := true ;
2820: LD_ADDR_EXP 60
2824: PUSH
2825: LD_INT 1
2827: ST_TO_ADDR
// if p3 = 101 then
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 101
2835: EQUAL
2836: IFFALSE 2846
// sSold := true ;
2838: LD_ADDR_EXP 25
2842: PUSH
2843: LD_INT 1
2845: ST_TO_ADDR
// if p3 = 102 then
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 102
2853: EQUAL
2854: IFFALSE 2864
// sDiff := true ;
2856: LD_ADDR_EXP 26
2860: PUSH
2861: LD_INT 1
2863: ST_TO_ADDR
// if p3 = 103 then
2864: LD_VAR 0 3
2868: PUSH
2869: LD_INT 103
2871: EQUAL
2872: IFFALSE 2882
// sFog := true ;
2874: LD_ADDR_EXP 29
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// if p3 = 104 then
2882: LD_VAR 0 3
2886: PUSH
2887: LD_INT 104
2889: EQUAL
2890: IFFALSE 2900
// sReset := true ;
2892: LD_ADDR_EXP 30
2896: PUSH
2897: LD_INT 1
2899: ST_TO_ADDR
// if p3 = 105 then
2900: LD_VAR 0 3
2904: PUSH
2905: LD_INT 105
2907: EQUAL
2908: IFFALSE 2918
// sSun := true ;
2910: LD_ADDR_EXP 31
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// if p3 = 106 then
2918: LD_VAR 0 3
2922: PUSH
2923: LD_INT 106
2925: EQUAL
2926: IFFALSE 2936
// sTiger := true ;
2928: LD_ADDR_EXP 27
2932: PUSH
2933: LD_INT 1
2935: ST_TO_ADDR
// if p3 = 107 then
2936: LD_VAR 0 3
2940: PUSH
2941: LD_INT 107
2943: EQUAL
2944: IFFALSE 2954
// sBomb := true ;
2946: LD_ADDR_EXP 28
2950: PUSH
2951: LD_INT 1
2953: ST_TO_ADDR
// if p3 = 108 then
2954: LD_VAR 0 3
2958: PUSH
2959: LD_INT 108
2961: EQUAL
2962: IFFALSE 2972
// sWound := true ;
2964: LD_ADDR_EXP 36
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// if p3 = 109 then
2972: LD_VAR 0 3
2976: PUSH
2977: LD_INT 109
2979: EQUAL
2980: IFFALSE 2990
// sBetray := true ;
2982: LD_ADDR_EXP 40
2986: PUSH
2987: LD_INT 1
2989: ST_TO_ADDR
// if p3 = 110 then
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 110
2997: EQUAL
2998: IFFALSE 3008
// sContamin := true ;
3000: LD_ADDR_EXP 41
3004: PUSH
3005: LD_INT 1
3007: ST_TO_ADDR
// if p3 = 111 then
3008: LD_VAR 0 3
3012: PUSH
3013: LD_INT 111
3015: EQUAL
3016: IFFALSE 3026
// sOil := true ;
3018: LD_ADDR_EXP 43
3022: PUSH
3023: LD_INT 1
3025: ST_TO_ADDR
// if p3 = 112 then
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 112
3033: EQUAL
3034: IFFALSE 3044
// sStu := true ;
3036: LD_ADDR_EXP 47
3040: PUSH
3041: LD_INT 1
3043: ST_TO_ADDR
// if p3 = 113 then
3044: LD_VAR 0 3
3048: PUSH
3049: LD_INT 113
3051: EQUAL
3052: IFFALSE 3062
// sBazooka := true ;
3054: LD_ADDR_EXP 50
3058: PUSH
3059: LD_INT 1
3061: ST_TO_ADDR
// if p3 = 114 then
3062: LD_VAR 0 3
3066: PUSH
3067: LD_INT 114
3069: EQUAL
3070: IFFALSE 3080
// sMortar := true ;
3072: LD_ADDR_EXP 51
3076: PUSH
3077: LD_INT 1
3079: ST_TO_ADDR
// if p3 = 115 then
3080: LD_VAR 0 3
3084: PUSH
3085: LD_INT 115
3087: EQUAL
3088: IFFALSE 3098
// sRanger := true ;
3090: LD_ADDR_EXP 61
3094: PUSH
3095: LD_INT 1
3097: ST_TO_ADDR
// if p3 = 116 then
3098: LD_VAR 0 3
3102: PUSH
3103: LD_INT 116
3105: EQUAL
3106: IFFALSE 3116
// sComputer := true ;
3108: LD_ADDR_EXP 62
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// if p3 = 117 then
3116: LD_VAR 0 3
3120: PUSH
3121: LD_INT 117
3123: EQUAL
3124: IFFALSE 3134
// s30 := true ;
3126: LD_ADDR_EXP 63
3130: PUSH
3131: LD_INT 1
3133: ST_TO_ADDR
// if p3 = 118 then
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 118
3141: EQUAL
3142: IFFALSE 3152
// s60 := true ;
3144: LD_ADDR_EXP 64
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// end ; if p2 = hack_mode then
3152: LD_VAR 0 2
3156: PUSH
3157: LD_INT 101
3159: EQUAL
3160: IFFALSE 3288
// begin case p3 of 1 :
3162: LD_VAR 0 3
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3182
3175: POP
// hHackUnlimitedResources ; 2 :
3176: CALL 15551 0 0
3180: GO 3288
3182: LD_INT 2
3184: DOUBLE
3185: EQUAL
3186: IFTRUE 3190
3188: GO 3197
3190: POP
// hHackSetLevel10 ; 3 :
3191: CALL 15684 0 0
3195: GO 3288
3197: LD_INT 3
3199: DOUBLE
3200: EQUAL
3201: IFTRUE 3205
3203: GO 3212
3205: POP
// hHackSetLevel10YourUnits ; 4 :
3206: CALL 15769 0 0
3210: GO 3288
3212: LD_INT 4
3214: DOUBLE
3215: EQUAL
3216: IFTRUE 3220
3218: GO 3227
3220: POP
// hHackInvincible ; 5 :
3221: CALL 16217 0 0
3225: GO 3288
3227: LD_INT 5
3229: DOUBLE
3230: EQUAL
3231: IFTRUE 3235
3233: GO 3242
3235: POP
// hHackInvisible ; 6 :
3236: CALL 16328 0 0
3240: GO 3288
3242: LD_INT 6
3244: DOUBLE
3245: EQUAL
3246: IFTRUE 3250
3248: GO 3257
3250: POP
// hHackChangeYourSide ; 7 :
3251: CALL 16385 0 0
3255: GO 3288
3257: LD_INT 7
3259: DOUBLE
3260: EQUAL
3261: IFTRUE 3265
3263: GO 3272
3265: POP
// hHackChangeUnitSide ; 8 :
3266: CALL 16427 0 0
3270: GO 3288
3272: LD_INT 8
3274: DOUBLE
3275: EQUAL
3276: IFTRUE 3280
3278: GO 3287
3280: POP
// hHackFog ; end ;
3281: CALL 16528 0 0
3285: GO 3288
3287: POP
// end ; if p2 = game_save_mode then
3288: LD_VAR 0 2
3292: PUSH
3293: LD_INT 102
3295: EQUAL
3296: IFFALSE 3353
// begin if p3 = 1 then
3298: LD_VAR 0 3
3302: PUSH
3303: LD_INT 1
3305: EQUAL
3306: IFFALSE 3318
// globalGameSaveCounter := p4 ;
3308: LD_ADDR_EXP 7
3312: PUSH
3313: LD_VAR 0 4
3317: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3318: LD_VAR 0 3
3322: PUSH
3323: LD_INT 2
3325: EQUAL
3326: IFFALSE 3334
3328: PUSH
3329: LD_EXP 7
3333: AND
3334: IFFALSE 3353
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3336: LD_STRING setGameSaveCounter(
3338: PUSH
3339: LD_EXP 7
3343: STR
3344: PUSH
3345: LD_STRING )
3347: STR
3348: PPUSH
3349: CALL_OW 559
// end ; end ;
3353: LD_VAR 0 7
3357: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3358: LD_INT 0
3360: PPUSH
// streamModeActive := false ;
3361: LD_ADDR_EXP 8
3365: PUSH
3366: LD_INT 0
3368: ST_TO_ADDR
// normalCounter := 36 ;
3369: LD_ADDR_EXP 9
3373: PUSH
3374: LD_INT 36
3376: ST_TO_ADDR
// hardcoreCounter := 18 ;
3377: LD_ADDR_EXP 10
3381: PUSH
3382: LD_INT 18
3384: ST_TO_ADDR
// sRocket := false ;
3385: LD_ADDR_EXP 13
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// sSpeed := false ;
3393: LD_ADDR_EXP 12
3397: PUSH
3398: LD_INT 0
3400: ST_TO_ADDR
// sEngine := false ;
3401: LD_ADDR_EXP 14
3405: PUSH
3406: LD_INT 0
3408: ST_TO_ADDR
// sSpec := false ;
3409: LD_ADDR_EXP 11
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// sLevel := false ;
3417: LD_ADDR_EXP 15
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// sArmoury := false ;
3425: LD_ADDR_EXP 16
3429: PUSH
3430: LD_INT 0
3432: ST_TO_ADDR
// sRadar := false ;
3433: LD_ADDR_EXP 17
3437: PUSH
3438: LD_INT 0
3440: ST_TO_ADDR
// sBunker := false ;
3441: LD_ADDR_EXP 18
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// sHack := false ;
3449: LD_ADDR_EXP 19
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// sFire := false ;
3457: LD_ADDR_EXP 20
3461: PUSH
3462: LD_INT 0
3464: ST_TO_ADDR
// sRefresh := false ;
3465: LD_ADDR_EXP 21
3469: PUSH
3470: LD_INT 0
3472: ST_TO_ADDR
// sExp := false ;
3473: LD_ADDR_EXP 22
3477: PUSH
3478: LD_INT 0
3480: ST_TO_ADDR
// sDepot := false ;
3481: LD_ADDR_EXP 23
3485: PUSH
3486: LD_INT 0
3488: ST_TO_ADDR
// sFlag := false ;
3489: LD_ADDR_EXP 24
3493: PUSH
3494: LD_INT 0
3496: ST_TO_ADDR
// sKamikadze := false ;
3497: LD_ADDR_EXP 32
3501: PUSH
3502: LD_INT 0
3504: ST_TO_ADDR
// sTroll := false ;
3505: LD_ADDR_EXP 33
3509: PUSH
3510: LD_INT 0
3512: ST_TO_ADDR
// sSlow := false ;
3513: LD_ADDR_EXP 34
3517: PUSH
3518: LD_INT 0
3520: ST_TO_ADDR
// sLack := false ;
3521: LD_ADDR_EXP 35
3525: PUSH
3526: LD_INT 0
3528: ST_TO_ADDR
// sTank := false ;
3529: LD_ADDR_EXP 37
3533: PUSH
3534: LD_INT 0
3536: ST_TO_ADDR
// sRemote := false ;
3537: LD_ADDR_EXP 38
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// sPowell := false ;
3545: LD_ADDR_EXP 39
3549: PUSH
3550: LD_INT 0
3552: ST_TO_ADDR
// sTeleport := false ;
3553: LD_ADDR_EXP 42
3557: PUSH
3558: LD_INT 0
3560: ST_TO_ADDR
// sOilTower := false ;
3561: LD_ADDR_EXP 44
3565: PUSH
3566: LD_INT 0
3568: ST_TO_ADDR
// sShovel := false ;
3569: LD_ADDR_EXP 45
3573: PUSH
3574: LD_INT 0
3576: ST_TO_ADDR
// sSheik := false ;
3577: LD_ADDR_EXP 46
3581: PUSH
3582: LD_INT 0
3584: ST_TO_ADDR
// sEarthquake := false ;
3585: LD_ADDR_EXP 48
3589: PUSH
3590: LD_INT 0
3592: ST_TO_ADDR
// sAI := false ;
3593: LD_ADDR_EXP 49
3597: PUSH
3598: LD_INT 0
3600: ST_TO_ADDR
// sCargo := false ;
3601: LD_ADDR_EXP 52
3605: PUSH
3606: LD_INT 0
3608: ST_TO_ADDR
// sDLaser := false ;
3609: LD_ADDR_EXP 53
3613: PUSH
3614: LD_INT 0
3616: ST_TO_ADDR
// sExchange := false ;
3617: LD_ADDR_EXP 54
3621: PUSH
3622: LD_INT 0
3624: ST_TO_ADDR
// sFac := false ;
3625: LD_ADDR_EXP 55
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// sPower := false ;
3633: LD_ADDR_EXP 56
3637: PUSH
3638: LD_INT 0
3640: ST_TO_ADDR
// sRandom := false ;
3641: LD_ADDR_EXP 57
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// sShield := false ;
3649: LD_ADDR_EXP 58
3653: PUSH
3654: LD_INT 0
3656: ST_TO_ADDR
// sTime := false ;
3657: LD_ADDR_EXP 59
3661: PUSH
3662: LD_INT 0
3664: ST_TO_ADDR
// sTools := false ;
3665: LD_ADDR_EXP 60
3669: PUSH
3670: LD_INT 0
3672: ST_TO_ADDR
// sSold := false ;
3673: LD_ADDR_EXP 25
3677: PUSH
3678: LD_INT 0
3680: ST_TO_ADDR
// sDiff := false ;
3681: LD_ADDR_EXP 26
3685: PUSH
3686: LD_INT 0
3688: ST_TO_ADDR
// sFog := false ;
3689: LD_ADDR_EXP 29
3693: PUSH
3694: LD_INT 0
3696: ST_TO_ADDR
// sReset := false ;
3697: LD_ADDR_EXP 30
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// sSun := false ;
3705: LD_ADDR_EXP 31
3709: PUSH
3710: LD_INT 0
3712: ST_TO_ADDR
// sTiger := false ;
3713: LD_ADDR_EXP 27
3717: PUSH
3718: LD_INT 0
3720: ST_TO_ADDR
// sBomb := false ;
3721: LD_ADDR_EXP 28
3725: PUSH
3726: LD_INT 0
3728: ST_TO_ADDR
// sWound := false ;
3729: LD_ADDR_EXP 36
3733: PUSH
3734: LD_INT 0
3736: ST_TO_ADDR
// sBetray := false ;
3737: LD_ADDR_EXP 40
3741: PUSH
3742: LD_INT 0
3744: ST_TO_ADDR
// sContamin := false ;
3745: LD_ADDR_EXP 41
3749: PUSH
3750: LD_INT 0
3752: ST_TO_ADDR
// sOil := false ;
3753: LD_ADDR_EXP 43
3757: PUSH
3758: LD_INT 0
3760: ST_TO_ADDR
// sStu := false ;
3761: LD_ADDR_EXP 47
3765: PUSH
3766: LD_INT 0
3768: ST_TO_ADDR
// sBazooka := false ;
3769: LD_ADDR_EXP 50
3773: PUSH
3774: LD_INT 0
3776: ST_TO_ADDR
// sMortar := false ;
3777: LD_ADDR_EXP 51
3781: PUSH
3782: LD_INT 0
3784: ST_TO_ADDR
// sRanger := false ;
3785: LD_ADDR_EXP 61
3789: PUSH
3790: LD_INT 0
3792: ST_TO_ADDR
// sComputer := false ;
3793: LD_ADDR_EXP 62
3797: PUSH
3798: LD_INT 0
3800: ST_TO_ADDR
// s30 := false ;
3801: LD_ADDR_EXP 63
3805: PUSH
3806: LD_INT 0
3808: ST_TO_ADDR
// s60 := false ;
3809: LD_ADDR_EXP 64
3813: PUSH
3814: LD_INT 0
3816: ST_TO_ADDR
// end ;
3817: LD_VAR 0 1
3821: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3822: LD_INT 0
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// result := [ ] ;
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: EMPTY
3837: ST_TO_ADDR
// if campaign_id = 1 then
3838: LD_OWVAR 69
3842: PUSH
3843: LD_INT 1
3845: EQUAL
3846: IFFALSE 7012
// begin case mission_number of 1 :
3848: LD_OWVAR 70
3852: PUSH
3853: LD_INT 1
3855: DOUBLE
3856: EQUAL
3857: IFTRUE 3861
3859: GO 3937
3861: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3862: LD_ADDR_VAR 0 2
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: LD_INT 4
3872: PUSH
3873: LD_INT 11
3875: PUSH
3876: LD_INT 12
3878: PUSH
3879: LD_INT 15
3881: PUSH
3882: LD_INT 16
3884: PUSH
3885: LD_INT 22
3887: PUSH
3888: LD_INT 23
3890: PUSH
3891: LD_INT 26
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 101
3907: PUSH
3908: LD_INT 102
3910: PUSH
3911: LD_INT 106
3913: PUSH
3914: LD_INT 116
3916: PUSH
3917: LD_INT 117
3919: PUSH
3920: LD_INT 118
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: ST_TO_ADDR
3935: GO 7010
3937: LD_INT 2
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4029
3945: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 2
3953: PUSH
3954: LD_INT 4
3956: PUSH
3957: LD_INT 11
3959: PUSH
3960: LD_INT 12
3962: PUSH
3963: LD_INT 15
3965: PUSH
3966: LD_INT 16
3968: PUSH
3969: LD_INT 22
3971: PUSH
3972: LD_INT 23
3974: PUSH
3975: LD_INT 26
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 101
3991: PUSH
3992: LD_INT 102
3994: PUSH
3995: LD_INT 105
3997: PUSH
3998: LD_INT 106
4000: PUSH
4001: LD_INT 108
4003: PUSH
4004: LD_INT 116
4006: PUSH
4007: LD_INT 117
4009: PUSH
4010: LD_INT 118
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: ST_TO_ADDR
4027: GO 7010
4029: LD_INT 3
4031: DOUBLE
4032: EQUAL
4033: IFTRUE 4037
4035: GO 4125
4037: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: LD_INT 5
4051: PUSH
4052: LD_INT 11
4054: PUSH
4055: LD_INT 12
4057: PUSH
4058: LD_INT 15
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 26
4069: PUSH
4070: LD_INT 36
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 101
4087: PUSH
4088: LD_INT 102
4090: PUSH
4091: LD_INT 105
4093: PUSH
4094: LD_INT 106
4096: PUSH
4097: LD_INT 108
4099: PUSH
4100: LD_INT 116
4102: PUSH
4103: LD_INT 117
4105: PUSH
4106: LD_INT 118
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: ST_TO_ADDR
4123: GO 7010
4125: LD_INT 4
4127: DOUBLE
4128: EQUAL
4129: IFTRUE 4133
4131: GO 4229
4133: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: LD_INT 11
4153: PUSH
4154: LD_INT 12
4156: PUSH
4157: LD_INT 15
4159: PUSH
4160: LD_INT 16
4162: PUSH
4163: LD_INT 22
4165: PUSH
4166: LD_INT 23
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 36
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 101
4191: PUSH
4192: LD_INT 102
4194: PUSH
4195: LD_INT 105
4197: PUSH
4198: LD_INT 106
4200: PUSH
4201: LD_INT 108
4203: PUSH
4204: LD_INT 116
4206: PUSH
4207: LD_INT 117
4209: PUSH
4210: LD_INT 118
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: ST_TO_ADDR
4227: GO 7010
4229: LD_INT 5
4231: DOUBLE
4232: EQUAL
4233: IFTRUE 4237
4235: GO 4349
4237: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4238: LD_ADDR_VAR 0 2
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: LD_INT 4
4248: PUSH
4249: LD_INT 5
4251: PUSH
4252: LD_INT 6
4254: PUSH
4255: LD_INT 8
4257: PUSH
4258: LD_INT 11
4260: PUSH
4261: LD_INT 12
4263: PUSH
4264: LD_INT 15
4266: PUSH
4267: LD_INT 16
4269: PUSH
4270: LD_INT 22
4272: PUSH
4273: LD_INT 23
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 26
4281: PUSH
4282: LD_INT 36
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 101
4303: PUSH
4304: LD_INT 102
4306: PUSH
4307: LD_INT 105
4309: PUSH
4310: LD_INT 106
4312: PUSH
4313: LD_INT 108
4315: PUSH
4316: LD_INT 109
4318: PUSH
4319: LD_INT 112
4321: PUSH
4322: LD_INT 116
4324: PUSH
4325: LD_INT 117
4327: PUSH
4328: LD_INT 118
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: ST_TO_ADDR
4347: GO 7010
4349: LD_INT 6
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4489
4357: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4358: LD_ADDR_VAR 0 2
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: LD_INT 4
4368: PUSH
4369: LD_INT 5
4371: PUSH
4372: LD_INT 6
4374: PUSH
4375: LD_INT 8
4377: PUSH
4378: LD_INT 11
4380: PUSH
4381: LD_INT 12
4383: PUSH
4384: LD_INT 15
4386: PUSH
4387: LD_INT 16
4389: PUSH
4390: LD_INT 20
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 23
4401: PUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 26
4407: PUSH
4408: LD_INT 30
4410: PUSH
4411: LD_INT 31
4413: PUSH
4414: LD_INT 32
4416: PUSH
4417: LD_INT 36
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 101
4443: PUSH
4444: LD_INT 102
4446: PUSH
4447: LD_INT 105
4449: PUSH
4450: LD_INT 106
4452: PUSH
4453: LD_INT 108
4455: PUSH
4456: LD_INT 109
4458: PUSH
4459: LD_INT 112
4461: PUSH
4462: LD_INT 116
4464: PUSH
4465: LD_INT 117
4467: PUSH
4468: LD_INT 118
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: ST_TO_ADDR
4487: GO 7010
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4609
4497: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 2
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 5
4511: PUSH
4512: LD_INT 7
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: LD_INT 12
4520: PUSH
4521: LD_INT 15
4523: PUSH
4524: LD_INT 16
4526: PUSH
4527: LD_INT 20
4529: PUSH
4530: LD_INT 21
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 23
4538: PUSH
4539: LD_INT 25
4541: PUSH
4542: LD_INT 26
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 101
4563: PUSH
4564: LD_INT 102
4566: PUSH
4567: LD_INT 103
4569: PUSH
4570: LD_INT 105
4572: PUSH
4573: LD_INT 106
4575: PUSH
4576: LD_INT 108
4578: PUSH
4579: LD_INT 112
4581: PUSH
4582: LD_INT 116
4584: PUSH
4585: LD_INT 117
4587: PUSH
4588: LD_INT 118
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: ST_TO_ADDR
4607: GO 7010
4609: LD_INT 8
4611: DOUBLE
4612: EQUAL
4613: IFTRUE 4617
4615: GO 4757
4617: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: PUSH
4626: LD_INT 4
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: LD_INT 6
4634: PUSH
4635: LD_INT 7
4637: PUSH
4638: LD_INT 8
4640: PUSH
4641: LD_INT 11
4643: PUSH
4644: LD_INT 12
4646: PUSH
4647: LD_INT 15
4649: PUSH
4650: LD_INT 16
4652: PUSH
4653: LD_INT 20
4655: PUSH
4656: LD_INT 21
4658: PUSH
4659: LD_INT 22
4661: PUSH
4662: LD_INT 23
4664: PUSH
4665: LD_INT 25
4667: PUSH
4668: LD_INT 26
4670: PUSH
4671: LD_INT 30
4673: PUSH
4674: LD_INT 31
4676: PUSH
4677: LD_INT 32
4679: PUSH
4680: LD_INT 36
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 101
4707: PUSH
4708: LD_INT 102
4710: PUSH
4711: LD_INT 103
4713: PUSH
4714: LD_INT 105
4716: PUSH
4717: LD_INT 106
4719: PUSH
4720: LD_INT 108
4722: PUSH
4723: LD_INT 109
4725: PUSH
4726: LD_INT 112
4728: PUSH
4729: LD_INT 116
4731: PUSH
4732: LD_INT 117
4734: PUSH
4735: LD_INT 118
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: ST_TO_ADDR
4755: GO 7010
4757: LD_INT 9
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4913
4765: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: LD_INT 2
4773: PUSH
4774: LD_INT 4
4776: PUSH
4777: LD_INT 5
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: LD_INT 7
4785: PUSH
4786: LD_INT 8
4788: PUSH
4789: LD_INT 11
4791: PUSH
4792: LD_INT 12
4794: PUSH
4795: LD_INT 15
4797: PUSH
4798: LD_INT 16
4800: PUSH
4801: LD_INT 20
4803: PUSH
4804: LD_INT 21
4806: PUSH
4807: LD_INT 22
4809: PUSH
4810: LD_INT 23
4812: PUSH
4813: LD_INT 25
4815: PUSH
4816: LD_INT 26
4818: PUSH
4819: LD_INT 28
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 31
4827: PUSH
4828: LD_INT 32
4830: PUSH
4831: LD_INT 36
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 101
4859: PUSH
4860: LD_INT 102
4862: PUSH
4863: LD_INT 103
4865: PUSH
4866: LD_INT 105
4868: PUSH
4869: LD_INT 106
4871: PUSH
4872: LD_INT 108
4874: PUSH
4875: LD_INT 109
4877: PUSH
4878: LD_INT 112
4880: PUSH
4881: LD_INT 114
4883: PUSH
4884: LD_INT 116
4886: PUSH
4887: LD_INT 117
4889: PUSH
4890: LD_INT 118
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: ST_TO_ADDR
4911: GO 7010
4913: LD_INT 10
4915: DOUBLE
4916: EQUAL
4917: IFTRUE 4921
4919: GO 5117
4921: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4922: LD_ADDR_VAR 0 2
4926: PUSH
4927: LD_INT 2
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: LD_INT 7
4941: PUSH
4942: LD_INT 8
4944: PUSH
4945: LD_INT 9
4947: PUSH
4948: LD_INT 10
4950: PUSH
4951: LD_INT 11
4953: PUSH
4954: LD_INT 12
4956: PUSH
4957: LD_INT 13
4959: PUSH
4960: LD_INT 14
4962: PUSH
4963: LD_INT 15
4965: PUSH
4966: LD_INT 16
4968: PUSH
4969: LD_INT 17
4971: PUSH
4972: LD_INT 18
4974: PUSH
4975: LD_INT 19
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 23
4989: PUSH
4990: LD_INT 24
4992: PUSH
4993: LD_INT 25
4995: PUSH
4996: LD_INT 26
4998: PUSH
4999: LD_INT 28
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 31
5007: PUSH
5008: LD_INT 32
5010: PUSH
5011: LD_INT 36
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 101
5047: PUSH
5048: LD_INT 102
5050: PUSH
5051: LD_INT 103
5053: PUSH
5054: LD_INT 104
5056: PUSH
5057: LD_INT 105
5059: PUSH
5060: LD_INT 106
5062: PUSH
5063: LD_INT 107
5065: PUSH
5066: LD_INT 108
5068: PUSH
5069: LD_INT 109
5071: PUSH
5072: LD_INT 110
5074: PUSH
5075: LD_INT 111
5077: PUSH
5078: LD_INT 112
5080: PUSH
5081: LD_INT 114
5083: PUSH
5084: LD_INT 116
5086: PUSH
5087: LD_INT 117
5089: PUSH
5090: LD_INT 118
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: ST_TO_ADDR
5115: GO 7010
5117: LD_INT 11
5119: DOUBLE
5120: EQUAL
5121: IFTRUE 5125
5123: GO 5329
5125: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5126: LD_ADDR_VAR 0 2
5130: PUSH
5131: LD_INT 2
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: LD_INT 4
5139: PUSH
5140: LD_INT 5
5142: PUSH
5143: LD_INT 6
5145: PUSH
5146: LD_INT 7
5148: PUSH
5149: LD_INT 8
5151: PUSH
5152: LD_INT 9
5154: PUSH
5155: LD_INT 10
5157: PUSH
5158: LD_INT 11
5160: PUSH
5161: LD_INT 12
5163: PUSH
5164: LD_INT 13
5166: PUSH
5167: LD_INT 14
5169: PUSH
5170: LD_INT 15
5172: PUSH
5173: LD_INT 16
5175: PUSH
5176: LD_INT 17
5178: PUSH
5179: LD_INT 18
5181: PUSH
5182: LD_INT 19
5184: PUSH
5185: LD_INT 20
5187: PUSH
5188: LD_INT 21
5190: PUSH
5191: LD_INT 22
5193: PUSH
5194: LD_INT 23
5196: PUSH
5197: LD_INT 24
5199: PUSH
5200: LD_INT 25
5202: PUSH
5203: LD_INT 26
5205: PUSH
5206: LD_INT 28
5208: PUSH
5209: LD_INT 30
5211: PUSH
5212: LD_INT 31
5214: PUSH
5215: LD_INT 32
5217: PUSH
5218: LD_INT 34
5220: PUSH
5221: LD_INT 36
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 101
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: LD_INT 103
5265: PUSH
5266: LD_INT 104
5268: PUSH
5269: LD_INT 105
5271: PUSH
5272: LD_INT 106
5274: PUSH
5275: LD_INT 107
5277: PUSH
5278: LD_INT 108
5280: PUSH
5281: LD_INT 109
5283: PUSH
5284: LD_INT 110
5286: PUSH
5287: LD_INT 111
5289: PUSH
5290: LD_INT 112
5292: PUSH
5293: LD_INT 114
5295: PUSH
5296: LD_INT 116
5298: PUSH
5299: LD_INT 117
5301: PUSH
5302: LD_INT 118
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: ST_TO_ADDR
5327: GO 7010
5329: LD_INT 12
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5557
5337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: LD_INT 2
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 4
5354: PUSH
5355: LD_INT 5
5357: PUSH
5358: LD_INT 6
5360: PUSH
5361: LD_INT 7
5363: PUSH
5364: LD_INT 8
5366: PUSH
5367: LD_INT 9
5369: PUSH
5370: LD_INT 10
5372: PUSH
5373: LD_INT 11
5375: PUSH
5376: LD_INT 12
5378: PUSH
5379: LD_INT 13
5381: PUSH
5382: LD_INT 14
5384: PUSH
5385: LD_INT 15
5387: PUSH
5388: LD_INT 16
5390: PUSH
5391: LD_INT 17
5393: PUSH
5394: LD_INT 18
5396: PUSH
5397: LD_INT 19
5399: PUSH
5400: LD_INT 20
5402: PUSH
5403: LD_INT 21
5405: PUSH
5406: LD_INT 22
5408: PUSH
5409: LD_INT 23
5411: PUSH
5412: LD_INT 24
5414: PUSH
5415: LD_INT 25
5417: PUSH
5418: LD_INT 26
5420: PUSH
5421: LD_INT 27
5423: PUSH
5424: LD_INT 28
5426: PUSH
5427: LD_INT 30
5429: PUSH
5430: LD_INT 31
5432: PUSH
5433: LD_INT 32
5435: PUSH
5436: LD_INT 33
5438: PUSH
5439: LD_INT 34
5441: PUSH
5442: LD_INT 36
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 101
5483: PUSH
5484: LD_INT 102
5486: PUSH
5487: LD_INT 103
5489: PUSH
5490: LD_INT 104
5492: PUSH
5493: LD_INT 105
5495: PUSH
5496: LD_INT 106
5498: PUSH
5499: LD_INT 107
5501: PUSH
5502: LD_INT 108
5504: PUSH
5505: LD_INT 109
5507: PUSH
5508: LD_INT 110
5510: PUSH
5511: LD_INT 111
5513: PUSH
5514: LD_INT 112
5516: PUSH
5517: LD_INT 113
5519: PUSH
5520: LD_INT 114
5522: PUSH
5523: LD_INT 116
5525: PUSH
5526: LD_INT 117
5528: PUSH
5529: LD_INT 118
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: ST_TO_ADDR
5555: GO 7010
5557: LD_INT 13
5559: DOUBLE
5560: EQUAL
5561: IFTRUE 5565
5563: GO 5773
5565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5566: LD_ADDR_VAR 0 2
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 5
5585: PUSH
5586: LD_INT 8
5588: PUSH
5589: LD_INT 9
5591: PUSH
5592: LD_INT 10
5594: PUSH
5595: LD_INT 11
5597: PUSH
5598: LD_INT 12
5600: PUSH
5601: LD_INT 14
5603: PUSH
5604: LD_INT 15
5606: PUSH
5607: LD_INT 16
5609: PUSH
5610: LD_INT 17
5612: PUSH
5613: LD_INT 18
5615: PUSH
5616: LD_INT 19
5618: PUSH
5619: LD_INT 20
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 23
5630: PUSH
5631: LD_INT 24
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 26
5639: PUSH
5640: LD_INT 27
5642: PUSH
5643: LD_INT 28
5645: PUSH
5646: LD_INT 30
5648: PUSH
5649: LD_INT 31
5651: PUSH
5652: LD_INT 32
5654: PUSH
5655: LD_INT 33
5657: PUSH
5658: LD_INT 34
5660: PUSH
5661: LD_INT 36
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 101
5699: PUSH
5700: LD_INT 102
5702: PUSH
5703: LD_INT 103
5705: PUSH
5706: LD_INT 104
5708: PUSH
5709: LD_INT 105
5711: PUSH
5712: LD_INT 106
5714: PUSH
5715: LD_INT 107
5717: PUSH
5718: LD_INT 108
5720: PUSH
5721: LD_INT 109
5723: PUSH
5724: LD_INT 110
5726: PUSH
5727: LD_INT 111
5729: PUSH
5730: LD_INT 112
5732: PUSH
5733: LD_INT 113
5735: PUSH
5736: LD_INT 114
5738: PUSH
5739: LD_INT 116
5741: PUSH
5742: LD_INT 117
5744: PUSH
5745: LD_INT 118
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: ST_TO_ADDR
5771: GO 7010
5773: LD_INT 14
5775: DOUBLE
5776: EQUAL
5777: IFTRUE 5781
5779: GO 6005
5781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: LD_INT 1
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: LD_INT 3
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: LD_INT 9
5813: PUSH
5814: LD_INT 10
5816: PUSH
5817: LD_INT 11
5819: PUSH
5820: LD_INT 12
5822: PUSH
5823: LD_INT 13
5825: PUSH
5826: LD_INT 14
5828: PUSH
5829: LD_INT 15
5831: PUSH
5832: LD_INT 16
5834: PUSH
5835: LD_INT 17
5837: PUSH
5838: LD_INT 18
5840: PUSH
5841: LD_INT 19
5843: PUSH
5844: LD_INT 20
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 23
5855: PUSH
5856: LD_INT 24
5858: PUSH
5859: LD_INT 25
5861: PUSH
5862: LD_INT 26
5864: PUSH
5865: LD_INT 27
5867: PUSH
5868: LD_INT 28
5870: PUSH
5871: LD_INT 29
5873: PUSH
5874: LD_INT 30
5876: PUSH
5877: LD_INT 31
5879: PUSH
5880: LD_INT 32
5882: PUSH
5883: LD_INT 33
5885: PUSH
5886: LD_INT 34
5888: PUSH
5889: LD_INT 36
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: PUSH
5929: LD_INT 101
5931: PUSH
5932: LD_INT 102
5934: PUSH
5935: LD_INT 103
5937: PUSH
5938: LD_INT 104
5940: PUSH
5941: LD_INT 105
5943: PUSH
5944: LD_INT 106
5946: PUSH
5947: LD_INT 107
5949: PUSH
5950: LD_INT 108
5952: PUSH
5953: LD_INT 109
5955: PUSH
5956: LD_INT 110
5958: PUSH
5959: LD_INT 111
5961: PUSH
5962: LD_INT 112
5964: PUSH
5965: LD_INT 113
5967: PUSH
5968: LD_INT 114
5970: PUSH
5971: LD_INT 116
5973: PUSH
5974: LD_INT 117
5976: PUSH
5977: LD_INT 118
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: ST_TO_ADDR
6003: GO 7010
6005: LD_INT 15
6007: DOUBLE
6008: EQUAL
6009: IFTRUE 6013
6011: GO 6237
6013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 2
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: LD_INT 4
6030: PUSH
6031: LD_INT 5
6033: PUSH
6034: LD_INT 6
6036: PUSH
6037: LD_INT 7
6039: PUSH
6040: LD_INT 8
6042: PUSH
6043: LD_INT 9
6045: PUSH
6046: LD_INT 10
6048: PUSH
6049: LD_INT 11
6051: PUSH
6052: LD_INT 12
6054: PUSH
6055: LD_INT 13
6057: PUSH
6058: LD_INT 14
6060: PUSH
6061: LD_INT 15
6063: PUSH
6064: LD_INT 16
6066: PUSH
6067: LD_INT 17
6069: PUSH
6070: LD_INT 18
6072: PUSH
6073: LD_INT 19
6075: PUSH
6076: LD_INT 20
6078: PUSH
6079: LD_INT 21
6081: PUSH
6082: LD_INT 22
6084: PUSH
6085: LD_INT 23
6087: PUSH
6088: LD_INT 24
6090: PUSH
6091: LD_INT 25
6093: PUSH
6094: LD_INT 26
6096: PUSH
6097: LD_INT 27
6099: PUSH
6100: LD_INT 28
6102: PUSH
6103: LD_INT 29
6105: PUSH
6106: LD_INT 30
6108: PUSH
6109: LD_INT 31
6111: PUSH
6112: LD_INT 32
6114: PUSH
6115: LD_INT 33
6117: PUSH
6118: LD_INT 34
6120: PUSH
6121: LD_INT 36
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 101
6163: PUSH
6164: LD_INT 102
6166: PUSH
6167: LD_INT 103
6169: PUSH
6170: LD_INT 104
6172: PUSH
6173: LD_INT 105
6175: PUSH
6176: LD_INT 106
6178: PUSH
6179: LD_INT 107
6181: PUSH
6182: LD_INT 108
6184: PUSH
6185: LD_INT 109
6187: PUSH
6188: LD_INT 110
6190: PUSH
6191: LD_INT 111
6193: PUSH
6194: LD_INT 112
6196: PUSH
6197: LD_INT 113
6199: PUSH
6200: LD_INT 114
6202: PUSH
6203: LD_INT 116
6205: PUSH
6206: LD_INT 117
6208: PUSH
6209: LD_INT 118
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: ST_TO_ADDR
6235: GO 7010
6237: LD_INT 16
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6381
6245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6246: LD_ADDR_VAR 0 2
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 4
6256: PUSH
6257: LD_INT 5
6259: PUSH
6260: LD_INT 7
6262: PUSH
6263: LD_INT 11
6265: PUSH
6266: LD_INT 12
6268: PUSH
6269: LD_INT 15
6271: PUSH
6272: LD_INT 16
6274: PUSH
6275: LD_INT 20
6277: PUSH
6278: LD_INT 21
6280: PUSH
6281: LD_INT 22
6283: PUSH
6284: LD_INT 23
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 26
6292: PUSH
6293: LD_INT 30
6295: PUSH
6296: LD_INT 31
6298: PUSH
6299: LD_INT 32
6301: PUSH
6302: LD_INT 33
6304: PUSH
6305: LD_INT 34
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 101
6331: PUSH
6332: LD_INT 102
6334: PUSH
6335: LD_INT 103
6337: PUSH
6338: LD_INT 106
6340: PUSH
6341: LD_INT 108
6343: PUSH
6344: LD_INT 112
6346: PUSH
6347: LD_INT 113
6349: PUSH
6350: LD_INT 114
6352: PUSH
6353: LD_INT 116
6355: PUSH
6356: LD_INT 117
6358: PUSH
6359: LD_INT 118
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: ST_TO_ADDR
6379: GO 7010
6381: LD_INT 17
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6613
6389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6390: LD_ADDR_VAR 0 2
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 5
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: LD_INT 7
6415: PUSH
6416: LD_INT 8
6418: PUSH
6419: LD_INT 9
6421: PUSH
6422: LD_INT 10
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 12
6430: PUSH
6431: LD_INT 13
6433: PUSH
6434: LD_INT 14
6436: PUSH
6437: LD_INT 15
6439: PUSH
6440: LD_INT 16
6442: PUSH
6443: LD_INT 17
6445: PUSH
6446: LD_INT 18
6448: PUSH
6449: LD_INT 19
6451: PUSH
6452: LD_INT 20
6454: PUSH
6455: LD_INT 21
6457: PUSH
6458: LD_INT 22
6460: PUSH
6461: LD_INT 23
6463: PUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 26
6472: PUSH
6473: LD_INT 27
6475: PUSH
6476: LD_INT 28
6478: PUSH
6479: LD_INT 29
6481: PUSH
6482: LD_INT 30
6484: PUSH
6485: LD_INT 31
6487: PUSH
6488: LD_INT 32
6490: PUSH
6491: LD_INT 33
6493: PUSH
6494: LD_INT 34
6496: PUSH
6497: LD_INT 36
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 101
6539: PUSH
6540: LD_INT 102
6542: PUSH
6543: LD_INT 103
6545: PUSH
6546: LD_INT 104
6548: PUSH
6549: LD_INT 105
6551: PUSH
6552: LD_INT 106
6554: PUSH
6555: LD_INT 107
6557: PUSH
6558: LD_INT 108
6560: PUSH
6561: LD_INT 109
6563: PUSH
6564: LD_INT 110
6566: PUSH
6567: LD_INT 111
6569: PUSH
6570: LD_INT 112
6572: PUSH
6573: LD_INT 113
6575: PUSH
6576: LD_INT 114
6578: PUSH
6579: LD_INT 116
6581: PUSH
6582: LD_INT 117
6584: PUSH
6585: LD_INT 118
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7010
6613: LD_INT 18
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6769
6621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6622: LD_ADDR_VAR 0 2
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 4
6632: PUSH
6633: LD_INT 5
6635: PUSH
6636: LD_INT 7
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 20
6653: PUSH
6654: LD_INT 21
6656: PUSH
6657: LD_INT 22
6659: PUSH
6660: LD_INT 23
6662: PUSH
6663: LD_INT 25
6665: PUSH
6666: LD_INT 26
6668: PUSH
6669: LD_INT 30
6671: PUSH
6672: LD_INT 31
6674: PUSH
6675: LD_INT 32
6677: PUSH
6678: LD_INT 33
6680: PUSH
6681: LD_INT 34
6683: PUSH
6684: LD_INT 35
6686: PUSH
6687: LD_INT 36
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 101
6715: PUSH
6716: LD_INT 102
6718: PUSH
6719: LD_INT 103
6721: PUSH
6722: LD_INT 106
6724: PUSH
6725: LD_INT 108
6727: PUSH
6728: LD_INT 112
6730: PUSH
6731: LD_INT 113
6733: PUSH
6734: LD_INT 114
6736: PUSH
6737: LD_INT 115
6739: PUSH
6740: LD_INT 116
6742: PUSH
6743: LD_INT 117
6745: PUSH
6746: LD_INT 118
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: ST_TO_ADDR
6767: GO 7010
6769: LD_INT 19
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 7009
6777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: LD_INT 1
6785: PUSH
6786: LD_INT 2
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: LD_INT 4
6794: PUSH
6795: LD_INT 5
6797: PUSH
6798: LD_INT 6
6800: PUSH
6801: LD_INT 7
6803: PUSH
6804: LD_INT 8
6806: PUSH
6807: LD_INT 9
6809: PUSH
6810: LD_INT 10
6812: PUSH
6813: LD_INT 11
6815: PUSH
6816: LD_INT 12
6818: PUSH
6819: LD_INT 13
6821: PUSH
6822: LD_INT 14
6824: PUSH
6825: LD_INT 15
6827: PUSH
6828: LD_INT 16
6830: PUSH
6831: LD_INT 17
6833: PUSH
6834: LD_INT 18
6836: PUSH
6837: LD_INT 19
6839: PUSH
6840: LD_INT 20
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 22
6848: PUSH
6849: LD_INT 23
6851: PUSH
6852: LD_INT 24
6854: PUSH
6855: LD_INT 25
6857: PUSH
6858: LD_INT 26
6860: PUSH
6861: LD_INT 27
6863: PUSH
6864: LD_INT 28
6866: PUSH
6867: LD_INT 29
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 31
6875: PUSH
6876: LD_INT 32
6878: PUSH
6879: LD_INT 33
6881: PUSH
6882: LD_INT 34
6884: PUSH
6885: LD_INT 35
6887: PUSH
6888: LD_INT 36
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 101
6931: PUSH
6932: LD_INT 102
6934: PUSH
6935: LD_INT 103
6937: PUSH
6938: LD_INT 104
6940: PUSH
6941: LD_INT 105
6943: PUSH
6944: LD_INT 106
6946: PUSH
6947: LD_INT 107
6949: PUSH
6950: LD_INT 108
6952: PUSH
6953: LD_INT 109
6955: PUSH
6956: LD_INT 110
6958: PUSH
6959: LD_INT 111
6961: PUSH
6962: LD_INT 112
6964: PUSH
6965: LD_INT 113
6967: PUSH
6968: LD_INT 114
6970: PUSH
6971: LD_INT 115
6973: PUSH
6974: LD_INT 116
6976: PUSH
6977: LD_INT 117
6979: PUSH
6980: LD_INT 118
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: ST_TO_ADDR
7007: GO 7010
7009: POP
// end else
7010: GO 7241
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
7012: LD_ADDR_VAR 0 2
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 4
7028: PUSH
7029: LD_INT 5
7031: PUSH
7032: LD_INT 6
7034: PUSH
7035: LD_INT 7
7037: PUSH
7038: LD_INT 8
7040: PUSH
7041: LD_INT 9
7043: PUSH
7044: LD_INT 10
7046: PUSH
7047: LD_INT 11
7049: PUSH
7050: LD_INT 12
7052: PUSH
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: LD_INT 15
7061: PUSH
7062: LD_INT 16
7064: PUSH
7065: LD_INT 17
7067: PUSH
7068: LD_INT 18
7070: PUSH
7071: LD_INT 19
7073: PUSH
7074: LD_INT 20
7076: PUSH
7077: LD_INT 21
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 23
7085: PUSH
7086: LD_INT 24
7088: PUSH
7089: LD_INT 25
7091: PUSH
7092: LD_INT 26
7094: PUSH
7095: LD_INT 27
7097: PUSH
7098: LD_INT 28
7100: PUSH
7101: LD_INT 29
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 31
7109: PUSH
7110: LD_INT 32
7112: PUSH
7113: LD_INT 33
7115: PUSH
7116: LD_INT 34
7118: PUSH
7119: LD_INT 35
7121: PUSH
7122: LD_INT 36
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 101
7165: PUSH
7166: LD_INT 102
7168: PUSH
7169: LD_INT 103
7171: PUSH
7172: LD_INT 104
7174: PUSH
7175: LD_INT 105
7177: PUSH
7178: LD_INT 106
7180: PUSH
7181: LD_INT 107
7183: PUSH
7184: LD_INT 108
7186: PUSH
7187: LD_INT 109
7189: PUSH
7190: LD_INT 110
7192: PUSH
7193: LD_INT 111
7195: PUSH
7196: LD_INT 112
7198: PUSH
7199: LD_INT 113
7201: PUSH
7202: LD_INT 114
7204: PUSH
7205: LD_INT 115
7207: PUSH
7208: LD_INT 116
7210: PUSH
7211: LD_INT 117
7213: PUSH
7214: LD_INT 118
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: ST_TO_ADDR
// if result then
7241: LD_VAR 0 2
7245: IFFALSE 8031
// begin normal :=  ;
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hardcore :=  ;
7255: LD_ADDR_VAR 0 6
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// active :=  ;
7263: LD_ADDR_VAR 0 7
7267: PUSH
7268: LD_STRING 
7270: ST_TO_ADDR
// for i = 1 to normalCounter do
7271: LD_ADDR_VAR 0 8
7275: PUSH
7276: DOUBLE
7277: LD_INT 1
7279: DEC
7280: ST_TO_ADDR
7281: LD_EXP 9
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7388
// begin tmp := 0 ;
7289: LD_ADDR_VAR 0 3
7293: PUSH
7294: LD_STRING 0
7296: ST_TO_ADDR
// if result [ 1 ] then
7297: LD_VAR 0 2
7301: PUSH
7302: LD_INT 1
7304: ARRAY
7305: IFFALSE 7370
// if result [ 1 ] [ 1 ] = i then
7307: LD_VAR 0 2
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: PUSH
7316: LD_INT 1
7318: ARRAY
7319: PUSH
7320: LD_VAR 0 8
7324: EQUAL
7325: IFFALSE 7370
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7327: LD_ADDR_VAR 0 2
7331: PUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: LD_INT 1
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_INT 1
7347: ARRAY
7348: PPUSH
7349: LD_INT 1
7351: PPUSH
7352: CALL_OW 3
7356: PPUSH
7357: CALL_OW 1
7361: ST_TO_ADDR
// tmp := 1 ;
7362: LD_ADDR_VAR 0 3
7366: PUSH
7367: LD_STRING 1
7369: ST_TO_ADDR
// end ; normal := normal & tmp ;
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: LD_VAR 0 5
7379: PUSH
7380: LD_VAR 0 3
7384: STR
7385: ST_TO_ADDR
// end ;
7386: GO 7286
7388: POP
7389: POP
// for i = 1 to hardcoreCounter do
7390: LD_ADDR_VAR 0 8
7394: PUSH
7395: DOUBLE
7396: LD_INT 1
7398: DEC
7399: ST_TO_ADDR
7400: LD_EXP 10
7404: PUSH
7405: FOR_TO
7406: IFFALSE 7511
// begin tmp := 0 ;
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_STRING 0
7415: ST_TO_ADDR
// if result [ 2 ] then
7416: LD_VAR 0 2
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: IFFALSE 7493
// if result [ 2 ] [ 1 ] = 100 + i then
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 2
7433: ARRAY
7434: PUSH
7435: LD_INT 1
7437: ARRAY
7438: PUSH
7439: LD_INT 100
7441: PUSH
7442: LD_VAR 0 8
7446: PLUS
7447: EQUAL
7448: IFFALSE 7493
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_VAR 0 2
7459: PPUSH
7460: LD_INT 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 2
7470: ARRAY
7471: PPUSH
7472: LD_INT 1
7474: PPUSH
7475: CALL_OW 3
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
// tmp := 1 ;
7485: LD_ADDR_VAR 0 3
7489: PUSH
7490: LD_STRING 1
7492: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_VAR 0 3
7507: STR
7508: ST_TO_ADDR
// end ;
7509: GO 7405
7511: POP
7512: POP
// if isGameLoad then
7513: LD_VAR 0 1
7517: IFFALSE 7992
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7519: LD_ADDR_VAR 0 4
7523: PUSH
7524: LD_EXP 13
7528: PUSH
7529: LD_EXP 12
7533: PUSH
7534: LD_EXP 14
7538: PUSH
7539: LD_EXP 11
7543: PUSH
7544: LD_EXP 15
7548: PUSH
7549: LD_EXP 16
7553: PUSH
7554: LD_EXP 17
7558: PUSH
7559: LD_EXP 18
7563: PUSH
7564: LD_EXP 19
7568: PUSH
7569: LD_EXP 20
7573: PUSH
7574: LD_EXP 21
7578: PUSH
7579: LD_EXP 22
7583: PUSH
7584: LD_EXP 23
7588: PUSH
7589: LD_EXP 24
7593: PUSH
7594: LD_EXP 32
7598: PUSH
7599: LD_EXP 33
7603: PUSH
7604: LD_EXP 34
7608: PUSH
7609: LD_EXP 35
7613: PUSH
7614: LD_EXP 37
7618: PUSH
7619: LD_EXP 38
7623: PUSH
7624: LD_EXP 39
7628: PUSH
7629: LD_EXP 42
7633: PUSH
7634: LD_EXP 44
7638: PUSH
7639: LD_EXP 45
7643: PUSH
7644: LD_EXP 46
7648: PUSH
7649: LD_EXP 48
7653: PUSH
7654: LD_EXP 49
7658: PUSH
7659: LD_EXP 52
7663: PUSH
7664: LD_EXP 53
7668: PUSH
7669: LD_EXP 54
7673: PUSH
7674: LD_EXP 55
7678: PUSH
7679: LD_EXP 56
7683: PUSH
7684: LD_EXP 57
7688: PUSH
7689: LD_EXP 58
7693: PUSH
7694: LD_EXP 59
7698: PUSH
7699: LD_EXP 60
7703: PUSH
7704: LD_EXP 25
7708: PUSH
7709: LD_EXP 26
7713: PUSH
7714: LD_EXP 29
7718: PUSH
7719: LD_EXP 30
7723: PUSH
7724: LD_EXP 31
7728: PUSH
7729: LD_EXP 27
7733: PUSH
7734: LD_EXP 28
7738: PUSH
7739: LD_EXP 36
7743: PUSH
7744: LD_EXP 40
7748: PUSH
7749: LD_EXP 41
7753: PUSH
7754: LD_EXP 43
7758: PUSH
7759: LD_EXP 47
7763: PUSH
7764: LD_EXP 50
7768: PUSH
7769: LD_EXP 51
7773: PUSH
7774: LD_EXP 61
7778: PUSH
7779: LD_EXP 62
7783: PUSH
7784: LD_EXP 63
7788: PUSH
7789: LD_EXP 64
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// tmp :=  ;
7850: LD_ADDR_VAR 0 3
7854: PUSH
7855: LD_STRING 
7857: ST_TO_ADDR
// for i = 1 to normalCounter do
7858: LD_ADDR_VAR 0 8
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_EXP 9
7872: PUSH
7873: FOR_TO
7874: IFFALSE 7910
// begin if flags [ i ] then
7876: LD_VAR 0 4
7880: PUSH
7881: LD_VAR 0 8
7885: ARRAY
7886: IFFALSE 7908
// tmp := tmp & i & ; ;
7888: LD_ADDR_VAR 0 3
7892: PUSH
7893: LD_VAR 0 3
7897: PUSH
7898: LD_VAR 0 8
7902: STR
7903: PUSH
7904: LD_STRING ;
7906: STR
7907: ST_TO_ADDR
// end ;
7908: GO 7873
7910: POP
7911: POP
// for i = 1 to hardcoreCounter do
7912: LD_ADDR_VAR 0 8
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_EXP 10
7926: PUSH
7927: FOR_TO
7928: IFFALSE 7974
// begin if flags [ normalCounter + i ] then
7930: LD_VAR 0 4
7934: PUSH
7935: LD_EXP 9
7939: PUSH
7940: LD_VAR 0 8
7944: PLUS
7945: ARRAY
7946: IFFALSE 7972
// tmp := tmp & ( 100 + i ) & ; ;
7948: LD_ADDR_VAR 0 3
7952: PUSH
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 100
7960: PUSH
7961: LD_VAR 0 8
7965: PLUS
7966: STR
7967: PUSH
7968: LD_STRING ;
7970: STR
7971: ST_TO_ADDR
// end ;
7972: GO 7927
7974: POP
7975: POP
// if tmp then
7976: LD_VAR 0 3
7980: IFFALSE 7992
// active := tmp ;
7982: LD_ADDR_VAR 0 7
7986: PUSH
7987: LD_VAR 0 3
7991: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7992: LD_STRING getStreamItemsFromMission("
7994: PUSH
7995: LD_VAR 0 5
7999: STR
8000: PUSH
8001: LD_STRING ","
8003: STR
8004: PUSH
8005: LD_VAR 0 6
8009: STR
8010: PUSH
8011: LD_STRING ","
8013: STR
8014: PUSH
8015: LD_VAR 0 7
8019: STR
8020: PUSH
8021: LD_STRING ")
8023: STR
8024: PPUSH
8025: CALL_OW 559
// end else
8029: GO 8038
// ToLua ( getStreamItemsFromMission("","","") ) ;
8031: LD_STRING getStreamItemsFromMission("","","")
8033: PPUSH
8034: CALL_OW 559
// end ;
8038: LD_VAR 0 2
8042: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8043: LD_EXP 8
8047: IFFALSE 8055
8049: PUSH
8050: LD_EXP 13
8054: AND
8055: IFFALSE 8179
8057: GO 8059
8059: DISABLE
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// begin enable ;
8064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 22
8072: PUSH
8073: LD_OWVAR 2
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 34
8087: PUSH
8088: LD_INT 7
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 34
8097: PUSH
8098: LD_INT 45
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 34
8107: PUSH
8108: LD_INT 28
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 34
8117: PUSH
8118: LD_INT 47
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PPUSH
8136: CALL_OW 69
8140: ST_TO_ADDR
// if not tmp then
8141: LD_VAR 0 2
8145: NOT
8146: IFFALSE 8150
// exit ;
8148: GO 8179
// for i in tmp do
8150: LD_ADDR_VAR 0 1
8154: PUSH
8155: LD_VAR 0 2
8159: PUSH
8160: FOR_IN
8161: IFFALSE 8177
// begin SetLives ( i , 0 ) ;
8163: LD_VAR 0 1
8167: PPUSH
8168: LD_INT 0
8170: PPUSH
8171: CALL_OW 234
// end ;
8175: GO 8160
8177: POP
8178: POP
// end ;
8179: PPOPN 2
8181: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8182: LD_EXP 8
8186: IFFALSE 8194
8188: PUSH
8189: LD_EXP 14
8193: AND
8194: IFFALSE 8278
8196: GO 8198
8198: DISABLE
8199: LD_INT 0
8201: PPUSH
8202: PPUSH
// begin enable ;
8203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8204: LD_ADDR_VAR 0 2
8208: PUSH
8209: LD_INT 22
8211: PUSH
8212: LD_OWVAR 2
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 32
8223: PUSH
8224: LD_INT 3
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PPUSH
8235: CALL_OW 69
8239: ST_TO_ADDR
// if not tmp then
8240: LD_VAR 0 2
8244: NOT
8245: IFFALSE 8249
// exit ;
8247: GO 8278
// for i in tmp do
8249: LD_ADDR_VAR 0 1
8253: PUSH
8254: LD_VAR 0 2
8258: PUSH
8259: FOR_IN
8260: IFFALSE 8276
// begin SetLives ( i , 0 ) ;
8262: LD_VAR 0 1
8266: PPUSH
8267: LD_INT 0
8269: PPUSH
8270: CALL_OW 234
// end ;
8274: GO 8259
8276: POP
8277: POP
// end ;
8278: PPOPN 2
8280: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8281: LD_EXP 8
8285: IFFALSE 8293
8287: PUSH
8288: LD_EXP 11
8292: AND
8293: IFFALSE 8386
8295: GO 8297
8297: DISABLE
8298: LD_INT 0
8300: PPUSH
// begin enable ;
8301: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8302: LD_ADDR_VAR 0 1
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_OWVAR 2
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 25
8324: PUSH
8325: LD_INT 5
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 25
8334: PUSH
8335: LD_INT 9
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 25
8344: PUSH
8345: LD_INT 8
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8384
// begin SetClass ( i , 1 ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL_OW 336
// end ;
8382: GO 8367
8384: POP
8385: POP
// end ;
8386: PPOPN 1
8388: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8389: LD_EXP 8
8393: IFFALSE 8401
8395: PUSH
8396: LD_EXP 12
8400: AND
8401: IFFALSE 8413
8403: PUSH
8404: LD_OWVAR 65
8408: PUSH
8409: LD_INT 7
8411: LESS
8412: AND
8413: IFFALSE 8427
8415: GO 8417
8417: DISABLE
// begin enable ;
8418: ENABLE
// game_speed := 7 ;
8419: LD_ADDR_OWVAR 65
8423: PUSH
8424: LD_INT 7
8426: ST_TO_ADDR
// end ;
8427: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8428: LD_EXP 8
8432: IFFALSE 8440
8434: PUSH
8435: LD_EXP 15
8439: AND
8440: IFFALSE 8642
8442: GO 8444
8444: DISABLE
8445: LD_INT 0
8447: PPUSH
8448: PPUSH
8449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: LD_INT 81
8457: PUSH
8458: LD_OWVAR 2
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 21
8469: PUSH
8470: LD_INT 1
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PPUSH
8481: CALL_OW 69
8485: ST_TO_ADDR
// if not tmp then
8486: LD_VAR 0 3
8490: NOT
8491: IFFALSE 8495
// exit ;
8493: GO 8642
// if tmp > 5 then
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 5
8502: GREATER
8503: IFFALSE 8515
// k := 5 else
8505: LD_ADDR_VAR 0 2
8509: PUSH
8510: LD_INT 5
8512: ST_TO_ADDR
8513: GO 8525
// k := tmp ;
8515: LD_ADDR_VAR 0 2
8519: PUSH
8520: LD_VAR 0 3
8524: ST_TO_ADDR
// for i := 1 to k do
8525: LD_ADDR_VAR 0 1
8529: PUSH
8530: DOUBLE
8531: LD_INT 1
8533: DEC
8534: ST_TO_ADDR
8535: LD_VAR 0 2
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8640
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8543: LD_VAR 0 3
8547: PUSH
8548: LD_VAR 0 1
8552: ARRAY
8553: PPUSH
8554: LD_VAR 0 1
8558: PUSH
8559: LD_INT 4
8561: MOD
8562: PUSH
8563: LD_INT 1
8565: PLUS
8566: PPUSH
8567: CALL_OW 259
8571: PUSH
8572: LD_INT 10
8574: LESS
8575: IFFALSE 8638
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8577: LD_VAR 0 3
8581: PUSH
8582: LD_VAR 0 1
8586: ARRAY
8587: PPUSH
8588: LD_VAR 0 1
8592: PUSH
8593: LD_INT 4
8595: MOD
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: PPUSH
8601: LD_VAR 0 3
8605: PUSH
8606: LD_VAR 0 1
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 1
8616: PUSH
8617: LD_INT 4
8619: MOD
8620: PUSH
8621: LD_INT 1
8623: PLUS
8624: PPUSH
8625: CALL_OW 259
8629: PUSH
8630: LD_INT 1
8632: PLUS
8633: PPUSH
8634: CALL_OW 237
8638: GO 8540
8640: POP
8641: POP
// end ;
8642: PPOPN 3
8644: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8645: LD_EXP 8
8649: IFFALSE 8657
8651: PUSH
8652: LD_EXP 16
8656: AND
8657: IFFALSE 8677
8659: GO 8661
8661: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8662: LD_INT 4
8664: PPUSH
8665: LD_OWVAR 2
8669: PPUSH
8670: LD_INT 0
8672: PPUSH
8673: CALL_OW 324
8677: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8678: LD_EXP 8
8682: IFFALSE 8690
8684: PUSH
8685: LD_EXP 45
8689: AND
8690: IFFALSE 8710
8692: GO 8694
8694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8695: LD_INT 19
8697: PPUSH
8698: LD_OWVAR 2
8702: PPUSH
8703: LD_INT 0
8705: PPUSH
8706: CALL_OW 324
8710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8711: LD_EXP 8
8715: IFFALSE 8723
8717: PUSH
8718: LD_EXP 17
8722: AND
8723: IFFALSE 8825
8725: GO 8727
8727: DISABLE
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
// begin enable ;
8732: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8733: LD_ADDR_VAR 0 2
8737: PUSH
8738: LD_INT 22
8740: PUSH
8741: LD_OWVAR 2
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: LD_INT 34
8755: PUSH
8756: LD_INT 11
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 34
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PPUSH
8782: CALL_OW 69
8786: ST_TO_ADDR
// if not tmp then
8787: LD_VAR 0 2
8791: NOT
8792: IFFALSE 8796
// exit ;
8794: GO 8825
// for i in tmp do
8796: LD_ADDR_VAR 0 1
8800: PUSH
8801: LD_VAR 0 2
8805: PUSH
8806: FOR_IN
8807: IFFALSE 8823
// begin SetLives ( i , 0 ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: LD_INT 0
8816: PPUSH
8817: CALL_OW 234
// end ;
8821: GO 8806
8823: POP
8824: POP
// end ;
8825: PPOPN 2
8827: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8828: LD_EXP 8
8832: IFFALSE 8840
8834: PUSH
8835: LD_EXP 18
8839: AND
8840: IFFALSE 8860
8842: GO 8844
8844: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8845: LD_INT 32
8847: PPUSH
8848: LD_OWVAR 2
8852: PPUSH
8853: LD_INT 0
8855: PPUSH
8856: CALL_OW 324
8860: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8861: LD_EXP 8
8865: IFFALSE 8873
8867: PUSH
8868: LD_EXP 19
8872: AND
8873: IFFALSE 9056
8875: GO 8877
8877: DISABLE
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
8882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_OWVAR 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 33
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: ST_TO_ADDR
// if not tmp then
8919: LD_VAR 0 2
8923: NOT
8924: IFFALSE 8928
// exit ;
8926: GO 9056
// side := 0 ;
8928: LD_ADDR_VAR 0 3
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// for i := 1 to 8 do
8936: LD_ADDR_VAR 0 1
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_INT 8
8948: PUSH
8949: FOR_TO
8950: IFFALSE 9000
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8952: LD_OWVAR 2
8956: PUSH
8957: LD_VAR 0 1
8961: NONEQUAL
8962: IFFALSE 8984
8964: PUSH
8965: LD_OWVAR 2
8969: PPUSH
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 81
8979: PUSH
8980: LD_INT 2
8982: EQUAL
8983: AND
8984: IFFALSE 8998
// begin side := i ;
8986: LD_ADDR_VAR 0 3
8990: PUSH
8991: LD_VAR 0 1
8995: ST_TO_ADDR
// break ;
8996: GO 9000
// end ;
8998: GO 8949
9000: POP
9001: POP
// if not side then
9002: LD_VAR 0 3
9006: NOT
9007: IFFALSE 9011
// exit ;
9009: GO 9056
// for i := 1 to tmp do
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_VAR 0 2
9025: PUSH
9026: FOR_TO
9027: IFFALSE 9054
// if Prob ( 60 ) then
9029: LD_INT 60
9031: PPUSH
9032: CALL_OW 13
9036: IFFALSE 9052
// SetSide ( i , side ) ;
9038: LD_VAR 0 1
9042: PPUSH
9043: LD_VAR 0 3
9047: PPUSH
9048: CALL_OW 235
9052: GO 9026
9054: POP
9055: POP
// end ;
9056: PPOPN 3
9058: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9059: LD_EXP 8
9063: IFFALSE 9071
9065: PUSH
9066: LD_EXP 21
9070: AND
9071: IFFALSE 9190
9073: GO 9075
9075: DISABLE
9076: LD_INT 0
9078: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9079: LD_ADDR_VAR 0 1
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_OWVAR 2
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 21
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: LD_INT 23
9111: PUSH
9112: LD_INT 0
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: PUSH
9133: FOR_IN
9134: IFFALSE 9188
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 257
9145: PUSH
9146: LD_INT 1
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: IN
9164: IFFALSE 9186
// SetClass ( un , rand ( 1 , 4 ) ) ;
9166: LD_VAR 0 1
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: LD_INT 4
9176: PPUSH
9177: CALL_OW 12
9181: PPUSH
9182: CALL_OW 336
9186: GO 9133
9188: POP
9189: POP
// end ;
9190: PPOPN 1
9192: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9193: LD_EXP 8
9197: IFFALSE 9205
9199: PUSH
9200: LD_EXP 20
9204: AND
9205: IFFALSE 9284
9207: GO 9209
9209: DISABLE
9210: LD_INT 0
9212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9213: LD_ADDR_VAR 0 1
9217: PUSH
9218: LD_INT 22
9220: PUSH
9221: LD_OWVAR 2
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 21
9232: PUSH
9233: LD_INT 3
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PPUSH
9244: CALL_OW 69
9248: ST_TO_ADDR
// if not tmp then
9249: LD_VAR 0 1
9253: NOT
9254: IFFALSE 9258
// exit ;
9256: GO 9284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9258: LD_VAR 0 1
9262: PUSH
9263: LD_INT 1
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 12
9275: ARRAY
9276: PPUSH
9277: LD_INT 100
9279: PPUSH
9280: CALL_OW 234
// end ;
9284: PPOPN 1
9286: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9287: LD_EXP 8
9291: IFFALSE 9299
9293: PUSH
9294: LD_EXP 22
9298: AND
9299: IFFALSE 9397
9301: GO 9303
9303: DISABLE
9304: LD_INT 0
9306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9307: LD_ADDR_VAR 0 1
9311: PUSH
9312: LD_INT 22
9314: PUSH
9315: LD_OWVAR 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: ST_TO_ADDR
// if not tmp then
9343: LD_VAR 0 1
9347: NOT
9348: IFFALSE 9352
// exit ;
9350: GO 9397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9352: LD_VAR 0 1
9356: PUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 12
9369: ARRAY
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 12
9381: PPUSH
9382: LD_INT 3000
9384: PPUSH
9385: LD_INT 9000
9387: PPUSH
9388: CALL_OW 12
9392: PPUSH
9393: CALL_OW 492
// end ;
9397: PPOPN 1
9399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9400: LD_EXP 8
9404: IFFALSE 9412
9406: PUSH
9407: LD_EXP 23
9411: AND
9412: IFFALSE 9432
9414: GO 9416
9416: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9417: LD_INT 1
9419: PPUSH
9420: LD_OWVAR 2
9424: PPUSH
9425: LD_INT 0
9427: PPUSH
9428: CALL_OW 324
9432: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9433: LD_EXP 8
9437: IFFALSE 9445
9439: PUSH
9440: LD_EXP 24
9444: AND
9445: IFFALSE 9528
9447: GO 9449
9449: DISABLE
9450: LD_INT 0
9452: PPUSH
9453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9454: LD_ADDR_VAR 0 2
9458: PUSH
9459: LD_INT 22
9461: PUSH
9462: LD_OWVAR 2
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 69
9489: ST_TO_ADDR
// if not tmp then
9490: LD_VAR 0 2
9494: NOT
9495: IFFALSE 9499
// exit ;
9497: GO 9528
// for i in tmp do
9499: LD_ADDR_VAR 0 1
9503: PUSH
9504: LD_VAR 0 2
9508: PUSH
9509: FOR_IN
9510: IFFALSE 9526
// SetBLevel ( i , 10 ) ;
9512: LD_VAR 0 1
9516: PPUSH
9517: LD_INT 10
9519: PPUSH
9520: CALL_OW 241
9524: GO 9509
9526: POP
9527: POP
// end ;
9528: PPOPN 2
9530: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9531: LD_EXP 8
9535: IFFALSE 9543
9537: PUSH
9538: LD_EXP 25
9542: AND
9543: IFFALSE 9654
9545: GO 9547
9547: DISABLE
9548: LD_INT 0
9550: PPUSH
9551: PPUSH
9552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9553: LD_ADDR_VAR 0 3
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_OWVAR 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 25
9572: PUSH
9573: LD_INT 1
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: ST_TO_ADDR
// if not tmp then
9589: LD_VAR 0 3
9593: NOT
9594: IFFALSE 9598
// exit ;
9596: GO 9654
// un := tmp [ rand ( 1 , tmp ) ] ;
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: LD_VAR 0 3
9607: PUSH
9608: LD_INT 1
9610: PPUSH
9611: LD_VAR 0 3
9615: PPUSH
9616: CALL_OW 12
9620: ARRAY
9621: ST_TO_ADDR
// if Crawls ( un ) then
9622: LD_VAR 0 2
9626: PPUSH
9627: CALL_OW 318
9631: IFFALSE 9642
// ComWalk ( un ) ;
9633: LD_VAR 0 2
9637: PPUSH
9638: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9642: LD_VAR 0 2
9646: PPUSH
9647: LD_INT 5
9649: PPUSH
9650: CALL_OW 336
// end ;
9654: PPOPN 3
9656: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9657: LD_EXP 8
9661: IFFALSE 9669
9663: PUSH
9664: LD_EXP 26
9668: AND
9669: IFFALSE 9681
9671: PUSH
9672: LD_OWVAR 67
9676: PUSH
9677: LD_INT 4
9679: LESS
9680: AND
9681: IFFALSE 9700
9683: GO 9685
9685: DISABLE
// begin Difficulty := Difficulty + 1 ;
9686: LD_ADDR_OWVAR 67
9690: PUSH
9691: LD_OWVAR 67
9695: PUSH
9696: LD_INT 1
9698: PLUS
9699: ST_TO_ADDR
// end ;
9700: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9701: LD_EXP 8
9705: IFFALSE 9713
9707: PUSH
9708: LD_EXP 27
9712: AND
9713: IFFALSE 9816
9715: GO 9717
9717: DISABLE
9718: LD_INT 0
9720: PPUSH
// begin for i := 1 to 5 do
9721: LD_ADDR_VAR 0 1
9725: PUSH
9726: DOUBLE
9727: LD_INT 1
9729: DEC
9730: ST_TO_ADDR
9731: LD_INT 5
9733: PUSH
9734: FOR_TO
9735: IFFALSE 9814
// begin uc_nation := nation_nature ;
9737: LD_ADDR_OWVAR 21
9741: PUSH
9742: LD_INT 0
9744: ST_TO_ADDR
// uc_side := 0 ;
9745: LD_ADDR_OWVAR 20
9749: PUSH
9750: LD_INT 0
9752: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9753: LD_ADDR_OWVAR 29
9757: PUSH
9758: LD_INT 12
9760: PUSH
9761: LD_INT 12
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// hc_agressivity := 20 ;
9768: LD_ADDR_OWVAR 35
9772: PUSH
9773: LD_INT 20
9775: ST_TO_ADDR
// hc_class := class_tiger ;
9776: LD_ADDR_OWVAR 28
9780: PUSH
9781: LD_INT 14
9783: ST_TO_ADDR
// hc_gallery :=  ;
9784: LD_ADDR_OWVAR 33
9788: PUSH
9789: LD_STRING 
9791: ST_TO_ADDR
// hc_name :=  ;
9792: LD_ADDR_OWVAR 26
9796: PUSH
9797: LD_STRING 
9799: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9800: CALL_OW 44
9804: PPUSH
9805: LD_INT 0
9807: PPUSH
9808: CALL_OW 51
// end ;
9812: GO 9734
9814: POP
9815: POP
// end ;
9816: PPOPN 1
9818: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9819: LD_EXP 8
9823: IFFALSE 9831
9825: PUSH
9826: LD_EXP 28
9830: AND
9831: IFFALSE 9840
9833: GO 9835
9835: DISABLE
// StreamSibBomb ;
9836: CALL 9841 0 0
9840: END
// export function StreamSibBomb ; var i , x , y ; begin
9841: LD_INT 0
9843: PPUSH
9844: PPUSH
9845: PPUSH
9846: PPUSH
// result := false ;
9847: LD_ADDR_VAR 0 1
9851: PUSH
9852: LD_INT 0
9854: ST_TO_ADDR
// for i := 1 to 16 do
9855: LD_ADDR_VAR 0 2
9859: PUSH
9860: DOUBLE
9861: LD_INT 1
9863: DEC
9864: ST_TO_ADDR
9865: LD_INT 16
9867: PUSH
9868: FOR_TO
9869: IFFALSE 10068
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9871: LD_ADDR_VAR 0 3
9875: PUSH
9876: LD_INT 10
9878: PUSH
9879: LD_INT 20
9881: PUSH
9882: LD_INT 30
9884: PUSH
9885: LD_INT 40
9887: PUSH
9888: LD_INT 50
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: LD_INT 70
9896: PUSH
9897: LD_INT 80
9899: PUSH
9900: LD_INT 90
9902: PUSH
9903: LD_INT 100
9905: PUSH
9906: LD_INT 110
9908: PUSH
9909: LD_INT 120
9911: PUSH
9912: LD_INT 130
9914: PUSH
9915: LD_INT 140
9917: PUSH
9918: LD_INT 150
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 1
9940: PPUSH
9941: LD_INT 15
9943: PPUSH
9944: CALL_OW 12
9948: ARRAY
9949: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_INT 10
9957: PUSH
9958: LD_INT 20
9960: PUSH
9961: LD_INT 30
9963: PUSH
9964: LD_INT 40
9966: PUSH
9967: LD_INT 50
9969: PUSH
9970: LD_INT 60
9972: PUSH
9973: LD_INT 70
9975: PUSH
9976: LD_INT 80
9978: PUSH
9979: LD_INT 90
9981: PUSH
9982: LD_INT 100
9984: PUSH
9985: LD_INT 110
9987: PUSH
9988: LD_INT 120
9990: PUSH
9991: LD_INT 130
9993: PUSH
9994: LD_INT 140
9996: PUSH
9997: LD_INT 150
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 1
10019: PPUSH
10020: LD_INT 15
10022: PPUSH
10023: CALL_OW 12
10027: ARRAY
10028: ST_TO_ADDR
// if ValidHex ( x , y ) then
10029: LD_VAR 0 3
10033: PPUSH
10034: LD_VAR 0 4
10038: PPUSH
10039: CALL_OW 488
10043: IFFALSE 10066
// begin result := [ x , y ] ;
10045: LD_ADDR_VAR 0 1
10049: PUSH
10050: LD_VAR 0 3
10054: PUSH
10055: LD_VAR 0 4
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: ST_TO_ADDR
// break ;
10064: GO 10068
// end ; end ;
10066: GO 9868
10068: POP
10069: POP
// if result then
10070: LD_VAR 0 1
10074: IFFALSE 10134
// begin ToLua ( playSibBomb() ) ;
10076: LD_STRING playSibBomb()
10078: PPUSH
10079: CALL_OW 559
// wait ( 0 0$14 ) ;
10083: LD_INT 490
10085: PPUSH
10086: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10090: LD_VAR 0 1
10094: PUSH
10095: LD_INT 1
10097: ARRAY
10098: PPUSH
10099: LD_VAR 0 1
10103: PUSH
10104: LD_INT 2
10106: ARRAY
10107: PPUSH
10108: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10112: LD_VAR 0 1
10116: PUSH
10117: LD_INT 1
10119: ARRAY
10120: PPUSH
10121: LD_VAR 0 1
10125: PUSH
10126: LD_INT 2
10128: ARRAY
10129: PPUSH
10130: CALL_OW 429
// end ; end ;
10134: LD_VAR 0 1
10138: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10139: LD_EXP 8
10143: IFFALSE 10151
10145: PUSH
10146: LD_EXP 30
10150: AND
10151: IFFALSE 10163
10153: GO 10155
10155: DISABLE
// YouLost (  ) ;
10156: LD_STRING 
10158: PPUSH
10159: CALL_OW 104
10163: END
// every 0 0$1 trigger StreamModeActive and sFog do
10164: LD_EXP 8
10168: IFFALSE 10176
10170: PUSH
10171: LD_EXP 29
10175: AND
10176: IFFALSE 10190
10178: GO 10180
10180: DISABLE
// FogOff ( your_side ) ;
10181: LD_OWVAR 2
10185: PPUSH
10186: CALL_OW 344
10190: END
// every 0 0$1 trigger StreamModeActive and sSun do
10191: LD_EXP 8
10195: IFFALSE 10203
10197: PUSH
10198: LD_EXP 31
10202: AND
10203: IFFALSE 10231
10205: GO 10207
10207: DISABLE
// begin solar_recharge_percent := 0 ;
10208: LD_ADDR_OWVAR 79
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10216: LD_INT 10500
10218: PPUSH
10219: CALL_OW 67
// solar_recharge_percent := 100 ;
10223: LD_ADDR_OWVAR 79
10227: PUSH
10228: LD_INT 100
10230: ST_TO_ADDR
// end ;
10231: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10232: LD_EXP 8
10236: IFFALSE 10244
10238: PUSH
10239: LD_EXP 32
10243: AND
10244: IFFALSE 10483
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
10252: PPUSH
10253: PPUSH
// begin tmp := [ ] ;
10254: LD_ADDR_VAR 0 3
10258: PUSH
10259: EMPTY
10260: ST_TO_ADDR
// for i := 1 to 6 do
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 6
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10380
// begin uc_nation := nation_nature ;
10277: LD_ADDR_OWVAR 21
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// uc_side := 0 ;
10285: LD_ADDR_OWVAR 20
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10293: LD_ADDR_OWVAR 29
10297: PUSH
10298: LD_INT 12
10300: PUSH
10301: LD_INT 12
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: ST_TO_ADDR
// hc_agressivity := 20 ;
10308: LD_ADDR_OWVAR 35
10312: PUSH
10313: LD_INT 20
10315: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10316: LD_ADDR_OWVAR 28
10320: PUSH
10321: LD_INT 17
10323: ST_TO_ADDR
// hc_gallery :=  ;
10324: LD_ADDR_OWVAR 33
10328: PUSH
10329: LD_STRING 
10331: ST_TO_ADDR
// hc_name :=  ;
10332: LD_ADDR_OWVAR 26
10336: PUSH
10337: LD_STRING 
10339: ST_TO_ADDR
// un := CreateHuman ;
10340: LD_ADDR_VAR 0 2
10344: PUSH
10345: CALL_OW 44
10349: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10350: LD_VAR 0 2
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 51
// tmp := tmp ^ un ;
10362: LD_ADDR_VAR 0 3
10366: PUSH
10367: LD_VAR 0 3
10371: PUSH
10372: LD_VAR 0 2
10376: ADD
10377: ST_TO_ADDR
// end ;
10378: GO 10274
10380: POP
10381: POP
// repeat wait ( 0 0$1 ) ;
10382: LD_INT 35
10384: PPUSH
10385: CALL_OW 67
// for un in tmp do
10389: LD_ADDR_VAR 0 2
10393: PUSH
10394: LD_VAR 0 3
10398: PUSH
10399: FOR_IN
10400: IFFALSE 10474
// begin if IsDead ( un ) then
10402: LD_VAR 0 2
10406: PPUSH
10407: CALL_OW 301
10411: IFFALSE 10431
// begin tmp := tmp diff un ;
10413: LD_ADDR_VAR 0 3
10417: PUSH
10418: LD_VAR 0 3
10422: PUSH
10423: LD_VAR 0 2
10427: DIFF
10428: ST_TO_ADDR
// continue ;
10429: GO 10399
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: LD_INT 3
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 0
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 69
10457: PPUSH
10458: LD_VAR 0 2
10462: PPUSH
10463: CALL_OW 74
10467: PPUSH
10468: CALL_OW 115
// end ;
10472: GO 10399
10474: POP
10475: POP
// until not tmp ;
10476: LD_VAR 0 3
10480: NOT
10481: IFFALSE 10382
// end ;
10483: PPOPN 3
10485: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10486: LD_EXP 8
10490: IFFALSE 10498
10492: PUSH
10493: LD_EXP 33
10497: AND
10498: IFFALSE 10552
10500: GO 10502
10502: DISABLE
// begin ToLua ( displayTroll(); ) ;
10503: LD_STRING displayTroll();
10505: PPUSH
10506: CALL_OW 559
// wait ( 3 3$00 ) ;
10510: LD_INT 6300
10512: PPUSH
10513: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10517: LD_STRING hideTroll();
10519: PPUSH
10520: CALL_OW 559
// wait ( 1 1$00 ) ;
10524: LD_INT 2100
10526: PPUSH
10527: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10531: LD_STRING displayTroll();
10533: PPUSH
10534: CALL_OW 559
// wait ( 1 1$00 ) ;
10538: LD_INT 2100
10540: PPUSH
10541: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10545: LD_STRING hideTroll();
10547: PPUSH
10548: CALL_OW 559
// end ;
10552: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10553: LD_EXP 8
10557: IFFALSE 10565
10559: PUSH
10560: LD_EXP 34
10564: AND
10565: IFFALSE 10628
10567: GO 10569
10569: DISABLE
10570: LD_INT 0
10572: PPUSH
// begin p := 0 ;
10573: LD_ADDR_VAR 0 1
10577: PUSH
10578: LD_INT 0
10580: ST_TO_ADDR
// repeat game_speed := 1 ;
10581: LD_ADDR_OWVAR 65
10585: PUSH
10586: LD_INT 1
10588: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10589: LD_INT 35
10591: PPUSH
10592: CALL_OW 67
// p := p + 1 ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_VAR 0 1
10605: PUSH
10606: LD_INT 1
10608: PLUS
10609: ST_TO_ADDR
// until p >= 60 ;
10610: LD_VAR 0 1
10614: PUSH
10615: LD_INT 60
10617: GREATEREQUAL
10618: IFFALSE 10581
// game_speed := 4 ;
10620: LD_ADDR_OWVAR 65
10624: PUSH
10625: LD_INT 4
10627: ST_TO_ADDR
// end ;
10628: PPOPN 1
10630: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10631: LD_EXP 8
10635: IFFALSE 10643
10637: PUSH
10638: LD_EXP 35
10642: AND
10643: IFFALSE 10789
10645: GO 10647
10647: DISABLE
10648: LD_INT 0
10650: PPUSH
10651: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10652: LD_ADDR_VAR 0 1
10656: PUSH
10657: LD_INT 22
10659: PUSH
10660: LD_OWVAR 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 0
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 1
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 69
10705: ST_TO_ADDR
// if not depot then
10706: LD_VAR 0 1
10710: NOT
10711: IFFALSE 10715
// exit ;
10713: GO 10789
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10715: LD_ADDR_VAR 0 2
10719: PUSH
10720: LD_VAR 0 1
10724: PUSH
10725: LD_INT 1
10727: PPUSH
10728: LD_VAR 0 1
10732: PPUSH
10733: CALL_OW 12
10737: ARRAY
10738: PPUSH
10739: CALL_OW 274
10743: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10744: LD_VAR 0 2
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: LD_INT 0
10754: PPUSH
10755: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10759: LD_VAR 0 2
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 0
10769: PPUSH
10770: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10774: LD_VAR 0 2
10778: PPUSH
10779: LD_INT 3
10781: PPUSH
10782: LD_INT 0
10784: PPUSH
10785: CALL_OW 277
// end ;
10789: PPOPN 2
10791: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10792: LD_EXP 8
10796: IFFALSE 10804
10798: PUSH
10799: LD_EXP 36
10803: AND
10804: IFFALSE 10901
10806: GO 10808
10808: DISABLE
10809: LD_INT 0
10811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10812: LD_ADDR_VAR 0 1
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_OWVAR 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 21
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: LD_INT 23
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: PPUSH
10861: CALL_OW 69
10865: ST_TO_ADDR
// if not tmp then
10866: LD_VAR 0 1
10870: NOT
10871: IFFALSE 10875
// exit ;
10873: GO 10901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10875: LD_VAR 0 1
10879: PUSH
10880: LD_INT 1
10882: PPUSH
10883: LD_VAR 0 1
10887: PPUSH
10888: CALL_OW 12
10892: ARRAY
10893: PPUSH
10894: LD_INT 200
10896: PPUSH
10897: CALL_OW 234
// end ;
10901: PPOPN 1
10903: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10904: LD_EXP 8
10908: IFFALSE 10916
10910: PUSH
10911: LD_EXP 37
10915: AND
10916: IFFALSE 10995
10918: GO 10920
10920: DISABLE
10921: LD_INT 0
10923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10924: LD_ADDR_VAR 0 1
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_OWVAR 2
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 21
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PPUSH
10955: CALL_OW 69
10959: ST_TO_ADDR
// if not tmp then
10960: LD_VAR 0 1
10964: NOT
10965: IFFALSE 10969
// exit ;
10967: GO 10995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10969: LD_VAR 0 1
10973: PUSH
10974: LD_INT 1
10976: PPUSH
10977: LD_VAR 0 1
10981: PPUSH
10982: CALL_OW 12
10986: ARRAY
10987: PPUSH
10988: LD_INT 60
10990: PPUSH
10991: CALL_OW 234
// end ;
10995: PPOPN 1
10997: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10998: LD_EXP 8
11002: IFFALSE 11010
11004: PUSH
11005: LD_EXP 38
11009: AND
11010: IFFALSE 11109
11012: GO 11014
11014: DISABLE
11015: LD_INT 0
11017: PPUSH
11018: PPUSH
// begin enable ;
11019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11020: LD_ADDR_VAR 0 1
11024: PUSH
11025: LD_INT 22
11027: PUSH
11028: LD_OWVAR 2
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 61
11039: PUSH
11040: EMPTY
11041: LIST
11042: PUSH
11043: LD_INT 33
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 69
11062: ST_TO_ADDR
// if not tmp then
11063: LD_VAR 0 1
11067: NOT
11068: IFFALSE 11072
// exit ;
11070: GO 11109
// for i in tmp do
11072: LD_ADDR_VAR 0 2
11076: PUSH
11077: LD_VAR 0 1
11081: PUSH
11082: FOR_IN
11083: IFFALSE 11107
// if IsControledBy ( i ) then
11085: LD_VAR 0 2
11089: PPUSH
11090: CALL_OW 312
11094: IFFALSE 11105
// ComUnlink ( i ) ;
11096: LD_VAR 0 2
11100: PPUSH
11101: CALL_OW 136
11105: GO 11082
11107: POP
11108: POP
// end ;
11109: PPOPN 2
11111: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11112: LD_EXP 8
11116: IFFALSE 11124
11118: PUSH
11119: LD_EXP 39
11123: AND
11124: IFFALSE 11264
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
// begin ToLua ( displayPowell(); ) ;
11133: LD_STRING displayPowell();
11135: PPUSH
11136: CALL_OW 559
// uc_side := 0 ;
11140: LD_ADDR_OWVAR 20
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// uc_nation := 2 ;
11148: LD_ADDR_OWVAR 21
11152: PUSH
11153: LD_INT 2
11155: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11156: LD_ADDR_OWVAR 37
11160: PUSH
11161: LD_INT 14
11163: ST_TO_ADDR
// vc_engine := engine_siberite ;
11164: LD_ADDR_OWVAR 39
11168: PUSH
11169: LD_INT 3
11171: ST_TO_ADDR
// vc_control := control_apeman ;
11172: LD_ADDR_OWVAR 38
11176: PUSH
11177: LD_INT 5
11179: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11180: LD_ADDR_OWVAR 40
11184: PUSH
11185: LD_INT 29
11187: ST_TO_ADDR
// un := CreateVehicle ;
11188: LD_ADDR_VAR 0 2
11192: PUSH
11193: CALL_OW 45
11197: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11198: LD_VAR 0 2
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11210: LD_INT 35
11212: PPUSH
11213: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11217: LD_VAR 0 2
11221: PPUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: PPUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL_OW 74
11248: PPUSH
11249: CALL_OW 115
// until IsDead ( un ) ;
11253: LD_VAR 0 2
11257: PPUSH
11258: CALL_OW 301
11262: IFFALSE 11210
// end ;
11264: PPOPN 2
11266: END
// every 0 0$1 trigger StreamModeActive and sStu do
11267: LD_EXP 8
11271: IFFALSE 11279
11273: PUSH
11274: LD_EXP 47
11278: AND
11279: IFFALSE 11295
11281: GO 11283
11283: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11284: LD_STRING displayStucuk();
11286: PPUSH
11287: CALL_OW 559
// ResetFog ;
11291: CALL_OW 335
// end ;
11295: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11296: LD_EXP 8
11300: IFFALSE 11308
11302: PUSH
11303: LD_EXP 40
11307: AND
11308: IFFALSE 11449
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
11316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: LD_INT 22
11324: PUSH
11325: LD_OWVAR 2
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 69
11352: ST_TO_ADDR
// if not tmp then
11353: LD_VAR 0 2
11357: NOT
11358: IFFALSE 11362
// exit ;
11360: GO 11449
// un := tmp [ rand ( 1 , tmp ) ] ;
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_VAR 0 2
11379: PPUSH
11380: CALL_OW 12
11384: ARRAY
11385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_INT 0
11393: PPUSH
11394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11398: LD_VAR 0 1
11402: PPUSH
11403: LD_OWVAR 3
11407: PUSH
11408: LD_VAR 0 1
11412: DIFF
11413: PPUSH
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 74
11423: PPUSH
11424: CALL_OW 115
// wait ( 0 0$20 ) ;
11428: LD_INT 700
11430: PPUSH
11431: CALL_OW 67
// SetSide ( un , your_side ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_OWVAR 2
11444: PPUSH
11445: CALL_OW 235
// end ;
11449: PPOPN 2
11451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11452: LD_EXP 8
11456: IFFALSE 11464
11458: PUSH
11459: LD_EXP 41
11463: AND
11464: IFFALSE 11570
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11472: LD_ADDR_VAR 0 1
11476: PUSH
11477: LD_INT 22
11479: PUSH
11480: LD_OWVAR 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: LD_INT 30
11494: PUSH
11495: LD_INT 0
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: ST_TO_ADDR
// if not depot then
11526: LD_VAR 0 1
11530: NOT
11531: IFFALSE 11535
// exit ;
11533: GO 11570
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11535: LD_VAR 0 1
11539: PUSH
11540: LD_INT 1
11542: ARRAY
11543: PPUSH
11544: CALL_OW 250
11548: PPUSH
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 1
11556: ARRAY
11557: PPUSH
11558: CALL_OW 251
11562: PPUSH
11563: LD_INT 70
11565: PPUSH
11566: CALL_OW 495
// end ;
11570: PPOPN 1
11572: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11573: LD_EXP 8
11577: IFFALSE 11585
11579: PUSH
11580: LD_EXP 42
11584: AND
11585: IFFALSE 11796
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11597: LD_ADDR_VAR 0 5
11601: PUSH
11602: LD_INT 22
11604: PUSH
11605: LD_OWVAR 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 21
11616: PUSH
11617: LD_INT 1
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PPUSH
11628: CALL_OW 69
11632: ST_TO_ADDR
// if not tmp then
11633: LD_VAR 0 5
11637: NOT
11638: IFFALSE 11642
// exit ;
11640: GO 11796
// for i in tmp do
11642: LD_ADDR_VAR 0 1
11646: PUSH
11647: LD_VAR 0 5
11651: PUSH
11652: FOR_IN
11653: IFFALSE 11794
// begin d := rand ( 0 , 5 ) ;
11655: LD_ADDR_VAR 0 4
11659: PUSH
11660: LD_INT 0
11662: PPUSH
11663: LD_INT 5
11665: PPUSH
11666: CALL_OW 12
11670: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 250
11685: PPUSH
11686: LD_VAR 0 4
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: LD_INT 12
11696: PPUSH
11697: CALL_OW 12
11701: PPUSH
11702: CALL_OW 272
11706: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11707: LD_ADDR_VAR 0 3
11711: PUSH
11712: LD_VAR 0 1
11716: PPUSH
11717: CALL_OW 251
11721: PPUSH
11722: LD_VAR 0 4
11726: PPUSH
11727: LD_INT 3
11729: PPUSH
11730: LD_INT 12
11732: PPUSH
11733: CALL_OW 12
11737: PPUSH
11738: CALL_OW 273
11742: ST_TO_ADDR
// if ValidHex ( x , y ) then
11743: LD_VAR 0 2
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: CALL_OW 488
11757: IFFALSE 11792
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11759: LD_VAR 0 1
11763: PPUSH
11764: LD_VAR 0 2
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 3
11776: PPUSH
11777: LD_INT 6
11779: PPUSH
11780: CALL_OW 12
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 483
// end ;
11792: GO 11652
11794: POP
11795: POP
// end ;
11796: PPOPN 5
11798: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11799: LD_EXP 8
11803: IFFALSE 11811
11805: PUSH
11806: LD_EXP 43
11810: AND
11811: IFFALSE 11905
11813: GO 11815
11815: DISABLE
11816: LD_INT 0
11818: PPUSH
11819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 32
11839: PUSH
11840: LD_INT 1
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: LD_INT 21
11849: PUSH
11850: LD_INT 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 69
11866: ST_TO_ADDR
// if not tmp then
11867: LD_VAR 0 2
11871: NOT
11872: IFFALSE 11876
// exit ;
11874: GO 11905
// for i in tmp do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_VAR 0 2
11885: PUSH
11886: FOR_IN
11887: IFFALSE 11903
// SetFuel ( i , 0 ) ;
11889: LD_VAR 0 1
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 240
11901: GO 11886
11903: POP
11904: POP
// end ;
11905: PPOPN 2
11907: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11908: LD_EXP 8
11912: IFFALSE 11920
11914: PUSH
11915: LD_EXP 44
11919: AND
11920: IFFALSE 11986
11922: GO 11924
11924: DISABLE
11925: LD_INT 0
11927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_OWVAR 2
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 30
11947: PUSH
11948: LD_INT 29
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: ST_TO_ADDR
// if not tmp then
11964: LD_VAR 0 1
11968: NOT
11969: IFFALSE 11973
// exit ;
11971: GO 11986
// DestroyUnit ( tmp [ 1 ] ) ;
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: ARRAY
11981: PPUSH
11982: CALL_OW 65
// end ;
11986: PPOPN 1
11988: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11989: LD_EXP 8
11993: IFFALSE 12001
11995: PUSH
11996: LD_EXP 46
12000: AND
12001: IFFALSE 12130
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
// begin uc_side := 0 ;
12009: LD_ADDR_OWVAR 20
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// uc_nation := nation_arabian ;
12017: LD_ADDR_OWVAR 21
12021: PUSH
12022: LD_INT 2
12024: ST_TO_ADDR
// hc_gallery :=  ;
12025: LD_ADDR_OWVAR 33
12029: PUSH
12030: LD_STRING 
12032: ST_TO_ADDR
// hc_name :=  ;
12033: LD_ADDR_OWVAR 26
12037: PUSH
12038: LD_STRING 
12040: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12041: LD_INT 1
12043: PPUSH
12044: LD_INT 11
12046: PPUSH
12047: LD_INT 10
12049: PPUSH
12050: CALL_OW 380
// un := CreateHuman ;
12054: LD_ADDR_VAR 0 1
12058: PUSH
12059: CALL_OW 44
12063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12064: LD_VAR 0 1
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12076: LD_INT 35
12078: PPUSH
12079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12083: LD_VAR 0 1
12087: PPUSH
12088: LD_INT 22
12090: PUSH
12091: LD_OWVAR 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: PPUSH
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 74
12114: PPUSH
12115: CALL_OW 115
// until IsDead ( un ) ;
12119: LD_VAR 0 1
12123: PPUSH
12124: CALL_OW 301
12128: IFFALSE 12076
// end ;
12130: PPOPN 1
12132: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12133: LD_EXP 8
12137: IFFALSE 12145
12139: PUSH
12140: LD_EXP 48
12144: AND
12145: IFFALSE 12157
12147: GO 12149
12149: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12150: LD_STRING earthquake(getX(game), 0, 32)
12152: PPUSH
12153: CALL_OW 559
12157: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12158: LD_EXP 8
12162: IFFALSE 12170
12164: PUSH
12165: LD_EXP 49
12169: AND
12170: IFFALSE 12261
12172: GO 12174
12174: DISABLE
12175: LD_INT 0
12177: PPUSH
// begin enable ;
12178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12179: LD_ADDR_VAR 0 1
12183: PUSH
12184: LD_INT 22
12186: PUSH
12187: LD_OWVAR 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 21
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 33
12208: PUSH
12209: LD_INT 3
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: ST_TO_ADDR
// if not tmp then
12226: LD_VAR 0 1
12230: NOT
12231: IFFALSE 12235
// exit ;
12233: GO 12261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12235: LD_VAR 0 1
12239: PUSH
12240: LD_INT 1
12242: PPUSH
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 12
12252: ARRAY
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 234
// end ;
12261: PPOPN 1
12263: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12264: LD_EXP 8
12268: IFFALSE 12276
12270: PUSH
12271: LD_EXP 50
12275: AND
12276: IFFALSE 12417
12278: GO 12280
12280: DISABLE
12281: LD_INT 0
12283: PPUSH
12284: PPUSH
12285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12286: LD_ADDR_VAR 0 3
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_OWVAR 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 25
12305: PUSH
12306: LD_INT 1
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PPUSH
12317: CALL_OW 69
12321: ST_TO_ADDR
// if not tmp then
12322: LD_VAR 0 3
12326: NOT
12327: IFFALSE 12331
// exit ;
12329: GO 12417
// un := tmp [ rand ( 1 , tmp ) ] ;
12331: LD_ADDR_VAR 0 2
12335: PUSH
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 1
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: CALL_OW 12
12353: ARRAY
12354: ST_TO_ADDR
// if Crawls ( un ) then
12355: LD_VAR 0 2
12359: PPUSH
12360: CALL_OW 318
12364: IFFALSE 12375
// ComWalk ( un ) ;
12366: LD_VAR 0 2
12370: PPUSH
12371: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12375: LD_VAR 0 2
12379: PPUSH
12380: LD_INT 9
12382: PPUSH
12383: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12387: LD_INT 28
12389: PPUSH
12390: LD_OWVAR 2
12394: PPUSH
12395: LD_INT 2
12397: PPUSH
12398: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12402: LD_INT 29
12404: PPUSH
12405: LD_OWVAR 2
12409: PPUSH
12410: LD_INT 2
12412: PPUSH
12413: CALL_OW 322
// end ;
12417: PPOPN 3
12419: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12420: LD_EXP 8
12424: IFFALSE 12432
12426: PUSH
12427: LD_EXP 51
12431: AND
12432: IFFALSE 12543
12434: GO 12436
12436: DISABLE
12437: LD_INT 0
12439: PPUSH
12440: PPUSH
12441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_INT 22
12449: PUSH
12450: LD_OWVAR 2
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 25
12461: PUSH
12462: LD_INT 1
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 69
12477: ST_TO_ADDR
// if not tmp then
12478: LD_VAR 0 3
12482: NOT
12483: IFFALSE 12487
// exit ;
12485: GO 12543
// un := tmp [ rand ( 1 , tmp ) ] ;
12487: LD_ADDR_VAR 0 2
12491: PUSH
12492: LD_VAR 0 3
12496: PUSH
12497: LD_INT 1
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: CALL_OW 12
12509: ARRAY
12510: ST_TO_ADDR
// if Crawls ( un ) then
12511: LD_VAR 0 2
12515: PPUSH
12516: CALL_OW 318
12520: IFFALSE 12531
// ComWalk ( un ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12531: LD_VAR 0 2
12535: PPUSH
12536: LD_INT 8
12538: PPUSH
12539: CALL_OW 336
// end ;
12543: PPOPN 3
12545: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12546: LD_EXP 8
12550: IFFALSE 12558
12552: PUSH
12553: LD_EXP 52
12557: AND
12558: IFFALSE 12702
12560: GO 12562
12562: DISABLE
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_OWVAR 2
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 2
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 34
12599: PUSH
12600: LD_INT 12
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 34
12609: PUSH
12610: LD_INT 51
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 34
12619: PUSH
12620: LD_INT 32
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: ST_TO_ADDR
// if not tmp then
12643: LD_VAR 0 2
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 12702
// for i in tmp do
12652: LD_ADDR_VAR 0 1
12656: PUSH
12657: LD_VAR 0 2
12661: PUSH
12662: FOR_IN
12663: IFFALSE 12700
// if GetCargo ( i , mat_artifact ) = 0 then
12665: LD_VAR 0 1
12669: PPUSH
12670: LD_INT 4
12672: PPUSH
12673: CALL_OW 289
12677: PUSH
12678: LD_INT 0
12680: EQUAL
12681: IFFALSE 12698
// SetCargo ( i , mat_siberit , 100 ) ;
12683: LD_VAR 0 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: LD_INT 100
12693: PPUSH
12694: CALL_OW 290
12698: GO 12662
12700: POP
12701: POP
// end ;
12702: PPOPN 2
12704: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12705: LD_EXP 8
12709: IFFALSE 12717
12711: PUSH
12712: LD_EXP 53
12716: AND
12717: IFFALSE 12900
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_OWVAR 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: ST_TO_ADDR
// if not tmp then
12748: LD_VAR 0 2
12752: NOT
12753: IFFALSE 12757
// exit ;
12755: GO 12900
// for i := 1 to 2 do
12757: LD_ADDR_VAR 0 1
12761: PUSH
12762: DOUBLE
12763: LD_INT 1
12765: DEC
12766: ST_TO_ADDR
12767: LD_INT 2
12769: PUSH
12770: FOR_TO
12771: IFFALSE 12898
// begin uc_side := your_side ;
12773: LD_ADDR_OWVAR 20
12777: PUSH
12778: LD_OWVAR 2
12782: ST_TO_ADDR
// uc_nation := nation_american ;
12783: LD_ADDR_OWVAR 21
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// vc_chassis := us_morphling ;
12791: LD_ADDR_OWVAR 37
12795: PUSH
12796: LD_INT 5
12798: ST_TO_ADDR
// vc_engine := engine_siberite ;
12799: LD_ADDR_OWVAR 39
12803: PUSH
12804: LD_INT 3
12806: ST_TO_ADDR
// vc_control := control_computer ;
12807: LD_ADDR_OWVAR 38
12811: PUSH
12812: LD_INT 3
12814: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12815: LD_ADDR_OWVAR 40
12819: PUSH
12820: LD_INT 10
12822: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12823: LD_VAR 0 2
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PPUSH
12832: CALL_OW 310
12836: NOT
12837: IFFALSE 12884
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12839: CALL_OW 45
12843: PPUSH
12844: LD_VAR 0 2
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: CALL_OW 250
12857: PPUSH
12858: LD_VAR 0 2
12862: PUSH
12863: LD_INT 1
12865: ARRAY
12866: PPUSH
12867: CALL_OW 251
12871: PPUSH
12872: LD_INT 12
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 50
12882: GO 12896
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12884: CALL_OW 45
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 51
// end ;
12896: GO 12770
12898: POP
12899: POP
// end ;
12900: PPOPN 2
12902: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12903: LD_EXP 8
12907: IFFALSE 12915
12909: PUSH
12910: LD_EXP 54
12914: AND
12915: IFFALSE 13137
12917: GO 12919
12919: DISABLE
12920: LD_INT 0
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12928: LD_ADDR_VAR 0 6
12932: PUSH
12933: LD_INT 22
12935: PUSH
12936: LD_OWVAR 2
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 21
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 0
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// if not tmp then
12982: LD_VAR 0 6
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 13137
// s1 := rand ( 1 , 4 ) ;
12991: LD_ADDR_VAR 0 2
12995: PUSH
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 4
13001: PPUSH
13002: CALL_OW 12
13006: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13007: LD_ADDR_VAR 0 4
13011: PUSH
13012: LD_VAR 0 6
13016: PUSH
13017: LD_INT 1
13019: ARRAY
13020: PPUSH
13021: LD_VAR 0 2
13025: PPUSH
13026: CALL_OW 259
13030: ST_TO_ADDR
// if s1 = 1 then
13031: LD_VAR 0 2
13035: PUSH
13036: LD_INT 1
13038: EQUAL
13039: IFFALSE 13059
// s2 := rand ( 2 , 4 ) else
13041: LD_ADDR_VAR 0 3
13045: PUSH
13046: LD_INT 2
13048: PPUSH
13049: LD_INT 4
13051: PPUSH
13052: CALL_OW 12
13056: ST_TO_ADDR
13057: GO 13067
// s2 := 1 ;
13059: LD_ADDR_VAR 0 3
13063: PUSH
13064: LD_INT 1
13066: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13067: LD_ADDR_VAR 0 5
13071: PUSH
13072: LD_VAR 0 6
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: CALL_OW 259
13090: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13091: LD_VAR 0 6
13095: PUSH
13096: LD_INT 1
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 2
13104: PPUSH
13105: LD_VAR 0 5
13109: PPUSH
13110: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13114: LD_VAR 0 6
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_VAR 0 4
13132: PPUSH
13133: CALL_OW 237
// end ;
13137: PPOPN 6
13139: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13140: LD_EXP 8
13144: IFFALSE 13152
13146: PUSH
13147: LD_EXP 55
13151: AND
13152: IFFALSE 13231
13154: GO 13156
13156: DISABLE
13157: LD_INT 0
13159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13160: LD_ADDR_VAR 0 1
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_OWVAR 2
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 30
13179: PUSH
13180: LD_INT 3
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: ST_TO_ADDR
// if not tmp then
13196: LD_VAR 0 1
13200: NOT
13201: IFFALSE 13205
// exit ;
13203: GO 13231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13205: LD_VAR 0 1
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_VAR 0 1
13217: PPUSH
13218: CALL_OW 12
13222: ARRAY
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 234
// end ;
13231: PPOPN 1
13233: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13234: LD_EXP 8
13238: IFFALSE 13246
13240: PUSH
13241: LD_EXP 56
13245: AND
13246: IFFALSE 13358
13248: GO 13250
13250: DISABLE
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_OWVAR 2
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 30
13277: PUSH
13278: LD_INT 27
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 30
13287: PUSH
13288: LD_INT 26
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 30
13297: PUSH
13298: LD_INT 28
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PPUSH
13315: CALL_OW 69
13319: ST_TO_ADDR
// if not tmp then
13320: LD_VAR 0 2
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 13358
// for i in tmp do
13329: LD_ADDR_VAR 0 1
13333: PUSH
13334: LD_VAR 0 2
13338: PUSH
13339: FOR_IN
13340: IFFALSE 13356
// SetLives ( i , 1 ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 234
13354: GO 13339
13356: POP
13357: POP
// end ;
13358: PPOPN 2
13360: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13361: LD_EXP 8
13365: IFFALSE 13373
13367: PUSH
13368: LD_EXP 57
13372: AND
13373: IFFALSE 13660
13375: GO 13377
13377: DISABLE
13378: LD_INT 0
13380: PPUSH
13381: PPUSH
13382: PPUSH
// begin i := rand ( 1 , 7 ) ;
13383: LD_ADDR_VAR 0 1
13387: PUSH
13388: LD_INT 1
13390: PPUSH
13391: LD_INT 7
13393: PPUSH
13394: CALL_OW 12
13398: ST_TO_ADDR
// case i of 1 :
13399: LD_VAR 0 1
13403: PUSH
13404: LD_INT 1
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13422
13412: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13413: LD_STRING earthquake(getX(game), 0, 32)
13415: PPUSH
13416: CALL_OW 559
13420: GO 13660
13422: LD_INT 2
13424: DOUBLE
13425: EQUAL
13426: IFTRUE 13430
13428: GO 13444
13430: POP
// begin ToLua ( displayStucuk(); ) ;
13431: LD_STRING displayStucuk();
13433: PPUSH
13434: CALL_OW 559
// ResetFog ;
13438: CALL_OW 335
// end ; 3 :
13442: GO 13660
13444: LD_INT 3
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13556
13452: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 22
13460: PUSH
13461: LD_OWVAR 2
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 69
13488: ST_TO_ADDR
// if not tmp then
13489: LD_VAR 0 2
13493: NOT
13494: IFFALSE 13498
// exit ;
13496: GO 13660
// un := tmp [ rand ( 1 , tmp ) ] ;
13498: LD_ADDR_VAR 0 3
13502: PUSH
13503: LD_VAR 0 2
13507: PUSH
13508: LD_INT 1
13510: PPUSH
13511: LD_VAR 0 2
13515: PPUSH
13516: CALL_OW 12
13520: ARRAY
13521: ST_TO_ADDR
// if Crawls ( un ) then
13522: LD_VAR 0 3
13526: PPUSH
13527: CALL_OW 318
13531: IFFALSE 13542
// ComWalk ( un ) ;
13533: LD_VAR 0 3
13537: PPUSH
13538: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_INT 8
13549: PPUSH
13550: CALL_OW 336
// end ; 4 :
13554: GO 13660
13556: LD_INT 4
13558: DOUBLE
13559: EQUAL
13560: IFTRUE 13564
13562: GO 13638
13564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_OWVAR 2
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 29
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 69
13600: ST_TO_ADDR
// if not tmp then
13601: LD_VAR 0 2
13605: NOT
13606: IFFALSE 13610
// exit ;
13608: GO 13660
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13610: LD_VAR 0 2
13614: PUSH
13615: LD_INT 1
13617: ARRAY
13618: PPUSH
13619: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13623: LD_VAR 0 2
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: PPUSH
13632: CALL_OW 65
// end ; 5 .. 7 :
13636: GO 13660
13638: LD_INT 5
13640: DOUBLE
13641: GREATEREQUAL
13642: IFFALSE 13650
13644: LD_INT 7
13646: DOUBLE
13647: LESSEQUAL
13648: IFTRUE 13652
13650: GO 13659
13652: POP
// StreamSibBomb ; end ;
13653: CALL 9841 0 0
13657: GO 13660
13659: POP
// end ;
13660: PPOPN 3
13662: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13663: LD_EXP 8
13667: IFFALSE 13675
13669: PUSH
13670: LD_EXP 58
13674: AND
13675: IFFALSE 13831
13677: GO 13679
13679: DISABLE
13680: LD_INT 0
13682: PPUSH
13683: PPUSH
13684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13685: LD_ADDR_VAR 0 2
13689: PUSH
13690: LD_INT 81
13692: PUSH
13693: LD_OWVAR 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 21
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 21
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: ST_TO_ADDR
// if not tmp then
13739: LD_VAR 0 2
13743: NOT
13744: IFFALSE 13748
// exit ;
13746: GO 13831
// p := 0 ;
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_INT 0
13755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13756: LD_INT 35
13758: PPUSH
13759: CALL_OW 67
// p := p + 1 ;
13763: LD_ADDR_VAR 0 3
13767: PUSH
13768: LD_VAR 0 3
13772: PUSH
13773: LD_INT 1
13775: PLUS
13776: ST_TO_ADDR
// for i in tmp do
13777: LD_ADDR_VAR 0 1
13781: PUSH
13782: LD_VAR 0 2
13786: PUSH
13787: FOR_IN
13788: IFFALSE 13819
// if GetLives ( i ) < 1000 then
13790: LD_VAR 0 1
13794: PPUSH
13795: CALL_OW 256
13799: PUSH
13800: LD_INT 1000
13802: LESS
13803: IFFALSE 13817
// SetLives ( i , 1000 ) ;
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_INT 1000
13812: PPUSH
13813: CALL_OW 234
13817: GO 13787
13819: POP
13820: POP
// until p > 20 ;
13821: LD_VAR 0 3
13825: PUSH
13826: LD_INT 20
13828: GREATER
13829: IFFALSE 13756
// end ;
13831: PPOPN 3
13833: END
// every 0 0$1 trigger StreamModeActive and sTime do
13834: LD_EXP 8
13838: IFFALSE 13846
13840: PUSH
13841: LD_EXP 59
13845: AND
13846: IFFALSE 13881
13848: GO 13850
13850: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13851: LD_INT 28
13853: PPUSH
13854: LD_OWVAR 2
13858: PPUSH
13859: LD_INT 2
13861: PPUSH
13862: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13866: LD_INT 30
13868: PPUSH
13869: LD_OWVAR 2
13873: PPUSH
13874: LD_INT 2
13876: PPUSH
13877: CALL_OW 322
// end ;
13881: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13882: LD_EXP 8
13886: IFFALSE 13894
13888: PUSH
13889: LD_EXP 60
13893: AND
13894: IFFALSE 14015
13896: GO 13898
13898: DISABLE
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_INT 22
13910: PUSH
13911: LD_OWVAR 2
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 21
13922: PUSH
13923: LD_INT 1
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: LD_INT 23
13935: PUSH
13936: LD_INT 0
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: ST_TO_ADDR
// if not tmp then
13957: LD_VAR 0 2
13961: NOT
13962: IFFALSE 13966
// exit ;
13964: GO 14015
// for i in tmp do
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_VAR 0 2
13975: PUSH
13976: FOR_IN
13977: IFFALSE 14013
// begin if Crawls ( i ) then
13979: LD_VAR 0 1
13983: PPUSH
13984: CALL_OW 318
13988: IFFALSE 13999
// ComWalk ( i ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL_OW 138
// SetClass ( i , 2 ) ;
13999: LD_VAR 0 1
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 336
// end ;
14011: GO 13976
14013: POP
14014: POP
// end ;
14015: PPOPN 2
14017: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14018: LD_EXP 8
14022: IFFALSE 14030
14024: PUSH
14025: LD_EXP 61
14029: AND
14030: IFFALSE 14320
14032: GO 14034
14034: DISABLE
14035: LD_INT 0
14037: PPUSH
14038: PPUSH
14039: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14040: LD_OWVAR 2
14044: PPUSH
14045: LD_INT 9
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14058: LD_INT 9
14060: PPUSH
14061: LD_OWVAR 2
14065: PPUSH
14066: CALL_OW 343
// uc_side := 9 ;
14070: LD_ADDR_OWVAR 20
14074: PUSH
14075: LD_INT 9
14077: ST_TO_ADDR
// uc_nation := 2 ;
14078: LD_ADDR_OWVAR 21
14082: PUSH
14083: LD_INT 2
14085: ST_TO_ADDR
// hc_name := Dark Warrior ;
14086: LD_ADDR_OWVAR 26
14090: PUSH
14091: LD_STRING Dark Warrior
14093: ST_TO_ADDR
// hc_gallery :=  ;
14094: LD_ADDR_OWVAR 33
14098: PUSH
14099: LD_STRING 
14101: ST_TO_ADDR
// hc_noskilllimit := true ;
14102: LD_ADDR_OWVAR 76
14106: PUSH
14107: LD_INT 1
14109: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14110: LD_ADDR_OWVAR 31
14114: PUSH
14115: LD_INT 30
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: ST_TO_ADDR
// un := CreateHuman ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: CALL_OW 44
14142: ST_TO_ADDR
// hc_noskilllimit := false ;
14143: LD_ADDR_OWVAR 76
14147: PUSH
14148: LD_INT 0
14150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 51
// ToLua ( playRanger() ) ;
14163: LD_STRING playRanger()
14165: PPUSH
14166: CALL_OW 559
// p := 0 ;
14170: LD_ADDR_VAR 0 2
14174: PUSH
14175: LD_INT 0
14177: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14178: LD_INT 35
14180: PPUSH
14181: CALL_OW 67
// p := p + 1 ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_VAR 0 2
14194: PUSH
14195: LD_INT 1
14197: PLUS
14198: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14199: LD_VAR 0 3
14203: PPUSH
14204: CALL_OW 256
14208: PUSH
14209: LD_INT 1000
14211: LESS
14212: IFFALSE 14226
// SetLives ( un , 1000 ) ;
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_INT 1000
14221: PPUSH
14222: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 81
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 91
14245: PUSH
14246: LD_VAR 0 3
14250: PUSH
14251: LD_INT 30
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: PPUSH
14268: LD_VAR 0 3
14272: PPUSH
14273: CALL_OW 74
14277: PPUSH
14278: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14282: LD_VAR 0 2
14286: PUSH
14287: LD_INT 80
14289: GREATER
14290: IFTRUE 14303
14292: PUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 301
14302: OR
14303: IFFALSE 14178
// if un then
14305: LD_VAR 0 3
14309: IFFALSE 14320
// RemoveUnit ( un ) ;
14311: LD_VAR 0 3
14315: PPUSH
14316: CALL_OW 64
// end ;
14320: PPOPN 3
14322: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14323: LD_EXP 62
14327: IFFALSE 14443
14329: GO 14331
14331: DISABLE
14332: LD_INT 0
14334: PPUSH
14335: PPUSH
14336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14337: LD_ADDR_VAR 0 2
14341: PUSH
14342: LD_INT 81
14344: PUSH
14345: LD_OWVAR 2
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PPUSH
14368: CALL_OW 69
14372: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14373: LD_STRING playComputer()
14375: PPUSH
14376: CALL_OW 559
// if not tmp then
14380: LD_VAR 0 2
14384: NOT
14385: IFFALSE 14389
// exit ;
14387: GO 14443
// for i in tmp do
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_VAR 0 2
14398: PUSH
14399: FOR_IN
14400: IFFALSE 14441
// for j := 1 to 4 do
14402: LD_ADDR_VAR 0 3
14406: PUSH
14407: DOUBLE
14408: LD_INT 1
14410: DEC
14411: ST_TO_ADDR
14412: LD_INT 4
14414: PUSH
14415: FOR_TO
14416: IFFALSE 14437
// SetSkill ( i , j , 10 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: LD_INT 10
14430: PPUSH
14431: CALL_OW 237
14435: GO 14415
14437: POP
14438: POP
14439: GO 14399
14441: POP
14442: POP
// end ;
14443: PPOPN 3
14445: END
// every 0 0$1 trigger s30 do var i , tmp ;
14446: LD_EXP 63
14450: IFFALSE 14519
14452: GO 14454
14454: DISABLE
14455: LD_INT 0
14457: PPUSH
14458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14459: LD_ADDR_VAR 0 2
14463: PUSH
14464: LD_INT 22
14466: PUSH
14467: LD_OWVAR 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if not tmp then
14481: LD_VAR 0 2
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14519
// for i in tmp do
14490: LD_ADDR_VAR 0 1
14494: PUSH
14495: LD_VAR 0 2
14499: PUSH
14500: FOR_IN
14501: IFFALSE 14517
// SetLives ( i , 300 ) ;
14503: LD_VAR 0 1
14507: PPUSH
14508: LD_INT 300
14510: PPUSH
14511: CALL_OW 234
14515: GO 14500
14517: POP
14518: POP
// end ;
14519: PPOPN 2
14521: END
// every 0 0$1 trigger s60 do var i , tmp ;
14522: LD_EXP 64
14526: IFFALSE 14595
14528: GO 14530
14530: DISABLE
14531: LD_INT 0
14533: PPUSH
14534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14535: LD_ADDR_VAR 0 2
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_OWVAR 2
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: ST_TO_ADDR
// if not tmp then
14557: LD_VAR 0 2
14561: NOT
14562: IFFALSE 14566
// exit ;
14564: GO 14595
// for i in tmp do
14566: LD_ADDR_VAR 0 1
14570: PUSH
14571: LD_VAR 0 2
14575: PUSH
14576: FOR_IN
14577: IFFALSE 14593
// SetLives ( i , 600 ) ;
14579: LD_VAR 0 1
14583: PPUSH
14584: LD_INT 600
14586: PPUSH
14587: CALL_OW 234
14591: GO 14576
14593: POP
14594: POP
// end ;
14595: PPOPN 2
14597: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14598: LD_INT 0
14600: PPUSH
// case cmd of 301 :
14601: LD_VAR 0 1
14605: PUSH
14606: LD_INT 301
14608: DOUBLE
14609: EQUAL
14610: IFTRUE 14614
14612: GO 14646
14614: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14615: LD_VAR 0 6
14619: PPUSH
14620: LD_VAR 0 7
14624: PPUSH
14625: LD_VAR 0 8
14629: PPUSH
14630: LD_VAR 0 4
14634: PPUSH
14635: LD_VAR 0 5
14639: PPUSH
14640: CALL 15859 0 5
14644: GO 14767
14646: LD_INT 302
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14691
14654: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14655: LD_VAR 0 6
14659: PPUSH
14660: LD_VAR 0 7
14664: PPUSH
14665: LD_VAR 0 8
14669: PPUSH
14670: LD_VAR 0 9
14674: PPUSH
14675: LD_VAR 0 4
14679: PPUSH
14680: LD_VAR 0 5
14684: PPUSH
14685: CALL 15950 0 6
14689: GO 14767
14691: LD_INT 303
14693: DOUBLE
14694: EQUAL
14695: IFTRUE 14699
14697: GO 14736
14699: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14700: LD_VAR 0 6
14704: PPUSH
14705: LD_VAR 0 7
14709: PPUSH
14710: LD_VAR 0 8
14714: PPUSH
14715: LD_VAR 0 9
14719: PPUSH
14720: LD_VAR 0 4
14724: PPUSH
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL 14772 0 6
14734: GO 14767
14736: LD_INT 304
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14766
14744: POP
// hHackTeleport ( unit , x , y ) ; end ;
14745: LD_VAR 0 2
14749: PPUSH
14750: LD_VAR 0 4
14754: PPUSH
14755: LD_VAR 0 5
14759: PPUSH
14760: CALL 16543 0 3
14764: GO 14767
14766: POP
// end ;
14767: LD_VAR 0 12
14771: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14772: LD_INT 0
14774: PPUSH
14775: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: LESS
14784: IFTRUE 14796
14786: PUSH
14787: LD_VAR 0 1
14791: PUSH
14792: LD_INT 3
14794: GREATER
14795: OR
14796: IFTRUE 14814
14798: PUSH
14799: LD_VAR 0 5
14803: PPUSH
14804: LD_VAR 0 6
14808: PPUSH
14809: CALL_OW 428
14813: OR
14814: IFFALSE 14818
// exit ;
14816: GO 15546
// uc_side := your_side ;
14818: LD_ADDR_OWVAR 20
14822: PUSH
14823: LD_OWVAR 2
14827: ST_TO_ADDR
// uc_nation := nation ;
14828: LD_ADDR_OWVAR 21
14832: PUSH
14833: LD_VAR 0 1
14837: ST_TO_ADDR
// bc_level = 1 ;
14838: LD_ADDR_OWVAR 43
14842: PUSH
14843: LD_INT 1
14845: ST_TO_ADDR
// case btype of 1 :
14846: LD_VAR 0 2
14850: PUSH
14851: LD_INT 1
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 14870
14859: POP
// bc_type := b_depot ; 2 :
14860: LD_ADDR_OWVAR 42
14864: PUSH
14865: LD_INT 0
14867: ST_TO_ADDR
14868: GO 15490
14870: LD_INT 2
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14878
14876: GO 14889
14878: POP
// bc_type := b_warehouse ; 3 :
14879: LD_ADDR_OWVAR 42
14883: PUSH
14884: LD_INT 1
14886: ST_TO_ADDR
14887: GO 15490
14889: LD_INT 3
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 14908
14897: POP
// bc_type := b_lab ; 4 .. 9 :
14898: LD_ADDR_OWVAR 42
14902: PUSH
14903: LD_INT 6
14905: ST_TO_ADDR
14906: GO 15490
14908: LD_INT 4
14910: DOUBLE
14911: GREATEREQUAL
14912: IFFALSE 14920
14914: LD_INT 9
14916: DOUBLE
14917: LESSEQUAL
14918: IFTRUE 14922
14920: GO 14982
14922: POP
// begin bc_type := b_lab_half ;
14923: LD_ADDR_OWVAR 42
14927: PUSH
14928: LD_INT 7
14930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14931: LD_ADDR_OWVAR 44
14935: PUSH
14936: LD_INT 10
14938: PUSH
14939: LD_INT 11
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 15
14947: PUSH
14948: LD_INT 14
14950: PUSH
14951: LD_INT 13
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 3
14969: MINUS
14970: ARRAY
14971: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14972: LD_ADDR_OWVAR 45
14976: PUSH
14977: LD_INT 9
14979: ST_TO_ADDR
// end ; 10 .. 13 :
14980: GO 15490
14982: LD_INT 10
14984: DOUBLE
14985: GREATEREQUAL
14986: IFFALSE 14994
14988: LD_INT 13
14990: DOUBLE
14991: LESSEQUAL
14992: IFTRUE 14996
14994: GO 15073
14996: POP
// begin bc_type := b_lab_full ;
14997: LD_ADDR_OWVAR 42
15001: PUSH
15002: LD_INT 8
15004: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15005: LD_ADDR_OWVAR 44
15009: PUSH
15010: LD_INT 10
15012: PUSH
15013: LD_INT 12
15015: PUSH
15016: LD_INT 14
15018: PUSH
15019: LD_INT 13
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 9
15035: MINUS
15036: ARRAY
15037: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15038: LD_ADDR_OWVAR 45
15042: PUSH
15043: LD_INT 11
15045: PUSH
15046: LD_INT 15
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: LD_INT 15
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_INT 9
15068: MINUS
15069: ARRAY
15070: ST_TO_ADDR
// end ; 14 :
15071: GO 15490
15073: LD_INT 14
15075: DOUBLE
15076: EQUAL
15077: IFTRUE 15081
15079: GO 15092
15081: POP
// bc_type := b_workshop ; 15 :
15082: LD_ADDR_OWVAR 42
15086: PUSH
15087: LD_INT 2
15089: ST_TO_ADDR
15090: GO 15490
15092: LD_INT 15
15094: DOUBLE
15095: EQUAL
15096: IFTRUE 15100
15098: GO 15111
15100: POP
// bc_type := b_factory ; 16 :
15101: LD_ADDR_OWVAR 42
15105: PUSH
15106: LD_INT 3
15108: ST_TO_ADDR
15109: GO 15490
15111: LD_INT 16
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15130
15119: POP
// bc_type := b_ext_gun ; 17 :
15120: LD_ADDR_OWVAR 42
15124: PUSH
15125: LD_INT 17
15127: ST_TO_ADDR
15128: GO 15490
15130: LD_INT 17
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 15166
15138: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15139: LD_ADDR_OWVAR 42
15143: PUSH
15144: LD_INT 19
15146: PUSH
15147: LD_INT 23
15149: PUSH
15150: LD_INT 19
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PUSH
15158: LD_VAR 0 1
15162: ARRAY
15163: ST_TO_ADDR
15164: GO 15490
15166: LD_INT 18
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15185
15174: POP
// bc_type := b_ext_radar ; 19 :
15175: LD_ADDR_OWVAR 42
15179: PUSH
15180: LD_INT 20
15182: ST_TO_ADDR
15183: GO 15490
15185: LD_INT 19
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15204
15193: POP
// bc_type := b_ext_radio ; 20 :
15194: LD_ADDR_OWVAR 42
15198: PUSH
15199: LD_INT 22
15201: ST_TO_ADDR
15202: GO 15490
15204: LD_INT 20
15206: DOUBLE
15207: EQUAL
15208: IFTRUE 15212
15210: GO 15223
15212: POP
// bc_type := b_ext_siberium ; 21 :
15213: LD_ADDR_OWVAR 42
15217: PUSH
15218: LD_INT 21
15220: ST_TO_ADDR
15221: GO 15490
15223: LD_INT 21
15225: DOUBLE
15226: EQUAL
15227: IFTRUE 15231
15229: GO 15242
15231: POP
// bc_type := b_ext_computer ; 22 :
15232: LD_ADDR_OWVAR 42
15236: PUSH
15237: LD_INT 24
15239: ST_TO_ADDR
15240: GO 15490
15242: LD_INT 22
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15261
15250: POP
// bc_type := b_ext_track ; 23 :
15251: LD_ADDR_OWVAR 42
15255: PUSH
15256: LD_INT 16
15258: ST_TO_ADDR
15259: GO 15490
15261: LD_INT 23
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15280
15269: POP
// bc_type := b_ext_laser ; 24 :
15270: LD_ADDR_OWVAR 42
15274: PUSH
15275: LD_INT 25
15277: ST_TO_ADDR
15278: GO 15490
15280: LD_INT 24
15282: DOUBLE
15283: EQUAL
15284: IFTRUE 15288
15286: GO 15299
15288: POP
// bc_type := b_control_tower ; 25 :
15289: LD_ADDR_OWVAR 42
15293: PUSH
15294: LD_INT 36
15296: ST_TO_ADDR
15297: GO 15490
15299: LD_INT 25
15301: DOUBLE
15302: EQUAL
15303: IFTRUE 15307
15305: GO 15318
15307: POP
// bc_type := b_breastwork ; 26 :
15308: LD_ADDR_OWVAR 42
15312: PUSH
15313: LD_INT 31
15315: ST_TO_ADDR
15316: GO 15490
15318: LD_INT 26
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15337
15326: POP
// bc_type := b_bunker ; 27 :
15327: LD_ADDR_OWVAR 42
15331: PUSH
15332: LD_INT 32
15334: ST_TO_ADDR
15335: GO 15490
15337: LD_INT 27
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15356
15345: POP
// bc_type := b_turret ; 28 :
15346: LD_ADDR_OWVAR 42
15350: PUSH
15351: LD_INT 33
15353: ST_TO_ADDR
15354: GO 15490
15356: LD_INT 28
15358: DOUBLE
15359: EQUAL
15360: IFTRUE 15364
15362: GO 15375
15364: POP
// bc_type := b_armoury ; 29 :
15365: LD_ADDR_OWVAR 42
15369: PUSH
15370: LD_INT 4
15372: ST_TO_ADDR
15373: GO 15490
15375: LD_INT 29
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15394
15383: POP
// bc_type := b_barracks ; 30 :
15384: LD_ADDR_OWVAR 42
15388: PUSH
15389: LD_INT 5
15391: ST_TO_ADDR
15392: GO 15490
15394: LD_INT 30
15396: DOUBLE
15397: EQUAL
15398: IFTRUE 15402
15400: GO 15413
15402: POP
// bc_type := b_solar_power ; 31 :
15403: LD_ADDR_OWVAR 42
15407: PUSH
15408: LD_INT 27
15410: ST_TO_ADDR
15411: GO 15490
15413: LD_INT 31
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15432
15421: POP
// bc_type := b_oil_power ; 32 :
15422: LD_ADDR_OWVAR 42
15426: PUSH
15427: LD_INT 26
15429: ST_TO_ADDR
15430: GO 15490
15432: LD_INT 32
15434: DOUBLE
15435: EQUAL
15436: IFTRUE 15440
15438: GO 15451
15440: POP
// bc_type := b_siberite_power ; 33 :
15441: LD_ADDR_OWVAR 42
15445: PUSH
15446: LD_INT 28
15448: ST_TO_ADDR
15449: GO 15490
15451: LD_INT 33
15453: DOUBLE
15454: EQUAL
15455: IFTRUE 15459
15457: GO 15470
15459: POP
// bc_type := b_oil_mine ; 34 :
15460: LD_ADDR_OWVAR 42
15464: PUSH
15465: LD_INT 29
15467: ST_TO_ADDR
15468: GO 15490
15470: LD_INT 34
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15489
15478: POP
// bc_type := b_siberite_mine ; end ;
15479: LD_ADDR_OWVAR 42
15483: PUSH
15484: LD_INT 30
15486: ST_TO_ADDR
15487: GO 15490
15489: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15490: LD_ADDR_VAR 0 8
15494: PUSH
15495: LD_VAR 0 5
15499: PPUSH
15500: LD_VAR 0 6
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: CALL_OW 47
15514: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15515: LD_OWVAR 42
15519: PUSH
15520: LD_INT 32
15522: PUSH
15523: LD_INT 33
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: IN
15530: IFFALSE 15546
// PlaceWeaponTurret ( b , weapon ) ;
15532: LD_VAR 0 8
15536: PPUSH
15537: LD_VAR 0 4
15541: PPUSH
15542: CALL_OW 431
// end ;
15546: LD_VAR 0 7
15550: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15557: LD_ADDR_VAR 0 4
15561: PUSH
15562: LD_INT 22
15564: PUSH
15565: LD_OWVAR 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 30
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 4
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15679
// for i in tmp do
15620: LD_ADDR_VAR 0 2
15624: PUSH
15625: LD_VAR 0 4
15629: PUSH
15630: FOR_IN
15631: IFFALSE 15677
// for j = 1 to 3 do
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: DOUBLE
15639: LD_INT 1
15641: DEC
15642: ST_TO_ADDR
15643: LD_INT 3
15645: PUSH
15646: FOR_TO
15647: IFFALSE 15673
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15649: LD_VAR 0 2
15653: PPUSH
15654: CALL_OW 274
15658: PPUSH
15659: LD_VAR 0 3
15663: PPUSH
15664: LD_INT 99999
15666: PPUSH
15667: CALL_OW 277
15671: GO 15646
15673: POP
15674: POP
15675: GO 15630
15677: POP
15678: POP
// end ;
15679: LD_VAR 0 1
15683: RET
// export function hHackSetLevel10 ; var i , j ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
15688: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15689: LD_ADDR_VAR 0 2
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 69
15708: PUSH
15709: FOR_IN
15710: IFFALSE 15762
// if IsSelected ( i ) then
15712: LD_VAR 0 2
15716: PPUSH
15717: CALL_OW 306
15721: IFFALSE 15760
// begin for j := 1 to 4 do
15723: LD_ADDR_VAR 0 3
15727: PUSH
15728: DOUBLE
15729: LD_INT 1
15731: DEC
15732: ST_TO_ADDR
15733: LD_INT 4
15735: PUSH
15736: FOR_TO
15737: IFFALSE 15758
// SetSkill ( i , j , 10 ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 10
15751: PPUSH
15752: CALL_OW 237
15756: GO 15736
15758: POP
15759: POP
// end ;
15760: GO 15709
15762: POP
15763: POP
// end ;
15764: LD_VAR 0 1
15768: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15769: LD_INT 0
15771: PPUSH
15772: PPUSH
15773: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_OWVAR 2
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 21
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: PUSH
15810: FOR_IN
15811: IFFALSE 15852
// begin for j := 1 to 4 do
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: DOUBLE
15819: LD_INT 1
15821: DEC
15822: ST_TO_ADDR
15823: LD_INT 4
15825: PUSH
15826: FOR_TO
15827: IFFALSE 15848
// SetSkill ( i , j , 10 ) ;
15829: LD_VAR 0 2
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 10
15841: PPUSH
15842: CALL_OW 237
15846: GO 15826
15848: POP
15849: POP
// end ;
15850: GO 15810
15852: POP
15853: POP
// end ;
15854: LD_VAR 0 1
15858: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15859: LD_INT 0
15861: PPUSH
// uc_side := your_side ;
15862: LD_ADDR_OWVAR 20
15866: PUSH
15867: LD_OWVAR 2
15871: ST_TO_ADDR
// uc_nation := nation ;
15872: LD_ADDR_OWVAR 21
15876: PUSH
15877: LD_VAR 0 1
15881: ST_TO_ADDR
// InitHc ;
15882: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15886: LD_INT 0
15888: PPUSH
15889: LD_VAR 0 2
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15903: LD_VAR 0 4
15907: PPUSH
15908: LD_VAR 0 5
15912: PPUSH
15913: CALL_OW 428
15917: PUSH
15918: LD_INT 0
15920: EQUAL
15921: IFFALSE 15945
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15923: CALL_OW 44
15927: PPUSH
15928: LD_VAR 0 4
15932: PPUSH
15933: LD_VAR 0 5
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 48
// end ;
15945: LD_VAR 0 6
15949: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15950: LD_INT 0
15952: PPUSH
15953: PPUSH
// uc_side := your_side ;
15954: LD_ADDR_OWVAR 20
15958: PUSH
15959: LD_OWVAR 2
15963: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15964: LD_VAR 0 1
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 4
15980: PUSH
15981: LD_INT 5
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: IN
15991: IFFALSE 16003
// uc_nation := nation_american else
15993: LD_ADDR_OWVAR 21
15997: PUSH
15998: LD_INT 1
16000: ST_TO_ADDR
16001: GO 16046
// if chassis in [ 11 , 12 , 13 , 14 ] then
16003: LD_VAR 0 1
16007: PUSH
16008: LD_INT 11
16010: PUSH
16011: LD_INT 12
16013: PUSH
16014: LD_INT 13
16016: PUSH
16017: LD_INT 14
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: IN
16026: IFFALSE 16038
// uc_nation := nation_arabian else
16028: LD_ADDR_OWVAR 21
16032: PUSH
16033: LD_INT 2
16035: ST_TO_ADDR
16036: GO 16046
// uc_nation := nation_russian ;
16038: LD_ADDR_OWVAR 21
16042: PUSH
16043: LD_INT 3
16045: ST_TO_ADDR
// vc_chassis := chassis ;
16046: LD_ADDR_OWVAR 37
16050: PUSH
16051: LD_VAR 0 1
16055: ST_TO_ADDR
// vc_engine := engine ;
16056: LD_ADDR_OWVAR 39
16060: PUSH
16061: LD_VAR 0 2
16065: ST_TO_ADDR
// vc_control := control ;
16066: LD_ADDR_OWVAR 38
16070: PUSH
16071: LD_VAR 0 3
16075: ST_TO_ADDR
// vc_weapon := weapon ;
16076: LD_ADDR_OWVAR 40
16080: PUSH
16081: LD_VAR 0 4
16085: ST_TO_ADDR
// un := CreateVehicle ;
16086: LD_ADDR_VAR 0 8
16090: PUSH
16091: CALL_OW 45
16095: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16096: LD_VAR 0 8
16100: PPUSH
16101: LD_INT 0
16103: PPUSH
16104: LD_INT 5
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16116: LD_VAR 0 8
16120: PPUSH
16121: LD_VAR 0 5
16125: PPUSH
16126: LD_VAR 0 6
16130: PPUSH
16131: LD_INT 1
16133: PPUSH
16134: CALL_OW 48
// end ;
16138: LD_VAR 0 7
16142: RET
// export hInvincible ; every 1 do
16143: GO 16145
16145: DISABLE
// hInvincible := [ ] ;
16146: LD_ADDR_EXP 65
16150: PUSH
16151: EMPTY
16152: ST_TO_ADDR
16153: END
// every 10 do var i ;
16154: GO 16156
16156: DISABLE
16157: LD_INT 0
16159: PPUSH
// begin enable ;
16160: ENABLE
// if not hInvincible then
16161: LD_EXP 65
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16214
// for i in hInvincible do
16170: LD_ADDR_VAR 0 1
16174: PUSH
16175: LD_EXP 65
16179: PUSH
16180: FOR_IN
16181: IFFALSE 16212
// if GetLives ( i ) < 1000 then
16183: LD_VAR 0 1
16187: PPUSH
16188: CALL_OW 256
16192: PUSH
16193: LD_INT 1000
16195: LESS
16196: IFFALSE 16210
// SetLives ( i , 1000 ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: LD_INT 1000
16205: PPUSH
16206: CALL_OW 234
16210: GO 16180
16212: POP
16213: POP
// end ;
16214: PPOPN 1
16216: END
// export function hHackInvincible ; var i ; begin
16217: LD_INT 0
16219: PPUSH
16220: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 69
16258: PUSH
16259: FOR_IN
16260: IFFALSE 16321
// if IsSelected ( i ) then
16262: LD_VAR 0 2
16266: PPUSH
16267: CALL_OW 306
16271: IFFALSE 16319
// begin if i in hInvincible then
16273: LD_VAR 0 2
16277: PUSH
16278: LD_EXP 65
16282: IN
16283: IFFALSE 16303
// hInvincible := hInvincible diff i else
16285: LD_ADDR_EXP 65
16289: PUSH
16290: LD_EXP 65
16294: PUSH
16295: LD_VAR 0 2
16299: DIFF
16300: ST_TO_ADDR
16301: GO 16319
// hInvincible := hInvincible union i ;
16303: LD_ADDR_EXP 65
16307: PUSH
16308: LD_EXP 65
16312: PUSH
16313: LD_VAR 0 2
16317: UNION
16318: ST_TO_ADDR
// end ;
16319: GO 16259
16321: POP
16322: POP
// end ;
16323: LD_VAR 0 1
16327: RET
// export function hHackInvisible ; var i , j ; begin
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
16332: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16333: LD_ADDR_VAR 0 2
16337: PUSH
16338: LD_INT 21
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: PUSH
16353: FOR_IN
16354: IFFALSE 16378
// if IsSelected ( i ) then
16356: LD_VAR 0 2
16360: PPUSH
16361: CALL_OW 306
16365: IFFALSE 16376
// ComForceInvisible ( i ) ;
16367: LD_VAR 0 2
16371: PPUSH
16372: CALL_OW 496
16376: GO 16353
16378: POP
16379: POP
// end ;
16380: LD_VAR 0 1
16384: RET
// export function hHackChangeYourSide ; begin
16385: LD_INT 0
16387: PPUSH
// if your_side = 8 then
16388: LD_OWVAR 2
16392: PUSH
16393: LD_INT 8
16395: EQUAL
16396: IFFALSE 16408
// your_side := 0 else
16398: LD_ADDR_OWVAR 2
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
16406: GO 16422
// your_side := your_side + 1 ;
16408: LD_ADDR_OWVAR 2
16412: PUSH
16413: LD_OWVAR 2
16417: PUSH
16418: LD_INT 1
16420: PLUS
16421: ST_TO_ADDR
// end ;
16422: LD_VAR 0 1
16426: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
16431: PPUSH
// for i in all_units do
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_OWVAR 3
16441: PUSH
16442: FOR_IN
16443: IFFALSE 16521
// if IsSelected ( i ) then
16445: LD_VAR 0 2
16449: PPUSH
16450: CALL_OW 306
16454: IFFALSE 16519
// begin j := GetSide ( i ) ;
16456: LD_ADDR_VAR 0 3
16460: PUSH
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL_OW 255
16470: ST_TO_ADDR
// if j = 8 then
16471: LD_VAR 0 3
16475: PUSH
16476: LD_INT 8
16478: EQUAL
16479: IFFALSE 16491
// j := 0 else
16481: LD_ADDR_VAR 0 3
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
16489: GO 16505
// j := j + 1 ;
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_VAR 0 3
16500: PUSH
16501: LD_INT 1
16503: PLUS
16504: ST_TO_ADDR
// SetSide ( i , j ) ;
16505: LD_VAR 0 2
16509: PPUSH
16510: LD_VAR 0 3
16514: PPUSH
16515: CALL_OW 235
// end ;
16519: GO 16442
16521: POP
16522: POP
// end ;
16523: LD_VAR 0 1
16527: RET
// export function hHackFog ; begin
16528: LD_INT 0
16530: PPUSH
// FogOff ( true ) ;
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 344
// end ;
16538: LD_VAR 0 1
16542: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16543: LD_INT 0
16545: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_VAR 0 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 483
// CenterOnXY ( x , y ) ;
16571: LD_VAR 0 2
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: CALL_OW 84
// end ;
16585: LD_VAR 0 4
16589: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16594: LD_VAR 0 1
16598: NOT
16599: IFTRUE 16618
16601: PUSH
16602: LD_VAR 0 2
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: CALL_OW 488
16616: NOT
16617: OR
16618: IFTRUE 16653
16620: PUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 266
16630: PUSH
16631: LD_INT 3
16633: NONEQUAL
16634: IFFALSE 16652
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 247
16646: PUSH
16647: LD_INT 1
16649: EQUAL
16650: NOT
16651: AND
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16939
// if GetType ( factory ) = unit_human then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 247
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: IFFALSE 16687
// factory := IsInUnit ( factory ) ;
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: CALL_OW 310
16686: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16687: LD_VAR 0 1
16691: PPUSH
16692: CALL_OW 266
16696: PUSH
16697: LD_INT 3
16699: NONEQUAL
16700: IFFALSE 16704
// exit ;
16702: GO 16939
// for i := 1 to Count ( factoryWaypoints ) do
16704: LD_ADDR_VAR 0 5
16708: PUSH
16709: DOUBLE
16710: LD_INT 1
16712: DEC
16713: ST_TO_ADDR
16714: LD_EXP 66
16718: PPUSH
16719: CALL 26906 0 1
16723: PUSH
16724: FOR_TO
16725: IFFALSE 16887
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16727: LD_VAR 0 2
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: CALL_OW 428
16741: PUSH
16742: LD_EXP 66
16746: PUSH
16747: LD_VAR 0 5
16751: ARRAY
16752: PUSH
16753: LD_INT 2
16755: ARRAY
16756: EQUAL
16757: IFFALSE 16789
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16759: LD_ADDR_EXP 66
16763: PUSH
16764: LD_EXP 66
16768: PPUSH
16769: LD_VAR 0 5
16773: PPUSH
16774: CALL_OW 3
16778: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16779: CALL 16944 0 0
// exit ;
16783: POP
16784: POP
16785: GO 16939
// end else
16787: GO 16885
// if factory = factoryWaypoints [ i ] [ 2 ] then
16789: LD_VAR 0 1
16793: PUSH
16794: LD_EXP 66
16798: PUSH
16799: LD_VAR 0 5
16803: ARRAY
16804: PUSH
16805: LD_INT 2
16807: ARRAY
16808: EQUAL
16809: IFFALSE 16885
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16811: LD_ADDR_EXP 66
16815: PUSH
16816: LD_EXP 66
16820: PPUSH
16821: LD_VAR 0 5
16825: PPUSH
16826: CALL_OW 3
16830: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16831: LD_ADDR_EXP 66
16835: PUSH
16836: LD_EXP 66
16840: PPUSH
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL_OW 255
16850: PUSH
16851: LD_VAR 0 1
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_VAR 0 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL 62882 0 2
16876: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16877: CALL 16944 0 0
// exit ;
16881: POP
16882: POP
16883: GO 16939
// end ; end ;
16885: GO 16724
16887: POP
16888: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16889: LD_ADDR_EXP 66
16893: PUSH
16894: LD_EXP 66
16898: PPUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 255
16908: PUSH
16909: LD_VAR 0 1
16913: PUSH
16914: LD_VAR 0 2
16918: PUSH
16919: LD_VAR 0 3
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: PPUSH
16930: CALL 62882 0 2
16934: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16935: CALL 16944 0 0
// end ;
16939: LD_VAR 0 4
16943: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16949: LD_STRING resetFactoryWaypoint();
16951: PPUSH
16952: CALL_OW 559
// if factoryWaypoints then
16956: LD_EXP 66
16960: IFFALSE 17081
// begin list := factoryWaypoints ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_EXP 66
16971: ST_TO_ADDR
// for i := 1 to list do
16972: LD_ADDR_VAR 0 2
16976: PUSH
16977: DOUBLE
16978: LD_INT 1
16980: DEC
16981: ST_TO_ADDR
16982: LD_VAR 0 3
16986: PUSH
16987: FOR_TO
16988: IFFALSE 17079
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16990: LD_STRING setFactoryWaypointXY(
16992: PUSH
16993: LD_VAR 0 3
16997: PUSH
16998: LD_VAR 0 2
17002: ARRAY
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: STR
17008: PUSH
17009: LD_STRING ,
17011: STR
17012: PUSH
17013: LD_VAR 0 3
17017: PUSH
17018: LD_VAR 0 2
17022: ARRAY
17023: PUSH
17024: LD_INT 2
17026: ARRAY
17027: STR
17028: PUSH
17029: LD_STRING ,
17031: STR
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_VAR 0 2
17042: ARRAY
17043: PUSH
17044: LD_INT 3
17046: ARRAY
17047: STR
17048: PUSH
17049: LD_STRING ,
17051: STR
17052: PUSH
17053: LD_VAR 0 3
17057: PUSH
17058: LD_VAR 0 2
17062: ARRAY
17063: PUSH
17064: LD_INT 4
17066: ARRAY
17067: STR
17068: PUSH
17069: LD_STRING )
17071: STR
17072: PPUSH
17073: CALL_OW 559
17077: GO 16987
17079: POP
17080: POP
// end ; end ;
17081: LD_VAR 0 1
17085: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17086: LD_INT 0
17088: PPUSH
// if HexInfo ( x , y ) = warehouse then
17089: LD_VAR 0 2
17093: PPUSH
17094: LD_VAR 0 3
17098: PPUSH
17099: CALL_OW 428
17103: PUSH
17104: LD_VAR 0 1
17108: EQUAL
17109: IFFALSE 17136
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17111: LD_ADDR_EXP 68
17115: PUSH
17116: LD_EXP 68
17120: PPUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: LD_INT 0
17128: PPUSH
17129: CALL_OW 1
17133: ST_TO_ADDR
17134: GO 17187
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17136: LD_ADDR_EXP 68
17140: PUSH
17141: LD_EXP 68
17145: PPUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 255
17160: PUSH
17161: LD_VAR 0 1
17165: PUSH
17166: LD_VAR 0 2
17170: PUSH
17171: LD_VAR 0 3
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17187: CALL 17196 0 0
// end ;
17191: LD_VAR 0 4
17195: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
17200: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17201: LD_STRING resetWarehouseGatheringPoints();
17203: PPUSH
17204: CALL_OW 559
// if warehouseGatheringPoints then
17208: LD_EXP 68
17212: IFFALSE 17338
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_EXP 68
17223: PPUSH
17224: CALL 66816 0 1
17228: ST_TO_ADDR
// for i := 1 to list do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: DOUBLE
17235: LD_INT 1
17237: DEC
17238: ST_TO_ADDR
17239: LD_VAR 0 3
17243: PUSH
17244: FOR_TO
17245: IFFALSE 17336
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17247: LD_STRING setWarehouseGatheringPointXY(
17249: PUSH
17250: LD_VAR 0 3
17254: PUSH
17255: LD_VAR 0 2
17259: ARRAY
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: STR
17265: PUSH
17266: LD_STRING ,
17268: STR
17269: PUSH
17270: LD_VAR 0 3
17274: PUSH
17275: LD_VAR 0 2
17279: ARRAY
17280: PUSH
17281: LD_INT 2
17283: ARRAY
17284: STR
17285: PUSH
17286: LD_STRING ,
17288: STR
17289: PUSH
17290: LD_VAR 0 3
17294: PUSH
17295: LD_VAR 0 2
17299: ARRAY
17300: PUSH
17301: LD_INT 3
17303: ARRAY
17304: STR
17305: PUSH
17306: LD_STRING ,
17308: STR
17309: PUSH
17310: LD_VAR 0 3
17314: PUSH
17315: LD_VAR 0 2
17319: ARRAY
17320: PUSH
17321: LD_INT 4
17323: ARRAY
17324: STR
17325: PUSH
17326: LD_STRING )
17328: STR
17329: PPUSH
17330: CALL_OW 559
17334: GO 17244
17336: POP
17337: POP
// end ; end ;
17338: LD_VAR 0 1
17342: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17343: LD_EXP 68
17347: IFFALSE 18042
17349: GO 17351
17351: DISABLE
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
// begin enable ;
17363: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17364: LD_ADDR_VAR 0 3
17368: PUSH
17369: LD_EXP 68
17373: PPUSH
17374: CALL 66816 0 1
17378: ST_TO_ADDR
// if not list then
17379: LD_VAR 0 3
17383: NOT
17384: IFFALSE 17388
// exit ;
17386: GO 18042
// for i := 1 to list do
17388: LD_ADDR_VAR 0 1
17392: PUSH
17393: DOUBLE
17394: LD_INT 1
17396: DEC
17397: ST_TO_ADDR
17398: LD_VAR 0 3
17402: PUSH
17403: FOR_TO
17404: IFFALSE 18040
// begin depot := list [ i ] [ 2 ] ;
17406: LD_ADDR_VAR 0 8
17410: PUSH
17411: LD_VAR 0 3
17415: PUSH
17416: LD_VAR 0 1
17420: ARRAY
17421: PUSH
17422: LD_INT 2
17424: ARRAY
17425: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17426: LD_ADDR_VAR 0 5
17430: PUSH
17431: LD_VAR 0 3
17435: PUSH
17436: LD_VAR 0 1
17440: ARRAY
17441: PUSH
17442: LD_INT 1
17444: ARRAY
17445: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17446: LD_VAR 0 8
17450: PPUSH
17451: CALL_OW 301
17455: IFTRUE 17474
17457: PUSH
17458: LD_VAR 0 5
17462: PUSH
17463: LD_VAR 0 8
17467: PPUSH
17468: CALL_OW 255
17472: NONEQUAL
17473: OR
17474: IFFALSE 17503
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17476: LD_ADDR_EXP 68
17480: PUSH
17481: LD_EXP 68
17485: PPUSH
17486: LD_VAR 0 8
17490: PPUSH
17491: LD_INT 0
17493: PPUSH
17494: CALL_OW 1
17498: ST_TO_ADDR
// exit ;
17499: POP
17500: POP
17501: GO 18042
// end ; x := list [ i ] [ 3 ] ;
17503: LD_ADDR_VAR 0 6
17507: PUSH
17508: LD_VAR 0 3
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PUSH
17519: LD_INT 3
17521: ARRAY
17522: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17523: LD_ADDR_VAR 0 7
17527: PUSH
17528: LD_VAR 0 3
17532: PUSH
17533: LD_VAR 0 1
17537: ARRAY
17538: PUSH
17539: LD_INT 4
17541: ARRAY
17542: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17543: LD_ADDR_VAR 0 9
17547: PUSH
17548: LD_VAR 0 6
17552: PPUSH
17553: LD_VAR 0 7
17557: PPUSH
17558: LD_INT 16
17560: PPUSH
17561: CALL 65390 0 3
17565: ST_TO_ADDR
// if not cratesNearbyPoint then
17566: LD_VAR 0 9
17570: NOT
17571: IFFALSE 17577
// exit ;
17573: POP
17574: POP
17575: GO 18042
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17577: LD_ADDR_VAR 0 4
17581: PUSH
17582: LD_INT 22
17584: PUSH
17585: LD_VAR 0 5
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 3
17596: PUSH
17597: LD_INT 60
17599: PUSH
17600: EMPTY
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 91
17609: PUSH
17610: LD_VAR 0 8
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 2
17625: PUSH
17626: LD_INT 25
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 25
17638: PUSH
17639: LD_INT 16
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: PUSH
17662: LD_VAR 0 8
17666: PPUSH
17667: CALL_OW 313
17671: PPUSH
17672: LD_INT 3
17674: PUSH
17675: LD_INT 60
17677: PUSH
17678: EMPTY
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 25
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 25
17700: PUSH
17701: LD_INT 16
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 72
17721: UNION
17722: ST_TO_ADDR
// if tmp then
17723: LD_VAR 0 4
17727: IFFALSE 17807
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_VAR 0 4
17738: PPUSH
17739: LD_INT 3
17741: PPUSH
17742: CALL 63197 0 2
17746: ST_TO_ADDR
// for j in tmp do
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: LD_VAR 0 4
17756: PUSH
17757: FOR_IN
17758: IFFALSE 17801
// begin if IsInUnit ( j ) then
17760: LD_VAR 0 2
17764: PPUSH
17765: CALL_OW 310
17769: IFFALSE 17780
// ComExit ( j ) ;
17771: LD_VAR 0 2
17775: PPUSH
17776: CALL 63280 0 1
// AddComCollect ( j , x , y ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_VAR 0 6
17789: PPUSH
17790: LD_VAR 0 7
17794: PPUSH
17795: CALL_OW 177
// end ;
17799: GO 17757
17801: POP
17802: POP
// exit ;
17803: POP
17804: POP
17805: GO 18042
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17807: LD_ADDR_VAR 0 4
17811: PUSH
17812: LD_INT 22
17814: PUSH
17815: LD_VAR 0 5
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 91
17826: PUSH
17827: LD_VAR 0 8
17831: PUSH
17832: LD_INT 8
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 34
17845: PUSH
17846: LD_INT 12
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 34
17855: PUSH
17856: LD_INT 51
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 34
17865: PUSH
17866: LD_INT 32
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 34
17875: PUSH
17876: LD_INT 89
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if tmp then
17900: LD_VAR 0 4
17904: IFFALSE 18038
// begin for j in tmp do
17906: LD_ADDR_VAR 0 2
17910: PUSH
17911: LD_VAR 0 4
17915: PUSH
17916: FOR_IN
17917: IFFALSE 18036
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17919: LD_VAR 0 2
17923: PPUSH
17924: CALL_OW 262
17928: PUSH
17929: LD_INT 3
17931: EQUAL
17932: IFTRUE 17949
17934: PUSH
17935: LD_VAR 0 2
17939: PPUSH
17940: CALL_OW 261
17944: PUSH
17945: LD_INT 20
17947: GREATER
17948: OR
17949: IFFALSE 17963
17951: PUSH
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 314
17961: NOT
17962: AND
17963: IFFALSE 17993
17965: PUSH
17966: LD_VAR 0 2
17970: PPUSH
17971: CALL_OW 263
17975: PUSH
17976: LD_INT 1
17978: NONEQUAL
17979: IFTRUE 17992
17981: PUSH
17982: LD_VAR 0 2
17986: PPUSH
17987: CALL_OW 311
17991: OR
17992: AND
17993: IFFALSE 18034
// begin ComCollect ( j , x , y ) ;
17995: LD_VAR 0 2
17999: PPUSH
18000: LD_VAR 0 6
18004: PPUSH
18005: LD_VAR 0 7
18009: PPUSH
18010: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
18014: LD_VAR 0 2
18018: PPUSH
18019: LD_VAR 0 8
18023: PPUSH
18024: CALL_OW 172
// exit ;
18028: POP
18029: POP
18030: POP
18031: POP
18032: GO 18042
// end ;
18034: GO 17916
18036: POP
18037: POP
// end ; end ;
18038: GO 17403
18040: POP
18041: POP
// end ; end_of_file
18042: PPOPN 9
18044: END
// export function SOS_UnitDestroyed ( un ) ; begin
18045: LD_INT 0
18047: PPUSH
// ComRadiation ( un ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL 19215 0 1
// end ;
18057: LD_VAR 0 2
18061: RET
// export function SOS_UnitKamikazed ( un ) ; begin
18062: LD_INT 0
18064: PPUSH
// ComRadiation ( un ) ;
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL 19215 0 1
// end ;
18074: LD_VAR 0 2
18078: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18079: LD_INT 0
18081: PPUSH
// end ;
18082: LD_VAR 0 4
18086: RET
// export function SOS_Command ( cmd ) ; begin
18087: LD_INT 0
18089: PPUSH
// end ;
18090: LD_VAR 0 2
18094: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18095: LD_INT 0
18097: PPUSH
// end ;
18098: LD_VAR 0 6
18102: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
18103: LD_INT 0
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
// if not vehicle or not factory then
18110: LD_VAR 0 1
18114: NOT
18115: IFTRUE 18124
18117: PUSH
18118: LD_VAR 0 2
18122: NOT
18123: OR
18124: IFFALSE 18128
// exit ;
18126: GO 18790
// weapon := GetWeapon ( vehicle ) ;
18128: LD_ADDR_VAR 0 7
18132: PUSH
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL_OW 264
18142: ST_TO_ADDR
// if weapon = ar_miner then
18143: LD_VAR 0 7
18147: PUSH
18148: LD_INT 81
18150: EQUAL
18151: IFFALSE 18208
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
18153: LD_ADDR_EXP 77
18157: PUSH
18158: LD_EXP 77
18162: PPUSH
18163: LD_EXP 77
18167: PUSH
18168: LD_INT 1
18170: PLUS
18171: PPUSH
18172: LD_VAR 0 1
18176: PPUSH
18177: CALL_OW 1
18181: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18182: LD_ADDR_EXP 78
18186: PUSH
18187: LD_EXP 78
18191: PPUSH
18192: LD_EXP 78
18196: PUSH
18197: LD_INT 1
18199: PLUS
18200: PPUSH
18201: EMPTY
18202: PPUSH
18203: CALL_OW 1
18207: ST_TO_ADDR
// end ; if not factoryWaypoints then
18208: LD_EXP 66
18212: NOT
18213: IFFALSE 18217
// exit ;
18215: GO 18790
// for i := 1 to Count ( factoryWaypoints ) do
18217: LD_ADDR_VAR 0 4
18221: PUSH
18222: DOUBLE
18223: LD_INT 1
18225: DEC
18226: ST_TO_ADDR
18227: LD_EXP 66
18231: PPUSH
18232: CALL 26906 0 1
18236: PUSH
18237: FOR_TO
18238: IFFALSE 18788
// if factoryWaypoints [ i ] [ 2 ] = factory then
18240: LD_EXP 66
18244: PUSH
18245: LD_VAR 0 4
18249: ARRAY
18250: PUSH
18251: LD_INT 2
18253: ARRAY
18254: PUSH
18255: LD_VAR 0 2
18259: EQUAL
18260: IFFALSE 18786
// begin if GetControl ( vehicle ) = control_manual then
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 263
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: IFFALSE 18639
// begin driver := IsDrivenBy ( vehicle ) ;
18277: LD_ADDR_VAR 0 5
18281: PUSH
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 311
18291: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
18292: LD_VAR 0 5
18296: PUSH
18297: LD_EXP 67
18301: IN
18302: IFTRUE 18316
18304: PUSH
18305: LD_VAR 0 1
18309: PUSH
18310: LD_EXP 67
18314: IN
18315: OR
18316: IFFALSE 18322
// exit ;
18318: POP
18319: POP
18320: GO 18790
// if not HasTask ( driver ) then
18322: LD_VAR 0 5
18326: PPUSH
18327: CALL_OW 314
18331: NOT
18332: IFFALSE 18637
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
18334: LD_ADDR_EXP 67
18338: PUSH
18339: LD_EXP 67
18343: PPUSH
18344: LD_VAR 0 5
18348: PPUSH
18349: CALL 62882 0 2
18353: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18354: LD_ADDR_EXP 67
18358: PUSH
18359: LD_EXP 67
18363: PPUSH
18364: LD_VAR 0 1
18368: PPUSH
18369: CALL 62882 0 2
18373: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18374: LD_ADDR_VAR 0 6
18378: PUSH
18379: LD_EXP 66
18383: PUSH
18384: LD_VAR 0 4
18388: ARRAY
18389: PUSH
18390: LD_INT 3
18392: ARRAY
18393: PPUSH
18394: LD_EXP 66
18398: PUSH
18399: LD_VAR 0 4
18403: ARRAY
18404: PUSH
18405: LD_INT 4
18407: ARRAY
18408: PPUSH
18409: CALL_OW 428
18413: ST_TO_ADDR
// if hex then
18414: LD_VAR 0 6
18418: IFFALSE 18436
// ComMoveUnit ( driver , hex ) else
18420: LD_VAR 0 5
18424: PPUSH
18425: LD_VAR 0 6
18429: PPUSH
18430: CALL_OW 112
18434: GO 18520
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18436: LD_VAR 0 1
18440: PPUSH
18441: LD_EXP 66
18445: PUSH
18446: LD_VAR 0 4
18450: ARRAY
18451: PUSH
18452: LD_INT 3
18454: ARRAY
18455: PPUSH
18456: LD_EXP 66
18460: PUSH
18461: LD_VAR 0 4
18465: ARRAY
18466: PUSH
18467: LD_INT 4
18469: ARRAY
18470: PPUSH
18471: CALL_OW 297
18475: PUSH
18476: LD_INT 0
18478: GREATER
18479: IFFALSE 18520
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18481: LD_VAR 0 5
18485: PPUSH
18486: LD_EXP 66
18490: PUSH
18491: LD_VAR 0 4
18495: ARRAY
18496: PUSH
18497: LD_INT 3
18499: ARRAY
18500: PPUSH
18501: LD_EXP 66
18505: PUSH
18506: LD_VAR 0 4
18510: ARRAY
18511: PUSH
18512: LD_INT 4
18514: ARRAY
18515: PPUSH
18516: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18520: LD_VAR 0 5
18524: PPUSH
18525: CALL_OW 181
// if Multiplayer then
18529: LD_OWVAR 4
18533: IFFALSE 18582
// begin repeat wait ( 10 ) ;
18535: LD_INT 10
18537: PPUSH
18538: CALL_OW 67
// until not IsInUnit ( driver ) ;
18542: LD_VAR 0 5
18546: PPUSH
18547: CALL_OW 310
18551: NOT
18552: IFFALSE 18535
// if not HasTask ( driver ) then
18554: LD_VAR 0 5
18558: PPUSH
18559: CALL_OW 314
18563: NOT
18564: IFFALSE 18580
// ComEnterUnit ( driver , factory ) ;
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 2
18575: PPUSH
18576: CALL_OW 120
// end else
18580: GO 18596
// AddComEnterUnit ( driver , factory ) ;
18582: LD_VAR 0 5
18586: PPUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 180
// wait ( 0 0$1 ) ;
18596: LD_INT 35
18598: PPUSH
18599: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18603: LD_ADDR_EXP 67
18607: PUSH
18608: LD_EXP 67
18612: PUSH
18613: LD_VAR 0 5
18617: DIFF
18618: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18619: LD_ADDR_EXP 67
18623: PUSH
18624: LD_EXP 67
18628: PUSH
18629: LD_VAR 0 1
18633: DIFF
18634: ST_TO_ADDR
// break ;
18635: GO 18788
// end ; end else
18637: GO 18786
// if GetControl ( vehicle ) = control_remote then
18639: LD_VAR 0 1
18643: PPUSH
18644: CALL_OW 263
18648: PUSH
18649: LD_INT 2
18651: EQUAL
18652: IFFALSE 18738
// begin wait ( 0 0$2 ) ;
18654: LD_INT 70
18656: PPUSH
18657: CALL_OW 67
// repeat wait ( 10 ) ;
18661: LD_INT 10
18663: PPUSH
18664: CALL_OW 67
// Connect ( vehicle ) ;
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL 33184 0 1
// until IsControledBy ( vehicle ) ;
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 312
18686: IFFALSE 18661
// wait ( 10 ) ;
18688: LD_INT 10
18690: PPUSH
18691: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18695: LD_VAR 0 1
18699: PPUSH
18700: LD_EXP 66
18704: PUSH
18705: LD_VAR 0 4
18709: ARRAY
18710: PUSH
18711: LD_INT 3
18713: ARRAY
18714: PPUSH
18715: LD_EXP 66
18719: PUSH
18720: LD_VAR 0 4
18724: ARRAY
18725: PUSH
18726: LD_INT 4
18728: ARRAY
18729: PPUSH
18730: CALL_OW 111
// break ;
18734: GO 18788
// end else
18736: GO 18786
// begin wait ( 0 0$3 ) ;
18738: LD_INT 105
18740: PPUSH
18741: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18745: LD_VAR 0 1
18749: PPUSH
18750: LD_EXP 66
18754: PUSH
18755: LD_VAR 0 4
18759: ARRAY
18760: PUSH
18761: LD_INT 3
18763: ARRAY
18764: PPUSH
18765: LD_EXP 66
18769: PUSH
18770: LD_VAR 0 4
18774: ARRAY
18775: PUSH
18776: LD_INT 4
18778: ARRAY
18779: PPUSH
18780: CALL_OW 111
// break ;
18784: GO 18788
// end ; end ;
18786: GO 18237
18788: POP
18789: POP
// end ;
18790: LD_VAR 0 3
18794: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18795: LD_INT 0
18797: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18798: LD_VAR 0 1
18802: PUSH
18803: LD_INT 250
18805: EQUAL
18806: IFFALSE 18823
18808: PUSH
18809: LD_VAR 0 2
18813: PPUSH
18814: CALL_OW 264
18818: PUSH
18819: LD_INT 81
18821: EQUAL
18822: AND
18823: IFFALSE 18844
// MinerPlaceMine ( unit , x , y ) ;
18825: LD_VAR 0 2
18829: PPUSH
18830: LD_VAR 0 4
18834: PPUSH
18835: LD_VAR 0 5
18839: PPUSH
18840: CALL 22190 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18844: LD_VAR 0 1
18848: PUSH
18849: LD_INT 251
18851: EQUAL
18852: IFFALSE 18869
18854: PUSH
18855: LD_VAR 0 2
18859: PPUSH
18860: CALL_OW 264
18864: PUSH
18865: LD_INT 81
18867: EQUAL
18868: AND
18869: IFFALSE 18890
// MinerDetonateMine ( unit , x , y ) ;
18871: LD_VAR 0 2
18875: PPUSH
18876: LD_VAR 0 4
18880: PPUSH
18881: LD_VAR 0 5
18885: PPUSH
18886: CALL 22597 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18890: LD_VAR 0 1
18894: PUSH
18895: LD_INT 252
18897: EQUAL
18898: IFFALSE 18915
18900: PUSH
18901: LD_VAR 0 2
18905: PPUSH
18906: CALL_OW 264
18910: PUSH
18911: LD_INT 81
18913: EQUAL
18914: AND
18915: IFFALSE 18936
// MinerCreateMinefield ( unit , x , y ) ;
18917: LD_VAR 0 2
18921: PPUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 5
18931: PPUSH
18932: CALL 22829 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18936: LD_VAR 0 1
18940: PUSH
18941: LD_INT 253
18943: EQUAL
18944: IFFALSE 18961
18946: PUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: CALL_OW 257
18956: PUSH
18957: LD_INT 5
18959: EQUAL
18960: AND
18961: IFFALSE 18982
// ComBinocular ( unit , x , y ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_VAR 0 4
18972: PPUSH
18973: LD_VAR 0 5
18977: PPUSH
18978: CALL 23204 0 3
// if selectedUnit then
18982: LD_VAR 0 3
18986: IFFALSE 19046
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18988: LD_VAR 0 1
18992: PUSH
18993: LD_INT 254
18995: EQUAL
18996: IFFALSE 19013
18998: PUSH
18999: LD_VAR 0 2
19003: PPUSH
19004: CALL_OW 264
19008: PUSH
19009: LD_INT 99
19011: EQUAL
19012: AND
19013: IFFALSE 19030
19015: PUSH
19016: LD_VAR 0 3
19020: PPUSH
19021: CALL_OW 263
19025: PUSH
19026: LD_INT 3
19028: EQUAL
19029: AND
19030: IFFALSE 19046
// HackDestroyVehicle ( unit , selectedUnit ) ;
19032: LD_VAR 0 2
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: CALL 21380 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19046: LD_VAR 0 1
19050: PUSH
19051: LD_INT 255
19053: EQUAL
19054: IFFALSE 19078
19056: PUSH
19057: LD_VAR 0 2
19061: PPUSH
19062: CALL_OW 264
19066: PUSH
19067: LD_INT 14
19069: PUSH
19070: LD_INT 53
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: IN
19077: AND
19078: IFFALSE 19096
19080: PUSH
19081: LD_VAR 0 4
19085: PPUSH
19086: LD_VAR 0 5
19090: PPUSH
19091: CALL_OW 488
19095: AND
19096: IFFALSE 19120
// CutTreeXYR ( unit , x , y , 12 ) ;
19098: LD_VAR 0 2
19102: PPUSH
19103: LD_VAR 0 4
19107: PPUSH
19108: LD_VAR 0 5
19112: PPUSH
19113: LD_INT 12
19115: PPUSH
19116: CALL 19311 0 4
// if cmd = 256 then
19120: LD_VAR 0 1
19124: PUSH
19125: LD_INT 256
19127: EQUAL
19128: IFFALSE 19149
// SetFactoryWaypoint ( unit , x , y ) ;
19130: LD_VAR 0 2
19134: PPUSH
19135: LD_VAR 0 4
19139: PPUSH
19140: LD_VAR 0 5
19144: PPUSH
19145: CALL 16590 0 3
// if cmd = 257 then
19149: LD_VAR 0 1
19153: PUSH
19154: LD_INT 257
19156: EQUAL
19157: IFFALSE 19178
// SetWarehouseGatheringPoint ( unit , x , y ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 17086 0 3
// if cmd = 258 then
19178: LD_VAR 0 1
19182: PUSH
19183: LD_INT 258
19185: EQUAL
19186: IFFALSE 19210
// BurnTreeXYR ( unit , x , y , 8 ) ;
19188: LD_VAR 0 2
19192: PPUSH
19193: LD_VAR 0 4
19197: PPUSH
19198: LD_VAR 0 5
19202: PPUSH
19203: LD_INT 8
19205: PPUSH
19206: CALL 19733 0 4
// end ;
19210: LD_VAR 0 6
19214: RET
// export function ComRadiation ( un ) ; var eff ; begin
19215: LD_INT 0
19217: PPUSH
19218: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
19219: LD_VAR 0 1
19223: PPUSH
19224: CALL_OW 264
19228: PUSH
19229: LD_INT 91
19231: NONEQUAL
19232: IFFALSE 19236
// exit ;
19234: GO 19306
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19236: LD_INT 68
19238: PPUSH
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 255
19248: PPUSH
19249: CALL_OW 321
19253: PUSH
19254: LD_INT 2
19256: EQUAL
19257: IFFALSE 19269
// eff := 50 else
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: LD_INT 50
19266: ST_TO_ADDR
19267: GO 19277
// eff := 25 ;
19269: LD_ADDR_VAR 0 3
19273: PUSH
19274: LD_INT 25
19276: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 250
19286: PPUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 251
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 495
// end ;
19306: LD_VAR 0 2
19310: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19311: LD_INT 0
19313: PPUSH
19314: PPUSH
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
19319: PPUSH
19320: PPUSH
19321: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
19322: LD_VAR 0 1
19326: PPUSH
19327: CALL_OW 302
19331: NOT
19332: IFTRUE 19351
19334: PUSH
19335: LD_VAR 0 2
19339: PPUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: CALL_OW 488
19349: NOT
19350: OR
19351: IFTRUE 19360
19353: PUSH
19354: LD_VAR 0 4
19358: NOT
19359: OR
19360: IFFALSE 19364
// exit ;
19362: GO 19728
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 437
19373: PPUSH
19374: CALL 26906 0 1
19378: PUSH
19379: LD_INT 10
19381: GREATER
19382: IFFALSE 19386
// exit ;
19384: GO 19728
// list := [ ] ;
19386: LD_ADDR_VAR 0 13
19390: PUSH
19391: EMPTY
19392: ST_TO_ADDR
// if x - r < 0 then
19393: LD_VAR 0 2
19397: PUSH
19398: LD_VAR 0 4
19402: MINUS
19403: PUSH
19404: LD_INT 0
19406: LESS
19407: IFFALSE 19419
// min_x := 0 else
19409: LD_ADDR_VAR 0 7
19413: PUSH
19414: LD_INT 0
19416: ST_TO_ADDR
19417: GO 19435
// min_x := x - r ;
19419: LD_ADDR_VAR 0 7
19423: PUSH
19424: LD_VAR 0 2
19428: PUSH
19429: LD_VAR 0 4
19433: MINUS
19434: ST_TO_ADDR
// if y - r < 0 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_VAR 0 4
19444: MINUS
19445: PUSH
19446: LD_INT 0
19448: LESS
19449: IFFALSE 19461
// min_y := 0 else
19451: LD_ADDR_VAR 0 8
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
19459: GO 19477
// min_y := y - r ;
19461: LD_ADDR_VAR 0 8
19465: PUSH
19466: LD_VAR 0 3
19470: PUSH
19471: LD_VAR 0 4
19475: MINUS
19476: ST_TO_ADDR
// max_x := x + r ;
19477: LD_ADDR_VAR 0 9
19481: PUSH
19482: LD_VAR 0 2
19486: PUSH
19487: LD_VAR 0 4
19491: PLUS
19492: ST_TO_ADDR
// max_y := y + r ;
19493: LD_ADDR_VAR 0 10
19497: PUSH
19498: LD_VAR 0 3
19502: PUSH
19503: LD_VAR 0 4
19507: PLUS
19508: ST_TO_ADDR
// for _x = min_x to max_x do
19509: LD_ADDR_VAR 0 11
19513: PUSH
19514: DOUBLE
19515: LD_VAR 0 7
19519: DEC
19520: ST_TO_ADDR
19521: LD_VAR 0 9
19525: PUSH
19526: FOR_TO
19527: IFFALSE 19646
// for _y = min_y to max_y do
19529: LD_ADDR_VAR 0 12
19533: PUSH
19534: DOUBLE
19535: LD_VAR 0 8
19539: DEC
19540: ST_TO_ADDR
19541: LD_VAR 0 10
19545: PUSH
19546: FOR_TO
19547: IFFALSE 19642
// begin if not ValidHex ( _x , _y ) then
19549: LD_VAR 0 11
19553: PPUSH
19554: LD_VAR 0 12
19558: PPUSH
19559: CALL_OW 488
19563: NOT
19564: IFFALSE 19568
// continue ;
19566: GO 19546
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19568: LD_VAR 0 11
19572: PPUSH
19573: LD_VAR 0 12
19577: PPUSH
19578: CALL_OW 351
19582: IFFALSE 19600
19584: PUSH
19585: LD_VAR 0 11
19589: PPUSH
19590: LD_VAR 0 12
19594: PPUSH
19595: CALL_OW 554
19599: AND
19600: IFFALSE 19640
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19602: LD_ADDR_VAR 0 13
19606: PUSH
19607: LD_VAR 0 13
19611: PPUSH
19612: LD_VAR 0 13
19616: PUSH
19617: LD_INT 1
19619: PLUS
19620: PPUSH
19621: LD_VAR 0 11
19625: PUSH
19626: LD_VAR 0 12
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 2
19639: ST_TO_ADDR
// end ;
19640: GO 19546
19642: POP
19643: POP
19644: GO 19526
19646: POP
19647: POP
// if not list then
19648: LD_VAR 0 13
19652: NOT
19653: IFFALSE 19657
// exit ;
19655: GO 19728
// for i in list do
19657: LD_ADDR_VAR 0 6
19661: PUSH
19662: LD_VAR 0 13
19666: PUSH
19667: FOR_IN
19668: IFFALSE 19726
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19670: LD_VAR 0 1
19674: PPUSH
19675: LD_STRING M
19677: PUSH
19678: LD_VAR 0 6
19682: PUSH
19683: LD_INT 1
19685: ARRAY
19686: PUSH
19687: LD_VAR 0 6
19691: PUSH
19692: LD_INT 2
19694: ARRAY
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: PPUSH
19720: CALL_OW 447
19724: GO 19667
19726: POP
19727: POP
// end ;
19728: LD_VAR 0 5
19732: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19733: LD_INT 0
19735: PPUSH
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
19740: PPUSH
19741: PPUSH
19742: PPUSH
19743: PPUSH
19744: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 302
19754: NOT
19755: IFTRUE 19774
19757: PUSH
19758: LD_VAR 0 2
19762: PPUSH
19763: LD_VAR 0 3
19767: PPUSH
19768: CALL_OW 488
19772: NOT
19773: OR
19774: IFTRUE 19783
19776: PUSH
19777: LD_VAR 0 4
19781: NOT
19782: OR
19783: IFFALSE 19787
// exit ;
19785: GO 20326
// if Count ( GetTaskList ( flame ) ) > 10 then
19787: LD_VAR 0 1
19791: PPUSH
19792: CALL_OW 437
19796: PPUSH
19797: CALL 26906 0 1
19801: PUSH
19802: LD_INT 10
19804: GREATER
19805: IFFALSE 19809
// exit ;
19807: GO 20326
// list := [ ] ;
19809: LD_ADDR_VAR 0 13
19813: PUSH
19814: EMPTY
19815: ST_TO_ADDR
// if x - r < 0 then
19816: LD_VAR 0 2
19820: PUSH
19821: LD_VAR 0 4
19825: MINUS
19826: PUSH
19827: LD_INT 0
19829: LESS
19830: IFFALSE 19842
// min_x := 0 else
19832: LD_ADDR_VAR 0 7
19836: PUSH
19837: LD_INT 0
19839: ST_TO_ADDR
19840: GO 19858
// min_x := x - r ;
19842: LD_ADDR_VAR 0 7
19846: PUSH
19847: LD_VAR 0 2
19851: PUSH
19852: LD_VAR 0 4
19856: MINUS
19857: ST_TO_ADDR
// if y - r < 0 then
19858: LD_VAR 0 3
19862: PUSH
19863: LD_VAR 0 4
19867: MINUS
19868: PUSH
19869: LD_INT 0
19871: LESS
19872: IFFALSE 19884
// min_y := 0 else
19874: LD_ADDR_VAR 0 8
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
19882: GO 19900
// min_y := y - r ;
19884: LD_ADDR_VAR 0 8
19888: PUSH
19889: LD_VAR 0 3
19893: PUSH
19894: LD_VAR 0 4
19898: MINUS
19899: ST_TO_ADDR
// max_x := x + r ;
19900: LD_ADDR_VAR 0 9
19904: PUSH
19905: LD_VAR 0 2
19909: PUSH
19910: LD_VAR 0 4
19914: PLUS
19915: ST_TO_ADDR
// max_y := y + r ;
19916: LD_ADDR_VAR 0 10
19920: PUSH
19921: LD_VAR 0 3
19925: PUSH
19926: LD_VAR 0 4
19930: PLUS
19931: ST_TO_ADDR
// for _x = min_x to max_x do
19932: LD_ADDR_VAR 0 11
19936: PUSH
19937: DOUBLE
19938: LD_VAR 0 7
19942: DEC
19943: ST_TO_ADDR
19944: LD_VAR 0 9
19948: PUSH
19949: FOR_TO
19950: IFFALSE 20069
// for _y = min_y to max_y do
19952: LD_ADDR_VAR 0 12
19956: PUSH
19957: DOUBLE
19958: LD_VAR 0 8
19962: DEC
19963: ST_TO_ADDR
19964: LD_VAR 0 10
19968: PUSH
19969: FOR_TO
19970: IFFALSE 20065
// begin if not ValidHex ( _x , _y ) then
19972: LD_VAR 0 11
19976: PPUSH
19977: LD_VAR 0 12
19981: PPUSH
19982: CALL_OW 488
19986: NOT
19987: IFFALSE 19991
// continue ;
19989: GO 19969
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19991: LD_VAR 0 11
19995: PPUSH
19996: LD_VAR 0 12
20000: PPUSH
20001: CALL_OW 351
20005: IFFALSE 20023
20007: PUSH
20008: LD_VAR 0 11
20012: PPUSH
20013: LD_VAR 0 12
20017: PPUSH
20018: CALL_OW 554
20022: AND
20023: IFFALSE 20063
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20025: LD_ADDR_VAR 0 13
20029: PUSH
20030: LD_VAR 0 13
20034: PPUSH
20035: LD_VAR 0 13
20039: PUSH
20040: LD_INT 1
20042: PLUS
20043: PPUSH
20044: LD_VAR 0 11
20048: PUSH
20049: LD_VAR 0 12
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 2
20062: ST_TO_ADDR
// end ;
20063: GO 19969
20065: POP
20066: POP
20067: GO 19949
20069: POP
20070: POP
// if not list then
20071: LD_VAR 0 13
20075: NOT
20076: IFFALSE 20080
// exit ;
20078: GO 20326
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
20080: LD_ADDR_VAR 0 13
20084: PUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_VAR 0 13
20094: PPUSH
20095: LD_INT 1
20097: PPUSH
20098: LD_INT 1
20100: PPUSH
20101: CALL 30312 0 4
20105: ST_TO_ADDR
// ComStop ( flame ) ;
20106: LD_VAR 0 1
20110: PPUSH
20111: CALL_OW 141
// for i in list do
20115: LD_ADDR_VAR 0 6
20119: PUSH
20120: LD_VAR 0 13
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20157
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
20128: LD_VAR 0 1
20132: PPUSH
20133: LD_VAR 0 6
20137: PUSH
20138: LD_INT 1
20140: ARRAY
20141: PPUSH
20142: LD_VAR 0 6
20146: PUSH
20147: LD_INT 2
20149: ARRAY
20150: PPUSH
20151: CALL_OW 176
20155: GO 20125
20157: POP
20158: POP
// repeat wait ( 0 0$1 ) ;
20159: LD_INT 35
20161: PPUSH
20162: CALL_OW 67
// task := GetTaskList ( flame ) ;
20166: LD_ADDR_VAR 0 14
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 437
20180: ST_TO_ADDR
// if not task then
20181: LD_VAR 0 14
20185: NOT
20186: IFFALSE 20190
// exit ;
20188: GO 20326
// if task [ 1 ] [ 1 ] <> | then
20190: LD_VAR 0 14
20194: PUSH
20195: LD_INT 1
20197: ARRAY
20198: PUSH
20199: LD_INT 1
20201: ARRAY
20202: PUSH
20203: LD_STRING |
20205: NONEQUAL
20206: IFFALSE 20210
// exit ;
20208: GO 20326
// _x := task [ 1 ] [ 2 ] ;
20210: LD_ADDR_VAR 0 11
20214: PUSH
20215: LD_VAR 0 14
20219: PUSH
20220: LD_INT 1
20222: ARRAY
20223: PUSH
20224: LD_INT 2
20226: ARRAY
20227: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
20228: LD_ADDR_VAR 0 12
20232: PUSH
20233: LD_VAR 0 14
20237: PUSH
20238: LD_INT 1
20240: ARRAY
20241: PUSH
20242: LD_INT 3
20244: ARRAY
20245: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
20246: LD_VAR 0 11
20250: PPUSH
20251: LD_VAR 0 12
20255: PPUSH
20256: CALL_OW 351
20260: NOT
20261: IFTRUE 20280
20263: PUSH
20264: LD_VAR 0 11
20268: PPUSH
20269: LD_VAR 0 12
20273: PPUSH
20274: CALL_OW 554
20278: NOT
20279: OR
20280: IFFALSE 20314
// begin task := Delete ( task , 1 ) ;
20282: LD_ADDR_VAR 0 14
20286: PUSH
20287: LD_VAR 0 14
20291: PPUSH
20292: LD_INT 1
20294: PPUSH
20295: CALL_OW 3
20299: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_VAR 0 14
20309: PPUSH
20310: CALL_OW 446
// end ; until not HasTask ( flame ) ;
20314: LD_VAR 0 1
20318: PPUSH
20319: CALL_OW 314
20323: NOT
20324: IFFALSE 20159
// end ;
20326: LD_VAR 0 5
20330: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20331: LD_EXP 70
20335: NOT
20336: IFFALSE 20386
20338: GO 20340
20340: DISABLE
// begin initHack := true ;
20341: LD_ADDR_EXP 70
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// hackTanks := [ ] ;
20349: LD_ADDR_EXP 71
20353: PUSH
20354: EMPTY
20355: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20356: LD_ADDR_EXP 72
20360: PUSH
20361: EMPTY
20362: ST_TO_ADDR
// hackLimit := 3 ;
20363: LD_ADDR_EXP 73
20367: PUSH
20368: LD_INT 3
20370: ST_TO_ADDR
// hackDist := 12 ;
20371: LD_ADDR_EXP 74
20375: PUSH
20376: LD_INT 12
20378: ST_TO_ADDR
// hackCounter := [ ] ;
20379: LD_ADDR_EXP 75
20383: PUSH
20384: EMPTY
20385: ST_TO_ADDR
// end ;
20386: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20387: LD_EXP 70
20391: IFFALSE 20409
20393: PUSH
20394: LD_INT 34
20396: PUSH
20397: LD_INT 99
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PPUSH
20404: CALL_OW 69
20408: AND
20409: IFFALSE 20662
20411: GO 20413
20413: DISABLE
20414: LD_INT 0
20416: PPUSH
20417: PPUSH
// begin enable ;
20418: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20419: LD_ADDR_VAR 0 1
20423: PUSH
20424: LD_INT 34
20426: PUSH
20427: LD_INT 99
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20660
// begin if not i in hackTanks then
20442: LD_VAR 0 1
20446: PUSH
20447: LD_EXP 71
20451: IN
20452: NOT
20453: IFFALSE 20536
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20455: LD_ADDR_EXP 71
20459: PUSH
20460: LD_EXP 71
20464: PPUSH
20465: LD_EXP 71
20469: PUSH
20470: LD_INT 1
20472: PLUS
20473: PPUSH
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 1
20483: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20484: LD_ADDR_EXP 72
20488: PUSH
20489: LD_EXP 72
20493: PPUSH
20494: LD_EXP 72
20498: PUSH
20499: LD_INT 1
20501: PLUS
20502: PPUSH
20503: EMPTY
20504: PPUSH
20505: CALL_OW 1
20509: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20510: LD_ADDR_EXP 75
20514: PUSH
20515: LD_EXP 75
20519: PPUSH
20520: LD_EXP 75
20524: PUSH
20525: LD_INT 1
20527: PLUS
20528: PPUSH
20529: EMPTY
20530: PPUSH
20531: CALL_OW 1
20535: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 302
20545: NOT
20546: IFFALSE 20559
// begin HackUnlinkAll ( i ) ;
20548: LD_VAR 0 1
20552: PPUSH
20553: CALL 20665 0 1
// continue ;
20557: GO 20439
// end ; HackCheckCapturedStatus ( i ) ;
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL 21110 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20568: LD_ADDR_VAR 0 2
20572: PUSH
20573: LD_INT 81
20575: PUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 255
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 33
20592: PUSH
20593: LD_INT 3
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 91
20602: PUSH
20603: LD_VAR 0 1
20607: PUSH
20608: LD_EXP 74
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 50
20620: PUSH
20621: EMPTY
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: ST_TO_ADDR
// if not tmp then
20635: LD_VAR 0 2
20639: NOT
20640: IFFALSE 20644
// continue ;
20642: GO 20439
// HackLink ( i , tmp ) ;
20644: LD_VAR 0 1
20648: PPUSH
20649: LD_VAR 0 2
20653: PPUSH
20654: CALL 20801 0 2
// end ;
20658: GO 20439
20660: POP
20661: POP
// end ;
20662: PPOPN 2
20664: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
20669: PPUSH
// if not hack in hackTanks then
20670: LD_VAR 0 1
20674: PUSH
20675: LD_EXP 71
20679: IN
20680: NOT
20681: IFFALSE 20685
// exit ;
20683: GO 20796
// index := GetElementIndex ( hackTanks , hack ) ;
20685: LD_ADDR_VAR 0 4
20689: PUSH
20690: LD_EXP 71
20694: PPUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL 29607 0 2
20704: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20705: LD_EXP 72
20709: PUSH
20710: LD_VAR 0 4
20714: ARRAY
20715: IFFALSE 20796
// begin for i in hackTanksCaptured [ index ] do
20717: LD_ADDR_VAR 0 3
20721: PUSH
20722: LD_EXP 72
20726: PUSH
20727: LD_VAR 0 4
20731: ARRAY
20732: PUSH
20733: FOR_IN
20734: IFFALSE 20760
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20736: LD_VAR 0 3
20740: PUSH
20741: LD_INT 1
20743: ARRAY
20744: PPUSH
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 2
20752: ARRAY
20753: PPUSH
20754: CALL_OW 235
20758: GO 20733
20760: POP
20761: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20762: LD_ADDR_EXP 72
20766: PUSH
20767: LD_EXP 72
20771: PPUSH
20772: LD_VAR 0 4
20776: PPUSH
20777: EMPTY
20778: PPUSH
20779: CALL_OW 1
20783: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_INT 0
20791: PPUSH
20792: CALL_OW 505
// end ; end ;
20796: LD_VAR 0 2
20800: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20801: LD_INT 0
20803: PPUSH
20804: PPUSH
20805: PPUSH
// if not hack in hackTanks or not vehicles then
20806: LD_VAR 0 1
20810: PUSH
20811: LD_EXP 71
20815: IN
20816: NOT
20817: IFTRUE 20826
20819: PUSH
20820: LD_VAR 0 2
20824: NOT
20825: OR
20826: IFFALSE 20830
// exit ;
20828: GO 21105
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20830: LD_ADDR_VAR 0 2
20834: PUSH
20835: LD_VAR 0 1
20839: PPUSH
20840: LD_VAR 0 2
20844: PPUSH
20845: LD_INT 1
20847: PPUSH
20848: LD_INT 1
20850: PPUSH
20851: CALL 30259 0 4
20855: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20856: LD_ADDR_VAR 0 5
20860: PUSH
20861: LD_EXP 71
20865: PPUSH
20866: LD_VAR 0 1
20870: PPUSH
20871: CALL 29607 0 2
20875: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20876: LD_EXP 72
20880: PUSH
20881: LD_VAR 0 5
20885: ARRAY
20886: PUSH
20887: LD_EXP 73
20891: LESS
20892: IFFALSE 21081
// begin for i := 1 to vehicles do
20894: LD_ADDR_VAR 0 4
20898: PUSH
20899: DOUBLE
20900: LD_INT 1
20902: DEC
20903: ST_TO_ADDR
20904: LD_VAR 0 2
20908: PUSH
20909: FOR_TO
20910: IFFALSE 21079
// begin if hackTanksCaptured [ index ] = hackLimit then
20912: LD_EXP 72
20916: PUSH
20917: LD_VAR 0 5
20921: ARRAY
20922: PUSH
20923: LD_EXP 73
20927: EQUAL
20928: IFFALSE 20932
// break ;
20930: GO 21079
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20932: LD_ADDR_EXP 75
20936: PUSH
20937: LD_EXP 75
20941: PPUSH
20942: LD_VAR 0 5
20946: PPUSH
20947: LD_EXP 75
20951: PUSH
20952: LD_VAR 0 5
20956: ARRAY
20957: PUSH
20958: LD_INT 1
20960: PLUS
20961: PPUSH
20962: CALL_OW 1
20966: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20967: LD_ADDR_EXP 72
20971: PUSH
20972: LD_EXP 72
20976: PPUSH
20977: LD_VAR 0 5
20981: PUSH
20982: LD_EXP 72
20986: PUSH
20987: LD_VAR 0 5
20991: ARRAY
20992: PUSH
20993: LD_INT 1
20995: PLUS
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PPUSH
21001: LD_VAR 0 2
21005: PUSH
21006: LD_VAR 0 4
21010: ARRAY
21011: PUSH
21012: LD_VAR 0 2
21016: PUSH
21017: LD_VAR 0 4
21021: ARRAY
21022: PPUSH
21023: CALL_OW 255
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PPUSH
21032: CALL 29824 0 3
21036: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21037: LD_VAR 0 2
21041: PUSH
21042: LD_VAR 0 4
21046: ARRAY
21047: PPUSH
21048: LD_VAR 0 1
21052: PPUSH
21053: CALL_OW 255
21057: PPUSH
21058: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21062: LD_VAR 0 2
21066: PUSH
21067: LD_VAR 0 4
21071: ARRAY
21072: PPUSH
21073: CALL_OW 141
// end ;
21077: GO 20909
21079: POP
21080: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_EXP 72
21090: PUSH
21091: LD_VAR 0 5
21095: ARRAY
21096: PUSH
21097: LD_INT 0
21099: PLUS
21100: PPUSH
21101: CALL_OW 505
// end ;
21105: LD_VAR 0 3
21109: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21110: LD_INT 0
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
// if not hack in hackTanks then
21116: LD_VAR 0 1
21120: PUSH
21121: LD_EXP 71
21125: IN
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21375
// index := GetElementIndex ( hackTanks , hack ) ;
21131: LD_ADDR_VAR 0 4
21135: PUSH
21136: LD_EXP 71
21140: PPUSH
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL 29607 0 2
21150: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: DOUBLE
21157: LD_EXP 72
21161: PUSH
21162: LD_VAR 0 4
21166: ARRAY
21167: INC
21168: ST_TO_ADDR
21169: LD_INT 1
21171: PUSH
21172: FOR_DOWNTO
21173: IFFALSE 21349
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21175: LD_ADDR_VAR 0 5
21179: PUSH
21180: LD_EXP 72
21184: PUSH
21185: LD_VAR 0 4
21189: ARRAY
21190: PUSH
21191: LD_VAR 0 3
21195: ARRAY
21196: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21197: LD_VAR 0 5
21201: PUSH
21202: LD_INT 1
21204: ARRAY
21205: PPUSH
21206: CALL_OW 302
21210: NOT
21211: IFTRUE 21239
21213: PUSH
21214: LD_VAR 0 5
21218: PUSH
21219: LD_INT 1
21221: ARRAY
21222: PPUSH
21223: CALL_OW 255
21227: PUSH
21228: LD_VAR 0 1
21232: PPUSH
21233: CALL_OW 255
21237: NONEQUAL
21238: OR
21239: IFFALSE 21347
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21241: LD_VAR 0 5
21245: PUSH
21246: LD_INT 1
21248: ARRAY
21249: PPUSH
21250: CALL_OW 305
21254: IFFALSE 21282
21256: PUSH
21257: LD_VAR 0 5
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: CALL_OW 255
21270: PUSH
21271: LD_VAR 0 1
21275: PPUSH
21276: CALL_OW 255
21280: EQUAL
21281: AND
21282: IFFALSE 21306
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21284: LD_VAR 0 5
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PPUSH
21293: LD_VAR 0 5
21297: PUSH
21298: LD_INT 2
21300: ARRAY
21301: PPUSH
21302: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21306: LD_ADDR_EXP 72
21310: PUSH
21311: LD_EXP 72
21315: PPUSH
21316: LD_VAR 0 4
21320: PPUSH
21321: LD_EXP 72
21325: PUSH
21326: LD_VAR 0 4
21330: ARRAY
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: CALL_OW 3
21341: PPUSH
21342: CALL_OW 1
21346: ST_TO_ADDR
// end ; end ;
21347: GO 21172
21349: POP
21350: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21351: LD_VAR 0 1
21355: PPUSH
21356: LD_EXP 72
21360: PUSH
21361: LD_VAR 0 4
21365: ARRAY
21366: PUSH
21367: LD_INT 0
21369: PLUS
21370: PPUSH
21371: CALL_OW 505
// end ;
21375: LD_VAR 0 2
21379: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21380: LD_INT 0
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
// if not hack in hackTanks then
21386: LD_VAR 0 1
21390: PUSH
21391: LD_EXP 71
21395: IN
21396: NOT
21397: IFFALSE 21401
// exit ;
21399: GO 21486
// index := GetElementIndex ( hackTanks , hack ) ;
21401: LD_ADDR_VAR 0 5
21405: PUSH
21406: LD_EXP 71
21410: PPUSH
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL 29607 0 2
21420: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21421: LD_ADDR_VAR 0 4
21425: PUSH
21426: DOUBLE
21427: LD_INT 1
21429: DEC
21430: ST_TO_ADDR
21431: LD_EXP 72
21435: PUSH
21436: LD_VAR 0 5
21440: ARRAY
21441: PUSH
21442: FOR_TO
21443: IFFALSE 21484
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21445: LD_EXP 72
21449: PUSH
21450: LD_VAR 0 5
21454: ARRAY
21455: PUSH
21456: LD_VAR 0 4
21460: ARRAY
21461: PUSH
21462: LD_INT 1
21464: ARRAY
21465: PUSH
21466: LD_VAR 0 2
21470: EQUAL
21471: IFFALSE 21482
// KillUnit ( vehicle ) ;
21473: LD_VAR 0 2
21477: PPUSH
21478: CALL_OW 66
21482: GO 21442
21484: POP
21485: POP
// end ;
21486: LD_VAR 0 3
21490: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
21491: LD_EXP 76
21495: NOT
21496: IFFALSE 21629
21498: GO 21500
21500: DISABLE
21501: LD_INT 0
21503: PPUSH
// begin initMiner := true ;
21504: LD_ADDR_EXP 76
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// minersList := [ ] ;
21512: LD_ADDR_EXP 77
21516: PUSH
21517: EMPTY
21518: ST_TO_ADDR
// minerMinesList := [ ] ;
21519: LD_ADDR_EXP 78
21523: PUSH
21524: EMPTY
21525: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
21526: LD_ADDR_EXP 79
21530: PUSH
21531: LD_INT 10
21533: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21534: LD_ADDR_VAR 0 1
21538: PUSH
21539: LD_INT 34
21541: PUSH
21542: LD_INT 81
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 69
21553: PUSH
21554: FOR_IN
21555: IFFALSE 21627
// begin if not i in minersList then
21557: LD_VAR 0 1
21561: PUSH
21562: LD_EXP 77
21566: IN
21567: NOT
21568: IFFALSE 21625
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21570: LD_ADDR_EXP 77
21574: PUSH
21575: LD_EXP 77
21579: PPUSH
21580: LD_EXP 77
21584: PUSH
21585: LD_INT 1
21587: PLUS
21588: PPUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 1
21598: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21599: LD_ADDR_EXP 78
21603: PUSH
21604: LD_EXP 78
21608: PPUSH
21609: LD_EXP 78
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: PPUSH
21618: EMPTY
21619: PPUSH
21620: CALL_OW 1
21624: ST_TO_ADDR
// end end ;
21625: GO 21554
21627: POP
21628: POP
// end ;
21629: PPOPN 1
21631: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
21632: LD_EXP 76
21636: IFFALSE 21667
21638: PUSH
21639: LD_EXP 78
21643: PPUSH
21644: CALL 26906 0 1
21648: IFTRUE 21666
21650: PUSH
21651: LD_INT 34
21653: PUSH
21654: LD_INT 81
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 69
21665: OR
21666: AND
21667: IFFALSE 22187
21669: GO 21671
21671: DISABLE
21672: LD_INT 0
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
// begin enable ;
21678: ENABLE
// for i := minerMinesList downto 1 do
21679: LD_ADDR_VAR 0 1
21683: PUSH
21684: DOUBLE
21685: LD_EXP 78
21689: INC
21690: ST_TO_ADDR
21691: LD_INT 1
21693: PUSH
21694: FOR_DOWNTO
21695: IFFALSE 22185
// begin side := GetSide ( minersList [ i ] ) ;
21697: LD_ADDR_VAR 0 3
21701: PUSH
21702: LD_EXP 77
21706: PUSH
21707: LD_VAR 0 1
21711: ARRAY
21712: PPUSH
21713: CALL_OW 255
21717: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
21718: LD_EXP 77
21722: PUSH
21723: LD_VAR 0 1
21727: ARRAY
21728: PPUSH
21729: CALL_OW 300
21733: IFFALSE 21754
21735: PUSH
21736: LD_VAR 0 3
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: LD_INT 9
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: IN
21753: AND
21754: IFFALSE 21787
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
21756: LD_EXP 77
21760: PUSH
21761: LD_VAR 0 1
21765: ARRAY
21766: PPUSH
21767: LD_EXP 78
21771: PUSH
21772: LD_VAR 0 1
21776: ARRAY
21777: PPUSH
21778: CALL 26906 0 1
21782: PPUSH
21783: CALL_OW 505
// if not minerMinesList [ i ] then
21787: LD_EXP 78
21791: PUSH
21792: LD_VAR 0 1
21796: ARRAY
21797: NOT
21798: IFFALSE 21802
// continue ;
21800: GO 21694
// for j := minerMinesList [ i ] downto 1 do
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: DOUBLE
21808: LD_EXP 78
21812: PUSH
21813: LD_VAR 0 1
21817: ARRAY
21818: INC
21819: ST_TO_ADDR
21820: LD_INT 1
21822: PUSH
21823: FOR_DOWNTO
21824: IFFALSE 22181
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
21826: LD_EXP 77
21830: PUSH
21831: LD_VAR 0 1
21835: ARRAY
21836: PPUSH
21837: CALL_OW 301
21841: IFTRUE 21861
21843: PUSH
21844: LD_EXP 77
21848: PUSH
21849: LD_VAR 0 1
21853: ARRAY
21854: PPUSH
21855: CALL_OW 305
21859: NOT
21860: OR
21861: IFFALSE 21952
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21863: LD_EXP 78
21867: PUSH
21868: LD_VAR 0 1
21872: ARRAY
21873: PUSH
21874: LD_VAR 0 2
21878: ARRAY
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: PPUSH
21884: LD_EXP 78
21888: PUSH
21889: LD_VAR 0 1
21893: ARRAY
21894: PUSH
21895: LD_VAR 0 2
21899: ARRAY
21900: PUSH
21901: LD_INT 2
21903: ARRAY
21904: PPUSH
21905: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21909: LD_ADDR_EXP 78
21913: PUSH
21914: LD_EXP 78
21918: PPUSH
21919: LD_VAR 0 1
21923: PPUSH
21924: LD_EXP 78
21928: PUSH
21929: LD_VAR 0 1
21933: ARRAY
21934: PPUSH
21935: LD_VAR 0 2
21939: PPUSH
21940: CALL_OW 3
21944: PPUSH
21945: CALL_OW 1
21949: ST_TO_ADDR
// continue ;
21950: GO 21823
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21952: LD_ADDR_VAR 0 4
21956: PUSH
21957: LD_EXP 78
21961: PUSH
21962: LD_VAR 0 1
21966: ARRAY
21967: PUSH
21968: LD_VAR 0 2
21972: ARRAY
21973: PUSH
21974: LD_INT 1
21976: ARRAY
21977: PPUSH
21978: LD_EXP 78
21982: PUSH
21983: LD_VAR 0 1
21987: ARRAY
21988: PUSH
21989: LD_VAR 0 2
21993: ARRAY
21994: PUSH
21995: LD_INT 2
21997: ARRAY
21998: PPUSH
21999: CALL_OW 428
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 4
22008: NOT
22009: IFFALSE 22013
// continue ;
22011: GO 21823
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22013: LD_VAR 0 4
22017: PUSH
22018: LD_INT 81
22020: PUSH
22021: LD_VAR 0 3
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 69
22034: IN
22035: IFFALSE 22085
22037: PUSH
22038: LD_EXP 78
22042: PUSH
22043: LD_VAR 0 1
22047: ARRAY
22048: PUSH
22049: LD_VAR 0 2
22053: ARRAY
22054: PUSH
22055: LD_INT 1
22057: ARRAY
22058: PPUSH
22059: LD_EXP 78
22063: PUSH
22064: LD_VAR 0 1
22068: ARRAY
22069: PUSH
22070: LD_VAR 0 2
22074: ARRAY
22075: PUSH
22076: LD_INT 2
22078: ARRAY
22079: PPUSH
22080: CALL_OW 458
22084: AND
22085: IFFALSE 22179
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22087: LD_EXP 78
22091: PUSH
22092: LD_VAR 0 1
22096: ARRAY
22097: PUSH
22098: LD_VAR 0 2
22102: ARRAY
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_EXP 78
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PUSH
22119: LD_VAR 0 2
22123: ARRAY
22124: PUSH
22125: LD_INT 2
22127: ARRAY
22128: PPUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22138: LD_ADDR_EXP 78
22142: PUSH
22143: LD_EXP 78
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_EXP 78
22157: PUSH
22158: LD_VAR 0 1
22162: ARRAY
22163: PPUSH
22164: LD_VAR 0 2
22168: PPUSH
22169: CALL_OW 3
22173: PPUSH
22174: CALL_OW 1
22178: ST_TO_ADDR
// end ; end ;
22179: GO 21823
22181: POP
22182: POP
// end ;
22183: GO 21694
22185: POP
22186: POP
// end ;
22187: PPOPN 4
22189: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
22194: PPUSH
22195: PPUSH
// result := false ;
22196: LD_ADDR_VAR 0 4
22200: PUSH
22201: LD_INT 0
22203: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL_OW 264
22213: PUSH
22214: LD_INT 81
22216: EQUAL
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22592
// side := GetSide ( unit ) ;
22222: LD_ADDR_VAR 0 6
22226: PUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 255
22236: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
22237: LD_ADDR_VAR 0 5
22241: PUSH
22242: LD_EXP 77
22246: PPUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL 29607 0 2
22256: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22257: LD_EXP 78
22261: PUSH
22262: LD_VAR 0 5
22266: ARRAY
22267: PUSH
22268: LD_EXP 79
22272: GREATEREQUAL
22273: IFFALSE 22277
// exit ;
22275: GO 22592
// ComMoveXY ( unit , x , y ) ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_VAR 0 2
22286: PPUSH
22287: LD_VAR 0 3
22291: PPUSH
22292: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22296: LD_INT 35
22298: PPUSH
22299: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22303: LD_VAR 0 1
22307: PPUSH
22308: LD_VAR 0 2
22312: PPUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL 61663 0 3
22322: NOT
22323: IFFALSE 22336
22325: PUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 314
22335: AND
22336: IFFALSE 22340
// exit ;
22338: GO 22592
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22340: LD_VAR 0 2
22344: PPUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: CALL_OW 428
22354: PUSH
22355: LD_VAR 0 1
22359: EQUAL
22360: IFFALSE 22374
22362: PUSH
22363: LD_VAR 0 1
22367: PPUSH
22368: CALL_OW 314
22372: NOT
22373: AND
22374: IFFALSE 22296
// if MineAtPos ( x , y ) then
22376: LD_VAR 0 2
22380: PPUSH
22381: LD_VAR 0 3
22385: PPUSH
22386: CALL_OW 458
22390: IFFALSE 22394
// exit ;
22392: GO 22592
// if your_side = side then
22394: LD_OWVAR 2
22398: PUSH
22399: LD_VAR 0 6
22403: EQUAL
22404: IFFALSE 22423
// PlaySoundXY ( x , y , PlantMine ) ;
22406: LD_VAR 0 2
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: LD_STRING PlantMine
22418: PPUSH
22419: CALL_OW 366
// repeat wait ( 1 ) ;
22423: LD_INT 1
22425: PPUSH
22426: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
22430: LD_VAR 0 2
22434: PPUSH
22435: LD_VAR 0 3
22439: PPUSH
22440: LD_VAR 0 6
22444: PPUSH
22445: LD_INT 0
22447: PPUSH
22448: CALL_OW 454
22452: IFFALSE 22423
// if MineAtPos ( x , y ) then
22454: LD_VAR 0 2
22458: PPUSH
22459: LD_VAR 0 3
22463: PPUSH
22464: CALL_OW 458
22468: IFFALSE 22584
// begin for i in minerMinesList [ index ] do
22470: LD_ADDR_VAR 0 7
22474: PUSH
22475: LD_EXP 78
22479: PUSH
22480: LD_VAR 0 5
22484: ARRAY
22485: PUSH
22486: FOR_IN
22487: IFFALSE 22529
// if i [ 1 ] = x and i [ 2 ] = y then
22489: LD_VAR 0 7
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PUSH
22498: LD_VAR 0 2
22502: EQUAL
22503: IFFALSE 22521
22505: PUSH
22506: LD_VAR 0 7
22510: PUSH
22511: LD_INT 2
22513: ARRAY
22514: PUSH
22515: LD_VAR 0 3
22519: EQUAL
22520: AND
22521: IFFALSE 22527
// exit ;
22523: POP
22524: POP
22525: GO 22592
22527: GO 22486
22529: POP
22530: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22531: LD_ADDR_EXP 78
22535: PUSH
22536: LD_EXP 78
22540: PPUSH
22541: LD_VAR 0 5
22545: PUSH
22546: LD_EXP 78
22550: PUSH
22551: LD_VAR 0 5
22555: ARRAY
22556: PUSH
22557: LD_INT 1
22559: PLUS
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PPUSH
22565: LD_VAR 0 2
22569: PUSH
22570: LD_VAR 0 3
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL 29824 0 3
22583: ST_TO_ADDR
// end ; result := true ;
22584: LD_ADDR_VAR 0 4
22588: PUSH
22589: LD_INT 1
22591: ST_TO_ADDR
// end ;
22592: LD_VAR 0 4
22596: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
22601: PPUSH
// if not unit in minersList then
22602: LD_VAR 0 1
22606: PUSH
22607: LD_EXP 77
22611: IN
22612: NOT
22613: IFFALSE 22617
// exit ;
22615: GO 22824
// index := GetElementIndex ( minersList , unit ) ;
22617: LD_ADDR_VAR 0 6
22621: PUSH
22622: LD_EXP 77
22626: PPUSH
22627: LD_VAR 0 1
22631: PPUSH
22632: CALL 29607 0 2
22636: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22637: LD_ADDR_VAR 0 5
22641: PUSH
22642: DOUBLE
22643: LD_EXP 78
22647: PUSH
22648: LD_VAR 0 6
22652: ARRAY
22653: INC
22654: ST_TO_ADDR
22655: LD_INT 1
22657: PUSH
22658: FOR_DOWNTO
22659: IFFALSE 22822
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22661: LD_EXP 78
22665: PUSH
22666: LD_VAR 0 6
22670: ARRAY
22671: PUSH
22672: LD_VAR 0 5
22676: ARRAY
22677: PUSH
22678: LD_INT 1
22680: ARRAY
22681: PPUSH
22682: LD_EXP 78
22686: PUSH
22687: LD_VAR 0 6
22691: ARRAY
22692: PUSH
22693: LD_VAR 0 5
22697: ARRAY
22698: PUSH
22699: LD_INT 2
22701: ARRAY
22702: PPUSH
22703: LD_VAR 0 2
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: CALL_OW 298
22717: PUSH
22718: LD_INT 6
22720: LESS
22721: IFFALSE 22820
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22723: LD_EXP 78
22727: PUSH
22728: LD_VAR 0 6
22732: ARRAY
22733: PUSH
22734: LD_VAR 0 5
22738: ARRAY
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: LD_EXP 78
22748: PUSH
22749: LD_VAR 0 6
22753: ARRAY
22754: PUSH
22755: LD_VAR 0 5
22759: ARRAY
22760: PUSH
22761: LD_INT 2
22763: ARRAY
22764: PPUSH
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 255
22774: PPUSH
22775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22779: LD_ADDR_EXP 78
22783: PUSH
22784: LD_EXP 78
22788: PPUSH
22789: LD_VAR 0 6
22793: PPUSH
22794: LD_EXP 78
22798: PUSH
22799: LD_VAR 0 6
22803: ARRAY
22804: PPUSH
22805: LD_VAR 0 5
22809: PPUSH
22810: CALL_OW 3
22814: PPUSH
22815: CALL_OW 1
22819: ST_TO_ADDR
// end ; end ;
22820: GO 22658
22822: POP
22823: POP
// end ;
22824: LD_VAR 0 4
22828: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22829: LD_INT 0
22831: PPUSH
22832: PPUSH
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL_OW 264
22849: PUSH
22850: LD_INT 81
22852: EQUAL
22853: NOT
22854: IFTRUE 22869
22856: PUSH
22857: LD_VAR 0 1
22861: PUSH
22862: LD_EXP 77
22866: IN
22867: NOT
22868: OR
22869: IFFALSE 22873
// exit ;
22871: GO 23199
// index := GetElementIndex ( minersList , unit ) ;
22873: LD_ADDR_VAR 0 6
22877: PUSH
22878: LD_EXP 77
22882: PPUSH
22883: LD_VAR 0 1
22887: PPUSH
22888: CALL 29607 0 2
22892: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22893: LD_ADDR_VAR 0 8
22897: PUSH
22898: LD_EXP 79
22902: PUSH
22903: LD_EXP 78
22907: PUSH
22908: LD_VAR 0 6
22912: ARRAY
22913: MINUS
22914: ST_TO_ADDR
// if not minesFreeAmount then
22915: LD_VAR 0 8
22919: NOT
22920: IFFALSE 22924
// exit ;
22922: GO 23199
// tmp := [ ] ;
22924: LD_ADDR_VAR 0 7
22928: PUSH
22929: EMPTY
22930: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22931: LD_ADDR_VAR 0 5
22935: PUSH
22936: DOUBLE
22937: LD_INT 1
22939: DEC
22940: ST_TO_ADDR
22941: LD_VAR 0 8
22945: PUSH
22946: FOR_TO
22947: IFFALSE 23146
// begin _d := rand ( 0 , 5 ) ;
22949: LD_ADDR_VAR 0 11
22953: PUSH
22954: LD_INT 0
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 12
22964: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22965: LD_ADDR_VAR 0 12
22969: PUSH
22970: LD_INT 2
22972: PPUSH
22973: LD_INT 6
22975: PPUSH
22976: CALL_OW 12
22980: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22981: LD_ADDR_VAR 0 9
22985: PUSH
22986: LD_VAR 0 2
22990: PPUSH
22991: LD_VAR 0 11
22995: PPUSH
22996: LD_VAR 0 12
23000: PPUSH
23001: CALL_OW 272
23005: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23006: LD_ADDR_VAR 0 10
23010: PUSH
23011: LD_VAR 0 3
23015: PPUSH
23016: LD_VAR 0 11
23020: PPUSH
23021: LD_VAR 0 12
23025: PPUSH
23026: CALL_OW 273
23030: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23031: LD_VAR 0 9
23035: PPUSH
23036: LD_VAR 0 10
23040: PPUSH
23041: CALL_OW 488
23045: IFFALSE 23069
23047: PUSH
23048: LD_VAR 0 9
23052: PUSH
23053: LD_VAR 0 10
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_VAR 0 7
23066: IN
23067: NOT
23068: AND
23069: IFFALSE 23088
23071: PUSH
23072: LD_VAR 0 9
23076: PPUSH
23077: LD_VAR 0 10
23081: PPUSH
23082: CALL_OW 458
23086: NOT
23087: AND
23088: IFFALSE 23130
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23090: LD_ADDR_VAR 0 7
23094: PUSH
23095: LD_VAR 0 7
23099: PPUSH
23100: LD_VAR 0 7
23104: PUSH
23105: LD_INT 1
23107: PLUS
23108: PPUSH
23109: LD_VAR 0 9
23113: PUSH
23114: LD_VAR 0 10
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 1
23127: ST_TO_ADDR
23128: GO 23144
// i := i - 1 ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_VAR 0 5
23139: PUSH
23140: LD_INT 1
23142: MINUS
23143: ST_TO_ADDR
// end ;
23144: GO 22946
23146: POP
23147: POP
// for i in tmp do
23148: LD_ADDR_VAR 0 5
23152: PUSH
23153: LD_VAR 0 7
23157: PUSH
23158: FOR_IN
23159: IFFALSE 23197
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23161: LD_VAR 0 1
23165: PPUSH
23166: LD_VAR 0 5
23170: PUSH
23171: LD_INT 1
23173: ARRAY
23174: PPUSH
23175: LD_VAR 0 5
23179: PUSH
23180: LD_INT 2
23182: ARRAY
23183: PPUSH
23184: CALL 22190 0 3
23188: NOT
23189: IFFALSE 23195
// exit ;
23191: POP
23192: POP
23193: GO 23199
23195: GO 23158
23197: POP
23198: POP
// end ;
23199: LD_VAR 0 4
23203: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
23204: LD_INT 0
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
23210: PPUSH
23211: PPUSH
23212: PPUSH
23213: PPUSH
23214: PPUSH
// if GetClass ( unit ) <> class_sniper then
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL_OW 257
23224: PUSH
23225: LD_INT 5
23227: NONEQUAL
23228: IFFALSE 23232
// exit ;
23230: GO 23702
// dist := 8 ;
23232: LD_ADDR_VAR 0 5
23236: PUSH
23237: LD_INT 8
23239: ST_TO_ADDR
// viewRange := 12 ;
23240: LD_ADDR_VAR 0 8
23244: PUSH
23245: LD_INT 12
23247: ST_TO_ADDR
// side := GetSide ( unit ) ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 255
23262: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23263: LD_INT 61
23265: PPUSH
23266: LD_VAR 0 6
23270: PPUSH
23271: CALL_OW 321
23275: PUSH
23276: LD_INT 2
23278: EQUAL
23279: IFFALSE 23289
// viewRange := 16 ;
23281: LD_ADDR_VAR 0 8
23285: PUSH
23286: LD_INT 16
23288: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: CALL_OW 297
23308: PUSH
23309: LD_VAR 0 5
23313: GREATER
23314: IFFALSE 23393
// begin ComMoveXY ( unit , x , y ) ;
23316: LD_VAR 0 1
23320: PPUSH
23321: LD_VAR 0 2
23325: PPUSH
23326: LD_VAR 0 3
23330: PPUSH
23331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23335: LD_INT 35
23337: PPUSH
23338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_VAR 0 2
23351: PPUSH
23352: LD_VAR 0 3
23356: PPUSH
23357: CALL 61663 0 3
23361: NOT
23362: IFFALSE 23366
// exit ;
23364: GO 23702
// until GetDistUnitXY ( unit , x , y ) < dist ;
23366: LD_VAR 0 1
23370: PPUSH
23371: LD_VAR 0 2
23375: PPUSH
23376: LD_VAR 0 3
23380: PPUSH
23381: CALL_OW 297
23385: PUSH
23386: LD_VAR 0 5
23390: LESS
23391: IFFALSE 23335
// end ; ComTurnXY ( unit , x , y ) ;
23393: LD_VAR 0 1
23397: PPUSH
23398: LD_VAR 0 2
23402: PPUSH
23403: LD_VAR 0 3
23407: PPUSH
23408: CALL_OW 118
// repeat if Multiplayer then
23412: LD_OWVAR 4
23416: IFFALSE 23427
// wait ( 35 ) else
23418: LD_INT 35
23420: PPUSH
23421: CALL_OW 67
23425: GO 23434
// wait ( 5 ) ;
23427: LD_INT 5
23429: PPUSH
23430: CALL_OW 67
// _d := GetDir ( unit ) ;
23434: LD_ADDR_VAR 0 11
23438: PUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 254
23448: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23449: LD_ADDR_VAR 0 7
23453: PUSH
23454: LD_VAR 0 1
23458: PPUSH
23459: CALL_OW 250
23463: PPUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 251
23473: PPUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: CALL 64299 0 4
23488: ST_TO_ADDR
// until dir = _d ;
23489: LD_VAR 0 7
23493: PUSH
23494: LD_VAR 0 11
23498: EQUAL
23499: IFFALSE 23412
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23501: LD_ADDR_VAR 0 9
23505: PUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 250
23515: PPUSH
23516: LD_VAR 0 7
23520: PPUSH
23521: LD_VAR 0 5
23525: PPUSH
23526: CALL_OW 272
23530: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23531: LD_ADDR_VAR 0 10
23535: PUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 251
23545: PPUSH
23546: LD_VAR 0 7
23550: PPUSH
23551: LD_VAR 0 5
23555: PPUSH
23556: CALL_OW 273
23560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23561: LD_VAR 0 9
23565: PPUSH
23566: LD_VAR 0 10
23570: PPUSH
23571: CALL_OW 488
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 23702
// ComAnimCustom ( unit , 1 ) ;
23580: LD_VAR 0 1
23584: PPUSH
23585: LD_INT 1
23587: PPUSH
23588: CALL_OW 592
// p := 0 ;
23592: LD_ADDR_VAR 0 12
23596: PUSH
23597: LD_INT 0
23599: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23600: LD_VAR 0 9
23604: PPUSH
23605: LD_VAR 0 10
23609: PPUSH
23610: LD_VAR 0 6
23614: PPUSH
23615: LD_VAR 0 8
23619: PPUSH
23620: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23624: LD_INT 35
23626: PPUSH
23627: CALL_OW 67
// p := Inc ( p ) ;
23631: LD_ADDR_VAR 0 12
23635: PUSH
23636: LD_VAR 0 12
23640: PPUSH
23641: CALL 64255 0 1
23645: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23646: LD_VAR 0 12
23650: PUSH
23651: LD_INT 3
23653: EQUAL
23654: IFTRUE 23668
23656: PUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 302
23666: NOT
23667: OR
23668: IFTRUE 23681
23670: PUSH
23671: LD_VAR 0 1
23675: PPUSH
23676: CALL_OW 301
23680: OR
23681: IFFALSE 23624
// RemoveSeeing ( _x , _y , side ) ;
23683: LD_VAR 0 9
23687: PPUSH
23688: LD_VAR 0 10
23692: PPUSH
23693: LD_VAR 0 6
23697: PPUSH
23698: CALL_OW 331
// end ;
23702: LD_VAR 0 4
23706: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23707: LD_INT 0
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
// if not unit then
23720: LD_VAR 0 1
23724: NOT
23725: IFFALSE 23729
// exit ;
23727: GO 24000
// side := GetSide ( unit ) ;
23729: LD_ADDR_VAR 0 3
23733: PUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 255
23743: ST_TO_ADDR
// x := GetX ( unit ) ;
23744: LD_ADDR_VAR 0 5
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 250
23758: ST_TO_ADDR
// y := GetY ( unit ) ;
23759: LD_ADDR_VAR 0 6
23763: PUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: CALL_OW 251
23773: ST_TO_ADDR
// r := 8 ;
23774: LD_ADDR_VAR 0 4
23778: PUSH
23779: LD_INT 8
23781: ST_TO_ADDR
// if x - r < 0 then
23782: LD_VAR 0 5
23786: PUSH
23787: LD_VAR 0 4
23791: MINUS
23792: PUSH
23793: LD_INT 0
23795: LESS
23796: IFFALSE 23808
// min_x := 0 else
23798: LD_ADDR_VAR 0 7
23802: PUSH
23803: LD_INT 0
23805: ST_TO_ADDR
23806: GO 23824
// min_x := x - r ;
23808: LD_ADDR_VAR 0 7
23812: PUSH
23813: LD_VAR 0 5
23817: PUSH
23818: LD_VAR 0 4
23822: MINUS
23823: ST_TO_ADDR
// if y - r < 0 then
23824: LD_VAR 0 6
23828: PUSH
23829: LD_VAR 0 4
23833: MINUS
23834: PUSH
23835: LD_INT 0
23837: LESS
23838: IFFALSE 23850
// min_y := 0 else
23840: LD_ADDR_VAR 0 8
23844: PUSH
23845: LD_INT 0
23847: ST_TO_ADDR
23848: GO 23866
// min_y := y - r ;
23850: LD_ADDR_VAR 0 8
23854: PUSH
23855: LD_VAR 0 6
23859: PUSH
23860: LD_VAR 0 4
23864: MINUS
23865: ST_TO_ADDR
// max_x := x + r ;
23866: LD_ADDR_VAR 0 9
23870: PUSH
23871: LD_VAR 0 5
23875: PUSH
23876: LD_VAR 0 4
23880: PLUS
23881: ST_TO_ADDR
// max_y := y + r ;
23882: LD_ADDR_VAR 0 10
23886: PUSH
23887: LD_VAR 0 6
23891: PUSH
23892: LD_VAR 0 4
23896: PLUS
23897: ST_TO_ADDR
// for _x = min_x to max_x do
23898: LD_ADDR_VAR 0 11
23902: PUSH
23903: DOUBLE
23904: LD_VAR 0 7
23908: DEC
23909: ST_TO_ADDR
23910: LD_VAR 0 9
23914: PUSH
23915: FOR_TO
23916: IFFALSE 23998
// for _y = min_y to max_y do
23918: LD_ADDR_VAR 0 12
23922: PUSH
23923: DOUBLE
23924: LD_VAR 0 8
23928: DEC
23929: ST_TO_ADDR
23930: LD_VAR 0 10
23934: PUSH
23935: FOR_TO
23936: IFFALSE 23994
// begin if not ValidHex ( _x , _y ) then
23938: LD_VAR 0 11
23942: PPUSH
23943: LD_VAR 0 12
23947: PPUSH
23948: CALL_OW 488
23952: NOT
23953: IFFALSE 23957
// continue ;
23955: GO 23935
// if MineAtPos ( _x , _y ) then
23957: LD_VAR 0 11
23961: PPUSH
23962: LD_VAR 0 12
23966: PPUSH
23967: CALL_OW 458
23971: IFFALSE 23992
// ViewMineAtPos ( _x , _y , side ) ;
23973: LD_VAR 0 11
23977: PPUSH
23978: LD_VAR 0 12
23982: PPUSH
23983: LD_VAR 0 3
23987: PPUSH
23988: CALL_OW 457
// end ;
23992: GO 23935
23994: POP
23995: POP
23996: GO 23915
23998: POP
23999: POP
// end ;
24000: LD_VAR 0 2
24004: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
24005: LD_INT 0
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
// if not units then
24014: LD_VAR 0 1
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24487
// scaners := [ ] ;
24023: LD_ADDR_VAR 0 6
24027: PUSH
24028: EMPTY
24029: ST_TO_ADDR
// for i in units do
24030: LD_ADDR_VAR 0 3
24034: PUSH
24035: LD_VAR 0 1
24039: PUSH
24040: FOR_IN
24041: IFFALSE 24198
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
24043: LD_VAR 0 3
24047: PPUSH
24048: CALL_OW 264
24052: PUSH
24053: LD_INT 11
24055: NONEQUAL
24056: IFTRUE 24070
24058: PUSH
24059: LD_VAR 0 3
24063: PPUSH
24064: CALL_OW 302
24068: NOT
24069: OR
24070: IFTRUE 24087
24072: PUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: CALL_OW 110
24082: PUSH
24083: LD_INT 502
24085: EQUAL
24086: OR
24087: IFFALSE 24091
// continue ;
24089: GO 24040
// ComStop ( i ) ;
24091: LD_VAR 0 3
24095: PPUSH
24096: CALL_OW 141
// x := GetX ( i ) ;
24100: LD_ADDR_VAR 0 4
24104: PUSH
24105: LD_VAR 0 3
24109: PPUSH
24110: CALL_OW 250
24114: ST_TO_ADDR
// y := GetY ( i ) ;
24115: LD_ADDR_VAR 0 5
24119: PUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: CALL_OW 251
24129: ST_TO_ADDR
// if GetSide ( i ) = your_side then
24130: LD_VAR 0 3
24134: PPUSH
24135: CALL_OW 255
24139: PUSH
24140: LD_OWVAR 2
24144: EQUAL
24145: IFFALSE 24164
// PlaySoundXY ( x , y , mineDetector ) ;
24147: LD_VAR 0 4
24151: PPUSH
24152: LD_VAR 0 5
24156: PPUSH
24157: LD_STRING mineDetector
24159: PPUSH
24160: CALL_OW 366
// scaners := Join ( scaners , i ) ;
24164: LD_ADDR_VAR 0 6
24168: PUSH
24169: LD_VAR 0 6
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: CALL 62882 0 2
24183: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
24184: LD_VAR 0 3
24188: PPUSH
24189: LD_INT 502
24191: PPUSH
24192: CALL_OW 109
// end ;
24196: GO 24040
24198: POP
24199: POP
// if not scaners then
24200: LD_VAR 0 6
24204: NOT
24205: IFFALSE 24209
// exit ;
24207: GO 24487
// wait ( 3 ) ;
24209: LD_INT 3
24211: PPUSH
24212: CALL_OW 67
// timer := 6 ;
24216: LD_ADDR_VAR 0 7
24220: PUSH
24221: LD_INT 6
24223: ST_TO_ADDR
// repeat for i in scaners do
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_VAR 0 6
24233: PUSH
24234: FOR_IN
24235: IFFALSE 24385
// begin side := GetSide ( i ) ;
24237: LD_ADDR_VAR 0 8
24241: PUSH
24242: LD_VAR 0 3
24246: PPUSH
24247: CALL_OW 255
24251: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
24252: LD_VAR 0 3
24256: PPUSH
24257: CALL_OW 302
24261: NOT
24262: IFTRUE 24275
24264: PUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: CALL_OW 314
24274: OR
24275: IFTRUE 24306
24277: PUSH
24278: LD_VAR 0 3
24282: PPUSH
24283: CALL_OW 263
24287: PUSH
24288: LD_INT 1
24290: EQUAL
24291: IFFALSE 24305
24293: PUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: CALL_OW 311
24303: NOT
24304: AND
24305: OR
24306: IFFALSE 24350
// begin SetUnitDisplayNumber ( i , 0 ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_INT 0
24315: PPUSH
24316: CALL_OW 505
// SetTag ( i , 0 ) ;
24320: LD_VAR 0 3
24324: PPUSH
24325: LD_INT 0
24327: PPUSH
24328: CALL_OW 109
// scaners := scaners diff i ;
24332: LD_ADDR_VAR 0 6
24336: PUSH
24337: LD_VAR 0 6
24341: PUSH
24342: LD_VAR 0 3
24346: DIFF
24347: ST_TO_ADDR
// continue ;
24348: GO 24234
// end ; if side in [ your_side , 9 ] then
24350: LD_VAR 0 8
24354: PUSH
24355: LD_OWVAR 2
24359: PUSH
24360: LD_INT 9
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: IN
24367: IFFALSE 24383
// SetUnitDisplayNumber ( i , timer ) ;
24369: LD_VAR 0 3
24373: PPUSH
24374: LD_VAR 0 7
24378: PPUSH
24379: CALL_OW 505
// end ;
24383: GO 24234
24385: POP
24386: POP
// if not scaners then
24387: LD_VAR 0 6
24391: NOT
24392: IFFALSE 24396
// exit ;
24394: GO 24487
// timer := Dec ( timer ) ;
24396: LD_ADDR_VAR 0 7
24400: PUSH
24401: LD_VAR 0 7
24405: PPUSH
24406: CALL 64277 0 1
24410: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24411: LD_INT 35
24413: PPUSH
24414: CALL_OW 67
// until timer = 0 ;
24418: LD_VAR 0 7
24422: PUSH
24423: LD_INT 0
24425: EQUAL
24426: IFFALSE 24224
// if not scaners then
24428: LD_VAR 0 6
24432: NOT
24433: IFFALSE 24437
// exit ;
24435: GO 24487
// for i in scaners do
24437: LD_ADDR_VAR 0 3
24441: PUSH
24442: LD_VAR 0 6
24446: PUSH
24447: FOR_IN
24448: IFFALSE 24485
// begin SetUnitDisplayNumber ( i , 0 ) ;
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 0
24457: PPUSH
24458: CALL_OW 505
// SetTag ( i , 0 ) ;
24462: LD_VAR 0 3
24466: PPUSH
24467: LD_INT 0
24469: PPUSH
24470: CALL_OW 109
// RevealDetectorMine ( i ) ;
24474: LD_VAR 0 3
24478: PPUSH
24479: CALL 23707 0 1
// end ;
24483: GO 24447
24485: POP
24486: POP
// end ;
24487: LD_VAR 0 2
24491: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24492: LD_INT 0
24494: PPUSH
// if p1 = mine_detector_mode then
24495: LD_VAR 0 2
24499: PUSH
24500: LD_INT 103
24502: EQUAL
24503: IFFALSE 24514
// DetectMine ( units ) ;
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL 24005 0 1
// end ; end_of_file
24514: LD_VAR 0 7
24518: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24519: LD_VAR 0 1
24523: PUSH
24524: LD_INT 200
24526: DOUBLE
24527: GREATEREQUAL
24528: IFFALSE 24536
24530: LD_INT 299
24532: DOUBLE
24533: LESSEQUAL
24534: IFTRUE 24538
24536: GO 24570
24538: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_VAR 0 2
24548: PPUSH
24549: LD_VAR 0 3
24553: PPUSH
24554: LD_VAR 0 4
24558: PPUSH
24559: LD_VAR 0 5
24563: PPUSH
24564: CALL 18795 0 5
24568: GO 24647
24570: LD_INT 300
24572: DOUBLE
24573: GREATEREQUAL
24574: IFFALSE 24582
24576: LD_INT 399
24578: DOUBLE
24579: LESSEQUAL
24580: IFTRUE 24584
24582: GO 24646
24584: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24585: LD_VAR 0 1
24589: PPUSH
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: LD_VAR 0 4
24604: PPUSH
24605: LD_VAR 0 5
24609: PPUSH
24610: LD_VAR 0 6
24614: PPUSH
24615: LD_VAR 0 7
24619: PPUSH
24620: LD_VAR 0 8
24624: PPUSH
24625: LD_VAR 0 9
24629: PPUSH
24630: LD_VAR 0 10
24634: PPUSH
24635: LD_VAR 0 11
24639: PPUSH
24640: CALL 14598 0 11
24644: GO 24647
24646: POP
// end ;
24647: PPOPN 11
24649: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24650: LD_VAR 0 1
24654: PPUSH
24655: LD_VAR 0 2
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_VAR 0 4
24669: PPUSH
24670: LD_VAR 0 5
24674: PPUSH
24675: CALL 18095 0 5
// end ; end_of_file
24679: PPOPN 5
24681: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24682: LD_INT 0
24684: PPUSH
24685: PPUSH
// if exist_mode then
24686: LD_VAR 0 2
24690: IFFALSE 24736
// begin unit := CreateCharacter ( prefix & ident ) ;
24692: LD_ADDR_VAR 0 5
24696: PUSH
24697: LD_VAR 0 3
24701: PUSH
24702: LD_VAR 0 1
24706: STR
24707: PPUSH
24708: CALL_OW 34
24712: ST_TO_ADDR
// if unit then
24713: LD_VAR 0 5
24717: IFFALSE 24734
// DeleteCharacters ( prefix & ident ) ;
24719: LD_VAR 0 3
24723: PUSH
24724: LD_VAR 0 1
24728: STR
24729: PPUSH
24730: CALL_OW 40
// end else
24734: GO 24751
// unit := NewCharacter ( ident ) ;
24736: LD_ADDR_VAR 0 5
24740: PUSH
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 25
24750: ST_TO_ADDR
// result := unit ;
24751: LD_ADDR_VAR 0 4
24755: PUSH
24756: LD_VAR 0 5
24760: ST_TO_ADDR
// end ;
24761: LD_VAR 0 4
24765: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
// if exist_mode then
24770: LD_VAR 0 2
24774: IFFALSE 24799
// unit := CreateCharacter ( prefix & ident ) else
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_VAR 0 3
24785: PUSH
24786: LD_VAR 0 1
24790: STR
24791: PPUSH
24792: CALL_OW 34
24796: ST_TO_ADDR
24797: GO 24814
// unit := NewCharacter ( ident ) ;
24799: LD_ADDR_VAR 0 5
24803: PUSH
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL_OW 25
24813: ST_TO_ADDR
// result := unit ;
24814: LD_ADDR_VAR 0 4
24818: PUSH
24819: LD_VAR 0 5
24823: ST_TO_ADDR
// end ;
24824: LD_VAR 0 4
24828: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24829: LD_INT 0
24831: PPUSH
24832: PPUSH
// if not side or not nation then
24833: LD_VAR 0 1
24837: NOT
24838: IFTRUE 24847
24840: PUSH
24841: LD_VAR 0 2
24845: NOT
24846: OR
24847: IFFALSE 24851
// exit ;
24849: GO 25645
// case nation of nation_american :
24851: LD_VAR 0 2
24855: PUSH
24856: LD_INT 1
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 25086
24864: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24865: LD_ADDR_VAR 0 4
24869: PUSH
24870: LD_INT 35
24872: PUSH
24873: LD_INT 45
24875: PUSH
24876: LD_INT 46
24878: PUSH
24879: LD_INT 47
24881: PUSH
24882: LD_INT 82
24884: PUSH
24885: LD_INT 83
24887: PUSH
24888: LD_INT 84
24890: PUSH
24891: LD_INT 85
24893: PUSH
24894: LD_INT 86
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: LD_INT 6
24905: PUSH
24906: LD_INT 15
24908: PUSH
24909: LD_INT 16
24911: PUSH
24912: LD_INT 7
24914: PUSH
24915: LD_INT 12
24917: PUSH
24918: LD_INT 13
24920: PUSH
24921: LD_INT 10
24923: PUSH
24924: LD_INT 14
24926: PUSH
24927: LD_INT 20
24929: PUSH
24930: LD_INT 21
24932: PUSH
24933: LD_INT 22
24935: PUSH
24936: LD_INT 25
24938: PUSH
24939: LD_INT 32
24941: PUSH
24942: LD_INT 27
24944: PUSH
24945: LD_INT 36
24947: PUSH
24948: LD_INT 69
24950: PUSH
24951: LD_INT 39
24953: PUSH
24954: LD_INT 34
24956: PUSH
24957: LD_INT 40
24959: PUSH
24960: LD_INT 48
24962: PUSH
24963: LD_INT 49
24965: PUSH
24966: LD_INT 50
24968: PUSH
24969: LD_INT 51
24971: PUSH
24972: LD_INT 52
24974: PUSH
24975: LD_INT 53
24977: PUSH
24978: LD_INT 54
24980: PUSH
24981: LD_INT 55
24983: PUSH
24984: LD_INT 56
24986: PUSH
24987: LD_INT 57
24989: PUSH
24990: LD_INT 58
24992: PUSH
24993: LD_INT 59
24995: PUSH
24996: LD_INT 60
24998: PUSH
24999: LD_INT 61
25001: PUSH
25002: LD_INT 62
25004: PUSH
25005: LD_INT 80
25007: PUSH
25008: LD_INT 82
25010: PUSH
25011: LD_INT 83
25013: PUSH
25014: LD_INT 84
25016: PUSH
25017: LD_INT 85
25019: PUSH
25020: LD_INT 86
25022: PUSH
25023: LD_INT 90
25025: PUSH
25026: LD_INT 93
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 25567
25086: LD_INT 2
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25328
25094: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
25095: LD_ADDR_VAR 0 4
25099: PUSH
25100: LD_INT 35
25102: PUSH
25103: LD_INT 45
25105: PUSH
25106: LD_INT 46
25108: PUSH
25109: LD_INT 47
25111: PUSH
25112: LD_INT 82
25114: PUSH
25115: LD_INT 83
25117: PUSH
25118: LD_INT 84
25120: PUSH
25121: LD_INT 85
25123: PUSH
25124: LD_INT 87
25126: PUSH
25127: LD_INT 70
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 11
25135: PUSH
25136: LD_INT 3
25138: PUSH
25139: LD_INT 4
25141: PUSH
25142: LD_INT 5
25144: PUSH
25145: LD_INT 6
25147: PUSH
25148: LD_INT 15
25150: PUSH
25151: LD_INT 18
25153: PUSH
25154: LD_INT 7
25156: PUSH
25157: LD_INT 17
25159: PUSH
25160: LD_INT 8
25162: PUSH
25163: LD_INT 20
25165: PUSH
25166: LD_INT 21
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_INT 72
25174: PUSH
25175: LD_INT 26
25177: PUSH
25178: LD_INT 69
25180: PUSH
25181: LD_INT 39
25183: PUSH
25184: LD_INT 40
25186: PUSH
25187: LD_INT 41
25189: PUSH
25190: LD_INT 42
25192: PUSH
25193: LD_INT 43
25195: PUSH
25196: LD_INT 48
25198: PUSH
25199: LD_INT 49
25201: PUSH
25202: LD_INT 50
25204: PUSH
25205: LD_INT 51
25207: PUSH
25208: LD_INT 52
25210: PUSH
25211: LD_INT 53
25213: PUSH
25214: LD_INT 54
25216: PUSH
25217: LD_INT 55
25219: PUSH
25220: LD_INT 56
25222: PUSH
25223: LD_INT 60
25225: PUSH
25226: LD_INT 61
25228: PUSH
25229: LD_INT 62
25231: PUSH
25232: LD_INT 66
25234: PUSH
25235: LD_INT 67
25237: PUSH
25238: LD_INT 68
25240: PUSH
25241: LD_INT 81
25243: PUSH
25244: LD_INT 82
25246: PUSH
25247: LD_INT 83
25249: PUSH
25250: LD_INT 84
25252: PUSH
25253: LD_INT 85
25255: PUSH
25256: LD_INT 87
25258: PUSH
25259: LD_INT 88
25261: PUSH
25262: LD_INT 92
25264: PUSH
25265: LD_INT 94
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
25326: GO 25567
25328: LD_INT 3
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25566
25336: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
25337: LD_ADDR_VAR 0 4
25341: PUSH
25342: LD_INT 46
25344: PUSH
25345: LD_INT 47
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: LD_INT 82
25356: PUSH
25357: LD_INT 83
25359: PUSH
25360: LD_INT 84
25362: PUSH
25363: LD_INT 85
25365: PUSH
25366: LD_INT 86
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 9
25374: PUSH
25375: LD_INT 20
25377: PUSH
25378: LD_INT 19
25380: PUSH
25381: LD_INT 21
25383: PUSH
25384: LD_INT 24
25386: PUSH
25387: LD_INT 22
25389: PUSH
25390: LD_INT 25
25392: PUSH
25393: LD_INT 28
25395: PUSH
25396: LD_INT 29
25398: PUSH
25399: LD_INT 30
25401: PUSH
25402: LD_INT 31
25404: PUSH
25405: LD_INT 37
25407: PUSH
25408: LD_INT 38
25410: PUSH
25411: LD_INT 32
25413: PUSH
25414: LD_INT 27
25416: PUSH
25417: LD_INT 33
25419: PUSH
25420: LD_INT 69
25422: PUSH
25423: LD_INT 39
25425: PUSH
25426: LD_INT 34
25428: PUSH
25429: LD_INT 40
25431: PUSH
25432: LD_INT 71
25434: PUSH
25435: LD_INT 23
25437: PUSH
25438: LD_INT 44
25440: PUSH
25441: LD_INT 48
25443: PUSH
25444: LD_INT 49
25446: PUSH
25447: LD_INT 50
25449: PUSH
25450: LD_INT 51
25452: PUSH
25453: LD_INT 52
25455: PUSH
25456: LD_INT 53
25458: PUSH
25459: LD_INT 54
25461: PUSH
25462: LD_INT 55
25464: PUSH
25465: LD_INT 56
25467: PUSH
25468: LD_INT 57
25470: PUSH
25471: LD_INT 58
25473: PUSH
25474: LD_INT 59
25476: PUSH
25477: LD_INT 63
25479: PUSH
25480: LD_INT 64
25482: PUSH
25483: LD_INT 65
25485: PUSH
25486: LD_INT 82
25488: PUSH
25489: LD_INT 83
25491: PUSH
25492: LD_INT 84
25494: PUSH
25495: LD_INT 85
25497: PUSH
25498: LD_INT 86
25500: PUSH
25501: LD_INT 89
25503: PUSH
25504: LD_INT 91
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: ST_TO_ADDR
25564: GO 25567
25566: POP
// if state > - 1 and state < 3 then
25567: LD_VAR 0 3
25571: PUSH
25572: LD_INT 1
25574: NEG
25575: GREATER
25576: IFFALSE 25588
25578: PUSH
25579: LD_VAR 0 3
25583: PUSH
25584: LD_INT 3
25586: LESS
25587: AND
25588: IFFALSE 25645
// for i in result do
25590: LD_ADDR_VAR 0 5
25594: PUSH
25595: LD_VAR 0 4
25599: PUSH
25600: FOR_IN
25601: IFFALSE 25643
// if GetTech ( i , side ) <> state then
25603: LD_VAR 0 5
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 321
25617: PUSH
25618: LD_VAR 0 3
25622: NONEQUAL
25623: IFFALSE 25641
// result := result diff i ;
25625: LD_ADDR_VAR 0 4
25629: PUSH
25630: LD_VAR 0 4
25634: PUSH
25635: LD_VAR 0 5
25639: DIFF
25640: ST_TO_ADDR
25641: GO 25600
25643: POP
25644: POP
// end ;
25645: LD_VAR 0 4
25649: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
25654: PPUSH
// result := true ;
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 1
25662: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25663: LD_ADDR_VAR 0 5
25667: PUSH
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 480
25677: ST_TO_ADDR
// if not tmp then
25678: LD_VAR 0 5
25682: NOT
25683: IFFALSE 25687
// exit ;
25685: GO 25736
// for i in tmp do
25687: LD_ADDR_VAR 0 4
25691: PUSH
25692: LD_VAR 0 5
25696: PUSH
25697: FOR_IN
25698: IFFALSE 25734
// if GetTech ( i , side ) <> state_researched then
25700: LD_VAR 0 4
25704: PPUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL_OW 321
25714: PUSH
25715: LD_INT 2
25717: NONEQUAL
25718: IFFALSE 25732
// begin result := false ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_INT 0
25727: ST_TO_ADDR
// exit ;
25728: POP
25729: POP
25730: GO 25736
// end ;
25732: GO 25697
25734: POP
25735: POP
// end ;
25736: LD_VAR 0 3
25740: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25756: LD_VAR 0 1
25760: NOT
25761: IFTRUE 25778
25763: PUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 257
25773: PUSH
25774: LD_INT 9
25776: NONEQUAL
25777: OR
25778: IFFALSE 25782
// exit ;
25780: GO 26361
// side := GetSide ( unit ) ;
25782: LD_ADDR_VAR 0 9
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 255
25796: ST_TO_ADDR
// tech_space := tech_spacanom ;
25797: LD_ADDR_VAR 0 12
25801: PUSH
25802: LD_INT 29
25804: ST_TO_ADDR
// tech_time := tech_taurad ;
25805: LD_ADDR_VAR 0 13
25809: PUSH
25810: LD_INT 28
25812: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25813: LD_ADDR_VAR 0 11
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 310
25827: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25828: LD_VAR 0 11
25832: PPUSH
25833: CALL_OW 247
25837: PUSH
25838: LD_INT 2
25840: EQUAL
25841: IFFALSE 25845
// exit ;
25843: GO 26361
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25845: LD_ADDR_VAR 0 8
25849: PUSH
25850: LD_INT 81
25852: PUSH
25853: LD_VAR 0 9
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: LD_INT 21
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PPUSH
25883: CALL_OW 69
25887: ST_TO_ADDR
// if not tmp then
25888: LD_VAR 0 8
25892: NOT
25893: IFFALSE 25897
// exit ;
25895: GO 26361
// if in_unit then
25897: LD_VAR 0 11
25901: IFFALSE 25925
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25903: LD_ADDR_VAR 0 10
25907: PUSH
25908: LD_VAR 0 8
25912: PPUSH
25913: LD_VAR 0 11
25917: PPUSH
25918: CALL_OW 74
25922: ST_TO_ADDR
25923: GO 25945
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25925: LD_ADDR_VAR 0 10
25929: PUSH
25930: LD_VAR 0 8
25934: PPUSH
25935: LD_VAR 0 1
25939: PPUSH
25940: CALL_OW 74
25944: ST_TO_ADDR
// if not enemy then
25945: LD_VAR 0 10
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26361
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25954: LD_VAR 0 11
25958: IFFALSE 25980
25960: PUSH
25961: LD_VAR 0 11
25965: PPUSH
25966: LD_VAR 0 10
25970: PPUSH
25971: CALL_OW 296
25975: PUSH
25976: LD_INT 13
25978: GREATER
25979: AND
25980: IFTRUE 26002
25982: PUSH
25983: LD_VAR 0 1
25987: PPUSH
25988: LD_VAR 0 10
25992: PPUSH
25993: CALL_OW 296
25997: PUSH
25998: LD_INT 12
26000: GREATER
26001: OR
26002: IFFALSE 26006
// exit ;
26004: GO 26361
// missile := [ 1 ] ;
26006: LD_ADDR_VAR 0 14
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26017: LD_VAR 0 9
26021: PPUSH
26022: LD_VAR 0 12
26026: PPUSH
26027: CALL_OW 325
26031: IFFALSE 26060
// missile := Replace ( missile , missile + 1 , 2 ) ;
26033: LD_ADDR_VAR 0 14
26037: PUSH
26038: LD_VAR 0 14
26042: PPUSH
26043: LD_VAR 0 14
26047: PUSH
26048: LD_INT 1
26050: PLUS
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 1
26059: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26060: LD_VAR 0 9
26064: PPUSH
26065: LD_VAR 0 13
26069: PPUSH
26070: CALL_OW 325
26074: IFFALSE 26098
26076: PUSH
26077: LD_VAR 0 10
26081: PPUSH
26082: CALL_OW 255
26086: PPUSH
26087: LD_VAR 0 13
26091: PPUSH
26092: CALL_OW 325
26096: NOT
26097: AND
26098: IFFALSE 26127
// missile := Replace ( missile , missile + 1 , 3 ) ;
26100: LD_ADDR_VAR 0 14
26104: PUSH
26105: LD_VAR 0 14
26109: PPUSH
26110: LD_VAR 0 14
26114: PUSH
26115: LD_INT 1
26117: PLUS
26118: PPUSH
26119: LD_INT 3
26121: PPUSH
26122: CALL_OW 1
26126: ST_TO_ADDR
// if missile < 2 then
26127: LD_VAR 0 14
26131: PUSH
26132: LD_INT 2
26134: LESS
26135: IFFALSE 26139
// exit ;
26137: GO 26361
// x := GetX ( enemy ) ;
26139: LD_ADDR_VAR 0 4
26143: PUSH
26144: LD_VAR 0 10
26148: PPUSH
26149: CALL_OW 250
26153: ST_TO_ADDR
// y := GetY ( enemy ) ;
26154: LD_ADDR_VAR 0 5
26158: PUSH
26159: LD_VAR 0 10
26163: PPUSH
26164: CALL_OW 251
26168: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26169: LD_ADDR_VAR 0 6
26173: PUSH
26174: LD_VAR 0 4
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PPUSH
26183: LD_INT 1
26185: PPUSH
26186: CALL_OW 12
26190: PLUS
26191: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26192: LD_ADDR_VAR 0 7
26196: PUSH
26197: LD_VAR 0 5
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PPUSH
26206: LD_INT 1
26208: PPUSH
26209: CALL_OW 12
26213: PLUS
26214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26215: LD_VAR 0 6
26219: PPUSH
26220: LD_VAR 0 7
26224: PPUSH
26225: CALL_OW 488
26229: NOT
26230: IFFALSE 26252
// begin _x := x ;
26232: LD_ADDR_VAR 0 6
26236: PUSH
26237: LD_VAR 0 4
26241: ST_TO_ADDR
// _y := y ;
26242: LD_ADDR_VAR 0 7
26246: PUSH
26247: LD_VAR 0 5
26251: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26252: LD_ADDR_VAR 0 3
26256: PUSH
26257: LD_INT 1
26259: PPUSH
26260: LD_VAR 0 14
26264: PPUSH
26265: CALL_OW 12
26269: ST_TO_ADDR
// case i of 1 :
26270: LD_VAR 0 3
26274: PUSH
26275: LD_INT 1
26277: DOUBLE
26278: EQUAL
26279: IFTRUE 26283
26281: GO 26300
26283: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26284: LD_VAR 0 1
26288: PPUSH
26289: LD_VAR 0 10
26293: PPUSH
26294: CALL_OW 115
26298: GO 26361
26300: LD_INT 2
26302: DOUBLE
26303: EQUAL
26304: IFTRUE 26308
26306: GO 26330
26308: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 7
26323: PPUSH
26324: CALL_OW 153
26328: GO 26361
26330: LD_INT 3
26332: DOUBLE
26333: EQUAL
26334: IFTRUE 26338
26336: GO 26360
26338: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26339: LD_VAR 0 1
26343: PPUSH
26344: LD_VAR 0 6
26348: PPUSH
26349: LD_VAR 0 7
26353: PPUSH
26354: CALL_OW 154
26358: GO 26361
26360: POP
// end ;
26361: LD_VAR 0 2
26365: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26366: LD_INT 0
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
26372: PPUSH
26373: PPUSH
// if not unit or not building then
26374: LD_VAR 0 1
26378: NOT
26379: IFTRUE 26388
26381: PUSH
26382: LD_VAR 0 2
26386: NOT
26387: OR
26388: IFFALSE 26392
// exit ;
26390: GO 26550
// x := GetX ( building ) ;
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: LD_VAR 0 2
26401: PPUSH
26402: CALL_OW 250
26406: ST_TO_ADDR
// y := GetY ( building ) ;
26407: LD_ADDR_VAR 0 6
26411: PUSH
26412: LD_VAR 0 2
26416: PPUSH
26417: CALL_OW 251
26421: ST_TO_ADDR
// for i := 0 to 5 do
26422: LD_ADDR_VAR 0 4
26426: PUSH
26427: DOUBLE
26428: LD_INT 0
26430: DEC
26431: ST_TO_ADDR
26432: LD_INT 5
26434: PUSH
26435: FOR_TO
26436: IFFALSE 26548
// begin _x := ShiftX ( x , i , 3 ) ;
26438: LD_ADDR_VAR 0 7
26442: PUSH
26443: LD_VAR 0 5
26447: PPUSH
26448: LD_VAR 0 4
26452: PPUSH
26453: LD_INT 3
26455: PPUSH
26456: CALL_OW 272
26460: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26461: LD_ADDR_VAR 0 8
26465: PUSH
26466: LD_VAR 0 6
26470: PPUSH
26471: LD_VAR 0 4
26475: PPUSH
26476: LD_INT 3
26478: PPUSH
26479: CALL_OW 273
26483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26484: LD_VAR 0 7
26488: PPUSH
26489: LD_VAR 0 8
26493: PPUSH
26494: CALL_OW 488
26498: NOT
26499: IFFALSE 26503
// continue ;
26501: GO 26435
// if HexInfo ( _x , _y ) = 0 then
26503: LD_VAR 0 7
26507: PPUSH
26508: LD_VAR 0 8
26512: PPUSH
26513: CALL_OW 428
26517: PUSH
26518: LD_INT 0
26520: EQUAL
26521: IFFALSE 26546
// begin ComMoveXY ( unit , _x , _y ) ;
26523: LD_VAR 0 1
26527: PPUSH
26528: LD_VAR 0 7
26532: PPUSH
26533: LD_VAR 0 8
26537: PPUSH
26538: CALL_OW 111
// exit ;
26542: POP
26543: POP
26544: GO 26550
// end ; end ;
26546: GO 26435
26548: POP
26549: POP
// end ;
26550: LD_VAR 0 3
26554: RET
// export function ScanBase ( side , base_area ) ; begin
26555: LD_INT 0
26557: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26558: LD_ADDR_VAR 0 3
26562: PUSH
26563: LD_VAR 0 2
26567: PPUSH
26568: LD_INT 81
26570: PUSH
26571: LD_VAR 0 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 70
26584: ST_TO_ADDR
// end ;
26585: LD_VAR 0 3
26589: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
26595: PPUSH
// result := false ;
26596: LD_ADDR_VAR 0 2
26600: PUSH
26601: LD_INT 0
26603: ST_TO_ADDR
// side := GetSide ( unit ) ;
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 255
26618: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26619: LD_ADDR_VAR 0 4
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 248
26633: ST_TO_ADDR
// case nat of 1 :
26634: LD_VAR 0 4
26638: PUSH
26639: LD_INT 1
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 26658
26647: POP
// tech := tech_lassight ; 2 :
26648: LD_ADDR_VAR 0 5
26652: PUSH
26653: LD_INT 12
26655: ST_TO_ADDR
26656: GO 26697
26658: LD_INT 2
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26666
26664: GO 26677
26666: POP
// tech := tech_mortar ; 3 :
26667: LD_ADDR_VAR 0 5
26671: PUSH
26672: LD_INT 41
26674: ST_TO_ADDR
26675: GO 26697
26677: LD_INT 3
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26696
26685: POP
// tech := tech_bazooka ; end ;
26686: LD_ADDR_VAR 0 5
26690: PUSH
26691: LD_INT 44
26693: ST_TO_ADDR
26694: GO 26697
26696: POP
// if Researched ( side , tech ) then
26697: LD_VAR 0 3
26701: PPUSH
26702: LD_VAR 0 5
26706: PPUSH
26707: CALL_OW 325
26711: IFFALSE 26738
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26713: LD_ADDR_VAR 0 2
26717: PUSH
26718: LD_INT 5
26720: PUSH
26721: LD_INT 8
26723: PUSH
26724: LD_INT 9
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: PUSH
26732: LD_VAR 0 4
26736: ARRAY
26737: ST_TO_ADDR
// end ;
26738: LD_VAR 0 2
26742: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26743: LD_INT 0
26745: PPUSH
26746: PPUSH
26747: PPUSH
// if not mines then
26748: LD_VAR 0 2
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26757: LD_ADDR_VAR 0 5
26761: PUSH
26762: LD_INT 81
26764: PUSH
26765: LD_VAR 0 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: LD_INT 21
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PPUSH
26795: CALL_OW 69
26799: ST_TO_ADDR
// for i in mines do
26800: LD_ADDR_VAR 0 4
26804: PUSH
26805: LD_VAR 0 2
26809: PUSH
26810: FOR_IN
26811: IFFALSE 26899
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26813: LD_VAR 0 4
26817: PUSH
26818: LD_INT 1
26820: ARRAY
26821: PPUSH
26822: LD_VAR 0 4
26826: PUSH
26827: LD_INT 2
26829: ARRAY
26830: PPUSH
26831: CALL_OW 458
26835: NOT
26836: IFFALSE 26840
// continue ;
26838: GO 26810
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26840: LD_VAR 0 4
26844: PUSH
26845: LD_INT 1
26847: ARRAY
26848: PPUSH
26849: LD_VAR 0 4
26853: PUSH
26854: LD_INT 2
26856: ARRAY
26857: PPUSH
26858: CALL_OW 428
26862: PUSH
26863: LD_VAR 0 5
26867: IN
26868: IFFALSE 26897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26870: LD_VAR 0 4
26874: PUSH
26875: LD_INT 1
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 4
26883: PUSH
26884: LD_INT 2
26886: ARRAY
26887: PPUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 456
// end ;
26897: GO 26810
26899: POP
26900: POP
// end ;
26901: LD_VAR 0 3
26905: RET
// export function Count ( array ) ; begin
26906: LD_INT 0
26908: PPUSH
// result := array + 0 ;
26909: LD_ADDR_VAR 0 2
26913: PUSH
26914: LD_VAR 0 1
26918: PUSH
26919: LD_INT 0
26921: PLUS
26922: ST_TO_ADDR
// end ;
26923: LD_VAR 0 2
26927: RET
// export function IsEmpty ( building ) ; begin
26928: LD_INT 0
26930: PPUSH
// if not building then
26931: LD_VAR 0 1
26935: NOT
26936: IFFALSE 26940
// exit ;
26938: GO 26983
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26940: LD_ADDR_VAR 0 2
26944: PUSH
26945: LD_VAR 0 1
26949: PUSH
26950: LD_INT 22
26952: PUSH
26953: LD_VAR 0 1
26957: PPUSH
26958: CALL_OW 255
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 58
26969: PUSH
26970: EMPTY
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PPUSH
26977: CALL_OW 69
26981: IN
26982: ST_TO_ADDR
// end ;
26983: LD_VAR 0 2
26987: RET
// export function IsNotFull ( building ) ; var places ; begin
26988: LD_INT 0
26990: PPUSH
26991: PPUSH
// if not building then
26992: LD_VAR 0 1
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27029
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27001: LD_ADDR_VAR 0 2
27005: PUSH
27006: LD_VAR 0 1
27010: PPUSH
27011: LD_INT 3
27013: PUSH
27014: LD_INT 62
27016: PUSH
27017: EMPTY
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 72
27028: ST_TO_ADDR
// end ;
27029: LD_VAR 0 2
27033: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27034: LD_INT 0
27036: PPUSH
27037: PPUSH
27038: PPUSH
27039: PPUSH
// tmp := [ ] ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: EMPTY
27046: ST_TO_ADDR
// list := [ ] ;
27047: LD_ADDR_VAR 0 5
27051: PUSH
27052: EMPTY
27053: ST_TO_ADDR
// for i = 16 to 25 do
27054: LD_ADDR_VAR 0 4
27058: PUSH
27059: DOUBLE
27060: LD_INT 16
27062: DEC
27063: ST_TO_ADDR
27064: LD_INT 25
27066: PUSH
27067: FOR_TO
27068: IFFALSE 27141
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 3
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 255
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 91
27099: PUSH
27100: LD_VAR 0 1
27104: PUSH
27105: LD_INT 6
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 30
27115: PUSH
27116: LD_VAR 0 4
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: PPUSH
27133: CALL_OW 69
27137: ADD
27138: ST_TO_ADDR
27139: GO 27067
27141: POP
27142: POP
// for i = 1 to tmp do
27143: LD_ADDR_VAR 0 4
27147: PUSH
27148: DOUBLE
27149: LD_INT 1
27151: DEC
27152: ST_TO_ADDR
27153: LD_VAR 0 3
27157: PUSH
27158: FOR_TO
27159: IFFALSE 27247
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27161: LD_ADDR_VAR 0 5
27165: PUSH
27166: LD_VAR 0 5
27170: PUSH
27171: LD_VAR 0 3
27175: PUSH
27176: LD_VAR 0 4
27180: ARRAY
27181: PPUSH
27182: CALL_OW 266
27186: PUSH
27187: LD_VAR 0 3
27191: PUSH
27192: LD_VAR 0 4
27196: ARRAY
27197: PPUSH
27198: CALL_OW 250
27202: PUSH
27203: LD_VAR 0 3
27207: PUSH
27208: LD_VAR 0 4
27212: ARRAY
27213: PPUSH
27214: CALL_OW 251
27218: PUSH
27219: LD_VAR 0 3
27223: PUSH
27224: LD_VAR 0 4
27228: ARRAY
27229: PPUSH
27230: CALL_OW 254
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: ADD
27244: ST_TO_ADDR
27245: GO 27158
27247: POP
27248: POP
// result := list ;
27249: LD_ADDR_VAR 0 2
27253: PUSH
27254: LD_VAR 0 5
27258: ST_TO_ADDR
// end ;
27259: LD_VAR 0 2
27263: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27264: LD_INT 0
27266: PPUSH
27267: PPUSH
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
// if not factory then
27273: LD_VAR 0 1
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27885
// if control = control_apeman then
27282: LD_VAR 0 4
27286: PUSH
27287: LD_INT 5
27289: EQUAL
27290: IFFALSE 27399
// begin tmp := UnitsInside ( factory ) ;
27292: LD_ADDR_VAR 0 8
27296: PUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL_OW 313
27306: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27307: LD_VAR 0 8
27311: PPUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 12
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 72
27326: NOT
27327: IFFALSE 27337
// control := control_manual ;
27329: LD_ADDR_VAR 0 4
27333: PUSH
27334: LD_INT 1
27336: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27337: LD_ADDR_VAR 0 8
27341: PUSH
27342: LD_VAR 0 1
27346: PPUSH
27347: CALL 27034 0 1
27351: ST_TO_ADDR
// if tmp then
27352: LD_VAR 0 8
27356: IFFALSE 27399
// begin for i in tmp do
27358: LD_ADDR_VAR 0 7
27362: PUSH
27363: LD_VAR 0 8
27367: PUSH
27368: FOR_IN
27369: IFFALSE 27397
// if i [ 1 ] = b_ext_radio then
27371: LD_VAR 0 7
27375: PUSH
27376: LD_INT 1
27378: ARRAY
27379: PUSH
27380: LD_INT 22
27382: EQUAL
27383: IFFALSE 27395
// begin control := control_remote ;
27385: LD_ADDR_VAR 0 4
27389: PUSH
27390: LD_INT 2
27392: ST_TO_ADDR
// break ;
27393: GO 27397
// end ;
27395: GO 27368
27397: POP
27398: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: LD_VAR 0 3
27413: PPUSH
27414: LD_VAR 0 4
27418: PPUSH
27419: LD_VAR 0 5
27423: PPUSH
27424: CALL_OW 448
27428: IFFALSE 27463
// begin result := [ chassis , engine , control , weapon ] ;
27430: LD_ADDR_VAR 0 6
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 3
27444: PUSH
27445: LD_VAR 0 4
27449: PUSH
27450: LD_VAR 0 5
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
// exit ;
27461: GO 27885
// end ; _chassis := AvailableChassisList ( factory ) ;
27463: LD_ADDR_VAR 0 9
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 475
27477: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27478: LD_ADDR_VAR 0 11
27482: PUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL_OW 476
27492: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27493: LD_ADDR_VAR 0 12
27497: PUSH
27498: LD_VAR 0 1
27502: PPUSH
27503: CALL_OW 477
27507: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27508: LD_ADDR_VAR 0 10
27512: PUSH
27513: LD_VAR 0 1
27517: PPUSH
27518: CALL_OW 478
27522: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27523: LD_VAR 0 9
27527: NOT
27528: IFTRUE 27537
27530: PUSH
27531: LD_VAR 0 11
27535: NOT
27536: OR
27537: IFTRUE 27546
27539: PUSH
27540: LD_VAR 0 12
27544: NOT
27545: OR
27546: IFTRUE 27555
27548: PUSH
27549: LD_VAR 0 10
27553: NOT
27554: OR
27555: IFFALSE 27590
// begin result := [ chassis , engine , control , weapon ] ;
27557: LD_ADDR_VAR 0 6
27561: PUSH
27562: LD_VAR 0 2
27566: PUSH
27567: LD_VAR 0 3
27571: PUSH
27572: LD_VAR 0 4
27576: PUSH
27577: LD_VAR 0 5
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// exit ;
27588: GO 27885
// end ; if not chassis in _chassis then
27590: LD_VAR 0 2
27594: PUSH
27595: LD_VAR 0 9
27599: IN
27600: NOT
27601: IFFALSE 27627
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27603: LD_ADDR_VAR 0 2
27607: PUSH
27608: LD_VAR 0 9
27612: PUSH
27613: LD_INT 1
27615: PPUSH
27616: LD_VAR 0 9
27620: PPUSH
27621: CALL_OW 12
27625: ARRAY
27626: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: CALL 27890 0 2
27641: NOT
27642: IFFALSE 27703
// repeat engine := _engine [ 1 ] ;
27644: LD_ADDR_VAR 0 3
27648: PUSH
27649: LD_VAR 0 11
27653: PUSH
27654: LD_INT 1
27656: ARRAY
27657: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27658: LD_ADDR_VAR 0 11
27662: PUSH
27663: LD_VAR 0 11
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 3
27675: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27676: LD_VAR 0 2
27680: PPUSH
27681: LD_VAR 0 3
27685: PPUSH
27686: CALL 27890 0 2
27690: IFTRUE 27701
27692: PUSH
27693: LD_VAR 0 11
27697: PUSH
27698: EMPTY
27699: EQUAL
27700: OR
27701: IFFALSE 27644
// if not control in _control then
27703: LD_VAR 0 4
27707: PUSH
27708: LD_VAR 0 12
27712: IN
27713: NOT
27714: IFFALSE 27740
// control := _control [ rand ( 1 , _control ) ] ;
27716: LD_ADDR_VAR 0 4
27720: PUSH
27721: LD_VAR 0 12
27725: PUSH
27726: LD_INT 1
27728: PPUSH
27729: LD_VAR 0 12
27733: PPUSH
27734: CALL_OW 12
27738: ARRAY
27739: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_VAR 0 5
27749: PPUSH
27750: CALL 28112 0 2
27754: NOT
27755: IFFALSE 27816
// repeat weapon := _weapon [ 1 ] ;
27757: LD_ADDR_VAR 0 5
27761: PUSH
27762: LD_VAR 0 10
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27771: LD_ADDR_VAR 0 10
27775: PUSH
27776: LD_VAR 0 10
27780: PPUSH
27781: LD_INT 1
27783: PPUSH
27784: CALL_OW 3
27788: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27789: LD_VAR 0 2
27793: PPUSH
27794: LD_VAR 0 5
27798: PPUSH
27799: CALL 28112 0 2
27803: IFTRUE 27814
27805: PUSH
27806: LD_VAR 0 10
27810: PUSH
27811: EMPTY
27812: EQUAL
27813: OR
27814: IFFALSE 27757
// result := [ ] ;
27816: LD_ADDR_VAR 0 6
27820: PUSH
27821: EMPTY
27822: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27823: LD_VAR 0 1
27827: PPUSH
27828: LD_VAR 0 2
27832: PPUSH
27833: LD_VAR 0 3
27837: PPUSH
27838: LD_VAR 0 4
27842: PPUSH
27843: LD_VAR 0 5
27847: PPUSH
27848: CALL_OW 448
27852: IFFALSE 27885
// result := [ chassis , engine , control , weapon ] ;
27854: LD_ADDR_VAR 0 6
27858: PUSH
27859: LD_VAR 0 2
27863: PUSH
27864: LD_VAR 0 3
27868: PUSH
27869: LD_VAR 0 4
27873: PUSH
27874: LD_VAR 0 5
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
// end ;
27885: LD_VAR 0 6
27889: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27890: LD_INT 0
27892: PPUSH
// if not chassis or not engine then
27893: LD_VAR 0 1
27897: NOT
27898: IFTRUE 27907
27900: PUSH
27901: LD_VAR 0 2
27905: NOT
27906: OR
27907: IFFALSE 27911
// exit ;
27909: GO 28107
// case engine of engine_solar :
27911: LD_VAR 0 2
27915: PUSH
27916: LD_INT 2
27918: DOUBLE
27919: EQUAL
27920: IFTRUE 27924
27922: GO 27962
27924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_INT 11
27932: PUSH
27933: LD_INT 12
27935: PUSH
27936: LD_INT 13
27938: PUSH
27939: LD_INT 14
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: ST_TO_ADDR
27960: GO 28091
27962: LD_INT 1
27964: DOUBLE
27965: EQUAL
27966: IFTRUE 27970
27968: GO 28032
27970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27971: LD_ADDR_VAR 0 3
27975: PUSH
27976: LD_INT 11
27978: PUSH
27979: LD_INT 12
27981: PUSH
27982: LD_INT 13
27984: PUSH
27985: LD_INT 14
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 3
27996: PUSH
27997: LD_INT 4
27999: PUSH
28000: LD_INT 5
28002: PUSH
28003: LD_INT 21
28005: PUSH
28006: LD_INT 23
28008: PUSH
28009: LD_INT 22
28011: PUSH
28012: LD_INT 24
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
28030: GO 28091
28032: LD_INT 3
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28040
28038: GO 28090
28040: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_INT 13
28048: PUSH
28049: LD_INT 14
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 4
28060: PUSH
28061: LD_INT 5
28063: PUSH
28064: LD_INT 21
28066: PUSH
28067: LD_INT 22
28069: PUSH
28070: LD_INT 23
28072: PUSH
28073: LD_INT 24
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
28088: GO 28091
28090: POP
// result := ( chassis in result ) ;
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_VAR 0 1
28100: PUSH
28101: LD_VAR 0 3
28105: IN
28106: ST_TO_ADDR
// end ;
28107: LD_VAR 0 3
28111: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28112: LD_INT 0
28114: PPUSH
// if not chassis or not weapon then
28115: LD_VAR 0 1
28119: NOT
28120: IFTRUE 28129
28122: PUSH
28123: LD_VAR 0 2
28127: NOT
28128: OR
28129: IFFALSE 28133
// exit ;
28131: GO 29227
// case weapon of us_machine_gun :
28133: LD_VAR 0 2
28137: PUSH
28138: LD_INT 2
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28176
28146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: LD_INT 4
28163: PUSH
28164: LD_INT 5
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
28174: GO 29211
28176: LD_INT 3
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28184
28182: GO 28214
28184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 4
28201: PUSH
28202: LD_INT 5
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: ST_TO_ADDR
28212: GO 29211
28214: LD_INT 11
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28252
28222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: LD_INT 4
28239: PUSH
28240: LD_INT 5
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
28250: GO 29211
28252: LD_INT 4
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28260
28258: GO 28286
28260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28261: LD_ADDR_VAR 0 3
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: LD_INT 4
28274: PUSH
28275: LD_INT 5
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
28284: GO 29211
28286: LD_INT 5
28288: DOUBLE
28289: EQUAL
28290: IFTRUE 28294
28292: GO 28320
28294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28295: LD_ADDR_VAR 0 3
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 3
28305: PUSH
28306: LD_INT 4
28308: PUSH
28309: LD_INT 5
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: ST_TO_ADDR
28318: GO 29211
28320: LD_INT 9
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28354
28328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28329: LD_ADDR_VAR 0 3
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: LD_INT 3
28339: PUSH
28340: LD_INT 4
28342: PUSH
28343: LD_INT 5
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
28352: GO 29211
28354: LD_INT 7
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28388
28362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: LD_INT 4
28376: PUSH
28377: LD_INT 5
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
28386: GO 29211
28388: LD_INT 12
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28422
28396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 3
28407: PUSH
28408: LD_INT 4
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
28420: GO 29211
28422: LD_INT 13
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28430
28428: GO 28456
28430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28431: LD_ADDR_VAR 0 3
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 3
28441: PUSH
28442: LD_INT 4
28444: PUSH
28445: LD_INT 5
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
28454: GO 29211
28456: LD_INT 14
28458: DOUBLE
28459: EQUAL
28460: IFTRUE 28464
28462: GO 28482
28464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: LD_INT 4
28472: PUSH
28473: LD_INT 5
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: ST_TO_ADDR
28480: GO 29211
28482: LD_INT 6
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28508
28490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28491: LD_ADDR_VAR 0 3
28495: PUSH
28496: LD_INT 4
28498: PUSH
28499: LD_INT 5
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: ST_TO_ADDR
28506: GO 29211
28508: LD_INT 10
28510: DOUBLE
28511: EQUAL
28512: IFTRUE 28516
28514: GO 28534
28516: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_INT 4
28524: PUSH
28525: LD_INT 5
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: ST_TO_ADDR
28532: GO 29211
28534: LD_INT 22
28536: DOUBLE
28537: EQUAL
28538: IFTRUE 28542
28540: GO 28568
28542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28543: LD_ADDR_VAR 0 3
28547: PUSH
28548: LD_INT 11
28550: PUSH
28551: LD_INT 12
28553: PUSH
28554: LD_INT 13
28556: PUSH
28557: LD_INT 14
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
28566: GO 29211
28568: LD_INT 23
28570: DOUBLE
28571: EQUAL
28572: IFTRUE 28576
28574: GO 28602
28576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 11
28584: PUSH
28585: LD_INT 12
28587: PUSH
28588: LD_INT 13
28590: PUSH
28591: LD_INT 14
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: ST_TO_ADDR
28600: GO 29211
28602: LD_INT 24
28604: DOUBLE
28605: EQUAL
28606: IFTRUE 28610
28608: GO 28636
28610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28611: LD_ADDR_VAR 0 3
28615: PUSH
28616: LD_INT 11
28618: PUSH
28619: LD_INT 12
28621: PUSH
28622: LD_INT 13
28624: PUSH
28625: LD_INT 14
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
28634: GO 29211
28636: LD_INT 30
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28670
28644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28645: LD_ADDR_VAR 0 3
28649: PUSH
28650: LD_INT 11
28652: PUSH
28653: LD_INT 12
28655: PUSH
28656: LD_INT 13
28658: PUSH
28659: LD_INT 14
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: ST_TO_ADDR
28668: GO 29211
28670: LD_INT 25
28672: DOUBLE
28673: EQUAL
28674: IFTRUE 28678
28676: GO 28696
28678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 13
28686: PUSH
28687: LD_INT 14
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: ST_TO_ADDR
28694: GO 29211
28696: LD_INT 27
28698: DOUBLE
28699: EQUAL
28700: IFTRUE 28704
28702: GO 28722
28704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_INT 13
28712: PUSH
28713: LD_INT 14
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: ST_TO_ADDR
28720: GO 29211
28722: LD_INT 92
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28756
28730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 11
28738: PUSH
28739: LD_INT 12
28741: PUSH
28742: LD_INT 13
28744: PUSH
28745: LD_INT 14
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
28754: GO 29211
28756: LD_INT 28
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28782
28764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 13
28772: PUSH
28773: LD_INT 14
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: ST_TO_ADDR
28780: GO 29211
28782: LD_INT 29
28784: DOUBLE
28785: EQUAL
28786: IFTRUE 28790
28788: GO 28808
28790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28791: LD_ADDR_VAR 0 3
28795: PUSH
28796: LD_INT 13
28798: PUSH
28799: LD_INT 14
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: ST_TO_ADDR
28806: GO 29211
28808: LD_INT 31
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28816
28814: GO 28834
28816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_INT 13
28824: PUSH
28825: LD_INT 14
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: ST_TO_ADDR
28832: GO 29211
28834: LD_INT 26
28836: DOUBLE
28837: EQUAL
28838: IFTRUE 28842
28840: GO 28860
28842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28843: LD_ADDR_VAR 0 3
28847: PUSH
28848: LD_INT 13
28850: PUSH
28851: LD_INT 14
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: ST_TO_ADDR
28858: GO 29211
28860: LD_INT 42
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28894
28868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: LD_INT 21
28876: PUSH
28877: LD_INT 22
28879: PUSH
28880: LD_INT 23
28882: PUSH
28883: LD_INT 24
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: ST_TO_ADDR
28892: GO 29211
28894: LD_INT 43
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28928
28902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28903: LD_ADDR_VAR 0 3
28907: PUSH
28908: LD_INT 21
28910: PUSH
28911: LD_INT 22
28913: PUSH
28914: LD_INT 23
28916: PUSH
28917: LD_INT 24
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
28926: GO 29211
28928: LD_INT 44
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28962
28936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_INT 21
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_INT 23
28950: PUSH
28951: LD_INT 24
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
28960: GO 29211
28962: LD_INT 45
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28996
28970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28971: LD_ADDR_VAR 0 3
28975: PUSH
28976: LD_INT 21
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_INT 23
28984: PUSH
28985: LD_INT 24
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: ST_TO_ADDR
28994: GO 29211
28996: LD_INT 49
28998: DOUBLE
28999: EQUAL
29000: IFTRUE 29004
29002: GO 29030
29004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: LD_INT 21
29012: PUSH
29013: LD_INT 22
29015: PUSH
29016: LD_INT 23
29018: PUSH
29019: LD_INT 24
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: ST_TO_ADDR
29028: GO 29211
29030: LD_INT 51
29032: DOUBLE
29033: EQUAL
29034: IFTRUE 29038
29036: GO 29064
29038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29039: LD_ADDR_VAR 0 3
29043: PUSH
29044: LD_INT 21
29046: PUSH
29047: LD_INT 22
29049: PUSH
29050: LD_INT 23
29052: PUSH
29053: LD_INT 24
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
29062: GO 29211
29064: LD_INT 52
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 29098
29072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29073: LD_ADDR_VAR 0 3
29077: PUSH
29078: LD_INT 21
29080: PUSH
29081: LD_INT 22
29083: PUSH
29084: LD_INT 23
29086: PUSH
29087: LD_INT 24
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: ST_TO_ADDR
29096: GO 29211
29098: LD_INT 53
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29124
29106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 23
29114: PUSH
29115: LD_INT 24
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: ST_TO_ADDR
29122: GO 29211
29124: LD_INT 46
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29150
29132: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 23
29140: PUSH
29141: LD_INT 24
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: ST_TO_ADDR
29148: GO 29211
29150: LD_INT 47
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 29176
29158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_INT 23
29166: PUSH
29167: LD_INT 24
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: ST_TO_ADDR
29174: GO 29211
29176: LD_INT 98
29178: DOUBLE
29179: EQUAL
29180: IFTRUE 29184
29182: GO 29210
29184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29185: LD_ADDR_VAR 0 3
29189: PUSH
29190: LD_INT 21
29192: PUSH
29193: LD_INT 22
29195: PUSH
29196: LD_INT 23
29198: PUSH
29199: LD_INT 24
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: ST_TO_ADDR
29208: GO 29211
29210: POP
// result := ( chassis in result ) ;
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_VAR 0 1
29220: PUSH
29221: LD_VAR 0 3
29225: IN
29226: ST_TO_ADDR
// end ;
29227: LD_VAR 0 3
29231: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
// result := array ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_VAR 0 1
29250: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29251: LD_VAR 0 1
29255: NOT
29256: IFTRUE 29265
29258: PUSH
29259: LD_VAR 0 2
29263: NOT
29264: OR
29265: IFTRUE 29274
29267: PUSH
29268: LD_VAR 0 3
29272: NOT
29273: OR
29274: IFTRUE 29288
29276: PUSH
29277: LD_VAR 0 2
29281: PUSH
29282: LD_VAR 0 1
29286: GREATER
29287: OR
29288: IFTRUE 29302
29290: PUSH
29291: LD_VAR 0 3
29295: PUSH
29296: LD_VAR 0 1
29300: GREATER
29301: OR
29302: IFFALSE 29306
// exit ;
29304: GO 29602
// if direction then
29306: LD_VAR 0 4
29310: IFFALSE 29374
// begin d := 1 ;
29312: LD_ADDR_VAR 0 9
29316: PUSH
29317: LD_INT 1
29319: ST_TO_ADDR
// if i_from > i_to then
29320: LD_VAR 0 2
29324: PUSH
29325: LD_VAR 0 3
29329: GREATER
29330: IFFALSE 29356
// length := ( array - i_from ) + i_to else
29332: LD_ADDR_VAR 0 11
29336: PUSH
29337: LD_VAR 0 1
29341: PUSH
29342: LD_VAR 0 2
29346: MINUS
29347: PUSH
29348: LD_VAR 0 3
29352: PLUS
29353: ST_TO_ADDR
29354: GO 29372
// length := i_to - i_from ;
29356: LD_ADDR_VAR 0 11
29360: PUSH
29361: LD_VAR 0 3
29365: PUSH
29366: LD_VAR 0 2
29370: MINUS
29371: ST_TO_ADDR
// end else
29372: GO 29435
// begin d := - 1 ;
29374: LD_ADDR_VAR 0 9
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: ST_TO_ADDR
// if i_from > i_to then
29383: LD_VAR 0 2
29387: PUSH
29388: LD_VAR 0 3
29392: GREATER
29393: IFFALSE 29413
// length := i_from - i_to else
29395: LD_ADDR_VAR 0 11
29399: PUSH
29400: LD_VAR 0 2
29404: PUSH
29405: LD_VAR 0 3
29409: MINUS
29410: ST_TO_ADDR
29411: GO 29435
// length := ( array - i_to ) + i_from ;
29413: LD_ADDR_VAR 0 11
29417: PUSH
29418: LD_VAR 0 1
29422: PUSH
29423: LD_VAR 0 3
29427: MINUS
29428: PUSH
29429: LD_VAR 0 2
29433: PLUS
29434: ST_TO_ADDR
// end ; if not length then
29435: LD_VAR 0 11
29439: NOT
29440: IFFALSE 29444
// exit ;
29442: GO 29602
// tmp := array ;
29444: LD_ADDR_VAR 0 10
29448: PUSH
29449: LD_VAR 0 1
29453: ST_TO_ADDR
// for i = 1 to length do
29454: LD_ADDR_VAR 0 6
29458: PUSH
29459: DOUBLE
29460: LD_INT 1
29462: DEC
29463: ST_TO_ADDR
29464: LD_VAR 0 11
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29590
// begin for j = 1 to array do
29472: LD_ADDR_VAR 0 7
29476: PUSH
29477: DOUBLE
29478: LD_INT 1
29480: DEC
29481: ST_TO_ADDR
29482: LD_VAR 0 1
29486: PUSH
29487: FOR_TO
29488: IFFALSE 29576
// begin k := j + d ;
29490: LD_ADDR_VAR 0 8
29494: PUSH
29495: LD_VAR 0 7
29499: PUSH
29500: LD_VAR 0 9
29504: PLUS
29505: ST_TO_ADDR
// if k > array then
29506: LD_VAR 0 8
29510: PUSH
29511: LD_VAR 0 1
29515: GREATER
29516: IFFALSE 29526
// k := 1 ;
29518: LD_ADDR_VAR 0 8
29522: PUSH
29523: LD_INT 1
29525: ST_TO_ADDR
// if not k then
29526: LD_VAR 0 8
29530: NOT
29531: IFFALSE 29543
// k := array ;
29533: LD_ADDR_VAR 0 8
29537: PUSH
29538: LD_VAR 0 1
29542: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29543: LD_ADDR_VAR 0 10
29547: PUSH
29548: LD_VAR 0 10
29552: PPUSH
29553: LD_VAR 0 8
29557: PPUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_VAR 0 7
29567: ARRAY
29568: PPUSH
29569: CALL_OW 1
29573: ST_TO_ADDR
// end ;
29574: GO 29487
29576: POP
29577: POP
// array := tmp ;
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_VAR 0 10
29587: ST_TO_ADDR
// end ;
29588: GO 29469
29590: POP
29591: POP
// result := array ;
29592: LD_ADDR_VAR 0 5
29596: PUSH
29597: LD_VAR 0 1
29601: ST_TO_ADDR
// end ;
29602: LD_VAR 0 5
29606: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29607: LD_INT 0
29609: PPUSH
29610: PPUSH
// result := 0 ;
29611: LD_ADDR_VAR 0 3
29615: PUSH
29616: LD_INT 0
29618: ST_TO_ADDR
// if not array or not value in array then
29619: LD_VAR 0 1
29623: NOT
29624: IFTRUE 29639
29626: PUSH
29627: LD_VAR 0 2
29631: PUSH
29632: LD_VAR 0 1
29636: IN
29637: NOT
29638: OR
29639: IFFALSE 29643
// exit ;
29641: GO 29697
// for i = 1 to array do
29643: LD_ADDR_VAR 0 4
29647: PUSH
29648: DOUBLE
29649: LD_INT 1
29651: DEC
29652: ST_TO_ADDR
29653: LD_VAR 0 1
29657: PUSH
29658: FOR_TO
29659: IFFALSE 29695
// if value = array [ i ] then
29661: LD_VAR 0 2
29665: PUSH
29666: LD_VAR 0 1
29670: PUSH
29671: LD_VAR 0 4
29675: ARRAY
29676: EQUAL
29677: IFFALSE 29693
// begin result := i ;
29679: LD_ADDR_VAR 0 3
29683: PUSH
29684: LD_VAR 0 4
29688: ST_TO_ADDR
// exit ;
29689: POP
29690: POP
29691: GO 29697
// end ;
29693: GO 29658
29695: POP
29696: POP
// end ;
29697: LD_VAR 0 3
29701: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29702: LD_INT 0
29704: PPUSH
// vc_chassis := chassis ;
29705: LD_ADDR_OWVAR 37
29709: PUSH
29710: LD_VAR 0 1
29714: ST_TO_ADDR
// vc_engine := engine ;
29715: LD_ADDR_OWVAR 39
29719: PUSH
29720: LD_VAR 0 2
29724: ST_TO_ADDR
// vc_control := control ;
29725: LD_ADDR_OWVAR 38
29729: PUSH
29730: LD_VAR 0 3
29734: ST_TO_ADDR
// vc_weapon := weapon ;
29735: LD_ADDR_OWVAR 40
29739: PUSH
29740: LD_VAR 0 4
29744: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29745: LD_ADDR_OWVAR 41
29749: PUSH
29750: LD_VAR 0 5
29754: ST_TO_ADDR
// end ;
29755: LD_VAR 0 6
29759: RET
// export function WantPlant ( unit ) ; var task ; begin
29760: LD_INT 0
29762: PPUSH
29763: PPUSH
// result := false ;
29764: LD_ADDR_VAR 0 2
29768: PUSH
29769: LD_INT 0
29771: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 437
29786: ST_TO_ADDR
// if task then
29787: LD_VAR 0 3
29791: IFFALSE 29819
// if task [ 1 ] [ 1 ] = p then
29793: LD_VAR 0 3
29797: PUSH
29798: LD_INT 1
29800: ARRAY
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PUSH
29806: LD_STRING p
29808: EQUAL
29809: IFFALSE 29819
// result := true ;
29811: LD_ADDR_VAR 0 2
29815: PUSH
29816: LD_INT 1
29818: ST_TO_ADDR
// end ;
29819: LD_VAR 0 2
29823: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29824: LD_INT 0
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
// if pos < 1 then
29830: LD_VAR 0 2
29834: PUSH
29835: LD_INT 1
29837: LESS
29838: IFFALSE 29842
// exit ;
29840: GO 30145
// if pos = 1 then
29842: LD_VAR 0 2
29846: PUSH
29847: LD_INT 1
29849: EQUAL
29850: IFFALSE 29883
// result := Replace ( arr , pos [ 1 ] , value ) else
29852: LD_ADDR_VAR 0 4
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: LD_VAR 0 2
29866: PUSH
29867: LD_INT 1
29869: ARRAY
29870: PPUSH
29871: LD_VAR 0 3
29875: PPUSH
29876: CALL_OW 1
29880: ST_TO_ADDR
29881: GO 30145
// begin tmp := arr ;
29883: LD_ADDR_VAR 0 6
29887: PUSH
29888: LD_VAR 0 1
29892: ST_TO_ADDR
// s_arr := [ tmp ] ;
29893: LD_ADDR_VAR 0 7
29897: PUSH
29898: LD_VAR 0 6
29902: PUSH
29903: EMPTY
29904: LIST
29905: ST_TO_ADDR
// for i = 1 to pos - 1 do
29906: LD_ADDR_VAR 0 5
29910: PUSH
29911: DOUBLE
29912: LD_INT 1
29914: DEC
29915: ST_TO_ADDR
29916: LD_VAR 0 2
29920: PUSH
29921: LD_INT 1
29923: MINUS
29924: PUSH
29925: FOR_TO
29926: IFFALSE 29971
// begin tmp := tmp [ pos [ i ] ] ;
29928: LD_ADDR_VAR 0 6
29932: PUSH
29933: LD_VAR 0 6
29937: PUSH
29938: LD_VAR 0 2
29942: PUSH
29943: LD_VAR 0 5
29947: ARRAY
29948: ARRAY
29949: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29950: LD_ADDR_VAR 0 7
29954: PUSH
29955: LD_VAR 0 7
29959: PUSH
29960: LD_VAR 0 6
29964: PUSH
29965: EMPTY
29966: LIST
29967: ADD
29968: ST_TO_ADDR
// end ;
29969: GO 29925
29971: POP
29972: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29973: LD_ADDR_VAR 0 6
29977: PUSH
29978: LD_VAR 0 6
29982: PPUSH
29983: LD_VAR 0 2
29987: PUSH
29988: LD_VAR 0 2
29992: ARRAY
29993: PPUSH
29994: LD_VAR 0 3
29998: PPUSH
29999: CALL_OW 1
30003: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30004: LD_ADDR_VAR 0 7
30008: PUSH
30009: LD_VAR 0 7
30013: PPUSH
30014: LD_VAR 0 7
30018: PPUSH
30019: LD_VAR 0 6
30023: PPUSH
30024: CALL_OW 1
30028: ST_TO_ADDR
// for i = s_arr downto 2 do
30029: LD_ADDR_VAR 0 5
30033: PUSH
30034: DOUBLE
30035: LD_VAR 0 7
30039: INC
30040: ST_TO_ADDR
30041: LD_INT 2
30043: PUSH
30044: FOR_DOWNTO
30045: IFFALSE 30129
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30047: LD_ADDR_VAR 0 6
30051: PUSH
30052: LD_VAR 0 7
30056: PUSH
30057: LD_VAR 0 5
30061: PUSH
30062: LD_INT 1
30064: MINUS
30065: ARRAY
30066: PPUSH
30067: LD_VAR 0 2
30071: PUSH
30072: LD_VAR 0 5
30076: PUSH
30077: LD_INT 1
30079: MINUS
30080: ARRAY
30081: PPUSH
30082: LD_VAR 0 7
30086: PUSH
30087: LD_VAR 0 5
30091: ARRAY
30092: PPUSH
30093: CALL_OW 1
30097: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: LD_VAR 0 7
30107: PPUSH
30108: LD_VAR 0 5
30112: PUSH
30113: LD_INT 1
30115: MINUS
30116: PPUSH
30117: LD_VAR 0 6
30121: PPUSH
30122: CALL_OW 1
30126: ST_TO_ADDR
// end ;
30127: GO 30044
30129: POP
30130: POP
// result := s_arr [ 1 ] ;
30131: LD_ADDR_VAR 0 4
30135: PUSH
30136: LD_VAR 0 7
30140: PUSH
30141: LD_INT 1
30143: ARRAY
30144: ST_TO_ADDR
// end ; end ;
30145: LD_VAR 0 4
30149: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
// if not list then
30154: LD_VAR 0 1
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30254
// i := list [ pos1 ] ;
30163: LD_ADDR_VAR 0 5
30167: PUSH
30168: LD_VAR 0 1
30172: PUSH
30173: LD_VAR 0 2
30177: ARRAY
30178: ST_TO_ADDR
// if not i then
30179: LD_VAR 0 5
30183: NOT
30184: IFFALSE 30188
// exit ;
30186: GO 30254
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30188: LD_ADDR_VAR 0 1
30192: PUSH
30193: LD_VAR 0 1
30197: PPUSH
30198: LD_VAR 0 2
30202: PPUSH
30203: LD_VAR 0 1
30207: PUSH
30208: LD_VAR 0 3
30212: ARRAY
30213: PPUSH
30214: CALL_OW 1
30218: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: LD_VAR 0 5
30238: PPUSH
30239: CALL_OW 1
30243: ST_TO_ADDR
// result := list ;
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 1
30253: ST_TO_ADDR
// end ;
30254: LD_VAR 0 4
30258: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30259: LD_INT 0
30261: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30262: LD_ADDR_VAR 0 5
30266: PUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: CALL_OW 250
30276: PPUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL_OW 251
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_VAR 0 4
30301: PPUSH
30302: CALL 30684 0 5
30306: ST_TO_ADDR
// end ;
30307: LD_VAR 0 5
30311: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
// if not list or not unit then
30318: LD_VAR 0 2
30322: NOT
30323: IFTRUE 30332
30325: PUSH
30326: LD_VAR 0 1
30330: NOT
30331: OR
30332: IFFALSE 30336
// exit ;
30334: GO 30679
// result := [ ] ;
30336: LD_ADDR_VAR 0 5
30340: PUSH
30341: EMPTY
30342: ST_TO_ADDR
// for i in list do
30343: LD_ADDR_VAR 0 6
30347: PUSH
30348: LD_VAR 0 2
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30572
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30356: LD_ADDR_VAR 0 8
30360: PUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 6
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PPUSH
30375: LD_VAR 0 6
30379: PUSH
30380: LD_INT 2
30382: ARRAY
30383: PPUSH
30384: CALL_OW 297
30388: ST_TO_ADDR
// if not Count ( result ) then
30389: LD_VAR 0 5
30393: PPUSH
30394: CALL 26906 0 1
30398: NOT
30399: IFFALSE 30432
// begin result := Join ( result , [ i , tmp ] ) ;
30401: LD_ADDR_VAR 0 5
30405: PUSH
30406: LD_VAR 0 5
30410: PPUSH
30411: LD_VAR 0 6
30415: PUSH
30416: LD_VAR 0 8
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PPUSH
30425: CALL 62882 0 2
30429: ST_TO_ADDR
// continue ;
30430: GO 30353
// end ; if result [ result ] [ 2 ] <= tmp then
30432: LD_VAR 0 5
30436: PUSH
30437: LD_VAR 0 5
30441: ARRAY
30442: PUSH
30443: LD_INT 2
30445: ARRAY
30446: PUSH
30447: LD_VAR 0 8
30451: LESSEQUAL
30452: IFFALSE 30485
// result := Join ( result , [ i , tmp ] ) else
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_VAR 0 5
30463: PPUSH
30464: LD_VAR 0 6
30468: PUSH
30469: LD_VAR 0 8
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL 62882 0 2
30482: ST_TO_ADDR
30483: GO 30570
// begin for j := 1 to Count ( result ) do
30485: LD_ADDR_VAR 0 7
30489: PUSH
30490: DOUBLE
30491: LD_INT 1
30493: DEC
30494: ST_TO_ADDR
30495: LD_VAR 0 5
30499: PPUSH
30500: CALL 26906 0 1
30504: PUSH
30505: FOR_TO
30506: IFFALSE 30568
// begin if tmp < result [ j ] [ 2 ] then
30508: LD_VAR 0 8
30512: PUSH
30513: LD_VAR 0 5
30517: PUSH
30518: LD_VAR 0 7
30522: ARRAY
30523: PUSH
30524: LD_INT 2
30526: ARRAY
30527: LESS
30528: IFFALSE 30566
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_VAR 0 5
30539: PPUSH
30540: LD_VAR 0 7
30544: PPUSH
30545: LD_VAR 0 6
30549: PUSH
30550: LD_VAR 0 8
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PPUSH
30559: CALL_OW 2
30563: ST_TO_ADDR
// break ;
30564: GO 30568
// end ; end ;
30566: GO 30505
30568: POP
30569: POP
// end ; end ;
30570: GO 30353
30572: POP
30573: POP
// if result and not asc then
30574: LD_VAR 0 5
30578: IFFALSE 30587
30580: PUSH
30581: LD_VAR 0 3
30585: NOT
30586: AND
30587: IFFALSE 30604
// result := ReverseArray ( result ) ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_VAR 0 5
30598: PPUSH
30599: CALL 57962 0 1
30603: ST_TO_ADDR
// tmp := [ ] ;
30604: LD_ADDR_VAR 0 8
30608: PUSH
30609: EMPTY
30610: ST_TO_ADDR
// if mode then
30611: LD_VAR 0 4
30615: IFFALSE 30679
// begin for i := 1 to result do
30617: LD_ADDR_VAR 0 6
30621: PUSH
30622: DOUBLE
30623: LD_INT 1
30625: DEC
30626: ST_TO_ADDR
30627: LD_VAR 0 5
30631: PUSH
30632: FOR_TO
30633: IFFALSE 30667
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30635: LD_ADDR_VAR 0 8
30639: PUSH
30640: LD_VAR 0 8
30644: PPUSH
30645: LD_VAR 0 5
30649: PUSH
30650: LD_VAR 0 6
30654: ARRAY
30655: PUSH
30656: LD_INT 1
30658: ARRAY
30659: PPUSH
30660: CALL 62882 0 2
30664: ST_TO_ADDR
30665: GO 30632
30667: POP
30668: POP
// result := tmp ;
30669: LD_ADDR_VAR 0 5
30673: PUSH
30674: LD_VAR 0 8
30678: ST_TO_ADDR
// end ; end ;
30679: LD_VAR 0 5
30683: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30684: LD_INT 0
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
// if not list then
30690: LD_VAR 0 3
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 31089
// result := [ ] ;
30699: LD_ADDR_VAR 0 6
30703: PUSH
30704: EMPTY
30705: ST_TO_ADDR
// for i in list do
30706: LD_ADDR_VAR 0 7
30710: PUSH
30711: LD_VAR 0 3
30715: PUSH
30716: FOR_IN
30717: IFFALSE 30919
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30719: LD_ADDR_VAR 0 9
30723: PUSH
30724: LD_VAR 0 7
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: CALL_OW 297
30743: ST_TO_ADDR
// if not result then
30744: LD_VAR 0 6
30748: NOT
30749: IFFALSE 30775
// result := [ [ i , tmp ] ] else
30751: LD_ADDR_VAR 0 6
30755: PUSH
30756: LD_VAR 0 7
30760: PUSH
30761: LD_VAR 0 9
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: ST_TO_ADDR
30773: GO 30917
// begin if result [ result ] [ 2 ] <= tmp then
30775: LD_VAR 0 6
30779: PUSH
30780: LD_VAR 0 6
30784: ARRAY
30785: PUSH
30786: LD_INT 2
30788: ARRAY
30789: PUSH
30790: LD_VAR 0 9
30794: LESSEQUAL
30795: IFFALSE 30837
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30797: LD_ADDR_VAR 0 6
30801: PUSH
30802: LD_VAR 0 6
30806: PPUSH
30807: LD_VAR 0 6
30811: PUSH
30812: LD_INT 1
30814: PLUS
30815: PPUSH
30816: LD_VAR 0 7
30820: PUSH
30821: LD_VAR 0 9
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PPUSH
30830: CALL_OW 2
30834: ST_TO_ADDR
30835: GO 30917
// for j := 1 to result do
30837: LD_ADDR_VAR 0 8
30841: PUSH
30842: DOUBLE
30843: LD_INT 1
30845: DEC
30846: ST_TO_ADDR
30847: LD_VAR 0 6
30851: PUSH
30852: FOR_TO
30853: IFFALSE 30915
// begin if tmp < result [ j ] [ 2 ] then
30855: LD_VAR 0 9
30859: PUSH
30860: LD_VAR 0 6
30864: PUSH
30865: LD_VAR 0 8
30869: ARRAY
30870: PUSH
30871: LD_INT 2
30873: ARRAY
30874: LESS
30875: IFFALSE 30913
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30877: LD_ADDR_VAR 0 6
30881: PUSH
30882: LD_VAR 0 6
30886: PPUSH
30887: LD_VAR 0 8
30891: PPUSH
30892: LD_VAR 0 7
30896: PUSH
30897: LD_VAR 0 9
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PPUSH
30906: CALL_OW 2
30910: ST_TO_ADDR
// break ;
30911: GO 30915
// end ; end ;
30913: GO 30852
30915: POP
30916: POP
// end ; end ;
30917: GO 30716
30919: POP
30920: POP
// if result and not asc then
30921: LD_VAR 0 6
30925: IFFALSE 30934
30927: PUSH
30928: LD_VAR 0 4
30932: NOT
30933: AND
30934: IFFALSE 31009
// begin tmp := result ;
30936: LD_ADDR_VAR 0 9
30940: PUSH
30941: LD_VAR 0 6
30945: ST_TO_ADDR
// for i = tmp downto 1 do
30946: LD_ADDR_VAR 0 7
30950: PUSH
30951: DOUBLE
30952: LD_VAR 0 9
30956: INC
30957: ST_TO_ADDR
30958: LD_INT 1
30960: PUSH
30961: FOR_DOWNTO
30962: IFFALSE 31007
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30964: LD_ADDR_VAR 0 6
30968: PUSH
30969: LD_VAR 0 6
30973: PPUSH
30974: LD_VAR 0 9
30978: PUSH
30979: LD_VAR 0 7
30983: MINUS
30984: PUSH
30985: LD_INT 1
30987: PLUS
30988: PPUSH
30989: LD_VAR 0 9
30993: PUSH
30994: LD_VAR 0 7
30998: ARRAY
30999: PPUSH
31000: CALL_OW 1
31004: ST_TO_ADDR
31005: GO 30961
31007: POP
31008: POP
// end ; tmp := [ ] ;
31009: LD_ADDR_VAR 0 9
31013: PUSH
31014: EMPTY
31015: ST_TO_ADDR
// if mode then
31016: LD_VAR 0 5
31020: IFFALSE 31089
// begin for i = 1 to result do
31022: LD_ADDR_VAR 0 7
31026: PUSH
31027: DOUBLE
31028: LD_INT 1
31030: DEC
31031: ST_TO_ADDR
31032: LD_VAR 0 6
31036: PUSH
31037: FOR_TO
31038: IFFALSE 31077
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31040: LD_ADDR_VAR 0 9
31044: PUSH
31045: LD_VAR 0 9
31049: PPUSH
31050: LD_VAR 0 7
31054: PPUSH
31055: LD_VAR 0 6
31059: PUSH
31060: LD_VAR 0 7
31064: ARRAY
31065: PUSH
31066: LD_INT 1
31068: ARRAY
31069: PPUSH
31070: CALL_OW 1
31074: ST_TO_ADDR
31075: GO 31037
31077: POP
31078: POP
// result := tmp ;
31079: LD_ADDR_VAR 0 6
31083: PUSH
31084: LD_VAR 0 9
31088: ST_TO_ADDR
// end ; end ;
31089: LD_VAR 0 6
31093: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31094: LD_INT 0
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
31101: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31102: LD_ADDR_VAR 0 5
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// if not x or not y then
31124: LD_VAR 0 2
31128: NOT
31129: IFTRUE 31138
31131: PUSH
31132: LD_VAR 0 3
31136: NOT
31137: OR
31138: IFFALSE 31142
// exit ;
31140: GO 32798
// if not range then
31142: LD_VAR 0 4
31146: NOT
31147: IFFALSE 31157
// range := 10 ;
31149: LD_ADDR_VAR 0 4
31153: PUSH
31154: LD_INT 10
31156: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31157: LD_ADDR_VAR 0 8
31161: PUSH
31162: LD_INT 81
31164: PUSH
31165: LD_VAR 0 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 92
31176: PUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_VAR 0 3
31186: PUSH
31187: LD_VAR 0 4
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 21
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: PPUSH
31220: CALL_OW 69
31224: ST_TO_ADDR
// if not tmp then
31225: LD_VAR 0 8
31229: NOT
31230: IFFALSE 31234
// exit ;
31232: GO 32798
// for i in tmp do
31234: LD_ADDR_VAR 0 6
31238: PUSH
31239: LD_VAR 0 8
31243: PUSH
31244: FOR_IN
31245: IFFALSE 32773
// begin points := [ 0 , 0 , 0 ] ;
31247: LD_ADDR_VAR 0 9
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// bpoints := 1 ;
31266: LD_ADDR_VAR 0 10
31270: PUSH
31271: LD_INT 1
31273: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31274: LD_VAR 0 6
31278: PPUSH
31279: CALL_OW 247
31283: PUSH
31284: LD_INT 1
31286: DOUBLE
31287: EQUAL
31288: IFTRUE 31292
31290: GO 31874
31292: POP
// begin if GetClass ( i ) = 1 then
31293: LD_VAR 0 6
31297: PPUSH
31298: CALL_OW 257
31302: PUSH
31303: LD_INT 1
31305: EQUAL
31306: IFFALSE 31327
// points := [ 10 , 5 , 3 ] ;
31308: LD_ADDR_VAR 0 9
31312: PUSH
31313: LD_INT 10
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31327: LD_VAR 0 6
31331: PPUSH
31332: CALL_OW 257
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: IN
31351: IFFALSE 31372
// points := [ 3 , 2 , 1 ] ;
31353: LD_ADDR_VAR 0 9
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31372: LD_VAR 0 6
31376: PPUSH
31377: CALL_OW 257
31381: PUSH
31382: LD_INT 5
31384: EQUAL
31385: IFFALSE 31406
// points := [ 130 , 5 , 2 ] ;
31387: LD_ADDR_VAR 0 9
31391: PUSH
31392: LD_INT 130
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31406: LD_VAR 0 6
31410: PPUSH
31411: CALL_OW 257
31415: PUSH
31416: LD_INT 8
31418: EQUAL
31419: IFFALSE 31440
// points := [ 35 , 35 , 30 ] ;
31421: LD_ADDR_VAR 0 9
31425: PUSH
31426: LD_INT 35
31428: PUSH
31429: LD_INT 35
31431: PUSH
31432: LD_INT 30
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31440: LD_VAR 0 6
31444: PPUSH
31445: CALL_OW 257
31449: PUSH
31450: LD_INT 9
31452: EQUAL
31453: IFFALSE 31474
// points := [ 20 , 55 , 40 ] ;
31455: LD_ADDR_VAR 0 9
31459: PUSH
31460: LD_INT 20
31462: PUSH
31463: LD_INT 55
31465: PUSH
31466: LD_INT 40
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31474: LD_VAR 0 6
31478: PPUSH
31479: CALL_OW 257
31483: PUSH
31484: LD_INT 12
31486: PUSH
31487: LD_INT 16
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: IN
31494: IFFALSE 31515
// points := [ 5 , 3 , 2 ] ;
31496: LD_ADDR_VAR 0 9
31500: PUSH
31501: LD_INT 5
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31515: LD_VAR 0 6
31519: PPUSH
31520: CALL_OW 257
31524: PUSH
31525: LD_INT 17
31527: EQUAL
31528: IFFALSE 31549
// points := [ 100 , 50 , 75 ] ;
31530: LD_ADDR_VAR 0 9
31534: PUSH
31535: LD_INT 100
31537: PUSH
31538: LD_INT 50
31540: PUSH
31541: LD_INT 75
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31549: LD_VAR 0 6
31553: PPUSH
31554: CALL_OW 257
31558: PUSH
31559: LD_INT 15
31561: EQUAL
31562: IFFALSE 31583
// points := [ 10 , 5 , 3 ] ;
31564: LD_ADDR_VAR 0 9
31568: PUSH
31569: LD_INT 10
31571: PUSH
31572: LD_INT 5
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31583: LD_VAR 0 6
31587: PPUSH
31588: CALL_OW 257
31592: PUSH
31593: LD_INT 14
31595: EQUAL
31596: IFFALSE 31617
// points := [ 10 , 0 , 0 ] ;
31598: LD_ADDR_VAR 0 9
31602: PUSH
31603: LD_INT 10
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31617: LD_VAR 0 6
31621: PPUSH
31622: CALL_OW 257
31626: PUSH
31627: LD_INT 11
31629: EQUAL
31630: IFFALSE 31651
// points := [ 30 , 10 , 5 ] ;
31632: LD_ADDR_VAR 0 9
31636: PUSH
31637: LD_INT 30
31639: PUSH
31640: LD_INT 10
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31651: LD_VAR 0 1
31655: PPUSH
31656: LD_INT 5
31658: PPUSH
31659: CALL_OW 321
31663: PUSH
31664: LD_INT 2
31666: EQUAL
31667: IFFALSE 31684
// bpoints := bpoints * 1.8 ;
31669: LD_ADDR_VAR 0 10
31673: PUSH
31674: LD_VAR 0 10
31678: PUSH
31679: LD_REAL  1.80000000000000E+0000
31682: MUL
31683: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31684: LD_VAR 0 6
31688: PPUSH
31689: CALL_OW 257
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: LD_INT 3
31702: PUSH
31703: LD_INT 4
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: IN
31712: IFFALSE 31732
31714: PUSH
31715: LD_VAR 0 1
31719: PPUSH
31720: LD_INT 51
31722: PPUSH
31723: CALL_OW 321
31727: PUSH
31728: LD_INT 2
31730: EQUAL
31731: AND
31732: IFFALSE 31749
// bpoints := bpoints * 1.2 ;
31734: LD_ADDR_VAR 0 10
31738: PUSH
31739: LD_VAR 0 10
31743: PUSH
31744: LD_REAL  1.20000000000000E+0000
31747: MUL
31748: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31749: LD_VAR 0 6
31753: PPUSH
31754: CALL_OW 257
31758: PUSH
31759: LD_INT 5
31761: PUSH
31762: LD_INT 7
31764: PUSH
31765: LD_INT 9
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: IN
31773: IFFALSE 31793
31775: PUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: LD_INT 52
31783: PPUSH
31784: CALL_OW 321
31788: PUSH
31789: LD_INT 2
31791: EQUAL
31792: AND
31793: IFFALSE 31810
// bpoints := bpoints * 1.5 ;
31795: LD_ADDR_VAR 0 10
31799: PUSH
31800: LD_VAR 0 10
31804: PUSH
31805: LD_REAL  1.50000000000000E+0000
31808: MUL
31809: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31810: LD_VAR 0 1
31814: PPUSH
31815: LD_INT 66
31817: PPUSH
31818: CALL_OW 321
31822: PUSH
31823: LD_INT 2
31825: EQUAL
31826: IFFALSE 31843
// bpoints := bpoints * 1.1 ;
31828: LD_ADDR_VAR 0 10
31832: PUSH
31833: LD_VAR 0 10
31837: PUSH
31838: LD_REAL  1.10000000000000E+0000
31841: MUL
31842: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31843: LD_ADDR_VAR 0 10
31847: PUSH
31848: LD_VAR 0 10
31852: PUSH
31853: LD_VAR 0 6
31857: PPUSH
31858: LD_INT 1
31860: PPUSH
31861: CALL_OW 259
31865: PUSH
31866: LD_REAL  1.15000000000000E+0000
31869: MUL
31870: MUL
31871: ST_TO_ADDR
// end ; unit_vehicle :
31872: GO 32702
31874: LD_INT 2
31876: DOUBLE
31877: EQUAL
31878: IFTRUE 31882
31880: GO 32690
31882: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31883: LD_VAR 0 6
31887: PPUSH
31888: CALL_OW 264
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: LD_INT 42
31898: PUSH
31899: LD_INT 24
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: IN
31907: IFFALSE 31928
// points := [ 25 , 5 , 3 ] ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: LD_INT 25
31916: PUSH
31917: LD_INT 5
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31928: LD_VAR 0 6
31932: PPUSH
31933: CALL_OW 264
31937: PUSH
31938: LD_INT 4
31940: PUSH
31941: LD_INT 43
31943: PUSH
31944: LD_INT 25
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: IN
31952: IFFALSE 31973
// points := [ 40 , 15 , 5 ] ;
31954: LD_ADDR_VAR 0 9
31958: PUSH
31959: LD_INT 40
31961: PUSH
31962: LD_INT 15
31964: PUSH
31965: LD_INT 5
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 264
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 23
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: IN
31993: IFFALSE 32014
// points := [ 7 , 25 , 8 ] ;
31995: LD_ADDR_VAR 0 9
31999: PUSH
32000: LD_INT 7
32002: PUSH
32003: LD_INT 25
32005: PUSH
32006: LD_INT 8
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32014: LD_VAR 0 6
32018: PPUSH
32019: CALL_OW 264
32023: PUSH
32024: LD_INT 5
32026: PUSH
32027: LD_INT 27
32029: PUSH
32030: LD_INT 44
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: IN
32038: IFFALSE 32059
// points := [ 14 , 50 , 16 ] ;
32040: LD_ADDR_VAR 0 9
32044: PUSH
32045: LD_INT 14
32047: PUSH
32048: LD_INT 50
32050: PUSH
32051: LD_INT 16
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32059: LD_VAR 0 6
32063: PPUSH
32064: CALL_OW 264
32068: PUSH
32069: LD_INT 6
32071: PUSH
32072: LD_INT 46
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: IN
32079: IFFALSE 32100
// points := [ 32 , 120 , 70 ] ;
32081: LD_ADDR_VAR 0 9
32085: PUSH
32086: LD_INT 32
32088: PUSH
32089: LD_INT 120
32091: PUSH
32092: LD_INT 70
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32100: LD_VAR 0 6
32104: PPUSH
32105: CALL_OW 264
32109: PUSH
32110: LD_INT 7
32112: PUSH
32113: LD_INT 28
32115: PUSH
32116: LD_INT 45
32118: PUSH
32119: LD_INT 92
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: IN
32128: IFFALSE 32149
// points := [ 35 , 20 , 45 ] ;
32130: LD_ADDR_VAR 0 9
32134: PUSH
32135: LD_INT 35
32137: PUSH
32138: LD_INT 20
32140: PUSH
32141: LD_INT 45
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32149: LD_VAR 0 6
32153: PPUSH
32154: CALL_OW 264
32158: PUSH
32159: LD_INT 47
32161: PUSH
32162: EMPTY
32163: LIST
32164: IN
32165: IFFALSE 32186
// points := [ 67 , 45 , 75 ] ;
32167: LD_ADDR_VAR 0 9
32171: PUSH
32172: LD_INT 67
32174: PUSH
32175: LD_INT 45
32177: PUSH
32178: LD_INT 75
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32186: LD_VAR 0 6
32190: PPUSH
32191: CALL_OW 264
32195: PUSH
32196: LD_INT 26
32198: PUSH
32199: EMPTY
32200: LIST
32201: IN
32202: IFFALSE 32223
// points := [ 120 , 30 , 80 ] ;
32204: LD_ADDR_VAR 0 9
32208: PUSH
32209: LD_INT 120
32211: PUSH
32212: LD_INT 30
32214: PUSH
32215: LD_INT 80
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32223: LD_VAR 0 6
32227: PPUSH
32228: CALL_OW 264
32232: PUSH
32233: LD_INT 22
32235: PUSH
32236: EMPTY
32237: LIST
32238: IN
32239: IFFALSE 32260
// points := [ 40 , 1 , 1 ] ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_INT 40
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 264
32269: PUSH
32270: LD_INT 29
32272: PUSH
32273: EMPTY
32274: LIST
32275: IN
32276: IFFALSE 32297
// points := [ 70 , 200 , 400 ] ;
32278: LD_ADDR_VAR 0 9
32282: PUSH
32283: LD_INT 70
32285: PUSH
32286: LD_INT 200
32288: PUSH
32289: LD_INT 400
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32297: LD_VAR 0 6
32301: PPUSH
32302: CALL_OW 264
32306: PUSH
32307: LD_INT 14
32309: PUSH
32310: LD_INT 53
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: IN
32317: IFFALSE 32338
// points := [ 40 , 10 , 20 ] ;
32319: LD_ADDR_VAR 0 9
32323: PUSH
32324: LD_INT 40
32326: PUSH
32327: LD_INT 10
32329: PUSH
32330: LD_INT 20
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32338: LD_VAR 0 6
32342: PPUSH
32343: CALL_OW 264
32347: PUSH
32348: LD_INT 9
32350: PUSH
32351: EMPTY
32352: LIST
32353: IN
32354: IFFALSE 32375
// points := [ 5 , 70 , 20 ] ;
32356: LD_ADDR_VAR 0 9
32360: PUSH
32361: LD_INT 5
32363: PUSH
32364: LD_INT 70
32366: PUSH
32367: LD_INT 20
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32375: LD_VAR 0 6
32379: PPUSH
32380: CALL_OW 264
32384: PUSH
32385: LD_INT 10
32387: PUSH
32388: EMPTY
32389: LIST
32390: IN
32391: IFFALSE 32412
// points := [ 35 , 110 , 70 ] ;
32393: LD_ADDR_VAR 0 9
32397: PUSH
32398: LD_INT 35
32400: PUSH
32401: LD_INT 110
32403: PUSH
32404: LD_INT 70
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32412: LD_VAR 0 6
32416: PPUSH
32417: CALL_OW 265
32421: PUSH
32422: LD_INT 25
32424: EQUAL
32425: IFFALSE 32446
// points := [ 80 , 65 , 100 ] ;
32427: LD_ADDR_VAR 0 9
32431: PUSH
32432: LD_INT 80
32434: PUSH
32435: LD_INT 65
32437: PUSH
32438: LD_INT 100
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32446: LD_VAR 0 6
32450: PPUSH
32451: CALL_OW 263
32455: PUSH
32456: LD_INT 1
32458: EQUAL
32459: IFFALSE 32494
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32461: LD_ADDR_VAR 0 10
32465: PUSH
32466: LD_VAR 0 10
32470: PUSH
32471: LD_VAR 0 6
32475: PPUSH
32476: CALL_OW 311
32480: PPUSH
32481: LD_INT 3
32483: PPUSH
32484: CALL_OW 259
32488: PUSH
32489: LD_INT 4
32491: MUL
32492: MUL
32493: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32494: LD_VAR 0 6
32498: PPUSH
32499: CALL_OW 263
32503: PUSH
32504: LD_INT 2
32506: EQUAL
32507: IFFALSE 32558
// begin j := IsControledBy ( i ) ;
32509: LD_ADDR_VAR 0 7
32513: PUSH
32514: LD_VAR 0 6
32518: PPUSH
32519: CALL_OW 312
32523: ST_TO_ADDR
// if j then
32524: LD_VAR 0 7
32528: IFFALSE 32558
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32530: LD_ADDR_VAR 0 10
32534: PUSH
32535: LD_VAR 0 10
32539: PUSH
32540: LD_VAR 0 7
32544: PPUSH
32545: LD_INT 3
32547: PPUSH
32548: CALL_OW 259
32552: PUSH
32553: LD_INT 3
32555: MUL
32556: MUL
32557: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32558: LD_VAR 0 6
32562: PPUSH
32563: CALL_OW 264
32567: PUSH
32568: LD_INT 5
32570: PUSH
32571: LD_INT 6
32573: PUSH
32574: LD_INT 46
32576: PUSH
32577: LD_INT 44
32579: PUSH
32580: LD_INT 47
32582: PUSH
32583: LD_INT 45
32585: PUSH
32586: LD_INT 28
32588: PUSH
32589: LD_INT 7
32591: PUSH
32592: LD_INT 27
32594: PUSH
32595: LD_INT 29
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: IN
32610: IFFALSE 32630
32612: PUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: LD_INT 52
32620: PPUSH
32621: CALL_OW 321
32625: PUSH
32626: LD_INT 2
32628: EQUAL
32629: AND
32630: IFFALSE 32647
// bpoints := bpoints * 1.2 ;
32632: LD_ADDR_VAR 0 10
32636: PUSH
32637: LD_VAR 0 10
32641: PUSH
32642: LD_REAL  1.20000000000000E+0000
32645: MUL
32646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32647: LD_VAR 0 6
32651: PPUSH
32652: CALL_OW 264
32656: PUSH
32657: LD_INT 6
32659: PUSH
32660: LD_INT 46
32662: PUSH
32663: LD_INT 47
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: IN
32671: IFFALSE 32688
// bpoints := bpoints * 1.2 ;
32673: LD_ADDR_VAR 0 10
32677: PUSH
32678: LD_VAR 0 10
32682: PUSH
32683: LD_REAL  1.20000000000000E+0000
32686: MUL
32687: ST_TO_ADDR
// end ; unit_building :
32688: GO 32702
32690: LD_INT 3
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32701
32698: POP
// ; end ;
32699: GO 32702
32701: POP
// for j = 1 to 3 do
32702: LD_ADDR_VAR 0 7
32706: PUSH
32707: DOUBLE
32708: LD_INT 1
32710: DEC
32711: ST_TO_ADDR
32712: LD_INT 3
32714: PUSH
32715: FOR_TO
32716: IFFALSE 32769
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 7
32732: PPUSH
32733: LD_VAR 0 5
32737: PUSH
32738: LD_VAR 0 7
32742: ARRAY
32743: PUSH
32744: LD_VAR 0 9
32748: PUSH
32749: LD_VAR 0 7
32753: ARRAY
32754: PUSH
32755: LD_VAR 0 10
32759: MUL
32760: PLUS
32761: PPUSH
32762: CALL_OW 1
32766: ST_TO_ADDR
32767: GO 32715
32769: POP
32770: POP
// end ;
32771: GO 31244
32773: POP
32774: POP
// result := Replace ( result , 4 , tmp ) ;
32775: LD_ADDR_VAR 0 5
32779: PUSH
32780: LD_VAR 0 5
32784: PPUSH
32785: LD_INT 4
32787: PPUSH
32788: LD_VAR 0 8
32792: PPUSH
32793: CALL_OW 1
32797: ST_TO_ADDR
// end ;
32798: LD_VAR 0 5
32802: RET
// export function DangerAtRange ( unit , range ) ; begin
32803: LD_INT 0
32805: PPUSH
// if not unit then
32806: LD_VAR 0 1
32810: NOT
32811: IFFALSE 32815
// exit ;
32813: GO 32860
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 255
32829: PPUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 250
32839: PPUSH
32840: LD_VAR 0 1
32844: PPUSH
32845: CALL_OW 251
32849: PPUSH
32850: LD_VAR 0 2
32854: PPUSH
32855: CALL 31094 0 4
32859: ST_TO_ADDR
// end ;
32860: LD_VAR 0 3
32864: RET
// export function DangerInArea ( side , area ) ; begin
32865: LD_INT 0
32867: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_INT 81
32880: PUSH
32881: LD_VAR 0 1
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PPUSH
32890: CALL_OW 70
32894: ST_TO_ADDR
// end ;
32895: LD_VAR 0 3
32899: RET
// export function IsExtension ( b ) ; begin
32900: LD_INT 0
32902: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32903: LD_ADDR_VAR 0 2
32907: PUSH
32908: LD_VAR 0 1
32912: PUSH
32913: LD_INT 23
32915: PUSH
32916: LD_INT 20
32918: PUSH
32919: LD_INT 22
32921: PUSH
32922: LD_INT 17
32924: PUSH
32925: LD_INT 24
32927: PUSH
32928: LD_INT 21
32930: PUSH
32931: LD_INT 19
32933: PUSH
32934: LD_INT 16
32936: PUSH
32937: LD_INT 25
32939: PUSH
32940: LD_INT 18
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: IN
32955: ST_TO_ADDR
// end ;
32956: LD_VAR 0 2
32960: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32961: LD_INT 0
32963: PPUSH
32964: PPUSH
32965: PPUSH
// result := [ ] ;
32966: LD_ADDR_VAR 0 4
32970: PUSH
32971: EMPTY
32972: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32973: LD_ADDR_VAR 0 5
32977: PUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: LD_INT 21
32985: PUSH
32986: LD_INT 3
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PPUSH
32993: CALL_OW 70
32997: ST_TO_ADDR
// if not tmp then
32998: LD_VAR 0 5
33002: NOT
33003: IFFALSE 33007
// exit ;
33005: GO 33071
// if checkLink then
33007: LD_VAR 0 3
33011: IFFALSE 33061
// begin for i in tmp do
33013: LD_ADDR_VAR 0 6
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: FOR_IN
33024: IFFALSE 33059
// if GetBase ( i ) <> base then
33026: LD_VAR 0 6
33030: PPUSH
33031: CALL_OW 274
33035: PUSH
33036: LD_VAR 0 1
33040: NONEQUAL
33041: IFFALSE 33057
// ComLinkToBase ( base , i ) ;
33043: LD_VAR 0 1
33047: PPUSH
33048: LD_VAR 0 6
33052: PPUSH
33053: CALL_OW 169
33057: GO 33023
33059: POP
33060: POP
// end ; result := tmp ;
33061: LD_ADDR_VAR 0 4
33065: PUSH
33066: LD_VAR 0 5
33070: ST_TO_ADDR
// end ;
33071: LD_VAR 0 4
33075: RET
// export function ComComplete ( units , b ) ; var i ; begin
33076: LD_INT 0
33078: PPUSH
33079: PPUSH
// if not units then
33080: LD_VAR 0 1
33084: NOT
33085: IFFALSE 33089
// exit ;
33087: GO 33179
// for i in units do
33089: LD_ADDR_VAR 0 4
33093: PUSH
33094: LD_VAR 0 1
33098: PUSH
33099: FOR_IN
33100: IFFALSE 33177
// if BuildingStatus ( b ) = bs_build then
33102: LD_VAR 0 2
33106: PPUSH
33107: CALL_OW 461
33111: PUSH
33112: LD_INT 1
33114: EQUAL
33115: IFFALSE 33175
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33117: LD_VAR 0 4
33121: PPUSH
33122: LD_STRING h
33124: PUSH
33125: LD_VAR 0 2
33129: PPUSH
33130: CALL_OW 250
33134: PUSH
33135: LD_VAR 0 2
33139: PPUSH
33140: CALL_OW 251
33144: PUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: PPUSH
33171: CALL_OW 446
33175: GO 33099
33177: POP
33178: POP
// end ;
33179: LD_VAR 0 3
33183: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33184: LD_INT 0
33186: PPUSH
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
33191: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33192: LD_VAR 0 1
33196: NOT
33197: IFTRUE 33214
33199: PUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 263
33209: PUSH
33210: LD_INT 2
33212: NONEQUAL
33213: OR
33214: IFFALSE 33218
// exit ;
33216: GO 33534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33218: LD_ADDR_VAR 0 6
33222: PUSH
33223: LD_INT 22
33225: PUSH
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 255
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 30
33245: PUSH
33246: LD_INT 36
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 34
33255: PUSH
33256: LD_INT 31
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: LIST
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PPUSH
33272: CALL_OW 69
33276: ST_TO_ADDR
// if not tmp then
33277: LD_VAR 0 6
33281: NOT
33282: IFFALSE 33286
// exit ;
33284: GO 33534
// result := [ ] ;
33286: LD_ADDR_VAR 0 2
33290: PUSH
33291: EMPTY
33292: ST_TO_ADDR
// for i in tmp do
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_VAR 0 6
33302: PUSH
33303: FOR_IN
33304: IFFALSE 33375
// begin t := UnitsInside ( i ) ;
33306: LD_ADDR_VAR 0 4
33310: PUSH
33311: LD_VAR 0 3
33315: PPUSH
33316: CALL_OW 313
33320: ST_TO_ADDR
// if t then
33321: LD_VAR 0 4
33325: IFFALSE 33373
// for j in t do
33327: LD_ADDR_VAR 0 7
33331: PUSH
33332: LD_VAR 0 4
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33371
// result := Replace ( result , result + 1 , j ) ;
33340: LD_ADDR_VAR 0 2
33344: PUSH
33345: LD_VAR 0 2
33349: PPUSH
33350: LD_VAR 0 2
33354: PUSH
33355: LD_INT 1
33357: PLUS
33358: PPUSH
33359: LD_VAR 0 7
33363: PPUSH
33364: CALL_OW 1
33368: ST_TO_ADDR
33369: GO 33337
33371: POP
33372: POP
// end ;
33373: GO 33303
33375: POP
33376: POP
// if not result then
33377: LD_VAR 0 2
33381: NOT
33382: IFFALSE 33386
// exit ;
33384: GO 33534
// mech := result [ 1 ] ;
33386: LD_ADDR_VAR 0 5
33390: PUSH
33391: LD_VAR 0 2
33395: PUSH
33396: LD_INT 1
33398: ARRAY
33399: ST_TO_ADDR
// if result > 1 then
33400: LD_VAR 0 2
33404: PUSH
33405: LD_INT 1
33407: GREATER
33408: IFFALSE 33520
// begin for i = 2 to result do
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: DOUBLE
33416: LD_INT 2
33418: DEC
33419: ST_TO_ADDR
33420: LD_VAR 0 2
33424: PUSH
33425: FOR_TO
33426: IFFALSE 33518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33428: LD_ADDR_VAR 0 4
33432: PUSH
33433: LD_VAR 0 2
33437: PUSH
33438: LD_VAR 0 3
33442: ARRAY
33443: PPUSH
33444: LD_INT 3
33446: PPUSH
33447: CALL_OW 259
33451: PUSH
33452: LD_VAR 0 2
33456: PUSH
33457: LD_VAR 0 3
33461: ARRAY
33462: PPUSH
33463: CALL_OW 432
33467: MINUS
33468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33469: LD_VAR 0 4
33473: PUSH
33474: LD_VAR 0 5
33478: PPUSH
33479: LD_INT 3
33481: PPUSH
33482: CALL_OW 259
33486: PUSH
33487: LD_VAR 0 5
33491: PPUSH
33492: CALL_OW 432
33496: MINUS
33497: GREATEREQUAL
33498: IFFALSE 33516
// mech := result [ i ] ;
33500: LD_ADDR_VAR 0 5
33504: PUSH
33505: LD_VAR 0 2
33509: PUSH
33510: LD_VAR 0 3
33514: ARRAY
33515: ST_TO_ADDR
// end ;
33516: GO 33425
33518: POP
33519: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33520: LD_VAR 0 1
33524: PPUSH
33525: LD_VAR 0 5
33529: PPUSH
33530: CALL_OW 135
// end ;
33534: LD_VAR 0 2
33538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33539: LD_INT 0
33541: PPUSH
33542: PPUSH
33543: PPUSH
33544: PPUSH
33545: PPUSH
33546: PPUSH
33547: PPUSH
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
// result := [ ] ;
33554: LD_ADDR_VAR 0 7
33558: PUSH
33559: EMPTY
33560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33561: LD_VAR 0 1
33565: PPUSH
33566: CALL_OW 266
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: IN
33581: NOT
33582: IFFALSE 33586
// exit ;
33584: GO 35226
// if name then
33586: LD_VAR 0 3
33590: IFFALSE 33606
// SetBName ( base_dep , name ) ;
33592: LD_VAR 0 1
33596: PPUSH
33597: LD_VAR 0 3
33601: PPUSH
33602: CALL_OW 500
// base := GetBase ( base_dep ) ;
33606: LD_ADDR_VAR 0 15
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL_OW 274
33620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33621: LD_ADDR_VAR 0 16
33625: PUSH
33626: LD_VAR 0 1
33630: PPUSH
33631: CALL_OW 255
33635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33636: LD_ADDR_VAR 0 17
33640: PUSH
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL_OW 248
33650: ST_TO_ADDR
// if sources then
33651: LD_VAR 0 5
33655: IFFALSE 33702
// for i = 1 to 3 do
33657: LD_ADDR_VAR 0 8
33661: PUSH
33662: DOUBLE
33663: LD_INT 1
33665: DEC
33666: ST_TO_ADDR
33667: LD_INT 3
33669: PUSH
33670: FOR_TO
33671: IFFALSE 33700
// AddResourceType ( base , i , sources [ i ] ) ;
33673: LD_VAR 0 15
33677: PPUSH
33678: LD_VAR 0 8
33682: PPUSH
33683: LD_VAR 0 5
33687: PUSH
33688: LD_VAR 0 8
33692: ARRAY
33693: PPUSH
33694: CALL_OW 276
33698: GO 33670
33700: POP
33701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33702: LD_ADDR_VAR 0 18
33706: PUSH
33707: LD_VAR 0 15
33711: PPUSH
33712: LD_VAR 0 2
33716: PPUSH
33717: LD_INT 1
33719: PPUSH
33720: CALL 32961 0 3
33724: ST_TO_ADDR
// InitHc ;
33725: CALL_OW 19
// InitUc ;
33729: CALL_OW 18
// uc_side := side ;
33733: LD_ADDR_OWVAR 20
33737: PUSH
33738: LD_VAR 0 16
33742: ST_TO_ADDR
// uc_nation := nation ;
33743: LD_ADDR_OWVAR 21
33747: PUSH
33748: LD_VAR 0 17
33752: ST_TO_ADDR
// if buildings then
33753: LD_VAR 0 18
33757: IFFALSE 35085
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33759: LD_ADDR_VAR 0 19
33763: PUSH
33764: LD_VAR 0 18
33768: PPUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 30
33774: PUSH
33775: LD_INT 29
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 30
33784: PUSH
33785: LD_INT 30
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: LIST
33796: PPUSH
33797: CALL_OW 72
33801: ST_TO_ADDR
// if tmp then
33802: LD_VAR 0 19
33806: IFFALSE 33854
// for i in tmp do
33808: LD_ADDR_VAR 0 8
33812: PUSH
33813: LD_VAR 0 19
33817: PUSH
33818: FOR_IN
33819: IFFALSE 33852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33821: LD_VAR 0 8
33825: PPUSH
33826: CALL_OW 250
33830: PPUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: CALL_OW 251
33840: PPUSH
33841: LD_VAR 0 16
33845: PPUSH
33846: CALL_OW 441
33850: GO 33818
33852: POP
33853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33854: LD_VAR 0 18
33858: PPUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 30
33864: PUSH
33865: LD_INT 32
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 33
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 72
33891: IFFALSE 33979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33893: LD_ADDR_VAR 0 8
33897: PUSH
33898: LD_VAR 0 18
33902: PPUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 30
33908: PUSH
33909: LD_INT 32
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 30
33918: PUSH
33919: LD_INT 33
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: PPUSH
33931: CALL_OW 72
33935: PUSH
33936: FOR_IN
33937: IFFALSE 33977
// begin if not GetBWeapon ( i ) then
33939: LD_VAR 0 8
33943: PPUSH
33944: CALL_OW 269
33948: NOT
33949: IFFALSE 33975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33951: LD_VAR 0 8
33955: PPUSH
33956: LD_VAR 0 8
33960: PPUSH
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL 35231 0 2
33970: PPUSH
33971: CALL_OW 431
// end ;
33975: GO 33936
33977: POP
33978: POP
// end ; for i = 1 to personel do
33979: LD_ADDR_VAR 0 8
33983: PUSH
33984: DOUBLE
33985: LD_INT 1
33987: DEC
33988: ST_TO_ADDR
33989: LD_VAR 0 6
33993: PUSH
33994: FOR_TO
33995: IFFALSE 35065
// begin if i > 4 then
33997: LD_VAR 0 8
34001: PUSH
34002: LD_INT 4
34004: GREATER
34005: IFFALSE 34009
// break ;
34007: GO 35065
// case i of 1 :
34009: LD_VAR 0 8
34013: PUSH
34014: LD_INT 1
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34102
34022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34023: LD_ADDR_VAR 0 12
34027: PUSH
34028: LD_VAR 0 18
34032: PPUSH
34033: LD_INT 22
34035: PUSH
34036: LD_VAR 0 16
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 58
34047: PUSH
34048: EMPTY
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 30
34056: PUSH
34057: LD_INT 32
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 30
34066: PUSH
34067: LD_INT 4
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 30
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: PPUSH
34095: CALL_OW 72
34099: ST_TO_ADDR
34100: GO 34324
34102: LD_INT 2
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34110
34108: GO 34172
34110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34111: LD_ADDR_VAR 0 12
34115: PUSH
34116: LD_VAR 0 18
34120: PPUSH
34121: LD_INT 22
34123: PUSH
34124: LD_VAR 0 16
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 30
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 30
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PPUSH
34165: CALL_OW 72
34169: ST_TO_ADDR
34170: GO 34324
34172: LD_INT 3
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34242
34180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34181: LD_ADDR_VAR 0 12
34185: PUSH
34186: LD_VAR 0 18
34190: PPUSH
34191: LD_INT 22
34193: PUSH
34194: LD_VAR 0 16
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 30
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 30
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PPUSH
34235: CALL_OW 72
34239: ST_TO_ADDR
34240: GO 34324
34242: LD_INT 4
34244: DOUBLE
34245: EQUAL
34246: IFTRUE 34250
34248: GO 34323
34250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34251: LD_ADDR_VAR 0 12
34255: PUSH
34256: LD_VAR 0 18
34260: PPUSH
34261: LD_INT 22
34263: PUSH
34264: LD_VAR 0 16
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: LD_INT 6
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 30
34288: PUSH
34289: LD_INT 7
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 30
34298: PUSH
34299: LD_INT 8
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 72
34320: ST_TO_ADDR
34321: GO 34324
34323: POP
// if i = 1 then
34324: LD_VAR 0 8
34328: PUSH
34329: LD_INT 1
34331: EQUAL
34332: IFFALSE 34443
// begin tmp := [ ] ;
34334: LD_ADDR_VAR 0 19
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// for j in f do
34341: LD_ADDR_VAR 0 9
34345: PUSH
34346: LD_VAR 0 12
34350: PUSH
34351: FOR_IN
34352: IFFALSE 34425
// if GetBType ( j ) = b_bunker then
34354: LD_VAR 0 9
34358: PPUSH
34359: CALL_OW 266
34363: PUSH
34364: LD_INT 32
34366: EQUAL
34367: IFFALSE 34394
// tmp := Insert ( tmp , 1 , j ) else
34369: LD_ADDR_VAR 0 19
34373: PUSH
34374: LD_VAR 0 19
34378: PPUSH
34379: LD_INT 1
34381: PPUSH
34382: LD_VAR 0 9
34386: PPUSH
34387: CALL_OW 2
34391: ST_TO_ADDR
34392: GO 34423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34394: LD_ADDR_VAR 0 19
34398: PUSH
34399: LD_VAR 0 19
34403: PPUSH
34404: LD_VAR 0 19
34408: PUSH
34409: LD_INT 1
34411: PLUS
34412: PPUSH
34413: LD_VAR 0 9
34417: PPUSH
34418: CALL_OW 2
34422: ST_TO_ADDR
34423: GO 34351
34425: POP
34426: POP
// if tmp then
34427: LD_VAR 0 19
34431: IFFALSE 34443
// f := tmp ;
34433: LD_ADDR_VAR 0 12
34437: PUSH
34438: LD_VAR 0 19
34442: ST_TO_ADDR
// end ; x := personel [ i ] ;
34443: LD_ADDR_VAR 0 13
34447: PUSH
34448: LD_VAR 0 6
34452: PUSH
34453: LD_VAR 0 8
34457: ARRAY
34458: ST_TO_ADDR
// if x = - 1 then
34459: LD_VAR 0 13
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: EQUAL
34468: IFFALSE 34679
// begin for j in f do
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_VAR 0 12
34479: PUSH
34480: FOR_IN
34481: IFFALSE 34675
// repeat InitHc ;
34483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34487: LD_VAR 0 9
34491: PPUSH
34492: CALL_OW 266
34496: PUSH
34497: LD_INT 5
34499: EQUAL
34500: IFFALSE 34570
// begin if UnitsInside ( j ) < 3 then
34502: LD_VAR 0 9
34506: PPUSH
34507: CALL_OW 313
34511: PUSH
34512: LD_INT 3
34514: LESS
34515: IFFALSE 34551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34517: LD_INT 0
34519: PPUSH
34520: LD_INT 5
34522: PUSH
34523: LD_INT 8
34525: PUSH
34526: LD_INT 9
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: PUSH
34534: LD_VAR 0 17
34538: ARRAY
34539: PPUSH
34540: LD_VAR 0 4
34544: PPUSH
34545: CALL_OW 380
34549: GO 34568
// PrepareHuman ( false , i , skill ) ;
34551: LD_INT 0
34553: PPUSH
34554: LD_VAR 0 8
34558: PPUSH
34559: LD_VAR 0 4
34563: PPUSH
34564: CALL_OW 380
// end else
34568: GO 34587
// PrepareHuman ( false , i , skill ) ;
34570: LD_INT 0
34572: PPUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: LD_VAR 0 4
34582: PPUSH
34583: CALL_OW 380
// un := CreateHuman ;
34587: LD_ADDR_VAR 0 14
34591: PUSH
34592: CALL_OW 44
34596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: LD_VAR 0 7
34606: PPUSH
34607: LD_INT 1
34609: PPUSH
34610: LD_VAR 0 14
34614: PPUSH
34615: CALL_OW 2
34619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34620: LD_VAR 0 14
34624: PPUSH
34625: LD_VAR 0 9
34629: PPUSH
34630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34634: LD_VAR 0 9
34638: PPUSH
34639: CALL_OW 313
34643: PUSH
34644: LD_INT 6
34646: EQUAL
34647: IFTRUE 34671
34649: PUSH
34650: LD_VAR 0 9
34654: PPUSH
34655: CALL_OW 266
34659: PUSH
34660: LD_INT 32
34662: PUSH
34663: LD_INT 31
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: IN
34670: OR
34671: IFFALSE 34483
34673: GO 34480
34675: POP
34676: POP
// end else
34677: GO 35063
// for j = 1 to x do
34679: LD_ADDR_VAR 0 9
34683: PUSH
34684: DOUBLE
34685: LD_INT 1
34687: DEC
34688: ST_TO_ADDR
34689: LD_VAR 0 13
34693: PUSH
34694: FOR_TO
34695: IFFALSE 35061
// begin InitHc ;
34697: CALL_OW 19
// if not f then
34701: LD_VAR 0 12
34705: NOT
34706: IFFALSE 34795
// begin PrepareHuman ( false , i , skill ) ;
34708: LD_INT 0
34710: PPUSH
34711: LD_VAR 0 8
34715: PPUSH
34716: LD_VAR 0 4
34720: PPUSH
34721: CALL_OW 380
// un := CreateHuman ;
34725: LD_ADDR_VAR 0 14
34729: PUSH
34730: CALL_OW 44
34734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34735: LD_ADDR_VAR 0 7
34739: PUSH
34740: LD_VAR 0 7
34744: PPUSH
34745: LD_INT 1
34747: PPUSH
34748: LD_VAR 0 14
34752: PPUSH
34753: CALL_OW 2
34757: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34758: LD_VAR 0 14
34762: PPUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: CALL_OW 250
34772: PPUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 251
34782: PPUSH
34783: LD_INT 10
34785: PPUSH
34786: LD_INT 0
34788: PPUSH
34789: CALL_OW 50
// continue ;
34793: GO 34694
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34795: LD_VAR 0 12
34799: PUSH
34800: LD_INT 1
34802: ARRAY
34803: PPUSH
34804: CALL_OW 313
34808: IFFALSE 34836
34810: PUSH
34811: LD_VAR 0 12
34815: PUSH
34816: LD_INT 1
34818: ARRAY
34819: PPUSH
34820: CALL_OW 266
34824: PUSH
34825: LD_INT 32
34827: PUSH
34828: LD_INT 31
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: IN
34835: AND
34836: IFTRUE 34857
34838: PUSH
34839: LD_VAR 0 12
34843: PUSH
34844: LD_INT 1
34846: ARRAY
34847: PPUSH
34848: CALL_OW 313
34852: PUSH
34853: LD_INT 6
34855: EQUAL
34856: OR
34857: IFFALSE 34877
// f := Delete ( f , 1 ) ;
34859: LD_ADDR_VAR 0 12
34863: PUSH
34864: LD_VAR 0 12
34868: PPUSH
34869: LD_INT 1
34871: PPUSH
34872: CALL_OW 3
34876: ST_TO_ADDR
// if not f then
34877: LD_VAR 0 12
34881: NOT
34882: IFFALSE 34900
// begin x := x + 2 ;
34884: LD_ADDR_VAR 0 13
34888: PUSH
34889: LD_VAR 0 13
34893: PUSH
34894: LD_INT 2
34896: PLUS
34897: ST_TO_ADDR
// continue ;
34898: GO 34694
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34900: LD_VAR 0 12
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: PPUSH
34909: CALL_OW 266
34913: PUSH
34914: LD_INT 5
34916: EQUAL
34917: IFFALSE 34991
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34919: LD_VAR 0 12
34923: PUSH
34924: LD_INT 1
34926: ARRAY
34927: PPUSH
34928: CALL_OW 313
34932: PUSH
34933: LD_INT 3
34935: LESS
34936: IFFALSE 34972
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34938: LD_INT 0
34940: PPUSH
34941: LD_INT 5
34943: PUSH
34944: LD_INT 8
34946: PUSH
34947: LD_INT 9
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: LIST
34954: PUSH
34955: LD_VAR 0 17
34959: ARRAY
34960: PPUSH
34961: LD_VAR 0 4
34965: PPUSH
34966: CALL_OW 380
34970: GO 34989
// PrepareHuman ( false , i , skill ) ;
34972: LD_INT 0
34974: PPUSH
34975: LD_VAR 0 8
34979: PPUSH
34980: LD_VAR 0 4
34984: PPUSH
34985: CALL_OW 380
// end else
34989: GO 35008
// PrepareHuman ( false , i , skill ) ;
34991: LD_INT 0
34993: PPUSH
34994: LD_VAR 0 8
34998: PPUSH
34999: LD_VAR 0 4
35003: PPUSH
35004: CALL_OW 380
// un := CreateHuman ;
35008: LD_ADDR_VAR 0 14
35012: PUSH
35013: CALL_OW 44
35017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35018: LD_ADDR_VAR 0 7
35022: PUSH
35023: LD_VAR 0 7
35027: PPUSH
35028: LD_INT 1
35030: PPUSH
35031: LD_VAR 0 14
35035: PPUSH
35036: CALL_OW 2
35040: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35041: LD_VAR 0 14
35045: PPUSH
35046: LD_VAR 0 12
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: PPUSH
35055: CALL_OW 52
// end ;
35059: GO 34694
35061: POP
35062: POP
// end ;
35063: GO 33994
35065: POP
35066: POP
// result := result ^ buildings ;
35067: LD_ADDR_VAR 0 7
35071: PUSH
35072: LD_VAR 0 7
35076: PUSH
35077: LD_VAR 0 18
35081: ADD
35082: ST_TO_ADDR
// end else
35083: GO 35226
// begin for i = 1 to personel do
35085: LD_ADDR_VAR 0 8
35089: PUSH
35090: DOUBLE
35091: LD_INT 1
35093: DEC
35094: ST_TO_ADDR
35095: LD_VAR 0 6
35099: PUSH
35100: FOR_TO
35101: IFFALSE 35224
// begin if i > 4 then
35103: LD_VAR 0 8
35107: PUSH
35108: LD_INT 4
35110: GREATER
35111: IFFALSE 35115
// break ;
35113: GO 35224
// x := personel [ i ] ;
35115: LD_ADDR_VAR 0 13
35119: PUSH
35120: LD_VAR 0 6
35124: PUSH
35125: LD_VAR 0 8
35129: ARRAY
35130: ST_TO_ADDR
// if x = - 1 then
35131: LD_VAR 0 13
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: EQUAL
35140: IFFALSE 35144
// continue ;
35142: GO 35100
// PrepareHuman ( false , i , skill ) ;
35144: LD_INT 0
35146: PPUSH
35147: LD_VAR 0 8
35151: PPUSH
35152: LD_VAR 0 4
35156: PPUSH
35157: CALL_OW 380
// un := CreateHuman ;
35161: LD_ADDR_VAR 0 14
35165: PUSH
35166: CALL_OW 44
35170: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35171: LD_VAR 0 14
35175: PPUSH
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL_OW 250
35185: PPUSH
35186: LD_VAR 0 1
35190: PPUSH
35191: CALL_OW 251
35195: PPUSH
35196: LD_INT 10
35198: PPUSH
35199: LD_INT 0
35201: PPUSH
35202: CALL_OW 50
// result := result ^ un ;
35206: LD_ADDR_VAR 0 7
35210: PUSH
35211: LD_VAR 0 7
35215: PUSH
35216: LD_VAR 0 14
35220: ADD
35221: ST_TO_ADDR
// end ;
35222: GO 35100
35224: POP
35225: POP
// end ; end ;
35226: LD_VAR 0 7
35230: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
// result := false ;
35249: LD_ADDR_VAR 0 3
35253: PUSH
35254: LD_INT 0
35256: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35257: LD_VAR 0 1
35261: NOT
35262: IFTRUE 35287
35264: PUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 266
35274: PUSH
35275: LD_INT 32
35277: PUSH
35278: LD_INT 33
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: IN
35285: NOT
35286: OR
35287: IFFALSE 35291
// exit ;
35289: GO 36426
// nat := GetNation ( tower ) ;
35291: LD_ADDR_VAR 0 12
35295: PUSH
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL_OW 248
35305: ST_TO_ADDR
// side := GetSide ( tower ) ;
35306: LD_ADDR_VAR 0 16
35310: PUSH
35311: LD_VAR 0 1
35315: PPUSH
35316: CALL_OW 255
35320: ST_TO_ADDR
// x := GetX ( tower ) ;
35321: LD_ADDR_VAR 0 10
35325: PUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 250
35335: ST_TO_ADDR
// y := GetY ( tower ) ;
35336: LD_ADDR_VAR 0 11
35340: PUSH
35341: LD_VAR 0 1
35345: PPUSH
35346: CALL_OW 251
35350: ST_TO_ADDR
// if not x or not y then
35351: LD_VAR 0 10
35355: NOT
35356: IFTRUE 35365
35358: PUSH
35359: LD_VAR 0 11
35363: NOT
35364: OR
35365: IFFALSE 35369
// exit ;
35367: GO 36426
// weapon := 0 ;
35369: LD_ADDR_VAR 0 18
35373: PUSH
35374: LD_INT 0
35376: ST_TO_ADDR
// fac_list := [ ] ;
35377: LD_ADDR_VAR 0 17
35381: PUSH
35382: EMPTY
35383: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35384: LD_ADDR_VAR 0 6
35388: PUSH
35389: LD_VAR 0 1
35393: PPUSH
35394: CALL_OW 274
35398: PPUSH
35399: LD_VAR 0 2
35403: PPUSH
35404: LD_INT 0
35406: PPUSH
35407: CALL 32961 0 3
35411: PPUSH
35412: LD_INT 30
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PPUSH
35422: CALL_OW 72
35426: ST_TO_ADDR
// if not factories then
35427: LD_VAR 0 6
35431: NOT
35432: IFFALSE 35436
// exit ;
35434: GO 36426
// for i in factories do
35436: LD_ADDR_VAR 0 8
35440: PUSH
35441: LD_VAR 0 6
35445: PUSH
35446: FOR_IN
35447: IFFALSE 35472
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35449: LD_ADDR_VAR 0 17
35453: PUSH
35454: LD_VAR 0 17
35458: PUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: CALL_OW 478
35468: UNION
35469: ST_TO_ADDR
35470: GO 35446
35472: POP
35473: POP
// if not fac_list then
35474: LD_VAR 0 17
35478: NOT
35479: IFFALSE 35483
// exit ;
35481: GO 36426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35483: LD_ADDR_VAR 0 5
35487: PUSH
35488: LD_INT 4
35490: PUSH
35491: LD_INT 5
35493: PUSH
35494: LD_INT 9
35496: PUSH
35497: LD_INT 10
35499: PUSH
35500: LD_INT 6
35502: PUSH
35503: LD_INT 7
35505: PUSH
35506: LD_INT 11
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 27
35520: PUSH
35521: LD_INT 28
35523: PUSH
35524: LD_INT 26
35526: PUSH
35527: LD_INT 30
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 43
35538: PUSH
35539: LD_INT 44
35541: PUSH
35542: LD_INT 46
35544: PUSH
35545: LD_INT 45
35547: PUSH
35548: LD_INT 47
35550: PUSH
35551: LD_INT 49
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: LD_VAR 0 12
35571: ARRAY
35572: ST_TO_ADDR
// list := list isect fac_list ;
35573: LD_ADDR_VAR 0 5
35577: PUSH
35578: LD_VAR 0 5
35582: PUSH
35583: LD_VAR 0 17
35587: ISECT
35588: ST_TO_ADDR
// if not list then
35589: LD_VAR 0 5
35593: NOT
35594: IFFALSE 35598
// exit ;
35596: GO 36426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35598: LD_VAR 0 12
35602: PUSH
35603: LD_INT 3
35605: EQUAL
35606: IFFALSE 35618
35608: PUSH
35609: LD_INT 49
35611: PUSH
35612: LD_VAR 0 5
35616: IN
35617: AND
35618: IFFALSE 35638
35620: PUSH
35621: LD_INT 31
35623: PPUSH
35624: LD_VAR 0 16
35628: PPUSH
35629: CALL_OW 321
35633: PUSH
35634: LD_INT 2
35636: EQUAL
35637: AND
35638: IFFALSE 35698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35640: LD_INT 22
35642: PUSH
35643: LD_VAR 0 16
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 35
35654: PUSH
35655: LD_INT 49
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 91
35664: PUSH
35665: LD_VAR 0 1
35669: PUSH
35670: LD_INT 10
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL_OW 69
35687: NOT
35688: IFFALSE 35698
// weapon := ru_time_lapser ;
35690: LD_ADDR_VAR 0 18
35694: PUSH
35695: LD_INT 49
35697: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35698: LD_VAR 0 12
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: IN
35713: IFFALSE 35737
35715: PUSH
35716: LD_INT 11
35718: PUSH
35719: LD_VAR 0 5
35723: IN
35724: IFTRUE 35736
35726: PUSH
35727: LD_INT 30
35729: PUSH
35730: LD_VAR 0 5
35734: IN
35735: OR
35736: AND
35737: IFFALSE 35757
35739: PUSH
35740: LD_INT 6
35742: PPUSH
35743: LD_VAR 0 16
35747: PPUSH
35748: CALL_OW 321
35752: PUSH
35753: LD_INT 2
35755: EQUAL
35756: AND
35757: IFFALSE 35924
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35759: LD_INT 22
35761: PUSH
35762: LD_VAR 0 16
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 35
35776: PUSH
35777: LD_INT 11
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 35
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 91
35801: PUSH
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 18
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: PPUSH
35820: CALL_OW 69
35824: NOT
35825: IFFALSE 35901
35827: PUSH
35828: LD_INT 22
35830: PUSH
35831: LD_VAR 0 16
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 30
35845: PUSH
35846: LD_INT 32
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 30
35855: PUSH
35856: LD_INT 33
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 91
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_INT 12
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: PPUSH
35892: CALL_OW 69
35896: PUSH
35897: LD_INT 2
35899: GREATER
35900: AND
35901: IFFALSE 35924
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35903: LD_ADDR_VAR 0 18
35907: PUSH
35908: LD_INT 11
35910: PUSH
35911: LD_INT 30
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_VAR 0 12
35922: ARRAY
35923: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35924: LD_VAR 0 18
35928: NOT
35929: IFFALSE 35949
35931: PUSH
35932: LD_INT 40
35934: PPUSH
35935: LD_VAR 0 16
35939: PPUSH
35940: CALL_OW 321
35944: PUSH
35945: LD_INT 2
35947: EQUAL
35948: AND
35949: IFFALSE 35985
35951: PUSH
35952: LD_INT 7
35954: PUSH
35955: LD_VAR 0 5
35959: IN
35960: IFTRUE 35972
35962: PUSH
35963: LD_INT 28
35965: PUSH
35966: LD_VAR 0 5
35970: IN
35971: OR
35972: IFTRUE 35984
35974: PUSH
35975: LD_INT 45
35977: PUSH
35978: LD_VAR 0 5
35982: IN
35983: OR
35984: AND
35985: IFFALSE 36239
// begin hex := GetHexInfo ( x , y ) ;
35987: LD_ADDR_VAR 0 4
35991: PUSH
35992: LD_VAR 0 10
35996: PPUSH
35997: LD_VAR 0 11
36001: PPUSH
36002: CALL_OW 546
36006: ST_TO_ADDR
// if hex [ 1 ] then
36007: LD_VAR 0 4
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: IFFALSE 36019
// exit ;
36017: GO 36426
// height := hex [ 2 ] ;
36019: LD_ADDR_VAR 0 15
36023: PUSH
36024: LD_VAR 0 4
36028: PUSH
36029: LD_INT 2
36031: ARRAY
36032: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36033: LD_ADDR_VAR 0 14
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 5
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// for i in tmp do
36056: LD_ADDR_VAR 0 8
36060: PUSH
36061: LD_VAR 0 14
36065: PUSH
36066: FOR_IN
36067: IFFALSE 36237
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_VAR 0 10
36078: PPUSH
36079: LD_VAR 0 8
36083: PPUSH
36084: LD_INT 5
36086: PPUSH
36087: CALL_OW 272
36091: PUSH
36092: LD_VAR 0 11
36096: PPUSH
36097: LD_VAR 0 8
36101: PPUSH
36102: LD_INT 5
36104: PPUSH
36105: CALL_OW 273
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36114: LD_VAR 0 9
36118: PUSH
36119: LD_INT 1
36121: ARRAY
36122: PPUSH
36123: LD_VAR 0 9
36127: PUSH
36128: LD_INT 2
36130: ARRAY
36131: PPUSH
36132: CALL_OW 488
36136: IFFALSE 36235
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36138: LD_ADDR_VAR 0 4
36142: PUSH
36143: LD_VAR 0 9
36147: PUSH
36148: LD_INT 1
36150: ARRAY
36151: PPUSH
36152: LD_VAR 0 9
36156: PUSH
36157: LD_INT 2
36159: ARRAY
36160: PPUSH
36161: CALL_OW 546
36165: ST_TO_ADDR
// if hex [ 1 ] then
36166: LD_VAR 0 4
36170: PUSH
36171: LD_INT 1
36173: ARRAY
36174: IFFALSE 36178
// continue ;
36176: GO 36066
// h := hex [ 2 ] ;
36178: LD_ADDR_VAR 0 13
36182: PUSH
36183: LD_VAR 0 4
36187: PUSH
36188: LD_INT 2
36190: ARRAY
36191: ST_TO_ADDR
// if h + 7 < height then
36192: LD_VAR 0 13
36196: PUSH
36197: LD_INT 7
36199: PLUS
36200: PUSH
36201: LD_VAR 0 15
36205: LESS
36206: IFFALSE 36235
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36208: LD_ADDR_VAR 0 18
36212: PUSH
36213: LD_INT 7
36215: PUSH
36216: LD_INT 28
36218: PUSH
36219: LD_INT 45
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: PUSH
36227: LD_VAR 0 12
36231: ARRAY
36232: ST_TO_ADDR
// break ;
36233: GO 36237
// end ; end ; end ;
36235: GO 36066
36237: POP
36238: POP
// end ; if not weapon then
36239: LD_VAR 0 18
36243: NOT
36244: IFFALSE 36304
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_VAR 0 5
36255: PUSH
36256: LD_INT 11
36258: PUSH
36259: LD_INT 30
36261: PUSH
36262: LD_INT 49
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: DIFF
36270: ST_TO_ADDR
// if not list then
36271: LD_VAR 0 5
36275: NOT
36276: IFFALSE 36280
// exit ;
36278: GO 36426
// weapon := list [ rand ( 1 , list ) ] ;
36280: LD_ADDR_VAR 0 18
36284: PUSH
36285: LD_VAR 0 5
36289: PUSH
36290: LD_INT 1
36292: PPUSH
36293: LD_VAR 0 5
36297: PPUSH
36298: CALL_OW 12
36302: ARRAY
36303: ST_TO_ADDR
// end ; if weapon then
36304: LD_VAR 0 18
36308: IFFALSE 36426
// begin tmp := CostOfWeapon ( weapon ) ;
36310: LD_ADDR_VAR 0 14
36314: PUSH
36315: LD_VAR 0 18
36319: PPUSH
36320: CALL_OW 451
36324: ST_TO_ADDR
// j := GetBase ( tower ) ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: CALL_OW 274
36339: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36340: LD_VAR 0 9
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: CALL_OW 275
36352: PUSH
36353: LD_VAR 0 14
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: GREATEREQUAL
36362: IFFALSE 36388
36364: PUSH
36365: LD_VAR 0 9
36369: PPUSH
36370: LD_INT 2
36372: PPUSH
36373: CALL_OW 275
36377: PUSH
36378: LD_VAR 0 14
36382: PUSH
36383: LD_INT 2
36385: ARRAY
36386: GREATEREQUAL
36387: AND
36388: IFFALSE 36414
36390: PUSH
36391: LD_VAR 0 9
36395: PPUSH
36396: LD_INT 3
36398: PPUSH
36399: CALL_OW 275
36403: PUSH
36404: LD_VAR 0 14
36408: PUSH
36409: LD_INT 3
36411: ARRAY
36412: GREATEREQUAL
36413: AND
36414: IFFALSE 36426
// result := weapon ;
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_VAR 0 18
36425: ST_TO_ADDR
// end ; end ;
36426: LD_VAR 0 3
36430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36431: LD_INT 0
36433: PPUSH
36434: PPUSH
// result := true ;
36435: LD_ADDR_VAR 0 3
36439: PUSH
36440: LD_INT 1
36442: ST_TO_ADDR
// if array1 = array2 then
36443: LD_VAR 0 1
36447: PUSH
36448: LD_VAR 0 2
36452: EQUAL
36453: IFFALSE 36513
// begin for i = 1 to array1 do
36455: LD_ADDR_VAR 0 4
36459: PUSH
36460: DOUBLE
36461: LD_INT 1
36463: DEC
36464: ST_TO_ADDR
36465: LD_VAR 0 1
36469: PUSH
36470: FOR_TO
36471: IFFALSE 36509
// if array1 [ i ] <> array2 [ i ] then
36473: LD_VAR 0 1
36477: PUSH
36478: LD_VAR 0 4
36482: ARRAY
36483: PUSH
36484: LD_VAR 0 2
36488: PUSH
36489: LD_VAR 0 4
36493: ARRAY
36494: NONEQUAL
36495: IFFALSE 36507
// begin result := false ;
36497: LD_ADDR_VAR 0 3
36501: PUSH
36502: LD_INT 0
36504: ST_TO_ADDR
// break ;
36505: GO 36509
// end ;
36507: GO 36470
36509: POP
36510: POP
// end else
36511: GO 36521
// result := false ;
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// end ;
36521: LD_VAR 0 3
36525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36526: LD_INT 0
36528: PPUSH
36529: PPUSH
// if not array1 or not array2 then
36530: LD_VAR 0 1
36534: NOT
36535: IFTRUE 36544
36537: PUSH
36538: LD_VAR 0 2
36542: NOT
36543: OR
36544: IFFALSE 36548
// exit ;
36546: GO 36612
// result := true ;
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_INT 1
36555: ST_TO_ADDR
// for i = 1 to array1 do
36556: LD_ADDR_VAR 0 4
36560: PUSH
36561: DOUBLE
36562: LD_INT 1
36564: DEC
36565: ST_TO_ADDR
36566: LD_VAR 0 1
36570: PUSH
36571: FOR_TO
36572: IFFALSE 36610
// if array1 [ i ] <> array2 [ i ] then
36574: LD_VAR 0 1
36578: PUSH
36579: LD_VAR 0 4
36583: ARRAY
36584: PUSH
36585: LD_VAR 0 2
36589: PUSH
36590: LD_VAR 0 4
36594: ARRAY
36595: NONEQUAL
36596: IFFALSE 36608
// begin result := false ;
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_INT 0
36605: ST_TO_ADDR
// break ;
36606: GO 36610
// end ;
36608: GO 36571
36610: POP
36611: POP
// end ;
36612: LD_VAR 0 3
36616: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36617: LD_INT 0
36619: PPUSH
36620: PPUSH
36621: PPUSH
// pom := GetBase ( fac ) ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL_OW 274
36636: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36637: LD_ADDR_VAR 0 4
36641: PUSH
36642: LD_VAR 0 2
36646: PUSH
36647: LD_INT 1
36649: ARRAY
36650: PPUSH
36651: LD_VAR 0 2
36655: PUSH
36656: LD_INT 2
36658: ARRAY
36659: PPUSH
36660: LD_VAR 0 2
36664: PUSH
36665: LD_INT 3
36667: ARRAY
36668: PPUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_INT 4
36676: ARRAY
36677: PPUSH
36678: CALL_OW 449
36682: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: LD_VAR 0 5
36692: PPUSH
36693: LD_INT 1
36695: PPUSH
36696: CALL_OW 275
36700: PUSH
36701: LD_VAR 0 4
36705: PUSH
36706: LD_INT 1
36708: ARRAY
36709: GREATEREQUAL
36710: IFFALSE 36736
36712: PUSH
36713: LD_VAR 0 5
36717: PPUSH
36718: LD_INT 2
36720: PPUSH
36721: CALL_OW 275
36725: PUSH
36726: LD_VAR 0 4
36730: PUSH
36731: LD_INT 2
36733: ARRAY
36734: GREATEREQUAL
36735: AND
36736: IFFALSE 36762
36738: PUSH
36739: LD_VAR 0 5
36743: PPUSH
36744: LD_INT 3
36746: PPUSH
36747: CALL_OW 275
36751: PUSH
36752: LD_VAR 0 4
36756: PUSH
36757: LD_INT 3
36759: ARRAY
36760: GREATEREQUAL
36761: AND
36762: ST_TO_ADDR
// end ;
36763: LD_VAR 0 3
36767: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36768: LD_INT 0
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
// pom := GetBase ( building ) ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 274
36788: ST_TO_ADDR
// if not pom then
36789: LD_VAR 0 3
36793: NOT
36794: IFFALSE 36798
// exit ;
36796: GO 36972
// btype := GetBType ( building ) ;
36798: LD_ADDR_VAR 0 5
36802: PUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 266
36812: ST_TO_ADDR
// if btype = b_armoury then
36813: LD_VAR 0 5
36817: PUSH
36818: LD_INT 4
36820: EQUAL
36821: IFFALSE 36831
// btype := b_barracks ;
36823: LD_ADDR_VAR 0 5
36827: PUSH
36828: LD_INT 5
36830: ST_TO_ADDR
// if btype = b_depot then
36831: LD_VAR 0 5
36835: PUSH
36836: LD_INT 0
36838: EQUAL
36839: IFFALSE 36849
// btype := b_warehouse ;
36841: LD_ADDR_VAR 0 5
36845: PUSH
36846: LD_INT 1
36848: ST_TO_ADDR
// if btype = b_workshop then
36849: LD_VAR 0 5
36853: PUSH
36854: LD_INT 2
36856: EQUAL
36857: IFFALSE 36867
// btype := b_factory ;
36859: LD_ADDR_VAR 0 5
36863: PUSH
36864: LD_INT 3
36866: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36867: LD_ADDR_VAR 0 4
36871: PUSH
36872: LD_VAR 0 5
36876: PPUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 248
36886: PPUSH
36887: CALL_OW 450
36891: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36892: LD_ADDR_VAR 0 2
36896: PUSH
36897: LD_VAR 0 3
36901: PPUSH
36902: LD_INT 1
36904: PPUSH
36905: CALL_OW 275
36909: PUSH
36910: LD_VAR 0 4
36914: PUSH
36915: LD_INT 1
36917: ARRAY
36918: GREATEREQUAL
36919: IFFALSE 36945
36921: PUSH
36922: LD_VAR 0 3
36926: PPUSH
36927: LD_INT 2
36929: PPUSH
36930: CALL_OW 275
36934: PUSH
36935: LD_VAR 0 4
36939: PUSH
36940: LD_INT 2
36942: ARRAY
36943: GREATEREQUAL
36944: AND
36945: IFFALSE 36971
36947: PUSH
36948: LD_VAR 0 3
36952: PPUSH
36953: LD_INT 3
36955: PPUSH
36956: CALL_OW 275
36960: PUSH
36961: LD_VAR 0 4
36965: PUSH
36966: LD_INT 3
36968: ARRAY
36969: GREATEREQUAL
36970: AND
36971: ST_TO_ADDR
// end ;
36972: LD_VAR 0 2
36976: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36977: LD_INT 0
36979: PPUSH
36980: PPUSH
36981: PPUSH
// pom := GetBase ( building ) ;
36982: LD_ADDR_VAR 0 4
36986: PUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 274
36996: ST_TO_ADDR
// if not pom then
36997: LD_VAR 0 4
37001: NOT
37002: IFFALSE 37006
// exit ;
37004: GO 37111
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37006: LD_ADDR_VAR 0 5
37010: PUSH
37011: LD_VAR 0 2
37015: PPUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 248
37025: PPUSH
37026: CALL_OW 450
37030: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_VAR 0 4
37040: PPUSH
37041: LD_INT 1
37043: PPUSH
37044: CALL_OW 275
37048: PUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: GREATEREQUAL
37058: IFFALSE 37084
37060: PUSH
37061: LD_VAR 0 4
37065: PPUSH
37066: LD_INT 2
37068: PPUSH
37069: CALL_OW 275
37073: PUSH
37074: LD_VAR 0 5
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: GREATEREQUAL
37083: AND
37084: IFFALSE 37110
37086: PUSH
37087: LD_VAR 0 4
37091: PPUSH
37092: LD_INT 3
37094: PPUSH
37095: CALL_OW 275
37099: PUSH
37100: LD_VAR 0 5
37104: PUSH
37105: LD_INT 3
37107: ARRAY
37108: GREATEREQUAL
37109: AND
37110: ST_TO_ADDR
// end ;
37111: LD_VAR 0 3
37115: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37116: LD_INT 0
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
// result := false ;
37129: LD_ADDR_VAR 0 8
37133: PUSH
37134: LD_INT 0
37136: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37137: LD_VAR 0 5
37141: NOT
37142: IFTRUE 37151
37144: PUSH
37145: LD_VAR 0 1
37149: NOT
37150: OR
37151: IFTRUE 37160
37153: PUSH
37154: LD_VAR 0 2
37158: NOT
37159: OR
37160: IFTRUE 37169
37162: PUSH
37163: LD_VAR 0 3
37167: NOT
37168: OR
37169: IFFALSE 37173
// exit ;
37171: GO 37999
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37173: LD_ADDR_VAR 0 14
37177: PUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: LD_VAR 0 2
37187: PPUSH
37188: LD_VAR 0 3
37192: PPUSH
37193: LD_VAR 0 4
37197: PPUSH
37198: LD_VAR 0 5
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PPUSH
37207: CALL_OW 248
37211: PPUSH
37212: LD_INT 0
37214: PPUSH
37215: CALL 39280 0 6
37219: ST_TO_ADDR
// if not hexes then
37220: LD_VAR 0 14
37224: NOT
37225: IFFALSE 37229
// exit ;
37227: GO 37999
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37229: LD_ADDR_VAR 0 17
37233: PUSH
37234: LD_VAR 0 5
37238: PPUSH
37239: LD_INT 22
37241: PUSH
37242: LD_VAR 0 13
37246: PPUSH
37247: CALL_OW 255
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 30
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PPUSH
37288: CALL_OW 72
37292: ST_TO_ADDR
// for i = 1 to hexes do
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: DOUBLE
37299: LD_INT 1
37301: DEC
37302: ST_TO_ADDR
37303: LD_VAR 0 14
37307: PUSH
37308: FOR_TO
37309: IFFALSE 37997
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37311: LD_ADDR_VAR 0 13
37315: PUSH
37316: LD_VAR 0 14
37320: PUSH
37321: LD_VAR 0 9
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 14
37335: PUSH
37336: LD_VAR 0 9
37340: ARRAY
37341: PUSH
37342: LD_INT 2
37344: ARRAY
37345: PPUSH
37346: CALL_OW 428
37350: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37351: LD_VAR 0 14
37355: PUSH
37356: LD_VAR 0 9
37360: ARRAY
37361: PUSH
37362: LD_INT 1
37364: ARRAY
37365: PPUSH
37366: LD_VAR 0 14
37370: PUSH
37371: LD_VAR 0 9
37375: ARRAY
37376: PUSH
37377: LD_INT 2
37379: ARRAY
37380: PPUSH
37381: CALL_OW 351
37385: IFTRUE 37424
37387: PUSH
37388: LD_VAR 0 14
37392: PUSH
37393: LD_VAR 0 9
37397: ARRAY
37398: PUSH
37399: LD_INT 1
37401: ARRAY
37402: PPUSH
37403: LD_VAR 0 14
37407: PUSH
37408: LD_VAR 0 9
37412: ARRAY
37413: PUSH
37414: LD_INT 2
37416: ARRAY
37417: PPUSH
37418: CALL_OW 488
37422: NOT
37423: OR
37424: IFTRUE 37441
37426: PUSH
37427: LD_VAR 0 13
37431: PPUSH
37432: CALL_OW 247
37436: PUSH
37437: LD_INT 3
37439: EQUAL
37440: OR
37441: IFFALSE 37447
// exit ;
37443: POP
37444: POP
37445: GO 37999
// if not tmp then
37447: LD_VAR 0 13
37451: NOT
37452: IFFALSE 37456
// continue ;
37454: GO 37308
// result := true ;
37456: LD_ADDR_VAR 0 8
37460: PUSH
37461: LD_INT 1
37463: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37464: LD_VAR 0 6
37468: IFFALSE 37485
37470: PUSH
37471: LD_VAR 0 13
37475: PPUSH
37476: CALL_OW 247
37480: PUSH
37481: LD_INT 2
37483: EQUAL
37484: AND
37485: IFFALSE 37502
37487: PUSH
37488: LD_VAR 0 13
37492: PPUSH
37493: CALL_OW 263
37497: PUSH
37498: LD_INT 1
37500: EQUAL
37501: AND
37502: IFFALSE 37666
// begin if IsDrivenBy ( tmp ) then
37504: LD_VAR 0 13
37508: PPUSH
37509: CALL_OW 311
37513: IFFALSE 37517
// continue ;
37515: GO 37308
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37517: LD_VAR 0 6
37521: PPUSH
37522: LD_INT 3
37524: PUSH
37525: LD_INT 60
37527: PUSH
37528: EMPTY
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 3
37537: PUSH
37538: LD_INT 55
37540: PUSH
37541: EMPTY
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PPUSH
37552: CALL_OW 72
37556: IFFALSE 37664
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37558: LD_ADDR_VAR 0 18
37562: PUSH
37563: LD_VAR 0 6
37567: PPUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 60
37573: PUSH
37574: EMPTY
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: LD_INT 55
37586: PUSH
37587: EMPTY
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 72
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: ST_TO_ADDR
// if IsInUnit ( driver ) then
37607: LD_VAR 0 18
37611: PPUSH
37612: CALL_OW 310
37616: IFFALSE 37627
// ComExit ( driver ) ;
37618: LD_VAR 0 18
37622: PPUSH
37623: CALL 63280 0 1
// AddComEnterUnit ( driver , tmp ) ;
37627: LD_VAR 0 18
37631: PPUSH
37632: LD_VAR 0 13
37636: PPUSH
37637: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37641: LD_VAR 0 18
37645: PPUSH
37646: LD_VAR 0 7
37650: PPUSH
37651: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37655: LD_VAR 0 18
37659: PPUSH
37660: CALL_OW 181
// end ; continue ;
37664: GO 37308
// end ; if not cleaners or not tmp in cleaners then
37666: LD_VAR 0 6
37670: NOT
37671: IFTRUE 37686
37673: PUSH
37674: LD_VAR 0 13
37678: PUSH
37679: LD_VAR 0 6
37683: IN
37684: NOT
37685: OR
37686: IFFALSE 37995
// begin if dep then
37688: LD_VAR 0 17
37692: IFFALSE 37828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37694: LD_ADDR_VAR 0 16
37698: PUSH
37699: LD_VAR 0 17
37703: PUSH
37704: LD_INT 1
37706: ARRAY
37707: PPUSH
37708: CALL_OW 250
37712: PPUSH
37713: LD_VAR 0 17
37717: PUSH
37718: LD_INT 1
37720: ARRAY
37721: PPUSH
37722: CALL_OW 254
37726: PPUSH
37727: LD_INT 5
37729: PPUSH
37730: CALL_OW 272
37734: PUSH
37735: LD_VAR 0 17
37739: PUSH
37740: LD_INT 1
37742: ARRAY
37743: PPUSH
37744: CALL_OW 251
37748: PPUSH
37749: LD_VAR 0 17
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: PPUSH
37758: CALL_OW 254
37762: PPUSH
37763: LD_INT 5
37765: PPUSH
37766: CALL_OW 273
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37775: LD_VAR 0 16
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: PPUSH
37784: LD_VAR 0 16
37788: PUSH
37789: LD_INT 2
37791: ARRAY
37792: PPUSH
37793: CALL_OW 488
37797: IFFALSE 37828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37799: LD_VAR 0 13
37803: PPUSH
37804: LD_VAR 0 16
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_VAR 0 16
37817: PUSH
37818: LD_INT 2
37820: ARRAY
37821: PPUSH
37822: CALL_OW 111
// continue ;
37826: GO 37308
// end ; end ; r := GetDir ( tmp ) ;
37828: LD_ADDR_VAR 0 15
37832: PUSH
37833: LD_VAR 0 13
37837: PPUSH
37838: CALL_OW 254
37842: ST_TO_ADDR
// if r = 5 then
37843: LD_VAR 0 15
37847: PUSH
37848: LD_INT 5
37850: EQUAL
37851: IFFALSE 37861
// r := 0 ;
37853: LD_ADDR_VAR 0 15
37857: PUSH
37858: LD_INT 0
37860: ST_TO_ADDR
// for j = r to 5 do
37861: LD_ADDR_VAR 0 10
37865: PUSH
37866: DOUBLE
37867: LD_VAR 0 15
37871: DEC
37872: ST_TO_ADDR
37873: LD_INT 5
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37993
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37879: LD_ADDR_VAR 0 11
37883: PUSH
37884: LD_VAR 0 13
37888: PPUSH
37889: CALL_OW 250
37893: PPUSH
37894: LD_VAR 0 10
37898: PPUSH
37899: LD_INT 2
37901: PPUSH
37902: CALL_OW 272
37906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37907: LD_ADDR_VAR 0 12
37911: PUSH
37912: LD_VAR 0 13
37916: PPUSH
37917: CALL_OW 251
37921: PPUSH
37922: LD_VAR 0 10
37926: PPUSH
37927: LD_INT 2
37929: PPUSH
37930: CALL_OW 273
37934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37935: LD_VAR 0 11
37939: PPUSH
37940: LD_VAR 0 12
37944: PPUSH
37945: CALL_OW 488
37949: IFFALSE 37968
37951: PUSH
37952: LD_VAR 0 11
37956: PPUSH
37957: LD_VAR 0 12
37961: PPUSH
37962: CALL_OW 428
37966: NOT
37967: AND
37968: IFFALSE 37991
// begin ComMoveXY ( tmp , _x , _y ) ;
37970: LD_VAR 0 13
37974: PPUSH
37975: LD_VAR 0 11
37979: PPUSH
37980: LD_VAR 0 12
37984: PPUSH
37985: CALL_OW 111
// break ;
37989: GO 37993
// end ; end ;
37991: GO 37876
37993: POP
37994: POP
// end ; end ;
37995: GO 37308
37997: POP
37998: POP
// end ;
37999: LD_VAR 0 8
38003: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38004: LD_INT 0
38006: PPUSH
// result := true ;
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 1
38014: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38015: LD_VAR 0 2
38019: PUSH
38020: LD_INT 24
38022: DOUBLE
38023: EQUAL
38024: IFTRUE 38034
38026: LD_INT 33
38028: DOUBLE
38029: EQUAL
38030: IFTRUE 38034
38032: GO 38059
38034: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38035: LD_ADDR_VAR 0 3
38039: PUSH
38040: LD_INT 32
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 321
38052: PUSH
38053: LD_INT 2
38055: EQUAL
38056: ST_TO_ADDR
38057: GO 38375
38059: LD_INT 20
38061: DOUBLE
38062: EQUAL
38063: IFTRUE 38067
38065: GO 38092
38067: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_INT 6
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 321
38085: PUSH
38086: LD_INT 2
38088: EQUAL
38089: ST_TO_ADDR
38090: GO 38375
38092: LD_INT 22
38094: DOUBLE
38095: EQUAL
38096: IFTRUE 38106
38098: LD_INT 36
38100: DOUBLE
38101: EQUAL
38102: IFTRUE 38106
38104: GO 38131
38106: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38107: LD_ADDR_VAR 0 3
38111: PUSH
38112: LD_INT 15
38114: PPUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL_OW 321
38124: PUSH
38125: LD_INT 2
38127: EQUAL
38128: ST_TO_ADDR
38129: GO 38375
38131: LD_INT 30
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38164
38139: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_INT 20
38147: PPUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 321
38157: PUSH
38158: LD_INT 2
38160: EQUAL
38161: ST_TO_ADDR
38162: GO 38375
38164: LD_INT 28
38166: DOUBLE
38167: EQUAL
38168: IFTRUE 38178
38170: LD_INT 21
38172: DOUBLE
38173: EQUAL
38174: IFTRUE 38178
38176: GO 38203
38178: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38179: LD_ADDR_VAR 0 3
38183: PUSH
38184: LD_INT 21
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 321
38196: PUSH
38197: LD_INT 2
38199: EQUAL
38200: ST_TO_ADDR
38201: GO 38375
38203: LD_INT 16
38205: DOUBLE
38206: EQUAL
38207: IFTRUE 38211
38209: GO 38236
38211: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38212: LD_ADDR_VAR 0 3
38216: PUSH
38217: LD_INT 84
38219: PPUSH
38220: LD_VAR 0 1
38224: PPUSH
38225: CALL_OW 321
38229: PUSH
38230: LD_INT 2
38232: EQUAL
38233: ST_TO_ADDR
38234: GO 38375
38236: LD_INT 19
38238: DOUBLE
38239: EQUAL
38240: IFTRUE 38250
38242: LD_INT 23
38244: DOUBLE
38245: EQUAL
38246: IFTRUE 38250
38248: GO 38275
38250: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_INT 83
38258: PPUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL_OW 321
38268: PUSH
38269: LD_INT 2
38271: EQUAL
38272: ST_TO_ADDR
38273: GO 38375
38275: LD_INT 17
38277: DOUBLE
38278: EQUAL
38279: IFTRUE 38283
38281: GO 38308
38283: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38284: LD_ADDR_VAR 0 3
38288: PUSH
38289: LD_INT 39
38291: PPUSH
38292: LD_VAR 0 1
38296: PPUSH
38297: CALL_OW 321
38301: PUSH
38302: LD_INT 2
38304: EQUAL
38305: ST_TO_ADDR
38306: GO 38375
38308: LD_INT 18
38310: DOUBLE
38311: EQUAL
38312: IFTRUE 38316
38314: GO 38341
38316: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: LD_INT 40
38324: PPUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL_OW 321
38334: PUSH
38335: LD_INT 2
38337: EQUAL
38338: ST_TO_ADDR
38339: GO 38375
38341: LD_INT 27
38343: DOUBLE
38344: EQUAL
38345: IFTRUE 38349
38347: GO 38374
38349: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38350: LD_ADDR_VAR 0 3
38354: PUSH
38355: LD_INT 35
38357: PPUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 321
38367: PUSH
38368: LD_INT 2
38370: EQUAL
38371: ST_TO_ADDR
38372: GO 38375
38374: POP
// end ;
38375: LD_VAR 0 3
38379: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38380: LD_INT 0
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
// result := false ;
38393: LD_ADDR_VAR 0 6
38397: PUSH
38398: LD_INT 0
38400: ST_TO_ADDR
// if btype = b_depot then
38401: LD_VAR 0 2
38405: PUSH
38406: LD_INT 0
38408: EQUAL
38409: IFFALSE 38421
// begin result := true ;
38411: LD_ADDR_VAR 0 6
38415: PUSH
38416: LD_INT 1
38418: ST_TO_ADDR
// exit ;
38419: GO 39275
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38421: LD_VAR 0 1
38425: NOT
38426: IFTRUE 38451
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 266
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: IN
38449: NOT
38450: OR
38451: IFTRUE 38460
38453: PUSH
38454: LD_VAR 0 2
38458: NOT
38459: OR
38460: IFTRUE 38496
38462: PUSH
38463: LD_VAR 0 5
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: LD_INT 5
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: IN
38494: NOT
38495: OR
38496: IFTRUE 38515
38498: PUSH
38499: LD_VAR 0 3
38503: PPUSH
38504: LD_VAR 0 4
38508: PPUSH
38509: CALL_OW 488
38513: NOT
38514: OR
38515: IFFALSE 38519
// exit ;
38517: GO 39275
// side := GetSide ( depot ) ;
38519: LD_ADDR_VAR 0 9
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 255
38533: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38534: LD_VAR 0 9
38538: PPUSH
38539: LD_VAR 0 2
38543: PPUSH
38544: CALL 38004 0 2
38548: NOT
38549: IFFALSE 38553
// exit ;
38551: GO 39275
// pom := GetBase ( depot ) ;
38553: LD_ADDR_VAR 0 10
38557: PUSH
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 274
38567: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38568: LD_ADDR_VAR 0 11
38572: PUSH
38573: LD_VAR 0 2
38577: PPUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 248
38587: PPUSH
38588: CALL_OW 450
38592: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38593: LD_VAR 0 10
38597: PPUSH
38598: LD_INT 1
38600: PPUSH
38601: CALL_OW 275
38605: PUSH
38606: LD_VAR 0 11
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: GREATEREQUAL
38615: IFFALSE 38641
38617: PUSH
38618: LD_VAR 0 10
38622: PPUSH
38623: LD_INT 2
38625: PPUSH
38626: CALL_OW 275
38630: PUSH
38631: LD_VAR 0 11
38635: PUSH
38636: LD_INT 2
38638: ARRAY
38639: GREATEREQUAL
38640: AND
38641: IFFALSE 38667
38643: PUSH
38644: LD_VAR 0 10
38648: PPUSH
38649: LD_INT 3
38651: PPUSH
38652: CALL_OW 275
38656: PUSH
38657: LD_VAR 0 11
38661: PUSH
38662: LD_INT 3
38664: ARRAY
38665: GREATEREQUAL
38666: AND
38667: NOT
38668: IFFALSE 38672
// exit ;
38670: GO 39275
// if GetBType ( depot ) = b_depot then
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 266
38681: PUSH
38682: LD_INT 0
38684: EQUAL
38685: IFFALSE 38697
// dist := 28 else
38687: LD_ADDR_VAR 0 14
38691: PUSH
38692: LD_INT 28
38694: ST_TO_ADDR
38695: GO 38705
// dist := 36 ;
38697: LD_ADDR_VAR 0 14
38701: PUSH
38702: LD_INT 36
38704: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_VAR 0 3
38714: PPUSH
38715: LD_VAR 0 4
38719: PPUSH
38720: CALL_OW 297
38724: PUSH
38725: LD_VAR 0 14
38729: GREATER
38730: IFFALSE 38734
// exit ;
38732: GO 39275
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38734: LD_ADDR_VAR 0 12
38738: PUSH
38739: LD_VAR 0 2
38743: PPUSH
38744: LD_VAR 0 3
38748: PPUSH
38749: LD_VAR 0 4
38753: PPUSH
38754: LD_VAR 0 5
38758: PPUSH
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 248
38768: PPUSH
38769: LD_INT 0
38771: PPUSH
38772: CALL 39280 0 6
38776: ST_TO_ADDR
// if not hexes then
38777: LD_VAR 0 12
38781: NOT
38782: IFFALSE 38786
// exit ;
38784: GO 39275
// hex := GetHexInfo ( x , y ) ;
38786: LD_ADDR_VAR 0 15
38790: PUSH
38791: LD_VAR 0 3
38795: PPUSH
38796: LD_VAR 0 4
38800: PPUSH
38801: CALL_OW 546
38805: ST_TO_ADDR
// if hex [ 1 ] then
38806: LD_VAR 0 15
38810: PUSH
38811: LD_INT 1
38813: ARRAY
38814: IFFALSE 38818
// exit ;
38816: GO 39275
// height := hex [ 2 ] ;
38818: LD_ADDR_VAR 0 13
38822: PUSH
38823: LD_VAR 0 15
38827: PUSH
38828: LD_INT 2
38830: ARRAY
38831: ST_TO_ADDR
// for i = 1 to hexes do
38832: LD_ADDR_VAR 0 7
38836: PUSH
38837: DOUBLE
38838: LD_INT 1
38840: DEC
38841: ST_TO_ADDR
38842: LD_VAR 0 12
38846: PUSH
38847: FOR_TO
38848: IFFALSE 39192
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38850: LD_VAR 0 12
38854: PUSH
38855: LD_VAR 0 7
38859: ARRAY
38860: PUSH
38861: LD_INT 1
38863: ARRAY
38864: PPUSH
38865: LD_VAR 0 12
38869: PUSH
38870: LD_VAR 0 7
38874: ARRAY
38875: PUSH
38876: LD_INT 2
38878: ARRAY
38879: PPUSH
38880: CALL_OW 488
38884: NOT
38885: IFTRUE 38927
38887: PUSH
38888: LD_VAR 0 12
38892: PUSH
38893: LD_VAR 0 7
38897: ARRAY
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PPUSH
38903: LD_VAR 0 12
38907: PUSH
38908: LD_VAR 0 7
38912: ARRAY
38913: PUSH
38914: LD_INT 2
38916: ARRAY
38917: PPUSH
38918: CALL_OW 428
38922: PUSH
38923: LD_INT 0
38925: GREATER
38926: OR
38927: IFTRUE 38965
38929: PUSH
38930: LD_VAR 0 12
38934: PUSH
38935: LD_VAR 0 7
38939: ARRAY
38940: PUSH
38941: LD_INT 1
38943: ARRAY
38944: PPUSH
38945: LD_VAR 0 12
38949: PUSH
38950: LD_VAR 0 7
38954: ARRAY
38955: PUSH
38956: LD_INT 2
38958: ARRAY
38959: PPUSH
38960: CALL_OW 351
38964: OR
38965: IFFALSE 38971
// exit ;
38967: POP
38968: POP
38969: GO 39275
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38971: LD_ADDR_VAR 0 8
38975: PUSH
38976: LD_VAR 0 12
38980: PUSH
38981: LD_VAR 0 7
38985: ARRAY
38986: PUSH
38987: LD_INT 1
38989: ARRAY
38990: PPUSH
38991: LD_VAR 0 12
38995: PUSH
38996: LD_VAR 0 7
39000: ARRAY
39001: PUSH
39002: LD_INT 2
39004: ARRAY
39005: PPUSH
39006: CALL_OW 546
39010: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39011: LD_VAR 0 8
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: IFTRUE 39041
39021: PUSH
39022: LD_VAR 0 8
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PUSH
39031: LD_VAR 0 13
39035: PUSH
39036: LD_INT 2
39038: PLUS
39039: GREATER
39040: OR
39041: IFTRUE 39063
39043: PUSH
39044: LD_VAR 0 8
39048: PUSH
39049: LD_INT 2
39051: ARRAY
39052: PUSH
39053: LD_VAR 0 13
39057: PUSH
39058: LD_INT 2
39060: MINUS
39061: LESS
39062: OR
39063: IFTRUE 39131
39065: PUSH
39066: LD_VAR 0 8
39070: PUSH
39071: LD_INT 3
39073: ARRAY
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 8
39080: PUSH
39081: LD_INT 9
39083: PUSH
39084: LD_INT 10
39086: PUSH
39087: LD_INT 11
39089: PUSH
39090: LD_INT 12
39092: PUSH
39093: LD_INT 13
39095: PUSH
39096: LD_INT 16
39098: PUSH
39099: LD_INT 17
39101: PUSH
39102: LD_INT 18
39104: PUSH
39105: LD_INT 19
39107: PUSH
39108: LD_INT 20
39110: PUSH
39111: LD_INT 21
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: IN
39129: NOT
39130: OR
39131: IFTRUE 39144
39133: PUSH
39134: LD_VAR 0 8
39138: PUSH
39139: LD_INT 5
39141: ARRAY
39142: NOT
39143: OR
39144: IFTRUE 39184
39146: PUSH
39147: LD_VAR 0 8
39151: PUSH
39152: LD_INT 6
39154: ARRAY
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 7
39164: PUSH
39165: LD_INT 9
39167: PUSH
39168: LD_INT 10
39170: PUSH
39171: LD_INT 11
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: IN
39182: NOT
39183: OR
39184: IFFALSE 39190
// exit ;
39186: POP
39187: POP
39188: GO 39275
// end ;
39190: GO 38847
39192: POP
39193: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39194: LD_VAR 0 9
39198: PPUSH
39199: LD_VAR 0 3
39203: PPUSH
39204: LD_VAR 0 4
39208: PPUSH
39209: LD_INT 20
39211: PPUSH
39212: CALL 31094 0 4
39216: PUSH
39217: LD_INT 4
39219: ARRAY
39220: IFFALSE 39224
// exit ;
39222: GO 39275
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39224: LD_VAR 0 2
39228: PUSH
39229: LD_INT 29
39231: PUSH
39232: LD_INT 30
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: IN
39239: IFFALSE 39263
39241: PUSH
39242: LD_VAR 0 3
39246: PPUSH
39247: LD_VAR 0 4
39251: PPUSH
39252: LD_VAR 0 9
39256: PPUSH
39257: CALL_OW 440
39261: NOT
39262: AND
39263: IFFALSE 39267
// exit ;
39265: GO 39275
// result := true ;
39267: LD_ADDR_VAR 0 6
39271: PUSH
39272: LD_INT 1
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 6
39279: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39280: LD_INT 0
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
39287: PPUSH
39288: PPUSH
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
// result = [ ] ;
39340: LD_ADDR_VAR 0 7
39344: PUSH
39345: EMPTY
39346: ST_TO_ADDR
// temp_list = [ ] ;
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: EMPTY
39353: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39354: LD_VAR 0 4
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: LD_INT 5
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: IN
39385: NOT
39386: IFTRUE 39429
39388: PUSH
39389: LD_VAR 0 1
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: IN
39404: IFFALSE 39428
39406: PUSH
39407: LD_VAR 0 5
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: IN
39426: NOT
39427: AND
39428: OR
39429: IFFALSE 39433
// exit ;
39431: GO 57832
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39433: LD_VAR 0 1
39437: PUSH
39438: LD_INT 6
39440: PUSH
39441: LD_INT 7
39443: PUSH
39444: LD_INT 8
39446: PUSH
39447: LD_INT 13
39449: PUSH
39450: LD_INT 12
39452: PUSH
39453: LD_INT 15
39455: PUSH
39456: LD_INT 11
39458: PUSH
39459: LD_INT 14
39461: PUSH
39462: LD_INT 10
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: IN
39476: IFFALSE 39486
// btype = b_lab ;
39478: LD_ADDR_VAR 0 1
39482: PUSH
39483: LD_INT 6
39485: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39486: LD_VAR 0 6
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: IN
39505: NOT
39506: IFTRUE 39574
39508: PUSH
39509: LD_VAR 0 1
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 6
39528: PUSH
39529: LD_INT 36
39531: PUSH
39532: LD_INT 4
39534: PUSH
39535: LD_INT 5
39537: PUSH
39538: LD_INT 31
39540: PUSH
39541: LD_INT 32
39543: PUSH
39544: LD_INT 33
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: IN
39560: NOT
39561: IFFALSE 39573
39563: PUSH
39564: LD_VAR 0 6
39568: PUSH
39569: LD_INT 1
39571: EQUAL
39572: AND
39573: OR
39574: IFTRUE 39606
39576: PUSH
39577: LD_VAR 0 1
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: IN
39592: NOT
39593: IFFALSE 39605
39595: PUSH
39596: LD_VAR 0 6
39600: PUSH
39601: LD_INT 2
39603: EQUAL
39604: AND
39605: OR
39606: IFFALSE 39616
// mode = 0 ;
39608: LD_ADDR_VAR 0 6
39612: PUSH
39613: LD_INT 0
39615: ST_TO_ADDR
// case mode of 0 :
39616: LD_VAR 0 6
39620: PUSH
39621: LD_INT 0
39623: DOUBLE
39624: EQUAL
39625: IFTRUE 39629
39627: GO 51082
39629: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39630: LD_ADDR_VAR 0 11
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39823: LD_ADDR_VAR 0 12
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40019: LD_ADDR_VAR 0 13
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: LD_INT 3
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: LD_INT 3
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40218: LD_ADDR_VAR 0 14
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 3
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40414: LD_ADDR_VAR 0 15
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 3
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40607: LD_ADDR_VAR 0 16
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 3
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 3
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40800: LD_ADDR_VAR 0 17
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41030: LD_ADDR_VAR 0 18
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41260: LD_ADDR_VAR 0 19
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41490: LD_ADDR_VAR 0 20
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41720: LD_ADDR_VAR 0 21
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: LD_INT 2
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41950: LD_ADDR_VAR 0 22
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42180: LD_ADDR_VAR 0 23
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42460: LD_ADDR_VAR 0 24
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42736: LD_ADDR_VAR 0 25
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 3
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 3
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43010: LD_ADDR_VAR 0 26
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43286: LD_ADDR_VAR 0 27
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43566: LD_ADDR_VAR 0 28
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43848: LD_ADDR_VAR 0 29
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: NEG
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44127: LD_ADDR_VAR 0 30
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 3
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44405: LD_ADDR_VAR 0 31
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44683: LD_ADDR_VAR 0 32
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 3
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44961: LD_ADDR_VAR 0 33
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45240: LD_ADDR_VAR 0 34
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45520: LD_ADDR_VAR 0 35
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45632: LD_ADDR_VAR 0 36
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45744: LD_ADDR_VAR 0 37
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45856: LD_ADDR_VAR 0 38
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45968: LD_ADDR_VAR 0 39
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46080: LD_ADDR_VAR 0 40
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46192: LD_ADDR_VAR 0 41
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 3
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 3
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: LD_INT 3
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46542: LD_ADDR_VAR 0 42
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46892: LD_ADDR_VAR 0 43
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47240: LD_ADDR_VAR 0 44
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: NEG
47550: PUSH
47551: LD_INT 3
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47590: LD_ADDR_VAR 0 45
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 3
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 3
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47940: LD_ADDR_VAR 0 46
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48288: LD_ADDR_VAR 0 47
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48439: LD_ADDR_VAR 0 48
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48586: LD_ADDR_VAR 0 49
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48730: LD_ADDR_VAR 0 50
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48874: LD_ADDR_VAR 0 51
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49021: LD_ADDR_VAR 0 52
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49172: LD_ADDR_VAR 0 53
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49402: LD_ADDR_VAR 0 54
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49632: LD_ADDR_VAR 0 55
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49862: LD_ADDR_VAR 0 56
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50092: LD_ADDR_VAR 0 57
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50322: LD_ADDR_VAR 0 58
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50552: LD_ADDR_VAR 0 59
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50640: LD_ADDR_VAR 0 60
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50728: LD_ADDR_VAR 0 61
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50816: LD_ADDR_VAR 0 62
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 63
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50992: LD_ADDR_VAR 0 64
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// end ; 1 :
51080: GO 56977
51082: LD_INT 1
51084: DOUBLE
51085: EQUAL
51086: IFTRUE 51090
51088: GO 53713
51090: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51091: LD_ADDR_VAR 0 11
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51135: LD_ADDR_VAR 0 12
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51176: LD_ADDR_VAR 0 13
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51216: LD_ADDR_VAR 0 14
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51257: LD_ADDR_VAR 0 15
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51301: LD_ADDR_VAR 0 16
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51347: LD_ADDR_VAR 0 17
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 3
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51391: LD_ADDR_VAR 0 18
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51432: LD_ADDR_VAR 0 19
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 3
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51472: LD_ADDR_VAR 0 20
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51513: LD_ADDR_VAR 0 21
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51557: LD_ADDR_VAR 0 22
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51603: LD_ADDR_VAR 0 23
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 4
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51647: LD_ADDR_VAR 0 24
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51688: LD_ADDR_VAR 0 25
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51728: LD_ADDR_VAR 0 26
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 4
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51769: LD_ADDR_VAR 0 27
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51813: LD_ADDR_VAR 0 28
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51859: LD_ADDR_VAR 0 29
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 5
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 5
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 4
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 6
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 6
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 5
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52014: LD_ADDR_VAR 0 30
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 4
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 5
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 5
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 5
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 6
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 6
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52157: LD_ADDR_VAR 0 31
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: LD_INT 4
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 5
52224: PUSH
52225: LD_INT 4
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 5
52234: PUSH
52235: LD_INT 5
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: LD_INT 5
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 6
52254: PUSH
52255: LD_INT 5
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 6
52264: PUSH
52265: LD_INT 6
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: LD_INT 6
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52296: LD_ADDR_VAR 0 32
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 4
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 6
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 6
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 5
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52439: LD_ADDR_VAR 0 33
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 4
52491: NEG
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 4
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 4
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 5
52525: NEG
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 5
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 5
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 6
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 6
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52594: LD_ADDR_VAR 0 34
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: LD_INT 4
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 4
52649: NEG
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 4
52661: NEG
52662: PUSH
52663: LD_INT 4
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: LD_INT 5
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 5
52685: NEG
52686: PUSH
52687: LD_INT 4
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 5
52697: NEG
52698: PUSH
52699: LD_INT 5
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 5
52709: NEG
52710: PUSH
52711: LD_INT 6
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 6
52721: NEG
52722: PUSH
52723: LD_INT 5
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 6
52733: NEG
52734: PUSH
52735: LD_INT 6
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52757: LD_ADDR_VAR 0 41
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52801: LD_ADDR_VAR 0 42
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52842: LD_ADDR_VAR 0 43
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52882: LD_ADDR_VAR 0 44
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52923: LD_ADDR_VAR 0 45
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52967: LD_ADDR_VAR 0 46
52971: PUSH
52972: LD_INT 2
52974: NEG
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53013: LD_ADDR_VAR 0 47
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53046: LD_ADDR_VAR 0 48
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53077: LD_ADDR_VAR 0 49
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53106: LD_ADDR_VAR 0 50
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53135: LD_ADDR_VAR 0 51
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53166: LD_ADDR_VAR 0 52
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53199: LD_ADDR_VAR 0 53
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 3
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53243: LD_ADDR_VAR 0 54
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 3
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53284: LD_ADDR_VAR 0 55
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: LD_INT 3
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53324: LD_ADDR_VAR 0 56
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53365: LD_ADDR_VAR 0 57
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53409: LD_ADDR_VAR 0 58
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: LD_INT 3
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 59
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53499: LD_ADDR_VAR 0 60
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53540: LD_ADDR_VAR 0 61
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53580: LD_ADDR_VAR 0 62
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53621: LD_ADDR_VAR 0 63
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53665: LD_ADDR_VAR 0 64
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// end ; 2 :
53711: GO 56977
53713: LD_INT 2
53715: DOUBLE
53716: EQUAL
53717: IFTRUE 53721
53719: GO 56976
53721: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53722: LD_ADDR_VAR 0 29
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 4
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 5
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 4
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 4
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 5
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 4
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: LD_INT 5
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 4
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: NEG
54108: PUSH
54109: LD_INT 4
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: LD_INT 5
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 4
54155: NEG
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 5
54167: NEG
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 5
54179: NEG
54180: PUSH
54181: LD_INT 5
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 5
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 5
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54260: LD_ADDR_VAR 0 30
54264: PUSH
54265: LD_INT 4
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 5
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 5
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 4
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 5
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 5
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 4
54612: NEG
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 5
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 4
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 5
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54807: LD_ADDR_VAR 0 31
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 5
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 5
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 4
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 5
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: NEG
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 4
54986: NEG
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 4
55009: NEG
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 4
55021: NEG
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 4
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: NEG
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 4
55057: NEG
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 5
55069: NEG
55070: PUSH
55071: LD_INT 4
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 5
55081: NEG
55082: PUSH
55083: LD_INT 5
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 5
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 5
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 4
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 4
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 4
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 5
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55357: LD_ADDR_VAR 0 32
55361: PUSH
55362: LD_INT 4
55364: NEG
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 5
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 4
55538: NEG
55539: PUSH
55540: LD_INT 4
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: LD_INT 4
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 4
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 5
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 4
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 5
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 5
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 4
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: PUSH
55770: LD_INT 4
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 4
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 4
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 5
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: LD_INT 5
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55904: LD_ADDR_VAR 0 33
55908: PUSH
55909: LD_INT 4
55911: NEG
55912: PUSH
55913: LD_INT 4
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 4
55923: NEG
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 4
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 5
55971: NEG
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 5
55983: NEG
55984: PUSH
55985: LD_INT 5
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 5
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 4
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 4
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 4
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 5
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 4
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 5
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56442: LD_ADDR_VAR 0 34
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 4
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 5
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 4
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 5
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 5
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 5
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 5
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 5
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 4
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 4
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 4
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 5
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// end ; end ;
56974: GO 56977
56976: POP
// case btype of b_depot , b_warehouse :
56977: LD_VAR 0 1
56981: PUSH
56982: LD_INT 0
56984: DOUBLE
56985: EQUAL
56986: IFTRUE 56996
56988: LD_INT 1
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 56996
56994: GO 57197
56996: POP
// case nation of nation_american :
56997: LD_VAR 0 5
57001: PUSH
57002: LD_INT 1
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57010
57008: GO 57066
57010: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57011: LD_ADDR_VAR 0 9
57015: PUSH
57016: LD_VAR 0 11
57020: PUSH
57021: LD_VAR 0 12
57025: PUSH
57026: LD_VAR 0 13
57030: PUSH
57031: LD_VAR 0 14
57035: PUSH
57036: LD_VAR 0 15
57040: PUSH
57041: LD_VAR 0 16
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: PUSH
57054: LD_VAR 0 4
57058: PUSH
57059: LD_INT 1
57061: PLUS
57062: ARRAY
57063: ST_TO_ADDR
57064: GO 57195
57066: LD_INT 2
57068: DOUBLE
57069: EQUAL
57070: IFTRUE 57074
57072: GO 57130
57074: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57075: LD_ADDR_VAR 0 9
57079: PUSH
57080: LD_VAR 0 17
57084: PUSH
57085: LD_VAR 0 18
57089: PUSH
57090: LD_VAR 0 19
57094: PUSH
57095: LD_VAR 0 20
57099: PUSH
57100: LD_VAR 0 21
57104: PUSH
57105: LD_VAR 0 22
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: PUSH
57118: LD_VAR 0 4
57122: PUSH
57123: LD_INT 1
57125: PLUS
57126: ARRAY
57127: ST_TO_ADDR
57128: GO 57195
57130: LD_INT 3
57132: DOUBLE
57133: EQUAL
57134: IFTRUE 57138
57136: GO 57194
57138: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57139: LD_ADDR_VAR 0 9
57143: PUSH
57144: LD_VAR 0 23
57148: PUSH
57149: LD_VAR 0 24
57153: PUSH
57154: LD_VAR 0 25
57158: PUSH
57159: LD_VAR 0 26
57163: PUSH
57164: LD_VAR 0 27
57168: PUSH
57169: LD_VAR 0 28
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: PUSH
57182: LD_VAR 0 4
57186: PUSH
57187: LD_INT 1
57189: PLUS
57190: ARRAY
57191: ST_TO_ADDR
57192: GO 57195
57194: POP
57195: GO 57750
57197: LD_INT 2
57199: DOUBLE
57200: EQUAL
57201: IFTRUE 57211
57203: LD_INT 3
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57211
57209: GO 57267
57211: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57212: LD_ADDR_VAR 0 9
57216: PUSH
57217: LD_VAR 0 29
57221: PUSH
57222: LD_VAR 0 30
57226: PUSH
57227: LD_VAR 0 31
57231: PUSH
57232: LD_VAR 0 32
57236: PUSH
57237: LD_VAR 0 33
57241: PUSH
57242: LD_VAR 0 34
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: PUSH
57255: LD_VAR 0 4
57259: PUSH
57260: LD_INT 1
57262: PLUS
57263: ARRAY
57264: ST_TO_ADDR
57265: GO 57750
57267: LD_INT 16
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57329
57273: LD_INT 17
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57329
57279: LD_INT 18
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57329
57285: LD_INT 19
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57329
57291: LD_INT 22
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57329
57297: LD_INT 20
57299: DOUBLE
57300: EQUAL
57301: IFTRUE 57329
57303: LD_INT 21
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57329
57309: LD_INT 23
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57329
57315: LD_INT 24
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57329
57321: LD_INT 25
57323: DOUBLE
57324: EQUAL
57325: IFTRUE 57329
57327: GO 57385
57329: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57330: LD_ADDR_VAR 0 9
57334: PUSH
57335: LD_VAR 0 35
57339: PUSH
57340: LD_VAR 0 36
57344: PUSH
57345: LD_VAR 0 37
57349: PUSH
57350: LD_VAR 0 38
57354: PUSH
57355: LD_VAR 0 39
57359: PUSH
57360: LD_VAR 0 40
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: PUSH
57373: LD_VAR 0 4
57377: PUSH
57378: LD_INT 1
57380: PLUS
57381: ARRAY
57382: ST_TO_ADDR
57383: GO 57750
57385: LD_INT 6
57387: DOUBLE
57388: EQUAL
57389: IFTRUE 57441
57391: LD_INT 7
57393: DOUBLE
57394: EQUAL
57395: IFTRUE 57441
57397: LD_INT 8
57399: DOUBLE
57400: EQUAL
57401: IFTRUE 57441
57403: LD_INT 13
57405: DOUBLE
57406: EQUAL
57407: IFTRUE 57441
57409: LD_INT 12
57411: DOUBLE
57412: EQUAL
57413: IFTRUE 57441
57415: LD_INT 15
57417: DOUBLE
57418: EQUAL
57419: IFTRUE 57441
57421: LD_INT 11
57423: DOUBLE
57424: EQUAL
57425: IFTRUE 57441
57427: LD_INT 14
57429: DOUBLE
57430: EQUAL
57431: IFTRUE 57441
57433: LD_INT 10
57435: DOUBLE
57436: EQUAL
57437: IFTRUE 57441
57439: GO 57497
57441: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57442: LD_ADDR_VAR 0 9
57446: PUSH
57447: LD_VAR 0 41
57451: PUSH
57452: LD_VAR 0 42
57456: PUSH
57457: LD_VAR 0 43
57461: PUSH
57462: LD_VAR 0 44
57466: PUSH
57467: LD_VAR 0 45
57471: PUSH
57472: LD_VAR 0 46
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: LD_VAR 0 4
57489: PUSH
57490: LD_INT 1
57492: PLUS
57493: ARRAY
57494: ST_TO_ADDR
57495: GO 57750
57497: LD_INT 36
57499: DOUBLE
57500: EQUAL
57501: IFTRUE 57505
57503: GO 57561
57505: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57506: LD_ADDR_VAR 0 9
57510: PUSH
57511: LD_VAR 0 47
57515: PUSH
57516: LD_VAR 0 48
57520: PUSH
57521: LD_VAR 0 49
57525: PUSH
57526: LD_VAR 0 50
57530: PUSH
57531: LD_VAR 0 51
57535: PUSH
57536: LD_VAR 0 52
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: PUSH
57549: LD_VAR 0 4
57553: PUSH
57554: LD_INT 1
57556: PLUS
57557: ARRAY
57558: ST_TO_ADDR
57559: GO 57750
57561: LD_INT 4
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57587
57567: LD_INT 5
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57587
57573: LD_INT 34
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57587
57579: LD_INT 37
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57587
57585: GO 57643
57587: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57588: LD_ADDR_VAR 0 9
57592: PUSH
57593: LD_VAR 0 53
57597: PUSH
57598: LD_VAR 0 54
57602: PUSH
57603: LD_VAR 0 55
57607: PUSH
57608: LD_VAR 0 56
57612: PUSH
57613: LD_VAR 0 57
57617: PUSH
57618: LD_VAR 0 58
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: LD_VAR 0 4
57635: PUSH
57636: LD_INT 1
57638: PLUS
57639: ARRAY
57640: ST_TO_ADDR
57641: GO 57750
57643: LD_INT 31
57645: DOUBLE
57646: EQUAL
57647: IFTRUE 57693
57649: LD_INT 32
57651: DOUBLE
57652: EQUAL
57653: IFTRUE 57693
57655: LD_INT 33
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57693
57661: LD_INT 27
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57693
57667: LD_INT 26
57669: DOUBLE
57670: EQUAL
57671: IFTRUE 57693
57673: LD_INT 28
57675: DOUBLE
57676: EQUAL
57677: IFTRUE 57693
57679: LD_INT 29
57681: DOUBLE
57682: EQUAL
57683: IFTRUE 57693
57685: LD_INT 30
57687: DOUBLE
57688: EQUAL
57689: IFTRUE 57693
57691: GO 57749
57693: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57694: LD_ADDR_VAR 0 9
57698: PUSH
57699: LD_VAR 0 59
57703: PUSH
57704: LD_VAR 0 60
57708: PUSH
57709: LD_VAR 0 61
57713: PUSH
57714: LD_VAR 0 62
57718: PUSH
57719: LD_VAR 0 63
57723: PUSH
57724: LD_VAR 0 64
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: PUSH
57737: LD_VAR 0 4
57741: PUSH
57742: LD_INT 1
57744: PLUS
57745: ARRAY
57746: ST_TO_ADDR
57747: GO 57750
57749: POP
// temp_list2 = [ ] ;
57750: LD_ADDR_VAR 0 10
57754: PUSH
57755: EMPTY
57756: ST_TO_ADDR
// for i in temp_list do
57757: LD_ADDR_VAR 0 8
57761: PUSH
57762: LD_VAR 0 9
57766: PUSH
57767: FOR_IN
57768: IFFALSE 57820
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57770: LD_ADDR_VAR 0 10
57774: PUSH
57775: LD_VAR 0 10
57779: PUSH
57780: LD_VAR 0 8
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PUSH
57789: LD_VAR 0 2
57793: PLUS
57794: PUSH
57795: LD_VAR 0 8
57799: PUSH
57800: LD_INT 2
57802: ARRAY
57803: PUSH
57804: LD_VAR 0 3
57808: PLUS
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: ADD
57817: ST_TO_ADDR
57818: GO 57767
57820: POP
57821: POP
// result = temp_list2 ;
57822: LD_ADDR_VAR 0 7
57826: PUSH
57827: LD_VAR 0 10
57831: ST_TO_ADDR
// end ;
57832: LD_VAR 0 7
57836: RET
// export function EnemyInRange ( unit , dist ) ; begin
57837: LD_INT 0
57839: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57840: LD_ADDR_VAR 0 3
57844: PUSH
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL_OW 255
57854: PPUSH
57855: LD_VAR 0 1
57859: PPUSH
57860: CALL_OW 250
57864: PPUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: CALL_OW 251
57874: PPUSH
57875: LD_VAR 0 2
57879: PPUSH
57880: CALL 31094 0 4
57884: PUSH
57885: LD_INT 4
57887: ARRAY
57888: ST_TO_ADDR
// end ;
57889: LD_VAR 0 3
57893: RET
// export function PlayerSeeMe ( unit ) ; begin
57894: LD_INT 0
57896: PPUSH
// result := See ( your_side , unit ) ;
57897: LD_ADDR_VAR 0 2
57901: PUSH
57902: LD_OWVAR 2
57906: PPUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: CALL_OW 292
57916: ST_TO_ADDR
// end ;
57917: LD_VAR 0 2
57921: RET
// export function ReverseDir ( unit ) ; begin
57922: LD_INT 0
57924: PPUSH
// if not unit then
57925: LD_VAR 0 1
57929: NOT
57930: IFFALSE 57934
// exit ;
57932: GO 57957
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57934: LD_ADDR_VAR 0 2
57938: PUSH
57939: LD_VAR 0 1
57943: PPUSH
57944: CALL_OW 254
57948: PUSH
57949: LD_INT 3
57951: PLUS
57952: PUSH
57953: LD_INT 6
57955: MOD
57956: ST_TO_ADDR
// end ;
57957: LD_VAR 0 2
57961: RET
// export function ReverseArray ( array ) ; var i ; begin
57962: LD_INT 0
57964: PPUSH
57965: PPUSH
// if not array then
57966: LD_VAR 0 1
57970: NOT
57971: IFFALSE 57975
// exit ;
57973: GO 58030
// result := [ ] ;
57975: LD_ADDR_VAR 0 2
57979: PUSH
57980: EMPTY
57981: ST_TO_ADDR
// for i := array downto 1 do
57982: LD_ADDR_VAR 0 3
57986: PUSH
57987: DOUBLE
57988: LD_VAR 0 1
57992: INC
57993: ST_TO_ADDR
57994: LD_INT 1
57996: PUSH
57997: FOR_DOWNTO
57998: IFFALSE 58028
// result := Join ( result , array [ i ] ) ;
58000: LD_ADDR_VAR 0 2
58004: PUSH
58005: LD_VAR 0 2
58009: PPUSH
58010: LD_VAR 0 1
58014: PUSH
58015: LD_VAR 0 3
58019: ARRAY
58020: PPUSH
58021: CALL 62882 0 2
58025: ST_TO_ADDR
58026: GO 57997
58028: POP
58029: POP
// end ;
58030: LD_VAR 0 2
58034: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58035: LD_INT 0
58037: PPUSH
58038: PPUSH
58039: PPUSH
58040: PPUSH
58041: PPUSH
58042: PPUSH
// if not unit or not hexes then
58043: LD_VAR 0 1
58047: NOT
58048: IFTRUE 58057
58050: PUSH
58051: LD_VAR 0 2
58055: NOT
58056: OR
58057: IFFALSE 58061
// exit ;
58059: GO 58184
// dist := 9999 ;
58061: LD_ADDR_VAR 0 5
58065: PUSH
58066: LD_INT 9999
58068: ST_TO_ADDR
// for i = 1 to hexes do
58069: LD_ADDR_VAR 0 4
58073: PUSH
58074: DOUBLE
58075: LD_INT 1
58077: DEC
58078: ST_TO_ADDR
58079: LD_VAR 0 2
58083: PUSH
58084: FOR_TO
58085: IFFALSE 58172
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58087: LD_ADDR_VAR 0 6
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: LD_VAR 0 2
58101: PUSH
58102: LD_VAR 0 4
58106: ARRAY
58107: PUSH
58108: LD_INT 1
58110: ARRAY
58111: PPUSH
58112: LD_VAR 0 2
58116: PUSH
58117: LD_VAR 0 4
58121: ARRAY
58122: PUSH
58123: LD_INT 2
58125: ARRAY
58126: PPUSH
58127: CALL_OW 297
58131: ST_TO_ADDR
// if tdist < dist then
58132: LD_VAR 0 6
58136: PUSH
58137: LD_VAR 0 5
58141: LESS
58142: IFFALSE 58170
// begin hex := hexes [ i ] ;
58144: LD_ADDR_VAR 0 8
58148: PUSH
58149: LD_VAR 0 2
58153: PUSH
58154: LD_VAR 0 4
58158: ARRAY
58159: ST_TO_ADDR
// dist := tdist ;
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: LD_VAR 0 6
58169: ST_TO_ADDR
// end ; end ;
58170: GO 58084
58172: POP
58173: POP
// result := hex ;
58174: LD_ADDR_VAR 0 3
58178: PUSH
58179: LD_VAR 0 8
58183: ST_TO_ADDR
// end ;
58184: LD_VAR 0 3
58188: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58189: LD_INT 0
58191: PPUSH
58192: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58193: LD_VAR 0 1
58197: NOT
58198: IFTRUE 58237
58200: PUSH
58201: LD_VAR 0 1
58205: PUSH
58206: LD_INT 21
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 23
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PPUSH
58230: CALL_OW 69
58234: IN
58235: NOT
58236: OR
58237: IFFALSE 58241
// exit ;
58239: GO 58288
// for i = 1 to 3 do
58241: LD_ADDR_VAR 0 3
58245: PUSH
58246: DOUBLE
58247: LD_INT 1
58249: DEC
58250: ST_TO_ADDR
58251: LD_INT 3
58253: PUSH
58254: FOR_TO
58255: IFFALSE 58286
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 250
58266: PPUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: CALL_OW 251
58276: PPUSH
58277: LD_INT 1
58279: PPUSH
58280: CALL_OW 453
58284: GO 58254
58286: POP
58287: POP
// end ;
58288: LD_VAR 0 2
58292: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58293: LD_INT 0
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
// if not unit or not enemy_unit then
58301: LD_VAR 0 1
58305: NOT
58306: IFTRUE 58315
58308: PUSH
58309: LD_VAR 0 2
58313: NOT
58314: OR
58315: IFFALSE 58319
// exit ;
58317: GO 58800
// if GetLives ( i ) < 250 then
58319: LD_VAR 0 4
58323: PPUSH
58324: CALL_OW 256
58328: PUSH
58329: LD_INT 250
58331: LESS
58332: IFFALSE 58345
// begin ComAutodestruct ( i ) ;
58334: LD_VAR 0 4
58338: PPUSH
58339: CALL 58189 0 1
// exit ;
58343: GO 58800
// end ; x := GetX ( enemy_unit ) ;
58345: LD_ADDR_VAR 0 7
58349: PUSH
58350: LD_VAR 0 2
58354: PPUSH
58355: CALL_OW 250
58359: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58360: LD_ADDR_VAR 0 8
58364: PUSH
58365: LD_VAR 0 2
58369: PPUSH
58370: CALL_OW 251
58374: ST_TO_ADDR
// if not x or not y then
58375: LD_VAR 0 7
58379: NOT
58380: IFTRUE 58389
58382: PUSH
58383: LD_VAR 0 8
58387: NOT
58388: OR
58389: IFFALSE 58393
// exit ;
58391: GO 58800
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58393: LD_ADDR_VAR 0 6
58397: PUSH
58398: LD_VAR 0 7
58402: PPUSH
58403: LD_INT 0
58405: PPUSH
58406: LD_INT 4
58408: PPUSH
58409: CALL_OW 272
58413: PUSH
58414: LD_VAR 0 8
58418: PPUSH
58419: LD_INT 0
58421: PPUSH
58422: LD_INT 4
58424: PPUSH
58425: CALL_OW 273
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_VAR 0 7
58438: PPUSH
58439: LD_INT 1
58441: PPUSH
58442: LD_INT 4
58444: PPUSH
58445: CALL_OW 272
58449: PUSH
58450: LD_VAR 0 8
58454: PPUSH
58455: LD_INT 1
58457: PPUSH
58458: LD_INT 4
58460: PPUSH
58461: CALL_OW 273
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_VAR 0 7
58474: PPUSH
58475: LD_INT 2
58477: PPUSH
58478: LD_INT 4
58480: PPUSH
58481: CALL_OW 272
58485: PUSH
58486: LD_VAR 0 8
58490: PPUSH
58491: LD_INT 2
58493: PPUSH
58494: LD_INT 4
58496: PPUSH
58497: CALL_OW 273
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_VAR 0 7
58510: PPUSH
58511: LD_INT 3
58513: PPUSH
58514: LD_INT 4
58516: PPUSH
58517: CALL_OW 272
58521: PUSH
58522: LD_VAR 0 8
58526: PPUSH
58527: LD_INT 3
58529: PPUSH
58530: LD_INT 4
58532: PPUSH
58533: CALL_OW 273
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_VAR 0 7
58546: PPUSH
58547: LD_INT 4
58549: PPUSH
58550: LD_INT 4
58552: PPUSH
58553: CALL_OW 272
58557: PUSH
58558: LD_VAR 0 8
58562: PPUSH
58563: LD_INT 4
58565: PPUSH
58566: LD_INT 4
58568: PPUSH
58569: CALL_OW 273
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_VAR 0 7
58582: PPUSH
58583: LD_INT 5
58585: PPUSH
58586: LD_INT 4
58588: PPUSH
58589: CALL_OW 272
58593: PUSH
58594: LD_VAR 0 8
58598: PPUSH
58599: LD_INT 5
58601: PPUSH
58602: LD_INT 4
58604: PPUSH
58605: CALL_OW 273
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// for i = tmp downto 1 do
58622: LD_ADDR_VAR 0 4
58626: PUSH
58627: DOUBLE
58628: LD_VAR 0 6
58632: INC
58633: ST_TO_ADDR
58634: LD_INT 1
58636: PUSH
58637: FOR_DOWNTO
58638: IFFALSE 58741
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58640: LD_VAR 0 6
58644: PUSH
58645: LD_VAR 0 4
58649: ARRAY
58650: PUSH
58651: LD_INT 1
58653: ARRAY
58654: PPUSH
58655: LD_VAR 0 6
58659: PUSH
58660: LD_VAR 0 4
58664: ARRAY
58665: PUSH
58666: LD_INT 2
58668: ARRAY
58669: PPUSH
58670: CALL_OW 488
58674: NOT
58675: IFTRUE 58717
58677: PUSH
58678: LD_VAR 0 6
58682: PUSH
58683: LD_VAR 0 4
58687: ARRAY
58688: PUSH
58689: LD_INT 1
58691: ARRAY
58692: PPUSH
58693: LD_VAR 0 6
58697: PUSH
58698: LD_VAR 0 4
58702: ARRAY
58703: PUSH
58704: LD_INT 2
58706: ARRAY
58707: PPUSH
58708: CALL_OW 428
58712: PUSH
58713: LD_INT 0
58715: NONEQUAL
58716: OR
58717: IFFALSE 58739
// tmp := Delete ( tmp , i ) ;
58719: LD_ADDR_VAR 0 6
58723: PUSH
58724: LD_VAR 0 6
58728: PPUSH
58729: LD_VAR 0 4
58733: PPUSH
58734: CALL_OW 3
58738: ST_TO_ADDR
58739: GO 58637
58741: POP
58742: POP
// j := GetClosestHex ( unit , tmp ) ;
58743: LD_ADDR_VAR 0 5
58747: PUSH
58748: LD_VAR 0 1
58752: PPUSH
58753: LD_VAR 0 6
58757: PPUSH
58758: CALL 58035 0 2
58762: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58763: LD_VAR 0 1
58767: PPUSH
58768: LD_VAR 0 5
58772: PUSH
58773: LD_INT 1
58775: ARRAY
58776: PPUSH
58777: LD_VAR 0 5
58781: PUSH
58782: LD_INT 2
58784: ARRAY
58785: PPUSH
58786: CALL_OW 111
// result := j ;
58790: LD_ADDR_VAR 0 3
58794: PUSH
58795: LD_VAR 0 5
58799: ST_TO_ADDR
// end ;
58800: LD_VAR 0 3
58804: RET
// export function PrepareApemanSoldier ( ) ; begin
58805: LD_INT 0
58807: PPUSH
// uc_nation := 0 ;
58808: LD_ADDR_OWVAR 21
58812: PUSH
58813: LD_INT 0
58815: ST_TO_ADDR
// hc_sex := sex_male ;
58816: LD_ADDR_OWVAR 27
58820: PUSH
58821: LD_INT 1
58823: ST_TO_ADDR
// hc_name :=  ;
58824: LD_ADDR_OWVAR 26
58828: PUSH
58829: LD_STRING 
58831: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58832: LD_ADDR_OWVAR 28
58836: PUSH
58837: LD_INT 15
58839: ST_TO_ADDR
// hc_gallery :=  ;
58840: LD_ADDR_OWVAR 33
58844: PUSH
58845: LD_STRING 
58847: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58848: LD_ADDR_OWVAR 31
58852: PUSH
58853: LD_INT 0
58855: PPUSH
58856: LD_INT 3
58858: PPUSH
58859: CALL_OW 12
58863: PUSH
58864: LD_INT 0
58866: PPUSH
58867: LD_INT 3
58869: PPUSH
58870: CALL_OW 12
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58887: LD_ADDR_OWVAR 29
58891: PUSH
58892: LD_INT 10
58894: PUSH
58895: LD_INT 12
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// end ;
58902: LD_VAR 0 1
58906: RET
// export function PrepareApemanEngineer ( ) ; begin
58907: LD_INT 0
58909: PPUSH
// uc_nation := 0 ;
58910: LD_ADDR_OWVAR 21
58914: PUSH
58915: LD_INT 0
58917: ST_TO_ADDR
// hc_sex := sex_male ;
58918: LD_ADDR_OWVAR 27
58922: PUSH
58923: LD_INT 1
58925: ST_TO_ADDR
// hc_name :=  ;
58926: LD_ADDR_OWVAR 26
58930: PUSH
58931: LD_STRING 
58933: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58934: LD_ADDR_OWVAR 28
58938: PUSH
58939: LD_INT 16
58941: ST_TO_ADDR
// hc_gallery :=  ;
58942: LD_ADDR_OWVAR 33
58946: PUSH
58947: LD_STRING 
58949: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58950: LD_ADDR_OWVAR 31
58954: PUSH
58955: LD_INT 0
58957: PPUSH
58958: LD_INT 3
58960: PPUSH
58961: CALL_OW 12
58965: PUSH
58966: LD_INT 0
58968: PPUSH
58969: LD_INT 3
58971: PPUSH
58972: CALL_OW 12
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58989: LD_ADDR_OWVAR 29
58993: PUSH
58994: LD_INT 10
58996: PUSH
58997: LD_INT 12
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: ST_TO_ADDR
// end ;
59004: LD_VAR 0 1
59008: RET
// export function PrepareApeman ( agressivity ) ; begin
59009: LD_INT 0
59011: PPUSH
// uc_side := 0 ;
59012: LD_ADDR_OWVAR 20
59016: PUSH
59017: LD_INT 0
59019: ST_TO_ADDR
// uc_nation := 0 ;
59020: LD_ADDR_OWVAR 21
59024: PUSH
59025: LD_INT 0
59027: ST_TO_ADDR
// hc_sex := sex_male ;
59028: LD_ADDR_OWVAR 27
59032: PUSH
59033: LD_INT 1
59035: ST_TO_ADDR
// hc_class := class_apeman ;
59036: LD_ADDR_OWVAR 28
59040: PUSH
59041: LD_INT 12
59043: ST_TO_ADDR
// hc_gallery :=  ;
59044: LD_ADDR_OWVAR 33
59048: PUSH
59049: LD_STRING 
59051: ST_TO_ADDR
// hc_name :=  ;
59052: LD_ADDR_OWVAR 26
59056: PUSH
59057: LD_STRING 
59059: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
59060: LD_ADDR_OWVAR 29
59064: PUSH
59065: LD_INT 10
59067: PUSH
59068: LD_INT 12
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: ST_TO_ADDR
// if agressivity = 0 then
59075: LD_VAR 0 1
59079: PUSH
59080: LD_INT 0
59082: EQUAL
59083: IFFALSE 59095
// hc_agressivity := 0 else
59085: LD_ADDR_OWVAR 35
59089: PUSH
59090: LD_INT 0
59092: ST_TO_ADDR
59093: GO 59116
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59095: LD_ADDR_OWVAR 35
59099: PUSH
59100: LD_VAR 0 1
59104: NEG
59105: PPUSH
59106: LD_VAR 0 1
59110: PPUSH
59111: CALL_OW 12
59115: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59116: LD_ADDR_OWVAR 31
59120: PUSH
59121: LD_INT 0
59123: PPUSH
59124: LD_INT 3
59126: PPUSH
59127: CALL_OW 12
59131: PUSH
59132: LD_INT 0
59134: PPUSH
59135: LD_INT 3
59137: PPUSH
59138: CALL_OW 12
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// end ;
59155: LD_VAR 0 2
59159: RET
// export function PrepareTiger ( agressivity ) ; begin
59160: LD_INT 0
59162: PPUSH
// uc_side := 0 ;
59163: LD_ADDR_OWVAR 20
59167: PUSH
59168: LD_INT 0
59170: ST_TO_ADDR
// uc_nation := 0 ;
59171: LD_ADDR_OWVAR 21
59175: PUSH
59176: LD_INT 0
59178: ST_TO_ADDR
// InitHc ;
59179: CALL_OW 19
// hc_class := class_tiger ;
59183: LD_ADDR_OWVAR 28
59187: PUSH
59188: LD_INT 14
59190: ST_TO_ADDR
// hc_gallery :=  ;
59191: LD_ADDR_OWVAR 33
59195: PUSH
59196: LD_STRING 
59198: ST_TO_ADDR
// hc_name :=  ;
59199: LD_ADDR_OWVAR 26
59203: PUSH
59204: LD_STRING 
59206: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59207: LD_ADDR_OWVAR 35
59211: PUSH
59212: LD_VAR 0 1
59216: NEG
59217: PPUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 12
59227: ST_TO_ADDR
// end ;
59228: LD_VAR 0 2
59232: RET
// export function PrepareEnchidna ( ) ; begin
59233: LD_INT 0
59235: PPUSH
// uc_side := 0 ;
59236: LD_ADDR_OWVAR 20
59240: PUSH
59241: LD_INT 0
59243: ST_TO_ADDR
// uc_nation := 0 ;
59244: LD_ADDR_OWVAR 21
59248: PUSH
59249: LD_INT 0
59251: ST_TO_ADDR
// InitHc ;
59252: CALL_OW 19
// hc_class := class_baggie ;
59256: LD_ADDR_OWVAR 28
59260: PUSH
59261: LD_INT 13
59263: ST_TO_ADDR
// hc_gallery :=  ;
59264: LD_ADDR_OWVAR 33
59268: PUSH
59269: LD_STRING 
59271: ST_TO_ADDR
// hc_name :=  ;
59272: LD_ADDR_OWVAR 26
59276: PUSH
59277: LD_STRING 
59279: ST_TO_ADDR
// end ;
59280: LD_VAR 0 1
59284: RET
// export function PrepareFrog ( ) ; begin
59285: LD_INT 0
59287: PPUSH
// uc_side := 0 ;
59288: LD_ADDR_OWVAR 20
59292: PUSH
59293: LD_INT 0
59295: ST_TO_ADDR
// uc_nation := 0 ;
59296: LD_ADDR_OWVAR 21
59300: PUSH
59301: LD_INT 0
59303: ST_TO_ADDR
// InitHc ;
59304: CALL_OW 19
// hc_class := class_frog ;
59308: LD_ADDR_OWVAR 28
59312: PUSH
59313: LD_INT 19
59315: ST_TO_ADDR
// hc_gallery :=  ;
59316: LD_ADDR_OWVAR 33
59320: PUSH
59321: LD_STRING 
59323: ST_TO_ADDR
// hc_name :=  ;
59324: LD_ADDR_OWVAR 26
59328: PUSH
59329: LD_STRING 
59331: ST_TO_ADDR
// end ;
59332: LD_VAR 0 1
59336: RET
// export function PrepareFish ( ) ; begin
59337: LD_INT 0
59339: PPUSH
// uc_side := 0 ;
59340: LD_ADDR_OWVAR 20
59344: PUSH
59345: LD_INT 0
59347: ST_TO_ADDR
// uc_nation := 0 ;
59348: LD_ADDR_OWVAR 21
59352: PUSH
59353: LD_INT 0
59355: ST_TO_ADDR
// InitHc ;
59356: CALL_OW 19
// hc_class := class_fish ;
59360: LD_ADDR_OWVAR 28
59364: PUSH
59365: LD_INT 20
59367: ST_TO_ADDR
// hc_gallery :=  ;
59368: LD_ADDR_OWVAR 33
59372: PUSH
59373: LD_STRING 
59375: ST_TO_ADDR
// hc_name :=  ;
59376: LD_ADDR_OWVAR 26
59380: PUSH
59381: LD_STRING 
59383: ST_TO_ADDR
// end ;
59384: LD_VAR 0 1
59388: RET
// export function PrepareBird ( ) ; begin
59389: LD_INT 0
59391: PPUSH
// uc_side := 0 ;
59392: LD_ADDR_OWVAR 20
59396: PUSH
59397: LD_INT 0
59399: ST_TO_ADDR
// uc_nation := 0 ;
59400: LD_ADDR_OWVAR 21
59404: PUSH
59405: LD_INT 0
59407: ST_TO_ADDR
// InitHc ;
59408: CALL_OW 19
// hc_class := class_phororhacos ;
59412: LD_ADDR_OWVAR 28
59416: PUSH
59417: LD_INT 18
59419: ST_TO_ADDR
// hc_gallery :=  ;
59420: LD_ADDR_OWVAR 33
59424: PUSH
59425: LD_STRING 
59427: ST_TO_ADDR
// hc_name :=  ;
59428: LD_ADDR_OWVAR 26
59432: PUSH
59433: LD_STRING 
59435: ST_TO_ADDR
// end ;
59436: LD_VAR 0 1
59440: RET
// export function PrepareHorse ( ) ; begin
59441: LD_INT 0
59443: PPUSH
// uc_side := 0 ;
59444: LD_ADDR_OWVAR 20
59448: PUSH
59449: LD_INT 0
59451: ST_TO_ADDR
// uc_nation := 0 ;
59452: LD_ADDR_OWVAR 21
59456: PUSH
59457: LD_INT 0
59459: ST_TO_ADDR
// InitHc ;
59460: CALL_OW 19
// hc_class := class_horse ;
59464: LD_ADDR_OWVAR 28
59468: PUSH
59469: LD_INT 21
59471: ST_TO_ADDR
// hc_gallery :=  ;
59472: LD_ADDR_OWVAR 33
59476: PUSH
59477: LD_STRING 
59479: ST_TO_ADDR
// hc_name :=  ;
59480: LD_ADDR_OWVAR 26
59484: PUSH
59485: LD_STRING 
59487: ST_TO_ADDR
// end ;
59488: LD_VAR 0 1
59492: RET
// export function PrepareMastodont ( ) ; begin
59493: LD_INT 0
59495: PPUSH
// uc_side := 0 ;
59496: LD_ADDR_OWVAR 20
59500: PUSH
59501: LD_INT 0
59503: ST_TO_ADDR
// uc_nation := 0 ;
59504: LD_ADDR_OWVAR 21
59508: PUSH
59509: LD_INT 0
59511: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59512: LD_ADDR_OWVAR 37
59516: PUSH
59517: LD_INT 31
59519: ST_TO_ADDR
// vc_control := control_rider ;
59520: LD_ADDR_OWVAR 38
59524: PUSH
59525: LD_INT 4
59527: ST_TO_ADDR
// end ;
59528: LD_VAR 0 1
59532: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
59537: PPUSH
// uc_side = 0 ;
59538: LD_ADDR_OWVAR 20
59542: PUSH
59543: LD_INT 0
59545: ST_TO_ADDR
// uc_nation = 0 ;
59546: LD_ADDR_OWVAR 21
59550: PUSH
59551: LD_INT 0
59553: ST_TO_ADDR
// InitHc_All ( ) ;
59554: CALL_OW 584
// InitVc ;
59558: CALL_OW 20
// if mastodonts then
59562: LD_VAR 0 6
59566: IFFALSE 59633
// for i = 1 to mastodonts do
59568: LD_ADDR_VAR 0 11
59572: PUSH
59573: DOUBLE
59574: LD_INT 1
59576: DEC
59577: ST_TO_ADDR
59578: LD_VAR 0 6
59582: PUSH
59583: FOR_TO
59584: IFFALSE 59631
// begin vc_chassis := 31 ;
59586: LD_ADDR_OWVAR 37
59590: PUSH
59591: LD_INT 31
59593: ST_TO_ADDR
// vc_control := control_rider ;
59594: LD_ADDR_OWVAR 38
59598: PUSH
59599: LD_INT 4
59601: ST_TO_ADDR
// animal := CreateVehicle ;
59602: LD_ADDR_VAR 0 12
59606: PUSH
59607: CALL_OW 45
59611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59612: LD_VAR 0 12
59616: PPUSH
59617: LD_VAR 0 8
59621: PPUSH
59622: LD_INT 0
59624: PPUSH
59625: CALL 61775 0 3
// end ;
59629: GO 59583
59631: POP
59632: POP
// if horses then
59633: LD_VAR 0 5
59637: IFFALSE 59704
// for i = 1 to horses do
59639: LD_ADDR_VAR 0 11
59643: PUSH
59644: DOUBLE
59645: LD_INT 1
59647: DEC
59648: ST_TO_ADDR
59649: LD_VAR 0 5
59653: PUSH
59654: FOR_TO
59655: IFFALSE 59702
// begin hc_class := 21 ;
59657: LD_ADDR_OWVAR 28
59661: PUSH
59662: LD_INT 21
59664: ST_TO_ADDR
// hc_gallery :=  ;
59665: LD_ADDR_OWVAR 33
59669: PUSH
59670: LD_STRING 
59672: ST_TO_ADDR
// animal := CreateHuman ;
59673: LD_ADDR_VAR 0 12
59677: PUSH
59678: CALL_OW 44
59682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59683: LD_VAR 0 12
59687: PPUSH
59688: LD_VAR 0 8
59692: PPUSH
59693: LD_INT 0
59695: PPUSH
59696: CALL 61775 0 3
// end ;
59700: GO 59654
59702: POP
59703: POP
// if birds then
59704: LD_VAR 0 1
59708: IFFALSE 59775
// for i = 1 to birds do
59710: LD_ADDR_VAR 0 11
59714: PUSH
59715: DOUBLE
59716: LD_INT 1
59718: DEC
59719: ST_TO_ADDR
59720: LD_VAR 0 1
59724: PUSH
59725: FOR_TO
59726: IFFALSE 59773
// begin hc_class := 18 ;
59728: LD_ADDR_OWVAR 28
59732: PUSH
59733: LD_INT 18
59735: ST_TO_ADDR
// hc_gallery =  ;
59736: LD_ADDR_OWVAR 33
59740: PUSH
59741: LD_STRING 
59743: ST_TO_ADDR
// animal := CreateHuman ;
59744: LD_ADDR_VAR 0 12
59748: PUSH
59749: CALL_OW 44
59753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59754: LD_VAR 0 12
59758: PPUSH
59759: LD_VAR 0 8
59763: PPUSH
59764: LD_INT 0
59766: PPUSH
59767: CALL 61775 0 3
// end ;
59771: GO 59725
59773: POP
59774: POP
// if tigers then
59775: LD_VAR 0 2
59779: IFFALSE 59863
// for i = 1 to tigers do
59781: LD_ADDR_VAR 0 11
59785: PUSH
59786: DOUBLE
59787: LD_INT 1
59789: DEC
59790: ST_TO_ADDR
59791: LD_VAR 0 2
59795: PUSH
59796: FOR_TO
59797: IFFALSE 59861
// begin hc_class = class_tiger ;
59799: LD_ADDR_OWVAR 28
59803: PUSH
59804: LD_INT 14
59806: ST_TO_ADDR
// hc_gallery =  ;
59807: LD_ADDR_OWVAR 33
59811: PUSH
59812: LD_STRING 
59814: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59815: LD_ADDR_OWVAR 35
59819: PUSH
59820: LD_INT 7
59822: NEG
59823: PPUSH
59824: LD_INT 7
59826: PPUSH
59827: CALL_OW 12
59831: ST_TO_ADDR
// animal := CreateHuman ;
59832: LD_ADDR_VAR 0 12
59836: PUSH
59837: CALL_OW 44
59841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59842: LD_VAR 0 12
59846: PPUSH
59847: LD_VAR 0 8
59851: PPUSH
59852: LD_INT 0
59854: PPUSH
59855: CALL 61775 0 3
// end ;
59859: GO 59796
59861: POP
59862: POP
// if apemans then
59863: LD_VAR 0 3
59867: IFFALSE 59990
// for i = 1 to apemans do
59869: LD_ADDR_VAR 0 11
59873: PUSH
59874: DOUBLE
59875: LD_INT 1
59877: DEC
59878: ST_TO_ADDR
59879: LD_VAR 0 3
59883: PUSH
59884: FOR_TO
59885: IFFALSE 59988
// begin hc_class = class_apeman ;
59887: LD_ADDR_OWVAR 28
59891: PUSH
59892: LD_INT 12
59894: ST_TO_ADDR
// hc_gallery =  ;
59895: LD_ADDR_OWVAR 33
59899: PUSH
59900: LD_STRING 
59902: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59903: LD_ADDR_OWVAR 35
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PPUSH
59912: LD_INT 2
59914: PPUSH
59915: CALL_OW 12
59919: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59920: LD_ADDR_OWVAR 31
59924: PUSH
59925: LD_INT 1
59927: PPUSH
59928: LD_INT 3
59930: PPUSH
59931: CALL_OW 12
59935: PUSH
59936: LD_INT 1
59938: PPUSH
59939: LD_INT 3
59941: PPUSH
59942: CALL_OW 12
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// animal := CreateHuman ;
59959: LD_ADDR_VAR 0 12
59963: PUSH
59964: CALL_OW 44
59968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59969: LD_VAR 0 12
59973: PPUSH
59974: LD_VAR 0 8
59978: PPUSH
59979: LD_INT 0
59981: PPUSH
59982: CALL 61775 0 3
// end ;
59986: GO 59884
59988: POP
59989: POP
// if enchidnas then
59990: LD_VAR 0 4
59994: IFFALSE 60061
// for i = 1 to enchidnas do
59996: LD_ADDR_VAR 0 11
60000: PUSH
60001: DOUBLE
60002: LD_INT 1
60004: DEC
60005: ST_TO_ADDR
60006: LD_VAR 0 4
60010: PUSH
60011: FOR_TO
60012: IFFALSE 60059
// begin hc_class = 13 ;
60014: LD_ADDR_OWVAR 28
60018: PUSH
60019: LD_INT 13
60021: ST_TO_ADDR
// hc_gallery =  ;
60022: LD_ADDR_OWVAR 33
60026: PUSH
60027: LD_STRING 
60029: ST_TO_ADDR
// animal := CreateHuman ;
60030: LD_ADDR_VAR 0 12
60034: PUSH
60035: CALL_OW 44
60039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60040: LD_VAR 0 12
60044: PPUSH
60045: LD_VAR 0 8
60049: PPUSH
60050: LD_INT 0
60052: PPUSH
60053: CALL 61775 0 3
// end ;
60057: GO 60011
60059: POP
60060: POP
// if fishes then
60061: LD_VAR 0 7
60065: IFFALSE 60132
// for i = 1 to fishes do
60067: LD_ADDR_VAR 0 11
60071: PUSH
60072: DOUBLE
60073: LD_INT 1
60075: DEC
60076: ST_TO_ADDR
60077: LD_VAR 0 7
60081: PUSH
60082: FOR_TO
60083: IFFALSE 60130
// begin hc_class = 20 ;
60085: LD_ADDR_OWVAR 28
60089: PUSH
60090: LD_INT 20
60092: ST_TO_ADDR
// hc_gallery =  ;
60093: LD_ADDR_OWVAR 33
60097: PUSH
60098: LD_STRING 
60100: ST_TO_ADDR
// animal := CreateHuman ;
60101: LD_ADDR_VAR 0 12
60105: PUSH
60106: CALL_OW 44
60110: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60111: LD_VAR 0 12
60115: PPUSH
60116: LD_VAR 0 9
60120: PPUSH
60121: LD_INT 0
60123: PPUSH
60124: CALL 61775 0 3
// end ;
60128: GO 60082
60130: POP
60131: POP
// end ;
60132: LD_VAR 0 10
60136: RET
// export function WantHeal ( sci , unit ) ; begin
60137: LD_INT 0
60139: PPUSH
// if GetTaskList ( sci ) > 0 then
60140: LD_VAR 0 1
60144: PPUSH
60145: CALL_OW 437
60149: PUSH
60150: LD_INT 0
60152: GREATER
60153: IFFALSE 60225
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60155: LD_VAR 0 1
60159: PPUSH
60160: CALL_OW 437
60164: PUSH
60165: LD_INT 1
60167: ARRAY
60168: PUSH
60169: LD_INT 1
60171: ARRAY
60172: PUSH
60173: LD_STRING l
60175: EQUAL
60176: IFFALSE 60203
60178: PUSH
60179: LD_VAR 0 1
60183: PPUSH
60184: CALL_OW 437
60188: PUSH
60189: LD_INT 1
60191: ARRAY
60192: PUSH
60193: LD_INT 4
60195: ARRAY
60196: PUSH
60197: LD_VAR 0 2
60201: EQUAL
60202: AND
60203: IFFALSE 60215
// result := true else
60205: LD_ADDR_VAR 0 3
60209: PUSH
60210: LD_INT 1
60212: ST_TO_ADDR
60213: GO 60223
// result := false ;
60215: LD_ADDR_VAR 0 3
60219: PUSH
60220: LD_INT 0
60222: ST_TO_ADDR
// end else
60223: GO 60233
// result := false ;
60225: LD_ADDR_VAR 0 3
60229: PUSH
60230: LD_INT 0
60232: ST_TO_ADDR
// end ;
60233: LD_VAR 0 3
60237: RET
// export function HealTarget ( sci ) ; begin
60238: LD_INT 0
60240: PPUSH
// if not sci then
60241: LD_VAR 0 1
60245: NOT
60246: IFFALSE 60250
// exit ;
60248: GO 60315
// result := 0 ;
60250: LD_ADDR_VAR 0 2
60254: PUSH
60255: LD_INT 0
60257: ST_TO_ADDR
// if GetTaskList ( sci ) then
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 437
60267: IFFALSE 60315
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60269: LD_VAR 0 1
60273: PPUSH
60274: CALL_OW 437
60278: PUSH
60279: LD_INT 1
60281: ARRAY
60282: PUSH
60283: LD_INT 1
60285: ARRAY
60286: PUSH
60287: LD_STRING l
60289: EQUAL
60290: IFFALSE 60315
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60292: LD_ADDR_VAR 0 2
60296: PUSH
60297: LD_VAR 0 1
60301: PPUSH
60302: CALL_OW 437
60306: PUSH
60307: LD_INT 1
60309: ARRAY
60310: PUSH
60311: LD_INT 4
60313: ARRAY
60314: ST_TO_ADDR
// end ;
60315: LD_VAR 0 2
60319: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60320: LD_INT 0
60322: PPUSH
60323: PPUSH
60324: PPUSH
60325: PPUSH
// if not base_units then
60326: LD_VAR 0 1
60330: NOT
60331: IFFALSE 60335
// exit ;
60333: GO 60422
// result := false ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_INT 0
60342: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60343: LD_ADDR_VAR 0 5
60347: PUSH
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_INT 21
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PPUSH
60363: CALL_OW 72
60367: ST_TO_ADDR
// if not tmp then
60368: LD_VAR 0 5
60372: NOT
60373: IFFALSE 60377
// exit ;
60375: GO 60422
// for i in tmp do
60377: LD_ADDR_VAR 0 3
60381: PUSH
60382: LD_VAR 0 5
60386: PUSH
60387: FOR_IN
60388: IFFALSE 60420
// begin result := EnemyInRange ( i , 22 ) ;
60390: LD_ADDR_VAR 0 2
60394: PUSH
60395: LD_VAR 0 3
60399: PPUSH
60400: LD_INT 22
60402: PPUSH
60403: CALL 57837 0 2
60407: ST_TO_ADDR
// if result then
60408: LD_VAR 0 2
60412: IFFALSE 60418
// exit ;
60414: POP
60415: POP
60416: GO 60422
// end ;
60418: GO 60387
60420: POP
60421: POP
// end ;
60422: LD_VAR 0 2
60426: RET
// export function FilterByTag ( units , tag ) ; begin
60427: LD_INT 0
60429: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60430: LD_ADDR_VAR 0 3
60434: PUSH
60435: LD_VAR 0 1
60439: PPUSH
60440: LD_INT 120
60442: PUSH
60443: LD_VAR 0 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PPUSH
60452: CALL_OW 72
60456: ST_TO_ADDR
// end ;
60457: LD_VAR 0 3
60461: RET
// export function IsDriver ( un ) ; begin
60462: LD_INT 0
60464: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60465: LD_ADDR_VAR 0 2
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 55
60477: PUSH
60478: EMPTY
60479: LIST
60480: PPUSH
60481: CALL_OW 69
60485: IN
60486: ST_TO_ADDR
// end ;
60487: LD_VAR 0 2
60491: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
// list := [ ] ;
60496: LD_ADDR_VAR 0 5
60500: PUSH
60501: EMPTY
60502: ST_TO_ADDR
// case d of 0 :
60503: LD_VAR 0 3
60507: PUSH
60508: LD_INT 0
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60516
60514: GO 60649
60516: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60517: LD_ADDR_VAR 0 5
60521: PUSH
60522: LD_VAR 0 1
60526: PUSH
60527: LD_INT 4
60529: MINUS
60530: PUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_INT 4
60538: MINUS
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: PUSH
60548: LD_VAR 0 1
60552: PUSH
60553: LD_INT 3
60555: MINUS
60556: PUSH
60557: LD_VAR 0 2
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: LD_VAR 0 1
60574: PUSH
60575: LD_INT 4
60577: PLUS
60578: PUSH
60579: LD_VAR 0 2
60583: PUSH
60584: LD_INT 4
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: LD_VAR 0 1
60596: PUSH
60597: LD_INT 3
60599: PLUS
60600: PUSH
60601: LD_VAR 0 2
60605: PUSH
60606: LD_INT 3
60608: PLUS
60609: PUSH
60610: LD_INT 5
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: LD_VAR 0 1
60622: PUSH
60623: LD_VAR 0 2
60627: PUSH
60628: LD_INT 4
60630: PLUS
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: ST_TO_ADDR
// end ; 1 :
60647: GO 61347
60649: LD_INT 1
60651: DOUBLE
60652: EQUAL
60653: IFTRUE 60657
60655: GO 60790
60657: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60658: LD_ADDR_VAR 0 5
60662: PUSH
60663: LD_VAR 0 1
60667: PUSH
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 4
60675: MINUS
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: PUSH
60685: LD_VAR 0 1
60689: PUSH
60690: LD_INT 3
60692: MINUS
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_INT 3
60701: MINUS
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 4
60718: MINUS
60719: PUSH
60720: LD_VAR 0 2
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: PUSH
60733: LD_VAR 0 1
60737: PUSH
60738: LD_VAR 0 2
60742: PUSH
60743: LD_INT 3
60745: PLUS
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: PUSH
60755: LD_VAR 0 1
60759: PUSH
60760: LD_INT 4
60762: PLUS
60763: PUSH
60764: LD_VAR 0 2
60768: PUSH
60769: LD_INT 4
60771: PLUS
60772: PUSH
60773: LD_INT 5
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// end ; 2 :
60788: GO 61347
60790: LD_INT 2
60792: DOUBLE
60793: EQUAL
60794: IFTRUE 60798
60796: GO 60927
60798: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60799: LD_ADDR_VAR 0 5
60803: PUSH
60804: LD_VAR 0 1
60808: PUSH
60809: LD_VAR 0 2
60813: PUSH
60814: LD_INT 3
60816: MINUS
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: PUSH
60826: LD_VAR 0 1
60830: PUSH
60831: LD_INT 4
60833: PLUS
60834: PUSH
60835: LD_VAR 0 2
60839: PUSH
60840: LD_INT 4
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: PUSH
60848: LD_VAR 0 1
60852: PUSH
60853: LD_VAR 0 2
60857: PUSH
60858: LD_INT 4
60860: PLUS
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_VAR 0 1
60874: PUSH
60875: LD_INT 3
60877: MINUS
60878: PUSH
60879: LD_VAR 0 2
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: PUSH
60892: LD_VAR 0 1
60896: PUSH
60897: LD_INT 4
60899: MINUS
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 4
60908: MINUS
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// end ; 3 :
60925: GO 61347
60927: LD_INT 3
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60935
60933: GO 61068
60935: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60936: LD_ADDR_VAR 0 5
60940: PUSH
60941: LD_VAR 0 1
60945: PUSH
60946: LD_INT 3
60948: PLUS
60949: PUSH
60950: LD_VAR 0 2
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: PUSH
60963: LD_VAR 0 1
60967: PUSH
60968: LD_INT 4
60970: PLUS
60971: PUSH
60972: LD_VAR 0 2
60976: PUSH
60977: LD_INT 4
60979: PLUS
60980: PUSH
60981: LD_INT 5
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: PUSH
60989: LD_VAR 0 1
60993: PUSH
60994: LD_INT 4
60996: MINUS
60997: PUSH
60998: LD_VAR 0 2
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: PUSH
61011: LD_VAR 0 1
61015: PUSH
61016: LD_VAR 0 2
61020: PUSH
61021: LD_INT 4
61023: MINUS
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: PUSH
61033: LD_VAR 0 1
61037: PUSH
61038: LD_INT 3
61040: MINUS
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 3
61049: MINUS
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// end ; 4 :
61066: GO 61347
61068: LD_INT 4
61070: DOUBLE
61071: EQUAL
61072: IFTRUE 61076
61074: GO 61209
61076: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61077: LD_ADDR_VAR 0 5
61081: PUSH
61082: LD_VAR 0 1
61086: PUSH
61087: LD_VAR 0 2
61091: PUSH
61092: LD_INT 4
61094: PLUS
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: PUSH
61104: LD_VAR 0 1
61108: PUSH
61109: LD_INT 3
61111: PLUS
61112: PUSH
61113: LD_VAR 0 2
61117: PUSH
61118: LD_INT 3
61120: PLUS
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: PUSH
61130: LD_VAR 0 1
61134: PUSH
61135: LD_INT 4
61137: PLUS
61138: PUSH
61139: LD_VAR 0 2
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: PUSH
61152: LD_VAR 0 1
61156: PUSH
61157: LD_VAR 0 2
61161: PUSH
61162: LD_INT 3
61164: MINUS
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 4
61181: MINUS
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 4
61190: MINUS
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// end ; 5 :
61207: GO 61347
61209: LD_INT 5
61211: DOUBLE
61212: EQUAL
61213: IFTRUE 61217
61215: GO 61346
61217: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61218: LD_ADDR_VAR 0 5
61222: PUSH
61223: LD_VAR 0 1
61227: PUSH
61228: LD_INT 4
61230: MINUS
61231: PUSH
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: PUSH
61245: LD_VAR 0 1
61249: PUSH
61250: LD_VAR 0 2
61254: PUSH
61255: LD_INT 4
61257: MINUS
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: PUSH
61267: LD_VAR 0 1
61271: PUSH
61272: LD_INT 4
61274: PLUS
61275: PUSH
61276: LD_VAR 0 2
61280: PUSH
61281: LD_INT 4
61283: PLUS
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: LD_VAR 0 1
61297: PUSH
61298: LD_INT 3
61300: PLUS
61301: PUSH
61302: LD_VAR 0 2
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: PUSH
61315: LD_VAR 0 1
61319: PUSH
61320: LD_VAR 0 2
61324: PUSH
61325: LD_INT 3
61327: PLUS
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: ST_TO_ADDR
// end ; end ;
61344: GO 61347
61346: POP
// result := list ;
61347: LD_ADDR_VAR 0 4
61351: PUSH
61352: LD_VAR 0 5
61356: ST_TO_ADDR
// end ;
61357: LD_VAR 0 4
61361: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61362: LD_INT 0
61364: PPUSH
61365: PPUSH
61366: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61367: LD_VAR 0 1
61371: NOT
61372: IFTRUE 61400
61374: PUSH
61375: LD_VAR 0 2
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 4
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: IN
61398: NOT
61399: OR
61400: IFFALSE 61404
// exit ;
61402: GO 61487
// tmp := [ ] ;
61404: LD_ADDR_VAR 0 5
61408: PUSH
61409: EMPTY
61410: ST_TO_ADDR
// for i in units do
61411: LD_ADDR_VAR 0 4
61415: PUSH
61416: LD_VAR 0 1
61420: PUSH
61421: FOR_IN
61422: IFFALSE 61456
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61424: LD_ADDR_VAR 0 5
61428: PUSH
61429: LD_VAR 0 5
61433: PPUSH
61434: LD_VAR 0 4
61438: PPUSH
61439: LD_VAR 0 2
61443: PPUSH
61444: CALL_OW 259
61448: PPUSH
61449: CALL 62882 0 2
61453: ST_TO_ADDR
61454: GO 61421
61456: POP
61457: POP
// if not tmp then
61458: LD_VAR 0 5
61462: NOT
61463: IFFALSE 61467
// exit ;
61465: GO 61487
// result := SortListByListDesc ( units , tmp ) ;
61467: LD_ADDR_VAR 0 3
61471: PUSH
61472: LD_VAR 0 1
61476: PPUSH
61477: LD_VAR 0 5
61481: PPUSH
61482: CALL_OW 77
61486: ST_TO_ADDR
// end ;
61487: LD_VAR 0 3
61491: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61492: LD_INT 0
61494: PPUSH
61495: PPUSH
61496: PPUSH
// result := false ;
61497: LD_ADDR_VAR 0 3
61501: PUSH
61502: LD_INT 0
61504: ST_TO_ADDR
// if not building then
61505: LD_VAR 0 2
61509: NOT
61510: IFFALSE 61514
// exit ;
61512: GO 61658
// x := GetX ( building ) ;
61514: LD_ADDR_VAR 0 4
61518: PUSH
61519: LD_VAR 0 2
61523: PPUSH
61524: CALL_OW 250
61528: ST_TO_ADDR
// y := GetY ( building ) ;
61529: LD_ADDR_VAR 0 5
61533: PUSH
61534: LD_VAR 0 2
61538: PPUSH
61539: CALL_OW 251
61543: ST_TO_ADDR
// if not x or not y then
61544: LD_VAR 0 4
61548: NOT
61549: IFTRUE 61558
61551: PUSH
61552: LD_VAR 0 5
61556: NOT
61557: OR
61558: IFFALSE 61562
// exit ;
61560: GO 61658
// if GetTaskList ( unit ) then
61562: LD_VAR 0 1
61566: PPUSH
61567: CALL_OW 437
61571: IFFALSE 61658
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61573: LD_STRING e
61575: PUSH
61576: LD_VAR 0 1
61580: PPUSH
61581: CALL_OW 437
61585: PUSH
61586: LD_INT 1
61588: ARRAY
61589: PUSH
61590: LD_INT 1
61592: ARRAY
61593: EQUAL
61594: IFFALSE 61621
61596: PUSH
61597: LD_VAR 0 4
61601: PUSH
61602: LD_VAR 0 1
61606: PPUSH
61607: CALL_OW 437
61611: PUSH
61612: LD_INT 1
61614: ARRAY
61615: PUSH
61616: LD_INT 2
61618: ARRAY
61619: EQUAL
61620: AND
61621: IFFALSE 61648
61623: PUSH
61624: LD_VAR 0 5
61628: PUSH
61629: LD_VAR 0 1
61633: PPUSH
61634: CALL_OW 437
61638: PUSH
61639: LD_INT 1
61641: ARRAY
61642: PUSH
61643: LD_INT 3
61645: ARRAY
61646: EQUAL
61647: AND
61648: IFFALSE 61658
// result := true end ;
61650: LD_ADDR_VAR 0 3
61654: PUSH
61655: LD_INT 1
61657: ST_TO_ADDR
// end ;
61658: LD_VAR 0 3
61662: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61663: LD_INT 0
61665: PPUSH
// result := false ;
61666: LD_ADDR_VAR 0 4
61670: PUSH
61671: LD_INT 0
61673: ST_TO_ADDR
// if GetTaskList ( unit ) then
61674: LD_VAR 0 1
61678: PPUSH
61679: CALL_OW 437
61683: IFFALSE 61770
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61685: LD_STRING M
61687: PUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 437
61697: PUSH
61698: LD_INT 1
61700: ARRAY
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: EQUAL
61706: IFFALSE 61733
61708: PUSH
61709: LD_VAR 0 2
61713: PUSH
61714: LD_VAR 0 1
61718: PPUSH
61719: CALL_OW 437
61723: PUSH
61724: LD_INT 1
61726: ARRAY
61727: PUSH
61728: LD_INT 2
61730: ARRAY
61731: EQUAL
61732: AND
61733: IFFALSE 61760
61735: PUSH
61736: LD_VAR 0 3
61740: PUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 437
61750: PUSH
61751: LD_INT 1
61753: ARRAY
61754: PUSH
61755: LD_INT 3
61757: ARRAY
61758: EQUAL
61759: AND
61760: IFFALSE 61770
// result := true ;
61762: LD_ADDR_VAR 0 4
61766: PUSH
61767: LD_INT 1
61769: ST_TO_ADDR
// end ; end ;
61770: LD_VAR 0 4
61774: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61775: LD_INT 0
61777: PPUSH
61778: PPUSH
61779: PPUSH
61780: PPUSH
// if not unit or not area then
61781: LD_VAR 0 1
61785: NOT
61786: IFTRUE 61795
61788: PUSH
61789: LD_VAR 0 2
61793: NOT
61794: OR
61795: IFFALSE 61799
// exit ;
61797: GO 61975
// tmp := AreaToList ( area , i ) ;
61799: LD_ADDR_VAR 0 6
61803: PUSH
61804: LD_VAR 0 2
61808: PPUSH
61809: LD_VAR 0 5
61813: PPUSH
61814: CALL_OW 517
61818: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61819: LD_ADDR_VAR 0 5
61823: PUSH
61824: DOUBLE
61825: LD_INT 1
61827: DEC
61828: ST_TO_ADDR
61829: LD_VAR 0 6
61833: PUSH
61834: LD_INT 1
61836: ARRAY
61837: PUSH
61838: FOR_TO
61839: IFFALSE 61973
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61841: LD_ADDR_VAR 0 7
61845: PUSH
61846: LD_VAR 0 6
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: PUSH
61855: LD_VAR 0 5
61859: ARRAY
61860: PUSH
61861: LD_VAR 0 6
61865: PUSH
61866: LD_INT 2
61868: ARRAY
61869: PUSH
61870: LD_VAR 0 5
61874: ARRAY
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61880: LD_INT 92
61882: PUSH
61883: LD_VAR 0 7
61887: PUSH
61888: LD_INT 1
61890: ARRAY
61891: PUSH
61892: LD_VAR 0 7
61896: PUSH
61897: LD_INT 2
61899: ARRAY
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: PPUSH
61910: CALL_OW 69
61914: PUSH
61915: LD_INT 0
61917: EQUAL
61918: IFFALSE 61971
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61920: LD_VAR 0 1
61924: PPUSH
61925: LD_VAR 0 7
61929: PUSH
61930: LD_INT 1
61932: ARRAY
61933: PPUSH
61934: LD_VAR 0 7
61938: PUSH
61939: LD_INT 2
61941: ARRAY
61942: PPUSH
61943: LD_VAR 0 3
61947: PPUSH
61948: CALL_OW 48
// result := IsPlaced ( unit ) ;
61952: LD_ADDR_VAR 0 4
61956: PUSH
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 305
61966: ST_TO_ADDR
// exit ;
61967: POP
61968: POP
61969: GO 61975
// end ; end ;
61971: GO 61838
61973: POP
61974: POP
// end ;
61975: LD_VAR 0 4
61979: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
61984: PPUSH
// if not side or side > 8 then
61985: LD_VAR 0 1
61989: NOT
61990: IFTRUE 62002
61992: PUSH
61993: LD_VAR 0 1
61997: PUSH
61998: LD_INT 8
62000: GREATER
62001: OR
62002: IFFALSE 62006
// exit ;
62004: GO 62193
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62006: LD_ADDR_VAR 0 4
62010: PUSH
62011: LD_INT 22
62013: PUSH
62014: LD_VAR 0 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 21
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PPUSH
62037: CALL_OW 69
62041: ST_TO_ADDR
// if not tmp then
62042: LD_VAR 0 4
62046: NOT
62047: IFFALSE 62051
// exit ;
62049: GO 62193
// enable_addtolog := true ;
62051: LD_ADDR_OWVAR 81
62055: PUSH
62056: LD_INT 1
62058: ST_TO_ADDR
// AddToLog ( [ ) ;
62059: LD_STRING [
62061: PPUSH
62062: CALL_OW 561
// for i in tmp do
62066: LD_ADDR_VAR 0 3
62070: PUSH
62071: LD_VAR 0 4
62075: PUSH
62076: FOR_IN
62077: IFFALSE 62184
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62079: LD_STRING [
62081: PUSH
62082: LD_VAR 0 3
62086: PPUSH
62087: CALL_OW 266
62091: STR
62092: PUSH
62093: LD_STRING , 
62095: STR
62096: PUSH
62097: LD_VAR 0 3
62101: PPUSH
62102: CALL_OW 250
62106: STR
62107: PUSH
62108: LD_STRING , 
62110: STR
62111: PUSH
62112: LD_VAR 0 3
62116: PPUSH
62117: CALL_OW 251
62121: STR
62122: PUSH
62123: LD_STRING , 
62125: STR
62126: PUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 254
62136: STR
62137: PUSH
62138: LD_STRING , 
62140: STR
62141: PUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: LD_INT 1
62149: PPUSH
62150: CALL_OW 268
62154: STR
62155: PUSH
62156: LD_STRING , 
62158: STR
62159: PUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: LD_INT 2
62167: PPUSH
62168: CALL_OW 268
62172: STR
62173: PUSH
62174: LD_STRING ],
62176: STR
62177: PPUSH
62178: CALL_OW 561
// end ;
62182: GO 62076
62184: POP
62185: POP
// AddToLog ( ]; ) ;
62186: LD_STRING ];
62188: PPUSH
62189: CALL_OW 561
// end ;
62193: LD_VAR 0 2
62197: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62198: LD_INT 0
62200: PPUSH
62201: PPUSH
62202: PPUSH
62203: PPUSH
62204: PPUSH
// if not area or not rate or not max then
62205: LD_VAR 0 1
62209: NOT
62210: IFTRUE 62219
62212: PUSH
62213: LD_VAR 0 2
62217: NOT
62218: OR
62219: IFTRUE 62228
62221: PUSH
62222: LD_VAR 0 4
62226: NOT
62227: OR
62228: IFFALSE 62232
// exit ;
62230: GO 62421
// while 1 do
62232: LD_INT 1
62234: IFFALSE 62421
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62236: LD_ADDR_VAR 0 9
62240: PUSH
62241: LD_VAR 0 1
62245: PPUSH
62246: LD_INT 1
62248: PPUSH
62249: CALL_OW 287
62253: PUSH
62254: LD_INT 10
62256: MUL
62257: ST_TO_ADDR
// r := rate / 10 ;
62258: LD_ADDR_VAR 0 7
62262: PUSH
62263: LD_VAR 0 2
62267: PUSH
62268: LD_INT 10
62270: DIVREAL
62271: ST_TO_ADDR
// time := 1 1$00 ;
62272: LD_ADDR_VAR 0 8
62276: PUSH
62277: LD_INT 2100
62279: ST_TO_ADDR
// if amount < min then
62280: LD_VAR 0 9
62284: PUSH
62285: LD_VAR 0 3
62289: LESS
62290: IFFALSE 62308
// r := r * 2 else
62292: LD_ADDR_VAR 0 7
62296: PUSH
62297: LD_VAR 0 7
62301: PUSH
62302: LD_INT 2
62304: MUL
62305: ST_TO_ADDR
62306: GO 62334
// if amount > max then
62308: LD_VAR 0 9
62312: PUSH
62313: LD_VAR 0 4
62317: GREATER
62318: IFFALSE 62334
// r := r / 2 ;
62320: LD_ADDR_VAR 0 7
62324: PUSH
62325: LD_VAR 0 7
62329: PUSH
62330: LD_INT 2
62332: DIVREAL
62333: ST_TO_ADDR
// time := time / r ;
62334: LD_ADDR_VAR 0 8
62338: PUSH
62339: LD_VAR 0 8
62343: PUSH
62344: LD_VAR 0 7
62348: DIVREAL
62349: ST_TO_ADDR
// if time < 0 then
62350: LD_VAR 0 8
62354: PUSH
62355: LD_INT 0
62357: LESS
62358: IFFALSE 62375
// time := time * - 1 ;
62360: LD_ADDR_VAR 0 8
62364: PUSH
62365: LD_VAR 0 8
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: MUL
62374: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62375: LD_VAR 0 8
62379: PUSH
62380: LD_INT 35
62382: PPUSH
62383: LD_INT 875
62385: PPUSH
62386: CALL_OW 12
62390: PLUS
62391: PPUSH
62392: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62396: LD_INT 1
62398: PPUSH
62399: LD_INT 5
62401: PPUSH
62402: CALL_OW 12
62406: PPUSH
62407: LD_VAR 0 1
62411: PPUSH
62412: LD_INT 1
62414: PPUSH
62415: CALL_OW 55
// end ;
62419: GO 62232
// end ;
62421: LD_VAR 0 5
62425: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62426: LD_INT 0
62428: PPUSH
62429: PPUSH
62430: PPUSH
62431: PPUSH
62432: PPUSH
62433: PPUSH
62434: PPUSH
62435: PPUSH
// if not turrets or not factories then
62436: LD_VAR 0 1
62440: NOT
62441: IFTRUE 62450
62443: PUSH
62444: LD_VAR 0 2
62448: NOT
62449: OR
62450: IFFALSE 62454
// exit ;
62452: GO 62761
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62454: LD_ADDR_VAR 0 10
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: LD_INT 6
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 5
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 24
62496: PUSH
62497: LD_INT 25
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 23
62506: PUSH
62507: LD_INT 27
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 42
62520: PUSH
62521: LD_INT 43
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 44
62530: PUSH
62531: LD_INT 46
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 45
62540: PUSH
62541: LD_INT 47
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// result := [ ] ;
62558: LD_ADDR_VAR 0 3
62562: PUSH
62563: EMPTY
62564: ST_TO_ADDR
// for i in turrets do
62565: LD_ADDR_VAR 0 4
62569: PUSH
62570: LD_VAR 0 1
62574: PUSH
62575: FOR_IN
62576: IFFALSE 62759
// begin nat := GetNation ( i ) ;
62578: LD_ADDR_VAR 0 7
62582: PUSH
62583: LD_VAR 0 4
62587: PPUSH
62588: CALL_OW 248
62592: ST_TO_ADDR
// weapon := 0 ;
62593: LD_ADDR_VAR 0 8
62597: PUSH
62598: LD_INT 0
62600: ST_TO_ADDR
// if not nat then
62601: LD_VAR 0 7
62605: NOT
62606: IFFALSE 62610
// continue ;
62608: GO 62575
// for j in list [ nat ] do
62610: LD_ADDR_VAR 0 5
62614: PUSH
62615: LD_VAR 0 10
62619: PUSH
62620: LD_VAR 0 7
62624: ARRAY
62625: PUSH
62626: FOR_IN
62627: IFFALSE 62668
// if GetBWeapon ( i ) = j [ 1 ] then
62629: LD_VAR 0 4
62633: PPUSH
62634: CALL_OW 269
62638: PUSH
62639: LD_VAR 0 5
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: EQUAL
62648: IFFALSE 62666
// begin weapon := j [ 2 ] ;
62650: LD_ADDR_VAR 0 8
62654: PUSH
62655: LD_VAR 0 5
62659: PUSH
62660: LD_INT 2
62662: ARRAY
62663: ST_TO_ADDR
// break ;
62664: GO 62668
// end ;
62666: GO 62626
62668: POP
62669: POP
// if not weapon then
62670: LD_VAR 0 8
62674: NOT
62675: IFFALSE 62679
// continue ;
62677: GO 62575
// for k in factories do
62679: LD_ADDR_VAR 0 6
62683: PUSH
62684: LD_VAR 0 2
62688: PUSH
62689: FOR_IN
62690: IFFALSE 62755
// begin weapons := AvailableWeaponList ( k ) ;
62692: LD_ADDR_VAR 0 9
62696: PUSH
62697: LD_VAR 0 6
62701: PPUSH
62702: CALL_OW 478
62706: ST_TO_ADDR
// if not weapons then
62707: LD_VAR 0 9
62711: NOT
62712: IFFALSE 62716
// continue ;
62714: GO 62689
// if weapon in weapons then
62716: LD_VAR 0 8
62720: PUSH
62721: LD_VAR 0 9
62725: IN
62726: IFFALSE 62753
// begin result := [ i , weapon ] ;
62728: LD_ADDR_VAR 0 3
62732: PUSH
62733: LD_VAR 0 4
62737: PUSH
62738: LD_VAR 0 8
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// exit ;
62747: POP
62748: POP
62749: POP
62750: POP
62751: GO 62761
// end ; end ;
62753: GO 62689
62755: POP
62756: POP
// end ;
62757: GO 62575
62759: POP
62760: POP
// end ;
62761: LD_VAR 0 3
62765: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62766: LD_INT 0
62768: PPUSH
// if not side or side > 8 then
62769: LD_VAR 0 3
62773: NOT
62774: IFTRUE 62786
62776: PUSH
62777: LD_VAR 0 3
62781: PUSH
62782: LD_INT 8
62784: GREATER
62785: OR
62786: IFFALSE 62790
// exit ;
62788: GO 62849
// if not range then
62790: LD_VAR 0 4
62794: NOT
62795: IFFALSE 62806
// range := - 12 ;
62797: LD_ADDR_VAR 0 4
62801: PUSH
62802: LD_INT 12
62804: NEG
62805: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62806: LD_VAR 0 1
62810: PPUSH
62811: LD_VAR 0 2
62815: PPUSH
62816: LD_VAR 0 3
62820: PPUSH
62821: LD_VAR 0 4
62825: PPUSH
62826: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62830: LD_VAR 0 1
62834: PPUSH
62835: LD_VAR 0 2
62839: PPUSH
62840: LD_VAR 0 3
62844: PPUSH
62845: CALL_OW 331
// end ;
62849: LD_VAR 0 5
62853: RET
// export function Video ( mode ) ; begin
62854: LD_INT 0
62856: PPUSH
// ingame_video = mode ;
62857: LD_ADDR_OWVAR 52
62861: PUSH
62862: LD_VAR 0 1
62866: ST_TO_ADDR
// interface_hidden = mode ;
62867: LD_ADDR_OWVAR 54
62871: PUSH
62872: LD_VAR 0 1
62876: ST_TO_ADDR
// end ;
62877: LD_VAR 0 2
62881: RET
// export function Join ( array , element ) ; begin
62882: LD_INT 0
62884: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62885: LD_ADDR_VAR 0 3
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: LD_VAR 0 1
62899: PUSH
62900: LD_INT 1
62902: PLUS
62903: PPUSH
62904: LD_VAR 0 2
62908: PPUSH
62909: CALL_OW 1
62913: ST_TO_ADDR
// end ;
62914: LD_VAR 0 3
62918: RET
// export function JoinUnion ( array , element ) ; begin
62919: LD_INT 0
62921: PPUSH
// result := array union element ;
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_VAR 0 1
62931: PUSH
62932: LD_VAR 0 2
62936: UNION
62937: ST_TO_ADDR
// end ;
62938: LD_VAR 0 3
62942: RET
// export function GetBehemoths ( side ) ; begin
62943: LD_INT 0
62945: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62946: LD_ADDR_VAR 0 2
62950: PUSH
62951: LD_INT 22
62953: PUSH
62954: LD_VAR 0 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 31
62965: PUSH
62966: LD_INT 25
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PPUSH
62977: CALL_OW 69
62981: ST_TO_ADDR
// end ;
62982: LD_VAR 0 2
62986: RET
// export function Shuffle ( array ) ; var i , index ; begin
62987: LD_INT 0
62989: PPUSH
62990: PPUSH
62991: PPUSH
// result := [ ] ;
62992: LD_ADDR_VAR 0 2
62996: PUSH
62997: EMPTY
62998: ST_TO_ADDR
// if not array then
62999: LD_VAR 0 1
63003: NOT
63004: IFFALSE 63008
// exit ;
63006: GO 63107
// Randomize ;
63008: CALL_OW 10
// for i = array downto 1 do
63012: LD_ADDR_VAR 0 3
63016: PUSH
63017: DOUBLE
63018: LD_VAR 0 1
63022: INC
63023: ST_TO_ADDR
63024: LD_INT 1
63026: PUSH
63027: FOR_DOWNTO
63028: IFFALSE 63105
// begin index := rand ( 1 , array ) ;
63030: LD_ADDR_VAR 0 4
63034: PUSH
63035: LD_INT 1
63037: PPUSH
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 12
63047: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63048: LD_ADDR_VAR 0 2
63052: PUSH
63053: LD_VAR 0 2
63057: PPUSH
63058: LD_VAR 0 2
63062: PUSH
63063: LD_INT 1
63065: PLUS
63066: PPUSH
63067: LD_VAR 0 1
63071: PUSH
63072: LD_VAR 0 4
63076: ARRAY
63077: PPUSH
63078: CALL_OW 2
63082: ST_TO_ADDR
// array := Delete ( array , index ) ;
63083: LD_ADDR_VAR 0 1
63087: PUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: LD_VAR 0 4
63097: PPUSH
63098: CALL_OW 3
63102: ST_TO_ADDR
// end ;
63103: GO 63027
63105: POP
63106: POP
// end ;
63107: LD_VAR 0 2
63111: RET
// export function GetBaseMaterials ( base ) ; begin
63112: LD_INT 0
63114: PPUSH
// result := [ 0 , 0 , 0 ] ;
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: ST_TO_ADDR
// if not base then
63134: LD_VAR 0 1
63138: NOT
63139: IFFALSE 63143
// exit ;
63141: GO 63192
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63143: LD_ADDR_VAR 0 2
63147: PUSH
63148: LD_VAR 0 1
63152: PPUSH
63153: LD_INT 1
63155: PPUSH
63156: CALL_OW 275
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: LD_INT 2
63168: PPUSH
63169: CALL_OW 275
63173: PUSH
63174: LD_VAR 0 1
63178: PPUSH
63179: LD_INT 3
63181: PPUSH
63182: CALL_OW 275
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: ST_TO_ADDR
// end ;
63192: LD_VAR 0 2
63196: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63197: LD_INT 0
63199: PPUSH
63200: PPUSH
// result := array ;
63201: LD_ADDR_VAR 0 3
63205: PUSH
63206: LD_VAR 0 1
63210: ST_TO_ADDR
// if size >= result then
63211: LD_VAR 0 2
63215: PUSH
63216: LD_VAR 0 3
63220: GREATEREQUAL
63221: IFFALSE 63225
// exit ;
63223: GO 63275
// if size then
63225: LD_VAR 0 2
63229: IFFALSE 63275
// for i := array downto size do
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: DOUBLE
63237: LD_VAR 0 1
63241: INC
63242: ST_TO_ADDR
63243: LD_VAR 0 2
63247: PUSH
63248: FOR_DOWNTO
63249: IFFALSE 63273
// result := Delete ( result , result ) ;
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 3
63265: PPUSH
63266: CALL_OW 3
63270: ST_TO_ADDR
63271: GO 63248
63273: POP
63274: POP
// end ;
63275: LD_VAR 0 3
63279: RET
// export function ComExit ( unit ) ; var tmp ; begin
63280: LD_INT 0
63282: PPUSH
63283: PPUSH
// if not IsInUnit ( unit ) then
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL_OW 310
63293: NOT
63294: IFFALSE 63298
// exit ;
63296: GO 63358
// tmp := IsInUnit ( unit ) ;
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_VAR 0 1
63307: PPUSH
63308: CALL_OW 310
63312: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63313: LD_VAR 0 3
63317: PPUSH
63318: CALL_OW 247
63322: PUSH
63323: LD_INT 2
63325: EQUAL
63326: IFFALSE 63339
// ComExitVehicle ( unit ) else
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL_OW 121
63337: GO 63348
// ComExitBuilding ( unit ) ;
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 122
// result := tmp ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 3
63357: ST_TO_ADDR
// end ;
63358: LD_VAR 0 2
63362: RET
// export function ComExitAll ( units ) ; var i ; begin
63363: LD_INT 0
63365: PPUSH
63366: PPUSH
// if not units then
63367: LD_VAR 0 1
63371: NOT
63372: IFFALSE 63376
// exit ;
63374: GO 63402
// for i in units do
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_VAR 0 1
63385: PUSH
63386: FOR_IN
63387: IFFALSE 63400
// ComExit ( i ) ;
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL 63280 0 1
63398: GO 63386
63400: POP
63401: POP
// end ;
63402: LD_VAR 0 2
63406: RET
// export function ResetHc ; begin
63407: LD_INT 0
63409: PPUSH
// InitHc ;
63410: CALL_OW 19
// hc_importance := 0 ;
63414: LD_ADDR_OWVAR 32
63418: PUSH
63419: LD_INT 0
63421: ST_TO_ADDR
// end ;
63422: LD_VAR 0 1
63426: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63432: LD_ADDR_VAR 0 6
63436: PUSH
63437: LD_VAR 0 1
63441: PUSH
63442: LD_VAR 0 3
63446: PLUS
63447: PUSH
63448: LD_INT 2
63450: DIV
63451: ST_TO_ADDR
// if _x < 0 then
63452: LD_VAR 0 6
63456: PUSH
63457: LD_INT 0
63459: LESS
63460: IFFALSE 63477
// _x := _x * - 1 ;
63462: LD_ADDR_VAR 0 6
63466: PUSH
63467: LD_VAR 0 6
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: MUL
63476: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63477: LD_ADDR_VAR 0 7
63481: PUSH
63482: LD_VAR 0 2
63486: PUSH
63487: LD_VAR 0 4
63491: PLUS
63492: PUSH
63493: LD_INT 2
63495: DIV
63496: ST_TO_ADDR
// if _y < 0 then
63497: LD_VAR 0 7
63501: PUSH
63502: LD_INT 0
63504: LESS
63505: IFFALSE 63522
// _y := _y * - 1 ;
63507: LD_ADDR_VAR 0 7
63511: PUSH
63512: LD_VAR 0 7
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: MUL
63521: ST_TO_ADDR
// result := [ _x , _y ] ;
63522: LD_ADDR_VAR 0 5
63526: PUSH
63527: LD_VAR 0 6
63531: PUSH
63532: LD_VAR 0 7
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: ST_TO_ADDR
// end ;
63541: LD_VAR 0 5
63545: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63546: LD_INT 0
63548: PPUSH
63549: PPUSH
63550: PPUSH
63551: PPUSH
// task := GetTaskList ( unit ) ;
63552: LD_ADDR_VAR 0 7
63556: PUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 437
63566: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63567: LD_VAR 0 7
63571: NOT
63572: IFFALSE 63591
63574: PUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: LD_VAR 0 2
63584: PPUSH
63585: CALL_OW 308
63589: NOT
63590: AND
63591: IFFALSE 63595
// exit ;
63593: GO 63713
// if IsInArea ( unit , area ) then
63595: LD_VAR 0 1
63599: PPUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: CALL_OW 308
63609: IFFALSE 63627
// begin ComMoveToArea ( unit , goAway ) ;
63611: LD_VAR 0 1
63615: PPUSH
63616: LD_VAR 0 3
63620: PPUSH
63621: CALL_OW 113
// exit ;
63625: GO 63713
// end ; if task [ 1 ] [ 1 ] <> M then
63627: LD_VAR 0 7
63631: PUSH
63632: LD_INT 1
63634: ARRAY
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PUSH
63640: LD_STRING M
63642: NONEQUAL
63643: IFFALSE 63647
// exit ;
63645: GO 63713
// x := task [ 1 ] [ 2 ] ;
63647: LD_ADDR_VAR 0 5
63651: PUSH
63652: LD_VAR 0 7
63656: PUSH
63657: LD_INT 1
63659: ARRAY
63660: PUSH
63661: LD_INT 2
63663: ARRAY
63664: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63665: LD_ADDR_VAR 0 6
63669: PUSH
63670: LD_VAR 0 7
63674: PUSH
63675: LD_INT 1
63677: ARRAY
63678: PUSH
63679: LD_INT 3
63681: ARRAY
63682: ST_TO_ADDR
// if InArea ( x , y , area ) then
63683: LD_VAR 0 5
63687: PPUSH
63688: LD_VAR 0 6
63692: PPUSH
63693: LD_VAR 0 2
63697: PPUSH
63698: CALL_OW 309
63702: IFFALSE 63713
// ComStop ( unit ) ;
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 141
// end ;
63713: LD_VAR 0 4
63717: RET
// export function Abs ( value ) ; begin
63718: LD_INT 0
63720: PPUSH
// result := value ;
63721: LD_ADDR_VAR 0 2
63725: PUSH
63726: LD_VAR 0 1
63730: ST_TO_ADDR
// if value < 0 then
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 0
63738: LESS
63739: IFFALSE 63756
// result := value * - 1 ;
63741: LD_ADDR_VAR 0 2
63745: PUSH
63746: LD_VAR 0 1
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: MUL
63755: ST_TO_ADDR
// end ;
63756: LD_VAR 0 2
63760: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63761: LD_INT 0
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
63768: PPUSH
63769: PPUSH
63770: PPUSH
// if not unit or not building then
63771: LD_VAR 0 1
63775: NOT
63776: IFTRUE 63785
63778: PUSH
63779: LD_VAR 0 2
63783: NOT
63784: OR
63785: IFFALSE 63789
// exit ;
63787: GO 64017
// x := GetX ( building ) ;
63789: LD_ADDR_VAR 0 4
63793: PUSH
63794: LD_VAR 0 2
63798: PPUSH
63799: CALL_OW 250
63803: ST_TO_ADDR
// y := GetY ( building ) ;
63804: LD_ADDR_VAR 0 6
63808: PUSH
63809: LD_VAR 0 2
63813: PPUSH
63814: CALL_OW 251
63818: ST_TO_ADDR
// d := GetDir ( building ) ;
63819: LD_ADDR_VAR 0 8
63823: PUSH
63824: LD_VAR 0 2
63828: PPUSH
63829: CALL_OW 254
63833: ST_TO_ADDR
// r := 4 ;
63834: LD_ADDR_VAR 0 9
63838: PUSH
63839: LD_INT 4
63841: ST_TO_ADDR
// for i := 1 to 5 do
63842: LD_ADDR_VAR 0 10
63846: PUSH
63847: DOUBLE
63848: LD_INT 1
63850: DEC
63851: ST_TO_ADDR
63852: LD_INT 5
63854: PUSH
63855: FOR_TO
63856: IFFALSE 64015
// begin _x := ShiftX ( x , d , r + i ) ;
63858: LD_ADDR_VAR 0 5
63862: PUSH
63863: LD_VAR 0 4
63867: PPUSH
63868: LD_VAR 0 8
63872: PPUSH
63873: LD_VAR 0 9
63877: PUSH
63878: LD_VAR 0 10
63882: PLUS
63883: PPUSH
63884: CALL_OW 272
63888: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63889: LD_ADDR_VAR 0 7
63893: PUSH
63894: LD_VAR 0 6
63898: PPUSH
63899: LD_VAR 0 8
63903: PPUSH
63904: LD_VAR 0 9
63908: PUSH
63909: LD_VAR 0 10
63913: PLUS
63914: PPUSH
63915: CALL_OW 273
63919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63920: LD_VAR 0 5
63924: PPUSH
63925: LD_VAR 0 7
63929: PPUSH
63930: CALL_OW 488
63934: IFFALSE 63969
63936: PUSH
63937: LD_VAR 0 5
63941: PPUSH
63942: LD_VAR 0 7
63946: PPUSH
63947: CALL_OW 428
63951: PPUSH
63952: CALL_OW 247
63956: PUSH
63957: LD_INT 3
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: IN
63967: NOT
63968: AND
63969: IFFALSE 64013
// begin ComMoveXY ( unit , _x , _y ) ;
63971: LD_VAR 0 1
63975: PPUSH
63976: LD_VAR 0 5
63980: PPUSH
63981: LD_VAR 0 7
63985: PPUSH
63986: CALL_OW 111
// result := [ _x , _y ] ;
63990: LD_ADDR_VAR 0 3
63994: PUSH
63995: LD_VAR 0 5
63999: PUSH
64000: LD_VAR 0 7
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: ST_TO_ADDR
// exit ;
64009: POP
64010: POP
64011: GO 64017
// end ; end ;
64013: GO 63855
64015: POP
64016: POP
// end ;
64017: LD_VAR 0 3
64021: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64022: LD_INT 0
64024: PPUSH
64025: PPUSH
64026: PPUSH
// result := 0 ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_INT 0
64034: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 0
64042: LESS
64043: IFTRUE 64055
64045: PUSH
64046: LD_VAR 0 1
64050: PUSH
64051: LD_INT 8
64053: GREATER
64054: OR
64055: IFTRUE 64067
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 0
64065: LESS
64066: OR
64067: IFTRUE 64079
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: LD_INT 8
64077: GREATER
64078: OR
64079: IFFALSE 64083
// exit ;
64081: GO 64158
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64083: LD_ADDR_VAR 0 4
64087: PUSH
64088: LD_INT 22
64090: PUSH
64091: LD_VAR 0 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PPUSH
64100: CALL_OW 69
64104: PUSH
64105: FOR_IN
64106: IFFALSE 64156
// begin un := UnitShoot ( i ) ;
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: LD_VAR 0 4
64117: PPUSH
64118: CALL_OW 504
64122: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64123: LD_VAR 0 5
64127: PPUSH
64128: CALL_OW 255
64132: PUSH
64133: LD_VAR 0 1
64137: EQUAL
64138: IFFALSE 64154
// begin result := un ;
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_VAR 0 5
64149: ST_TO_ADDR
// exit ;
64150: POP
64151: POP
64152: GO 64158
// end ; end ;
64154: GO 64105
64156: POP
64157: POP
// end ;
64158: LD_VAR 0 3
64162: RET
// export function GetCargoBay ( units ) ; begin
64163: LD_INT 0
64165: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64166: LD_ADDR_VAR 0 2
64170: PUSH
64171: LD_VAR 0 1
64175: PPUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 34
64181: PUSH
64182: LD_INT 12
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 34
64191: PUSH
64192: LD_INT 51
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 34
64201: PUSH
64202: LD_INT 32
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 34
64211: PUSH
64212: LD_INT 89
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: PPUSH
64226: CALL_OW 72
64230: ST_TO_ADDR
// end ;
64231: LD_VAR 0 2
64235: RET
// export function Negate ( value ) ; begin
64236: LD_INT 0
64238: PPUSH
// result := not value ;
64239: LD_ADDR_VAR 0 2
64243: PUSH
64244: LD_VAR 0 1
64248: NOT
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 2
64254: RET
// export function Inc ( value ) ; begin
64255: LD_INT 0
64257: PPUSH
// result := value + 1 ;
64258: LD_ADDR_VAR 0 2
64262: PUSH
64263: LD_VAR 0 1
64267: PUSH
64268: LD_INT 1
64270: PLUS
64271: ST_TO_ADDR
// end ;
64272: LD_VAR 0 2
64276: RET
// export function Dec ( value ) ; begin
64277: LD_INT 0
64279: PPUSH
// result := value - 1 ;
64280: LD_ADDR_VAR 0 2
64284: PUSH
64285: LD_VAR 0 1
64289: PUSH
64290: LD_INT 1
64292: MINUS
64293: ST_TO_ADDR
// end ;
64294: LD_VAR 0 2
64298: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64299: LD_INT 0
64301: PPUSH
64302: PPUSH
64303: PPUSH
64304: PPUSH
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64309: LD_VAR 0 1
64313: PPUSH
64314: LD_VAR 0 2
64318: PPUSH
64319: CALL_OW 488
64323: NOT
64324: IFTRUE 64343
64326: PUSH
64327: LD_VAR 0 3
64331: PPUSH
64332: LD_VAR 0 4
64336: PPUSH
64337: CALL_OW 488
64341: NOT
64342: OR
64343: IFFALSE 64356
// begin result := - 1 ;
64345: LD_ADDR_VAR 0 5
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: ST_TO_ADDR
// exit ;
64354: GO 64591
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64356: LD_ADDR_VAR 0 12
64360: PUSH
64361: LD_VAR 0 1
64365: PPUSH
64366: LD_VAR 0 2
64370: PPUSH
64371: LD_VAR 0 3
64375: PPUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: CALL 63427 0 4
64385: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64386: LD_ADDR_VAR 0 11
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_VAR 0 2
64400: PPUSH
64401: LD_VAR 0 12
64405: PUSH
64406: LD_INT 1
64408: ARRAY
64409: PPUSH
64410: LD_VAR 0 12
64414: PUSH
64415: LD_INT 2
64417: ARRAY
64418: PPUSH
64419: CALL_OW 298
64423: ST_TO_ADDR
// distance := 9999 ;
64424: LD_ADDR_VAR 0 10
64428: PUSH
64429: LD_INT 9999
64431: ST_TO_ADDR
// for i := 0 to 5 do
64432: LD_ADDR_VAR 0 6
64436: PUSH
64437: DOUBLE
64438: LD_INT 0
64440: DEC
64441: ST_TO_ADDR
64442: LD_INT 5
64444: PUSH
64445: FOR_TO
64446: IFFALSE 64589
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64448: LD_ADDR_VAR 0 7
64452: PUSH
64453: LD_VAR 0 1
64457: PPUSH
64458: LD_VAR 0 6
64462: PPUSH
64463: LD_VAR 0 11
64467: PPUSH
64468: CALL_OW 272
64472: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64473: LD_ADDR_VAR 0 8
64477: PUSH
64478: LD_VAR 0 2
64482: PPUSH
64483: LD_VAR 0 6
64487: PPUSH
64488: LD_VAR 0 11
64492: PPUSH
64493: CALL_OW 273
64497: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64498: LD_VAR 0 7
64502: PPUSH
64503: LD_VAR 0 8
64507: PPUSH
64508: CALL_OW 488
64512: NOT
64513: IFFALSE 64517
// continue ;
64515: GO 64445
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64517: LD_ADDR_VAR 0 9
64521: PUSH
64522: LD_VAR 0 12
64526: PUSH
64527: LD_INT 1
64529: ARRAY
64530: PPUSH
64531: LD_VAR 0 12
64535: PUSH
64536: LD_INT 2
64538: ARRAY
64539: PPUSH
64540: LD_VAR 0 7
64544: PPUSH
64545: LD_VAR 0 8
64549: PPUSH
64550: CALL_OW 298
64554: ST_TO_ADDR
// if tmp < distance then
64555: LD_VAR 0 9
64559: PUSH
64560: LD_VAR 0 10
64564: LESS
64565: IFFALSE 64587
// begin result := i ;
64567: LD_ADDR_VAR 0 5
64571: PUSH
64572: LD_VAR 0 6
64576: ST_TO_ADDR
// distance := tmp ;
64577: LD_ADDR_VAR 0 10
64581: PUSH
64582: LD_VAR 0 9
64586: ST_TO_ADDR
// end ; end ;
64587: GO 64445
64589: POP
64590: POP
// end ;
64591: LD_VAR 0 5
64595: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64596: LD_INT 0
64598: PPUSH
64599: PPUSH
// if not driver or not IsInUnit ( driver ) then
64600: LD_VAR 0 1
64604: NOT
64605: IFTRUE 64619
64607: PUSH
64608: LD_VAR 0 1
64612: PPUSH
64613: CALL_OW 310
64617: NOT
64618: OR
64619: IFFALSE 64623
// exit ;
64621: GO 64713
// vehicle := IsInUnit ( driver ) ;
64623: LD_ADDR_VAR 0 3
64627: PUSH
64628: LD_VAR 0 1
64632: PPUSH
64633: CALL_OW 310
64637: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64638: LD_VAR 0 1
64642: PPUSH
64643: LD_STRING \
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: PUSH
64673: LD_STRING E
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_VAR 0 3
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PPUSH
64709: CALL_OW 446
// end ;
64713: LD_VAR 0 2
64717: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64718: LD_INT 0
64720: PPUSH
64721: PPUSH
// if not driver or not IsInUnit ( driver ) then
64722: LD_VAR 0 1
64726: NOT
64727: IFTRUE 64741
64729: PUSH
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 310
64739: NOT
64740: OR
64741: IFFALSE 64745
// exit ;
64743: GO 64835
// vehicle := IsInUnit ( driver ) ;
64745: LD_ADDR_VAR 0 3
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 310
64759: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64760: LD_VAR 0 1
64764: PPUSH
64765: LD_STRING \
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: PUSH
64795: LD_STRING E
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_VAR 0 3
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PPUSH
64831: CALL_OW 447
// end ;
64835: LD_VAR 0 2
64839: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64840: LD_INT 0
64842: PPUSH
64843: PPUSH
64844: PPUSH
// tmp := [ ] ;
64845: LD_ADDR_VAR 0 5
64849: PUSH
64850: EMPTY
64851: ST_TO_ADDR
// for i in units do
64852: LD_ADDR_VAR 0 4
64856: PUSH
64857: LD_VAR 0 1
64861: PUSH
64862: FOR_IN
64863: IFFALSE 64901
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64865: LD_ADDR_VAR 0 5
64869: PUSH
64870: LD_VAR 0 5
64874: PPUSH
64875: LD_VAR 0 5
64879: PUSH
64880: LD_INT 1
64882: PLUS
64883: PPUSH
64884: LD_VAR 0 4
64888: PPUSH
64889: CALL_OW 256
64893: PPUSH
64894: CALL_OW 2
64898: ST_TO_ADDR
64899: GO 64862
64901: POP
64902: POP
// if not tmp then
64903: LD_VAR 0 5
64907: NOT
64908: IFFALSE 64912
// exit ;
64910: GO 64960
// if asc then
64912: LD_VAR 0 2
64916: IFFALSE 64940
// result := SortListByListAsc ( units , tmp ) else
64918: LD_ADDR_VAR 0 3
64922: PUSH
64923: LD_VAR 0 1
64927: PPUSH
64928: LD_VAR 0 5
64932: PPUSH
64933: CALL_OW 76
64937: ST_TO_ADDR
64938: GO 64960
// result := SortListByListDesc ( units , tmp ) ;
64940: LD_ADDR_VAR 0 3
64944: PUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: LD_VAR 0 5
64954: PPUSH
64955: CALL_OW 77
64959: ST_TO_ADDR
// end ;
64960: LD_VAR 0 3
64964: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64965: LD_INT 0
64967: PPUSH
64968: PPUSH
// task := GetTaskList ( mech ) ;
64969: LD_ADDR_VAR 0 4
64973: PUSH
64974: LD_VAR 0 1
64978: PPUSH
64979: CALL_OW 437
64983: ST_TO_ADDR
// if not task then
64984: LD_VAR 0 4
64988: NOT
64989: IFFALSE 64993
// exit ;
64991: GO 65037
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64993: LD_ADDR_VAR 0 3
64997: PUSH
64998: LD_VAR 0 4
65002: PUSH
65003: LD_INT 1
65005: ARRAY
65006: PUSH
65007: LD_INT 1
65009: ARRAY
65010: PUSH
65011: LD_STRING r
65013: EQUAL
65014: IFFALSE 65036
65016: PUSH
65017: LD_VAR 0 4
65021: PUSH
65022: LD_INT 1
65024: ARRAY
65025: PUSH
65026: LD_INT 4
65028: ARRAY
65029: PUSH
65030: LD_VAR 0 2
65034: EQUAL
65035: AND
65036: ST_TO_ADDR
// end ;
65037: LD_VAR 0 3
65041: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65042: LD_INT 0
65044: PPUSH
// SetDir ( unit , d ) ;
65045: LD_VAR 0 1
65049: PPUSH
65050: LD_VAR 0 4
65054: PPUSH
65055: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
65059: LD_ADDR_VAR 0 6
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: LD_VAR 0 2
65073: PPUSH
65074: LD_VAR 0 3
65078: PPUSH
65079: LD_VAR 0 5
65083: PPUSH
65084: CALL_OW 48
65088: ST_TO_ADDR
// end ;
65089: LD_VAR 0 6
65093: RET
// export function ToNaturalNumber ( number ) ; begin
65094: LD_INT 0
65096: PPUSH
// result := number div 1 ;
65097: LD_ADDR_VAR 0 2
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: LD_INT 1
65109: DIV
65110: ST_TO_ADDR
// if number < 0 then
65111: LD_VAR 0 1
65115: PUSH
65116: LD_INT 0
65118: LESS
65119: IFFALSE 65129
// result := 0 ;
65121: LD_ADDR_VAR 0 2
65125: PUSH
65126: LD_INT 0
65128: ST_TO_ADDR
// end ;
65129: LD_VAR 0 2
65133: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
65138: PPUSH
// if not buildings then
65139: LD_VAR 0 1
65143: NOT
65144: IFFALSE 65148
// exit ;
65146: GO 65263
// tmp := [ ] ;
65148: LD_ADDR_VAR 0 5
65152: PUSH
65153: EMPTY
65154: ST_TO_ADDR
// for b in buildings do
65155: LD_ADDR_VAR 0 4
65159: PUSH
65160: LD_VAR 0 1
65164: PUSH
65165: FOR_IN
65166: IFFALSE 65204
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
65168: LD_ADDR_VAR 0 5
65172: PUSH
65173: LD_VAR 0 5
65177: PPUSH
65178: LD_VAR 0 5
65182: PUSH
65183: LD_INT 1
65185: PLUS
65186: PPUSH
65187: LD_VAR 0 4
65191: PPUSH
65192: CALL_OW 266
65196: PPUSH
65197: CALL_OW 1
65201: ST_TO_ADDR
65202: GO 65165
65204: POP
65205: POP
// if not tmp then
65206: LD_VAR 0 5
65210: NOT
65211: IFFALSE 65215
// exit ;
65213: GO 65263
// if asc then
65215: LD_VAR 0 2
65219: IFFALSE 65243
// result := SortListByListAsc ( buildings , tmp ) else
65221: LD_ADDR_VAR 0 3
65225: PUSH
65226: LD_VAR 0 1
65230: PPUSH
65231: LD_VAR 0 5
65235: PPUSH
65236: CALL_OW 76
65240: ST_TO_ADDR
65241: GO 65263
// result := SortListByListDesc ( buildings , tmp ) ;
65243: LD_ADDR_VAR 0 3
65247: PUSH
65248: LD_VAR 0 1
65252: PPUSH
65253: LD_VAR 0 5
65257: PPUSH
65258: CALL_OW 77
65262: ST_TO_ADDR
// end ;
65263: LD_VAR 0 3
65267: RET
// export function SortByClass ( units , class ) ; var un ; begin
65268: LD_INT 0
65270: PPUSH
65271: PPUSH
// if not units or not class then
65272: LD_VAR 0 1
65276: NOT
65277: IFTRUE 65286
65279: PUSH
65280: LD_VAR 0 2
65284: NOT
65285: OR
65286: IFFALSE 65290
// exit ;
65288: GO 65385
// result := [ ] ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: EMPTY
65296: ST_TO_ADDR
// for un in units do
65297: LD_ADDR_VAR 0 4
65301: PUSH
65302: LD_VAR 0 1
65306: PUSH
65307: FOR_IN
65308: IFFALSE 65383
// if GetClass ( un ) = class then
65310: LD_VAR 0 4
65314: PPUSH
65315: CALL_OW 257
65319: PUSH
65320: LD_VAR 0 2
65324: EQUAL
65325: IFFALSE 65352
// result := Insert ( result , 1 , un ) else
65327: LD_ADDR_VAR 0 3
65331: PUSH
65332: LD_VAR 0 3
65336: PPUSH
65337: LD_INT 1
65339: PPUSH
65340: LD_VAR 0 4
65344: PPUSH
65345: CALL_OW 2
65349: ST_TO_ADDR
65350: GO 65381
// result := Replace ( result , result + 1 , un ) ;
65352: LD_ADDR_VAR 0 3
65356: PUSH
65357: LD_VAR 0 3
65361: PPUSH
65362: LD_VAR 0 3
65366: PUSH
65367: LD_INT 1
65369: PLUS
65370: PPUSH
65371: LD_VAR 0 4
65375: PPUSH
65376: CALL_OW 1
65380: ST_TO_ADDR
65381: GO 65307
65383: POP
65384: POP
// end ;
65385: LD_VAR 0 3
65389: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
65395: PPUSH
65396: PPUSH
65397: PPUSH
65398: PPUSH
// result := [ ] ;
65399: LD_ADDR_VAR 0 4
65403: PUSH
65404: EMPTY
65405: ST_TO_ADDR
// if x - r < 0 then
65406: LD_VAR 0 1
65410: PUSH
65411: LD_VAR 0 3
65415: MINUS
65416: PUSH
65417: LD_INT 0
65419: LESS
65420: IFFALSE 65432
// min_x := 0 else
65422: LD_ADDR_VAR 0 8
65426: PUSH
65427: LD_INT 0
65429: ST_TO_ADDR
65430: GO 65448
// min_x := x - r ;
65432: LD_ADDR_VAR 0 8
65436: PUSH
65437: LD_VAR 0 1
65441: PUSH
65442: LD_VAR 0 3
65446: MINUS
65447: ST_TO_ADDR
// if y - r < 0 then
65448: LD_VAR 0 2
65452: PUSH
65453: LD_VAR 0 3
65457: MINUS
65458: PUSH
65459: LD_INT 0
65461: LESS
65462: IFFALSE 65474
// min_y := 0 else
65464: LD_ADDR_VAR 0 7
65468: PUSH
65469: LD_INT 0
65471: ST_TO_ADDR
65472: GO 65490
// min_y := y - r ;
65474: LD_ADDR_VAR 0 7
65478: PUSH
65479: LD_VAR 0 2
65483: PUSH
65484: LD_VAR 0 3
65488: MINUS
65489: ST_TO_ADDR
// max_x := x + r ;
65490: LD_ADDR_VAR 0 9
65494: PUSH
65495: LD_VAR 0 1
65499: PUSH
65500: LD_VAR 0 3
65504: PLUS
65505: ST_TO_ADDR
// max_y := y + r ;
65506: LD_ADDR_VAR 0 10
65510: PUSH
65511: LD_VAR 0 2
65515: PUSH
65516: LD_VAR 0 3
65520: PLUS
65521: ST_TO_ADDR
// for _x = min_x to max_x do
65522: LD_ADDR_VAR 0 5
65526: PUSH
65527: DOUBLE
65528: LD_VAR 0 8
65532: DEC
65533: ST_TO_ADDR
65534: LD_VAR 0 9
65538: PUSH
65539: FOR_TO
65540: IFFALSE 65641
// for _y = min_y to max_y do
65542: LD_ADDR_VAR 0 6
65546: PUSH
65547: DOUBLE
65548: LD_VAR 0 7
65552: DEC
65553: ST_TO_ADDR
65554: LD_VAR 0 10
65558: PUSH
65559: FOR_TO
65560: IFFALSE 65637
// begin if not ValidHex ( _x , _y ) then
65562: LD_VAR 0 5
65566: PPUSH
65567: LD_VAR 0 6
65571: PPUSH
65572: CALL_OW 488
65576: NOT
65577: IFFALSE 65581
// continue ;
65579: GO 65559
// if GetResourceTypeXY ( _x , _y ) then
65581: LD_VAR 0 5
65585: PPUSH
65586: LD_VAR 0 6
65590: PPUSH
65591: CALL_OW 283
65595: IFFALSE 65635
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65597: LD_ADDR_VAR 0 4
65601: PUSH
65602: LD_VAR 0 4
65606: PPUSH
65607: LD_VAR 0 4
65611: PUSH
65612: LD_INT 1
65614: PLUS
65615: PPUSH
65616: LD_VAR 0 5
65620: PUSH
65621: LD_VAR 0 6
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PPUSH
65630: CALL_OW 1
65634: ST_TO_ADDR
// end ;
65635: GO 65559
65637: POP
65638: POP
65639: GO 65539
65641: POP
65642: POP
// end ;
65643: LD_VAR 0 4
65647: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65648: LD_INT 0
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
65657: PPUSH
// if not units then
65658: LD_VAR 0 1
65662: NOT
65663: IFFALSE 65667
// exit ;
65665: GO 66199
// result := UnitFilter ( units , [ f_ok ] ) ;
65667: LD_ADDR_VAR 0 3
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: LD_INT 50
65679: PUSH
65680: EMPTY
65681: LIST
65682: PPUSH
65683: CALL_OW 72
65687: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65688: LD_ADDR_VAR 0 8
65692: PUSH
65693: LD_VAR 0 1
65697: PUSH
65698: LD_INT 1
65700: ARRAY
65701: PPUSH
65702: CALL_OW 255
65706: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65707: LD_ADDR_VAR 0 10
65711: PUSH
65712: LD_INT 29
65714: PUSH
65715: LD_INT 91
65717: PUSH
65718: LD_INT 49
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: ST_TO_ADDR
// if not result then
65726: LD_VAR 0 3
65730: NOT
65731: IFFALSE 65735
// exit ;
65733: GO 66199
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65735: LD_ADDR_VAR 0 5
65739: PUSH
65740: LD_INT 81
65742: PUSH
65743: LD_VAR 0 8
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PPUSH
65752: CALL_OW 69
65756: ST_TO_ADDR
// for i in result do
65757: LD_ADDR_VAR 0 4
65761: PUSH
65762: LD_VAR 0 3
65766: PUSH
65767: FOR_IN
65768: IFFALSE 66197
// begin tag := GetTag ( i ) + 1 ;
65770: LD_ADDR_VAR 0 9
65774: PUSH
65775: LD_VAR 0 4
65779: PPUSH
65780: CALL_OW 110
65784: PUSH
65785: LD_INT 1
65787: PLUS
65788: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65789: LD_ADDR_VAR 0 7
65793: PUSH
65794: LD_VAR 0 4
65798: PPUSH
65799: CALL_OW 250
65803: PPUSH
65804: LD_VAR 0 4
65808: PPUSH
65809: CALL_OW 251
65813: PPUSH
65814: LD_INT 4
65816: PPUSH
65817: CALL 65390 0 3
65821: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65822: LD_VAR 0 4
65826: PPUSH
65827: CALL_OW 247
65831: PUSH
65832: LD_INT 2
65834: EQUAL
65835: IFFALSE 65847
65837: PUSH
65838: LD_VAR 0 7
65842: PUSH
65843: LD_INT 2
65845: GREATER
65846: AND
65847: IFFALSE 65867
65849: PUSH
65850: LD_VAR 0 4
65854: PPUSH
65855: CALL_OW 264
65859: PUSH
65860: LD_VAR 0 10
65864: IN
65865: NOT
65866: AND
65867: IFFALSE 65906
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65869: LD_VAR 0 4
65873: PPUSH
65874: LD_VAR 0 7
65878: PUSH
65879: LD_INT 1
65881: ARRAY
65882: PUSH
65883: LD_INT 1
65885: ARRAY
65886: PPUSH
65887: LD_VAR 0 7
65891: PUSH
65892: LD_INT 1
65894: ARRAY
65895: PUSH
65896: LD_INT 2
65898: ARRAY
65899: PPUSH
65900: CALL_OW 116
65904: GO 66195
// if path > tag then
65906: LD_VAR 0 2
65910: PUSH
65911: LD_VAR 0 9
65915: GREATER
65916: IFFALSE 66124
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65918: LD_ADDR_VAR 0 6
65922: PUSH
65923: LD_VAR 0 5
65927: PPUSH
65928: LD_INT 91
65930: PUSH
65931: LD_VAR 0 4
65935: PUSH
65936: LD_INT 8
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: PPUSH
65944: CALL_OW 72
65948: ST_TO_ADDR
// if nearEnemy then
65949: LD_VAR 0 6
65953: IFFALSE 66022
// begin if GetWeapon ( i ) = ru_time_lapser then
65955: LD_VAR 0 4
65959: PPUSH
65960: CALL_OW 264
65964: PUSH
65965: LD_INT 49
65967: EQUAL
65968: IFFALSE 65996
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65970: LD_VAR 0 4
65974: PPUSH
65975: LD_VAR 0 6
65979: PPUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: CALL_OW 74
65989: PPUSH
65990: CALL_OW 112
65994: GO 66020
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65996: LD_VAR 0 4
66000: PPUSH
66001: LD_VAR 0 6
66005: PPUSH
66006: LD_VAR 0 4
66010: PPUSH
66011: CALL_OW 74
66015: PPUSH
66016: CALL 67280 0 2
// end else
66020: GO 66122
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66022: LD_VAR 0 4
66026: PPUSH
66027: LD_VAR 0 2
66031: PUSH
66032: LD_VAR 0 9
66036: ARRAY
66037: PUSH
66038: LD_INT 1
66040: ARRAY
66041: PPUSH
66042: LD_VAR 0 2
66046: PUSH
66047: LD_VAR 0 9
66051: ARRAY
66052: PUSH
66053: LD_INT 2
66055: ARRAY
66056: PPUSH
66057: CALL_OW 297
66061: PUSH
66062: LD_INT 6
66064: GREATER
66065: IFFALSE 66108
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66067: LD_VAR 0 4
66071: PPUSH
66072: LD_VAR 0 2
66076: PUSH
66077: LD_VAR 0 9
66081: ARRAY
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: LD_VAR 0 2
66091: PUSH
66092: LD_VAR 0 9
66096: ARRAY
66097: PUSH
66098: LD_INT 2
66100: ARRAY
66101: PPUSH
66102: CALL_OW 114
66106: GO 66122
// SetTag ( i , tag ) ;
66108: LD_VAR 0 4
66112: PPUSH
66113: LD_VAR 0 9
66117: PPUSH
66118: CALL_OW 109
// end else
66122: GO 66195
// if enemy then
66124: LD_VAR 0 5
66128: IFFALSE 66195
// begin if GetWeapon ( i ) = ru_time_lapser then
66130: LD_VAR 0 4
66134: PPUSH
66135: CALL_OW 264
66139: PUSH
66140: LD_INT 49
66142: EQUAL
66143: IFFALSE 66171
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66145: LD_VAR 0 4
66149: PPUSH
66150: LD_VAR 0 5
66154: PPUSH
66155: LD_VAR 0 4
66159: PPUSH
66160: CALL_OW 74
66164: PPUSH
66165: CALL_OW 112
66169: GO 66195
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66171: LD_VAR 0 4
66175: PPUSH
66176: LD_VAR 0 5
66180: PPUSH
66181: LD_VAR 0 4
66185: PPUSH
66186: CALL_OW 74
66190: PPUSH
66191: CALL 67280 0 2
// end ; end ;
66195: GO 65767
66197: POP
66198: POP
// end ;
66199: LD_VAR 0 3
66203: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66204: LD_INT 0
66206: PPUSH
66207: PPUSH
66208: PPUSH
// if not unit or IsInUnit ( unit ) then
66209: LD_VAR 0 1
66213: NOT
66214: IFTRUE 66227
66216: PUSH
66217: LD_VAR 0 1
66221: PPUSH
66222: CALL_OW 310
66226: OR
66227: IFFALSE 66231
// exit ;
66229: GO 66322
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66231: LD_ADDR_VAR 0 4
66235: PUSH
66236: LD_VAR 0 1
66240: PPUSH
66241: CALL_OW 250
66245: PPUSH
66246: LD_VAR 0 2
66250: PPUSH
66251: LD_INT 1
66253: PPUSH
66254: CALL_OW 272
66258: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66259: LD_ADDR_VAR 0 5
66263: PUSH
66264: LD_VAR 0 1
66268: PPUSH
66269: CALL_OW 251
66273: PPUSH
66274: LD_VAR 0 2
66278: PPUSH
66279: LD_INT 1
66281: PPUSH
66282: CALL_OW 273
66286: ST_TO_ADDR
// if ValidHex ( x , y ) then
66287: LD_VAR 0 4
66291: PPUSH
66292: LD_VAR 0 5
66296: PPUSH
66297: CALL_OW 488
66301: IFFALSE 66322
// ComTurnXY ( unit , x , y ) ;
66303: LD_VAR 0 1
66307: PPUSH
66308: LD_VAR 0 4
66312: PPUSH
66313: LD_VAR 0 5
66317: PPUSH
66318: CALL_OW 118
// end ;
66322: LD_VAR 0 3
66326: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66327: LD_INT 0
66329: PPUSH
66330: PPUSH
// result := false ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_INT 0
66338: ST_TO_ADDR
// if not units then
66339: LD_VAR 0 2
66343: NOT
66344: IFFALSE 66348
// exit ;
66346: GO 66393
// for i in units do
66348: LD_ADDR_VAR 0 4
66352: PUSH
66353: LD_VAR 0 2
66357: PUSH
66358: FOR_IN
66359: IFFALSE 66391
// if See ( side , i ) then
66361: LD_VAR 0 1
66365: PPUSH
66366: LD_VAR 0 4
66370: PPUSH
66371: CALL_OW 292
66375: IFFALSE 66389
// begin result := true ;
66377: LD_ADDR_VAR 0 3
66381: PUSH
66382: LD_INT 1
66384: ST_TO_ADDR
// exit ;
66385: POP
66386: POP
66387: GO 66393
// end ;
66389: GO 66358
66391: POP
66392: POP
// end ;
66393: LD_VAR 0 3
66397: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66398: LD_INT 0
66400: PPUSH
66401: PPUSH
66402: PPUSH
66403: PPUSH
// if not unit or not points then
66404: LD_VAR 0 1
66408: NOT
66409: IFTRUE 66418
66411: PUSH
66412: LD_VAR 0 2
66416: NOT
66417: OR
66418: IFFALSE 66422
// exit ;
66420: GO 66512
// dist := 99999 ;
66422: LD_ADDR_VAR 0 5
66426: PUSH
66427: LD_INT 99999
66429: ST_TO_ADDR
// for i in points do
66430: LD_ADDR_VAR 0 4
66434: PUSH
66435: LD_VAR 0 2
66439: PUSH
66440: FOR_IN
66441: IFFALSE 66510
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66443: LD_ADDR_VAR 0 6
66447: PUSH
66448: LD_VAR 0 1
66452: PPUSH
66453: LD_VAR 0 4
66457: PUSH
66458: LD_INT 1
66460: ARRAY
66461: PPUSH
66462: LD_VAR 0 4
66466: PUSH
66467: LD_INT 2
66469: ARRAY
66470: PPUSH
66471: CALL_OW 297
66475: ST_TO_ADDR
// if tmpDist < dist then
66476: LD_VAR 0 6
66480: PUSH
66481: LD_VAR 0 5
66485: LESS
66486: IFFALSE 66508
// begin result := i ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_VAR 0 4
66497: ST_TO_ADDR
// dist := tmpDist ;
66498: LD_ADDR_VAR 0 5
66502: PUSH
66503: LD_VAR 0 6
66507: ST_TO_ADDR
// end ; end ;
66508: GO 66440
66510: POP
66511: POP
// end ;
66512: LD_VAR 0 3
66516: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66517: LD_INT 0
66519: PPUSH
// uc_side := side ;
66520: LD_ADDR_OWVAR 20
66524: PUSH
66525: LD_VAR 0 1
66529: ST_TO_ADDR
// uc_nation := 3 ;
66530: LD_ADDR_OWVAR 21
66534: PUSH
66535: LD_INT 3
66537: ST_TO_ADDR
// vc_chassis := 25 ;
66538: LD_ADDR_OWVAR 37
66542: PUSH
66543: LD_INT 25
66545: ST_TO_ADDR
// vc_engine := engine_siberite ;
66546: LD_ADDR_OWVAR 39
66550: PUSH
66551: LD_INT 3
66553: ST_TO_ADDR
// vc_control := control_computer ;
66554: LD_ADDR_OWVAR 38
66558: PUSH
66559: LD_INT 3
66561: ST_TO_ADDR
// vc_weapon := 59 ;
66562: LD_ADDR_OWVAR 40
66566: PUSH
66567: LD_INT 59
66569: ST_TO_ADDR
// result := CreateVehicle ;
66570: LD_ADDR_VAR 0 5
66574: PUSH
66575: CALL_OW 45
66579: ST_TO_ADDR
// SetDir ( result , d ) ;
66580: LD_VAR 0 5
66584: PPUSH
66585: LD_VAR 0 4
66589: PPUSH
66590: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66594: LD_VAR 0 5
66598: PPUSH
66599: LD_VAR 0 2
66603: PPUSH
66604: LD_VAR 0 3
66608: PPUSH
66609: LD_INT 0
66611: PPUSH
66612: CALL_OW 48
// end ;
66616: LD_VAR 0 5
66620: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66621: LD_INT 0
66623: PPUSH
66624: PPUSH
66625: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66626: LD_ADDR_VAR 0 2
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66649: LD_VAR 0 1
66653: NOT
66654: IFTRUE 66687
66656: PUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 264
66666: PUSH
66667: LD_INT 12
66669: PUSH
66670: LD_INT 51
66672: PUSH
66673: LD_INT 32
66675: PUSH
66676: LD_INT 89
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: IN
66685: NOT
66686: OR
66687: IFFALSE 66691
// exit ;
66689: GO 66789
// for i := 1 to 3 do
66691: LD_ADDR_VAR 0 3
66695: PUSH
66696: DOUBLE
66697: LD_INT 1
66699: DEC
66700: ST_TO_ADDR
66701: LD_INT 3
66703: PUSH
66704: FOR_TO
66705: IFFALSE 66787
// begin tmp := GetCargo ( cargo , i ) ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: LD_VAR 0 3
66721: PPUSH
66722: CALL_OW 289
66726: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66727: LD_ADDR_VAR 0 2
66731: PUSH
66732: LD_VAR 0 2
66736: PPUSH
66737: LD_VAR 0 3
66741: PPUSH
66742: LD_VAR 0 4
66746: PPUSH
66747: CALL_OW 1
66751: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: LD_VAR 0 2
66761: PPUSH
66762: LD_INT 4
66764: PPUSH
66765: LD_VAR 0 2
66769: PUSH
66770: LD_INT 4
66772: ARRAY
66773: PUSH
66774: LD_VAR 0 4
66778: PLUS
66779: PPUSH
66780: CALL_OW 1
66784: ST_TO_ADDR
// end ;
66785: GO 66704
66787: POP
66788: POP
// end ;
66789: LD_VAR 0 2
66793: RET
// export function Length ( array ) ; begin
66794: LD_INT 0
66796: PPUSH
// result := array + 0 ;
66797: LD_ADDR_VAR 0 2
66801: PUSH
66802: LD_VAR 0 1
66806: PUSH
66807: LD_INT 0
66809: PLUS
66810: ST_TO_ADDR
// end ;
66811: LD_VAR 0 2
66815: RET
// export function PrepareArray ( array ) ; begin
66816: LD_INT 0
66818: PPUSH
// result := array diff 0 ;
66819: LD_ADDR_VAR 0 2
66823: PUSH
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 0
66831: DIFF
66832: ST_TO_ADDR
// if not result [ 1 ] then
66833: LD_VAR 0 2
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: NOT
66842: IFFALSE 66862
// result := Delete ( result , 1 ) ;
66844: LD_ADDR_VAR 0 2
66848: PUSH
66849: LD_VAR 0 2
66853: PPUSH
66854: LD_INT 1
66856: PPUSH
66857: CALL_OW 3
66861: ST_TO_ADDR
// end ;
66862: LD_VAR 0 2
66866: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66867: LD_INT 0
66869: PPUSH
66870: PPUSH
66871: PPUSH
66872: PPUSH
// sibRocketRange := 25 ;
66873: LD_ADDR_VAR 0 6
66877: PUSH
66878: LD_INT 25
66880: ST_TO_ADDR
// result := false ;
66881: LD_ADDR_VAR 0 4
66885: PUSH
66886: LD_INT 0
66888: ST_TO_ADDR
// for i := 0 to 5 do
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: DOUBLE
66895: LD_INT 0
66897: DEC
66898: ST_TO_ADDR
66899: LD_INT 5
66901: PUSH
66902: FOR_TO
66903: IFFALSE 66970
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66905: LD_VAR 0 1
66909: PPUSH
66910: LD_VAR 0 5
66914: PPUSH
66915: LD_VAR 0 6
66919: PPUSH
66920: CALL_OW 272
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: LD_VAR 0 6
66939: PPUSH
66940: CALL_OW 273
66944: PPUSH
66945: LD_VAR 0 3
66949: PPUSH
66950: CALL_OW 309
66954: IFFALSE 66968
// begin result := true ;
66956: LD_ADDR_VAR 0 4
66960: PUSH
66961: LD_INT 1
66963: ST_TO_ADDR
// exit ;
66964: POP
66965: POP
66966: GO 66972
// end ;
66968: GO 66902
66970: POP
66971: POP
// end ;
66972: LD_VAR 0 4
66976: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66977: LD_INT 0
66979: PPUSH
66980: PPUSH
66981: PPUSH
// if btype = b_depot then
66982: LD_VAR 0 2
66986: PUSH
66987: LD_INT 0
66989: EQUAL
66990: IFFALSE 67002
// begin result := true ;
66992: LD_ADDR_VAR 0 3
66996: PUSH
66997: LD_INT 1
66999: ST_TO_ADDR
// exit ;
67000: GO 67122
// end ; pom := GetBase ( depot ) ;
67002: LD_ADDR_VAR 0 4
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 274
67016: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67017: LD_ADDR_VAR 0 5
67021: PUSH
67022: LD_VAR 0 2
67026: PPUSH
67027: LD_VAR 0 1
67031: PPUSH
67032: CALL_OW 248
67036: PPUSH
67037: CALL_OW 450
67041: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67042: LD_ADDR_VAR 0 3
67046: PUSH
67047: LD_VAR 0 4
67051: PPUSH
67052: LD_INT 1
67054: PPUSH
67055: CALL_OW 275
67059: PUSH
67060: LD_VAR 0 5
67064: PUSH
67065: LD_INT 1
67067: ARRAY
67068: GREATEREQUAL
67069: IFFALSE 67095
67071: PUSH
67072: LD_VAR 0 4
67076: PPUSH
67077: LD_INT 2
67079: PPUSH
67080: CALL_OW 275
67084: PUSH
67085: LD_VAR 0 5
67089: PUSH
67090: LD_INT 2
67092: ARRAY
67093: GREATEREQUAL
67094: AND
67095: IFFALSE 67121
67097: PUSH
67098: LD_VAR 0 4
67102: PPUSH
67103: LD_INT 3
67105: PPUSH
67106: CALL_OW 275
67110: PUSH
67111: LD_VAR 0 5
67115: PUSH
67116: LD_INT 3
67118: ARRAY
67119: GREATEREQUAL
67120: AND
67121: ST_TO_ADDR
// end ;
67122: LD_VAR 0 3
67126: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67127: LD_INT 0
67129: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67130: LD_VAR 0 1
67134: PPUSH
67135: LD_VAR 0 2
67139: PPUSH
67140: LD_INT 0
67142: PPUSH
67143: LD_INT 0
67145: PPUSH
67146: LD_INT 1
67148: PPUSH
67149: LD_INT 0
67151: PPUSH
67152: CALL_OW 587
// end ;
67156: LD_VAR 0 3
67160: RET
// export function CenterOnNow ( unit ) ; begin
67161: LD_INT 0
67163: PPUSH
// result := IsInUnit ( unit ) ;
67164: LD_ADDR_VAR 0 2
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: CALL_OW 310
67178: ST_TO_ADDR
// if not result then
67179: LD_VAR 0 2
67183: NOT
67184: IFFALSE 67196
// result := unit ;
67186: LD_ADDR_VAR 0 2
67190: PUSH
67191: LD_VAR 0 1
67195: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67196: LD_VAR 0 1
67200: PPUSH
67201: CALL_OW 87
// end ;
67205: LD_VAR 0 2
67209: RET
// export function ComMoveHex ( unit , hex ) ; begin
67210: LD_INT 0
67212: PPUSH
// if not hex then
67213: LD_VAR 0 2
67217: NOT
67218: IFFALSE 67222
// exit ;
67220: GO 67275
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67222: LD_VAR 0 2
67226: PUSH
67227: LD_INT 1
67229: ARRAY
67230: PPUSH
67231: LD_VAR 0 2
67235: PUSH
67236: LD_INT 2
67238: ARRAY
67239: PPUSH
67240: CALL_OW 428
67244: IFFALSE 67248
// exit ;
67246: GO 67275
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67248: LD_VAR 0 1
67252: PPUSH
67253: LD_VAR 0 2
67257: PUSH
67258: LD_INT 1
67260: ARRAY
67261: PPUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_INT 2
67269: ARRAY
67270: PPUSH
67271: CALL_OW 111
// end ;
67275: LD_VAR 0 3
67279: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67280: LD_INT 0
67282: PPUSH
67283: PPUSH
67284: PPUSH
// if not unit or not enemy then
67285: LD_VAR 0 1
67289: NOT
67290: IFTRUE 67299
67292: PUSH
67293: LD_VAR 0 2
67297: NOT
67298: OR
67299: IFFALSE 67303
// exit ;
67301: GO 67429
// x := GetX ( enemy ) ;
67303: LD_ADDR_VAR 0 4
67307: PUSH
67308: LD_VAR 0 2
67312: PPUSH
67313: CALL_OW 250
67317: ST_TO_ADDR
// y := GetY ( enemy ) ;
67318: LD_ADDR_VAR 0 5
67322: PUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: CALL_OW 251
67332: ST_TO_ADDR
// if ValidHex ( x , y ) then
67333: LD_VAR 0 4
67337: PPUSH
67338: LD_VAR 0 5
67342: PPUSH
67343: CALL_OW 488
67347: IFFALSE 67429
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67349: LD_VAR 0 2
67353: PPUSH
67354: CALL_OW 247
67358: PUSH
67359: LD_INT 3
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: IN
67369: IFTRUE 67392
67371: PUSH
67372: LD_VAR 0 1
67376: PPUSH
67377: CALL_OW 255
67381: PPUSH
67382: LD_VAR 0 2
67386: PPUSH
67387: CALL_OW 292
67391: OR
67392: IFFALSE 67410
// ComAttackUnit ( unit , enemy ) else
67394: LD_VAR 0 1
67398: PPUSH
67399: LD_VAR 0 2
67403: PPUSH
67404: CALL_OW 115
67408: GO 67429
// ComAgressiveMove ( unit , x , y ) ;
67410: LD_VAR 0 1
67414: PPUSH
67415: LD_VAR 0 4
67419: PPUSH
67420: LD_VAR 0 5
67424: PPUSH
67425: CALL_OW 114
// end ;
67429: LD_VAR 0 3
67433: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67434: LD_INT 0
67436: PPUSH
67437: PPUSH
67438: PPUSH
// list := AreaToList ( area , 0 ) ;
67439: LD_ADDR_VAR 0 5
67443: PUSH
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_INT 0
67451: PPUSH
67452: CALL_OW 517
67456: ST_TO_ADDR
// if not list then
67457: LD_VAR 0 5
67461: NOT
67462: IFFALSE 67466
// exit ;
67464: GO 67596
// if all then
67466: LD_VAR 0 2
67470: IFFALSE 67558
// begin for i := 1 to list [ 1 ] do
67472: LD_ADDR_VAR 0 4
67476: PUSH
67477: DOUBLE
67478: LD_INT 1
67480: DEC
67481: ST_TO_ADDR
67482: LD_VAR 0 5
67486: PUSH
67487: LD_INT 1
67489: ARRAY
67490: PUSH
67491: FOR_TO
67492: IFFALSE 67554
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67494: LD_ADDR_VAR 0 3
67498: PUSH
67499: LD_VAR 0 3
67503: PPUSH
67504: LD_VAR 0 3
67508: PUSH
67509: LD_INT 1
67511: PLUS
67512: PPUSH
67513: LD_VAR 0 5
67517: PUSH
67518: LD_INT 1
67520: ARRAY
67521: PUSH
67522: LD_VAR 0 4
67526: ARRAY
67527: PUSH
67528: LD_VAR 0 5
67532: PUSH
67533: LD_INT 2
67535: ARRAY
67536: PUSH
67537: LD_VAR 0 4
67541: ARRAY
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PPUSH
67547: CALL_OW 1
67551: ST_TO_ADDR
67552: GO 67491
67554: POP
67555: POP
// exit ;
67556: GO 67596
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67558: LD_ADDR_VAR 0 3
67562: PUSH
67563: LD_VAR 0 5
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PUSH
67572: LD_INT 1
67574: ARRAY
67575: PUSH
67576: LD_VAR 0 5
67580: PUSH
67581: LD_INT 2
67583: ARRAY
67584: PUSH
67585: LD_INT 1
67587: ARRAY
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: ST_TO_ADDR
// end ;
67596: LD_VAR 0 3
67600: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67601: LD_INT 0
67603: PPUSH
67604: PPUSH
// list := AreaToList ( area , 0 ) ;
67605: LD_ADDR_VAR 0 4
67609: PUSH
67610: LD_VAR 0 1
67614: PPUSH
67615: LD_INT 0
67617: PPUSH
67618: CALL_OW 517
67622: ST_TO_ADDR
// if not list then
67623: LD_VAR 0 4
67627: NOT
67628: IFFALSE 67632
// exit ;
67630: GO 67673
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67632: LD_ADDR_VAR 0 3
67636: PUSH
67637: LD_VAR 0 4
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PUSH
67646: LD_INT 1
67648: ARRAY
67649: PUSH
67650: LD_VAR 0 4
67654: PUSH
67655: LD_INT 2
67657: ARRAY
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// end ;
67673: LD_VAR 0 3
67677: RET
// export function First ( array ) ; begin
67678: LD_INT 0
67680: PPUSH
// if not array then
67681: LD_VAR 0 1
67685: NOT
67686: IFFALSE 67690
// exit ;
67688: GO 67704
// result := array [ 1 ] ;
67690: LD_ADDR_VAR 0 2
67694: PUSH
67695: LD_VAR 0 1
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: ST_TO_ADDR
// end ;
67704: LD_VAR 0 2
67708: RET
// export function Last ( array ) ; begin
67709: LD_INT 0
67711: PPUSH
// if not array then
67712: LD_VAR 0 1
67716: NOT
67717: IFFALSE 67721
// exit ;
67719: GO 67737
// result := array [ array ] ;
67721: LD_ADDR_VAR 0 2
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_VAR 0 1
67735: ARRAY
67736: ST_TO_ADDR
// end ;
67737: LD_VAR 0 2
67741: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67742: LD_INT 0
67744: PPUSH
67745: PPUSH
// result := [ ] ;
67746: LD_ADDR_VAR 0 5
67750: PUSH
67751: EMPTY
67752: ST_TO_ADDR
// if not array then
67753: LD_VAR 0 1
67757: NOT
67758: IFFALSE 67762
// exit ;
67760: GO 67874
// for i := 1 to array do
67762: LD_ADDR_VAR 0 6
67766: PUSH
67767: DOUBLE
67768: LD_INT 1
67770: DEC
67771: ST_TO_ADDR
67772: LD_VAR 0 1
67776: PUSH
67777: FOR_TO
67778: IFFALSE 67872
// if array [ i ] [ index ] = value then
67780: LD_VAR 0 1
67784: PUSH
67785: LD_VAR 0 6
67789: ARRAY
67790: PUSH
67791: LD_VAR 0 2
67795: ARRAY
67796: PUSH
67797: LD_VAR 0 3
67801: EQUAL
67802: IFFALSE 67870
// begin if indexColumn then
67804: LD_VAR 0 4
67808: IFFALSE 67844
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67810: LD_ADDR_VAR 0 5
67814: PUSH
67815: LD_VAR 0 5
67819: PPUSH
67820: LD_VAR 0 1
67824: PUSH
67825: LD_VAR 0 6
67829: ARRAY
67830: PUSH
67831: LD_VAR 0 4
67835: ARRAY
67836: PPUSH
67837: CALL 62882 0 2
67841: ST_TO_ADDR
67842: GO 67870
// result := Join ( result , array [ i ] ) ;
67844: LD_ADDR_VAR 0 5
67848: PUSH
67849: LD_VAR 0 5
67853: PPUSH
67854: LD_VAR 0 1
67858: PUSH
67859: LD_VAR 0 6
67863: ARRAY
67864: PPUSH
67865: CALL 62882 0 2
67869: ST_TO_ADDR
// end ;
67870: GO 67777
67872: POP
67873: POP
// end ;
67874: LD_VAR 0 5
67878: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67879: LD_INT 0
67881: PPUSH
// if not vehicles or not parkingPoint then
67882: LD_VAR 0 1
67886: NOT
67887: IFTRUE 67896
67889: PUSH
67890: LD_VAR 0 2
67894: NOT
67895: OR
67896: IFFALSE 67900
// exit ;
67898: GO 67998
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67900: LD_ADDR_VAR 0 1
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_INT 50
67912: PUSH
67913: EMPTY
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: LD_INT 92
67921: PUSH
67922: LD_VAR 0 2
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PUSH
67931: LD_VAR 0 2
67935: PUSH
67936: LD_INT 2
67938: ARRAY
67939: PUSH
67940: LD_INT 8
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PPUSH
67957: CALL_OW 72
67961: ST_TO_ADDR
// if not vehicles then
67962: LD_VAR 0 1
67966: NOT
67967: IFFALSE 67971
// exit ;
67969: GO 67998
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67971: LD_VAR 0 1
67975: PPUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 1
67983: ARRAY
67984: PPUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_INT 2
67992: ARRAY
67993: PPUSH
67994: CALL_OW 111
// end ;
67998: LD_VAR 0 3
68002: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68003: LD_INT 0
68005: PPUSH
68006: PPUSH
68007: PPUSH
// if not side or not area then
68008: LD_VAR 0 1
68012: NOT
68013: IFTRUE 68022
68015: PUSH
68016: LD_VAR 0 2
68020: NOT
68021: OR
68022: IFFALSE 68026
// exit ;
68024: GO 68145
// tmp := AreaToList ( area , 0 ) ;
68026: LD_ADDR_VAR 0 5
68030: PUSH
68031: LD_VAR 0 2
68035: PPUSH
68036: LD_INT 0
68038: PPUSH
68039: CALL_OW 517
68043: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68044: LD_ADDR_VAR 0 4
68048: PUSH
68049: DOUBLE
68050: LD_INT 1
68052: DEC
68053: ST_TO_ADDR
68054: LD_VAR 0 5
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PUSH
68063: FOR_TO
68064: IFFALSE 68143
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
68066: LD_VAR 0 5
68070: PUSH
68071: LD_INT 1
68073: ARRAY
68074: PUSH
68075: LD_VAR 0 4
68079: ARRAY
68080: PPUSH
68081: LD_VAR 0 5
68085: PUSH
68086: LD_INT 2
68088: ARRAY
68089: PUSH
68090: LD_VAR 0 4
68094: ARRAY
68095: PPUSH
68096: CALL_OW 351
68100: IFFALSE 68141
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68102: LD_VAR 0 5
68106: PUSH
68107: LD_INT 1
68109: ARRAY
68110: PUSH
68111: LD_VAR 0 4
68115: ARRAY
68116: PPUSH
68117: LD_VAR 0 5
68121: PUSH
68122: LD_INT 2
68124: ARRAY
68125: PUSH
68126: LD_VAR 0 4
68130: ARRAY
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 244
// end ;
68141: GO 68063
68143: POP
68144: POP
// end ;
68145: LD_VAR 0 3
68149: RET
// export function UniqueArray ( array ) ; var i ; begin
68150: LD_INT 0
68152: PPUSH
68153: PPUSH
// result := [ ] ;
68154: LD_ADDR_VAR 0 2
68158: PUSH
68159: EMPTY
68160: ST_TO_ADDR
// if not array then
68161: LD_VAR 0 1
68165: NOT
68166: IFFALSE 68170
// exit ;
68168: GO 68231
// for i := 1 to array do
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: DOUBLE
68176: LD_INT 1
68178: DEC
68179: ST_TO_ADDR
68180: LD_VAR 0 1
68184: PUSH
68185: FOR_TO
68186: IFFALSE 68229
// if not array [ i ] in result then
68188: LD_VAR 0 1
68192: PUSH
68193: LD_VAR 0 3
68197: ARRAY
68198: PUSH
68199: LD_VAR 0 2
68203: IN
68204: NOT
68205: IFFALSE 68227
// result := Join ( result , i ) ;
68207: LD_ADDR_VAR 0 2
68211: PUSH
68212: LD_VAR 0 2
68216: PPUSH
68217: LD_VAR 0 3
68221: PPUSH
68222: CALL 62882 0 2
68226: ST_TO_ADDR
68227: GO 68185
68229: POP
68230: POP
// end ; end_of_file
68231: LD_VAR 0 2
68235: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68236: LD_VAR 0 1
68240: PPUSH
68241: LD_VAR 0 2
68245: PPUSH
68246: LD_VAR 0 3
68250: PPUSH
68251: LD_VAR 0 4
68255: PPUSH
68256: LD_VAR 0 5
68260: PPUSH
68261: LD_VAR 0 6
68265: PPUSH
68266: CALL 2138 0 6
// end ;
68270: PPOPN 6
68272: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68273: LD_INT 0
68275: PPUSH
// begin if not units then
68276: LD_VAR 0 1
68280: NOT
68281: IFFALSE 68285
// exit ;
68283: GO 68319
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
68285: LD_VAR 0 1
68289: PPUSH
68290: LD_VAR 0 2
68294: PPUSH
68295: LD_VAR 0 3
68299: PPUSH
68300: LD_VAR 0 4
68304: PPUSH
68305: LD_VAR 0 5
68309: PPUSH
68310: LD_VAR 0 6
68314: PPUSH
68315: CALL 24492 0 6
// end ;
68319: PPOPN 7
68321: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68322: CALL 2018 0 0
// end ;
68326: PPOPN 1
68328: END
