// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 958 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 10
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 10
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 10
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 10
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 9
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 10
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// for i = 1 to 3 do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_INT 3
 920: PUSH
 921: FOR_TO
 922: IFFALSE 951
// begin animal := CreateHuman ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: CALL_OW 44
 933: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 934: LD_VAR 0 3
 938: PPUSH
 939: LD_INT 11
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// end ;
 949: GO 921
 951: POP
 952: POP
// end ; end_of_file
 953: LD_VAR 0 1
 957: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 958: LD_INT 0
 960: PPUSH
// score_player := 0 ;
 961: LD_ADDR_EXP 28
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// score_enemy1 := 0 ;
 969: LD_ADDR_EXP 29
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// score_enemy2 := 0 ;
 977: LD_ADDR_EXP 30
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// score_enemy3 := 0 ;
 985: LD_ADDR_EXP 31
 989: PUSH
 990: LD_INT 0
 992: ST_TO_ADDR
// score_enemy4 := 0 ;
 993: LD_ADDR_EXP 32
 997: PUSH
 998: LD_INT 0
1000: ST_TO_ADDR
// score_enemy5 := 0 ;
1001: LD_ADDR_EXP 33
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// score_enemy6 := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// score_enemy7 := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// if difficulty > 1 then
1025: LD_OWVAR 67
1029: PUSH
1030: LD_INT 1
1032: GREATER
1033: IFFALSE 1045
// class_2 := class_sniper else
1035: LD_ADDR_EXP 26
1039: PUSH
1040: LD_INT 5
1042: ST_TO_ADDR
1043: GO 1053
// class_2 := class_soldier ;
1045: LD_ADDR_EXP 26
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// uc_side := 1 ;
1053: LD_ADDR_OWVAR 20
1057: PUSH
1058: LD_INT 1
1060: ST_TO_ADDR
// uc_nation := 1 ;
1061: LD_ADDR_OWVAR 21
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// hc_name :=  ;
1069: LD_ADDR_OWVAR 26
1073: PUSH
1074: LD_STRING 
1076: ST_TO_ADDR
// hc_sex := sex_male ;
1077: LD_ADDR_OWVAR 27
1081: PUSH
1082: LD_INT 1
1084: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1085: LD_ADDR_OWVAR 29
1089: PUSH
1090: LD_INT 12
1092: PUSH
1093: LD_INT 11
1095: PUSH
1096: LD_INT 10
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_OWVAR 67
1108: ARRAY
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: ST_TO_ADDR
// hc_class := class_1 ;
1117: LD_ADDR_OWVAR 28
1121: PUSH
1122: LD_EXP 25
1126: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1127: LD_ADDR_OWVAR 31
1131: PUSH
1132: LD_INT 10
1134: PUSH
1135: LD_INT 7
1137: PUSH
1138: LD_INT 5
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 0
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// hc_gallery :=  ;
1167: LD_ADDR_OWVAR 33
1171: PUSH
1172: LD_STRING 
1174: ST_TO_ADDR
// player := CreateHuman ;
1175: LD_ADDR_EXP 19
1179: PUSH
1180: CALL_OW 44
1184: ST_TO_ADDR
// uc_side := 2 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 2
1192: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1193: LD_ADDR_EXP 26
1197: PUSH
1198: LD_INT 5
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 1
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 12
1218: ARRAY
1219: ST_TO_ADDR
// hc_sex := sex_male ;
1220: LD_ADDR_OWVAR 27
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1228: LD_ADDR_OWVAR 29
1232: PUSH
1233: LD_INT 11
1235: PUSH
1236: LD_INT 12
1238: PUSH
1239: LD_INT 13
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: LD_INT 10
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: ST_TO_ADDR
// hc_class := class_2 ;
1260: LD_ADDR_OWVAR 28
1264: PUSH
1265: LD_EXP 26
1269: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1270: LD_ADDR_OWVAR 31
1274: PUSH
1275: LD_INT 8
1277: PUSH
1278: LD_INT 9
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PUSH
1295: LD_INT 0
1297: PUSH
1298: LD_INT 0
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// hc_gallery :=  ;
1310: LD_ADDR_OWVAR 33
1314: PUSH
1315: LD_STRING 
1317: ST_TO_ADDR
// player_1 := CreateHuman ;
1318: LD_ADDR_EXP 17
1322: PUSH
1323: CALL_OW 44
1327: ST_TO_ADDR
// uc_side := 3 ;
1328: LD_ADDR_OWVAR 20
1332: PUSH
1333: LD_INT 3
1335: ST_TO_ADDR
// uc_nation := 1 ;
1336: LD_ADDR_OWVAR 21
1340: PUSH
1341: LD_INT 1
1343: ST_TO_ADDR
// hc_sex := sex_male ;
1344: LD_ADDR_OWVAR 27
1348: PUSH
1349: LD_INT 1
1351: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1352: LD_ADDR_OWVAR 29
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: LD_INT 11
1362: PUSH
1363: LD_INT 12
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PUSH
1377: LD_INT 10
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1384: LD_ADDR_EXP 26
1388: PUSH
1389: LD_INT 5
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 2
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: ST_TO_ADDR
// hc_class := class_2 ;
1411: LD_ADDR_OWVAR 28
1415: PUSH
1416: LD_EXP 26
1420: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1421: LD_ADDR_OWVAR 31
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 7
1431: PUSH
1432: LD_INT 10
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_OWVAR 67
1444: ARRAY
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// hc_gallery :=  ;
1461: LD_ADDR_OWVAR 33
1465: PUSH
1466: LD_STRING 
1468: ST_TO_ADDR
// player_2 := CreateHuman ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1479: LD_ADDR_EXP 26
1483: PUSH
1484: LD_INT 5
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: CALL_OW 12
1504: ARRAY
1505: ST_TO_ADDR
// hc_class := class_2 ;
1506: LD_ADDR_OWVAR 28
1510: PUSH
1511: LD_EXP 26
1515: ST_TO_ADDR
// player_3 := CreateHuman ;
1516: LD_ADDR_EXP 20
1520: PUSH
1521: CALL_OW 44
1525: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1526: LD_ADDR_EXP 26
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PPUSH
1544: LD_INT 2
1546: PPUSH
1547: CALL_OW 12
1551: ARRAY
1552: ST_TO_ADDR
// hc_class := class_2 ;
1553: LD_ADDR_OWVAR 28
1557: PUSH
1558: LD_EXP 26
1562: ST_TO_ADDR
// player_4 := CreateHuman ;
1563: LD_ADDR_EXP 21
1567: PUSH
1568: CALL_OW 44
1572: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1573: LD_ADDR_EXP 26
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 1
1590: PPUSH
1591: LD_INT 2
1593: PPUSH
1594: CALL_OW 12
1598: ARRAY
1599: ST_TO_ADDR
// hc_class := class_2 ;
1600: LD_ADDR_OWVAR 28
1604: PUSH
1605: LD_EXP 26
1609: ST_TO_ADDR
// player_5 := CreateHuman ;
1610: LD_ADDR_EXP 22
1614: PUSH
1615: CALL_OW 44
1619: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 5
1627: PUSH
1628: LD_INT 1
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 2
1640: PPUSH
1641: CALL_OW 12
1645: ARRAY
1646: ST_TO_ADDR
// hc_class := class_2 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_EXP 26
1656: ST_TO_ADDR
// player_6 := CreateHuman ;
1657: LD_ADDR_EXP 23
1661: PUSH
1662: CALL_OW 44
1666: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 5
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 2
1687: PPUSH
1688: CALL_OW 12
1692: ARRAY
1693: ST_TO_ADDR
// hc_class := class_2 ;
1694: LD_ADDR_OWVAR 28
1698: PUSH
1699: LD_EXP 26
1703: ST_TO_ADDR
// player_7 := CreateHuman ;
1704: LD_ADDR_EXP 24
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1714: LD_EXP 17
1718: PPUSH
1719: LD_INT 1
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1729: LD_EXP 18
1733: PPUSH
1734: LD_INT 2
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1744: LD_EXP 19
1748: PPUSH
1749: LD_INT 4
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1759: LD_EXP 20
1763: PPUSH
1764: LD_INT 3
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1774: LD_EXP 21
1778: PPUSH
1779: LD_INT 5
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1789: LD_EXP 22
1793: PPUSH
1794: LD_INT 6
1796: PPUSH
1797: LD_INT 0
1799: PPUSH
1800: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1804: LD_EXP 23
1808: PPUSH
1809: LD_INT 7
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1819: LD_EXP 24
1823: PPUSH
1824: LD_INT 8
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1834: LD_EXP 19
1838: PPUSH
1839: CALL_OW 87
// end ;
1843: LD_VAR 0 1
1847: RET
// every 0 0$01 trigger player do var i , un , tab ;
1848: LD_EXP 19
1852: IFFALSE 2181
1854: GO 1856
1856: DISABLE
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// begin enable ;
1862: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1863: LD_ADDR_VAR 0 3
1867: PUSH
1868: LD_EXP 17
1872: PUSH
1873: LD_EXP 18
1877: PUSH
1878: LD_EXP 20
1882: PUSH
1883: LD_EXP 21
1887: PUSH
1888: LD_EXP 22
1892: PUSH
1893: LD_EXP 23
1897: PUSH
1898: LD_EXP 24
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 24
1924: PUSH
1925: LD_INT 250
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 72
1936: ST_TO_ADDR
// for i = 1 to un do
1937: LD_ADDR_VAR 0 1
1941: PUSH
1942: DOUBLE
1943: LD_INT 1
1945: DEC
1946: ST_TO_ADDR
1947: LD_VAR 0 2
1951: PUSH
1952: FOR_TO
1953: IFFALSE 2179
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1955: LD_VAR 0 2
1959: PUSH
1960: LD_VAR 0 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 300
1970: PUSH
1971: LD_VAR 0 2
1975: PUSH
1976: LD_VAR 0 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 314
1986: NOT
1987: AND
1988: IFFALSE 2177
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1990: LD_INT 22
1992: PUSH
1993: LD_INT 0
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_VAR 0 1
2014: ARRAY
2015: PPUSH
2016: CALL_OW 74
2020: PPUSH
2021: LD_VAR 0 2
2025: PUSH
2026: LD_VAR 0 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 296
2036: PUSH
2037: LD_INT 8
2039: GREATER
2040: IFFALSE 2131
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: PPUSH
2053: LD_INT 22
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: PPUSH
2068: LD_VAR 0 2
2072: PUSH
2073: LD_VAR 0 1
2077: ARRAY
2078: PPUSH
2079: CALL_OW 74
2083: PPUSH
2084: CALL_OW 250
2088: PPUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 0
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: PPUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_VAR 0 1
2113: ARRAY
2114: PPUSH
2115: CALL_OW 74
2119: PPUSH
2120: CALL_OW 251
2124: PPUSH
2125: CALL_OW 111
2129: GO 2177
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2131: LD_VAR 0 2
2135: PUSH
2136: LD_VAR 0 1
2140: ARRAY
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 69
2156: PPUSH
2157: LD_VAR 0 2
2161: PUSH
2162: LD_VAR 0 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 74
2172: PPUSH
2173: CALL_OW 115
// end ;
2177: GO 1952
2179: POP
2180: POP
// end ; end_of_file
2181: PPOPN 3
2183: END
// on UnitGoesToRed ( un ) do begin if un = player then
2184: LD_VAR 0 1
2188: PUSH
2189: LD_EXP 19
2193: EQUAL
2194: IFFALSE 2203
// YouLost ( hunt2 ) ;
2196: LD_STRING hunt2
2198: PPUSH
2199: CALL_OW 104
// end ;
2203: PPOPN 1
2205: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2206: LD_INT 0
2208: PPUSH
2209: PPUSH
2210: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2211: LD_ADDR_VAR 0 4
2215: PUSH
2216: LD_EXP 19
2220: PUSH
2221: LD_EXP 17
2225: PUSH
2226: LD_EXP 18
2230: PUSH
2231: LD_EXP 20
2235: PUSH
2236: LD_EXP 21
2240: PUSH
2241: LD_EXP 22
2245: PUSH
2246: LD_EXP 23
2250: PUSH
2251: LD_EXP 24
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: PUSH
2276: LD_INT 0
2278: EQUAL
2279: PUSH
2280: LD_VAR 0 1
2284: PPUSH
2285: CALL_OW 110
2289: PUSH
2290: LD_INT 100
2292: NEG
2293: NONEQUAL
2294: AND
2295: IFFALSE 2693
// begin play := killer_unit ;
2297: LD_ADDR_VAR 0 6
2301: PUSH
2302: LD_VAR 0 3
2306: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2307: LD_VAR 0 1
2311: PPUSH
2312: CALL_OW 257
2316: PUSH
2317: LD_INT 18
2319: DOUBLE
2320: EQUAL
2321: IFTRUE 2325
2323: GO 2338
2325: POP
// score := PB ; class_tiger :
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_EXP 11
2335: ST_TO_ADDR
2336: GO 2444
2338: LD_INT 14
2340: DOUBLE
2341: EQUAL
2342: IFTRUE 2346
2344: GO 2359
2346: POP
// score := PT ; class_fish :
2347: LD_ADDR_VAR 0 5
2351: PUSH
2352: LD_EXP 12
2356: ST_TO_ADDR
2357: GO 2444
2359: LD_INT 20
2361: DOUBLE
2362: EQUAL
2363: IFTRUE 2367
2365: GO 2380
2367: POP
// score := PF ; 21 :
2368: LD_ADDR_VAR 0 5
2372: PUSH
2373: LD_EXP 13
2377: ST_TO_ADDR
2378: GO 2444
2380: LD_INT 21
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2401
2388: POP
// score := PH ; 13 :
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_EXP 14
2398: ST_TO_ADDR
2399: GO 2444
2401: LD_INT 13
2403: DOUBLE
2404: EQUAL
2405: IFTRUE 2409
2407: GO 2422
2409: POP
// score := PE ; class_apeman :
2410: LD_ADDR_VAR 0 5
2414: PUSH
2415: LD_EXP 10
2419: ST_TO_ADDR
2420: GO 2444
2422: LD_INT 12
2424: DOUBLE
2425: EQUAL
2426: IFTRUE 2430
2428: GO 2443
2430: POP
// score := PA ; end ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_EXP 16
2440: ST_TO_ADDR
2441: GO 2444
2443: POP
// if GetChassis ( un ) = 31 then
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL_OW 265
2453: PUSH
2454: LD_INT 31
2456: EQUAL
2457: IFFALSE 2469
// score := PM ;
2459: LD_ADDR_VAR 0 5
2463: PUSH
2464: LD_EXP 15
2468: ST_TO_ADDR
// if play = player then
2469: LD_VAR 0 6
2473: PUSH
2474: LD_EXP 19
2478: EQUAL
2479: IFFALSE 2497
// score_player := score_player + score ;
2481: LD_ADDR_EXP 28
2485: PUSH
2486: LD_EXP 28
2490: PUSH
2491: LD_VAR 0 5
2495: PLUS
2496: ST_TO_ADDR
// if play = player_1 then
2497: LD_VAR 0 6
2501: PUSH
2502: LD_EXP 17
2506: EQUAL
2507: IFFALSE 2525
// score_enemy1 := score_enemy1 + score ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PUSH
2519: LD_VAR 0 5
2523: PLUS
2524: ST_TO_ADDR
// if play = player_2 then
2525: LD_VAR 0 6
2529: PUSH
2530: LD_EXP 18
2534: EQUAL
2535: IFFALSE 2553
// score_enemy2 := score_enemy2 + score ;
2537: LD_ADDR_EXP 30
2541: PUSH
2542: LD_EXP 30
2546: PUSH
2547: LD_VAR 0 5
2551: PLUS
2552: ST_TO_ADDR
// if play = player_3 then
2553: LD_VAR 0 6
2557: PUSH
2558: LD_EXP 20
2562: EQUAL
2563: IFFALSE 2581
// score_enemy3 := score_enemy3 + score ;
2565: LD_ADDR_EXP 31
2569: PUSH
2570: LD_EXP 31
2574: PUSH
2575: LD_VAR 0 5
2579: PLUS
2580: ST_TO_ADDR
// if play = player_4 then
2581: LD_VAR 0 6
2585: PUSH
2586: LD_EXP 21
2590: EQUAL
2591: IFFALSE 2609
// score_enemy4 := score_enemy4 + score ;
2593: LD_ADDR_EXP 32
2597: PUSH
2598: LD_EXP 32
2602: PUSH
2603: LD_VAR 0 5
2607: PLUS
2608: ST_TO_ADDR
// if play = player_5 then
2609: LD_VAR 0 6
2613: PUSH
2614: LD_EXP 22
2618: EQUAL
2619: IFFALSE 2637
// score_enemy5 := score_enemy5 + score ;
2621: LD_ADDR_EXP 33
2625: PUSH
2626: LD_EXP 33
2630: PUSH
2631: LD_VAR 0 5
2635: PLUS
2636: ST_TO_ADDR
// if play = player_6 then
2637: LD_VAR 0 6
2641: PUSH
2642: LD_EXP 23
2646: EQUAL
2647: IFFALSE 2665
// score_enemy6 := score_enemy6 + score ;
2649: LD_ADDR_EXP 34
2653: PUSH
2654: LD_EXP 34
2658: PUSH
2659: LD_VAR 0 5
2663: PLUS
2664: ST_TO_ADDR
// if play = player_7 then
2665: LD_VAR 0 6
2669: PUSH
2670: LD_EXP 24
2674: EQUAL
2675: IFFALSE 2693
// score_enemy7 := score_enemy7 + score ;
2677: LD_ADDR_EXP 35
2681: PUSH
2682: LD_EXP 35
2686: PUSH
2687: LD_VAR 0 5
2691: PLUS
2692: ST_TO_ADDR
// end ; end ;
2693: PPOPN 6
2695: END
// every 10 do
2696: GO 2698
2698: DISABLE
// begin enable ;
2699: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2700: LD_ADDR_OWVAR 47
2704: PUSH
2705: LD_STRING #player1
2707: PUSH
2708: LD_EXP 28
2712: PUSH
2713: LD_STRING #player2
2715: PUSH
2716: LD_EXP 29
2720: PUSH
2721: LD_STRING #player3
2723: PUSH
2724: LD_EXP 30
2728: PUSH
2729: LD_STRING #player4
2731: PUSH
2732: LD_EXP 31
2736: PUSH
2737: LD_STRING #player5
2739: PUSH
2740: LD_EXP 32
2744: PUSH
2745: LD_STRING #player6
2747: PUSH
2748: LD_EXP 33
2752: PUSH
2753: LD_STRING #player7
2755: PUSH
2756: LD_EXP 34
2760: PUSH
2761: LD_STRING #player8
2763: PUSH
2764: LD_EXP 35
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: ST_TO_ADDR
// end ;
2787: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2788: LD_VAR 0 1
2792: PUSH
2793: LD_OWVAR 2
2797: EQUAL
2798: PUSH
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: AND
2808: IFFALSE 2817
// YouLost ( hunt1 ) ;
2810: LD_STRING hunt1
2812: PPUSH
2813: CALL_OW 104
// end ;
2817: PPOPN 2
2819: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2820: LD_INT 22
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 0
2837: EQUAL
2838: IFFALSE 2947
2840: GO 2842
2842: DISABLE
// begin Wait ( 0 0$03 ) ;
2843: LD_INT 105
2845: PPUSH
2846: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2850: LD_EXP 28
2854: PUSH
2855: LD_EXP 29
2859: GREATER
2860: PUSH
2861: LD_EXP 28
2865: PUSH
2866: LD_EXP 30
2870: GREATER
2871: AND
2872: PUSH
2873: LD_EXP 28
2877: PUSH
2878: LD_EXP 31
2882: GREATER
2883: AND
2884: PUSH
2885: LD_EXP 28
2889: PUSH
2890: LD_EXP 32
2894: GREATER
2895: AND
2896: PUSH
2897: LD_EXP 28
2901: PUSH
2902: LD_EXP 33
2906: GREATER
2907: AND
2908: PUSH
2909: LD_EXP 28
2913: PUSH
2914: LD_EXP 34
2918: GREATER
2919: AND
2920: PUSH
2921: LD_EXP 28
2925: PUSH
2926: LD_EXP 35
2930: GREATER
2931: AND
2932: IFFALSE 2940
// YouWin else
2934: CALL_OW 103
2938: GO 2947
// YouLost ( hunt3 ) ;
2940: LD_STRING hunt3
2942: PPUSH
2943: CALL_OW 104
// end ; end_of_file end_of_file
2947: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
2948: GO 2950
2950: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2951: LD_STRING initStreamRollete();
2953: PPUSH
2954: CALL_OW 559
// InitStreamMode ;
2958: CALL 2967 0 0
// DefineStreamItems ( ) ;
2962: CALL 3407 0 0
// end ;
2966: END
// function InitStreamMode ; begin
2967: LD_INT 0
2969: PPUSH
// streamModeActive := false ;
2970: LD_ADDR_EXP 36
2974: PUSH
2975: LD_INT 0
2977: ST_TO_ADDR
// normalCounter := 36 ;
2978: LD_ADDR_EXP 37
2982: PUSH
2983: LD_INT 36
2985: ST_TO_ADDR
// hardcoreCounter := 16 ;
2986: LD_ADDR_EXP 38
2990: PUSH
2991: LD_INT 16
2993: ST_TO_ADDR
// sRocket := false ;
2994: LD_ADDR_EXP 41
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// sSpeed := false ;
3002: LD_ADDR_EXP 40
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// sEngine := false ;
3010: LD_ADDR_EXP 42
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// sSpec := false ;
3018: LD_ADDR_EXP 39
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// sLevel := false ;
3026: LD_ADDR_EXP 43
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// sArmoury := false ;
3034: LD_ADDR_EXP 44
3038: PUSH
3039: LD_INT 0
3041: ST_TO_ADDR
// sRadar := false ;
3042: LD_ADDR_EXP 45
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// sBunker := false ;
3050: LD_ADDR_EXP 46
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// sHack := false ;
3058: LD_ADDR_EXP 47
3062: PUSH
3063: LD_INT 0
3065: ST_TO_ADDR
// sFire := false ;
3066: LD_ADDR_EXP 48
3070: PUSH
3071: LD_INT 0
3073: ST_TO_ADDR
// sRefresh := false ;
3074: LD_ADDR_EXP 49
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// sExp := false ;
3082: LD_ADDR_EXP 50
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// sDepot := false ;
3090: LD_ADDR_EXP 51
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// sFlag := false ;
3098: LD_ADDR_EXP 52
3102: PUSH
3103: LD_INT 0
3105: ST_TO_ADDR
// sKamikadze := false ;
3106: LD_ADDR_EXP 60
3110: PUSH
3111: LD_INT 0
3113: ST_TO_ADDR
// sTroll := false ;
3114: LD_ADDR_EXP 61
3118: PUSH
3119: LD_INT 0
3121: ST_TO_ADDR
// sSlow := false ;
3122: LD_ADDR_EXP 62
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// sLack := false ;
3130: LD_ADDR_EXP 63
3134: PUSH
3135: LD_INT 0
3137: ST_TO_ADDR
// sTank := false ;
3138: LD_ADDR_EXP 65
3142: PUSH
3143: LD_INT 0
3145: ST_TO_ADDR
// sRemote := false ;
3146: LD_ADDR_EXP 66
3150: PUSH
3151: LD_INT 0
3153: ST_TO_ADDR
// sPowell := false ;
3154: LD_ADDR_EXP 67
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// sTeleport := false ;
3162: LD_ADDR_EXP 70
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// sOilTower := false ;
3170: LD_ADDR_EXP 72
3174: PUSH
3175: LD_INT 0
3177: ST_TO_ADDR
// sShovel := false ;
3178: LD_ADDR_EXP 73
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// sSheik := false ;
3186: LD_ADDR_EXP 74
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// sEarthquake := false ;
3194: LD_ADDR_EXP 76
3198: PUSH
3199: LD_INT 0
3201: ST_TO_ADDR
// sAI := false ;
3202: LD_ADDR_EXP 77
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// sCargo := false ;
3210: LD_ADDR_EXP 80
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sDLaser := false ;
3218: LD_ADDR_EXP 81
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sExchange := false ;
3226: LD_ADDR_EXP 82
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sFac := false ;
3234: LD_ADDR_EXP 83
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sPower := false ;
3242: LD_ADDR_EXP 84
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sRandom := false ;
3250: LD_ADDR_EXP 85
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sShield := false ;
3258: LD_ADDR_EXP 86
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sTime := false ;
3266: LD_ADDR_EXP 87
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sTools := false ;
3274: LD_ADDR_EXP 88
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sSold := false ;
3282: LD_ADDR_EXP 53
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sDiff := false ;
3290: LD_ADDR_EXP 54
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sFog := false ;
3298: LD_ADDR_EXP 57
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sReset := false ;
3306: LD_ADDR_EXP 58
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sSun := false ;
3314: LD_ADDR_EXP 59
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sTiger := false ;
3322: LD_ADDR_EXP 55
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sBomb := false ;
3330: LD_ADDR_EXP 56
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sWound := false ;
3338: LD_ADDR_EXP 64
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sBetray := false ;
3346: LD_ADDR_EXP 68
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sContamin := false ;
3354: LD_ADDR_EXP 69
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sOil := false ;
3362: LD_ADDR_EXP 71
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sStu := false ;
3370: LD_ADDR_EXP 75
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sBazooka := false ;
3378: LD_ADDR_EXP 78
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sMortar := false ;
3386: LD_ADDR_EXP 79
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sRanger := false ;
3394: LD_ADDR_EXP 89
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// end ;
3402: LD_VAR 0 1
3406: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3407: LD_INT 0
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
// result := [ ] ;
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: EMPTY
3420: ST_TO_ADDR
// if campaign_id = 1 then
3421: LD_OWVAR 69
3425: PUSH
3426: LD_INT 1
3428: EQUAL
3429: IFFALSE 6367
// begin case mission_number of 1 :
3431: LD_OWVAR 70
3435: PUSH
3436: LD_INT 1
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3508
3444: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: LD_INT 4
3455: PUSH
3456: LD_INT 11
3458: PUSH
3459: LD_INT 12
3461: PUSH
3462: LD_INT 15
3464: PUSH
3465: LD_INT 16
3467: PUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 23
3473: PUSH
3474: LD_INT 26
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 101
3490: PUSH
3491: LD_INT 102
3493: PUSH
3494: LD_INT 106
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: ST_TO_ADDR
3506: GO 6365
3508: LD_INT 2
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3588
3516: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3517: LD_ADDR_VAR 0 1
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 11
3530: PUSH
3531: LD_INT 12
3533: PUSH
3534: LD_INT 15
3536: PUSH
3537: LD_INT 16
3539: PUSH
3540: LD_INT 22
3542: PUSH
3543: LD_INT 23
3545: PUSH
3546: LD_INT 26
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 101
3562: PUSH
3563: LD_INT 102
3565: PUSH
3566: LD_INT 105
3568: PUSH
3569: LD_INT 106
3571: PUSH
3572: LD_INT 108
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: ST_TO_ADDR
3586: GO 6365
3588: LD_INT 3
3590: DOUBLE
3591: EQUAL
3592: IFTRUE 3596
3594: GO 3672
3596: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3597: LD_ADDR_VAR 0 1
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: LD_INT 4
3607: PUSH
3608: LD_INT 5
3610: PUSH
3611: LD_INT 11
3613: PUSH
3614: LD_INT 12
3616: PUSH
3617: LD_INT 15
3619: PUSH
3620: LD_INT 16
3622: PUSH
3623: LD_INT 22
3625: PUSH
3626: LD_INT 26
3628: PUSH
3629: LD_INT 36
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 101
3646: PUSH
3647: LD_INT 102
3649: PUSH
3650: LD_INT 105
3652: PUSH
3653: LD_INT 106
3655: PUSH
3656: LD_INT 108
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: ST_TO_ADDR
3670: GO 6365
3672: LD_INT 4
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3764
3680: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3681: LD_ADDR_VAR 0 1
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: LD_INT 4
3691: PUSH
3692: LD_INT 5
3694: PUSH
3695: LD_INT 8
3697: PUSH
3698: LD_INT 11
3700: PUSH
3701: LD_INT 12
3703: PUSH
3704: LD_INT 15
3706: PUSH
3707: LD_INT 16
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 23
3715: PUSH
3716: LD_INT 26
3718: PUSH
3719: LD_INT 36
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 101
3738: PUSH
3739: LD_INT 102
3741: PUSH
3742: LD_INT 105
3744: PUSH
3745: LD_INT 106
3747: PUSH
3748: LD_INT 108
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 6365
3764: LD_INT 5
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3872
3772: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3773: LD_ADDR_VAR 0 1
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: LD_INT 5
3786: PUSH
3787: LD_INT 6
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 11
3795: PUSH
3796: LD_INT 12
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 16
3804: PUSH
3805: LD_INT 22
3807: PUSH
3808: LD_INT 23
3810: PUSH
3811: LD_INT 25
3813: PUSH
3814: LD_INT 26
3816: PUSH
3817: LD_INT 36
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 101
3838: PUSH
3839: LD_INT 102
3841: PUSH
3842: LD_INT 105
3844: PUSH
3845: LD_INT 106
3847: PUSH
3848: LD_INT 108
3850: PUSH
3851: LD_INT 109
3853: PUSH
3854: LD_INT 112
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6365
3872: LD_INT 6
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 4000
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3881: LD_ADDR_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 11
3903: PUSH
3904: LD_INT 12
3906: PUSH
3907: LD_INT 15
3909: PUSH
3910: LD_INT 16
3912: PUSH
3913: LD_INT 20
3915: PUSH
3916: LD_INT 21
3918: PUSH
3919: LD_INT 22
3921: PUSH
3922: LD_INT 23
3924: PUSH
3925: LD_INT 25
3927: PUSH
3928: LD_INT 26
3930: PUSH
3931: LD_INT 30
3933: PUSH
3934: LD_INT 31
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 36
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 101
3966: PUSH
3967: LD_INT 102
3969: PUSH
3970: LD_INT 105
3972: PUSH
3973: LD_INT 106
3975: PUSH
3976: LD_INT 108
3978: PUSH
3979: LD_INT 109
3981: PUSH
3982: LD_INT 112
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: ST_TO_ADDR
3998: GO 6365
4000: LD_INT 7
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4008
4006: GO 4108
4008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4009: LD_ADDR_VAR 0 1
4013: PUSH
4014: LD_INT 2
4016: PUSH
4017: LD_INT 4
4019: PUSH
4020: LD_INT 5
4022: PUSH
4023: LD_INT 7
4025: PUSH
4026: LD_INT 11
4028: PUSH
4029: LD_INT 12
4031: PUSH
4032: LD_INT 15
4034: PUSH
4035: LD_INT 16
4037: PUSH
4038: LD_INT 20
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 22
4046: PUSH
4047: LD_INT 23
4049: PUSH
4050: LD_INT 25
4052: PUSH
4053: LD_INT 26
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 103
4080: PUSH
4081: LD_INT 105
4083: PUSH
4084: LD_INT 106
4086: PUSH
4087: LD_INT 108
4089: PUSH
4090: LD_INT 112
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: ST_TO_ADDR
4106: GO 6365
4108: LD_INT 8
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4244
4116: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: LD_INT 8
4139: PUSH
4140: LD_INT 11
4142: PUSH
4143: LD_INT 12
4145: PUSH
4146: LD_INT 15
4148: PUSH
4149: LD_INT 16
4151: PUSH
4152: LD_INT 20
4154: PUSH
4155: LD_INT 21
4157: PUSH
4158: LD_INT 22
4160: PUSH
4161: LD_INT 23
4163: PUSH
4164: LD_INT 25
4166: PUSH
4167: LD_INT 26
4169: PUSH
4170: LD_INT 30
4172: PUSH
4173: LD_INT 31
4175: PUSH
4176: LD_INT 32
4178: PUSH
4179: LD_INT 36
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 101
4206: PUSH
4207: LD_INT 102
4209: PUSH
4210: LD_INT 103
4212: PUSH
4213: LD_INT 105
4215: PUSH
4216: LD_INT 106
4218: PUSH
4219: LD_INT 108
4221: PUSH
4222: LD_INT 109
4224: PUSH
4225: LD_INT 112
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: ST_TO_ADDR
4242: GO 6365
4244: LD_INT 9
4246: DOUBLE
4247: EQUAL
4248: IFTRUE 4252
4250: GO 4388
4252: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4253: LD_ADDR_VAR 0 1
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: LD_INT 4
4263: PUSH
4264: LD_INT 5
4266: PUSH
4267: LD_INT 6
4269: PUSH
4270: LD_INT 7
4272: PUSH
4273: LD_INT 8
4275: PUSH
4276: LD_INT 11
4278: PUSH
4279: LD_INT 12
4281: PUSH
4282: LD_INT 15
4284: PUSH
4285: LD_INT 16
4287: PUSH
4288: LD_INT 20
4290: PUSH
4291: LD_INT 21
4293: PUSH
4294: LD_INT 22
4296: PUSH
4297: LD_INT 23
4299: PUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 26
4305: PUSH
4306: LD_INT 28
4308: PUSH
4309: LD_INT 30
4311: PUSH
4312: LD_INT 31
4314: PUSH
4315: LD_INT 32
4317: PUSH
4318: LD_INT 36
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 101
4346: PUSH
4347: LD_INT 102
4349: PUSH
4350: LD_INT 103
4352: PUSH
4353: LD_INT 105
4355: PUSH
4356: LD_INT 106
4358: PUSH
4359: LD_INT 108
4361: PUSH
4362: LD_INT 109
4364: PUSH
4365: LD_INT 112
4367: PUSH
4368: LD_INT 114
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: ST_TO_ADDR
4386: GO 6365
4388: LD_INT 10
4390: DOUBLE
4391: EQUAL
4392: IFTRUE 4396
4394: GO 4580
4396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4397: LD_ADDR_VAR 0 1
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 6
4413: PUSH
4414: LD_INT 7
4416: PUSH
4417: LD_INT 8
4419: PUSH
4420: LD_INT 9
4422: PUSH
4423: LD_INT 10
4425: PUSH
4426: LD_INT 11
4428: PUSH
4429: LD_INT 12
4431: PUSH
4432: LD_INT 13
4434: PUSH
4435: LD_INT 14
4437: PUSH
4438: LD_INT 15
4440: PUSH
4441: LD_INT 16
4443: PUSH
4444: LD_INT 17
4446: PUSH
4447: LD_INT 18
4449: PUSH
4450: LD_INT 19
4452: PUSH
4453: LD_INT 20
4455: PUSH
4456: LD_INT 21
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 25
4470: PUSH
4471: LD_INT 26
4473: PUSH
4474: LD_INT 28
4476: PUSH
4477: LD_INT 30
4479: PUSH
4480: LD_INT 31
4482: PUSH
4483: LD_INT 32
4485: PUSH
4486: LD_INT 36
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 101
4522: PUSH
4523: LD_INT 102
4525: PUSH
4526: LD_INT 103
4528: PUSH
4529: LD_INT 104
4531: PUSH
4532: LD_INT 105
4534: PUSH
4535: LD_INT 106
4537: PUSH
4538: LD_INT 107
4540: PUSH
4541: LD_INT 108
4543: PUSH
4544: LD_INT 109
4546: PUSH
4547: LD_INT 110
4549: PUSH
4550: LD_INT 111
4552: PUSH
4553: LD_INT 112
4555: PUSH
4556: LD_INT 114
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: ST_TO_ADDR
4578: GO 6365
4580: LD_INT 11
4582: DOUBLE
4583: EQUAL
4584: IFTRUE 4588
4586: GO 4780
4588: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 3
4599: PUSH
4600: LD_INT 4
4602: PUSH
4603: LD_INT 5
4605: PUSH
4606: LD_INT 6
4608: PUSH
4609: LD_INT 7
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: LD_INT 9
4617: PUSH
4618: LD_INT 10
4620: PUSH
4621: LD_INT 11
4623: PUSH
4624: LD_INT 12
4626: PUSH
4627: LD_INT 13
4629: PUSH
4630: LD_INT 14
4632: PUSH
4633: LD_INT 15
4635: PUSH
4636: LD_INT 16
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 18
4644: PUSH
4645: LD_INT 19
4647: PUSH
4648: LD_INT 20
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 23
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 25
4665: PUSH
4666: LD_INT 26
4668: PUSH
4669: LD_INT 28
4671: PUSH
4672: LD_INT 30
4674: PUSH
4675: LD_INT 31
4677: PUSH
4678: LD_INT 32
4680: PUSH
4681: LD_INT 34
4683: PUSH
4684: LD_INT 36
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 101
4722: PUSH
4723: LD_INT 102
4725: PUSH
4726: LD_INT 103
4728: PUSH
4729: LD_INT 104
4731: PUSH
4732: LD_INT 105
4734: PUSH
4735: LD_INT 106
4737: PUSH
4738: LD_INT 107
4740: PUSH
4741: LD_INT 108
4743: PUSH
4744: LD_INT 109
4746: PUSH
4747: LD_INT 110
4749: PUSH
4750: LD_INT 111
4752: PUSH
4753: LD_INT 112
4755: PUSH
4756: LD_INT 114
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: ST_TO_ADDR
4778: GO 6365
4780: LD_INT 12
4782: DOUBLE
4783: EQUAL
4784: IFTRUE 4788
4786: GO 4996
4788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4789: LD_ADDR_VAR 0 1
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: LD_INT 6
4811: PUSH
4812: LD_INT 7
4814: PUSH
4815: LD_INT 8
4817: PUSH
4818: LD_INT 9
4820: PUSH
4821: LD_INT 10
4823: PUSH
4824: LD_INT 11
4826: PUSH
4827: LD_INT 12
4829: PUSH
4830: LD_INT 13
4832: PUSH
4833: LD_INT 14
4835: PUSH
4836: LD_INT 15
4838: PUSH
4839: LD_INT 16
4841: PUSH
4842: LD_INT 17
4844: PUSH
4845: LD_INT 18
4847: PUSH
4848: LD_INT 19
4850: PUSH
4851: LD_INT 20
4853: PUSH
4854: LD_INT 21
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 23
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: LD_INT 25
4868: PUSH
4869: LD_INT 26
4871: PUSH
4872: LD_INT 27
4874: PUSH
4875: LD_INT 28
4877: PUSH
4878: LD_INT 30
4880: PUSH
4881: LD_INT 31
4883: PUSH
4884: LD_INT 32
4886: PUSH
4887: LD_INT 33
4889: PUSH
4890: LD_INT 34
4892: PUSH
4893: LD_INT 36
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 101
4934: PUSH
4935: LD_INT 102
4937: PUSH
4938: LD_INT 103
4940: PUSH
4941: LD_INT 104
4943: PUSH
4944: LD_INT 105
4946: PUSH
4947: LD_INT 106
4949: PUSH
4950: LD_INT 107
4952: PUSH
4953: LD_INT 108
4955: PUSH
4956: LD_INT 109
4958: PUSH
4959: LD_INT 110
4961: PUSH
4962: LD_INT 111
4964: PUSH
4965: LD_INT 112
4967: PUSH
4968: LD_INT 113
4970: PUSH
4971: LD_INT 114
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: ST_TO_ADDR
4994: GO 6365
4996: LD_INT 13
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5200
5004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5005: LD_ADDR_VAR 0 1
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: LD_INT 8
5027: PUSH
5028: LD_INT 9
5030: PUSH
5031: LD_INT 10
5033: PUSH
5034: LD_INT 11
5036: PUSH
5037: LD_INT 12
5039: PUSH
5040: LD_INT 14
5042: PUSH
5043: LD_INT 15
5045: PUSH
5046: LD_INT 16
5048: PUSH
5049: LD_INT 17
5051: PUSH
5052: LD_INT 18
5054: PUSH
5055: LD_INT 19
5057: PUSH
5058: LD_INT 20
5060: PUSH
5061: LD_INT 21
5063: PUSH
5064: LD_INT 22
5066: PUSH
5067: LD_INT 23
5069: PUSH
5070: LD_INT 24
5072: PUSH
5073: LD_INT 25
5075: PUSH
5076: LD_INT 26
5078: PUSH
5079: LD_INT 27
5081: PUSH
5082: LD_INT 28
5084: PUSH
5085: LD_INT 30
5087: PUSH
5088: LD_INT 31
5090: PUSH
5091: LD_INT 32
5093: PUSH
5094: LD_INT 33
5096: PUSH
5097: LD_INT 34
5099: PUSH
5100: LD_INT 36
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 101
5138: PUSH
5139: LD_INT 102
5141: PUSH
5142: LD_INT 103
5144: PUSH
5145: LD_INT 104
5147: PUSH
5148: LD_INT 105
5150: PUSH
5151: LD_INT 106
5153: PUSH
5154: LD_INT 107
5156: PUSH
5157: LD_INT 108
5159: PUSH
5160: LD_INT 109
5162: PUSH
5163: LD_INT 110
5165: PUSH
5166: LD_INT 111
5168: PUSH
5169: LD_INT 112
5171: PUSH
5172: LD_INT 113
5174: PUSH
5175: LD_INT 114
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: ST_TO_ADDR
5198: GO 6365
5200: LD_INT 14
5202: DOUBLE
5203: EQUAL
5204: IFTRUE 5208
5206: GO 5420
5208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5209: LD_ADDR_VAR 0 1
5213: PUSH
5214: LD_INT 1
5216: PUSH
5217: LD_INT 2
5219: PUSH
5220: LD_INT 3
5222: PUSH
5223: LD_INT 4
5225: PUSH
5226: LD_INT 5
5228: PUSH
5229: LD_INT 6
5231: PUSH
5232: LD_INT 7
5234: PUSH
5235: LD_INT 8
5237: PUSH
5238: LD_INT 9
5240: PUSH
5241: LD_INT 10
5243: PUSH
5244: LD_INT 11
5246: PUSH
5247: LD_INT 12
5249: PUSH
5250: LD_INT 13
5252: PUSH
5253: LD_INT 14
5255: PUSH
5256: LD_INT 15
5258: PUSH
5259: LD_INT 16
5261: PUSH
5262: LD_INT 17
5264: PUSH
5265: LD_INT 18
5267: PUSH
5268: LD_INT 19
5270: PUSH
5271: LD_INT 20
5273: PUSH
5274: LD_INT 21
5276: PUSH
5277: LD_INT 22
5279: PUSH
5280: LD_INT 23
5282: PUSH
5283: LD_INT 24
5285: PUSH
5286: LD_INT 25
5288: PUSH
5289: LD_INT 26
5291: PUSH
5292: LD_INT 27
5294: PUSH
5295: LD_INT 28
5297: PUSH
5298: LD_INT 29
5300: PUSH
5301: LD_INT 30
5303: PUSH
5304: LD_INT 31
5306: PUSH
5307: LD_INT 32
5309: PUSH
5310: LD_INT 33
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 36
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 101
5358: PUSH
5359: LD_INT 102
5361: PUSH
5362: LD_INT 103
5364: PUSH
5365: LD_INT 104
5367: PUSH
5368: LD_INT 105
5370: PUSH
5371: LD_INT 106
5373: PUSH
5374: LD_INT 107
5376: PUSH
5377: LD_INT 108
5379: PUSH
5380: LD_INT 109
5382: PUSH
5383: LD_INT 110
5385: PUSH
5386: LD_INT 111
5388: PUSH
5389: LD_INT 112
5391: PUSH
5392: LD_INT 113
5394: PUSH
5395: LD_INT 114
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 6365
5420: LD_INT 15
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5640
5428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5429: LD_ADDR_VAR 0 1
5433: PUSH
5434: LD_INT 1
5436: PUSH
5437: LD_INT 2
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: LD_INT 5
5448: PUSH
5449: LD_INT 6
5451: PUSH
5452: LD_INT 7
5454: PUSH
5455: LD_INT 8
5457: PUSH
5458: LD_INT 9
5460: PUSH
5461: LD_INT 10
5463: PUSH
5464: LD_INT 11
5466: PUSH
5467: LD_INT 12
5469: PUSH
5470: LD_INT 13
5472: PUSH
5473: LD_INT 14
5475: PUSH
5476: LD_INT 15
5478: PUSH
5479: LD_INT 16
5481: PUSH
5482: LD_INT 17
5484: PUSH
5485: LD_INT 18
5487: PUSH
5488: LD_INT 19
5490: PUSH
5491: LD_INT 20
5493: PUSH
5494: LD_INT 21
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 23
5502: PUSH
5503: LD_INT 24
5505: PUSH
5506: LD_INT 25
5508: PUSH
5509: LD_INT 26
5511: PUSH
5512: LD_INT 27
5514: PUSH
5515: LD_INT 28
5517: PUSH
5518: LD_INT 29
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: LD_INT 32
5529: PUSH
5530: LD_INT 33
5532: PUSH
5533: LD_INT 34
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 101
5578: PUSH
5579: LD_INT 102
5581: PUSH
5582: LD_INT 103
5584: PUSH
5585: LD_INT 104
5587: PUSH
5588: LD_INT 105
5590: PUSH
5591: LD_INT 106
5593: PUSH
5594: LD_INT 107
5596: PUSH
5597: LD_INT 108
5599: PUSH
5600: LD_INT 109
5602: PUSH
5603: LD_INT 110
5605: PUSH
5606: LD_INT 111
5608: PUSH
5609: LD_INT 112
5611: PUSH
5612: LD_INT 113
5614: PUSH
5615: LD_INT 114
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: ST_TO_ADDR
5638: GO 6365
5640: LD_INT 16
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5648
5646: GO 5772
5648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5649: LD_ADDR_VAR 0 1
5653: PUSH
5654: LD_INT 2
5656: PUSH
5657: LD_INT 4
5659: PUSH
5660: LD_INT 5
5662: PUSH
5663: LD_INT 7
5665: PUSH
5666: LD_INT 11
5668: PUSH
5669: LD_INT 12
5671: PUSH
5672: LD_INT 15
5674: PUSH
5675: LD_INT 16
5677: PUSH
5678: LD_INT 20
5680: PUSH
5681: LD_INT 21
5683: PUSH
5684: LD_INT 22
5686: PUSH
5687: LD_INT 23
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 26
5695: PUSH
5696: LD_INT 30
5698: PUSH
5699: LD_INT 31
5701: PUSH
5702: LD_INT 32
5704: PUSH
5705: LD_INT 33
5707: PUSH
5708: LD_INT 34
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: PUSH
5732: LD_INT 101
5734: PUSH
5735: LD_INT 102
5737: PUSH
5738: LD_INT 103
5740: PUSH
5741: LD_INT 106
5743: PUSH
5744: LD_INT 108
5746: PUSH
5747: LD_INT 112
5749: PUSH
5750: LD_INT 113
5752: PUSH
5753: LD_INT 114
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: ST_TO_ADDR
5770: GO 6365
5772: LD_INT 17
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5780
5778: GO 5992
5780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5781: LD_ADDR_VAR 0 1
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: LD_INT 3
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 6
5803: PUSH
5804: LD_INT 7
5806: PUSH
5807: LD_INT 8
5809: PUSH
5810: LD_INT 9
5812: PUSH
5813: LD_INT 10
5815: PUSH
5816: LD_INT 11
5818: PUSH
5819: LD_INT 12
5821: PUSH
5822: LD_INT 13
5824: PUSH
5825: LD_INT 14
5827: PUSH
5828: LD_INT 15
5830: PUSH
5831: LD_INT 16
5833: PUSH
5834: LD_INT 17
5836: PUSH
5837: LD_INT 18
5839: PUSH
5840: LD_INT 19
5842: PUSH
5843: LD_INT 20
5845: PUSH
5846: LD_INT 21
5848: PUSH
5849: LD_INT 22
5851: PUSH
5852: LD_INT 23
5854: PUSH
5855: LD_INT 24
5857: PUSH
5858: LD_INT 25
5860: PUSH
5861: LD_INT 26
5863: PUSH
5864: LD_INT 27
5866: PUSH
5867: LD_INT 28
5869: PUSH
5870: LD_INT 29
5872: PUSH
5873: LD_INT 30
5875: PUSH
5876: LD_INT 31
5878: PUSH
5879: LD_INT 32
5881: PUSH
5882: LD_INT 33
5884: PUSH
5885: LD_INT 34
5887: PUSH
5888: LD_INT 36
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_INT 101
5930: PUSH
5931: LD_INT 102
5933: PUSH
5934: LD_INT 103
5936: PUSH
5937: LD_INT 104
5939: PUSH
5940: LD_INT 105
5942: PUSH
5943: LD_INT 106
5945: PUSH
5946: LD_INT 107
5948: PUSH
5949: LD_INT 108
5951: PUSH
5952: LD_INT 109
5954: PUSH
5955: LD_INT 110
5957: PUSH
5958: LD_INT 111
5960: PUSH
5961: LD_INT 112
5963: PUSH
5964: LD_INT 113
5966: PUSH
5967: LD_INT 114
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: ST_TO_ADDR
5990: GO 6365
5992: LD_INT 18
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6000
5998: GO 6136
6000: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6001: LD_ADDR_VAR 0 1
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: LD_INT 4
6011: PUSH
6012: LD_INT 5
6014: PUSH
6015: LD_INT 7
6017: PUSH
6018: LD_INT 11
6020: PUSH
6021: LD_INT 12
6023: PUSH
6024: LD_INT 15
6026: PUSH
6027: LD_INT 16
6029: PUSH
6030: LD_INT 20
6032: PUSH
6033: LD_INT 21
6035: PUSH
6036: LD_INT 22
6038: PUSH
6039: LD_INT 23
6041: PUSH
6042: LD_INT 25
6044: PUSH
6045: LD_INT 26
6047: PUSH
6048: LD_INT 30
6050: PUSH
6051: LD_INT 31
6053: PUSH
6054: LD_INT 32
6056: PUSH
6057: LD_INT 33
6059: PUSH
6060: LD_INT 34
6062: PUSH
6063: LD_INT 35
6065: PUSH
6066: LD_INT 36
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 101
6094: PUSH
6095: LD_INT 102
6097: PUSH
6098: LD_INT 103
6100: PUSH
6101: LD_INT 106
6103: PUSH
6104: LD_INT 108
6106: PUSH
6107: LD_INT 112
6109: PUSH
6110: LD_INT 113
6112: PUSH
6113: LD_INT 114
6115: PUSH
6116: LD_INT 115
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: ST_TO_ADDR
6134: GO 6365
6136: LD_INT 19
6138: DOUBLE
6139: EQUAL
6140: IFTRUE 6144
6142: GO 6364
6144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6145: LD_ADDR_VAR 0 1
6149: PUSH
6150: LD_INT 1
6152: PUSH
6153: LD_INT 2
6155: PUSH
6156: LD_INT 3
6158: PUSH
6159: LD_INT 4
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: LD_INT 6
6167: PUSH
6168: LD_INT 7
6170: PUSH
6171: LD_INT 8
6173: PUSH
6174: LD_INT 9
6176: PUSH
6177: LD_INT 10
6179: PUSH
6180: LD_INT 11
6182: PUSH
6183: LD_INT 12
6185: PUSH
6186: LD_INT 13
6188: PUSH
6189: LD_INT 14
6191: PUSH
6192: LD_INT 15
6194: PUSH
6195: LD_INT 16
6197: PUSH
6198: LD_INT 17
6200: PUSH
6201: LD_INT 18
6203: PUSH
6204: LD_INT 19
6206: PUSH
6207: LD_INT 20
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 22
6215: PUSH
6216: LD_INT 23
6218: PUSH
6219: LD_INT 24
6221: PUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 27
6230: PUSH
6231: LD_INT 28
6233: PUSH
6234: LD_INT 29
6236: PUSH
6237: LD_INT 30
6239: PUSH
6240: LD_INT 31
6242: PUSH
6243: LD_INT 32
6245: PUSH
6246: LD_INT 33
6248: PUSH
6249: LD_INT 34
6251: PUSH
6252: LD_INT 35
6254: PUSH
6255: LD_INT 36
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 101
6298: PUSH
6299: LD_INT 102
6301: PUSH
6302: LD_INT 103
6304: PUSH
6305: LD_INT 104
6307: PUSH
6308: LD_INT 105
6310: PUSH
6311: LD_INT 106
6313: PUSH
6314: LD_INT 107
6316: PUSH
6317: LD_INT 108
6319: PUSH
6320: LD_INT 109
6322: PUSH
6323: LD_INT 110
6325: PUSH
6326: LD_INT 111
6328: PUSH
6329: LD_INT 112
6331: PUSH
6332: LD_INT 113
6334: PUSH
6335: LD_INT 114
6337: PUSH
6338: LD_INT 115
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: ST_TO_ADDR
6362: GO 6365
6364: POP
// end else
6365: GO 6584
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_INT 1
6374: PUSH
6375: LD_INT 2
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: LD_INT 5
6386: PUSH
6387: LD_INT 6
6389: PUSH
6390: LD_INT 7
6392: PUSH
6393: LD_INT 8
6395: PUSH
6396: LD_INT 9
6398: PUSH
6399: LD_INT 10
6401: PUSH
6402: LD_INT 11
6404: PUSH
6405: LD_INT 12
6407: PUSH
6408: LD_INT 13
6410: PUSH
6411: LD_INT 14
6413: PUSH
6414: LD_INT 15
6416: PUSH
6417: LD_INT 16
6419: PUSH
6420: LD_INT 17
6422: PUSH
6423: LD_INT 18
6425: PUSH
6426: LD_INT 19
6428: PUSH
6429: LD_INT 20
6431: PUSH
6432: LD_INT 21
6434: PUSH
6435: LD_INT 22
6437: PUSH
6438: LD_INT 23
6440: PUSH
6441: LD_INT 24
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 26
6449: PUSH
6450: LD_INT 27
6452: PUSH
6453: LD_INT 28
6455: PUSH
6456: LD_INT 29
6458: PUSH
6459: LD_INT 30
6461: PUSH
6462: LD_INT 31
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 33
6470: PUSH
6471: LD_INT 34
6473: PUSH
6474: LD_INT 35
6476: PUSH
6477: LD_INT 36
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 101
6520: PUSH
6521: LD_INT 102
6523: PUSH
6524: LD_INT 103
6526: PUSH
6527: LD_INT 104
6529: PUSH
6530: LD_INT 105
6532: PUSH
6533: LD_INT 106
6535: PUSH
6536: LD_INT 107
6538: PUSH
6539: LD_INT 108
6541: PUSH
6542: LD_INT 109
6544: PUSH
6545: LD_INT 110
6547: PUSH
6548: LD_INT 111
6550: PUSH
6551: LD_INT 112
6553: PUSH
6554: LD_INT 113
6556: PUSH
6557: LD_INT 114
6559: PUSH
6560: LD_INT 115
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: ST_TO_ADDR
// if result then
6584: LD_VAR 0 1
6588: IFFALSE 6877
// begin normal :=  ;
6590: LD_ADDR_VAR 0 3
6594: PUSH
6595: LD_STRING 
6597: ST_TO_ADDR
// hardcore :=  ;
6598: LD_ADDR_VAR 0 4
6602: PUSH
6603: LD_STRING 
6605: ST_TO_ADDR
// for i = 1 to normalCounter do
6606: LD_ADDR_VAR 0 5
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_EXP 37
6620: PUSH
6621: FOR_TO
6622: IFFALSE 6723
// begin tmp := 0 ;
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_STRING 0
6631: ST_TO_ADDR
// if result [ 1 ] then
6632: LD_VAR 0 1
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: IFFALSE 6705
// if result [ 1 ] [ 1 ] = i then
6642: LD_VAR 0 1
6646: PUSH
6647: LD_INT 1
6649: ARRAY
6650: PUSH
6651: LD_INT 1
6653: ARRAY
6654: PUSH
6655: LD_VAR 0 5
6659: EQUAL
6660: IFFALSE 6705
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6662: LD_ADDR_VAR 0 1
6666: PUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: LD_INT 1
6674: PPUSH
6675: LD_VAR 0 1
6679: PUSH
6680: LD_INT 1
6682: ARRAY
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 3
6691: PPUSH
6692: CALL_OW 1
6696: ST_TO_ADDR
// tmp := 1 ;
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: LD_STRING 1
6704: ST_TO_ADDR
// end ; normal := normal & tmp ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: LD_VAR 0 3
6714: PUSH
6715: LD_VAR 0 2
6719: STR
6720: ST_TO_ADDR
// end ;
6721: GO 6621
6723: POP
6724: POP
// for i = 1 to hardcoreCounter do
6725: LD_ADDR_VAR 0 5
6729: PUSH
6730: DOUBLE
6731: LD_INT 1
6733: DEC
6734: ST_TO_ADDR
6735: LD_EXP 38
6739: PUSH
6740: FOR_TO
6741: IFFALSE 6846
// begin tmp := 0 ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_STRING 0
6750: ST_TO_ADDR
// if result [ 2 ] then
6751: LD_VAR 0 1
6755: PUSH
6756: LD_INT 2
6758: ARRAY
6759: IFFALSE 6828
// if result [ 2 ] [ 1 ] = 100 + i then
6761: LD_VAR 0 1
6765: PUSH
6766: LD_INT 2
6768: ARRAY
6769: PUSH
6770: LD_INT 1
6772: ARRAY
6773: PUSH
6774: LD_INT 100
6776: PUSH
6777: LD_VAR 0 5
6781: PLUS
6782: EQUAL
6783: IFFALSE 6828
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6785: LD_ADDR_VAR 0 1
6789: PUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 2
6797: PPUSH
6798: LD_VAR 0 1
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: CALL_OW 3
6814: PPUSH
6815: CALL_OW 1
6819: ST_TO_ADDR
// tmp := 1 ;
6820: LD_ADDR_VAR 0 2
6824: PUSH
6825: LD_STRING 1
6827: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6828: LD_ADDR_VAR 0 4
6832: PUSH
6833: LD_VAR 0 4
6837: PUSH
6838: LD_VAR 0 2
6842: STR
6843: ST_TO_ADDR
// end ;
6844: GO 6740
6846: POP
6847: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6848: LD_STRING getStreamItemsFromMission("
6850: PUSH
6851: LD_VAR 0 3
6855: STR
6856: PUSH
6857: LD_STRING ","
6859: STR
6860: PUSH
6861: LD_VAR 0 4
6865: STR
6866: PUSH
6867: LD_STRING ")
6869: STR
6870: PPUSH
6871: CALL_OW 559
// end else
6875: GO 6884
// ToLua ( getStreamItemsFromMission("","") ) ;
6877: LD_STRING getStreamItemsFromMission("","")
6879: PPUSH
6880: CALL_OW 559
// end ;
6884: LD_VAR 0 1
6888: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6889: LD_VAR 0 2
6893: PUSH
6894: LD_INT 100
6896: EQUAL
6897: IFFALSE 7846
// begin if not StreamModeActive then
6899: LD_EXP 36
6903: NOT
6904: IFFALSE 6914
// StreamModeActive := true ;
6906: LD_ADDR_EXP 36
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 0 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 0
6921: EQUAL
6922: IFFALSE 6928
// InitStreamMode ;
6924: CALL 2967 0 0
// if p3 = 1 then
6928: LD_VAR 0 3
6932: PUSH
6933: LD_INT 1
6935: EQUAL
6936: IFFALSE 6946
// sRocket := true ;
6938: LD_ADDR_EXP 41
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// if p3 = 2 then
6946: LD_VAR 0 3
6950: PUSH
6951: LD_INT 2
6953: EQUAL
6954: IFFALSE 6964
// sSpeed := true ;
6956: LD_ADDR_EXP 40
6960: PUSH
6961: LD_INT 1
6963: ST_TO_ADDR
// if p3 = 3 then
6964: LD_VAR 0 3
6968: PUSH
6969: LD_INT 3
6971: EQUAL
6972: IFFALSE 6982
// sEngine := true ;
6974: LD_ADDR_EXP 42
6978: PUSH
6979: LD_INT 1
6981: ST_TO_ADDR
// if p3 = 4 then
6982: LD_VAR 0 3
6986: PUSH
6987: LD_INT 4
6989: EQUAL
6990: IFFALSE 7000
// sSpec := true ;
6992: LD_ADDR_EXP 39
6996: PUSH
6997: LD_INT 1
6999: ST_TO_ADDR
// if p3 = 5 then
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 5
7007: EQUAL
7008: IFFALSE 7018
// sLevel := true ;
7010: LD_ADDR_EXP 43
7014: PUSH
7015: LD_INT 1
7017: ST_TO_ADDR
// if p3 = 6 then
7018: LD_VAR 0 3
7022: PUSH
7023: LD_INT 6
7025: EQUAL
7026: IFFALSE 7036
// sArmoury := true ;
7028: LD_ADDR_EXP 44
7032: PUSH
7033: LD_INT 1
7035: ST_TO_ADDR
// if p3 = 7 then
7036: LD_VAR 0 3
7040: PUSH
7041: LD_INT 7
7043: EQUAL
7044: IFFALSE 7054
// sRadar := true ;
7046: LD_ADDR_EXP 45
7050: PUSH
7051: LD_INT 1
7053: ST_TO_ADDR
// if p3 = 8 then
7054: LD_VAR 0 3
7058: PUSH
7059: LD_INT 8
7061: EQUAL
7062: IFFALSE 7072
// sBunker := true ;
7064: LD_ADDR_EXP 46
7068: PUSH
7069: LD_INT 1
7071: ST_TO_ADDR
// if p3 = 9 then
7072: LD_VAR 0 3
7076: PUSH
7077: LD_INT 9
7079: EQUAL
7080: IFFALSE 7090
// sHack := true ;
7082: LD_ADDR_EXP 47
7086: PUSH
7087: LD_INT 1
7089: ST_TO_ADDR
// if p3 = 10 then
7090: LD_VAR 0 3
7094: PUSH
7095: LD_INT 10
7097: EQUAL
7098: IFFALSE 7108
// sFire := true ;
7100: LD_ADDR_EXP 48
7104: PUSH
7105: LD_INT 1
7107: ST_TO_ADDR
// if p3 = 11 then
7108: LD_VAR 0 3
7112: PUSH
7113: LD_INT 11
7115: EQUAL
7116: IFFALSE 7126
// sRefresh := true ;
7118: LD_ADDR_EXP 49
7122: PUSH
7123: LD_INT 1
7125: ST_TO_ADDR
// if p3 = 12 then
7126: LD_VAR 0 3
7130: PUSH
7131: LD_INT 12
7133: EQUAL
7134: IFFALSE 7144
// sExp := true ;
7136: LD_ADDR_EXP 50
7140: PUSH
7141: LD_INT 1
7143: ST_TO_ADDR
// if p3 = 13 then
7144: LD_VAR 0 3
7148: PUSH
7149: LD_INT 13
7151: EQUAL
7152: IFFALSE 7162
// sDepot := true ;
7154: LD_ADDR_EXP 51
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// if p3 = 14 then
7162: LD_VAR 0 3
7166: PUSH
7167: LD_INT 14
7169: EQUAL
7170: IFFALSE 7180
// sFlag := true ;
7172: LD_ADDR_EXP 52
7176: PUSH
7177: LD_INT 1
7179: ST_TO_ADDR
// if p3 = 15 then
7180: LD_VAR 0 3
7184: PUSH
7185: LD_INT 15
7187: EQUAL
7188: IFFALSE 7198
// sKamikadze := true ;
7190: LD_ADDR_EXP 60
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// if p3 = 16 then
7198: LD_VAR 0 3
7202: PUSH
7203: LD_INT 16
7205: EQUAL
7206: IFFALSE 7216
// sTroll := true ;
7208: LD_ADDR_EXP 61
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// if p3 = 17 then
7216: LD_VAR 0 3
7220: PUSH
7221: LD_INT 17
7223: EQUAL
7224: IFFALSE 7234
// sSlow := true ;
7226: LD_ADDR_EXP 62
7230: PUSH
7231: LD_INT 1
7233: ST_TO_ADDR
// if p3 = 18 then
7234: LD_VAR 0 3
7238: PUSH
7239: LD_INT 18
7241: EQUAL
7242: IFFALSE 7252
// sLack := true ;
7244: LD_ADDR_EXP 63
7248: PUSH
7249: LD_INT 1
7251: ST_TO_ADDR
// if p3 = 19 then
7252: LD_VAR 0 3
7256: PUSH
7257: LD_INT 19
7259: EQUAL
7260: IFFALSE 7270
// sTank := true ;
7262: LD_ADDR_EXP 65
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
// if p3 = 20 then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 20
7277: EQUAL
7278: IFFALSE 7288
// sRemote := true ;
7280: LD_ADDR_EXP 66
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// if p3 = 21 then
7288: LD_VAR 0 3
7292: PUSH
7293: LD_INT 21
7295: EQUAL
7296: IFFALSE 7306
// sPowell := true ;
7298: LD_ADDR_EXP 67
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// if p3 = 22 then
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 22
7313: EQUAL
7314: IFFALSE 7324
// sTeleport := true ;
7316: LD_ADDR_EXP 70
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// if p3 = 23 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 23
7331: EQUAL
7332: IFFALSE 7342
// sOilTower := true ;
7334: LD_ADDR_EXP 72
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if p3 = 24 then
7342: LD_VAR 0 3
7346: PUSH
7347: LD_INT 24
7349: EQUAL
7350: IFFALSE 7360
// sShovel := true ;
7352: LD_ADDR_EXP 73
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// if p3 = 25 then
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 25
7367: EQUAL
7368: IFFALSE 7378
// sSheik := true ;
7370: LD_ADDR_EXP 74
7374: PUSH
7375: LD_INT 1
7377: ST_TO_ADDR
// if p3 = 26 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 26
7385: EQUAL
7386: IFFALSE 7396
// sEarthquake := true ;
7388: LD_ADDR_EXP 76
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// if p3 = 27 then
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 27
7403: EQUAL
7404: IFFALSE 7414
// sAI := true ;
7406: LD_ADDR_EXP 77
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 28 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 28
7421: EQUAL
7422: IFFALSE 7432
// sCargo := true ;
7424: LD_ADDR_EXP 80
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// if p3 = 29 then
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 29
7439: EQUAL
7440: IFFALSE 7450
// sDLaser := true ;
7442: LD_ADDR_EXP 81
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// if p3 = 30 then
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 30
7457: EQUAL
7458: IFFALSE 7468
// sExchange := true ;
7460: LD_ADDR_EXP 82
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// if p3 = 31 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 31
7475: EQUAL
7476: IFFALSE 7486
// sFac := true ;
7478: LD_ADDR_EXP 83
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if p3 = 32 then
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 32
7493: EQUAL
7494: IFFALSE 7504
// sPower := true ;
7496: LD_ADDR_EXP 84
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// if p3 = 33 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 33
7511: EQUAL
7512: IFFALSE 7522
// sRandom := true ;
7514: LD_ADDR_EXP 85
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if p3 = 34 then
7522: LD_VAR 0 3
7526: PUSH
7527: LD_INT 34
7529: EQUAL
7530: IFFALSE 7540
// sShield := true ;
7532: LD_ADDR_EXP 86
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// if p3 = 35 then
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 35
7547: EQUAL
7548: IFFALSE 7558
// sTime := true ;
7550: LD_ADDR_EXP 87
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if p3 = 36 then
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 36
7565: EQUAL
7566: IFFALSE 7576
// sTools := true ;
7568: LD_ADDR_EXP 88
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// if p3 = 101 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 101
7583: EQUAL
7584: IFFALSE 7594
// sSold := true ;
7586: LD_ADDR_EXP 53
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if p3 = 102 then
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 102
7601: EQUAL
7602: IFFALSE 7612
// sDiff := true ;
7604: LD_ADDR_EXP 54
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// if p3 = 103 then
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 103
7619: EQUAL
7620: IFFALSE 7630
// sFog := true ;
7622: LD_ADDR_EXP 57
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if p3 = 104 then
7630: LD_VAR 0 3
7634: PUSH
7635: LD_INT 104
7637: EQUAL
7638: IFFALSE 7648
// sReset := true ;
7640: LD_ADDR_EXP 58
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// if p3 = 105 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 105
7655: EQUAL
7656: IFFALSE 7666
// sSun := true ;
7658: LD_ADDR_EXP 59
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// if p3 = 106 then
7666: LD_VAR 0 3
7670: PUSH
7671: LD_INT 106
7673: EQUAL
7674: IFFALSE 7684
// sTiger := true ;
7676: LD_ADDR_EXP 55
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// if p3 = 107 then
7684: LD_VAR 0 3
7688: PUSH
7689: LD_INT 107
7691: EQUAL
7692: IFFALSE 7702
// sBomb := true ;
7694: LD_ADDR_EXP 56
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// if p3 = 108 then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 108
7709: EQUAL
7710: IFFALSE 7720
// sWound := true ;
7712: LD_ADDR_EXP 64
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// if p3 = 109 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 109
7727: EQUAL
7728: IFFALSE 7738
// sBetray := true ;
7730: LD_ADDR_EXP 68
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if p3 = 110 then
7738: LD_VAR 0 3
7742: PUSH
7743: LD_INT 110
7745: EQUAL
7746: IFFALSE 7756
// sContamin := true ;
7748: LD_ADDR_EXP 69
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if p3 = 111 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 111
7763: EQUAL
7764: IFFALSE 7774
// sOil := true ;
7766: LD_ADDR_EXP 71
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 112 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 112
7781: EQUAL
7782: IFFALSE 7792
// sStu := true ;
7784: LD_ADDR_EXP 75
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 113 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 113
7799: EQUAL
7800: IFFALSE 7810
// sBazooka := true ;
7802: LD_ADDR_EXP 78
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 114 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 114
7817: EQUAL
7818: IFFALSE 7828
// sMortar := true ;
7820: LD_ADDR_EXP 79
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 115 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 115
7835: EQUAL
7836: IFFALSE 7846
// sRanger := true ;
7838: LD_ADDR_EXP 89
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// end ; end ;
7846: PPOPN 6
7848: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7849: LD_EXP 36
7853: PUSH
7854: LD_EXP 41
7858: AND
7859: IFFALSE 7983
7861: GO 7863
7863: DISABLE
7864: LD_INT 0
7866: PPUSH
7867: PPUSH
// begin enable ;
7868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7869: LD_ADDR_VAR 0 2
7873: PUSH
7874: LD_INT 22
7876: PUSH
7877: LD_OWVAR 2
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 2
7888: PUSH
7889: LD_INT 34
7891: PUSH
7892: LD_INT 7
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 34
7901: PUSH
7902: LD_INT 45
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 34
7911: PUSH
7912: LD_INT 28
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 34
7921: PUSH
7922: LD_INT 47
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: ST_TO_ADDR
// if not tmp then
7945: LD_VAR 0 2
7949: NOT
7950: IFFALSE 7954
// exit ;
7952: GO 7983
// for i in tmp do
7954: LD_ADDR_VAR 0 1
7958: PUSH
7959: LD_VAR 0 2
7963: PUSH
7964: FOR_IN
7965: IFFALSE 7981
// begin SetLives ( i , 0 ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_INT 0
7974: PPUSH
7975: CALL_OW 234
// end ;
7979: GO 7964
7981: POP
7982: POP
// end ;
7983: PPOPN 2
7985: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7986: LD_EXP 36
7990: PUSH
7991: LD_EXP 42
7995: AND
7996: IFFALSE 8080
7998: GO 8000
8000: DISABLE
8001: LD_INT 0
8003: PPUSH
8004: PPUSH
// begin enable ;
8005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_OWVAR 2
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 32
8025: PUSH
8026: LD_INT 3
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PPUSH
8037: CALL_OW 69
8041: ST_TO_ADDR
// if not tmp then
8042: LD_VAR 0 2
8046: NOT
8047: IFFALSE 8051
// exit ;
8049: GO 8080
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8078
// begin SetLives ( i , 0 ) ;
8064: LD_VAR 0 1
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 234
// end ;
8076: GO 8061
8078: POP
8079: POP
// end ;
8080: PPOPN 2
8082: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8083: LD_EXP 36
8087: PUSH
8088: LD_EXP 39
8092: AND
8093: IFFALSE 8186
8095: GO 8097
8097: DISABLE
8098: LD_INT 0
8100: PPUSH
// begin enable ;
8101: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8102: LD_ADDR_VAR 0 1
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_OWVAR 2
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 25
8124: PUSH
8125: LD_INT 5
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 9
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 8
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PPUSH
8162: CALL_OW 69
8166: PUSH
8167: FOR_IN
8168: IFFALSE 8184
// begin SetClass ( i , 1 ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 1
8177: PPUSH
8178: CALL_OW 336
// end ;
8182: GO 8167
8184: POP
8185: POP
// end ;
8186: PPOPN 1
8188: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8189: LD_EXP 36
8193: PUSH
8194: LD_EXP 40
8198: AND
8199: PUSH
8200: LD_OWVAR 65
8204: PUSH
8205: LD_INT 7
8207: LESS
8208: AND
8209: IFFALSE 8223
8211: GO 8213
8213: DISABLE
// begin enable ;
8214: ENABLE
// game_speed := 7 ;
8215: LD_ADDR_OWVAR 65
8219: PUSH
8220: LD_INT 7
8222: ST_TO_ADDR
// end ;
8223: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8224: LD_EXP 36
8228: PUSH
8229: LD_EXP 43
8233: AND
8234: IFFALSE 8436
8236: GO 8238
8238: DISABLE
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
8243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_INT 81
8251: PUSH
8252: LD_OWVAR 2
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 21
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: ST_TO_ADDR
// if not tmp then
8280: LD_VAR 0 3
8284: NOT
8285: IFFALSE 8289
// exit ;
8287: GO 8436
// if tmp > 5 then
8289: LD_VAR 0 3
8293: PUSH
8294: LD_INT 5
8296: GREATER
8297: IFFALSE 8309
// k := 5 else
8299: LD_ADDR_VAR 0 2
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
8307: GO 8319
// k := tmp ;
8309: LD_ADDR_VAR 0 2
8313: PUSH
8314: LD_VAR 0 3
8318: ST_TO_ADDR
// for i := 1 to k do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: DOUBLE
8325: LD_INT 1
8327: DEC
8328: ST_TO_ADDR
8329: LD_VAR 0 2
8333: PUSH
8334: FOR_TO
8335: IFFALSE 8434
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8337: LD_VAR 0 3
8341: PUSH
8342: LD_VAR 0 1
8346: ARRAY
8347: PPUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_INT 4
8355: MOD
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: PPUSH
8361: CALL_OW 259
8365: PUSH
8366: LD_INT 10
8368: LESS
8369: IFFALSE 8432
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8371: LD_VAR 0 3
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PPUSH
8382: LD_VAR 0 1
8386: PUSH
8387: LD_INT 4
8389: MOD
8390: PUSH
8391: LD_INT 1
8393: PLUS
8394: PPUSH
8395: LD_VAR 0 3
8399: PUSH
8400: LD_VAR 0 1
8404: ARRAY
8405: PPUSH
8406: LD_VAR 0 1
8410: PUSH
8411: LD_INT 4
8413: MOD
8414: PUSH
8415: LD_INT 1
8417: PLUS
8418: PPUSH
8419: CALL_OW 259
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: PPUSH
8428: CALL_OW 237
8432: GO 8334
8434: POP
8435: POP
// end ;
8436: PPOPN 3
8438: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8439: LD_EXP 36
8443: PUSH
8444: LD_EXP 44
8448: AND
8449: IFFALSE 8469
8451: GO 8453
8453: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8454: LD_INT 4
8456: PPUSH
8457: LD_OWVAR 2
8461: PPUSH
8462: LD_INT 0
8464: PPUSH
8465: CALL_OW 324
8469: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8470: LD_EXP 36
8474: PUSH
8475: LD_EXP 73
8479: AND
8480: IFFALSE 8500
8482: GO 8484
8484: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8485: LD_INT 19
8487: PPUSH
8488: LD_OWVAR 2
8492: PPUSH
8493: LD_INT 0
8495: PPUSH
8496: CALL_OW 324
8500: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8501: LD_EXP 36
8505: PUSH
8506: LD_EXP 45
8510: AND
8511: IFFALSE 8613
8513: GO 8515
8515: DISABLE
8516: LD_INT 0
8518: PPUSH
8519: PPUSH
// begin enable ;
8520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 22
8528: PUSH
8529: LD_OWVAR 2
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 34
8543: PUSH
8544: LD_INT 11
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 34
8553: PUSH
8554: LD_INT 30
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: ST_TO_ADDR
// if not tmp then
8575: LD_VAR 0 2
8579: NOT
8580: IFFALSE 8584
// exit ;
8582: GO 8613
// for i in tmp do
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_VAR 0 2
8593: PUSH
8594: FOR_IN
8595: IFFALSE 8611
// begin SetLives ( i , 0 ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_INT 0
8604: PPUSH
8605: CALL_OW 234
// end ;
8609: GO 8594
8611: POP
8612: POP
// end ;
8613: PPOPN 2
8615: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8616: LD_EXP 36
8620: PUSH
8621: LD_EXP 46
8625: AND
8626: IFFALSE 8646
8628: GO 8630
8630: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8631: LD_INT 32
8633: PPUSH
8634: LD_OWVAR 2
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 324
8646: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8647: LD_EXP 36
8651: PUSH
8652: LD_EXP 47
8656: AND
8657: IFFALSE 8838
8659: GO 8661
8661: DISABLE
8662: LD_INT 0
8664: PPUSH
8665: PPUSH
8666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: LD_INT 22
8674: PUSH
8675: LD_OWVAR 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 33
8686: PUSH
8687: LD_INT 3
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// if not tmp then
8703: LD_VAR 0 2
8707: NOT
8708: IFFALSE 8712
// exit ;
8710: GO 8838
// side := 0 ;
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// for i := 1 to 8 do
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: DOUBLE
8726: LD_INT 1
8728: DEC
8729: ST_TO_ADDR
8730: LD_INT 8
8732: PUSH
8733: FOR_TO
8734: IFFALSE 8782
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8736: LD_OWVAR 2
8740: PUSH
8741: LD_VAR 0 1
8745: NONEQUAL
8746: PUSH
8747: LD_OWVAR 2
8751: PPUSH
8752: LD_VAR 0 1
8756: PPUSH
8757: CALL_OW 81
8761: PUSH
8762: LD_INT 2
8764: EQUAL
8765: AND
8766: IFFALSE 8780
// begin side := i ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_VAR 0 1
8777: ST_TO_ADDR
// break ;
8778: GO 8782
// end ;
8780: GO 8733
8782: POP
8783: POP
// if not side then
8784: LD_VAR 0 3
8788: NOT
8789: IFFALSE 8793
// exit ;
8791: GO 8838
// for i := 1 to tmp do
8793: LD_ADDR_VAR 0 1
8797: PUSH
8798: DOUBLE
8799: LD_INT 1
8801: DEC
8802: ST_TO_ADDR
8803: LD_VAR 0 2
8807: PUSH
8808: FOR_TO
8809: IFFALSE 8836
// if Prob ( 60 ) then
8811: LD_INT 60
8813: PPUSH
8814: CALL_OW 13
8818: IFFALSE 8834
// SetSide ( i , side ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_VAR 0 3
8829: PPUSH
8830: CALL_OW 235
8834: GO 8808
8836: POP
8837: POP
// end ;
8838: PPOPN 3
8840: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8841: LD_EXP 36
8845: PUSH
8846: LD_EXP 49
8850: AND
8851: IFFALSE 8970
8853: GO 8855
8855: DISABLE
8856: LD_INT 0
8858: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: LD_INT 22
8866: PUSH
8867: LD_OWVAR 2
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 21
8878: PUSH
8879: LD_INT 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 3
8888: PUSH
8889: LD_INT 23
8891: PUSH
8892: LD_INT 0
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: PPUSH
8908: CALL_OW 69
8912: PUSH
8913: FOR_IN
8914: IFFALSE 8968
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 257
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 4
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: IN
8944: IFFALSE 8966
// SetClass ( un , rand ( 1 , 4 ) ) ;
8946: LD_VAR 0 1
8950: PPUSH
8951: LD_INT 1
8953: PPUSH
8954: LD_INT 4
8956: PPUSH
8957: CALL_OW 12
8961: PPUSH
8962: CALL_OW 336
8966: GO 8913
8968: POP
8969: POP
// end ;
8970: PPOPN 1
8972: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8973: LD_EXP 36
8977: PUSH
8978: LD_EXP 48
8982: AND
8983: IFFALSE 9062
8985: GO 8987
8987: DISABLE
8988: LD_INT 0
8990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8991: LD_ADDR_VAR 0 1
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_OWVAR 2
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 21
9010: PUSH
9011: LD_INT 3
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// if not tmp then
9027: LD_VAR 0 1
9031: NOT
9032: IFFALSE 9036
// exit ;
9034: GO 9062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9036: LD_VAR 0 1
9040: PUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 12
9053: ARRAY
9054: PPUSH
9055: LD_INT 100
9057: PPUSH
9058: CALL_OW 234
// end ;
9062: PPOPN 1
9064: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9065: LD_EXP 36
9069: PUSH
9070: LD_EXP 50
9074: AND
9075: IFFALSE 9173
9077: GO 9079
9079: DISABLE
9080: LD_INT 0
9082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9083: LD_ADDR_VAR 0 1
9087: PUSH
9088: LD_INT 22
9090: PUSH
9091: LD_OWVAR 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 21
9102: PUSH
9103: LD_INT 1
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PPUSH
9114: CALL_OW 69
9118: ST_TO_ADDR
// if not tmp then
9119: LD_VAR 0 1
9123: NOT
9124: IFFALSE 9128
// exit ;
9126: GO 9173
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9128: LD_VAR 0 1
9132: PUSH
9133: LD_INT 1
9135: PPUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 12
9145: ARRAY
9146: PPUSH
9147: LD_INT 1
9149: PPUSH
9150: LD_INT 4
9152: PPUSH
9153: CALL_OW 12
9157: PPUSH
9158: LD_INT 3000
9160: PPUSH
9161: LD_INT 9000
9163: PPUSH
9164: CALL_OW 12
9168: PPUSH
9169: CALL_OW 492
// end ;
9173: PPOPN 1
9175: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9176: LD_EXP 36
9180: PUSH
9181: LD_EXP 51
9185: AND
9186: IFFALSE 9206
9188: GO 9190
9190: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9191: LD_INT 1
9193: PPUSH
9194: LD_OWVAR 2
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 324
9206: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9207: LD_EXP 36
9211: PUSH
9212: LD_EXP 52
9216: AND
9217: IFFALSE 9300
9219: GO 9221
9221: DISABLE
9222: LD_INT 0
9224: PPUSH
9225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9226: LD_ADDR_VAR 0 2
9230: PUSH
9231: LD_INT 22
9233: PUSH
9234: LD_OWVAR 2
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: LD_INT 21
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// if not tmp then
9262: LD_VAR 0 2
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9300
// for i in tmp do
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_VAR 0 2
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9298
// SetBLevel ( i , 10 ) ;
9284: LD_VAR 0 1
9288: PPUSH
9289: LD_INT 10
9291: PPUSH
9292: CALL_OW 241
9296: GO 9281
9298: POP
9299: POP
// end ;
9300: PPOPN 2
9302: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9303: LD_EXP 36
9307: PUSH
9308: LD_EXP 53
9312: AND
9313: IFFALSE 9424
9315: GO 9317
9317: DISABLE
9318: LD_INT 0
9320: PPUSH
9321: PPUSH
9322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_INT 22
9330: PUSH
9331: LD_OWVAR 2
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// if not tmp then
9359: LD_VAR 0 3
9363: NOT
9364: IFFALSE 9368
// exit ;
9366: GO 9424
// un := tmp [ rand ( 1 , tmp ) ] ;
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_VAR 0 3
9377: PUSH
9378: LD_INT 1
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: CALL_OW 12
9390: ARRAY
9391: ST_TO_ADDR
// if Crawls ( un ) then
9392: LD_VAR 0 2
9396: PPUSH
9397: CALL_OW 318
9401: IFFALSE 9412
// ComWalk ( un ) ;
9403: LD_VAR 0 2
9407: PPUSH
9408: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9412: LD_VAR 0 2
9416: PPUSH
9417: LD_INT 5
9419: PPUSH
9420: CALL_OW 336
// end ;
9424: PPOPN 3
9426: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
9427: LD_EXP 36
9431: PUSH
9432: LD_EXP 54
9436: AND
9437: PUSH
9438: LD_OWVAR 67
9442: PUSH
9443: LD_INT 3
9445: LESS
9446: AND
9447: IFFALSE 9466
9449: GO 9451
9451: DISABLE
// Difficulty := Difficulty + 1 ;
9452: LD_ADDR_OWVAR 67
9456: PUSH
9457: LD_OWVAR 67
9461: PUSH
9462: LD_INT 1
9464: PLUS
9465: ST_TO_ADDR
9466: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9467: LD_EXP 36
9471: PUSH
9472: LD_EXP 55
9476: AND
9477: IFFALSE 9580
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
// begin for i := 1 to 5 do
9485: LD_ADDR_VAR 0 1
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_INT 5
9497: PUSH
9498: FOR_TO
9499: IFFALSE 9578
// begin uc_nation := nation_nature ;
9501: LD_ADDR_OWVAR 21
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// uc_side := 0 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9517: LD_ADDR_OWVAR 29
9521: PUSH
9522: LD_INT 12
9524: PUSH
9525: LD_INT 12
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: ST_TO_ADDR
// hc_agressivity := 20 ;
9532: LD_ADDR_OWVAR 35
9536: PUSH
9537: LD_INT 20
9539: ST_TO_ADDR
// hc_class := class_tiger ;
9540: LD_ADDR_OWVAR 28
9544: PUSH
9545: LD_INT 14
9547: ST_TO_ADDR
// hc_gallery :=  ;
9548: LD_ADDR_OWVAR 33
9552: PUSH
9553: LD_STRING 
9555: ST_TO_ADDR
// hc_name :=  ;
9556: LD_ADDR_OWVAR 26
9560: PUSH
9561: LD_STRING 
9563: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9564: CALL_OW 44
9568: PPUSH
9569: LD_INT 0
9571: PPUSH
9572: CALL_OW 51
// end ;
9576: GO 9498
9578: POP
9579: POP
// end ;
9580: PPOPN 1
9582: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9583: LD_EXP 36
9587: PUSH
9588: LD_EXP 56
9592: AND
9593: IFFALSE 9602
9595: GO 9597
9597: DISABLE
// StreamSibBomb ;
9598: CALL 9603 0 0
9602: END
// export function StreamSibBomb ; var i , x , y ; begin
9603: LD_INT 0
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
// result := false ;
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_INT 0
9616: ST_TO_ADDR
// for i := 1 to 16 do
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: DOUBLE
9623: LD_INT 1
9625: DEC
9626: ST_TO_ADDR
9627: LD_INT 16
9629: PUSH
9630: FOR_TO
9631: IFFALSE 9830
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9633: LD_ADDR_VAR 0 3
9637: PUSH
9638: LD_INT 10
9640: PUSH
9641: LD_INT 20
9643: PUSH
9644: LD_INT 30
9646: PUSH
9647: LD_INT 40
9649: PUSH
9650: LD_INT 50
9652: PUSH
9653: LD_INT 60
9655: PUSH
9656: LD_INT 70
9658: PUSH
9659: LD_INT 80
9661: PUSH
9662: LD_INT 90
9664: PUSH
9665: LD_INT 100
9667: PUSH
9668: LD_INT 110
9670: PUSH
9671: LD_INT 120
9673: PUSH
9674: LD_INT 130
9676: PUSH
9677: LD_INT 140
9679: PUSH
9680: LD_INT 150
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 1
9702: PPUSH
9703: LD_INT 15
9705: PPUSH
9706: CALL_OW 12
9710: ARRAY
9711: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9712: LD_ADDR_VAR 0 4
9716: PUSH
9717: LD_INT 10
9719: PUSH
9720: LD_INT 20
9722: PUSH
9723: LD_INT 30
9725: PUSH
9726: LD_INT 40
9728: PUSH
9729: LD_INT 50
9731: PUSH
9732: LD_INT 60
9734: PUSH
9735: LD_INT 70
9737: PUSH
9738: LD_INT 80
9740: PUSH
9741: LD_INT 90
9743: PUSH
9744: LD_INT 100
9746: PUSH
9747: LD_INT 110
9749: PUSH
9750: LD_INT 120
9752: PUSH
9753: LD_INT 130
9755: PUSH
9756: LD_INT 140
9758: PUSH
9759: LD_INT 150
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 1
9781: PPUSH
9782: LD_INT 15
9784: PPUSH
9785: CALL_OW 12
9789: ARRAY
9790: ST_TO_ADDR
// if ValidHex ( x , y ) then
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_VAR 0 4
9800: PPUSH
9801: CALL_OW 488
9805: IFFALSE 9828
// begin result := [ x , y ] ;
9807: LD_ADDR_VAR 0 1
9811: PUSH
9812: LD_VAR 0 3
9816: PUSH
9817: LD_VAR 0 4
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: ST_TO_ADDR
// break ;
9826: GO 9830
// end ; end ;
9828: GO 9630
9830: POP
9831: POP
// if result then
9832: LD_VAR 0 1
9836: IFFALSE 9896
// begin ToLua ( playSibBomb() ) ;
9838: LD_STRING playSibBomb()
9840: PPUSH
9841: CALL_OW 559
// wait ( 0 0$14 ) ;
9845: LD_INT 490
9847: PPUSH
9848: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9852: LD_VAR 0 1
9856: PUSH
9857: LD_INT 1
9859: ARRAY
9860: PPUSH
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 2
9868: ARRAY
9869: PPUSH
9870: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 1
9881: ARRAY
9882: PPUSH
9883: LD_VAR 0 1
9887: PUSH
9888: LD_INT 2
9890: ARRAY
9891: PPUSH
9892: CALL_OW 429
// end ; end ;
9896: LD_VAR 0 1
9900: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9901: LD_EXP 36
9905: PUSH
9906: LD_EXP 58
9910: AND
9911: IFFALSE 9923
9913: GO 9915
9915: DISABLE
// YouLost (  ) ;
9916: LD_STRING 
9918: PPUSH
9919: CALL_OW 104
9923: END
// every 0 0$1 trigger StreamModeActive and sFog do
9924: LD_EXP 36
9928: PUSH
9929: LD_EXP 57
9933: AND
9934: IFFALSE 9948
9936: GO 9938
9938: DISABLE
// FogOff ( your_side ) ;
9939: LD_OWVAR 2
9943: PPUSH
9944: CALL_OW 344
9948: END
// every 0 0$1 trigger StreamModeActive and sSun do
9949: LD_EXP 36
9953: PUSH
9954: LD_EXP 59
9958: AND
9959: IFFALSE 9987
9961: GO 9963
9963: DISABLE
// begin solar_recharge_percent := 0 ;
9964: LD_ADDR_OWVAR 79
9968: PUSH
9969: LD_INT 0
9971: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9972: LD_INT 10500
9974: PPUSH
9975: CALL_OW 67
// solar_recharge_percent := 100 ;
9979: LD_ADDR_OWVAR 79
9983: PUSH
9984: LD_INT 100
9986: ST_TO_ADDR
// end ;
9987: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9988: LD_EXP 36
9992: PUSH
9993: LD_EXP 60
9997: AND
9998: IFFALSE 10237
10000: GO 10002
10002: DISABLE
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
// begin tmp := [ ] ;
10008: LD_ADDR_VAR 0 3
10012: PUSH
10013: EMPTY
10014: ST_TO_ADDR
// for i := 1 to 6 do
10015: LD_ADDR_VAR 0 1
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_INT 6
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10134
// begin uc_nation := nation_nature ;
10031: LD_ADDR_OWVAR 21
10035: PUSH
10036: LD_INT 0
10038: ST_TO_ADDR
// uc_side := 0 ;
10039: LD_ADDR_OWVAR 20
10043: PUSH
10044: LD_INT 0
10046: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10047: LD_ADDR_OWVAR 29
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 12
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: ST_TO_ADDR
// hc_agressivity := 20 ;
10062: LD_ADDR_OWVAR 35
10066: PUSH
10067: LD_INT 20
10069: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10070: LD_ADDR_OWVAR 28
10074: PUSH
10075: LD_INT 17
10077: ST_TO_ADDR
// hc_gallery :=  ;
10078: LD_ADDR_OWVAR 33
10082: PUSH
10083: LD_STRING 
10085: ST_TO_ADDR
// hc_name :=  ;
10086: LD_ADDR_OWVAR 26
10090: PUSH
10091: LD_STRING 
10093: ST_TO_ADDR
// un := CreateHuman ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: CALL_OW 44
10103: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10104: LD_VAR 0 2
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 51
// tmp := tmp ^ un ;
10116: LD_ADDR_VAR 0 3
10120: PUSH
10121: LD_VAR 0 3
10125: PUSH
10126: LD_VAR 0 2
10130: ADD
10131: ST_TO_ADDR
// end ;
10132: GO 10028
10134: POP
10135: POP
// repeat wait ( 0 0$1 ) ;
10136: LD_INT 35
10138: PPUSH
10139: CALL_OW 67
// for un in tmp do
10143: LD_ADDR_VAR 0 2
10147: PUSH
10148: LD_VAR 0 3
10152: PUSH
10153: FOR_IN
10154: IFFALSE 10228
// begin if IsDead ( un ) then
10156: LD_VAR 0 2
10160: PPUSH
10161: CALL_OW 301
10165: IFFALSE 10185
// begin tmp := tmp diff un ;
10167: LD_ADDR_VAR 0 3
10171: PUSH
10172: LD_VAR 0 3
10176: PUSH
10177: LD_VAR 0 2
10181: DIFF
10182: ST_TO_ADDR
// continue ;
10183: GO 10153
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: LD_INT 3
10192: PUSH
10193: LD_INT 22
10195: PUSH
10196: LD_INT 0
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 69
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 74
10221: PPUSH
10222: CALL_OW 115
// end ;
10226: GO 10153
10228: POP
10229: POP
// until not tmp ;
10230: LD_VAR 0 3
10234: NOT
10235: IFFALSE 10136
// end ;
10237: PPOPN 3
10239: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10240: LD_EXP 36
10244: PUSH
10245: LD_EXP 61
10249: AND
10250: IFFALSE 10304
10252: GO 10254
10254: DISABLE
// begin ToLua ( displayTroll(); ) ;
10255: LD_STRING displayTroll();
10257: PPUSH
10258: CALL_OW 559
// wait ( 3 3$00 ) ;
10262: LD_INT 6300
10264: PPUSH
10265: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10269: LD_STRING hideTroll();
10271: PPUSH
10272: CALL_OW 559
// wait ( 1 1$00 ) ;
10276: LD_INT 2100
10278: PPUSH
10279: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10283: LD_STRING displayTroll();
10285: PPUSH
10286: CALL_OW 559
// wait ( 1 1$00 ) ;
10290: LD_INT 2100
10292: PPUSH
10293: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10297: LD_STRING hideTroll();
10299: PPUSH
10300: CALL_OW 559
// end ;
10304: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10305: LD_EXP 36
10309: PUSH
10310: LD_EXP 62
10314: AND
10315: IFFALSE 10378
10317: GO 10319
10319: DISABLE
10320: LD_INT 0
10322: PPUSH
// begin p := 0 ;
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_INT 0
10330: ST_TO_ADDR
// repeat game_speed := 1 ;
10331: LD_ADDR_OWVAR 65
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10339: LD_INT 35
10341: PPUSH
10342: CALL_OW 67
// p := p + 1 ;
10346: LD_ADDR_VAR 0 1
10350: PUSH
10351: LD_VAR 0 1
10355: PUSH
10356: LD_INT 1
10358: PLUS
10359: ST_TO_ADDR
// until p >= 60 ;
10360: LD_VAR 0 1
10364: PUSH
10365: LD_INT 60
10367: GREATEREQUAL
10368: IFFALSE 10331
// game_speed := 4 ;
10370: LD_ADDR_OWVAR 65
10374: PUSH
10375: LD_INT 4
10377: ST_TO_ADDR
// end ;
10378: PPOPN 1
10380: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10381: LD_EXP 36
10385: PUSH
10386: LD_EXP 63
10390: AND
10391: IFFALSE 10537
10393: GO 10395
10395: DISABLE
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10400: LD_ADDR_VAR 0 1
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_OWVAR 2
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 0
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 30
10432: PUSH
10433: LD_INT 1
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PPUSH
10449: CALL_OW 69
10453: ST_TO_ADDR
// if not depot then
10454: LD_VAR 0 1
10458: NOT
10459: IFFALSE 10463
// exit ;
10461: GO 10537
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10463: LD_ADDR_VAR 0 2
10467: PUSH
10468: LD_VAR 0 1
10472: PUSH
10473: LD_INT 1
10475: PPUSH
10476: LD_VAR 0 1
10480: PPUSH
10481: CALL_OW 12
10485: ARRAY
10486: PPUSH
10487: CALL_OW 274
10491: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: LD_INT 0
10502: PPUSH
10503: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10507: LD_VAR 0 2
10511: PPUSH
10512: LD_INT 2
10514: PPUSH
10515: LD_INT 0
10517: PPUSH
10518: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10522: LD_VAR 0 2
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: LD_INT 0
10532: PPUSH
10533: CALL_OW 277
// end ;
10537: PPOPN 2
10539: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10540: LD_EXP 36
10544: PUSH
10545: LD_EXP 64
10549: AND
10550: IFFALSE 10647
10552: GO 10554
10554: DISABLE
10555: LD_INT 0
10557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10558: LD_ADDR_VAR 0 1
10562: PUSH
10563: LD_INT 22
10565: PUSH
10566: LD_OWVAR 2
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 23
10590: PUSH
10591: LD_INT 0
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: PPUSH
10607: CALL_OW 69
10611: ST_TO_ADDR
// if not tmp then
10612: LD_VAR 0 1
10616: NOT
10617: IFFALSE 10621
// exit ;
10619: GO 10647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10621: LD_VAR 0 1
10625: PUSH
10626: LD_INT 1
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 12
10638: ARRAY
10639: PPUSH
10640: LD_INT 200
10642: PPUSH
10643: CALL_OW 234
// end ;
10647: PPOPN 1
10649: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10650: LD_EXP 36
10654: PUSH
10655: LD_EXP 65
10659: AND
10660: IFFALSE 10739
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10668: LD_ADDR_VAR 0 1
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_OWVAR 2
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: ST_TO_ADDR
// if not tmp then
10704: LD_VAR 0 1
10708: NOT
10709: IFFALSE 10713
// exit ;
10711: GO 10739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10713: LD_VAR 0 1
10717: PUSH
10718: LD_INT 1
10720: PPUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 12
10730: ARRAY
10731: PPUSH
10732: LD_INT 60
10734: PPUSH
10735: CALL_OW 234
// end ;
10739: PPOPN 1
10741: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10742: LD_EXP 36
10746: PUSH
10747: LD_EXP 66
10751: AND
10752: IFFALSE 10851
10754: GO 10756
10756: DISABLE
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
// begin enable ;
10761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10762: LD_ADDR_VAR 0 1
10766: PUSH
10767: LD_INT 22
10769: PUSH
10770: LD_OWVAR 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 61
10781: PUSH
10782: EMPTY
10783: LIST
10784: PUSH
10785: LD_INT 33
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: ST_TO_ADDR
// if not tmp then
10805: LD_VAR 0 1
10809: NOT
10810: IFFALSE 10814
// exit ;
10812: GO 10851
// for i in tmp do
10814: LD_ADDR_VAR 0 2
10818: PUSH
10819: LD_VAR 0 1
10823: PUSH
10824: FOR_IN
10825: IFFALSE 10849
// if IsControledBy ( i ) then
10827: LD_VAR 0 2
10831: PPUSH
10832: CALL_OW 312
10836: IFFALSE 10847
// ComUnlink ( i ) ;
10838: LD_VAR 0 2
10842: PPUSH
10843: CALL_OW 136
10847: GO 10824
10849: POP
10850: POP
// end ;
10851: PPOPN 2
10853: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10854: LD_EXP 36
10858: PUSH
10859: LD_EXP 67
10863: AND
10864: IFFALSE 11004
10866: GO 10868
10868: DISABLE
10869: LD_INT 0
10871: PPUSH
10872: PPUSH
// begin ToLua ( displayPowell(); ) ;
10873: LD_STRING displayPowell();
10875: PPUSH
10876: CALL_OW 559
// uc_side := 0 ;
10880: LD_ADDR_OWVAR 20
10884: PUSH
10885: LD_INT 0
10887: ST_TO_ADDR
// uc_nation := 2 ;
10888: LD_ADDR_OWVAR 21
10892: PUSH
10893: LD_INT 2
10895: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10896: LD_ADDR_OWVAR 37
10900: PUSH
10901: LD_INT 14
10903: ST_TO_ADDR
// vc_engine := engine_siberite ;
10904: LD_ADDR_OWVAR 39
10908: PUSH
10909: LD_INT 3
10911: ST_TO_ADDR
// vc_control := control_apeman ;
10912: LD_ADDR_OWVAR 38
10916: PUSH
10917: LD_INT 5
10919: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10920: LD_ADDR_OWVAR 40
10924: PUSH
10925: LD_INT 29
10927: ST_TO_ADDR
// un := CreateVehicle ;
10928: LD_ADDR_VAR 0 2
10932: PUSH
10933: CALL_OW 45
10937: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10938: LD_VAR 0 2
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10950: LD_INT 35
10952: PPUSH
10953: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10957: LD_VAR 0 2
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 69
10978: PPUSH
10979: LD_VAR 0 2
10983: PPUSH
10984: CALL_OW 74
10988: PPUSH
10989: CALL_OW 115
// until IsDead ( un ) ;
10993: LD_VAR 0 2
10997: PPUSH
10998: CALL_OW 301
11002: IFFALSE 10950
// end ;
11004: PPOPN 2
11006: END
// every 0 0$1 trigger StreamModeActive and sStu do
11007: LD_EXP 36
11011: PUSH
11012: LD_EXP 75
11016: AND
11017: IFFALSE 11033
11019: GO 11021
11021: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11022: LD_STRING displayStucuk();
11024: PPUSH
11025: CALL_OW 559
// ResetFog ;
11029: CALL_OW 335
// end ;
11033: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11034: LD_EXP 36
11038: PUSH
11039: LD_EXP 68
11043: AND
11044: IFFALSE 11185
11046: GO 11048
11048: DISABLE
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_INT 22
11060: PUSH
11061: LD_OWVAR 2
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 1
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 69
11088: ST_TO_ADDR
// if not tmp then
11089: LD_VAR 0 2
11093: NOT
11094: IFFALSE 11098
// exit ;
11096: GO 11185
// un := tmp [ rand ( 1 , tmp ) ] ;
11098: LD_ADDR_VAR 0 1
11102: PUSH
11103: LD_VAR 0 2
11107: PUSH
11108: LD_INT 1
11110: PPUSH
11111: LD_VAR 0 2
11115: PPUSH
11116: CALL_OW 12
11120: ARRAY
11121: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11122: LD_VAR 0 1
11126: PPUSH
11127: LD_INT 0
11129: PPUSH
11130: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: LD_OWVAR 3
11143: PUSH
11144: LD_VAR 0 1
11148: DIFF
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 74
11159: PPUSH
11160: CALL_OW 115
// wait ( 0 0$20 ) ;
11164: LD_INT 700
11166: PPUSH
11167: CALL_OW 67
// SetSide ( un , your_side ) ;
11171: LD_VAR 0 1
11175: PPUSH
11176: LD_OWVAR 2
11180: PPUSH
11181: CALL_OW 235
// end ;
11185: PPOPN 2
11187: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11188: LD_EXP 36
11192: PUSH
11193: LD_EXP 69
11197: AND
11198: IFFALSE 11304
11200: GO 11202
11202: DISABLE
11203: LD_INT 0
11205: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11206: LD_ADDR_VAR 0 1
11210: PUSH
11211: LD_INT 22
11213: PUSH
11214: LD_OWVAR 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 30
11228: PUSH
11229: LD_INT 0
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 30
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: ST_TO_ADDR
// if not depot then
11260: LD_VAR 0 1
11264: NOT
11265: IFFALSE 11269
// exit ;
11267: GO 11304
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11269: LD_VAR 0 1
11273: PUSH
11274: LD_INT 1
11276: ARRAY
11277: PPUSH
11278: CALL_OW 250
11282: PPUSH
11283: LD_VAR 0 1
11287: PUSH
11288: LD_INT 1
11290: ARRAY
11291: PPUSH
11292: CALL_OW 251
11296: PPUSH
11297: LD_INT 70
11299: PPUSH
11300: CALL_OW 495
// end ;
11304: PPOPN 1
11306: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11307: LD_EXP 36
11311: PUSH
11312: LD_EXP 70
11316: AND
11317: IFFALSE 11528
11319: GO 11321
11321: DISABLE
11322: LD_INT 0
11324: PPUSH
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11329: LD_ADDR_VAR 0 5
11333: PUSH
11334: LD_INT 22
11336: PUSH
11337: LD_OWVAR 2
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 21
11348: PUSH
11349: LD_INT 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: ST_TO_ADDR
// if not tmp then
11365: LD_VAR 0 5
11369: NOT
11370: IFFALSE 11374
// exit ;
11372: GO 11528
// for i in tmp do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_VAR 0 5
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11526
// begin d := rand ( 0 , 5 ) ;
11387: LD_ADDR_VAR 0 4
11391: PUSH
11392: LD_INT 0
11394: PPUSH
11395: LD_INT 5
11397: PPUSH
11398: CALL_OW 12
11402: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11403: LD_ADDR_VAR 0 2
11407: PUSH
11408: LD_VAR 0 1
11412: PPUSH
11413: CALL_OW 250
11417: PPUSH
11418: LD_VAR 0 4
11422: PPUSH
11423: LD_INT 3
11425: PPUSH
11426: LD_INT 12
11428: PPUSH
11429: CALL_OW 12
11433: PPUSH
11434: CALL_OW 272
11438: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11439: LD_ADDR_VAR 0 3
11443: PUSH
11444: LD_VAR 0 1
11448: PPUSH
11449: CALL_OW 251
11453: PPUSH
11454: LD_VAR 0 4
11458: PPUSH
11459: LD_INT 3
11461: PPUSH
11462: LD_INT 12
11464: PPUSH
11465: CALL_OW 12
11469: PPUSH
11470: CALL_OW 273
11474: ST_TO_ADDR
// if ValidHex ( x , y ) then
11475: LD_VAR 0 2
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: CALL_OW 488
11489: IFFALSE 11524
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11491: LD_VAR 0 1
11495: PPUSH
11496: LD_VAR 0 2
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 3
11508: PPUSH
11509: LD_INT 6
11511: PPUSH
11512: CALL_OW 12
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 483
// end ;
11524: GO 11384
11526: POP
11527: POP
// end ;
11528: PPOPN 5
11530: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11531: LD_EXP 36
11535: PUSH
11536: LD_EXP 71
11540: AND
11541: IFFALSE 11635
11543: GO 11545
11545: DISABLE
11546: LD_INT 0
11548: PPUSH
11549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11550: LD_ADDR_VAR 0 2
11554: PUSH
11555: LD_INT 22
11557: PUSH
11558: LD_OWVAR 2
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 32
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 21
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 69
11596: ST_TO_ADDR
// if not tmp then
11597: LD_VAR 0 2
11601: NOT
11602: IFFALSE 11606
// exit ;
11604: GO 11635
// for i in tmp do
11606: LD_ADDR_VAR 0 1
11610: PUSH
11611: LD_VAR 0 2
11615: PUSH
11616: FOR_IN
11617: IFFALSE 11633
// SetFuel ( i , 0 ) ;
11619: LD_VAR 0 1
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 240
11631: GO 11616
11633: POP
11634: POP
// end ;
11635: PPOPN 2
11637: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11638: LD_EXP 36
11642: PUSH
11643: LD_EXP 72
11647: AND
11648: IFFALSE 11714
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_INT 22
11663: PUSH
11664: LD_OWVAR 2
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 30
11675: PUSH
11676: LD_INT 29
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: ST_TO_ADDR
// if not tmp then
11692: LD_VAR 0 1
11696: NOT
11697: IFFALSE 11701
// exit ;
11699: GO 11714
// DestroyUnit ( tmp [ 1 ] ) ;
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: PPUSH
11710: CALL_OW 65
// end ;
11714: PPOPN 1
11716: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11717: LD_EXP 36
11721: PUSH
11722: LD_EXP 74
11726: AND
11727: IFFALSE 11856
11729: GO 11731
11731: DISABLE
11732: LD_INT 0
11734: PPUSH
// begin uc_side := 0 ;
11735: LD_ADDR_OWVAR 20
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// uc_nation := nation_arabian ;
11743: LD_ADDR_OWVAR 21
11747: PUSH
11748: LD_INT 2
11750: ST_TO_ADDR
// hc_gallery :=  ;
11751: LD_ADDR_OWVAR 33
11755: PUSH
11756: LD_STRING 
11758: ST_TO_ADDR
// hc_name :=  ;
11759: LD_ADDR_OWVAR 26
11763: PUSH
11764: LD_STRING 
11766: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11767: LD_INT 1
11769: PPUSH
11770: LD_INT 11
11772: PPUSH
11773: LD_INT 10
11775: PPUSH
11776: CALL_OW 380
// un := CreateHuman ;
11780: LD_ADDR_VAR 0 1
11784: PUSH
11785: CALL_OW 44
11789: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11802: LD_INT 35
11804: PPUSH
11805: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11809: LD_VAR 0 1
11813: PPUSH
11814: LD_INT 22
11816: PUSH
11817: LD_OWVAR 2
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: PPUSH
11831: LD_VAR 0 1
11835: PPUSH
11836: CALL_OW 74
11840: PPUSH
11841: CALL_OW 115
// until IsDead ( un ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL_OW 301
11854: IFFALSE 11802
// end ;
11856: PPOPN 1
11858: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11859: LD_EXP 36
11863: PUSH
11864: LD_EXP 76
11868: AND
11869: IFFALSE 11881
11871: GO 11873
11873: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11874: LD_STRING earthquake(getX(game), 0, 32)
11876: PPUSH
11877: CALL_OW 559
11881: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11882: LD_EXP 36
11886: PUSH
11887: LD_EXP 77
11891: AND
11892: IFFALSE 11983
11894: GO 11896
11896: DISABLE
11897: LD_INT 0
11899: PPUSH
// begin enable ;
11900: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11901: LD_ADDR_VAR 0 1
11905: PUSH
11906: LD_INT 22
11908: PUSH
11909: LD_OWVAR 2
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 2
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 33
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: ST_TO_ADDR
// if not tmp then
11948: LD_VAR 0 1
11952: NOT
11953: IFFALSE 11957
// exit ;
11955: GO 11983
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11957: LD_VAR 0 1
11961: PUSH
11962: LD_INT 1
11964: PPUSH
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 12
11974: ARRAY
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 234
// end ;
11983: PPOPN 1
11985: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11986: LD_EXP 36
11990: PUSH
11991: LD_EXP 78
11995: AND
11996: IFFALSE 12137
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
12005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: LD_INT 22
12013: PUSH
12014: LD_OWVAR 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: ST_TO_ADDR
// if not tmp then
12042: LD_VAR 0 3
12046: NOT
12047: IFFALSE 12051
// exit ;
12049: GO 12137
// un := tmp [ rand ( 1 , tmp ) ] ;
12051: LD_ADDR_VAR 0 2
12055: PUSH
12056: LD_VAR 0 3
12060: PUSH
12061: LD_INT 1
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: CALL_OW 12
12073: ARRAY
12074: ST_TO_ADDR
// if Crawls ( un ) then
12075: LD_VAR 0 2
12079: PPUSH
12080: CALL_OW 318
12084: IFFALSE 12095
// ComWalk ( un ) ;
12086: LD_VAR 0 2
12090: PPUSH
12091: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12095: LD_VAR 0 2
12099: PPUSH
12100: LD_INT 9
12102: PPUSH
12103: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12107: LD_INT 28
12109: PPUSH
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 2
12117: PPUSH
12118: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12122: LD_INT 29
12124: PPUSH
12125: LD_OWVAR 2
12129: PPUSH
12130: LD_INT 2
12132: PPUSH
12133: CALL_OW 322
// end ;
12137: PPOPN 3
12139: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12140: LD_EXP 36
12144: PUSH
12145: LD_EXP 79
12149: AND
12150: IFFALSE 12261
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12160: LD_ADDR_VAR 0 3
12164: PUSH
12165: LD_INT 22
12167: PUSH
12168: LD_OWVAR 2
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 25
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 69
12195: ST_TO_ADDR
// if not tmp then
12196: LD_VAR 0 3
12200: NOT
12201: IFFALSE 12205
// exit ;
12203: GO 12261
// un := tmp [ rand ( 1 , tmp ) ] ;
12205: LD_ADDR_VAR 0 2
12209: PUSH
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_VAR 0 3
12222: PPUSH
12223: CALL_OW 12
12227: ARRAY
12228: ST_TO_ADDR
// if Crawls ( un ) then
12229: LD_VAR 0 2
12233: PPUSH
12234: CALL_OW 318
12238: IFFALSE 12249
// ComWalk ( un ) ;
12240: LD_VAR 0 2
12244: PPUSH
12245: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12249: LD_VAR 0 2
12253: PPUSH
12254: LD_INT 8
12256: PPUSH
12257: CALL_OW 336
// end ;
12261: PPOPN 3
12263: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12264: LD_EXP 36
12268: PUSH
12269: LD_EXP 80
12273: AND
12274: IFFALSE 12418
12276: GO 12278
12278: DISABLE
12279: LD_INT 0
12281: PPUSH
12282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12283: LD_ADDR_VAR 0 2
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_OWVAR 2
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 34
12315: PUSH
12316: LD_INT 12
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 34
12325: PUSH
12326: LD_INT 51
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 34
12335: PUSH
12336: LD_INT 32
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PPUSH
12354: CALL_OW 69
12358: ST_TO_ADDR
// if not tmp then
12359: LD_VAR 0 2
12363: NOT
12364: IFFALSE 12368
// exit ;
12366: GO 12418
// for i in tmp do
12368: LD_ADDR_VAR 0 1
12372: PUSH
12373: LD_VAR 0 2
12377: PUSH
12378: FOR_IN
12379: IFFALSE 12416
// if GetCargo ( i , mat_artifact ) = 0 then
12381: LD_VAR 0 1
12385: PPUSH
12386: LD_INT 4
12388: PPUSH
12389: CALL_OW 289
12393: PUSH
12394: LD_INT 0
12396: EQUAL
12397: IFFALSE 12414
// SetCargo ( i , mat_siberit , 100 ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: LD_INT 3
12406: PPUSH
12407: LD_INT 100
12409: PPUSH
12410: CALL_OW 290
12414: GO 12378
12416: POP
12417: POP
// end ;
12418: PPOPN 2
12420: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12421: LD_EXP 36
12425: PUSH
12426: LD_EXP 81
12430: AND
12431: IFFALSE 12584
12433: GO 12435
12435: DISABLE
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_OWVAR 2
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: ST_TO_ADDR
// if not tmp then
12462: LD_VAR 0 2
12466: NOT
12467: IFFALSE 12471
// exit ;
12469: GO 12584
// for i := 1 to 2 do
12471: LD_ADDR_VAR 0 1
12475: PUSH
12476: DOUBLE
12477: LD_INT 1
12479: DEC
12480: ST_TO_ADDR
12481: LD_INT 2
12483: PUSH
12484: FOR_TO
12485: IFFALSE 12582
// begin uc_side := your_side ;
12487: LD_ADDR_OWVAR 20
12491: PUSH
12492: LD_OWVAR 2
12496: ST_TO_ADDR
// uc_nation := nation_american ;
12497: LD_ADDR_OWVAR 21
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// vc_chassis := us_morphling ;
12505: LD_ADDR_OWVAR 37
12509: PUSH
12510: LD_INT 5
12512: ST_TO_ADDR
// vc_engine := engine_siberite ;
12513: LD_ADDR_OWVAR 39
12517: PUSH
12518: LD_INT 3
12520: ST_TO_ADDR
// vc_control := control_computer ;
12521: LD_ADDR_OWVAR 38
12525: PUSH
12526: LD_INT 3
12528: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12529: LD_ADDR_OWVAR 40
12533: PUSH
12534: LD_INT 10
12536: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
12537: CALL_OW 45
12541: PPUSH
12542: LD_VAR 0 2
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: CALL_OW 250
12555: PPUSH
12556: LD_VAR 0 2
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: CALL_OW 251
12569: PPUSH
12570: LD_INT 12
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 50
// end ;
12580: GO 12484
12582: POP
12583: POP
// end ;
12584: PPOPN 2
12586: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12587: LD_EXP 36
12591: PUSH
12592: LD_EXP 82
12596: AND
12597: IFFALSE 12819
12599: GO 12601
12601: DISABLE
12602: LD_INT 0
12604: PPUSH
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12610: LD_ADDR_VAR 0 6
12614: PUSH
12615: LD_INT 22
12617: PUSH
12618: LD_OWVAR 2
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 21
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: LD_INT 23
12642: PUSH
12643: LD_INT 0
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 69
12663: ST_TO_ADDR
// if not tmp then
12664: LD_VAR 0 6
12668: NOT
12669: IFFALSE 12673
// exit ;
12671: GO 12819
// s1 := rand ( 1 , 4 ) ;
12673: LD_ADDR_VAR 0 2
12677: PUSH
12678: LD_INT 1
12680: PPUSH
12681: LD_INT 4
12683: PPUSH
12684: CALL_OW 12
12688: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12689: LD_ADDR_VAR 0 4
12693: PUSH
12694: LD_VAR 0 6
12698: PUSH
12699: LD_INT 1
12701: ARRAY
12702: PPUSH
12703: LD_VAR 0 2
12707: PPUSH
12708: CALL_OW 259
12712: ST_TO_ADDR
// if s1 = 1 then
12713: LD_VAR 0 2
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// s2 := rand ( 2 , 4 ) else
12723: LD_ADDR_VAR 0 3
12727: PUSH
12728: LD_INT 2
12730: PPUSH
12731: LD_INT 4
12733: PPUSH
12734: CALL_OW 12
12738: ST_TO_ADDR
12739: GO 12749
// s2 := 1 ;
12741: LD_ADDR_VAR 0 3
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12749: LD_ADDR_VAR 0 5
12753: PUSH
12754: LD_VAR 0 6
12758: PUSH
12759: LD_INT 1
12761: ARRAY
12762: PPUSH
12763: LD_VAR 0 3
12767: PPUSH
12768: CALL_OW 259
12772: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12773: LD_VAR 0 6
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: LD_VAR 0 2
12786: PPUSH
12787: LD_VAR 0 5
12791: PPUSH
12792: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12796: LD_VAR 0 6
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: CALL_OW 237
// end ;
12819: PPOPN 6
12821: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12822: LD_EXP 36
12826: PUSH
12827: LD_EXP 83
12831: AND
12832: IFFALSE 12911
12834: GO 12836
12836: DISABLE
12837: LD_INT 0
12839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12840: LD_ADDR_VAR 0 1
12844: PUSH
12845: LD_INT 22
12847: PUSH
12848: LD_OWVAR 2
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 30
12859: PUSH
12860: LD_INT 3
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 69
12875: ST_TO_ADDR
// if not tmp then
12876: LD_VAR 0 1
12880: NOT
12881: IFFALSE 12885
// exit ;
12883: GO 12911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12885: LD_VAR 0 1
12889: PUSH
12890: LD_INT 1
12892: PPUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 12
12902: ARRAY
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 234
// end ;
12911: PPOPN 1
12913: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12914: LD_EXP 36
12918: PUSH
12919: LD_EXP 84
12923: AND
12924: IFFALSE 13036
12926: GO 12928
12928: DISABLE
12929: LD_INT 0
12931: PPUSH
12932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12933: LD_ADDR_VAR 0 2
12937: PUSH
12938: LD_INT 22
12940: PUSH
12941: LD_OWVAR 2
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: LD_INT 30
12955: PUSH
12956: LD_INT 27
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 30
12965: PUSH
12966: LD_INT 26
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 30
12975: PUSH
12976: LD_INT 28
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PPUSH
12993: CALL_OW 69
12997: ST_TO_ADDR
// if not tmp then
12998: LD_VAR 0 2
13002: NOT
13003: IFFALSE 13007
// exit ;
13005: GO 13036
// for i in tmp do
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_VAR 0 2
13016: PUSH
13017: FOR_IN
13018: IFFALSE 13034
// SetLives ( i , 1 ) ;
13020: LD_VAR 0 1
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 234
13032: GO 13017
13034: POP
13035: POP
// end ;
13036: PPOPN 2
13038: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13039: LD_EXP 36
13043: PUSH
13044: LD_EXP 85
13048: AND
13049: IFFALSE 13323
13051: GO 13053
13053: DISABLE
13054: LD_INT 0
13056: PPUSH
13057: PPUSH
13058: PPUSH
// begin i := rand ( 1 , 7 ) ;
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_INT 1
13066: PPUSH
13067: LD_INT 7
13069: PPUSH
13070: CALL_OW 12
13074: ST_TO_ADDR
// case i of 1 :
13075: LD_VAR 0 1
13079: PUSH
13080: LD_INT 1
13082: DOUBLE
13083: EQUAL
13084: IFTRUE 13088
13086: GO 13098
13088: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13089: LD_STRING earthquake(getX(game), 0, 32)
13091: PPUSH
13092: CALL_OW 559
13096: GO 13323
13098: LD_INT 2
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13120
13106: POP
// begin ToLua ( displayStucuk(); ) ;
13107: LD_STRING displayStucuk();
13109: PPUSH
13110: CALL_OW 559
// ResetFog ;
13114: CALL_OW 335
// end ; 3 :
13118: GO 13323
13120: LD_INT 3
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13232
13128: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13129: LD_ADDR_VAR 0 2
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_OWVAR 2
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 25
13148: PUSH
13149: LD_INT 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 69
13164: ST_TO_ADDR
// if not tmp then
13165: LD_VAR 0 2
13169: NOT
13170: IFFALSE 13174
// exit ;
13172: GO 13323
// un := tmp [ rand ( 1 , tmp ) ] ;
13174: LD_ADDR_VAR 0 3
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_VAR 0 2
13191: PPUSH
13192: CALL_OW 12
13196: ARRAY
13197: ST_TO_ADDR
// if Crawls ( un ) then
13198: LD_VAR 0 3
13202: PPUSH
13203: CALL_OW 318
13207: IFFALSE 13218
// ComWalk ( un ) ;
13209: LD_VAR 0 3
13213: PPUSH
13214: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13218: LD_VAR 0 3
13222: PPUSH
13223: LD_INT 8
13225: PPUSH
13226: CALL_OW 336
// end ; 4 :
13230: GO 13323
13232: LD_INT 4
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13301
13240: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13241: LD_ADDR_VAR 0 2
13245: PUSH
13246: LD_INT 22
13248: PUSH
13249: LD_OWVAR 2
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 30
13260: PUSH
13261: LD_INT 29
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 69
13276: ST_TO_ADDR
// if not tmp then
13277: LD_VAR 0 2
13281: NOT
13282: IFFALSE 13286
// exit ;
13284: GO 13323
// DestroyUnit ( tmp [ 1 ] ) ;
13286: LD_VAR 0 2
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: CALL_OW 65
// end ; 5 .. 7 :
13299: GO 13323
13301: LD_INT 5
13303: DOUBLE
13304: GREATEREQUAL
13305: IFFALSE 13313
13307: LD_INT 7
13309: DOUBLE
13310: LESSEQUAL
13311: IFTRUE 13315
13313: GO 13322
13315: POP
// StreamSibBomb ; end ;
13316: CALL 9603 0 0
13320: GO 13323
13322: POP
// end ;
13323: PPOPN 3
13325: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13326: LD_EXP 36
13330: PUSH
13331: LD_EXP 86
13335: AND
13336: IFFALSE 13492
13338: GO 13340
13340: DISABLE
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
13345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_INT 81
13353: PUSH
13354: LD_OWVAR 2
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 21
13368: PUSH
13369: LD_INT 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 21
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 69
13399: ST_TO_ADDR
// if not tmp then
13400: LD_VAR 0 2
13404: NOT
13405: IFFALSE 13409
// exit ;
13407: GO 13492
// p := 0 ;
13409: LD_ADDR_VAR 0 3
13413: PUSH
13414: LD_INT 0
13416: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13417: LD_INT 35
13419: PPUSH
13420: CALL_OW 67
// p := p + 1 ;
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: LD_VAR 0 3
13433: PUSH
13434: LD_INT 1
13436: PLUS
13437: ST_TO_ADDR
// for i in tmp do
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_VAR 0 2
13447: PUSH
13448: FOR_IN
13449: IFFALSE 13480
// if GetLives ( i ) < 1000 then
13451: LD_VAR 0 1
13455: PPUSH
13456: CALL_OW 256
13460: PUSH
13461: LD_INT 1000
13463: LESS
13464: IFFALSE 13478
// SetLives ( i , 1000 ) ;
13466: LD_VAR 0 1
13470: PPUSH
13471: LD_INT 1000
13473: PPUSH
13474: CALL_OW 234
13478: GO 13448
13480: POP
13481: POP
// until p > 20 ;
13482: LD_VAR 0 3
13486: PUSH
13487: LD_INT 20
13489: GREATER
13490: IFFALSE 13417
// end ;
13492: PPOPN 3
13494: END
// every 0 0$1 trigger StreamModeActive and sTime do
13495: LD_EXP 36
13499: PUSH
13500: LD_EXP 87
13504: AND
13505: IFFALSE 13540
13507: GO 13509
13509: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13510: LD_INT 28
13512: PPUSH
13513: LD_OWVAR 2
13517: PPUSH
13518: LD_INT 2
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13525: LD_INT 30
13527: PPUSH
13528: LD_OWVAR 2
13532: PPUSH
13533: LD_INT 2
13535: PPUSH
13536: CALL_OW 322
// end ;
13540: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13541: LD_EXP 36
13545: PUSH
13546: LD_EXP 88
13550: AND
13551: IFFALSE 13672
13553: GO 13555
13555: DISABLE
13556: LD_INT 0
13558: PPUSH
13559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: LD_INT 22
13567: PUSH
13568: LD_OWVAR 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 21
13579: PUSH
13580: LD_INT 1
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: LD_INT 23
13592: PUSH
13593: LD_INT 0
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PPUSH
13609: CALL_OW 69
13613: ST_TO_ADDR
// if not tmp then
13614: LD_VAR 0 2
13618: NOT
13619: IFFALSE 13623
// exit ;
13621: GO 13672
// for i in tmp do
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_VAR 0 2
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13670
// begin if Crawls ( i ) then
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 318
13645: IFFALSE 13656
// ComWalk ( i ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 138
// SetClass ( i , 2 ) ;
13656: LD_VAR 0 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 336
// end ;
13668: GO 13633
13670: POP
13671: POP
// end ;
13672: PPOPN 2
13674: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13675: LD_EXP 36
13679: PUSH
13680: LD_EXP 89
13684: AND
13685: IFFALSE 13966
13687: GO 13689
13689: DISABLE
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13695: LD_OWVAR 2
13699: PPUSH
13700: LD_INT 9
13702: PPUSH
13703: LD_INT 1
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13713: LD_INT 9
13715: PPUSH
13716: LD_OWVAR 2
13720: PPUSH
13721: CALL_OW 343
// uc_side := 9 ;
13725: LD_ADDR_OWVAR 20
13729: PUSH
13730: LD_INT 9
13732: ST_TO_ADDR
// uc_nation := 2 ;
13733: LD_ADDR_OWVAR 21
13737: PUSH
13738: LD_INT 2
13740: ST_TO_ADDR
// hc_name := Dark Warrior ;
13741: LD_ADDR_OWVAR 26
13745: PUSH
13746: LD_STRING Dark Warrior
13748: ST_TO_ADDR
// hc_gallery :=  ;
13749: LD_ADDR_OWVAR 33
13753: PUSH
13754: LD_STRING 
13756: ST_TO_ADDR
// hc_noskilllimit := true ;
13757: LD_ADDR_OWVAR 76
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13765: LD_ADDR_OWVAR 31
13769: PUSH
13770: LD_INT 30
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 30
13778: PUSH
13779: LD_INT 30
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: ST_TO_ADDR
// un := CreateHuman ;
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: CALL_OW 44
13797: ST_TO_ADDR
// hc_noskilllimit := false ;
13798: LD_ADDR_OWVAR 76
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 51
// p := 0 ;
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_INT 0
13825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13826: LD_INT 35
13828: PPUSH
13829: CALL_OW 67
// p := p + 1 ;
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_VAR 0 2
13842: PUSH
13843: LD_INT 1
13845: PLUS
13846: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13847: LD_VAR 0 3
13851: PPUSH
13852: CALL_OW 256
13856: PUSH
13857: LD_INT 1000
13859: LESS
13860: IFFALSE 13874
// SetLives ( un , 1000 ) ;
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1000
13869: PPUSH
13870: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13874: LD_VAR 0 3
13878: PPUSH
13879: LD_INT 81
13881: PUSH
13882: LD_OWVAR 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 91
13893: PUSH
13894: LD_VAR 0 3
13898: PUSH
13899: LD_INT 30
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PPUSH
13911: CALL_OW 69
13915: PPUSH
13916: LD_VAR 0 3
13920: PPUSH
13921: CALL_OW 74
13925: PPUSH
13926: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13930: LD_VAR 0 2
13934: PUSH
13935: LD_INT 60
13937: GREATER
13938: PUSH
13939: LD_VAR 0 3
13943: PPUSH
13944: CALL_OW 301
13948: OR
13949: IFFALSE 13826
// if un then
13951: LD_VAR 0 3
13955: IFFALSE 13966
// RemoveUnit ( un ) ;
13957: LD_VAR 0 3
13961: PPUSH
13962: CALL_OW 64
// end ;
13966: PPOPN 3
13968: END
