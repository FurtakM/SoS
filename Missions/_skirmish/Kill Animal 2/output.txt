// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1306
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1304
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1304
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: IFFALSE 1277
1257: PUSH
1258: LD_VAR 0 3
1262: PPUSH
1263: LD_VAR 0 4
1267: PPUSH
1268: CALL_OW 428
1272: PUSH
1273: LD_INT 0
1275: EQUAL
1276: AND
1277: IFFALSE 1304
// ComMoveXY ( hunters [ i ] , x , y ) ;
1279: LD_EXP 6
1283: PUSH
1284: LD_VAR 0 1
1288: ARRAY
1289: PPUSH
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: CALL_OW 111
// end ; end ; end ;
1304: GO 964
1306: POP
1307: POP
// end ; end_of_file
1308: PPOPN 5
1310: END
// on UnitGoesToRed ( un ) do var i ;
1311: LD_INT 0
1313: PPUSH
// begin if GetSide ( un ) = 1 then
1314: LD_VAR 0 1
1318: PPUSH
1319: CALL_OW 255
1323: PUSH
1324: LD_INT 1
1326: EQUAL
1327: IFFALSE 1336
// YouLost ( hunt2 ) ;
1329: LD_STRING hunt2
1331: PPUSH
1332: CALL_OW 104
// if GetSide ( un ) > 1 then
1336: LD_VAR 0 1
1340: PPUSH
1341: CALL_OW 255
1345: PUSH
1346: LD_INT 1
1348: GREATER
1349: IFFALSE 1402
// begin for i := 1 to 6 do
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: DOUBLE
1357: LD_INT 1
1359: DEC
1360: ST_TO_ADDR
1361: LD_INT 6
1363: PUSH
1364: FOR_TO
1365: IFFALSE 1388
// begin wait ( 0 0$1 ) ;
1367: LD_INT 35
1369: PPUSH
1370: CALL_OW 67
// SetLives ( un , 249 ) ;
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_INT 249
1381: PPUSH
1382: CALL_OW 234
// end ;
1386: GO 1364
1388: POP
1389: POP
// SetLives ( un , 1000 ) ;
1390: LD_VAR 0 1
1394: PPUSH
1395: LD_INT 1000
1397: PPUSH
1398: CALL_OW 234
// end ; end ;
1402: PPOPN 2
1404: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1405: LD_VAR 0 1
1409: PUSH
1410: LD_INT 1
1412: EQUAL
1413: IFFALSE 1425
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 1
1423: GREATER
1424: AND
1425: IFFALSE 1434
// YouLost ( hunt1 ) ;
1427: LD_STRING hunt1
1429: PPUSH
1430: CALL_OW 104
// end ;
1434: PPOPN 2
1436: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1437: LD_INT 0
1439: PPUSH
// begin point := 0 ;
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 0
1447: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 257
1457: PUSH
1458: LD_INT 20
1460: DOUBLE
1461: EQUAL
1462: IFTRUE 1466
1464: GO 1477
1466: POP
// point := 10 ; class_horse :
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_INT 10
1474: ST_TO_ADDR
1475: GO 1611
1477: LD_INT 21
1479: DOUBLE
1480: EQUAL
1481: IFTRUE 1485
1483: GO 1496
1485: POP
// point := 10 ; class_baggie :
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: LD_INT 10
1493: ST_TO_ADDR
1494: GO 1611
1496: LD_INT 13
1498: DOUBLE
1499: EQUAL
1500: IFTRUE 1504
1502: GO 1515
1504: POP
// point := 5 ; class_phororhacos :
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_INT 5
1512: ST_TO_ADDR
1513: GO 1611
1515: LD_INT 18
1517: DOUBLE
1518: EQUAL
1519: IFTRUE 1523
1521: GO 1534
1523: POP
// point := 10 ; class_tiger :
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: LD_INT 10
1531: ST_TO_ADDR
1532: GO 1611
1534: LD_INT 14
1536: DOUBLE
1537: EQUAL
1538: IFTRUE 1542
1540: GO 1553
1542: POP
// point := 20 ; class_apeman :
1543: LD_ADDR_VAR 0 4
1547: PUSH
1548: LD_INT 20
1550: ST_TO_ADDR
1551: GO 1611
1553: LD_INT 12
1555: DOUBLE
1556: EQUAL
1557: IFTRUE 1561
1559: GO 1572
1561: POP
// point := 30 ; class_apeman_soldier :
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_INT 30
1569: ST_TO_ADDR
1570: GO 1611
1572: LD_INT 15
1574: DOUBLE
1575: EQUAL
1576: IFTRUE 1580
1578: GO 1591
1580: POP
// point := 50 ; class_frog :
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_INT 50
1588: ST_TO_ADDR
1589: GO 1611
1591: LD_INT 19
1593: DOUBLE
1594: EQUAL
1595: IFTRUE 1599
1597: GO 1610
1599: POP
// point := 10 ; end ;
1600: LD_ADDR_VAR 0 4
1604: PUSH
1605: LD_INT 10
1607: ST_TO_ADDR
1608: GO 1611
1610: POP
// if point then
1611: LD_VAR 0 4
1615: IFFALSE 1654
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1617: LD_ADDR_EXP 5
1621: PUSH
1622: LD_EXP 5
1626: PPUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_EXP 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_VAR 0 4
1647: PLUS
1648: PPUSH
1649: CALL_OW 1
1653: ST_TO_ADDR
// end ;
1654: PPOPN 4
1656: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1657: LD_INT 22
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: PUSH
1672: LD_INT 10
1674: LESS
1675: IFFALSE 1789
1677: GO 1679
1679: DISABLE
// begin enable ;
1680: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1681: LD_INT 2
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 4
1692: PPUSH
1693: CALL_OW 12
1697: PUSH
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 2
1703: PPUSH
1704: CALL_OW 12
1708: PUSH
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: PUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: CALL_OW 12
1730: PUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 4
1736: PPUSH
1737: CALL_OW 12
1741: PUSH
1742: LD_INT 0
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: CALL_OW 12
1752: PUSH
1753: LD_INT 0
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: CALL_OW 12
1763: PUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 2
1769: PPUSH
1770: CALL_OW 12
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL 391 0 3
// end ;
1789: END
// every 0 0$1 do var i ;
1790: GO 1792
1792: DISABLE
1793: LD_INT 0
1795: PPUSH
// begin enable ;
1796: ENABLE
// display_strings := [ ] ;
1797: LD_ADDR_OWVAR 47
1801: PUSH
1802: EMPTY
1803: ST_TO_ADDR
// for i := 1 to huntersAmount do
1804: LD_ADDR_VAR 0 1
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_EXP 3
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1954
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1822: LD_ADDR_OWVAR 47
1826: PUSH
1827: LD_OWVAR 47
1831: PUSH
1832: LD_STRING #player
1834: PUSH
1835: LD_VAR 0 1
1839: STR
1840: PUSH
1841: LD_VAR 0 1
1845: PUSH
1846: LD_EXP 5
1850: PUSH
1851: LD_VAR 0 1
1855: ARRAY
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: ADD
1862: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1863: LD_EXP 5
1867: PUSH
1868: LD_VAR 0 1
1872: ARRAY
1873: PUSH
1874: LD_INT 750
1876: PUSH
1877: LD_INT 1250
1879: PUSH
1880: LD_INT 2000
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_OWVAR 67
1892: ARRAY
1893: GREATEREQUAL
1894: IFFALSE 1952
// begin if i = 1 then
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 1
1903: EQUAL
1904: IFFALSE 1945
// begin DialogueOn ;
1906: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1910: LD_STRING ACH_HUNT
1912: PPUSH
1913: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1917: LD_ADDR_OWVAR 47
1921: PUSH
1922: LD_STRING #hunting-win
1924: PUSH
1925: EMPTY
1926: LIST
1927: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1928: LD_INT 175
1930: PPUSH
1931: CALL_OW 68
// YouWin ;
1935: CALL_OW 103
// DialogueOff ;
1939: CALL_OW 7
// end else
1943: GO 1952
// YouLost ( hunt3 ) ;
1945: LD_STRING hunt3
1947: PPUSH
1948: CALL_OW 104
// end ; end ;
1952: GO 1819
1954: POP
1955: POP
// end ; end_of_file end_of_file
1956: PPOPN 1
1958: END
// export globalGameSaveCounter ; every 0 0$1 do
1959: GO 1961
1961: DISABLE
// begin enable ;
1962: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1963: LD_STRING updateTimer(
1965: PUSH
1966: LD_OWVAR 1
1970: STR
1971: PUSH
1972: LD_STRING );
1974: STR
1975: PPUSH
1976: CALL_OW 559
// end ;
1980: END
// every 0 0$1 do
1981: GO 1983
1983: DISABLE
// begin globalGameSaveCounter := 0 ;
1984: LD_ADDR_EXP 7
1988: PUSH
1989: LD_INT 0
1991: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1992: LD_STRING setGameSaveCounter(0)
1994: PPUSH
1995: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1999: LD_STRING initStreamRollete();
2001: PPUSH
2002: CALL_OW 559
// InitStreamMode ;
2006: CALL 3351 0 0
// DefineStreamItems ( false ) ;
2010: LD_INT 0
2012: PPUSH
2013: CALL 3815 0 1
// end ;
2017: END
// export function SOS_MapStart ( ) ; begin
2018: LD_INT 0
2020: PPUSH
// if streamModeActive then
2021: LD_EXP 8
2025: IFFALSE 2034
// DefineStreamItems ( true ) ;
2027: LD_INT 1
2029: PPUSH
2030: CALL 3815 0 1
// UpdateLuaVariables ( ) ;
2034: CALL 2051 0 0
// UpdateFactoryWaypoints ( ) ;
2038: CALL 16937 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2042: CALL 17189 0 0
// end ;
2046: LD_VAR 0 1
2050: RET
// function UpdateLuaVariables ( ) ; begin
2051: LD_INT 0
2053: PPUSH
// if globalGameSaveCounter then
2054: LD_EXP 7
2058: IFFALSE 2092
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2060: LD_ADDR_EXP 7
2064: PUSH
2065: LD_EXP 7
2069: PPUSH
2070: CALL 63933 0 1
2074: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2075: LD_STRING setGameSaveCounter(
2077: PUSH
2078: LD_EXP 7
2082: STR
2083: PUSH
2084: LD_STRING )
2086: STR
2087: PPUSH
2088: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2092: LD_STRING setGameDifficulty(
2094: PUSH
2095: LD_OWVAR 67
2099: STR
2100: PUSH
2101: LD_STRING )
2103: STR
2104: PPUSH
2105: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2109: LD_STRING displayDifficulty(
2111: PUSH
2112: LD_OWVAR 67
2116: STR
2117: PUSH
2118: LD_STRING )
2120: STR
2121: PPUSH
2122: CALL_OW 559
// end ;
2126: LD_VAR 0 1
2130: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2131: LD_INT 0
2133: PPUSH
// if p2 = stream_mode then
2134: LD_VAR 0 2
2138: PUSH
2139: LD_INT 100
2141: EQUAL
2142: IFFALSE 3145
// begin if not StreamModeActive then
2144: LD_EXP 8
2148: NOT
2149: IFFALSE 2159
// StreamModeActive := true ;
2151: LD_ADDR_EXP 8
2155: PUSH
2156: LD_INT 1
2158: ST_TO_ADDR
// if p3 = 0 then
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 0
2166: EQUAL
2167: IFFALSE 2173
// InitStreamMode ;
2169: CALL 3351 0 0
// if p3 = 1 then
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 1
2180: EQUAL
2181: IFFALSE 2191
// sRocket := true ;
2183: LD_ADDR_EXP 13
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// if p3 = 2 then
2191: LD_VAR 0 3
2195: PUSH
2196: LD_INT 2
2198: EQUAL
2199: IFFALSE 2209
// sSpeed := true ;
2201: LD_ADDR_EXP 12
2205: PUSH
2206: LD_INT 1
2208: ST_TO_ADDR
// if p3 = 3 then
2209: LD_VAR 0 3
2213: PUSH
2214: LD_INT 3
2216: EQUAL
2217: IFFALSE 2227
// sEngine := true ;
2219: LD_ADDR_EXP 14
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// if p3 = 4 then
2227: LD_VAR 0 3
2231: PUSH
2232: LD_INT 4
2234: EQUAL
2235: IFFALSE 2245
// sSpec := true ;
2237: LD_ADDR_EXP 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// if p3 = 5 then
2245: LD_VAR 0 3
2249: PUSH
2250: LD_INT 5
2252: EQUAL
2253: IFFALSE 2263
// sLevel := true ;
2255: LD_ADDR_EXP 15
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// if p3 = 6 then
2263: LD_VAR 0 3
2267: PUSH
2268: LD_INT 6
2270: EQUAL
2271: IFFALSE 2281
// sArmoury := true ;
2273: LD_ADDR_EXP 16
2277: PUSH
2278: LD_INT 1
2280: ST_TO_ADDR
// if p3 = 7 then
2281: LD_VAR 0 3
2285: PUSH
2286: LD_INT 7
2288: EQUAL
2289: IFFALSE 2299
// sRadar := true ;
2291: LD_ADDR_EXP 17
2295: PUSH
2296: LD_INT 1
2298: ST_TO_ADDR
// if p3 = 8 then
2299: LD_VAR 0 3
2303: PUSH
2304: LD_INT 8
2306: EQUAL
2307: IFFALSE 2317
// sBunker := true ;
2309: LD_ADDR_EXP 18
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// if p3 = 9 then
2317: LD_VAR 0 3
2321: PUSH
2322: LD_INT 9
2324: EQUAL
2325: IFFALSE 2335
// sHack := true ;
2327: LD_ADDR_EXP 19
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// if p3 = 10 then
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 10
2342: EQUAL
2343: IFFALSE 2353
// sFire := true ;
2345: LD_ADDR_EXP 20
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// if p3 = 11 then
2353: LD_VAR 0 3
2357: PUSH
2358: LD_INT 11
2360: EQUAL
2361: IFFALSE 2371
// sRefresh := true ;
2363: LD_ADDR_EXP 21
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// if p3 = 12 then
2371: LD_VAR 0 3
2375: PUSH
2376: LD_INT 12
2378: EQUAL
2379: IFFALSE 2389
// sExp := true ;
2381: LD_ADDR_EXP 22
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// if p3 = 13 then
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 13
2396: EQUAL
2397: IFFALSE 2407
// sDepot := true ;
2399: LD_ADDR_EXP 23
2403: PUSH
2404: LD_INT 1
2406: ST_TO_ADDR
// if p3 = 14 then
2407: LD_VAR 0 3
2411: PUSH
2412: LD_INT 14
2414: EQUAL
2415: IFFALSE 2425
// sFlag := true ;
2417: LD_ADDR_EXP 24
2421: PUSH
2422: LD_INT 1
2424: ST_TO_ADDR
// if p3 = 15 then
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 15
2432: EQUAL
2433: IFFALSE 2443
// sKamikadze := true ;
2435: LD_ADDR_EXP 32
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// if p3 = 16 then
2443: LD_VAR 0 3
2447: PUSH
2448: LD_INT 16
2450: EQUAL
2451: IFFALSE 2461
// sTroll := true ;
2453: LD_ADDR_EXP 33
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// if p3 = 17 then
2461: LD_VAR 0 3
2465: PUSH
2466: LD_INT 17
2468: EQUAL
2469: IFFALSE 2479
// sSlow := true ;
2471: LD_ADDR_EXP 34
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// if p3 = 18 then
2479: LD_VAR 0 3
2483: PUSH
2484: LD_INT 18
2486: EQUAL
2487: IFFALSE 2497
// sLack := true ;
2489: LD_ADDR_EXP 35
2493: PUSH
2494: LD_INT 1
2496: ST_TO_ADDR
// if p3 = 19 then
2497: LD_VAR 0 3
2501: PUSH
2502: LD_INT 19
2504: EQUAL
2505: IFFALSE 2515
// sTank := true ;
2507: LD_ADDR_EXP 37
2511: PUSH
2512: LD_INT 1
2514: ST_TO_ADDR
// if p3 = 20 then
2515: LD_VAR 0 3
2519: PUSH
2520: LD_INT 20
2522: EQUAL
2523: IFFALSE 2533
// sRemote := true ;
2525: LD_ADDR_EXP 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// if p3 = 21 then
2533: LD_VAR 0 3
2537: PUSH
2538: LD_INT 21
2540: EQUAL
2541: IFFALSE 2551
// sPowell := true ;
2543: LD_ADDR_EXP 39
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// if p3 = 22 then
2551: LD_VAR 0 3
2555: PUSH
2556: LD_INT 22
2558: EQUAL
2559: IFFALSE 2569
// sTeleport := true ;
2561: LD_ADDR_EXP 42
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// if p3 = 23 then
2569: LD_VAR 0 3
2573: PUSH
2574: LD_INT 23
2576: EQUAL
2577: IFFALSE 2587
// sOilTower := true ;
2579: LD_ADDR_EXP 44
2583: PUSH
2584: LD_INT 1
2586: ST_TO_ADDR
// if p3 = 24 then
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 24
2594: EQUAL
2595: IFFALSE 2605
// sShovel := true ;
2597: LD_ADDR_EXP 45
2601: PUSH
2602: LD_INT 1
2604: ST_TO_ADDR
// if p3 = 25 then
2605: LD_VAR 0 3
2609: PUSH
2610: LD_INT 25
2612: EQUAL
2613: IFFALSE 2623
// sSheik := true ;
2615: LD_ADDR_EXP 46
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// if p3 = 26 then
2623: LD_VAR 0 3
2627: PUSH
2628: LD_INT 26
2630: EQUAL
2631: IFFALSE 2641
// sEarthquake := true ;
2633: LD_ADDR_EXP 48
2637: PUSH
2638: LD_INT 1
2640: ST_TO_ADDR
// if p3 = 27 then
2641: LD_VAR 0 3
2645: PUSH
2646: LD_INT 27
2648: EQUAL
2649: IFFALSE 2659
// sAI := true ;
2651: LD_ADDR_EXP 49
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// if p3 = 28 then
2659: LD_VAR 0 3
2663: PUSH
2664: LD_INT 28
2666: EQUAL
2667: IFFALSE 2677
// sCargo := true ;
2669: LD_ADDR_EXP 52
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// if p3 = 29 then
2677: LD_VAR 0 3
2681: PUSH
2682: LD_INT 29
2684: EQUAL
2685: IFFALSE 2695
// sDLaser := true ;
2687: LD_ADDR_EXP 53
2691: PUSH
2692: LD_INT 1
2694: ST_TO_ADDR
// if p3 = 30 then
2695: LD_VAR 0 3
2699: PUSH
2700: LD_INT 30
2702: EQUAL
2703: IFFALSE 2713
// sExchange := true ;
2705: LD_ADDR_EXP 54
2709: PUSH
2710: LD_INT 1
2712: ST_TO_ADDR
// if p3 = 31 then
2713: LD_VAR 0 3
2717: PUSH
2718: LD_INT 31
2720: EQUAL
2721: IFFALSE 2731
// sFac := true ;
2723: LD_ADDR_EXP 55
2727: PUSH
2728: LD_INT 1
2730: ST_TO_ADDR
// if p3 = 32 then
2731: LD_VAR 0 3
2735: PUSH
2736: LD_INT 32
2738: EQUAL
2739: IFFALSE 2749
// sPower := true ;
2741: LD_ADDR_EXP 56
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// if p3 = 33 then
2749: LD_VAR 0 3
2753: PUSH
2754: LD_INT 33
2756: EQUAL
2757: IFFALSE 2767
// sRandom := true ;
2759: LD_ADDR_EXP 57
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// if p3 = 34 then
2767: LD_VAR 0 3
2771: PUSH
2772: LD_INT 34
2774: EQUAL
2775: IFFALSE 2785
// sShield := true ;
2777: LD_ADDR_EXP 58
2781: PUSH
2782: LD_INT 1
2784: ST_TO_ADDR
// if p3 = 35 then
2785: LD_VAR 0 3
2789: PUSH
2790: LD_INT 35
2792: EQUAL
2793: IFFALSE 2803
// sTime := true ;
2795: LD_ADDR_EXP 59
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// if p3 = 36 then
2803: LD_VAR 0 3
2807: PUSH
2808: LD_INT 36
2810: EQUAL
2811: IFFALSE 2821
// sTools := true ;
2813: LD_ADDR_EXP 60
2817: PUSH
2818: LD_INT 1
2820: ST_TO_ADDR
// if p3 = 101 then
2821: LD_VAR 0 3
2825: PUSH
2826: LD_INT 101
2828: EQUAL
2829: IFFALSE 2839
// sSold := true ;
2831: LD_ADDR_EXP 25
2835: PUSH
2836: LD_INT 1
2838: ST_TO_ADDR
// if p3 = 102 then
2839: LD_VAR 0 3
2843: PUSH
2844: LD_INT 102
2846: EQUAL
2847: IFFALSE 2857
// sDiff := true ;
2849: LD_ADDR_EXP 26
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// if p3 = 103 then
2857: LD_VAR 0 3
2861: PUSH
2862: LD_INT 103
2864: EQUAL
2865: IFFALSE 2875
// sFog := true ;
2867: LD_ADDR_EXP 29
2871: PUSH
2872: LD_INT 1
2874: ST_TO_ADDR
// if p3 = 104 then
2875: LD_VAR 0 3
2879: PUSH
2880: LD_INT 104
2882: EQUAL
2883: IFFALSE 2893
// sReset := true ;
2885: LD_ADDR_EXP 30
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// if p3 = 105 then
2893: LD_VAR 0 3
2897: PUSH
2898: LD_INT 105
2900: EQUAL
2901: IFFALSE 2911
// sSun := true ;
2903: LD_ADDR_EXP 31
2907: PUSH
2908: LD_INT 1
2910: ST_TO_ADDR
// if p3 = 106 then
2911: LD_VAR 0 3
2915: PUSH
2916: LD_INT 106
2918: EQUAL
2919: IFFALSE 2929
// sTiger := true ;
2921: LD_ADDR_EXP 27
2925: PUSH
2926: LD_INT 1
2928: ST_TO_ADDR
// if p3 = 107 then
2929: LD_VAR 0 3
2933: PUSH
2934: LD_INT 107
2936: EQUAL
2937: IFFALSE 2947
// sBomb := true ;
2939: LD_ADDR_EXP 28
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// if p3 = 108 then
2947: LD_VAR 0 3
2951: PUSH
2952: LD_INT 108
2954: EQUAL
2955: IFFALSE 2965
// sWound := true ;
2957: LD_ADDR_EXP 36
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// if p3 = 109 then
2965: LD_VAR 0 3
2969: PUSH
2970: LD_INT 109
2972: EQUAL
2973: IFFALSE 2983
// sBetray := true ;
2975: LD_ADDR_EXP 40
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// if p3 = 110 then
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 110
2990: EQUAL
2991: IFFALSE 3001
// sContamin := true ;
2993: LD_ADDR_EXP 41
2997: PUSH
2998: LD_INT 1
3000: ST_TO_ADDR
// if p3 = 111 then
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 111
3008: EQUAL
3009: IFFALSE 3019
// sOil := true ;
3011: LD_ADDR_EXP 43
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// if p3 = 112 then
3019: LD_VAR 0 3
3023: PUSH
3024: LD_INT 112
3026: EQUAL
3027: IFFALSE 3037
// sStu := true ;
3029: LD_ADDR_EXP 47
3033: PUSH
3034: LD_INT 1
3036: ST_TO_ADDR
// if p3 = 113 then
3037: LD_VAR 0 3
3041: PUSH
3042: LD_INT 113
3044: EQUAL
3045: IFFALSE 3055
// sBazooka := true ;
3047: LD_ADDR_EXP 50
3051: PUSH
3052: LD_INT 1
3054: ST_TO_ADDR
// if p3 = 114 then
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 114
3062: EQUAL
3063: IFFALSE 3073
// sMortar := true ;
3065: LD_ADDR_EXP 51
3069: PUSH
3070: LD_INT 1
3072: ST_TO_ADDR
// if p3 = 115 then
3073: LD_VAR 0 3
3077: PUSH
3078: LD_INT 115
3080: EQUAL
3081: IFFALSE 3091
// sRanger := true ;
3083: LD_ADDR_EXP 61
3087: PUSH
3088: LD_INT 1
3090: ST_TO_ADDR
// if p3 = 116 then
3091: LD_VAR 0 3
3095: PUSH
3096: LD_INT 116
3098: EQUAL
3099: IFFALSE 3109
// sComputer := true ;
3101: LD_ADDR_EXP 62
3105: PUSH
3106: LD_INT 1
3108: ST_TO_ADDR
// if p3 = 117 then
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 117
3116: EQUAL
3117: IFFALSE 3127
// s30 := true ;
3119: LD_ADDR_EXP 63
3123: PUSH
3124: LD_INT 1
3126: ST_TO_ADDR
// if p3 = 118 then
3127: LD_VAR 0 3
3131: PUSH
3132: LD_INT 118
3134: EQUAL
3135: IFFALSE 3145
// s60 := true ;
3137: LD_ADDR_EXP 64
3141: PUSH
3142: LD_INT 1
3144: ST_TO_ADDR
// end ; if p2 = hack_mode then
3145: LD_VAR 0 2
3149: PUSH
3150: LD_INT 101
3152: EQUAL
3153: IFFALSE 3281
// begin case p3 of 1 :
3155: LD_VAR 0 3
3159: PUSH
3160: LD_INT 1
3162: DOUBLE
3163: EQUAL
3164: IFTRUE 3168
3166: GO 3175
3168: POP
// hHackUnlimitedResources ; 2 :
3169: CALL 15544 0 0
3173: GO 3281
3175: LD_INT 2
3177: DOUBLE
3178: EQUAL
3179: IFTRUE 3183
3181: GO 3190
3183: POP
// hHackSetLevel10 ; 3 :
3184: CALL 15677 0 0
3188: GO 3281
3190: LD_INT 3
3192: DOUBLE
3193: EQUAL
3194: IFTRUE 3198
3196: GO 3205
3198: POP
// hHackSetLevel10YourUnits ; 4 :
3199: CALL 15762 0 0
3203: GO 3281
3205: LD_INT 4
3207: DOUBLE
3208: EQUAL
3209: IFTRUE 3213
3211: GO 3220
3213: POP
// hHackInvincible ; 5 :
3214: CALL 16210 0 0
3218: GO 3281
3220: LD_INT 5
3222: DOUBLE
3223: EQUAL
3224: IFTRUE 3228
3226: GO 3235
3228: POP
// hHackInvisible ; 6 :
3229: CALL 16321 0 0
3233: GO 3281
3235: LD_INT 6
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3250
3243: POP
// hHackChangeYourSide ; 7 :
3244: CALL 16378 0 0
3248: GO 3281
3250: LD_INT 7
3252: DOUBLE
3253: EQUAL
3254: IFTRUE 3258
3256: GO 3265
3258: POP
// hHackChangeUnitSide ; 8 :
3259: CALL 16420 0 0
3263: GO 3281
3265: LD_INT 8
3267: DOUBLE
3268: EQUAL
3269: IFTRUE 3273
3271: GO 3280
3273: POP
// hHackFog ; end ;
3274: CALL 16521 0 0
3278: GO 3281
3280: POP
// end ; if p2 = game_save_mode then
3281: LD_VAR 0 2
3285: PUSH
3286: LD_INT 102
3288: EQUAL
3289: IFFALSE 3346
// begin if p3 = 1 then
3291: LD_VAR 0 3
3295: PUSH
3296: LD_INT 1
3298: EQUAL
3299: IFFALSE 3311
// globalGameSaveCounter := p4 ;
3301: LD_ADDR_EXP 7
3305: PUSH
3306: LD_VAR 0 4
3310: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3311: LD_VAR 0 3
3315: PUSH
3316: LD_INT 2
3318: EQUAL
3319: IFFALSE 3327
3321: PUSH
3322: LD_EXP 7
3326: AND
3327: IFFALSE 3346
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3329: LD_STRING setGameSaveCounter(
3331: PUSH
3332: LD_EXP 7
3336: STR
3337: PUSH
3338: LD_STRING )
3340: STR
3341: PPUSH
3342: CALL_OW 559
// end ; end ;
3346: LD_VAR 0 7
3350: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3351: LD_INT 0
3353: PPUSH
// streamModeActive := false ;
3354: LD_ADDR_EXP 8
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// normalCounter := 36 ;
3362: LD_ADDR_EXP 9
3366: PUSH
3367: LD_INT 36
3369: ST_TO_ADDR
// hardcoreCounter := 18 ;
3370: LD_ADDR_EXP 10
3374: PUSH
3375: LD_INT 18
3377: ST_TO_ADDR
// sRocket := false ;
3378: LD_ADDR_EXP 13
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sSpeed := false ;
3386: LD_ADDR_EXP 12
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sEngine := false ;
3394: LD_ADDR_EXP 14
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// sSpec := false ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// sLevel := false ;
3410: LD_ADDR_EXP 15
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// sArmoury := false ;
3418: LD_ADDR_EXP 16
3422: PUSH
3423: LD_INT 0
3425: ST_TO_ADDR
// sRadar := false ;
3426: LD_ADDR_EXP 17
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// sBunker := false ;
3434: LD_ADDR_EXP 18
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// sHack := false ;
3442: LD_ADDR_EXP 19
3446: PUSH
3447: LD_INT 0
3449: ST_TO_ADDR
// sFire := false ;
3450: LD_ADDR_EXP 20
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// sRefresh := false ;
3458: LD_ADDR_EXP 21
3462: PUSH
3463: LD_INT 0
3465: ST_TO_ADDR
// sExp := false ;
3466: LD_ADDR_EXP 22
3470: PUSH
3471: LD_INT 0
3473: ST_TO_ADDR
// sDepot := false ;
3474: LD_ADDR_EXP 23
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// sFlag := false ;
3482: LD_ADDR_EXP 24
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// sKamikadze := false ;
3490: LD_ADDR_EXP 32
3494: PUSH
3495: LD_INT 0
3497: ST_TO_ADDR
// sTroll := false ;
3498: LD_ADDR_EXP 33
3502: PUSH
3503: LD_INT 0
3505: ST_TO_ADDR
// sSlow := false ;
3506: LD_ADDR_EXP 34
3510: PUSH
3511: LD_INT 0
3513: ST_TO_ADDR
// sLack := false ;
3514: LD_ADDR_EXP 35
3518: PUSH
3519: LD_INT 0
3521: ST_TO_ADDR
// sTank := false ;
3522: LD_ADDR_EXP 37
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// sRemote := false ;
3530: LD_ADDR_EXP 38
3534: PUSH
3535: LD_INT 0
3537: ST_TO_ADDR
// sPowell := false ;
3538: LD_ADDR_EXP 39
3542: PUSH
3543: LD_INT 0
3545: ST_TO_ADDR
// sTeleport := false ;
3546: LD_ADDR_EXP 42
3550: PUSH
3551: LD_INT 0
3553: ST_TO_ADDR
// sOilTower := false ;
3554: LD_ADDR_EXP 44
3558: PUSH
3559: LD_INT 0
3561: ST_TO_ADDR
// sShovel := false ;
3562: LD_ADDR_EXP 45
3566: PUSH
3567: LD_INT 0
3569: ST_TO_ADDR
// sSheik := false ;
3570: LD_ADDR_EXP 46
3574: PUSH
3575: LD_INT 0
3577: ST_TO_ADDR
// sEarthquake := false ;
3578: LD_ADDR_EXP 48
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// sAI := false ;
3586: LD_ADDR_EXP 49
3590: PUSH
3591: LD_INT 0
3593: ST_TO_ADDR
// sCargo := false ;
3594: LD_ADDR_EXP 52
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// sDLaser := false ;
3602: LD_ADDR_EXP 53
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// sExchange := false ;
3610: LD_ADDR_EXP 54
3614: PUSH
3615: LD_INT 0
3617: ST_TO_ADDR
// sFac := false ;
3618: LD_ADDR_EXP 55
3622: PUSH
3623: LD_INT 0
3625: ST_TO_ADDR
// sPower := false ;
3626: LD_ADDR_EXP 56
3630: PUSH
3631: LD_INT 0
3633: ST_TO_ADDR
// sRandom := false ;
3634: LD_ADDR_EXP 57
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// sShield := false ;
3642: LD_ADDR_EXP 58
3646: PUSH
3647: LD_INT 0
3649: ST_TO_ADDR
// sTime := false ;
3650: LD_ADDR_EXP 59
3654: PUSH
3655: LD_INT 0
3657: ST_TO_ADDR
// sTools := false ;
3658: LD_ADDR_EXP 60
3662: PUSH
3663: LD_INT 0
3665: ST_TO_ADDR
// sSold := false ;
3666: LD_ADDR_EXP 25
3670: PUSH
3671: LD_INT 0
3673: ST_TO_ADDR
// sDiff := false ;
3674: LD_ADDR_EXP 26
3678: PUSH
3679: LD_INT 0
3681: ST_TO_ADDR
// sFog := false ;
3682: LD_ADDR_EXP 29
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// sReset := false ;
3690: LD_ADDR_EXP 30
3694: PUSH
3695: LD_INT 0
3697: ST_TO_ADDR
// sSun := false ;
3698: LD_ADDR_EXP 31
3702: PUSH
3703: LD_INT 0
3705: ST_TO_ADDR
// sTiger := false ;
3706: LD_ADDR_EXP 27
3710: PUSH
3711: LD_INT 0
3713: ST_TO_ADDR
// sBomb := false ;
3714: LD_ADDR_EXP 28
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// sWound := false ;
3722: LD_ADDR_EXP 36
3726: PUSH
3727: LD_INT 0
3729: ST_TO_ADDR
// sBetray := false ;
3730: LD_ADDR_EXP 40
3734: PUSH
3735: LD_INT 0
3737: ST_TO_ADDR
// sContamin := false ;
3738: LD_ADDR_EXP 41
3742: PUSH
3743: LD_INT 0
3745: ST_TO_ADDR
// sOil := false ;
3746: LD_ADDR_EXP 43
3750: PUSH
3751: LD_INT 0
3753: ST_TO_ADDR
// sStu := false ;
3754: LD_ADDR_EXP 47
3758: PUSH
3759: LD_INT 0
3761: ST_TO_ADDR
// sBazooka := false ;
3762: LD_ADDR_EXP 50
3766: PUSH
3767: LD_INT 0
3769: ST_TO_ADDR
// sMortar := false ;
3770: LD_ADDR_EXP 51
3774: PUSH
3775: LD_INT 0
3777: ST_TO_ADDR
// sRanger := false ;
3778: LD_ADDR_EXP 61
3782: PUSH
3783: LD_INT 0
3785: ST_TO_ADDR
// sComputer := false ;
3786: LD_ADDR_EXP 62
3790: PUSH
3791: LD_INT 0
3793: ST_TO_ADDR
// s30 := false ;
3794: LD_ADDR_EXP 63
3798: PUSH
3799: LD_INT 0
3801: ST_TO_ADDR
// s60 := false ;
3802: LD_ADDR_EXP 64
3806: PUSH
3807: LD_INT 0
3809: ST_TO_ADDR
// end ;
3810: LD_VAR 0 1
3814: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
3823: PPUSH
// result := [ ] ;
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: EMPTY
3830: ST_TO_ADDR
// if campaign_id = 1 then
3831: LD_OWVAR 69
3835: PUSH
3836: LD_INT 1
3838: EQUAL
3839: IFFALSE 7005
// begin case mission_number of 1 :
3841: LD_OWVAR 70
3845: PUSH
3846: LD_INT 1
3848: DOUBLE
3849: EQUAL
3850: IFTRUE 3854
3852: GO 3930
3854: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3855: LD_ADDR_VAR 0 2
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 4
3865: PUSH
3866: LD_INT 11
3868: PUSH
3869: LD_INT 12
3871: PUSH
3872: LD_INT 15
3874: PUSH
3875: LD_INT 16
3877: PUSH
3878: LD_INT 22
3880: PUSH
3881: LD_INT 23
3883: PUSH
3884: LD_INT 26
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: PUSH
3898: LD_INT 101
3900: PUSH
3901: LD_INT 102
3903: PUSH
3904: LD_INT 106
3906: PUSH
3907: LD_INT 116
3909: PUSH
3910: LD_INT 117
3912: PUSH
3913: LD_INT 118
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: ST_TO_ADDR
3928: GO 7003
3930: LD_INT 2
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3938
3936: GO 4022
3938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: LD_INT 4
3949: PUSH
3950: LD_INT 11
3952: PUSH
3953: LD_INT 12
3955: PUSH
3956: LD_INT 15
3958: PUSH
3959: LD_INT 16
3961: PUSH
3962: LD_INT 22
3964: PUSH
3965: LD_INT 23
3967: PUSH
3968: LD_INT 26
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 101
3984: PUSH
3985: LD_INT 102
3987: PUSH
3988: LD_INT 105
3990: PUSH
3991: LD_INT 106
3993: PUSH
3994: LD_INT 108
3996: PUSH
3997: LD_INT 116
3999: PUSH
4000: LD_INT 117
4002: PUSH
4003: LD_INT 118
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: ST_TO_ADDR
4020: GO 7003
4022: LD_INT 3
4024: DOUBLE
4025: EQUAL
4026: IFTRUE 4030
4028: GO 4118
4030: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 4
4041: PUSH
4042: LD_INT 5
4044: PUSH
4045: LD_INT 11
4047: PUSH
4048: LD_INT 12
4050: PUSH
4051: LD_INT 15
4053: PUSH
4054: LD_INT 16
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_INT 26
4062: PUSH
4063: LD_INT 36
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 101
4080: PUSH
4081: LD_INT 102
4083: PUSH
4084: LD_INT 105
4086: PUSH
4087: LD_INT 106
4089: PUSH
4090: LD_INT 108
4092: PUSH
4093: LD_INT 116
4095: PUSH
4096: LD_INT 117
4098: PUSH
4099: LD_INT 118
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: ST_TO_ADDR
4116: GO 7003
4118: LD_INT 4
4120: DOUBLE
4121: EQUAL
4122: IFTRUE 4126
4124: GO 4222
4126: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: LD_INT 5
4140: PUSH
4141: LD_INT 8
4143: PUSH
4144: LD_INT 11
4146: PUSH
4147: LD_INT 12
4149: PUSH
4150: LD_INT 15
4152: PUSH
4153: LD_INT 16
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 23
4161: PUSH
4162: LD_INT 26
4164: PUSH
4165: LD_INT 36
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 101
4184: PUSH
4185: LD_INT 102
4187: PUSH
4188: LD_INT 105
4190: PUSH
4191: LD_INT 106
4193: PUSH
4194: LD_INT 108
4196: PUSH
4197: LD_INT 116
4199: PUSH
4200: LD_INT 117
4202: PUSH
4203: LD_INT 118
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: ST_TO_ADDR
4220: GO 7003
4222: LD_INT 5
4224: DOUBLE
4225: EQUAL
4226: IFTRUE 4230
4228: GO 4342
4230: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4231: LD_ADDR_VAR 0 2
4235: PUSH
4236: LD_INT 2
4238: PUSH
4239: LD_INT 4
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: LD_INT 6
4247: PUSH
4248: LD_INT 8
4250: PUSH
4251: LD_INT 11
4253: PUSH
4254: LD_INT 12
4256: PUSH
4257: LD_INT 15
4259: PUSH
4260: LD_INT 16
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 23
4268: PUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 26
4274: PUSH
4275: LD_INT 36
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 102
4299: PUSH
4300: LD_INT 105
4302: PUSH
4303: LD_INT 106
4305: PUSH
4306: LD_INT 108
4308: PUSH
4309: LD_INT 109
4311: PUSH
4312: LD_INT 112
4314: PUSH
4315: LD_INT 116
4317: PUSH
4318: LD_INT 117
4320: PUSH
4321: LD_INT 118
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: ST_TO_ADDR
4340: GO 7003
4342: LD_INT 6
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4482
4350: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4351: LD_ADDR_VAR 0 2
4355: PUSH
4356: LD_INT 2
4358: PUSH
4359: LD_INT 4
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: LD_INT 6
4367: PUSH
4368: LD_INT 8
4370: PUSH
4371: LD_INT 11
4373: PUSH
4374: LD_INT 12
4376: PUSH
4377: LD_INT 15
4379: PUSH
4380: LD_INT 16
4382: PUSH
4383: LD_INT 20
4385: PUSH
4386: LD_INT 21
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 23
4394: PUSH
4395: LD_INT 25
4397: PUSH
4398: LD_INT 26
4400: PUSH
4401: LD_INT 30
4403: PUSH
4404: LD_INT 31
4406: PUSH
4407: LD_INT 32
4409: PUSH
4410: LD_INT 36
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 101
4436: PUSH
4437: LD_INT 102
4439: PUSH
4440: LD_INT 105
4442: PUSH
4443: LD_INT 106
4445: PUSH
4446: LD_INT 108
4448: PUSH
4449: LD_INT 109
4451: PUSH
4452: LD_INT 112
4454: PUSH
4455: LD_INT 116
4457: PUSH
4458: LD_INT 117
4460: PUSH
4461: LD_INT 118
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: ST_TO_ADDR
4480: GO 7003
4482: LD_INT 7
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4602
4490: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 4
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: LD_INT 7
4507: PUSH
4508: LD_INT 11
4510: PUSH
4511: LD_INT 12
4513: PUSH
4514: LD_INT 15
4516: PUSH
4517: LD_INT 16
4519: PUSH
4520: LD_INT 20
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 22
4528: PUSH
4529: LD_INT 23
4531: PUSH
4532: LD_INT 25
4534: PUSH
4535: LD_INT 26
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 101
4556: PUSH
4557: LD_INT 102
4559: PUSH
4560: LD_INT 103
4562: PUSH
4563: LD_INT 105
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 108
4571: PUSH
4572: LD_INT 112
4574: PUSH
4575: LD_INT 116
4577: PUSH
4578: LD_INT 117
4580: PUSH
4581: LD_INT 118
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: ST_TO_ADDR
4600: GO 7003
4602: LD_INT 8
4604: DOUBLE
4605: EQUAL
4606: IFTRUE 4610
4608: GO 4750
4610: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: LD_INT 2
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 5
4624: PUSH
4625: LD_INT 6
4627: PUSH
4628: LD_INT 7
4630: PUSH
4631: LD_INT 8
4633: PUSH
4634: LD_INT 11
4636: PUSH
4637: LD_INT 12
4639: PUSH
4640: LD_INT 15
4642: PUSH
4643: LD_INT 16
4645: PUSH
4646: LD_INT 20
4648: PUSH
4649: LD_INT 21
4651: PUSH
4652: LD_INT 22
4654: PUSH
4655: LD_INT 23
4657: PUSH
4658: LD_INT 25
4660: PUSH
4661: LD_INT 26
4663: PUSH
4664: LD_INT 30
4666: PUSH
4667: LD_INT 31
4669: PUSH
4670: LD_INT 32
4672: PUSH
4673: LD_INT 36
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 101
4700: PUSH
4701: LD_INT 102
4703: PUSH
4704: LD_INT 103
4706: PUSH
4707: LD_INT 105
4709: PUSH
4710: LD_INT 106
4712: PUSH
4713: LD_INT 108
4715: PUSH
4716: LD_INT 109
4718: PUSH
4719: LD_INT 112
4721: PUSH
4722: LD_INT 116
4724: PUSH
4725: LD_INT 117
4727: PUSH
4728: LD_INT 118
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: ST_TO_ADDR
4748: GO 7003
4750: LD_INT 9
4752: DOUBLE
4753: EQUAL
4754: IFTRUE 4758
4756: GO 4906
4758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: LD_INT 2
4766: PUSH
4767: LD_INT 4
4769: PUSH
4770: LD_INT 5
4772: PUSH
4773: LD_INT 6
4775: PUSH
4776: LD_INT 7
4778: PUSH
4779: LD_INT 8
4781: PUSH
4782: LD_INT 11
4784: PUSH
4785: LD_INT 12
4787: PUSH
4788: LD_INT 15
4790: PUSH
4791: LD_INT 16
4793: PUSH
4794: LD_INT 20
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 25
4808: PUSH
4809: LD_INT 26
4811: PUSH
4812: LD_INT 28
4814: PUSH
4815: LD_INT 30
4817: PUSH
4818: LD_INT 31
4820: PUSH
4821: LD_INT 32
4823: PUSH
4824: LD_INT 36
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 101
4852: PUSH
4853: LD_INT 102
4855: PUSH
4856: LD_INT 103
4858: PUSH
4859: LD_INT 105
4861: PUSH
4862: LD_INT 106
4864: PUSH
4865: LD_INT 108
4867: PUSH
4868: LD_INT 109
4870: PUSH
4871: LD_INT 112
4873: PUSH
4874: LD_INT 114
4876: PUSH
4877: LD_INT 116
4879: PUSH
4880: LD_INT 117
4882: PUSH
4883: LD_INT 118
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: ST_TO_ADDR
4904: GO 7003
4906: LD_INT 10
4908: DOUBLE
4909: EQUAL
4910: IFTRUE 4914
4912: GO 5110
4914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4915: LD_ADDR_VAR 0 2
4919: PUSH
4920: LD_INT 2
4922: PUSH
4923: LD_INT 4
4925: PUSH
4926: LD_INT 5
4928: PUSH
4929: LD_INT 6
4931: PUSH
4932: LD_INT 7
4934: PUSH
4935: LD_INT 8
4937: PUSH
4938: LD_INT 9
4940: PUSH
4941: LD_INT 10
4943: PUSH
4944: LD_INT 11
4946: PUSH
4947: LD_INT 12
4949: PUSH
4950: LD_INT 13
4952: PUSH
4953: LD_INT 14
4955: PUSH
4956: LD_INT 15
4958: PUSH
4959: LD_INT 16
4961: PUSH
4962: LD_INT 17
4964: PUSH
4965: LD_INT 18
4967: PUSH
4968: LD_INT 19
4970: PUSH
4971: LD_INT 20
4973: PUSH
4974: LD_INT 21
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 23
4982: PUSH
4983: LD_INT 24
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 26
4991: PUSH
4992: LD_INT 28
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 31
5000: PUSH
5001: LD_INT 32
5003: PUSH
5004: LD_INT 36
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 101
5040: PUSH
5041: LD_INT 102
5043: PUSH
5044: LD_INT 103
5046: PUSH
5047: LD_INT 104
5049: PUSH
5050: LD_INT 105
5052: PUSH
5053: LD_INT 106
5055: PUSH
5056: LD_INT 107
5058: PUSH
5059: LD_INT 108
5061: PUSH
5062: LD_INT 109
5064: PUSH
5065: LD_INT 110
5067: PUSH
5068: LD_INT 111
5070: PUSH
5071: LD_INT 112
5073: PUSH
5074: LD_INT 114
5076: PUSH
5077: LD_INT 116
5079: PUSH
5080: LD_INT 117
5082: PUSH
5083: LD_INT 118
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: ST_TO_ADDR
5108: GO 7003
5110: LD_INT 11
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5322
5118: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5119: LD_ADDR_VAR 0 2
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 3
5129: PUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: LD_INT 8
5144: PUSH
5145: LD_INT 9
5147: PUSH
5148: LD_INT 10
5150: PUSH
5151: LD_INT 11
5153: PUSH
5154: LD_INT 12
5156: PUSH
5157: LD_INT 13
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: LD_INT 15
5165: PUSH
5166: LD_INT 16
5168: PUSH
5169: LD_INT 17
5171: PUSH
5172: LD_INT 18
5174: PUSH
5175: LD_INT 19
5177: PUSH
5178: LD_INT 20
5180: PUSH
5181: LD_INT 21
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 23
5189: PUSH
5190: LD_INT 24
5192: PUSH
5193: LD_INT 25
5195: PUSH
5196: LD_INT 26
5198: PUSH
5199: LD_INT 28
5201: PUSH
5202: LD_INT 30
5204: PUSH
5205: LD_INT 31
5207: PUSH
5208: LD_INT 32
5210: PUSH
5211: LD_INT 34
5213: PUSH
5214: LD_INT 36
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 101
5252: PUSH
5253: LD_INT 102
5255: PUSH
5256: LD_INT 103
5258: PUSH
5259: LD_INT 104
5261: PUSH
5262: LD_INT 105
5264: PUSH
5265: LD_INT 106
5267: PUSH
5268: LD_INT 107
5270: PUSH
5271: LD_INT 108
5273: PUSH
5274: LD_INT 109
5276: PUSH
5277: LD_INT 110
5279: PUSH
5280: LD_INT 111
5282: PUSH
5283: LD_INT 112
5285: PUSH
5286: LD_INT 114
5288: PUSH
5289: LD_INT 116
5291: PUSH
5292: LD_INT 117
5294: PUSH
5295: LD_INT 118
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: ST_TO_ADDR
5320: GO 7003
5322: LD_INT 12
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5550
5330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_INT 1
5338: PUSH
5339: LD_INT 2
5341: PUSH
5342: LD_INT 3
5344: PUSH
5345: LD_INT 4
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: LD_INT 11
5368: PUSH
5369: LD_INT 12
5371: PUSH
5372: LD_INT 13
5374: PUSH
5375: LD_INT 14
5377: PUSH
5378: LD_INT 15
5380: PUSH
5381: LD_INT 16
5383: PUSH
5384: LD_INT 17
5386: PUSH
5387: LD_INT 18
5389: PUSH
5390: LD_INT 19
5392: PUSH
5393: LD_INT 20
5395: PUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 23
5404: PUSH
5405: LD_INT 24
5407: PUSH
5408: LD_INT 25
5410: PUSH
5411: LD_INT 26
5413: PUSH
5414: LD_INT 27
5416: PUSH
5417: LD_INT 28
5419: PUSH
5420: LD_INT 30
5422: PUSH
5423: LD_INT 31
5425: PUSH
5426: LD_INT 32
5428: PUSH
5429: LD_INT 33
5431: PUSH
5432: LD_INT 34
5434: PUSH
5435: LD_INT 36
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 101
5476: PUSH
5477: LD_INT 102
5479: PUSH
5480: LD_INT 103
5482: PUSH
5483: LD_INT 104
5485: PUSH
5486: LD_INT 105
5488: PUSH
5489: LD_INT 106
5491: PUSH
5492: LD_INT 107
5494: PUSH
5495: LD_INT 108
5497: PUSH
5498: LD_INT 109
5500: PUSH
5501: LD_INT 110
5503: PUSH
5504: LD_INT 111
5506: PUSH
5507: LD_INT 112
5509: PUSH
5510: LD_INT 113
5512: PUSH
5513: LD_INT 114
5515: PUSH
5516: LD_INT 116
5518: PUSH
5519: LD_INT 117
5521: PUSH
5522: LD_INT 118
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: ST_TO_ADDR
5548: GO 7003
5550: LD_INT 13
5552: DOUBLE
5553: EQUAL
5554: IFTRUE 5558
5556: GO 5766
5558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: LD_INT 4
5575: PUSH
5576: LD_INT 5
5578: PUSH
5579: LD_INT 8
5581: PUSH
5582: LD_INT 9
5584: PUSH
5585: LD_INT 10
5587: PUSH
5588: LD_INT 11
5590: PUSH
5591: LD_INT 12
5593: PUSH
5594: LD_INT 14
5596: PUSH
5597: LD_INT 15
5599: PUSH
5600: LD_INT 16
5602: PUSH
5603: LD_INT 17
5605: PUSH
5606: LD_INT 18
5608: PUSH
5609: LD_INT 19
5611: PUSH
5612: LD_INT 20
5614: PUSH
5615: LD_INT 21
5617: PUSH
5618: LD_INT 22
5620: PUSH
5621: LD_INT 23
5623: PUSH
5624: LD_INT 24
5626: PUSH
5627: LD_INT 25
5629: PUSH
5630: LD_INT 26
5632: PUSH
5633: LD_INT 27
5635: PUSH
5636: LD_INT 28
5638: PUSH
5639: LD_INT 30
5641: PUSH
5642: LD_INT 31
5644: PUSH
5645: LD_INT 32
5647: PUSH
5648: LD_INT 33
5650: PUSH
5651: LD_INT 34
5653: PUSH
5654: LD_INT 36
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 101
5692: PUSH
5693: LD_INT 102
5695: PUSH
5696: LD_INT 103
5698: PUSH
5699: LD_INT 104
5701: PUSH
5702: LD_INT 105
5704: PUSH
5705: LD_INT 106
5707: PUSH
5708: LD_INT 107
5710: PUSH
5711: LD_INT 108
5713: PUSH
5714: LD_INT 109
5716: PUSH
5717: LD_INT 110
5719: PUSH
5720: LD_INT 111
5722: PUSH
5723: LD_INT 112
5725: PUSH
5726: LD_INT 113
5728: PUSH
5729: LD_INT 114
5731: PUSH
5732: LD_INT 116
5734: PUSH
5735: LD_INT 117
5737: PUSH
5738: LD_INT 118
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 7003
5766: LD_INT 14
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5998
5774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: LD_INT 2
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: LD_INT 4
5791: PUSH
5792: LD_INT 5
5794: PUSH
5795: LD_INT 6
5797: PUSH
5798: LD_INT 7
5800: PUSH
5801: LD_INT 8
5803: PUSH
5804: LD_INT 9
5806: PUSH
5807: LD_INT 10
5809: PUSH
5810: LD_INT 11
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 13
5818: PUSH
5819: LD_INT 14
5821: PUSH
5822: LD_INT 15
5824: PUSH
5825: LD_INT 16
5827: PUSH
5828: LD_INT 17
5830: PUSH
5831: LD_INT 18
5833: PUSH
5834: LD_INT 19
5836: PUSH
5837: LD_INT 20
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 22
5845: PUSH
5846: LD_INT 23
5848: PUSH
5849: LD_INT 24
5851: PUSH
5852: LD_INT 25
5854: PUSH
5855: LD_INT 26
5857: PUSH
5858: LD_INT 27
5860: PUSH
5861: LD_INT 28
5863: PUSH
5864: LD_INT 29
5866: PUSH
5867: LD_INT 30
5869: PUSH
5870: LD_INT 31
5872: PUSH
5873: LD_INT 32
5875: PUSH
5876: LD_INT 33
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 36
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 101
5924: PUSH
5925: LD_INT 102
5927: PUSH
5928: LD_INT 103
5930: PUSH
5931: LD_INT 104
5933: PUSH
5934: LD_INT 105
5936: PUSH
5937: LD_INT 106
5939: PUSH
5940: LD_INT 107
5942: PUSH
5943: LD_INT 108
5945: PUSH
5946: LD_INT 109
5948: PUSH
5949: LD_INT 110
5951: PUSH
5952: LD_INT 111
5954: PUSH
5955: LD_INT 112
5957: PUSH
5958: LD_INT 113
5960: PUSH
5961: LD_INT 114
5963: PUSH
5964: LD_INT 116
5966: PUSH
5967: LD_INT 117
5969: PUSH
5970: LD_INT 118
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: ST_TO_ADDR
5996: GO 7003
5998: LD_INT 15
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6006
6004: GO 6230
6006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 3
6020: PUSH
6021: LD_INT 4
6023: PUSH
6024: LD_INT 5
6026: PUSH
6027: LD_INT 6
6029: PUSH
6030: LD_INT 7
6032: PUSH
6033: LD_INT 8
6035: PUSH
6036: LD_INT 9
6038: PUSH
6039: LD_INT 10
6041: PUSH
6042: LD_INT 11
6044: PUSH
6045: LD_INT 12
6047: PUSH
6048: LD_INT 13
6050: PUSH
6051: LD_INT 14
6053: PUSH
6054: LD_INT 15
6056: PUSH
6057: LD_INT 16
6059: PUSH
6060: LD_INT 17
6062: PUSH
6063: LD_INT 18
6065: PUSH
6066: LD_INT 19
6068: PUSH
6069: LD_INT 20
6071: PUSH
6072: LD_INT 21
6074: PUSH
6075: LD_INT 22
6077: PUSH
6078: LD_INT 23
6080: PUSH
6081: LD_INT 24
6083: PUSH
6084: LD_INT 25
6086: PUSH
6087: LD_INT 26
6089: PUSH
6090: LD_INT 27
6092: PUSH
6093: LD_INT 28
6095: PUSH
6096: LD_INT 29
6098: PUSH
6099: LD_INT 30
6101: PUSH
6102: LD_INT 31
6104: PUSH
6105: LD_INT 32
6107: PUSH
6108: LD_INT 33
6110: PUSH
6111: LD_INT 34
6113: PUSH
6114: LD_INT 36
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 101
6156: PUSH
6157: LD_INT 102
6159: PUSH
6160: LD_INT 103
6162: PUSH
6163: LD_INT 104
6165: PUSH
6166: LD_INT 105
6168: PUSH
6169: LD_INT 106
6171: PUSH
6172: LD_INT 107
6174: PUSH
6175: LD_INT 108
6177: PUSH
6178: LD_INT 109
6180: PUSH
6181: LD_INT 110
6183: PUSH
6184: LD_INT 111
6186: PUSH
6187: LD_INT 112
6189: PUSH
6190: LD_INT 113
6192: PUSH
6193: LD_INT 114
6195: PUSH
6196: LD_INT 116
6198: PUSH
6199: LD_INT 117
6201: PUSH
6202: LD_INT 118
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: ST_TO_ADDR
6228: GO 7003
6230: LD_INT 16
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6238
6236: GO 6374
6238: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 4
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 7
6255: PUSH
6256: LD_INT 11
6258: PUSH
6259: LD_INT 12
6261: PUSH
6262: LD_INT 15
6264: PUSH
6265: LD_INT 16
6267: PUSH
6268: LD_INT 20
6270: PUSH
6271: LD_INT 21
6273: PUSH
6274: LD_INT 22
6276: PUSH
6277: LD_INT 23
6279: PUSH
6280: LD_INT 25
6282: PUSH
6283: LD_INT 26
6285: PUSH
6286: LD_INT 30
6288: PUSH
6289: LD_INT 31
6291: PUSH
6292: LD_INT 32
6294: PUSH
6295: LD_INT 33
6297: PUSH
6298: LD_INT 34
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 101
6324: PUSH
6325: LD_INT 102
6327: PUSH
6328: LD_INT 103
6330: PUSH
6331: LD_INT 106
6333: PUSH
6334: LD_INT 108
6336: PUSH
6337: LD_INT 112
6339: PUSH
6340: LD_INT 113
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 116
6348: PUSH
6349: LD_INT 117
6351: PUSH
6352: LD_INT 118
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 7003
6374: LD_INT 17
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6606
6382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6383: LD_ADDR_VAR 0 2
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: LD_INT 5
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: LD_INT 7
6408: PUSH
6409: LD_INT 8
6411: PUSH
6412: LD_INT 9
6414: PUSH
6415: LD_INT 10
6417: PUSH
6418: LD_INT 11
6420: PUSH
6421: LD_INT 12
6423: PUSH
6424: LD_INT 13
6426: PUSH
6427: LD_INT 14
6429: PUSH
6430: LD_INT 15
6432: PUSH
6433: LD_INT 16
6435: PUSH
6436: LD_INT 17
6438: PUSH
6439: LD_INT 18
6441: PUSH
6442: LD_INT 19
6444: PUSH
6445: LD_INT 20
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 23
6456: PUSH
6457: LD_INT 24
6459: PUSH
6460: LD_INT 25
6462: PUSH
6463: LD_INT 26
6465: PUSH
6466: LD_INT 27
6468: PUSH
6469: LD_INT 28
6471: PUSH
6472: LD_INT 29
6474: PUSH
6475: LD_INT 30
6477: PUSH
6478: LD_INT 31
6480: PUSH
6481: LD_INT 32
6483: PUSH
6484: LD_INT 33
6486: PUSH
6487: LD_INT 34
6489: PUSH
6490: LD_INT 36
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 101
6532: PUSH
6533: LD_INT 102
6535: PUSH
6536: LD_INT 103
6538: PUSH
6539: LD_INT 104
6541: PUSH
6542: LD_INT 105
6544: PUSH
6545: LD_INT 106
6547: PUSH
6548: LD_INT 107
6550: PUSH
6551: LD_INT 108
6553: PUSH
6554: LD_INT 109
6556: PUSH
6557: LD_INT 110
6559: PUSH
6560: LD_INT 111
6562: PUSH
6563: LD_INT 112
6565: PUSH
6566: LD_INT 113
6568: PUSH
6569: LD_INT 114
6571: PUSH
6572: LD_INT 116
6574: PUSH
6575: LD_INT 117
6577: PUSH
6578: LD_INT 118
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: ST_TO_ADDR
6604: GO 7003
6606: LD_INT 18
6608: DOUBLE
6609: EQUAL
6610: IFTRUE 6614
6612: GO 6762
6614: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6615: LD_ADDR_VAR 0 2
6619: PUSH
6620: LD_INT 2
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: LD_INT 7
6631: PUSH
6632: LD_INT 11
6634: PUSH
6635: LD_INT 12
6637: PUSH
6638: LD_INT 15
6640: PUSH
6641: LD_INT 16
6643: PUSH
6644: LD_INT 20
6646: PUSH
6647: LD_INT 21
6649: PUSH
6650: LD_INT 22
6652: PUSH
6653: LD_INT 23
6655: PUSH
6656: LD_INT 25
6658: PUSH
6659: LD_INT 26
6661: PUSH
6662: LD_INT 30
6664: PUSH
6665: LD_INT 31
6667: PUSH
6668: LD_INT 32
6670: PUSH
6671: LD_INT 33
6673: PUSH
6674: LD_INT 34
6676: PUSH
6677: LD_INT 35
6679: PUSH
6680: LD_INT 36
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 101
6708: PUSH
6709: LD_INT 102
6711: PUSH
6712: LD_INT 103
6714: PUSH
6715: LD_INT 106
6717: PUSH
6718: LD_INT 108
6720: PUSH
6721: LD_INT 112
6723: PUSH
6724: LD_INT 113
6726: PUSH
6727: LD_INT 114
6729: PUSH
6730: LD_INT 115
6732: PUSH
6733: LD_INT 116
6735: PUSH
6736: LD_INT 117
6738: PUSH
6739: LD_INT 118
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: ST_TO_ADDR
6760: GO 7003
6762: LD_INT 19
6764: DOUBLE
6765: EQUAL
6766: IFTRUE 6770
6768: GO 7002
6770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6771: LD_ADDR_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: LD_INT 4
6787: PUSH
6788: LD_INT 5
6790: PUSH
6791: LD_INT 6
6793: PUSH
6794: LD_INT 7
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: LD_INT 9
6802: PUSH
6803: LD_INT 10
6805: PUSH
6806: LD_INT 11
6808: PUSH
6809: LD_INT 12
6811: PUSH
6812: LD_INT 13
6814: PUSH
6815: LD_INT 14
6817: PUSH
6818: LD_INT 15
6820: PUSH
6821: LD_INT 16
6823: PUSH
6824: LD_INT 17
6826: PUSH
6827: LD_INT 18
6829: PUSH
6830: LD_INT 19
6832: PUSH
6833: LD_INT 20
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_INT 23
6844: PUSH
6845: LD_INT 24
6847: PUSH
6848: LD_INT 25
6850: PUSH
6851: LD_INT 26
6853: PUSH
6854: LD_INT 27
6856: PUSH
6857: LD_INT 28
6859: PUSH
6860: LD_INT 29
6862: PUSH
6863: LD_INT 30
6865: PUSH
6866: LD_INT 31
6868: PUSH
6869: LD_INT 32
6871: PUSH
6872: LD_INT 33
6874: PUSH
6875: LD_INT 34
6877: PUSH
6878: LD_INT 35
6880: PUSH
6881: LD_INT 36
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 103
6930: PUSH
6931: LD_INT 104
6933: PUSH
6934: LD_INT 105
6936: PUSH
6937: LD_INT 106
6939: PUSH
6940: LD_INT 107
6942: PUSH
6943: LD_INT 108
6945: PUSH
6946: LD_INT 109
6948: PUSH
6949: LD_INT 110
6951: PUSH
6952: LD_INT 111
6954: PUSH
6955: LD_INT 112
6957: PUSH
6958: LD_INT 113
6960: PUSH
6961: LD_INT 114
6963: PUSH
6964: LD_INT 115
6966: PUSH
6967: LD_INT 116
6969: PUSH
6970: LD_INT 117
6972: PUSH
6973: LD_INT 118
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7003
7002: POP
// end else
7003: GO 7234
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
7005: LD_ADDR_VAR 0 2
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: LD_INT 8
7033: PUSH
7034: LD_INT 9
7036: PUSH
7037: LD_INT 10
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: LD_INT 12
7045: PUSH
7046: LD_INT 13
7048: PUSH
7049: LD_INT 14
7051: PUSH
7052: LD_INT 15
7054: PUSH
7055: LD_INT 16
7057: PUSH
7058: LD_INT 17
7060: PUSH
7061: LD_INT 18
7063: PUSH
7064: LD_INT 19
7066: PUSH
7067: LD_INT 20
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: LD_INT 25
7084: PUSH
7085: LD_INT 26
7087: PUSH
7088: LD_INT 27
7090: PUSH
7091: LD_INT 28
7093: PUSH
7094: LD_INT 29
7096: PUSH
7097: LD_INT 30
7099: PUSH
7100: LD_INT 31
7102: PUSH
7103: LD_INT 32
7105: PUSH
7106: LD_INT 33
7108: PUSH
7109: LD_INT 34
7111: PUSH
7112: LD_INT 35
7114: PUSH
7115: LD_INT 36
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 101
7158: PUSH
7159: LD_INT 102
7161: PUSH
7162: LD_INT 103
7164: PUSH
7165: LD_INT 104
7167: PUSH
7168: LD_INT 105
7170: PUSH
7171: LD_INT 106
7173: PUSH
7174: LD_INT 107
7176: PUSH
7177: LD_INT 108
7179: PUSH
7180: LD_INT 109
7182: PUSH
7183: LD_INT 110
7185: PUSH
7186: LD_INT 111
7188: PUSH
7189: LD_INT 112
7191: PUSH
7192: LD_INT 113
7194: PUSH
7195: LD_INT 114
7197: PUSH
7198: LD_INT 115
7200: PUSH
7201: LD_INT 116
7203: PUSH
7204: LD_INT 117
7206: PUSH
7207: LD_INT 118
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: ST_TO_ADDR
// if result then
7234: LD_VAR 0 2
7238: IFFALSE 8024
// begin normal :=  ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_STRING 
7247: ST_TO_ADDR
// hardcore :=  ;
7248: LD_ADDR_VAR 0 6
7252: PUSH
7253: LD_STRING 
7255: ST_TO_ADDR
// active :=  ;
7256: LD_ADDR_VAR 0 7
7260: PUSH
7261: LD_STRING 
7263: ST_TO_ADDR
// for i = 1 to normalCounter do
7264: LD_ADDR_VAR 0 8
7268: PUSH
7269: DOUBLE
7270: LD_INT 1
7272: DEC
7273: ST_TO_ADDR
7274: LD_EXP 9
7278: PUSH
7279: FOR_TO
7280: IFFALSE 7381
// begin tmp := 0 ;
7282: LD_ADDR_VAR 0 3
7286: PUSH
7287: LD_STRING 0
7289: ST_TO_ADDR
// if result [ 1 ] then
7290: LD_VAR 0 2
7294: PUSH
7295: LD_INT 1
7297: ARRAY
7298: IFFALSE 7363
// if result [ 1 ] [ 1 ] = i then
7300: LD_VAR 0 2
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: PUSH
7309: LD_INT 1
7311: ARRAY
7312: PUSH
7313: LD_VAR 0 8
7317: EQUAL
7318: IFFALSE 7363
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_INT 1
7332: PPUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_INT 1
7340: ARRAY
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 3
7349: PPUSH
7350: CALL_OW 1
7354: ST_TO_ADDR
// tmp := 1 ;
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_STRING 1
7362: ST_TO_ADDR
// end ; normal := normal & tmp ;
7363: LD_ADDR_VAR 0 5
7367: PUSH
7368: LD_VAR 0 5
7372: PUSH
7373: LD_VAR 0 3
7377: STR
7378: ST_TO_ADDR
// end ;
7379: GO 7279
7381: POP
7382: POP
// for i = 1 to hardcoreCounter do
7383: LD_ADDR_VAR 0 8
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_EXP 10
7397: PUSH
7398: FOR_TO
7399: IFFALSE 7504
// begin tmp := 0 ;
7401: LD_ADDR_VAR 0 3
7405: PUSH
7406: LD_STRING 0
7408: ST_TO_ADDR
// if result [ 2 ] then
7409: LD_VAR 0 2
7413: PUSH
7414: LD_INT 2
7416: ARRAY
7417: IFFALSE 7486
// if result [ 2 ] [ 1 ] = 100 + i then
7419: LD_VAR 0 2
7423: PUSH
7424: LD_INT 2
7426: ARRAY
7427: PUSH
7428: LD_INT 1
7430: ARRAY
7431: PUSH
7432: LD_INT 100
7434: PUSH
7435: LD_VAR 0 8
7439: PLUS
7440: EQUAL
7441: IFFALSE 7486
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7443: LD_ADDR_VAR 0 2
7447: PUSH
7448: LD_VAR 0 2
7452: PPUSH
7453: LD_INT 2
7455: PPUSH
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 2
7463: ARRAY
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 3
7472: PPUSH
7473: CALL_OW 1
7477: ST_TO_ADDR
// tmp := 1 ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_STRING 1
7485: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7486: LD_ADDR_VAR 0 6
7490: PUSH
7491: LD_VAR 0 6
7495: PUSH
7496: LD_VAR 0 3
7500: STR
7501: ST_TO_ADDR
// end ;
7502: GO 7398
7504: POP
7505: POP
// if isGameLoad then
7506: LD_VAR 0 1
7510: IFFALSE 7985
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: LD_EXP 13
7521: PUSH
7522: LD_EXP 12
7526: PUSH
7527: LD_EXP 14
7531: PUSH
7532: LD_EXP 11
7536: PUSH
7537: LD_EXP 15
7541: PUSH
7542: LD_EXP 16
7546: PUSH
7547: LD_EXP 17
7551: PUSH
7552: LD_EXP 18
7556: PUSH
7557: LD_EXP 19
7561: PUSH
7562: LD_EXP 20
7566: PUSH
7567: LD_EXP 21
7571: PUSH
7572: LD_EXP 22
7576: PUSH
7577: LD_EXP 23
7581: PUSH
7582: LD_EXP 24
7586: PUSH
7587: LD_EXP 32
7591: PUSH
7592: LD_EXP 33
7596: PUSH
7597: LD_EXP 34
7601: PUSH
7602: LD_EXP 35
7606: PUSH
7607: LD_EXP 37
7611: PUSH
7612: LD_EXP 38
7616: PUSH
7617: LD_EXP 39
7621: PUSH
7622: LD_EXP 42
7626: PUSH
7627: LD_EXP 44
7631: PUSH
7632: LD_EXP 45
7636: PUSH
7637: LD_EXP 46
7641: PUSH
7642: LD_EXP 48
7646: PUSH
7647: LD_EXP 49
7651: PUSH
7652: LD_EXP 52
7656: PUSH
7657: LD_EXP 53
7661: PUSH
7662: LD_EXP 54
7666: PUSH
7667: LD_EXP 55
7671: PUSH
7672: LD_EXP 56
7676: PUSH
7677: LD_EXP 57
7681: PUSH
7682: LD_EXP 58
7686: PUSH
7687: LD_EXP 59
7691: PUSH
7692: LD_EXP 60
7696: PUSH
7697: LD_EXP 25
7701: PUSH
7702: LD_EXP 26
7706: PUSH
7707: LD_EXP 29
7711: PUSH
7712: LD_EXP 30
7716: PUSH
7717: LD_EXP 31
7721: PUSH
7722: LD_EXP 27
7726: PUSH
7727: LD_EXP 28
7731: PUSH
7732: LD_EXP 36
7736: PUSH
7737: LD_EXP 40
7741: PUSH
7742: LD_EXP 41
7746: PUSH
7747: LD_EXP 43
7751: PUSH
7752: LD_EXP 47
7756: PUSH
7757: LD_EXP 50
7761: PUSH
7762: LD_EXP 51
7766: PUSH
7767: LD_EXP 61
7771: PUSH
7772: LD_EXP 62
7776: PUSH
7777: LD_EXP 63
7781: PUSH
7782: LD_EXP 64
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: ST_TO_ADDR
// tmp :=  ;
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_STRING 
7850: ST_TO_ADDR
// for i = 1 to normalCounter do
7851: LD_ADDR_VAR 0 8
7855: PUSH
7856: DOUBLE
7857: LD_INT 1
7859: DEC
7860: ST_TO_ADDR
7861: LD_EXP 9
7865: PUSH
7866: FOR_TO
7867: IFFALSE 7903
// begin if flags [ i ] then
7869: LD_VAR 0 4
7873: PUSH
7874: LD_VAR 0 8
7878: ARRAY
7879: IFFALSE 7901
// tmp := tmp & i & ; ;
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_VAR 0 3
7890: PUSH
7891: LD_VAR 0 8
7895: STR
7896: PUSH
7897: LD_STRING ;
7899: STR
7900: ST_TO_ADDR
// end ;
7901: GO 7866
7903: POP
7904: POP
// for i = 1 to hardcoreCounter do
7905: LD_ADDR_VAR 0 8
7909: PUSH
7910: DOUBLE
7911: LD_INT 1
7913: DEC
7914: ST_TO_ADDR
7915: LD_EXP 10
7919: PUSH
7920: FOR_TO
7921: IFFALSE 7967
// begin if flags [ normalCounter + i ] then
7923: LD_VAR 0 4
7927: PUSH
7928: LD_EXP 9
7932: PUSH
7933: LD_VAR 0 8
7937: PLUS
7938: ARRAY
7939: IFFALSE 7965
// tmp := tmp & ( 100 + i ) & ; ;
7941: LD_ADDR_VAR 0 3
7945: PUSH
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 100
7953: PUSH
7954: LD_VAR 0 8
7958: PLUS
7959: STR
7960: PUSH
7961: LD_STRING ;
7963: STR
7964: ST_TO_ADDR
// end ;
7965: GO 7920
7967: POP
7968: POP
// if tmp then
7969: LD_VAR 0 3
7973: IFFALSE 7985
// active := tmp ;
7975: LD_ADDR_VAR 0 7
7979: PUSH
7980: LD_VAR 0 3
7984: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7985: LD_STRING getStreamItemsFromMission("
7987: PUSH
7988: LD_VAR 0 5
7992: STR
7993: PUSH
7994: LD_STRING ","
7996: STR
7997: PUSH
7998: LD_VAR 0 6
8002: STR
8003: PUSH
8004: LD_STRING ","
8006: STR
8007: PUSH
8008: LD_VAR 0 7
8012: STR
8013: PUSH
8014: LD_STRING ")
8016: STR
8017: PPUSH
8018: CALL_OW 559
// end else
8022: GO 8031
// ToLua ( getStreamItemsFromMission("","","") ) ;
8024: LD_STRING getStreamItemsFromMission("","","")
8026: PPUSH
8027: CALL_OW 559
// end ;
8031: LD_VAR 0 2
8035: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8036: LD_EXP 8
8040: IFFALSE 8048
8042: PUSH
8043: LD_EXP 13
8047: AND
8048: IFFALSE 8172
8050: GO 8052
8052: DISABLE
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
// begin enable ;
8057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8058: LD_ADDR_VAR 0 2
8062: PUSH
8063: LD_INT 22
8065: PUSH
8066: LD_OWVAR 2
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: LD_INT 34
8080: PUSH
8081: LD_INT 7
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 34
8090: PUSH
8091: LD_INT 45
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 34
8100: PUSH
8101: LD_INT 28
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 34
8110: PUSH
8111: LD_INT 47
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: ST_TO_ADDR
// if not tmp then
8134: LD_VAR 0 2
8138: NOT
8139: IFFALSE 8143
// exit ;
8141: GO 8172
// for i in tmp do
8143: LD_ADDR_VAR 0 1
8147: PUSH
8148: LD_VAR 0 2
8152: PUSH
8153: FOR_IN
8154: IFFALSE 8170
// begin SetLives ( i , 0 ) ;
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 234
// end ;
8168: GO 8153
8170: POP
8171: POP
// end ;
8172: PPOPN 2
8174: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8175: LD_EXP 8
8179: IFFALSE 8187
8181: PUSH
8182: LD_EXP 14
8186: AND
8187: IFFALSE 8271
8189: GO 8191
8191: DISABLE
8192: LD_INT 0
8194: PPUSH
8195: PPUSH
// begin enable ;
8196: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8197: LD_ADDR_VAR 0 2
8201: PUSH
8202: LD_INT 22
8204: PUSH
8205: LD_OWVAR 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 32
8216: PUSH
8217: LD_INT 3
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PPUSH
8228: CALL_OW 69
8232: ST_TO_ADDR
// if not tmp then
8233: LD_VAR 0 2
8237: NOT
8238: IFFALSE 8242
// exit ;
8240: GO 8271
// for i in tmp do
8242: LD_ADDR_VAR 0 1
8246: PUSH
8247: LD_VAR 0 2
8251: PUSH
8252: FOR_IN
8253: IFFALSE 8269
// begin SetLives ( i , 0 ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 234
// end ;
8267: GO 8252
8269: POP
8270: POP
// end ;
8271: PPOPN 2
8273: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8274: LD_EXP 8
8278: IFFALSE 8286
8280: PUSH
8281: LD_EXP 11
8285: AND
8286: IFFALSE 8379
8288: GO 8290
8290: DISABLE
8291: LD_INT 0
8293: PPUSH
// begin enable ;
8294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8295: LD_ADDR_VAR 0 1
8299: PUSH
8300: LD_INT 22
8302: PUSH
8303: LD_OWVAR 2
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 5
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 25
8327: PUSH
8328: LD_INT 9
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 25
8337: PUSH
8338: LD_INT 8
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: FOR_IN
8361: IFFALSE 8377
// begin SetClass ( i , 1 ) ;
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_INT 1
8370: PPUSH
8371: CALL_OW 336
// end ;
8375: GO 8360
8377: POP
8378: POP
// end ;
8379: PPOPN 1
8381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8382: LD_EXP 8
8386: IFFALSE 8394
8388: PUSH
8389: LD_EXP 12
8393: AND
8394: IFFALSE 8406
8396: PUSH
8397: LD_OWVAR 65
8401: PUSH
8402: LD_INT 7
8404: LESS
8405: AND
8406: IFFALSE 8420
8408: GO 8410
8410: DISABLE
// begin enable ;
8411: ENABLE
// game_speed := 7 ;
8412: LD_ADDR_OWVAR 65
8416: PUSH
8417: LD_INT 7
8419: ST_TO_ADDR
// end ;
8420: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8421: LD_EXP 8
8425: IFFALSE 8433
8427: PUSH
8428: LD_EXP 15
8432: AND
8433: IFFALSE 8635
8435: GO 8437
8437: DISABLE
8438: LD_INT 0
8440: PPUSH
8441: PPUSH
8442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_INT 81
8450: PUSH
8451: LD_OWVAR 2
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 21
8462: PUSH
8463: LD_INT 1
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PPUSH
8474: CALL_OW 69
8478: ST_TO_ADDR
// if not tmp then
8479: LD_VAR 0 3
8483: NOT
8484: IFFALSE 8488
// exit ;
8486: GO 8635
// if tmp > 5 then
8488: LD_VAR 0 3
8492: PUSH
8493: LD_INT 5
8495: GREATER
8496: IFFALSE 8508
// k := 5 else
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_INT 5
8505: ST_TO_ADDR
8506: GO 8518
// k := tmp ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: LD_VAR 0 3
8517: ST_TO_ADDR
// for i := 1 to k do
8518: LD_ADDR_VAR 0 1
8522: PUSH
8523: DOUBLE
8524: LD_INT 1
8526: DEC
8527: ST_TO_ADDR
8528: LD_VAR 0 2
8532: PUSH
8533: FOR_TO
8534: IFFALSE 8633
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 1
8545: ARRAY
8546: PPUSH
8547: LD_VAR 0 1
8551: PUSH
8552: LD_INT 4
8554: MOD
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: PPUSH
8560: CALL_OW 259
8564: PUSH
8565: LD_INT 10
8567: LESS
8568: IFFALSE 8631
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8570: LD_VAR 0 3
8574: PUSH
8575: LD_VAR 0 1
8579: ARRAY
8580: PPUSH
8581: LD_VAR 0 1
8585: PUSH
8586: LD_INT 4
8588: MOD
8589: PUSH
8590: LD_INT 1
8592: PLUS
8593: PPUSH
8594: LD_VAR 0 3
8598: PUSH
8599: LD_VAR 0 1
8603: ARRAY
8604: PPUSH
8605: LD_VAR 0 1
8609: PUSH
8610: LD_INT 4
8612: MOD
8613: PUSH
8614: LD_INT 1
8616: PLUS
8617: PPUSH
8618: CALL_OW 259
8622: PUSH
8623: LD_INT 1
8625: PLUS
8626: PPUSH
8627: CALL_OW 237
8631: GO 8533
8633: POP
8634: POP
// end ;
8635: PPOPN 3
8637: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8638: LD_EXP 8
8642: IFFALSE 8650
8644: PUSH
8645: LD_EXP 16
8649: AND
8650: IFFALSE 8670
8652: GO 8654
8654: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8655: LD_INT 4
8657: PPUSH
8658: LD_OWVAR 2
8662: PPUSH
8663: LD_INT 0
8665: PPUSH
8666: CALL_OW 324
8670: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8671: LD_EXP 8
8675: IFFALSE 8683
8677: PUSH
8678: LD_EXP 45
8682: AND
8683: IFFALSE 8703
8685: GO 8687
8687: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8688: LD_INT 19
8690: PPUSH
8691: LD_OWVAR 2
8695: PPUSH
8696: LD_INT 0
8698: PPUSH
8699: CALL_OW 324
8703: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8704: LD_EXP 8
8708: IFFALSE 8716
8710: PUSH
8711: LD_EXP 17
8715: AND
8716: IFFALSE 8818
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin enable ;
8725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 22
8733: PUSH
8734: LD_OWVAR 2
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 2
8745: PUSH
8746: LD_INT 34
8748: PUSH
8749: LD_INT 11
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 34
8758: PUSH
8759: LD_INT 30
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 69
8779: ST_TO_ADDR
// if not tmp then
8780: LD_VAR 0 2
8784: NOT
8785: IFFALSE 8789
// exit ;
8787: GO 8818
// for i in tmp do
8789: LD_ADDR_VAR 0 1
8793: PUSH
8794: LD_VAR 0 2
8798: PUSH
8799: FOR_IN
8800: IFFALSE 8816
// begin SetLives ( i , 0 ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_INT 0
8809: PPUSH
8810: CALL_OW 234
// end ;
8814: GO 8799
8816: POP
8817: POP
// end ;
8818: PPOPN 2
8820: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8821: LD_EXP 8
8825: IFFALSE 8833
8827: PUSH
8828: LD_EXP 18
8832: AND
8833: IFFALSE 8853
8835: GO 8837
8837: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8838: LD_INT 32
8840: PPUSH
8841: LD_OWVAR 2
8845: PPUSH
8846: LD_INT 0
8848: PPUSH
8849: CALL_OW 324
8853: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8854: LD_EXP 8
8858: IFFALSE 8866
8860: PUSH
8861: LD_EXP 19
8865: AND
8866: IFFALSE 9049
8868: GO 8870
8870: DISABLE
8871: LD_INT 0
8873: PPUSH
8874: PPUSH
8875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8876: LD_ADDR_VAR 0 2
8880: PUSH
8881: LD_INT 22
8883: PUSH
8884: LD_OWVAR 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 33
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: ST_TO_ADDR
// if not tmp then
8912: LD_VAR 0 2
8916: NOT
8917: IFFALSE 8921
// exit ;
8919: GO 9049
// side := 0 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// for i := 1 to 8 do
8929: LD_ADDR_VAR 0 1
8933: PUSH
8934: DOUBLE
8935: LD_INT 1
8937: DEC
8938: ST_TO_ADDR
8939: LD_INT 8
8941: PUSH
8942: FOR_TO
8943: IFFALSE 8993
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8945: LD_OWVAR 2
8949: PUSH
8950: LD_VAR 0 1
8954: NONEQUAL
8955: IFFALSE 8977
8957: PUSH
8958: LD_OWVAR 2
8962: PPUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL_OW 81
8972: PUSH
8973: LD_INT 2
8975: EQUAL
8976: AND
8977: IFFALSE 8991
// begin side := i ;
8979: LD_ADDR_VAR 0 3
8983: PUSH
8984: LD_VAR 0 1
8988: ST_TO_ADDR
// break ;
8989: GO 8993
// end ;
8991: GO 8942
8993: POP
8994: POP
// if not side then
8995: LD_VAR 0 3
8999: NOT
9000: IFFALSE 9004
// exit ;
9002: GO 9049
// for i := 1 to tmp do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_VAR 0 2
9018: PUSH
9019: FOR_TO
9020: IFFALSE 9047
// if Prob ( 60 ) then
9022: LD_INT 60
9024: PPUSH
9025: CALL_OW 13
9029: IFFALSE 9045
// SetSide ( i , side ) ;
9031: LD_VAR 0 1
9035: PPUSH
9036: LD_VAR 0 3
9040: PPUSH
9041: CALL_OW 235
9045: GO 9019
9047: POP
9048: POP
// end ;
9049: PPOPN 3
9051: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9052: LD_EXP 8
9056: IFFALSE 9064
9058: PUSH
9059: LD_EXP 21
9063: AND
9064: IFFALSE 9183
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9072: LD_ADDR_VAR 0 1
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_OWVAR 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: LD_INT 23
9104: PUSH
9105: LD_INT 0
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: FOR_IN
9127: IFFALSE 9181
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 257
9138: PUSH
9139: LD_INT 1
9141: PUSH
9142: LD_INT 2
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: LD_INT 4
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: IN
9157: IFFALSE 9179
// SetClass ( un , rand ( 1 , 4 ) ) ;
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: LD_INT 4
9169: PPUSH
9170: CALL_OW 12
9174: PPUSH
9175: CALL_OW 336
9179: GO 9126
9181: POP
9182: POP
// end ;
9183: PPOPN 1
9185: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9186: LD_EXP 8
9190: IFFALSE 9198
9192: PUSH
9193: LD_EXP 20
9197: AND
9198: IFFALSE 9277
9200: GO 9202
9202: DISABLE
9203: LD_INT 0
9205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_OWVAR 2
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 21
9225: PUSH
9226: LD_INT 3
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PPUSH
9237: CALL_OW 69
9241: ST_TO_ADDR
// if not tmp then
9242: LD_VAR 0 1
9246: NOT
9247: IFFALSE 9251
// exit ;
9249: GO 9277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9251: LD_VAR 0 1
9255: PUSH
9256: LD_INT 1
9258: PPUSH
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 12
9268: ARRAY
9269: PPUSH
9270: LD_INT 100
9272: PPUSH
9273: CALL_OW 234
// end ;
9277: PPOPN 1
9279: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9280: LD_EXP 8
9284: IFFALSE 9292
9286: PUSH
9287: LD_EXP 22
9291: AND
9292: IFFALSE 9390
9294: GO 9296
9296: DISABLE
9297: LD_INT 0
9299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9300: LD_ADDR_VAR 0 1
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_OWVAR 2
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 21
9319: PUSH
9320: LD_INT 1
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PPUSH
9331: CALL_OW 69
9335: ST_TO_ADDR
// if not tmp then
9336: LD_VAR 0 1
9340: NOT
9341: IFFALSE 9345
// exit ;
9343: GO 9390
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9345: LD_VAR 0 1
9349: PUSH
9350: LD_INT 1
9352: PPUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 12
9362: ARRAY
9363: PPUSH
9364: LD_INT 1
9366: PPUSH
9367: LD_INT 4
9369: PPUSH
9370: CALL_OW 12
9374: PPUSH
9375: LD_INT 3000
9377: PPUSH
9378: LD_INT 9000
9380: PPUSH
9381: CALL_OW 12
9385: PPUSH
9386: CALL_OW 492
// end ;
9390: PPOPN 1
9392: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9393: LD_EXP 8
9397: IFFALSE 9405
9399: PUSH
9400: LD_EXP 23
9404: AND
9405: IFFALSE 9425
9407: GO 9409
9409: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_OWVAR 2
9417: PPUSH
9418: LD_INT 0
9420: PPUSH
9421: CALL_OW 324
9425: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9426: LD_EXP 8
9430: IFFALSE 9438
9432: PUSH
9433: LD_EXP 24
9437: AND
9438: IFFALSE 9521
9440: GO 9442
9442: DISABLE
9443: LD_INT 0
9445: PPUSH
9446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: LD_INT 22
9454: PUSH
9455: LD_OWVAR 2
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 21
9466: PUSH
9467: LD_INT 3
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if not tmp then
9483: LD_VAR 0 2
9487: NOT
9488: IFFALSE 9492
// exit ;
9490: GO 9521
// for i in tmp do
9492: LD_ADDR_VAR 0 1
9496: PUSH
9497: LD_VAR 0 2
9501: PUSH
9502: FOR_IN
9503: IFFALSE 9519
// SetBLevel ( i , 10 ) ;
9505: LD_VAR 0 1
9509: PPUSH
9510: LD_INT 10
9512: PPUSH
9513: CALL_OW 241
9517: GO 9502
9519: POP
9520: POP
// end ;
9521: PPOPN 2
9523: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9524: LD_EXP 8
9528: IFFALSE 9536
9530: PUSH
9531: LD_EXP 25
9535: AND
9536: IFFALSE 9647
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9546: LD_ADDR_VAR 0 3
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_OWVAR 2
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 25
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 69
9581: ST_TO_ADDR
// if not tmp then
9582: LD_VAR 0 3
9586: NOT
9587: IFFALSE 9591
// exit ;
9589: GO 9647
// un := tmp [ rand ( 1 , tmp ) ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: LD_VAR 0 3
9600: PUSH
9601: LD_INT 1
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 12
9613: ARRAY
9614: ST_TO_ADDR
// if Crawls ( un ) then
9615: LD_VAR 0 2
9619: PPUSH
9620: CALL_OW 318
9624: IFFALSE 9635
// ComWalk ( un ) ;
9626: LD_VAR 0 2
9630: PPUSH
9631: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9635: LD_VAR 0 2
9639: PPUSH
9640: LD_INT 5
9642: PPUSH
9643: CALL_OW 336
// end ;
9647: PPOPN 3
9649: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9650: LD_EXP 8
9654: IFFALSE 9662
9656: PUSH
9657: LD_EXP 26
9661: AND
9662: IFFALSE 9674
9664: PUSH
9665: LD_OWVAR 67
9669: PUSH
9670: LD_INT 4
9672: LESS
9673: AND
9674: IFFALSE 9693
9676: GO 9678
9678: DISABLE
// begin Difficulty := Difficulty + 1 ;
9679: LD_ADDR_OWVAR 67
9683: PUSH
9684: LD_OWVAR 67
9688: PUSH
9689: LD_INT 1
9691: PLUS
9692: ST_TO_ADDR
// end ;
9693: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9694: LD_EXP 8
9698: IFFALSE 9706
9700: PUSH
9701: LD_EXP 27
9705: AND
9706: IFFALSE 9809
9708: GO 9710
9710: DISABLE
9711: LD_INT 0
9713: PPUSH
// begin for i := 1 to 5 do
9714: LD_ADDR_VAR 0 1
9718: PUSH
9719: DOUBLE
9720: LD_INT 1
9722: DEC
9723: ST_TO_ADDR
9724: LD_INT 5
9726: PUSH
9727: FOR_TO
9728: IFFALSE 9807
// begin uc_nation := nation_nature ;
9730: LD_ADDR_OWVAR 21
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// uc_side := 0 ;
9738: LD_ADDR_OWVAR 20
9742: PUSH
9743: LD_INT 0
9745: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9746: LD_ADDR_OWVAR 29
9750: PUSH
9751: LD_INT 12
9753: PUSH
9754: LD_INT 12
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: ST_TO_ADDR
// hc_agressivity := 20 ;
9761: LD_ADDR_OWVAR 35
9765: PUSH
9766: LD_INT 20
9768: ST_TO_ADDR
// hc_class := class_tiger ;
9769: LD_ADDR_OWVAR 28
9773: PUSH
9774: LD_INT 14
9776: ST_TO_ADDR
// hc_gallery :=  ;
9777: LD_ADDR_OWVAR 33
9781: PUSH
9782: LD_STRING 
9784: ST_TO_ADDR
// hc_name :=  ;
9785: LD_ADDR_OWVAR 26
9789: PUSH
9790: LD_STRING 
9792: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9793: CALL_OW 44
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 51
// end ;
9805: GO 9727
9807: POP
9808: POP
// end ;
9809: PPOPN 1
9811: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9812: LD_EXP 8
9816: IFFALSE 9824
9818: PUSH
9819: LD_EXP 28
9823: AND
9824: IFFALSE 9833
9826: GO 9828
9828: DISABLE
// StreamSibBomb ;
9829: CALL 9834 0 0
9833: END
// export function StreamSibBomb ; var i , x , y ; begin
9834: LD_INT 0
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
// result := false ;
9840: LD_ADDR_VAR 0 1
9844: PUSH
9845: LD_INT 0
9847: ST_TO_ADDR
// for i := 1 to 16 do
9848: LD_ADDR_VAR 0 2
9852: PUSH
9853: DOUBLE
9854: LD_INT 1
9856: DEC
9857: ST_TO_ADDR
9858: LD_INT 16
9860: PUSH
9861: FOR_TO
9862: IFFALSE 10061
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: LD_INT 10
9871: PUSH
9872: LD_INT 20
9874: PUSH
9875: LD_INT 30
9877: PUSH
9878: LD_INT 40
9880: PUSH
9881: LD_INT 50
9883: PUSH
9884: LD_INT 60
9886: PUSH
9887: LD_INT 70
9889: PUSH
9890: LD_INT 80
9892: PUSH
9893: LD_INT 90
9895: PUSH
9896: LD_INT 100
9898: PUSH
9899: LD_INT 110
9901: PUSH
9902: LD_INT 120
9904: PUSH
9905: LD_INT 130
9907: PUSH
9908: LD_INT 140
9910: PUSH
9911: LD_INT 150
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 1
9933: PPUSH
9934: LD_INT 15
9936: PPUSH
9937: CALL_OW 12
9941: ARRAY
9942: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9943: LD_ADDR_VAR 0 4
9947: PUSH
9948: LD_INT 10
9950: PUSH
9951: LD_INT 20
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 40
9959: PUSH
9960: LD_INT 50
9962: PUSH
9963: LD_INT 60
9965: PUSH
9966: LD_INT 70
9968: PUSH
9969: LD_INT 80
9971: PUSH
9972: LD_INT 90
9974: PUSH
9975: LD_INT 100
9977: PUSH
9978: LD_INT 110
9980: PUSH
9981: LD_INT 120
9983: PUSH
9984: LD_INT 130
9986: PUSH
9987: LD_INT 140
9989: PUSH
9990: LD_INT 150
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 1
10012: PPUSH
10013: LD_INT 15
10015: PPUSH
10016: CALL_OW 12
10020: ARRAY
10021: ST_TO_ADDR
// if ValidHex ( x , y ) then
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_VAR 0 4
10031: PPUSH
10032: CALL_OW 488
10036: IFFALSE 10059
// begin result := [ x , y ] ;
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_VAR 0 3
10047: PUSH
10048: LD_VAR 0 4
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: ST_TO_ADDR
// break ;
10057: GO 10061
// end ; end ;
10059: GO 9861
10061: POP
10062: POP
// if result then
10063: LD_VAR 0 1
10067: IFFALSE 10127
// begin ToLua ( playSibBomb() ) ;
10069: LD_STRING playSibBomb()
10071: PPUSH
10072: CALL_OW 559
// wait ( 0 0$14 ) ;
10076: LD_INT 490
10078: PPUSH
10079: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10083: LD_VAR 0 1
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: LD_VAR 0 1
10096: PUSH
10097: LD_INT 2
10099: ARRAY
10100: PPUSH
10101: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10105: LD_VAR 0 1
10109: PUSH
10110: LD_INT 1
10112: ARRAY
10113: PPUSH
10114: LD_VAR 0 1
10118: PUSH
10119: LD_INT 2
10121: ARRAY
10122: PPUSH
10123: CALL_OW 429
// end ; end ;
10127: LD_VAR 0 1
10131: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10132: LD_EXP 8
10136: IFFALSE 10144
10138: PUSH
10139: LD_EXP 30
10143: AND
10144: IFFALSE 10156
10146: GO 10148
10148: DISABLE
// YouLost (  ) ;
10149: LD_STRING 
10151: PPUSH
10152: CALL_OW 104
10156: END
// every 0 0$1 trigger StreamModeActive and sFog do
10157: LD_EXP 8
10161: IFFALSE 10169
10163: PUSH
10164: LD_EXP 29
10168: AND
10169: IFFALSE 10183
10171: GO 10173
10173: DISABLE
// FogOff ( your_side ) ;
10174: LD_OWVAR 2
10178: PPUSH
10179: CALL_OW 344
10183: END
// every 0 0$1 trigger StreamModeActive and sSun do
10184: LD_EXP 8
10188: IFFALSE 10196
10190: PUSH
10191: LD_EXP 31
10195: AND
10196: IFFALSE 10224
10198: GO 10200
10200: DISABLE
// begin solar_recharge_percent := 0 ;
10201: LD_ADDR_OWVAR 79
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10209: LD_INT 10500
10211: PPUSH
10212: CALL_OW 67
// solar_recharge_percent := 100 ;
10216: LD_ADDR_OWVAR 79
10220: PUSH
10221: LD_INT 100
10223: ST_TO_ADDR
// end ;
10224: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10225: LD_EXP 8
10229: IFFALSE 10237
10231: PUSH
10232: LD_EXP 32
10236: AND
10237: IFFALSE 10476
10239: GO 10241
10241: DISABLE
10242: LD_INT 0
10244: PPUSH
10245: PPUSH
10246: PPUSH
// begin tmp := [ ] ;
10247: LD_ADDR_VAR 0 3
10251: PUSH
10252: EMPTY
10253: ST_TO_ADDR
// for i := 1 to 6 do
10254: LD_ADDR_VAR 0 1
10258: PUSH
10259: DOUBLE
10260: LD_INT 1
10262: DEC
10263: ST_TO_ADDR
10264: LD_INT 6
10266: PUSH
10267: FOR_TO
10268: IFFALSE 10373
// begin uc_nation := nation_nature ;
10270: LD_ADDR_OWVAR 21
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// uc_side := 0 ;
10278: LD_ADDR_OWVAR 20
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10286: LD_ADDR_OWVAR 29
10290: PUSH
10291: LD_INT 12
10293: PUSH
10294: LD_INT 12
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: ST_TO_ADDR
// hc_agressivity := 20 ;
10301: LD_ADDR_OWVAR 35
10305: PUSH
10306: LD_INT 20
10308: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10309: LD_ADDR_OWVAR 28
10313: PUSH
10314: LD_INT 17
10316: ST_TO_ADDR
// hc_gallery :=  ;
10317: LD_ADDR_OWVAR 33
10321: PUSH
10322: LD_STRING 
10324: ST_TO_ADDR
// hc_name :=  ;
10325: LD_ADDR_OWVAR 26
10329: PUSH
10330: LD_STRING 
10332: ST_TO_ADDR
// un := CreateHuman ;
10333: LD_ADDR_VAR 0 2
10337: PUSH
10338: CALL_OW 44
10342: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10343: LD_VAR 0 2
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 51
// tmp := tmp ^ un ;
10355: LD_ADDR_VAR 0 3
10359: PUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_VAR 0 2
10369: ADD
10370: ST_TO_ADDR
// end ;
10371: GO 10267
10373: POP
10374: POP
// repeat wait ( 0 0$1 ) ;
10375: LD_INT 35
10377: PPUSH
10378: CALL_OW 67
// for un in tmp do
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_VAR 0 3
10391: PUSH
10392: FOR_IN
10393: IFFALSE 10467
// begin if IsDead ( un ) then
10395: LD_VAR 0 2
10399: PPUSH
10400: CALL_OW 301
10404: IFFALSE 10424
// begin tmp := tmp diff un ;
10406: LD_ADDR_VAR 0 3
10410: PUSH
10411: LD_VAR 0 3
10415: PUSH
10416: LD_VAR 0 2
10420: DIFF
10421: ST_TO_ADDR
// continue ;
10422: GO 10392
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10424: LD_VAR 0 2
10428: PPUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_INT 0
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 69
10450: PPUSH
10451: LD_VAR 0 2
10455: PPUSH
10456: CALL_OW 74
10460: PPUSH
10461: CALL_OW 115
// end ;
10465: GO 10392
10467: POP
10468: POP
// until not tmp ;
10469: LD_VAR 0 3
10473: NOT
10474: IFFALSE 10375
// end ;
10476: PPOPN 3
10478: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10479: LD_EXP 8
10483: IFFALSE 10491
10485: PUSH
10486: LD_EXP 33
10490: AND
10491: IFFALSE 10545
10493: GO 10495
10495: DISABLE
// begin ToLua ( displayTroll(); ) ;
10496: LD_STRING displayTroll();
10498: PPUSH
10499: CALL_OW 559
// wait ( 3 3$00 ) ;
10503: LD_INT 6300
10505: PPUSH
10506: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10510: LD_STRING hideTroll();
10512: PPUSH
10513: CALL_OW 559
// wait ( 1 1$00 ) ;
10517: LD_INT 2100
10519: PPUSH
10520: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10524: LD_STRING displayTroll();
10526: PPUSH
10527: CALL_OW 559
// wait ( 1 1$00 ) ;
10531: LD_INT 2100
10533: PPUSH
10534: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10538: LD_STRING hideTroll();
10540: PPUSH
10541: CALL_OW 559
// end ;
10545: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10546: LD_EXP 8
10550: IFFALSE 10558
10552: PUSH
10553: LD_EXP 34
10557: AND
10558: IFFALSE 10621
10560: GO 10562
10562: DISABLE
10563: LD_INT 0
10565: PPUSH
// begin p := 0 ;
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// repeat game_speed := 1 ;
10574: LD_ADDR_OWVAR 65
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10582: LD_INT 35
10584: PPUSH
10585: CALL_OW 67
// p := p + 1 ;
10589: LD_ADDR_VAR 0 1
10593: PUSH
10594: LD_VAR 0 1
10598: PUSH
10599: LD_INT 1
10601: PLUS
10602: ST_TO_ADDR
// until p >= 60 ;
10603: LD_VAR 0 1
10607: PUSH
10608: LD_INT 60
10610: GREATEREQUAL
10611: IFFALSE 10574
// game_speed := 4 ;
10613: LD_ADDR_OWVAR 65
10617: PUSH
10618: LD_INT 4
10620: ST_TO_ADDR
// end ;
10621: PPOPN 1
10623: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10624: LD_EXP 8
10628: IFFALSE 10636
10630: PUSH
10631: LD_EXP 35
10635: AND
10636: IFFALSE 10782
10638: GO 10640
10640: DISABLE
10641: LD_INT 0
10643: PPUSH
10644: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 22
10652: PUSH
10653: LD_OWVAR 2
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 2
10664: PUSH
10665: LD_INT 30
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 30
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: ST_TO_ADDR
// if not depot then
10699: LD_VAR 0 1
10703: NOT
10704: IFFALSE 10708
// exit ;
10706: GO 10782
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_VAR 0 1
10717: PUSH
10718: LD_INT 1
10720: PPUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 12
10730: ARRAY
10731: PPUSH
10732: CALL_OW 274
10736: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10737: LD_VAR 0 2
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: LD_INT 0
10747: PPUSH
10748: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10752: LD_VAR 0 2
10756: PPUSH
10757: LD_INT 2
10759: PPUSH
10760: LD_INT 0
10762: PPUSH
10763: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_INT 3
10774: PPUSH
10775: LD_INT 0
10777: PPUSH
10778: CALL_OW 277
// end ;
10782: PPOPN 2
10784: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10785: LD_EXP 8
10789: IFFALSE 10797
10791: PUSH
10792: LD_EXP 36
10796: AND
10797: IFFALSE 10894
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10805: LD_ADDR_VAR 0 1
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_OWVAR 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 1
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: LD_INT 23
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: ST_TO_ADDR
// if not tmp then
10859: LD_VAR 0 1
10863: NOT
10864: IFFALSE 10868
// exit ;
10866: GO 10894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10868: LD_VAR 0 1
10872: PUSH
10873: LD_INT 1
10875: PPUSH
10876: LD_VAR 0 1
10880: PPUSH
10881: CALL_OW 12
10885: ARRAY
10886: PPUSH
10887: LD_INT 200
10889: PPUSH
10890: CALL_OW 234
// end ;
10894: PPOPN 1
10896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10897: LD_EXP 8
10901: IFFALSE 10909
10903: PUSH
10904: LD_EXP 37
10908: AND
10909: IFFALSE 10988
10911: GO 10913
10913: DISABLE
10914: LD_INT 0
10916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: LD_INT 22
10924: PUSH
10925: LD_OWVAR 2
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 21
10936: PUSH
10937: LD_INT 2
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 69
10952: ST_TO_ADDR
// if not tmp then
10953: LD_VAR 0 1
10957: NOT
10958: IFFALSE 10962
// exit ;
10960: GO 10988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10962: LD_VAR 0 1
10966: PUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 12
10979: ARRAY
10980: PPUSH
10981: LD_INT 60
10983: PPUSH
10984: CALL_OW 234
// end ;
10988: PPOPN 1
10990: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10991: LD_EXP 8
10995: IFFALSE 11003
10997: PUSH
10998: LD_EXP 38
11002: AND
11003: IFFALSE 11102
11005: GO 11007
11007: DISABLE
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
// begin enable ;
11012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_INT 22
11020: PUSH
11021: LD_OWVAR 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 61
11032: PUSH
11033: EMPTY
11034: LIST
11035: PUSH
11036: LD_INT 33
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 69
11055: ST_TO_ADDR
// if not tmp then
11056: LD_VAR 0 1
11060: NOT
11061: IFFALSE 11065
// exit ;
11063: GO 11102
// for i in tmp do
11065: LD_ADDR_VAR 0 2
11069: PUSH
11070: LD_VAR 0 1
11074: PUSH
11075: FOR_IN
11076: IFFALSE 11100
// if IsControledBy ( i ) then
11078: LD_VAR 0 2
11082: PPUSH
11083: CALL_OW 312
11087: IFFALSE 11098
// ComUnlink ( i ) ;
11089: LD_VAR 0 2
11093: PPUSH
11094: CALL_OW 136
11098: GO 11075
11100: POP
11101: POP
// end ;
11102: PPOPN 2
11104: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11105: LD_EXP 8
11109: IFFALSE 11117
11111: PUSH
11112: LD_EXP 39
11116: AND
11117: IFFALSE 11257
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
// begin ToLua ( displayPowell(); ) ;
11126: LD_STRING displayPowell();
11128: PPUSH
11129: CALL_OW 559
// uc_side := 0 ;
11133: LD_ADDR_OWVAR 20
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// uc_nation := 2 ;
11141: LD_ADDR_OWVAR 21
11145: PUSH
11146: LD_INT 2
11148: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11149: LD_ADDR_OWVAR 37
11153: PUSH
11154: LD_INT 14
11156: ST_TO_ADDR
// vc_engine := engine_siberite ;
11157: LD_ADDR_OWVAR 39
11161: PUSH
11162: LD_INT 3
11164: ST_TO_ADDR
// vc_control := control_apeman ;
11165: LD_ADDR_OWVAR 38
11169: PUSH
11170: LD_INT 5
11172: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11173: LD_ADDR_OWVAR 40
11177: PUSH
11178: LD_INT 29
11180: ST_TO_ADDR
// un := CreateVehicle ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: CALL_OW 45
11190: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11191: LD_VAR 0 2
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11203: LD_INT 35
11205: PPUSH
11206: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11210: LD_VAR 0 2
11214: PPUSH
11215: LD_INT 22
11217: PUSH
11218: LD_OWVAR 2
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: PPUSH
11232: LD_VAR 0 2
11236: PPUSH
11237: CALL_OW 74
11241: PPUSH
11242: CALL_OW 115
// until IsDead ( un ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: CALL_OW 301
11255: IFFALSE 11203
// end ;
11257: PPOPN 2
11259: END
// every 0 0$1 trigger StreamModeActive and sStu do
11260: LD_EXP 8
11264: IFFALSE 11272
11266: PUSH
11267: LD_EXP 47
11271: AND
11272: IFFALSE 11288
11274: GO 11276
11276: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11277: LD_STRING displayStucuk();
11279: PPUSH
11280: CALL_OW 559
// ResetFog ;
11284: CALL_OW 335
// end ;
11288: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11289: LD_EXP 8
11293: IFFALSE 11301
11295: PUSH
11296: LD_EXP 40
11300: AND
11301: IFFALSE 11442
11303: GO 11305
11305: DISABLE
11306: LD_INT 0
11308: PPUSH
11309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11310: LD_ADDR_VAR 0 2
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_OWVAR 2
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// if not tmp then
11346: LD_VAR 0 2
11350: NOT
11351: IFFALSE 11355
// exit ;
11353: GO 11442
// un := tmp [ rand ( 1 , tmp ) ] ;
11355: LD_ADDR_VAR 0 1
11359: PUSH
11360: LD_VAR 0 2
11364: PUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 12
11377: ARRAY
11378: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11379: LD_VAR 0 1
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_OWVAR 3
11400: PUSH
11401: LD_VAR 0 1
11405: DIFF
11406: PPUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 74
11416: PPUSH
11417: CALL_OW 115
// wait ( 0 0$20 ) ;
11421: LD_INT 700
11423: PPUSH
11424: CALL_OW 67
// SetSide ( un , your_side ) ;
11428: LD_VAR 0 1
11432: PPUSH
11433: LD_OWVAR 2
11437: PPUSH
11438: CALL_OW 235
// end ;
11442: PPOPN 2
11444: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11445: LD_EXP 8
11449: IFFALSE 11457
11451: PUSH
11452: LD_EXP 41
11456: AND
11457: IFFALSE 11563
11459: GO 11461
11461: DISABLE
11462: LD_INT 0
11464: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11465: LD_ADDR_VAR 0 1
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_OWVAR 2
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: LD_INT 30
11487: PUSH
11488: LD_INT 0
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 30
11497: PUSH
11498: LD_INT 1
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: ST_TO_ADDR
// if not depot then
11519: LD_VAR 0 1
11523: NOT
11524: IFFALSE 11528
// exit ;
11526: GO 11563
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11528: LD_VAR 0 1
11532: PUSH
11533: LD_INT 1
11535: ARRAY
11536: PPUSH
11537: CALL_OW 250
11541: PPUSH
11542: LD_VAR 0 1
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PPUSH
11551: CALL_OW 251
11555: PPUSH
11556: LD_INT 70
11558: PPUSH
11559: CALL_OW 495
// end ;
11563: PPOPN 1
11565: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11566: LD_EXP 8
11570: IFFALSE 11578
11572: PUSH
11573: LD_EXP 42
11577: AND
11578: IFFALSE 11789
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
11589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11590: LD_ADDR_VAR 0 5
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_OWVAR 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PPUSH
11621: CALL_OW 69
11625: ST_TO_ADDR
// if not tmp then
11626: LD_VAR 0 5
11630: NOT
11631: IFFALSE 11635
// exit ;
11633: GO 11789
// for i in tmp do
11635: LD_ADDR_VAR 0 1
11639: PUSH
11640: LD_VAR 0 5
11644: PUSH
11645: FOR_IN
11646: IFFALSE 11787
// begin d := rand ( 0 , 5 ) ;
11648: LD_ADDR_VAR 0 4
11652: PUSH
11653: LD_INT 0
11655: PPUSH
11656: LD_INT 5
11658: PPUSH
11659: CALL_OW 12
11663: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11664: LD_ADDR_VAR 0 2
11668: PUSH
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL_OW 250
11678: PPUSH
11679: LD_VAR 0 4
11683: PPUSH
11684: LD_INT 3
11686: PPUSH
11687: LD_INT 12
11689: PPUSH
11690: CALL_OW 12
11694: PPUSH
11695: CALL_OW 272
11699: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 251
11714: PPUSH
11715: LD_VAR 0 4
11719: PPUSH
11720: LD_INT 3
11722: PPUSH
11723: LD_INT 12
11725: PPUSH
11726: CALL_OW 12
11730: PPUSH
11731: CALL_OW 273
11735: ST_TO_ADDR
// if ValidHex ( x , y ) then
11736: LD_VAR 0 2
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: CALL_OW 488
11750: IFFALSE 11785
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11752: LD_VAR 0 1
11756: PPUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_VAR 0 3
11766: PPUSH
11767: LD_INT 3
11769: PPUSH
11770: LD_INT 6
11772: PPUSH
11773: CALL_OW 12
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 483
// end ;
11785: GO 11645
11787: POP
11788: POP
// end ;
11789: PPOPN 5
11791: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11792: LD_EXP 8
11796: IFFALSE 11804
11798: PUSH
11799: LD_EXP 43
11803: AND
11804: IFFALSE 11898
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
11812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_OWVAR 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 32
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 21
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// if not tmp then
11860: LD_VAR 0 2
11864: NOT
11865: IFFALSE 11869
// exit ;
11867: GO 11898
// for i in tmp do
11869: LD_ADDR_VAR 0 1
11873: PUSH
11874: LD_VAR 0 2
11878: PUSH
11879: FOR_IN
11880: IFFALSE 11896
// SetFuel ( i , 0 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 0
11889: PPUSH
11890: CALL_OW 240
11894: GO 11879
11896: POP
11897: POP
// end ;
11898: PPOPN 2
11900: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11901: LD_EXP 8
11905: IFFALSE 11913
11907: PUSH
11908: LD_EXP 44
11912: AND
11913: IFFALSE 11979
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11921: LD_ADDR_VAR 0 1
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_OWVAR 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 29
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 69
11956: ST_TO_ADDR
// if not tmp then
11957: LD_VAR 0 1
11961: NOT
11962: IFFALSE 11966
// exit ;
11964: GO 11979
// DestroyUnit ( tmp [ 1 ] ) ;
11966: LD_VAR 0 1
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL_OW 65
// end ;
11979: PPOPN 1
11981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11982: LD_EXP 8
11986: IFFALSE 11994
11988: PUSH
11989: LD_EXP 46
11993: AND
11994: IFFALSE 12123
11996: GO 11998
11998: DISABLE
11999: LD_INT 0
12001: PPUSH
// begin uc_side := 0 ;
12002: LD_ADDR_OWVAR 20
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// uc_nation := nation_arabian ;
12010: LD_ADDR_OWVAR 21
12014: PUSH
12015: LD_INT 2
12017: ST_TO_ADDR
// hc_gallery :=  ;
12018: LD_ADDR_OWVAR 33
12022: PUSH
12023: LD_STRING 
12025: ST_TO_ADDR
// hc_name :=  ;
12026: LD_ADDR_OWVAR 26
12030: PUSH
12031: LD_STRING 
12033: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12034: LD_INT 1
12036: PPUSH
12037: LD_INT 11
12039: PPUSH
12040: LD_INT 10
12042: PPUSH
12043: CALL_OW 380
// un := CreateHuman ;
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: CALL_OW 44
12056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12069: LD_INT 35
12071: PPUSH
12072: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: LD_INT 22
12083: PUSH
12084: LD_OWVAR 2
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PPUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 74
12107: PPUSH
12108: CALL_OW 115
// until IsDead ( un ) ;
12112: LD_VAR 0 1
12116: PPUSH
12117: CALL_OW 301
12121: IFFALSE 12069
// end ;
12123: PPOPN 1
12125: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12126: LD_EXP 8
12130: IFFALSE 12138
12132: PUSH
12133: LD_EXP 48
12137: AND
12138: IFFALSE 12150
12140: GO 12142
12142: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12143: LD_STRING earthquake(getX(game), 0, 32)
12145: PPUSH
12146: CALL_OW 559
12150: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12151: LD_EXP 8
12155: IFFALSE 12163
12157: PUSH
12158: LD_EXP 49
12162: AND
12163: IFFALSE 12254
12165: GO 12167
12167: DISABLE
12168: LD_INT 0
12170: PPUSH
// begin enable ;
12171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 22
12179: PUSH
12180: LD_OWVAR 2
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 33
12201: PUSH
12202: LD_INT 3
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: ST_TO_ADDR
// if not tmp then
12219: LD_VAR 0 1
12223: NOT
12224: IFFALSE 12228
// exit ;
12226: GO 12254
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: PPUSH
12236: LD_VAR 0 1
12240: PPUSH
12241: CALL_OW 12
12245: ARRAY
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 234
// end ;
12254: PPOPN 1
12256: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12257: LD_EXP 8
12261: IFFALSE 12269
12263: PUSH
12264: LD_EXP 50
12268: AND
12269: IFFALSE 12410
12271: GO 12273
12273: DISABLE
12274: LD_INT 0
12276: PPUSH
12277: PPUSH
12278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_INT 22
12286: PUSH
12287: LD_OWVAR 2
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 25
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PPUSH
12310: CALL_OW 69
12314: ST_TO_ADDR
// if not tmp then
12315: LD_VAR 0 3
12319: NOT
12320: IFFALSE 12324
// exit ;
12322: GO 12410
// un := tmp [ rand ( 1 , tmp ) ] ;
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_VAR 0 3
12333: PUSH
12334: LD_INT 1
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: CALL_OW 12
12346: ARRAY
12347: ST_TO_ADDR
// if Crawls ( un ) then
12348: LD_VAR 0 2
12352: PPUSH
12353: CALL_OW 318
12357: IFFALSE 12368
// ComWalk ( un ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 9
12375: PPUSH
12376: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12380: LD_INT 28
12382: PPUSH
12383: LD_OWVAR 2
12387: PPUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12395: LD_INT 29
12397: PPUSH
12398: LD_OWVAR 2
12402: PPUSH
12403: LD_INT 2
12405: PPUSH
12406: CALL_OW 322
// end ;
12410: PPOPN 3
12412: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12413: LD_EXP 8
12417: IFFALSE 12425
12419: PUSH
12420: LD_EXP 51
12424: AND
12425: IFFALSE 12536
12427: GO 12429
12429: DISABLE
12430: LD_INT 0
12432: PPUSH
12433: PPUSH
12434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12435: LD_ADDR_VAR 0 3
12439: PUSH
12440: LD_INT 22
12442: PUSH
12443: LD_OWVAR 2
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 25
12454: PUSH
12455: LD_INT 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 69
12470: ST_TO_ADDR
// if not tmp then
12471: LD_VAR 0 3
12475: NOT
12476: IFFALSE 12480
// exit ;
12478: GO 12536
// un := tmp [ rand ( 1 , tmp ) ] ;
12480: LD_ADDR_VAR 0 2
12484: PUSH
12485: LD_VAR 0 3
12489: PUSH
12490: LD_INT 1
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: CALL_OW 12
12502: ARRAY
12503: ST_TO_ADDR
// if Crawls ( un ) then
12504: LD_VAR 0 2
12508: PPUSH
12509: CALL_OW 318
12513: IFFALSE 12524
// ComWalk ( un ) ;
12515: LD_VAR 0 2
12519: PPUSH
12520: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12524: LD_VAR 0 2
12528: PPUSH
12529: LD_INT 8
12531: PPUSH
12532: CALL_OW 336
// end ;
12536: PPOPN 3
12538: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12539: LD_EXP 8
12543: IFFALSE 12551
12545: PUSH
12546: LD_EXP 52
12550: AND
12551: IFFALSE 12695
12553: GO 12555
12555: DISABLE
12556: LD_INT 0
12558: PPUSH
12559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12560: LD_ADDR_VAR 0 2
12564: PUSH
12565: LD_INT 22
12567: PUSH
12568: LD_OWVAR 2
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 2
12589: PUSH
12590: LD_INT 34
12592: PUSH
12593: LD_INT 12
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 34
12602: PUSH
12603: LD_INT 51
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 34
12612: PUSH
12613: LD_INT 32
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: PPUSH
12631: CALL_OW 69
12635: ST_TO_ADDR
// if not tmp then
12636: LD_VAR 0 2
12640: NOT
12641: IFFALSE 12645
// exit ;
12643: GO 12695
// for i in tmp do
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_VAR 0 2
12654: PUSH
12655: FOR_IN
12656: IFFALSE 12693
// if GetCargo ( i , mat_artifact ) = 0 then
12658: LD_VAR 0 1
12662: PPUSH
12663: LD_INT 4
12665: PPUSH
12666: CALL_OW 289
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: IFFALSE 12691
// SetCargo ( i , mat_siberit , 100 ) ;
12676: LD_VAR 0 1
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: LD_INT 100
12686: PPUSH
12687: CALL_OW 290
12691: GO 12655
12693: POP
12694: POP
// end ;
12695: PPOPN 2
12697: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12698: LD_EXP 8
12702: IFFALSE 12710
12704: PUSH
12705: LD_EXP 53
12709: AND
12710: IFFALSE 12893
12712: GO 12714
12714: DISABLE
12715: LD_INT 0
12717: PPUSH
12718: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 22
12726: PUSH
12727: LD_OWVAR 2
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: ST_TO_ADDR
// if not tmp then
12741: LD_VAR 0 2
12745: NOT
12746: IFFALSE 12750
// exit ;
12748: GO 12893
// for i := 1 to 2 do
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_INT 2
12762: PUSH
12763: FOR_TO
12764: IFFALSE 12891
// begin uc_side := your_side ;
12766: LD_ADDR_OWVAR 20
12770: PUSH
12771: LD_OWVAR 2
12775: ST_TO_ADDR
// uc_nation := nation_american ;
12776: LD_ADDR_OWVAR 21
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// vc_chassis := us_morphling ;
12784: LD_ADDR_OWVAR 37
12788: PUSH
12789: LD_INT 5
12791: ST_TO_ADDR
// vc_engine := engine_siberite ;
12792: LD_ADDR_OWVAR 39
12796: PUSH
12797: LD_INT 3
12799: ST_TO_ADDR
// vc_control := control_computer ;
12800: LD_ADDR_OWVAR 38
12804: PUSH
12805: LD_INT 3
12807: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12808: LD_ADDR_OWVAR 40
12812: PUSH
12813: LD_INT 10
12815: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12816: LD_VAR 0 2
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PPUSH
12825: CALL_OW 310
12829: NOT
12830: IFFALSE 12877
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12832: CALL_OW 45
12836: PPUSH
12837: LD_VAR 0 2
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PPUSH
12846: CALL_OW 250
12850: PPUSH
12851: LD_VAR 0 2
12855: PUSH
12856: LD_INT 1
12858: ARRAY
12859: PPUSH
12860: CALL_OW 251
12864: PPUSH
12865: LD_INT 12
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 50
12875: GO 12889
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12877: CALL_OW 45
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 51
// end ;
12889: GO 12763
12891: POP
12892: POP
// end ;
12893: PPOPN 2
12895: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12896: LD_EXP 8
12900: IFFALSE 12908
12902: PUSH
12903: LD_EXP 54
12907: AND
12908: IFFALSE 13130
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12921: LD_ADDR_VAR 0 6
12925: PUSH
12926: LD_INT 22
12928: PUSH
12929: LD_OWVAR 2
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 1
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 23
12953: PUSH
12954: LD_INT 0
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: ST_TO_ADDR
// if not tmp then
12975: LD_VAR 0 6
12979: NOT
12980: IFFALSE 12984
// exit ;
12982: GO 13130
// s1 := rand ( 1 , 4 ) ;
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_INT 1
12991: PPUSH
12992: LD_INT 4
12994: PPUSH
12995: CALL_OW 12
12999: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13000: LD_ADDR_VAR 0 4
13004: PUSH
13005: LD_VAR 0 6
13009: PUSH
13010: LD_INT 1
13012: ARRAY
13013: PPUSH
13014: LD_VAR 0 2
13018: PPUSH
13019: CALL_OW 259
13023: ST_TO_ADDR
// if s1 = 1 then
13024: LD_VAR 0 2
13028: PUSH
13029: LD_INT 1
13031: EQUAL
13032: IFFALSE 13052
// s2 := rand ( 2 , 4 ) else
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_INT 2
13041: PPUSH
13042: LD_INT 4
13044: PPUSH
13045: CALL_OW 12
13049: ST_TO_ADDR
13050: GO 13060
// s2 := 1 ;
13052: LD_ADDR_VAR 0 3
13056: PUSH
13057: LD_INT 1
13059: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13060: LD_ADDR_VAR 0 5
13064: PUSH
13065: LD_VAR 0 6
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: CALL_OW 259
13083: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13084: LD_VAR 0 6
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: PPUSH
13093: LD_VAR 0 2
13097: PPUSH
13098: LD_VAR 0 5
13102: PPUSH
13103: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13107: LD_VAR 0 6
13111: PUSH
13112: LD_INT 1
13114: ARRAY
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_VAR 0 4
13125: PPUSH
13126: CALL_OW 237
// end ;
13130: PPOPN 6
13132: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13133: LD_EXP 8
13137: IFFALSE 13145
13139: PUSH
13140: LD_EXP 55
13144: AND
13145: IFFALSE 13224
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_OWVAR 2
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: LD_INT 3
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: ST_TO_ADDR
// if not tmp then
13189: LD_VAR 0 1
13193: NOT
13194: IFFALSE 13198
// exit ;
13196: GO 13224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13198: LD_VAR 0 1
13202: PUSH
13203: LD_INT 1
13205: PPUSH
13206: LD_VAR 0 1
13210: PPUSH
13211: CALL_OW 12
13215: ARRAY
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 234
// end ;
13224: PPOPN 1
13226: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13227: LD_EXP 8
13231: IFFALSE 13239
13233: PUSH
13234: LD_EXP 56
13238: AND
13239: IFFALSE 13351
13241: GO 13243
13243: DISABLE
13244: LD_INT 0
13246: PPUSH
13247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_INT 22
13255: PUSH
13256: LD_OWVAR 2
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 27
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 26
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 30
13290: PUSH
13291: LD_INT 28
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 69
13312: ST_TO_ADDR
// if not tmp then
13313: LD_VAR 0 2
13317: NOT
13318: IFFALSE 13322
// exit ;
13320: GO 13351
// for i in tmp do
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: LD_VAR 0 2
13331: PUSH
13332: FOR_IN
13333: IFFALSE 13349
// SetLives ( i , 1 ) ;
13335: LD_VAR 0 1
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 234
13347: GO 13332
13349: POP
13350: POP
// end ;
13351: PPOPN 2
13353: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13354: LD_EXP 8
13358: IFFALSE 13366
13360: PUSH
13361: LD_EXP 57
13365: AND
13366: IFFALSE 13653
13368: GO 13370
13370: DISABLE
13371: LD_INT 0
13373: PPUSH
13374: PPUSH
13375: PPUSH
// begin i := rand ( 1 , 7 ) ;
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_INT 1
13383: PPUSH
13384: LD_INT 7
13386: PPUSH
13387: CALL_OW 12
13391: ST_TO_ADDR
// case i of 1 :
13392: LD_VAR 0 1
13396: PUSH
13397: LD_INT 1
13399: DOUBLE
13400: EQUAL
13401: IFTRUE 13405
13403: GO 13415
13405: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13406: LD_STRING earthquake(getX(game), 0, 32)
13408: PPUSH
13409: CALL_OW 559
13413: GO 13653
13415: LD_INT 2
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13437
13423: POP
// begin ToLua ( displayStucuk(); ) ;
13424: LD_STRING displayStucuk();
13426: PPUSH
13427: CALL_OW 559
// ResetFog ;
13431: CALL_OW 335
// end ; 3 :
13435: GO 13653
13437: LD_INT 3
13439: DOUBLE
13440: EQUAL
13441: IFTRUE 13445
13443: GO 13549
13445: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13446: LD_ADDR_VAR 0 2
13450: PUSH
13451: LD_INT 22
13453: PUSH
13454: LD_OWVAR 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if not tmp then
13482: LD_VAR 0 2
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 13653
// un := tmp [ rand ( 1 , tmp ) ] ;
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_VAR 0 2
13500: PUSH
13501: LD_INT 1
13503: PPUSH
13504: LD_VAR 0 2
13508: PPUSH
13509: CALL_OW 12
13513: ARRAY
13514: ST_TO_ADDR
// if Crawls ( un ) then
13515: LD_VAR 0 3
13519: PPUSH
13520: CALL_OW 318
13524: IFFALSE 13535
// ComWalk ( un ) ;
13526: LD_VAR 0 3
13530: PPUSH
13531: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 8
13542: PPUSH
13543: CALL_OW 336
// end ; 4 :
13547: GO 13653
13549: LD_INT 4
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13631
13557: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_INT 22
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 30
13577: PUSH
13578: LD_INT 29
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 69
13593: ST_TO_ADDR
// if not tmp then
13594: LD_VAR 0 2
13598: NOT
13599: IFFALSE 13603
// exit ;
13601: GO 13653
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13603: LD_VAR 0 2
13607: PUSH
13608: LD_INT 1
13610: ARRAY
13611: PPUSH
13612: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13616: LD_VAR 0 2
13620: PUSH
13621: LD_INT 1
13623: ARRAY
13624: PPUSH
13625: CALL_OW 65
// end ; 5 .. 7 :
13629: GO 13653
13631: LD_INT 5
13633: DOUBLE
13634: GREATEREQUAL
13635: IFFALSE 13643
13637: LD_INT 7
13639: DOUBLE
13640: LESSEQUAL
13641: IFTRUE 13645
13643: GO 13652
13645: POP
// StreamSibBomb ; end ;
13646: CALL 9834 0 0
13650: GO 13653
13652: POP
// end ;
13653: PPOPN 3
13655: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13656: LD_EXP 8
13660: IFFALSE 13668
13662: PUSH
13663: LD_EXP 58
13667: AND
13668: IFFALSE 13824
13670: GO 13672
13672: DISABLE
13673: LD_INT 0
13675: PPUSH
13676: PPUSH
13677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13678: LD_ADDR_VAR 0 2
13682: PUSH
13683: LD_INT 81
13685: PUSH
13686: LD_OWVAR 2
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 21
13700: PUSH
13701: LD_INT 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 21
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 2
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13824
// p := 0 ;
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13749: LD_INT 35
13751: PPUSH
13752: CALL_OW 67
// p := p + 1 ;
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_VAR 0 3
13765: PUSH
13766: LD_INT 1
13768: PLUS
13769: ST_TO_ADDR
// for i in tmp do
13770: LD_ADDR_VAR 0 1
13774: PUSH
13775: LD_VAR 0 2
13779: PUSH
13780: FOR_IN
13781: IFFALSE 13812
// if GetLives ( i ) < 1000 then
13783: LD_VAR 0 1
13787: PPUSH
13788: CALL_OW 256
13792: PUSH
13793: LD_INT 1000
13795: LESS
13796: IFFALSE 13810
// SetLives ( i , 1000 ) ;
13798: LD_VAR 0 1
13802: PPUSH
13803: LD_INT 1000
13805: PPUSH
13806: CALL_OW 234
13810: GO 13780
13812: POP
13813: POP
// until p > 20 ;
13814: LD_VAR 0 3
13818: PUSH
13819: LD_INT 20
13821: GREATER
13822: IFFALSE 13749
// end ;
13824: PPOPN 3
13826: END
// every 0 0$1 trigger StreamModeActive and sTime do
13827: LD_EXP 8
13831: IFFALSE 13839
13833: PUSH
13834: LD_EXP 59
13838: AND
13839: IFFALSE 13874
13841: GO 13843
13843: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13844: LD_INT 28
13846: PPUSH
13847: LD_OWVAR 2
13851: PPUSH
13852: LD_INT 2
13854: PPUSH
13855: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13859: LD_INT 30
13861: PPUSH
13862: LD_OWVAR 2
13866: PPUSH
13867: LD_INT 2
13869: PPUSH
13870: CALL_OW 322
// end ;
13874: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13875: LD_EXP 8
13879: IFFALSE 13887
13881: PUSH
13882: LD_EXP 60
13886: AND
13887: IFFALSE 14008
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13896: LD_ADDR_VAR 0 2
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_OWVAR 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: LD_INT 23
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: ST_TO_ADDR
// if not tmp then
13950: LD_VAR 0 2
13954: NOT
13955: IFFALSE 13959
// exit ;
13957: GO 14008
// for i in tmp do
13959: LD_ADDR_VAR 0 1
13963: PUSH
13964: LD_VAR 0 2
13968: PUSH
13969: FOR_IN
13970: IFFALSE 14006
// begin if Crawls ( i ) then
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 318
13981: IFFALSE 13992
// ComWalk ( i ) ;
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 138
// SetClass ( i , 2 ) ;
13992: LD_VAR 0 1
13996: PPUSH
13997: LD_INT 2
13999: PPUSH
14000: CALL_OW 336
// end ;
14004: GO 13969
14006: POP
14007: POP
// end ;
14008: PPOPN 2
14010: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14011: LD_EXP 8
14015: IFFALSE 14023
14017: PUSH
14018: LD_EXP 61
14022: AND
14023: IFFALSE 14313
14025: GO 14027
14027: DISABLE
14028: LD_INT 0
14030: PPUSH
14031: PPUSH
14032: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14033: LD_OWVAR 2
14037: PPUSH
14038: LD_INT 9
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: LD_INT 1
14046: PPUSH
14047: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14051: LD_INT 9
14053: PPUSH
14054: LD_OWVAR 2
14058: PPUSH
14059: CALL_OW 343
// uc_side := 9 ;
14063: LD_ADDR_OWVAR 20
14067: PUSH
14068: LD_INT 9
14070: ST_TO_ADDR
// uc_nation := 2 ;
14071: LD_ADDR_OWVAR 21
14075: PUSH
14076: LD_INT 2
14078: ST_TO_ADDR
// hc_name := Dark Warrior ;
14079: LD_ADDR_OWVAR 26
14083: PUSH
14084: LD_STRING Dark Warrior
14086: ST_TO_ADDR
// hc_gallery :=  ;
14087: LD_ADDR_OWVAR 33
14091: PUSH
14092: LD_STRING 
14094: ST_TO_ADDR
// hc_noskilllimit := true ;
14095: LD_ADDR_OWVAR 76
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14103: LD_ADDR_OWVAR 31
14107: PUSH
14108: LD_INT 30
14110: PUSH
14111: LD_INT 30
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 30
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// un := CreateHuman ;
14126: LD_ADDR_VAR 0 3
14130: PUSH
14131: CALL_OW 44
14135: ST_TO_ADDR
// hc_noskilllimit := false ;
14136: LD_ADDR_OWVAR 76
14140: PUSH
14141: LD_INT 0
14143: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14144: LD_VAR 0 3
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 51
// ToLua ( playRanger() ) ;
14156: LD_STRING playRanger()
14158: PPUSH
14159: CALL_OW 559
// p := 0 ;
14163: LD_ADDR_VAR 0 2
14167: PUSH
14168: LD_INT 0
14170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14171: LD_INT 35
14173: PPUSH
14174: CALL_OW 67
// p := p + 1 ;
14178: LD_ADDR_VAR 0 2
14182: PUSH
14183: LD_VAR 0 2
14187: PUSH
14188: LD_INT 1
14190: PLUS
14191: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14192: LD_VAR 0 3
14196: PPUSH
14197: CALL_OW 256
14201: PUSH
14202: LD_INT 1000
14204: LESS
14205: IFFALSE 14219
// SetLives ( un , 1000 ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1000
14214: PPUSH
14215: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_INT 81
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 91
14238: PUSH
14239: LD_VAR 0 3
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: CALL_OW 74
14270: PPUSH
14271: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 80
14282: GREATER
14283: IFTRUE 14296
14285: PUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: CALL_OW 301
14295: OR
14296: IFFALSE 14171
// if un then
14298: LD_VAR 0 3
14302: IFFALSE 14313
// RemoveUnit ( un ) ;
14304: LD_VAR 0 3
14308: PPUSH
14309: CALL_OW 64
// end ;
14313: PPOPN 3
14315: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14316: LD_EXP 62
14320: IFFALSE 14436
14322: GO 14324
14324: DISABLE
14325: LD_INT 0
14327: PPUSH
14328: PPUSH
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14330: LD_ADDR_VAR 0 2
14334: PUSH
14335: LD_INT 81
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14366: LD_STRING playComputer()
14368: PPUSH
14369: CALL_OW 559
// if not tmp then
14373: LD_VAR 0 2
14377: NOT
14378: IFFALSE 14382
// exit ;
14380: GO 14436
// for i in tmp do
14382: LD_ADDR_VAR 0 1
14386: PUSH
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_IN
14393: IFFALSE 14434
// for j := 1 to 4 do
14395: LD_ADDR_VAR 0 3
14399: PUSH
14400: DOUBLE
14401: LD_INT 1
14403: DEC
14404: ST_TO_ADDR
14405: LD_INT 4
14407: PUSH
14408: FOR_TO
14409: IFFALSE 14430
// SetSkill ( i , j , 10 ) ;
14411: LD_VAR 0 1
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 10
14423: PPUSH
14424: CALL_OW 237
14428: GO 14408
14430: POP
14431: POP
14432: GO 14392
14434: POP
14435: POP
// end ;
14436: PPOPN 3
14438: END
// every 0 0$1 trigger s30 do var i , tmp ;
14439: LD_EXP 63
14443: IFFALSE 14512
14445: GO 14447
14447: DISABLE
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_OWVAR 2
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: ST_TO_ADDR
// if not tmp then
14474: LD_VAR 0 2
14478: NOT
14479: IFFALSE 14483
// exit ;
14481: GO 14512
// for i in tmp do
14483: LD_ADDR_VAR 0 1
14487: PUSH
14488: LD_VAR 0 2
14492: PUSH
14493: FOR_IN
14494: IFFALSE 14510
// SetLives ( i , 300 ) ;
14496: LD_VAR 0 1
14500: PPUSH
14501: LD_INT 300
14503: PPUSH
14504: CALL_OW 234
14508: GO 14493
14510: POP
14511: POP
// end ;
14512: PPOPN 2
14514: END
// every 0 0$1 trigger s60 do var i , tmp ;
14515: LD_EXP 64
14519: IFFALSE 14588
14521: GO 14523
14523: DISABLE
14524: LD_INT 0
14526: PPUSH
14527: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14528: LD_ADDR_VAR 0 2
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: ST_TO_ADDR
// if not tmp then
14550: LD_VAR 0 2
14554: NOT
14555: IFFALSE 14559
// exit ;
14557: GO 14588
// for i in tmp do
14559: LD_ADDR_VAR 0 1
14563: PUSH
14564: LD_VAR 0 2
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14586
// SetLives ( i , 600 ) ;
14572: LD_VAR 0 1
14576: PPUSH
14577: LD_INT 600
14579: PPUSH
14580: CALL_OW 234
14584: GO 14569
14586: POP
14587: POP
// end ;
14588: PPOPN 2
14590: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14591: LD_INT 0
14593: PPUSH
// case cmd of 301 :
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 301
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14639
14607: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14608: LD_VAR 0 6
14612: PPUSH
14613: LD_VAR 0 7
14617: PPUSH
14618: LD_VAR 0 8
14622: PPUSH
14623: LD_VAR 0 4
14627: PPUSH
14628: LD_VAR 0 5
14632: PPUSH
14633: CALL 15852 0 5
14637: GO 14760
14639: LD_INT 302
14641: DOUBLE
14642: EQUAL
14643: IFTRUE 14647
14645: GO 14684
14647: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14648: LD_VAR 0 6
14652: PPUSH
14653: LD_VAR 0 7
14657: PPUSH
14658: LD_VAR 0 8
14662: PPUSH
14663: LD_VAR 0 9
14667: PPUSH
14668: LD_VAR 0 4
14672: PPUSH
14673: LD_VAR 0 5
14677: PPUSH
14678: CALL 15943 0 6
14682: GO 14760
14684: LD_INT 303
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 14729
14692: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14693: LD_VAR 0 6
14697: PPUSH
14698: LD_VAR 0 7
14702: PPUSH
14703: LD_VAR 0 8
14707: PPUSH
14708: LD_VAR 0 9
14712: PPUSH
14713: LD_VAR 0 4
14717: PPUSH
14718: LD_VAR 0 5
14722: PPUSH
14723: CALL 14765 0 6
14727: GO 14760
14729: LD_INT 304
14731: DOUBLE
14732: EQUAL
14733: IFTRUE 14737
14735: GO 14759
14737: POP
// hHackTeleport ( unit , x , y ) ; end ;
14738: LD_VAR 0 2
14742: PPUSH
14743: LD_VAR 0 4
14747: PPUSH
14748: LD_VAR 0 5
14752: PPUSH
14753: CALL 16536 0 3
14757: GO 14760
14759: POP
// end ;
14760: LD_VAR 0 12
14764: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: LESS
14777: IFTRUE 14789
14779: PUSH
14780: LD_VAR 0 1
14784: PUSH
14785: LD_INT 3
14787: GREATER
14788: OR
14789: IFTRUE 14807
14791: PUSH
14792: LD_VAR 0 5
14796: PPUSH
14797: LD_VAR 0 6
14801: PPUSH
14802: CALL_OW 428
14806: OR
14807: IFFALSE 14811
// exit ;
14809: GO 15539
// uc_side := your_side ;
14811: LD_ADDR_OWVAR 20
14815: PUSH
14816: LD_OWVAR 2
14820: ST_TO_ADDR
// uc_nation := nation ;
14821: LD_ADDR_OWVAR 21
14825: PUSH
14826: LD_VAR 0 1
14830: ST_TO_ADDR
// bc_level = 1 ;
14831: LD_ADDR_OWVAR 43
14835: PUSH
14836: LD_INT 1
14838: ST_TO_ADDR
// case btype of 1 :
14839: LD_VAR 0 2
14843: PUSH
14844: LD_INT 1
14846: DOUBLE
14847: EQUAL
14848: IFTRUE 14852
14850: GO 14863
14852: POP
// bc_type := b_depot ; 2 :
14853: LD_ADDR_OWVAR 42
14857: PUSH
14858: LD_INT 0
14860: ST_TO_ADDR
14861: GO 15483
14863: LD_INT 2
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14871
14869: GO 14882
14871: POP
// bc_type := b_warehouse ; 3 :
14872: LD_ADDR_OWVAR 42
14876: PUSH
14877: LD_INT 1
14879: ST_TO_ADDR
14880: GO 15483
14882: LD_INT 3
14884: DOUBLE
14885: EQUAL
14886: IFTRUE 14890
14888: GO 14901
14890: POP
// bc_type := b_lab ; 4 .. 9 :
14891: LD_ADDR_OWVAR 42
14895: PUSH
14896: LD_INT 6
14898: ST_TO_ADDR
14899: GO 15483
14901: LD_INT 4
14903: DOUBLE
14904: GREATEREQUAL
14905: IFFALSE 14913
14907: LD_INT 9
14909: DOUBLE
14910: LESSEQUAL
14911: IFTRUE 14915
14913: GO 14975
14915: POP
// begin bc_type := b_lab_half ;
14916: LD_ADDR_OWVAR 42
14920: PUSH
14921: LD_INT 7
14923: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14924: LD_ADDR_OWVAR 44
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_INT 11
14934: PUSH
14935: LD_INT 12
14937: PUSH
14938: LD_INT 15
14940: PUSH
14941: LD_INT 14
14943: PUSH
14944: LD_INT 13
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: PUSH
14955: LD_VAR 0 2
14959: PUSH
14960: LD_INT 3
14962: MINUS
14963: ARRAY
14964: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14965: LD_ADDR_OWVAR 45
14969: PUSH
14970: LD_INT 9
14972: ST_TO_ADDR
// end ; 10 .. 13 :
14973: GO 15483
14975: LD_INT 10
14977: DOUBLE
14978: GREATEREQUAL
14979: IFFALSE 14987
14981: LD_INT 13
14983: DOUBLE
14984: LESSEQUAL
14985: IFTRUE 14989
14987: GO 15066
14989: POP
// begin bc_type := b_lab_full ;
14990: LD_ADDR_OWVAR 42
14994: PUSH
14995: LD_INT 8
14997: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14998: LD_ADDR_OWVAR 44
15002: PUSH
15003: LD_INT 10
15005: PUSH
15006: LD_INT 12
15008: PUSH
15009: LD_INT 14
15011: PUSH
15012: LD_INT 13
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: LD_VAR 0 2
15025: PUSH
15026: LD_INT 9
15028: MINUS
15029: ARRAY
15030: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15031: LD_ADDR_OWVAR 45
15035: PUSH
15036: LD_INT 11
15038: PUSH
15039: LD_INT 15
15041: PUSH
15042: LD_INT 12
15044: PUSH
15045: LD_INT 15
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: LD_INT 9
15061: MINUS
15062: ARRAY
15063: ST_TO_ADDR
// end ; 14 :
15064: GO 15483
15066: LD_INT 14
15068: DOUBLE
15069: EQUAL
15070: IFTRUE 15074
15072: GO 15085
15074: POP
// bc_type := b_workshop ; 15 :
15075: LD_ADDR_OWVAR 42
15079: PUSH
15080: LD_INT 2
15082: ST_TO_ADDR
15083: GO 15483
15085: LD_INT 15
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15104
15093: POP
// bc_type := b_factory ; 16 :
15094: LD_ADDR_OWVAR 42
15098: PUSH
15099: LD_INT 3
15101: ST_TO_ADDR
15102: GO 15483
15104: LD_INT 16
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15123
15112: POP
// bc_type := b_ext_gun ; 17 :
15113: LD_ADDR_OWVAR 42
15117: PUSH
15118: LD_INT 17
15120: ST_TO_ADDR
15121: GO 15483
15123: LD_INT 17
15125: DOUBLE
15126: EQUAL
15127: IFTRUE 15131
15129: GO 15159
15131: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15132: LD_ADDR_OWVAR 42
15136: PUSH
15137: LD_INT 19
15139: PUSH
15140: LD_INT 23
15142: PUSH
15143: LD_INT 19
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: LD_VAR 0 1
15155: ARRAY
15156: ST_TO_ADDR
15157: GO 15483
15159: LD_INT 18
15161: DOUBLE
15162: EQUAL
15163: IFTRUE 15167
15165: GO 15178
15167: POP
// bc_type := b_ext_radar ; 19 :
15168: LD_ADDR_OWVAR 42
15172: PUSH
15173: LD_INT 20
15175: ST_TO_ADDR
15176: GO 15483
15178: LD_INT 19
15180: DOUBLE
15181: EQUAL
15182: IFTRUE 15186
15184: GO 15197
15186: POP
// bc_type := b_ext_radio ; 20 :
15187: LD_ADDR_OWVAR 42
15191: PUSH
15192: LD_INT 22
15194: ST_TO_ADDR
15195: GO 15483
15197: LD_INT 20
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 15216
15205: POP
// bc_type := b_ext_siberium ; 21 :
15206: LD_ADDR_OWVAR 42
15210: PUSH
15211: LD_INT 21
15213: ST_TO_ADDR
15214: GO 15483
15216: LD_INT 21
15218: DOUBLE
15219: EQUAL
15220: IFTRUE 15224
15222: GO 15235
15224: POP
// bc_type := b_ext_computer ; 22 :
15225: LD_ADDR_OWVAR 42
15229: PUSH
15230: LD_INT 24
15232: ST_TO_ADDR
15233: GO 15483
15235: LD_INT 22
15237: DOUBLE
15238: EQUAL
15239: IFTRUE 15243
15241: GO 15254
15243: POP
// bc_type := b_ext_track ; 23 :
15244: LD_ADDR_OWVAR 42
15248: PUSH
15249: LD_INT 16
15251: ST_TO_ADDR
15252: GO 15483
15254: LD_INT 23
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15273
15262: POP
// bc_type := b_ext_laser ; 24 :
15263: LD_ADDR_OWVAR 42
15267: PUSH
15268: LD_INT 25
15270: ST_TO_ADDR
15271: GO 15483
15273: LD_INT 24
15275: DOUBLE
15276: EQUAL
15277: IFTRUE 15281
15279: GO 15292
15281: POP
// bc_type := b_control_tower ; 25 :
15282: LD_ADDR_OWVAR 42
15286: PUSH
15287: LD_INT 36
15289: ST_TO_ADDR
15290: GO 15483
15292: LD_INT 25
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15311
15300: POP
// bc_type := b_breastwork ; 26 :
15301: LD_ADDR_OWVAR 42
15305: PUSH
15306: LD_INT 31
15308: ST_TO_ADDR
15309: GO 15483
15311: LD_INT 26
15313: DOUBLE
15314: EQUAL
15315: IFTRUE 15319
15317: GO 15330
15319: POP
// bc_type := b_bunker ; 27 :
15320: LD_ADDR_OWVAR 42
15324: PUSH
15325: LD_INT 32
15327: ST_TO_ADDR
15328: GO 15483
15330: LD_INT 27
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15349
15338: POP
// bc_type := b_turret ; 28 :
15339: LD_ADDR_OWVAR 42
15343: PUSH
15344: LD_INT 33
15346: ST_TO_ADDR
15347: GO 15483
15349: LD_INT 28
15351: DOUBLE
15352: EQUAL
15353: IFTRUE 15357
15355: GO 15368
15357: POP
// bc_type := b_armoury ; 29 :
15358: LD_ADDR_OWVAR 42
15362: PUSH
15363: LD_INT 4
15365: ST_TO_ADDR
15366: GO 15483
15368: LD_INT 29
15370: DOUBLE
15371: EQUAL
15372: IFTRUE 15376
15374: GO 15387
15376: POP
// bc_type := b_barracks ; 30 :
15377: LD_ADDR_OWVAR 42
15381: PUSH
15382: LD_INT 5
15384: ST_TO_ADDR
15385: GO 15483
15387: LD_INT 30
15389: DOUBLE
15390: EQUAL
15391: IFTRUE 15395
15393: GO 15406
15395: POP
// bc_type := b_solar_power ; 31 :
15396: LD_ADDR_OWVAR 42
15400: PUSH
15401: LD_INT 27
15403: ST_TO_ADDR
15404: GO 15483
15406: LD_INT 31
15408: DOUBLE
15409: EQUAL
15410: IFTRUE 15414
15412: GO 15425
15414: POP
// bc_type := b_oil_power ; 32 :
15415: LD_ADDR_OWVAR 42
15419: PUSH
15420: LD_INT 26
15422: ST_TO_ADDR
15423: GO 15483
15425: LD_INT 32
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15444
15433: POP
// bc_type := b_siberite_power ; 33 :
15434: LD_ADDR_OWVAR 42
15438: PUSH
15439: LD_INT 28
15441: ST_TO_ADDR
15442: GO 15483
15444: LD_INT 33
15446: DOUBLE
15447: EQUAL
15448: IFTRUE 15452
15450: GO 15463
15452: POP
// bc_type := b_oil_mine ; 34 :
15453: LD_ADDR_OWVAR 42
15457: PUSH
15458: LD_INT 29
15460: ST_TO_ADDR
15461: GO 15483
15463: LD_INT 34
15465: DOUBLE
15466: EQUAL
15467: IFTRUE 15471
15469: GO 15482
15471: POP
// bc_type := b_siberite_mine ; end ;
15472: LD_ADDR_OWVAR 42
15476: PUSH
15477: LD_INT 30
15479: ST_TO_ADDR
15480: GO 15483
15482: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15483: LD_ADDR_VAR 0 8
15487: PUSH
15488: LD_VAR 0 5
15492: PPUSH
15493: LD_VAR 0 6
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: CALL_OW 47
15507: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15508: LD_OWVAR 42
15512: PUSH
15513: LD_INT 32
15515: PUSH
15516: LD_INT 33
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: IN
15523: IFFALSE 15539
// PlaceWeaponTurret ( b , weapon ) ;
15525: LD_VAR 0 8
15529: PPUSH
15530: LD_VAR 0 4
15534: PPUSH
15535: CALL_OW 431
// end ;
15539: LD_VAR 0 7
15543: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15544: LD_INT 0
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15550: LD_ADDR_VAR 0 4
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_OWVAR 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: LD_INT 30
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 30
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 69
15603: ST_TO_ADDR
// if not tmp then
15604: LD_VAR 0 4
15608: NOT
15609: IFFALSE 15613
// exit ;
15611: GO 15672
// for i in tmp do
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_VAR 0 4
15622: PUSH
15623: FOR_IN
15624: IFFALSE 15670
// for j = 1 to 3 do
15626: LD_ADDR_VAR 0 3
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 3
15638: PUSH
15639: FOR_TO
15640: IFFALSE 15666
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15642: LD_VAR 0 2
15646: PPUSH
15647: CALL_OW 274
15651: PPUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_INT 99999
15659: PPUSH
15660: CALL_OW 277
15664: GO 15639
15666: POP
15667: POP
15668: GO 15623
15670: POP
15671: POP
// end ;
15672: LD_VAR 0 1
15676: RET
// export function hHackSetLevel10 ; var i , j ; begin
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15682: LD_ADDR_VAR 0 2
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PUSH
15702: FOR_IN
15703: IFFALSE 15755
// if IsSelected ( i ) then
15705: LD_VAR 0 2
15709: PPUSH
15710: CALL_OW 306
15714: IFFALSE 15753
// begin for j := 1 to 4 do
15716: LD_ADDR_VAR 0 3
15720: PUSH
15721: DOUBLE
15722: LD_INT 1
15724: DEC
15725: ST_TO_ADDR
15726: LD_INT 4
15728: PUSH
15729: FOR_TO
15730: IFFALSE 15751
// SetSkill ( i , j , 10 ) ;
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 10
15744: PPUSH
15745: CALL_OW 237
15749: GO 15729
15751: POP
15752: POP
// end ;
15753: GO 15702
15755: POP
15756: POP
// end ;
15757: LD_VAR 0 1
15761: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15762: LD_INT 0
15764: PPUSH
15765: PPUSH
15766: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15767: LD_ADDR_VAR 0 2
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_OWVAR 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 21
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 69
15802: PUSH
15803: FOR_IN
15804: IFFALSE 15845
// begin for j := 1 to 4 do
15806: LD_ADDR_VAR 0 3
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_INT 4
15818: PUSH
15819: FOR_TO
15820: IFFALSE 15841
// SetSkill ( i , j , 10 ) ;
15822: LD_VAR 0 2
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 10
15834: PPUSH
15835: CALL_OW 237
15839: GO 15819
15841: POP
15842: POP
// end ;
15843: GO 15803
15845: POP
15846: POP
// end ;
15847: LD_VAR 0 1
15851: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15852: LD_INT 0
15854: PPUSH
// uc_side := your_side ;
15855: LD_ADDR_OWVAR 20
15859: PUSH
15860: LD_OWVAR 2
15864: ST_TO_ADDR
// uc_nation := nation ;
15865: LD_ADDR_OWVAR 21
15869: PUSH
15870: LD_VAR 0 1
15874: ST_TO_ADDR
// InitHc ;
15875: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15879: LD_INT 0
15881: PPUSH
15882: LD_VAR 0 2
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15896: LD_VAR 0 4
15900: PPUSH
15901: LD_VAR 0 5
15905: PPUSH
15906: CALL_OW 428
15910: PUSH
15911: LD_INT 0
15913: EQUAL
15914: IFFALSE 15938
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15916: CALL_OW 44
15920: PPUSH
15921: LD_VAR 0 4
15925: PPUSH
15926: LD_VAR 0 5
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: CALL_OW 48
// end ;
15938: LD_VAR 0 6
15942: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15943: LD_INT 0
15945: PPUSH
15946: PPUSH
// uc_side := your_side ;
15947: LD_ADDR_OWVAR 20
15951: PUSH
15952: LD_OWVAR 2
15956: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15957: LD_VAR 0 1
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 3
15970: PUSH
15971: LD_INT 4
15973: PUSH
15974: LD_INT 5
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: IN
15984: IFFALSE 15996
// uc_nation := nation_american else
15986: LD_ADDR_OWVAR 21
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
15994: GO 16039
// if chassis in [ 11 , 12 , 13 , 14 ] then
15996: LD_VAR 0 1
16000: PUSH
16001: LD_INT 11
16003: PUSH
16004: LD_INT 12
16006: PUSH
16007: LD_INT 13
16009: PUSH
16010: LD_INT 14
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: IN
16019: IFFALSE 16031
// uc_nation := nation_arabian else
16021: LD_ADDR_OWVAR 21
16025: PUSH
16026: LD_INT 2
16028: ST_TO_ADDR
16029: GO 16039
// uc_nation := nation_russian ;
16031: LD_ADDR_OWVAR 21
16035: PUSH
16036: LD_INT 3
16038: ST_TO_ADDR
// vc_chassis := chassis ;
16039: LD_ADDR_OWVAR 37
16043: PUSH
16044: LD_VAR 0 1
16048: ST_TO_ADDR
// vc_engine := engine ;
16049: LD_ADDR_OWVAR 39
16053: PUSH
16054: LD_VAR 0 2
16058: ST_TO_ADDR
// vc_control := control ;
16059: LD_ADDR_OWVAR 38
16063: PUSH
16064: LD_VAR 0 3
16068: ST_TO_ADDR
// vc_weapon := weapon ;
16069: LD_ADDR_OWVAR 40
16073: PUSH
16074: LD_VAR 0 4
16078: ST_TO_ADDR
// un := CreateVehicle ;
16079: LD_ADDR_VAR 0 8
16083: PUSH
16084: CALL_OW 45
16088: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16089: LD_VAR 0 8
16093: PPUSH
16094: LD_INT 0
16096: PPUSH
16097: LD_INT 5
16099: PPUSH
16100: CALL_OW 12
16104: PPUSH
16105: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16109: LD_VAR 0 8
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: LD_VAR 0 6
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 48
// end ;
16131: LD_VAR 0 7
16135: RET
// export hInvincible ; every 1 do
16136: GO 16138
16138: DISABLE
// hInvincible := [ ] ;
16139: LD_ADDR_EXP 65
16143: PUSH
16144: EMPTY
16145: ST_TO_ADDR
16146: END
// every 10 do var i ;
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
// begin enable ;
16153: ENABLE
// if not hInvincible then
16154: LD_EXP 65
16158: NOT
16159: IFFALSE 16163
// exit ;
16161: GO 16207
// for i in hInvincible do
16163: LD_ADDR_VAR 0 1
16167: PUSH
16168: LD_EXP 65
16172: PUSH
16173: FOR_IN
16174: IFFALSE 16205
// if GetLives ( i ) < 1000 then
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 256
16185: PUSH
16186: LD_INT 1000
16188: LESS
16189: IFFALSE 16203
// SetLives ( i , 1000 ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: LD_INT 1000
16198: PPUSH
16199: CALL_OW 234
16203: GO 16173
16205: POP
16206: POP
// end ;
16207: PPOPN 1
16209: END
// export function hHackInvincible ; var i ; begin
16210: LD_INT 0
16212: PPUSH
16213: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16214: LD_ADDR_VAR 0 2
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: LD_INT 21
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 21
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 69
16251: PUSH
16252: FOR_IN
16253: IFFALSE 16314
// if IsSelected ( i ) then
16255: LD_VAR 0 2
16259: PPUSH
16260: CALL_OW 306
16264: IFFALSE 16312
// begin if i in hInvincible then
16266: LD_VAR 0 2
16270: PUSH
16271: LD_EXP 65
16275: IN
16276: IFFALSE 16296
// hInvincible := hInvincible diff i else
16278: LD_ADDR_EXP 65
16282: PUSH
16283: LD_EXP 65
16287: PUSH
16288: LD_VAR 0 2
16292: DIFF
16293: ST_TO_ADDR
16294: GO 16312
// hInvincible := hInvincible union i ;
16296: LD_ADDR_EXP 65
16300: PUSH
16301: LD_EXP 65
16305: PUSH
16306: LD_VAR 0 2
16310: UNION
16311: ST_TO_ADDR
// end ;
16312: GO 16252
16314: POP
16315: POP
// end ;
16316: LD_VAR 0 1
16320: RET
// export function hHackInvisible ; var i , j ; begin
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
16325: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PPUSH
16341: CALL_OW 69
16345: PUSH
16346: FOR_IN
16347: IFFALSE 16371
// if IsSelected ( i ) then
16349: LD_VAR 0 2
16353: PPUSH
16354: CALL_OW 306
16358: IFFALSE 16369
// ComForceInvisible ( i ) ;
16360: LD_VAR 0 2
16364: PPUSH
16365: CALL_OW 496
16369: GO 16346
16371: POP
16372: POP
// end ;
16373: LD_VAR 0 1
16377: RET
// export function hHackChangeYourSide ; begin
16378: LD_INT 0
16380: PPUSH
// if your_side = 8 then
16381: LD_OWVAR 2
16385: PUSH
16386: LD_INT 8
16388: EQUAL
16389: IFFALSE 16401
// your_side := 0 else
16391: LD_ADDR_OWVAR 2
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
16399: GO 16415
// your_side := your_side + 1 ;
16401: LD_ADDR_OWVAR 2
16405: PUSH
16406: LD_OWVAR 2
16410: PUSH
16411: LD_INT 1
16413: PLUS
16414: ST_TO_ADDR
// end ;
16415: LD_VAR 0 1
16419: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
16424: PPUSH
// for i in all_units do
16425: LD_ADDR_VAR 0 2
16429: PUSH
16430: LD_OWVAR 3
16434: PUSH
16435: FOR_IN
16436: IFFALSE 16514
// if IsSelected ( i ) then
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 306
16447: IFFALSE 16512
// begin j := GetSide ( i ) ;
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_VAR 0 2
16458: PPUSH
16459: CALL_OW 255
16463: ST_TO_ADDR
// if j = 8 then
16464: LD_VAR 0 3
16468: PUSH
16469: LD_INT 8
16471: EQUAL
16472: IFFALSE 16484
// j := 0 else
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 0
16481: ST_TO_ADDR
16482: GO 16498
// j := j + 1 ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 1
16496: PLUS
16497: ST_TO_ADDR
// SetSide ( i , j ) ;
16498: LD_VAR 0 2
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: CALL_OW 235
// end ;
16512: GO 16435
16514: POP
16515: POP
// end ;
16516: LD_VAR 0 1
16520: RET
// export function hHackFog ; begin
16521: LD_INT 0
16523: PPUSH
// FogOff ( true ) ;
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 344
// end ;
16531: LD_VAR 0 1
16535: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16536: LD_INT 0
16538: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16539: LD_VAR 0 1
16543: PPUSH
16544: LD_VAR 0 2
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 483
// CenterOnXY ( x , y ) ;
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: CALL_OW 84
// end ;
16578: LD_VAR 0 4
16582: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16587: LD_VAR 0 1
16591: NOT
16592: IFTRUE 16611
16594: PUSH
16595: LD_VAR 0 2
16599: PPUSH
16600: LD_VAR 0 3
16604: PPUSH
16605: CALL_OW 488
16609: NOT
16610: OR
16611: IFTRUE 16646
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 3
16626: NONEQUAL
16627: IFFALSE 16645
16629: PUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 247
16639: PUSH
16640: LD_INT 1
16642: EQUAL
16643: NOT
16644: AND
16645: OR
16646: IFFALSE 16650
// exit ;
16648: GO 16932
// if GetType ( factory ) = unit_human then
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 247
16659: PUSH
16660: LD_INT 1
16662: EQUAL
16663: IFFALSE 16680
// factory := IsInUnit ( factory ) ;
16665: LD_ADDR_VAR 0 1
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 310
16679: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 266
16689: PUSH
16690: LD_INT 3
16692: NONEQUAL
16693: IFFALSE 16697
// exit ;
16695: GO 16932
// for i := 1 to Count ( factoryWaypoints ) do
16697: LD_ADDR_VAR 0 5
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_EXP 66
16711: PPUSH
16712: CALL 26628 0 1
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16880
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16720: LD_VAR 0 2
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: CALL_OW 428
16734: PUSH
16735: LD_EXP 66
16739: PUSH
16740: LD_VAR 0 5
16744: ARRAY
16745: PUSH
16746: LD_INT 2
16748: ARRAY
16749: EQUAL
16750: IFFALSE 16782
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16752: LD_ADDR_EXP 66
16756: PUSH
16757: LD_EXP 66
16761: PPUSH
16762: LD_VAR 0 5
16766: PPUSH
16767: CALL_OW 3
16771: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16772: CALL 16937 0 0
// exit ;
16776: POP
16777: POP
16778: GO 16932
// end else
16780: GO 16878
// if factory = factoryWaypoints [ i ] [ 2 ] then
16782: LD_VAR 0 1
16786: PUSH
16787: LD_EXP 66
16791: PUSH
16792: LD_VAR 0 5
16796: ARRAY
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: EQUAL
16802: IFFALSE 16878
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16804: LD_ADDR_EXP 66
16808: PUSH
16809: LD_EXP 66
16813: PPUSH
16814: LD_VAR 0 5
16818: PPUSH
16819: CALL_OW 3
16823: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16824: LD_ADDR_EXP 66
16828: PUSH
16829: LD_EXP 66
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 255
16843: PUSH
16844: LD_VAR 0 1
16848: PUSH
16849: LD_VAR 0 2
16853: PUSH
16854: LD_VAR 0 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL 62560 0 2
16869: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16870: CALL 16937 0 0
// exit ;
16874: POP
16875: POP
16876: GO 16932
// end ; end ;
16878: GO 16717
16880: POP
16881: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16882: LD_ADDR_EXP 66
16886: PUSH
16887: LD_EXP 66
16891: PPUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 255
16901: PUSH
16902: LD_VAR 0 1
16906: PUSH
16907: LD_VAR 0 2
16911: PUSH
16912: LD_VAR 0 3
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL 62560 0 2
16927: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16928: CALL 16937 0 0
// end ;
16932: LD_VAR 0 4
16936: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16937: LD_INT 0
16939: PPUSH
16940: PPUSH
16941: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16942: LD_STRING resetFactoryWaypoint();
16944: PPUSH
16945: CALL_OW 559
// if factoryWaypoints then
16949: LD_EXP 66
16953: IFFALSE 17074
// begin list := factoryWaypoints ;
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_EXP 66
16964: ST_TO_ADDR
// for i := 1 to list do
16965: LD_ADDR_VAR 0 2
16969: PUSH
16970: DOUBLE
16971: LD_INT 1
16973: DEC
16974: ST_TO_ADDR
16975: LD_VAR 0 3
16979: PUSH
16980: FOR_TO
16981: IFFALSE 17072
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16983: LD_STRING setFactoryWaypointXY(
16985: PUSH
16986: LD_VAR 0 3
16990: PUSH
16991: LD_VAR 0 2
16995: ARRAY
16996: PUSH
16997: LD_INT 1
16999: ARRAY
17000: STR
17001: PUSH
17002: LD_STRING ,
17004: STR
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: LD_VAR 0 2
17015: ARRAY
17016: PUSH
17017: LD_INT 2
17019: ARRAY
17020: STR
17021: PUSH
17022: LD_STRING ,
17024: STR
17025: PUSH
17026: LD_VAR 0 3
17030: PUSH
17031: LD_VAR 0 2
17035: ARRAY
17036: PUSH
17037: LD_INT 3
17039: ARRAY
17040: STR
17041: PUSH
17042: LD_STRING ,
17044: STR
17045: PUSH
17046: LD_VAR 0 3
17050: PUSH
17051: LD_VAR 0 2
17055: ARRAY
17056: PUSH
17057: LD_INT 4
17059: ARRAY
17060: STR
17061: PUSH
17062: LD_STRING )
17064: STR
17065: PPUSH
17066: CALL_OW 559
17070: GO 16980
17072: POP
17073: POP
// end ; end ;
17074: LD_VAR 0 1
17078: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17079: LD_INT 0
17081: PPUSH
// if HexInfo ( x , y ) = warehouse then
17082: LD_VAR 0 2
17086: PPUSH
17087: LD_VAR 0 3
17091: PPUSH
17092: CALL_OW 428
17096: PUSH
17097: LD_VAR 0 1
17101: EQUAL
17102: IFFALSE 17129
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17104: LD_ADDR_EXP 68
17108: PUSH
17109: LD_EXP 68
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: LD_INT 0
17121: PPUSH
17122: CALL_OW 1
17126: ST_TO_ADDR
17127: GO 17180
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17129: LD_ADDR_EXP 68
17133: PUSH
17134: LD_EXP 68
17138: PPUSH
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 255
17153: PUSH
17154: LD_VAR 0 1
17158: PUSH
17159: LD_VAR 0 2
17163: PUSH
17164: LD_VAR 0 3
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: PPUSH
17175: CALL_OW 1
17179: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17180: CALL 17189 0 0
// end ;
17184: LD_VAR 0 4
17188: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17189: LD_INT 0
17191: PPUSH
17192: PPUSH
17193: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17194: LD_STRING resetWarehouseGatheringPoints();
17196: PPUSH
17197: CALL_OW 559
// if warehouseGatheringPoints then
17201: LD_EXP 68
17205: IFFALSE 17331
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17207: LD_ADDR_VAR 0 3
17211: PUSH
17212: LD_EXP 68
17216: PPUSH
17217: CALL 66494 0 1
17221: ST_TO_ADDR
// for i := 1 to list do
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: DOUBLE
17228: LD_INT 1
17230: DEC
17231: ST_TO_ADDR
17232: LD_VAR 0 3
17236: PUSH
17237: FOR_TO
17238: IFFALSE 17329
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17240: LD_STRING setWarehouseGatheringPointXY(
17242: PUSH
17243: LD_VAR 0 3
17247: PUSH
17248: LD_VAR 0 2
17252: ARRAY
17253: PUSH
17254: LD_INT 1
17256: ARRAY
17257: STR
17258: PUSH
17259: LD_STRING ,
17261: STR
17262: PUSH
17263: LD_VAR 0 3
17267: PUSH
17268: LD_VAR 0 2
17272: ARRAY
17273: PUSH
17274: LD_INT 2
17276: ARRAY
17277: STR
17278: PUSH
17279: LD_STRING ,
17281: STR
17282: PUSH
17283: LD_VAR 0 3
17287: PUSH
17288: LD_VAR 0 2
17292: ARRAY
17293: PUSH
17294: LD_INT 3
17296: ARRAY
17297: STR
17298: PUSH
17299: LD_STRING ,
17301: STR
17302: PUSH
17303: LD_VAR 0 3
17307: PUSH
17308: LD_VAR 0 2
17312: ARRAY
17313: PUSH
17314: LD_INT 4
17316: ARRAY
17317: STR
17318: PUSH
17319: LD_STRING )
17321: STR
17322: PPUSH
17323: CALL_OW 559
17327: GO 17237
17329: POP
17330: POP
// end ; end ;
17331: LD_VAR 0 1
17335: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17336: LD_EXP 68
17340: IFFALSE 18035
17342: GO 17344
17344: DISABLE
17345: LD_INT 0
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
// begin enable ;
17356: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_EXP 68
17366: PPUSH
17367: CALL 66494 0 1
17371: ST_TO_ADDR
// if not list then
17372: LD_VAR 0 3
17376: NOT
17377: IFFALSE 17381
// exit ;
17379: GO 18035
// for i := 1 to list do
17381: LD_ADDR_VAR 0 1
17385: PUSH
17386: DOUBLE
17387: LD_INT 1
17389: DEC
17390: ST_TO_ADDR
17391: LD_VAR 0 3
17395: PUSH
17396: FOR_TO
17397: IFFALSE 18033
// begin depot := list [ i ] [ 2 ] ;
17399: LD_ADDR_VAR 0 8
17403: PUSH
17404: LD_VAR 0 3
17408: PUSH
17409: LD_VAR 0 1
17413: ARRAY
17414: PUSH
17415: LD_INT 2
17417: ARRAY
17418: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17419: LD_ADDR_VAR 0 5
17423: PUSH
17424: LD_VAR 0 3
17428: PUSH
17429: LD_VAR 0 1
17433: ARRAY
17434: PUSH
17435: LD_INT 1
17437: ARRAY
17438: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17439: LD_VAR 0 8
17443: PPUSH
17444: CALL_OW 301
17448: IFTRUE 17467
17450: PUSH
17451: LD_VAR 0 5
17455: PUSH
17456: LD_VAR 0 8
17460: PPUSH
17461: CALL_OW 255
17465: NONEQUAL
17466: OR
17467: IFFALSE 17496
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17469: LD_ADDR_EXP 68
17473: PUSH
17474: LD_EXP 68
17478: PPUSH
17479: LD_VAR 0 8
17483: PPUSH
17484: LD_INT 0
17486: PPUSH
17487: CALL_OW 1
17491: ST_TO_ADDR
// exit ;
17492: POP
17493: POP
17494: GO 18035
// end ; x := list [ i ] [ 3 ] ;
17496: LD_ADDR_VAR 0 6
17500: PUSH
17501: LD_VAR 0 3
17505: PUSH
17506: LD_VAR 0 1
17510: ARRAY
17511: PUSH
17512: LD_INT 3
17514: ARRAY
17515: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17516: LD_ADDR_VAR 0 7
17520: PUSH
17521: LD_VAR 0 3
17525: PUSH
17526: LD_VAR 0 1
17530: ARRAY
17531: PUSH
17532: LD_INT 4
17534: ARRAY
17535: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17536: LD_ADDR_VAR 0 9
17540: PUSH
17541: LD_VAR 0 6
17545: PPUSH
17546: LD_VAR 0 7
17550: PPUSH
17551: LD_INT 16
17553: PPUSH
17554: CALL 65068 0 3
17558: ST_TO_ADDR
// if not cratesNearbyPoint then
17559: LD_VAR 0 9
17563: NOT
17564: IFFALSE 17570
// exit ;
17566: POP
17567: POP
17568: GO 18035
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17570: LD_ADDR_VAR 0 4
17574: PUSH
17575: LD_INT 22
17577: PUSH
17578: LD_VAR 0 5
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 60
17592: PUSH
17593: EMPTY
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 91
17602: PUSH
17603: LD_VAR 0 8
17607: PUSH
17608: LD_INT 6
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 25
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 25
17631: PUSH
17632: LD_INT 16
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PUSH
17655: LD_VAR 0 8
17659: PPUSH
17660: CALL_OW 313
17664: PPUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 60
17670: PUSH
17671: EMPTY
17672: LIST
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: LD_INT 25
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 16
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PPUSH
17710: CALL_OW 72
17714: UNION
17715: ST_TO_ADDR
// if tmp then
17716: LD_VAR 0 4
17720: IFFALSE 17800
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17722: LD_ADDR_VAR 0 4
17726: PUSH
17727: LD_VAR 0 4
17731: PPUSH
17732: LD_INT 3
17734: PPUSH
17735: CALL 62875 0 2
17739: ST_TO_ADDR
// for j in tmp do
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_VAR 0 4
17749: PUSH
17750: FOR_IN
17751: IFFALSE 17794
// begin if IsInUnit ( j ) then
17753: LD_VAR 0 2
17757: PPUSH
17758: CALL_OW 310
17762: IFFALSE 17773
// ComExit ( j ) ;
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL 62958 0 1
// AddComCollect ( j , x , y ) ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_VAR 0 6
17782: PPUSH
17783: LD_VAR 0 7
17787: PPUSH
17788: CALL_OW 177
// end ;
17792: GO 17750
17794: POP
17795: POP
// exit ;
17796: POP
17797: POP
17798: GO 18035
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17800: LD_ADDR_VAR 0 4
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_VAR 0 5
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 91
17819: PUSH
17820: LD_VAR 0 8
17824: PUSH
17825: LD_INT 8
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 34
17838: PUSH
17839: LD_INT 12
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 34
17848: PUSH
17849: LD_INT 51
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 34
17858: PUSH
17859: LD_INT 32
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 34
17868: PUSH
17869: LD_INT 89
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: ST_TO_ADDR
// if tmp then
17893: LD_VAR 0 4
17897: IFFALSE 18031
// begin for j in tmp do
17899: LD_ADDR_VAR 0 2
17903: PUSH
17904: LD_VAR 0 4
17908: PUSH
17909: FOR_IN
17910: IFFALSE 18029
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 262
17921: PUSH
17922: LD_INT 3
17924: EQUAL
17925: IFTRUE 17942
17927: PUSH
17928: LD_VAR 0 2
17932: PPUSH
17933: CALL_OW 261
17937: PUSH
17938: LD_INT 20
17940: GREATER
17941: OR
17942: IFFALSE 17956
17944: PUSH
17945: LD_VAR 0 2
17949: PPUSH
17950: CALL_OW 314
17954: NOT
17955: AND
17956: IFFALSE 17986
17958: PUSH
17959: LD_VAR 0 2
17963: PPUSH
17964: CALL_OW 263
17968: PUSH
17969: LD_INT 1
17971: NONEQUAL
17972: IFTRUE 17985
17974: PUSH
17975: LD_VAR 0 2
17979: PPUSH
17980: CALL_OW 311
17984: OR
17985: AND
17986: IFFALSE 18027
// begin ComCollect ( j , x , y ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_VAR 0 6
17997: PPUSH
17998: LD_VAR 0 7
18002: PPUSH
18003: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_VAR 0 8
18016: PPUSH
18017: CALL_OW 172
// exit ;
18021: POP
18022: POP
18023: POP
18024: POP
18025: GO 18035
// end ;
18027: GO 17909
18029: POP
18030: POP
// end ; end ;
18031: GO 17396
18033: POP
18034: POP
// end ; end_of_file
18035: PPOPN 9
18037: END
// export function SOS_UnitDestroyed ( un ) ; begin
18038: LD_INT 0
18040: PPUSH
// ComRadiation ( un ) ;
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL 19127 0 1
// end ;
18050: LD_VAR 0 2
18054: RET
// export function SOS_UnitKamikazed ( un ) ; begin
18055: LD_INT 0
18057: PPUSH
// ComRadiation ( un ) ;
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL 19127 0 1
// end ;
18067: LD_VAR 0 2
18071: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18072: LD_INT 0
18074: PPUSH
// end ;
18075: LD_VAR 0 4
18079: RET
// export function SOS_Command ( cmd ) ; begin
18080: LD_INT 0
18082: PPUSH
// end ;
18083: LD_VAR 0 2
18087: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18088: LD_INT 0
18090: PPUSH
// end ;
18091: LD_VAR 0 6
18095: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
18096: LD_INT 0
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
// if not vehicle or not factory then
18102: LD_VAR 0 1
18106: NOT
18107: IFTRUE 18116
18109: PUSH
18110: LD_VAR 0 2
18114: NOT
18115: OR
18116: IFFALSE 18120
// exit ;
18118: GO 18702
// if not factoryWaypoints then
18120: LD_EXP 66
18124: NOT
18125: IFFALSE 18129
// exit ;
18127: GO 18702
// for i := 1 to Count ( factoryWaypoints ) do
18129: LD_ADDR_VAR 0 4
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_EXP 66
18143: PPUSH
18144: CALL 26628 0 1
18148: PUSH
18149: FOR_TO
18150: IFFALSE 18700
// if factoryWaypoints [ i ] [ 2 ] = factory then
18152: LD_EXP 66
18156: PUSH
18157: LD_VAR 0 4
18161: ARRAY
18162: PUSH
18163: LD_INT 2
18165: ARRAY
18166: PUSH
18167: LD_VAR 0 2
18171: EQUAL
18172: IFFALSE 18698
// begin if GetControl ( vehicle ) = control_manual then
18174: LD_VAR 0 1
18178: PPUSH
18179: CALL_OW 263
18183: PUSH
18184: LD_INT 1
18186: EQUAL
18187: IFFALSE 18551
// begin driver := IsDrivenBy ( vehicle ) ;
18189: LD_ADDR_VAR 0 5
18193: PUSH
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 311
18203: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
18204: LD_VAR 0 5
18208: PUSH
18209: LD_EXP 67
18213: IN
18214: IFTRUE 18228
18216: PUSH
18217: LD_VAR 0 1
18221: PUSH
18222: LD_EXP 67
18226: IN
18227: OR
18228: IFFALSE 18234
// exit ;
18230: POP
18231: POP
18232: GO 18702
// if not HasTask ( driver ) then
18234: LD_VAR 0 5
18238: PPUSH
18239: CALL_OW 314
18243: NOT
18244: IFFALSE 18549
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
18246: LD_ADDR_EXP 67
18250: PUSH
18251: LD_EXP 67
18255: PPUSH
18256: LD_VAR 0 5
18260: PPUSH
18261: CALL 62560 0 2
18265: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18266: LD_ADDR_EXP 67
18270: PUSH
18271: LD_EXP 67
18275: PPUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL 62560 0 2
18285: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18286: LD_ADDR_VAR 0 6
18290: PUSH
18291: LD_EXP 66
18295: PUSH
18296: LD_VAR 0 4
18300: ARRAY
18301: PUSH
18302: LD_INT 3
18304: ARRAY
18305: PPUSH
18306: LD_EXP 66
18310: PUSH
18311: LD_VAR 0 4
18315: ARRAY
18316: PUSH
18317: LD_INT 4
18319: ARRAY
18320: PPUSH
18321: CALL_OW 428
18325: ST_TO_ADDR
// if hex then
18326: LD_VAR 0 6
18330: IFFALSE 18348
// ComMoveUnit ( driver , hex ) else
18332: LD_VAR 0 5
18336: PPUSH
18337: LD_VAR 0 6
18341: PPUSH
18342: CALL_OW 112
18346: GO 18432
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18348: LD_VAR 0 1
18352: PPUSH
18353: LD_EXP 66
18357: PUSH
18358: LD_VAR 0 4
18362: ARRAY
18363: PUSH
18364: LD_INT 3
18366: ARRAY
18367: PPUSH
18368: LD_EXP 66
18372: PUSH
18373: LD_VAR 0 4
18377: ARRAY
18378: PUSH
18379: LD_INT 4
18381: ARRAY
18382: PPUSH
18383: CALL_OW 297
18387: PUSH
18388: LD_INT 0
18390: GREATER
18391: IFFALSE 18432
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18393: LD_VAR 0 5
18397: PPUSH
18398: LD_EXP 66
18402: PUSH
18403: LD_VAR 0 4
18407: ARRAY
18408: PUSH
18409: LD_INT 3
18411: ARRAY
18412: PPUSH
18413: LD_EXP 66
18417: PUSH
18418: LD_VAR 0 4
18422: ARRAY
18423: PUSH
18424: LD_INT 4
18426: ARRAY
18427: PPUSH
18428: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18432: LD_VAR 0 5
18436: PPUSH
18437: CALL_OW 181
// if Multiplayer then
18441: LD_OWVAR 4
18445: IFFALSE 18494
// begin repeat wait ( 10 ) ;
18447: LD_INT 10
18449: PPUSH
18450: CALL_OW 67
// until not IsInUnit ( driver ) ;
18454: LD_VAR 0 5
18458: PPUSH
18459: CALL_OW 310
18463: NOT
18464: IFFALSE 18447
// if not HasTask ( driver ) then
18466: LD_VAR 0 5
18470: PPUSH
18471: CALL_OW 314
18475: NOT
18476: IFFALSE 18492
// ComEnterUnit ( driver , factory ) ;
18478: LD_VAR 0 5
18482: PPUSH
18483: LD_VAR 0 2
18487: PPUSH
18488: CALL_OW 120
// end else
18492: GO 18508
// AddComEnterUnit ( driver , factory ) ;
18494: LD_VAR 0 5
18498: PPUSH
18499: LD_VAR 0 2
18503: PPUSH
18504: CALL_OW 180
// wait ( 0 0$1 ) ;
18508: LD_INT 35
18510: PPUSH
18511: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18515: LD_ADDR_EXP 67
18519: PUSH
18520: LD_EXP 67
18524: PUSH
18525: LD_VAR 0 5
18529: DIFF
18530: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18531: LD_ADDR_EXP 67
18535: PUSH
18536: LD_EXP 67
18540: PUSH
18541: LD_VAR 0 1
18545: DIFF
18546: ST_TO_ADDR
// break ;
18547: GO 18700
// end ; end else
18549: GO 18698
// if GetControl ( vehicle ) = control_remote then
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 263
18560: PUSH
18561: LD_INT 2
18563: EQUAL
18564: IFFALSE 18650
// begin wait ( 0 0$2 ) ;
18566: LD_INT 70
18568: PPUSH
18569: CALL_OW 67
// repeat wait ( 10 ) ;
18573: LD_INT 10
18575: PPUSH
18576: CALL_OW 67
// Connect ( vehicle ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL 32872 0 1
// until IsControledBy ( vehicle ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 312
18598: IFFALSE 18573
// wait ( 10 ) ;
18600: LD_INT 10
18602: PPUSH
18603: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18607: LD_VAR 0 1
18611: PPUSH
18612: LD_EXP 66
18616: PUSH
18617: LD_VAR 0 4
18621: ARRAY
18622: PUSH
18623: LD_INT 3
18625: ARRAY
18626: PPUSH
18627: LD_EXP 66
18631: PUSH
18632: LD_VAR 0 4
18636: ARRAY
18637: PUSH
18638: LD_INT 4
18640: ARRAY
18641: PPUSH
18642: CALL_OW 111
// break ;
18646: GO 18700
// end else
18648: GO 18698
// begin wait ( 0 0$3 ) ;
18650: LD_INT 105
18652: PPUSH
18653: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18657: LD_VAR 0 1
18661: PPUSH
18662: LD_EXP 66
18666: PUSH
18667: LD_VAR 0 4
18671: ARRAY
18672: PUSH
18673: LD_INT 3
18675: ARRAY
18676: PPUSH
18677: LD_EXP 66
18681: PUSH
18682: LD_VAR 0 4
18686: ARRAY
18687: PUSH
18688: LD_INT 4
18690: ARRAY
18691: PPUSH
18692: CALL_OW 111
// break ;
18696: GO 18700
// end ; end ;
18698: GO 18149
18700: POP
18701: POP
// end ;
18702: LD_VAR 0 3
18706: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18707: LD_INT 0
18709: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 250
18717: EQUAL
18718: IFFALSE 18735
18720: PUSH
18721: LD_VAR 0 2
18725: PPUSH
18726: CALL_OW 264
18730: PUSH
18731: LD_INT 81
18733: EQUAL
18734: AND
18735: IFFALSE 18756
// MinerPlaceMine ( unit , x , y ) ;
18737: LD_VAR 0 2
18741: PPUSH
18742: LD_VAR 0 4
18746: PPUSH
18747: LD_VAR 0 5
18751: PPUSH
18752: CALL 21888 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 251
18763: EQUAL
18764: IFFALSE 18781
18766: PUSH
18767: LD_VAR 0 2
18771: PPUSH
18772: CALL_OW 264
18776: PUSH
18777: LD_INT 81
18779: EQUAL
18780: AND
18781: IFFALSE 18802
// MinerDetonateMine ( unit , x , y ) ;
18783: LD_VAR 0 2
18787: PPUSH
18788: LD_VAR 0 4
18792: PPUSH
18793: LD_VAR 0 5
18797: PPUSH
18798: CALL 22167 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18802: LD_VAR 0 1
18806: PUSH
18807: LD_INT 252
18809: EQUAL
18810: IFFALSE 18827
18812: PUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: CALL_OW 264
18822: PUSH
18823: LD_INT 81
18825: EQUAL
18826: AND
18827: IFFALSE 18848
// MinerCreateMinefield ( unit , x , y ) ;
18829: LD_VAR 0 2
18833: PPUSH
18834: LD_VAR 0 4
18838: PPUSH
18839: LD_VAR 0 5
18843: PPUSH
18844: CALL 22586 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18848: LD_VAR 0 1
18852: PUSH
18853: LD_INT 253
18855: EQUAL
18856: IFFALSE 18873
18858: PUSH
18859: LD_VAR 0 2
18863: PPUSH
18864: CALL_OW 257
18868: PUSH
18869: LD_INT 5
18871: EQUAL
18872: AND
18873: IFFALSE 18894
// ComBinocular ( unit , x , y ) ;
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_VAR 0 4
18884: PPUSH
18885: LD_VAR 0 5
18889: PPUSH
18890: CALL 22961 0 3
// if selectedUnit then
18894: LD_VAR 0 3
18898: IFFALSE 18958
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18900: LD_VAR 0 1
18904: PUSH
18905: LD_INT 254
18907: EQUAL
18908: IFFALSE 18925
18910: PUSH
18911: LD_VAR 0 2
18915: PPUSH
18916: CALL_OW 264
18920: PUSH
18921: LD_INT 99
18923: EQUAL
18924: AND
18925: IFFALSE 18942
18927: PUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: CALL_OW 263
18937: PUSH
18938: LD_INT 3
18940: EQUAL
18941: AND
18942: IFFALSE 18958
// HackDestroyVehicle ( unit , selectedUnit ) ;
18944: LD_VAR 0 2
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: CALL 21248 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 255
18965: EQUAL
18966: IFFALSE 18990
18968: PUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: CALL_OW 264
18978: PUSH
18979: LD_INT 14
18981: PUSH
18982: LD_INT 53
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: IN
18989: AND
18990: IFFALSE 19008
18992: PUSH
18993: LD_VAR 0 4
18997: PPUSH
18998: LD_VAR 0 5
19002: PPUSH
19003: CALL_OW 488
19007: AND
19008: IFFALSE 19032
// CutTreeXYR ( unit , x , y , 12 ) ;
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 4
19019: PPUSH
19020: LD_VAR 0 5
19024: PPUSH
19025: LD_INT 12
19027: PPUSH
19028: CALL 19223 0 4
// if cmd = 256 then
19032: LD_VAR 0 1
19036: PUSH
19037: LD_INT 256
19039: EQUAL
19040: IFFALSE 19061
// SetFactoryWaypoint ( unit , x , y ) ;
19042: LD_VAR 0 2
19046: PPUSH
19047: LD_VAR 0 4
19051: PPUSH
19052: LD_VAR 0 5
19056: PPUSH
19057: CALL 16583 0 3
// if cmd = 257 then
19061: LD_VAR 0 1
19065: PUSH
19066: LD_INT 257
19068: EQUAL
19069: IFFALSE 19090
// SetWarehouseGatheringPoint ( unit , x , y ) ;
19071: LD_VAR 0 2
19075: PPUSH
19076: LD_VAR 0 4
19080: PPUSH
19081: LD_VAR 0 5
19085: PPUSH
19086: CALL 17079 0 3
// if cmd = 258 then
19090: LD_VAR 0 1
19094: PUSH
19095: LD_INT 258
19097: EQUAL
19098: IFFALSE 19122
// BurnTreeXYR ( unit , x , y , 8 ) ;
19100: LD_VAR 0 2
19104: PPUSH
19105: LD_VAR 0 4
19109: PPUSH
19110: LD_VAR 0 5
19114: PPUSH
19115: LD_INT 8
19117: PPUSH
19118: CALL 19623 0 4
// end ;
19122: LD_VAR 0 6
19126: RET
// export function ComRadiation ( un ) ; var eff ; begin
19127: LD_INT 0
19129: PPUSH
19130: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 264
19140: PUSH
19141: LD_INT 91
19143: NONEQUAL
19144: IFFALSE 19148
// exit ;
19146: GO 19218
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19148: LD_INT 68
19150: PPUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 255
19160: PPUSH
19161: CALL_OW 321
19165: PUSH
19166: LD_INT 2
19168: EQUAL
19169: IFFALSE 19181
// eff := 50 else
19171: LD_ADDR_VAR 0 3
19175: PUSH
19176: LD_INT 50
19178: ST_TO_ADDR
19179: GO 19189
// eff := 25 ;
19181: LD_ADDR_VAR 0 3
19185: PUSH
19186: LD_INT 25
19188: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19189: LD_VAR 0 1
19193: PPUSH
19194: CALL_OW 250
19198: PPUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 251
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: CALL_OW 495
// end ;
19218: LD_VAR 0 2
19222: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
19234: LD_VAR 0 1
19238: PPUSH
19239: CALL_OW 302
19243: NOT
19244: IFTRUE 19263
19246: PUSH
19247: LD_VAR 0 2
19251: PPUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: CALL_OW 488
19261: NOT
19262: OR
19263: IFTRUE 19272
19265: PUSH
19266: LD_VAR 0 4
19270: NOT
19271: OR
19272: IFFALSE 19276
// exit ;
19274: GO 19618
// list := [ ] ;
19276: LD_ADDR_VAR 0 13
19280: PUSH
19281: EMPTY
19282: ST_TO_ADDR
// if x - r < 0 then
19283: LD_VAR 0 2
19287: PUSH
19288: LD_VAR 0 4
19292: MINUS
19293: PUSH
19294: LD_INT 0
19296: LESS
19297: IFFALSE 19309
// min_x := 0 else
19299: LD_ADDR_VAR 0 7
19303: PUSH
19304: LD_INT 0
19306: ST_TO_ADDR
19307: GO 19325
// min_x := x - r ;
19309: LD_ADDR_VAR 0 7
19313: PUSH
19314: LD_VAR 0 2
19318: PUSH
19319: LD_VAR 0 4
19323: MINUS
19324: ST_TO_ADDR
// if y - r < 0 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_VAR 0 4
19334: MINUS
19335: PUSH
19336: LD_INT 0
19338: LESS
19339: IFFALSE 19351
// min_y := 0 else
19341: LD_ADDR_VAR 0 8
19345: PUSH
19346: LD_INT 0
19348: ST_TO_ADDR
19349: GO 19367
// min_y := y - r ;
19351: LD_ADDR_VAR 0 8
19355: PUSH
19356: LD_VAR 0 3
19360: PUSH
19361: LD_VAR 0 4
19365: MINUS
19366: ST_TO_ADDR
// max_x := x + r ;
19367: LD_ADDR_VAR 0 9
19371: PUSH
19372: LD_VAR 0 2
19376: PUSH
19377: LD_VAR 0 4
19381: PLUS
19382: ST_TO_ADDR
// max_y := y + r ;
19383: LD_ADDR_VAR 0 10
19387: PUSH
19388: LD_VAR 0 3
19392: PUSH
19393: LD_VAR 0 4
19397: PLUS
19398: ST_TO_ADDR
// for _x = min_x to max_x do
19399: LD_ADDR_VAR 0 11
19403: PUSH
19404: DOUBLE
19405: LD_VAR 0 7
19409: DEC
19410: ST_TO_ADDR
19411: LD_VAR 0 9
19415: PUSH
19416: FOR_TO
19417: IFFALSE 19536
// for _y = min_y to max_y do
19419: LD_ADDR_VAR 0 12
19423: PUSH
19424: DOUBLE
19425: LD_VAR 0 8
19429: DEC
19430: ST_TO_ADDR
19431: LD_VAR 0 10
19435: PUSH
19436: FOR_TO
19437: IFFALSE 19532
// begin if not ValidHex ( _x , _y ) then
19439: LD_VAR 0 11
19443: PPUSH
19444: LD_VAR 0 12
19448: PPUSH
19449: CALL_OW 488
19453: NOT
19454: IFFALSE 19458
// continue ;
19456: GO 19436
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19458: LD_VAR 0 11
19462: PPUSH
19463: LD_VAR 0 12
19467: PPUSH
19468: CALL_OW 351
19472: IFFALSE 19490
19474: PUSH
19475: LD_VAR 0 11
19479: PPUSH
19480: LD_VAR 0 12
19484: PPUSH
19485: CALL_OW 554
19489: AND
19490: IFFALSE 19530
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19492: LD_ADDR_VAR 0 13
19496: PUSH
19497: LD_VAR 0 13
19501: PPUSH
19502: LD_VAR 0 13
19506: PUSH
19507: LD_INT 1
19509: PLUS
19510: PPUSH
19511: LD_VAR 0 11
19515: PUSH
19516: LD_VAR 0 12
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PPUSH
19525: CALL_OW 2
19529: ST_TO_ADDR
// end ;
19530: GO 19436
19532: POP
19533: POP
19534: GO 19416
19536: POP
19537: POP
// if not list then
19538: LD_VAR 0 13
19542: NOT
19543: IFFALSE 19547
// exit ;
19545: GO 19618
// for i in list do
19547: LD_ADDR_VAR 0 6
19551: PUSH
19552: LD_VAR 0 13
19556: PUSH
19557: FOR_IN
19558: IFFALSE 19616
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19560: LD_VAR 0 1
19564: PPUSH
19565: LD_STRING M
19567: PUSH
19568: LD_VAR 0 6
19572: PUSH
19573: LD_INT 1
19575: ARRAY
19576: PUSH
19577: LD_VAR 0 6
19581: PUSH
19582: LD_INT 2
19584: ARRAY
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: PPUSH
19610: CALL_OW 447
19614: GO 19557
19616: POP
19617: POP
// end ;
19618: LD_VAR 0 5
19622: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19623: LD_INT 0
19625: PPUSH
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 302
19644: NOT
19645: IFTRUE 19664
19647: PUSH
19648: LD_VAR 0 2
19652: PPUSH
19653: LD_VAR 0 3
19657: PPUSH
19658: CALL_OW 488
19662: NOT
19663: OR
19664: IFTRUE 19673
19666: PUSH
19667: LD_VAR 0 4
19671: NOT
19672: OR
19673: IFFALSE 19677
// exit ;
19675: GO 20194
// list := [ ] ;
19677: LD_ADDR_VAR 0 13
19681: PUSH
19682: EMPTY
19683: ST_TO_ADDR
// if x - r < 0 then
19684: LD_VAR 0 2
19688: PUSH
19689: LD_VAR 0 4
19693: MINUS
19694: PUSH
19695: LD_INT 0
19697: LESS
19698: IFFALSE 19710
// min_x := 0 else
19700: LD_ADDR_VAR 0 7
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
19708: GO 19726
// min_x := x - r ;
19710: LD_ADDR_VAR 0 7
19714: PUSH
19715: LD_VAR 0 2
19719: PUSH
19720: LD_VAR 0 4
19724: MINUS
19725: ST_TO_ADDR
// if y - r < 0 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_VAR 0 4
19735: MINUS
19736: PUSH
19737: LD_INT 0
19739: LESS
19740: IFFALSE 19752
// min_y := 0 else
19742: LD_ADDR_VAR 0 8
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
19750: GO 19768
// min_y := y - r ;
19752: LD_ADDR_VAR 0 8
19756: PUSH
19757: LD_VAR 0 3
19761: PUSH
19762: LD_VAR 0 4
19766: MINUS
19767: ST_TO_ADDR
// max_x := x + r ;
19768: LD_ADDR_VAR 0 9
19772: PUSH
19773: LD_VAR 0 2
19777: PUSH
19778: LD_VAR 0 4
19782: PLUS
19783: ST_TO_ADDR
// max_y := y + r ;
19784: LD_ADDR_VAR 0 10
19788: PUSH
19789: LD_VAR 0 3
19793: PUSH
19794: LD_VAR 0 4
19798: PLUS
19799: ST_TO_ADDR
// for _x = min_x to max_x do
19800: LD_ADDR_VAR 0 11
19804: PUSH
19805: DOUBLE
19806: LD_VAR 0 7
19810: DEC
19811: ST_TO_ADDR
19812: LD_VAR 0 9
19816: PUSH
19817: FOR_TO
19818: IFFALSE 19937
// for _y = min_y to max_y do
19820: LD_ADDR_VAR 0 12
19824: PUSH
19825: DOUBLE
19826: LD_VAR 0 8
19830: DEC
19831: ST_TO_ADDR
19832: LD_VAR 0 10
19836: PUSH
19837: FOR_TO
19838: IFFALSE 19933
// begin if not ValidHex ( _x , _y ) then
19840: LD_VAR 0 11
19844: PPUSH
19845: LD_VAR 0 12
19849: PPUSH
19850: CALL_OW 488
19854: NOT
19855: IFFALSE 19859
// continue ;
19857: GO 19837
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19859: LD_VAR 0 11
19863: PPUSH
19864: LD_VAR 0 12
19868: PPUSH
19869: CALL_OW 351
19873: IFFALSE 19891
19875: PUSH
19876: LD_VAR 0 11
19880: PPUSH
19881: LD_VAR 0 12
19885: PPUSH
19886: CALL_OW 554
19890: AND
19891: IFFALSE 19931
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19893: LD_ADDR_VAR 0 13
19897: PUSH
19898: LD_VAR 0 13
19902: PPUSH
19903: LD_VAR 0 13
19907: PUSH
19908: LD_INT 1
19910: PLUS
19911: PPUSH
19912: LD_VAR 0 11
19916: PUSH
19917: LD_VAR 0 12
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 2
19930: ST_TO_ADDR
// end ;
19931: GO 19837
19933: POP
19934: POP
19935: GO 19817
19937: POP
19938: POP
// if not list then
19939: LD_VAR 0 13
19943: NOT
19944: IFFALSE 19948
// exit ;
19946: GO 20194
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19948: LD_ADDR_VAR 0 13
19952: PUSH
19953: LD_VAR 0 1
19957: PPUSH
19958: LD_VAR 0 13
19962: PPUSH
19963: LD_INT 1
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: CALL 30000 0 4
19973: ST_TO_ADDR
// ComStop ( flame ) ;
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 141
// for i in list do
19983: LD_ADDR_VAR 0 6
19987: PUSH
19988: LD_VAR 0 13
19992: PUSH
19993: FOR_IN
19994: IFFALSE 20025
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_VAR 0 6
20005: PUSH
20006: LD_INT 1
20008: ARRAY
20009: PPUSH
20010: LD_VAR 0 6
20014: PUSH
20015: LD_INT 2
20017: ARRAY
20018: PPUSH
20019: CALL_OW 176
20023: GO 19993
20025: POP
20026: POP
// repeat wait ( 0 0$1 ) ;
20027: LD_INT 35
20029: PPUSH
20030: CALL_OW 67
// task := GetTaskList ( flame ) ;
20034: LD_ADDR_VAR 0 14
20038: PUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 437
20048: ST_TO_ADDR
// if not task then
20049: LD_VAR 0 14
20053: NOT
20054: IFFALSE 20058
// exit ;
20056: GO 20194
// if task [ 1 ] [ 1 ] <> | then
20058: LD_VAR 0 14
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: PUSH
20067: LD_INT 1
20069: ARRAY
20070: PUSH
20071: LD_STRING |
20073: NONEQUAL
20074: IFFALSE 20078
// exit ;
20076: GO 20194
// _x := task [ 1 ] [ 2 ] ;
20078: LD_ADDR_VAR 0 11
20082: PUSH
20083: LD_VAR 0 14
20087: PUSH
20088: LD_INT 1
20090: ARRAY
20091: PUSH
20092: LD_INT 2
20094: ARRAY
20095: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
20096: LD_ADDR_VAR 0 12
20100: PUSH
20101: LD_VAR 0 14
20105: PUSH
20106: LD_INT 1
20108: ARRAY
20109: PUSH
20110: LD_INT 3
20112: ARRAY
20113: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
20114: LD_VAR 0 11
20118: PPUSH
20119: LD_VAR 0 12
20123: PPUSH
20124: CALL_OW 351
20128: NOT
20129: IFTRUE 20148
20131: PUSH
20132: LD_VAR 0 11
20136: PPUSH
20137: LD_VAR 0 12
20141: PPUSH
20142: CALL_OW 554
20146: NOT
20147: OR
20148: IFFALSE 20182
// begin task := Delete ( task , 1 ) ;
20150: LD_ADDR_VAR 0 14
20154: PUSH
20155: LD_VAR 0 14
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: CALL_OW 3
20167: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_VAR 0 14
20177: PPUSH
20178: CALL_OW 446
// end ; until not HasTask ( flame ) ;
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 314
20191: NOT
20192: IFFALSE 20027
// end ;
20194: LD_VAR 0 5
20198: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20199: LD_EXP 70
20203: NOT
20204: IFFALSE 20254
20206: GO 20208
20208: DISABLE
// begin initHack := true ;
20209: LD_ADDR_EXP 70
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// hackTanks := [ ] ;
20217: LD_ADDR_EXP 71
20221: PUSH
20222: EMPTY
20223: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20224: LD_ADDR_EXP 72
20228: PUSH
20229: EMPTY
20230: ST_TO_ADDR
// hackLimit := 3 ;
20231: LD_ADDR_EXP 73
20235: PUSH
20236: LD_INT 3
20238: ST_TO_ADDR
// hackDist := 12 ;
20239: LD_ADDR_EXP 74
20243: PUSH
20244: LD_INT 12
20246: ST_TO_ADDR
// hackCounter := [ ] ;
20247: LD_ADDR_EXP 75
20251: PUSH
20252: EMPTY
20253: ST_TO_ADDR
// end ;
20254: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20255: LD_EXP 70
20259: IFFALSE 20277
20261: PUSH
20262: LD_INT 34
20264: PUSH
20265: LD_INT 99
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: AND
20277: IFFALSE 20530
20279: GO 20281
20281: DISABLE
20282: LD_INT 0
20284: PPUSH
20285: PPUSH
// begin enable ;
20286: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20287: LD_ADDR_VAR 0 1
20291: PUSH
20292: LD_INT 34
20294: PUSH
20295: LD_INT 99
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 69
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20528
// begin if not i in hackTanks then
20310: LD_VAR 0 1
20314: PUSH
20315: LD_EXP 71
20319: IN
20320: NOT
20321: IFFALSE 20404
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20323: LD_ADDR_EXP 71
20327: PUSH
20328: LD_EXP 71
20332: PPUSH
20333: LD_EXP 71
20337: PUSH
20338: LD_INT 1
20340: PLUS
20341: PPUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 1
20351: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20352: LD_ADDR_EXP 72
20356: PUSH
20357: LD_EXP 72
20361: PPUSH
20362: LD_EXP 72
20366: PUSH
20367: LD_INT 1
20369: PLUS
20370: PPUSH
20371: EMPTY
20372: PPUSH
20373: CALL_OW 1
20377: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20378: LD_ADDR_EXP 75
20382: PUSH
20383: LD_EXP 75
20387: PPUSH
20388: LD_EXP 75
20392: PUSH
20393: LD_INT 1
20395: PLUS
20396: PPUSH
20397: EMPTY
20398: PPUSH
20399: CALL_OW 1
20403: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 302
20413: NOT
20414: IFFALSE 20427
// begin HackUnlinkAll ( i ) ;
20416: LD_VAR 0 1
20420: PPUSH
20421: CALL 20533 0 1
// continue ;
20425: GO 20307
// end ; HackCheckCapturedStatus ( i ) ;
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL 20978 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_INT 81
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 255
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 33
20460: PUSH
20461: LD_INT 3
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 91
20470: PUSH
20471: LD_VAR 0 1
20475: PUSH
20476: LD_EXP 74
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 50
20488: PUSH
20489: EMPTY
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: PPUSH
20498: CALL_OW 69
20502: ST_TO_ADDR
// if not tmp then
20503: LD_VAR 0 2
20507: NOT
20508: IFFALSE 20512
// continue ;
20510: GO 20307
// HackLink ( i , tmp ) ;
20512: LD_VAR 0 1
20516: PPUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: CALL 20669 0 2
// end ;
20526: GO 20307
20528: POP
20529: POP
// end ;
20530: PPOPN 2
20532: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
20537: PPUSH
// if not hack in hackTanks then
20538: LD_VAR 0 1
20542: PUSH
20543: LD_EXP 71
20547: IN
20548: NOT
20549: IFFALSE 20553
// exit ;
20551: GO 20664
// index := GetElementIndex ( hackTanks , hack ) ;
20553: LD_ADDR_VAR 0 4
20557: PUSH
20558: LD_EXP 71
20562: PPUSH
20563: LD_VAR 0 1
20567: PPUSH
20568: CALL 29295 0 2
20572: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20573: LD_EXP 72
20577: PUSH
20578: LD_VAR 0 4
20582: ARRAY
20583: IFFALSE 20664
// begin for i in hackTanksCaptured [ index ] do
20585: LD_ADDR_VAR 0 3
20589: PUSH
20590: LD_EXP 72
20594: PUSH
20595: LD_VAR 0 4
20599: ARRAY
20600: PUSH
20601: FOR_IN
20602: IFFALSE 20628
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20604: LD_VAR 0 3
20608: PUSH
20609: LD_INT 1
20611: ARRAY
20612: PPUSH
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 2
20620: ARRAY
20621: PPUSH
20622: CALL_OW 235
20626: GO 20601
20628: POP
20629: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20630: LD_ADDR_EXP 72
20634: PUSH
20635: LD_EXP 72
20639: PPUSH
20640: LD_VAR 0 4
20644: PPUSH
20645: EMPTY
20646: PPUSH
20647: CALL_OW 1
20651: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20652: LD_VAR 0 1
20656: PPUSH
20657: LD_INT 0
20659: PPUSH
20660: CALL_OW 505
// end ; end ;
20664: LD_VAR 0 2
20668: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
20673: PPUSH
// if not hack in hackTanks or not vehicles then
20674: LD_VAR 0 1
20678: PUSH
20679: LD_EXP 71
20683: IN
20684: NOT
20685: IFTRUE 20694
20687: PUSH
20688: LD_VAR 0 2
20692: NOT
20693: OR
20694: IFFALSE 20698
// exit ;
20696: GO 20973
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_VAR 0 1
20707: PPUSH
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_INT 1
20715: PPUSH
20716: LD_INT 1
20718: PPUSH
20719: CALL 29947 0 4
20723: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20724: LD_ADDR_VAR 0 5
20728: PUSH
20729: LD_EXP 71
20733: PPUSH
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL 29295 0 2
20743: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20744: LD_EXP 72
20748: PUSH
20749: LD_VAR 0 5
20753: ARRAY
20754: PUSH
20755: LD_EXP 73
20759: LESS
20760: IFFALSE 20949
// begin for i := 1 to vehicles do
20762: LD_ADDR_VAR 0 4
20766: PUSH
20767: DOUBLE
20768: LD_INT 1
20770: DEC
20771: ST_TO_ADDR
20772: LD_VAR 0 2
20776: PUSH
20777: FOR_TO
20778: IFFALSE 20947
// begin if hackTanksCaptured [ index ] = hackLimit then
20780: LD_EXP 72
20784: PUSH
20785: LD_VAR 0 5
20789: ARRAY
20790: PUSH
20791: LD_EXP 73
20795: EQUAL
20796: IFFALSE 20800
// break ;
20798: GO 20947
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20800: LD_ADDR_EXP 75
20804: PUSH
20805: LD_EXP 75
20809: PPUSH
20810: LD_VAR 0 5
20814: PPUSH
20815: LD_EXP 75
20819: PUSH
20820: LD_VAR 0 5
20824: ARRAY
20825: PUSH
20826: LD_INT 1
20828: PLUS
20829: PPUSH
20830: CALL_OW 1
20834: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20835: LD_ADDR_EXP 72
20839: PUSH
20840: LD_EXP 72
20844: PPUSH
20845: LD_VAR 0 5
20849: PUSH
20850: LD_EXP 72
20854: PUSH
20855: LD_VAR 0 5
20859: ARRAY
20860: PUSH
20861: LD_INT 1
20863: PLUS
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PPUSH
20869: LD_VAR 0 2
20873: PUSH
20874: LD_VAR 0 4
20878: ARRAY
20879: PUSH
20880: LD_VAR 0 2
20884: PUSH
20885: LD_VAR 0 4
20889: ARRAY
20890: PPUSH
20891: CALL_OW 255
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL 29512 0 3
20904: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20905: LD_VAR 0 2
20909: PUSH
20910: LD_VAR 0 4
20914: ARRAY
20915: PPUSH
20916: LD_VAR 0 1
20920: PPUSH
20921: CALL_OW 255
20925: PPUSH
20926: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20930: LD_VAR 0 2
20934: PUSH
20935: LD_VAR 0 4
20939: ARRAY
20940: PPUSH
20941: CALL_OW 141
// end ;
20945: GO 20777
20947: POP
20948: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20949: LD_VAR 0 1
20953: PPUSH
20954: LD_EXP 72
20958: PUSH
20959: LD_VAR 0 5
20963: ARRAY
20964: PUSH
20965: LD_INT 0
20967: PLUS
20968: PPUSH
20969: CALL_OW 505
// end ;
20973: LD_VAR 0 3
20977: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
// if not hack in hackTanks then
20984: LD_VAR 0 1
20988: PUSH
20989: LD_EXP 71
20993: IN
20994: NOT
20995: IFFALSE 20999
// exit ;
20997: GO 21243
// index := GetElementIndex ( hackTanks , hack ) ;
20999: LD_ADDR_VAR 0 4
21003: PUSH
21004: LD_EXP 71
21008: PPUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL 29295 0 2
21018: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: DOUBLE
21025: LD_EXP 72
21029: PUSH
21030: LD_VAR 0 4
21034: ARRAY
21035: INC
21036: ST_TO_ADDR
21037: LD_INT 1
21039: PUSH
21040: FOR_DOWNTO
21041: IFFALSE 21217
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21043: LD_ADDR_VAR 0 5
21047: PUSH
21048: LD_EXP 72
21052: PUSH
21053: LD_VAR 0 4
21057: ARRAY
21058: PUSH
21059: LD_VAR 0 3
21063: ARRAY
21064: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21065: LD_VAR 0 5
21069: PUSH
21070: LD_INT 1
21072: ARRAY
21073: PPUSH
21074: CALL_OW 302
21078: NOT
21079: IFTRUE 21107
21081: PUSH
21082: LD_VAR 0 5
21086: PUSH
21087: LD_INT 1
21089: ARRAY
21090: PPUSH
21091: CALL_OW 255
21095: PUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 255
21105: NONEQUAL
21106: OR
21107: IFFALSE 21215
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21109: LD_VAR 0 5
21113: PUSH
21114: LD_INT 1
21116: ARRAY
21117: PPUSH
21118: CALL_OW 305
21122: IFFALSE 21150
21124: PUSH
21125: LD_VAR 0 5
21129: PUSH
21130: LD_INT 1
21132: ARRAY
21133: PPUSH
21134: CALL_OW 255
21138: PUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 255
21148: EQUAL
21149: AND
21150: IFFALSE 21174
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21152: LD_VAR 0 5
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: PPUSH
21161: LD_VAR 0 5
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: PPUSH
21170: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21174: LD_ADDR_EXP 72
21178: PUSH
21179: LD_EXP 72
21183: PPUSH
21184: LD_VAR 0 4
21188: PPUSH
21189: LD_EXP 72
21193: PUSH
21194: LD_VAR 0 4
21198: ARRAY
21199: PPUSH
21200: LD_VAR 0 3
21204: PPUSH
21205: CALL_OW 3
21209: PPUSH
21210: CALL_OW 1
21214: ST_TO_ADDR
// end ; end ;
21215: GO 21040
21217: POP
21218: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21219: LD_VAR 0 1
21223: PPUSH
21224: LD_EXP 72
21228: PUSH
21229: LD_VAR 0 4
21233: ARRAY
21234: PUSH
21235: LD_INT 0
21237: PLUS
21238: PPUSH
21239: CALL_OW 505
// end ;
21243: LD_VAR 0 2
21247: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
// if not hack in hackTanks then
21254: LD_VAR 0 1
21258: PUSH
21259: LD_EXP 71
21263: IN
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21354
// index := GetElementIndex ( hackTanks , hack ) ;
21269: LD_ADDR_VAR 0 5
21273: PUSH
21274: LD_EXP 71
21278: PPUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: CALL 29295 0 2
21288: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21289: LD_ADDR_VAR 0 4
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_EXP 72
21303: PUSH
21304: LD_VAR 0 5
21308: ARRAY
21309: PUSH
21310: FOR_TO
21311: IFFALSE 21352
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21313: LD_EXP 72
21317: PUSH
21318: LD_VAR 0 5
21322: ARRAY
21323: PUSH
21324: LD_VAR 0 4
21328: ARRAY
21329: PUSH
21330: LD_INT 1
21332: ARRAY
21333: PUSH
21334: LD_VAR 0 2
21338: EQUAL
21339: IFFALSE 21350
// KillUnit ( vehicle ) ;
21341: LD_VAR 0 2
21345: PPUSH
21346: CALL_OW 66
21350: GO 21310
21352: POP
21353: POP
// end ;
21354: LD_VAR 0 3
21358: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21359: LD_EXP 76
21363: NOT
21364: IFFALSE 21399
21366: GO 21368
21368: DISABLE
// begin initMiner := true ;
21369: LD_ADDR_EXP 76
21373: PUSH
21374: LD_INT 1
21376: ST_TO_ADDR
// minersList := [ ] ;
21377: LD_ADDR_EXP 77
21381: PUSH
21382: EMPTY
21383: ST_TO_ADDR
// minerMinesList := [ ] ;
21384: LD_ADDR_EXP 78
21388: PUSH
21389: EMPTY
21390: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21391: LD_ADDR_EXP 79
21395: PUSH
21396: LD_INT 5
21398: ST_TO_ADDR
// end ;
21399: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21400: LD_EXP 76
21404: IFFALSE 21422
21406: PUSH
21407: LD_INT 34
21409: PUSH
21410: LD_INT 81
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PPUSH
21417: CALL_OW 69
21421: AND
21422: IFFALSE 21885
21424: GO 21426
21426: DISABLE
21427: LD_INT 0
21429: PPUSH
21430: PPUSH
21431: PPUSH
21432: PPUSH
// begin enable ;
21433: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21434: LD_ADDR_VAR 0 1
21438: PUSH
21439: LD_INT 34
21441: PUSH
21442: LD_INT 81
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 69
21453: PUSH
21454: FOR_IN
21455: IFFALSE 21527
// begin if not i in minersList then
21457: LD_VAR 0 1
21461: PUSH
21462: LD_EXP 77
21466: IN
21467: NOT
21468: IFFALSE 21525
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21470: LD_ADDR_EXP 77
21474: PUSH
21475: LD_EXP 77
21479: PPUSH
21480: LD_EXP 77
21484: PUSH
21485: LD_INT 1
21487: PLUS
21488: PPUSH
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 1
21498: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21499: LD_ADDR_EXP 78
21503: PUSH
21504: LD_EXP 78
21508: PPUSH
21509: LD_EXP 78
21513: PUSH
21514: LD_INT 1
21516: PLUS
21517: PPUSH
21518: EMPTY
21519: PPUSH
21520: CALL_OW 1
21524: ST_TO_ADDR
// end end ;
21525: GO 21454
21527: POP
21528: POP
// for i := minerMinesList downto 1 do
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: DOUBLE
21535: LD_EXP 78
21539: INC
21540: ST_TO_ADDR
21541: LD_INT 1
21543: PUSH
21544: FOR_DOWNTO
21545: IFFALSE 21883
// begin if IsLive ( minersList [ i ] ) then
21547: LD_EXP 77
21551: PUSH
21552: LD_VAR 0 1
21556: ARRAY
21557: PPUSH
21558: CALL_OW 300
21562: IFFALSE 21590
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21564: LD_EXP 77
21568: PUSH
21569: LD_VAR 0 1
21573: ARRAY
21574: PPUSH
21575: LD_EXP 78
21579: PUSH
21580: LD_VAR 0 1
21584: ARRAY
21585: PPUSH
21586: CALL_OW 505
// if not minerMinesList [ i ] then
21590: LD_EXP 78
21594: PUSH
21595: LD_VAR 0 1
21599: ARRAY
21600: NOT
21601: IFFALSE 21605
// continue ;
21603: GO 21544
// for j := minerMinesList [ i ] downto 1 do
21605: LD_ADDR_VAR 0 2
21609: PUSH
21610: DOUBLE
21611: LD_EXP 78
21615: PUSH
21616: LD_VAR 0 1
21620: ARRAY
21621: INC
21622: ST_TO_ADDR
21623: LD_INT 1
21625: PUSH
21626: FOR_DOWNTO
21627: IFFALSE 21879
// begin side := GetSide ( minersList [ i ] ) ;
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: LD_EXP 77
21638: PUSH
21639: LD_VAR 0 1
21643: ARRAY
21644: PPUSH
21645: CALL_OW 255
21649: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_EXP 78
21659: PUSH
21660: LD_VAR 0 1
21664: ARRAY
21665: PUSH
21666: LD_VAR 0 2
21670: ARRAY
21671: PUSH
21672: LD_INT 1
21674: ARRAY
21675: PPUSH
21676: LD_EXP 78
21680: PUSH
21681: LD_VAR 0 1
21685: ARRAY
21686: PUSH
21687: LD_VAR 0 2
21691: ARRAY
21692: PUSH
21693: LD_INT 2
21695: ARRAY
21696: PPUSH
21697: CALL_OW 428
21701: ST_TO_ADDR
// if not tmp then
21702: LD_VAR 0 4
21706: NOT
21707: IFFALSE 21711
// continue ;
21709: GO 21626
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21711: LD_VAR 0 4
21715: PUSH
21716: LD_INT 81
21718: PUSH
21719: LD_VAR 0 3
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 69
21732: IN
21733: IFFALSE 21783
21735: PUSH
21736: LD_EXP 78
21740: PUSH
21741: LD_VAR 0 1
21745: ARRAY
21746: PUSH
21747: LD_VAR 0 2
21751: ARRAY
21752: PUSH
21753: LD_INT 1
21755: ARRAY
21756: PPUSH
21757: LD_EXP 78
21761: PUSH
21762: LD_VAR 0 1
21766: ARRAY
21767: PUSH
21768: LD_VAR 0 2
21772: ARRAY
21773: PUSH
21774: LD_INT 2
21776: ARRAY
21777: PPUSH
21778: CALL_OW 458
21782: AND
21783: IFFALSE 21877
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21785: LD_EXP 78
21789: PUSH
21790: LD_VAR 0 1
21794: ARRAY
21795: PUSH
21796: LD_VAR 0 2
21800: ARRAY
21801: PUSH
21802: LD_INT 1
21804: ARRAY
21805: PPUSH
21806: LD_EXP 78
21810: PUSH
21811: LD_VAR 0 1
21815: ARRAY
21816: PUSH
21817: LD_VAR 0 2
21821: ARRAY
21822: PUSH
21823: LD_INT 2
21825: ARRAY
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21836: LD_ADDR_EXP 78
21840: PUSH
21841: LD_EXP 78
21845: PPUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_EXP 78
21855: PUSH
21856: LD_VAR 0 1
21860: ARRAY
21861: PPUSH
21862: LD_VAR 0 2
21866: PPUSH
21867: CALL_OW 3
21871: PPUSH
21872: CALL_OW 1
21876: ST_TO_ADDR
// end ; end ;
21877: GO 21626
21879: POP
21880: POP
// end ;
21881: GO 21544
21883: POP
21884: POP
// end ;
21885: PPOPN 4
21887: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21888: LD_INT 0
21890: PPUSH
21891: PPUSH
// result := false ;
21892: LD_ADDR_VAR 0 4
21896: PUSH
21897: LD_INT 0
21899: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 264
21909: PUSH
21910: LD_INT 81
21912: EQUAL
21913: NOT
21914: IFFALSE 21918
// exit ;
21916: GO 22162
// index := GetElementIndex ( minersList , unit ) ;
21918: LD_ADDR_VAR 0 5
21922: PUSH
21923: LD_EXP 77
21927: PPUSH
21928: LD_VAR 0 1
21932: PPUSH
21933: CALL 29295 0 2
21937: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21938: LD_EXP 78
21942: PUSH
21943: LD_VAR 0 5
21947: ARRAY
21948: PUSH
21949: LD_EXP 79
21953: GREATEREQUAL
21954: IFFALSE 21958
// exit ;
21956: GO 22162
// ComMoveXY ( unit , x , y ) ;
21958: LD_VAR 0 1
21962: PPUSH
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_VAR 0 3
21972: PPUSH
21973: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21977: LD_INT 35
21979: PPUSH
21980: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21984: LD_VAR 0 1
21988: PPUSH
21989: LD_VAR 0 2
21993: PPUSH
21994: LD_VAR 0 3
21998: PPUSH
21999: CALL 61341 0 3
22003: NOT
22004: IFFALSE 22017
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 314
22016: AND
22017: IFFALSE 22021
// exit ;
22019: GO 22162
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22021: LD_VAR 0 2
22025: PPUSH
22026: LD_VAR 0 3
22030: PPUSH
22031: CALL_OW 428
22035: PUSH
22036: LD_VAR 0 1
22040: EQUAL
22041: IFFALSE 22055
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 314
22053: NOT
22054: AND
22055: IFFALSE 21977
// PlaySoundXY ( x , y , PlantMine ) ;
22057: LD_VAR 0 2
22061: PPUSH
22062: LD_VAR 0 3
22066: PPUSH
22067: LD_STRING PlantMine
22069: PPUSH
22070: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22074: LD_VAR 0 2
22078: PPUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 255
22093: PPUSH
22094: LD_INT 0
22096: PPUSH
22097: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22101: LD_ADDR_EXP 78
22105: PUSH
22106: LD_EXP 78
22110: PPUSH
22111: LD_VAR 0 5
22115: PUSH
22116: LD_EXP 78
22120: PUSH
22121: LD_VAR 0 5
22125: ARRAY
22126: PUSH
22127: LD_INT 1
22129: PLUS
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PPUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_VAR 0 3
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL 29512 0 3
22153: ST_TO_ADDR
// result := true ;
22154: LD_ADDR_VAR 0 4
22158: PUSH
22159: LD_INT 1
22161: ST_TO_ADDR
// end ;
22162: LD_VAR 0 4
22166: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22167: LD_INT 0
22169: PPUSH
22170: PPUSH
22171: PPUSH
// if not unit in minersList then
22172: LD_VAR 0 1
22176: PUSH
22177: LD_EXP 77
22181: IN
22182: NOT
22183: IFFALSE 22187
// exit ;
22185: GO 22581
// index := GetElementIndex ( minersList , unit ) ;
22187: LD_ADDR_VAR 0 6
22191: PUSH
22192: LD_EXP 77
22196: PPUSH
22197: LD_VAR 0 1
22201: PPUSH
22202: CALL 29295 0 2
22206: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22207: LD_ADDR_VAR 0 5
22211: PUSH
22212: DOUBLE
22213: LD_EXP 78
22217: PUSH
22218: LD_VAR 0 6
22222: ARRAY
22223: INC
22224: ST_TO_ADDR
22225: LD_INT 1
22227: PUSH
22228: FOR_DOWNTO
22229: IFFALSE 22392
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22231: LD_EXP 78
22235: PUSH
22236: LD_VAR 0 6
22240: ARRAY
22241: PUSH
22242: LD_VAR 0 5
22246: ARRAY
22247: PUSH
22248: LD_INT 1
22250: ARRAY
22251: PUSH
22252: LD_VAR 0 2
22256: EQUAL
22257: IFFALSE 22287
22259: PUSH
22260: LD_EXP 78
22264: PUSH
22265: LD_VAR 0 6
22269: ARRAY
22270: PUSH
22271: LD_VAR 0 5
22275: ARRAY
22276: PUSH
22277: LD_INT 2
22279: ARRAY
22280: PUSH
22281: LD_VAR 0 3
22285: EQUAL
22286: AND
22287: IFFALSE 22390
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22289: LD_EXP 78
22293: PUSH
22294: LD_VAR 0 6
22298: ARRAY
22299: PUSH
22300: LD_VAR 0 5
22304: ARRAY
22305: PUSH
22306: LD_INT 1
22308: ARRAY
22309: PPUSH
22310: LD_EXP 78
22314: PUSH
22315: LD_VAR 0 6
22319: ARRAY
22320: PUSH
22321: LD_VAR 0 5
22325: ARRAY
22326: PUSH
22327: LD_INT 2
22329: ARRAY
22330: PPUSH
22331: LD_VAR 0 1
22335: PPUSH
22336: CALL_OW 255
22340: PPUSH
22341: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22345: LD_ADDR_EXP 78
22349: PUSH
22350: LD_EXP 78
22354: PPUSH
22355: LD_VAR 0 6
22359: PPUSH
22360: LD_EXP 78
22364: PUSH
22365: LD_VAR 0 6
22369: ARRAY
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL_OW 3
22380: PPUSH
22381: CALL_OW 1
22385: ST_TO_ADDR
// exit ;
22386: POP
22387: POP
22388: GO 22581
// end ; end ;
22390: GO 22228
22392: POP
22393: POP
// for i := minerMinesList [ index ] downto 1 do
22394: LD_ADDR_VAR 0 5
22398: PUSH
22399: DOUBLE
22400: LD_EXP 78
22404: PUSH
22405: LD_VAR 0 6
22409: ARRAY
22410: INC
22411: ST_TO_ADDR
22412: LD_INT 1
22414: PUSH
22415: FOR_DOWNTO
22416: IFFALSE 22579
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22418: LD_EXP 78
22422: PUSH
22423: LD_VAR 0 6
22427: ARRAY
22428: PUSH
22429: LD_VAR 0 5
22433: ARRAY
22434: PUSH
22435: LD_INT 1
22437: ARRAY
22438: PPUSH
22439: LD_EXP 78
22443: PUSH
22444: LD_VAR 0 6
22448: ARRAY
22449: PUSH
22450: LD_VAR 0 5
22454: ARRAY
22455: PUSH
22456: LD_INT 2
22458: ARRAY
22459: PPUSH
22460: LD_VAR 0 2
22464: PPUSH
22465: LD_VAR 0 3
22469: PPUSH
22470: CALL_OW 298
22474: PUSH
22475: LD_INT 6
22477: LESS
22478: IFFALSE 22577
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22480: LD_EXP 78
22484: PUSH
22485: LD_VAR 0 6
22489: ARRAY
22490: PUSH
22491: LD_VAR 0 5
22495: ARRAY
22496: PUSH
22497: LD_INT 1
22499: ARRAY
22500: PPUSH
22501: LD_EXP 78
22505: PUSH
22506: LD_VAR 0 6
22510: ARRAY
22511: PUSH
22512: LD_VAR 0 5
22516: ARRAY
22517: PUSH
22518: LD_INT 2
22520: ARRAY
22521: PPUSH
22522: LD_VAR 0 1
22526: PPUSH
22527: CALL_OW 255
22531: PPUSH
22532: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22536: LD_ADDR_EXP 78
22540: PUSH
22541: LD_EXP 78
22545: PPUSH
22546: LD_VAR 0 6
22550: PPUSH
22551: LD_EXP 78
22555: PUSH
22556: LD_VAR 0 6
22560: ARRAY
22561: PPUSH
22562: LD_VAR 0 5
22566: PPUSH
22567: CALL_OW 3
22571: PPUSH
22572: CALL_OW 1
22576: ST_TO_ADDR
// end ; end ;
22577: GO 22415
22579: POP
22580: POP
// end ;
22581: LD_VAR 0 4
22585: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22586: LD_INT 0
22588: PPUSH
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
22594: PPUSH
22595: PPUSH
22596: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 264
22606: PUSH
22607: LD_INT 81
22609: EQUAL
22610: NOT
22611: IFTRUE 22626
22613: PUSH
22614: LD_VAR 0 1
22618: PUSH
22619: LD_EXP 77
22623: IN
22624: NOT
22625: OR
22626: IFFALSE 22630
// exit ;
22628: GO 22956
// index := GetElementIndex ( minersList , unit ) ;
22630: LD_ADDR_VAR 0 6
22634: PUSH
22635: LD_EXP 77
22639: PPUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL 29295 0 2
22649: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22650: LD_ADDR_VAR 0 8
22654: PUSH
22655: LD_EXP 79
22659: PUSH
22660: LD_EXP 78
22664: PUSH
22665: LD_VAR 0 6
22669: ARRAY
22670: MINUS
22671: ST_TO_ADDR
// if not minesFreeAmount then
22672: LD_VAR 0 8
22676: NOT
22677: IFFALSE 22681
// exit ;
22679: GO 22956
// tmp := [ ] ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: EMPTY
22687: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22688: LD_ADDR_VAR 0 5
22692: PUSH
22693: DOUBLE
22694: LD_INT 1
22696: DEC
22697: ST_TO_ADDR
22698: LD_VAR 0 8
22702: PUSH
22703: FOR_TO
22704: IFFALSE 22903
// begin _d := rand ( 0 , 5 ) ;
22706: LD_ADDR_VAR 0 11
22710: PUSH
22711: LD_INT 0
22713: PPUSH
22714: LD_INT 5
22716: PPUSH
22717: CALL_OW 12
22721: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22722: LD_ADDR_VAR 0 12
22726: PUSH
22727: LD_INT 2
22729: PPUSH
22730: LD_INT 6
22732: PPUSH
22733: CALL_OW 12
22737: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22738: LD_ADDR_VAR 0 9
22742: PUSH
22743: LD_VAR 0 2
22747: PPUSH
22748: LD_VAR 0 11
22752: PPUSH
22753: LD_VAR 0 12
22757: PPUSH
22758: CALL_OW 272
22762: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22763: LD_ADDR_VAR 0 10
22767: PUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_VAR 0 11
22777: PPUSH
22778: LD_VAR 0 12
22782: PPUSH
22783: CALL_OW 273
22787: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22788: LD_VAR 0 9
22792: PPUSH
22793: LD_VAR 0 10
22797: PPUSH
22798: CALL_OW 488
22802: IFFALSE 22826
22804: PUSH
22805: LD_VAR 0 9
22809: PUSH
22810: LD_VAR 0 10
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_VAR 0 7
22823: IN
22824: NOT
22825: AND
22826: IFFALSE 22845
22828: PUSH
22829: LD_VAR 0 9
22833: PPUSH
22834: LD_VAR 0 10
22838: PPUSH
22839: CALL_OW 458
22843: NOT
22844: AND
22845: IFFALSE 22887
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22847: LD_ADDR_VAR 0 7
22851: PUSH
22852: LD_VAR 0 7
22856: PPUSH
22857: LD_VAR 0 7
22861: PUSH
22862: LD_INT 1
22864: PLUS
22865: PPUSH
22866: LD_VAR 0 9
22870: PUSH
22871: LD_VAR 0 10
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PPUSH
22880: CALL_OW 1
22884: ST_TO_ADDR
22885: GO 22901
// i := i - 1 ;
22887: LD_ADDR_VAR 0 5
22891: PUSH
22892: LD_VAR 0 5
22896: PUSH
22897: LD_INT 1
22899: MINUS
22900: ST_TO_ADDR
// end ;
22901: GO 22703
22903: POP
22904: POP
// for i in tmp do
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 7
22914: PUSH
22915: FOR_IN
22916: IFFALSE 22954
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_VAR 0 5
22927: PUSH
22928: LD_INT 1
22930: ARRAY
22931: PPUSH
22932: LD_VAR 0 5
22936: PUSH
22937: LD_INT 2
22939: ARRAY
22940: PPUSH
22941: CALL 21888 0 3
22945: NOT
22946: IFFALSE 22952
// exit ;
22948: POP
22949: POP
22950: GO 22956
22952: GO 22915
22954: POP
22955: POP
// end ;
22956: LD_VAR 0 4
22960: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
// if GetClass ( unit ) <> class_sniper then
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 257
22981: PUSH
22982: LD_INT 5
22984: NONEQUAL
22985: IFFALSE 22989
// exit ;
22987: GO 23459
// dist := 8 ;
22989: LD_ADDR_VAR 0 5
22993: PUSH
22994: LD_INT 8
22996: ST_TO_ADDR
// viewRange := 12 ;
22997: LD_ADDR_VAR 0 8
23001: PUSH
23002: LD_INT 12
23004: ST_TO_ADDR
// side := GetSide ( unit ) ;
23005: LD_ADDR_VAR 0 6
23009: PUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: CALL_OW 255
23019: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23020: LD_INT 61
23022: PPUSH
23023: LD_VAR 0 6
23027: PPUSH
23028: CALL_OW 321
23032: PUSH
23033: LD_INT 2
23035: EQUAL
23036: IFFALSE 23046
// viewRange := 16 ;
23038: LD_ADDR_VAR 0 8
23042: PUSH
23043: LD_INT 16
23045: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23046: LD_VAR 0 1
23050: PPUSH
23051: LD_VAR 0 2
23055: PPUSH
23056: LD_VAR 0 3
23060: PPUSH
23061: CALL_OW 297
23065: PUSH
23066: LD_VAR 0 5
23070: GREATER
23071: IFFALSE 23150
// begin ComMoveXY ( unit , x , y ) ;
23073: LD_VAR 0 1
23077: PPUSH
23078: LD_VAR 0 2
23082: PPUSH
23083: LD_VAR 0 3
23087: PPUSH
23088: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23092: LD_INT 35
23094: PPUSH
23095: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23099: LD_VAR 0 1
23103: PPUSH
23104: LD_VAR 0 2
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: CALL 61341 0 3
23118: NOT
23119: IFFALSE 23123
// exit ;
23121: GO 23459
// until GetDistUnitXY ( unit , x , y ) < dist ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_VAR 0 3
23137: PPUSH
23138: CALL_OW 297
23142: PUSH
23143: LD_VAR 0 5
23147: LESS
23148: IFFALSE 23092
// end ; ComTurnXY ( unit , x , y ) ;
23150: LD_VAR 0 1
23154: PPUSH
23155: LD_VAR 0 2
23159: PPUSH
23160: LD_VAR 0 3
23164: PPUSH
23165: CALL_OW 118
// repeat if Multiplayer then
23169: LD_OWVAR 4
23173: IFFALSE 23184
// wait ( 35 ) else
23175: LD_INT 35
23177: PPUSH
23178: CALL_OW 67
23182: GO 23191
// wait ( 5 ) ;
23184: LD_INT 5
23186: PPUSH
23187: CALL_OW 67
// _d := GetDir ( unit ) ;
23191: LD_ADDR_VAR 0 11
23195: PUSH
23196: LD_VAR 0 1
23200: PPUSH
23201: CALL_OW 254
23205: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23206: LD_ADDR_VAR 0 7
23210: PUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 250
23220: PPUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 251
23230: PPUSH
23231: LD_VAR 0 2
23235: PPUSH
23236: LD_VAR 0 3
23240: PPUSH
23241: CALL 63977 0 4
23245: ST_TO_ADDR
// until dir = _d ;
23246: LD_VAR 0 7
23250: PUSH
23251: LD_VAR 0 11
23255: EQUAL
23256: IFFALSE 23169
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23258: LD_ADDR_VAR 0 9
23262: PUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 250
23272: PPUSH
23273: LD_VAR 0 7
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: CALL_OW 272
23287: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23288: LD_ADDR_VAR 0 10
23292: PUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 251
23302: PPUSH
23303: LD_VAR 0 7
23307: PPUSH
23308: LD_VAR 0 5
23312: PPUSH
23313: CALL_OW 273
23317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23318: LD_VAR 0 9
23322: PPUSH
23323: LD_VAR 0 10
23327: PPUSH
23328: CALL_OW 488
23332: NOT
23333: IFFALSE 23337
// exit ;
23335: GO 23459
// ComAnimCustom ( unit , 1 ) ;
23337: LD_VAR 0 1
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 592
// p := 0 ;
23349: LD_ADDR_VAR 0 12
23353: PUSH
23354: LD_INT 0
23356: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23357: LD_VAR 0 9
23361: PPUSH
23362: LD_VAR 0 10
23366: PPUSH
23367: LD_VAR 0 6
23371: PPUSH
23372: LD_VAR 0 8
23376: PPUSH
23377: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23381: LD_INT 35
23383: PPUSH
23384: CALL_OW 67
// p := Inc ( p ) ;
23388: LD_ADDR_VAR 0 12
23392: PUSH
23393: LD_VAR 0 12
23397: PPUSH
23398: CALL 63933 0 1
23402: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23403: LD_VAR 0 12
23407: PUSH
23408: LD_INT 3
23410: EQUAL
23411: IFTRUE 23425
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 302
23423: NOT
23424: OR
23425: IFTRUE 23438
23427: PUSH
23428: LD_VAR 0 1
23432: PPUSH
23433: CALL_OW 301
23437: OR
23438: IFFALSE 23381
// RemoveSeeing ( _x , _y , side ) ;
23440: LD_VAR 0 9
23444: PPUSH
23445: LD_VAR 0 10
23449: PPUSH
23450: LD_VAR 0 6
23454: PPUSH
23455: CALL_OW 331
// end ;
23459: LD_VAR 0 4
23463: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23464: LD_INT 0
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
// if not unit then
23477: LD_VAR 0 1
23481: NOT
23482: IFFALSE 23486
// exit ;
23484: GO 23757
// side := GetSide ( unit ) ;
23486: LD_ADDR_VAR 0 3
23490: PUSH
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL_OW 255
23500: ST_TO_ADDR
// x := GetX ( unit ) ;
23501: LD_ADDR_VAR 0 5
23505: PUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 250
23515: ST_TO_ADDR
// y := GetY ( unit ) ;
23516: LD_ADDR_VAR 0 6
23520: PUSH
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL_OW 251
23530: ST_TO_ADDR
// r := 8 ;
23531: LD_ADDR_VAR 0 4
23535: PUSH
23536: LD_INT 8
23538: ST_TO_ADDR
// if x - r < 0 then
23539: LD_VAR 0 5
23543: PUSH
23544: LD_VAR 0 4
23548: MINUS
23549: PUSH
23550: LD_INT 0
23552: LESS
23553: IFFALSE 23565
// min_x := 0 else
23555: LD_ADDR_VAR 0 7
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
23563: GO 23581
// min_x := x - r ;
23565: LD_ADDR_VAR 0 7
23569: PUSH
23570: LD_VAR 0 5
23574: PUSH
23575: LD_VAR 0 4
23579: MINUS
23580: ST_TO_ADDR
// if y - r < 0 then
23581: LD_VAR 0 6
23585: PUSH
23586: LD_VAR 0 4
23590: MINUS
23591: PUSH
23592: LD_INT 0
23594: LESS
23595: IFFALSE 23607
// min_y := 0 else
23597: LD_ADDR_VAR 0 8
23601: PUSH
23602: LD_INT 0
23604: ST_TO_ADDR
23605: GO 23623
// min_y := y - r ;
23607: LD_ADDR_VAR 0 8
23611: PUSH
23612: LD_VAR 0 6
23616: PUSH
23617: LD_VAR 0 4
23621: MINUS
23622: ST_TO_ADDR
// max_x := x + r ;
23623: LD_ADDR_VAR 0 9
23627: PUSH
23628: LD_VAR 0 5
23632: PUSH
23633: LD_VAR 0 4
23637: PLUS
23638: ST_TO_ADDR
// max_y := y + r ;
23639: LD_ADDR_VAR 0 10
23643: PUSH
23644: LD_VAR 0 6
23648: PUSH
23649: LD_VAR 0 4
23653: PLUS
23654: ST_TO_ADDR
// for _x = min_x to max_x do
23655: LD_ADDR_VAR 0 11
23659: PUSH
23660: DOUBLE
23661: LD_VAR 0 7
23665: DEC
23666: ST_TO_ADDR
23667: LD_VAR 0 9
23671: PUSH
23672: FOR_TO
23673: IFFALSE 23755
// for _y = min_y to max_y do
23675: LD_ADDR_VAR 0 12
23679: PUSH
23680: DOUBLE
23681: LD_VAR 0 8
23685: DEC
23686: ST_TO_ADDR
23687: LD_VAR 0 10
23691: PUSH
23692: FOR_TO
23693: IFFALSE 23751
// begin if not ValidHex ( _x , _y ) then
23695: LD_VAR 0 11
23699: PPUSH
23700: LD_VAR 0 12
23704: PPUSH
23705: CALL_OW 488
23709: NOT
23710: IFFALSE 23714
// continue ;
23712: GO 23692
// if MineAtPos ( _x , _y ) then
23714: LD_VAR 0 11
23718: PPUSH
23719: LD_VAR 0 12
23723: PPUSH
23724: CALL_OW 458
23728: IFFALSE 23749
// ViewMineAtPos ( _x , _y , side ) ;
23730: LD_VAR 0 11
23734: PPUSH
23735: LD_VAR 0 12
23739: PPUSH
23740: LD_VAR 0 3
23744: PPUSH
23745: CALL_OW 457
// end ;
23749: GO 23692
23751: POP
23752: POP
23753: GO 23672
23755: POP
23756: POP
// end ;
23757: LD_VAR 0 2
23761: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
// if not units then
23770: LD_VAR 0 1
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 24209
// scaners := [ ] ;
23779: LD_ADDR_VAR 0 6
23783: PUSH
23784: EMPTY
23785: ST_TO_ADDR
// for i in units do
23786: LD_ADDR_VAR 0 3
23790: PUSH
23791: LD_VAR 0 1
23795: PUSH
23796: FOR_IN
23797: IFFALSE 23954
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23799: LD_VAR 0 3
23803: PPUSH
23804: CALL_OW 264
23808: PUSH
23809: LD_INT 11
23811: NONEQUAL
23812: IFTRUE 23826
23814: PUSH
23815: LD_VAR 0 3
23819: PPUSH
23820: CALL_OW 302
23824: NOT
23825: OR
23826: IFTRUE 23843
23828: PUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: CALL_OW 110
23838: PUSH
23839: LD_INT 502
23841: EQUAL
23842: OR
23843: IFFALSE 23847
// continue ;
23845: GO 23796
// ComStop ( i ) ;
23847: LD_VAR 0 3
23851: PPUSH
23852: CALL_OW 141
// x := GetX ( i ) ;
23856: LD_ADDR_VAR 0 4
23860: PUSH
23861: LD_VAR 0 3
23865: PPUSH
23866: CALL_OW 250
23870: ST_TO_ADDR
// y := GetY ( i ) ;
23871: LD_ADDR_VAR 0 5
23875: PUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: CALL_OW 251
23885: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23886: LD_VAR 0 3
23890: PPUSH
23891: CALL_OW 255
23895: PUSH
23896: LD_OWVAR 2
23900: EQUAL
23901: IFFALSE 23920
// PlaySoundXY ( x , y , mineDetector ) ;
23903: LD_VAR 0 4
23907: PPUSH
23908: LD_VAR 0 5
23912: PPUSH
23913: LD_STRING mineDetector
23915: PPUSH
23916: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23920: LD_ADDR_VAR 0 6
23924: PUSH
23925: LD_VAR 0 6
23929: PPUSH
23930: LD_VAR 0 3
23934: PPUSH
23935: CALL 62560 0 2
23939: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23940: LD_VAR 0 3
23944: PPUSH
23945: LD_INT 502
23947: PPUSH
23948: CALL_OW 109
// end ;
23952: GO 23796
23954: POP
23955: POP
// if not scaners then
23956: LD_VAR 0 6
23960: NOT
23961: IFFALSE 23965
// exit ;
23963: GO 24209
// wait ( 3 ) ;
23965: LD_INT 3
23967: PPUSH
23968: CALL_OW 67
// timer := 6 ;
23972: LD_ADDR_VAR 0 7
23976: PUSH
23977: LD_INT 6
23979: ST_TO_ADDR
// repeat for i in scaners do
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_VAR 0 6
23989: PUSH
23990: FOR_IN
23991: IFFALSE 24107
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL_OW 302
24002: NOT
24003: IFTRUE 24016
24005: PUSH
24006: LD_VAR 0 3
24010: PPUSH
24011: CALL_OW 314
24015: OR
24016: IFTRUE 24047
24018: PUSH
24019: LD_VAR 0 3
24023: PPUSH
24024: CALL_OW 263
24028: PUSH
24029: LD_INT 1
24031: EQUAL
24032: IFFALSE 24046
24034: PUSH
24035: LD_VAR 0 3
24039: PPUSH
24040: CALL_OW 311
24044: NOT
24045: AND
24046: OR
24047: IFFALSE 24091
// begin SetUnitDisplayNumber ( i , 0 ) ;
24049: LD_VAR 0 3
24053: PPUSH
24054: LD_INT 0
24056: PPUSH
24057: CALL_OW 505
// SetTag ( i , 0 ) ;
24061: LD_VAR 0 3
24065: PPUSH
24066: LD_INT 0
24068: PPUSH
24069: CALL_OW 109
// scaners := scaners diff i ;
24073: LD_ADDR_VAR 0 6
24077: PUSH
24078: LD_VAR 0 6
24082: PUSH
24083: LD_VAR 0 3
24087: DIFF
24088: ST_TO_ADDR
// continue ;
24089: GO 23990
// end ; SetUnitDisplayNumber ( i , timer ) ;
24091: LD_VAR 0 3
24095: PPUSH
24096: LD_VAR 0 7
24100: PPUSH
24101: CALL_OW 505
// end ;
24105: GO 23990
24107: POP
24108: POP
// if not scaners then
24109: LD_VAR 0 6
24113: NOT
24114: IFFALSE 24118
// exit ;
24116: GO 24209
// timer := Dec ( timer ) ;
24118: LD_ADDR_VAR 0 7
24122: PUSH
24123: LD_VAR 0 7
24127: PPUSH
24128: CALL 63955 0 1
24132: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24133: LD_INT 35
24135: PPUSH
24136: CALL_OW 67
// until timer = 0 ;
24140: LD_VAR 0 7
24144: PUSH
24145: LD_INT 0
24147: EQUAL
24148: IFFALSE 23980
// if not scaners then
24150: LD_VAR 0 6
24154: NOT
24155: IFFALSE 24159
// exit ;
24157: GO 24209
// for i in scaners do
24159: LD_ADDR_VAR 0 3
24163: PUSH
24164: LD_VAR 0 6
24168: PUSH
24169: FOR_IN
24170: IFFALSE 24207
// begin SetUnitDisplayNumber ( i , 0 ) ;
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_INT 0
24179: PPUSH
24180: CALL_OW 505
// SetTag ( i , 0 ) ;
24184: LD_VAR 0 3
24188: PPUSH
24189: LD_INT 0
24191: PPUSH
24192: CALL_OW 109
// RevealDetectorMine ( i ) ;
24196: LD_VAR 0 3
24200: PPUSH
24201: CALL 23464 0 1
// end ;
24205: GO 24169
24207: POP
24208: POP
// end ;
24209: LD_VAR 0 2
24213: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24214: LD_INT 0
24216: PPUSH
// if p1 = mine_detector_mode then
24217: LD_VAR 0 2
24221: PUSH
24222: LD_INT 103
24224: EQUAL
24225: IFFALSE 24236
// DetectMine ( units ) ;
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL 23762 0 1
// end ; end_of_file
24236: LD_VAR 0 7
24240: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24241: LD_VAR 0 1
24245: PUSH
24246: LD_INT 200
24248: DOUBLE
24249: GREATEREQUAL
24250: IFFALSE 24258
24252: LD_INT 299
24254: DOUBLE
24255: LESSEQUAL
24256: IFTRUE 24260
24258: GO 24292
24260: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24261: LD_VAR 0 1
24265: PPUSH
24266: LD_VAR 0 2
24270: PPUSH
24271: LD_VAR 0 3
24275: PPUSH
24276: LD_VAR 0 4
24280: PPUSH
24281: LD_VAR 0 5
24285: PPUSH
24286: CALL 18707 0 5
24290: GO 24369
24292: LD_INT 300
24294: DOUBLE
24295: GREATEREQUAL
24296: IFFALSE 24304
24298: LD_INT 399
24300: DOUBLE
24301: LESSEQUAL
24302: IFTRUE 24306
24304: GO 24368
24306: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24307: LD_VAR 0 1
24311: PPUSH
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: LD_VAR 0 4
24326: PPUSH
24327: LD_VAR 0 5
24331: PPUSH
24332: LD_VAR 0 6
24336: PPUSH
24337: LD_VAR 0 7
24341: PPUSH
24342: LD_VAR 0 8
24346: PPUSH
24347: LD_VAR 0 9
24351: PPUSH
24352: LD_VAR 0 10
24356: PPUSH
24357: LD_VAR 0 11
24361: PPUSH
24362: CALL 14591 0 11
24366: GO 24369
24368: POP
// end ;
24369: PPOPN 11
24371: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24372: LD_VAR 0 1
24376: PPUSH
24377: LD_VAR 0 2
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_VAR 0 4
24391: PPUSH
24392: LD_VAR 0 5
24396: PPUSH
24397: CALL 18088 0 5
// end ; end_of_file
24401: PPOPN 5
24403: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24404: LD_INT 0
24406: PPUSH
24407: PPUSH
// if exist_mode then
24408: LD_VAR 0 2
24412: IFFALSE 24458
// begin unit := CreateCharacter ( prefix & ident ) ;
24414: LD_ADDR_VAR 0 5
24418: PUSH
24419: LD_VAR 0 3
24423: PUSH
24424: LD_VAR 0 1
24428: STR
24429: PPUSH
24430: CALL_OW 34
24434: ST_TO_ADDR
// if unit then
24435: LD_VAR 0 5
24439: IFFALSE 24456
// DeleteCharacters ( prefix & ident ) ;
24441: LD_VAR 0 3
24445: PUSH
24446: LD_VAR 0 1
24450: STR
24451: PPUSH
24452: CALL_OW 40
// end else
24456: GO 24473
// unit := NewCharacter ( ident ) ;
24458: LD_ADDR_VAR 0 5
24462: PUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 25
24472: ST_TO_ADDR
// result := unit ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: LD_VAR 0 5
24482: ST_TO_ADDR
// end ;
24483: LD_VAR 0 4
24487: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24488: LD_INT 0
24490: PPUSH
24491: PPUSH
// if exist_mode then
24492: LD_VAR 0 2
24496: IFFALSE 24521
// unit := CreateCharacter ( prefix & ident ) else
24498: LD_ADDR_VAR 0 5
24502: PUSH
24503: LD_VAR 0 3
24507: PUSH
24508: LD_VAR 0 1
24512: STR
24513: PPUSH
24514: CALL_OW 34
24518: ST_TO_ADDR
24519: GO 24536
// unit := NewCharacter ( ident ) ;
24521: LD_ADDR_VAR 0 5
24525: PUSH
24526: LD_VAR 0 1
24530: PPUSH
24531: CALL_OW 25
24535: ST_TO_ADDR
// result := unit ;
24536: LD_ADDR_VAR 0 4
24540: PUSH
24541: LD_VAR 0 5
24545: ST_TO_ADDR
// end ;
24546: LD_VAR 0 4
24550: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
// if not side or not nation then
24555: LD_VAR 0 1
24559: NOT
24560: IFTRUE 24569
24562: PUSH
24563: LD_VAR 0 2
24567: NOT
24568: OR
24569: IFFALSE 24573
// exit ;
24571: GO 25367
// case nation of nation_american :
24573: LD_VAR 0 2
24577: PUSH
24578: LD_INT 1
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24808
24586: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_INT 35
24594: PUSH
24595: LD_INT 45
24597: PUSH
24598: LD_INT 46
24600: PUSH
24601: LD_INT 47
24603: PUSH
24604: LD_INT 82
24606: PUSH
24607: LD_INT 83
24609: PUSH
24610: LD_INT 84
24612: PUSH
24613: LD_INT 85
24615: PUSH
24616: LD_INT 86
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 6
24627: PUSH
24628: LD_INT 15
24630: PUSH
24631: LD_INT 16
24633: PUSH
24634: LD_INT 7
24636: PUSH
24637: LD_INT 12
24639: PUSH
24640: LD_INT 13
24642: PUSH
24643: LD_INT 10
24645: PUSH
24646: LD_INT 14
24648: PUSH
24649: LD_INT 20
24651: PUSH
24652: LD_INT 21
24654: PUSH
24655: LD_INT 22
24657: PUSH
24658: LD_INT 25
24660: PUSH
24661: LD_INT 32
24663: PUSH
24664: LD_INT 27
24666: PUSH
24667: LD_INT 36
24669: PUSH
24670: LD_INT 69
24672: PUSH
24673: LD_INT 39
24675: PUSH
24676: LD_INT 34
24678: PUSH
24679: LD_INT 40
24681: PUSH
24682: LD_INT 48
24684: PUSH
24685: LD_INT 49
24687: PUSH
24688: LD_INT 50
24690: PUSH
24691: LD_INT 51
24693: PUSH
24694: LD_INT 52
24696: PUSH
24697: LD_INT 53
24699: PUSH
24700: LD_INT 54
24702: PUSH
24703: LD_INT 55
24705: PUSH
24706: LD_INT 56
24708: PUSH
24709: LD_INT 57
24711: PUSH
24712: LD_INT 58
24714: PUSH
24715: LD_INT 59
24717: PUSH
24718: LD_INT 60
24720: PUSH
24721: LD_INT 61
24723: PUSH
24724: LD_INT 62
24726: PUSH
24727: LD_INT 80
24729: PUSH
24730: LD_INT 82
24732: PUSH
24733: LD_INT 83
24735: PUSH
24736: LD_INT 84
24738: PUSH
24739: LD_INT 85
24741: PUSH
24742: LD_INT 86
24744: PUSH
24745: LD_INT 90
24747: PUSH
24748: LD_INT 93
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: ST_TO_ADDR
24806: GO 25289
24808: LD_INT 2
24810: DOUBLE
24811: EQUAL
24812: IFTRUE 24816
24814: GO 25050
24816: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24817: LD_ADDR_VAR 0 4
24821: PUSH
24822: LD_INT 35
24824: PUSH
24825: LD_INT 45
24827: PUSH
24828: LD_INT 46
24830: PUSH
24831: LD_INT 47
24833: PUSH
24834: LD_INT 82
24836: PUSH
24837: LD_INT 83
24839: PUSH
24840: LD_INT 84
24842: PUSH
24843: LD_INT 85
24845: PUSH
24846: LD_INT 87
24848: PUSH
24849: LD_INT 70
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: LD_INT 11
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: LD_INT 4
24863: PUSH
24864: LD_INT 5
24866: PUSH
24867: LD_INT 6
24869: PUSH
24870: LD_INT 15
24872: PUSH
24873: LD_INT 18
24875: PUSH
24876: LD_INT 7
24878: PUSH
24879: LD_INT 17
24881: PUSH
24882: LD_INT 8
24884: PUSH
24885: LD_INT 20
24887: PUSH
24888: LD_INT 21
24890: PUSH
24891: LD_INT 22
24893: PUSH
24894: LD_INT 72
24896: PUSH
24897: LD_INT 26
24899: PUSH
24900: LD_INT 69
24902: PUSH
24903: LD_INT 39
24905: PUSH
24906: LD_INT 40
24908: PUSH
24909: LD_INT 41
24911: PUSH
24912: LD_INT 42
24914: PUSH
24915: LD_INT 43
24917: PUSH
24918: LD_INT 48
24920: PUSH
24921: LD_INT 49
24923: PUSH
24924: LD_INT 50
24926: PUSH
24927: LD_INT 51
24929: PUSH
24930: LD_INT 52
24932: PUSH
24933: LD_INT 53
24935: PUSH
24936: LD_INT 54
24938: PUSH
24939: LD_INT 55
24941: PUSH
24942: LD_INT 56
24944: PUSH
24945: LD_INT 60
24947: PUSH
24948: LD_INT 61
24950: PUSH
24951: LD_INT 62
24953: PUSH
24954: LD_INT 66
24956: PUSH
24957: LD_INT 67
24959: PUSH
24960: LD_INT 68
24962: PUSH
24963: LD_INT 81
24965: PUSH
24966: LD_INT 82
24968: PUSH
24969: LD_INT 83
24971: PUSH
24972: LD_INT 84
24974: PUSH
24975: LD_INT 85
24977: PUSH
24978: LD_INT 87
24980: PUSH
24981: LD_INT 88
24983: PUSH
24984: LD_INT 92
24986: PUSH
24987: LD_INT 94
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: ST_TO_ADDR
25048: GO 25289
25050: LD_INT 3
25052: DOUBLE
25053: EQUAL
25054: IFTRUE 25058
25056: GO 25288
25058: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
25059: LD_ADDR_VAR 0 4
25063: PUSH
25064: LD_INT 46
25066: PUSH
25067: LD_INT 47
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 82
25078: PUSH
25079: LD_INT 83
25081: PUSH
25082: LD_INT 84
25084: PUSH
25085: LD_INT 85
25087: PUSH
25088: LD_INT 86
25090: PUSH
25091: LD_INT 11
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: LD_INT 20
25099: PUSH
25100: LD_INT 19
25102: PUSH
25103: LD_INT 21
25105: PUSH
25106: LD_INT 24
25108: PUSH
25109: LD_INT 22
25111: PUSH
25112: LD_INT 25
25114: PUSH
25115: LD_INT 28
25117: PUSH
25118: LD_INT 29
25120: PUSH
25121: LD_INT 30
25123: PUSH
25124: LD_INT 31
25126: PUSH
25127: LD_INT 37
25129: PUSH
25130: LD_INT 38
25132: PUSH
25133: LD_INT 32
25135: PUSH
25136: LD_INT 27
25138: PUSH
25139: LD_INT 33
25141: PUSH
25142: LD_INT 69
25144: PUSH
25145: LD_INT 39
25147: PUSH
25148: LD_INT 34
25150: PUSH
25151: LD_INT 40
25153: PUSH
25154: LD_INT 71
25156: PUSH
25157: LD_INT 23
25159: PUSH
25160: LD_INT 44
25162: PUSH
25163: LD_INT 48
25165: PUSH
25166: LD_INT 49
25168: PUSH
25169: LD_INT 50
25171: PUSH
25172: LD_INT 51
25174: PUSH
25175: LD_INT 52
25177: PUSH
25178: LD_INT 53
25180: PUSH
25181: LD_INT 54
25183: PUSH
25184: LD_INT 55
25186: PUSH
25187: LD_INT 56
25189: PUSH
25190: LD_INT 57
25192: PUSH
25193: LD_INT 58
25195: PUSH
25196: LD_INT 59
25198: PUSH
25199: LD_INT 63
25201: PUSH
25202: LD_INT 64
25204: PUSH
25205: LD_INT 65
25207: PUSH
25208: LD_INT 82
25210: PUSH
25211: LD_INT 83
25213: PUSH
25214: LD_INT 84
25216: PUSH
25217: LD_INT 85
25219: PUSH
25220: LD_INT 86
25222: PUSH
25223: LD_INT 89
25225: PUSH
25226: LD_INT 91
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: ST_TO_ADDR
25286: GO 25289
25288: POP
// if state > - 1 and state < 3 then
25289: LD_VAR 0 3
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: GREATER
25298: IFFALSE 25310
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_INT 3
25308: LESS
25309: AND
25310: IFFALSE 25367
// for i in result do
25312: LD_ADDR_VAR 0 5
25316: PUSH
25317: LD_VAR 0 4
25321: PUSH
25322: FOR_IN
25323: IFFALSE 25365
// if GetTech ( i , side ) <> state then
25325: LD_VAR 0 5
25329: PPUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 321
25339: PUSH
25340: LD_VAR 0 3
25344: NONEQUAL
25345: IFFALSE 25363
// result := result diff i ;
25347: LD_ADDR_VAR 0 4
25351: PUSH
25352: LD_VAR 0 4
25356: PUSH
25357: LD_VAR 0 5
25361: DIFF
25362: ST_TO_ADDR
25363: GO 25322
25365: POP
25366: POP
// end ;
25367: LD_VAR 0 4
25371: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25372: LD_INT 0
25374: PPUSH
25375: PPUSH
25376: PPUSH
// result := true ;
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_INT 1
25384: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_VAR 0 2
25394: PPUSH
25395: CALL_OW 480
25399: ST_TO_ADDR
// if not tmp then
25400: LD_VAR 0 5
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 25458
// for i in tmp do
25409: LD_ADDR_VAR 0 4
25413: PUSH
25414: LD_VAR 0 5
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25456
// if GetTech ( i , side ) <> state_researched then
25422: LD_VAR 0 4
25426: PPUSH
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 321
25436: PUSH
25437: LD_INT 2
25439: NONEQUAL
25440: IFFALSE 25454
// begin result := false ;
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_INT 0
25449: ST_TO_ADDR
// exit ;
25450: POP
25451: POP
25452: GO 25458
// end ;
25454: GO 25419
25456: POP
25457: POP
// end ;
25458: LD_VAR 0 3
25462: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25463: LD_INT 0
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25478: LD_VAR 0 1
25482: NOT
25483: IFTRUE 25500
25485: PUSH
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 257
25495: PUSH
25496: LD_INT 9
25498: NONEQUAL
25499: OR
25500: IFFALSE 25504
// exit ;
25502: GO 26083
// side := GetSide ( unit ) ;
25504: LD_ADDR_VAR 0 9
25508: PUSH
25509: LD_VAR 0 1
25513: PPUSH
25514: CALL_OW 255
25518: ST_TO_ADDR
// tech_space := tech_spacanom ;
25519: LD_ADDR_VAR 0 12
25523: PUSH
25524: LD_INT 29
25526: ST_TO_ADDR
// tech_time := tech_taurad ;
25527: LD_ADDR_VAR 0 13
25531: PUSH
25532: LD_INT 28
25534: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25535: LD_ADDR_VAR 0 11
25539: PUSH
25540: LD_VAR 0 1
25544: PPUSH
25545: CALL_OW 310
25549: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25550: LD_VAR 0 11
25554: PPUSH
25555: CALL_OW 247
25559: PUSH
25560: LD_INT 2
25562: EQUAL
25563: IFFALSE 25567
// exit ;
25565: GO 26083
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25567: LD_ADDR_VAR 0 8
25571: PUSH
25572: LD_INT 81
25574: PUSH
25575: LD_VAR 0 9
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 21
25589: PUSH
25590: LD_INT 3
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PPUSH
25605: CALL_OW 69
25609: ST_TO_ADDR
// if not tmp then
25610: LD_VAR 0 8
25614: NOT
25615: IFFALSE 25619
// exit ;
25617: GO 26083
// if in_unit then
25619: LD_VAR 0 11
25623: IFFALSE 25647
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25625: LD_ADDR_VAR 0 10
25629: PUSH
25630: LD_VAR 0 8
25634: PPUSH
25635: LD_VAR 0 11
25639: PPUSH
25640: CALL_OW 74
25644: ST_TO_ADDR
25645: GO 25667
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25647: LD_ADDR_VAR 0 10
25651: PUSH
25652: LD_VAR 0 8
25656: PPUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: CALL_OW 74
25666: ST_TO_ADDR
// if not enemy then
25667: LD_VAR 0 10
25671: NOT
25672: IFFALSE 25676
// exit ;
25674: GO 26083
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25676: LD_VAR 0 11
25680: IFFALSE 25702
25682: PUSH
25683: LD_VAR 0 11
25687: PPUSH
25688: LD_VAR 0 10
25692: PPUSH
25693: CALL_OW 296
25697: PUSH
25698: LD_INT 13
25700: GREATER
25701: AND
25702: IFTRUE 25724
25704: PUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: LD_VAR 0 10
25714: PPUSH
25715: CALL_OW 296
25719: PUSH
25720: LD_INT 12
25722: GREATER
25723: OR
25724: IFFALSE 25728
// exit ;
25726: GO 26083
// missile := [ 1 ] ;
25728: LD_ADDR_VAR 0 14
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25739: LD_VAR 0 9
25743: PPUSH
25744: LD_VAR 0 12
25748: PPUSH
25749: CALL_OW 325
25753: IFFALSE 25782
// missile := Replace ( missile , missile + 1 , 2 ) ;
25755: LD_ADDR_VAR 0 14
25759: PUSH
25760: LD_VAR 0 14
25764: PPUSH
25765: LD_VAR 0 14
25769: PUSH
25770: LD_INT 1
25772: PLUS
25773: PPUSH
25774: LD_INT 2
25776: PPUSH
25777: CALL_OW 1
25781: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25782: LD_VAR 0 9
25786: PPUSH
25787: LD_VAR 0 13
25791: PPUSH
25792: CALL_OW 325
25796: IFFALSE 25820
25798: PUSH
25799: LD_VAR 0 10
25803: PPUSH
25804: CALL_OW 255
25808: PPUSH
25809: LD_VAR 0 13
25813: PPUSH
25814: CALL_OW 325
25818: NOT
25819: AND
25820: IFFALSE 25849
// missile := Replace ( missile , missile + 1 , 3 ) ;
25822: LD_ADDR_VAR 0 14
25826: PUSH
25827: LD_VAR 0 14
25831: PPUSH
25832: LD_VAR 0 14
25836: PUSH
25837: LD_INT 1
25839: PLUS
25840: PPUSH
25841: LD_INT 3
25843: PPUSH
25844: CALL_OW 1
25848: ST_TO_ADDR
// if missile < 2 then
25849: LD_VAR 0 14
25853: PUSH
25854: LD_INT 2
25856: LESS
25857: IFFALSE 25861
// exit ;
25859: GO 26083
// x := GetX ( enemy ) ;
25861: LD_ADDR_VAR 0 4
25865: PUSH
25866: LD_VAR 0 10
25870: PPUSH
25871: CALL_OW 250
25875: ST_TO_ADDR
// y := GetY ( enemy ) ;
25876: LD_ADDR_VAR 0 5
25880: PUSH
25881: LD_VAR 0 10
25885: PPUSH
25886: CALL_OW 251
25890: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25891: LD_ADDR_VAR 0 6
25895: PUSH
25896: LD_VAR 0 4
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: CALL_OW 12
25912: PLUS
25913: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25914: LD_ADDR_VAR 0 7
25918: PUSH
25919: LD_VAR 0 5
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PPUSH
25928: LD_INT 1
25930: PPUSH
25931: CALL_OW 12
25935: PLUS
25936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25937: LD_VAR 0 6
25941: PPUSH
25942: LD_VAR 0 7
25946: PPUSH
25947: CALL_OW 488
25951: NOT
25952: IFFALSE 25974
// begin _x := x ;
25954: LD_ADDR_VAR 0 6
25958: PUSH
25959: LD_VAR 0 4
25963: ST_TO_ADDR
// _y := y ;
25964: LD_ADDR_VAR 0 7
25968: PUSH
25969: LD_VAR 0 5
25973: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25974: LD_ADDR_VAR 0 3
25978: PUSH
25979: LD_INT 1
25981: PPUSH
25982: LD_VAR 0 14
25986: PPUSH
25987: CALL_OW 12
25991: ST_TO_ADDR
// case i of 1 :
25992: LD_VAR 0 3
25996: PUSH
25997: LD_INT 1
25999: DOUBLE
26000: EQUAL
26001: IFTRUE 26005
26003: GO 26022
26005: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26006: LD_VAR 0 1
26010: PPUSH
26011: LD_VAR 0 10
26015: PPUSH
26016: CALL_OW 115
26020: GO 26083
26022: LD_INT 2
26024: DOUBLE
26025: EQUAL
26026: IFTRUE 26030
26028: GO 26052
26030: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26031: LD_VAR 0 1
26035: PPUSH
26036: LD_VAR 0 6
26040: PPUSH
26041: LD_VAR 0 7
26045: PPUSH
26046: CALL_OW 153
26050: GO 26083
26052: LD_INT 3
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26082
26060: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26061: LD_VAR 0 1
26065: PPUSH
26066: LD_VAR 0 6
26070: PPUSH
26071: LD_VAR 0 7
26075: PPUSH
26076: CALL_OW 154
26080: GO 26083
26082: POP
// end ;
26083: LD_VAR 0 2
26087: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26088: LD_INT 0
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
26094: PPUSH
26095: PPUSH
// if not unit or not building then
26096: LD_VAR 0 1
26100: NOT
26101: IFTRUE 26110
26103: PUSH
26104: LD_VAR 0 2
26108: NOT
26109: OR
26110: IFFALSE 26114
// exit ;
26112: GO 26272
// x := GetX ( building ) ;
26114: LD_ADDR_VAR 0 5
26118: PUSH
26119: LD_VAR 0 2
26123: PPUSH
26124: CALL_OW 250
26128: ST_TO_ADDR
// y := GetY ( building ) ;
26129: LD_ADDR_VAR 0 6
26133: PUSH
26134: LD_VAR 0 2
26138: PPUSH
26139: CALL_OW 251
26143: ST_TO_ADDR
// for i := 0 to 5 do
26144: LD_ADDR_VAR 0 4
26148: PUSH
26149: DOUBLE
26150: LD_INT 0
26152: DEC
26153: ST_TO_ADDR
26154: LD_INT 5
26156: PUSH
26157: FOR_TO
26158: IFFALSE 26270
// begin _x := ShiftX ( x , i , 3 ) ;
26160: LD_ADDR_VAR 0 7
26164: PUSH
26165: LD_VAR 0 5
26169: PPUSH
26170: LD_VAR 0 4
26174: PPUSH
26175: LD_INT 3
26177: PPUSH
26178: CALL_OW 272
26182: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26183: LD_ADDR_VAR 0 8
26187: PUSH
26188: LD_VAR 0 6
26192: PPUSH
26193: LD_VAR 0 4
26197: PPUSH
26198: LD_INT 3
26200: PPUSH
26201: CALL_OW 273
26205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26206: LD_VAR 0 7
26210: PPUSH
26211: LD_VAR 0 8
26215: PPUSH
26216: CALL_OW 488
26220: NOT
26221: IFFALSE 26225
// continue ;
26223: GO 26157
// if HexInfo ( _x , _y ) = 0 then
26225: LD_VAR 0 7
26229: PPUSH
26230: LD_VAR 0 8
26234: PPUSH
26235: CALL_OW 428
26239: PUSH
26240: LD_INT 0
26242: EQUAL
26243: IFFALSE 26268
// begin ComMoveXY ( unit , _x , _y ) ;
26245: LD_VAR 0 1
26249: PPUSH
26250: LD_VAR 0 7
26254: PPUSH
26255: LD_VAR 0 8
26259: PPUSH
26260: CALL_OW 111
// exit ;
26264: POP
26265: POP
26266: GO 26272
// end ; end ;
26268: GO 26157
26270: POP
26271: POP
// end ;
26272: LD_VAR 0 3
26276: RET
// export function ScanBase ( side , base_area ) ; begin
26277: LD_INT 0
26279: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26280: LD_ADDR_VAR 0 3
26284: PUSH
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_INT 81
26292: PUSH
26293: LD_VAR 0 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 70
26306: ST_TO_ADDR
// end ;
26307: LD_VAR 0 3
26311: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26312: LD_INT 0
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
// result := false ;
26318: LD_ADDR_VAR 0 2
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// side := GetSide ( unit ) ;
26326: LD_ADDR_VAR 0 3
26330: PUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 255
26340: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26341: LD_ADDR_VAR 0 4
26345: PUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 248
26355: ST_TO_ADDR
// case nat of 1 :
26356: LD_VAR 0 4
26360: PUSH
26361: LD_INT 1
26363: DOUBLE
26364: EQUAL
26365: IFTRUE 26369
26367: GO 26380
26369: POP
// tech := tech_lassight ; 2 :
26370: LD_ADDR_VAR 0 5
26374: PUSH
26375: LD_INT 12
26377: ST_TO_ADDR
26378: GO 26419
26380: LD_INT 2
26382: DOUBLE
26383: EQUAL
26384: IFTRUE 26388
26386: GO 26399
26388: POP
// tech := tech_mortar ; 3 :
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_INT 41
26396: ST_TO_ADDR
26397: GO 26419
26399: LD_INT 3
26401: DOUBLE
26402: EQUAL
26403: IFTRUE 26407
26405: GO 26418
26407: POP
// tech := tech_bazooka ; end ;
26408: LD_ADDR_VAR 0 5
26412: PUSH
26413: LD_INT 44
26415: ST_TO_ADDR
26416: GO 26419
26418: POP
// if Researched ( side , tech ) then
26419: LD_VAR 0 3
26423: PPUSH
26424: LD_VAR 0 5
26428: PPUSH
26429: CALL_OW 325
26433: IFFALSE 26460
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26435: LD_ADDR_VAR 0 2
26439: PUSH
26440: LD_INT 5
26442: PUSH
26443: LD_INT 8
26445: PUSH
26446: LD_INT 9
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: LD_VAR 0 4
26458: ARRAY
26459: ST_TO_ADDR
// end ;
26460: LD_VAR 0 2
26464: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26465: LD_INT 0
26467: PPUSH
26468: PPUSH
26469: PPUSH
// if not mines then
26470: LD_VAR 0 2
26474: NOT
26475: IFFALSE 26479
// exit ;
26477: GO 26623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26479: LD_ADDR_VAR 0 5
26483: PUSH
26484: LD_INT 81
26486: PUSH
26487: LD_VAR 0 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: LD_INT 21
26501: PUSH
26502: LD_INT 3
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// for i in mines do
26522: LD_ADDR_VAR 0 4
26526: PUSH
26527: LD_VAR 0 2
26531: PUSH
26532: FOR_IN
26533: IFFALSE 26621
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26535: LD_VAR 0 4
26539: PUSH
26540: LD_INT 1
26542: ARRAY
26543: PPUSH
26544: LD_VAR 0 4
26548: PUSH
26549: LD_INT 2
26551: ARRAY
26552: PPUSH
26553: CALL_OW 458
26557: NOT
26558: IFFALSE 26562
// continue ;
26560: GO 26532
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26562: LD_VAR 0 4
26566: PUSH
26567: LD_INT 1
26569: ARRAY
26570: PPUSH
26571: LD_VAR 0 4
26575: PUSH
26576: LD_INT 2
26578: ARRAY
26579: PPUSH
26580: CALL_OW 428
26584: PUSH
26585: LD_VAR 0 5
26589: IN
26590: IFFALSE 26619
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26592: LD_VAR 0 4
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: LD_VAR 0 4
26605: PUSH
26606: LD_INT 2
26608: ARRAY
26609: PPUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 456
// end ;
26619: GO 26532
26621: POP
26622: POP
// end ;
26623: LD_VAR 0 3
26627: RET
// export function Count ( array ) ; begin
26628: LD_INT 0
26630: PPUSH
// result := array + 0 ;
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: LD_VAR 0 1
26640: PUSH
26641: LD_INT 0
26643: PLUS
26644: ST_TO_ADDR
// end ;
26645: LD_VAR 0 2
26649: RET
// export function IsEmpty ( building ) ; begin
26650: LD_INT 0
26652: PPUSH
// if not building then
26653: LD_VAR 0 1
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 26705
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26662: LD_ADDR_VAR 0 2
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: LD_INT 22
26674: PUSH
26675: LD_VAR 0 1
26679: PPUSH
26680: CALL_OW 255
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 58
26691: PUSH
26692: EMPTY
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: IN
26704: ST_TO_ADDR
// end ;
26705: LD_VAR 0 2
26709: RET
// export function IsNotFull ( building ) ; var places ; begin
26710: LD_INT 0
26712: PPUSH
26713: PPUSH
// if not building then
26714: LD_VAR 0 1
26718: NOT
26719: IFFALSE 26723
// exit ;
26721: GO 26751
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26723: LD_ADDR_VAR 0 2
26727: PUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: LD_INT 3
26735: PUSH
26736: LD_INT 62
26738: PUSH
26739: EMPTY
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PPUSH
26746: CALL_OW 72
26750: ST_TO_ADDR
// end ;
26751: LD_VAR 0 2
26755: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
// tmp := [ ] ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: EMPTY
26768: ST_TO_ADDR
// list := [ ] ;
26769: LD_ADDR_VAR 0 5
26773: PUSH
26774: EMPTY
26775: ST_TO_ADDR
// for i = 16 to 25 do
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: DOUBLE
26782: LD_INT 16
26784: DEC
26785: ST_TO_ADDR
26786: LD_INT 25
26788: PUSH
26789: FOR_TO
26790: IFFALSE 26863
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: LD_VAR 0 3
26801: PUSH
26802: LD_INT 22
26804: PUSH
26805: LD_VAR 0 1
26809: PPUSH
26810: CALL_OW 255
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 91
26821: PUSH
26822: LD_VAR 0 1
26826: PUSH
26827: LD_INT 6
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 30
26837: PUSH
26838: LD_VAR 0 4
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: ADD
26860: ST_TO_ADDR
26861: GO 26789
26863: POP
26864: POP
// for i = 1 to tmp do
26865: LD_ADDR_VAR 0 4
26869: PUSH
26870: DOUBLE
26871: LD_INT 1
26873: DEC
26874: ST_TO_ADDR
26875: LD_VAR 0 3
26879: PUSH
26880: FOR_TO
26881: IFFALSE 26969
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26883: LD_ADDR_VAR 0 5
26887: PUSH
26888: LD_VAR 0 5
26892: PUSH
26893: LD_VAR 0 3
26897: PUSH
26898: LD_VAR 0 4
26902: ARRAY
26903: PPUSH
26904: CALL_OW 266
26908: PUSH
26909: LD_VAR 0 3
26913: PUSH
26914: LD_VAR 0 4
26918: ARRAY
26919: PPUSH
26920: CALL_OW 250
26924: PUSH
26925: LD_VAR 0 3
26929: PUSH
26930: LD_VAR 0 4
26934: ARRAY
26935: PPUSH
26936: CALL_OW 251
26940: PUSH
26941: LD_VAR 0 3
26945: PUSH
26946: LD_VAR 0 4
26950: ARRAY
26951: PPUSH
26952: CALL_OW 254
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: ADD
26966: ST_TO_ADDR
26967: GO 26880
26969: POP
26970: POP
// result := list ;
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: LD_VAR 0 5
26980: ST_TO_ADDR
// end ;
26981: LD_VAR 0 2
26985: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
26992: PPUSH
26993: PPUSH
26994: PPUSH
// if not factory then
26995: LD_VAR 0 1
26999: NOT
27000: IFFALSE 27004
// exit ;
27002: GO 27607
// if control = control_apeman then
27004: LD_VAR 0 4
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27121
// begin tmp := UnitsInside ( factory ) ;
27014: LD_ADDR_VAR 0 8
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 313
27028: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27029: LD_VAR 0 8
27033: PPUSH
27034: LD_INT 25
27036: PUSH
27037: LD_INT 12
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PPUSH
27044: CALL_OW 72
27048: NOT
27049: IFFALSE 27059
// control := control_manual ;
27051: LD_ADDR_VAR 0 4
27055: PUSH
27056: LD_INT 1
27058: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27059: LD_ADDR_VAR 0 8
27063: PUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL 26756 0 1
27073: ST_TO_ADDR
// if tmp then
27074: LD_VAR 0 8
27078: IFFALSE 27121
// begin for i in tmp do
27080: LD_ADDR_VAR 0 7
27084: PUSH
27085: LD_VAR 0 8
27089: PUSH
27090: FOR_IN
27091: IFFALSE 27119
// if i [ 1 ] = b_ext_radio then
27093: LD_VAR 0 7
27097: PUSH
27098: LD_INT 1
27100: ARRAY
27101: PUSH
27102: LD_INT 22
27104: EQUAL
27105: IFFALSE 27117
// begin control := control_remote ;
27107: LD_ADDR_VAR 0 4
27111: PUSH
27112: LD_INT 2
27114: ST_TO_ADDR
// break ;
27115: GO 27119
// end ;
27117: GO 27090
27119: POP
27120: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27121: LD_VAR 0 1
27125: PPUSH
27126: LD_VAR 0 2
27130: PPUSH
27131: LD_VAR 0 3
27135: PPUSH
27136: LD_VAR 0 4
27140: PPUSH
27141: LD_VAR 0 5
27145: PPUSH
27146: CALL_OW 448
27150: IFFALSE 27185
// begin result := [ chassis , engine , control , weapon ] ;
27152: LD_ADDR_VAR 0 6
27156: PUSH
27157: LD_VAR 0 2
27161: PUSH
27162: LD_VAR 0 3
27166: PUSH
27167: LD_VAR 0 4
27171: PUSH
27172: LD_VAR 0 5
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
// exit ;
27183: GO 27607
// end ; _chassis := AvailableChassisList ( factory ) ;
27185: LD_ADDR_VAR 0 9
27189: PUSH
27190: LD_VAR 0 1
27194: PPUSH
27195: CALL_OW 475
27199: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27200: LD_ADDR_VAR 0 11
27204: PUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL_OW 476
27214: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27215: LD_ADDR_VAR 0 12
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 477
27229: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27230: LD_ADDR_VAR 0 10
27234: PUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 478
27244: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27245: LD_VAR 0 9
27249: NOT
27250: IFTRUE 27259
27252: PUSH
27253: LD_VAR 0 11
27257: NOT
27258: OR
27259: IFTRUE 27268
27261: PUSH
27262: LD_VAR 0 12
27266: NOT
27267: OR
27268: IFTRUE 27277
27270: PUSH
27271: LD_VAR 0 10
27275: NOT
27276: OR
27277: IFFALSE 27312
// begin result := [ chassis , engine , control , weapon ] ;
27279: LD_ADDR_VAR 0 6
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: LD_VAR 0 3
27293: PUSH
27294: LD_VAR 0 4
27298: PUSH
27299: LD_VAR 0 5
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: ST_TO_ADDR
// exit ;
27310: GO 27607
// end ; if not chassis in _chassis then
27312: LD_VAR 0 2
27316: PUSH
27317: LD_VAR 0 9
27321: IN
27322: NOT
27323: IFFALSE 27349
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27325: LD_ADDR_VAR 0 2
27329: PUSH
27330: LD_VAR 0 9
27334: PUSH
27335: LD_INT 1
27337: PPUSH
27338: LD_VAR 0 9
27342: PPUSH
27343: CALL_OW 12
27347: ARRAY
27348: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_VAR 0 3
27358: PPUSH
27359: CALL 27612 0 2
27363: NOT
27364: IFFALSE 27425
// repeat engine := _engine [ 1 ] ;
27366: LD_ADDR_VAR 0 3
27370: PUSH
27371: LD_VAR 0 11
27375: PUSH
27376: LD_INT 1
27378: ARRAY
27379: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27380: LD_ADDR_VAR 0 11
27384: PUSH
27385: LD_VAR 0 11
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 3
27397: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_VAR 0 3
27407: PPUSH
27408: CALL 27612 0 2
27412: IFTRUE 27423
27414: PUSH
27415: LD_VAR 0 11
27419: PUSH
27420: EMPTY
27421: EQUAL
27422: OR
27423: IFFALSE 27366
// if not control in _control then
27425: LD_VAR 0 4
27429: PUSH
27430: LD_VAR 0 12
27434: IN
27435: NOT
27436: IFFALSE 27462
// control := _control [ rand ( 1 , _control ) ] ;
27438: LD_ADDR_VAR 0 4
27442: PUSH
27443: LD_VAR 0 12
27447: PUSH
27448: LD_INT 1
27450: PPUSH
27451: LD_VAR 0 12
27455: PPUSH
27456: CALL_OW 12
27460: ARRAY
27461: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27462: LD_VAR 0 2
27466: PPUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: CALL 27834 0 2
27476: NOT
27477: IFFALSE 27538
// repeat weapon := _weapon [ 1 ] ;
27479: LD_ADDR_VAR 0 5
27483: PUSH
27484: LD_VAR 0 10
27488: PUSH
27489: LD_INT 1
27491: ARRAY
27492: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27493: LD_ADDR_VAR 0 10
27497: PUSH
27498: LD_VAR 0 10
27502: PPUSH
27503: LD_INT 1
27505: PPUSH
27506: CALL_OW 3
27510: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27511: LD_VAR 0 2
27515: PPUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: CALL 27834 0 2
27525: IFTRUE 27536
27527: PUSH
27528: LD_VAR 0 10
27532: PUSH
27533: EMPTY
27534: EQUAL
27535: OR
27536: IFFALSE 27479
// result := [ ] ;
27538: LD_ADDR_VAR 0 6
27542: PUSH
27543: EMPTY
27544: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27545: LD_VAR 0 1
27549: PPUSH
27550: LD_VAR 0 2
27554: PPUSH
27555: LD_VAR 0 3
27559: PPUSH
27560: LD_VAR 0 4
27564: PPUSH
27565: LD_VAR 0 5
27569: PPUSH
27570: CALL_OW 448
27574: IFFALSE 27607
// result := [ chassis , engine , control , weapon ] ;
27576: LD_ADDR_VAR 0 6
27580: PUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_VAR 0 3
27590: PUSH
27591: LD_VAR 0 4
27595: PUSH
27596: LD_VAR 0 5
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
// end ;
27607: LD_VAR 0 6
27611: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27612: LD_INT 0
27614: PPUSH
// if not chassis or not engine then
27615: LD_VAR 0 1
27619: NOT
27620: IFTRUE 27629
27622: PUSH
27623: LD_VAR 0 2
27627: NOT
27628: OR
27629: IFFALSE 27633
// exit ;
27631: GO 27829
// case engine of engine_solar :
27633: LD_VAR 0 2
27637: PUSH
27638: LD_INT 2
27640: DOUBLE
27641: EQUAL
27642: IFTRUE 27646
27644: GO 27684
27646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27647: LD_ADDR_VAR 0 3
27651: PUSH
27652: LD_INT 11
27654: PUSH
27655: LD_INT 12
27657: PUSH
27658: LD_INT 13
27660: PUSH
27661: LD_INT 14
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
27682: GO 27813
27684: LD_INT 1
27686: DOUBLE
27687: EQUAL
27688: IFTRUE 27692
27690: GO 27754
27692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27693: LD_ADDR_VAR 0 3
27697: PUSH
27698: LD_INT 11
27700: PUSH
27701: LD_INT 12
27703: PUSH
27704: LD_INT 13
27706: PUSH
27707: LD_INT 14
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 3
27718: PUSH
27719: LD_INT 4
27721: PUSH
27722: LD_INT 5
27724: PUSH
27725: LD_INT 21
27727: PUSH
27728: LD_INT 23
27730: PUSH
27731: LD_INT 22
27733: PUSH
27734: LD_INT 24
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
27752: GO 27813
27754: LD_INT 3
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27812
27762: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27763: LD_ADDR_VAR 0 3
27767: PUSH
27768: LD_INT 13
27770: PUSH
27771: LD_INT 14
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 4
27782: PUSH
27783: LD_INT 5
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_INT 23
27794: PUSH
27795: LD_INT 24
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
27810: GO 27813
27812: POP
// result := ( chassis in result ) ;
27813: LD_ADDR_VAR 0 3
27817: PUSH
27818: LD_VAR 0 1
27822: PUSH
27823: LD_VAR 0 3
27827: IN
27828: ST_TO_ADDR
// end ;
27829: LD_VAR 0 3
27833: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27834: LD_INT 0
27836: PPUSH
// if not chassis or not weapon then
27837: LD_VAR 0 1
27841: NOT
27842: IFTRUE 27851
27844: PUSH
27845: LD_VAR 0 2
27849: NOT
27850: OR
27851: IFFALSE 27855
// exit ;
27853: GO 28915
// case weapon of us_machine_gun :
27855: LD_VAR 0 2
27859: PUSH
27860: LD_INT 2
27862: DOUBLE
27863: EQUAL
27864: IFTRUE 27868
27866: GO 27898
27868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27869: LD_ADDR_VAR 0 3
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 5
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
27896: GO 28899
27898: LD_INT 3
27900: DOUBLE
27901: EQUAL
27902: IFTRUE 27906
27904: GO 27936
27906: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27907: LD_ADDR_VAR 0 3
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: LD_INT 4
27923: PUSH
27924: LD_INT 5
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
27934: GO 28899
27936: LD_INT 11
27938: DOUBLE
27939: EQUAL
27940: IFTRUE 27944
27942: GO 27974
27944: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27945: LD_ADDR_VAR 0 3
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: LD_INT 4
27961: PUSH
27962: LD_INT 5
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
27972: GO 28899
27974: LD_INT 4
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 28008
27982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27983: LD_ADDR_VAR 0 3
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: LD_INT 4
27996: PUSH
27997: LD_INT 5
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: ST_TO_ADDR
28006: GO 28899
28008: LD_INT 5
28010: DOUBLE
28011: EQUAL
28012: IFTRUE 28016
28014: GO 28042
28016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28017: LD_ADDR_VAR 0 3
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 3
28027: PUSH
28028: LD_INT 4
28030: PUSH
28031: LD_INT 5
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: ST_TO_ADDR
28040: GO 28899
28042: LD_INT 9
28044: DOUBLE
28045: EQUAL
28046: IFTRUE 28050
28048: GO 28076
28050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28051: LD_ADDR_VAR 0 3
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: LD_INT 4
28064: PUSH
28065: LD_INT 5
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
28074: GO 28899
28076: LD_INT 7
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28110
28084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 3
28095: PUSH
28096: LD_INT 4
28098: PUSH
28099: LD_INT 5
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
28108: GO 28899
28110: LD_INT 12
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28118
28116: GO 28144
28118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28119: LD_ADDR_VAR 0 3
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 4
28132: PUSH
28133: LD_INT 5
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: ST_TO_ADDR
28142: GO 28899
28144: LD_INT 13
28146: DOUBLE
28147: EQUAL
28148: IFTRUE 28152
28150: GO 28178
28152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28153: LD_ADDR_VAR 0 3
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: LD_INT 3
28163: PUSH
28164: LD_INT 4
28166: PUSH
28167: LD_INT 5
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: ST_TO_ADDR
28176: GO 28899
28178: LD_INT 14
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28204
28186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28187: LD_ADDR_VAR 0 3
28191: PUSH
28192: LD_INT 4
28194: PUSH
28195: LD_INT 5
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: ST_TO_ADDR
28202: GO 28899
28204: LD_INT 6
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28212
28210: GO 28230
28212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28213: LD_ADDR_VAR 0 3
28217: PUSH
28218: LD_INT 4
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: ST_TO_ADDR
28228: GO 28899
28230: LD_INT 10
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28256
28238: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_INT 4
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: ST_TO_ADDR
28254: GO 28899
28256: LD_INT 22
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28290
28264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_INT 11
28272: PUSH
28273: LD_INT 12
28275: PUSH
28276: LD_INT 13
28278: PUSH
28279: LD_INT 14
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
28288: GO 28899
28290: LD_INT 23
28292: DOUBLE
28293: EQUAL
28294: IFTRUE 28298
28296: GO 28324
28298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28299: LD_ADDR_VAR 0 3
28303: PUSH
28304: LD_INT 11
28306: PUSH
28307: LD_INT 12
28309: PUSH
28310: LD_INT 13
28312: PUSH
28313: LD_INT 14
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
28322: GO 28899
28324: LD_INT 24
28326: DOUBLE
28327: EQUAL
28328: IFTRUE 28332
28330: GO 28358
28332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28333: LD_ADDR_VAR 0 3
28337: PUSH
28338: LD_INT 11
28340: PUSH
28341: LD_INT 12
28343: PUSH
28344: LD_INT 13
28346: PUSH
28347: LD_INT 14
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: ST_TO_ADDR
28356: GO 28899
28358: LD_INT 30
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28392
28366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28367: LD_ADDR_VAR 0 3
28371: PUSH
28372: LD_INT 11
28374: PUSH
28375: LD_INT 12
28377: PUSH
28378: LD_INT 13
28380: PUSH
28381: LD_INT 14
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
28390: GO 28899
28392: LD_INT 25
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28418
28400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28401: LD_ADDR_VAR 0 3
28405: PUSH
28406: LD_INT 13
28408: PUSH
28409: LD_INT 14
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: ST_TO_ADDR
28416: GO 28899
28418: LD_INT 27
28420: DOUBLE
28421: EQUAL
28422: IFTRUE 28426
28424: GO 28444
28426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_INT 13
28434: PUSH
28435: LD_INT 14
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: ST_TO_ADDR
28442: GO 28899
28444: LD_INT 92
28446: DOUBLE
28447: EQUAL
28448: IFTRUE 28452
28450: GO 28478
28452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_INT 11
28460: PUSH
28461: LD_INT 12
28463: PUSH
28464: LD_INT 13
28466: PUSH
28467: LD_INT 14
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
28476: GO 28899
28478: LD_INT 28
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28504
28486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28487: LD_ADDR_VAR 0 3
28491: PUSH
28492: LD_INT 13
28494: PUSH
28495: LD_INT 14
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: ST_TO_ADDR
28502: GO 28899
28504: LD_INT 29
28506: DOUBLE
28507: EQUAL
28508: IFTRUE 28512
28510: GO 28530
28512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28513: LD_ADDR_VAR 0 3
28517: PUSH
28518: LD_INT 13
28520: PUSH
28521: LD_INT 14
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: ST_TO_ADDR
28528: GO 28899
28530: LD_INT 31
28532: DOUBLE
28533: EQUAL
28534: IFTRUE 28538
28536: GO 28556
28538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28539: LD_ADDR_VAR 0 3
28543: PUSH
28544: LD_INT 13
28546: PUSH
28547: LD_INT 14
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: ST_TO_ADDR
28554: GO 28899
28556: LD_INT 26
28558: DOUBLE
28559: EQUAL
28560: IFTRUE 28564
28562: GO 28582
28564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28565: LD_ADDR_VAR 0 3
28569: PUSH
28570: LD_INT 13
28572: PUSH
28573: LD_INT 14
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: ST_TO_ADDR
28580: GO 28899
28582: LD_INT 42
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28616
28590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_INT 21
28598: PUSH
28599: LD_INT 22
28601: PUSH
28602: LD_INT 23
28604: PUSH
28605: LD_INT 24
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
28614: GO 28899
28616: LD_INT 43
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28650
28624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_INT 21
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_INT 23
28638: PUSH
28639: LD_INT 24
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: ST_TO_ADDR
28648: GO 28899
28650: LD_INT 44
28652: DOUBLE
28653: EQUAL
28654: IFTRUE 28658
28656: GO 28684
28658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28659: LD_ADDR_VAR 0 3
28663: PUSH
28664: LD_INT 21
28666: PUSH
28667: LD_INT 22
28669: PUSH
28670: LD_INT 23
28672: PUSH
28673: LD_INT 24
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
28682: GO 28899
28684: LD_INT 45
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28718
28692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 21
28700: PUSH
28701: LD_INT 22
28703: PUSH
28704: LD_INT 23
28706: PUSH
28707: LD_INT 24
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: ST_TO_ADDR
28716: GO 28899
28718: LD_INT 49
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28752
28726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_INT 21
28734: PUSH
28735: LD_INT 22
28737: PUSH
28738: LD_INT 23
28740: PUSH
28741: LD_INT 24
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
28750: GO 28899
28752: LD_INT 51
28754: DOUBLE
28755: EQUAL
28756: IFTRUE 28760
28758: GO 28786
28760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: LD_INT 21
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_INT 23
28774: PUSH
28775: LD_INT 24
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
28784: GO 28899
28786: LD_INT 52
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 28820
28794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 21
28802: PUSH
28803: LD_INT 22
28805: PUSH
28806: LD_INT 23
28808: PUSH
28809: LD_INT 24
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: ST_TO_ADDR
28818: GO 28899
28820: LD_INT 53
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 28846
28828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28829: LD_ADDR_VAR 0 3
28833: PUSH
28834: LD_INT 23
28836: PUSH
28837: LD_INT 24
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: ST_TO_ADDR
28844: GO 28899
28846: LD_INT 46
28848: DOUBLE
28849: EQUAL
28850: IFTRUE 28854
28852: GO 28872
28854: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 23
28862: PUSH
28863: LD_INT 24
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: ST_TO_ADDR
28870: GO 28899
28872: LD_INT 47
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28880
28878: GO 28898
28880: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28881: LD_ADDR_VAR 0 3
28885: PUSH
28886: LD_INT 23
28888: PUSH
28889: LD_INT 24
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: ST_TO_ADDR
28896: GO 28899
28898: POP
// result := ( chassis in result ) ;
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_VAR 0 1
28908: PUSH
28909: LD_VAR 0 3
28913: IN
28914: ST_TO_ADDR
// end ;
28915: LD_VAR 0 3
28919: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28920: LD_INT 0
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
// result := array ;
28929: LD_ADDR_VAR 0 5
28933: PUSH
28934: LD_VAR 0 1
28938: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28939: LD_VAR 0 1
28943: NOT
28944: IFTRUE 28953
28946: PUSH
28947: LD_VAR 0 2
28951: NOT
28952: OR
28953: IFTRUE 28962
28955: PUSH
28956: LD_VAR 0 3
28960: NOT
28961: OR
28962: IFTRUE 28976
28964: PUSH
28965: LD_VAR 0 2
28969: PUSH
28970: LD_VAR 0 1
28974: GREATER
28975: OR
28976: IFTRUE 28990
28978: PUSH
28979: LD_VAR 0 3
28983: PUSH
28984: LD_VAR 0 1
28988: GREATER
28989: OR
28990: IFFALSE 28994
// exit ;
28992: GO 29290
// if direction then
28994: LD_VAR 0 4
28998: IFFALSE 29062
// begin d := 1 ;
29000: LD_ADDR_VAR 0 9
29004: PUSH
29005: LD_INT 1
29007: ST_TO_ADDR
// if i_from > i_to then
29008: LD_VAR 0 2
29012: PUSH
29013: LD_VAR 0 3
29017: GREATER
29018: IFFALSE 29044
// length := ( array - i_from ) + i_to else
29020: LD_ADDR_VAR 0 11
29024: PUSH
29025: LD_VAR 0 1
29029: PUSH
29030: LD_VAR 0 2
29034: MINUS
29035: PUSH
29036: LD_VAR 0 3
29040: PLUS
29041: ST_TO_ADDR
29042: GO 29060
// length := i_to - i_from ;
29044: LD_ADDR_VAR 0 11
29048: PUSH
29049: LD_VAR 0 3
29053: PUSH
29054: LD_VAR 0 2
29058: MINUS
29059: ST_TO_ADDR
// end else
29060: GO 29123
// begin d := - 1 ;
29062: LD_ADDR_VAR 0 9
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: ST_TO_ADDR
// if i_from > i_to then
29071: LD_VAR 0 2
29075: PUSH
29076: LD_VAR 0 3
29080: GREATER
29081: IFFALSE 29101
// length := i_from - i_to else
29083: LD_ADDR_VAR 0 11
29087: PUSH
29088: LD_VAR 0 2
29092: PUSH
29093: LD_VAR 0 3
29097: MINUS
29098: ST_TO_ADDR
29099: GO 29123
// length := ( array - i_to ) + i_from ;
29101: LD_ADDR_VAR 0 11
29105: PUSH
29106: LD_VAR 0 1
29110: PUSH
29111: LD_VAR 0 3
29115: MINUS
29116: PUSH
29117: LD_VAR 0 2
29121: PLUS
29122: ST_TO_ADDR
// end ; if not length then
29123: LD_VAR 0 11
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29290
// tmp := array ;
29132: LD_ADDR_VAR 0 10
29136: PUSH
29137: LD_VAR 0 1
29141: ST_TO_ADDR
// for i = 1 to length do
29142: LD_ADDR_VAR 0 6
29146: PUSH
29147: DOUBLE
29148: LD_INT 1
29150: DEC
29151: ST_TO_ADDR
29152: LD_VAR 0 11
29156: PUSH
29157: FOR_TO
29158: IFFALSE 29278
// begin for j = 1 to array do
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: DOUBLE
29166: LD_INT 1
29168: DEC
29169: ST_TO_ADDR
29170: LD_VAR 0 1
29174: PUSH
29175: FOR_TO
29176: IFFALSE 29264
// begin k := j + d ;
29178: LD_ADDR_VAR 0 8
29182: PUSH
29183: LD_VAR 0 7
29187: PUSH
29188: LD_VAR 0 9
29192: PLUS
29193: ST_TO_ADDR
// if k > array then
29194: LD_VAR 0 8
29198: PUSH
29199: LD_VAR 0 1
29203: GREATER
29204: IFFALSE 29214
// k := 1 ;
29206: LD_ADDR_VAR 0 8
29210: PUSH
29211: LD_INT 1
29213: ST_TO_ADDR
// if not k then
29214: LD_VAR 0 8
29218: NOT
29219: IFFALSE 29231
// k := array ;
29221: LD_ADDR_VAR 0 8
29225: PUSH
29226: LD_VAR 0 1
29230: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29231: LD_ADDR_VAR 0 10
29235: PUSH
29236: LD_VAR 0 10
29240: PPUSH
29241: LD_VAR 0 8
29245: PPUSH
29246: LD_VAR 0 1
29250: PUSH
29251: LD_VAR 0 7
29255: ARRAY
29256: PPUSH
29257: CALL_OW 1
29261: ST_TO_ADDR
// end ;
29262: GO 29175
29264: POP
29265: POP
// array := tmp ;
29266: LD_ADDR_VAR 0 1
29270: PUSH
29271: LD_VAR 0 10
29275: ST_TO_ADDR
// end ;
29276: GO 29157
29278: POP
29279: POP
// result := array ;
29280: LD_ADDR_VAR 0 5
29284: PUSH
29285: LD_VAR 0 1
29289: ST_TO_ADDR
// end ;
29290: LD_VAR 0 5
29294: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29295: LD_INT 0
29297: PPUSH
29298: PPUSH
// result := 0 ;
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 0
29306: ST_TO_ADDR
// if not array or not value in array then
29307: LD_VAR 0 1
29311: NOT
29312: IFTRUE 29327
29314: PUSH
29315: LD_VAR 0 2
29319: PUSH
29320: LD_VAR 0 1
29324: IN
29325: NOT
29326: OR
29327: IFFALSE 29331
// exit ;
29329: GO 29385
// for i = 1 to array do
29331: LD_ADDR_VAR 0 4
29335: PUSH
29336: DOUBLE
29337: LD_INT 1
29339: DEC
29340: ST_TO_ADDR
29341: LD_VAR 0 1
29345: PUSH
29346: FOR_TO
29347: IFFALSE 29383
// if value = array [ i ] then
29349: LD_VAR 0 2
29353: PUSH
29354: LD_VAR 0 1
29358: PUSH
29359: LD_VAR 0 4
29363: ARRAY
29364: EQUAL
29365: IFFALSE 29381
// begin result := i ;
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_VAR 0 4
29376: ST_TO_ADDR
// exit ;
29377: POP
29378: POP
29379: GO 29385
// end ;
29381: GO 29346
29383: POP
29384: POP
// end ;
29385: LD_VAR 0 3
29389: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29390: LD_INT 0
29392: PPUSH
// vc_chassis := chassis ;
29393: LD_ADDR_OWVAR 37
29397: PUSH
29398: LD_VAR 0 1
29402: ST_TO_ADDR
// vc_engine := engine ;
29403: LD_ADDR_OWVAR 39
29407: PUSH
29408: LD_VAR 0 2
29412: ST_TO_ADDR
// vc_control := control ;
29413: LD_ADDR_OWVAR 38
29417: PUSH
29418: LD_VAR 0 3
29422: ST_TO_ADDR
// vc_weapon := weapon ;
29423: LD_ADDR_OWVAR 40
29427: PUSH
29428: LD_VAR 0 4
29432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29433: LD_ADDR_OWVAR 41
29437: PUSH
29438: LD_VAR 0 5
29442: ST_TO_ADDR
// end ;
29443: LD_VAR 0 6
29447: RET
// export function WantPlant ( unit ) ; var task ; begin
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
// result := false ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 437
29474: ST_TO_ADDR
// if task then
29475: LD_VAR 0 3
29479: IFFALSE 29507
// if task [ 1 ] [ 1 ] = p then
29481: LD_VAR 0 3
29485: PUSH
29486: LD_INT 1
29488: ARRAY
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PUSH
29494: LD_STRING p
29496: EQUAL
29497: IFFALSE 29507
// result := true ;
29499: LD_ADDR_VAR 0 2
29503: PUSH
29504: LD_INT 1
29506: ST_TO_ADDR
// end ;
29507: LD_VAR 0 2
29511: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
// if pos < 1 then
29518: LD_VAR 0 2
29522: PUSH
29523: LD_INT 1
29525: LESS
29526: IFFALSE 29530
// exit ;
29528: GO 29833
// if pos = 1 then
29530: LD_VAR 0 2
29534: PUSH
29535: LD_INT 1
29537: EQUAL
29538: IFFALSE 29571
// result := Replace ( arr , pos [ 1 ] , value ) else
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_VAR 0 2
29554: PUSH
29555: LD_INT 1
29557: ARRAY
29558: PPUSH
29559: LD_VAR 0 3
29563: PPUSH
29564: CALL_OW 1
29568: ST_TO_ADDR
29569: GO 29833
// begin tmp := arr ;
29571: LD_ADDR_VAR 0 6
29575: PUSH
29576: LD_VAR 0 1
29580: ST_TO_ADDR
// s_arr := [ tmp ] ;
29581: LD_ADDR_VAR 0 7
29585: PUSH
29586: LD_VAR 0 6
29590: PUSH
29591: EMPTY
29592: LIST
29593: ST_TO_ADDR
// for i = 1 to pos - 1 do
29594: LD_ADDR_VAR 0 5
29598: PUSH
29599: DOUBLE
29600: LD_INT 1
29602: DEC
29603: ST_TO_ADDR
29604: LD_VAR 0 2
29608: PUSH
29609: LD_INT 1
29611: MINUS
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29659
// begin tmp := tmp [ pos [ i ] ] ;
29616: LD_ADDR_VAR 0 6
29620: PUSH
29621: LD_VAR 0 6
29625: PUSH
29626: LD_VAR 0 2
29630: PUSH
29631: LD_VAR 0 5
29635: ARRAY
29636: ARRAY
29637: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29638: LD_ADDR_VAR 0 7
29642: PUSH
29643: LD_VAR 0 7
29647: PUSH
29648: LD_VAR 0 6
29652: PUSH
29653: EMPTY
29654: LIST
29655: ADD
29656: ST_TO_ADDR
// end ;
29657: GO 29613
29659: POP
29660: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29661: LD_ADDR_VAR 0 6
29665: PUSH
29666: LD_VAR 0 6
29670: PPUSH
29671: LD_VAR 0 2
29675: PUSH
29676: LD_VAR 0 2
29680: ARRAY
29681: PPUSH
29682: LD_VAR 0 3
29686: PPUSH
29687: CALL_OW 1
29691: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29692: LD_ADDR_VAR 0 7
29696: PUSH
29697: LD_VAR 0 7
29701: PPUSH
29702: LD_VAR 0 7
29706: PPUSH
29707: LD_VAR 0 6
29711: PPUSH
29712: CALL_OW 1
29716: ST_TO_ADDR
// for i = s_arr downto 2 do
29717: LD_ADDR_VAR 0 5
29721: PUSH
29722: DOUBLE
29723: LD_VAR 0 7
29727: INC
29728: ST_TO_ADDR
29729: LD_INT 2
29731: PUSH
29732: FOR_DOWNTO
29733: IFFALSE 29817
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29735: LD_ADDR_VAR 0 6
29739: PUSH
29740: LD_VAR 0 7
29744: PUSH
29745: LD_VAR 0 5
29749: PUSH
29750: LD_INT 1
29752: MINUS
29753: ARRAY
29754: PPUSH
29755: LD_VAR 0 2
29759: PUSH
29760: LD_VAR 0 5
29764: PUSH
29765: LD_INT 1
29767: MINUS
29768: ARRAY
29769: PPUSH
29770: LD_VAR 0 7
29774: PUSH
29775: LD_VAR 0 5
29779: ARRAY
29780: PPUSH
29781: CALL_OW 1
29785: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29786: LD_ADDR_VAR 0 7
29790: PUSH
29791: LD_VAR 0 7
29795: PPUSH
29796: LD_VAR 0 5
29800: PUSH
29801: LD_INT 1
29803: MINUS
29804: PPUSH
29805: LD_VAR 0 6
29809: PPUSH
29810: CALL_OW 1
29814: ST_TO_ADDR
// end ;
29815: GO 29732
29817: POP
29818: POP
// result := s_arr [ 1 ] ;
29819: LD_ADDR_VAR 0 4
29823: PUSH
29824: LD_VAR 0 7
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: ST_TO_ADDR
// end ; end ;
29833: LD_VAR 0 4
29837: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
// if not list then
29842: LD_VAR 0 1
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29942
// i := list [ pos1 ] ;
29851: LD_ADDR_VAR 0 5
29855: PUSH
29856: LD_VAR 0 1
29860: PUSH
29861: LD_VAR 0 2
29865: ARRAY
29866: ST_TO_ADDR
// if not i then
29867: LD_VAR 0 5
29871: NOT
29872: IFFALSE 29876
// exit ;
29874: GO 29942
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29876: LD_ADDR_VAR 0 1
29880: PUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: LD_VAR 0 1
29895: PUSH
29896: LD_VAR 0 3
29900: ARRAY
29901: PPUSH
29902: CALL_OW 1
29906: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29907: LD_ADDR_VAR 0 1
29911: PUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: LD_VAR 0 3
29921: PPUSH
29922: LD_VAR 0 5
29926: PPUSH
29927: CALL_OW 1
29931: ST_TO_ADDR
// result := list ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_VAR 0 1
29941: ST_TO_ADDR
// end ;
29942: LD_VAR 0 4
29946: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29947: LD_INT 0
29949: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29950: LD_ADDR_VAR 0 5
29954: PUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 250
29964: PPUSH
29965: LD_VAR 0 1
29969: PPUSH
29970: CALL_OW 251
29974: PPUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: LD_VAR 0 4
29989: PPUSH
29990: CALL 30372 0 5
29994: ST_TO_ADDR
// end ;
29995: LD_VAR 0 5
29999: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
// if not list or not unit then
30006: LD_VAR 0 2
30010: NOT
30011: IFTRUE 30020
30013: PUSH
30014: LD_VAR 0 1
30018: NOT
30019: OR
30020: IFFALSE 30024
// exit ;
30022: GO 30367
// result := [ ] ;
30024: LD_ADDR_VAR 0 5
30028: PUSH
30029: EMPTY
30030: ST_TO_ADDR
// for i in list do
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 2
30040: PUSH
30041: FOR_IN
30042: IFFALSE 30260
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30044: LD_ADDR_VAR 0 8
30048: PUSH
30049: LD_VAR 0 1
30053: PPUSH
30054: LD_VAR 0 6
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: LD_VAR 0 6
30067: PUSH
30068: LD_INT 2
30070: ARRAY
30071: PPUSH
30072: CALL_OW 297
30076: ST_TO_ADDR
// if not Count ( result ) then
30077: LD_VAR 0 5
30081: PPUSH
30082: CALL 26628 0 1
30086: NOT
30087: IFFALSE 30120
// begin result := Join ( result , [ i , tmp ] ) ;
30089: LD_ADDR_VAR 0 5
30093: PUSH
30094: LD_VAR 0 5
30098: PPUSH
30099: LD_VAR 0 6
30103: PUSH
30104: LD_VAR 0 8
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL 62560 0 2
30117: ST_TO_ADDR
// continue ;
30118: GO 30041
// end ; if result [ result ] [ 2 ] <= tmp then
30120: LD_VAR 0 5
30124: PUSH
30125: LD_VAR 0 5
30129: ARRAY
30130: PUSH
30131: LD_INT 2
30133: ARRAY
30134: PUSH
30135: LD_VAR 0 8
30139: LESSEQUAL
30140: IFFALSE 30173
// result := Join ( result , [ i , tmp ] ) else
30142: LD_ADDR_VAR 0 5
30146: PUSH
30147: LD_VAR 0 5
30151: PPUSH
30152: LD_VAR 0 6
30156: PUSH
30157: LD_VAR 0 8
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PPUSH
30166: CALL 62560 0 2
30170: ST_TO_ADDR
30171: GO 30258
// begin for j := 1 to Count ( result ) do
30173: LD_ADDR_VAR 0 7
30177: PUSH
30178: DOUBLE
30179: LD_INT 1
30181: DEC
30182: ST_TO_ADDR
30183: LD_VAR 0 5
30187: PPUSH
30188: CALL 26628 0 1
30192: PUSH
30193: FOR_TO
30194: IFFALSE 30256
// begin if tmp < result [ j ] [ 2 ] then
30196: LD_VAR 0 8
30200: PUSH
30201: LD_VAR 0 5
30205: PUSH
30206: LD_VAR 0 7
30210: ARRAY
30211: PUSH
30212: LD_INT 2
30214: ARRAY
30215: LESS
30216: IFFALSE 30254
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30218: LD_ADDR_VAR 0 5
30222: PUSH
30223: LD_VAR 0 5
30227: PPUSH
30228: LD_VAR 0 7
30232: PPUSH
30233: LD_VAR 0 6
30237: PUSH
30238: LD_VAR 0 8
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 2
30251: ST_TO_ADDR
// break ;
30252: GO 30256
// end ; end ;
30254: GO 30193
30256: POP
30257: POP
// end ; end ;
30258: GO 30041
30260: POP
30261: POP
// if result and not asc then
30262: LD_VAR 0 5
30266: IFFALSE 30275
30268: PUSH
30269: LD_VAR 0 3
30273: NOT
30274: AND
30275: IFFALSE 30292
// result := ReverseArray ( result ) ;
30277: LD_ADDR_VAR 0 5
30281: PUSH
30282: LD_VAR 0 5
30286: PPUSH
30287: CALL 57650 0 1
30291: ST_TO_ADDR
// tmp := [ ] ;
30292: LD_ADDR_VAR 0 8
30296: PUSH
30297: EMPTY
30298: ST_TO_ADDR
// if mode then
30299: LD_VAR 0 4
30303: IFFALSE 30367
// begin for i := 1 to result do
30305: LD_ADDR_VAR 0 6
30309: PUSH
30310: DOUBLE
30311: LD_INT 1
30313: DEC
30314: ST_TO_ADDR
30315: LD_VAR 0 5
30319: PUSH
30320: FOR_TO
30321: IFFALSE 30355
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30323: LD_ADDR_VAR 0 8
30327: PUSH
30328: LD_VAR 0 8
30332: PPUSH
30333: LD_VAR 0 5
30337: PUSH
30338: LD_VAR 0 6
30342: ARRAY
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PPUSH
30348: CALL 62560 0 2
30352: ST_TO_ADDR
30353: GO 30320
30355: POP
30356: POP
// result := tmp ;
30357: LD_ADDR_VAR 0 5
30361: PUSH
30362: LD_VAR 0 8
30366: ST_TO_ADDR
// end ; end ;
30367: LD_VAR 0 5
30371: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30372: LD_INT 0
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
// if not list then
30378: LD_VAR 0 3
30382: NOT
30383: IFFALSE 30387
// exit ;
30385: GO 30777
// result := [ ] ;
30387: LD_ADDR_VAR 0 6
30391: PUSH
30392: EMPTY
30393: ST_TO_ADDR
// for i in list do
30394: LD_ADDR_VAR 0 7
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: FOR_IN
30405: IFFALSE 30607
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30407: LD_ADDR_VAR 0 9
30411: PUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: LD_VAR 0 1
30421: PPUSH
30422: LD_VAR 0 2
30426: PPUSH
30427: CALL_OW 297
30431: ST_TO_ADDR
// if not result then
30432: LD_VAR 0 6
30436: NOT
30437: IFFALSE 30463
// result := [ [ i , tmp ] ] else
30439: LD_ADDR_VAR 0 6
30443: PUSH
30444: LD_VAR 0 7
30448: PUSH
30449: LD_VAR 0 9
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: ST_TO_ADDR
30461: GO 30605
// begin if result [ result ] [ 2 ] <= tmp then
30463: LD_VAR 0 6
30467: PUSH
30468: LD_VAR 0 6
30472: ARRAY
30473: PUSH
30474: LD_INT 2
30476: ARRAY
30477: PUSH
30478: LD_VAR 0 9
30482: LESSEQUAL
30483: IFFALSE 30525
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30485: LD_ADDR_VAR 0 6
30489: PUSH
30490: LD_VAR 0 6
30494: PPUSH
30495: LD_VAR 0 6
30499: PUSH
30500: LD_INT 1
30502: PLUS
30503: PPUSH
30504: LD_VAR 0 7
30508: PUSH
30509: LD_VAR 0 9
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PPUSH
30518: CALL_OW 2
30522: ST_TO_ADDR
30523: GO 30605
// for j := 1 to result do
30525: LD_ADDR_VAR 0 8
30529: PUSH
30530: DOUBLE
30531: LD_INT 1
30533: DEC
30534: ST_TO_ADDR
30535: LD_VAR 0 6
30539: PUSH
30540: FOR_TO
30541: IFFALSE 30603
// begin if tmp < result [ j ] [ 2 ] then
30543: LD_VAR 0 9
30547: PUSH
30548: LD_VAR 0 6
30552: PUSH
30553: LD_VAR 0 8
30557: ARRAY
30558: PUSH
30559: LD_INT 2
30561: ARRAY
30562: LESS
30563: IFFALSE 30601
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30565: LD_ADDR_VAR 0 6
30569: PUSH
30570: LD_VAR 0 6
30574: PPUSH
30575: LD_VAR 0 8
30579: PPUSH
30580: LD_VAR 0 7
30584: PUSH
30585: LD_VAR 0 9
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PPUSH
30594: CALL_OW 2
30598: ST_TO_ADDR
// break ;
30599: GO 30603
// end ; end ;
30601: GO 30540
30603: POP
30604: POP
// end ; end ;
30605: GO 30404
30607: POP
30608: POP
// if result and not asc then
30609: LD_VAR 0 6
30613: IFFALSE 30622
30615: PUSH
30616: LD_VAR 0 4
30620: NOT
30621: AND
30622: IFFALSE 30697
// begin tmp := result ;
30624: LD_ADDR_VAR 0 9
30628: PUSH
30629: LD_VAR 0 6
30633: ST_TO_ADDR
// for i = tmp downto 1 do
30634: LD_ADDR_VAR 0 7
30638: PUSH
30639: DOUBLE
30640: LD_VAR 0 9
30644: INC
30645: ST_TO_ADDR
30646: LD_INT 1
30648: PUSH
30649: FOR_DOWNTO
30650: IFFALSE 30695
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30652: LD_ADDR_VAR 0 6
30656: PUSH
30657: LD_VAR 0 6
30661: PPUSH
30662: LD_VAR 0 9
30666: PUSH
30667: LD_VAR 0 7
30671: MINUS
30672: PUSH
30673: LD_INT 1
30675: PLUS
30676: PPUSH
30677: LD_VAR 0 9
30681: PUSH
30682: LD_VAR 0 7
30686: ARRAY
30687: PPUSH
30688: CALL_OW 1
30692: ST_TO_ADDR
30693: GO 30649
30695: POP
30696: POP
// end ; tmp := [ ] ;
30697: LD_ADDR_VAR 0 9
30701: PUSH
30702: EMPTY
30703: ST_TO_ADDR
// if mode then
30704: LD_VAR 0 5
30708: IFFALSE 30777
// begin for i = 1 to result do
30710: LD_ADDR_VAR 0 7
30714: PUSH
30715: DOUBLE
30716: LD_INT 1
30718: DEC
30719: ST_TO_ADDR
30720: LD_VAR 0 6
30724: PUSH
30725: FOR_TO
30726: IFFALSE 30765
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30728: LD_ADDR_VAR 0 9
30732: PUSH
30733: LD_VAR 0 9
30737: PPUSH
30738: LD_VAR 0 7
30742: PPUSH
30743: LD_VAR 0 6
30747: PUSH
30748: LD_VAR 0 7
30752: ARRAY
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: CALL_OW 1
30762: ST_TO_ADDR
30763: GO 30725
30765: POP
30766: POP
// result := tmp ;
30767: LD_ADDR_VAR 0 6
30771: PUSH
30772: LD_VAR 0 9
30776: ST_TO_ADDR
// end ; end ;
30777: LD_VAR 0 6
30781: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30782: LD_INT 0
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30790: LD_ADDR_VAR 0 5
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// if not x or not y then
30812: LD_VAR 0 2
30816: NOT
30817: IFTRUE 30826
30819: PUSH
30820: LD_VAR 0 3
30824: NOT
30825: OR
30826: IFFALSE 30830
// exit ;
30828: GO 32486
// if not range then
30830: LD_VAR 0 4
30834: NOT
30835: IFFALSE 30845
// range := 10 ;
30837: LD_ADDR_VAR 0 4
30841: PUSH
30842: LD_INT 10
30844: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30845: LD_ADDR_VAR 0 8
30849: PUSH
30850: LD_INT 81
30852: PUSH
30853: LD_VAR 0 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 92
30864: PUSH
30865: LD_VAR 0 2
30869: PUSH
30870: LD_VAR 0 3
30874: PUSH
30875: LD_VAR 0 4
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 3
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 69
30912: ST_TO_ADDR
// if not tmp then
30913: LD_VAR 0 8
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 32486
// for i in tmp do
30922: LD_ADDR_VAR 0 6
30926: PUSH
30927: LD_VAR 0 8
30931: PUSH
30932: FOR_IN
30933: IFFALSE 32461
// begin points := [ 0 , 0 , 0 ] ;
30935: LD_ADDR_VAR 0 9
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// bpoints := 1 ;
30954: LD_ADDR_VAR 0 10
30958: PUSH
30959: LD_INT 1
30961: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30962: LD_VAR 0 6
30966: PPUSH
30967: CALL_OW 247
30971: PUSH
30972: LD_INT 1
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 30980
30978: GO 31562
30980: POP
// begin if GetClass ( i ) = 1 then
30981: LD_VAR 0 6
30985: PPUSH
30986: CALL_OW 257
30990: PUSH
30991: LD_INT 1
30993: EQUAL
30994: IFFALSE 31015
// points := [ 10 , 5 , 3 ] ;
30996: LD_ADDR_VAR 0 9
31000: PUSH
31001: LD_INT 10
31003: PUSH
31004: LD_INT 5
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31015: LD_VAR 0 6
31019: PPUSH
31020: CALL_OW 257
31024: PUSH
31025: LD_INT 2
31027: PUSH
31028: LD_INT 3
31030: PUSH
31031: LD_INT 4
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: IN
31039: IFFALSE 31060
// points := [ 3 , 2 , 1 ] ;
31041: LD_ADDR_VAR 0 9
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31060: LD_VAR 0 6
31064: PPUSH
31065: CALL_OW 257
31069: PUSH
31070: LD_INT 5
31072: EQUAL
31073: IFFALSE 31094
// points := [ 130 , 5 , 2 ] ;
31075: LD_ADDR_VAR 0 9
31079: PUSH
31080: LD_INT 130
31082: PUSH
31083: LD_INT 5
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31094: LD_VAR 0 6
31098: PPUSH
31099: CALL_OW 257
31103: PUSH
31104: LD_INT 8
31106: EQUAL
31107: IFFALSE 31128
// points := [ 35 , 35 , 30 ] ;
31109: LD_ADDR_VAR 0 9
31113: PUSH
31114: LD_INT 35
31116: PUSH
31117: LD_INT 35
31119: PUSH
31120: LD_INT 30
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31128: LD_VAR 0 6
31132: PPUSH
31133: CALL_OW 257
31137: PUSH
31138: LD_INT 9
31140: EQUAL
31141: IFFALSE 31162
// points := [ 20 , 55 , 40 ] ;
31143: LD_ADDR_VAR 0 9
31147: PUSH
31148: LD_INT 20
31150: PUSH
31151: LD_INT 55
31153: PUSH
31154: LD_INT 40
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31162: LD_VAR 0 6
31166: PPUSH
31167: CALL_OW 257
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 16
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: IN
31182: IFFALSE 31203
// points := [ 5 , 3 , 2 ] ;
31184: LD_ADDR_VAR 0 9
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31203: LD_VAR 0 6
31207: PPUSH
31208: CALL_OW 257
31212: PUSH
31213: LD_INT 17
31215: EQUAL
31216: IFFALSE 31237
// points := [ 100 , 50 , 75 ] ;
31218: LD_ADDR_VAR 0 9
31222: PUSH
31223: LD_INT 100
31225: PUSH
31226: LD_INT 50
31228: PUSH
31229: LD_INT 75
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 257
31246: PUSH
31247: LD_INT 15
31249: EQUAL
31250: IFFALSE 31271
// points := [ 10 , 5 , 3 ] ;
31252: LD_ADDR_VAR 0 9
31256: PUSH
31257: LD_INT 10
31259: PUSH
31260: LD_INT 5
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31271: LD_VAR 0 6
31275: PPUSH
31276: CALL_OW 257
31280: PUSH
31281: LD_INT 14
31283: EQUAL
31284: IFFALSE 31305
// points := [ 10 , 0 , 0 ] ;
31286: LD_ADDR_VAR 0 9
31290: PUSH
31291: LD_INT 10
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31305: LD_VAR 0 6
31309: PPUSH
31310: CALL_OW 257
31314: PUSH
31315: LD_INT 11
31317: EQUAL
31318: IFFALSE 31339
// points := [ 30 , 10 , 5 ] ;
31320: LD_ADDR_VAR 0 9
31324: PUSH
31325: LD_INT 30
31327: PUSH
31328: LD_INT 10
31330: PUSH
31331: LD_INT 5
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31339: LD_VAR 0 1
31343: PPUSH
31344: LD_INT 5
31346: PPUSH
31347: CALL_OW 321
31351: PUSH
31352: LD_INT 2
31354: EQUAL
31355: IFFALSE 31372
// bpoints := bpoints * 1.8 ;
31357: LD_ADDR_VAR 0 10
31361: PUSH
31362: LD_VAR 0 10
31366: PUSH
31367: LD_REAL  1.80000000000000E+0000
31370: MUL
31371: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31372: LD_VAR 0 6
31376: PPUSH
31377: CALL_OW 257
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: LD_INT 4
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: IN
31400: IFFALSE 31420
31402: PUSH
31403: LD_VAR 0 1
31407: PPUSH
31408: LD_INT 51
31410: PPUSH
31411: CALL_OW 321
31415: PUSH
31416: LD_INT 2
31418: EQUAL
31419: AND
31420: IFFALSE 31437
// bpoints := bpoints * 1.2 ;
31422: LD_ADDR_VAR 0 10
31426: PUSH
31427: LD_VAR 0 10
31431: PUSH
31432: LD_REAL  1.20000000000000E+0000
31435: MUL
31436: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31437: LD_VAR 0 6
31441: PPUSH
31442: CALL_OW 257
31446: PUSH
31447: LD_INT 5
31449: PUSH
31450: LD_INT 7
31452: PUSH
31453: LD_INT 9
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: IN
31461: IFFALSE 31481
31463: PUSH
31464: LD_VAR 0 1
31468: PPUSH
31469: LD_INT 52
31471: PPUSH
31472: CALL_OW 321
31476: PUSH
31477: LD_INT 2
31479: EQUAL
31480: AND
31481: IFFALSE 31498
// bpoints := bpoints * 1.5 ;
31483: LD_ADDR_VAR 0 10
31487: PUSH
31488: LD_VAR 0 10
31492: PUSH
31493: LD_REAL  1.50000000000000E+0000
31496: MUL
31497: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_INT 66
31505: PPUSH
31506: CALL_OW 321
31510: PUSH
31511: LD_INT 2
31513: EQUAL
31514: IFFALSE 31531
// bpoints := bpoints * 1.1 ;
31516: LD_ADDR_VAR 0 10
31520: PUSH
31521: LD_VAR 0 10
31525: PUSH
31526: LD_REAL  1.10000000000000E+0000
31529: MUL
31530: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31531: LD_ADDR_VAR 0 10
31535: PUSH
31536: LD_VAR 0 10
31540: PUSH
31541: LD_VAR 0 6
31545: PPUSH
31546: LD_INT 1
31548: PPUSH
31549: CALL_OW 259
31553: PUSH
31554: LD_REAL  1.15000000000000E+0000
31557: MUL
31558: MUL
31559: ST_TO_ADDR
// end ; unit_vehicle :
31560: GO 32390
31562: LD_INT 2
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 32378
31570: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31571: LD_VAR 0 6
31575: PPUSH
31576: CALL_OW 264
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: LD_INT 42
31586: PUSH
31587: LD_INT 24
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: IN
31595: IFFALSE 31616
// points := [ 25 , 5 , 3 ] ;
31597: LD_ADDR_VAR 0 9
31601: PUSH
31602: LD_INT 25
31604: PUSH
31605: LD_INT 5
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31616: LD_VAR 0 6
31620: PPUSH
31621: CALL_OW 264
31625: PUSH
31626: LD_INT 4
31628: PUSH
31629: LD_INT 43
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: IN
31640: IFFALSE 31661
// points := [ 40 , 15 , 5 ] ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_INT 40
31649: PUSH
31650: LD_INT 15
31652: PUSH
31653: LD_INT 5
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31661: LD_VAR 0 6
31665: PPUSH
31666: CALL_OW 264
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: LD_INT 23
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: IN
31681: IFFALSE 31702
// points := [ 7 , 25 , 8 ] ;
31683: LD_ADDR_VAR 0 9
31687: PUSH
31688: LD_INT 7
31690: PUSH
31691: LD_INT 25
31693: PUSH
31694: LD_INT 8
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31702: LD_VAR 0 6
31706: PPUSH
31707: CALL_OW 264
31711: PUSH
31712: LD_INT 5
31714: PUSH
31715: LD_INT 27
31717: PUSH
31718: LD_INT 44
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: IN
31726: IFFALSE 31747
// points := [ 14 , 50 , 16 ] ;
31728: LD_ADDR_VAR 0 9
31732: PUSH
31733: LD_INT 14
31735: PUSH
31736: LD_INT 50
31738: PUSH
31739: LD_INT 16
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31747: LD_VAR 0 6
31751: PPUSH
31752: CALL_OW 264
31756: PUSH
31757: LD_INT 6
31759: PUSH
31760: LD_INT 46
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: IN
31767: IFFALSE 31788
// points := [ 32 , 120 , 70 ] ;
31769: LD_ADDR_VAR 0 9
31773: PUSH
31774: LD_INT 32
31776: PUSH
31777: LD_INT 120
31779: PUSH
31780: LD_INT 70
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31788: LD_VAR 0 6
31792: PPUSH
31793: CALL_OW 264
31797: PUSH
31798: LD_INT 7
31800: PUSH
31801: LD_INT 28
31803: PUSH
31804: LD_INT 45
31806: PUSH
31807: LD_INT 92
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: IN
31816: IFFALSE 31837
// points := [ 35 , 20 , 45 ] ;
31818: LD_ADDR_VAR 0 9
31822: PUSH
31823: LD_INT 35
31825: PUSH
31826: LD_INT 20
31828: PUSH
31829: LD_INT 45
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31837: LD_VAR 0 6
31841: PPUSH
31842: CALL_OW 264
31846: PUSH
31847: LD_INT 47
31849: PUSH
31850: EMPTY
31851: LIST
31852: IN
31853: IFFALSE 31874
// points := [ 67 , 45 , 75 ] ;
31855: LD_ADDR_VAR 0 9
31859: PUSH
31860: LD_INT 67
31862: PUSH
31863: LD_INT 45
31865: PUSH
31866: LD_INT 75
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: LIST
31873: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31874: LD_VAR 0 6
31878: PPUSH
31879: CALL_OW 264
31883: PUSH
31884: LD_INT 26
31886: PUSH
31887: EMPTY
31888: LIST
31889: IN
31890: IFFALSE 31911
// points := [ 120 , 30 , 80 ] ;
31892: LD_ADDR_VAR 0 9
31896: PUSH
31897: LD_INT 120
31899: PUSH
31900: LD_INT 30
31902: PUSH
31903: LD_INT 80
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31911: LD_VAR 0 6
31915: PPUSH
31916: CALL_OW 264
31920: PUSH
31921: LD_INT 22
31923: PUSH
31924: EMPTY
31925: LIST
31926: IN
31927: IFFALSE 31948
// points := [ 40 , 1 , 1 ] ;
31929: LD_ADDR_VAR 0 9
31933: PUSH
31934: LD_INT 40
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31948: LD_VAR 0 6
31952: PPUSH
31953: CALL_OW 264
31957: PUSH
31958: LD_INT 29
31960: PUSH
31961: EMPTY
31962: LIST
31963: IN
31964: IFFALSE 31985
// points := [ 70 , 200 , 400 ] ;
31966: LD_ADDR_VAR 0 9
31970: PUSH
31971: LD_INT 70
31973: PUSH
31974: LD_INT 200
31976: PUSH
31977: LD_INT 400
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31985: LD_VAR 0 6
31989: PPUSH
31990: CALL_OW 264
31994: PUSH
31995: LD_INT 14
31997: PUSH
31998: LD_INT 53
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: IN
32005: IFFALSE 32026
// points := [ 40 , 10 , 20 ] ;
32007: LD_ADDR_VAR 0 9
32011: PUSH
32012: LD_INT 40
32014: PUSH
32015: LD_INT 10
32017: PUSH
32018: LD_INT 20
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32026: LD_VAR 0 6
32030: PPUSH
32031: CALL_OW 264
32035: PUSH
32036: LD_INT 9
32038: PUSH
32039: EMPTY
32040: LIST
32041: IN
32042: IFFALSE 32063
// points := [ 5 , 70 , 20 ] ;
32044: LD_ADDR_VAR 0 9
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: LD_INT 70
32054: PUSH
32055: LD_INT 20
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32063: LD_VAR 0 6
32067: PPUSH
32068: CALL_OW 264
32072: PUSH
32073: LD_INT 10
32075: PUSH
32076: EMPTY
32077: LIST
32078: IN
32079: IFFALSE 32100
// points := [ 35 , 110 , 70 ] ;
32081: LD_ADDR_VAR 0 9
32085: PUSH
32086: LD_INT 35
32088: PUSH
32089: LD_INT 110
32091: PUSH
32092: LD_INT 70
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32100: LD_VAR 0 6
32104: PPUSH
32105: CALL_OW 265
32109: PUSH
32110: LD_INT 25
32112: EQUAL
32113: IFFALSE 32134
// points := [ 80 , 65 , 100 ] ;
32115: LD_ADDR_VAR 0 9
32119: PUSH
32120: LD_INT 80
32122: PUSH
32123: LD_INT 65
32125: PUSH
32126: LD_INT 100
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32134: LD_VAR 0 6
32138: PPUSH
32139: CALL_OW 263
32143: PUSH
32144: LD_INT 1
32146: EQUAL
32147: IFFALSE 32182
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32149: LD_ADDR_VAR 0 10
32153: PUSH
32154: LD_VAR 0 10
32158: PUSH
32159: LD_VAR 0 6
32163: PPUSH
32164: CALL_OW 311
32168: PPUSH
32169: LD_INT 3
32171: PPUSH
32172: CALL_OW 259
32176: PUSH
32177: LD_INT 4
32179: MUL
32180: MUL
32181: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32182: LD_VAR 0 6
32186: PPUSH
32187: CALL_OW 263
32191: PUSH
32192: LD_INT 2
32194: EQUAL
32195: IFFALSE 32246
// begin j := IsControledBy ( i ) ;
32197: LD_ADDR_VAR 0 7
32201: PUSH
32202: LD_VAR 0 6
32206: PPUSH
32207: CALL_OW 312
32211: ST_TO_ADDR
// if j then
32212: LD_VAR 0 7
32216: IFFALSE 32246
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32218: LD_ADDR_VAR 0 10
32222: PUSH
32223: LD_VAR 0 10
32227: PUSH
32228: LD_VAR 0 7
32232: PPUSH
32233: LD_INT 3
32235: PPUSH
32236: CALL_OW 259
32240: PUSH
32241: LD_INT 3
32243: MUL
32244: MUL
32245: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32246: LD_VAR 0 6
32250: PPUSH
32251: CALL_OW 264
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: LD_INT 6
32261: PUSH
32262: LD_INT 46
32264: PUSH
32265: LD_INT 44
32267: PUSH
32268: LD_INT 47
32270: PUSH
32271: LD_INT 45
32273: PUSH
32274: LD_INT 28
32276: PUSH
32277: LD_INT 7
32279: PUSH
32280: LD_INT 27
32282: PUSH
32283: LD_INT 29
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: IN
32298: IFFALSE 32318
32300: PUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: LD_INT 52
32308: PPUSH
32309: CALL_OW 321
32313: PUSH
32314: LD_INT 2
32316: EQUAL
32317: AND
32318: IFFALSE 32335
// bpoints := bpoints * 1.2 ;
32320: LD_ADDR_VAR 0 10
32324: PUSH
32325: LD_VAR 0 10
32329: PUSH
32330: LD_REAL  1.20000000000000E+0000
32333: MUL
32334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 264
32344: PUSH
32345: LD_INT 6
32347: PUSH
32348: LD_INT 46
32350: PUSH
32351: LD_INT 47
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: IN
32359: IFFALSE 32376
// bpoints := bpoints * 1.2 ;
32361: LD_ADDR_VAR 0 10
32365: PUSH
32366: LD_VAR 0 10
32370: PUSH
32371: LD_REAL  1.20000000000000E+0000
32374: MUL
32375: ST_TO_ADDR
// end ; unit_building :
32376: GO 32390
32378: LD_INT 3
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32389
32386: POP
// ; end ;
32387: GO 32390
32389: POP
// for j = 1 to 3 do
32390: LD_ADDR_VAR 0 7
32394: PUSH
32395: DOUBLE
32396: LD_INT 1
32398: DEC
32399: ST_TO_ADDR
32400: LD_INT 3
32402: PUSH
32403: FOR_TO
32404: IFFALSE 32457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32406: LD_ADDR_VAR 0 5
32410: PUSH
32411: LD_VAR 0 5
32415: PPUSH
32416: LD_VAR 0 7
32420: PPUSH
32421: LD_VAR 0 5
32425: PUSH
32426: LD_VAR 0 7
32430: ARRAY
32431: PUSH
32432: LD_VAR 0 9
32436: PUSH
32437: LD_VAR 0 7
32441: ARRAY
32442: PUSH
32443: LD_VAR 0 10
32447: MUL
32448: PLUS
32449: PPUSH
32450: CALL_OW 1
32454: ST_TO_ADDR
32455: GO 32403
32457: POP
32458: POP
// end ;
32459: GO 30932
32461: POP
32462: POP
// result := Replace ( result , 4 , tmp ) ;
32463: LD_ADDR_VAR 0 5
32467: PUSH
32468: LD_VAR 0 5
32472: PPUSH
32473: LD_INT 4
32475: PPUSH
32476: LD_VAR 0 8
32480: PPUSH
32481: CALL_OW 1
32485: ST_TO_ADDR
// end ;
32486: LD_VAR 0 5
32490: RET
// export function DangerAtRange ( unit , range ) ; begin
32491: LD_INT 0
32493: PPUSH
// if not unit then
32494: LD_VAR 0 1
32498: NOT
32499: IFFALSE 32503
// exit ;
32501: GO 32548
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32503: LD_ADDR_VAR 0 3
32507: PUSH
32508: LD_VAR 0 1
32512: PPUSH
32513: CALL_OW 255
32517: PPUSH
32518: LD_VAR 0 1
32522: PPUSH
32523: CALL_OW 250
32527: PPUSH
32528: LD_VAR 0 1
32532: PPUSH
32533: CALL_OW 251
32537: PPUSH
32538: LD_VAR 0 2
32542: PPUSH
32543: CALL 30782 0 4
32547: ST_TO_ADDR
// end ;
32548: LD_VAR 0 3
32552: RET
// export function DangerInArea ( side , area ) ; begin
32553: LD_INT 0
32555: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_VAR 0 2
32565: PPUSH
32566: LD_INT 81
32568: PUSH
32569: LD_VAR 0 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 70
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 3
32587: RET
// export function IsExtension ( b ) ; begin
32588: LD_INT 0
32590: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32591: LD_ADDR_VAR 0 2
32595: PUSH
32596: LD_VAR 0 1
32600: PUSH
32601: LD_INT 23
32603: PUSH
32604: LD_INT 20
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: LD_INT 17
32612: PUSH
32613: LD_INT 24
32615: PUSH
32616: LD_INT 21
32618: PUSH
32619: LD_INT 19
32621: PUSH
32622: LD_INT 16
32624: PUSH
32625: LD_INT 25
32627: PUSH
32628: LD_INT 18
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: IN
32643: ST_TO_ADDR
// end ;
32644: LD_VAR 0 2
32648: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32649: LD_INT 0
32651: PPUSH
32652: PPUSH
32653: PPUSH
// result := [ ] ;
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: EMPTY
32660: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32661: LD_ADDR_VAR 0 5
32665: PUSH
32666: LD_VAR 0 2
32670: PPUSH
32671: LD_INT 21
32673: PUSH
32674: LD_INT 3
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 70
32685: ST_TO_ADDR
// if not tmp then
32686: LD_VAR 0 5
32690: NOT
32691: IFFALSE 32695
// exit ;
32693: GO 32759
// if checkLink then
32695: LD_VAR 0 3
32699: IFFALSE 32749
// begin for i in tmp do
32701: LD_ADDR_VAR 0 6
32705: PUSH
32706: LD_VAR 0 5
32710: PUSH
32711: FOR_IN
32712: IFFALSE 32747
// if GetBase ( i ) <> base then
32714: LD_VAR 0 6
32718: PPUSH
32719: CALL_OW 274
32723: PUSH
32724: LD_VAR 0 1
32728: NONEQUAL
32729: IFFALSE 32745
// ComLinkToBase ( base , i ) ;
32731: LD_VAR 0 1
32735: PPUSH
32736: LD_VAR 0 6
32740: PPUSH
32741: CALL_OW 169
32745: GO 32711
32747: POP
32748: POP
// end ; result := tmp ;
32749: LD_ADDR_VAR 0 4
32753: PUSH
32754: LD_VAR 0 5
32758: ST_TO_ADDR
// end ;
32759: LD_VAR 0 4
32763: RET
// export function ComComplete ( units , b ) ; var i ; begin
32764: LD_INT 0
32766: PPUSH
32767: PPUSH
// if not units then
32768: LD_VAR 0 1
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 32867
// for i in units do
32777: LD_ADDR_VAR 0 4
32781: PUSH
32782: LD_VAR 0 1
32786: PUSH
32787: FOR_IN
32788: IFFALSE 32865
// if BuildingStatus ( b ) = bs_build then
32790: LD_VAR 0 2
32794: PPUSH
32795: CALL_OW 461
32799: PUSH
32800: LD_INT 1
32802: EQUAL
32803: IFFALSE 32863
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32805: LD_VAR 0 4
32809: PPUSH
32810: LD_STRING h
32812: PUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: CALL_OW 250
32822: PUSH
32823: LD_VAR 0 2
32827: PPUSH
32828: CALL_OW 251
32832: PUSH
32833: LD_VAR 0 2
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: PUSH
32856: EMPTY
32857: LIST
32858: PPUSH
32859: CALL_OW 446
32863: GO 32787
32865: POP
32866: POP
// end ;
32867: LD_VAR 0 3
32871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32872: LD_INT 0
32874: PPUSH
32875: PPUSH
32876: PPUSH
32877: PPUSH
32878: PPUSH
32879: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32880: LD_VAR 0 1
32884: NOT
32885: IFTRUE 32902
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 263
32897: PUSH
32898: LD_INT 2
32900: NONEQUAL
32901: OR
32902: IFFALSE 32906
// exit ;
32904: GO 33222
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32906: LD_ADDR_VAR 0 6
32910: PUSH
32911: LD_INT 22
32913: PUSH
32914: LD_VAR 0 1
32918: PPUSH
32919: CALL_OW 255
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 30
32933: PUSH
32934: LD_INT 36
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 34
32943: PUSH
32944: LD_INT 31
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PPUSH
32960: CALL_OW 69
32964: ST_TO_ADDR
// if not tmp then
32965: LD_VAR 0 6
32969: NOT
32970: IFFALSE 32974
// exit ;
32972: GO 33222
// result := [ ] ;
32974: LD_ADDR_VAR 0 2
32978: PUSH
32979: EMPTY
32980: ST_TO_ADDR
// for i in tmp do
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: LD_VAR 0 6
32990: PUSH
32991: FOR_IN
32992: IFFALSE 33063
// begin t := UnitsInside ( i ) ;
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_VAR 0 3
33003: PPUSH
33004: CALL_OW 313
33008: ST_TO_ADDR
// if t then
33009: LD_VAR 0 4
33013: IFFALSE 33061
// for j in t do
33015: LD_ADDR_VAR 0 7
33019: PUSH
33020: LD_VAR 0 4
33024: PUSH
33025: FOR_IN
33026: IFFALSE 33059
// result := Replace ( result , result + 1 , j ) ;
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_VAR 0 2
33037: PPUSH
33038: LD_VAR 0 2
33042: PUSH
33043: LD_INT 1
33045: PLUS
33046: PPUSH
33047: LD_VAR 0 7
33051: PPUSH
33052: CALL_OW 1
33056: ST_TO_ADDR
33057: GO 33025
33059: POP
33060: POP
// end ;
33061: GO 32991
33063: POP
33064: POP
// if not result then
33065: LD_VAR 0 2
33069: NOT
33070: IFFALSE 33074
// exit ;
33072: GO 33222
// mech := result [ 1 ] ;
33074: LD_ADDR_VAR 0 5
33078: PUSH
33079: LD_VAR 0 2
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: ST_TO_ADDR
// if result > 1 then
33088: LD_VAR 0 2
33092: PUSH
33093: LD_INT 1
33095: GREATER
33096: IFFALSE 33208
// begin for i = 2 to result do
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: DOUBLE
33104: LD_INT 2
33106: DEC
33107: ST_TO_ADDR
33108: LD_VAR 0 2
33112: PUSH
33113: FOR_TO
33114: IFFALSE 33206
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: LD_VAR 0 2
33125: PUSH
33126: LD_VAR 0 3
33130: ARRAY
33131: PPUSH
33132: LD_INT 3
33134: PPUSH
33135: CALL_OW 259
33139: PUSH
33140: LD_VAR 0 2
33144: PUSH
33145: LD_VAR 0 3
33149: ARRAY
33150: PPUSH
33151: CALL_OW 432
33155: MINUS
33156: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33157: LD_VAR 0 4
33161: PUSH
33162: LD_VAR 0 5
33166: PPUSH
33167: LD_INT 3
33169: PPUSH
33170: CALL_OW 259
33174: PUSH
33175: LD_VAR 0 5
33179: PPUSH
33180: CALL_OW 432
33184: MINUS
33185: GREATEREQUAL
33186: IFFALSE 33204
// mech := result [ i ] ;
33188: LD_ADDR_VAR 0 5
33192: PUSH
33193: LD_VAR 0 2
33197: PUSH
33198: LD_VAR 0 3
33202: ARRAY
33203: ST_TO_ADDR
// end ;
33204: GO 33113
33206: POP
33207: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33208: LD_VAR 0 1
33212: PPUSH
33213: LD_VAR 0 5
33217: PPUSH
33218: CALL_OW 135
// end ;
33222: LD_VAR 0 2
33226: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33227: LD_INT 0
33229: PPUSH
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
// result := [ ] ;
33242: LD_ADDR_VAR 0 7
33246: PUSH
33247: EMPTY
33248: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 266
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: IN
33269: NOT
33270: IFFALSE 33274
// exit ;
33272: GO 34914
// if name then
33274: LD_VAR 0 3
33278: IFFALSE 33294
// SetBName ( base_dep , name ) ;
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_VAR 0 3
33289: PPUSH
33290: CALL_OW 500
// base := GetBase ( base_dep ) ;
33294: LD_ADDR_VAR 0 15
33298: PUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 274
33308: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33309: LD_ADDR_VAR 0 16
33313: PUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 255
33323: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33324: LD_ADDR_VAR 0 17
33328: PUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 248
33338: ST_TO_ADDR
// if sources then
33339: LD_VAR 0 5
33343: IFFALSE 33390
// for i = 1 to 3 do
33345: LD_ADDR_VAR 0 8
33349: PUSH
33350: DOUBLE
33351: LD_INT 1
33353: DEC
33354: ST_TO_ADDR
33355: LD_INT 3
33357: PUSH
33358: FOR_TO
33359: IFFALSE 33388
// AddResourceType ( base , i , sources [ i ] ) ;
33361: LD_VAR 0 15
33365: PPUSH
33366: LD_VAR 0 8
33370: PPUSH
33371: LD_VAR 0 5
33375: PUSH
33376: LD_VAR 0 8
33380: ARRAY
33381: PPUSH
33382: CALL_OW 276
33386: GO 33358
33388: POP
33389: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33390: LD_ADDR_VAR 0 18
33394: PUSH
33395: LD_VAR 0 15
33399: PPUSH
33400: LD_VAR 0 2
33404: PPUSH
33405: LD_INT 1
33407: PPUSH
33408: CALL 32649 0 3
33412: ST_TO_ADDR
// InitHc ;
33413: CALL_OW 19
// InitUc ;
33417: CALL_OW 18
// uc_side := side ;
33421: LD_ADDR_OWVAR 20
33425: PUSH
33426: LD_VAR 0 16
33430: ST_TO_ADDR
// uc_nation := nation ;
33431: LD_ADDR_OWVAR 21
33435: PUSH
33436: LD_VAR 0 17
33440: ST_TO_ADDR
// if buildings then
33441: LD_VAR 0 18
33445: IFFALSE 34773
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33447: LD_ADDR_VAR 0 19
33451: PUSH
33452: LD_VAR 0 18
33456: PPUSH
33457: LD_INT 2
33459: PUSH
33460: LD_INT 30
33462: PUSH
33463: LD_INT 29
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 30
33472: PUSH
33473: LD_INT 30
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: PPUSH
33485: CALL_OW 72
33489: ST_TO_ADDR
// if tmp then
33490: LD_VAR 0 19
33494: IFFALSE 33542
// for i in tmp do
33496: LD_ADDR_VAR 0 8
33500: PUSH
33501: LD_VAR 0 19
33505: PUSH
33506: FOR_IN
33507: IFFALSE 33540
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33509: LD_VAR 0 8
33513: PPUSH
33514: CALL_OW 250
33518: PPUSH
33519: LD_VAR 0 8
33523: PPUSH
33524: CALL_OW 251
33528: PPUSH
33529: LD_VAR 0 16
33533: PPUSH
33534: CALL_OW 441
33538: GO 33506
33540: POP
33541: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33542: LD_VAR 0 18
33546: PPUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 30
33552: PUSH
33553: LD_INT 32
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 30
33562: PUSH
33563: LD_INT 33
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: LIST
33574: PPUSH
33575: CALL_OW 72
33579: IFFALSE 33667
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33581: LD_ADDR_VAR 0 8
33585: PUSH
33586: LD_VAR 0 18
33590: PPUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 30
33596: PUSH
33597: LD_INT 32
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 30
33606: PUSH
33607: LD_INT 33
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: PPUSH
33619: CALL_OW 72
33623: PUSH
33624: FOR_IN
33625: IFFALSE 33665
// begin if not GetBWeapon ( i ) then
33627: LD_VAR 0 8
33631: PPUSH
33632: CALL_OW 269
33636: NOT
33637: IFFALSE 33663
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33639: LD_VAR 0 8
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_VAR 0 2
33653: PPUSH
33654: CALL 34919 0 2
33658: PPUSH
33659: CALL_OW 431
// end ;
33663: GO 33624
33665: POP
33666: POP
// end ; for i = 1 to personel do
33667: LD_ADDR_VAR 0 8
33671: PUSH
33672: DOUBLE
33673: LD_INT 1
33675: DEC
33676: ST_TO_ADDR
33677: LD_VAR 0 6
33681: PUSH
33682: FOR_TO
33683: IFFALSE 34753
// begin if i > 4 then
33685: LD_VAR 0 8
33689: PUSH
33690: LD_INT 4
33692: GREATER
33693: IFFALSE 33697
// break ;
33695: GO 34753
// case i of 1 :
33697: LD_VAR 0 8
33701: PUSH
33702: LD_INT 1
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33710
33708: GO 33790
33710: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33711: LD_ADDR_VAR 0 12
33715: PUSH
33716: LD_VAR 0 18
33720: PPUSH
33721: LD_INT 22
33723: PUSH
33724: LD_VAR 0 16
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 58
33735: PUSH
33736: EMPTY
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: LD_INT 30
33744: PUSH
33745: LD_INT 32
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 30
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 30
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: PPUSH
33783: CALL_OW 72
33787: ST_TO_ADDR
33788: GO 34012
33790: LD_INT 2
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33798
33796: GO 33860
33798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33799: LD_ADDR_VAR 0 12
33803: PUSH
33804: LD_VAR 0 18
33808: PPUSH
33809: LD_INT 22
33811: PUSH
33812: LD_VAR 0 16
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 30
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 30
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PPUSH
33853: CALL_OW 72
33857: ST_TO_ADDR
33858: GO 34012
33860: LD_INT 3
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33868
33866: GO 33930
33868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33869: LD_ADDR_VAR 0 12
33873: PUSH
33874: LD_VAR 0 18
33878: PPUSH
33879: LD_INT 22
33881: PUSH
33882: LD_VAR 0 16
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 30
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 30
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PPUSH
33923: CALL_OW 72
33927: ST_TO_ADDR
33928: GO 34012
33930: LD_INT 4
33932: DOUBLE
33933: EQUAL
33934: IFTRUE 33938
33936: GO 34011
33938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33939: LD_ADDR_VAR 0 12
33943: PUSH
33944: LD_VAR 0 18
33948: PPUSH
33949: LD_INT 22
33951: PUSH
33952: LD_VAR 0 16
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: LD_INT 30
33966: PUSH
33967: LD_INT 6
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 7
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 8
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PPUSH
34004: CALL_OW 72
34008: ST_TO_ADDR
34009: GO 34012
34011: POP
// if i = 1 then
34012: LD_VAR 0 8
34016: PUSH
34017: LD_INT 1
34019: EQUAL
34020: IFFALSE 34131
// begin tmp := [ ] ;
34022: LD_ADDR_VAR 0 19
34026: PUSH
34027: EMPTY
34028: ST_TO_ADDR
// for j in f do
34029: LD_ADDR_VAR 0 9
34033: PUSH
34034: LD_VAR 0 12
34038: PUSH
34039: FOR_IN
34040: IFFALSE 34113
// if GetBType ( j ) = b_bunker then
34042: LD_VAR 0 9
34046: PPUSH
34047: CALL_OW 266
34051: PUSH
34052: LD_INT 32
34054: EQUAL
34055: IFFALSE 34082
// tmp := Insert ( tmp , 1 , j ) else
34057: LD_ADDR_VAR 0 19
34061: PUSH
34062: LD_VAR 0 19
34066: PPUSH
34067: LD_INT 1
34069: PPUSH
34070: LD_VAR 0 9
34074: PPUSH
34075: CALL_OW 2
34079: ST_TO_ADDR
34080: GO 34111
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34082: LD_ADDR_VAR 0 19
34086: PUSH
34087: LD_VAR 0 19
34091: PPUSH
34092: LD_VAR 0 19
34096: PUSH
34097: LD_INT 1
34099: PLUS
34100: PPUSH
34101: LD_VAR 0 9
34105: PPUSH
34106: CALL_OW 2
34110: ST_TO_ADDR
34111: GO 34039
34113: POP
34114: POP
// if tmp then
34115: LD_VAR 0 19
34119: IFFALSE 34131
// f := tmp ;
34121: LD_ADDR_VAR 0 12
34125: PUSH
34126: LD_VAR 0 19
34130: ST_TO_ADDR
// end ; x := personel [ i ] ;
34131: LD_ADDR_VAR 0 13
34135: PUSH
34136: LD_VAR 0 6
34140: PUSH
34141: LD_VAR 0 8
34145: ARRAY
34146: ST_TO_ADDR
// if x = - 1 then
34147: LD_VAR 0 13
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: EQUAL
34156: IFFALSE 34367
// begin for j in f do
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_VAR 0 12
34167: PUSH
34168: FOR_IN
34169: IFFALSE 34363
// repeat InitHc ;
34171: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34175: LD_VAR 0 9
34179: PPUSH
34180: CALL_OW 266
34184: PUSH
34185: LD_INT 5
34187: EQUAL
34188: IFFALSE 34258
// begin if UnitsInside ( j ) < 3 then
34190: LD_VAR 0 9
34194: PPUSH
34195: CALL_OW 313
34199: PUSH
34200: LD_INT 3
34202: LESS
34203: IFFALSE 34239
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34205: LD_INT 0
34207: PPUSH
34208: LD_INT 5
34210: PUSH
34211: LD_INT 8
34213: PUSH
34214: LD_INT 9
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: PUSH
34222: LD_VAR 0 17
34226: ARRAY
34227: PPUSH
34228: LD_VAR 0 4
34232: PPUSH
34233: CALL_OW 380
34237: GO 34256
// PrepareHuman ( false , i , skill ) ;
34239: LD_INT 0
34241: PPUSH
34242: LD_VAR 0 8
34246: PPUSH
34247: LD_VAR 0 4
34251: PPUSH
34252: CALL_OW 380
// end else
34256: GO 34275
// PrepareHuman ( false , i , skill ) ;
34258: LD_INT 0
34260: PPUSH
34261: LD_VAR 0 8
34265: PPUSH
34266: LD_VAR 0 4
34270: PPUSH
34271: CALL_OW 380
// un := CreateHuman ;
34275: LD_ADDR_VAR 0 14
34279: PUSH
34280: CALL_OW 44
34284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34285: LD_ADDR_VAR 0 7
34289: PUSH
34290: LD_VAR 0 7
34294: PPUSH
34295: LD_INT 1
34297: PPUSH
34298: LD_VAR 0 14
34302: PPUSH
34303: CALL_OW 2
34307: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34308: LD_VAR 0 14
34312: PPUSH
34313: LD_VAR 0 9
34317: PPUSH
34318: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34322: LD_VAR 0 9
34326: PPUSH
34327: CALL_OW 313
34331: PUSH
34332: LD_INT 6
34334: EQUAL
34335: IFTRUE 34359
34337: PUSH
34338: LD_VAR 0 9
34342: PPUSH
34343: CALL_OW 266
34347: PUSH
34348: LD_INT 32
34350: PUSH
34351: LD_INT 31
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: IN
34358: OR
34359: IFFALSE 34171
34361: GO 34168
34363: POP
34364: POP
// end else
34365: GO 34751
// for j = 1 to x do
34367: LD_ADDR_VAR 0 9
34371: PUSH
34372: DOUBLE
34373: LD_INT 1
34375: DEC
34376: ST_TO_ADDR
34377: LD_VAR 0 13
34381: PUSH
34382: FOR_TO
34383: IFFALSE 34749
// begin InitHc ;
34385: CALL_OW 19
// if not f then
34389: LD_VAR 0 12
34393: NOT
34394: IFFALSE 34483
// begin PrepareHuman ( false , i , skill ) ;
34396: LD_INT 0
34398: PPUSH
34399: LD_VAR 0 8
34403: PPUSH
34404: LD_VAR 0 4
34408: PPUSH
34409: CALL_OW 380
// un := CreateHuman ;
34413: LD_ADDR_VAR 0 14
34417: PUSH
34418: CALL_OW 44
34422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34423: LD_ADDR_VAR 0 7
34427: PUSH
34428: LD_VAR 0 7
34432: PPUSH
34433: LD_INT 1
34435: PPUSH
34436: LD_VAR 0 14
34440: PPUSH
34441: CALL_OW 2
34445: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34446: LD_VAR 0 14
34450: PPUSH
34451: LD_VAR 0 1
34455: PPUSH
34456: CALL_OW 250
34460: PPUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 251
34470: PPUSH
34471: LD_INT 10
34473: PPUSH
34474: LD_INT 0
34476: PPUSH
34477: CALL_OW 50
// continue ;
34481: GO 34382
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34483: LD_VAR 0 12
34487: PUSH
34488: LD_INT 1
34490: ARRAY
34491: PPUSH
34492: CALL_OW 313
34496: IFFALSE 34524
34498: PUSH
34499: LD_VAR 0 12
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: PPUSH
34508: CALL_OW 266
34512: PUSH
34513: LD_INT 32
34515: PUSH
34516: LD_INT 31
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: IN
34523: AND
34524: IFTRUE 34545
34526: PUSH
34527: LD_VAR 0 12
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: CALL_OW 313
34540: PUSH
34541: LD_INT 6
34543: EQUAL
34544: OR
34545: IFFALSE 34565
// f := Delete ( f , 1 ) ;
34547: LD_ADDR_VAR 0 12
34551: PUSH
34552: LD_VAR 0 12
34556: PPUSH
34557: LD_INT 1
34559: PPUSH
34560: CALL_OW 3
34564: ST_TO_ADDR
// if not f then
34565: LD_VAR 0 12
34569: NOT
34570: IFFALSE 34588
// begin x := x + 2 ;
34572: LD_ADDR_VAR 0 13
34576: PUSH
34577: LD_VAR 0 13
34581: PUSH
34582: LD_INT 2
34584: PLUS
34585: ST_TO_ADDR
// continue ;
34586: GO 34382
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34588: LD_VAR 0 12
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: CALL_OW 266
34601: PUSH
34602: LD_INT 5
34604: EQUAL
34605: IFFALSE 34679
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34607: LD_VAR 0 12
34611: PUSH
34612: LD_INT 1
34614: ARRAY
34615: PPUSH
34616: CALL_OW 313
34620: PUSH
34621: LD_INT 3
34623: LESS
34624: IFFALSE 34660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34626: LD_INT 0
34628: PPUSH
34629: LD_INT 5
34631: PUSH
34632: LD_INT 8
34634: PUSH
34635: LD_INT 9
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_VAR 0 17
34647: ARRAY
34648: PPUSH
34649: LD_VAR 0 4
34653: PPUSH
34654: CALL_OW 380
34658: GO 34677
// PrepareHuman ( false , i , skill ) ;
34660: LD_INT 0
34662: PPUSH
34663: LD_VAR 0 8
34667: PPUSH
34668: LD_VAR 0 4
34672: PPUSH
34673: CALL_OW 380
// end else
34677: GO 34696
// PrepareHuman ( false , i , skill ) ;
34679: LD_INT 0
34681: PPUSH
34682: LD_VAR 0 8
34686: PPUSH
34687: LD_VAR 0 4
34691: PPUSH
34692: CALL_OW 380
// un := CreateHuman ;
34696: LD_ADDR_VAR 0 14
34700: PUSH
34701: CALL_OW 44
34705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34706: LD_ADDR_VAR 0 7
34710: PUSH
34711: LD_VAR 0 7
34715: PPUSH
34716: LD_INT 1
34718: PPUSH
34719: LD_VAR 0 14
34723: PPUSH
34724: CALL_OW 2
34728: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34729: LD_VAR 0 14
34733: PPUSH
34734: LD_VAR 0 12
34738: PUSH
34739: LD_INT 1
34741: ARRAY
34742: PPUSH
34743: CALL_OW 52
// end ;
34747: GO 34382
34749: POP
34750: POP
// end ;
34751: GO 33682
34753: POP
34754: POP
// result := result ^ buildings ;
34755: LD_ADDR_VAR 0 7
34759: PUSH
34760: LD_VAR 0 7
34764: PUSH
34765: LD_VAR 0 18
34769: ADD
34770: ST_TO_ADDR
// end else
34771: GO 34914
// begin for i = 1 to personel do
34773: LD_ADDR_VAR 0 8
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_VAR 0 6
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34912
// begin if i > 4 then
34791: LD_VAR 0 8
34795: PUSH
34796: LD_INT 4
34798: GREATER
34799: IFFALSE 34803
// break ;
34801: GO 34912
// x := personel [ i ] ;
34803: LD_ADDR_VAR 0 13
34807: PUSH
34808: LD_VAR 0 6
34812: PUSH
34813: LD_VAR 0 8
34817: ARRAY
34818: ST_TO_ADDR
// if x = - 1 then
34819: LD_VAR 0 13
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: EQUAL
34828: IFFALSE 34832
// continue ;
34830: GO 34788
// PrepareHuman ( false , i , skill ) ;
34832: LD_INT 0
34834: PPUSH
34835: LD_VAR 0 8
34839: PPUSH
34840: LD_VAR 0 4
34844: PPUSH
34845: CALL_OW 380
// un := CreateHuman ;
34849: LD_ADDR_VAR 0 14
34853: PUSH
34854: CALL_OW 44
34858: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34859: LD_VAR 0 14
34863: PPUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 250
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 251
34883: PPUSH
34884: LD_INT 10
34886: PPUSH
34887: LD_INT 0
34889: PPUSH
34890: CALL_OW 50
// result := result ^ un ;
34894: LD_ADDR_VAR 0 7
34898: PUSH
34899: LD_VAR 0 7
34903: PUSH
34904: LD_VAR 0 14
34908: ADD
34909: ST_TO_ADDR
// end ;
34910: GO 34788
34912: POP
34913: POP
// end ; end ;
34914: LD_VAR 0 7
34918: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
// result := false ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 0
34944: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34945: LD_VAR 0 1
34949: NOT
34950: IFTRUE 34975
34952: PUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 266
34962: PUSH
34963: LD_INT 32
34965: PUSH
34966: LD_INT 33
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: IN
34973: NOT
34974: OR
34975: IFFALSE 34979
// exit ;
34977: GO 36114
// nat := GetNation ( tower ) ;
34979: LD_ADDR_VAR 0 12
34983: PUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 248
34993: ST_TO_ADDR
// side := GetSide ( tower ) ;
34994: LD_ADDR_VAR 0 16
34998: PUSH
34999: LD_VAR 0 1
35003: PPUSH
35004: CALL_OW 255
35008: ST_TO_ADDR
// x := GetX ( tower ) ;
35009: LD_ADDR_VAR 0 10
35013: PUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 250
35023: ST_TO_ADDR
// y := GetY ( tower ) ;
35024: LD_ADDR_VAR 0 11
35028: PUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 251
35038: ST_TO_ADDR
// if not x or not y then
35039: LD_VAR 0 10
35043: NOT
35044: IFTRUE 35053
35046: PUSH
35047: LD_VAR 0 11
35051: NOT
35052: OR
35053: IFFALSE 35057
// exit ;
35055: GO 36114
// weapon := 0 ;
35057: LD_ADDR_VAR 0 18
35061: PUSH
35062: LD_INT 0
35064: ST_TO_ADDR
// fac_list := [ ] ;
35065: LD_ADDR_VAR 0 17
35069: PUSH
35070: EMPTY
35071: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35072: LD_ADDR_VAR 0 6
35076: PUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 274
35086: PPUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: LD_INT 0
35094: PPUSH
35095: CALL 32649 0 3
35099: PPUSH
35100: LD_INT 30
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PPUSH
35110: CALL_OW 72
35114: ST_TO_ADDR
// if not factories then
35115: LD_VAR 0 6
35119: NOT
35120: IFFALSE 35124
// exit ;
35122: GO 36114
// for i in factories do
35124: LD_ADDR_VAR 0 8
35128: PUSH
35129: LD_VAR 0 6
35133: PUSH
35134: FOR_IN
35135: IFFALSE 35160
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35137: LD_ADDR_VAR 0 17
35141: PUSH
35142: LD_VAR 0 17
35146: PUSH
35147: LD_VAR 0 8
35151: PPUSH
35152: CALL_OW 478
35156: UNION
35157: ST_TO_ADDR
35158: GO 35134
35160: POP
35161: POP
// if not fac_list then
35162: LD_VAR 0 17
35166: NOT
35167: IFFALSE 35171
// exit ;
35169: GO 36114
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35171: LD_ADDR_VAR 0 5
35175: PUSH
35176: LD_INT 4
35178: PUSH
35179: LD_INT 5
35181: PUSH
35182: LD_INT 9
35184: PUSH
35185: LD_INT 10
35187: PUSH
35188: LD_INT 6
35190: PUSH
35191: LD_INT 7
35193: PUSH
35194: LD_INT 11
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 27
35208: PUSH
35209: LD_INT 28
35211: PUSH
35212: LD_INT 26
35214: PUSH
35215: LD_INT 30
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 43
35226: PUSH
35227: LD_INT 44
35229: PUSH
35230: LD_INT 46
35232: PUSH
35233: LD_INT 45
35235: PUSH
35236: LD_INT 47
35238: PUSH
35239: LD_INT 49
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: PUSH
35255: LD_VAR 0 12
35259: ARRAY
35260: ST_TO_ADDR
// list := list isect fac_list ;
35261: LD_ADDR_VAR 0 5
35265: PUSH
35266: LD_VAR 0 5
35270: PUSH
35271: LD_VAR 0 17
35275: ISECT
35276: ST_TO_ADDR
// if not list then
35277: LD_VAR 0 5
35281: NOT
35282: IFFALSE 35286
// exit ;
35284: GO 36114
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35286: LD_VAR 0 12
35290: PUSH
35291: LD_INT 3
35293: EQUAL
35294: IFFALSE 35306
35296: PUSH
35297: LD_INT 49
35299: PUSH
35300: LD_VAR 0 5
35304: IN
35305: AND
35306: IFFALSE 35326
35308: PUSH
35309: LD_INT 31
35311: PPUSH
35312: LD_VAR 0 16
35316: PPUSH
35317: CALL_OW 321
35321: PUSH
35322: LD_INT 2
35324: EQUAL
35325: AND
35326: IFFALSE 35386
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35328: LD_INT 22
35330: PUSH
35331: LD_VAR 0 16
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 35
35342: PUSH
35343: LD_INT 49
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 91
35352: PUSH
35353: LD_VAR 0 1
35357: PUSH
35358: LD_INT 10
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: PPUSH
35371: CALL_OW 69
35375: NOT
35376: IFFALSE 35386
// weapon := ru_time_lapser ;
35378: LD_ADDR_VAR 0 18
35382: PUSH
35383: LD_INT 49
35385: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35386: LD_VAR 0 12
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: IN
35401: IFFALSE 35425
35403: PUSH
35404: LD_INT 11
35406: PUSH
35407: LD_VAR 0 5
35411: IN
35412: IFTRUE 35424
35414: PUSH
35415: LD_INT 30
35417: PUSH
35418: LD_VAR 0 5
35422: IN
35423: OR
35424: AND
35425: IFFALSE 35445
35427: PUSH
35428: LD_INT 6
35430: PPUSH
35431: LD_VAR 0 16
35435: PPUSH
35436: CALL_OW 321
35440: PUSH
35441: LD_INT 2
35443: EQUAL
35444: AND
35445: IFFALSE 35612
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35447: LD_INT 22
35449: PUSH
35450: LD_VAR 0 16
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 35
35464: PUSH
35465: LD_INT 11
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 35
35474: PUSH
35475: LD_INT 30
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 91
35489: PUSH
35490: LD_VAR 0 1
35494: PUSH
35495: LD_INT 18
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PPUSH
35508: CALL_OW 69
35512: NOT
35513: IFFALSE 35589
35515: PUSH
35516: LD_INT 22
35518: PUSH
35519: LD_VAR 0 16
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 30
35533: PUSH
35534: LD_INT 32
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 30
35543: PUSH
35544: LD_INT 33
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 91
35558: PUSH
35559: LD_VAR 0 1
35563: PUSH
35564: LD_INT 12
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: PPUSH
35580: CALL_OW 69
35584: PUSH
35585: LD_INT 2
35587: GREATER
35588: AND
35589: IFFALSE 35612
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35591: LD_ADDR_VAR 0 18
35595: PUSH
35596: LD_INT 11
35598: PUSH
35599: LD_INT 30
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_VAR 0 12
35610: ARRAY
35611: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35612: LD_VAR 0 18
35616: NOT
35617: IFFALSE 35637
35619: PUSH
35620: LD_INT 40
35622: PPUSH
35623: LD_VAR 0 16
35627: PPUSH
35628: CALL_OW 321
35632: PUSH
35633: LD_INT 2
35635: EQUAL
35636: AND
35637: IFFALSE 35673
35639: PUSH
35640: LD_INT 7
35642: PUSH
35643: LD_VAR 0 5
35647: IN
35648: IFTRUE 35660
35650: PUSH
35651: LD_INT 28
35653: PUSH
35654: LD_VAR 0 5
35658: IN
35659: OR
35660: IFTRUE 35672
35662: PUSH
35663: LD_INT 45
35665: PUSH
35666: LD_VAR 0 5
35670: IN
35671: OR
35672: AND
35673: IFFALSE 35927
// begin hex := GetHexInfo ( x , y ) ;
35675: LD_ADDR_VAR 0 4
35679: PUSH
35680: LD_VAR 0 10
35684: PPUSH
35685: LD_VAR 0 11
35689: PPUSH
35690: CALL_OW 546
35694: ST_TO_ADDR
// if hex [ 1 ] then
35695: LD_VAR 0 4
35699: PUSH
35700: LD_INT 1
35702: ARRAY
35703: IFFALSE 35707
// exit ;
35705: GO 36114
// height := hex [ 2 ] ;
35707: LD_ADDR_VAR 0 15
35711: PUSH
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 2
35719: ARRAY
35720: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35721: LD_ADDR_VAR 0 14
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: LD_INT 5
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// for i in tmp do
35744: LD_ADDR_VAR 0 8
35748: PUSH
35749: LD_VAR 0 14
35753: PUSH
35754: FOR_IN
35755: IFFALSE 35925
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35757: LD_ADDR_VAR 0 9
35761: PUSH
35762: LD_VAR 0 10
35766: PPUSH
35767: LD_VAR 0 8
35771: PPUSH
35772: LD_INT 5
35774: PPUSH
35775: CALL_OW 272
35779: PUSH
35780: LD_VAR 0 11
35784: PPUSH
35785: LD_VAR 0 8
35789: PPUSH
35790: LD_INT 5
35792: PPUSH
35793: CALL_OW 273
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35802: LD_VAR 0 9
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: PPUSH
35811: LD_VAR 0 9
35815: PUSH
35816: LD_INT 2
35818: ARRAY
35819: PPUSH
35820: CALL_OW 488
35824: IFFALSE 35923
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35826: LD_ADDR_VAR 0 4
35830: PUSH
35831: LD_VAR 0 9
35835: PUSH
35836: LD_INT 1
35838: ARRAY
35839: PPUSH
35840: LD_VAR 0 9
35844: PUSH
35845: LD_INT 2
35847: ARRAY
35848: PPUSH
35849: CALL_OW 546
35853: ST_TO_ADDR
// if hex [ 1 ] then
35854: LD_VAR 0 4
35858: PUSH
35859: LD_INT 1
35861: ARRAY
35862: IFFALSE 35866
// continue ;
35864: GO 35754
// h := hex [ 2 ] ;
35866: LD_ADDR_VAR 0 13
35870: PUSH
35871: LD_VAR 0 4
35875: PUSH
35876: LD_INT 2
35878: ARRAY
35879: ST_TO_ADDR
// if h + 7 < height then
35880: LD_VAR 0 13
35884: PUSH
35885: LD_INT 7
35887: PLUS
35888: PUSH
35889: LD_VAR 0 15
35893: LESS
35894: IFFALSE 35923
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35896: LD_ADDR_VAR 0 18
35900: PUSH
35901: LD_INT 7
35903: PUSH
35904: LD_INT 28
35906: PUSH
35907: LD_INT 45
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: PUSH
35915: LD_VAR 0 12
35919: ARRAY
35920: ST_TO_ADDR
// break ;
35921: GO 35925
// end ; end ; end ;
35923: GO 35754
35925: POP
35926: POP
// end ; if not weapon then
35927: LD_VAR 0 18
35931: NOT
35932: IFFALSE 35992
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35934: LD_ADDR_VAR 0 5
35938: PUSH
35939: LD_VAR 0 5
35943: PUSH
35944: LD_INT 11
35946: PUSH
35947: LD_INT 30
35949: PUSH
35950: LD_INT 49
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: DIFF
35958: ST_TO_ADDR
// if not list then
35959: LD_VAR 0 5
35963: NOT
35964: IFFALSE 35968
// exit ;
35966: GO 36114
// weapon := list [ rand ( 1 , list ) ] ;
35968: LD_ADDR_VAR 0 18
35972: PUSH
35973: LD_VAR 0 5
35977: PUSH
35978: LD_INT 1
35980: PPUSH
35981: LD_VAR 0 5
35985: PPUSH
35986: CALL_OW 12
35990: ARRAY
35991: ST_TO_ADDR
// end ; if weapon then
35992: LD_VAR 0 18
35996: IFFALSE 36114
// begin tmp := CostOfWeapon ( weapon ) ;
35998: LD_ADDR_VAR 0 14
36002: PUSH
36003: LD_VAR 0 18
36007: PPUSH
36008: CALL_OW 451
36012: ST_TO_ADDR
// j := GetBase ( tower ) ;
36013: LD_ADDR_VAR 0 9
36017: PUSH
36018: LD_VAR 0 1
36022: PPUSH
36023: CALL_OW 274
36027: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36028: LD_VAR 0 9
36032: PPUSH
36033: LD_INT 1
36035: PPUSH
36036: CALL_OW 275
36040: PUSH
36041: LD_VAR 0 14
36045: PUSH
36046: LD_INT 1
36048: ARRAY
36049: GREATEREQUAL
36050: IFFALSE 36076
36052: PUSH
36053: LD_VAR 0 9
36057: PPUSH
36058: LD_INT 2
36060: PPUSH
36061: CALL_OW 275
36065: PUSH
36066: LD_VAR 0 14
36070: PUSH
36071: LD_INT 2
36073: ARRAY
36074: GREATEREQUAL
36075: AND
36076: IFFALSE 36102
36078: PUSH
36079: LD_VAR 0 9
36083: PPUSH
36084: LD_INT 3
36086: PPUSH
36087: CALL_OW 275
36091: PUSH
36092: LD_VAR 0 14
36096: PUSH
36097: LD_INT 3
36099: ARRAY
36100: GREATEREQUAL
36101: AND
36102: IFFALSE 36114
// result := weapon ;
36104: LD_ADDR_VAR 0 3
36108: PUSH
36109: LD_VAR 0 18
36113: ST_TO_ADDR
// end ; end ;
36114: LD_VAR 0 3
36118: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36119: LD_INT 0
36121: PPUSH
36122: PPUSH
// result := true ;
36123: LD_ADDR_VAR 0 3
36127: PUSH
36128: LD_INT 1
36130: ST_TO_ADDR
// if array1 = array2 then
36131: LD_VAR 0 1
36135: PUSH
36136: LD_VAR 0 2
36140: EQUAL
36141: IFFALSE 36201
// begin for i = 1 to array1 do
36143: LD_ADDR_VAR 0 4
36147: PUSH
36148: DOUBLE
36149: LD_INT 1
36151: DEC
36152: ST_TO_ADDR
36153: LD_VAR 0 1
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36197
// if array1 [ i ] <> array2 [ i ] then
36161: LD_VAR 0 1
36165: PUSH
36166: LD_VAR 0 4
36170: ARRAY
36171: PUSH
36172: LD_VAR 0 2
36176: PUSH
36177: LD_VAR 0 4
36181: ARRAY
36182: NONEQUAL
36183: IFFALSE 36195
// begin result := false ;
36185: LD_ADDR_VAR 0 3
36189: PUSH
36190: LD_INT 0
36192: ST_TO_ADDR
// break ;
36193: GO 36197
// end ;
36195: GO 36158
36197: POP
36198: POP
// end else
36199: GO 36209
// result := false ;
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_INT 0
36208: ST_TO_ADDR
// end ;
36209: LD_VAR 0 3
36213: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
// if not array1 or not array2 then
36218: LD_VAR 0 1
36222: NOT
36223: IFTRUE 36232
36225: PUSH
36226: LD_VAR 0 2
36230: NOT
36231: OR
36232: IFFALSE 36236
// exit ;
36234: GO 36300
// result := true ;
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 1
36243: ST_TO_ADDR
// for i = 1 to array1 do
36244: LD_ADDR_VAR 0 4
36248: PUSH
36249: DOUBLE
36250: LD_INT 1
36252: DEC
36253: ST_TO_ADDR
36254: LD_VAR 0 1
36258: PUSH
36259: FOR_TO
36260: IFFALSE 36298
// if array1 [ i ] <> array2 [ i ] then
36262: LD_VAR 0 1
36266: PUSH
36267: LD_VAR 0 4
36271: ARRAY
36272: PUSH
36273: LD_VAR 0 2
36277: PUSH
36278: LD_VAR 0 4
36282: ARRAY
36283: NONEQUAL
36284: IFFALSE 36296
// begin result := false ;
36286: LD_ADDR_VAR 0 3
36290: PUSH
36291: LD_INT 0
36293: ST_TO_ADDR
// break ;
36294: GO 36298
// end ;
36296: GO 36259
36298: POP
36299: POP
// end ;
36300: LD_VAR 0 3
36304: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36305: LD_INT 0
36307: PPUSH
36308: PPUSH
36309: PPUSH
// pom := GetBase ( fac ) ;
36310: LD_ADDR_VAR 0 5
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 274
36324: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36325: LD_ADDR_VAR 0 4
36329: PUSH
36330: LD_VAR 0 2
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PPUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PPUSH
36348: LD_VAR 0 2
36352: PUSH
36353: LD_INT 3
36355: ARRAY
36356: PPUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_INT 4
36364: ARRAY
36365: PPUSH
36366: CALL_OW 449
36370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36371: LD_ADDR_VAR 0 3
36375: PUSH
36376: LD_VAR 0 5
36380: PPUSH
36381: LD_INT 1
36383: PPUSH
36384: CALL_OW 275
36388: PUSH
36389: LD_VAR 0 4
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: GREATEREQUAL
36398: IFFALSE 36424
36400: PUSH
36401: LD_VAR 0 5
36405: PPUSH
36406: LD_INT 2
36408: PPUSH
36409: CALL_OW 275
36413: PUSH
36414: LD_VAR 0 4
36418: PUSH
36419: LD_INT 2
36421: ARRAY
36422: GREATEREQUAL
36423: AND
36424: IFFALSE 36450
36426: PUSH
36427: LD_VAR 0 5
36431: PPUSH
36432: LD_INT 3
36434: PPUSH
36435: CALL_OW 275
36439: PUSH
36440: LD_VAR 0 4
36444: PUSH
36445: LD_INT 3
36447: ARRAY
36448: GREATEREQUAL
36449: AND
36450: ST_TO_ADDR
// end ;
36451: LD_VAR 0 3
36455: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36456: LD_INT 0
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
// pom := GetBase ( building ) ;
36462: LD_ADDR_VAR 0 3
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 274
36476: ST_TO_ADDR
// if not pom then
36477: LD_VAR 0 3
36481: NOT
36482: IFFALSE 36486
// exit ;
36484: GO 36660
// btype := GetBType ( building ) ;
36486: LD_ADDR_VAR 0 5
36490: PUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 266
36500: ST_TO_ADDR
// if btype = b_armoury then
36501: LD_VAR 0 5
36505: PUSH
36506: LD_INT 4
36508: EQUAL
36509: IFFALSE 36519
// btype := b_barracks ;
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: LD_INT 5
36518: ST_TO_ADDR
// if btype = b_depot then
36519: LD_VAR 0 5
36523: PUSH
36524: LD_INT 0
36526: EQUAL
36527: IFFALSE 36537
// btype := b_warehouse ;
36529: LD_ADDR_VAR 0 5
36533: PUSH
36534: LD_INT 1
36536: ST_TO_ADDR
// if btype = b_workshop then
36537: LD_VAR 0 5
36541: PUSH
36542: LD_INT 2
36544: EQUAL
36545: IFFALSE 36555
// btype := b_factory ;
36547: LD_ADDR_VAR 0 5
36551: PUSH
36552: LD_INT 3
36554: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36555: LD_ADDR_VAR 0 4
36559: PUSH
36560: LD_VAR 0 5
36564: PPUSH
36565: LD_VAR 0 1
36569: PPUSH
36570: CALL_OW 248
36574: PPUSH
36575: CALL_OW 450
36579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36580: LD_ADDR_VAR 0 2
36584: PUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: LD_INT 1
36592: PPUSH
36593: CALL_OW 275
36597: PUSH
36598: LD_VAR 0 4
36602: PUSH
36603: LD_INT 1
36605: ARRAY
36606: GREATEREQUAL
36607: IFFALSE 36633
36609: PUSH
36610: LD_VAR 0 3
36614: PPUSH
36615: LD_INT 2
36617: PPUSH
36618: CALL_OW 275
36622: PUSH
36623: LD_VAR 0 4
36627: PUSH
36628: LD_INT 2
36630: ARRAY
36631: GREATEREQUAL
36632: AND
36633: IFFALSE 36659
36635: PUSH
36636: LD_VAR 0 3
36640: PPUSH
36641: LD_INT 3
36643: PPUSH
36644: CALL_OW 275
36648: PUSH
36649: LD_VAR 0 4
36653: PUSH
36654: LD_INT 3
36656: ARRAY
36657: GREATEREQUAL
36658: AND
36659: ST_TO_ADDR
// end ;
36660: LD_VAR 0 2
36664: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36665: LD_INT 0
36667: PPUSH
36668: PPUSH
36669: PPUSH
// pom := GetBase ( building ) ;
36670: LD_ADDR_VAR 0 4
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 274
36684: ST_TO_ADDR
// if not pom then
36685: LD_VAR 0 4
36689: NOT
36690: IFFALSE 36694
// exit ;
36692: GO 36799
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36694: LD_ADDR_VAR 0 5
36698: PUSH
36699: LD_VAR 0 2
36703: PPUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 248
36713: PPUSH
36714: CALL_OW 450
36718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_VAR 0 4
36728: PPUSH
36729: LD_INT 1
36731: PPUSH
36732: CALL_OW 275
36736: PUSH
36737: LD_VAR 0 5
36741: PUSH
36742: LD_INT 1
36744: ARRAY
36745: GREATEREQUAL
36746: IFFALSE 36772
36748: PUSH
36749: LD_VAR 0 4
36753: PPUSH
36754: LD_INT 2
36756: PPUSH
36757: CALL_OW 275
36761: PUSH
36762: LD_VAR 0 5
36766: PUSH
36767: LD_INT 2
36769: ARRAY
36770: GREATEREQUAL
36771: AND
36772: IFFALSE 36798
36774: PUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: LD_INT 3
36782: PPUSH
36783: CALL_OW 275
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 3
36795: ARRAY
36796: GREATEREQUAL
36797: AND
36798: ST_TO_ADDR
// end ;
36799: LD_VAR 0 3
36803: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36804: LD_INT 0
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
// result := false ;
36817: LD_ADDR_VAR 0 8
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36825: LD_VAR 0 5
36829: NOT
36830: IFTRUE 36839
36832: PUSH
36833: LD_VAR 0 1
36837: NOT
36838: OR
36839: IFTRUE 36848
36841: PUSH
36842: LD_VAR 0 2
36846: NOT
36847: OR
36848: IFTRUE 36857
36850: PUSH
36851: LD_VAR 0 3
36855: NOT
36856: OR
36857: IFFALSE 36861
// exit ;
36859: GO 37687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36861: LD_ADDR_VAR 0 14
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: LD_VAR 0 2
36875: PPUSH
36876: LD_VAR 0 3
36880: PPUSH
36881: LD_VAR 0 4
36885: PPUSH
36886: LD_VAR 0 5
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: PPUSH
36895: CALL_OW 248
36899: PPUSH
36900: LD_INT 0
36902: PPUSH
36903: CALL 38968 0 6
36907: ST_TO_ADDR
// if not hexes then
36908: LD_VAR 0 14
36912: NOT
36913: IFFALSE 36917
// exit ;
36915: GO 37687
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36917: LD_ADDR_VAR 0 17
36921: PUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: LD_INT 22
36929: PUSH
36930: LD_VAR 0 13
36934: PPUSH
36935: CALL_OW 255
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: LD_INT 30
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 30
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PPUSH
36976: CALL_OW 72
36980: ST_TO_ADDR
// for i = 1 to hexes do
36981: LD_ADDR_VAR 0 9
36985: PUSH
36986: DOUBLE
36987: LD_INT 1
36989: DEC
36990: ST_TO_ADDR
36991: LD_VAR 0 14
36995: PUSH
36996: FOR_TO
36997: IFFALSE 37685
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36999: LD_ADDR_VAR 0 13
37003: PUSH
37004: LD_VAR 0 14
37008: PUSH
37009: LD_VAR 0 9
37013: ARRAY
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: LD_VAR 0 14
37023: PUSH
37024: LD_VAR 0 9
37028: ARRAY
37029: PUSH
37030: LD_INT 2
37032: ARRAY
37033: PPUSH
37034: CALL_OW 428
37038: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37039: LD_VAR 0 14
37043: PUSH
37044: LD_VAR 0 9
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 14
37058: PUSH
37059: LD_VAR 0 9
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: CALL_OW 351
37073: IFTRUE 37112
37075: PUSH
37076: LD_VAR 0 14
37080: PUSH
37081: LD_VAR 0 9
37085: ARRAY
37086: PUSH
37087: LD_INT 1
37089: ARRAY
37090: PPUSH
37091: LD_VAR 0 14
37095: PUSH
37096: LD_VAR 0 9
37100: ARRAY
37101: PUSH
37102: LD_INT 2
37104: ARRAY
37105: PPUSH
37106: CALL_OW 488
37110: NOT
37111: OR
37112: IFTRUE 37129
37114: PUSH
37115: LD_VAR 0 13
37119: PPUSH
37120: CALL_OW 247
37124: PUSH
37125: LD_INT 3
37127: EQUAL
37128: OR
37129: IFFALSE 37135
// exit ;
37131: POP
37132: POP
37133: GO 37687
// if not tmp then
37135: LD_VAR 0 13
37139: NOT
37140: IFFALSE 37144
// continue ;
37142: GO 36996
// result := true ;
37144: LD_ADDR_VAR 0 8
37148: PUSH
37149: LD_INT 1
37151: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37152: LD_VAR 0 6
37156: IFFALSE 37173
37158: PUSH
37159: LD_VAR 0 13
37163: PPUSH
37164: CALL_OW 247
37168: PUSH
37169: LD_INT 2
37171: EQUAL
37172: AND
37173: IFFALSE 37190
37175: PUSH
37176: LD_VAR 0 13
37180: PPUSH
37181: CALL_OW 263
37185: PUSH
37186: LD_INT 1
37188: EQUAL
37189: AND
37190: IFFALSE 37354
// begin if IsDrivenBy ( tmp ) then
37192: LD_VAR 0 13
37196: PPUSH
37197: CALL_OW 311
37201: IFFALSE 37205
// continue ;
37203: GO 36996
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37205: LD_VAR 0 6
37209: PPUSH
37210: LD_INT 3
37212: PUSH
37213: LD_INT 60
37215: PUSH
37216: EMPTY
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 55
37228: PUSH
37229: EMPTY
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PPUSH
37240: CALL_OW 72
37244: IFFALSE 37352
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37246: LD_ADDR_VAR 0 18
37250: PUSH
37251: LD_VAR 0 6
37255: PPUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 60
37261: PUSH
37262: EMPTY
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 3
37271: PUSH
37272: LD_INT 55
37274: PUSH
37275: EMPTY
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 72
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: ST_TO_ADDR
// if IsInUnit ( driver ) then
37295: LD_VAR 0 18
37299: PPUSH
37300: CALL_OW 310
37304: IFFALSE 37315
// ComExit ( driver ) ;
37306: LD_VAR 0 18
37310: PPUSH
37311: CALL 62958 0 1
// AddComEnterUnit ( driver , tmp ) ;
37315: LD_VAR 0 18
37319: PPUSH
37320: LD_VAR 0 13
37324: PPUSH
37325: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37329: LD_VAR 0 18
37333: PPUSH
37334: LD_VAR 0 7
37338: PPUSH
37339: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37343: LD_VAR 0 18
37347: PPUSH
37348: CALL_OW 181
// end ; continue ;
37352: GO 36996
// end ; if not cleaners or not tmp in cleaners then
37354: LD_VAR 0 6
37358: NOT
37359: IFTRUE 37374
37361: PUSH
37362: LD_VAR 0 13
37366: PUSH
37367: LD_VAR 0 6
37371: IN
37372: NOT
37373: OR
37374: IFFALSE 37683
// begin if dep then
37376: LD_VAR 0 17
37380: IFFALSE 37516
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37382: LD_ADDR_VAR 0 16
37386: PUSH
37387: LD_VAR 0 17
37391: PUSH
37392: LD_INT 1
37394: ARRAY
37395: PPUSH
37396: CALL_OW 250
37400: PPUSH
37401: LD_VAR 0 17
37405: PUSH
37406: LD_INT 1
37408: ARRAY
37409: PPUSH
37410: CALL_OW 254
37414: PPUSH
37415: LD_INT 5
37417: PPUSH
37418: CALL_OW 272
37422: PUSH
37423: LD_VAR 0 17
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PPUSH
37432: CALL_OW 251
37436: PPUSH
37437: LD_VAR 0 17
37441: PUSH
37442: LD_INT 1
37444: ARRAY
37445: PPUSH
37446: CALL_OW 254
37450: PPUSH
37451: LD_INT 5
37453: PPUSH
37454: CALL_OW 273
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37463: LD_VAR 0 16
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PPUSH
37472: LD_VAR 0 16
37476: PUSH
37477: LD_INT 2
37479: ARRAY
37480: PPUSH
37481: CALL_OW 488
37485: IFFALSE 37516
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37487: LD_VAR 0 13
37491: PPUSH
37492: LD_VAR 0 16
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: LD_VAR 0 16
37505: PUSH
37506: LD_INT 2
37508: ARRAY
37509: PPUSH
37510: CALL_OW 111
// continue ;
37514: GO 36996
// end ; end ; r := GetDir ( tmp ) ;
37516: LD_ADDR_VAR 0 15
37520: PUSH
37521: LD_VAR 0 13
37525: PPUSH
37526: CALL_OW 254
37530: ST_TO_ADDR
// if r = 5 then
37531: LD_VAR 0 15
37535: PUSH
37536: LD_INT 5
37538: EQUAL
37539: IFFALSE 37549
// r := 0 ;
37541: LD_ADDR_VAR 0 15
37545: PUSH
37546: LD_INT 0
37548: ST_TO_ADDR
// for j = r to 5 do
37549: LD_ADDR_VAR 0 10
37553: PUSH
37554: DOUBLE
37555: LD_VAR 0 15
37559: DEC
37560: ST_TO_ADDR
37561: LD_INT 5
37563: PUSH
37564: FOR_TO
37565: IFFALSE 37681
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37567: LD_ADDR_VAR 0 11
37571: PUSH
37572: LD_VAR 0 13
37576: PPUSH
37577: CALL_OW 250
37581: PPUSH
37582: LD_VAR 0 10
37586: PPUSH
37587: LD_INT 2
37589: PPUSH
37590: CALL_OW 272
37594: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37595: LD_ADDR_VAR 0 12
37599: PUSH
37600: LD_VAR 0 13
37604: PPUSH
37605: CALL_OW 251
37609: PPUSH
37610: LD_VAR 0 10
37614: PPUSH
37615: LD_INT 2
37617: PPUSH
37618: CALL_OW 273
37622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37623: LD_VAR 0 11
37627: PPUSH
37628: LD_VAR 0 12
37632: PPUSH
37633: CALL_OW 488
37637: IFFALSE 37656
37639: PUSH
37640: LD_VAR 0 11
37644: PPUSH
37645: LD_VAR 0 12
37649: PPUSH
37650: CALL_OW 428
37654: NOT
37655: AND
37656: IFFALSE 37679
// begin ComMoveXY ( tmp , _x , _y ) ;
37658: LD_VAR 0 13
37662: PPUSH
37663: LD_VAR 0 11
37667: PPUSH
37668: LD_VAR 0 12
37672: PPUSH
37673: CALL_OW 111
// break ;
37677: GO 37681
// end ; end ;
37679: GO 37564
37681: POP
37682: POP
// end ; end ;
37683: GO 36996
37685: POP
37686: POP
// end ;
37687: LD_VAR 0 8
37691: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37692: LD_INT 0
37694: PPUSH
// result := true ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_INT 1
37702: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37703: LD_VAR 0 2
37707: PUSH
37708: LD_INT 24
37710: DOUBLE
37711: EQUAL
37712: IFTRUE 37722
37714: LD_INT 33
37716: DOUBLE
37717: EQUAL
37718: IFTRUE 37722
37720: GO 37747
37722: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_INT 32
37730: PPUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 321
37740: PUSH
37741: LD_INT 2
37743: EQUAL
37744: ST_TO_ADDR
37745: GO 38063
37747: LD_INT 20
37749: DOUBLE
37750: EQUAL
37751: IFTRUE 37755
37753: GO 37780
37755: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37756: LD_ADDR_VAR 0 3
37760: PUSH
37761: LD_INT 6
37763: PPUSH
37764: LD_VAR 0 1
37768: PPUSH
37769: CALL_OW 321
37773: PUSH
37774: LD_INT 2
37776: EQUAL
37777: ST_TO_ADDR
37778: GO 38063
37780: LD_INT 22
37782: DOUBLE
37783: EQUAL
37784: IFTRUE 37794
37786: LD_INT 36
37788: DOUBLE
37789: EQUAL
37790: IFTRUE 37794
37792: GO 37819
37794: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37795: LD_ADDR_VAR 0 3
37799: PUSH
37800: LD_INT 15
37802: PPUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 321
37812: PUSH
37813: LD_INT 2
37815: EQUAL
37816: ST_TO_ADDR
37817: GO 38063
37819: LD_INT 30
37821: DOUBLE
37822: EQUAL
37823: IFTRUE 37827
37825: GO 37852
37827: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37828: LD_ADDR_VAR 0 3
37832: PUSH
37833: LD_INT 20
37835: PPUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 321
37845: PUSH
37846: LD_INT 2
37848: EQUAL
37849: ST_TO_ADDR
37850: GO 38063
37852: LD_INT 28
37854: DOUBLE
37855: EQUAL
37856: IFTRUE 37866
37858: LD_INT 21
37860: DOUBLE
37861: EQUAL
37862: IFTRUE 37866
37864: GO 37891
37866: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_INT 21
37874: PPUSH
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 321
37884: PUSH
37885: LD_INT 2
37887: EQUAL
37888: ST_TO_ADDR
37889: GO 38063
37891: LD_INT 16
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37899
37897: GO 37924
37899: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37900: LD_ADDR_VAR 0 3
37904: PUSH
37905: LD_INT 84
37907: PPUSH
37908: LD_VAR 0 1
37912: PPUSH
37913: CALL_OW 321
37917: PUSH
37918: LD_INT 2
37920: EQUAL
37921: ST_TO_ADDR
37922: GO 38063
37924: LD_INT 19
37926: DOUBLE
37927: EQUAL
37928: IFTRUE 37938
37930: LD_INT 23
37932: DOUBLE
37933: EQUAL
37934: IFTRUE 37938
37936: GO 37963
37938: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: LD_INT 83
37946: PPUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 321
37956: PUSH
37957: LD_INT 2
37959: EQUAL
37960: ST_TO_ADDR
37961: GO 38063
37963: LD_INT 17
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 37996
37971: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: LD_INT 39
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 321
37989: PUSH
37990: LD_INT 2
37992: EQUAL
37993: ST_TO_ADDR
37994: GO 38063
37996: LD_INT 18
37998: DOUBLE
37999: EQUAL
38000: IFTRUE 38004
38002: GO 38029
38004: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38005: LD_ADDR_VAR 0 3
38009: PUSH
38010: LD_INT 40
38012: PPUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 321
38022: PUSH
38023: LD_INT 2
38025: EQUAL
38026: ST_TO_ADDR
38027: GO 38063
38029: LD_INT 27
38031: DOUBLE
38032: EQUAL
38033: IFTRUE 38037
38035: GO 38062
38037: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_INT 35
38045: PPUSH
38046: LD_VAR 0 1
38050: PPUSH
38051: CALL_OW 321
38055: PUSH
38056: LD_INT 2
38058: EQUAL
38059: ST_TO_ADDR
38060: GO 38063
38062: POP
// end ;
38063: LD_VAR 0 3
38067: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
// result := false ;
38081: LD_ADDR_VAR 0 6
38085: PUSH
38086: LD_INT 0
38088: ST_TO_ADDR
// if btype = b_depot then
38089: LD_VAR 0 2
38093: PUSH
38094: LD_INT 0
38096: EQUAL
38097: IFFALSE 38109
// begin result := true ;
38099: LD_ADDR_VAR 0 6
38103: PUSH
38104: LD_INT 1
38106: ST_TO_ADDR
// exit ;
38107: GO 38963
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38109: LD_VAR 0 1
38113: NOT
38114: IFTRUE 38139
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 266
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: IN
38137: NOT
38138: OR
38139: IFTRUE 38148
38141: PUSH
38142: LD_VAR 0 2
38146: NOT
38147: OR
38148: IFTRUE 38184
38150: PUSH
38151: LD_VAR 0 5
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 4
38170: PUSH
38171: LD_INT 5
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: IN
38182: NOT
38183: OR
38184: IFTRUE 38203
38186: PUSH
38187: LD_VAR 0 3
38191: PPUSH
38192: LD_VAR 0 4
38196: PPUSH
38197: CALL_OW 488
38201: NOT
38202: OR
38203: IFFALSE 38207
// exit ;
38205: GO 38963
// side := GetSide ( depot ) ;
38207: LD_ADDR_VAR 0 9
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 255
38221: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38222: LD_VAR 0 9
38226: PPUSH
38227: LD_VAR 0 2
38231: PPUSH
38232: CALL 37692 0 2
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 38963
// pom := GetBase ( depot ) ;
38241: LD_ADDR_VAR 0 10
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: CALL_OW 274
38255: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38256: LD_ADDR_VAR 0 11
38260: PUSH
38261: LD_VAR 0 2
38265: PPUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 248
38275: PPUSH
38276: CALL_OW 450
38280: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38281: LD_VAR 0 10
38285: PPUSH
38286: LD_INT 1
38288: PPUSH
38289: CALL_OW 275
38293: PUSH
38294: LD_VAR 0 11
38298: PUSH
38299: LD_INT 1
38301: ARRAY
38302: GREATEREQUAL
38303: IFFALSE 38329
38305: PUSH
38306: LD_VAR 0 10
38310: PPUSH
38311: LD_INT 2
38313: PPUSH
38314: CALL_OW 275
38318: PUSH
38319: LD_VAR 0 11
38323: PUSH
38324: LD_INT 2
38326: ARRAY
38327: GREATEREQUAL
38328: AND
38329: IFFALSE 38355
38331: PUSH
38332: LD_VAR 0 10
38336: PPUSH
38337: LD_INT 3
38339: PPUSH
38340: CALL_OW 275
38344: PUSH
38345: LD_VAR 0 11
38349: PUSH
38350: LD_INT 3
38352: ARRAY
38353: GREATEREQUAL
38354: AND
38355: NOT
38356: IFFALSE 38360
// exit ;
38358: GO 38963
// if GetBType ( depot ) = b_depot then
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 266
38369: PUSH
38370: LD_INT 0
38372: EQUAL
38373: IFFALSE 38385
// dist := 28 else
38375: LD_ADDR_VAR 0 14
38379: PUSH
38380: LD_INT 28
38382: ST_TO_ADDR
38383: GO 38393
// dist := 36 ;
38385: LD_ADDR_VAR 0 14
38389: PUSH
38390: LD_INT 36
38392: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38393: LD_VAR 0 1
38397: PPUSH
38398: LD_VAR 0 3
38402: PPUSH
38403: LD_VAR 0 4
38407: PPUSH
38408: CALL_OW 297
38412: PUSH
38413: LD_VAR 0 14
38417: GREATER
38418: IFFALSE 38422
// exit ;
38420: GO 38963
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38422: LD_ADDR_VAR 0 12
38426: PUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_VAR 0 3
38436: PPUSH
38437: LD_VAR 0 4
38441: PPUSH
38442: LD_VAR 0 5
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 248
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL 38968 0 6
38464: ST_TO_ADDR
// if not hexes then
38465: LD_VAR 0 12
38469: NOT
38470: IFFALSE 38474
// exit ;
38472: GO 38963
// hex := GetHexInfo ( x , y ) ;
38474: LD_ADDR_VAR 0 15
38478: PUSH
38479: LD_VAR 0 3
38483: PPUSH
38484: LD_VAR 0 4
38488: PPUSH
38489: CALL_OW 546
38493: ST_TO_ADDR
// if hex [ 1 ] then
38494: LD_VAR 0 15
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: IFFALSE 38506
// exit ;
38504: GO 38963
// height := hex [ 2 ] ;
38506: LD_ADDR_VAR 0 13
38510: PUSH
38511: LD_VAR 0 15
38515: PUSH
38516: LD_INT 2
38518: ARRAY
38519: ST_TO_ADDR
// for i = 1 to hexes do
38520: LD_ADDR_VAR 0 7
38524: PUSH
38525: DOUBLE
38526: LD_INT 1
38528: DEC
38529: ST_TO_ADDR
38530: LD_VAR 0 12
38534: PUSH
38535: FOR_TO
38536: IFFALSE 38880
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38538: LD_VAR 0 12
38542: PUSH
38543: LD_VAR 0 7
38547: ARRAY
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PPUSH
38553: LD_VAR 0 12
38557: PUSH
38558: LD_VAR 0 7
38562: ARRAY
38563: PUSH
38564: LD_INT 2
38566: ARRAY
38567: PPUSH
38568: CALL_OW 488
38572: NOT
38573: IFTRUE 38615
38575: PUSH
38576: LD_VAR 0 12
38580: PUSH
38581: LD_VAR 0 7
38585: ARRAY
38586: PUSH
38587: LD_INT 1
38589: ARRAY
38590: PPUSH
38591: LD_VAR 0 12
38595: PUSH
38596: LD_VAR 0 7
38600: ARRAY
38601: PUSH
38602: LD_INT 2
38604: ARRAY
38605: PPUSH
38606: CALL_OW 428
38610: PUSH
38611: LD_INT 0
38613: GREATER
38614: OR
38615: IFTRUE 38653
38617: PUSH
38618: LD_VAR 0 12
38622: PUSH
38623: LD_VAR 0 7
38627: ARRAY
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: LD_VAR 0 12
38637: PUSH
38638: LD_VAR 0 7
38642: ARRAY
38643: PUSH
38644: LD_INT 2
38646: ARRAY
38647: PPUSH
38648: CALL_OW 351
38652: OR
38653: IFFALSE 38659
// exit ;
38655: POP
38656: POP
38657: GO 38963
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38659: LD_ADDR_VAR 0 8
38663: PUSH
38664: LD_VAR 0 12
38668: PUSH
38669: LD_VAR 0 7
38673: ARRAY
38674: PUSH
38675: LD_INT 1
38677: ARRAY
38678: PPUSH
38679: LD_VAR 0 12
38683: PUSH
38684: LD_VAR 0 7
38688: ARRAY
38689: PUSH
38690: LD_INT 2
38692: ARRAY
38693: PPUSH
38694: CALL_OW 546
38698: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38699: LD_VAR 0 8
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: IFTRUE 38729
38709: PUSH
38710: LD_VAR 0 8
38714: PUSH
38715: LD_INT 2
38717: ARRAY
38718: PUSH
38719: LD_VAR 0 13
38723: PUSH
38724: LD_INT 2
38726: PLUS
38727: GREATER
38728: OR
38729: IFTRUE 38751
38731: PUSH
38732: LD_VAR 0 8
38736: PUSH
38737: LD_INT 2
38739: ARRAY
38740: PUSH
38741: LD_VAR 0 13
38745: PUSH
38746: LD_INT 2
38748: MINUS
38749: LESS
38750: OR
38751: IFTRUE 38819
38753: PUSH
38754: LD_VAR 0 8
38758: PUSH
38759: LD_INT 3
38761: ARRAY
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 8
38768: PUSH
38769: LD_INT 9
38771: PUSH
38772: LD_INT 10
38774: PUSH
38775: LD_INT 11
38777: PUSH
38778: LD_INT 12
38780: PUSH
38781: LD_INT 13
38783: PUSH
38784: LD_INT 16
38786: PUSH
38787: LD_INT 17
38789: PUSH
38790: LD_INT 18
38792: PUSH
38793: LD_INT 19
38795: PUSH
38796: LD_INT 20
38798: PUSH
38799: LD_INT 21
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: IN
38817: NOT
38818: OR
38819: IFTRUE 38832
38821: PUSH
38822: LD_VAR 0 8
38826: PUSH
38827: LD_INT 5
38829: ARRAY
38830: NOT
38831: OR
38832: IFTRUE 38872
38834: PUSH
38835: LD_VAR 0 8
38839: PUSH
38840: LD_INT 6
38842: ARRAY
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 7
38852: PUSH
38853: LD_INT 9
38855: PUSH
38856: LD_INT 10
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: IN
38870: NOT
38871: OR
38872: IFFALSE 38878
// exit ;
38874: POP
38875: POP
38876: GO 38963
// end ;
38878: GO 38535
38880: POP
38881: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38882: LD_VAR 0 9
38886: PPUSH
38887: LD_VAR 0 3
38891: PPUSH
38892: LD_VAR 0 4
38896: PPUSH
38897: LD_INT 20
38899: PPUSH
38900: CALL 30782 0 4
38904: PUSH
38905: LD_INT 4
38907: ARRAY
38908: IFFALSE 38912
// exit ;
38910: GO 38963
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38912: LD_VAR 0 2
38916: PUSH
38917: LD_INT 29
38919: PUSH
38920: LD_INT 30
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: IN
38927: IFFALSE 38951
38929: PUSH
38930: LD_VAR 0 3
38934: PPUSH
38935: LD_VAR 0 4
38939: PPUSH
38940: LD_VAR 0 9
38944: PPUSH
38945: CALL_OW 440
38949: NOT
38950: AND
38951: IFFALSE 38955
// exit ;
38953: GO 38963
// result := true ;
38955: LD_ADDR_VAR 0 6
38959: PUSH
38960: LD_INT 1
38962: ST_TO_ADDR
// end ;
38963: LD_VAR 0 6
38967: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38968: LD_INT 0
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
// result = [ ] ;
39028: LD_ADDR_VAR 0 7
39032: PUSH
39033: EMPTY
39034: ST_TO_ADDR
// temp_list = [ ] ;
39035: LD_ADDR_VAR 0 9
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39042: LD_VAR 0 4
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 4
39061: PUSH
39062: LD_INT 5
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: IN
39073: NOT
39074: IFTRUE 39117
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: IN
39092: IFFALSE 39116
39094: PUSH
39095: LD_VAR 0 5
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 3
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: IN
39114: NOT
39115: AND
39116: OR
39117: IFFALSE 39121
// exit ;
39119: GO 57520
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39121: LD_VAR 0 1
39125: PUSH
39126: LD_INT 6
39128: PUSH
39129: LD_INT 7
39131: PUSH
39132: LD_INT 8
39134: PUSH
39135: LD_INT 13
39137: PUSH
39138: LD_INT 12
39140: PUSH
39141: LD_INT 15
39143: PUSH
39144: LD_INT 11
39146: PUSH
39147: LD_INT 14
39149: PUSH
39150: LD_INT 10
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: IN
39164: IFFALSE 39174
// btype = b_lab ;
39166: LD_ADDR_VAR 0 1
39170: PUSH
39171: LD_INT 6
39173: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39174: LD_VAR 0 6
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: IN
39193: NOT
39194: IFTRUE 39262
39196: PUSH
39197: LD_VAR 0 1
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: LD_INT 6
39216: PUSH
39217: LD_INT 36
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: LD_INT 31
39228: PUSH
39229: LD_INT 32
39231: PUSH
39232: LD_INT 33
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: IN
39248: NOT
39249: IFFALSE 39261
39251: PUSH
39252: LD_VAR 0 6
39256: PUSH
39257: LD_INT 1
39259: EQUAL
39260: AND
39261: OR
39262: IFTRUE 39294
39264: PUSH
39265: LD_VAR 0 1
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 3
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: IN
39280: NOT
39281: IFFALSE 39293
39283: PUSH
39284: LD_VAR 0 6
39288: PUSH
39289: LD_INT 2
39291: EQUAL
39292: AND
39293: OR
39294: IFFALSE 39304
// mode = 0 ;
39296: LD_ADDR_VAR 0 6
39300: PUSH
39301: LD_INT 0
39303: ST_TO_ADDR
// case mode of 0 :
39304: LD_VAR 0 6
39308: PUSH
39309: LD_INT 0
39311: DOUBLE
39312: EQUAL
39313: IFTRUE 39317
39315: GO 50770
39317: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39318: LD_ADDR_VAR 0 11
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39511: LD_ADDR_VAR 0 12
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39707: LD_ADDR_VAR 0 13
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39906: LD_ADDR_VAR 0 14
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 3
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 3
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40102: LD_ADDR_VAR 0 15
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40295: LD_ADDR_VAR 0 16
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 3
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40488: LD_ADDR_VAR 0 17
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40718: LD_ADDR_VAR 0 18
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40948: LD_ADDR_VAR 0 19
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41178: LD_ADDR_VAR 0 20
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41408: LD_ADDR_VAR 0 21
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41638: LD_ADDR_VAR 0 22
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 2
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41868: LD_ADDR_VAR 0 23
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 3
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 3
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42148: LD_ADDR_VAR 0 24
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42424: LD_ADDR_VAR 0 25
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42698: LD_ADDR_VAR 0 26
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 3
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42974: LD_ADDR_VAR 0 27
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: NEG
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43254: LD_ADDR_VAR 0 28
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 3
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 3
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43536: LD_ADDR_VAR 0 29
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 3
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: NEG
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43815: LD_ADDR_VAR 0 30
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44093: LD_ADDR_VAR 0 31
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 3
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44371: LD_ADDR_VAR 0 32
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44649: LD_ADDR_VAR 0 33
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44928: LD_ADDR_VAR 0 34
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 3
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45208: LD_ADDR_VAR 0 35
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45320: LD_ADDR_VAR 0 36
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45432: LD_ADDR_VAR 0 37
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45544: LD_ADDR_VAR 0 38
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45656: LD_ADDR_VAR 0 39
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45768: LD_ADDR_VAR 0 40
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45880: LD_ADDR_VAR 0 41
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46230: LD_ADDR_VAR 0 42
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 3
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: NEG
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46580: LD_ADDR_VAR 0 43
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46928: LD_ADDR_VAR 0 44
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 3
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 3
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47278: LD_ADDR_VAR 0 45
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47628: LD_ADDR_VAR 0 46
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 3
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47976: LD_ADDR_VAR 0 47
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48127: LD_ADDR_VAR 0 48
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48274: LD_ADDR_VAR 0 49
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48418: LD_ADDR_VAR 0 50
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48562: LD_ADDR_VAR 0 51
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48709: LD_ADDR_VAR 0 52
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48860: LD_ADDR_VAR 0 53
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49090: LD_ADDR_VAR 0 54
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49320: LD_ADDR_VAR 0 55
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49550: LD_ADDR_VAR 0 56
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49780: LD_ADDR_VAR 0 57
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50010: LD_ADDR_VAR 0 58
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50240: LD_ADDR_VAR 0 59
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50328: LD_ADDR_VAR 0 60
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50416: LD_ADDR_VAR 0 61
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50504: LD_ADDR_VAR 0 62
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50592: LD_ADDR_VAR 0 63
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50680: LD_ADDR_VAR 0 64
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: ST_TO_ADDR
// end ; 1 :
50768: GO 56665
50770: LD_INT 1
50772: DOUBLE
50773: EQUAL
50774: IFTRUE 50778
50776: GO 53401
50778: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50779: LD_ADDR_VAR 0 11
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50823: LD_ADDR_VAR 0 12
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50864: LD_ADDR_VAR 0 13
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50904: LD_ADDR_VAR 0 14
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 3
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50945: LD_ADDR_VAR 0 15
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50989: LD_ADDR_VAR 0 16
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51035: LD_ADDR_VAR 0 17
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51079: LD_ADDR_VAR 0 18
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51120: LD_ADDR_VAR 0 19
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51160: LD_ADDR_VAR 0 20
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51201: LD_ADDR_VAR 0 21
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51245: LD_ADDR_VAR 0 22
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51291: LD_ADDR_VAR 0 23
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 4
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51335: LD_ADDR_VAR 0 24
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 4
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51376: LD_ADDR_VAR 0 25
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: LD_INT 4
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51416: LD_ADDR_VAR 0 26
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51457: LD_ADDR_VAR 0 27
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 4
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51501: LD_ADDR_VAR 0 28
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: LD_INT 4
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: LIST
51546: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51547: LD_ADDR_VAR 0 29
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 4
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 4
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 5
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 5
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 4
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 6
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 6
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 5
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51702: LD_ADDR_VAR 0 30
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 4
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 4
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 5
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 6
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 6
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51845: LD_ADDR_VAR 0 31
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 4
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 5
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 5
51922: PUSH
51923: LD_INT 5
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: LD_INT 5
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 6
51942: PUSH
51943: LD_INT 5
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 6
51952: PUSH
51953: LD_INT 6
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 5
51962: PUSH
51963: LD_INT 6
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51984: LD_ADDR_VAR 0 32
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 5
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 5
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 4
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 6
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 6
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 5
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52127: LD_ADDR_VAR 0 33
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 4
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 4
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 5
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 5
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 5
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 6
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 6
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52282: LD_ADDR_VAR 0 34
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 3
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 4
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: LD_INT 4
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 4
52361: NEG
52362: PUSH
52363: LD_INT 5
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 5
52373: NEG
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 5
52385: NEG
52386: PUSH
52387: LD_INT 5
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 5
52397: NEG
52398: PUSH
52399: LD_INT 6
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 6
52409: NEG
52410: PUSH
52411: LD_INT 5
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 6
52421: NEG
52422: PUSH
52423: LD_INT 6
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52445: LD_ADDR_VAR 0 41
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52489: LD_ADDR_VAR 0 42
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52530: LD_ADDR_VAR 0 43
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52570: LD_ADDR_VAR 0 44
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52611: LD_ADDR_VAR 0 45
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52655: LD_ADDR_VAR 0 46
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52701: LD_ADDR_VAR 0 47
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52734: LD_ADDR_VAR 0 48
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52765: LD_ADDR_VAR 0 49
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52794: LD_ADDR_VAR 0 50
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52823: LD_ADDR_VAR 0 51
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52854: LD_ADDR_VAR 0 52
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52887: LD_ADDR_VAR 0 53
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52931: LD_ADDR_VAR 0 54
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52972: LD_ADDR_VAR 0 55
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53012: LD_ADDR_VAR 0 56
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53053: LD_ADDR_VAR 0 57
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53097: LD_ADDR_VAR 0 58
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53143: LD_ADDR_VAR 0 59
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53187: LD_ADDR_VAR 0 60
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53228: LD_ADDR_VAR 0 61
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53268: LD_ADDR_VAR 0 62
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53309: LD_ADDR_VAR 0 63
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53353: LD_ADDR_VAR 0 64
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// end ; 2 :
53399: GO 56665
53401: LD_INT 2
53403: DOUBLE
53404: EQUAL
53405: IFTRUE 53409
53407: GO 56664
53409: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53410: LD_ADDR_VAR 0 29
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 5
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 5
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 4
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 5
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: LD_INT 4
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 4
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 4
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 4
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 4
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 4
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 5
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 5
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 4
53749: NEG
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 4
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 4
53795: NEG
53796: PUSH
53797: LD_INT 4
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: LD_INT 5
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 5
53855: NEG
53856: PUSH
53857: LD_INT 4
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 5
53867: NEG
53868: PUSH
53869: LD_INT 5
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: LD_INT 5
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 5
53891: NEG
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53948: LD_ADDR_VAR 0 30
53952: PUSH
53953: LD_INT 4
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 5
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 5
53985: PUSH
53986: LD_INT 5
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 5
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 4
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 5
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: LD_INT 5
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 3
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 4
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 4
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 4
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 5
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 5
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 5
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 4
54300: NEG
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 4
54312: NEG
54313: PUSH
54314: LD_INT 4
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 4
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 5
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 5
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: LD_INT 5
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54495: LD_ADDR_VAR 0 31
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 4
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 5
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 5
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 4
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 5
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 4
54697: NEG
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 4
54709: NEG
54710: PUSH
54711: LD_INT 5
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 5
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 5
54769: NEG
54770: PUSH
54771: LD_INT 5
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 5
54793: NEG
54794: PUSH
54795: LD_INT 3
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 4
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 4
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 4
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 5
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 5
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55045: LD_ADDR_VAR 0 32
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: NEG
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 4
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 4
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 5
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 5
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 4
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 4
55457: PUSH
55458: LD_INT 4
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 4
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 5
55477: PUSH
55478: LD_INT 4
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 5
55487: PUSH
55488: LD_INT 5
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 5
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 4
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 5
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: LD_INT 5
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55592: LD_ADDR_VAR 0 33
55596: PUSH
55597: LD_INT 4
55599: NEG
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: LD_INT 5
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: LD_INT 4
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: NEG
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 5
55659: NEG
55660: PUSH
55661: LD_INT 4
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: NEG
55672: PUSH
55673: LD_INT 5
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 5
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 4
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 4
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 4
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 5
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 4
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 5
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 4
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 4
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 5
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 5
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 4
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 5
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56130: LD_ADDR_VAR 0 34
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 5
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 4
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 4
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 5
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: LD_INT 5
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 4
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 4
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 4
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: LD_INT 4
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 5
56352: PUSH
56353: LD_INT 4
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 5
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 5
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 5
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 4
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 4
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 4
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 4
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 5
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 5
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// end ; end ;
56662: GO 56665
56664: POP
// case btype of b_depot , b_warehouse :
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 0
56672: DOUBLE
56673: EQUAL
56674: IFTRUE 56684
56676: LD_INT 1
56678: DOUBLE
56679: EQUAL
56680: IFTRUE 56684
56682: GO 56885
56684: POP
// case nation of nation_american :
56685: LD_VAR 0 5
56689: PUSH
56690: LD_INT 1
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56754
56698: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56699: LD_ADDR_VAR 0 9
56703: PUSH
56704: LD_VAR 0 11
56708: PUSH
56709: LD_VAR 0 12
56713: PUSH
56714: LD_VAR 0 13
56718: PUSH
56719: LD_VAR 0 14
56723: PUSH
56724: LD_VAR 0 15
56728: PUSH
56729: LD_VAR 0 16
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: PUSH
56742: LD_VAR 0 4
56746: PUSH
56747: LD_INT 1
56749: PLUS
56750: ARRAY
56751: ST_TO_ADDR
56752: GO 56883
56754: LD_INT 2
56756: DOUBLE
56757: EQUAL
56758: IFTRUE 56762
56760: GO 56818
56762: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56763: LD_ADDR_VAR 0 9
56767: PUSH
56768: LD_VAR 0 17
56772: PUSH
56773: LD_VAR 0 18
56777: PUSH
56778: LD_VAR 0 19
56782: PUSH
56783: LD_VAR 0 20
56787: PUSH
56788: LD_VAR 0 21
56792: PUSH
56793: LD_VAR 0 22
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: LD_VAR 0 4
56810: PUSH
56811: LD_INT 1
56813: PLUS
56814: ARRAY
56815: ST_TO_ADDR
56816: GO 56883
56818: LD_INT 3
56820: DOUBLE
56821: EQUAL
56822: IFTRUE 56826
56824: GO 56882
56826: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56827: LD_ADDR_VAR 0 9
56831: PUSH
56832: LD_VAR 0 23
56836: PUSH
56837: LD_VAR 0 24
56841: PUSH
56842: LD_VAR 0 25
56846: PUSH
56847: LD_VAR 0 26
56851: PUSH
56852: LD_VAR 0 27
56856: PUSH
56857: LD_VAR 0 28
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: PUSH
56870: LD_VAR 0 4
56874: PUSH
56875: LD_INT 1
56877: PLUS
56878: ARRAY
56879: ST_TO_ADDR
56880: GO 56883
56882: POP
56883: GO 57438
56885: LD_INT 2
56887: DOUBLE
56888: EQUAL
56889: IFTRUE 56899
56891: LD_INT 3
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56899
56897: GO 56955
56899: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56900: LD_ADDR_VAR 0 9
56904: PUSH
56905: LD_VAR 0 29
56909: PUSH
56910: LD_VAR 0 30
56914: PUSH
56915: LD_VAR 0 31
56919: PUSH
56920: LD_VAR 0 32
56924: PUSH
56925: LD_VAR 0 33
56929: PUSH
56930: LD_VAR 0 34
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: PUSH
56943: LD_VAR 0 4
56947: PUSH
56948: LD_INT 1
56950: PLUS
56951: ARRAY
56952: ST_TO_ADDR
56953: GO 57438
56955: LD_INT 16
56957: DOUBLE
56958: EQUAL
56959: IFTRUE 57017
56961: LD_INT 17
56963: DOUBLE
56964: EQUAL
56965: IFTRUE 57017
56967: LD_INT 18
56969: DOUBLE
56970: EQUAL
56971: IFTRUE 57017
56973: LD_INT 19
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 57017
56979: LD_INT 22
56981: DOUBLE
56982: EQUAL
56983: IFTRUE 57017
56985: LD_INT 20
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 57017
56991: LD_INT 21
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 57017
56997: LD_INT 23
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57017
57003: LD_INT 24
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57017
57009: LD_INT 25
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57017
57015: GO 57073
57017: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57018: LD_ADDR_VAR 0 9
57022: PUSH
57023: LD_VAR 0 35
57027: PUSH
57028: LD_VAR 0 36
57032: PUSH
57033: LD_VAR 0 37
57037: PUSH
57038: LD_VAR 0 38
57042: PUSH
57043: LD_VAR 0 39
57047: PUSH
57048: LD_VAR 0 40
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: LD_VAR 0 4
57065: PUSH
57066: LD_INT 1
57068: PLUS
57069: ARRAY
57070: ST_TO_ADDR
57071: GO 57438
57073: LD_INT 6
57075: DOUBLE
57076: EQUAL
57077: IFTRUE 57129
57079: LD_INT 7
57081: DOUBLE
57082: EQUAL
57083: IFTRUE 57129
57085: LD_INT 8
57087: DOUBLE
57088: EQUAL
57089: IFTRUE 57129
57091: LD_INT 13
57093: DOUBLE
57094: EQUAL
57095: IFTRUE 57129
57097: LD_INT 12
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57129
57103: LD_INT 15
57105: DOUBLE
57106: EQUAL
57107: IFTRUE 57129
57109: LD_INT 11
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57129
57115: LD_INT 14
57117: DOUBLE
57118: EQUAL
57119: IFTRUE 57129
57121: LD_INT 10
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57129
57127: GO 57185
57129: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57130: LD_ADDR_VAR 0 9
57134: PUSH
57135: LD_VAR 0 41
57139: PUSH
57140: LD_VAR 0 42
57144: PUSH
57145: LD_VAR 0 43
57149: PUSH
57150: LD_VAR 0 44
57154: PUSH
57155: LD_VAR 0 45
57159: PUSH
57160: LD_VAR 0 46
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: PUSH
57173: LD_VAR 0 4
57177: PUSH
57178: LD_INT 1
57180: PLUS
57181: ARRAY
57182: ST_TO_ADDR
57183: GO 57438
57185: LD_INT 36
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57193
57191: GO 57249
57193: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57194: LD_ADDR_VAR 0 9
57198: PUSH
57199: LD_VAR 0 47
57203: PUSH
57204: LD_VAR 0 48
57208: PUSH
57209: LD_VAR 0 49
57213: PUSH
57214: LD_VAR 0 50
57218: PUSH
57219: LD_VAR 0 51
57223: PUSH
57224: LD_VAR 0 52
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: PUSH
57237: LD_VAR 0 4
57241: PUSH
57242: LD_INT 1
57244: PLUS
57245: ARRAY
57246: ST_TO_ADDR
57247: GO 57438
57249: LD_INT 4
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57275
57255: LD_INT 5
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57275
57261: LD_INT 34
57263: DOUBLE
57264: EQUAL
57265: IFTRUE 57275
57267: LD_INT 37
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57275
57273: GO 57331
57275: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57276: LD_ADDR_VAR 0 9
57280: PUSH
57281: LD_VAR 0 53
57285: PUSH
57286: LD_VAR 0 54
57290: PUSH
57291: LD_VAR 0 55
57295: PUSH
57296: LD_VAR 0 56
57300: PUSH
57301: LD_VAR 0 57
57305: PUSH
57306: LD_VAR 0 58
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: PUSH
57319: LD_VAR 0 4
57323: PUSH
57324: LD_INT 1
57326: PLUS
57327: ARRAY
57328: ST_TO_ADDR
57329: GO 57438
57331: LD_INT 31
57333: DOUBLE
57334: EQUAL
57335: IFTRUE 57381
57337: LD_INT 32
57339: DOUBLE
57340: EQUAL
57341: IFTRUE 57381
57343: LD_INT 33
57345: DOUBLE
57346: EQUAL
57347: IFTRUE 57381
57349: LD_INT 27
57351: DOUBLE
57352: EQUAL
57353: IFTRUE 57381
57355: LD_INT 26
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57381
57361: LD_INT 28
57363: DOUBLE
57364: EQUAL
57365: IFTRUE 57381
57367: LD_INT 29
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57381
57373: LD_INT 30
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57381
57379: GO 57437
57381: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57382: LD_ADDR_VAR 0 9
57386: PUSH
57387: LD_VAR 0 59
57391: PUSH
57392: LD_VAR 0 60
57396: PUSH
57397: LD_VAR 0 61
57401: PUSH
57402: LD_VAR 0 62
57406: PUSH
57407: LD_VAR 0 63
57411: PUSH
57412: LD_VAR 0 64
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: LD_VAR 0 4
57429: PUSH
57430: LD_INT 1
57432: PLUS
57433: ARRAY
57434: ST_TO_ADDR
57435: GO 57438
57437: POP
// temp_list2 = [ ] ;
57438: LD_ADDR_VAR 0 10
57442: PUSH
57443: EMPTY
57444: ST_TO_ADDR
// for i in temp_list do
57445: LD_ADDR_VAR 0 8
57449: PUSH
57450: LD_VAR 0 9
57454: PUSH
57455: FOR_IN
57456: IFFALSE 57508
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57458: LD_ADDR_VAR 0 10
57462: PUSH
57463: LD_VAR 0 10
57467: PUSH
57468: LD_VAR 0 8
57472: PUSH
57473: LD_INT 1
57475: ARRAY
57476: PUSH
57477: LD_VAR 0 2
57481: PLUS
57482: PUSH
57483: LD_VAR 0 8
57487: PUSH
57488: LD_INT 2
57490: ARRAY
57491: PUSH
57492: LD_VAR 0 3
57496: PLUS
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: ADD
57505: ST_TO_ADDR
57506: GO 57455
57508: POP
57509: POP
// result = temp_list2 ;
57510: LD_ADDR_VAR 0 7
57514: PUSH
57515: LD_VAR 0 10
57519: ST_TO_ADDR
// end ;
57520: LD_VAR 0 7
57524: RET
// export function EnemyInRange ( unit , dist ) ; begin
57525: LD_INT 0
57527: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57528: LD_ADDR_VAR 0 3
57532: PUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 255
57542: PPUSH
57543: LD_VAR 0 1
57547: PPUSH
57548: CALL_OW 250
57552: PPUSH
57553: LD_VAR 0 1
57557: PPUSH
57558: CALL_OW 251
57562: PPUSH
57563: LD_VAR 0 2
57567: PPUSH
57568: CALL 30782 0 4
57572: PUSH
57573: LD_INT 4
57575: ARRAY
57576: ST_TO_ADDR
// end ;
57577: LD_VAR 0 3
57581: RET
// export function PlayerSeeMe ( unit ) ; begin
57582: LD_INT 0
57584: PPUSH
// result := See ( your_side , unit ) ;
57585: LD_ADDR_VAR 0 2
57589: PUSH
57590: LD_OWVAR 2
57594: PPUSH
57595: LD_VAR 0 1
57599: PPUSH
57600: CALL_OW 292
57604: ST_TO_ADDR
// end ;
57605: LD_VAR 0 2
57609: RET
// export function ReverseDir ( unit ) ; begin
57610: LD_INT 0
57612: PPUSH
// if not unit then
57613: LD_VAR 0 1
57617: NOT
57618: IFFALSE 57622
// exit ;
57620: GO 57645
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57622: LD_ADDR_VAR 0 2
57626: PUSH
57627: LD_VAR 0 1
57631: PPUSH
57632: CALL_OW 254
57636: PUSH
57637: LD_INT 3
57639: PLUS
57640: PUSH
57641: LD_INT 6
57643: MOD
57644: ST_TO_ADDR
// end ;
57645: LD_VAR 0 2
57649: RET
// export function ReverseArray ( array ) ; var i ; begin
57650: LD_INT 0
57652: PPUSH
57653: PPUSH
// if not array then
57654: LD_VAR 0 1
57658: NOT
57659: IFFALSE 57663
// exit ;
57661: GO 57718
// result := [ ] ;
57663: LD_ADDR_VAR 0 2
57667: PUSH
57668: EMPTY
57669: ST_TO_ADDR
// for i := array downto 1 do
57670: LD_ADDR_VAR 0 3
57674: PUSH
57675: DOUBLE
57676: LD_VAR 0 1
57680: INC
57681: ST_TO_ADDR
57682: LD_INT 1
57684: PUSH
57685: FOR_DOWNTO
57686: IFFALSE 57716
// result := Join ( result , array [ i ] ) ;
57688: LD_ADDR_VAR 0 2
57692: PUSH
57693: LD_VAR 0 2
57697: PPUSH
57698: LD_VAR 0 1
57702: PUSH
57703: LD_VAR 0 3
57707: ARRAY
57708: PPUSH
57709: CALL 62560 0 2
57713: ST_TO_ADDR
57714: GO 57685
57716: POP
57717: POP
// end ;
57718: LD_VAR 0 2
57722: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57723: LD_INT 0
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
// if not unit or not hexes then
57731: LD_VAR 0 1
57735: NOT
57736: IFTRUE 57745
57738: PUSH
57739: LD_VAR 0 2
57743: NOT
57744: OR
57745: IFFALSE 57749
// exit ;
57747: GO 57872
// dist := 9999 ;
57749: LD_ADDR_VAR 0 5
57753: PUSH
57754: LD_INT 9999
57756: ST_TO_ADDR
// for i = 1 to hexes do
57757: LD_ADDR_VAR 0 4
57761: PUSH
57762: DOUBLE
57763: LD_INT 1
57765: DEC
57766: ST_TO_ADDR
57767: LD_VAR 0 2
57771: PUSH
57772: FOR_TO
57773: IFFALSE 57860
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57775: LD_ADDR_VAR 0 6
57779: PUSH
57780: LD_VAR 0 1
57784: PPUSH
57785: LD_VAR 0 2
57789: PUSH
57790: LD_VAR 0 4
57794: ARRAY
57795: PUSH
57796: LD_INT 1
57798: ARRAY
57799: PPUSH
57800: LD_VAR 0 2
57804: PUSH
57805: LD_VAR 0 4
57809: ARRAY
57810: PUSH
57811: LD_INT 2
57813: ARRAY
57814: PPUSH
57815: CALL_OW 297
57819: ST_TO_ADDR
// if tdist < dist then
57820: LD_VAR 0 6
57824: PUSH
57825: LD_VAR 0 5
57829: LESS
57830: IFFALSE 57858
// begin hex := hexes [ i ] ;
57832: LD_ADDR_VAR 0 8
57836: PUSH
57837: LD_VAR 0 2
57841: PUSH
57842: LD_VAR 0 4
57846: ARRAY
57847: ST_TO_ADDR
// dist := tdist ;
57848: LD_ADDR_VAR 0 5
57852: PUSH
57853: LD_VAR 0 6
57857: ST_TO_ADDR
// end ; end ;
57858: GO 57772
57860: POP
57861: POP
// result := hex ;
57862: LD_ADDR_VAR 0 3
57866: PUSH
57867: LD_VAR 0 8
57871: ST_TO_ADDR
// end ;
57872: LD_VAR 0 3
57876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57877: LD_INT 0
57879: PPUSH
57880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57881: LD_VAR 0 1
57885: NOT
57886: IFTRUE 57925
57888: PUSH
57889: LD_VAR 0 1
57893: PUSH
57894: LD_INT 21
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 23
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PPUSH
57918: CALL_OW 69
57922: IN
57923: NOT
57924: OR
57925: IFFALSE 57929
// exit ;
57927: GO 57976
// for i = 1 to 3 do
57929: LD_ADDR_VAR 0 3
57933: PUSH
57934: DOUBLE
57935: LD_INT 1
57937: DEC
57938: ST_TO_ADDR
57939: LD_INT 3
57941: PUSH
57942: FOR_TO
57943: IFFALSE 57974
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 250
57954: PPUSH
57955: LD_VAR 0 1
57959: PPUSH
57960: CALL_OW 251
57964: PPUSH
57965: LD_INT 1
57967: PPUSH
57968: CALL_OW 453
57972: GO 57942
57974: POP
57975: POP
// end ;
57976: LD_VAR 0 2
57980: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57981: LD_INT 0
57983: PPUSH
57984: PPUSH
57985: PPUSH
57986: PPUSH
57987: PPUSH
57988: PPUSH
// if not unit or not enemy_unit then
57989: LD_VAR 0 1
57993: NOT
57994: IFTRUE 58003
57996: PUSH
57997: LD_VAR 0 2
58001: NOT
58002: OR
58003: IFFALSE 58007
// exit ;
58005: GO 58478
// if GetLives ( i ) < 250 then
58007: LD_VAR 0 4
58011: PPUSH
58012: CALL_OW 256
58016: PUSH
58017: LD_INT 250
58019: LESS
58020: IFFALSE 58033
// begin ComAutodestruct ( i ) ;
58022: LD_VAR 0 4
58026: PPUSH
58027: CALL 57877 0 1
// exit ;
58031: GO 58478
// end ; x := GetX ( enemy_unit ) ;
58033: LD_ADDR_VAR 0 7
58037: PUSH
58038: LD_VAR 0 2
58042: PPUSH
58043: CALL_OW 250
58047: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58048: LD_ADDR_VAR 0 8
58052: PUSH
58053: LD_VAR 0 2
58057: PPUSH
58058: CALL_OW 251
58062: ST_TO_ADDR
// if not x or not y then
58063: LD_VAR 0 7
58067: NOT
58068: IFTRUE 58077
58070: PUSH
58071: LD_VAR 0 8
58075: NOT
58076: OR
58077: IFFALSE 58081
// exit ;
58079: GO 58478
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58081: LD_ADDR_VAR 0 6
58085: PUSH
58086: LD_VAR 0 7
58090: PPUSH
58091: LD_INT 0
58093: PPUSH
58094: LD_INT 4
58096: PPUSH
58097: CALL_OW 272
58101: PUSH
58102: LD_VAR 0 8
58106: PPUSH
58107: LD_INT 0
58109: PPUSH
58110: LD_INT 4
58112: PPUSH
58113: CALL_OW 273
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_VAR 0 7
58126: PPUSH
58127: LD_INT 1
58129: PPUSH
58130: LD_INT 4
58132: PPUSH
58133: CALL_OW 272
58137: PUSH
58138: LD_VAR 0 8
58142: PPUSH
58143: LD_INT 1
58145: PPUSH
58146: LD_INT 4
58148: PPUSH
58149: CALL_OW 273
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_VAR 0 7
58162: PPUSH
58163: LD_INT 2
58165: PPUSH
58166: LD_INT 4
58168: PPUSH
58169: CALL_OW 272
58173: PUSH
58174: LD_VAR 0 8
58178: PPUSH
58179: LD_INT 2
58181: PPUSH
58182: LD_INT 4
58184: PPUSH
58185: CALL_OW 273
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_VAR 0 7
58198: PPUSH
58199: LD_INT 3
58201: PPUSH
58202: LD_INT 4
58204: PPUSH
58205: CALL_OW 272
58209: PUSH
58210: LD_VAR 0 8
58214: PPUSH
58215: LD_INT 3
58217: PPUSH
58218: LD_INT 4
58220: PPUSH
58221: CALL_OW 273
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_VAR 0 7
58234: PPUSH
58235: LD_INT 4
58237: PPUSH
58238: LD_INT 4
58240: PPUSH
58241: CALL_OW 272
58245: PUSH
58246: LD_VAR 0 8
58250: PPUSH
58251: LD_INT 4
58253: PPUSH
58254: LD_INT 4
58256: PPUSH
58257: CALL_OW 273
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_VAR 0 7
58270: PPUSH
58271: LD_INT 5
58273: PPUSH
58274: LD_INT 4
58276: PPUSH
58277: CALL_OW 272
58281: PUSH
58282: LD_VAR 0 8
58286: PPUSH
58287: LD_INT 5
58289: PPUSH
58290: LD_INT 4
58292: PPUSH
58293: CALL_OW 273
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// for i = tmp downto 1 do
58310: LD_ADDR_VAR 0 4
58314: PUSH
58315: DOUBLE
58316: LD_VAR 0 6
58320: INC
58321: ST_TO_ADDR
58322: LD_INT 1
58324: PUSH
58325: FOR_DOWNTO
58326: IFFALSE 58429
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58328: LD_VAR 0 6
58332: PUSH
58333: LD_VAR 0 4
58337: ARRAY
58338: PUSH
58339: LD_INT 1
58341: ARRAY
58342: PPUSH
58343: LD_VAR 0 6
58347: PUSH
58348: LD_VAR 0 4
58352: ARRAY
58353: PUSH
58354: LD_INT 2
58356: ARRAY
58357: PPUSH
58358: CALL_OW 488
58362: NOT
58363: IFTRUE 58405
58365: PUSH
58366: LD_VAR 0 6
58370: PUSH
58371: LD_VAR 0 4
58375: ARRAY
58376: PUSH
58377: LD_INT 1
58379: ARRAY
58380: PPUSH
58381: LD_VAR 0 6
58385: PUSH
58386: LD_VAR 0 4
58390: ARRAY
58391: PUSH
58392: LD_INT 2
58394: ARRAY
58395: PPUSH
58396: CALL_OW 428
58400: PUSH
58401: LD_INT 0
58403: NONEQUAL
58404: OR
58405: IFFALSE 58427
// tmp := Delete ( tmp , i ) ;
58407: LD_ADDR_VAR 0 6
58411: PUSH
58412: LD_VAR 0 6
58416: PPUSH
58417: LD_VAR 0 4
58421: PPUSH
58422: CALL_OW 3
58426: ST_TO_ADDR
58427: GO 58325
58429: POP
58430: POP
// j := GetClosestHex ( unit , tmp ) ;
58431: LD_ADDR_VAR 0 5
58435: PUSH
58436: LD_VAR 0 1
58440: PPUSH
58441: LD_VAR 0 6
58445: PPUSH
58446: CALL 57723 0 2
58450: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58451: LD_VAR 0 1
58455: PPUSH
58456: LD_VAR 0 5
58460: PUSH
58461: LD_INT 1
58463: ARRAY
58464: PPUSH
58465: LD_VAR 0 5
58469: PUSH
58470: LD_INT 2
58472: ARRAY
58473: PPUSH
58474: CALL_OW 111
// end ;
58478: LD_VAR 0 3
58482: RET
// export function PrepareApemanSoldier ( ) ; begin
58483: LD_INT 0
58485: PPUSH
// uc_nation := 0 ;
58486: LD_ADDR_OWVAR 21
58490: PUSH
58491: LD_INT 0
58493: ST_TO_ADDR
// hc_sex := sex_male ;
58494: LD_ADDR_OWVAR 27
58498: PUSH
58499: LD_INT 1
58501: ST_TO_ADDR
// hc_name :=  ;
58502: LD_ADDR_OWVAR 26
58506: PUSH
58507: LD_STRING 
58509: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58510: LD_ADDR_OWVAR 28
58514: PUSH
58515: LD_INT 15
58517: ST_TO_ADDR
// hc_gallery :=  ;
58518: LD_ADDR_OWVAR 33
58522: PUSH
58523: LD_STRING 
58525: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58526: LD_ADDR_OWVAR 31
58530: PUSH
58531: LD_INT 0
58533: PPUSH
58534: LD_INT 3
58536: PPUSH
58537: CALL_OW 12
58541: PUSH
58542: LD_INT 0
58544: PPUSH
58545: LD_INT 3
58547: PPUSH
58548: CALL_OW 12
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58565: LD_ADDR_OWVAR 29
58569: PUSH
58570: LD_INT 12
58572: PUSH
58573: LD_INT 12
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: ST_TO_ADDR
// end ;
58580: LD_VAR 0 1
58584: RET
// export function PrepareApemanEngineer ( ) ; begin
58585: LD_INT 0
58587: PPUSH
// uc_nation := 0 ;
58588: LD_ADDR_OWVAR 21
58592: PUSH
58593: LD_INT 0
58595: ST_TO_ADDR
// hc_sex := sex_male ;
58596: LD_ADDR_OWVAR 27
58600: PUSH
58601: LD_INT 1
58603: ST_TO_ADDR
// hc_name :=  ;
58604: LD_ADDR_OWVAR 26
58608: PUSH
58609: LD_STRING 
58611: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58612: LD_ADDR_OWVAR 28
58616: PUSH
58617: LD_INT 16
58619: ST_TO_ADDR
// hc_gallery :=  ;
58620: LD_ADDR_OWVAR 33
58624: PUSH
58625: LD_STRING 
58627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58628: LD_ADDR_OWVAR 31
58632: PUSH
58633: LD_INT 0
58635: PPUSH
58636: LD_INT 3
58638: PPUSH
58639: CALL_OW 12
58643: PUSH
58644: LD_INT 0
58646: PPUSH
58647: LD_INT 3
58649: PPUSH
58650: CALL_OW 12
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58667: LD_ADDR_OWVAR 29
58671: PUSH
58672: LD_INT 12
58674: PUSH
58675: LD_INT 12
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// end ;
58682: LD_VAR 0 1
58686: RET
// export function PrepareApeman ( agressivity ) ; begin
58687: LD_INT 0
58689: PPUSH
// uc_side := 0 ;
58690: LD_ADDR_OWVAR 20
58694: PUSH
58695: LD_INT 0
58697: ST_TO_ADDR
// uc_nation := 0 ;
58698: LD_ADDR_OWVAR 21
58702: PUSH
58703: LD_INT 0
58705: ST_TO_ADDR
// hc_sex := sex_male ;
58706: LD_ADDR_OWVAR 27
58710: PUSH
58711: LD_INT 1
58713: ST_TO_ADDR
// hc_class := class_apeman ;
58714: LD_ADDR_OWVAR 28
58718: PUSH
58719: LD_INT 12
58721: ST_TO_ADDR
// hc_gallery :=  ;
58722: LD_ADDR_OWVAR 33
58726: PUSH
58727: LD_STRING 
58729: ST_TO_ADDR
// hc_name :=  ;
58730: LD_ADDR_OWVAR 26
58734: PUSH
58735: LD_STRING 
58737: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58738: LD_ADDR_OWVAR 29
58742: PUSH
58743: LD_INT 12
58745: PUSH
58746: LD_INT 12
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// if agressivity = 0 then
58753: LD_VAR 0 1
58757: PUSH
58758: LD_INT 0
58760: EQUAL
58761: IFFALSE 58773
// hc_agressivity := 0 else
58763: LD_ADDR_OWVAR 35
58767: PUSH
58768: LD_INT 0
58770: ST_TO_ADDR
58771: GO 58794
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58773: LD_ADDR_OWVAR 35
58777: PUSH
58778: LD_VAR 0 1
58782: NEG
58783: PPUSH
58784: LD_VAR 0 1
58788: PPUSH
58789: CALL_OW 12
58793: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58794: LD_ADDR_OWVAR 31
58798: PUSH
58799: LD_INT 0
58801: PPUSH
58802: LD_INT 3
58804: PPUSH
58805: CALL_OW 12
58809: PUSH
58810: LD_INT 0
58812: PPUSH
58813: LD_INT 3
58815: PPUSH
58816: CALL_OW 12
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// end ;
58833: LD_VAR 0 2
58837: RET
// export function PrepareTiger ( agressivity ) ; begin
58838: LD_INT 0
58840: PPUSH
// uc_side := 0 ;
58841: LD_ADDR_OWVAR 20
58845: PUSH
58846: LD_INT 0
58848: ST_TO_ADDR
// uc_nation := 0 ;
58849: LD_ADDR_OWVAR 21
58853: PUSH
58854: LD_INT 0
58856: ST_TO_ADDR
// InitHc ;
58857: CALL_OW 19
// hc_class := class_tiger ;
58861: LD_ADDR_OWVAR 28
58865: PUSH
58866: LD_INT 14
58868: ST_TO_ADDR
// hc_gallery :=  ;
58869: LD_ADDR_OWVAR 33
58873: PUSH
58874: LD_STRING 
58876: ST_TO_ADDR
// hc_name :=  ;
58877: LD_ADDR_OWVAR 26
58881: PUSH
58882: LD_STRING 
58884: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58885: LD_ADDR_OWVAR 35
58889: PUSH
58890: LD_VAR 0 1
58894: NEG
58895: PPUSH
58896: LD_VAR 0 1
58900: PPUSH
58901: CALL_OW 12
58905: ST_TO_ADDR
// end ;
58906: LD_VAR 0 2
58910: RET
// export function PrepareEnchidna ( ) ; begin
58911: LD_INT 0
58913: PPUSH
// uc_side := 0 ;
58914: LD_ADDR_OWVAR 20
58918: PUSH
58919: LD_INT 0
58921: ST_TO_ADDR
// uc_nation := 0 ;
58922: LD_ADDR_OWVAR 21
58926: PUSH
58927: LD_INT 0
58929: ST_TO_ADDR
// InitHc ;
58930: CALL_OW 19
// hc_class := class_baggie ;
58934: LD_ADDR_OWVAR 28
58938: PUSH
58939: LD_INT 13
58941: ST_TO_ADDR
// hc_gallery :=  ;
58942: LD_ADDR_OWVAR 33
58946: PUSH
58947: LD_STRING 
58949: ST_TO_ADDR
// hc_name :=  ;
58950: LD_ADDR_OWVAR 26
58954: PUSH
58955: LD_STRING 
58957: ST_TO_ADDR
// end ;
58958: LD_VAR 0 1
58962: RET
// export function PrepareFrog ( ) ; begin
58963: LD_INT 0
58965: PPUSH
// uc_side := 0 ;
58966: LD_ADDR_OWVAR 20
58970: PUSH
58971: LD_INT 0
58973: ST_TO_ADDR
// uc_nation := 0 ;
58974: LD_ADDR_OWVAR 21
58978: PUSH
58979: LD_INT 0
58981: ST_TO_ADDR
// InitHc ;
58982: CALL_OW 19
// hc_class := class_frog ;
58986: LD_ADDR_OWVAR 28
58990: PUSH
58991: LD_INT 19
58993: ST_TO_ADDR
// hc_gallery :=  ;
58994: LD_ADDR_OWVAR 33
58998: PUSH
58999: LD_STRING 
59001: ST_TO_ADDR
// hc_name :=  ;
59002: LD_ADDR_OWVAR 26
59006: PUSH
59007: LD_STRING 
59009: ST_TO_ADDR
// end ;
59010: LD_VAR 0 1
59014: RET
// export function PrepareFish ( ) ; begin
59015: LD_INT 0
59017: PPUSH
// uc_side := 0 ;
59018: LD_ADDR_OWVAR 20
59022: PUSH
59023: LD_INT 0
59025: ST_TO_ADDR
// uc_nation := 0 ;
59026: LD_ADDR_OWVAR 21
59030: PUSH
59031: LD_INT 0
59033: ST_TO_ADDR
// InitHc ;
59034: CALL_OW 19
// hc_class := class_fish ;
59038: LD_ADDR_OWVAR 28
59042: PUSH
59043: LD_INT 20
59045: ST_TO_ADDR
// hc_gallery :=  ;
59046: LD_ADDR_OWVAR 33
59050: PUSH
59051: LD_STRING 
59053: ST_TO_ADDR
// hc_name :=  ;
59054: LD_ADDR_OWVAR 26
59058: PUSH
59059: LD_STRING 
59061: ST_TO_ADDR
// end ;
59062: LD_VAR 0 1
59066: RET
// export function PrepareBird ( ) ; begin
59067: LD_INT 0
59069: PPUSH
// uc_side := 0 ;
59070: LD_ADDR_OWVAR 20
59074: PUSH
59075: LD_INT 0
59077: ST_TO_ADDR
// uc_nation := 0 ;
59078: LD_ADDR_OWVAR 21
59082: PUSH
59083: LD_INT 0
59085: ST_TO_ADDR
// InitHc ;
59086: CALL_OW 19
// hc_class := class_phororhacos ;
59090: LD_ADDR_OWVAR 28
59094: PUSH
59095: LD_INT 18
59097: ST_TO_ADDR
// hc_gallery :=  ;
59098: LD_ADDR_OWVAR 33
59102: PUSH
59103: LD_STRING 
59105: ST_TO_ADDR
// hc_name :=  ;
59106: LD_ADDR_OWVAR 26
59110: PUSH
59111: LD_STRING 
59113: ST_TO_ADDR
// end ;
59114: LD_VAR 0 1
59118: RET
// export function PrepareHorse ( ) ; begin
59119: LD_INT 0
59121: PPUSH
// uc_side := 0 ;
59122: LD_ADDR_OWVAR 20
59126: PUSH
59127: LD_INT 0
59129: ST_TO_ADDR
// uc_nation := 0 ;
59130: LD_ADDR_OWVAR 21
59134: PUSH
59135: LD_INT 0
59137: ST_TO_ADDR
// InitHc ;
59138: CALL_OW 19
// hc_class := class_horse ;
59142: LD_ADDR_OWVAR 28
59146: PUSH
59147: LD_INT 21
59149: ST_TO_ADDR
// hc_gallery :=  ;
59150: LD_ADDR_OWVAR 33
59154: PUSH
59155: LD_STRING 
59157: ST_TO_ADDR
// hc_name :=  ;
59158: LD_ADDR_OWVAR 26
59162: PUSH
59163: LD_STRING 
59165: ST_TO_ADDR
// end ;
59166: LD_VAR 0 1
59170: RET
// export function PrepareMastodont ( ) ; begin
59171: LD_INT 0
59173: PPUSH
// uc_side := 0 ;
59174: LD_ADDR_OWVAR 20
59178: PUSH
59179: LD_INT 0
59181: ST_TO_ADDR
// uc_nation := 0 ;
59182: LD_ADDR_OWVAR 21
59186: PUSH
59187: LD_INT 0
59189: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59190: LD_ADDR_OWVAR 37
59194: PUSH
59195: LD_INT 31
59197: ST_TO_ADDR
// vc_control := control_rider ;
59198: LD_ADDR_OWVAR 38
59202: PUSH
59203: LD_INT 4
59205: ST_TO_ADDR
// end ;
59206: LD_VAR 0 1
59210: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59211: LD_INT 0
59213: PPUSH
59214: PPUSH
59215: PPUSH
// uc_side = 0 ;
59216: LD_ADDR_OWVAR 20
59220: PUSH
59221: LD_INT 0
59223: ST_TO_ADDR
// uc_nation = 0 ;
59224: LD_ADDR_OWVAR 21
59228: PUSH
59229: LD_INT 0
59231: ST_TO_ADDR
// InitHc_All ( ) ;
59232: CALL_OW 584
// InitVc ;
59236: CALL_OW 20
// if mastodonts then
59240: LD_VAR 0 6
59244: IFFALSE 59311
// for i = 1 to mastodonts do
59246: LD_ADDR_VAR 0 11
59250: PUSH
59251: DOUBLE
59252: LD_INT 1
59254: DEC
59255: ST_TO_ADDR
59256: LD_VAR 0 6
59260: PUSH
59261: FOR_TO
59262: IFFALSE 59309
// begin vc_chassis := 31 ;
59264: LD_ADDR_OWVAR 37
59268: PUSH
59269: LD_INT 31
59271: ST_TO_ADDR
// vc_control := control_rider ;
59272: LD_ADDR_OWVAR 38
59276: PUSH
59277: LD_INT 4
59279: ST_TO_ADDR
// animal := CreateVehicle ;
59280: LD_ADDR_VAR 0 12
59284: PUSH
59285: CALL_OW 45
59289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59290: LD_VAR 0 12
59294: PPUSH
59295: LD_VAR 0 8
59299: PPUSH
59300: LD_INT 0
59302: PPUSH
59303: CALL 61453 0 3
// end ;
59307: GO 59261
59309: POP
59310: POP
// if horses then
59311: LD_VAR 0 5
59315: IFFALSE 59382
// for i = 1 to horses do
59317: LD_ADDR_VAR 0 11
59321: PUSH
59322: DOUBLE
59323: LD_INT 1
59325: DEC
59326: ST_TO_ADDR
59327: LD_VAR 0 5
59331: PUSH
59332: FOR_TO
59333: IFFALSE 59380
// begin hc_class := 21 ;
59335: LD_ADDR_OWVAR 28
59339: PUSH
59340: LD_INT 21
59342: ST_TO_ADDR
// hc_gallery :=  ;
59343: LD_ADDR_OWVAR 33
59347: PUSH
59348: LD_STRING 
59350: ST_TO_ADDR
// animal := CreateHuman ;
59351: LD_ADDR_VAR 0 12
59355: PUSH
59356: CALL_OW 44
59360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59361: LD_VAR 0 12
59365: PPUSH
59366: LD_VAR 0 8
59370: PPUSH
59371: LD_INT 0
59373: PPUSH
59374: CALL 61453 0 3
// end ;
59378: GO 59332
59380: POP
59381: POP
// if birds then
59382: LD_VAR 0 1
59386: IFFALSE 59453
// for i = 1 to birds do
59388: LD_ADDR_VAR 0 11
59392: PUSH
59393: DOUBLE
59394: LD_INT 1
59396: DEC
59397: ST_TO_ADDR
59398: LD_VAR 0 1
59402: PUSH
59403: FOR_TO
59404: IFFALSE 59451
// begin hc_class := 18 ;
59406: LD_ADDR_OWVAR 28
59410: PUSH
59411: LD_INT 18
59413: ST_TO_ADDR
// hc_gallery =  ;
59414: LD_ADDR_OWVAR 33
59418: PUSH
59419: LD_STRING 
59421: ST_TO_ADDR
// animal := CreateHuman ;
59422: LD_ADDR_VAR 0 12
59426: PUSH
59427: CALL_OW 44
59431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59432: LD_VAR 0 12
59436: PPUSH
59437: LD_VAR 0 8
59441: PPUSH
59442: LD_INT 0
59444: PPUSH
59445: CALL 61453 0 3
// end ;
59449: GO 59403
59451: POP
59452: POP
// if tigers then
59453: LD_VAR 0 2
59457: IFFALSE 59541
// for i = 1 to tigers do
59459: LD_ADDR_VAR 0 11
59463: PUSH
59464: DOUBLE
59465: LD_INT 1
59467: DEC
59468: ST_TO_ADDR
59469: LD_VAR 0 2
59473: PUSH
59474: FOR_TO
59475: IFFALSE 59539
// begin hc_class = class_tiger ;
59477: LD_ADDR_OWVAR 28
59481: PUSH
59482: LD_INT 14
59484: ST_TO_ADDR
// hc_gallery =  ;
59485: LD_ADDR_OWVAR 33
59489: PUSH
59490: LD_STRING 
59492: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59493: LD_ADDR_OWVAR 35
59497: PUSH
59498: LD_INT 7
59500: NEG
59501: PPUSH
59502: LD_INT 7
59504: PPUSH
59505: CALL_OW 12
59509: ST_TO_ADDR
// animal := CreateHuman ;
59510: LD_ADDR_VAR 0 12
59514: PUSH
59515: CALL_OW 44
59519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59520: LD_VAR 0 12
59524: PPUSH
59525: LD_VAR 0 8
59529: PPUSH
59530: LD_INT 0
59532: PPUSH
59533: CALL 61453 0 3
// end ;
59537: GO 59474
59539: POP
59540: POP
// if apemans then
59541: LD_VAR 0 3
59545: IFFALSE 59668
// for i = 1 to apemans do
59547: LD_ADDR_VAR 0 11
59551: PUSH
59552: DOUBLE
59553: LD_INT 1
59555: DEC
59556: ST_TO_ADDR
59557: LD_VAR 0 3
59561: PUSH
59562: FOR_TO
59563: IFFALSE 59666
// begin hc_class = class_apeman ;
59565: LD_ADDR_OWVAR 28
59569: PUSH
59570: LD_INT 12
59572: ST_TO_ADDR
// hc_gallery =  ;
59573: LD_ADDR_OWVAR 33
59577: PUSH
59578: LD_STRING 
59580: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59581: LD_ADDR_OWVAR 35
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PPUSH
59590: LD_INT 2
59592: PPUSH
59593: CALL_OW 12
59597: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59598: LD_ADDR_OWVAR 31
59602: PUSH
59603: LD_INT 1
59605: PPUSH
59606: LD_INT 3
59608: PPUSH
59609: CALL_OW 12
59613: PUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 3
59619: PPUSH
59620: CALL_OW 12
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: ST_TO_ADDR
// animal := CreateHuman ;
59637: LD_ADDR_VAR 0 12
59641: PUSH
59642: CALL_OW 44
59646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59647: LD_VAR 0 12
59651: PPUSH
59652: LD_VAR 0 8
59656: PPUSH
59657: LD_INT 0
59659: PPUSH
59660: CALL 61453 0 3
// end ;
59664: GO 59562
59666: POP
59667: POP
// if enchidnas then
59668: LD_VAR 0 4
59672: IFFALSE 59739
// for i = 1 to enchidnas do
59674: LD_ADDR_VAR 0 11
59678: PUSH
59679: DOUBLE
59680: LD_INT 1
59682: DEC
59683: ST_TO_ADDR
59684: LD_VAR 0 4
59688: PUSH
59689: FOR_TO
59690: IFFALSE 59737
// begin hc_class = 13 ;
59692: LD_ADDR_OWVAR 28
59696: PUSH
59697: LD_INT 13
59699: ST_TO_ADDR
// hc_gallery =  ;
59700: LD_ADDR_OWVAR 33
59704: PUSH
59705: LD_STRING 
59707: ST_TO_ADDR
// animal := CreateHuman ;
59708: LD_ADDR_VAR 0 12
59712: PUSH
59713: CALL_OW 44
59717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59718: LD_VAR 0 12
59722: PPUSH
59723: LD_VAR 0 8
59727: PPUSH
59728: LD_INT 0
59730: PPUSH
59731: CALL 61453 0 3
// end ;
59735: GO 59689
59737: POP
59738: POP
// if fishes then
59739: LD_VAR 0 7
59743: IFFALSE 59810
// for i = 1 to fishes do
59745: LD_ADDR_VAR 0 11
59749: PUSH
59750: DOUBLE
59751: LD_INT 1
59753: DEC
59754: ST_TO_ADDR
59755: LD_VAR 0 7
59759: PUSH
59760: FOR_TO
59761: IFFALSE 59808
// begin hc_class = 20 ;
59763: LD_ADDR_OWVAR 28
59767: PUSH
59768: LD_INT 20
59770: ST_TO_ADDR
// hc_gallery =  ;
59771: LD_ADDR_OWVAR 33
59775: PUSH
59776: LD_STRING 
59778: ST_TO_ADDR
// animal := CreateHuman ;
59779: LD_ADDR_VAR 0 12
59783: PUSH
59784: CALL_OW 44
59788: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59789: LD_VAR 0 12
59793: PPUSH
59794: LD_VAR 0 9
59798: PPUSH
59799: LD_INT 0
59801: PPUSH
59802: CALL 61453 0 3
// end ;
59806: GO 59760
59808: POP
59809: POP
// end ;
59810: LD_VAR 0 10
59814: RET
// export function WantHeal ( sci , unit ) ; begin
59815: LD_INT 0
59817: PPUSH
// if GetTaskList ( sci ) > 0 then
59818: LD_VAR 0 1
59822: PPUSH
59823: CALL_OW 437
59827: PUSH
59828: LD_INT 0
59830: GREATER
59831: IFFALSE 59903
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 437
59842: PUSH
59843: LD_INT 1
59845: ARRAY
59846: PUSH
59847: LD_INT 1
59849: ARRAY
59850: PUSH
59851: LD_STRING l
59853: EQUAL
59854: IFFALSE 59881
59856: PUSH
59857: LD_VAR 0 1
59861: PPUSH
59862: CALL_OW 437
59866: PUSH
59867: LD_INT 1
59869: ARRAY
59870: PUSH
59871: LD_INT 4
59873: ARRAY
59874: PUSH
59875: LD_VAR 0 2
59879: EQUAL
59880: AND
59881: IFFALSE 59893
// result := true else
59883: LD_ADDR_VAR 0 3
59887: PUSH
59888: LD_INT 1
59890: ST_TO_ADDR
59891: GO 59901
// result := false ;
59893: LD_ADDR_VAR 0 3
59897: PUSH
59898: LD_INT 0
59900: ST_TO_ADDR
// end else
59901: GO 59911
// result := false ;
59903: LD_ADDR_VAR 0 3
59907: PUSH
59908: LD_INT 0
59910: ST_TO_ADDR
// end ;
59911: LD_VAR 0 3
59915: RET
// export function HealTarget ( sci ) ; begin
59916: LD_INT 0
59918: PPUSH
// if not sci then
59919: LD_VAR 0 1
59923: NOT
59924: IFFALSE 59928
// exit ;
59926: GO 59993
// result := 0 ;
59928: LD_ADDR_VAR 0 2
59932: PUSH
59933: LD_INT 0
59935: ST_TO_ADDR
// if GetTaskList ( sci ) then
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 437
59945: IFFALSE 59993
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 437
59956: PUSH
59957: LD_INT 1
59959: ARRAY
59960: PUSH
59961: LD_INT 1
59963: ARRAY
59964: PUSH
59965: LD_STRING l
59967: EQUAL
59968: IFFALSE 59993
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59970: LD_ADDR_VAR 0 2
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL_OW 437
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PUSH
59989: LD_INT 4
59991: ARRAY
59992: ST_TO_ADDR
// end ;
59993: LD_VAR 0 2
59997: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59998: LD_INT 0
60000: PPUSH
60001: PPUSH
60002: PPUSH
60003: PPUSH
// if not base_units then
60004: LD_VAR 0 1
60008: NOT
60009: IFFALSE 60013
// exit ;
60011: GO 60100
// result := false ;
60013: LD_ADDR_VAR 0 2
60017: PUSH
60018: LD_INT 0
60020: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60021: LD_ADDR_VAR 0 5
60025: PUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: LD_INT 21
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PPUSH
60041: CALL_OW 72
60045: ST_TO_ADDR
// if not tmp then
60046: LD_VAR 0 5
60050: NOT
60051: IFFALSE 60055
// exit ;
60053: GO 60100
// for i in tmp do
60055: LD_ADDR_VAR 0 3
60059: PUSH
60060: LD_VAR 0 5
60064: PUSH
60065: FOR_IN
60066: IFFALSE 60098
// begin result := EnemyInRange ( i , 22 ) ;
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: LD_VAR 0 3
60077: PPUSH
60078: LD_INT 22
60080: PPUSH
60081: CALL 57525 0 2
60085: ST_TO_ADDR
// if result then
60086: LD_VAR 0 2
60090: IFFALSE 60096
// exit ;
60092: POP
60093: POP
60094: GO 60100
// end ;
60096: GO 60065
60098: POP
60099: POP
// end ;
60100: LD_VAR 0 2
60104: RET
// export function FilterByTag ( units , tag ) ; begin
60105: LD_INT 0
60107: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60108: LD_ADDR_VAR 0 3
60112: PUSH
60113: LD_VAR 0 1
60117: PPUSH
60118: LD_INT 120
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PPUSH
60130: CALL_OW 72
60134: ST_TO_ADDR
// end ;
60135: LD_VAR 0 3
60139: RET
// export function IsDriver ( un ) ; begin
60140: LD_INT 0
60142: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60143: LD_ADDR_VAR 0 2
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 55
60155: PUSH
60156: EMPTY
60157: LIST
60158: PPUSH
60159: CALL_OW 69
60163: IN
60164: ST_TO_ADDR
// end ;
60165: LD_VAR 0 2
60169: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60170: LD_INT 0
60172: PPUSH
60173: PPUSH
// list := [ ] ;
60174: LD_ADDR_VAR 0 5
60178: PUSH
60179: EMPTY
60180: ST_TO_ADDR
// case d of 0 :
60181: LD_VAR 0 3
60185: PUSH
60186: LD_INT 0
60188: DOUBLE
60189: EQUAL
60190: IFTRUE 60194
60192: GO 60327
60194: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60195: LD_ADDR_VAR 0 5
60199: PUSH
60200: LD_VAR 0 1
60204: PUSH
60205: LD_INT 4
60207: MINUS
60208: PUSH
60209: LD_VAR 0 2
60213: PUSH
60214: LD_INT 4
60216: MINUS
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_INT 3
60233: MINUS
60234: PUSH
60235: LD_VAR 0 2
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: PUSH
60248: LD_VAR 0 1
60252: PUSH
60253: LD_INT 4
60255: PLUS
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_INT 4
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: PUSH
60270: LD_VAR 0 1
60274: PUSH
60275: LD_INT 3
60277: PLUS
60278: PUSH
60279: LD_VAR 0 2
60283: PUSH
60284: LD_INT 3
60286: PLUS
60287: PUSH
60288: LD_INT 5
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: LD_INT 4
60308: PLUS
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: ST_TO_ADDR
// end ; 1 :
60325: GO 61025
60327: LD_INT 1
60329: DOUBLE
60330: EQUAL
60331: IFTRUE 60335
60333: GO 60468
60335: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60336: LD_ADDR_VAR 0 5
60340: PUSH
60341: LD_VAR 0 1
60345: PUSH
60346: LD_VAR 0 2
60350: PUSH
60351: LD_INT 4
60353: MINUS
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: PUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 3
60370: MINUS
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 3
60379: MINUS
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 1
60393: PUSH
60394: LD_INT 4
60396: MINUS
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: PUSH
60411: LD_VAR 0 1
60415: PUSH
60416: LD_VAR 0 2
60420: PUSH
60421: LD_INT 3
60423: PLUS
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: PUSH
60433: LD_VAR 0 1
60437: PUSH
60438: LD_INT 4
60440: PLUS
60441: PUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_INT 4
60449: PLUS
60450: PUSH
60451: LD_INT 5
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// end ; 2 :
60466: GO 61025
60468: LD_INT 2
60470: DOUBLE
60471: EQUAL
60472: IFTRUE 60476
60474: GO 60605
60476: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60477: LD_ADDR_VAR 0 5
60481: PUSH
60482: LD_VAR 0 1
60486: PUSH
60487: LD_VAR 0 2
60491: PUSH
60492: LD_INT 3
60494: MINUS
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: PUSH
60504: LD_VAR 0 1
60508: PUSH
60509: LD_INT 4
60511: PLUS
60512: PUSH
60513: LD_VAR 0 2
60517: PUSH
60518: LD_INT 4
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: PUSH
60526: LD_VAR 0 1
60530: PUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_INT 4
60538: PLUS
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: PUSH
60548: LD_VAR 0 1
60552: PUSH
60553: LD_INT 3
60555: MINUS
60556: PUSH
60557: LD_VAR 0 2
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: LD_VAR 0 1
60574: PUSH
60575: LD_INT 4
60577: MINUS
60578: PUSH
60579: LD_VAR 0 2
60583: PUSH
60584: LD_INT 4
60586: MINUS
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// end ; 3 :
60603: GO 61025
60605: LD_INT 3
60607: DOUBLE
60608: EQUAL
60609: IFTRUE 60613
60611: GO 60746
60613: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60614: LD_ADDR_VAR 0 5
60618: PUSH
60619: LD_VAR 0 1
60623: PUSH
60624: LD_INT 3
60626: PLUS
60627: PUSH
60628: LD_VAR 0 2
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: LD_INT 4
60648: PLUS
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 4
60657: PLUS
60658: PUSH
60659: LD_INT 5
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: PUSH
60667: LD_VAR 0 1
60671: PUSH
60672: LD_INT 4
60674: MINUS
60675: PUSH
60676: LD_VAR 0 2
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_VAR 0 1
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_INT 4
60701: MINUS
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 3
60718: MINUS
60719: PUSH
60720: LD_VAR 0 2
60724: PUSH
60725: LD_INT 3
60727: MINUS
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// end ; 4 :
60744: GO 61025
60746: LD_INT 4
60748: DOUBLE
60749: EQUAL
60750: IFTRUE 60754
60752: GO 60887
60754: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60755: LD_ADDR_VAR 0 5
60759: PUSH
60760: LD_VAR 0 1
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: LD_INT 4
60772: PLUS
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: LIST
60781: PUSH
60782: LD_VAR 0 1
60786: PUSH
60787: LD_INT 3
60789: PLUS
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: LD_INT 3
60798: PLUS
60799: PUSH
60800: LD_INT 5
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: PUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_INT 4
60815: PLUS
60816: PUSH
60817: LD_VAR 0 2
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_VAR 0 2
60839: PUSH
60840: LD_INT 3
60842: MINUS
60843: PUSH
60844: LD_INT 3
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: PUSH
60852: LD_VAR 0 1
60856: PUSH
60857: LD_INT 4
60859: MINUS
60860: PUSH
60861: LD_VAR 0 2
60865: PUSH
60866: LD_INT 4
60868: MINUS
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: ST_TO_ADDR
// end ; 5 :
60885: GO 61025
60887: LD_INT 5
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60895
60893: GO 61024
60895: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60896: LD_ADDR_VAR 0 5
60900: PUSH
60901: LD_VAR 0 1
60905: PUSH
60906: LD_INT 4
60908: MINUS
60909: PUSH
60910: LD_VAR 0 2
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: LD_VAR 0 2
60932: PUSH
60933: LD_INT 4
60935: MINUS
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: PUSH
60945: LD_VAR 0 1
60949: PUSH
60950: LD_INT 4
60952: PLUS
60953: PUSH
60954: LD_VAR 0 2
60958: PUSH
60959: LD_INT 4
60961: PLUS
60962: PUSH
60963: LD_INT 5
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 3
60978: PLUS
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: PUSH
60993: LD_VAR 0 1
60997: PUSH
60998: LD_VAR 0 2
61002: PUSH
61003: LD_INT 3
61005: PLUS
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// end ; end ;
61022: GO 61025
61024: POP
// result := list ;
61025: LD_ADDR_VAR 0 4
61029: PUSH
61030: LD_VAR 0 5
61034: ST_TO_ADDR
// end ;
61035: LD_VAR 0 4
61039: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61040: LD_INT 0
61042: PPUSH
61043: PPUSH
61044: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61045: LD_VAR 0 1
61049: NOT
61050: IFTRUE 61078
61052: PUSH
61053: LD_VAR 0 2
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: IN
61076: NOT
61077: OR
61078: IFFALSE 61082
// exit ;
61080: GO 61165
// tmp := [ ] ;
61082: LD_ADDR_VAR 0 5
61086: PUSH
61087: EMPTY
61088: ST_TO_ADDR
// for i in units do
61089: LD_ADDR_VAR 0 4
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: FOR_IN
61100: IFFALSE 61134
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61102: LD_ADDR_VAR 0 5
61106: PUSH
61107: LD_VAR 0 5
61111: PPUSH
61112: LD_VAR 0 4
61116: PPUSH
61117: LD_VAR 0 2
61121: PPUSH
61122: CALL_OW 259
61126: PPUSH
61127: CALL 62560 0 2
61131: ST_TO_ADDR
61132: GO 61099
61134: POP
61135: POP
// if not tmp then
61136: LD_VAR 0 5
61140: NOT
61141: IFFALSE 61145
// exit ;
61143: GO 61165
// result := SortListByListDesc ( units , tmp ) ;
61145: LD_ADDR_VAR 0 3
61149: PUSH
61150: LD_VAR 0 1
61154: PPUSH
61155: LD_VAR 0 5
61159: PPUSH
61160: CALL_OW 77
61164: ST_TO_ADDR
// end ;
61165: LD_VAR 0 3
61169: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61170: LD_INT 0
61172: PPUSH
61173: PPUSH
61174: PPUSH
// result := false ;
61175: LD_ADDR_VAR 0 3
61179: PUSH
61180: LD_INT 0
61182: ST_TO_ADDR
// if not building then
61183: LD_VAR 0 2
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61336
// x := GetX ( building ) ;
61192: LD_ADDR_VAR 0 4
61196: PUSH
61197: LD_VAR 0 2
61201: PPUSH
61202: CALL_OW 250
61206: ST_TO_ADDR
// y := GetY ( building ) ;
61207: LD_ADDR_VAR 0 5
61211: PUSH
61212: LD_VAR 0 2
61216: PPUSH
61217: CALL_OW 251
61221: ST_TO_ADDR
// if not x or not y then
61222: LD_VAR 0 4
61226: NOT
61227: IFTRUE 61236
61229: PUSH
61230: LD_VAR 0 5
61234: NOT
61235: OR
61236: IFFALSE 61240
// exit ;
61238: GO 61336
// if GetTaskList ( unit ) then
61240: LD_VAR 0 1
61244: PPUSH
61245: CALL_OW 437
61249: IFFALSE 61336
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61251: LD_STRING e
61253: PUSH
61254: LD_VAR 0 1
61258: PPUSH
61259: CALL_OW 437
61263: PUSH
61264: LD_INT 1
61266: ARRAY
61267: PUSH
61268: LD_INT 1
61270: ARRAY
61271: EQUAL
61272: IFFALSE 61299
61274: PUSH
61275: LD_VAR 0 4
61279: PUSH
61280: LD_VAR 0 1
61284: PPUSH
61285: CALL_OW 437
61289: PUSH
61290: LD_INT 1
61292: ARRAY
61293: PUSH
61294: LD_INT 2
61296: ARRAY
61297: EQUAL
61298: AND
61299: IFFALSE 61326
61301: PUSH
61302: LD_VAR 0 5
61306: PUSH
61307: LD_VAR 0 1
61311: PPUSH
61312: CALL_OW 437
61316: PUSH
61317: LD_INT 1
61319: ARRAY
61320: PUSH
61321: LD_INT 3
61323: ARRAY
61324: EQUAL
61325: AND
61326: IFFALSE 61336
// result := true end ;
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_INT 1
61335: ST_TO_ADDR
// end ;
61336: LD_VAR 0 3
61340: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61341: LD_INT 0
61343: PPUSH
// result := false ;
61344: LD_ADDR_VAR 0 4
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// if GetTaskList ( unit ) then
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 437
61361: IFFALSE 61448
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61363: LD_STRING M
61365: PUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 437
61375: PUSH
61376: LD_INT 1
61378: ARRAY
61379: PUSH
61380: LD_INT 1
61382: ARRAY
61383: EQUAL
61384: IFFALSE 61411
61386: PUSH
61387: LD_VAR 0 2
61391: PUSH
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 437
61401: PUSH
61402: LD_INT 1
61404: ARRAY
61405: PUSH
61406: LD_INT 2
61408: ARRAY
61409: EQUAL
61410: AND
61411: IFFALSE 61438
61413: PUSH
61414: LD_VAR 0 3
61418: PUSH
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 437
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PUSH
61433: LD_INT 3
61435: ARRAY
61436: EQUAL
61437: AND
61438: IFFALSE 61448
// result := true ;
61440: LD_ADDR_VAR 0 4
61444: PUSH
61445: LD_INT 1
61447: ST_TO_ADDR
// end ; end ;
61448: LD_VAR 0 4
61452: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61453: LD_INT 0
61455: PPUSH
61456: PPUSH
61457: PPUSH
61458: PPUSH
// if not unit or not area then
61459: LD_VAR 0 1
61463: NOT
61464: IFTRUE 61473
61466: PUSH
61467: LD_VAR 0 2
61471: NOT
61472: OR
61473: IFFALSE 61477
// exit ;
61475: GO 61653
// tmp := AreaToList ( area , i ) ;
61477: LD_ADDR_VAR 0 6
61481: PUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: LD_VAR 0 5
61491: PPUSH
61492: CALL_OW 517
61496: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61497: LD_ADDR_VAR 0 5
61501: PUSH
61502: DOUBLE
61503: LD_INT 1
61505: DEC
61506: ST_TO_ADDR
61507: LD_VAR 0 6
61511: PUSH
61512: LD_INT 1
61514: ARRAY
61515: PUSH
61516: FOR_TO
61517: IFFALSE 61651
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61519: LD_ADDR_VAR 0 7
61523: PUSH
61524: LD_VAR 0 6
61528: PUSH
61529: LD_INT 1
61531: ARRAY
61532: PUSH
61533: LD_VAR 0 5
61537: ARRAY
61538: PUSH
61539: LD_VAR 0 6
61543: PUSH
61544: LD_INT 2
61546: ARRAY
61547: PUSH
61548: LD_VAR 0 5
61552: ARRAY
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61558: LD_INT 92
61560: PUSH
61561: LD_VAR 0 7
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: PUSH
61570: LD_VAR 0 7
61574: PUSH
61575: LD_INT 2
61577: ARRAY
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: PPUSH
61588: CALL_OW 69
61592: PUSH
61593: LD_INT 0
61595: EQUAL
61596: IFFALSE 61649
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61598: LD_VAR 0 1
61602: PPUSH
61603: LD_VAR 0 7
61607: PUSH
61608: LD_INT 1
61610: ARRAY
61611: PPUSH
61612: LD_VAR 0 7
61616: PUSH
61617: LD_INT 2
61619: ARRAY
61620: PPUSH
61621: LD_VAR 0 3
61625: PPUSH
61626: CALL_OW 48
// result := IsPlaced ( unit ) ;
61630: LD_ADDR_VAR 0 4
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 305
61644: ST_TO_ADDR
// exit ;
61645: POP
61646: POP
61647: GO 61653
// end ; end ;
61649: GO 61516
61651: POP
61652: POP
// end ;
61653: LD_VAR 0 4
61657: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61658: LD_INT 0
61660: PPUSH
61661: PPUSH
61662: PPUSH
// if not side or side > 8 then
61663: LD_VAR 0 1
61667: NOT
61668: IFTRUE 61680
61670: PUSH
61671: LD_VAR 0 1
61675: PUSH
61676: LD_INT 8
61678: GREATER
61679: OR
61680: IFFALSE 61684
// exit ;
61682: GO 61871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61684: LD_ADDR_VAR 0 4
61688: PUSH
61689: LD_INT 22
61691: PUSH
61692: LD_VAR 0 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 21
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PPUSH
61715: CALL_OW 69
61719: ST_TO_ADDR
// if not tmp then
61720: LD_VAR 0 4
61724: NOT
61725: IFFALSE 61729
// exit ;
61727: GO 61871
// enable_addtolog := true ;
61729: LD_ADDR_OWVAR 81
61733: PUSH
61734: LD_INT 1
61736: ST_TO_ADDR
// AddToLog ( [ ) ;
61737: LD_STRING [
61739: PPUSH
61740: CALL_OW 561
// for i in tmp do
61744: LD_ADDR_VAR 0 3
61748: PUSH
61749: LD_VAR 0 4
61753: PUSH
61754: FOR_IN
61755: IFFALSE 61862
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61757: LD_STRING [
61759: PUSH
61760: LD_VAR 0 3
61764: PPUSH
61765: CALL_OW 266
61769: STR
61770: PUSH
61771: LD_STRING , 
61773: STR
61774: PUSH
61775: LD_VAR 0 3
61779: PPUSH
61780: CALL_OW 250
61784: STR
61785: PUSH
61786: LD_STRING , 
61788: STR
61789: PUSH
61790: LD_VAR 0 3
61794: PPUSH
61795: CALL_OW 251
61799: STR
61800: PUSH
61801: LD_STRING , 
61803: STR
61804: PUSH
61805: LD_VAR 0 3
61809: PPUSH
61810: CALL_OW 254
61814: STR
61815: PUSH
61816: LD_STRING , 
61818: STR
61819: PUSH
61820: LD_VAR 0 3
61824: PPUSH
61825: LD_INT 1
61827: PPUSH
61828: CALL_OW 268
61832: STR
61833: PUSH
61834: LD_STRING , 
61836: STR
61837: PUSH
61838: LD_VAR 0 3
61842: PPUSH
61843: LD_INT 2
61845: PPUSH
61846: CALL_OW 268
61850: STR
61851: PUSH
61852: LD_STRING ],
61854: STR
61855: PPUSH
61856: CALL_OW 561
// end ;
61860: GO 61754
61862: POP
61863: POP
// AddToLog ( ]; ) ;
61864: LD_STRING ];
61866: PPUSH
61867: CALL_OW 561
// end ;
61871: LD_VAR 0 2
61875: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61876: LD_INT 0
61878: PPUSH
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
// if not area or not rate or not max then
61883: LD_VAR 0 1
61887: NOT
61888: IFTRUE 61897
61890: PUSH
61891: LD_VAR 0 2
61895: NOT
61896: OR
61897: IFTRUE 61906
61899: PUSH
61900: LD_VAR 0 4
61904: NOT
61905: OR
61906: IFFALSE 61910
// exit ;
61908: GO 62099
// while 1 do
61910: LD_INT 1
61912: IFFALSE 62099
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61914: LD_ADDR_VAR 0 9
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: LD_INT 1
61926: PPUSH
61927: CALL_OW 287
61931: PUSH
61932: LD_INT 10
61934: MUL
61935: ST_TO_ADDR
// r := rate / 10 ;
61936: LD_ADDR_VAR 0 7
61940: PUSH
61941: LD_VAR 0 2
61945: PUSH
61946: LD_INT 10
61948: DIVREAL
61949: ST_TO_ADDR
// time := 1 1$00 ;
61950: LD_ADDR_VAR 0 8
61954: PUSH
61955: LD_INT 2100
61957: ST_TO_ADDR
// if amount < min then
61958: LD_VAR 0 9
61962: PUSH
61963: LD_VAR 0 3
61967: LESS
61968: IFFALSE 61986
// r := r * 2 else
61970: LD_ADDR_VAR 0 7
61974: PUSH
61975: LD_VAR 0 7
61979: PUSH
61980: LD_INT 2
61982: MUL
61983: ST_TO_ADDR
61984: GO 62012
// if amount > max then
61986: LD_VAR 0 9
61990: PUSH
61991: LD_VAR 0 4
61995: GREATER
61996: IFFALSE 62012
// r := r / 2 ;
61998: LD_ADDR_VAR 0 7
62002: PUSH
62003: LD_VAR 0 7
62007: PUSH
62008: LD_INT 2
62010: DIVREAL
62011: ST_TO_ADDR
// time := time / r ;
62012: LD_ADDR_VAR 0 8
62016: PUSH
62017: LD_VAR 0 8
62021: PUSH
62022: LD_VAR 0 7
62026: DIVREAL
62027: ST_TO_ADDR
// if time < 0 then
62028: LD_VAR 0 8
62032: PUSH
62033: LD_INT 0
62035: LESS
62036: IFFALSE 62053
// time := time * - 1 ;
62038: LD_ADDR_VAR 0 8
62042: PUSH
62043: LD_VAR 0 8
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: MUL
62052: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62053: LD_VAR 0 8
62057: PUSH
62058: LD_INT 35
62060: PPUSH
62061: LD_INT 875
62063: PPUSH
62064: CALL_OW 12
62068: PLUS
62069: PPUSH
62070: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62074: LD_INT 1
62076: PPUSH
62077: LD_INT 5
62079: PPUSH
62080: CALL_OW 12
62084: PPUSH
62085: LD_VAR 0 1
62089: PPUSH
62090: LD_INT 1
62092: PPUSH
62093: CALL_OW 55
// end ;
62097: GO 61910
// end ;
62099: LD_VAR 0 5
62103: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62104: LD_INT 0
62106: PPUSH
62107: PPUSH
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
62112: PPUSH
62113: PPUSH
// if not turrets or not factories then
62114: LD_VAR 0 1
62118: NOT
62119: IFTRUE 62128
62121: PUSH
62122: LD_VAR 0 2
62126: NOT
62127: OR
62128: IFFALSE 62132
// exit ;
62130: GO 62439
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62132: LD_ADDR_VAR 0 10
62136: PUSH
62137: LD_INT 5
62139: PUSH
62140: LD_INT 6
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 4
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: LD_INT 5
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 24
62174: PUSH
62175: LD_INT 25
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 23
62184: PUSH
62185: LD_INT 27
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 42
62198: PUSH
62199: LD_INT 43
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 44
62208: PUSH
62209: LD_INT 46
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 45
62218: PUSH
62219: LD_INT 47
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// result := [ ] ;
62236: LD_ADDR_VAR 0 3
62240: PUSH
62241: EMPTY
62242: ST_TO_ADDR
// for i in turrets do
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: LD_VAR 0 1
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62437
// begin nat := GetNation ( i ) ;
62256: LD_ADDR_VAR 0 7
62260: PUSH
62261: LD_VAR 0 4
62265: PPUSH
62266: CALL_OW 248
62270: ST_TO_ADDR
// weapon := 0 ;
62271: LD_ADDR_VAR 0 8
62275: PUSH
62276: LD_INT 0
62278: ST_TO_ADDR
// if not nat then
62279: LD_VAR 0 7
62283: NOT
62284: IFFALSE 62288
// continue ;
62286: GO 62253
// for j in list [ nat ] do
62288: LD_ADDR_VAR 0 5
62292: PUSH
62293: LD_VAR 0 10
62297: PUSH
62298: LD_VAR 0 7
62302: ARRAY
62303: PUSH
62304: FOR_IN
62305: IFFALSE 62346
// if GetBWeapon ( i ) = j [ 1 ] then
62307: LD_VAR 0 4
62311: PPUSH
62312: CALL_OW 269
62316: PUSH
62317: LD_VAR 0 5
62321: PUSH
62322: LD_INT 1
62324: ARRAY
62325: EQUAL
62326: IFFALSE 62344
// begin weapon := j [ 2 ] ;
62328: LD_ADDR_VAR 0 8
62332: PUSH
62333: LD_VAR 0 5
62337: PUSH
62338: LD_INT 2
62340: ARRAY
62341: ST_TO_ADDR
// break ;
62342: GO 62346
// end ;
62344: GO 62304
62346: POP
62347: POP
// if not weapon then
62348: LD_VAR 0 8
62352: NOT
62353: IFFALSE 62357
// continue ;
62355: GO 62253
// for k in factories do
62357: LD_ADDR_VAR 0 6
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: FOR_IN
62368: IFFALSE 62433
// begin weapons := AvailableWeaponList ( k ) ;
62370: LD_ADDR_VAR 0 9
62374: PUSH
62375: LD_VAR 0 6
62379: PPUSH
62380: CALL_OW 478
62384: ST_TO_ADDR
// if not weapons then
62385: LD_VAR 0 9
62389: NOT
62390: IFFALSE 62394
// continue ;
62392: GO 62367
// if weapon in weapons then
62394: LD_VAR 0 8
62398: PUSH
62399: LD_VAR 0 9
62403: IN
62404: IFFALSE 62431
// begin result := [ i , weapon ] ;
62406: LD_ADDR_VAR 0 3
62410: PUSH
62411: LD_VAR 0 4
62415: PUSH
62416: LD_VAR 0 8
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: ST_TO_ADDR
// exit ;
62425: POP
62426: POP
62427: POP
62428: POP
62429: GO 62439
// end ; end ;
62431: GO 62367
62433: POP
62434: POP
// end ;
62435: GO 62253
62437: POP
62438: POP
// end ;
62439: LD_VAR 0 3
62443: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62444: LD_INT 0
62446: PPUSH
// if not side or side > 8 then
62447: LD_VAR 0 3
62451: NOT
62452: IFTRUE 62464
62454: PUSH
62455: LD_VAR 0 3
62459: PUSH
62460: LD_INT 8
62462: GREATER
62463: OR
62464: IFFALSE 62468
// exit ;
62466: GO 62527
// if not range then
62468: LD_VAR 0 4
62472: NOT
62473: IFFALSE 62484
// range := - 12 ;
62475: LD_ADDR_VAR 0 4
62479: PUSH
62480: LD_INT 12
62482: NEG
62483: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62484: LD_VAR 0 1
62488: PPUSH
62489: LD_VAR 0 2
62493: PPUSH
62494: LD_VAR 0 3
62498: PPUSH
62499: LD_VAR 0 4
62503: PPUSH
62504: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62508: LD_VAR 0 1
62512: PPUSH
62513: LD_VAR 0 2
62517: PPUSH
62518: LD_VAR 0 3
62522: PPUSH
62523: CALL_OW 331
// end ;
62527: LD_VAR 0 5
62531: RET
// export function Video ( mode ) ; begin
62532: LD_INT 0
62534: PPUSH
// ingame_video = mode ;
62535: LD_ADDR_OWVAR 52
62539: PUSH
62540: LD_VAR 0 1
62544: ST_TO_ADDR
// interface_hidden = mode ;
62545: LD_ADDR_OWVAR 54
62549: PUSH
62550: LD_VAR 0 1
62554: ST_TO_ADDR
// end ;
62555: LD_VAR 0 2
62559: RET
// export function Join ( array , element ) ; begin
62560: LD_INT 0
62562: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62563: LD_ADDR_VAR 0 3
62567: PUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: LD_VAR 0 1
62577: PUSH
62578: LD_INT 1
62580: PLUS
62581: PPUSH
62582: LD_VAR 0 2
62586: PPUSH
62587: CALL_OW 1
62591: ST_TO_ADDR
// end ;
62592: LD_VAR 0 3
62596: RET
// export function JoinUnion ( array , element ) ; begin
62597: LD_INT 0
62599: PPUSH
// result := array union element ;
62600: LD_ADDR_VAR 0 3
62604: PUSH
62605: LD_VAR 0 1
62609: PUSH
62610: LD_VAR 0 2
62614: UNION
62615: ST_TO_ADDR
// end ;
62616: LD_VAR 0 3
62620: RET
// export function GetBehemoths ( side ) ; begin
62621: LD_INT 0
62623: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62624: LD_ADDR_VAR 0 2
62628: PUSH
62629: LD_INT 22
62631: PUSH
62632: LD_VAR 0 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 31
62643: PUSH
62644: LD_INT 25
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PPUSH
62655: CALL_OW 69
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 2
62664: RET
// export function Shuffle ( array ) ; var i , index ; begin
62665: LD_INT 0
62667: PPUSH
62668: PPUSH
62669: PPUSH
// result := [ ] ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: EMPTY
62676: ST_TO_ADDR
// if not array then
62677: LD_VAR 0 1
62681: NOT
62682: IFFALSE 62686
// exit ;
62684: GO 62785
// Randomize ;
62686: CALL_OW 10
// for i = array downto 1 do
62690: LD_ADDR_VAR 0 3
62694: PUSH
62695: DOUBLE
62696: LD_VAR 0 1
62700: INC
62701: ST_TO_ADDR
62702: LD_INT 1
62704: PUSH
62705: FOR_DOWNTO
62706: IFFALSE 62783
// begin index := rand ( 1 , array ) ;
62708: LD_ADDR_VAR 0 4
62712: PUSH
62713: LD_INT 1
62715: PPUSH
62716: LD_VAR 0 1
62720: PPUSH
62721: CALL_OW 12
62725: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62726: LD_ADDR_VAR 0 2
62730: PUSH
62731: LD_VAR 0 2
62735: PPUSH
62736: LD_VAR 0 2
62740: PUSH
62741: LD_INT 1
62743: PLUS
62744: PPUSH
62745: LD_VAR 0 1
62749: PUSH
62750: LD_VAR 0 4
62754: ARRAY
62755: PPUSH
62756: CALL_OW 2
62760: ST_TO_ADDR
// array := Delete ( array , index ) ;
62761: LD_ADDR_VAR 0 1
62765: PUSH
62766: LD_VAR 0 1
62770: PPUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 3
62780: ST_TO_ADDR
// end ;
62781: GO 62705
62783: POP
62784: POP
// end ;
62785: LD_VAR 0 2
62789: RET
// export function GetBaseMaterials ( base ) ; begin
62790: LD_INT 0
62792: PPUSH
// result := [ 0 , 0 , 0 ] ;
62793: LD_ADDR_VAR 0 2
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: ST_TO_ADDR
// if not base then
62812: LD_VAR 0 1
62816: NOT
62817: IFFALSE 62821
// exit ;
62819: GO 62870
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62821: LD_ADDR_VAR 0 2
62825: PUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: LD_INT 1
62833: PPUSH
62834: CALL_OW 275
62838: PUSH
62839: LD_VAR 0 1
62843: PPUSH
62844: LD_INT 2
62846: PPUSH
62847: CALL_OW 275
62851: PUSH
62852: LD_VAR 0 1
62856: PPUSH
62857: LD_INT 3
62859: PPUSH
62860: CALL_OW 275
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// end ;
62870: LD_VAR 0 2
62874: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62875: LD_INT 0
62877: PPUSH
62878: PPUSH
// result := array ;
62879: LD_ADDR_VAR 0 3
62883: PUSH
62884: LD_VAR 0 1
62888: ST_TO_ADDR
// if size >= result then
62889: LD_VAR 0 2
62893: PUSH
62894: LD_VAR 0 3
62898: GREATEREQUAL
62899: IFFALSE 62903
// exit ;
62901: GO 62953
// if size then
62903: LD_VAR 0 2
62907: IFFALSE 62953
// for i := array downto size do
62909: LD_ADDR_VAR 0 4
62913: PUSH
62914: DOUBLE
62915: LD_VAR 0 1
62919: INC
62920: ST_TO_ADDR
62921: LD_VAR 0 2
62925: PUSH
62926: FOR_DOWNTO
62927: IFFALSE 62951
// result := Delete ( result , result ) ;
62929: LD_ADDR_VAR 0 3
62933: PUSH
62934: LD_VAR 0 3
62938: PPUSH
62939: LD_VAR 0 3
62943: PPUSH
62944: CALL_OW 3
62948: ST_TO_ADDR
62949: GO 62926
62951: POP
62952: POP
// end ;
62953: LD_VAR 0 3
62957: RET
// export function ComExit ( unit ) ; var tmp ; begin
62958: LD_INT 0
62960: PPUSH
62961: PPUSH
// if not IsInUnit ( unit ) then
62962: LD_VAR 0 1
62966: PPUSH
62967: CALL_OW 310
62971: NOT
62972: IFFALSE 62976
// exit ;
62974: GO 63036
// tmp := IsInUnit ( unit ) ;
62976: LD_ADDR_VAR 0 3
62980: PUSH
62981: LD_VAR 0 1
62985: PPUSH
62986: CALL_OW 310
62990: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62991: LD_VAR 0 3
62995: PPUSH
62996: CALL_OW 247
63000: PUSH
63001: LD_INT 2
63003: EQUAL
63004: IFFALSE 63017
// ComExitVehicle ( unit ) else
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL_OW 121
63015: GO 63026
// ComExitBuilding ( unit ) ;
63017: LD_VAR 0 1
63021: PPUSH
63022: CALL_OW 122
// result := tmp ;
63026: LD_ADDR_VAR 0 2
63030: PUSH
63031: LD_VAR 0 3
63035: ST_TO_ADDR
// end ;
63036: LD_VAR 0 2
63040: RET
// export function ComExitAll ( units ) ; var i ; begin
63041: LD_INT 0
63043: PPUSH
63044: PPUSH
// if not units then
63045: LD_VAR 0 1
63049: NOT
63050: IFFALSE 63054
// exit ;
63052: GO 63080
// for i in units do
63054: LD_ADDR_VAR 0 3
63058: PUSH
63059: LD_VAR 0 1
63063: PUSH
63064: FOR_IN
63065: IFFALSE 63078
// ComExit ( i ) ;
63067: LD_VAR 0 3
63071: PPUSH
63072: CALL 62958 0 1
63076: GO 63064
63078: POP
63079: POP
// end ;
63080: LD_VAR 0 2
63084: RET
// export function ResetHc ; begin
63085: LD_INT 0
63087: PPUSH
// InitHc ;
63088: CALL_OW 19
// hc_importance := 0 ;
63092: LD_ADDR_OWVAR 32
63096: PUSH
63097: LD_INT 0
63099: ST_TO_ADDR
// end ;
63100: LD_VAR 0 1
63104: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63105: LD_INT 0
63107: PPUSH
63108: PPUSH
63109: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63110: LD_ADDR_VAR 0 6
63114: PUSH
63115: LD_VAR 0 1
63119: PUSH
63120: LD_VAR 0 3
63124: PLUS
63125: PUSH
63126: LD_INT 2
63128: DIV
63129: ST_TO_ADDR
// if _x < 0 then
63130: LD_VAR 0 6
63134: PUSH
63135: LD_INT 0
63137: LESS
63138: IFFALSE 63155
// _x := _x * - 1 ;
63140: LD_ADDR_VAR 0 6
63144: PUSH
63145: LD_VAR 0 6
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: MUL
63154: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63155: LD_ADDR_VAR 0 7
63159: PUSH
63160: LD_VAR 0 2
63164: PUSH
63165: LD_VAR 0 4
63169: PLUS
63170: PUSH
63171: LD_INT 2
63173: DIV
63174: ST_TO_ADDR
// if _y < 0 then
63175: LD_VAR 0 7
63179: PUSH
63180: LD_INT 0
63182: LESS
63183: IFFALSE 63200
// _y := _y * - 1 ;
63185: LD_ADDR_VAR 0 7
63189: PUSH
63190: LD_VAR 0 7
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: MUL
63199: ST_TO_ADDR
// result := [ _x , _y ] ;
63200: LD_ADDR_VAR 0 5
63204: PUSH
63205: LD_VAR 0 6
63209: PUSH
63210: LD_VAR 0 7
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 5
63223: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63224: LD_INT 0
63226: PPUSH
63227: PPUSH
63228: PPUSH
63229: PPUSH
// task := GetTaskList ( unit ) ;
63230: LD_ADDR_VAR 0 7
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: CALL_OW 437
63244: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63245: LD_VAR 0 7
63249: NOT
63250: IFFALSE 63269
63252: PUSH
63253: LD_VAR 0 1
63257: PPUSH
63258: LD_VAR 0 2
63262: PPUSH
63263: CALL_OW 308
63267: NOT
63268: AND
63269: IFFALSE 63273
// exit ;
63271: GO 63391
// if IsInArea ( unit , area ) then
63273: LD_VAR 0 1
63277: PPUSH
63278: LD_VAR 0 2
63282: PPUSH
63283: CALL_OW 308
63287: IFFALSE 63305
// begin ComMoveToArea ( unit , goAway ) ;
63289: LD_VAR 0 1
63293: PPUSH
63294: LD_VAR 0 3
63298: PPUSH
63299: CALL_OW 113
// exit ;
63303: GO 63391
// end ; if task [ 1 ] [ 1 ] <> M then
63305: LD_VAR 0 7
63309: PUSH
63310: LD_INT 1
63312: ARRAY
63313: PUSH
63314: LD_INT 1
63316: ARRAY
63317: PUSH
63318: LD_STRING M
63320: NONEQUAL
63321: IFFALSE 63325
// exit ;
63323: GO 63391
// x := task [ 1 ] [ 2 ] ;
63325: LD_ADDR_VAR 0 5
63329: PUSH
63330: LD_VAR 0 7
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: PUSH
63339: LD_INT 2
63341: ARRAY
63342: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63343: LD_ADDR_VAR 0 6
63347: PUSH
63348: LD_VAR 0 7
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PUSH
63357: LD_INT 3
63359: ARRAY
63360: ST_TO_ADDR
// if InArea ( x , y , area ) then
63361: LD_VAR 0 5
63365: PPUSH
63366: LD_VAR 0 6
63370: PPUSH
63371: LD_VAR 0 2
63375: PPUSH
63376: CALL_OW 309
63380: IFFALSE 63391
// ComStop ( unit ) ;
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 141
// end ;
63391: LD_VAR 0 4
63395: RET
// export function Abs ( value ) ; begin
63396: LD_INT 0
63398: PPUSH
// result := value ;
63399: LD_ADDR_VAR 0 2
63403: PUSH
63404: LD_VAR 0 1
63408: ST_TO_ADDR
// if value < 0 then
63409: LD_VAR 0 1
63413: PUSH
63414: LD_INT 0
63416: LESS
63417: IFFALSE 63434
// result := value * - 1 ;
63419: LD_ADDR_VAR 0 2
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: MUL
63433: ST_TO_ADDR
// end ;
63434: LD_VAR 0 2
63438: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63439: LD_INT 0
63441: PPUSH
63442: PPUSH
63443: PPUSH
63444: PPUSH
63445: PPUSH
63446: PPUSH
63447: PPUSH
63448: PPUSH
// if not unit or not building then
63449: LD_VAR 0 1
63453: NOT
63454: IFTRUE 63463
63456: PUSH
63457: LD_VAR 0 2
63461: NOT
63462: OR
63463: IFFALSE 63467
// exit ;
63465: GO 63695
// x := GetX ( building ) ;
63467: LD_ADDR_VAR 0 4
63471: PUSH
63472: LD_VAR 0 2
63476: PPUSH
63477: CALL_OW 250
63481: ST_TO_ADDR
// y := GetY ( building ) ;
63482: LD_ADDR_VAR 0 6
63486: PUSH
63487: LD_VAR 0 2
63491: PPUSH
63492: CALL_OW 251
63496: ST_TO_ADDR
// d := GetDir ( building ) ;
63497: LD_ADDR_VAR 0 8
63501: PUSH
63502: LD_VAR 0 2
63506: PPUSH
63507: CALL_OW 254
63511: ST_TO_ADDR
// r := 4 ;
63512: LD_ADDR_VAR 0 9
63516: PUSH
63517: LD_INT 4
63519: ST_TO_ADDR
// for i := 1 to 5 do
63520: LD_ADDR_VAR 0 10
63524: PUSH
63525: DOUBLE
63526: LD_INT 1
63528: DEC
63529: ST_TO_ADDR
63530: LD_INT 5
63532: PUSH
63533: FOR_TO
63534: IFFALSE 63693
// begin _x := ShiftX ( x , d , r + i ) ;
63536: LD_ADDR_VAR 0 5
63540: PUSH
63541: LD_VAR 0 4
63545: PPUSH
63546: LD_VAR 0 8
63550: PPUSH
63551: LD_VAR 0 9
63555: PUSH
63556: LD_VAR 0 10
63560: PLUS
63561: PPUSH
63562: CALL_OW 272
63566: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63567: LD_ADDR_VAR 0 7
63571: PUSH
63572: LD_VAR 0 6
63576: PPUSH
63577: LD_VAR 0 8
63581: PPUSH
63582: LD_VAR 0 9
63586: PUSH
63587: LD_VAR 0 10
63591: PLUS
63592: PPUSH
63593: CALL_OW 273
63597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63598: LD_VAR 0 5
63602: PPUSH
63603: LD_VAR 0 7
63607: PPUSH
63608: CALL_OW 488
63612: IFFALSE 63647
63614: PUSH
63615: LD_VAR 0 5
63619: PPUSH
63620: LD_VAR 0 7
63624: PPUSH
63625: CALL_OW 428
63629: PPUSH
63630: CALL_OW 247
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: IN
63645: NOT
63646: AND
63647: IFFALSE 63691
// begin ComMoveXY ( unit , _x , _y ) ;
63649: LD_VAR 0 1
63653: PPUSH
63654: LD_VAR 0 5
63658: PPUSH
63659: LD_VAR 0 7
63663: PPUSH
63664: CALL_OW 111
// result := [ _x , _y ] ;
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: LD_VAR 0 5
63677: PUSH
63678: LD_VAR 0 7
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: ST_TO_ADDR
// exit ;
63687: POP
63688: POP
63689: GO 63695
// end ; end ;
63691: GO 63533
63693: POP
63694: POP
// end ;
63695: LD_VAR 0 3
63699: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63700: LD_INT 0
63702: PPUSH
63703: PPUSH
63704: PPUSH
// result := 0 ;
63705: LD_ADDR_VAR 0 3
63709: PUSH
63710: LD_INT 0
63712: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63713: LD_VAR 0 1
63717: PUSH
63718: LD_INT 0
63720: LESS
63721: IFTRUE 63733
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: LD_INT 8
63731: GREATER
63732: OR
63733: IFTRUE 63745
63735: PUSH
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 0
63743: LESS
63744: OR
63745: IFTRUE 63757
63747: PUSH
63748: LD_VAR 0 2
63752: PUSH
63753: LD_INT 8
63755: GREATER
63756: OR
63757: IFFALSE 63761
// exit ;
63759: GO 63836
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63761: LD_ADDR_VAR 0 4
63765: PUSH
63766: LD_INT 22
63768: PUSH
63769: LD_VAR 0 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PPUSH
63778: CALL_OW 69
63782: PUSH
63783: FOR_IN
63784: IFFALSE 63834
// begin un := UnitShoot ( i ) ;
63786: LD_ADDR_VAR 0 5
63790: PUSH
63791: LD_VAR 0 4
63795: PPUSH
63796: CALL_OW 504
63800: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63801: LD_VAR 0 5
63805: PPUSH
63806: CALL_OW 255
63810: PUSH
63811: LD_VAR 0 1
63815: EQUAL
63816: IFFALSE 63832
// begin result := un ;
63818: LD_ADDR_VAR 0 3
63822: PUSH
63823: LD_VAR 0 5
63827: ST_TO_ADDR
// exit ;
63828: POP
63829: POP
63830: GO 63836
// end ; end ;
63832: GO 63783
63834: POP
63835: POP
// end ;
63836: LD_VAR 0 3
63840: RET
// export function GetCargoBay ( units ) ; begin
63841: LD_INT 0
63843: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63844: LD_ADDR_VAR 0 2
63848: PUSH
63849: LD_VAR 0 1
63853: PPUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 34
63859: PUSH
63860: LD_INT 12
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 34
63869: PUSH
63870: LD_INT 51
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 34
63879: PUSH
63880: LD_INT 32
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 34
63889: PUSH
63890: LD_INT 89
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: PPUSH
63904: CALL_OW 72
63908: ST_TO_ADDR
// end ;
63909: LD_VAR 0 2
63913: RET
// export function Negate ( value ) ; begin
63914: LD_INT 0
63916: PPUSH
// result := not value ;
63917: LD_ADDR_VAR 0 2
63921: PUSH
63922: LD_VAR 0 1
63926: NOT
63927: ST_TO_ADDR
// end ;
63928: LD_VAR 0 2
63932: RET
// export function Inc ( value ) ; begin
63933: LD_INT 0
63935: PPUSH
// result := value + 1 ;
63936: LD_ADDR_VAR 0 2
63940: PUSH
63941: LD_VAR 0 1
63945: PUSH
63946: LD_INT 1
63948: PLUS
63949: ST_TO_ADDR
// end ;
63950: LD_VAR 0 2
63954: RET
// export function Dec ( value ) ; begin
63955: LD_INT 0
63957: PPUSH
// result := value - 1 ;
63958: LD_ADDR_VAR 0 2
63962: PUSH
63963: LD_VAR 0 1
63967: PUSH
63968: LD_INT 1
63970: MINUS
63971: ST_TO_ADDR
// end ;
63972: LD_VAR 0 2
63976: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63977: LD_INT 0
63979: PPUSH
63980: PPUSH
63981: PPUSH
63982: PPUSH
63983: PPUSH
63984: PPUSH
63985: PPUSH
63986: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63987: LD_VAR 0 1
63991: PPUSH
63992: LD_VAR 0 2
63996: PPUSH
63997: CALL_OW 488
64001: NOT
64002: IFTRUE 64021
64004: PUSH
64005: LD_VAR 0 3
64009: PPUSH
64010: LD_VAR 0 4
64014: PPUSH
64015: CALL_OW 488
64019: NOT
64020: OR
64021: IFFALSE 64034
// begin result := - 1 ;
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: ST_TO_ADDR
// exit ;
64032: GO 64269
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64034: LD_ADDR_VAR 0 12
64038: PUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_VAR 0 2
64048: PPUSH
64049: LD_VAR 0 3
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: CALL 63105 0 4
64063: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64064: LD_ADDR_VAR 0 11
64068: PUSH
64069: LD_VAR 0 1
64073: PPUSH
64074: LD_VAR 0 2
64078: PPUSH
64079: LD_VAR 0 12
64083: PUSH
64084: LD_INT 1
64086: ARRAY
64087: PPUSH
64088: LD_VAR 0 12
64092: PUSH
64093: LD_INT 2
64095: ARRAY
64096: PPUSH
64097: CALL_OW 298
64101: ST_TO_ADDR
// distance := 9999 ;
64102: LD_ADDR_VAR 0 10
64106: PUSH
64107: LD_INT 9999
64109: ST_TO_ADDR
// for i := 0 to 5 do
64110: LD_ADDR_VAR 0 6
64114: PUSH
64115: DOUBLE
64116: LD_INT 0
64118: DEC
64119: ST_TO_ADDR
64120: LD_INT 5
64122: PUSH
64123: FOR_TO
64124: IFFALSE 64267
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64126: LD_ADDR_VAR 0 7
64130: PUSH
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 6
64140: PPUSH
64141: LD_VAR 0 11
64145: PPUSH
64146: CALL_OW 272
64150: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64151: LD_ADDR_VAR 0 8
64155: PUSH
64156: LD_VAR 0 2
64160: PPUSH
64161: LD_VAR 0 6
64165: PPUSH
64166: LD_VAR 0 11
64170: PPUSH
64171: CALL_OW 273
64175: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64176: LD_VAR 0 7
64180: PPUSH
64181: LD_VAR 0 8
64185: PPUSH
64186: CALL_OW 488
64190: NOT
64191: IFFALSE 64195
// continue ;
64193: GO 64123
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64195: LD_ADDR_VAR 0 9
64199: PUSH
64200: LD_VAR 0 12
64204: PUSH
64205: LD_INT 1
64207: ARRAY
64208: PPUSH
64209: LD_VAR 0 12
64213: PUSH
64214: LD_INT 2
64216: ARRAY
64217: PPUSH
64218: LD_VAR 0 7
64222: PPUSH
64223: LD_VAR 0 8
64227: PPUSH
64228: CALL_OW 298
64232: ST_TO_ADDR
// if tmp < distance then
64233: LD_VAR 0 9
64237: PUSH
64238: LD_VAR 0 10
64242: LESS
64243: IFFALSE 64265
// begin result := i ;
64245: LD_ADDR_VAR 0 5
64249: PUSH
64250: LD_VAR 0 6
64254: ST_TO_ADDR
// distance := tmp ;
64255: LD_ADDR_VAR 0 10
64259: PUSH
64260: LD_VAR 0 9
64264: ST_TO_ADDR
// end ; end ;
64265: GO 64123
64267: POP
64268: POP
// end ;
64269: LD_VAR 0 5
64273: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64274: LD_INT 0
64276: PPUSH
64277: PPUSH
// if not driver or not IsInUnit ( driver ) then
64278: LD_VAR 0 1
64282: NOT
64283: IFTRUE 64297
64285: PUSH
64286: LD_VAR 0 1
64290: PPUSH
64291: CALL_OW 310
64295: NOT
64296: OR
64297: IFFALSE 64301
// exit ;
64299: GO 64391
// vehicle := IsInUnit ( driver ) ;
64301: LD_ADDR_VAR 0 3
64305: PUSH
64306: LD_VAR 0 1
64310: PPUSH
64311: CALL_OW 310
64315: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64316: LD_VAR 0 1
64320: PPUSH
64321: LD_STRING \
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: PUSH
64351: LD_STRING E
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_VAR 0 3
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PPUSH
64387: CALL_OW 446
// end ;
64391: LD_VAR 0 2
64395: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64396: LD_INT 0
64398: PPUSH
64399: PPUSH
// if not driver or not IsInUnit ( driver ) then
64400: LD_VAR 0 1
64404: NOT
64405: IFTRUE 64419
64407: PUSH
64408: LD_VAR 0 1
64412: PPUSH
64413: CALL_OW 310
64417: NOT
64418: OR
64419: IFFALSE 64423
// exit ;
64421: GO 64513
// vehicle := IsInUnit ( driver ) ;
64423: LD_ADDR_VAR 0 3
64427: PUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: CALL_OW 310
64437: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_STRING \
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_STRING E
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_VAR 0 3
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PPUSH
64509: CALL_OW 447
// end ;
64513: LD_VAR 0 2
64517: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64518: LD_INT 0
64520: PPUSH
64521: PPUSH
64522: PPUSH
// tmp := [ ] ;
64523: LD_ADDR_VAR 0 5
64527: PUSH
64528: EMPTY
64529: ST_TO_ADDR
// for i in units do
64530: LD_ADDR_VAR 0 4
64534: PUSH
64535: LD_VAR 0 1
64539: PUSH
64540: FOR_IN
64541: IFFALSE 64579
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64543: LD_ADDR_VAR 0 5
64547: PUSH
64548: LD_VAR 0 5
64552: PPUSH
64553: LD_VAR 0 5
64557: PUSH
64558: LD_INT 1
64560: PLUS
64561: PPUSH
64562: LD_VAR 0 4
64566: PPUSH
64567: CALL_OW 256
64571: PPUSH
64572: CALL_OW 2
64576: ST_TO_ADDR
64577: GO 64540
64579: POP
64580: POP
// if not tmp then
64581: LD_VAR 0 5
64585: NOT
64586: IFFALSE 64590
// exit ;
64588: GO 64638
// if asc then
64590: LD_VAR 0 2
64594: IFFALSE 64618
// result := SortListByListAsc ( units , tmp ) else
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: LD_VAR 0 5
64610: PPUSH
64611: CALL_OW 76
64615: ST_TO_ADDR
64616: GO 64638
// result := SortListByListDesc ( units , tmp ) ;
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 5
64632: PPUSH
64633: CALL_OW 77
64637: ST_TO_ADDR
// end ;
64638: LD_VAR 0 3
64642: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64643: LD_INT 0
64645: PPUSH
64646: PPUSH
// task := GetTaskList ( mech ) ;
64647: LD_ADDR_VAR 0 4
64651: PUSH
64652: LD_VAR 0 1
64656: PPUSH
64657: CALL_OW 437
64661: ST_TO_ADDR
// if not task then
64662: LD_VAR 0 4
64666: NOT
64667: IFFALSE 64671
// exit ;
64669: GO 64715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64671: LD_ADDR_VAR 0 3
64675: PUSH
64676: LD_VAR 0 4
64680: PUSH
64681: LD_INT 1
64683: ARRAY
64684: PUSH
64685: LD_INT 1
64687: ARRAY
64688: PUSH
64689: LD_STRING r
64691: EQUAL
64692: IFFALSE 64714
64694: PUSH
64695: LD_VAR 0 4
64699: PUSH
64700: LD_INT 1
64702: ARRAY
64703: PUSH
64704: LD_INT 4
64706: ARRAY
64707: PUSH
64708: LD_VAR 0 2
64712: EQUAL
64713: AND
64714: ST_TO_ADDR
// end ;
64715: LD_VAR 0 3
64719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64720: LD_INT 0
64722: PPUSH
// SetDir ( unit , d ) ;
64723: LD_VAR 0 1
64727: PPUSH
64728: LD_VAR 0 4
64732: PPUSH
64733: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64737: LD_ADDR_VAR 0 6
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_VAR 0 2
64751: PPUSH
64752: LD_VAR 0 3
64756: PPUSH
64757: LD_VAR 0 5
64761: PPUSH
64762: CALL_OW 48
64766: ST_TO_ADDR
// end ;
64767: LD_VAR 0 6
64771: RET
// export function ToNaturalNumber ( number ) ; begin
64772: LD_INT 0
64774: PPUSH
// result := number div 1 ;
64775: LD_ADDR_VAR 0 2
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_INT 1
64787: DIV
64788: ST_TO_ADDR
// if number < 0 then
64789: LD_VAR 0 1
64793: PUSH
64794: LD_INT 0
64796: LESS
64797: IFFALSE 64807
// result := 0 ;
64799: LD_ADDR_VAR 0 2
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// end ;
64807: LD_VAR 0 2
64811: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64812: LD_INT 0
64814: PPUSH
64815: PPUSH
64816: PPUSH
// if not buildings then
64817: LD_VAR 0 1
64821: NOT
64822: IFFALSE 64826
// exit ;
64824: GO 64941
// tmp := [ ] ;
64826: LD_ADDR_VAR 0 5
64830: PUSH
64831: EMPTY
64832: ST_TO_ADDR
// for b in buildings do
64833: LD_ADDR_VAR 0 4
64837: PUSH
64838: LD_VAR 0 1
64842: PUSH
64843: FOR_IN
64844: IFFALSE 64882
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64846: LD_ADDR_VAR 0 5
64850: PUSH
64851: LD_VAR 0 5
64855: PPUSH
64856: LD_VAR 0 5
64860: PUSH
64861: LD_INT 1
64863: PLUS
64864: PPUSH
64865: LD_VAR 0 4
64869: PPUSH
64870: CALL_OW 266
64874: PPUSH
64875: CALL_OW 1
64879: ST_TO_ADDR
64880: GO 64843
64882: POP
64883: POP
// if not tmp then
64884: LD_VAR 0 5
64888: NOT
64889: IFFALSE 64893
// exit ;
64891: GO 64941
// if asc then
64893: LD_VAR 0 2
64897: IFFALSE 64921
// result := SortListByListAsc ( buildings , tmp ) else
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: LD_VAR 0 1
64908: PPUSH
64909: LD_VAR 0 5
64913: PPUSH
64914: CALL_OW 76
64918: ST_TO_ADDR
64919: GO 64941
// result := SortListByListDesc ( buildings , tmp ) ;
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: LD_VAR 0 1
64930: PPUSH
64931: LD_VAR 0 5
64935: PPUSH
64936: CALL_OW 77
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 3
64945: RET
// export function SortByClass ( units , class ) ; var un ; begin
64946: LD_INT 0
64948: PPUSH
64949: PPUSH
// if not units or not class then
64950: LD_VAR 0 1
64954: NOT
64955: IFTRUE 64964
64957: PUSH
64958: LD_VAR 0 2
64962: NOT
64963: OR
64964: IFFALSE 64968
// exit ;
64966: GO 65063
// result := [ ] ;
64968: LD_ADDR_VAR 0 3
64972: PUSH
64973: EMPTY
64974: ST_TO_ADDR
// for un in units do
64975: LD_ADDR_VAR 0 4
64979: PUSH
64980: LD_VAR 0 1
64984: PUSH
64985: FOR_IN
64986: IFFALSE 65061
// if GetClass ( un ) = class then
64988: LD_VAR 0 4
64992: PPUSH
64993: CALL_OW 257
64997: PUSH
64998: LD_VAR 0 2
65002: EQUAL
65003: IFFALSE 65030
// result := Insert ( result , 1 , un ) else
65005: LD_ADDR_VAR 0 3
65009: PUSH
65010: LD_VAR 0 3
65014: PPUSH
65015: LD_INT 1
65017: PPUSH
65018: LD_VAR 0 4
65022: PPUSH
65023: CALL_OW 2
65027: ST_TO_ADDR
65028: GO 65059
// result := Replace ( result , result + 1 , un ) ;
65030: LD_ADDR_VAR 0 3
65034: PUSH
65035: LD_VAR 0 3
65039: PPUSH
65040: LD_VAR 0 3
65044: PUSH
65045: LD_INT 1
65047: PLUS
65048: PPUSH
65049: LD_VAR 0 4
65053: PPUSH
65054: CALL_OW 1
65058: ST_TO_ADDR
65059: GO 64985
65061: POP
65062: POP
// end ;
65063: LD_VAR 0 3
65067: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65068: LD_INT 0
65070: PPUSH
65071: PPUSH
65072: PPUSH
65073: PPUSH
65074: PPUSH
65075: PPUSH
65076: PPUSH
// result := [ ] ;
65077: LD_ADDR_VAR 0 4
65081: PUSH
65082: EMPTY
65083: ST_TO_ADDR
// if x - r < 0 then
65084: LD_VAR 0 1
65088: PUSH
65089: LD_VAR 0 3
65093: MINUS
65094: PUSH
65095: LD_INT 0
65097: LESS
65098: IFFALSE 65110
// min_x := 0 else
65100: LD_ADDR_VAR 0 8
65104: PUSH
65105: LD_INT 0
65107: ST_TO_ADDR
65108: GO 65126
// min_x := x - r ;
65110: LD_ADDR_VAR 0 8
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_VAR 0 3
65124: MINUS
65125: ST_TO_ADDR
// if y - r < 0 then
65126: LD_VAR 0 2
65130: PUSH
65131: LD_VAR 0 3
65135: MINUS
65136: PUSH
65137: LD_INT 0
65139: LESS
65140: IFFALSE 65152
// min_y := 0 else
65142: LD_ADDR_VAR 0 7
65146: PUSH
65147: LD_INT 0
65149: ST_TO_ADDR
65150: GO 65168
// min_y := y - r ;
65152: LD_ADDR_VAR 0 7
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_VAR 0 3
65166: MINUS
65167: ST_TO_ADDR
// max_x := x + r ;
65168: LD_ADDR_VAR 0 9
65172: PUSH
65173: LD_VAR 0 1
65177: PUSH
65178: LD_VAR 0 3
65182: PLUS
65183: ST_TO_ADDR
// max_y := y + r ;
65184: LD_ADDR_VAR 0 10
65188: PUSH
65189: LD_VAR 0 2
65193: PUSH
65194: LD_VAR 0 3
65198: PLUS
65199: ST_TO_ADDR
// for _x = min_x to max_x do
65200: LD_ADDR_VAR 0 5
65204: PUSH
65205: DOUBLE
65206: LD_VAR 0 8
65210: DEC
65211: ST_TO_ADDR
65212: LD_VAR 0 9
65216: PUSH
65217: FOR_TO
65218: IFFALSE 65319
// for _y = min_y to max_y do
65220: LD_ADDR_VAR 0 6
65224: PUSH
65225: DOUBLE
65226: LD_VAR 0 7
65230: DEC
65231: ST_TO_ADDR
65232: LD_VAR 0 10
65236: PUSH
65237: FOR_TO
65238: IFFALSE 65315
// begin if not ValidHex ( _x , _y ) then
65240: LD_VAR 0 5
65244: PPUSH
65245: LD_VAR 0 6
65249: PPUSH
65250: CALL_OW 488
65254: NOT
65255: IFFALSE 65259
// continue ;
65257: GO 65237
// if GetResourceTypeXY ( _x , _y ) then
65259: LD_VAR 0 5
65263: PPUSH
65264: LD_VAR 0 6
65268: PPUSH
65269: CALL_OW 283
65273: IFFALSE 65313
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65275: LD_ADDR_VAR 0 4
65279: PUSH
65280: LD_VAR 0 4
65284: PPUSH
65285: LD_VAR 0 4
65289: PUSH
65290: LD_INT 1
65292: PLUS
65293: PPUSH
65294: LD_VAR 0 5
65298: PUSH
65299: LD_VAR 0 6
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PPUSH
65308: CALL_OW 1
65312: ST_TO_ADDR
// end ;
65313: GO 65237
65315: POP
65316: POP
65317: GO 65217
65319: POP
65320: POP
// end ;
65321: LD_VAR 0 4
65325: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65326: LD_INT 0
65328: PPUSH
65329: PPUSH
65330: PPUSH
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
65335: PPUSH
// if not units then
65336: LD_VAR 0 1
65340: NOT
65341: IFFALSE 65345
// exit ;
65343: GO 65877
// result := UnitFilter ( units , [ f_ok ] ) ;
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: LD_VAR 0 1
65354: PPUSH
65355: LD_INT 50
65357: PUSH
65358: EMPTY
65359: LIST
65360: PPUSH
65361: CALL_OW 72
65365: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65366: LD_ADDR_VAR 0 8
65370: PUSH
65371: LD_VAR 0 1
65375: PUSH
65376: LD_INT 1
65378: ARRAY
65379: PPUSH
65380: CALL_OW 255
65384: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65385: LD_ADDR_VAR 0 10
65389: PUSH
65390: LD_INT 29
65392: PUSH
65393: LD_INT 91
65395: PUSH
65396: LD_INT 49
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// if not result then
65404: LD_VAR 0 3
65408: NOT
65409: IFFALSE 65413
// exit ;
65411: GO 65877
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65413: LD_ADDR_VAR 0 5
65417: PUSH
65418: LD_INT 81
65420: PUSH
65421: LD_VAR 0 8
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PPUSH
65430: CALL_OW 69
65434: ST_TO_ADDR
// for i in result do
65435: LD_ADDR_VAR 0 4
65439: PUSH
65440: LD_VAR 0 3
65444: PUSH
65445: FOR_IN
65446: IFFALSE 65875
// begin tag := GetTag ( i ) + 1 ;
65448: LD_ADDR_VAR 0 9
65452: PUSH
65453: LD_VAR 0 4
65457: PPUSH
65458: CALL_OW 110
65462: PUSH
65463: LD_INT 1
65465: PLUS
65466: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65467: LD_ADDR_VAR 0 7
65471: PUSH
65472: LD_VAR 0 4
65476: PPUSH
65477: CALL_OW 250
65481: PPUSH
65482: LD_VAR 0 4
65486: PPUSH
65487: CALL_OW 251
65491: PPUSH
65492: LD_INT 4
65494: PPUSH
65495: CALL 65068 0 3
65499: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65500: LD_VAR 0 4
65504: PPUSH
65505: CALL_OW 247
65509: PUSH
65510: LD_INT 2
65512: EQUAL
65513: IFFALSE 65525
65515: PUSH
65516: LD_VAR 0 7
65520: PUSH
65521: LD_INT 2
65523: GREATER
65524: AND
65525: IFFALSE 65545
65527: PUSH
65528: LD_VAR 0 4
65532: PPUSH
65533: CALL_OW 264
65537: PUSH
65538: LD_VAR 0 10
65542: IN
65543: NOT
65544: AND
65545: IFFALSE 65584
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65547: LD_VAR 0 4
65551: PPUSH
65552: LD_VAR 0 7
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: PPUSH
65565: LD_VAR 0 7
65569: PUSH
65570: LD_INT 1
65572: ARRAY
65573: PUSH
65574: LD_INT 2
65576: ARRAY
65577: PPUSH
65578: CALL_OW 116
65582: GO 65873
// if path > tag then
65584: LD_VAR 0 2
65588: PUSH
65589: LD_VAR 0 9
65593: GREATER
65594: IFFALSE 65802
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65596: LD_ADDR_VAR 0 6
65600: PUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: LD_INT 91
65608: PUSH
65609: LD_VAR 0 4
65613: PUSH
65614: LD_INT 8
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PPUSH
65622: CALL_OW 72
65626: ST_TO_ADDR
// if nearEnemy then
65627: LD_VAR 0 6
65631: IFFALSE 65700
// begin if GetWeapon ( i ) = ru_time_lapser then
65633: LD_VAR 0 4
65637: PPUSH
65638: CALL_OW 264
65642: PUSH
65643: LD_INT 49
65645: EQUAL
65646: IFFALSE 65674
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65648: LD_VAR 0 4
65652: PPUSH
65653: LD_VAR 0 6
65657: PPUSH
65658: LD_VAR 0 4
65662: PPUSH
65663: CALL_OW 74
65667: PPUSH
65668: CALL_OW 112
65672: GO 65698
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65674: LD_VAR 0 4
65678: PPUSH
65679: LD_VAR 0 6
65683: PPUSH
65684: LD_VAR 0 4
65688: PPUSH
65689: CALL_OW 74
65693: PPUSH
65694: CALL 66958 0 2
// end else
65698: GO 65800
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65700: LD_VAR 0 4
65704: PPUSH
65705: LD_VAR 0 2
65709: PUSH
65710: LD_VAR 0 9
65714: ARRAY
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: PPUSH
65720: LD_VAR 0 2
65724: PUSH
65725: LD_VAR 0 9
65729: ARRAY
65730: PUSH
65731: LD_INT 2
65733: ARRAY
65734: PPUSH
65735: CALL_OW 297
65739: PUSH
65740: LD_INT 6
65742: GREATER
65743: IFFALSE 65786
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65745: LD_VAR 0 4
65749: PPUSH
65750: LD_VAR 0 2
65754: PUSH
65755: LD_VAR 0 9
65759: ARRAY
65760: PUSH
65761: LD_INT 1
65763: ARRAY
65764: PPUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_VAR 0 9
65774: ARRAY
65775: PUSH
65776: LD_INT 2
65778: ARRAY
65779: PPUSH
65780: CALL_OW 114
65784: GO 65800
// SetTag ( i , tag ) ;
65786: LD_VAR 0 4
65790: PPUSH
65791: LD_VAR 0 9
65795: PPUSH
65796: CALL_OW 109
// end else
65800: GO 65873
// if enemy then
65802: LD_VAR 0 5
65806: IFFALSE 65873
// begin if GetWeapon ( i ) = ru_time_lapser then
65808: LD_VAR 0 4
65812: PPUSH
65813: CALL_OW 264
65817: PUSH
65818: LD_INT 49
65820: EQUAL
65821: IFFALSE 65849
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65823: LD_VAR 0 4
65827: PPUSH
65828: LD_VAR 0 5
65832: PPUSH
65833: LD_VAR 0 4
65837: PPUSH
65838: CALL_OW 74
65842: PPUSH
65843: CALL_OW 112
65847: GO 65873
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65849: LD_VAR 0 4
65853: PPUSH
65854: LD_VAR 0 5
65858: PPUSH
65859: LD_VAR 0 4
65863: PPUSH
65864: CALL_OW 74
65868: PPUSH
65869: CALL 66958 0 2
// end ; end ;
65873: GO 65445
65875: POP
65876: POP
// end ;
65877: LD_VAR 0 3
65881: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65882: LD_INT 0
65884: PPUSH
65885: PPUSH
65886: PPUSH
// if not unit or IsInUnit ( unit ) then
65887: LD_VAR 0 1
65891: NOT
65892: IFTRUE 65905
65894: PUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 310
65904: OR
65905: IFFALSE 65909
// exit ;
65907: GO 66000
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65909: LD_ADDR_VAR 0 4
65913: PUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: CALL_OW 250
65923: PPUSH
65924: LD_VAR 0 2
65928: PPUSH
65929: LD_INT 1
65931: PPUSH
65932: CALL_OW 272
65936: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: LD_VAR 0 1
65946: PPUSH
65947: CALL_OW 251
65951: PPUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: LD_INT 1
65959: PPUSH
65960: CALL_OW 273
65964: ST_TO_ADDR
// if ValidHex ( x , y ) then
65965: LD_VAR 0 4
65969: PPUSH
65970: LD_VAR 0 5
65974: PPUSH
65975: CALL_OW 488
65979: IFFALSE 66000
// ComTurnXY ( unit , x , y ) ;
65981: LD_VAR 0 1
65985: PPUSH
65986: LD_VAR 0 4
65990: PPUSH
65991: LD_VAR 0 5
65995: PPUSH
65996: CALL_OW 118
// end ;
66000: LD_VAR 0 3
66004: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66005: LD_INT 0
66007: PPUSH
66008: PPUSH
// result := false ;
66009: LD_ADDR_VAR 0 3
66013: PUSH
66014: LD_INT 0
66016: ST_TO_ADDR
// if not units then
66017: LD_VAR 0 2
66021: NOT
66022: IFFALSE 66026
// exit ;
66024: GO 66071
// for i in units do
66026: LD_ADDR_VAR 0 4
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: FOR_IN
66037: IFFALSE 66069
// if See ( side , i ) then
66039: LD_VAR 0 1
66043: PPUSH
66044: LD_VAR 0 4
66048: PPUSH
66049: CALL_OW 292
66053: IFFALSE 66067
// begin result := true ;
66055: LD_ADDR_VAR 0 3
66059: PUSH
66060: LD_INT 1
66062: ST_TO_ADDR
// exit ;
66063: POP
66064: POP
66065: GO 66071
// end ;
66067: GO 66036
66069: POP
66070: POP
// end ;
66071: LD_VAR 0 3
66075: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66076: LD_INT 0
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
// if not unit or not points then
66082: LD_VAR 0 1
66086: NOT
66087: IFTRUE 66096
66089: PUSH
66090: LD_VAR 0 2
66094: NOT
66095: OR
66096: IFFALSE 66100
// exit ;
66098: GO 66190
// dist := 99999 ;
66100: LD_ADDR_VAR 0 5
66104: PUSH
66105: LD_INT 99999
66107: ST_TO_ADDR
// for i in points do
66108: LD_ADDR_VAR 0 4
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: FOR_IN
66119: IFFALSE 66188
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66121: LD_ADDR_VAR 0 6
66125: PUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: LD_VAR 0 4
66135: PUSH
66136: LD_INT 1
66138: ARRAY
66139: PPUSH
66140: LD_VAR 0 4
66144: PUSH
66145: LD_INT 2
66147: ARRAY
66148: PPUSH
66149: CALL_OW 297
66153: ST_TO_ADDR
// if tmpDist < dist then
66154: LD_VAR 0 6
66158: PUSH
66159: LD_VAR 0 5
66163: LESS
66164: IFFALSE 66186
// begin result := i ;
66166: LD_ADDR_VAR 0 3
66170: PUSH
66171: LD_VAR 0 4
66175: ST_TO_ADDR
// dist := tmpDist ;
66176: LD_ADDR_VAR 0 5
66180: PUSH
66181: LD_VAR 0 6
66185: ST_TO_ADDR
// end ; end ;
66186: GO 66118
66188: POP
66189: POP
// end ;
66190: LD_VAR 0 3
66194: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66195: LD_INT 0
66197: PPUSH
// uc_side := side ;
66198: LD_ADDR_OWVAR 20
66202: PUSH
66203: LD_VAR 0 1
66207: ST_TO_ADDR
// uc_nation := 3 ;
66208: LD_ADDR_OWVAR 21
66212: PUSH
66213: LD_INT 3
66215: ST_TO_ADDR
// vc_chassis := 25 ;
66216: LD_ADDR_OWVAR 37
66220: PUSH
66221: LD_INT 25
66223: ST_TO_ADDR
// vc_engine := engine_siberite ;
66224: LD_ADDR_OWVAR 39
66228: PUSH
66229: LD_INT 3
66231: ST_TO_ADDR
// vc_control := control_computer ;
66232: LD_ADDR_OWVAR 38
66236: PUSH
66237: LD_INT 3
66239: ST_TO_ADDR
// vc_weapon := 59 ;
66240: LD_ADDR_OWVAR 40
66244: PUSH
66245: LD_INT 59
66247: ST_TO_ADDR
// result := CreateVehicle ;
66248: LD_ADDR_VAR 0 5
66252: PUSH
66253: CALL_OW 45
66257: ST_TO_ADDR
// SetDir ( result , d ) ;
66258: LD_VAR 0 5
66262: PPUSH
66263: LD_VAR 0 4
66267: PPUSH
66268: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66272: LD_VAR 0 5
66276: PPUSH
66277: LD_VAR 0 2
66281: PPUSH
66282: LD_VAR 0 3
66286: PPUSH
66287: LD_INT 0
66289: PPUSH
66290: CALL_OW 48
// end ;
66294: LD_VAR 0 5
66298: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66299: LD_INT 0
66301: PPUSH
66302: PPUSH
66303: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66304: LD_ADDR_VAR 0 2
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66327: LD_VAR 0 1
66331: NOT
66332: IFTRUE 66365
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: CALL_OW 264
66344: PUSH
66345: LD_INT 12
66347: PUSH
66348: LD_INT 51
66350: PUSH
66351: LD_INT 32
66353: PUSH
66354: LD_INT 89
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: IN
66363: NOT
66364: OR
66365: IFFALSE 66369
// exit ;
66367: GO 66467
// for i := 1 to 3 do
66369: LD_ADDR_VAR 0 3
66373: PUSH
66374: DOUBLE
66375: LD_INT 1
66377: DEC
66378: ST_TO_ADDR
66379: LD_INT 3
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66465
// begin tmp := GetCargo ( cargo , i ) ;
66385: LD_ADDR_VAR 0 4
66389: PUSH
66390: LD_VAR 0 1
66394: PPUSH
66395: LD_VAR 0 3
66399: PPUSH
66400: CALL_OW 289
66404: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_VAR 0 2
66414: PPUSH
66415: LD_VAR 0 3
66419: PPUSH
66420: LD_VAR 0 4
66424: PPUSH
66425: CALL_OW 1
66429: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66430: LD_ADDR_VAR 0 2
66434: PUSH
66435: LD_VAR 0 2
66439: PPUSH
66440: LD_INT 4
66442: PPUSH
66443: LD_VAR 0 2
66447: PUSH
66448: LD_INT 4
66450: ARRAY
66451: PUSH
66452: LD_VAR 0 4
66456: PLUS
66457: PPUSH
66458: CALL_OW 1
66462: ST_TO_ADDR
// end ;
66463: GO 66382
66465: POP
66466: POP
// end ;
66467: LD_VAR 0 2
66471: RET
// export function Length ( array ) ; begin
66472: LD_INT 0
66474: PPUSH
// result := array + 0 ;
66475: LD_ADDR_VAR 0 2
66479: PUSH
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 0
66487: PLUS
66488: ST_TO_ADDR
// end ;
66489: LD_VAR 0 2
66493: RET
// export function PrepareArray ( array ) ; begin
66494: LD_INT 0
66496: PPUSH
// result := array diff 0 ;
66497: LD_ADDR_VAR 0 2
66501: PUSH
66502: LD_VAR 0 1
66506: PUSH
66507: LD_INT 0
66509: DIFF
66510: ST_TO_ADDR
// if not result [ 1 ] then
66511: LD_VAR 0 2
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: NOT
66520: IFFALSE 66540
// result := Delete ( result , 1 ) ;
66522: LD_ADDR_VAR 0 2
66526: PUSH
66527: LD_VAR 0 2
66531: PPUSH
66532: LD_INT 1
66534: PPUSH
66535: CALL_OW 3
66539: ST_TO_ADDR
// end ;
66540: LD_VAR 0 2
66544: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66545: LD_INT 0
66547: PPUSH
66548: PPUSH
66549: PPUSH
66550: PPUSH
// sibRocketRange := 25 ;
66551: LD_ADDR_VAR 0 6
66555: PUSH
66556: LD_INT 25
66558: ST_TO_ADDR
// result := false ;
66559: LD_ADDR_VAR 0 4
66563: PUSH
66564: LD_INT 0
66566: ST_TO_ADDR
// for i := 0 to 5 do
66567: LD_ADDR_VAR 0 5
66571: PUSH
66572: DOUBLE
66573: LD_INT 0
66575: DEC
66576: ST_TO_ADDR
66577: LD_INT 5
66579: PUSH
66580: FOR_TO
66581: IFFALSE 66648
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66583: LD_VAR 0 1
66587: PPUSH
66588: LD_VAR 0 5
66592: PPUSH
66593: LD_VAR 0 6
66597: PPUSH
66598: CALL_OW 272
66602: PPUSH
66603: LD_VAR 0 2
66607: PPUSH
66608: LD_VAR 0 5
66612: PPUSH
66613: LD_VAR 0 6
66617: PPUSH
66618: CALL_OW 273
66622: PPUSH
66623: LD_VAR 0 3
66627: PPUSH
66628: CALL_OW 309
66632: IFFALSE 66646
// begin result := true ;
66634: LD_ADDR_VAR 0 4
66638: PUSH
66639: LD_INT 1
66641: ST_TO_ADDR
// exit ;
66642: POP
66643: POP
66644: GO 66650
// end ;
66646: GO 66580
66648: POP
66649: POP
// end ;
66650: LD_VAR 0 4
66654: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66655: LD_INT 0
66657: PPUSH
66658: PPUSH
66659: PPUSH
// if btype = b_depot then
66660: LD_VAR 0 2
66664: PUSH
66665: LD_INT 0
66667: EQUAL
66668: IFFALSE 66680
// begin result := true ;
66670: LD_ADDR_VAR 0 3
66674: PUSH
66675: LD_INT 1
66677: ST_TO_ADDR
// exit ;
66678: GO 66800
// end ; pom := GetBase ( depot ) ;
66680: LD_ADDR_VAR 0 4
66684: PUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 274
66694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66695: LD_ADDR_VAR 0 5
66699: PUSH
66700: LD_VAR 0 2
66704: PPUSH
66705: LD_VAR 0 1
66709: PPUSH
66710: CALL_OW 248
66714: PPUSH
66715: CALL_OW 450
66719: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66720: LD_ADDR_VAR 0 3
66724: PUSH
66725: LD_VAR 0 4
66729: PPUSH
66730: LD_INT 1
66732: PPUSH
66733: CALL_OW 275
66737: PUSH
66738: LD_VAR 0 5
66742: PUSH
66743: LD_INT 1
66745: ARRAY
66746: GREATEREQUAL
66747: IFFALSE 66773
66749: PUSH
66750: LD_VAR 0 4
66754: PPUSH
66755: LD_INT 2
66757: PPUSH
66758: CALL_OW 275
66762: PUSH
66763: LD_VAR 0 5
66767: PUSH
66768: LD_INT 2
66770: ARRAY
66771: GREATEREQUAL
66772: AND
66773: IFFALSE 66799
66775: PUSH
66776: LD_VAR 0 4
66780: PPUSH
66781: LD_INT 3
66783: PPUSH
66784: CALL_OW 275
66788: PUSH
66789: LD_VAR 0 5
66793: PUSH
66794: LD_INT 3
66796: ARRAY
66797: GREATEREQUAL
66798: AND
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 3
66804: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66805: LD_INT 0
66807: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_VAR 0 2
66817: PPUSH
66818: LD_INT 0
66820: PPUSH
66821: LD_INT 0
66823: PPUSH
66824: LD_INT 1
66826: PPUSH
66827: LD_INT 0
66829: PPUSH
66830: CALL_OW 587
// end ;
66834: LD_VAR 0 3
66838: RET
// export function CenterOnNow ( unit ) ; begin
66839: LD_INT 0
66841: PPUSH
// result := IsInUnit ( unit ) ;
66842: LD_ADDR_VAR 0 2
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 310
66856: ST_TO_ADDR
// if not result then
66857: LD_VAR 0 2
66861: NOT
66862: IFFALSE 66874
// result := unit ;
66864: LD_ADDR_VAR 0 2
66868: PUSH
66869: LD_VAR 0 1
66873: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66874: LD_VAR 0 1
66878: PPUSH
66879: CALL_OW 87
// end ;
66883: LD_VAR 0 2
66887: RET
// export function ComMoveHex ( unit , hex ) ; begin
66888: LD_INT 0
66890: PPUSH
// if not hex then
66891: LD_VAR 0 2
66895: NOT
66896: IFFALSE 66900
// exit ;
66898: GO 66953
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 1
66907: ARRAY
66908: PPUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_INT 2
66916: ARRAY
66917: PPUSH
66918: CALL_OW 428
66922: IFFALSE 66926
// exit ;
66924: GO 66953
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66926: LD_VAR 0 1
66930: PPUSH
66931: LD_VAR 0 2
66935: PUSH
66936: LD_INT 1
66938: ARRAY
66939: PPUSH
66940: LD_VAR 0 2
66944: PUSH
66945: LD_INT 2
66947: ARRAY
66948: PPUSH
66949: CALL_OW 111
// end ;
66953: LD_VAR 0 3
66957: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66958: LD_INT 0
66960: PPUSH
66961: PPUSH
66962: PPUSH
// if not unit or not enemy then
66963: LD_VAR 0 1
66967: NOT
66968: IFTRUE 66977
66970: PUSH
66971: LD_VAR 0 2
66975: NOT
66976: OR
66977: IFFALSE 66981
// exit ;
66979: GO 67107
// x := GetX ( enemy ) ;
66981: LD_ADDR_VAR 0 4
66985: PUSH
66986: LD_VAR 0 2
66990: PPUSH
66991: CALL_OW 250
66995: ST_TO_ADDR
// y := GetY ( enemy ) ;
66996: LD_ADDR_VAR 0 5
67000: PUSH
67001: LD_VAR 0 2
67005: PPUSH
67006: CALL_OW 251
67010: ST_TO_ADDR
// if ValidHex ( x , y ) then
67011: LD_VAR 0 4
67015: PPUSH
67016: LD_VAR 0 5
67020: PPUSH
67021: CALL_OW 488
67025: IFFALSE 67107
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67027: LD_VAR 0 2
67031: PPUSH
67032: CALL_OW 247
67036: PUSH
67037: LD_INT 3
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: IN
67047: IFTRUE 67070
67049: PUSH
67050: LD_VAR 0 1
67054: PPUSH
67055: CALL_OW 255
67059: PPUSH
67060: LD_VAR 0 2
67064: PPUSH
67065: CALL_OW 292
67069: OR
67070: IFFALSE 67088
// ComAttackUnit ( unit , enemy ) else
67072: LD_VAR 0 1
67076: PPUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 115
67086: GO 67107
// ComAgressiveMove ( unit , x , y ) ;
67088: LD_VAR 0 1
67092: PPUSH
67093: LD_VAR 0 4
67097: PPUSH
67098: LD_VAR 0 5
67102: PPUSH
67103: CALL_OW 114
// end ;
67107: LD_VAR 0 3
67111: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67112: LD_INT 0
67114: PPUSH
67115: PPUSH
67116: PPUSH
// list := AreaToList ( area , 0 ) ;
67117: LD_ADDR_VAR 0 5
67121: PUSH
67122: LD_VAR 0 1
67126: PPUSH
67127: LD_INT 0
67129: PPUSH
67130: CALL_OW 517
67134: ST_TO_ADDR
// if not list then
67135: LD_VAR 0 5
67139: NOT
67140: IFFALSE 67144
// exit ;
67142: GO 67274
// if all then
67144: LD_VAR 0 2
67148: IFFALSE 67236
// begin for i := 1 to list [ 1 ] do
67150: LD_ADDR_VAR 0 4
67154: PUSH
67155: DOUBLE
67156: LD_INT 1
67158: DEC
67159: ST_TO_ADDR
67160: LD_VAR 0 5
67164: PUSH
67165: LD_INT 1
67167: ARRAY
67168: PUSH
67169: FOR_TO
67170: IFFALSE 67232
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67172: LD_ADDR_VAR 0 3
67176: PUSH
67177: LD_VAR 0 3
67181: PPUSH
67182: LD_VAR 0 3
67186: PUSH
67187: LD_INT 1
67189: PLUS
67190: PPUSH
67191: LD_VAR 0 5
67195: PUSH
67196: LD_INT 1
67198: ARRAY
67199: PUSH
67200: LD_VAR 0 4
67204: ARRAY
67205: PUSH
67206: LD_VAR 0 5
67210: PUSH
67211: LD_INT 2
67213: ARRAY
67214: PUSH
67215: LD_VAR 0 4
67219: ARRAY
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PPUSH
67225: CALL_OW 1
67229: ST_TO_ADDR
67230: GO 67169
67232: POP
67233: POP
// exit ;
67234: GO 67274
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67236: LD_ADDR_VAR 0 3
67240: PUSH
67241: LD_VAR 0 5
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_INT 1
67252: ARRAY
67253: PUSH
67254: LD_VAR 0 5
67258: PUSH
67259: LD_INT 2
67261: ARRAY
67262: PUSH
67263: LD_INT 1
67265: ARRAY
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: ST_TO_ADDR
// end ;
67274: LD_VAR 0 3
67278: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
// list := AreaToList ( area , 0 ) ;
67283: LD_ADDR_VAR 0 4
67287: PUSH
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_INT 0
67295: PPUSH
67296: CALL_OW 517
67300: ST_TO_ADDR
// if not list then
67301: LD_VAR 0 4
67305: NOT
67306: IFFALSE 67310
// exit ;
67308: GO 67351
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67310: LD_ADDR_VAR 0 3
67314: PUSH
67315: LD_VAR 0 4
67319: PUSH
67320: LD_INT 1
67322: ARRAY
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PUSH
67328: LD_VAR 0 4
67332: PUSH
67333: LD_INT 2
67335: ARRAY
67336: PUSH
67337: LD_INT 1
67339: ARRAY
67340: PUSH
67341: LD_VAR 0 2
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: ST_TO_ADDR
// end ;
67351: LD_VAR 0 3
67355: RET
// export function First ( array ) ; begin
67356: LD_INT 0
67358: PPUSH
// if not array then
67359: LD_VAR 0 1
67363: NOT
67364: IFFALSE 67368
// exit ;
67366: GO 67382
// result := array [ 1 ] ;
67368: LD_ADDR_VAR 0 2
67372: PUSH
67373: LD_VAR 0 1
67377: PUSH
67378: LD_INT 1
67380: ARRAY
67381: ST_TO_ADDR
// end ;
67382: LD_VAR 0 2
67386: RET
// export function Last ( array ) ; begin
67387: LD_INT 0
67389: PPUSH
// if not array then
67390: LD_VAR 0 1
67394: NOT
67395: IFFALSE 67399
// exit ;
67397: GO 67415
// result := array [ array ] ;
67399: LD_ADDR_VAR 0 2
67403: PUSH
67404: LD_VAR 0 1
67408: PUSH
67409: LD_VAR 0 1
67413: ARRAY
67414: ST_TO_ADDR
// end ;
67415: LD_VAR 0 2
67419: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67420: LD_INT 0
67422: PPUSH
67423: PPUSH
// result := [ ] ;
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: EMPTY
67430: ST_TO_ADDR
// if not array then
67431: LD_VAR 0 1
67435: NOT
67436: IFFALSE 67440
// exit ;
67438: GO 67552
// for i := 1 to array do
67440: LD_ADDR_VAR 0 6
67444: PUSH
67445: DOUBLE
67446: LD_INT 1
67448: DEC
67449: ST_TO_ADDR
67450: LD_VAR 0 1
67454: PUSH
67455: FOR_TO
67456: IFFALSE 67550
// if array [ i ] [ index ] = value then
67458: LD_VAR 0 1
67462: PUSH
67463: LD_VAR 0 6
67467: ARRAY
67468: PUSH
67469: LD_VAR 0 2
67473: ARRAY
67474: PUSH
67475: LD_VAR 0 3
67479: EQUAL
67480: IFFALSE 67548
// begin if indexColumn then
67482: LD_VAR 0 4
67486: IFFALSE 67522
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67488: LD_ADDR_VAR 0 5
67492: PUSH
67493: LD_VAR 0 5
67497: PPUSH
67498: LD_VAR 0 1
67502: PUSH
67503: LD_VAR 0 6
67507: ARRAY
67508: PUSH
67509: LD_VAR 0 4
67513: ARRAY
67514: PPUSH
67515: CALL 62560 0 2
67519: ST_TO_ADDR
67520: GO 67548
// result := Join ( result , array [ i ] ) ;
67522: LD_ADDR_VAR 0 5
67526: PUSH
67527: LD_VAR 0 5
67531: PPUSH
67532: LD_VAR 0 1
67536: PUSH
67537: LD_VAR 0 6
67541: ARRAY
67542: PPUSH
67543: CALL 62560 0 2
67547: ST_TO_ADDR
// end ;
67548: GO 67455
67550: POP
67551: POP
// end ;
67552: LD_VAR 0 5
67556: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67557: LD_INT 0
67559: PPUSH
// if not vehicles or not parkingPoint then
67560: LD_VAR 0 1
67564: NOT
67565: IFTRUE 67574
67567: PUSH
67568: LD_VAR 0 2
67572: NOT
67573: OR
67574: IFFALSE 67578
// exit ;
67576: GO 67676
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67578: LD_ADDR_VAR 0 1
67582: PUSH
67583: LD_VAR 0 1
67587: PPUSH
67588: LD_INT 50
67590: PUSH
67591: EMPTY
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: LD_INT 92
67599: PUSH
67600: LD_VAR 0 2
67604: PUSH
67605: LD_INT 1
67607: ARRAY
67608: PUSH
67609: LD_VAR 0 2
67613: PUSH
67614: LD_INT 2
67616: ARRAY
67617: PUSH
67618: LD_INT 8
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PPUSH
67635: CALL_OW 72
67639: ST_TO_ADDR
// if not vehicles then
67640: LD_VAR 0 1
67644: NOT
67645: IFFALSE 67649
// exit ;
67647: GO 67676
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67649: LD_VAR 0 1
67653: PPUSH
67654: LD_VAR 0 2
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PPUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 2
67670: ARRAY
67671: PPUSH
67672: CALL_OW 111
// end ;
67676: LD_VAR 0 3
67680: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67681: LD_INT 0
67683: PPUSH
67684: PPUSH
67685: PPUSH
// if not side or not area then
67686: LD_VAR 0 1
67690: NOT
67691: IFTRUE 67700
67693: PUSH
67694: LD_VAR 0 2
67698: NOT
67699: OR
67700: IFFALSE 67704
// exit ;
67702: GO 67823
// tmp := AreaToList ( area , 0 ) ;
67704: LD_ADDR_VAR 0 5
67708: PUSH
67709: LD_VAR 0 2
67713: PPUSH
67714: LD_INT 0
67716: PPUSH
67717: CALL_OW 517
67721: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67722: LD_ADDR_VAR 0 4
67726: PUSH
67727: DOUBLE
67728: LD_INT 1
67730: DEC
67731: ST_TO_ADDR
67732: LD_VAR 0 5
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: FOR_TO
67742: IFFALSE 67821
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67744: LD_VAR 0 5
67748: PUSH
67749: LD_INT 1
67751: ARRAY
67752: PUSH
67753: LD_VAR 0 4
67757: ARRAY
67758: PPUSH
67759: LD_VAR 0 5
67763: PUSH
67764: LD_INT 2
67766: ARRAY
67767: PUSH
67768: LD_VAR 0 4
67772: ARRAY
67773: PPUSH
67774: CALL_OW 351
67778: IFFALSE 67819
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67780: LD_VAR 0 5
67784: PUSH
67785: LD_INT 1
67787: ARRAY
67788: PUSH
67789: LD_VAR 0 4
67793: ARRAY
67794: PPUSH
67795: LD_VAR 0 5
67799: PUSH
67800: LD_INT 2
67802: ARRAY
67803: PUSH
67804: LD_VAR 0 4
67808: ARRAY
67809: PPUSH
67810: LD_VAR 0 1
67814: PPUSH
67815: CALL_OW 244
// end ;
67819: GO 67741
67821: POP
67822: POP
// end ;
67823: LD_VAR 0 3
67827: RET
// export function UniqueArray ( array ) ; var i ; begin
67828: LD_INT 0
67830: PPUSH
67831: PPUSH
// result := [ ] ;
67832: LD_ADDR_VAR 0 2
67836: PUSH
67837: EMPTY
67838: ST_TO_ADDR
// if not array then
67839: LD_VAR 0 1
67843: NOT
67844: IFFALSE 67848
// exit ;
67846: GO 67909
// for i := 1 to array do
67848: LD_ADDR_VAR 0 3
67852: PUSH
67853: DOUBLE
67854: LD_INT 1
67856: DEC
67857: ST_TO_ADDR
67858: LD_VAR 0 1
67862: PUSH
67863: FOR_TO
67864: IFFALSE 67907
// if not array [ i ] in result then
67866: LD_VAR 0 1
67870: PUSH
67871: LD_VAR 0 3
67875: ARRAY
67876: PUSH
67877: LD_VAR 0 2
67881: IN
67882: NOT
67883: IFFALSE 67905
// result := Join ( result , i ) ;
67885: LD_ADDR_VAR 0 2
67889: PUSH
67890: LD_VAR 0 2
67894: PPUSH
67895: LD_VAR 0 3
67899: PPUSH
67900: CALL 62560 0 2
67904: ST_TO_ADDR
67905: GO 67863
67907: POP
67908: POP
// end ; end_of_file
67909: LD_VAR 0 2
67913: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67914: LD_VAR 0 1
67918: PPUSH
67919: LD_VAR 0 2
67923: PPUSH
67924: LD_VAR 0 3
67928: PPUSH
67929: LD_VAR 0 4
67933: PPUSH
67934: LD_VAR 0 5
67938: PPUSH
67939: LD_VAR 0 6
67943: PPUSH
67944: CALL 2131 0 6
// end ;
67948: PPOPN 6
67950: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67951: LD_INT 0
67953: PPUSH
// begin if not units then
67954: LD_VAR 0 1
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 67997
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
67963: LD_VAR 0 1
67967: PPUSH
67968: LD_VAR 0 2
67972: PPUSH
67973: LD_VAR 0 3
67977: PPUSH
67978: LD_VAR 0 4
67982: PPUSH
67983: LD_VAR 0 5
67987: PPUSH
67988: LD_VAR 0 6
67992: PPUSH
67993: CALL 24214 0 6
// end ;
67997: PPOPN 7
67999: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68000: CALL 2018 0 0
// end ;
68004: PPOPN 1
68006: END
