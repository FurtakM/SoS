// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// export globalGameSaveCounter ; every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// every 0 0$1 do
1977: GO 1979
1979: DISABLE
// begin globalGameSaveCounter := 0 ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_INT 0
1987: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1988: LD_STRING setGameSaveCounter(0)
1990: PPUSH
1991: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1995: LD_STRING initStreamRollete();
1997: PPUSH
1998: CALL_OW 559
// InitStreamMode ;
2002: CALL 3328 0 0
// DefineStreamItems ( false ) ;
2006: LD_INT 0
2008: PPUSH
2009: CALL 3792 0 1
// end ;
2013: END
// export function SOS_MapStart ( ) ; begin
2014: LD_INT 0
2016: PPUSH
// if streamModeActive then
2017: LD_EXP 8
2021: IFFALSE 2030
// DefineStreamItems ( true ) ;
2023: LD_INT 1
2025: PPUSH
2026: CALL 3792 0 1
// UpdateLuaVariables ( ) ;
2030: CALL 2047 0 0
// UpdateFactoryWaypoints ( ) ;
2034: CALL 16661 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2038: CALL 16918 0 0
// end ;
2042: LD_VAR 0 1
2046: RET
// function UpdateLuaVariables ( ) ; begin
2047: LD_INT 0
2049: PPUSH
// if globalGameSaveCounter then
2050: LD_EXP 7
2054: IFFALSE 2088
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2056: LD_ADDR_EXP 7
2060: PUSH
2061: LD_EXP 7
2065: PPUSH
2066: CALL 60891 0 1
2070: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2071: LD_STRING setGameSaveCounter(
2073: PUSH
2074: LD_EXP 7
2078: STR
2079: PUSH
2080: LD_STRING )
2082: STR
2083: PPUSH
2084: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2088: LD_STRING setGameDifficulty(
2090: PUSH
2091: LD_OWVAR 67
2095: STR
2096: PUSH
2097: LD_STRING )
2099: STR
2100: PPUSH
2101: CALL_OW 559
// end ;
2105: LD_VAR 0 1
2109: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2110: LD_INT 0
2112: PPUSH
// if p2 = stream_mode then
2113: LD_VAR 0 2
2117: PUSH
2118: LD_INT 100
2120: EQUAL
2121: IFFALSE 3124
// begin if not StreamModeActive then
2123: LD_EXP 8
2127: NOT
2128: IFFALSE 2138
// StreamModeActive := true ;
2130: LD_ADDR_EXP 8
2134: PUSH
2135: LD_INT 1
2137: ST_TO_ADDR
// if p3 = 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: EQUAL
2146: IFFALSE 2152
// InitStreamMode ;
2148: CALL 3328 0 0
// if p3 = 1 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 1
2159: EQUAL
2160: IFFALSE 2170
// sRocket := true ;
2162: LD_ADDR_EXP 13
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 2 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 2
2177: EQUAL
2178: IFFALSE 2188
// sSpeed := true ;
2180: LD_ADDR_EXP 12
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 3 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 3
2195: EQUAL
2196: IFFALSE 2206
// sEngine := true ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 4 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 4
2213: EQUAL
2214: IFFALSE 2224
// sSpec := true ;
2216: LD_ADDR_EXP 11
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 5 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 5
2231: EQUAL
2232: IFFALSE 2242
// sLevel := true ;
2234: LD_ADDR_EXP 15
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 6 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 6
2249: EQUAL
2250: IFFALSE 2260
// sArmoury := true ;
2252: LD_ADDR_EXP 16
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 7 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: IFFALSE 2278
// sRadar := true ;
2270: LD_ADDR_EXP 17
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 8 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 8
2285: EQUAL
2286: IFFALSE 2296
// sBunker := true ;
2288: LD_ADDR_EXP 18
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 9 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 9
2303: EQUAL
2304: IFFALSE 2314
// sHack := true ;
2306: LD_ADDR_EXP 19
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 10 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 10
2321: EQUAL
2322: IFFALSE 2332
// sFire := true ;
2324: LD_ADDR_EXP 20
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 11 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 11
2339: EQUAL
2340: IFFALSE 2350
// sRefresh := true ;
2342: LD_ADDR_EXP 21
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 12 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 12
2357: EQUAL
2358: IFFALSE 2368
// sExp := true ;
2360: LD_ADDR_EXP 22
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 13 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 13
2375: EQUAL
2376: IFFALSE 2386
// sDepot := true ;
2378: LD_ADDR_EXP 23
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 14 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 14
2393: EQUAL
2394: IFFALSE 2404
// sFlag := true ;
2396: LD_ADDR_EXP 24
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 15 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 15
2411: EQUAL
2412: IFFALSE 2422
// sKamikadze := true ;
2414: LD_ADDR_EXP 32
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 16 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 16
2429: EQUAL
2430: IFFALSE 2440
// sTroll := true ;
2432: LD_ADDR_EXP 33
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 17 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 17
2447: EQUAL
2448: IFFALSE 2458
// sSlow := true ;
2450: LD_ADDR_EXP 34
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// if p3 = 18 then
2458: LD_VAR 0 3
2462: PUSH
2463: LD_INT 18
2465: EQUAL
2466: IFFALSE 2476
// sLack := true ;
2468: LD_ADDR_EXP 35
2472: PUSH
2473: LD_INT 1
2475: ST_TO_ADDR
// if p3 = 19 then
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 19
2483: EQUAL
2484: IFFALSE 2494
// sTank := true ;
2486: LD_ADDR_EXP 37
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// if p3 = 20 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 20
2501: EQUAL
2502: IFFALSE 2512
// sRemote := true ;
2504: LD_ADDR_EXP 38
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// if p3 = 21 then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 21
2519: EQUAL
2520: IFFALSE 2530
// sPowell := true ;
2522: LD_ADDR_EXP 39
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// if p3 = 22 then
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 22
2537: EQUAL
2538: IFFALSE 2548
// sTeleport := true ;
2540: LD_ADDR_EXP 42
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// if p3 = 23 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 23
2555: EQUAL
2556: IFFALSE 2566
// sOilTower := true ;
2558: LD_ADDR_EXP 44
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// if p3 = 24 then
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 24
2573: EQUAL
2574: IFFALSE 2584
// sShovel := true ;
2576: LD_ADDR_EXP 45
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// if p3 = 25 then
2584: LD_VAR 0 3
2588: PUSH
2589: LD_INT 25
2591: EQUAL
2592: IFFALSE 2602
// sSheik := true ;
2594: LD_ADDR_EXP 46
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// if p3 = 26 then
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 26
2609: EQUAL
2610: IFFALSE 2620
// sEarthquake := true ;
2612: LD_ADDR_EXP 48
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if p3 = 27 then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 27
2627: EQUAL
2628: IFFALSE 2638
// sAI := true ;
2630: LD_ADDR_EXP 49
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// if p3 = 28 then
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 28
2645: EQUAL
2646: IFFALSE 2656
// sCargo := true ;
2648: LD_ADDR_EXP 52
2652: PUSH
2653: LD_INT 1
2655: ST_TO_ADDR
// if p3 = 29 then
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 29
2663: EQUAL
2664: IFFALSE 2674
// sDLaser := true ;
2666: LD_ADDR_EXP 53
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// if p3 = 30 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 30
2681: EQUAL
2682: IFFALSE 2692
// sExchange := true ;
2684: LD_ADDR_EXP 54
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// if p3 = 31 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 31
2699: EQUAL
2700: IFFALSE 2710
// sFac := true ;
2702: LD_ADDR_EXP 55
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// if p3 = 32 then
2710: LD_VAR 0 3
2714: PUSH
2715: LD_INT 32
2717: EQUAL
2718: IFFALSE 2728
// sPower := true ;
2720: LD_ADDR_EXP 56
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// if p3 = 33 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 33
2735: EQUAL
2736: IFFALSE 2746
// sRandom := true ;
2738: LD_ADDR_EXP 57
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if p3 = 34 then
2746: LD_VAR 0 3
2750: PUSH
2751: LD_INT 34
2753: EQUAL
2754: IFFALSE 2764
// sShield := true ;
2756: LD_ADDR_EXP 58
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// if p3 = 35 then
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 35
2771: EQUAL
2772: IFFALSE 2782
// sTime := true ;
2774: LD_ADDR_EXP 59
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// if p3 = 36 then
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 36
2789: EQUAL
2790: IFFALSE 2800
// sTools := true ;
2792: LD_ADDR_EXP 60
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// if p3 = 101 then
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 101
2807: EQUAL
2808: IFFALSE 2818
// sSold := true ;
2810: LD_ADDR_EXP 25
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// if p3 = 102 then
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 102
2825: EQUAL
2826: IFFALSE 2836
// sDiff := true ;
2828: LD_ADDR_EXP 26
2832: PUSH
2833: LD_INT 1
2835: ST_TO_ADDR
// if p3 = 103 then
2836: LD_VAR 0 3
2840: PUSH
2841: LD_INT 103
2843: EQUAL
2844: IFFALSE 2854
// sFog := true ;
2846: LD_ADDR_EXP 29
2850: PUSH
2851: LD_INT 1
2853: ST_TO_ADDR
// if p3 = 104 then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 104
2861: EQUAL
2862: IFFALSE 2872
// sReset := true ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// if p3 = 105 then
2872: LD_VAR 0 3
2876: PUSH
2877: LD_INT 105
2879: EQUAL
2880: IFFALSE 2890
// sSun := true ;
2882: LD_ADDR_EXP 31
2886: PUSH
2887: LD_INT 1
2889: ST_TO_ADDR
// if p3 = 106 then
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 106
2897: EQUAL
2898: IFFALSE 2908
// sTiger := true ;
2900: LD_ADDR_EXP 27
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// if p3 = 107 then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 107
2915: EQUAL
2916: IFFALSE 2926
// sBomb := true ;
2918: LD_ADDR_EXP 28
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// if p3 = 108 then
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 108
2933: EQUAL
2934: IFFALSE 2944
// sWound := true ;
2936: LD_ADDR_EXP 36
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// if p3 = 109 then
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 109
2951: EQUAL
2952: IFFALSE 2962
// sBetray := true ;
2954: LD_ADDR_EXP 40
2958: PUSH
2959: LD_INT 1
2961: ST_TO_ADDR
// if p3 = 110 then
2962: LD_VAR 0 3
2966: PUSH
2967: LD_INT 110
2969: EQUAL
2970: IFFALSE 2980
// sContamin := true ;
2972: LD_ADDR_EXP 41
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// if p3 = 111 then
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 111
2987: EQUAL
2988: IFFALSE 2998
// sOil := true ;
2990: LD_ADDR_EXP 43
2994: PUSH
2995: LD_INT 1
2997: ST_TO_ADDR
// if p3 = 112 then
2998: LD_VAR 0 3
3002: PUSH
3003: LD_INT 112
3005: EQUAL
3006: IFFALSE 3016
// sStu := true ;
3008: LD_ADDR_EXP 47
3012: PUSH
3013: LD_INT 1
3015: ST_TO_ADDR
// if p3 = 113 then
3016: LD_VAR 0 3
3020: PUSH
3021: LD_INT 113
3023: EQUAL
3024: IFFALSE 3034
// sBazooka := true ;
3026: LD_ADDR_EXP 50
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// if p3 = 114 then
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 114
3041: EQUAL
3042: IFFALSE 3052
// sMortar := true ;
3044: LD_ADDR_EXP 51
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// if p3 = 115 then
3052: LD_VAR 0 3
3056: PUSH
3057: LD_INT 115
3059: EQUAL
3060: IFFALSE 3070
// sRanger := true ;
3062: LD_ADDR_EXP 61
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// if p3 = 116 then
3070: LD_VAR 0 3
3074: PUSH
3075: LD_INT 116
3077: EQUAL
3078: IFFALSE 3088
// sComputer := true ;
3080: LD_ADDR_EXP 62
3084: PUSH
3085: LD_INT 1
3087: ST_TO_ADDR
// if p3 = 117 then
3088: LD_VAR 0 3
3092: PUSH
3093: LD_INT 117
3095: EQUAL
3096: IFFALSE 3106
// s30 := true ;
3098: LD_ADDR_EXP 63
3102: PUSH
3103: LD_INT 1
3105: ST_TO_ADDR
// if p3 = 118 then
3106: LD_VAR 0 3
3110: PUSH
3111: LD_INT 118
3113: EQUAL
3114: IFFALSE 3124
// s60 := true ;
3116: LD_ADDR_EXP 64
3120: PUSH
3121: LD_INT 1
3123: ST_TO_ADDR
// end ; if p2 = hack_mode then
3124: LD_VAR 0 2
3128: PUSH
3129: LD_INT 101
3131: EQUAL
3132: IFFALSE 3260
// begin case p3 of 1 :
3134: LD_VAR 0 3
3138: PUSH
3139: LD_INT 1
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3154
3147: POP
// hHackUnlimitedResources ; 2 :
3148: CALL 15407 0 0
3152: GO 3260
3154: LD_INT 2
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3169
3162: POP
// hHackSetLevel10 ; 3 :
3163: CALL 15540 0 0
3167: GO 3260
3169: LD_INT 3
3171: DOUBLE
3172: EQUAL
3173: IFTRUE 3177
3175: GO 3184
3177: POP
// hHackSetLevel10YourUnits ; 4 :
3178: CALL 15625 0 0
3182: GO 3260
3184: LD_INT 4
3186: DOUBLE
3187: EQUAL
3188: IFTRUE 3192
3190: GO 3199
3192: POP
// hHackInvincible ; 5 :
3193: CALL 16073 0 0
3197: GO 3260
3199: LD_INT 5
3201: DOUBLE
3202: EQUAL
3203: IFTRUE 3207
3205: GO 3214
3207: POP
// hHackInvisible ; 6 :
3208: CALL 16184 0 0
3212: GO 3260
3214: LD_INT 6
3216: DOUBLE
3217: EQUAL
3218: IFTRUE 3222
3220: GO 3229
3222: POP
// hHackChangeYourSide ; 7 :
3223: CALL 16241 0 0
3227: GO 3260
3229: LD_INT 7
3231: DOUBLE
3232: EQUAL
3233: IFTRUE 3237
3235: GO 3244
3237: POP
// hHackChangeUnitSide ; 8 :
3238: CALL 16283 0 0
3242: GO 3260
3244: LD_INT 8
3246: DOUBLE
3247: EQUAL
3248: IFTRUE 3252
3250: GO 3259
3252: POP
// hHackFog ; end ;
3253: CALL 16384 0 0
3257: GO 3260
3259: POP
// end ; if p2 = game_save_mode then
3260: LD_VAR 0 2
3264: PUSH
3265: LD_INT 102
3267: EQUAL
3268: IFFALSE 3323
// begin if p3 = 1 then
3270: LD_VAR 0 3
3274: PUSH
3275: LD_INT 1
3277: EQUAL
3278: IFFALSE 3290
// globalGameSaveCounter := p4 ;
3280: LD_ADDR_EXP 7
3284: PUSH
3285: LD_VAR 0 4
3289: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 2
3297: EQUAL
3298: PUSH
3299: LD_EXP 7
3303: AND
3304: IFFALSE 3323
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3306: LD_STRING setGameSaveCounter(
3308: PUSH
3309: LD_EXP 7
3313: STR
3314: PUSH
3315: LD_STRING )
3317: STR
3318: PPUSH
3319: CALL_OW 559
// end ; end ;
3323: LD_VAR 0 7
3327: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3328: LD_INT 0
3330: PPUSH
// streamModeActive := false ;
3331: LD_ADDR_EXP 8
3335: PUSH
3336: LD_INT 0
3338: ST_TO_ADDR
// normalCounter := 36 ;
3339: LD_ADDR_EXP 9
3343: PUSH
3344: LD_INT 36
3346: ST_TO_ADDR
// hardcoreCounter := 18 ;
3347: LD_ADDR_EXP 10
3351: PUSH
3352: LD_INT 18
3354: ST_TO_ADDR
// sRocket := false ;
3355: LD_ADDR_EXP 13
3359: PUSH
3360: LD_INT 0
3362: ST_TO_ADDR
// sSpeed := false ;
3363: LD_ADDR_EXP 12
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// sEngine := false ;
3371: LD_ADDR_EXP 14
3375: PUSH
3376: LD_INT 0
3378: ST_TO_ADDR
// sSpec := false ;
3379: LD_ADDR_EXP 11
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// sLevel := false ;
3387: LD_ADDR_EXP 15
3391: PUSH
3392: LD_INT 0
3394: ST_TO_ADDR
// sArmoury := false ;
3395: LD_ADDR_EXP 16
3399: PUSH
3400: LD_INT 0
3402: ST_TO_ADDR
// sRadar := false ;
3403: LD_ADDR_EXP 17
3407: PUSH
3408: LD_INT 0
3410: ST_TO_ADDR
// sBunker := false ;
3411: LD_ADDR_EXP 18
3415: PUSH
3416: LD_INT 0
3418: ST_TO_ADDR
// sHack := false ;
3419: LD_ADDR_EXP 19
3423: PUSH
3424: LD_INT 0
3426: ST_TO_ADDR
// sFire := false ;
3427: LD_ADDR_EXP 20
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// sRefresh := false ;
3435: LD_ADDR_EXP 21
3439: PUSH
3440: LD_INT 0
3442: ST_TO_ADDR
// sExp := false ;
3443: LD_ADDR_EXP 22
3447: PUSH
3448: LD_INT 0
3450: ST_TO_ADDR
// sDepot := false ;
3451: LD_ADDR_EXP 23
3455: PUSH
3456: LD_INT 0
3458: ST_TO_ADDR
// sFlag := false ;
3459: LD_ADDR_EXP 24
3463: PUSH
3464: LD_INT 0
3466: ST_TO_ADDR
// sKamikadze := false ;
3467: LD_ADDR_EXP 32
3471: PUSH
3472: LD_INT 0
3474: ST_TO_ADDR
// sTroll := false ;
3475: LD_ADDR_EXP 33
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// sSlow := false ;
3483: LD_ADDR_EXP 34
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// sLack := false ;
3491: LD_ADDR_EXP 35
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// sTank := false ;
3499: LD_ADDR_EXP 37
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// sRemote := false ;
3507: LD_ADDR_EXP 38
3511: PUSH
3512: LD_INT 0
3514: ST_TO_ADDR
// sPowell := false ;
3515: LD_ADDR_EXP 39
3519: PUSH
3520: LD_INT 0
3522: ST_TO_ADDR
// sTeleport := false ;
3523: LD_ADDR_EXP 42
3527: PUSH
3528: LD_INT 0
3530: ST_TO_ADDR
// sOilTower := false ;
3531: LD_ADDR_EXP 44
3535: PUSH
3536: LD_INT 0
3538: ST_TO_ADDR
// sShovel := false ;
3539: LD_ADDR_EXP 45
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// sSheik := false ;
3547: LD_ADDR_EXP 46
3551: PUSH
3552: LD_INT 0
3554: ST_TO_ADDR
// sEarthquake := false ;
3555: LD_ADDR_EXP 48
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// sAI := false ;
3563: LD_ADDR_EXP 49
3567: PUSH
3568: LD_INT 0
3570: ST_TO_ADDR
// sCargo := false ;
3571: LD_ADDR_EXP 52
3575: PUSH
3576: LD_INT 0
3578: ST_TO_ADDR
// sDLaser := false ;
3579: LD_ADDR_EXP 53
3583: PUSH
3584: LD_INT 0
3586: ST_TO_ADDR
// sExchange := false ;
3587: LD_ADDR_EXP 54
3591: PUSH
3592: LD_INT 0
3594: ST_TO_ADDR
// sFac := false ;
3595: LD_ADDR_EXP 55
3599: PUSH
3600: LD_INT 0
3602: ST_TO_ADDR
// sPower := false ;
3603: LD_ADDR_EXP 56
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// sRandom := false ;
3611: LD_ADDR_EXP 57
3615: PUSH
3616: LD_INT 0
3618: ST_TO_ADDR
// sShield := false ;
3619: LD_ADDR_EXP 58
3623: PUSH
3624: LD_INT 0
3626: ST_TO_ADDR
// sTime := false ;
3627: LD_ADDR_EXP 59
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// sTools := false ;
3635: LD_ADDR_EXP 60
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// sSold := false ;
3643: LD_ADDR_EXP 25
3647: PUSH
3648: LD_INT 0
3650: ST_TO_ADDR
// sDiff := false ;
3651: LD_ADDR_EXP 26
3655: PUSH
3656: LD_INT 0
3658: ST_TO_ADDR
// sFog := false ;
3659: LD_ADDR_EXP 29
3663: PUSH
3664: LD_INT 0
3666: ST_TO_ADDR
// sReset := false ;
3667: LD_ADDR_EXP 30
3671: PUSH
3672: LD_INT 0
3674: ST_TO_ADDR
// sSun := false ;
3675: LD_ADDR_EXP 31
3679: PUSH
3680: LD_INT 0
3682: ST_TO_ADDR
// sTiger := false ;
3683: LD_ADDR_EXP 27
3687: PUSH
3688: LD_INT 0
3690: ST_TO_ADDR
// sBomb := false ;
3691: LD_ADDR_EXP 28
3695: PUSH
3696: LD_INT 0
3698: ST_TO_ADDR
// sWound := false ;
3699: LD_ADDR_EXP 36
3703: PUSH
3704: LD_INT 0
3706: ST_TO_ADDR
// sBetray := false ;
3707: LD_ADDR_EXP 40
3711: PUSH
3712: LD_INT 0
3714: ST_TO_ADDR
// sContamin := false ;
3715: LD_ADDR_EXP 41
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// sOil := false ;
3723: LD_ADDR_EXP 43
3727: PUSH
3728: LD_INT 0
3730: ST_TO_ADDR
// sStu := false ;
3731: LD_ADDR_EXP 47
3735: PUSH
3736: LD_INT 0
3738: ST_TO_ADDR
// sBazooka := false ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_INT 0
3746: ST_TO_ADDR
// sMortar := false ;
3747: LD_ADDR_EXP 51
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// sRanger := false ;
3755: LD_ADDR_EXP 61
3759: PUSH
3760: LD_INT 0
3762: ST_TO_ADDR
// sComputer := false ;
3763: LD_ADDR_EXP 62
3767: PUSH
3768: LD_INT 0
3770: ST_TO_ADDR
// s30 := false ;
3771: LD_ADDR_EXP 63
3775: PUSH
3776: LD_INT 0
3778: ST_TO_ADDR
// s60 := false ;
3779: LD_ADDR_EXP 64
3783: PUSH
3784: LD_INT 0
3786: ST_TO_ADDR
// end ;
3787: LD_VAR 0 1
3791: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
// result := [ ] ;
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: EMPTY
3807: ST_TO_ADDR
// if campaign_id = 1 then
3808: LD_OWVAR 69
3812: PUSH
3813: LD_INT 1
3815: EQUAL
3816: IFFALSE 6982
// begin case mission_number of 1 :
3818: LD_OWVAR 70
3822: PUSH
3823: LD_INT 1
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3907
3831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 11
3845: PUSH
3846: LD_INT 12
3848: PUSH
3849: LD_INT 15
3851: PUSH
3852: LD_INT 16
3854: PUSH
3855: LD_INT 22
3857: PUSH
3858: LD_INT 23
3860: PUSH
3861: LD_INT 26
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 101
3877: PUSH
3878: LD_INT 102
3880: PUSH
3881: LD_INT 106
3883: PUSH
3884: LD_INT 116
3886: PUSH
3887: LD_INT 117
3889: PUSH
3890: LD_INT 118
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: ST_TO_ADDR
3905: GO 6980
3907: LD_INT 2
3909: DOUBLE
3910: EQUAL
3911: IFTRUE 3915
3913: GO 3999
3915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: LD_INT 2
3923: PUSH
3924: LD_INT 4
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 12
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: LD_INT 16
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 23
3944: PUSH
3945: LD_INT 26
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 101
3961: PUSH
3962: LD_INT 102
3964: PUSH
3965: LD_INT 105
3967: PUSH
3968: LD_INT 106
3970: PUSH
3971: LD_INT 108
3973: PUSH
3974: LD_INT 116
3976: PUSH
3977: LD_INT 117
3979: PUSH
3980: LD_INT 118
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: ST_TO_ADDR
3997: GO 6980
3999: LD_INT 3
4001: DOUBLE
4002: EQUAL
4003: IFTRUE 4007
4005: GO 4095
4007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4008: LD_ADDR_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: LD_INT 11
4024: PUSH
4025: LD_INT 12
4027: PUSH
4028: LD_INT 15
4030: PUSH
4031: LD_INT 16
4033: PUSH
4034: LD_INT 22
4036: PUSH
4037: LD_INT 26
4039: PUSH
4040: LD_INT 36
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 101
4057: PUSH
4058: LD_INT 102
4060: PUSH
4061: LD_INT 105
4063: PUSH
4064: LD_INT 106
4066: PUSH
4067: LD_INT 108
4069: PUSH
4070: LD_INT 116
4072: PUSH
4073: LD_INT 117
4075: PUSH
4076: LD_INT 118
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: ST_TO_ADDR
4093: GO 6980
4095: LD_INT 4
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4103
4101: GO 4199
4103: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: LD_INT 8
4120: PUSH
4121: LD_INT 11
4123: PUSH
4124: LD_INT 12
4126: PUSH
4127: LD_INT 15
4129: PUSH
4130: LD_INT 16
4132: PUSH
4133: LD_INT 22
4135: PUSH
4136: LD_INT 23
4138: PUSH
4139: LD_INT 26
4141: PUSH
4142: LD_INT 36
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 101
4161: PUSH
4162: LD_INT 102
4164: PUSH
4165: LD_INT 105
4167: PUSH
4168: LD_INT 106
4170: PUSH
4171: LD_INT 108
4173: PUSH
4174: LD_INT 116
4176: PUSH
4177: LD_INT 117
4179: PUSH
4180: LD_INT 118
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: ST_TO_ADDR
4197: GO 6980
4199: LD_INT 5
4201: DOUBLE
4202: EQUAL
4203: IFTRUE 4207
4205: GO 4319
4207: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: LD_INT 5
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: LD_INT 8
4227: PUSH
4228: LD_INT 11
4230: PUSH
4231: LD_INT 12
4233: PUSH
4234: LD_INT 15
4236: PUSH
4237: LD_INT 16
4239: PUSH
4240: LD_INT 22
4242: PUSH
4243: LD_INT 23
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 26
4251: PUSH
4252: LD_INT 36
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 101
4273: PUSH
4274: LD_INT 102
4276: PUSH
4277: LD_INT 105
4279: PUSH
4280: LD_INT 106
4282: PUSH
4283: LD_INT 108
4285: PUSH
4286: LD_INT 109
4288: PUSH
4289: LD_INT 112
4291: PUSH
4292: LD_INT 116
4294: PUSH
4295: LD_INT 117
4297: PUSH
4298: LD_INT 118
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: ST_TO_ADDR
4317: GO 6980
4319: LD_INT 6
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4459
4327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: LD_INT 2
4335: PUSH
4336: LD_INT 4
4338: PUSH
4339: LD_INT 5
4341: PUSH
4342: LD_INT 6
4344: PUSH
4345: LD_INT 8
4347: PUSH
4348: LD_INT 11
4350: PUSH
4351: LD_INT 12
4353: PUSH
4354: LD_INT 15
4356: PUSH
4357: LD_INT 16
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 26
4377: PUSH
4378: LD_INT 30
4380: PUSH
4381: LD_INT 31
4383: PUSH
4384: LD_INT 32
4386: PUSH
4387: LD_INT 36
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 101
4413: PUSH
4414: LD_INT 102
4416: PUSH
4417: LD_INT 105
4419: PUSH
4420: LD_INT 106
4422: PUSH
4423: LD_INT 108
4425: PUSH
4426: LD_INT 109
4428: PUSH
4429: LD_INT 112
4431: PUSH
4432: LD_INT 116
4434: PUSH
4435: LD_INT 117
4437: PUSH
4438: LD_INT 118
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: ST_TO_ADDR
4457: GO 6980
4459: LD_INT 7
4461: DOUBLE
4462: EQUAL
4463: IFTRUE 4467
4465: GO 4579
4467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 7
4484: PUSH
4485: LD_INT 11
4487: PUSH
4488: LD_INT 12
4490: PUSH
4491: LD_INT 15
4493: PUSH
4494: LD_INT 16
4496: PUSH
4497: LD_INT 20
4499: PUSH
4500: LD_INT 21
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 23
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 101
4533: PUSH
4534: LD_INT 102
4536: PUSH
4537: LD_INT 103
4539: PUSH
4540: LD_INT 105
4542: PUSH
4543: LD_INT 106
4545: PUSH
4546: LD_INT 108
4548: PUSH
4549: LD_INT 112
4551: PUSH
4552: LD_INT 116
4554: PUSH
4555: LD_INT 117
4557: PUSH
4558: LD_INT 118
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 6980
4579: LD_INT 8
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4727
4587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4588: LD_ADDR_VAR 0 2
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: LD_INT 4
4598: PUSH
4599: LD_INT 5
4601: PUSH
4602: LD_INT 6
4604: PUSH
4605: LD_INT 7
4607: PUSH
4608: LD_INT 8
4610: PUSH
4611: LD_INT 11
4613: PUSH
4614: LD_INT 12
4616: PUSH
4617: LD_INT 15
4619: PUSH
4620: LD_INT 16
4622: PUSH
4623: LD_INT 20
4625: PUSH
4626: LD_INT 21
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_INT 23
4634: PUSH
4635: LD_INT 25
4637: PUSH
4638: LD_INT 26
4640: PUSH
4641: LD_INT 30
4643: PUSH
4644: LD_INT 31
4646: PUSH
4647: LD_INT 32
4649: PUSH
4650: LD_INT 36
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 101
4677: PUSH
4678: LD_INT 102
4680: PUSH
4681: LD_INT 103
4683: PUSH
4684: LD_INT 105
4686: PUSH
4687: LD_INT 106
4689: PUSH
4690: LD_INT 108
4692: PUSH
4693: LD_INT 109
4695: PUSH
4696: LD_INT 112
4698: PUSH
4699: LD_INT 116
4701: PUSH
4702: LD_INT 117
4704: PUSH
4705: LD_INT 118
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: ST_TO_ADDR
4725: GO 6980
4727: LD_INT 9
4729: DOUBLE
4730: EQUAL
4731: IFTRUE 4735
4733: GO 4883
4735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: LD_INT 5
4749: PUSH
4750: LD_INT 6
4752: PUSH
4753: LD_INT 7
4755: PUSH
4756: LD_INT 8
4758: PUSH
4759: LD_INT 11
4761: PUSH
4762: LD_INT 12
4764: PUSH
4765: LD_INT 15
4767: PUSH
4768: LD_INT 16
4770: PUSH
4771: LD_INT 20
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 23
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 26
4788: PUSH
4789: LD_INT 28
4791: PUSH
4792: LD_INT 30
4794: PUSH
4795: LD_INT 31
4797: PUSH
4798: LD_INT 32
4800: PUSH
4801: LD_INT 36
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 101
4829: PUSH
4830: LD_INT 102
4832: PUSH
4833: LD_INT 103
4835: PUSH
4836: LD_INT 105
4838: PUSH
4839: LD_INT 106
4841: PUSH
4842: LD_INT 108
4844: PUSH
4845: LD_INT 109
4847: PUSH
4848: LD_INT 112
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 116
4856: PUSH
4857: LD_INT 117
4859: PUSH
4860: LD_INT 118
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: ST_TO_ADDR
4881: GO 6980
4883: LD_INT 10
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 5087
4891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: LD_INT 6
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: LD_INT 8
4914: PUSH
4915: LD_INT 9
4917: PUSH
4918: LD_INT 10
4920: PUSH
4921: LD_INT 11
4923: PUSH
4924: LD_INT 12
4926: PUSH
4927: LD_INT 13
4929: PUSH
4930: LD_INT 14
4932: PUSH
4933: LD_INT 15
4935: PUSH
4936: LD_INT 16
4938: PUSH
4939: LD_INT 17
4941: PUSH
4942: LD_INT 18
4944: PUSH
4945: LD_INT 19
4947: PUSH
4948: LD_INT 20
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 23
4959: PUSH
4960: LD_INT 24
4962: PUSH
4963: LD_INT 25
4965: PUSH
4966: LD_INT 26
4968: PUSH
4969: LD_INT 28
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 36
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 101
5017: PUSH
5018: LD_INT 102
5020: PUSH
5021: LD_INT 103
5023: PUSH
5024: LD_INT 104
5026: PUSH
5027: LD_INT 105
5029: PUSH
5030: LD_INT 106
5032: PUSH
5033: LD_INT 107
5035: PUSH
5036: LD_INT 108
5038: PUSH
5039: LD_INT 109
5041: PUSH
5042: LD_INT 110
5044: PUSH
5045: LD_INT 111
5047: PUSH
5048: LD_INT 112
5050: PUSH
5051: LD_INT 114
5053: PUSH
5054: LD_INT 116
5056: PUSH
5057: LD_INT 117
5059: PUSH
5060: LD_INT 118
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: ST_TO_ADDR
5085: GO 6980
5087: LD_INT 11
5089: DOUBLE
5090: EQUAL
5091: IFTRUE 5095
5093: GO 5299
5095: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5096: LD_ADDR_VAR 0 2
5100: PUSH
5101: LD_INT 2
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 6
5115: PUSH
5116: LD_INT 7
5118: PUSH
5119: LD_INT 8
5121: PUSH
5122: LD_INT 9
5124: PUSH
5125: LD_INT 10
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 12
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: LD_INT 14
5139: PUSH
5140: LD_INT 15
5142: PUSH
5143: LD_INT 16
5145: PUSH
5146: LD_INT 17
5148: PUSH
5149: LD_INT 18
5151: PUSH
5152: LD_INT 19
5154: PUSH
5155: LD_INT 20
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 22
5163: PUSH
5164: LD_INT 23
5166: PUSH
5167: LD_INT 24
5169: PUSH
5170: LD_INT 25
5172: PUSH
5173: LD_INT 26
5175: PUSH
5176: LD_INT 28
5178: PUSH
5179: LD_INT 30
5181: PUSH
5182: LD_INT 31
5184: PUSH
5185: LD_INT 32
5187: PUSH
5188: LD_INT 34
5190: PUSH
5191: LD_INT 36
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 101
5229: PUSH
5230: LD_INT 102
5232: PUSH
5233: LD_INT 103
5235: PUSH
5236: LD_INT 104
5238: PUSH
5239: LD_INT 105
5241: PUSH
5242: LD_INT 106
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 108
5250: PUSH
5251: LD_INT 109
5253: PUSH
5254: LD_INT 110
5256: PUSH
5257: LD_INT 111
5259: PUSH
5260: LD_INT 112
5262: PUSH
5263: LD_INT 114
5265: PUSH
5266: LD_INT 116
5268: PUSH
5269: LD_INT 117
5271: PUSH
5272: LD_INT 118
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: ST_TO_ADDR
5297: GO 6980
5299: LD_INT 12
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5307
5305: GO 5527
5307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5308: LD_ADDR_VAR 0 2
5312: PUSH
5313: LD_INT 1
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 4
5324: PUSH
5325: LD_INT 5
5327: PUSH
5328: LD_INT 6
5330: PUSH
5331: LD_INT 7
5333: PUSH
5334: LD_INT 8
5336: PUSH
5337: LD_INT 9
5339: PUSH
5340: LD_INT 10
5342: PUSH
5343: LD_INT 11
5345: PUSH
5346: LD_INT 12
5348: PUSH
5349: LD_INT 13
5351: PUSH
5352: LD_INT 14
5354: PUSH
5355: LD_INT 15
5357: PUSH
5358: LD_INT 16
5360: PUSH
5361: LD_INT 17
5363: PUSH
5364: LD_INT 18
5366: PUSH
5367: LD_INT 19
5369: PUSH
5370: LD_INT 20
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 22
5378: PUSH
5379: LD_INT 23
5381: PUSH
5382: LD_INT 24
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 26
5390: PUSH
5391: LD_INT 27
5393: PUSH
5394: LD_INT 28
5396: PUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 31
5402: PUSH
5403: LD_INT 32
5405: PUSH
5406: LD_INT 33
5408: PUSH
5409: LD_INT 34
5411: PUSH
5412: LD_INT 36
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 101
5453: PUSH
5454: LD_INT 102
5456: PUSH
5457: LD_INT 103
5459: PUSH
5460: LD_INT 104
5462: PUSH
5463: LD_INT 105
5465: PUSH
5466: LD_INT 106
5468: PUSH
5469: LD_INT 107
5471: PUSH
5472: LD_INT 108
5474: PUSH
5475: LD_INT 109
5477: PUSH
5478: LD_INT 110
5480: PUSH
5481: LD_INT 111
5483: PUSH
5484: LD_INT 112
5486: PUSH
5487: LD_INT 113
5489: PUSH
5490: LD_INT 114
5492: PUSH
5493: LD_INT 116
5495: PUSH
5496: LD_INT 117
5498: PUSH
5499: LD_INT 118
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 6980
5527: LD_INT 13
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5743
5535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 3
5549: PUSH
5550: LD_INT 4
5552: PUSH
5553: LD_INT 5
5555: PUSH
5556: LD_INT 8
5558: PUSH
5559: LD_INT 9
5561: PUSH
5562: LD_INT 10
5564: PUSH
5565: LD_INT 11
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: LD_INT 14
5573: PUSH
5574: LD_INT 15
5576: PUSH
5577: LD_INT 16
5579: PUSH
5580: LD_INT 17
5582: PUSH
5583: LD_INT 18
5585: PUSH
5586: LD_INT 19
5588: PUSH
5589: LD_INT 20
5591: PUSH
5592: LD_INT 21
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_INT 23
5600: PUSH
5601: LD_INT 24
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 26
5609: PUSH
5610: LD_INT 27
5612: PUSH
5613: LD_INT 28
5615: PUSH
5616: LD_INT 30
5618: PUSH
5619: LD_INT 31
5621: PUSH
5622: LD_INT 32
5624: PUSH
5625: LD_INT 33
5627: PUSH
5628: LD_INT 34
5630: PUSH
5631: LD_INT 36
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 101
5669: PUSH
5670: LD_INT 102
5672: PUSH
5673: LD_INT 103
5675: PUSH
5676: LD_INT 104
5678: PUSH
5679: LD_INT 105
5681: PUSH
5682: LD_INT 106
5684: PUSH
5685: LD_INT 107
5687: PUSH
5688: LD_INT 108
5690: PUSH
5691: LD_INT 109
5693: PUSH
5694: LD_INT 110
5696: PUSH
5697: LD_INT 111
5699: PUSH
5700: LD_INT 112
5702: PUSH
5703: LD_INT 113
5705: PUSH
5706: LD_INT 114
5708: PUSH
5709: LD_INT 116
5711: PUSH
5712: LD_INT 117
5714: PUSH
5715: LD_INT 118
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6980
5743: LD_INT 14
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5975
5751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 3
5765: PUSH
5766: LD_INT 4
5768: PUSH
5769: LD_INT 5
5771: PUSH
5772: LD_INT 6
5774: PUSH
5775: LD_INT 7
5777: PUSH
5778: LD_INT 8
5780: PUSH
5781: LD_INT 9
5783: PUSH
5784: LD_INT 10
5786: PUSH
5787: LD_INT 11
5789: PUSH
5790: LD_INT 12
5792: PUSH
5793: LD_INT 13
5795: PUSH
5796: LD_INT 14
5798: PUSH
5799: LD_INT 15
5801: PUSH
5802: LD_INT 16
5804: PUSH
5805: LD_INT 17
5807: PUSH
5808: LD_INT 18
5810: PUSH
5811: LD_INT 19
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 24
5828: PUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 26
5834: PUSH
5835: LD_INT 27
5837: PUSH
5838: LD_INT 28
5840: PUSH
5841: LD_INT 29
5843: PUSH
5844: LD_INT 30
5846: PUSH
5847: LD_INT 31
5849: PUSH
5850: LD_INT 32
5852: PUSH
5853: LD_INT 33
5855: PUSH
5856: LD_INT 34
5858: PUSH
5859: LD_INT 36
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 101
5901: PUSH
5902: LD_INT 102
5904: PUSH
5905: LD_INT 103
5907: PUSH
5908: LD_INT 104
5910: PUSH
5911: LD_INT 105
5913: PUSH
5914: LD_INT 106
5916: PUSH
5917: LD_INT 107
5919: PUSH
5920: LD_INT 108
5922: PUSH
5923: LD_INT 109
5925: PUSH
5926: LD_INT 110
5928: PUSH
5929: LD_INT 111
5931: PUSH
5932: LD_INT 112
5934: PUSH
5935: LD_INT 113
5937: PUSH
5938: LD_INT 114
5940: PUSH
5941: LD_INT 116
5943: PUSH
5944: LD_INT 117
5946: PUSH
5947: LD_INT 118
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: ST_TO_ADDR
5973: GO 6980
5975: LD_INT 15
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 6207
5983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_INT 1
5991: PUSH
5992: LD_INT 2
5994: PUSH
5995: LD_INT 3
5997: PUSH
5998: LD_INT 4
6000: PUSH
6001: LD_INT 5
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: LD_INT 7
6009: PUSH
6010: LD_INT 8
6012: PUSH
6013: LD_INT 9
6015: PUSH
6016: LD_INT 10
6018: PUSH
6019: LD_INT 11
6021: PUSH
6022: LD_INT 12
6024: PUSH
6025: LD_INT 13
6027: PUSH
6028: LD_INT 14
6030: PUSH
6031: LD_INT 15
6033: PUSH
6034: LD_INT 16
6036: PUSH
6037: LD_INT 17
6039: PUSH
6040: LD_INT 18
6042: PUSH
6043: LD_INT 19
6045: PUSH
6046: LD_INT 20
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: LD_INT 25
6063: PUSH
6064: LD_INT 26
6066: PUSH
6067: LD_INT 27
6069: PUSH
6070: LD_INT 28
6072: PUSH
6073: LD_INT 29
6075: PUSH
6076: LD_INT 30
6078: PUSH
6079: LD_INT 31
6081: PUSH
6082: LD_INT 32
6084: PUSH
6085: LD_INT 33
6087: PUSH
6088: LD_INT 34
6090: PUSH
6091: LD_INT 36
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 101
6133: PUSH
6134: LD_INT 102
6136: PUSH
6137: LD_INT 103
6139: PUSH
6140: LD_INT 104
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 107
6151: PUSH
6152: LD_INT 108
6154: PUSH
6155: LD_INT 109
6157: PUSH
6158: LD_INT 110
6160: PUSH
6161: LD_INT 111
6163: PUSH
6164: LD_INT 112
6166: PUSH
6167: LD_INT 113
6169: PUSH
6170: LD_INT 114
6172: PUSH
6173: LD_INT 116
6175: PUSH
6176: LD_INT 117
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
6205: GO 6980
6207: LD_INT 16
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6351
6215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: LD_INT 7
6232: PUSH
6233: LD_INT 11
6235: PUSH
6236: LD_INT 12
6238: PUSH
6239: LD_INT 15
6241: PUSH
6242: LD_INT 16
6244: PUSH
6245: LD_INT 20
6247: PUSH
6248: LD_INT 21
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 23
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 30
6265: PUSH
6266: LD_INT 31
6268: PUSH
6269: LD_INT 32
6271: PUSH
6272: LD_INT 33
6274: PUSH
6275: LD_INT 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 101
6301: PUSH
6302: LD_INT 102
6304: PUSH
6305: LD_INT 103
6307: PUSH
6308: LD_INT 106
6310: PUSH
6311: LD_INT 108
6313: PUSH
6314: LD_INT 112
6316: PUSH
6317: LD_INT 113
6319: PUSH
6320: LD_INT 114
6322: PUSH
6323: LD_INT 116
6325: PUSH
6326: LD_INT 117
6328: PUSH
6329: LD_INT 118
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 6980
6351: LD_INT 17
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6583
6359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6360: LD_ADDR_VAR 0 2
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: LD_INT 6
6382: PUSH
6383: LD_INT 7
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 9
6391: PUSH
6392: LD_INT 10
6394: PUSH
6395: LD_INT 11
6397: PUSH
6398: LD_INT 12
6400: PUSH
6401: LD_INT 13
6403: PUSH
6404: LD_INT 14
6406: PUSH
6407: LD_INT 15
6409: PUSH
6410: LD_INT 16
6412: PUSH
6413: LD_INT 17
6415: PUSH
6416: LD_INT 18
6418: PUSH
6419: LD_INT 19
6421: PUSH
6422: LD_INT 20
6424: PUSH
6425: LD_INT 21
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 26
6442: PUSH
6443: LD_INT 27
6445: PUSH
6446: LD_INT 28
6448: PUSH
6449: LD_INT 29
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 31
6457: PUSH
6458: LD_INT 32
6460: PUSH
6461: LD_INT 33
6463: PUSH
6464: LD_INT 34
6466: PUSH
6467: LD_INT 36
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 101
6509: PUSH
6510: LD_INT 102
6512: PUSH
6513: LD_INT 103
6515: PUSH
6516: LD_INT 104
6518: PUSH
6519: LD_INT 105
6521: PUSH
6522: LD_INT 106
6524: PUSH
6525: LD_INT 107
6527: PUSH
6528: LD_INT 108
6530: PUSH
6531: LD_INT 109
6533: PUSH
6534: LD_INT 110
6536: PUSH
6537: LD_INT 111
6539: PUSH
6540: LD_INT 112
6542: PUSH
6543: LD_INT 113
6545: PUSH
6546: LD_INT 114
6548: PUSH
6549: LD_INT 116
6551: PUSH
6552: LD_INT 117
6554: PUSH
6555: LD_INT 118
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: ST_TO_ADDR
6581: GO 6980
6583: LD_INT 18
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6739
6591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6592: LD_ADDR_VAR 0 2
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: LD_INT 4
6602: PUSH
6603: LD_INT 5
6605: PUSH
6606: LD_INT 7
6608: PUSH
6609: LD_INT 11
6611: PUSH
6612: LD_INT 12
6614: PUSH
6615: LD_INT 15
6617: PUSH
6618: LD_INT 16
6620: PUSH
6621: LD_INT 20
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 23
6632: PUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 26
6638: PUSH
6639: LD_INT 30
6641: PUSH
6642: LD_INT 31
6644: PUSH
6645: LD_INT 32
6647: PUSH
6648: LD_INT 33
6650: PUSH
6651: LD_INT 34
6653: PUSH
6654: LD_INT 35
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 101
6685: PUSH
6686: LD_INT 102
6688: PUSH
6689: LD_INT 103
6691: PUSH
6692: LD_INT 106
6694: PUSH
6695: LD_INT 108
6697: PUSH
6698: LD_INT 112
6700: PUSH
6701: LD_INT 113
6703: PUSH
6704: LD_INT 114
6706: PUSH
6707: LD_INT 115
6709: PUSH
6710: LD_INT 116
6712: PUSH
6713: LD_INT 117
6715: PUSH
6716: LD_INT 118
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 6980
6739: LD_INT 19
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6979
6747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 9
6779: PUSH
6780: LD_INT 10
6782: PUSH
6783: LD_INT 11
6785: PUSH
6786: LD_INT 12
6788: PUSH
6789: LD_INT 13
6791: PUSH
6792: LD_INT 14
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 17
6803: PUSH
6804: LD_INT 18
6806: PUSH
6807: LD_INT 19
6809: PUSH
6810: LD_INT 20
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 23
6821: PUSH
6822: LD_INT 24
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: LD_INT 26
6830: PUSH
6831: LD_INT 27
6833: PUSH
6834: LD_INT 28
6836: PUSH
6837: LD_INT 29
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 31
6845: PUSH
6846: LD_INT 32
6848: PUSH
6849: LD_INT 33
6851: PUSH
6852: LD_INT 34
6854: PUSH
6855: LD_INT 35
6857: PUSH
6858: LD_INT 36
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 101
6901: PUSH
6902: LD_INT 102
6904: PUSH
6905: LD_INT 103
6907: PUSH
6908: LD_INT 104
6910: PUSH
6911: LD_INT 105
6913: PUSH
6914: LD_INT 106
6916: PUSH
6917: LD_INT 107
6919: PUSH
6920: LD_INT 108
6922: PUSH
6923: LD_INT 109
6925: PUSH
6926: LD_INT 110
6928: PUSH
6929: LD_INT 111
6931: PUSH
6932: LD_INT 112
6934: PUSH
6935: LD_INT 113
6937: PUSH
6938: LD_INT 114
6940: PUSH
6941: LD_INT 115
6943: PUSH
6944: LD_INT 116
6946: PUSH
6947: LD_INT 117
6949: PUSH
6950: LD_INT 118
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 6980
6979: POP
// end else
6980: GO 7211
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: LD_INT 4
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: LD_INT 6
7004: PUSH
7005: LD_INT 7
7007: PUSH
7008: LD_INT 8
7010: PUSH
7011: LD_INT 9
7013: PUSH
7014: LD_INT 10
7016: PUSH
7017: LD_INT 11
7019: PUSH
7020: LD_INT 12
7022: PUSH
7023: LD_INT 13
7025: PUSH
7026: LD_INT 14
7028: PUSH
7029: LD_INT 15
7031: PUSH
7032: LD_INT 16
7034: PUSH
7035: LD_INT 17
7037: PUSH
7038: LD_INT 18
7040: PUSH
7041: LD_INT 19
7043: PUSH
7044: LD_INT 20
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 23
7055: PUSH
7056: LD_INT 24
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 27
7067: PUSH
7068: LD_INT 28
7070: PUSH
7071: LD_INT 29
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 31
7079: PUSH
7080: LD_INT 32
7082: PUSH
7083: LD_INT 33
7085: PUSH
7086: LD_INT 34
7088: PUSH
7089: LD_INT 35
7091: PUSH
7092: LD_INT 36
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 101
7135: PUSH
7136: LD_INT 102
7138: PUSH
7139: LD_INT 103
7141: PUSH
7142: LD_INT 104
7144: PUSH
7145: LD_INT 105
7147: PUSH
7148: LD_INT 106
7150: PUSH
7151: LD_INT 107
7153: PUSH
7154: LD_INT 108
7156: PUSH
7157: LD_INT 109
7159: PUSH
7160: LD_INT 110
7162: PUSH
7163: LD_INT 111
7165: PUSH
7166: LD_INT 112
7168: PUSH
7169: LD_INT 113
7171: PUSH
7172: LD_INT 114
7174: PUSH
7175: LD_INT 115
7177: PUSH
7178: LD_INT 116
7180: PUSH
7181: LD_INT 117
7183: PUSH
7184: LD_INT 118
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: ST_TO_ADDR
// if result then
7211: LD_VAR 0 2
7215: IFFALSE 8001
// begin normal :=  ;
7217: LD_ADDR_VAR 0 5
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hardcore :=  ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// active :=  ;
7233: LD_ADDR_VAR 0 7
7237: PUSH
7238: LD_STRING 
7240: ST_TO_ADDR
// for i = 1 to normalCounter do
7241: LD_ADDR_VAR 0 8
7245: PUSH
7246: DOUBLE
7247: LD_INT 1
7249: DEC
7250: ST_TO_ADDR
7251: LD_EXP 9
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7358
// begin tmp := 0 ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_STRING 0
7266: ST_TO_ADDR
// if result [ 1 ] then
7267: LD_VAR 0 2
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: IFFALSE 7340
// if result [ 1 ] [ 1 ] = i then
7277: LD_VAR 0 2
7281: PUSH
7282: LD_INT 1
7284: ARRAY
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: PUSH
7290: LD_VAR 0 8
7294: EQUAL
7295: IFFALSE 7340
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PPUSH
7319: LD_INT 1
7321: PPUSH
7322: CALL_OW 3
7326: PPUSH
7327: CALL_OW 1
7331: ST_TO_ADDR
// tmp := 1 ;
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_STRING 1
7339: ST_TO_ADDR
// end ; normal := normal & tmp ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_VAR 0 5
7349: PUSH
7350: LD_VAR 0 3
7354: STR
7355: ST_TO_ADDR
// end ;
7356: GO 7256
7358: POP
7359: POP
// for i = 1 to hardcoreCounter do
7360: LD_ADDR_VAR 0 8
7364: PUSH
7365: DOUBLE
7366: LD_INT 1
7368: DEC
7369: ST_TO_ADDR
7370: LD_EXP 10
7374: PUSH
7375: FOR_TO
7376: IFFALSE 7481
// begin tmp := 0 ;
7378: LD_ADDR_VAR 0 3
7382: PUSH
7383: LD_STRING 0
7385: ST_TO_ADDR
// if result [ 2 ] then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: IFFALSE 7463
// if result [ 2 ] [ 1 ] = 100 + i then
7396: LD_VAR 0 2
7400: PUSH
7401: LD_INT 2
7403: ARRAY
7404: PUSH
7405: LD_INT 1
7407: ARRAY
7408: PUSH
7409: LD_INT 100
7411: PUSH
7412: LD_VAR 0 8
7416: PLUS
7417: EQUAL
7418: IFFALSE 7463
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7420: LD_ADDR_VAR 0 2
7424: PUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: LD_VAR 0 2
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 3
7449: PPUSH
7450: CALL_OW 1
7454: ST_TO_ADDR
// tmp := 1 ;
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: LD_STRING 1
7462: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7463: LD_ADDR_VAR 0 6
7467: PUSH
7468: LD_VAR 0 6
7472: PUSH
7473: LD_VAR 0 3
7477: STR
7478: ST_TO_ADDR
// end ;
7479: GO 7375
7481: POP
7482: POP
// if isGameLoad then
7483: LD_VAR 0 1
7487: IFFALSE 7962
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7489: LD_ADDR_VAR 0 4
7493: PUSH
7494: LD_EXP 13
7498: PUSH
7499: LD_EXP 12
7503: PUSH
7504: LD_EXP 14
7508: PUSH
7509: LD_EXP 11
7513: PUSH
7514: LD_EXP 15
7518: PUSH
7519: LD_EXP 16
7523: PUSH
7524: LD_EXP 17
7528: PUSH
7529: LD_EXP 18
7533: PUSH
7534: LD_EXP 19
7538: PUSH
7539: LD_EXP 20
7543: PUSH
7544: LD_EXP 21
7548: PUSH
7549: LD_EXP 22
7553: PUSH
7554: LD_EXP 23
7558: PUSH
7559: LD_EXP 24
7563: PUSH
7564: LD_EXP 32
7568: PUSH
7569: LD_EXP 33
7573: PUSH
7574: LD_EXP 34
7578: PUSH
7579: LD_EXP 35
7583: PUSH
7584: LD_EXP 37
7588: PUSH
7589: LD_EXP 38
7593: PUSH
7594: LD_EXP 39
7598: PUSH
7599: LD_EXP 42
7603: PUSH
7604: LD_EXP 44
7608: PUSH
7609: LD_EXP 45
7613: PUSH
7614: LD_EXP 46
7618: PUSH
7619: LD_EXP 48
7623: PUSH
7624: LD_EXP 49
7628: PUSH
7629: LD_EXP 52
7633: PUSH
7634: LD_EXP 53
7638: PUSH
7639: LD_EXP 54
7643: PUSH
7644: LD_EXP 55
7648: PUSH
7649: LD_EXP 56
7653: PUSH
7654: LD_EXP 57
7658: PUSH
7659: LD_EXP 58
7663: PUSH
7664: LD_EXP 59
7668: PUSH
7669: LD_EXP 60
7673: PUSH
7674: LD_EXP 25
7678: PUSH
7679: LD_EXP 26
7683: PUSH
7684: LD_EXP 29
7688: PUSH
7689: LD_EXP 30
7693: PUSH
7694: LD_EXP 31
7698: PUSH
7699: LD_EXP 27
7703: PUSH
7704: LD_EXP 28
7708: PUSH
7709: LD_EXP 36
7713: PUSH
7714: LD_EXP 40
7718: PUSH
7719: LD_EXP 41
7723: PUSH
7724: LD_EXP 43
7728: PUSH
7729: LD_EXP 47
7733: PUSH
7734: LD_EXP 50
7738: PUSH
7739: LD_EXP 51
7743: PUSH
7744: LD_EXP 61
7748: PUSH
7749: LD_EXP 62
7753: PUSH
7754: LD_EXP 63
7758: PUSH
7759: LD_EXP 64
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
// tmp :=  ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_STRING 
7827: ST_TO_ADDR
// for i = 1 to normalCounter do
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_EXP 9
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7880
// begin if flags [ i ] then
7846: LD_VAR 0 4
7850: PUSH
7851: LD_VAR 0 8
7855: ARRAY
7856: IFFALSE 7878
// tmp := tmp & i & ; ;
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 8
7872: STR
7873: PUSH
7874: LD_STRING ;
7876: STR
7877: ST_TO_ADDR
// end ;
7878: GO 7843
7880: POP
7881: POP
// for i = 1 to hardcoreCounter do
7882: LD_ADDR_VAR 0 8
7886: PUSH
7887: DOUBLE
7888: LD_INT 1
7890: DEC
7891: ST_TO_ADDR
7892: LD_EXP 10
7896: PUSH
7897: FOR_TO
7898: IFFALSE 7944
// begin if flags [ normalCounter + i ] then
7900: LD_VAR 0 4
7904: PUSH
7905: LD_EXP 9
7909: PUSH
7910: LD_VAR 0 8
7914: PLUS
7915: ARRAY
7916: IFFALSE 7942
// tmp := tmp & ( 100 + i ) & ; ;
7918: LD_ADDR_VAR 0 3
7922: PUSH
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 100
7930: PUSH
7931: LD_VAR 0 8
7935: PLUS
7936: STR
7937: PUSH
7938: LD_STRING ;
7940: STR
7941: ST_TO_ADDR
// end ;
7942: GO 7897
7944: POP
7945: POP
// if tmp then
7946: LD_VAR 0 3
7950: IFFALSE 7962
// active := tmp ;
7952: LD_ADDR_VAR 0 7
7956: PUSH
7957: LD_VAR 0 3
7961: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7962: LD_STRING getStreamItemsFromMission("
7964: PUSH
7965: LD_VAR 0 5
7969: STR
7970: PUSH
7971: LD_STRING ","
7973: STR
7974: PUSH
7975: LD_VAR 0 6
7979: STR
7980: PUSH
7981: LD_STRING ","
7983: STR
7984: PUSH
7985: LD_VAR 0 7
7989: STR
7990: PUSH
7991: LD_STRING ")
7993: STR
7994: PPUSH
7995: CALL_OW 559
// end else
7999: GO 8008
// ToLua ( getStreamItemsFromMission("","","") ) ;
8001: LD_STRING getStreamItemsFromMission("","","")
8003: PPUSH
8004: CALL_OW 559
// end ;
8008: LD_VAR 0 2
8012: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8013: LD_EXP 8
8017: PUSH
8018: LD_EXP 13
8022: AND
8023: IFFALSE 8147
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
8031: PPUSH
// begin enable ;
8032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 22
8040: PUSH
8041: LD_OWVAR 2
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 34
8055: PUSH
8056: LD_INT 7
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 34
8065: PUSH
8066: LD_INT 45
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 34
8075: PUSH
8076: LD_INT 28
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 34
8085: PUSH
8086: LD_INT 47
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if not tmp then
8109: LD_VAR 0 2
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8147
// for i in tmp do
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8145
// begin SetLives ( i , 0 ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 234
// end ;
8143: GO 8128
8145: POP
8146: POP
// end ;
8147: PPOPN 2
8149: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8150: LD_EXP 8
8154: PUSH
8155: LD_EXP 14
8159: AND
8160: IFFALSE 8244
8162: GO 8164
8164: DISABLE
8165: LD_INT 0
8167: PPUSH
8168: PPUSH
// begin enable ;
8169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8170: LD_ADDR_VAR 0 2
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_OWVAR 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 32
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// if not tmp then
8206: LD_VAR 0 2
8210: NOT
8211: IFFALSE 8215
// exit ;
8213: GO 8244
// for i in tmp do
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_VAR 0 2
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8242
// begin SetLives ( i , 0 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 0
8235: PPUSH
8236: CALL_OW 234
// end ;
8240: GO 8225
8242: POP
8243: POP
// end ;
8244: PPOPN 2
8246: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8247: LD_EXP 8
8251: PUSH
8252: LD_EXP 11
8256: AND
8257: IFFALSE 8350
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
// begin enable ;
8265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 22
8273: PUSH
8274: LD_OWVAR 2
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 2
8285: PUSH
8286: LD_INT 25
8288: PUSH
8289: LD_INT 5
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 9
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 25
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 69
8330: PUSH
8331: FOR_IN
8332: IFFALSE 8348
// begin SetClass ( i , 1 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 336
// end ;
8346: GO 8331
8348: POP
8349: POP
// end ;
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8353: LD_EXP 8
8357: PUSH
8358: LD_EXP 12
8362: AND
8363: PUSH
8364: LD_OWVAR 65
8368: PUSH
8369: LD_INT 7
8371: LESS
8372: AND
8373: IFFALSE 8387
8375: GO 8377
8377: DISABLE
// begin enable ;
8378: ENABLE
// game_speed := 7 ;
8379: LD_ADDR_OWVAR 65
8383: PUSH
8384: LD_INT 7
8386: ST_TO_ADDR
// end ;
8387: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8388: LD_EXP 8
8392: PUSH
8393: LD_EXP 15
8397: AND
8398: IFFALSE 8600
8400: GO 8402
8402: DISABLE
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
8407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8408: LD_ADDR_VAR 0 3
8412: PUSH
8413: LD_INT 81
8415: PUSH
8416: LD_OWVAR 2
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 21
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not tmp then
8444: LD_VAR 0 3
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8600
// if tmp > 5 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 5
8460: GREATER
8461: IFFALSE 8473
// k := 5 else
8463: LD_ADDR_VAR 0 2
8467: PUSH
8468: LD_INT 5
8470: ST_TO_ADDR
8471: GO 8483
// k := tmp ;
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_VAR 0 3
8482: ST_TO_ADDR
// for i := 1 to k do
8483: LD_ADDR_VAR 0 1
8487: PUSH
8488: DOUBLE
8489: LD_INT 1
8491: DEC
8492: ST_TO_ADDR
8493: LD_VAR 0 2
8497: PUSH
8498: FOR_TO
8499: IFFALSE 8598
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 1
8516: PUSH
8517: LD_INT 4
8519: MOD
8520: PUSH
8521: LD_INT 1
8523: PLUS
8524: PPUSH
8525: CALL_OW 259
8529: PUSH
8530: LD_INT 10
8532: LESS
8533: IFFALSE 8596
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8535: LD_VAR 0 3
8539: PUSH
8540: LD_VAR 0 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 1
8550: PUSH
8551: LD_INT 4
8553: MOD
8554: PUSH
8555: LD_INT 1
8557: PLUS
8558: PPUSH
8559: LD_VAR 0 3
8563: PUSH
8564: LD_VAR 0 1
8568: ARRAY
8569: PPUSH
8570: LD_VAR 0 1
8574: PUSH
8575: LD_INT 4
8577: MOD
8578: PUSH
8579: LD_INT 1
8581: PLUS
8582: PPUSH
8583: CALL_OW 259
8587: PUSH
8588: LD_INT 1
8590: PLUS
8591: PPUSH
8592: CALL_OW 237
8596: GO 8498
8598: POP
8599: POP
// end ;
8600: PPOPN 3
8602: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8603: LD_EXP 8
8607: PUSH
8608: LD_EXP 16
8612: AND
8613: IFFALSE 8633
8615: GO 8617
8617: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8618: LD_INT 4
8620: PPUSH
8621: LD_OWVAR 2
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 324
8633: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8634: LD_EXP 8
8638: PUSH
8639: LD_EXP 45
8643: AND
8644: IFFALSE 8664
8646: GO 8648
8648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8649: LD_INT 19
8651: PPUSH
8652: LD_OWVAR 2
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 324
8664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8665: LD_EXP 8
8669: PUSH
8670: LD_EXP 17
8674: AND
8675: IFFALSE 8777
8677: GO 8679
8679: DISABLE
8680: LD_INT 0
8682: PPUSH
8683: PPUSH
// begin enable ;
8684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8685: LD_ADDR_VAR 0 2
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_OWVAR 2
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 11
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 34
8717: PUSH
8718: LD_INT 30
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: ST_TO_ADDR
// if not tmp then
8739: LD_VAR 0 2
8743: NOT
8744: IFFALSE 8748
// exit ;
8746: GO 8777
// for i in tmp do
8748: LD_ADDR_VAR 0 1
8752: PUSH
8753: LD_VAR 0 2
8757: PUSH
8758: FOR_IN
8759: IFFALSE 8775
// begin SetLives ( i , 0 ) ;
8761: LD_VAR 0 1
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 234
// end ;
8773: GO 8758
8775: POP
8776: POP
// end ;
8777: PPOPN 2
8779: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8780: LD_EXP 8
8784: PUSH
8785: LD_EXP 18
8789: AND
8790: IFFALSE 8810
8792: GO 8794
8794: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8795: LD_INT 32
8797: PPUSH
8798: LD_OWVAR 2
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 324
8810: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8811: LD_EXP 8
8815: PUSH
8816: LD_EXP 19
8820: AND
8821: IFFALSE 9002
8823: GO 8825
8825: DISABLE
8826: LD_INT 0
8828: PPUSH
8829: PPUSH
8830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8831: LD_ADDR_VAR 0 2
8835: PUSH
8836: LD_INT 22
8838: PUSH
8839: LD_OWVAR 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: ST_TO_ADDR
// if not tmp then
8867: LD_VAR 0 2
8871: NOT
8872: IFFALSE 8876
// exit ;
8874: GO 9002
// side := 0 ;
8876: LD_ADDR_VAR 0 3
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// for i := 1 to 8 do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: DOUBLE
8890: LD_INT 1
8892: DEC
8893: ST_TO_ADDR
8894: LD_INT 8
8896: PUSH
8897: FOR_TO
8898: IFFALSE 8946
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8900: LD_OWVAR 2
8904: PUSH
8905: LD_VAR 0 1
8909: NONEQUAL
8910: PUSH
8911: LD_OWVAR 2
8915: PPUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 81
8925: PUSH
8926: LD_INT 2
8928: EQUAL
8929: AND
8930: IFFALSE 8944
// begin side := i ;
8932: LD_ADDR_VAR 0 3
8936: PUSH
8937: LD_VAR 0 1
8941: ST_TO_ADDR
// break ;
8942: GO 8946
// end ;
8944: GO 8897
8946: POP
8947: POP
// if not side then
8948: LD_VAR 0 3
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9002
// for i := 1 to tmp do
8957: LD_ADDR_VAR 0 1
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 2
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9000
// if Prob ( 60 ) then
8975: LD_INT 60
8977: PPUSH
8978: CALL_OW 13
8982: IFFALSE 8998
// SetSide ( i , side ) ;
8984: LD_VAR 0 1
8988: PPUSH
8989: LD_VAR 0 3
8993: PPUSH
8994: CALL_OW 235
8998: GO 8972
9000: POP
9001: POP
// end ;
9002: PPOPN 3
9004: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9005: LD_EXP 8
9009: PUSH
9010: LD_EXP 21
9014: AND
9015: IFFALSE 9134
9017: GO 9019
9019: DISABLE
9020: LD_INT 0
9022: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9023: LD_ADDR_VAR 0 1
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_OWVAR 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 3
9052: PUSH
9053: LD_INT 23
9055: PUSH
9056: LD_INT 0
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: PPUSH
9072: CALL_OW 69
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9132
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9080: LD_VAR 0 1
9084: PPUSH
9085: CALL_OW 257
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: IN
9108: IFFALSE 9130
// SetClass ( un , rand ( 1 , 4 ) ) ;
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 4
9120: PPUSH
9121: CALL_OW 12
9125: PPUSH
9126: CALL_OW 336
9130: GO 9077
9132: POP
9133: POP
// end ;
9134: PPOPN 1
9136: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9137: LD_EXP 8
9141: PUSH
9142: LD_EXP 20
9146: AND
9147: IFFALSE 9226
9149: GO 9151
9151: DISABLE
9152: LD_INT 0
9154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_OWVAR 2
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 21
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL_OW 69
9190: ST_TO_ADDR
// if not tmp then
9191: LD_VAR 0 1
9195: NOT
9196: IFFALSE 9200
// exit ;
9198: GO 9226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9200: LD_VAR 0 1
9204: PUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 12
9217: ARRAY
9218: PPUSH
9219: LD_INT 100
9221: PPUSH
9222: CALL_OW 234
// end ;
9226: PPOPN 1
9228: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9229: LD_EXP 8
9233: PUSH
9234: LD_EXP 22
9238: AND
9239: IFFALSE 9337
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9247: LD_ADDR_VAR 0 1
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_OWVAR 2
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: ST_TO_ADDR
// if not tmp then
9283: LD_VAR 0 1
9287: NOT
9288: IFFALSE 9292
// exit ;
9290: GO 9337
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9292: LD_VAR 0 1
9296: PUSH
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL_OW 12
9309: ARRAY
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: LD_INT 4
9316: PPUSH
9317: CALL_OW 12
9321: PPUSH
9322: LD_INT 3000
9324: PPUSH
9325: LD_INT 9000
9327: PPUSH
9328: CALL_OW 12
9332: PPUSH
9333: CALL_OW 492
// end ;
9337: PPOPN 1
9339: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9340: LD_EXP 8
9344: PUSH
9345: LD_EXP 23
9349: AND
9350: IFFALSE 9370
9352: GO 9354
9354: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9355: LD_INT 1
9357: PPUSH
9358: LD_OWVAR 2
9362: PPUSH
9363: LD_INT 0
9365: PPUSH
9366: CALL_OW 324
9370: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9371: LD_EXP 8
9375: PUSH
9376: LD_EXP 24
9380: AND
9381: IFFALSE 9464
9383: GO 9385
9385: DISABLE
9386: LD_INT 0
9388: PPUSH
9389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: LD_INT 22
9397: PUSH
9398: LD_OWVAR 2
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: ST_TO_ADDR
// if not tmp then
9426: LD_VAR 0 2
9430: NOT
9431: IFFALSE 9435
// exit ;
9433: GO 9464
// for i in tmp do
9435: LD_ADDR_VAR 0 1
9439: PUSH
9440: LD_VAR 0 2
9444: PUSH
9445: FOR_IN
9446: IFFALSE 9462
// SetBLevel ( i , 10 ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 10
9455: PPUSH
9456: CALL_OW 241
9460: GO 9445
9462: POP
9463: POP
// end ;
9464: PPOPN 2
9466: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9467: LD_EXP 8
9471: PUSH
9472: LD_EXP 25
9476: AND
9477: IFFALSE 9588
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
9486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9487: LD_ADDR_VAR 0 3
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_OWVAR 2
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 25
9506: PUSH
9507: LD_INT 1
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 69
9522: ST_TO_ADDR
// if not tmp then
9523: LD_VAR 0 3
9527: NOT
9528: IFFALSE 9532
// exit ;
9530: GO 9588
// un := tmp [ rand ( 1 , tmp ) ] ;
9532: LD_ADDR_VAR 0 2
9536: PUSH
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: CALL_OW 12
9554: ARRAY
9555: ST_TO_ADDR
// if Crawls ( un ) then
9556: LD_VAR 0 2
9560: PPUSH
9561: CALL_OW 318
9565: IFFALSE 9576
// ComWalk ( un ) ;
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9576: LD_VAR 0 2
9580: PPUSH
9581: LD_INT 5
9583: PPUSH
9584: CALL_OW 336
// end ;
9588: PPOPN 3
9590: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9591: LD_EXP 8
9595: PUSH
9596: LD_EXP 26
9600: AND
9601: PUSH
9602: LD_OWVAR 67
9606: PUSH
9607: LD_INT 4
9609: LESS
9610: AND
9611: IFFALSE 9630
9613: GO 9615
9615: DISABLE
// begin Difficulty := Difficulty + 1 ;
9616: LD_ADDR_OWVAR 67
9620: PUSH
9621: LD_OWVAR 67
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: ST_TO_ADDR
// end ;
9630: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9631: LD_EXP 8
9635: PUSH
9636: LD_EXP 27
9640: AND
9641: IFFALSE 9744
9643: GO 9645
9645: DISABLE
9646: LD_INT 0
9648: PPUSH
// begin for i := 1 to 5 do
9649: LD_ADDR_VAR 0 1
9653: PUSH
9654: DOUBLE
9655: LD_INT 1
9657: DEC
9658: ST_TO_ADDR
9659: LD_INT 5
9661: PUSH
9662: FOR_TO
9663: IFFALSE 9742
// begin uc_nation := nation_nature ;
9665: LD_ADDR_OWVAR 21
9669: PUSH
9670: LD_INT 0
9672: ST_TO_ADDR
// uc_side := 0 ;
9673: LD_ADDR_OWVAR 20
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9681: LD_ADDR_OWVAR 29
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 12
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
// hc_agressivity := 20 ;
9696: LD_ADDR_OWVAR 35
9700: PUSH
9701: LD_INT 20
9703: ST_TO_ADDR
// hc_class := class_tiger ;
9704: LD_ADDR_OWVAR 28
9708: PUSH
9709: LD_INT 14
9711: ST_TO_ADDR
// hc_gallery :=  ;
9712: LD_ADDR_OWVAR 33
9716: PUSH
9717: LD_STRING 
9719: ST_TO_ADDR
// hc_name :=  ;
9720: LD_ADDR_OWVAR 26
9724: PUSH
9725: LD_STRING 
9727: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9728: CALL_OW 44
9732: PPUSH
9733: LD_INT 0
9735: PPUSH
9736: CALL_OW 51
// end ;
9740: GO 9662
9742: POP
9743: POP
// end ;
9744: PPOPN 1
9746: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9747: LD_EXP 8
9751: PUSH
9752: LD_EXP 28
9756: AND
9757: IFFALSE 9766
9759: GO 9761
9761: DISABLE
// StreamSibBomb ;
9762: CALL 9767 0 0
9766: END
// export function StreamSibBomb ; var i , x , y ; begin
9767: LD_INT 0
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
// result := false ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_INT 0
9780: ST_TO_ADDR
// for i := 1 to 16 do
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_INT 16
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9994
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9797: LD_ADDR_VAR 0 3
9801: PUSH
9802: LD_INT 10
9804: PUSH
9805: LD_INT 20
9807: PUSH
9808: LD_INT 30
9810: PUSH
9811: LD_INT 40
9813: PUSH
9814: LD_INT 50
9816: PUSH
9817: LD_INT 60
9819: PUSH
9820: LD_INT 70
9822: PUSH
9823: LD_INT 80
9825: PUSH
9826: LD_INT 90
9828: PUSH
9829: LD_INT 100
9831: PUSH
9832: LD_INT 110
9834: PUSH
9835: LD_INT 120
9837: PUSH
9838: LD_INT 130
9840: PUSH
9841: LD_INT 140
9843: PUSH
9844: LD_INT 150
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 1
9866: PPUSH
9867: LD_INT 15
9869: PPUSH
9870: CALL_OW 12
9874: ARRAY
9875: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9876: LD_ADDR_VAR 0 4
9880: PUSH
9881: LD_INT 10
9883: PUSH
9884: LD_INT 20
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 40
9892: PUSH
9893: LD_INT 50
9895: PUSH
9896: LD_INT 60
9898: PUSH
9899: LD_INT 70
9901: PUSH
9902: LD_INT 80
9904: PUSH
9905: LD_INT 90
9907: PUSH
9908: LD_INT 100
9910: PUSH
9911: LD_INT 110
9913: PUSH
9914: LD_INT 120
9916: PUSH
9917: LD_INT 130
9919: PUSH
9920: LD_INT 140
9922: PUSH
9923: LD_INT 150
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 15
9948: PPUSH
9949: CALL_OW 12
9953: ARRAY
9954: ST_TO_ADDR
// if ValidHex ( x , y ) then
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_VAR 0 4
9964: PPUSH
9965: CALL_OW 488
9969: IFFALSE 9992
// begin result := [ x , y ] ;
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: LD_VAR 0 3
9980: PUSH
9981: LD_VAR 0 4
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// break ;
9990: GO 9994
// end ; end ;
9992: GO 9794
9994: POP
9995: POP
// if result then
9996: LD_VAR 0 1
10000: IFFALSE 10060
// begin ToLua ( playSibBomb() ) ;
10002: LD_STRING playSibBomb()
10004: PPUSH
10005: CALL_OW 559
// wait ( 0 0$14 ) ;
10009: LD_INT 490
10011: PPUSH
10012: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10016: LD_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_VAR 0 1
10029: PUSH
10030: LD_INT 2
10032: ARRAY
10033: PPUSH
10034: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10038: LD_VAR 0 1
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: LD_VAR 0 1
10051: PUSH
10052: LD_INT 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 429
// end ; end ;
10060: LD_VAR 0 1
10064: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10065: LD_EXP 8
10069: PUSH
10070: LD_EXP 30
10074: AND
10075: IFFALSE 10087
10077: GO 10079
10079: DISABLE
// YouLost (  ) ;
10080: LD_STRING 
10082: PPUSH
10083: CALL_OW 104
10087: END
// every 0 0$1 trigger StreamModeActive and sFog do
10088: LD_EXP 8
10092: PUSH
10093: LD_EXP 29
10097: AND
10098: IFFALSE 10112
10100: GO 10102
10102: DISABLE
// FogOff ( your_side ) ;
10103: LD_OWVAR 2
10107: PPUSH
10108: CALL_OW 344
10112: END
// every 0 0$1 trigger StreamModeActive and sSun do
10113: LD_EXP 8
10117: PUSH
10118: LD_EXP 31
10122: AND
10123: IFFALSE 10151
10125: GO 10127
10127: DISABLE
// begin solar_recharge_percent := 0 ;
10128: LD_ADDR_OWVAR 79
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10136: LD_INT 10500
10138: PPUSH
10139: CALL_OW 67
// solar_recharge_percent := 100 ;
10143: LD_ADDR_OWVAR 79
10147: PUSH
10148: LD_INT 100
10150: ST_TO_ADDR
// end ;
10151: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10152: LD_EXP 8
10156: PUSH
10157: LD_EXP 32
10161: AND
10162: IFFALSE 10401
10164: GO 10166
10166: DISABLE
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
10171: PPUSH
// begin tmp := [ ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: EMPTY
10178: ST_TO_ADDR
// for i := 1 to 6 do
10179: LD_ADDR_VAR 0 1
10183: PUSH
10184: DOUBLE
10185: LD_INT 1
10187: DEC
10188: ST_TO_ADDR
10189: LD_INT 6
10191: PUSH
10192: FOR_TO
10193: IFFALSE 10298
// begin uc_nation := nation_nature ;
10195: LD_ADDR_OWVAR 21
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// uc_side := 0 ;
10203: LD_ADDR_OWVAR 20
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10211: LD_ADDR_OWVAR 29
10215: PUSH
10216: LD_INT 12
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: ST_TO_ADDR
// hc_agressivity := 20 ;
10226: LD_ADDR_OWVAR 35
10230: PUSH
10231: LD_INT 20
10233: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10234: LD_ADDR_OWVAR 28
10238: PUSH
10239: LD_INT 17
10241: ST_TO_ADDR
// hc_gallery :=  ;
10242: LD_ADDR_OWVAR 33
10246: PUSH
10247: LD_STRING 
10249: ST_TO_ADDR
// hc_name :=  ;
10250: LD_ADDR_OWVAR 26
10254: PUSH
10255: LD_STRING 
10257: ST_TO_ADDR
// un := CreateHuman ;
10258: LD_ADDR_VAR 0 2
10262: PUSH
10263: CALL_OW 44
10267: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10268: LD_VAR 0 2
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 51
// tmp := tmp ^ un ;
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: LD_VAR 0 3
10289: PUSH
10290: LD_VAR 0 2
10294: ADD
10295: ST_TO_ADDR
// end ;
10296: GO 10192
10298: POP
10299: POP
// repeat wait ( 0 0$1 ) ;
10300: LD_INT 35
10302: PPUSH
10303: CALL_OW 67
// for un in tmp do
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10392
// begin if IsDead ( un ) then
10320: LD_VAR 0 2
10324: PPUSH
10325: CALL_OW 301
10329: IFFALSE 10349
// begin tmp := tmp diff un ;
10331: LD_ADDR_VAR 0 3
10335: PUSH
10336: LD_VAR 0 3
10340: PUSH
10341: LD_VAR 0 2
10345: DIFF
10346: ST_TO_ADDR
// continue ;
10347: GO 10317
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10349: LD_VAR 0 2
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 0
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: CALL_OW 115
// end ;
10390: GO 10317
10392: POP
10393: POP
// until not tmp ;
10394: LD_VAR 0 3
10398: NOT
10399: IFFALSE 10300
// end ;
10401: PPOPN 3
10403: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10404: LD_EXP 8
10408: PUSH
10409: LD_EXP 33
10413: AND
10414: IFFALSE 10468
10416: GO 10418
10418: DISABLE
// begin ToLua ( displayTroll(); ) ;
10419: LD_STRING displayTroll();
10421: PPUSH
10422: CALL_OW 559
// wait ( 3 3$00 ) ;
10426: LD_INT 6300
10428: PPUSH
10429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10433: LD_STRING hideTroll();
10435: PPUSH
10436: CALL_OW 559
// wait ( 1 1$00 ) ;
10440: LD_INT 2100
10442: PPUSH
10443: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10447: LD_STRING displayTroll();
10449: PPUSH
10450: CALL_OW 559
// wait ( 1 1$00 ) ;
10454: LD_INT 2100
10456: PPUSH
10457: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10461: LD_STRING hideTroll();
10463: PPUSH
10464: CALL_OW 559
// end ;
10468: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10469: LD_EXP 8
10473: PUSH
10474: LD_EXP 34
10478: AND
10479: IFFALSE 10542
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
// begin p := 0 ;
10487: LD_ADDR_VAR 0 1
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// repeat game_speed := 1 ;
10495: LD_ADDR_OWVAR 65
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10503: LD_INT 35
10505: PPUSH
10506: CALL_OW 67
// p := p + 1 ;
10510: LD_ADDR_VAR 0 1
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: LD_INT 1
10522: PLUS
10523: ST_TO_ADDR
// until p >= 60 ;
10524: LD_VAR 0 1
10528: PUSH
10529: LD_INT 60
10531: GREATEREQUAL
10532: IFFALSE 10495
// game_speed := 4 ;
10534: LD_ADDR_OWVAR 65
10538: PUSH
10539: LD_INT 4
10541: ST_TO_ADDR
// end ;
10542: PPOPN 1
10544: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10545: LD_EXP 8
10549: PUSH
10550: LD_EXP 35
10554: AND
10555: IFFALSE 10701
10557: GO 10559
10559: DISABLE
10560: LD_INT 0
10562: PPUSH
10563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10564: LD_ADDR_VAR 0 1
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: LD_OWVAR 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 30
10586: PUSH
10587: LD_INT 0
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PPUSH
10613: CALL_OW 69
10617: ST_TO_ADDR
// if not depot then
10618: LD_VAR 0 1
10622: NOT
10623: IFFALSE 10627
// exit ;
10625: GO 10701
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 12
10649: ARRAY
10650: PPUSH
10651: CALL_OW 274
10655: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: LD_INT 0
10666: PPUSH
10667: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10671: LD_VAR 0 2
10675: PPUSH
10676: LD_INT 2
10678: PPUSH
10679: LD_INT 0
10681: PPUSH
10682: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_INT 3
10693: PPUSH
10694: LD_INT 0
10696: PPUSH
10697: CALL_OW 277
// end ;
10701: PPOPN 2
10703: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10704: LD_EXP 8
10708: PUSH
10709: LD_EXP 36
10713: AND
10714: IFFALSE 10811
10716: GO 10718
10718: DISABLE
10719: LD_INT 0
10721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10722: LD_ADDR_VAR 0 1
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_OWVAR 2
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 3
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: ST_TO_ADDR
// if not tmp then
10776: LD_VAR 0 1
10780: NOT
10781: IFFALSE 10785
// exit ;
10783: GO 10811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10785: LD_VAR 0 1
10789: PUSH
10790: LD_INT 1
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 12
10802: ARRAY
10803: PPUSH
10804: LD_INT 200
10806: PPUSH
10807: CALL_OW 234
// end ;
10811: PPOPN 1
10813: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10814: LD_EXP 8
10818: PUSH
10819: LD_EXP 37
10823: AND
10824: IFFALSE 10903
10826: GO 10828
10828: DISABLE
10829: LD_INT 0
10831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_OWVAR 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// if not tmp then
10868: LD_VAR 0 1
10872: NOT
10873: IFFALSE 10877
// exit ;
10875: GO 10903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10877: LD_VAR 0 1
10881: PUSH
10882: LD_INT 1
10884: PPUSH
10885: LD_VAR 0 1
10889: PPUSH
10890: CALL_OW 12
10894: ARRAY
10895: PPUSH
10896: LD_INT 60
10898: PPUSH
10899: CALL_OW 234
// end ;
10903: PPOPN 1
10905: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10906: LD_EXP 8
10910: PUSH
10911: LD_EXP 38
10915: AND
10916: IFFALSE 11015
10918: GO 10920
10920: DISABLE
10921: LD_INT 0
10923: PPUSH
10924: PPUSH
// begin enable ;
10925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_OWVAR 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 61
10945: PUSH
10946: EMPTY
10947: LIST
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: ST_TO_ADDR
// if not tmp then
10969: LD_VAR 0 1
10973: NOT
10974: IFFALSE 10978
// exit ;
10976: GO 11015
// for i in tmp do
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11013
// if IsControledBy ( i ) then
10991: LD_VAR 0 2
10995: PPUSH
10996: CALL_OW 312
11000: IFFALSE 11011
// ComUnlink ( i ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: CALL_OW 136
11011: GO 10988
11013: POP
11014: POP
// end ;
11015: PPOPN 2
11017: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11018: LD_EXP 8
11022: PUSH
11023: LD_EXP 39
11027: AND
11028: IFFALSE 11168
11030: GO 11032
11032: DISABLE
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
// begin ToLua ( displayPowell(); ) ;
11037: LD_STRING displayPowell();
11039: PPUSH
11040: CALL_OW 559
// uc_side := 0 ;
11044: LD_ADDR_OWVAR 20
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// uc_nation := 2 ;
11052: LD_ADDR_OWVAR 21
11056: PUSH
11057: LD_INT 2
11059: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11060: LD_ADDR_OWVAR 37
11064: PUSH
11065: LD_INT 14
11067: ST_TO_ADDR
// vc_engine := engine_siberite ;
11068: LD_ADDR_OWVAR 39
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// vc_control := control_apeman ;
11076: LD_ADDR_OWVAR 38
11080: PUSH
11081: LD_INT 5
11083: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11084: LD_ADDR_OWVAR 40
11088: PUSH
11089: LD_INT 29
11091: ST_TO_ADDR
// un := CreateVehicle ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: CALL_OW 45
11101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11102: LD_VAR 0 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11114: LD_INT 35
11116: PPUSH
11117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11121: LD_VAR 0 2
11125: PPUSH
11126: LD_INT 22
11128: PUSH
11129: LD_OWVAR 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 69
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 74
11152: PPUSH
11153: CALL_OW 115
// until IsDead ( un ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: CALL_OW 301
11166: IFFALSE 11114
// end ;
11168: PPOPN 2
11170: END
// every 0 0$1 trigger StreamModeActive and sStu do
11171: LD_EXP 8
11175: PUSH
11176: LD_EXP 47
11180: AND
11181: IFFALSE 11197
11183: GO 11185
11185: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11186: LD_STRING displayStucuk();
11188: PPUSH
11189: CALL_OW 559
// ResetFog ;
11193: CALL_OW 335
// end ;
11197: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11198: LD_EXP 8
11202: PUSH
11203: LD_EXP 40
11207: AND
11208: IFFALSE 11349
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 2
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11349
// un := tmp [ rand ( 1 , tmp ) ] ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_VAR 0 2
11271: PUSH
11272: LD_INT 1
11274: PPUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 12
11284: ARRAY
11285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_OWVAR 3
11307: PUSH
11308: LD_VAR 0 1
11312: DIFF
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 74
11323: PPUSH
11324: CALL_OW 115
// wait ( 0 0$20 ) ;
11328: LD_INT 700
11330: PPUSH
11331: CALL_OW 67
// SetSide ( un , your_side ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_OWVAR 2
11344: PPUSH
11345: CALL_OW 235
// end ;
11349: PPOPN 2
11351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11352: LD_EXP 8
11356: PUSH
11357: LD_EXP 41
11361: AND
11362: IFFALSE 11468
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11370: LD_ADDR_VAR 0 1
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_OWVAR 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: ST_TO_ADDR
// if not depot then
11424: LD_VAR 0 1
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11468
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 1
11440: ARRAY
11441: PPUSH
11442: CALL_OW 250
11446: PPUSH
11447: LD_VAR 0 1
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PPUSH
11456: CALL_OW 251
11460: PPUSH
11461: LD_INT 70
11463: PPUSH
11464: CALL_OW 495
// end ;
11468: PPOPN 1
11470: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11471: LD_EXP 8
11475: PUSH
11476: LD_EXP 42
11480: AND
11481: IFFALSE 11692
11483: GO 11485
11485: DISABLE
11486: LD_INT 0
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11493: LD_ADDR_VAR 0 5
11497: PUSH
11498: LD_INT 22
11500: PUSH
11501: LD_OWVAR 2
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PPUSH
11524: CALL_OW 69
11528: ST_TO_ADDR
// if not tmp then
11529: LD_VAR 0 5
11533: NOT
11534: IFFALSE 11538
// exit ;
11536: GO 11692
// for i in tmp do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_VAR 0 5
11547: PUSH
11548: FOR_IN
11549: IFFALSE 11690
// begin d := rand ( 0 , 5 ) ;
11551: LD_ADDR_VAR 0 4
11555: PUSH
11556: LD_INT 0
11558: PPUSH
11559: LD_INT 5
11561: PPUSH
11562: CALL_OW 12
11566: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11567: LD_ADDR_VAR 0 2
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 250
11581: PPUSH
11582: LD_VAR 0 4
11586: PPUSH
11587: LD_INT 3
11589: PPUSH
11590: LD_INT 12
11592: PPUSH
11593: CALL_OW 12
11597: PPUSH
11598: CALL_OW 272
11602: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11603: LD_ADDR_VAR 0 3
11607: PUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 251
11617: PPUSH
11618: LD_VAR 0 4
11622: PPUSH
11623: LD_INT 3
11625: PPUSH
11626: LD_INT 12
11628: PPUSH
11629: CALL_OW 12
11633: PPUSH
11634: CALL_OW 273
11638: ST_TO_ADDR
// if ValidHex ( x , y ) then
11639: LD_VAR 0 2
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: CALL_OW 488
11653: IFFALSE 11688
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11655: LD_VAR 0 1
11659: PPUSH
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 3
11672: PPUSH
11673: LD_INT 6
11675: PPUSH
11676: CALL_OW 12
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 483
// end ;
11688: GO 11548
11690: POP
11691: POP
// end ;
11692: PPOPN 5
11694: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11695: LD_EXP 8
11699: PUSH
11700: LD_EXP 43
11704: AND
11705: IFFALSE 11799
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_OWVAR 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 32
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 21
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: ST_TO_ADDR
// if not tmp then
11761: LD_VAR 0 2
11765: NOT
11766: IFFALSE 11770
// exit ;
11768: GO 11799
// for i in tmp do
11770: LD_ADDR_VAR 0 1
11774: PUSH
11775: LD_VAR 0 2
11779: PUSH
11780: FOR_IN
11781: IFFALSE 11797
// SetFuel ( i , 0 ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 240
11795: GO 11780
11797: POP
11798: POP
// end ;
11799: PPOPN 2
11801: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11802: LD_EXP 8
11806: PUSH
11807: LD_EXP 44
11811: AND
11812: IFFALSE 11878
11814: GO 11816
11816: DISABLE
11817: LD_INT 0
11819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 30
11839: PUSH
11840: LD_INT 29
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 1
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 11878
// DestroyUnit ( tmp [ 1 ] ) ;
11865: LD_VAR 0 1
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PPUSH
11874: CALL_OW 65
// end ;
11878: PPOPN 1
11880: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 46
11890: AND
11891: IFFALSE 12020
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
// begin uc_side := 0 ;
11899: LD_ADDR_OWVAR 20
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// uc_nation := nation_arabian ;
11907: LD_ADDR_OWVAR 21
11911: PUSH
11912: LD_INT 2
11914: ST_TO_ADDR
// hc_gallery :=  ;
11915: LD_ADDR_OWVAR 33
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// hc_name :=  ;
11923: LD_ADDR_OWVAR 26
11927: PUSH
11928: LD_STRING 
11930: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11931: LD_INT 1
11933: PPUSH
11934: LD_INT 11
11936: PPUSH
11937: LD_INT 10
11939: PPUSH
11940: CALL_OW 380
// un := CreateHuman ;
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: CALL_OW 44
11953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11954: LD_VAR 0 1
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11966: LD_INT 35
11968: PPUSH
11969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_INT 22
11980: PUSH
11981: LD_OWVAR 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PPUSH
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 74
12004: PPUSH
12005: CALL_OW 115
// until IsDead ( un ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: CALL_OW 301
12018: IFFALSE 11966
// end ;
12020: PPOPN 1
12022: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12023: LD_EXP 8
12027: PUSH
12028: LD_EXP 48
12032: AND
12033: IFFALSE 12045
12035: GO 12037
12037: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12038: LD_STRING earthquake(getX(game), 0, 32)
12040: PPUSH
12041: CALL_OW 559
12045: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12046: LD_EXP 8
12050: PUSH
12051: LD_EXP 49
12055: AND
12056: IFFALSE 12147
12058: GO 12060
12060: DISABLE
12061: LD_INT 0
12063: PPUSH
// begin enable ;
12064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_OWVAR 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 21
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 33
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 69
12111: ST_TO_ADDR
// if not tmp then
12112: LD_VAR 0 1
12116: NOT
12117: IFFALSE 12121
// exit ;
12119: GO 12147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 1
12128: PPUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 12
12138: ARRAY
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 234
// end ;
12147: PPOPN 1
12149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12150: LD_EXP 8
12154: PUSH
12155: LD_EXP 50
12159: AND
12160: IFFALSE 12301
12162: GO 12164
12164: DISABLE
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_OWVAR 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 25
12189: PUSH
12190: LD_INT 1
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 69
12205: ST_TO_ADDR
// if not tmp then
12206: LD_VAR 0 3
12210: NOT
12211: IFFALSE 12215
// exit ;
12213: GO 12301
// un := tmp [ rand ( 1 , tmp ) ] ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 1
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: CALL_OW 12
12237: ARRAY
12238: ST_TO_ADDR
// if Crawls ( un ) then
12239: LD_VAR 0 2
12243: PPUSH
12244: CALL_OW 318
12248: IFFALSE 12259
// ComWalk ( un ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12259: LD_VAR 0 2
12263: PPUSH
12264: LD_INT 9
12266: PPUSH
12267: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12271: LD_INT 28
12273: PPUSH
12274: LD_OWVAR 2
12278: PPUSH
12279: LD_INT 2
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12286: LD_INT 29
12288: PPUSH
12289: LD_OWVAR 2
12293: PPUSH
12294: LD_INT 2
12296: PPUSH
12297: CALL_OW 322
// end ;
12301: PPOPN 3
12303: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12304: LD_EXP 8
12308: PUSH
12309: LD_EXP 51
12313: AND
12314: IFFALSE 12425
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12425
// un := tmp [ rand ( 1 , tmp ) ] ;
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: PUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: CALL_OW 12
12391: ARRAY
12392: ST_TO_ADDR
// if Crawls ( un ) then
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 318
12402: IFFALSE 12413
// ComWalk ( un ) ;
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12413: LD_VAR 0 2
12417: PPUSH
12418: LD_INT 8
12420: PPUSH
12421: CALL_OW 336
// end ;
12425: PPOPN 3
12427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12428: LD_EXP 8
12432: PUSH
12433: LD_EXP 52
12437: AND
12438: IFFALSE 12582
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_OWVAR 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 21
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 34
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 34
12489: PUSH
12490: LD_INT 51
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 34
12499: PUSH
12500: LD_INT 32
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: ST_TO_ADDR
// if not tmp then
12523: LD_VAR 0 2
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12582
// for i in tmp do
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_VAR 0 2
12541: PUSH
12542: FOR_IN
12543: IFFALSE 12580
// if GetCargo ( i , mat_artifact ) = 0 then
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 4
12552: PPUSH
12553: CALL_OW 289
12557: PUSH
12558: LD_INT 0
12560: EQUAL
12561: IFFALSE 12578
// SetCargo ( i , mat_siberit , 100 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 3
12570: PPUSH
12571: LD_INT 100
12573: PPUSH
12574: CALL_OW 290
12578: GO 12542
12580: POP
12581: POP
// end ;
12582: PPOPN 2
12584: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12585: LD_EXP 8
12589: PUSH
12590: LD_EXP 53
12594: AND
12595: IFFALSE 12778
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12604: LD_ADDR_VAR 0 2
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_OWVAR 2
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: ST_TO_ADDR
// if not tmp then
12626: LD_VAR 0 2
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12778
// for i := 1 to 2 do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 2
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12776
// begin uc_side := your_side ;
12651: LD_ADDR_OWVAR 20
12655: PUSH
12656: LD_OWVAR 2
12660: ST_TO_ADDR
// uc_nation := nation_american ;
12661: LD_ADDR_OWVAR 21
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// vc_chassis := us_morphling ;
12669: LD_ADDR_OWVAR 37
12673: PUSH
12674: LD_INT 5
12676: ST_TO_ADDR
// vc_engine := engine_siberite ;
12677: LD_ADDR_OWVAR 39
12681: PUSH
12682: LD_INT 3
12684: ST_TO_ADDR
// vc_control := control_computer ;
12685: LD_ADDR_OWVAR 38
12689: PUSH
12690: LD_INT 3
12692: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12693: LD_ADDR_OWVAR 40
12697: PUSH
12698: LD_INT 10
12700: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12701: LD_VAR 0 2
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: PPUSH
12710: CALL_OW 310
12714: NOT
12715: IFFALSE 12762
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12717: CALL_OW 45
12721: PPUSH
12722: LD_VAR 0 2
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: CALL_OW 250
12735: PPUSH
12736: LD_VAR 0 2
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 251
12749: PPUSH
12750: LD_INT 12
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 50
12760: GO 12774
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12762: CALL_OW 45
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 51
// end ;
12774: GO 12648
12776: POP
12777: POP
// end ;
12778: PPOPN 2
12780: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12781: LD_EXP 8
12785: PUSH
12786: LD_EXP 54
12790: AND
12791: IFFALSE 13013
12793: GO 12795
12795: DISABLE
12796: LD_INT 0
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12804: LD_ADDR_VAR 0 6
12808: PUSH
12809: LD_INT 22
12811: PUSH
12812: LD_OWVAR 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: LD_INT 23
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// if not tmp then
12858: LD_VAR 0 6
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 13013
// s1 := rand ( 1 , 4 ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 4
12877: PPUSH
12878: CALL_OW 12
12882: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12883: LD_ADDR_VAR 0 4
12887: PUSH
12888: LD_VAR 0 6
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: CALL_OW 259
12906: ST_TO_ADDR
// if s1 = 1 then
12907: LD_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: EQUAL
12915: IFFALSE 12935
// s2 := rand ( 2 , 4 ) else
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_INT 2
12924: PPUSH
12925: LD_INT 4
12927: PPUSH
12928: CALL_OW 12
12932: ST_TO_ADDR
12933: GO 12943
// s2 := 1 ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12943: LD_ADDR_VAR 0 5
12947: PUSH
12948: LD_VAR 0 6
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: CALL_OW 259
12966: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12967: LD_VAR 0 6
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: LD_VAR 0 5
12985: PPUSH
12986: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12990: LD_VAR 0 6
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_VAR 0 4
13008: PPUSH
13009: CALL_OW 237
// end ;
13013: PPOPN 6
13015: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13016: LD_EXP 8
13020: PUSH
13021: LD_EXP 55
13025: AND
13026: IFFALSE 13105
13028: GO 13030
13030: DISABLE
13031: LD_INT 0
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 3
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// if not tmp then
13070: LD_VAR 0 1
13074: NOT
13075: IFFALSE 13079
// exit ;
13077: GO 13105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13079: LD_VAR 0 1
13083: PUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 12
13096: ARRAY
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 234
// end ;
13105: PPOPN 1
13107: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13108: LD_EXP 8
13112: PUSH
13113: LD_EXP 56
13117: AND
13118: IFFALSE 13230
13120: GO 13122
13122: DISABLE
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_OWVAR 2
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 27
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 30
13159: PUSH
13160: LD_INT 26
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 30
13169: PUSH
13170: LD_INT 28
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 2
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13230
// for i in tmp do
13201: LD_ADDR_VAR 0 1
13205: PUSH
13206: LD_VAR 0 2
13210: PUSH
13211: FOR_IN
13212: IFFALSE 13228
// SetLives ( i , 1 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 234
13226: GO 13211
13228: POP
13229: POP
// end ;
13230: PPOPN 2
13232: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13233: LD_EXP 8
13237: PUSH
13238: LD_EXP 57
13242: AND
13243: IFFALSE 13530
13245: GO 13247
13247: DISABLE
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
13252: PPUSH
// begin i := rand ( 1 , 7 ) ;
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 7
13263: PPUSH
13264: CALL_OW 12
13268: ST_TO_ADDR
// case i of 1 :
13269: LD_VAR 0 1
13273: PUSH
13274: LD_INT 1
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13292
13282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13283: LD_STRING earthquake(getX(game), 0, 32)
13285: PPUSH
13286: CALL_OW 559
13290: GO 13530
13292: LD_INT 2
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13314
13300: POP
// begin ToLua ( displayStucuk(); ) ;
13301: LD_STRING displayStucuk();
13303: PPUSH
13304: CALL_OW 559
// ResetFog ;
13308: CALL_OW 335
// end ; 3 :
13312: GO 13530
13314: LD_INT 3
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13426
13322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13323: LD_ADDR_VAR 0 2
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_OWVAR 2
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 69
13358: ST_TO_ADDR
// if not tmp then
13359: LD_VAR 0 2
13363: NOT
13364: IFFALSE 13368
// exit ;
13366: GO 13530
// un := tmp [ rand ( 1 , tmp ) ] ;
13368: LD_ADDR_VAR 0 3
13372: PUSH
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 1
13380: PPUSH
13381: LD_VAR 0 2
13385: PPUSH
13386: CALL_OW 12
13390: ARRAY
13391: ST_TO_ADDR
// if Crawls ( un ) then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 318
13401: IFFALSE 13412
// ComWalk ( un ) ;
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 8
13419: PPUSH
13420: CALL_OW 336
// end ; 4 :
13424: GO 13530
13426: LD_INT 4
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13508
13434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_OWVAR 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 29
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 69
13470: ST_TO_ADDR
// if not tmp then
13471: LD_VAR 0 2
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13480: LD_VAR 0 2
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13493: LD_VAR 0 2
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: CALL_OW 65
// end ; 5 .. 7 :
13506: GO 13530
13508: LD_INT 5
13510: DOUBLE
13511: GREATEREQUAL
13512: IFFALSE 13520
13514: LD_INT 7
13516: DOUBLE
13517: LESSEQUAL
13518: IFTRUE 13522
13520: GO 13529
13522: POP
// StreamSibBomb ; end ;
13523: CALL 9767 0 0
13527: GO 13530
13529: POP
// end ;
13530: PPOPN 3
13532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13533: LD_EXP 8
13537: PUSH
13538: LD_EXP 58
13542: AND
13543: IFFALSE 13699
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13553: LD_ADDR_VAR 0 2
13557: PUSH
13558: LD_INT 81
13560: PUSH
13561: LD_OWVAR 2
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 21
13585: PUSH
13586: LD_INT 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 69
13606: ST_TO_ADDR
// if not tmp then
13607: LD_VAR 0 2
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 13699
// p := 0 ;
13616: LD_ADDR_VAR 0 3
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// p := p + 1 ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 1
13643: PLUS
13644: ST_TO_ADDR
// for i in tmp do
13645: LD_ADDR_VAR 0 1
13649: PUSH
13650: LD_VAR 0 2
13654: PUSH
13655: FOR_IN
13656: IFFALSE 13687
// if GetLives ( i ) < 1000 then
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 256
13667: PUSH
13668: LD_INT 1000
13670: LESS
13671: IFFALSE 13685
// SetLives ( i , 1000 ) ;
13673: LD_VAR 0 1
13677: PPUSH
13678: LD_INT 1000
13680: PPUSH
13681: CALL_OW 234
13685: GO 13655
13687: POP
13688: POP
// until p > 20 ;
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 20
13696: GREATER
13697: IFFALSE 13624
// end ;
13699: PPOPN 3
13701: END
// every 0 0$1 trigger StreamModeActive and sTime do
13702: LD_EXP 8
13706: PUSH
13707: LD_EXP 59
13711: AND
13712: IFFALSE 13747
13714: GO 13716
13716: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13717: LD_INT 28
13719: PPUSH
13720: LD_OWVAR 2
13724: PPUSH
13725: LD_INT 2
13727: PPUSH
13728: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13732: LD_INT 30
13734: PPUSH
13735: LD_OWVAR 2
13739: PPUSH
13740: LD_INT 2
13742: PPUSH
13743: CALL_OW 322
// end ;
13747: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13748: LD_EXP 8
13752: PUSH
13753: LD_EXP 60
13757: AND
13758: IFFALSE 13879
13760: GO 13762
13762: DISABLE
13763: LD_INT 0
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13767: LD_ADDR_VAR 0 2
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 3
13796: PUSH
13797: LD_INT 23
13799: PUSH
13800: LD_INT 0
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: ST_TO_ADDR
// if not tmp then
13821: LD_VAR 0 2
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 13879
// for i in tmp do
13830: LD_ADDR_VAR 0 1
13834: PUSH
13835: LD_VAR 0 2
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13877
// begin if Crawls ( i ) then
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 318
13852: IFFALSE 13863
// ComWalk ( i ) ;
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 138
// SetClass ( i , 2 ) ;
13863: LD_VAR 0 1
13867: PPUSH
13868: LD_INT 2
13870: PPUSH
13871: CALL_OW 336
// end ;
13875: GO 13840
13877: POP
13878: POP
// end ;
13879: PPOPN 2
13881: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13882: LD_EXP 8
13886: PUSH
13887: LD_EXP 61
13891: AND
13892: IFFALSE 14180
13894: GO 13896
13896: DISABLE
13897: LD_INT 0
13899: PPUSH
13900: PPUSH
13901: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13902: LD_OWVAR 2
13906: PPUSH
13907: LD_INT 9
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13920: LD_INT 9
13922: PPUSH
13923: LD_OWVAR 2
13927: PPUSH
13928: CALL_OW 343
// uc_side := 9 ;
13932: LD_ADDR_OWVAR 20
13936: PUSH
13937: LD_INT 9
13939: ST_TO_ADDR
// uc_nation := 2 ;
13940: LD_ADDR_OWVAR 21
13944: PUSH
13945: LD_INT 2
13947: ST_TO_ADDR
// hc_name := Dark Warrior ;
13948: LD_ADDR_OWVAR 26
13952: PUSH
13953: LD_STRING Dark Warrior
13955: ST_TO_ADDR
// hc_gallery :=  ;
13956: LD_ADDR_OWVAR 33
13960: PUSH
13961: LD_STRING 
13963: ST_TO_ADDR
// hc_noskilllimit := true ;
13964: LD_ADDR_OWVAR 76
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13972: LD_ADDR_OWVAR 31
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 30
13985: PUSH
13986: LD_INT 30
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: ST_TO_ADDR
// un := CreateHuman ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: CALL_OW 44
14004: ST_TO_ADDR
// hc_noskilllimit := false ;
14005: LD_ADDR_OWVAR 76
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14013: LD_VAR 0 3
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 51
// ToLua ( playRanger() ) ;
14025: LD_STRING playRanger()
14027: PPUSH
14028: CALL_OW 559
// p := 0 ;
14032: LD_ADDR_VAR 0 2
14036: PUSH
14037: LD_INT 0
14039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14040: LD_INT 35
14042: PPUSH
14043: CALL_OW 67
// p := p + 1 ;
14047: LD_ADDR_VAR 0 2
14051: PUSH
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 1
14059: PLUS
14060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14061: LD_VAR 0 3
14065: PPUSH
14066: CALL_OW 256
14070: PUSH
14071: LD_INT 1000
14073: LESS
14074: IFFALSE 14088
// SetLives ( un , 1000 ) ;
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1000
14083: PPUSH
14084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14088: LD_VAR 0 3
14092: PPUSH
14093: LD_INT 81
14095: PUSH
14096: LD_OWVAR 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 91
14107: PUSH
14108: LD_VAR 0 3
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: PPUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: CALL_OW 74
14139: PPUSH
14140: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14144: LD_VAR 0 2
14148: PUSH
14149: LD_INT 80
14151: GREATER
14152: PUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: CALL_OW 301
14162: OR
14163: IFFALSE 14040
// if un then
14165: LD_VAR 0 3
14169: IFFALSE 14180
// RemoveUnit ( un ) ;
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 64
// end ;
14180: PPOPN 3
14182: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14183: LD_EXP 62
14187: IFFALSE 14303
14189: GO 14191
14191: DISABLE
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_INT 81
14204: PUSH
14205: LD_OWVAR 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14233: LD_STRING playComputer()
14235: PPUSH
14236: CALL_OW 559
// if not tmp then
14240: LD_VAR 0 2
14244: NOT
14245: IFFALSE 14249
// exit ;
14247: GO 14303
// for i in tmp do
14249: LD_ADDR_VAR 0 1
14253: PUSH
14254: LD_VAR 0 2
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14301
// for j := 1 to 4 do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: DOUBLE
14268: LD_INT 1
14270: DEC
14271: ST_TO_ADDR
14272: LD_INT 4
14274: PUSH
14275: FOR_TO
14276: IFFALSE 14297
// SetSkill ( i , j , 10 ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_INT 10
14290: PPUSH
14291: CALL_OW 237
14295: GO 14275
14297: POP
14298: POP
14299: GO 14259
14301: POP
14302: POP
// end ;
14303: PPOPN 3
14305: END
// every 0 0$1 trigger s30 do var i , tmp ;
14306: LD_EXP 63
14310: IFFALSE 14379
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_OWVAR 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PPUSH
14336: CALL_OW 69
14340: ST_TO_ADDR
// if not tmp then
14341: LD_VAR 0 2
14345: NOT
14346: IFFALSE 14350
// exit ;
14348: GO 14379
// for i in tmp do
14350: LD_ADDR_VAR 0 1
14354: PUSH
14355: LD_VAR 0 2
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14377
// SetLives ( i , 300 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_INT 300
14370: PPUSH
14371: CALL_OW 234
14375: GO 14360
14377: POP
14378: POP
// end ;
14379: PPOPN 2
14381: END
// every 0 0$1 trigger s60 do var i , tmp ;
14382: LD_EXP 64
14386: IFFALSE 14455
14388: GO 14390
14390: DISABLE
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_OWVAR 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: ST_TO_ADDR
// if not tmp then
14417: LD_VAR 0 2
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14455
// for i in tmp do
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 2
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14453
// SetLives ( i , 600 ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: LD_INT 600
14446: PPUSH
14447: CALL_OW 234
14451: GO 14436
14453: POP
14454: POP
// end ;
14455: PPOPN 2
14457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14458: LD_INT 0
14460: PPUSH
// case cmd of 301 :
14461: LD_VAR 0 1
14465: PUSH
14466: LD_INT 301
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14506
14474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14475: LD_VAR 0 6
14479: PPUSH
14480: LD_VAR 0 7
14484: PPUSH
14485: LD_VAR 0 8
14489: PPUSH
14490: LD_VAR 0 4
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: CALL 15715 0 5
14504: GO 14627
14506: LD_INT 302
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14551
14514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14515: LD_VAR 0 6
14519: PPUSH
14520: LD_VAR 0 7
14524: PPUSH
14525: LD_VAR 0 8
14529: PPUSH
14530: LD_VAR 0 9
14534: PPUSH
14535: LD_VAR 0 4
14539: PPUSH
14540: LD_VAR 0 5
14544: PPUSH
14545: CALL 15806 0 6
14549: GO 14627
14551: LD_INT 303
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14596
14559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14560: LD_VAR 0 6
14564: PPUSH
14565: LD_VAR 0 7
14569: PPUSH
14570: LD_VAR 0 8
14574: PPUSH
14575: LD_VAR 0 9
14579: PPUSH
14580: LD_VAR 0 4
14584: PPUSH
14585: LD_VAR 0 5
14589: PPUSH
14590: CALL 14632 0 6
14594: GO 14627
14596: LD_INT 304
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14626
14604: POP
// hHackTeleport ( unit , x , y ) ; end ;
14605: LD_VAR 0 2
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: LD_VAR 0 5
14619: PPUSH
14620: CALL 16399 0 3
14624: GO 14627
14626: POP
// end ;
14627: LD_VAR 0 12
14631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: LESS
14644: PUSH
14645: LD_VAR 0 1
14649: PUSH
14650: LD_INT 3
14652: GREATER
14653: OR
14654: PUSH
14655: LD_VAR 0 5
14659: PPUSH
14660: LD_VAR 0 6
14664: PPUSH
14665: CALL_OW 428
14669: OR
14670: IFFALSE 14674
// exit ;
14672: GO 15402
// uc_side := your_side ;
14674: LD_ADDR_OWVAR 20
14678: PUSH
14679: LD_OWVAR 2
14683: ST_TO_ADDR
// uc_nation := nation ;
14684: LD_ADDR_OWVAR 21
14688: PUSH
14689: LD_VAR 0 1
14693: ST_TO_ADDR
// bc_level = 1 ;
14694: LD_ADDR_OWVAR 43
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// case btype of 1 :
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 1
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14726
14715: POP
// bc_type := b_depot ; 2 :
14716: LD_ADDR_OWVAR 42
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
14724: GO 15346
14726: LD_INT 2
14728: DOUBLE
14729: EQUAL
14730: IFTRUE 14734
14732: GO 14745
14734: POP
// bc_type := b_warehouse ; 3 :
14735: LD_ADDR_OWVAR 42
14739: PUSH
14740: LD_INT 1
14742: ST_TO_ADDR
14743: GO 15346
14745: LD_INT 3
14747: DOUBLE
14748: EQUAL
14749: IFTRUE 14753
14751: GO 14764
14753: POP
// bc_type := b_lab ; 4 .. 9 :
14754: LD_ADDR_OWVAR 42
14758: PUSH
14759: LD_INT 6
14761: ST_TO_ADDR
14762: GO 15346
14764: LD_INT 4
14766: DOUBLE
14767: GREATEREQUAL
14768: IFFALSE 14776
14770: LD_INT 9
14772: DOUBLE
14773: LESSEQUAL
14774: IFTRUE 14778
14776: GO 14838
14778: POP
// begin bc_type := b_lab_half ;
14779: LD_ADDR_OWVAR 42
14783: PUSH
14784: LD_INT 7
14786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14787: LD_ADDR_OWVAR 44
14791: PUSH
14792: LD_INT 10
14794: PUSH
14795: LD_INT 11
14797: PUSH
14798: LD_INT 12
14800: PUSH
14801: LD_INT 15
14803: PUSH
14804: LD_INT 14
14806: PUSH
14807: LD_INT 13
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: LD_INT 3
14825: MINUS
14826: ARRAY
14827: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14828: LD_ADDR_OWVAR 45
14832: PUSH
14833: LD_INT 9
14835: ST_TO_ADDR
// end ; 10 .. 13 :
14836: GO 15346
14838: LD_INT 10
14840: DOUBLE
14841: GREATEREQUAL
14842: IFFALSE 14850
14844: LD_INT 13
14846: DOUBLE
14847: LESSEQUAL
14848: IFTRUE 14852
14850: GO 14929
14852: POP
// begin bc_type := b_lab_full ;
14853: LD_ADDR_OWVAR 42
14857: PUSH
14858: LD_INT 8
14860: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14861: LD_ADDR_OWVAR 44
14865: PUSH
14866: LD_INT 10
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: LD_INT 14
14874: PUSH
14875: LD_INT 13
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_VAR 0 2
14888: PUSH
14889: LD_INT 9
14891: MINUS
14892: ARRAY
14893: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14894: LD_ADDR_OWVAR 45
14898: PUSH
14899: LD_INT 11
14901: PUSH
14902: LD_INT 15
14904: PUSH
14905: LD_INT 12
14907: PUSH
14908: LD_INT 15
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: PUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 9
14924: MINUS
14925: ARRAY
14926: ST_TO_ADDR
// end ; 14 :
14927: GO 15346
14929: LD_INT 14
14931: DOUBLE
14932: EQUAL
14933: IFTRUE 14937
14935: GO 14948
14937: POP
// bc_type := b_workshop ; 15 :
14938: LD_ADDR_OWVAR 42
14942: PUSH
14943: LD_INT 2
14945: ST_TO_ADDR
14946: GO 15346
14948: LD_INT 15
14950: DOUBLE
14951: EQUAL
14952: IFTRUE 14956
14954: GO 14967
14956: POP
// bc_type := b_factory ; 16 :
14957: LD_ADDR_OWVAR 42
14961: PUSH
14962: LD_INT 3
14964: ST_TO_ADDR
14965: GO 15346
14967: LD_INT 16
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14975
14973: GO 14986
14975: POP
// bc_type := b_ext_gun ; 17 :
14976: LD_ADDR_OWVAR 42
14980: PUSH
14981: LD_INT 17
14983: ST_TO_ADDR
14984: GO 15346
14986: LD_INT 17
14988: DOUBLE
14989: EQUAL
14990: IFTRUE 14994
14992: GO 15022
14994: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14995: LD_ADDR_OWVAR 42
14999: PUSH
15000: LD_INT 19
15002: PUSH
15003: LD_INT 23
15005: PUSH
15006: LD_INT 19
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_VAR 0 1
15018: ARRAY
15019: ST_TO_ADDR
15020: GO 15346
15022: LD_INT 18
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15041
15030: POP
// bc_type := b_ext_radar ; 19 :
15031: LD_ADDR_OWVAR 42
15035: PUSH
15036: LD_INT 20
15038: ST_TO_ADDR
15039: GO 15346
15041: LD_INT 19
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15060
15049: POP
// bc_type := b_ext_radio ; 20 :
15050: LD_ADDR_OWVAR 42
15054: PUSH
15055: LD_INT 22
15057: ST_TO_ADDR
15058: GO 15346
15060: LD_INT 20
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15079
15068: POP
// bc_type := b_ext_siberium ; 21 :
15069: LD_ADDR_OWVAR 42
15073: PUSH
15074: LD_INT 21
15076: ST_TO_ADDR
15077: GO 15346
15079: LD_INT 21
15081: DOUBLE
15082: EQUAL
15083: IFTRUE 15087
15085: GO 15098
15087: POP
// bc_type := b_ext_computer ; 22 :
15088: LD_ADDR_OWVAR 42
15092: PUSH
15093: LD_INT 24
15095: ST_TO_ADDR
15096: GO 15346
15098: LD_INT 22
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15117
15106: POP
// bc_type := b_ext_track ; 23 :
15107: LD_ADDR_OWVAR 42
15111: PUSH
15112: LD_INT 16
15114: ST_TO_ADDR
15115: GO 15346
15117: LD_INT 23
15119: DOUBLE
15120: EQUAL
15121: IFTRUE 15125
15123: GO 15136
15125: POP
// bc_type := b_ext_laser ; 24 :
15126: LD_ADDR_OWVAR 42
15130: PUSH
15131: LD_INT 25
15133: ST_TO_ADDR
15134: GO 15346
15136: LD_INT 24
15138: DOUBLE
15139: EQUAL
15140: IFTRUE 15144
15142: GO 15155
15144: POP
// bc_type := b_control_tower ; 25 :
15145: LD_ADDR_OWVAR 42
15149: PUSH
15150: LD_INT 36
15152: ST_TO_ADDR
15153: GO 15346
15155: LD_INT 25
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15174
15163: POP
// bc_type := b_breastwork ; 26 :
15164: LD_ADDR_OWVAR 42
15168: PUSH
15169: LD_INT 31
15171: ST_TO_ADDR
15172: GO 15346
15174: LD_INT 26
15176: DOUBLE
15177: EQUAL
15178: IFTRUE 15182
15180: GO 15193
15182: POP
// bc_type := b_bunker ; 27 :
15183: LD_ADDR_OWVAR 42
15187: PUSH
15188: LD_INT 32
15190: ST_TO_ADDR
15191: GO 15346
15193: LD_INT 27
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 15212
15201: POP
// bc_type := b_turret ; 28 :
15202: LD_ADDR_OWVAR 42
15206: PUSH
15207: LD_INT 33
15209: ST_TO_ADDR
15210: GO 15346
15212: LD_INT 28
15214: DOUBLE
15215: EQUAL
15216: IFTRUE 15220
15218: GO 15231
15220: POP
// bc_type := b_armoury ; 29 :
15221: LD_ADDR_OWVAR 42
15225: PUSH
15226: LD_INT 4
15228: ST_TO_ADDR
15229: GO 15346
15231: LD_INT 29
15233: DOUBLE
15234: EQUAL
15235: IFTRUE 15239
15237: GO 15250
15239: POP
// bc_type := b_barracks ; 30 :
15240: LD_ADDR_OWVAR 42
15244: PUSH
15245: LD_INT 5
15247: ST_TO_ADDR
15248: GO 15346
15250: LD_INT 30
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15258
15256: GO 15269
15258: POP
// bc_type := b_solar_power ; 31 :
15259: LD_ADDR_OWVAR 42
15263: PUSH
15264: LD_INT 27
15266: ST_TO_ADDR
15267: GO 15346
15269: LD_INT 31
15271: DOUBLE
15272: EQUAL
15273: IFTRUE 15277
15275: GO 15288
15277: POP
// bc_type := b_oil_power ; 32 :
15278: LD_ADDR_OWVAR 42
15282: PUSH
15283: LD_INT 26
15285: ST_TO_ADDR
15286: GO 15346
15288: LD_INT 32
15290: DOUBLE
15291: EQUAL
15292: IFTRUE 15296
15294: GO 15307
15296: POP
// bc_type := b_siberite_power ; 33 :
15297: LD_ADDR_OWVAR 42
15301: PUSH
15302: LD_INT 28
15304: ST_TO_ADDR
15305: GO 15346
15307: LD_INT 33
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15326
15315: POP
// bc_type := b_oil_mine ; 34 :
15316: LD_ADDR_OWVAR 42
15320: PUSH
15321: LD_INT 29
15323: ST_TO_ADDR
15324: GO 15346
15326: LD_INT 34
15328: DOUBLE
15329: EQUAL
15330: IFTRUE 15334
15332: GO 15345
15334: POP
// bc_type := b_siberite_mine ; end ;
15335: LD_ADDR_OWVAR 42
15339: PUSH
15340: LD_INT 30
15342: ST_TO_ADDR
15343: GO 15346
15345: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15346: LD_ADDR_VAR 0 8
15350: PUSH
15351: LD_VAR 0 5
15355: PPUSH
15356: LD_VAR 0 6
15360: PPUSH
15361: LD_VAR 0 3
15365: PPUSH
15366: CALL_OW 47
15370: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15371: LD_OWVAR 42
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 33
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: IN
15386: IFFALSE 15402
// PlaceWeaponTurret ( b , weapon ) ;
15388: LD_VAR 0 8
15392: PPUSH
15393: LD_VAR 0 4
15397: PPUSH
15398: CALL_OW 431
// end ;
15402: LD_VAR 0 7
15406: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15407: LD_INT 0
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15413: LD_ADDR_VAR 0 4
15417: PUSH
15418: LD_INT 22
15420: PUSH
15421: LD_OWVAR 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: ST_TO_ADDR
// if not tmp then
15467: LD_VAR 0 4
15471: NOT
15472: IFFALSE 15476
// exit ;
15474: GO 15535
// for i in tmp do
15476: LD_ADDR_VAR 0 2
15480: PUSH
15481: LD_VAR 0 4
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15533
// for j = 1 to 3 do
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 3
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15529
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: CALL_OW 274
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 99999
15522: PPUSH
15523: CALL_OW 277
15527: GO 15502
15529: POP
15530: POP
15531: GO 15486
15533: POP
15534: POP
// end ;
15535: LD_VAR 0 1
15539: RET
// export function hHackSetLevel10 ; var i , j ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15545: LD_ADDR_VAR 0 2
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PUSH
15565: FOR_IN
15566: IFFALSE 15618
// if IsSelected ( i ) then
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL_OW 306
15577: IFFALSE 15616
// begin for j := 1 to 4 do
15579: LD_ADDR_VAR 0 3
15583: PUSH
15584: DOUBLE
15585: LD_INT 1
15587: DEC
15588: ST_TO_ADDR
15589: LD_INT 4
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15614
// SetSkill ( i , j , 10 ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_VAR 0 3
15604: PPUSH
15605: LD_INT 10
15607: PPUSH
15608: CALL_OW 237
15612: GO 15592
15614: POP
15615: POP
// end ;
15616: GO 15565
15618: POP
15619: POP
// end ;
15620: LD_VAR 0 1
15624: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
15629: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15708
// begin for j := 1 to 4 do
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: DOUBLE
15675: LD_INT 1
15677: DEC
15678: ST_TO_ADDR
15679: LD_INT 4
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15704
// SetSkill ( i , j , 10 ) ;
15685: LD_VAR 0 2
15689: PPUSH
15690: LD_VAR 0 3
15694: PPUSH
15695: LD_INT 10
15697: PPUSH
15698: CALL_OW 237
15702: GO 15682
15704: POP
15705: POP
// end ;
15706: GO 15666
15708: POP
15709: POP
// end ;
15710: LD_VAR 0 1
15714: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15715: LD_INT 0
15717: PPUSH
// uc_side := your_side ;
15718: LD_ADDR_OWVAR 20
15722: PUSH
15723: LD_OWVAR 2
15727: ST_TO_ADDR
// uc_nation := nation ;
15728: LD_ADDR_OWVAR 21
15732: PUSH
15733: LD_VAR 0 1
15737: ST_TO_ADDR
// InitHc ;
15738: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15742: LD_INT 0
15744: PPUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_VAR 0 5
15768: PPUSH
15769: CALL_OW 428
15773: PUSH
15774: LD_INT 0
15776: EQUAL
15777: IFFALSE 15801
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15779: CALL_OW 44
15783: PPUSH
15784: LD_VAR 0 4
15788: PPUSH
15789: LD_VAR 0 5
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 48
// end ;
15801: LD_VAR 0 6
15805: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15806: LD_INT 0
15808: PPUSH
15809: PPUSH
// uc_side := your_side ;
15810: LD_ADDR_OWVAR 20
15814: PUSH
15815: LD_OWVAR 2
15819: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 4
15836: PUSH
15837: LD_INT 5
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: IN
15847: IFFALSE 15859
// uc_nation := nation_american else
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
15857: GO 15902
// if chassis in [ 11 , 12 , 13 , 14 ] then
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 13
15872: PUSH
15873: LD_INT 14
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: IN
15882: IFFALSE 15894
// uc_nation := nation_arabian else
15884: LD_ADDR_OWVAR 21
15888: PUSH
15889: LD_INT 2
15891: ST_TO_ADDR
15892: GO 15902
// uc_nation := nation_russian ;
15894: LD_ADDR_OWVAR 21
15898: PUSH
15899: LD_INT 3
15901: ST_TO_ADDR
// vc_chassis := chassis ;
15902: LD_ADDR_OWVAR 37
15906: PUSH
15907: LD_VAR 0 1
15911: ST_TO_ADDR
// vc_engine := engine ;
15912: LD_ADDR_OWVAR 39
15916: PUSH
15917: LD_VAR 0 2
15921: ST_TO_ADDR
// vc_control := control ;
15922: LD_ADDR_OWVAR 38
15926: PUSH
15927: LD_VAR 0 3
15931: ST_TO_ADDR
// vc_weapon := weapon ;
15932: LD_ADDR_OWVAR 40
15936: PUSH
15937: LD_VAR 0 4
15941: ST_TO_ADDR
// un := CreateVehicle ;
15942: LD_ADDR_VAR 0 8
15946: PUSH
15947: CALL_OW 45
15951: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15952: LD_VAR 0 8
15956: PPUSH
15957: LD_INT 0
15959: PPUSH
15960: LD_INT 5
15962: PPUSH
15963: CALL_OW 12
15967: PPUSH
15968: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15972: LD_VAR 0 8
15976: PPUSH
15977: LD_VAR 0 5
15981: PPUSH
15982: LD_VAR 0 6
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 48
// end ;
15994: LD_VAR 0 7
15998: RET
// export hInvincible ; every 1 do
15999: GO 16001
16001: DISABLE
// hInvincible := [ ] ;
16002: LD_ADDR_EXP 65
16006: PUSH
16007: EMPTY
16008: ST_TO_ADDR
16009: END
// every 10 do var i ;
16010: GO 16012
16012: DISABLE
16013: LD_INT 0
16015: PPUSH
// begin enable ;
16016: ENABLE
// if not hInvincible then
16017: LD_EXP 65
16021: NOT
16022: IFFALSE 16026
// exit ;
16024: GO 16070
// for i in hInvincible do
16026: LD_ADDR_VAR 0 1
16030: PUSH
16031: LD_EXP 65
16035: PUSH
16036: FOR_IN
16037: IFFALSE 16068
// if GetLives ( i ) < 1000 then
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 256
16048: PUSH
16049: LD_INT 1000
16051: LESS
16052: IFFALSE 16066
// SetLives ( i , 1000 ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: LD_INT 1000
16061: PPUSH
16062: CALL_OW 234
16066: GO 16036
16068: POP
16069: POP
// end ;
16070: PPOPN 1
16072: END
// export function hHackInvincible ; var i ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 21
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: PUSH
16115: FOR_IN
16116: IFFALSE 16177
// if IsSelected ( i ) then
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 306
16127: IFFALSE 16175
// begin if i in hInvincible then
16129: LD_VAR 0 2
16133: PUSH
16134: LD_EXP 65
16138: IN
16139: IFFALSE 16159
// hInvincible := hInvincible diff i else
16141: LD_ADDR_EXP 65
16145: PUSH
16146: LD_EXP 65
16150: PUSH
16151: LD_VAR 0 2
16155: DIFF
16156: ST_TO_ADDR
16157: GO 16175
// hInvincible := hInvincible union i ;
16159: LD_ADDR_EXP 65
16163: PUSH
16164: LD_EXP 65
16168: PUSH
16169: LD_VAR 0 2
16173: UNION
16174: ST_TO_ADDR
// end ;
16175: GO 16115
16177: POP
16178: POP
// end ;
16179: LD_VAR 0 1
16183: RET
// export function hHackInvisible ; var i , j ; begin
16184: LD_INT 0
16186: PPUSH
16187: PPUSH
16188: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: LD_INT 21
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 69
16208: PUSH
16209: FOR_IN
16210: IFFALSE 16234
// if IsSelected ( i ) then
16212: LD_VAR 0 2
16216: PPUSH
16217: CALL_OW 306
16221: IFFALSE 16232
// ComForceInvisible ( i ) ;
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 496
16232: GO 16209
16234: POP
16235: POP
// end ;
16236: LD_VAR 0 1
16240: RET
// export function hHackChangeYourSide ; begin
16241: LD_INT 0
16243: PPUSH
// if your_side = 8 then
16244: LD_OWVAR 2
16248: PUSH
16249: LD_INT 8
16251: EQUAL
16252: IFFALSE 16264
// your_side := 0 else
16254: LD_ADDR_OWVAR 2
16258: PUSH
16259: LD_INT 0
16261: ST_TO_ADDR
16262: GO 16278
// your_side := your_side + 1 ;
16264: LD_ADDR_OWVAR 2
16268: PUSH
16269: LD_OWVAR 2
16273: PUSH
16274: LD_INT 1
16276: PLUS
16277: ST_TO_ADDR
// end ;
16278: LD_VAR 0 1
16282: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16283: LD_INT 0
16285: PPUSH
16286: PPUSH
16287: PPUSH
// for i in all_units do
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_OWVAR 3
16297: PUSH
16298: FOR_IN
16299: IFFALSE 16377
// if IsSelected ( i ) then
16301: LD_VAR 0 2
16305: PPUSH
16306: CALL_OW 306
16310: IFFALSE 16375
// begin j := GetSide ( i ) ;
16312: LD_ADDR_VAR 0 3
16316: PUSH
16317: LD_VAR 0 2
16321: PPUSH
16322: CALL_OW 255
16326: ST_TO_ADDR
// if j = 8 then
16327: LD_VAR 0 3
16331: PUSH
16332: LD_INT 8
16334: EQUAL
16335: IFFALSE 16347
// j := 0 else
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
16345: GO 16361
// j := j + 1 ;
16347: LD_ADDR_VAR 0 3
16351: PUSH
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 1
16359: PLUS
16360: ST_TO_ADDR
// SetSide ( i , j ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: LD_VAR 0 3
16370: PPUSH
16371: CALL_OW 235
// end ;
16375: GO 16298
16377: POP
16378: POP
// end ;
16379: LD_VAR 0 1
16383: RET
// export function hHackFog ; begin
16384: LD_INT 0
16386: PPUSH
// FogOff ( true ) ;
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 344
// end ;
16394: LD_VAR 0 1
16398: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16399: LD_INT 0
16401: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 483
// CenterOnXY ( x , y ) ;
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: CALL_OW 84
// end ;
16441: LD_VAR 0 4
16445: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16450: LD_VAR 0 1
16454: NOT
16455: PUSH
16456: LD_VAR 0 2
16460: PPUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: CALL_OW 488
16470: NOT
16471: OR
16472: PUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 266
16482: PUSH
16483: LD_INT 3
16485: NONEQUAL
16486: PUSH
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 247
16496: PUSH
16497: LD_INT 1
16499: EQUAL
16500: NOT
16501: AND
16502: OR
16503: IFFALSE 16507
// exit ;
16505: GO 16656
// if GetType ( factory ) = unit_human then
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 247
16516: PUSH
16517: LD_INT 1
16519: EQUAL
16520: IFFALSE 16537
// factory := IsInUnit ( factory ) ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 310
16536: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 266
16546: PUSH
16547: LD_INT 3
16549: NONEQUAL
16550: IFFALSE 16554
// exit ;
16552: GO 16656
// if HexInfo ( x , y ) = factory then
16554: LD_VAR 0 2
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: CALL_OW 428
16568: PUSH
16569: LD_VAR 0 1
16573: EQUAL
16574: IFFALSE 16601
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16576: LD_ADDR_EXP 66
16580: PUSH
16581: LD_EXP 66
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 0
16593: PPUSH
16594: CALL_OW 1
16598: ST_TO_ADDR
16599: GO 16652
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16601: LD_ADDR_EXP 66
16605: PUSH
16606: LD_EXP 66
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 255
16625: PUSH
16626: LD_VAR 0 1
16630: PUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_VAR 0 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 1
16651: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16652: CALL 16661 0 0
// end ;
16656: LD_VAR 0 4
16660: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
16665: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16666: LD_STRING resetFactoryWaypoint();
16668: PPUSH
16669: CALL_OW 559
// if factoryWaypoints then
16673: LD_EXP 66
16677: IFFALSE 16803
// begin list := PrepareArray ( factoryWaypoints ) ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_EXP 66
16688: PPUSH
16689: CALL 63288 0 1
16693: ST_TO_ADDR
// for i := 1 to list do
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: DOUBLE
16700: LD_INT 1
16702: DEC
16703: ST_TO_ADDR
16704: LD_VAR 0 3
16708: PUSH
16709: FOR_TO
16710: IFFALSE 16801
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16712: LD_STRING setFactoryWaypointXY(
16714: PUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_VAR 0 2
16724: ARRAY
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: STR
16730: PUSH
16731: LD_STRING ,
16733: STR
16734: PUSH
16735: LD_VAR 0 3
16739: PUSH
16740: LD_VAR 0 2
16744: ARRAY
16745: PUSH
16746: LD_INT 2
16748: ARRAY
16749: STR
16750: PUSH
16751: LD_STRING ,
16753: STR
16754: PUSH
16755: LD_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: ARRAY
16765: PUSH
16766: LD_INT 3
16768: ARRAY
16769: STR
16770: PUSH
16771: LD_STRING ,
16773: STR
16774: PUSH
16775: LD_VAR 0 3
16779: PUSH
16780: LD_VAR 0 2
16784: ARRAY
16785: PUSH
16786: LD_INT 4
16788: ARRAY
16789: STR
16790: PUSH
16791: LD_STRING )
16793: STR
16794: PPUSH
16795: CALL_OW 559
16799: GO 16709
16801: POP
16802: POP
// end ; end ;
16803: LD_VAR 0 1
16807: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16808: LD_INT 0
16810: PPUSH
// if HexInfo ( x , y ) = warehouse then
16811: LD_VAR 0 2
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: CALL_OW 428
16825: PUSH
16826: LD_VAR 0 1
16830: EQUAL
16831: IFFALSE 16858
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16833: LD_ADDR_EXP 67
16837: PUSH
16838: LD_EXP 67
16842: PPUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: LD_INT 0
16850: PPUSH
16851: CALL_OW 1
16855: ST_TO_ADDR
16856: GO 16909
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16858: LD_ADDR_EXP 67
16862: PUSH
16863: LD_EXP 67
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 255
16882: PUSH
16883: LD_VAR 0 1
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_VAR 0 3
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 1
16908: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16909: CALL 16918 0 0
// end ;
16913: LD_VAR 0 4
16917: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
16922: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16923: LD_STRING resetWarehouseGatheringPoints();
16925: PPUSH
16926: CALL_OW 559
// if warehouseGatheringPoints then
16930: LD_EXP 67
16934: IFFALSE 17060
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16936: LD_ADDR_VAR 0 3
16940: PUSH
16941: LD_EXP 67
16945: PPUSH
16946: CALL 63288 0 1
16950: ST_TO_ADDR
// for i := 1 to list do
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: DOUBLE
16957: LD_INT 1
16959: DEC
16960: ST_TO_ADDR
16961: LD_VAR 0 3
16965: PUSH
16966: FOR_TO
16967: IFFALSE 17058
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16969: LD_STRING setWarehouseGatheringPointXY(
16971: PUSH
16972: LD_VAR 0 3
16976: PUSH
16977: LD_VAR 0 2
16981: ARRAY
16982: PUSH
16983: LD_INT 1
16985: ARRAY
16986: STR
16987: PUSH
16988: LD_STRING ,
16990: STR
16991: PUSH
16992: LD_VAR 0 3
16996: PUSH
16997: LD_VAR 0 2
17001: ARRAY
17002: PUSH
17003: LD_INT 2
17005: ARRAY
17006: STR
17007: PUSH
17008: LD_STRING ,
17010: STR
17011: PUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_VAR 0 2
17021: ARRAY
17022: PUSH
17023: LD_INT 3
17025: ARRAY
17026: STR
17027: PUSH
17028: LD_STRING ,
17030: STR
17031: PUSH
17032: LD_VAR 0 3
17036: PUSH
17037: LD_VAR 0 2
17041: ARRAY
17042: PUSH
17043: LD_INT 4
17045: ARRAY
17046: STR
17047: PUSH
17048: LD_STRING )
17050: STR
17051: PPUSH
17052: CALL_OW 559
17056: GO 16966
17058: POP
17059: POP
// end ; end ;
17060: LD_VAR 0 1
17064: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17065: LD_EXP 67
17069: IFFALSE 17754
17071: GO 17073
17073: DISABLE
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
// begin enable ;
17085: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17086: LD_ADDR_VAR 0 3
17090: PUSH
17091: LD_EXP 67
17095: PPUSH
17096: CALL 63288 0 1
17100: ST_TO_ADDR
// if not list then
17101: LD_VAR 0 3
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17754
// for i := 1 to list do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_VAR 0 3
17124: PUSH
17125: FOR_TO
17126: IFFALSE 17752
// begin depot := list [ i ] [ 2 ] ;
17128: LD_ADDR_VAR 0 8
17132: PUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_VAR 0 1
17142: ARRAY
17143: PUSH
17144: LD_INT 2
17146: ARRAY
17147: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17148: LD_ADDR_VAR 0 5
17152: PUSH
17153: LD_VAR 0 3
17157: PUSH
17158: LD_VAR 0 1
17162: ARRAY
17163: PUSH
17164: LD_INT 1
17166: ARRAY
17167: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17168: LD_VAR 0 8
17172: PPUSH
17173: CALL_OW 301
17177: PUSH
17178: LD_VAR 0 5
17182: PUSH
17183: LD_VAR 0 8
17187: PPUSH
17188: CALL_OW 255
17192: NONEQUAL
17193: OR
17194: IFFALSE 17223
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17196: LD_ADDR_EXP 67
17200: PUSH
17201: LD_EXP 67
17205: PPUSH
17206: LD_VAR 0 8
17210: PPUSH
17211: LD_INT 0
17213: PPUSH
17214: CALL_OW 1
17218: ST_TO_ADDR
// exit ;
17219: POP
17220: POP
17221: GO 17754
// end ; x := list [ i ] [ 3 ] ;
17223: LD_ADDR_VAR 0 6
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 1
17237: ARRAY
17238: PUSH
17239: LD_INT 3
17241: ARRAY
17242: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17243: LD_ADDR_VAR 0 7
17247: PUSH
17248: LD_VAR 0 3
17252: PUSH
17253: LD_VAR 0 1
17257: ARRAY
17258: PUSH
17259: LD_INT 4
17261: ARRAY
17262: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17263: LD_ADDR_VAR 0 9
17267: PUSH
17268: LD_VAR 0 6
17272: PPUSH
17273: LD_VAR 0 7
17277: PPUSH
17278: LD_INT 16
17280: PPUSH
17281: CALL 61876 0 3
17285: ST_TO_ADDR
// if not cratesNearbyPoint then
17286: LD_VAR 0 9
17290: NOT
17291: IFFALSE 17297
// exit ;
17293: POP
17294: POP
17295: GO 17754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17297: LD_ADDR_VAR 0 4
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_VAR 0 5
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 60
17319: PUSH
17320: EMPTY
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 91
17329: PUSH
17330: LD_VAR 0 8
17334: PUSH
17335: LD_INT 6
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 25
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 25
17358: PUSH
17359: LD_INT 16
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: PUSH
17382: LD_VAR 0 8
17386: PPUSH
17387: CALL_OW 313
17391: PPUSH
17392: LD_INT 3
17394: PUSH
17395: LD_INT 60
17397: PUSH
17398: EMPTY
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 25
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 16
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 72
17441: UNION
17442: ST_TO_ADDR
// if tmp then
17443: LD_VAR 0 4
17447: IFFALSE 17527
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17449: LD_ADDR_VAR 0 4
17453: PUSH
17454: LD_VAR 0 4
17458: PPUSH
17459: LD_INT 3
17461: PPUSH
17462: CALL 59845 0 2
17466: ST_TO_ADDR
// for j in tmp do
17467: LD_ADDR_VAR 0 2
17471: PUSH
17472: LD_VAR 0 4
17476: PUSH
17477: FOR_IN
17478: IFFALSE 17521
// begin if IsInUnit ( j ) then
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 310
17489: IFFALSE 17500
// ComExit ( j ) ;
17491: LD_VAR 0 2
17495: PPUSH
17496: CALL 59928 0 1
// AddComCollect ( j , x , y ) ;
17500: LD_VAR 0 2
17504: PPUSH
17505: LD_VAR 0 6
17509: PPUSH
17510: LD_VAR 0 7
17514: PPUSH
17515: CALL_OW 177
// end ;
17519: GO 17477
17521: POP
17522: POP
// exit ;
17523: POP
17524: POP
17525: GO 17754
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17527: LD_ADDR_VAR 0 4
17531: PUSH
17532: LD_INT 22
17534: PUSH
17535: LD_VAR 0 5
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 91
17546: PUSH
17547: LD_VAR 0 8
17551: PUSH
17552: LD_INT 8
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 34
17565: PUSH
17566: LD_INT 12
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 34
17575: PUSH
17576: LD_INT 51
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 34
17585: PUSH
17586: LD_INT 32
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 34
17595: PUSH
17596: LD_INT 89
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if tmp then
17620: LD_VAR 0 4
17624: IFFALSE 17750
// begin for j in tmp do
17626: LD_ADDR_VAR 0 2
17630: PUSH
17631: LD_VAR 0 4
17635: PUSH
17636: FOR_IN
17637: IFFALSE 17748
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17639: LD_VAR 0 2
17643: PPUSH
17644: CALL_OW 262
17648: PUSH
17649: LD_INT 3
17651: EQUAL
17652: PUSH
17653: LD_VAR 0 2
17657: PPUSH
17658: CALL_OW 261
17662: PUSH
17663: LD_INT 20
17665: GREATER
17666: OR
17667: PUSH
17668: LD_VAR 0 2
17672: PPUSH
17673: CALL_OW 314
17677: NOT
17678: AND
17679: PUSH
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 263
17689: PUSH
17690: LD_INT 1
17692: NONEQUAL
17693: PUSH
17694: LD_VAR 0 2
17698: PPUSH
17699: CALL_OW 311
17703: OR
17704: AND
17705: IFFALSE 17746
// begin ComCollect ( j , x , y ) ;
17707: LD_VAR 0 2
17711: PPUSH
17712: LD_VAR 0 6
17716: PPUSH
17717: LD_VAR 0 7
17721: PPUSH
17722: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17726: LD_VAR 0 2
17730: PPUSH
17731: LD_VAR 0 8
17735: PPUSH
17736: CALL_OW 172
// exit ;
17740: POP
17741: POP
17742: POP
17743: POP
17744: GO 17754
// end ;
17746: GO 17636
17748: POP
17749: POP
// end ; end ;
17750: GO 17125
17752: POP
17753: POP
// end ; end_of_file
17754: PPOPN 9
17756: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 264
17772: PUSH
17773: LD_INT 91
17775: EQUAL
17776: IFFALSE 17848
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17778: LD_INT 68
17780: PPUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 255
17790: PPUSH
17791: CALL_OW 321
17795: PUSH
17796: LD_INT 2
17798: EQUAL
17799: IFFALSE 17811
// eff := 70 else
17801: LD_ADDR_VAR 0 4
17805: PUSH
17806: LD_INT 70
17808: ST_TO_ADDR
17809: GO 17819
// eff := 30 ;
17811: LD_ADDR_VAR 0 4
17815: PUSH
17816: LD_INT 30
17818: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 250
17828: PPUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 251
17838: PPUSH
17839: LD_VAR 0 4
17843: PPUSH
17844: CALL_OW 495
// end ; end ;
17848: LD_VAR 0 2
17852: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17853: LD_INT 0
17855: PPUSH
// end ;
17856: LD_VAR 0 4
17860: RET
// export function SOS_Command ( cmd ) ; begin
17861: LD_INT 0
17863: PPUSH
// end ;
17864: LD_VAR 0 2
17868: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17869: LD_INT 0
17871: PPUSH
// end ;
17872: LD_VAR 0 6
17876: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17877: LD_INT 0
17879: PPUSH
17880: PPUSH
// if not vehicle or not factory then
17881: LD_VAR 0 1
17885: NOT
17886: PUSH
17887: LD_VAR 0 2
17891: NOT
17892: OR
17893: IFFALSE 17897
// exit ;
17895: GO 18128
// if factoryWaypoints >= factory then
17897: LD_EXP 66
17901: PUSH
17902: LD_VAR 0 2
17906: GREATEREQUAL
17907: IFFALSE 18128
// if factoryWaypoints [ factory ] then
17909: LD_EXP 66
17913: PUSH
17914: LD_VAR 0 2
17918: ARRAY
17919: IFFALSE 18128
// begin if GetControl ( vehicle ) = control_manual then
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 263
17930: PUSH
17931: LD_INT 1
17933: EQUAL
17934: IFFALSE 18015
// begin driver := IsDrivenBy ( vehicle ) ;
17936: LD_ADDR_VAR 0 4
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 311
17950: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17951: LD_VAR 0 4
17955: PPUSH
17956: LD_EXP 66
17960: PUSH
17961: LD_VAR 0 2
17965: ARRAY
17966: PUSH
17967: LD_INT 3
17969: ARRAY
17970: PPUSH
17971: LD_EXP 66
17975: PUSH
17976: LD_VAR 0 2
17980: ARRAY
17981: PUSH
17982: LD_INT 4
17984: ARRAY
17985: PPUSH
17986: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17990: LD_VAR 0 4
17994: PPUSH
17995: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17999: LD_VAR 0 4
18003: PPUSH
18004: LD_VAR 0 2
18008: PPUSH
18009: CALL_OW 180
// end else
18013: GO 18128
// if GetControl ( vehicle ) = control_remote then
18015: LD_VAR 0 1
18019: PPUSH
18020: CALL_OW 263
18024: PUSH
18025: LD_INT 2
18027: EQUAL
18028: IFFALSE 18089
// begin wait ( 0 0$2 ) ;
18030: LD_INT 70
18032: PPUSH
18033: CALL_OW 67
// if Connect ( vehicle ) then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL 30149 0 1
18046: IFFALSE 18087
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_EXP 66
18057: PUSH
18058: LD_VAR 0 2
18062: ARRAY
18063: PUSH
18064: LD_INT 3
18066: ARRAY
18067: PPUSH
18068: LD_EXP 66
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PUSH
18079: LD_INT 4
18081: ARRAY
18082: PPUSH
18083: CALL_OW 171
// end else
18087: GO 18128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18089: LD_VAR 0 1
18093: PPUSH
18094: LD_EXP 66
18098: PUSH
18099: LD_VAR 0 2
18103: ARRAY
18104: PUSH
18105: LD_INT 3
18107: ARRAY
18108: PPUSH
18109: LD_EXP 66
18113: PUSH
18114: LD_VAR 0 2
18118: ARRAY
18119: PUSH
18120: LD_INT 4
18122: ARRAY
18123: PPUSH
18124: CALL_OW 171
// end ; end ;
18128: LD_VAR 0 3
18132: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18133: LD_INT 0
18135: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18136: LD_VAR 0 1
18140: PUSH
18141: LD_INT 250
18143: EQUAL
18144: PUSH
18145: LD_VAR 0 2
18149: PPUSH
18150: CALL_OW 264
18154: PUSH
18155: LD_INT 81
18157: EQUAL
18158: AND
18159: IFFALSE 18180
// MinerPlaceMine ( unit , x , y ) ;
18161: LD_VAR 0 2
18165: PPUSH
18166: LD_VAR 0 4
18170: PPUSH
18171: LD_VAR 0 5
18175: PPUSH
18176: CALL 20565 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18180: LD_VAR 0 1
18184: PUSH
18185: LD_INT 251
18187: EQUAL
18188: PUSH
18189: LD_VAR 0 2
18193: PPUSH
18194: CALL_OW 264
18198: PUSH
18199: LD_INT 81
18201: EQUAL
18202: AND
18203: IFFALSE 18224
// MinerDetonateMine ( unit , x , y ) ;
18205: LD_VAR 0 2
18209: PPUSH
18210: LD_VAR 0 4
18214: PPUSH
18215: LD_VAR 0 5
18219: PPUSH
18220: CALL 20840 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 252
18231: EQUAL
18232: PUSH
18233: LD_VAR 0 2
18237: PPUSH
18238: CALL_OW 264
18242: PUSH
18243: LD_INT 81
18245: EQUAL
18246: AND
18247: IFFALSE 18268
// MinerCreateMinefield ( unit , x , y ) ;
18249: LD_VAR 0 2
18253: PPUSH
18254: LD_VAR 0 4
18258: PPUSH
18259: LD_VAR 0 5
18263: PPUSH
18264: CALL 21257 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 253
18275: EQUAL
18276: PUSH
18277: LD_VAR 0 2
18281: PPUSH
18282: CALL_OW 257
18286: PUSH
18287: LD_INT 5
18289: EQUAL
18290: AND
18291: IFFALSE 18312
// ComBinocular ( unit , x , y ) ;
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_VAR 0 4
18302: PPUSH
18303: LD_VAR 0 5
18307: PPUSH
18308: CALL 21626 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_INT 254
18319: EQUAL
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: CALL_OW 264
18330: PUSH
18331: LD_INT 99
18333: EQUAL
18334: AND
18335: PUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: CALL_OW 263
18345: PUSH
18346: LD_INT 3
18348: EQUAL
18349: AND
18350: IFFALSE 18366
// HackDestroyVehicle ( unit , selectedUnit ) ;
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: CALL 19929 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 255
18373: EQUAL
18374: PUSH
18375: LD_VAR 0 2
18379: PPUSH
18380: CALL_OW 264
18384: PUSH
18385: LD_INT 14
18387: PUSH
18388: LD_INT 53
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: IN
18395: AND
18396: PUSH
18397: LD_VAR 0 4
18401: PPUSH
18402: LD_VAR 0 5
18406: PPUSH
18407: CALL_OW 488
18411: AND
18412: IFFALSE 18436
// CutTreeXYR ( unit , x , y , 12 ) ;
18414: LD_VAR 0 2
18418: PPUSH
18419: LD_VAR 0 4
18423: PPUSH
18424: LD_VAR 0 5
18428: PPUSH
18429: LD_INT 12
18431: PPUSH
18432: CALL 18499 0 4
// if cmd = 256 then
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 256
18443: EQUAL
18444: IFFALSE 18465
// SetFactoryWaypoint ( unit , x , y ) ;
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 4
18455: PPUSH
18456: LD_VAR 0 5
18460: PPUSH
18461: CALL 16446 0 3
// if cmd = 257 then
18465: LD_VAR 0 1
18469: PUSH
18470: LD_INT 257
18472: EQUAL
18473: IFFALSE 18494
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18475: LD_VAR 0 2
18479: PPUSH
18480: LD_VAR 0 4
18484: PPUSH
18485: LD_VAR 0 5
18489: PPUSH
18490: CALL 16808 0 3
// end ;
18494: LD_VAR 0 6
18498: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18499: LD_INT 0
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18510: LD_VAR 0 1
18514: NOT
18515: PUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: CALL_OW 488
18530: NOT
18531: OR
18532: PUSH
18533: LD_VAR 0 4
18537: NOT
18538: OR
18539: IFFALSE 18543
// exit ;
18541: GO 18883
// list := [ ] ;
18543: LD_ADDR_VAR 0 13
18547: PUSH
18548: EMPTY
18549: ST_TO_ADDR
// if x - r < 0 then
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 4
18559: MINUS
18560: PUSH
18561: LD_INT 0
18563: LESS
18564: IFFALSE 18576
// min_x := 0 else
18566: LD_ADDR_VAR 0 7
18570: PUSH
18571: LD_INT 0
18573: ST_TO_ADDR
18574: GO 18592
// min_x := x - r ;
18576: LD_ADDR_VAR 0 7
18580: PUSH
18581: LD_VAR 0 2
18585: PUSH
18586: LD_VAR 0 4
18590: MINUS
18591: ST_TO_ADDR
// if y - r < 0 then
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 4
18601: MINUS
18602: PUSH
18603: LD_INT 0
18605: LESS
18606: IFFALSE 18618
// min_y := 0 else
18608: LD_ADDR_VAR 0 8
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
18616: GO 18634
// min_y := y - r ;
18618: LD_ADDR_VAR 0 8
18622: PUSH
18623: LD_VAR 0 3
18627: PUSH
18628: LD_VAR 0 4
18632: MINUS
18633: ST_TO_ADDR
// max_x := x + r ;
18634: LD_ADDR_VAR 0 9
18638: PUSH
18639: LD_VAR 0 2
18643: PUSH
18644: LD_VAR 0 4
18648: PLUS
18649: ST_TO_ADDR
// max_y := y + r ;
18650: LD_ADDR_VAR 0 10
18654: PUSH
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 4
18664: PLUS
18665: ST_TO_ADDR
// for _x = min_x to max_x do
18666: LD_ADDR_VAR 0 11
18670: PUSH
18671: DOUBLE
18672: LD_VAR 0 7
18676: DEC
18677: ST_TO_ADDR
18678: LD_VAR 0 9
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18801
// for _y = min_y to max_y do
18686: LD_ADDR_VAR 0 12
18690: PUSH
18691: DOUBLE
18692: LD_VAR 0 8
18696: DEC
18697: ST_TO_ADDR
18698: LD_VAR 0 10
18702: PUSH
18703: FOR_TO
18704: IFFALSE 18797
// begin if not ValidHex ( _x , _y ) then
18706: LD_VAR 0 11
18710: PPUSH
18711: LD_VAR 0 12
18715: PPUSH
18716: CALL_OW 488
18720: NOT
18721: IFFALSE 18725
// continue ;
18723: GO 18703
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18725: LD_VAR 0 11
18729: PPUSH
18730: LD_VAR 0 12
18734: PPUSH
18735: CALL_OW 351
18739: PUSH
18740: LD_VAR 0 11
18744: PPUSH
18745: LD_VAR 0 12
18749: PPUSH
18750: CALL_OW 554
18754: AND
18755: IFFALSE 18795
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18757: LD_ADDR_VAR 0 13
18761: PUSH
18762: LD_VAR 0 13
18766: PPUSH
18767: LD_VAR 0 13
18771: PUSH
18772: LD_INT 1
18774: PLUS
18775: PPUSH
18776: LD_VAR 0 11
18780: PUSH
18781: LD_VAR 0 12
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PPUSH
18790: CALL_OW 2
18794: ST_TO_ADDR
// end ;
18795: GO 18703
18797: POP
18798: POP
18799: GO 18683
18801: POP
18802: POP
// if not list then
18803: LD_VAR 0 13
18807: NOT
18808: IFFALSE 18812
// exit ;
18810: GO 18883
// for i in list do
18812: LD_ADDR_VAR 0 6
18816: PUSH
18817: LD_VAR 0 13
18821: PUSH
18822: FOR_IN
18823: IFFALSE 18881
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18825: LD_VAR 0 1
18829: PPUSH
18830: LD_STRING M
18832: PUSH
18833: LD_VAR 0 6
18837: PUSH
18838: LD_INT 1
18840: ARRAY
18841: PUSH
18842: LD_VAR 0 6
18846: PUSH
18847: LD_INT 2
18849: ARRAY
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: PPUSH
18875: CALL_OW 447
18879: GO 18822
18881: POP
18882: POP
// end ;
18883: LD_VAR 0 5
18887: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18888: LD_EXP 69
18892: NOT
18893: IFFALSE 18943
18895: GO 18897
18897: DISABLE
// begin initHack := true ;
18898: LD_ADDR_EXP 69
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// hackTanks := [ ] ;
18906: LD_ADDR_EXP 70
18910: PUSH
18911: EMPTY
18912: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18913: LD_ADDR_EXP 71
18917: PUSH
18918: EMPTY
18919: ST_TO_ADDR
// hackLimit := 3 ;
18920: LD_ADDR_EXP 72
18924: PUSH
18925: LD_INT 3
18927: ST_TO_ADDR
// hackDist := 12 ;
18928: LD_ADDR_EXP 73
18932: PUSH
18933: LD_INT 12
18935: ST_TO_ADDR
// hackCounter := [ ] ;
18936: LD_ADDR_EXP 74
18940: PUSH
18941: EMPTY
18942: ST_TO_ADDR
// end ;
18943: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18944: LD_EXP 69
18948: PUSH
18949: LD_INT 34
18951: PUSH
18952: LD_INT 99
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: AND
18964: IFFALSE 19217
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
18972: PPUSH
// begin enable ;
18973: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_INT 34
18981: PUSH
18982: LD_INT 99
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 69
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19215
// begin if not i in hackTanks then
18997: LD_VAR 0 1
19001: PUSH
19002: LD_EXP 70
19006: IN
19007: NOT
19008: IFFALSE 19091
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19010: LD_ADDR_EXP 70
19014: PUSH
19015: LD_EXP 70
19019: PPUSH
19020: LD_EXP 70
19024: PUSH
19025: LD_INT 1
19027: PLUS
19028: PPUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 1
19038: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19039: LD_ADDR_EXP 71
19043: PUSH
19044: LD_EXP 71
19048: PPUSH
19049: LD_EXP 71
19053: PUSH
19054: LD_INT 1
19056: PLUS
19057: PPUSH
19058: EMPTY
19059: PPUSH
19060: CALL_OW 1
19064: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19065: LD_ADDR_EXP 74
19069: PUSH
19070: LD_EXP 74
19074: PPUSH
19075: LD_EXP 74
19079: PUSH
19080: LD_INT 1
19082: PLUS
19083: PPUSH
19084: EMPTY
19085: PPUSH
19086: CALL_OW 1
19090: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 302
19100: NOT
19101: IFFALSE 19114
// begin HackUnlinkAll ( i ) ;
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL 19220 0 1
// continue ;
19112: GO 18994
// end ; HackCheckCapturedStatus ( i ) ;
19114: LD_VAR 0 1
19118: PPUSH
19119: CALL 19663 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19123: LD_ADDR_VAR 0 2
19127: PUSH
19128: LD_INT 81
19130: PUSH
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 255
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 33
19147: PUSH
19148: LD_INT 3
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 91
19157: PUSH
19158: LD_VAR 0 1
19162: PUSH
19163: LD_EXP 73
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 50
19175: PUSH
19176: EMPTY
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL_OW 69
19189: ST_TO_ADDR
// if not tmp then
19190: LD_VAR 0 2
19194: NOT
19195: IFFALSE 19199
// continue ;
19197: GO 18994
// HackLink ( i , tmp ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 19356 0 2
// end ;
19213: GO 18994
19215: POP
19216: POP
// end ;
19217: PPOPN 2
19219: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19220: LD_INT 0
19222: PPUSH
19223: PPUSH
19224: PPUSH
// if not hack in hackTanks then
19225: LD_VAR 0 1
19229: PUSH
19230: LD_EXP 70
19234: IN
19235: NOT
19236: IFFALSE 19240
// exit ;
19238: GO 19351
// index := GetElementIndex ( hackTanks , hack ) ;
19240: LD_ADDR_VAR 0 4
19244: PUSH
19245: LD_EXP 70
19249: PPUSH
19250: LD_VAR 0 1
19254: PPUSH
19255: CALL 26956 0 2
19259: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19260: LD_EXP 71
19264: PUSH
19265: LD_VAR 0 4
19269: ARRAY
19270: IFFALSE 19351
// begin for i in hackTanksCaptured [ index ] do
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_EXP 71
19281: PUSH
19282: LD_VAR 0 4
19286: ARRAY
19287: PUSH
19288: FOR_IN
19289: IFFALSE 19315
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 2
19307: ARRAY
19308: PPUSH
19309: CALL_OW 235
19313: GO 19288
19315: POP
19316: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19317: LD_ADDR_EXP 71
19321: PUSH
19322: LD_EXP 71
19326: PPUSH
19327: LD_VAR 0 4
19331: PPUSH
19332: EMPTY
19333: PPUSH
19334: CALL_OW 1
19338: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19339: LD_VAR 0 1
19343: PPUSH
19344: LD_INT 0
19346: PPUSH
19347: CALL_OW 505
// end ; end ;
19351: LD_VAR 0 2
19355: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19356: LD_INT 0
19358: PPUSH
19359: PPUSH
19360: PPUSH
// if not hack in hackTanks or not vehicles then
19361: LD_VAR 0 1
19365: PUSH
19366: LD_EXP 70
19370: IN
19371: NOT
19372: PUSH
19373: LD_VAR 0 2
19377: NOT
19378: OR
19379: IFFALSE 19383
// exit ;
19381: GO 19658
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_VAR 0 2
19397: PPUSH
19398: LD_INT 1
19400: PPUSH
19401: LD_INT 1
19403: PPUSH
19404: CALL 27606 0 4
19408: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19409: LD_ADDR_VAR 0 5
19413: PUSH
19414: LD_EXP 70
19418: PPUSH
19419: LD_VAR 0 1
19423: PPUSH
19424: CALL 26956 0 2
19428: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19429: LD_EXP 71
19433: PUSH
19434: LD_VAR 0 5
19438: ARRAY
19439: PUSH
19440: LD_EXP 72
19444: LESS
19445: IFFALSE 19634
// begin for i := 1 to vehicles do
19447: LD_ADDR_VAR 0 4
19451: PUSH
19452: DOUBLE
19453: LD_INT 1
19455: DEC
19456: ST_TO_ADDR
19457: LD_VAR 0 2
19461: PUSH
19462: FOR_TO
19463: IFFALSE 19632
// begin if hackTanksCaptured [ index ] = hackLimit then
19465: LD_EXP 71
19469: PUSH
19470: LD_VAR 0 5
19474: ARRAY
19475: PUSH
19476: LD_EXP 72
19480: EQUAL
19481: IFFALSE 19485
// break ;
19483: GO 19632
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19485: LD_ADDR_EXP 74
19489: PUSH
19490: LD_EXP 74
19494: PPUSH
19495: LD_VAR 0 5
19499: PPUSH
19500: LD_EXP 74
19504: PUSH
19505: LD_VAR 0 5
19509: ARRAY
19510: PUSH
19511: LD_INT 1
19513: PLUS
19514: PPUSH
19515: CALL_OW 1
19519: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19520: LD_ADDR_EXP 71
19524: PUSH
19525: LD_EXP 71
19529: PPUSH
19530: LD_VAR 0 5
19534: PUSH
19535: LD_EXP 71
19539: PUSH
19540: LD_VAR 0 5
19544: ARRAY
19545: PUSH
19546: LD_INT 1
19548: PLUS
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: LD_VAR 0 2
19558: PUSH
19559: LD_VAR 0 4
19563: ARRAY
19564: PUSH
19565: LD_VAR 0 2
19569: PUSH
19570: LD_VAR 0 4
19574: ARRAY
19575: PPUSH
19576: CALL_OW 255
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL 27171 0 3
19589: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19590: LD_VAR 0 2
19594: PUSH
19595: LD_VAR 0 4
19599: ARRAY
19600: PPUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 255
19610: PPUSH
19611: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19615: LD_VAR 0 2
19619: PUSH
19620: LD_VAR 0 4
19624: ARRAY
19625: PPUSH
19626: CALL_OW 141
// end ;
19630: GO 19462
19632: POP
19633: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: LD_EXP 71
19643: PUSH
19644: LD_VAR 0 5
19648: ARRAY
19649: PUSH
19650: LD_INT 0
19652: PLUS
19653: PPUSH
19654: CALL_OW 505
// end ;
19658: LD_VAR 0 3
19662: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
19667: PPUSH
19668: PPUSH
// if not hack in hackTanks then
19669: LD_VAR 0 1
19673: PUSH
19674: LD_EXP 70
19678: IN
19679: NOT
19680: IFFALSE 19684
// exit ;
19682: GO 19924
// index := GetElementIndex ( hackTanks , hack ) ;
19684: LD_ADDR_VAR 0 4
19688: PUSH
19689: LD_EXP 70
19693: PPUSH
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL 26956 0 2
19703: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: DOUBLE
19710: LD_EXP 71
19714: PUSH
19715: LD_VAR 0 4
19719: ARRAY
19720: INC
19721: ST_TO_ADDR
19722: LD_INT 1
19724: PUSH
19725: FOR_DOWNTO
19726: IFFALSE 19898
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19728: LD_ADDR_VAR 0 5
19732: PUSH
19733: LD_EXP 71
19737: PUSH
19738: LD_VAR 0 4
19742: ARRAY
19743: PUSH
19744: LD_VAR 0 3
19748: ARRAY
19749: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19750: LD_VAR 0 5
19754: PUSH
19755: LD_INT 1
19757: ARRAY
19758: PPUSH
19759: CALL_OW 302
19763: NOT
19764: PUSH
19765: LD_VAR 0 5
19769: PUSH
19770: LD_INT 1
19772: ARRAY
19773: PPUSH
19774: CALL_OW 255
19778: PUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 255
19788: NONEQUAL
19789: OR
19790: IFFALSE 19896
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19792: LD_VAR 0 5
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PPUSH
19801: CALL_OW 305
19805: PUSH
19806: LD_VAR 0 5
19810: PUSH
19811: LD_INT 1
19813: ARRAY
19814: PPUSH
19815: CALL_OW 255
19819: PUSH
19820: LD_VAR 0 1
19824: PPUSH
19825: CALL_OW 255
19829: EQUAL
19830: AND
19831: IFFALSE 19855
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19833: LD_VAR 0 5
19837: PUSH
19838: LD_INT 1
19840: ARRAY
19841: PPUSH
19842: LD_VAR 0 5
19846: PUSH
19847: LD_INT 2
19849: ARRAY
19850: PPUSH
19851: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19855: LD_ADDR_EXP 71
19859: PUSH
19860: LD_EXP 71
19864: PPUSH
19865: LD_VAR 0 4
19869: PPUSH
19870: LD_EXP 71
19874: PUSH
19875: LD_VAR 0 4
19879: ARRAY
19880: PPUSH
19881: LD_VAR 0 3
19885: PPUSH
19886: CALL_OW 3
19890: PPUSH
19891: CALL_OW 1
19895: ST_TO_ADDR
// end ; end ;
19896: GO 19725
19898: POP
19899: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19900: LD_VAR 0 1
19904: PPUSH
19905: LD_EXP 71
19909: PUSH
19910: LD_VAR 0 4
19914: ARRAY
19915: PUSH
19916: LD_INT 0
19918: PLUS
19919: PPUSH
19920: CALL_OW 505
// end ;
19924: LD_VAR 0 2
19928: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
// if not hack in hackTanks then
19935: LD_VAR 0 1
19939: PUSH
19940: LD_EXP 70
19944: IN
19945: NOT
19946: IFFALSE 19950
// exit ;
19948: GO 20035
// index := GetElementIndex ( hackTanks , hack ) ;
19950: LD_ADDR_VAR 0 5
19954: PUSH
19955: LD_EXP 70
19959: PPUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL 26956 0 2
19969: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19970: LD_ADDR_VAR 0 4
19974: PUSH
19975: DOUBLE
19976: LD_INT 1
19978: DEC
19979: ST_TO_ADDR
19980: LD_EXP 71
19984: PUSH
19985: LD_VAR 0 5
19989: ARRAY
19990: PUSH
19991: FOR_TO
19992: IFFALSE 20033
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19994: LD_EXP 71
19998: PUSH
19999: LD_VAR 0 5
20003: ARRAY
20004: PUSH
20005: LD_VAR 0 4
20009: ARRAY
20010: PUSH
20011: LD_INT 1
20013: ARRAY
20014: PUSH
20015: LD_VAR 0 2
20019: EQUAL
20020: IFFALSE 20031
// KillUnit ( vehicle ) ;
20022: LD_VAR 0 2
20026: PPUSH
20027: CALL_OW 66
20031: GO 19991
20033: POP
20034: POP
// end ;
20035: LD_VAR 0 3
20039: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20040: LD_EXP 75
20044: NOT
20045: IFFALSE 20080
20047: GO 20049
20049: DISABLE
// begin initMiner := true ;
20050: LD_ADDR_EXP 75
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// minersList := [ ] ;
20058: LD_ADDR_EXP 76
20062: PUSH
20063: EMPTY
20064: ST_TO_ADDR
// minerMinesList := [ ] ;
20065: LD_ADDR_EXP 77
20069: PUSH
20070: EMPTY
20071: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20072: LD_ADDR_EXP 78
20076: PUSH
20077: LD_INT 5
20079: ST_TO_ADDR
// end ;
20080: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20081: LD_EXP 75
20085: PUSH
20086: LD_INT 34
20088: PUSH
20089: LD_INT 81
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: AND
20101: IFFALSE 20562
20103: GO 20105
20105: DISABLE
20106: LD_INT 0
20108: PPUSH
20109: PPUSH
20110: PPUSH
20111: PPUSH
// begin enable ;
20112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20113: LD_ADDR_VAR 0 1
20117: PUSH
20118: LD_INT 34
20120: PUSH
20121: LD_INT 81
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 69
20132: PUSH
20133: FOR_IN
20134: IFFALSE 20206
// begin if not i in minersList then
20136: LD_VAR 0 1
20140: PUSH
20141: LD_EXP 76
20145: IN
20146: NOT
20147: IFFALSE 20204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20149: LD_ADDR_EXP 76
20153: PUSH
20154: LD_EXP 76
20158: PPUSH
20159: LD_EXP 76
20163: PUSH
20164: LD_INT 1
20166: PLUS
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 1
20177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20178: LD_ADDR_EXP 77
20182: PUSH
20183: LD_EXP 77
20187: PPUSH
20188: LD_EXP 77
20192: PUSH
20193: LD_INT 1
20195: PLUS
20196: PPUSH
20197: EMPTY
20198: PPUSH
20199: CALL_OW 1
20203: ST_TO_ADDR
// end end ;
20204: GO 20133
20206: POP
20207: POP
// for i := minerMinesList downto 1 do
20208: LD_ADDR_VAR 0 1
20212: PUSH
20213: DOUBLE
20214: LD_EXP 77
20218: INC
20219: ST_TO_ADDR
20220: LD_INT 1
20222: PUSH
20223: FOR_DOWNTO
20224: IFFALSE 20560
// begin if IsLive ( minersList [ i ] ) then
20226: LD_EXP 76
20230: PUSH
20231: LD_VAR 0 1
20235: ARRAY
20236: PPUSH
20237: CALL_OW 300
20241: IFFALSE 20269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20243: LD_EXP 76
20247: PUSH
20248: LD_VAR 0 1
20252: ARRAY
20253: PPUSH
20254: LD_EXP 77
20258: PUSH
20259: LD_VAR 0 1
20263: ARRAY
20264: PPUSH
20265: CALL_OW 505
// if not minerMinesList [ i ] then
20269: LD_EXP 77
20273: PUSH
20274: LD_VAR 0 1
20278: ARRAY
20279: NOT
20280: IFFALSE 20284
// continue ;
20282: GO 20223
// for j := minerMinesList [ i ] downto 1 do
20284: LD_ADDR_VAR 0 2
20288: PUSH
20289: DOUBLE
20290: LD_EXP 77
20294: PUSH
20295: LD_VAR 0 1
20299: ARRAY
20300: INC
20301: ST_TO_ADDR
20302: LD_INT 1
20304: PUSH
20305: FOR_DOWNTO
20306: IFFALSE 20556
// begin side := GetSide ( minersList [ i ] ) ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_EXP 76
20317: PUSH
20318: LD_VAR 0 1
20322: ARRAY
20323: PPUSH
20324: CALL_OW 255
20328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20329: LD_ADDR_VAR 0 4
20333: PUSH
20334: LD_EXP 77
20338: PUSH
20339: LD_VAR 0 1
20343: ARRAY
20344: PUSH
20345: LD_VAR 0 2
20349: ARRAY
20350: PUSH
20351: LD_INT 1
20353: ARRAY
20354: PPUSH
20355: LD_EXP 77
20359: PUSH
20360: LD_VAR 0 1
20364: ARRAY
20365: PUSH
20366: LD_VAR 0 2
20370: ARRAY
20371: PUSH
20372: LD_INT 2
20374: ARRAY
20375: PPUSH
20376: CALL_OW 428
20380: ST_TO_ADDR
// if not tmp then
20381: LD_VAR 0 4
20385: NOT
20386: IFFALSE 20390
// continue ;
20388: GO 20305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20390: LD_VAR 0 4
20394: PUSH
20395: LD_INT 81
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL_OW 69
20411: IN
20412: PUSH
20413: LD_EXP 77
20417: PUSH
20418: LD_VAR 0 1
20422: ARRAY
20423: PUSH
20424: LD_VAR 0 2
20428: ARRAY
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: LD_EXP 77
20438: PUSH
20439: LD_VAR 0 1
20443: ARRAY
20444: PUSH
20445: LD_VAR 0 2
20449: ARRAY
20450: PUSH
20451: LD_INT 2
20453: ARRAY
20454: PPUSH
20455: CALL_OW 458
20459: AND
20460: IFFALSE 20554
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20462: LD_EXP 77
20466: PUSH
20467: LD_VAR 0 1
20471: ARRAY
20472: PUSH
20473: LD_VAR 0 2
20477: ARRAY
20478: PUSH
20479: LD_INT 1
20481: ARRAY
20482: PPUSH
20483: LD_EXP 77
20487: PUSH
20488: LD_VAR 0 1
20492: ARRAY
20493: PUSH
20494: LD_VAR 0 2
20498: ARRAY
20499: PUSH
20500: LD_INT 2
20502: ARRAY
20503: PPUSH
20504: LD_VAR 0 3
20508: PPUSH
20509: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20513: LD_ADDR_EXP 77
20517: PUSH
20518: LD_EXP 77
20522: PPUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: LD_EXP 77
20532: PUSH
20533: LD_VAR 0 1
20537: ARRAY
20538: PPUSH
20539: LD_VAR 0 2
20543: PPUSH
20544: CALL_OW 3
20548: PPUSH
20549: CALL_OW 1
20553: ST_TO_ADDR
// end ; end ;
20554: GO 20305
20556: POP
20557: POP
// end ;
20558: GO 20223
20560: POP
20561: POP
// end ;
20562: PPOPN 4
20564: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// result := false ;
20569: LD_ADDR_VAR 0 4
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 264
20586: PUSH
20587: LD_INT 81
20589: EQUAL
20590: NOT
20591: IFFALSE 20595
// exit ;
20593: GO 20835
// index := GetElementIndex ( minersList , unit ) ;
20595: LD_ADDR_VAR 0 5
20599: PUSH
20600: LD_EXP 76
20604: PPUSH
20605: LD_VAR 0 1
20609: PPUSH
20610: CALL 26956 0 2
20614: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20615: LD_EXP 77
20619: PUSH
20620: LD_VAR 0 5
20624: ARRAY
20625: PUSH
20626: LD_EXP 78
20630: GREATEREQUAL
20631: IFFALSE 20635
// exit ;
20633: GO 20835
// ComMoveXY ( unit , x , y ) ;
20635: LD_VAR 0 1
20639: PPUSH
20640: LD_VAR 0 2
20644: PPUSH
20645: LD_VAR 0 3
20649: PPUSH
20650: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20654: LD_INT 35
20656: PPUSH
20657: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20661: LD_VAR 0 1
20665: PPUSH
20666: LD_VAR 0 2
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: CALL 58340 0 3
20680: NOT
20681: PUSH
20682: LD_VAR 0 1
20686: PPUSH
20687: CALL_OW 314
20691: AND
20692: IFFALSE 20696
// exit ;
20694: GO 20835
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20696: LD_VAR 0 2
20700: PPUSH
20701: LD_VAR 0 3
20705: PPUSH
20706: CALL_OW 428
20710: PUSH
20711: LD_VAR 0 1
20715: EQUAL
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 314
20726: NOT
20727: AND
20728: IFFALSE 20654
// PlaySoundXY ( x , y , PlantMine ) ;
20730: LD_VAR 0 2
20734: PPUSH
20735: LD_VAR 0 3
20739: PPUSH
20740: LD_STRING PlantMine
20742: PPUSH
20743: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_VAR 0 3
20756: PPUSH
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 255
20766: PPUSH
20767: LD_INT 0
20769: PPUSH
20770: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20774: LD_ADDR_EXP 77
20778: PUSH
20779: LD_EXP 77
20783: PPUSH
20784: LD_VAR 0 5
20788: PUSH
20789: LD_EXP 77
20793: PUSH
20794: LD_VAR 0 5
20798: ARRAY
20799: PUSH
20800: LD_INT 1
20802: PLUS
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PPUSH
20808: LD_VAR 0 2
20812: PUSH
20813: LD_VAR 0 3
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PPUSH
20822: CALL 27171 0 3
20826: ST_TO_ADDR
// result := true ;
20827: LD_ADDR_VAR 0 4
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// end ;
20835: LD_VAR 0 4
20839: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
// if not unit in minersList then
20845: LD_VAR 0 1
20849: PUSH
20850: LD_EXP 76
20854: IN
20855: NOT
20856: IFFALSE 20860
// exit ;
20858: GO 21252
// index := GetElementIndex ( minersList , unit ) ;
20860: LD_ADDR_VAR 0 6
20864: PUSH
20865: LD_EXP 76
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL 26956 0 2
20879: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20880: LD_ADDR_VAR 0 5
20884: PUSH
20885: DOUBLE
20886: LD_EXP 77
20890: PUSH
20891: LD_VAR 0 6
20895: ARRAY
20896: INC
20897: ST_TO_ADDR
20898: LD_INT 1
20900: PUSH
20901: FOR_DOWNTO
20902: IFFALSE 21063
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20904: LD_EXP 77
20908: PUSH
20909: LD_VAR 0 6
20913: ARRAY
20914: PUSH
20915: LD_VAR 0 5
20919: ARRAY
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PUSH
20925: LD_VAR 0 2
20929: EQUAL
20930: PUSH
20931: LD_EXP 77
20935: PUSH
20936: LD_VAR 0 6
20940: ARRAY
20941: PUSH
20942: LD_VAR 0 5
20946: ARRAY
20947: PUSH
20948: LD_INT 2
20950: ARRAY
20951: PUSH
20952: LD_VAR 0 3
20956: EQUAL
20957: AND
20958: IFFALSE 21061
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20960: LD_EXP 77
20964: PUSH
20965: LD_VAR 0 6
20969: ARRAY
20970: PUSH
20971: LD_VAR 0 5
20975: ARRAY
20976: PUSH
20977: LD_INT 1
20979: ARRAY
20980: PPUSH
20981: LD_EXP 77
20985: PUSH
20986: LD_VAR 0 6
20990: ARRAY
20991: PUSH
20992: LD_VAR 0 5
20996: ARRAY
20997: PUSH
20998: LD_INT 2
21000: ARRAY
21001: PPUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL_OW 255
21011: PPUSH
21012: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21016: LD_ADDR_EXP 77
21020: PUSH
21021: LD_EXP 77
21025: PPUSH
21026: LD_VAR 0 6
21030: PPUSH
21031: LD_EXP 77
21035: PUSH
21036: LD_VAR 0 6
21040: ARRAY
21041: PPUSH
21042: LD_VAR 0 5
21046: PPUSH
21047: CALL_OW 3
21051: PPUSH
21052: CALL_OW 1
21056: ST_TO_ADDR
// exit ;
21057: POP
21058: POP
21059: GO 21252
// end ; end ;
21061: GO 20901
21063: POP
21064: POP
// for i := minerMinesList [ index ] downto 1 do
21065: LD_ADDR_VAR 0 5
21069: PUSH
21070: DOUBLE
21071: LD_EXP 77
21075: PUSH
21076: LD_VAR 0 6
21080: ARRAY
21081: INC
21082: ST_TO_ADDR
21083: LD_INT 1
21085: PUSH
21086: FOR_DOWNTO
21087: IFFALSE 21250
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21089: LD_EXP 77
21093: PUSH
21094: LD_VAR 0 6
21098: ARRAY
21099: PUSH
21100: LD_VAR 0 5
21104: ARRAY
21105: PUSH
21106: LD_INT 1
21108: ARRAY
21109: PPUSH
21110: LD_EXP 77
21114: PUSH
21115: LD_VAR 0 6
21119: ARRAY
21120: PUSH
21121: LD_VAR 0 5
21125: ARRAY
21126: PUSH
21127: LD_INT 2
21129: ARRAY
21130: PPUSH
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: CALL_OW 298
21145: PUSH
21146: LD_INT 6
21148: LESS
21149: IFFALSE 21248
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21151: LD_EXP 77
21155: PUSH
21156: LD_VAR 0 6
21160: ARRAY
21161: PUSH
21162: LD_VAR 0 5
21166: ARRAY
21167: PUSH
21168: LD_INT 1
21170: ARRAY
21171: PPUSH
21172: LD_EXP 77
21176: PUSH
21177: LD_VAR 0 6
21181: ARRAY
21182: PUSH
21183: LD_VAR 0 5
21187: ARRAY
21188: PUSH
21189: LD_INT 2
21191: ARRAY
21192: PPUSH
21193: LD_VAR 0 1
21197: PPUSH
21198: CALL_OW 255
21202: PPUSH
21203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21207: LD_ADDR_EXP 77
21211: PUSH
21212: LD_EXP 77
21216: PPUSH
21217: LD_VAR 0 6
21221: PPUSH
21222: LD_EXP 77
21226: PUSH
21227: LD_VAR 0 6
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 5
21237: PPUSH
21238: CALL_OW 3
21242: PPUSH
21243: CALL_OW 1
21247: ST_TO_ADDR
// end ; end ;
21248: GO 21086
21250: POP
21251: POP
// end ;
21252: LD_VAR 0 4
21256: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21257: LD_INT 0
21259: PPUSH
21260: PPUSH
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21268: LD_VAR 0 1
21272: PPUSH
21273: CALL_OW 264
21277: PUSH
21278: LD_INT 81
21280: EQUAL
21281: NOT
21282: PUSH
21283: LD_VAR 0 1
21287: PUSH
21288: LD_EXP 76
21292: IN
21293: NOT
21294: OR
21295: IFFALSE 21299
// exit ;
21297: GO 21621
// index := GetElementIndex ( minersList , unit ) ;
21299: LD_ADDR_VAR 0 6
21303: PUSH
21304: LD_EXP 76
21308: PPUSH
21309: LD_VAR 0 1
21313: PPUSH
21314: CALL 26956 0 2
21318: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21319: LD_ADDR_VAR 0 8
21323: PUSH
21324: LD_EXP 78
21328: PUSH
21329: LD_EXP 77
21333: PUSH
21334: LD_VAR 0 6
21338: ARRAY
21339: MINUS
21340: ST_TO_ADDR
// if not minesFreeAmount then
21341: LD_VAR 0 8
21345: NOT
21346: IFFALSE 21350
// exit ;
21348: GO 21621
// tmp := [ ] ;
21350: LD_ADDR_VAR 0 7
21354: PUSH
21355: EMPTY
21356: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21357: LD_ADDR_VAR 0 5
21361: PUSH
21362: DOUBLE
21363: LD_INT 1
21365: DEC
21366: ST_TO_ADDR
21367: LD_VAR 0 8
21371: PUSH
21372: FOR_TO
21373: IFFALSE 21568
// begin _d := rand ( 0 , 5 ) ;
21375: LD_ADDR_VAR 0 11
21379: PUSH
21380: LD_INT 0
21382: PPUSH
21383: LD_INT 5
21385: PPUSH
21386: CALL_OW 12
21390: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21391: LD_ADDR_VAR 0 12
21395: PUSH
21396: LD_INT 2
21398: PPUSH
21399: LD_INT 6
21401: PPUSH
21402: CALL_OW 12
21406: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21407: LD_ADDR_VAR 0 9
21411: PUSH
21412: LD_VAR 0 2
21416: PPUSH
21417: LD_VAR 0 11
21421: PPUSH
21422: LD_VAR 0 12
21426: PPUSH
21427: CALL_OW 272
21431: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21432: LD_ADDR_VAR 0 10
21436: PUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: LD_VAR 0 11
21446: PPUSH
21447: LD_VAR 0 12
21451: PPUSH
21452: CALL_OW 273
21456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21457: LD_VAR 0 9
21461: PPUSH
21462: LD_VAR 0 10
21466: PPUSH
21467: CALL_OW 488
21471: PUSH
21472: LD_VAR 0 9
21476: PUSH
21477: LD_VAR 0 10
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_VAR 0 7
21490: IN
21491: NOT
21492: AND
21493: PUSH
21494: LD_VAR 0 9
21498: PPUSH
21499: LD_VAR 0 10
21503: PPUSH
21504: CALL_OW 458
21508: NOT
21509: AND
21510: IFFALSE 21552
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21512: LD_ADDR_VAR 0 7
21516: PUSH
21517: LD_VAR 0 7
21521: PPUSH
21522: LD_VAR 0 7
21526: PUSH
21527: LD_INT 1
21529: PLUS
21530: PPUSH
21531: LD_VAR 0 9
21535: PUSH
21536: LD_VAR 0 10
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PPUSH
21545: CALL_OW 1
21549: ST_TO_ADDR
21550: GO 21566
// i := i - 1 ;
21552: LD_ADDR_VAR 0 5
21556: PUSH
21557: LD_VAR 0 5
21561: PUSH
21562: LD_INT 1
21564: MINUS
21565: ST_TO_ADDR
// end ;
21566: GO 21372
21568: POP
21569: POP
// for i in tmp do
21570: LD_ADDR_VAR 0 5
21574: PUSH
21575: LD_VAR 0 7
21579: PUSH
21580: FOR_IN
21581: IFFALSE 21619
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21583: LD_VAR 0 1
21587: PPUSH
21588: LD_VAR 0 5
21592: PUSH
21593: LD_INT 1
21595: ARRAY
21596: PPUSH
21597: LD_VAR 0 5
21601: PUSH
21602: LD_INT 2
21604: ARRAY
21605: PPUSH
21606: CALL 20565 0 3
21610: NOT
21611: IFFALSE 21617
// exit ;
21613: POP
21614: POP
21615: GO 21621
21617: GO 21580
21619: POP
21620: POP
// end ;
21621: LD_VAR 0 4
21625: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21626: LD_INT 0
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
// if not GetClass ( unit ) = class_sniper then
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 257
21644: PUSH
21645: LD_INT 5
21647: EQUAL
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 22041
// dist := 8 ;
21653: LD_ADDR_VAR 0 5
21657: PUSH
21658: LD_INT 8
21660: ST_TO_ADDR
// viewRange := 12 ;
21661: LD_ADDR_VAR 0 7
21665: PUSH
21666: LD_INT 12
21668: ST_TO_ADDR
// side := GetSide ( unit ) ;
21669: LD_ADDR_VAR 0 6
21673: PUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: CALL_OW 255
21683: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21684: LD_INT 61
21686: PPUSH
21687: LD_VAR 0 6
21691: PPUSH
21692: CALL_OW 321
21696: PUSH
21697: LD_INT 2
21699: EQUAL
21700: IFFALSE 21710
// viewRange := 16 ;
21702: LD_ADDR_VAR 0 7
21706: PUSH
21707: LD_INT 16
21709: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21710: LD_VAR 0 1
21714: PPUSH
21715: LD_VAR 0 2
21719: PPUSH
21720: LD_VAR 0 3
21724: PPUSH
21725: CALL_OW 297
21729: PUSH
21730: LD_VAR 0 5
21734: GREATER
21735: IFFALSE 21814
// begin ComMoveXY ( unit , x , y ) ;
21737: LD_VAR 0 1
21741: PPUSH
21742: LD_VAR 0 2
21746: PPUSH
21747: LD_VAR 0 3
21751: PPUSH
21752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21756: LD_INT 35
21758: PPUSH
21759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21763: LD_VAR 0 1
21767: PPUSH
21768: LD_VAR 0 2
21772: PPUSH
21773: LD_VAR 0 3
21777: PPUSH
21778: CALL 58340 0 3
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 22041
// until GetDistUnitXY ( unit , x , y ) < dist ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_VAR 0 2
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: CALL_OW 297
21806: PUSH
21807: LD_VAR 0 5
21811: LESS
21812: IFFALSE 21756
// end ; ComTurnXY ( unit , x , y ) ;
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 118
// wait ( 5 ) ;
21833: LD_INT 5
21835: PPUSH
21836: CALL_OW 67
// _d := GetDir ( unit ) ;
21840: LD_ADDR_VAR 0 10
21844: PUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 254
21854: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21855: LD_ADDR_VAR 0 8
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 250
21869: PPUSH
21870: LD_VAR 0 10
21874: PPUSH
21875: LD_VAR 0 5
21879: PPUSH
21880: CALL_OW 272
21884: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21885: LD_ADDR_VAR 0 9
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 251
21899: PPUSH
21900: LD_VAR 0 10
21904: PPUSH
21905: LD_VAR 0 5
21909: PPUSH
21910: CALL_OW 273
21914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21915: LD_VAR 0 8
21919: PPUSH
21920: LD_VAR 0 9
21924: PPUSH
21925: CALL_OW 488
21929: NOT
21930: IFFALSE 21934
// exit ;
21932: GO 22041
// ComAnimCustom ( unit , 1 ) ;
21934: LD_VAR 0 1
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21946: LD_VAR 0 8
21950: PPUSH
21951: LD_VAR 0 9
21955: PPUSH
21956: LD_VAR 0 6
21960: PPUSH
21961: LD_VAR 0 7
21965: PPUSH
21966: CALL_OW 330
// repeat wait ( 1 ) ;
21970: LD_INT 1
21972: PPUSH
21973: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 316
21986: PUSH
21987: LD_VAR 0 1
21991: PPUSH
21992: CALL_OW 314
21996: OR
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 302
22007: NOT
22008: OR
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 301
22019: OR
22020: IFFALSE 21970
// RemoveSeeing ( _x , _y , side ) ;
22022: LD_VAR 0 8
22026: PPUSH
22027: LD_VAR 0 9
22031: PPUSH
22032: LD_VAR 0 6
22036: PPUSH
22037: CALL_OW 331
// end ; end_of_file
22041: LD_VAR 0 4
22045: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22046: LD_VAR 0 1
22050: PUSH
22051: LD_INT 200
22053: DOUBLE
22054: GREATEREQUAL
22055: IFFALSE 22063
22057: LD_INT 299
22059: DOUBLE
22060: LESSEQUAL
22061: IFTRUE 22065
22063: GO 22097
22065: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22066: LD_VAR 0 1
22070: PPUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: LD_VAR 0 4
22085: PPUSH
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL 18133 0 5
22095: GO 22174
22097: LD_INT 300
22099: DOUBLE
22100: GREATEREQUAL
22101: IFFALSE 22109
22103: LD_INT 399
22105: DOUBLE
22106: LESSEQUAL
22107: IFTRUE 22111
22109: GO 22173
22111: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22112: LD_VAR 0 1
22116: PPUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: LD_VAR 0 4
22131: PPUSH
22132: LD_VAR 0 5
22136: PPUSH
22137: LD_VAR 0 6
22141: PPUSH
22142: LD_VAR 0 7
22146: PPUSH
22147: LD_VAR 0 8
22151: PPUSH
22152: LD_VAR 0 9
22156: PPUSH
22157: LD_VAR 0 10
22161: PPUSH
22162: LD_VAR 0 11
22166: PPUSH
22167: CALL 14458 0 11
22171: GO 22174
22173: POP
// end ;
22174: PPOPN 11
22176: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22177: LD_VAR 0 1
22181: PPUSH
22182: LD_VAR 0 2
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: LD_VAR 0 4
22196: PPUSH
22197: LD_VAR 0 5
22201: PPUSH
22202: CALL 17869 0 5
// end ; end_of_file
22206: PPOPN 5
22208: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22209: LD_INT 0
22211: PPUSH
22212: PPUSH
// if exist_mode then
22213: LD_VAR 0 2
22217: IFFALSE 22242
// unit := CreateCharacter ( prefix & ident ) else
22219: LD_ADDR_VAR 0 5
22223: PUSH
22224: LD_VAR 0 3
22228: PUSH
22229: LD_VAR 0 1
22233: STR
22234: PPUSH
22235: CALL_OW 34
22239: ST_TO_ADDR
22240: GO 22257
// unit := NewCharacter ( ident ) ;
22242: LD_ADDR_VAR 0 5
22246: PUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 25
22256: ST_TO_ADDR
// result := unit ;
22257: LD_ADDR_VAR 0 4
22261: PUSH
22262: LD_VAR 0 5
22266: ST_TO_ADDR
// end ;
22267: LD_VAR 0 4
22271: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22272: LD_INT 0
22274: PPUSH
22275: PPUSH
// if not side or not nation then
22276: LD_VAR 0 1
22280: NOT
22281: PUSH
22282: LD_VAR 0 2
22286: NOT
22287: OR
22288: IFFALSE 22292
// exit ;
22290: GO 23060
// case nation of nation_american :
22292: LD_VAR 0 2
22296: PUSH
22297: LD_INT 1
22299: DOUBLE
22300: EQUAL
22301: IFTRUE 22305
22303: GO 22519
22305: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: LD_INT 35
22313: PUSH
22314: LD_INT 45
22316: PUSH
22317: LD_INT 46
22319: PUSH
22320: LD_INT 47
22322: PUSH
22323: LD_INT 82
22325: PUSH
22326: LD_INT 83
22328: PUSH
22329: LD_INT 84
22331: PUSH
22332: LD_INT 85
22334: PUSH
22335: LD_INT 86
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 6
22346: PUSH
22347: LD_INT 15
22349: PUSH
22350: LD_INT 16
22352: PUSH
22353: LD_INT 7
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: LD_INT 13
22361: PUSH
22362: LD_INT 10
22364: PUSH
22365: LD_INT 14
22367: PUSH
22368: LD_INT 20
22370: PUSH
22371: LD_INT 21
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_INT 25
22379: PUSH
22380: LD_INT 32
22382: PUSH
22383: LD_INT 27
22385: PUSH
22386: LD_INT 36
22388: PUSH
22389: LD_INT 69
22391: PUSH
22392: LD_INT 39
22394: PUSH
22395: LD_INT 34
22397: PUSH
22398: LD_INT 40
22400: PUSH
22401: LD_INT 48
22403: PUSH
22404: LD_INT 49
22406: PUSH
22407: LD_INT 50
22409: PUSH
22410: LD_INT 51
22412: PUSH
22413: LD_INT 52
22415: PUSH
22416: LD_INT 53
22418: PUSH
22419: LD_INT 54
22421: PUSH
22422: LD_INT 55
22424: PUSH
22425: LD_INT 56
22427: PUSH
22428: LD_INT 57
22430: PUSH
22431: LD_INT 58
22433: PUSH
22434: LD_INT 59
22436: PUSH
22437: LD_INT 60
22439: PUSH
22440: LD_INT 61
22442: PUSH
22443: LD_INT 62
22445: PUSH
22446: LD_INT 80
22448: PUSH
22449: LD_INT 82
22451: PUSH
22452: LD_INT 83
22454: PUSH
22455: LD_INT 84
22457: PUSH
22458: LD_INT 85
22460: PUSH
22461: LD_INT 86
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 22984
22519: LD_INT 2
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22753
22527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22528: LD_ADDR_VAR 0 4
22532: PUSH
22533: LD_INT 35
22535: PUSH
22536: LD_INT 45
22538: PUSH
22539: LD_INT 46
22541: PUSH
22542: LD_INT 47
22544: PUSH
22545: LD_INT 82
22547: PUSH
22548: LD_INT 83
22550: PUSH
22551: LD_INT 84
22553: PUSH
22554: LD_INT 85
22556: PUSH
22557: LD_INT 87
22559: PUSH
22560: LD_INT 70
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: LD_INT 11
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 4
22574: PUSH
22575: LD_INT 5
22577: PUSH
22578: LD_INT 6
22580: PUSH
22581: LD_INT 15
22583: PUSH
22584: LD_INT 18
22586: PUSH
22587: LD_INT 7
22589: PUSH
22590: LD_INT 17
22592: PUSH
22593: LD_INT 8
22595: PUSH
22596: LD_INT 20
22598: PUSH
22599: LD_INT 21
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 72
22607: PUSH
22608: LD_INT 26
22610: PUSH
22611: LD_INT 69
22613: PUSH
22614: LD_INT 39
22616: PUSH
22617: LD_INT 40
22619: PUSH
22620: LD_INT 41
22622: PUSH
22623: LD_INT 42
22625: PUSH
22626: LD_INT 43
22628: PUSH
22629: LD_INT 48
22631: PUSH
22632: LD_INT 49
22634: PUSH
22635: LD_INT 50
22637: PUSH
22638: LD_INT 51
22640: PUSH
22641: LD_INT 52
22643: PUSH
22644: LD_INT 53
22646: PUSH
22647: LD_INT 54
22649: PUSH
22650: LD_INT 55
22652: PUSH
22653: LD_INT 56
22655: PUSH
22656: LD_INT 60
22658: PUSH
22659: LD_INT 61
22661: PUSH
22662: LD_INT 62
22664: PUSH
22665: LD_INT 66
22667: PUSH
22668: LD_INT 67
22670: PUSH
22671: LD_INT 68
22673: PUSH
22674: LD_INT 81
22676: PUSH
22677: LD_INT 82
22679: PUSH
22680: LD_INT 83
22682: PUSH
22683: LD_INT 84
22685: PUSH
22686: LD_INT 85
22688: PUSH
22689: LD_INT 87
22691: PUSH
22692: LD_INT 88
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 22984
22753: LD_INT 3
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22983
22761: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22762: LD_ADDR_VAR 0 4
22766: PUSH
22767: LD_INT 46
22769: PUSH
22770: LD_INT 47
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 82
22781: PUSH
22782: LD_INT 83
22784: PUSH
22785: LD_INT 84
22787: PUSH
22788: LD_INT 85
22790: PUSH
22791: LD_INT 86
22793: PUSH
22794: LD_INT 11
22796: PUSH
22797: LD_INT 9
22799: PUSH
22800: LD_INT 20
22802: PUSH
22803: LD_INT 19
22805: PUSH
22806: LD_INT 21
22808: PUSH
22809: LD_INT 24
22811: PUSH
22812: LD_INT 22
22814: PUSH
22815: LD_INT 25
22817: PUSH
22818: LD_INT 28
22820: PUSH
22821: LD_INT 29
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 31
22829: PUSH
22830: LD_INT 37
22832: PUSH
22833: LD_INT 38
22835: PUSH
22836: LD_INT 32
22838: PUSH
22839: LD_INT 27
22841: PUSH
22842: LD_INT 33
22844: PUSH
22845: LD_INT 69
22847: PUSH
22848: LD_INT 39
22850: PUSH
22851: LD_INT 34
22853: PUSH
22854: LD_INT 40
22856: PUSH
22857: LD_INT 71
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 44
22865: PUSH
22866: LD_INT 48
22868: PUSH
22869: LD_INT 49
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: LD_INT 51
22877: PUSH
22878: LD_INT 52
22880: PUSH
22881: LD_INT 53
22883: PUSH
22884: LD_INT 54
22886: PUSH
22887: LD_INT 55
22889: PUSH
22890: LD_INT 56
22892: PUSH
22893: LD_INT 57
22895: PUSH
22896: LD_INT 58
22898: PUSH
22899: LD_INT 59
22901: PUSH
22902: LD_INT 63
22904: PUSH
22905: LD_INT 64
22907: PUSH
22908: LD_INT 65
22910: PUSH
22911: LD_INT 82
22913: PUSH
22914: LD_INT 83
22916: PUSH
22917: LD_INT 84
22919: PUSH
22920: LD_INT 85
22922: PUSH
22923: LD_INT 86
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
22981: GO 22984
22983: POP
// if state > - 1 and state < 3 then
22984: LD_VAR 0 3
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: GREATER
22993: PUSH
22994: LD_VAR 0 3
22998: PUSH
22999: LD_INT 3
23001: LESS
23002: AND
23003: IFFALSE 23060
// for i in result do
23005: LD_ADDR_VAR 0 5
23009: PUSH
23010: LD_VAR 0 4
23014: PUSH
23015: FOR_IN
23016: IFFALSE 23058
// if GetTech ( i , side ) <> state then
23018: LD_VAR 0 5
23022: PPUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 321
23032: PUSH
23033: LD_VAR 0 3
23037: NONEQUAL
23038: IFFALSE 23056
// result := result diff i ;
23040: LD_ADDR_VAR 0 4
23044: PUSH
23045: LD_VAR 0 4
23049: PUSH
23050: LD_VAR 0 5
23054: DIFF
23055: ST_TO_ADDR
23056: GO 23015
23058: POP
23059: POP
// end ;
23060: LD_VAR 0 4
23064: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23065: LD_INT 0
23067: PPUSH
23068: PPUSH
23069: PPUSH
// result := true ;
23070: LD_ADDR_VAR 0 3
23074: PUSH
23075: LD_INT 1
23077: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23078: LD_ADDR_VAR 0 5
23082: PUSH
23083: LD_VAR 0 2
23087: PPUSH
23088: CALL_OW 480
23092: ST_TO_ADDR
// if not tmp then
23093: LD_VAR 0 5
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23151
// for i in tmp do
23102: LD_ADDR_VAR 0 4
23106: PUSH
23107: LD_VAR 0 5
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23149
// if GetTech ( i , side ) <> state_researched then
23115: LD_VAR 0 4
23119: PPUSH
23120: LD_VAR 0 1
23124: PPUSH
23125: CALL_OW 321
23129: PUSH
23130: LD_INT 2
23132: NONEQUAL
23133: IFFALSE 23147
// begin result := false ;
23135: LD_ADDR_VAR 0 3
23139: PUSH
23140: LD_INT 0
23142: ST_TO_ADDR
// exit ;
23143: POP
23144: POP
23145: GO 23151
// end ;
23147: GO 23112
23149: POP
23150: POP
// end ;
23151: LD_VAR 0 3
23155: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
23167: PPUSH
23168: PPUSH
23169: PPUSH
23170: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23171: LD_VAR 0 1
23175: NOT
23176: PUSH
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 257
23186: PUSH
23187: LD_INT 9
23189: NONEQUAL
23190: OR
23191: IFFALSE 23195
// exit ;
23193: GO 23768
// side := GetSide ( unit ) ;
23195: LD_ADDR_VAR 0 9
23199: PUSH
23200: LD_VAR 0 1
23204: PPUSH
23205: CALL_OW 255
23209: ST_TO_ADDR
// tech_space := tech_spacanom ;
23210: LD_ADDR_VAR 0 12
23214: PUSH
23215: LD_INT 29
23217: ST_TO_ADDR
// tech_time := tech_taurad ;
23218: LD_ADDR_VAR 0 13
23222: PUSH
23223: LD_INT 28
23225: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23226: LD_ADDR_VAR 0 11
23230: PUSH
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 310
23240: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23241: LD_VAR 0 11
23245: PPUSH
23246: CALL_OW 247
23250: PUSH
23251: LD_INT 2
23253: EQUAL
23254: IFFALSE 23258
// exit ;
23256: GO 23768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23258: LD_ADDR_VAR 0 8
23262: PUSH
23263: LD_INT 81
23265: PUSH
23266: LD_VAR 0 9
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: PUSH
23278: LD_INT 21
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 69
23300: ST_TO_ADDR
// if not tmp then
23301: LD_VAR 0 8
23305: NOT
23306: IFFALSE 23310
// exit ;
23308: GO 23768
// if in_unit then
23310: LD_VAR 0 11
23314: IFFALSE 23338
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23316: LD_ADDR_VAR 0 10
23320: PUSH
23321: LD_VAR 0 8
23325: PPUSH
23326: LD_VAR 0 11
23330: PPUSH
23331: CALL_OW 74
23335: ST_TO_ADDR
23336: GO 23358
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23338: LD_ADDR_VAR 0 10
23342: PUSH
23343: LD_VAR 0 8
23347: PPUSH
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 74
23357: ST_TO_ADDR
// if not enemy then
23358: LD_VAR 0 10
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 23768
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23367: LD_VAR 0 11
23371: PUSH
23372: LD_VAR 0 11
23376: PPUSH
23377: LD_VAR 0 10
23381: PPUSH
23382: CALL_OW 296
23386: PUSH
23387: LD_INT 13
23389: GREATER
23390: AND
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: LD_VAR 0 10
23401: PPUSH
23402: CALL_OW 296
23406: PUSH
23407: LD_INT 12
23409: GREATER
23410: OR
23411: IFFALSE 23415
// exit ;
23413: GO 23768
// missile := [ 1 ] ;
23415: LD_ADDR_VAR 0 14
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23426: LD_VAR 0 9
23430: PPUSH
23431: LD_VAR 0 12
23435: PPUSH
23436: CALL_OW 325
23440: IFFALSE 23469
// missile := Replace ( missile , missile + 1 , 2 ) ;
23442: LD_ADDR_VAR 0 14
23446: PUSH
23447: LD_VAR 0 14
23451: PPUSH
23452: LD_VAR 0 14
23456: PUSH
23457: LD_INT 1
23459: PLUS
23460: PPUSH
23461: LD_INT 2
23463: PPUSH
23464: CALL_OW 1
23468: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23469: LD_VAR 0 9
23473: PPUSH
23474: LD_VAR 0 13
23478: PPUSH
23479: CALL_OW 325
23483: PUSH
23484: LD_VAR 0 10
23488: PPUSH
23489: CALL_OW 255
23493: PPUSH
23494: LD_VAR 0 13
23498: PPUSH
23499: CALL_OW 325
23503: NOT
23504: AND
23505: IFFALSE 23534
// missile := Replace ( missile , missile + 1 , 3 ) ;
23507: LD_ADDR_VAR 0 14
23511: PUSH
23512: LD_VAR 0 14
23516: PPUSH
23517: LD_VAR 0 14
23521: PUSH
23522: LD_INT 1
23524: PLUS
23525: PPUSH
23526: LD_INT 3
23528: PPUSH
23529: CALL_OW 1
23533: ST_TO_ADDR
// if missile < 2 then
23534: LD_VAR 0 14
23538: PUSH
23539: LD_INT 2
23541: LESS
23542: IFFALSE 23546
// exit ;
23544: GO 23768
// x := GetX ( enemy ) ;
23546: LD_ADDR_VAR 0 4
23550: PUSH
23551: LD_VAR 0 10
23555: PPUSH
23556: CALL_OW 250
23560: ST_TO_ADDR
// y := GetY ( enemy ) ;
23561: LD_ADDR_VAR 0 5
23565: PUSH
23566: LD_VAR 0 10
23570: PPUSH
23571: CALL_OW 251
23575: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23576: LD_ADDR_VAR 0 6
23580: PUSH
23581: LD_VAR 0 4
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PPUSH
23590: LD_INT 1
23592: PPUSH
23593: CALL_OW 12
23597: PLUS
23598: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 5
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PPUSH
23613: LD_INT 1
23615: PPUSH
23616: CALL_OW 12
23620: PLUS
23621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23622: LD_VAR 0 6
23626: PPUSH
23627: LD_VAR 0 7
23631: PPUSH
23632: CALL_OW 488
23636: NOT
23637: IFFALSE 23659
// begin _x := x ;
23639: LD_ADDR_VAR 0 6
23643: PUSH
23644: LD_VAR 0 4
23648: ST_TO_ADDR
// _y := y ;
23649: LD_ADDR_VAR 0 7
23653: PUSH
23654: LD_VAR 0 5
23658: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: LD_INT 1
23666: PPUSH
23667: LD_VAR 0 14
23671: PPUSH
23672: CALL_OW 12
23676: ST_TO_ADDR
// case i of 1 :
23677: LD_VAR 0 3
23681: PUSH
23682: LD_INT 1
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23707
23690: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23691: LD_VAR 0 1
23695: PPUSH
23696: LD_VAR 0 10
23700: PPUSH
23701: CALL_OW 115
23705: GO 23768
23707: LD_INT 2
23709: DOUBLE
23710: EQUAL
23711: IFTRUE 23715
23713: GO 23737
23715: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23716: LD_VAR 0 1
23720: PPUSH
23721: LD_VAR 0 6
23725: PPUSH
23726: LD_VAR 0 7
23730: PPUSH
23731: CALL_OW 153
23735: GO 23768
23737: LD_INT 3
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23767
23745: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23746: LD_VAR 0 1
23750: PPUSH
23751: LD_VAR 0 6
23755: PPUSH
23756: LD_VAR 0 7
23760: PPUSH
23761: CALL_OW 154
23765: GO 23768
23767: POP
// end ;
23768: LD_VAR 0 2
23772: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23773: LD_INT 0
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
// if not unit or not building then
23781: LD_VAR 0 1
23785: NOT
23786: PUSH
23787: LD_VAR 0 2
23791: NOT
23792: OR
23793: IFFALSE 23797
// exit ;
23795: GO 23955
// x := GetX ( building ) ;
23797: LD_ADDR_VAR 0 5
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: CALL_OW 250
23811: ST_TO_ADDR
// y := GetY ( building ) ;
23812: LD_ADDR_VAR 0 6
23816: PUSH
23817: LD_VAR 0 2
23821: PPUSH
23822: CALL_OW 251
23826: ST_TO_ADDR
// for i = 0 to 5 do
23827: LD_ADDR_VAR 0 4
23831: PUSH
23832: DOUBLE
23833: LD_INT 0
23835: DEC
23836: ST_TO_ADDR
23837: LD_INT 5
23839: PUSH
23840: FOR_TO
23841: IFFALSE 23953
// begin _x := ShiftX ( x , i , 3 ) ;
23843: LD_ADDR_VAR 0 7
23847: PUSH
23848: LD_VAR 0 5
23852: PPUSH
23853: LD_VAR 0 4
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: CALL_OW 272
23865: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23866: LD_ADDR_VAR 0 8
23870: PUSH
23871: LD_VAR 0 6
23875: PPUSH
23876: LD_VAR 0 4
23880: PPUSH
23881: LD_INT 3
23883: PPUSH
23884: CALL_OW 273
23888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23889: LD_VAR 0 7
23893: PPUSH
23894: LD_VAR 0 8
23898: PPUSH
23899: CALL_OW 488
23903: NOT
23904: IFFALSE 23908
// continue ;
23906: GO 23840
// if HexInfo ( _x , _y ) = 0 then
23908: LD_VAR 0 7
23912: PPUSH
23913: LD_VAR 0 8
23917: PPUSH
23918: CALL_OW 428
23922: PUSH
23923: LD_INT 0
23925: EQUAL
23926: IFFALSE 23951
// begin ComMoveXY ( unit , _x , _y ) ;
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_VAR 0 7
23937: PPUSH
23938: LD_VAR 0 8
23942: PPUSH
23943: CALL_OW 111
// exit ;
23947: POP
23948: POP
23949: GO 23955
// end ; end ;
23951: GO 23840
23953: POP
23954: POP
// end ;
23955: LD_VAR 0 3
23959: RET
// export function ScanBase ( side , base_area ) ; begin
23960: LD_INT 0
23962: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23963: LD_ADDR_VAR 0 3
23967: PUSH
23968: LD_VAR 0 2
23972: PPUSH
23973: LD_INT 81
23975: PUSH
23976: LD_VAR 0 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PPUSH
23985: CALL_OW 70
23989: ST_TO_ADDR
// end ;
23990: LD_VAR 0 3
23994: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
23999: PPUSH
24000: PPUSH
// result := false ;
24001: LD_ADDR_VAR 0 2
24005: PUSH
24006: LD_INT 0
24008: ST_TO_ADDR
// side := GetSide ( unit ) ;
24009: LD_ADDR_VAR 0 3
24013: PUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL_OW 255
24023: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24024: LD_ADDR_VAR 0 4
24028: PUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 248
24038: ST_TO_ADDR
// case nat of 1 :
24039: LD_VAR 0 4
24043: PUSH
24044: LD_INT 1
24046: DOUBLE
24047: EQUAL
24048: IFTRUE 24052
24050: GO 24063
24052: POP
// tech := tech_lassight ; 2 :
24053: LD_ADDR_VAR 0 5
24057: PUSH
24058: LD_INT 12
24060: ST_TO_ADDR
24061: GO 24102
24063: LD_INT 2
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 24082
24071: POP
// tech := tech_mortar ; 3 :
24072: LD_ADDR_VAR 0 5
24076: PUSH
24077: LD_INT 41
24079: ST_TO_ADDR
24080: GO 24102
24082: LD_INT 3
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24090
24088: GO 24101
24090: POP
// tech := tech_bazooka ; end ;
24091: LD_ADDR_VAR 0 5
24095: PUSH
24096: LD_INT 44
24098: ST_TO_ADDR
24099: GO 24102
24101: POP
// if Researched ( side , tech ) then
24102: LD_VAR 0 3
24106: PPUSH
24107: LD_VAR 0 5
24111: PPUSH
24112: CALL_OW 325
24116: IFFALSE 24143
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 5
24125: PUSH
24126: LD_INT 8
24128: PUSH
24129: LD_INT 9
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: LD_VAR 0 4
24141: ARRAY
24142: ST_TO_ADDR
// end ;
24143: LD_VAR 0 2
24147: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24148: LD_INT 0
24150: PPUSH
24151: PPUSH
24152: PPUSH
// if not mines then
24153: LD_VAR 0 2
24157: NOT
24158: IFFALSE 24162
// exit ;
24160: GO 24306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24162: LD_ADDR_VAR 0 5
24166: PUSH
24167: LD_INT 81
24169: PUSH
24170: LD_VAR 0 1
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: LD_INT 21
24184: PUSH
24185: LD_INT 3
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PPUSH
24200: CALL_OW 69
24204: ST_TO_ADDR
// for i in mines do
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_VAR 0 2
24214: PUSH
24215: FOR_IN
24216: IFFALSE 24304
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24218: LD_VAR 0 4
24222: PUSH
24223: LD_INT 1
24225: ARRAY
24226: PPUSH
24227: LD_VAR 0 4
24231: PUSH
24232: LD_INT 2
24234: ARRAY
24235: PPUSH
24236: CALL_OW 458
24240: NOT
24241: IFFALSE 24245
// continue ;
24243: GO 24215
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24245: LD_VAR 0 4
24249: PUSH
24250: LD_INT 1
24252: ARRAY
24253: PPUSH
24254: LD_VAR 0 4
24258: PUSH
24259: LD_INT 2
24261: ARRAY
24262: PPUSH
24263: CALL_OW 428
24267: PUSH
24268: LD_VAR 0 5
24272: IN
24273: IFFALSE 24302
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24275: LD_VAR 0 4
24279: PUSH
24280: LD_INT 1
24282: ARRAY
24283: PPUSH
24284: LD_VAR 0 4
24288: PUSH
24289: LD_INT 2
24291: ARRAY
24292: PPUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 456
// end ;
24302: GO 24215
24304: POP
24305: POP
// end ;
24306: LD_VAR 0 3
24310: RET
// export function Count ( array ) ; begin
24311: LD_INT 0
24313: PPUSH
// result := array + 0 ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_VAR 0 1
24323: PUSH
24324: LD_INT 0
24326: PLUS
24327: ST_TO_ADDR
// end ;
24328: LD_VAR 0 2
24332: RET
// export function IsEmpty ( building ) ; begin
24333: LD_INT 0
24335: PPUSH
// if not building then
24336: LD_VAR 0 1
24340: NOT
24341: IFFALSE 24345
// exit ;
24343: GO 24388
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_VAR 0 1
24354: PUSH
24355: LD_INT 22
24357: PUSH
24358: LD_VAR 0 1
24362: PPUSH
24363: CALL_OW 255
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 58
24374: PUSH
24375: EMPTY
24376: LIST
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PPUSH
24382: CALL_OW 69
24386: IN
24387: ST_TO_ADDR
// end ;
24388: LD_VAR 0 2
24392: RET
// export function IsNotFull ( building ) ; var places ; begin
24393: LD_INT 0
24395: PPUSH
24396: PPUSH
// if not building then
24397: LD_VAR 0 1
24401: NOT
24402: IFFALSE 24406
// exit ;
24404: GO 24434
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24406: LD_ADDR_VAR 0 2
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_INT 3
24418: PUSH
24419: LD_INT 62
24421: PUSH
24422: EMPTY
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PPUSH
24429: CALL_OW 72
24433: ST_TO_ADDR
// end ;
24434: LD_VAR 0 2
24438: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24439: LD_INT 0
24441: PPUSH
24442: PPUSH
24443: PPUSH
24444: PPUSH
// tmp := [ ] ;
24445: LD_ADDR_VAR 0 3
24449: PUSH
24450: EMPTY
24451: ST_TO_ADDR
// list := [ ] ;
24452: LD_ADDR_VAR 0 5
24456: PUSH
24457: EMPTY
24458: ST_TO_ADDR
// for i = 16 to 25 do
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: DOUBLE
24465: LD_INT 16
24467: DEC
24468: ST_TO_ADDR
24469: LD_INT 25
24471: PUSH
24472: FOR_TO
24473: IFFALSE 24546
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_VAR 0 3
24484: PUSH
24485: LD_INT 22
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 255
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 91
24504: PUSH
24505: LD_VAR 0 1
24509: PUSH
24510: LD_INT 6
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: LD_VAR 0 4
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: PPUSH
24538: CALL_OW 69
24542: ADD
24543: ST_TO_ADDR
24544: GO 24472
24546: POP
24547: POP
// for i = 1 to tmp do
24548: LD_ADDR_VAR 0 4
24552: PUSH
24553: DOUBLE
24554: LD_INT 1
24556: DEC
24557: ST_TO_ADDR
24558: LD_VAR 0 3
24562: PUSH
24563: FOR_TO
24564: IFFALSE 24652
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24566: LD_ADDR_VAR 0 5
24570: PUSH
24571: LD_VAR 0 5
24575: PUSH
24576: LD_VAR 0 3
24580: PUSH
24581: LD_VAR 0 4
24585: ARRAY
24586: PPUSH
24587: CALL_OW 266
24591: PUSH
24592: LD_VAR 0 3
24596: PUSH
24597: LD_VAR 0 4
24601: ARRAY
24602: PPUSH
24603: CALL_OW 250
24607: PUSH
24608: LD_VAR 0 3
24612: PUSH
24613: LD_VAR 0 4
24617: ARRAY
24618: PPUSH
24619: CALL_OW 251
24623: PUSH
24624: LD_VAR 0 3
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PPUSH
24635: CALL_OW 254
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: ADD
24649: ST_TO_ADDR
24650: GO 24563
24652: POP
24653: POP
// result := list ;
24654: LD_ADDR_VAR 0 2
24658: PUSH
24659: LD_VAR 0 5
24663: ST_TO_ADDR
// end ;
24664: LD_VAR 0 2
24668: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
// if not factory then
24678: LD_VAR 0 1
24682: NOT
24683: IFFALSE 24687
// exit ;
24685: GO 25280
// if control = control_apeman then
24687: LD_VAR 0 4
24691: PUSH
24692: LD_INT 5
24694: EQUAL
24695: IFFALSE 24804
// begin tmp := UnitsInside ( factory ) ;
24697: LD_ADDR_VAR 0 8
24701: PUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 313
24711: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24712: LD_VAR 0 8
24716: PPUSH
24717: LD_INT 25
24719: PUSH
24720: LD_INT 12
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 72
24731: NOT
24732: IFFALSE 24742
// control := control_manual ;
24734: LD_ADDR_VAR 0 4
24738: PUSH
24739: LD_INT 1
24741: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24742: LD_ADDR_VAR 0 8
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL 24439 0 1
24756: ST_TO_ADDR
// if tmp then
24757: LD_VAR 0 8
24761: IFFALSE 24804
// begin for i in tmp do
24763: LD_ADDR_VAR 0 7
24767: PUSH
24768: LD_VAR 0 8
24772: PUSH
24773: FOR_IN
24774: IFFALSE 24802
// if i [ 1 ] = b_ext_radio then
24776: LD_VAR 0 7
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PUSH
24785: LD_INT 22
24787: EQUAL
24788: IFFALSE 24800
// begin control := control_remote ;
24790: LD_ADDR_VAR 0 4
24794: PUSH
24795: LD_INT 2
24797: ST_TO_ADDR
// break ;
24798: GO 24802
// end ;
24800: GO 24773
24802: POP
24803: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24804: LD_VAR 0 1
24808: PPUSH
24809: LD_VAR 0 2
24813: PPUSH
24814: LD_VAR 0 3
24818: PPUSH
24819: LD_VAR 0 4
24823: PPUSH
24824: LD_VAR 0 5
24828: PPUSH
24829: CALL_OW 448
24833: IFFALSE 24868
// begin result := [ chassis , engine , control , weapon ] ;
24835: LD_ADDR_VAR 0 6
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: LD_VAR 0 3
24849: PUSH
24850: LD_VAR 0 4
24854: PUSH
24855: LD_VAR 0 5
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: ST_TO_ADDR
// exit ;
24866: GO 25280
// end ; _chassis := AvailableChassisList ( factory ) ;
24868: LD_ADDR_VAR 0 9
24872: PUSH
24873: LD_VAR 0 1
24877: PPUSH
24878: CALL_OW 475
24882: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24883: LD_ADDR_VAR 0 11
24887: PUSH
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 476
24897: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24898: LD_ADDR_VAR 0 12
24902: PUSH
24903: LD_VAR 0 1
24907: PPUSH
24908: CALL_OW 477
24912: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24913: LD_ADDR_VAR 0 10
24917: PUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 478
24927: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24928: LD_VAR 0 9
24932: NOT
24933: PUSH
24934: LD_VAR 0 11
24938: NOT
24939: OR
24940: PUSH
24941: LD_VAR 0 12
24945: NOT
24946: OR
24947: PUSH
24948: LD_VAR 0 10
24952: NOT
24953: OR
24954: IFFALSE 24989
// begin result := [ chassis , engine , control , weapon ] ;
24956: LD_ADDR_VAR 0 6
24960: PUSH
24961: LD_VAR 0 2
24965: PUSH
24966: LD_VAR 0 3
24970: PUSH
24971: LD_VAR 0 4
24975: PUSH
24976: LD_VAR 0 5
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
// exit ;
24987: GO 25280
// end ; if not chassis in _chassis then
24989: LD_VAR 0 2
24993: PUSH
24994: LD_VAR 0 9
24998: IN
24999: NOT
25000: IFFALSE 25026
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25002: LD_ADDR_VAR 0 2
25006: PUSH
25007: LD_VAR 0 9
25011: PUSH
25012: LD_INT 1
25014: PPUSH
25015: LD_VAR 0 9
25019: PPUSH
25020: CALL_OW 12
25024: ARRAY
25025: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25026: LD_VAR 0 2
25030: PPUSH
25031: LD_VAR 0 3
25035: PPUSH
25036: CALL 25285 0 2
25040: NOT
25041: IFFALSE 25100
// repeat engine := _engine [ 1 ] ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_VAR 0 11
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25057: LD_ADDR_VAR 0 11
25061: PUSH
25062: LD_VAR 0 11
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: CALL_OW 3
25074: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25075: LD_VAR 0 2
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: CALL 25285 0 2
25089: PUSH
25090: LD_VAR 0 11
25094: PUSH
25095: EMPTY
25096: EQUAL
25097: OR
25098: IFFALSE 25043
// if not control in _control then
25100: LD_VAR 0 4
25104: PUSH
25105: LD_VAR 0 12
25109: IN
25110: NOT
25111: IFFALSE 25137
// control := _control [ rand ( 1 , _control ) ] ;
25113: LD_ADDR_VAR 0 4
25117: PUSH
25118: LD_VAR 0 12
25122: PUSH
25123: LD_INT 1
25125: PPUSH
25126: LD_VAR 0 12
25130: PPUSH
25131: CALL_OW 12
25135: ARRAY
25136: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25137: LD_VAR 0 2
25141: PPUSH
25142: LD_VAR 0 5
25146: PPUSH
25147: CALL 25505 0 2
25151: NOT
25152: IFFALSE 25211
// repeat weapon := _weapon [ 1 ] ;
25154: LD_ADDR_VAR 0 5
25158: PUSH
25159: LD_VAR 0 10
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25168: LD_ADDR_VAR 0 10
25172: PUSH
25173: LD_VAR 0 10
25177: PPUSH
25178: LD_INT 1
25180: PPUSH
25181: CALL_OW 3
25185: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25186: LD_VAR 0 2
25190: PPUSH
25191: LD_VAR 0 5
25195: PPUSH
25196: CALL 25505 0 2
25200: PUSH
25201: LD_VAR 0 10
25205: PUSH
25206: EMPTY
25207: EQUAL
25208: OR
25209: IFFALSE 25154
// result := [ ] ;
25211: LD_ADDR_VAR 0 6
25215: PUSH
25216: EMPTY
25217: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25218: LD_VAR 0 1
25222: PPUSH
25223: LD_VAR 0 2
25227: PPUSH
25228: LD_VAR 0 3
25232: PPUSH
25233: LD_VAR 0 4
25237: PPUSH
25238: LD_VAR 0 5
25242: PPUSH
25243: CALL_OW 448
25247: IFFALSE 25280
// result := [ chassis , engine , control , weapon ] ;
25249: LD_ADDR_VAR 0 6
25253: PUSH
25254: LD_VAR 0 2
25258: PUSH
25259: LD_VAR 0 3
25263: PUSH
25264: LD_VAR 0 4
25268: PUSH
25269: LD_VAR 0 5
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
// end ;
25280: LD_VAR 0 6
25284: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25285: LD_INT 0
25287: PPUSH
// if not chassis or not engine then
25288: LD_VAR 0 1
25292: NOT
25293: PUSH
25294: LD_VAR 0 2
25298: NOT
25299: OR
25300: IFFALSE 25304
// exit ;
25302: GO 25500
// case engine of engine_solar :
25304: LD_VAR 0 2
25308: PUSH
25309: LD_INT 2
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25355
25317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25318: LD_ADDR_VAR 0 3
25322: PUSH
25323: LD_INT 11
25325: PUSH
25326: LD_INT 12
25328: PUSH
25329: LD_INT 13
25331: PUSH
25332: LD_INT 14
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: ST_TO_ADDR
25353: GO 25484
25355: LD_INT 1
25357: DOUBLE
25358: EQUAL
25359: IFTRUE 25363
25361: GO 25425
25363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25364: LD_ADDR_VAR 0 3
25368: PUSH
25369: LD_INT 11
25371: PUSH
25372: LD_INT 12
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 4
25392: PUSH
25393: LD_INT 5
25395: PUSH
25396: LD_INT 21
25398: PUSH
25399: LD_INT 23
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_INT 24
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 25484
25425: LD_INT 3
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25483
25433: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 13
25441: PUSH
25442: LD_INT 14
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 3
25450: PUSH
25451: LD_INT 4
25453: PUSH
25454: LD_INT 5
25456: PUSH
25457: LD_INT 21
25459: PUSH
25460: LD_INT 22
25462: PUSH
25463: LD_INT 23
25465: PUSH
25466: LD_INT 24
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
25481: GO 25484
25483: POP
// result := ( chassis in result ) ;
25484: LD_ADDR_VAR 0 3
25488: PUSH
25489: LD_VAR 0 1
25493: PUSH
25494: LD_VAR 0 3
25498: IN
25499: ST_TO_ADDR
// end ;
25500: LD_VAR 0 3
25504: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25505: LD_INT 0
25507: PPUSH
// if not chassis or not weapon then
25508: LD_VAR 0 1
25512: NOT
25513: PUSH
25514: LD_VAR 0 2
25518: NOT
25519: OR
25520: IFFALSE 25524
// exit ;
25522: GO 26584
// case weapon of us_machine_gun :
25524: LD_VAR 0 2
25528: PUSH
25529: LD_INT 2
25531: DOUBLE
25532: EQUAL
25533: IFTRUE 25537
25535: GO 25567
25537: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 3
25551: PUSH
25552: LD_INT 4
25554: PUSH
25555: LD_INT 5
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
25565: GO 26568
25567: LD_INT 3
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25575
25573: GO 25605
25575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: LD_INT 3
25589: PUSH
25590: LD_INT 4
25592: PUSH
25593: LD_INT 5
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
25603: GO 26568
25605: LD_INT 11
25607: DOUBLE
25608: EQUAL
25609: IFTRUE 25613
25611: GO 25643
25613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25614: LD_ADDR_VAR 0 3
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: LD_INT 4
25630: PUSH
25631: LD_INT 5
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: ST_TO_ADDR
25641: GO 26568
25643: LD_INT 4
25645: DOUBLE
25646: EQUAL
25647: IFTRUE 25651
25649: GO 25677
25651: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25652: LD_ADDR_VAR 0 3
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 3
25662: PUSH
25663: LD_INT 4
25665: PUSH
25666: LD_INT 5
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
25675: GO 26568
25677: LD_INT 5
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25711
25685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25686: LD_ADDR_VAR 0 3
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: LD_INT 4
25699: PUSH
25700: LD_INT 5
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: ST_TO_ADDR
25709: GO 26568
25711: LD_INT 9
25713: DOUBLE
25714: EQUAL
25715: IFTRUE 25719
25717: GO 25745
25719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 3
25730: PUSH
25731: LD_INT 4
25733: PUSH
25734: LD_INT 5
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: ST_TO_ADDR
25743: GO 26568
25745: LD_INT 7
25747: DOUBLE
25748: EQUAL
25749: IFTRUE 25753
25751: GO 25779
25753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: LD_INT 4
25767: PUSH
25768: LD_INT 5
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: ST_TO_ADDR
25777: GO 26568
25779: LD_INT 12
25781: DOUBLE
25782: EQUAL
25783: IFTRUE 25787
25785: GO 25813
25787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25788: LD_ADDR_VAR 0 3
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 3
25798: PUSH
25799: LD_INT 4
25801: PUSH
25802: LD_INT 5
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: ST_TO_ADDR
25811: GO 26568
25813: LD_INT 13
25815: DOUBLE
25816: EQUAL
25817: IFTRUE 25821
25819: GO 25847
25821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25822: LD_ADDR_VAR 0 3
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: LD_INT 4
25835: PUSH
25836: LD_INT 5
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
25845: GO 26568
25847: LD_INT 14
25849: DOUBLE
25850: EQUAL
25851: IFTRUE 25855
25853: GO 25873
25855: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25856: LD_ADDR_VAR 0 3
25860: PUSH
25861: LD_INT 4
25863: PUSH
25864: LD_INT 5
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: ST_TO_ADDR
25871: GO 26568
25873: LD_INT 6
25875: DOUBLE
25876: EQUAL
25877: IFTRUE 25881
25879: GO 25899
25881: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25882: LD_ADDR_VAR 0 3
25886: PUSH
25887: LD_INT 4
25889: PUSH
25890: LD_INT 5
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: ST_TO_ADDR
25897: GO 26568
25899: LD_INT 10
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25925
25907: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25908: LD_ADDR_VAR 0 3
25912: PUSH
25913: LD_INT 4
25915: PUSH
25916: LD_INT 5
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: ST_TO_ADDR
25923: GO 26568
25925: LD_INT 22
25927: DOUBLE
25928: EQUAL
25929: IFTRUE 25933
25931: GO 25959
25933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: LD_INT 11
25941: PUSH
25942: LD_INT 12
25944: PUSH
25945: LD_INT 13
25947: PUSH
25948: LD_INT 14
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: ST_TO_ADDR
25957: GO 26568
25959: LD_INT 23
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25993
25967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: LD_INT 11
25975: PUSH
25976: LD_INT 12
25978: PUSH
25979: LD_INT 13
25981: PUSH
25982: LD_INT 14
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: ST_TO_ADDR
25991: GO 26568
25993: LD_INT 24
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26027
26001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26002: LD_ADDR_VAR 0 3
26006: PUSH
26007: LD_INT 11
26009: PUSH
26010: LD_INT 12
26012: PUSH
26013: LD_INT 13
26015: PUSH
26016: LD_INT 14
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
26025: GO 26568
26027: LD_INT 30
26029: DOUBLE
26030: EQUAL
26031: IFTRUE 26035
26033: GO 26061
26035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_INT 11
26043: PUSH
26044: LD_INT 12
26046: PUSH
26047: LD_INT 13
26049: PUSH
26050: LD_INT 14
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: ST_TO_ADDR
26059: GO 26568
26061: LD_INT 25
26063: DOUBLE
26064: EQUAL
26065: IFTRUE 26069
26067: GO 26087
26069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: LD_INT 13
26077: PUSH
26078: LD_INT 14
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: ST_TO_ADDR
26085: GO 26568
26087: LD_INT 27
26089: DOUBLE
26090: EQUAL
26091: IFTRUE 26095
26093: GO 26113
26095: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26096: LD_ADDR_VAR 0 3
26100: PUSH
26101: LD_INT 13
26103: PUSH
26104: LD_INT 14
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: ST_TO_ADDR
26111: GO 26568
26113: LD_INT 92
26115: DOUBLE
26116: EQUAL
26117: IFTRUE 26121
26119: GO 26147
26121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26122: LD_ADDR_VAR 0 3
26126: PUSH
26127: LD_INT 11
26129: PUSH
26130: LD_INT 12
26132: PUSH
26133: LD_INT 13
26135: PUSH
26136: LD_INT 14
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: ST_TO_ADDR
26145: GO 26568
26147: LD_INT 28
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26173
26155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 13
26163: PUSH
26164: LD_INT 14
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
26171: GO 26568
26173: LD_INT 29
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26199
26181: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26182: LD_ADDR_VAR 0 3
26186: PUSH
26187: LD_INT 13
26189: PUSH
26190: LD_INT 14
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 26568
26199: LD_INT 31
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26225
26207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 13
26215: PUSH
26216: LD_INT 14
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: ST_TO_ADDR
26223: GO 26568
26225: LD_INT 26
26227: DOUBLE
26228: EQUAL
26229: IFTRUE 26233
26231: GO 26251
26233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26234: LD_ADDR_VAR 0 3
26238: PUSH
26239: LD_INT 13
26241: PUSH
26242: LD_INT 14
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: ST_TO_ADDR
26249: GO 26568
26251: LD_INT 42
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26285
26259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26260: LD_ADDR_VAR 0 3
26264: PUSH
26265: LD_INT 21
26267: PUSH
26268: LD_INT 22
26270: PUSH
26271: LD_INT 23
26273: PUSH
26274: LD_INT 24
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 26568
26285: LD_INT 43
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26319
26293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 21
26301: PUSH
26302: LD_INT 22
26304: PUSH
26305: LD_INT 23
26307: PUSH
26308: LD_INT 24
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: ST_TO_ADDR
26317: GO 26568
26319: LD_INT 44
26321: DOUBLE
26322: EQUAL
26323: IFTRUE 26327
26325: GO 26353
26327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_INT 21
26335: PUSH
26336: LD_INT 22
26338: PUSH
26339: LD_INT 23
26341: PUSH
26342: LD_INT 24
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: ST_TO_ADDR
26351: GO 26568
26353: LD_INT 45
26355: DOUBLE
26356: EQUAL
26357: IFTRUE 26361
26359: GO 26387
26361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26362: LD_ADDR_VAR 0 3
26366: PUSH
26367: LD_INT 21
26369: PUSH
26370: LD_INT 22
26372: PUSH
26373: LD_INT 23
26375: PUSH
26376: LD_INT 24
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: ST_TO_ADDR
26385: GO 26568
26387: LD_INT 49
26389: DOUBLE
26390: EQUAL
26391: IFTRUE 26395
26393: GO 26421
26395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26396: LD_ADDR_VAR 0 3
26400: PUSH
26401: LD_INT 21
26403: PUSH
26404: LD_INT 22
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 24
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: ST_TO_ADDR
26419: GO 26568
26421: LD_INT 51
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26455
26429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_INT 21
26437: PUSH
26438: LD_INT 22
26440: PUSH
26441: LD_INT 23
26443: PUSH
26444: LD_INT 24
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: ST_TO_ADDR
26453: GO 26568
26455: LD_INT 52
26457: DOUBLE
26458: EQUAL
26459: IFTRUE 26463
26461: GO 26489
26463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26464: LD_ADDR_VAR 0 3
26468: PUSH
26469: LD_INT 21
26471: PUSH
26472: LD_INT 22
26474: PUSH
26475: LD_INT 23
26477: PUSH
26478: LD_INT 24
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: ST_TO_ADDR
26487: GO 26568
26489: LD_INT 53
26491: DOUBLE
26492: EQUAL
26493: IFTRUE 26497
26495: GO 26515
26497: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_INT 23
26505: PUSH
26506: LD_INT 24
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: ST_TO_ADDR
26513: GO 26568
26515: LD_INT 46
26517: DOUBLE
26518: EQUAL
26519: IFTRUE 26523
26521: GO 26541
26523: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26524: LD_ADDR_VAR 0 3
26528: PUSH
26529: LD_INT 23
26531: PUSH
26532: LD_INT 24
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: ST_TO_ADDR
26539: GO 26568
26541: LD_INT 47
26543: DOUBLE
26544: EQUAL
26545: IFTRUE 26549
26547: GO 26567
26549: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_INT 23
26557: PUSH
26558: LD_INT 24
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: ST_TO_ADDR
26565: GO 26568
26567: POP
// result := ( chassis in result ) ;
26568: LD_ADDR_VAR 0 3
26572: PUSH
26573: LD_VAR 0 1
26577: PUSH
26578: LD_VAR 0 3
26582: IN
26583: ST_TO_ADDR
// end ;
26584: LD_VAR 0 3
26588: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26589: LD_INT 0
26591: PPUSH
26592: PPUSH
26593: PPUSH
26594: PPUSH
26595: PPUSH
26596: PPUSH
26597: PPUSH
// result := array ;
26598: LD_ADDR_VAR 0 5
26602: PUSH
26603: LD_VAR 0 1
26607: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26608: LD_VAR 0 1
26612: NOT
26613: PUSH
26614: LD_VAR 0 2
26618: NOT
26619: OR
26620: PUSH
26621: LD_VAR 0 3
26625: NOT
26626: OR
26627: PUSH
26628: LD_VAR 0 2
26632: PUSH
26633: LD_VAR 0 1
26637: GREATER
26638: OR
26639: PUSH
26640: LD_VAR 0 3
26644: PUSH
26645: LD_VAR 0 1
26649: GREATER
26650: OR
26651: IFFALSE 26655
// exit ;
26653: GO 26951
// if direction then
26655: LD_VAR 0 4
26659: IFFALSE 26723
// begin d := 1 ;
26661: LD_ADDR_VAR 0 9
26665: PUSH
26666: LD_INT 1
26668: ST_TO_ADDR
// if i_from > i_to then
26669: LD_VAR 0 2
26673: PUSH
26674: LD_VAR 0 3
26678: GREATER
26679: IFFALSE 26705
// length := ( array - i_from ) + i_to else
26681: LD_ADDR_VAR 0 11
26685: PUSH
26686: LD_VAR 0 1
26690: PUSH
26691: LD_VAR 0 2
26695: MINUS
26696: PUSH
26697: LD_VAR 0 3
26701: PLUS
26702: ST_TO_ADDR
26703: GO 26721
// length := i_to - i_from ;
26705: LD_ADDR_VAR 0 11
26709: PUSH
26710: LD_VAR 0 3
26714: PUSH
26715: LD_VAR 0 2
26719: MINUS
26720: ST_TO_ADDR
// end else
26721: GO 26784
// begin d := - 1 ;
26723: LD_ADDR_VAR 0 9
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: ST_TO_ADDR
// if i_from > i_to then
26732: LD_VAR 0 2
26736: PUSH
26737: LD_VAR 0 3
26741: GREATER
26742: IFFALSE 26762
// length := i_from - i_to else
26744: LD_ADDR_VAR 0 11
26748: PUSH
26749: LD_VAR 0 2
26753: PUSH
26754: LD_VAR 0 3
26758: MINUS
26759: ST_TO_ADDR
26760: GO 26784
// length := ( array - i_to ) + i_from ;
26762: LD_ADDR_VAR 0 11
26766: PUSH
26767: LD_VAR 0 1
26771: PUSH
26772: LD_VAR 0 3
26776: MINUS
26777: PUSH
26778: LD_VAR 0 2
26782: PLUS
26783: ST_TO_ADDR
// end ; if not length then
26784: LD_VAR 0 11
26788: NOT
26789: IFFALSE 26793
// exit ;
26791: GO 26951
// tmp := array ;
26793: LD_ADDR_VAR 0 10
26797: PUSH
26798: LD_VAR 0 1
26802: ST_TO_ADDR
// for i = 1 to length do
26803: LD_ADDR_VAR 0 6
26807: PUSH
26808: DOUBLE
26809: LD_INT 1
26811: DEC
26812: ST_TO_ADDR
26813: LD_VAR 0 11
26817: PUSH
26818: FOR_TO
26819: IFFALSE 26939
// begin for j = 1 to array do
26821: LD_ADDR_VAR 0 7
26825: PUSH
26826: DOUBLE
26827: LD_INT 1
26829: DEC
26830: ST_TO_ADDR
26831: LD_VAR 0 1
26835: PUSH
26836: FOR_TO
26837: IFFALSE 26925
// begin k := j + d ;
26839: LD_ADDR_VAR 0 8
26843: PUSH
26844: LD_VAR 0 7
26848: PUSH
26849: LD_VAR 0 9
26853: PLUS
26854: ST_TO_ADDR
// if k > array then
26855: LD_VAR 0 8
26859: PUSH
26860: LD_VAR 0 1
26864: GREATER
26865: IFFALSE 26875
// k := 1 ;
26867: LD_ADDR_VAR 0 8
26871: PUSH
26872: LD_INT 1
26874: ST_TO_ADDR
// if not k then
26875: LD_VAR 0 8
26879: NOT
26880: IFFALSE 26892
// k := array ;
26882: LD_ADDR_VAR 0 8
26886: PUSH
26887: LD_VAR 0 1
26891: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26892: LD_ADDR_VAR 0 10
26896: PUSH
26897: LD_VAR 0 10
26901: PPUSH
26902: LD_VAR 0 8
26906: PPUSH
26907: LD_VAR 0 1
26911: PUSH
26912: LD_VAR 0 7
26916: ARRAY
26917: PPUSH
26918: CALL_OW 1
26922: ST_TO_ADDR
// end ;
26923: GO 26836
26925: POP
26926: POP
// array := tmp ;
26927: LD_ADDR_VAR 0 1
26931: PUSH
26932: LD_VAR 0 10
26936: ST_TO_ADDR
// end ;
26937: GO 26818
26939: POP
26940: POP
// result := array ;
26941: LD_ADDR_VAR 0 5
26945: PUSH
26946: LD_VAR 0 1
26950: ST_TO_ADDR
// end ;
26951: LD_VAR 0 5
26955: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26956: LD_INT 0
26958: PPUSH
26959: PPUSH
// result := 0 ;
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_INT 0
26967: ST_TO_ADDR
// if not array or not value in array then
26968: LD_VAR 0 1
26972: NOT
26973: PUSH
26974: LD_VAR 0 2
26978: PUSH
26979: LD_VAR 0 1
26983: IN
26984: NOT
26985: OR
26986: IFFALSE 26990
// exit ;
26988: GO 27044
// for i = 1 to array do
26990: LD_ADDR_VAR 0 4
26994: PUSH
26995: DOUBLE
26996: LD_INT 1
26998: DEC
26999: ST_TO_ADDR
27000: LD_VAR 0 1
27004: PUSH
27005: FOR_TO
27006: IFFALSE 27042
// if value = array [ i ] then
27008: LD_VAR 0 2
27012: PUSH
27013: LD_VAR 0 1
27017: PUSH
27018: LD_VAR 0 4
27022: ARRAY
27023: EQUAL
27024: IFFALSE 27040
// begin result := i ;
27026: LD_ADDR_VAR 0 3
27030: PUSH
27031: LD_VAR 0 4
27035: ST_TO_ADDR
// exit ;
27036: POP
27037: POP
27038: GO 27044
// end ;
27040: GO 27005
27042: POP
27043: POP
// end ;
27044: LD_VAR 0 3
27048: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27049: LD_INT 0
27051: PPUSH
// vc_chassis := chassis ;
27052: LD_ADDR_OWVAR 37
27056: PUSH
27057: LD_VAR 0 1
27061: ST_TO_ADDR
// vc_engine := engine ;
27062: LD_ADDR_OWVAR 39
27066: PUSH
27067: LD_VAR 0 2
27071: ST_TO_ADDR
// vc_control := control ;
27072: LD_ADDR_OWVAR 38
27076: PUSH
27077: LD_VAR 0 3
27081: ST_TO_ADDR
// vc_weapon := weapon ;
27082: LD_ADDR_OWVAR 40
27086: PUSH
27087: LD_VAR 0 4
27091: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27092: LD_ADDR_OWVAR 41
27096: PUSH
27097: LD_VAR 0 5
27101: ST_TO_ADDR
// end ;
27102: LD_VAR 0 6
27106: RET
// export function WantPlant ( unit ) ; var task ; begin
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
// result := false ;
27111: LD_ADDR_VAR 0 2
27115: PUSH
27116: LD_INT 0
27118: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL_OW 437
27133: ST_TO_ADDR
// if task then
27134: LD_VAR 0 3
27138: IFFALSE 27166
// if task [ 1 ] [ 1 ] = p then
27140: LD_VAR 0 3
27144: PUSH
27145: LD_INT 1
27147: ARRAY
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PUSH
27153: LD_STRING p
27155: EQUAL
27156: IFFALSE 27166
// result := true ;
27158: LD_ADDR_VAR 0 2
27162: PUSH
27163: LD_INT 1
27165: ST_TO_ADDR
// end ;
27166: LD_VAR 0 2
27170: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27171: LD_INT 0
27173: PPUSH
27174: PPUSH
27175: PPUSH
27176: PPUSH
// if pos < 1 then
27177: LD_VAR 0 2
27181: PUSH
27182: LD_INT 1
27184: LESS
27185: IFFALSE 27189
// exit ;
27187: GO 27492
// if pos = 1 then
27189: LD_VAR 0 2
27193: PUSH
27194: LD_INT 1
27196: EQUAL
27197: IFFALSE 27230
// result := Replace ( arr , pos [ 1 ] , value ) else
27199: LD_ADDR_VAR 0 4
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_VAR 0 2
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: LD_VAR 0 3
27222: PPUSH
27223: CALL_OW 1
27227: ST_TO_ADDR
27228: GO 27492
// begin tmp := arr ;
27230: LD_ADDR_VAR 0 6
27234: PUSH
27235: LD_VAR 0 1
27239: ST_TO_ADDR
// s_arr := [ tmp ] ;
27240: LD_ADDR_VAR 0 7
27244: PUSH
27245: LD_VAR 0 6
27249: PUSH
27250: EMPTY
27251: LIST
27252: ST_TO_ADDR
// for i = 1 to pos - 1 do
27253: LD_ADDR_VAR 0 5
27257: PUSH
27258: DOUBLE
27259: LD_INT 1
27261: DEC
27262: ST_TO_ADDR
27263: LD_VAR 0 2
27267: PUSH
27268: LD_INT 1
27270: MINUS
27271: PUSH
27272: FOR_TO
27273: IFFALSE 27318
// begin tmp := tmp [ pos [ i ] ] ;
27275: LD_ADDR_VAR 0 6
27279: PUSH
27280: LD_VAR 0 6
27284: PUSH
27285: LD_VAR 0 2
27289: PUSH
27290: LD_VAR 0 5
27294: ARRAY
27295: ARRAY
27296: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27297: LD_ADDR_VAR 0 7
27301: PUSH
27302: LD_VAR 0 7
27306: PUSH
27307: LD_VAR 0 6
27311: PUSH
27312: EMPTY
27313: LIST
27314: ADD
27315: ST_TO_ADDR
// end ;
27316: GO 27272
27318: POP
27319: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27320: LD_ADDR_VAR 0 6
27324: PUSH
27325: LD_VAR 0 6
27329: PPUSH
27330: LD_VAR 0 2
27334: PUSH
27335: LD_VAR 0 2
27339: ARRAY
27340: PPUSH
27341: LD_VAR 0 3
27345: PPUSH
27346: CALL_OW 1
27350: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27351: LD_ADDR_VAR 0 7
27355: PUSH
27356: LD_VAR 0 7
27360: PPUSH
27361: LD_VAR 0 7
27365: PPUSH
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 1
27375: ST_TO_ADDR
// for i = s_arr downto 2 do
27376: LD_ADDR_VAR 0 5
27380: PUSH
27381: DOUBLE
27382: LD_VAR 0 7
27386: INC
27387: ST_TO_ADDR
27388: LD_INT 2
27390: PUSH
27391: FOR_DOWNTO
27392: IFFALSE 27476
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27394: LD_ADDR_VAR 0 6
27398: PUSH
27399: LD_VAR 0 7
27403: PUSH
27404: LD_VAR 0 5
27408: PUSH
27409: LD_INT 1
27411: MINUS
27412: ARRAY
27413: PPUSH
27414: LD_VAR 0 2
27418: PUSH
27419: LD_VAR 0 5
27423: PUSH
27424: LD_INT 1
27426: MINUS
27427: ARRAY
27428: PPUSH
27429: LD_VAR 0 7
27433: PUSH
27434: LD_VAR 0 5
27438: ARRAY
27439: PPUSH
27440: CALL_OW 1
27444: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27445: LD_ADDR_VAR 0 7
27449: PUSH
27450: LD_VAR 0 7
27454: PPUSH
27455: LD_VAR 0 5
27459: PUSH
27460: LD_INT 1
27462: MINUS
27463: PPUSH
27464: LD_VAR 0 6
27468: PPUSH
27469: CALL_OW 1
27473: ST_TO_ADDR
// end ;
27474: GO 27391
27476: POP
27477: POP
// result := s_arr [ 1 ] ;
27478: LD_ADDR_VAR 0 4
27482: PUSH
27483: LD_VAR 0 7
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: ST_TO_ADDR
// end ; end ;
27492: LD_VAR 0 4
27496: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
// if not list then
27501: LD_VAR 0 1
27505: NOT
27506: IFFALSE 27510
// exit ;
27508: GO 27601
// i := list [ pos1 ] ;
27510: LD_ADDR_VAR 0 5
27514: PUSH
27515: LD_VAR 0 1
27519: PUSH
27520: LD_VAR 0 2
27524: ARRAY
27525: ST_TO_ADDR
// if not i then
27526: LD_VAR 0 5
27530: NOT
27531: IFFALSE 27535
// exit ;
27533: GO 27601
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27535: LD_ADDR_VAR 0 1
27539: PUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_VAR 0 1
27554: PUSH
27555: LD_VAR 0 3
27559: ARRAY
27560: PPUSH
27561: CALL_OW 1
27565: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27566: LD_ADDR_VAR 0 1
27570: PUSH
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_VAR 0 3
27580: PPUSH
27581: LD_VAR 0 5
27585: PPUSH
27586: CALL_OW 1
27590: ST_TO_ADDR
// result := list ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_VAR 0 1
27600: ST_TO_ADDR
// end ;
27601: LD_VAR 0 4
27605: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27606: LD_INT 0
27608: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: LD_VAR 0 1
27618: PPUSH
27619: CALL_OW 250
27623: PPUSH
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 251
27633: PPUSH
27634: LD_VAR 0 2
27638: PPUSH
27639: LD_VAR 0 3
27643: PPUSH
27644: LD_VAR 0 4
27648: PPUSH
27649: CALL 27659 0 5
27653: ST_TO_ADDR
// end ;
27654: LD_VAR 0 5
27658: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27659: LD_INT 0
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
// if not list then
27665: LD_VAR 0 3
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 28062
// result := [ ] ;
27674: LD_ADDR_VAR 0 6
27678: PUSH
27679: EMPTY
27680: ST_TO_ADDR
// for i in list do
27681: LD_ADDR_VAR 0 7
27685: PUSH
27686: LD_VAR 0 3
27690: PUSH
27691: FOR_IN
27692: IFFALSE 27894
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27694: LD_ADDR_VAR 0 9
27698: PUSH
27699: LD_VAR 0 7
27703: PPUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: LD_VAR 0 2
27713: PPUSH
27714: CALL_OW 297
27718: ST_TO_ADDR
// if not result then
27719: LD_VAR 0 6
27723: NOT
27724: IFFALSE 27750
// result := [ [ i , tmp ] ] else
27726: LD_ADDR_VAR 0 6
27730: PUSH
27731: LD_VAR 0 7
27735: PUSH
27736: LD_VAR 0 9
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: EMPTY
27746: LIST
27747: ST_TO_ADDR
27748: GO 27892
// begin if result [ result ] [ 2 ] < tmp then
27750: LD_VAR 0 6
27754: PUSH
27755: LD_VAR 0 6
27759: ARRAY
27760: PUSH
27761: LD_INT 2
27763: ARRAY
27764: PUSH
27765: LD_VAR 0 9
27769: LESS
27770: IFFALSE 27812
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27772: LD_ADDR_VAR 0 6
27776: PUSH
27777: LD_VAR 0 6
27781: PPUSH
27782: LD_VAR 0 6
27786: PUSH
27787: LD_INT 1
27789: PLUS
27790: PPUSH
27791: LD_VAR 0 7
27795: PUSH
27796: LD_VAR 0 9
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 2
27809: ST_TO_ADDR
27810: GO 27892
// for j = 1 to result do
27812: LD_ADDR_VAR 0 8
27816: PUSH
27817: DOUBLE
27818: LD_INT 1
27820: DEC
27821: ST_TO_ADDR
27822: LD_VAR 0 6
27826: PUSH
27827: FOR_TO
27828: IFFALSE 27890
// begin if tmp < result [ j ] [ 2 ] then
27830: LD_VAR 0 9
27834: PUSH
27835: LD_VAR 0 6
27839: PUSH
27840: LD_VAR 0 8
27844: ARRAY
27845: PUSH
27846: LD_INT 2
27848: ARRAY
27849: LESS
27850: IFFALSE 27888
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27852: LD_ADDR_VAR 0 6
27856: PUSH
27857: LD_VAR 0 6
27861: PPUSH
27862: LD_VAR 0 8
27866: PPUSH
27867: LD_VAR 0 7
27871: PUSH
27872: LD_VAR 0 9
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PPUSH
27881: CALL_OW 2
27885: ST_TO_ADDR
// break ;
27886: GO 27890
// end ; end ;
27888: GO 27827
27890: POP
27891: POP
// end ; end ;
27892: GO 27691
27894: POP
27895: POP
// if result and not asc then
27896: LD_VAR 0 6
27900: PUSH
27901: LD_VAR 0 4
27905: NOT
27906: AND
27907: IFFALSE 27982
// begin tmp := result ;
27909: LD_ADDR_VAR 0 9
27913: PUSH
27914: LD_VAR 0 6
27918: ST_TO_ADDR
// for i = tmp downto 1 do
27919: LD_ADDR_VAR 0 7
27923: PUSH
27924: DOUBLE
27925: LD_VAR 0 9
27929: INC
27930: ST_TO_ADDR
27931: LD_INT 1
27933: PUSH
27934: FOR_DOWNTO
27935: IFFALSE 27980
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27937: LD_ADDR_VAR 0 6
27941: PUSH
27942: LD_VAR 0 6
27946: PPUSH
27947: LD_VAR 0 9
27951: PUSH
27952: LD_VAR 0 7
27956: MINUS
27957: PUSH
27958: LD_INT 1
27960: PLUS
27961: PPUSH
27962: LD_VAR 0 9
27966: PUSH
27967: LD_VAR 0 7
27971: ARRAY
27972: PPUSH
27973: CALL_OW 1
27977: ST_TO_ADDR
27978: GO 27934
27980: POP
27981: POP
// end ; tmp := [ ] ;
27982: LD_ADDR_VAR 0 9
27986: PUSH
27987: EMPTY
27988: ST_TO_ADDR
// if mode then
27989: LD_VAR 0 5
27993: IFFALSE 28062
// begin for i = 1 to result do
27995: LD_ADDR_VAR 0 7
27999: PUSH
28000: DOUBLE
28001: LD_INT 1
28003: DEC
28004: ST_TO_ADDR
28005: LD_VAR 0 6
28009: PUSH
28010: FOR_TO
28011: IFFALSE 28050
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28013: LD_ADDR_VAR 0 9
28017: PUSH
28018: LD_VAR 0 9
28022: PPUSH
28023: LD_VAR 0 7
28027: PPUSH
28028: LD_VAR 0 6
28032: PUSH
28033: LD_VAR 0 7
28037: ARRAY
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: PPUSH
28043: CALL_OW 1
28047: ST_TO_ADDR
28048: GO 28010
28050: POP
28051: POP
// result := tmp ;
28052: LD_ADDR_VAR 0 6
28056: PUSH
28057: LD_VAR 0 9
28061: ST_TO_ADDR
// end ; end ;
28062: LD_VAR 0 6
28066: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28067: LD_INT 0
28069: PPUSH
28070: PPUSH
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28075: LD_ADDR_VAR 0 5
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
// if not x or not y then
28097: LD_VAR 0 2
28101: NOT
28102: PUSH
28103: LD_VAR 0 3
28107: NOT
28108: OR
28109: IFFALSE 28113
// exit ;
28111: GO 29763
// if not range then
28113: LD_VAR 0 4
28117: NOT
28118: IFFALSE 28128
// range := 10 ;
28120: LD_ADDR_VAR 0 4
28124: PUSH
28125: LD_INT 10
28127: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28128: LD_ADDR_VAR 0 8
28132: PUSH
28133: LD_INT 81
28135: PUSH
28136: LD_VAR 0 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 92
28147: PUSH
28148: LD_VAR 0 2
28152: PUSH
28153: LD_VAR 0 3
28157: PUSH
28158: LD_VAR 0 4
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 21
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 69
28195: ST_TO_ADDR
// if not tmp then
28196: LD_VAR 0 8
28200: NOT
28201: IFFALSE 28205
// exit ;
28203: GO 29763
// for i in tmp do
28205: LD_ADDR_VAR 0 6
28209: PUSH
28210: LD_VAR 0 8
28214: PUSH
28215: FOR_IN
28216: IFFALSE 29738
// begin points := [ 0 , 0 , 0 ] ;
28218: LD_ADDR_VAR 0 9
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: ST_TO_ADDR
// bpoints := 1 ;
28237: LD_ADDR_VAR 0 10
28241: PUSH
28242: LD_INT 1
28244: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28245: LD_VAR 0 6
28249: PPUSH
28250: CALL_OW 247
28254: PUSH
28255: LD_INT 1
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28841
28263: POP
// begin if GetClass ( i ) = 1 then
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 257
28273: PUSH
28274: LD_INT 1
28276: EQUAL
28277: IFFALSE 28298
// points := [ 10 , 5 , 3 ] ;
28279: LD_ADDR_VAR 0 9
28283: PUSH
28284: LD_INT 10
28286: PUSH
28287: LD_INT 5
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28298: LD_VAR 0 6
28302: PPUSH
28303: CALL_OW 257
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 3
28313: PUSH
28314: LD_INT 4
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: IN
28322: IFFALSE 28343
// points := [ 3 , 2 , 1 ] ;
28324: LD_ADDR_VAR 0 9
28328: PUSH
28329: LD_INT 3
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28343: LD_VAR 0 6
28347: PPUSH
28348: CALL_OW 257
28352: PUSH
28353: LD_INT 5
28355: EQUAL
28356: IFFALSE 28377
// points := [ 130 , 5 , 2 ] ;
28358: LD_ADDR_VAR 0 9
28362: PUSH
28363: LD_INT 130
28365: PUSH
28366: LD_INT 5
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28377: LD_VAR 0 6
28381: PPUSH
28382: CALL_OW 257
28386: PUSH
28387: LD_INT 8
28389: EQUAL
28390: IFFALSE 28411
// points := [ 35 , 35 , 30 ] ;
28392: LD_ADDR_VAR 0 9
28396: PUSH
28397: LD_INT 35
28399: PUSH
28400: LD_INT 35
28402: PUSH
28403: LD_INT 30
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28411: LD_VAR 0 6
28415: PPUSH
28416: CALL_OW 257
28420: PUSH
28421: LD_INT 9
28423: EQUAL
28424: IFFALSE 28445
// points := [ 20 , 55 , 40 ] ;
28426: LD_ADDR_VAR 0 9
28430: PUSH
28431: LD_INT 20
28433: PUSH
28434: LD_INT 55
28436: PUSH
28437: LD_INT 40
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28445: LD_VAR 0 6
28449: PPUSH
28450: CALL_OW 257
28454: PUSH
28455: LD_INT 12
28457: PUSH
28458: LD_INT 16
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: IN
28465: IFFALSE 28486
// points := [ 5 , 3 , 2 ] ;
28467: LD_ADDR_VAR 0 9
28471: PUSH
28472: LD_INT 5
28474: PUSH
28475: LD_INT 3
28477: PUSH
28478: LD_INT 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28486: LD_VAR 0 6
28490: PPUSH
28491: CALL_OW 257
28495: PUSH
28496: LD_INT 17
28498: EQUAL
28499: IFFALSE 28520
// points := [ 100 , 50 , 75 ] ;
28501: LD_ADDR_VAR 0 9
28505: PUSH
28506: LD_INT 100
28508: PUSH
28509: LD_INT 50
28511: PUSH
28512: LD_INT 75
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28520: LD_VAR 0 6
28524: PPUSH
28525: CALL_OW 257
28529: PUSH
28530: LD_INT 15
28532: EQUAL
28533: IFFALSE 28554
// points := [ 10 , 5 , 3 ] ;
28535: LD_ADDR_VAR 0 9
28539: PUSH
28540: LD_INT 10
28542: PUSH
28543: LD_INT 5
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28554: LD_VAR 0 6
28558: PPUSH
28559: CALL_OW 257
28563: PUSH
28564: LD_INT 14
28566: EQUAL
28567: IFFALSE 28588
// points := [ 10 , 0 , 0 ] ;
28569: LD_ADDR_VAR 0 9
28573: PUSH
28574: LD_INT 10
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28588: LD_VAR 0 6
28592: PPUSH
28593: CALL_OW 257
28597: PUSH
28598: LD_INT 11
28600: EQUAL
28601: IFFALSE 28622
// points := [ 30 , 10 , 5 ] ;
28603: LD_ADDR_VAR 0 9
28607: PUSH
28608: LD_INT 30
28610: PUSH
28611: LD_INT 10
28613: PUSH
28614: LD_INT 5
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28622: LD_VAR 0 1
28626: PPUSH
28627: LD_INT 5
28629: PPUSH
28630: CALL_OW 321
28634: PUSH
28635: LD_INT 2
28637: EQUAL
28638: IFFALSE 28655
// bpoints := bpoints * 1.8 ;
28640: LD_ADDR_VAR 0 10
28644: PUSH
28645: LD_VAR 0 10
28649: PUSH
28650: LD_REAL  1.80000000000000E+0000
28653: MUL
28654: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28655: LD_VAR 0 6
28659: PPUSH
28660: CALL_OW 257
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 3
28673: PUSH
28674: LD_INT 4
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: IN
28683: PUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: LD_INT 51
28691: PPUSH
28692: CALL_OW 321
28696: PUSH
28697: LD_INT 2
28699: EQUAL
28700: AND
28701: IFFALSE 28718
// bpoints := bpoints * 1.2 ;
28703: LD_ADDR_VAR 0 10
28707: PUSH
28708: LD_VAR 0 10
28712: PUSH
28713: LD_REAL  1.20000000000000E+0000
28716: MUL
28717: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28718: LD_VAR 0 6
28722: PPUSH
28723: CALL_OW 257
28727: PUSH
28728: LD_INT 5
28730: PUSH
28731: LD_INT 7
28733: PUSH
28734: LD_INT 9
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: IN
28742: PUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: LD_INT 52
28750: PPUSH
28751: CALL_OW 321
28755: PUSH
28756: LD_INT 2
28758: EQUAL
28759: AND
28760: IFFALSE 28777
// bpoints := bpoints * 1.5 ;
28762: LD_ADDR_VAR 0 10
28766: PUSH
28767: LD_VAR 0 10
28771: PUSH
28772: LD_REAL  1.50000000000000E+0000
28775: MUL
28776: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28777: LD_VAR 0 1
28781: PPUSH
28782: LD_INT 66
28784: PPUSH
28785: CALL_OW 321
28789: PUSH
28790: LD_INT 2
28792: EQUAL
28793: IFFALSE 28810
// bpoints := bpoints * 1.1 ;
28795: LD_ADDR_VAR 0 10
28799: PUSH
28800: LD_VAR 0 10
28804: PUSH
28805: LD_REAL  1.10000000000000E+0000
28808: MUL
28809: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28810: LD_ADDR_VAR 0 10
28814: PUSH
28815: LD_VAR 0 10
28819: PUSH
28820: LD_VAR 0 6
28824: PPUSH
28825: LD_INT 1
28827: PPUSH
28828: CALL_OW 259
28832: PUSH
28833: LD_REAL  1.15000000000000E+0000
28836: MUL
28837: MUL
28838: ST_TO_ADDR
// end ; unit_vehicle :
28839: GO 29667
28841: LD_INT 2
28843: DOUBLE
28844: EQUAL
28845: IFTRUE 28849
28847: GO 29655
28849: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28850: LD_VAR 0 6
28854: PPUSH
28855: CALL_OW 264
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: LD_INT 42
28865: PUSH
28866: LD_INT 24
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: IN
28874: IFFALSE 28895
// points := [ 25 , 5 , 3 ] ;
28876: LD_ADDR_VAR 0 9
28880: PUSH
28881: LD_INT 25
28883: PUSH
28884: LD_INT 5
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28895: LD_VAR 0 6
28899: PPUSH
28900: CALL_OW 264
28904: PUSH
28905: LD_INT 4
28907: PUSH
28908: LD_INT 43
28910: PUSH
28911: LD_INT 25
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: LIST
28918: IN
28919: IFFALSE 28940
// points := [ 40 , 15 , 5 ] ;
28921: LD_ADDR_VAR 0 9
28925: PUSH
28926: LD_INT 40
28928: PUSH
28929: LD_INT 15
28931: PUSH
28932: LD_INT 5
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28940: LD_VAR 0 6
28944: PPUSH
28945: CALL_OW 264
28949: PUSH
28950: LD_INT 3
28952: PUSH
28953: LD_INT 23
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: IN
28960: IFFALSE 28981
// points := [ 7 , 25 , 8 ] ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_INT 7
28969: PUSH
28970: LD_INT 25
28972: PUSH
28973: LD_INT 8
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 264
28990: PUSH
28991: LD_INT 5
28993: PUSH
28994: LD_INT 27
28996: PUSH
28997: LD_INT 44
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: IN
29005: IFFALSE 29026
// points := [ 14 , 50 , 16 ] ;
29007: LD_ADDR_VAR 0 9
29011: PUSH
29012: LD_INT 14
29014: PUSH
29015: LD_INT 50
29017: PUSH
29018: LD_INT 16
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29026: LD_VAR 0 6
29030: PPUSH
29031: CALL_OW 264
29035: PUSH
29036: LD_INT 6
29038: PUSH
29039: LD_INT 46
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: IN
29046: IFFALSE 29067
// points := [ 32 , 120 , 70 ] ;
29048: LD_ADDR_VAR 0 9
29052: PUSH
29053: LD_INT 32
29055: PUSH
29056: LD_INT 120
29058: PUSH
29059: LD_INT 70
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29067: LD_VAR 0 6
29071: PPUSH
29072: CALL_OW 264
29076: PUSH
29077: LD_INT 7
29079: PUSH
29080: LD_INT 28
29082: PUSH
29083: LD_INT 45
29085: PUSH
29086: LD_INT 92
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: IN
29095: IFFALSE 29116
// points := [ 35 , 20 , 45 ] ;
29097: LD_ADDR_VAR 0 9
29101: PUSH
29102: LD_INT 35
29104: PUSH
29105: LD_INT 20
29107: PUSH
29108: LD_INT 45
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29116: LD_VAR 0 6
29120: PPUSH
29121: CALL_OW 264
29125: PUSH
29126: LD_INT 47
29128: PUSH
29129: EMPTY
29130: LIST
29131: IN
29132: IFFALSE 29153
// points := [ 67 , 45 , 75 ] ;
29134: LD_ADDR_VAR 0 9
29138: PUSH
29139: LD_INT 67
29141: PUSH
29142: LD_INT 45
29144: PUSH
29145: LD_INT 75
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29153: LD_VAR 0 6
29157: PPUSH
29158: CALL_OW 264
29162: PUSH
29163: LD_INT 26
29165: PUSH
29166: EMPTY
29167: LIST
29168: IN
29169: IFFALSE 29190
// points := [ 120 , 30 , 80 ] ;
29171: LD_ADDR_VAR 0 9
29175: PUSH
29176: LD_INT 120
29178: PUSH
29179: LD_INT 30
29181: PUSH
29182: LD_INT 80
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29190: LD_VAR 0 6
29194: PPUSH
29195: CALL_OW 264
29199: PUSH
29200: LD_INT 22
29202: PUSH
29203: EMPTY
29204: LIST
29205: IN
29206: IFFALSE 29227
// points := [ 40 , 1 , 1 ] ;
29208: LD_ADDR_VAR 0 9
29212: PUSH
29213: LD_INT 40
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29227: LD_VAR 0 6
29231: PPUSH
29232: CALL_OW 264
29236: PUSH
29237: LD_INT 29
29239: PUSH
29240: EMPTY
29241: LIST
29242: IN
29243: IFFALSE 29264
// points := [ 70 , 200 , 400 ] ;
29245: LD_ADDR_VAR 0 9
29249: PUSH
29250: LD_INT 70
29252: PUSH
29253: LD_INT 200
29255: PUSH
29256: LD_INT 400
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29264: LD_VAR 0 6
29268: PPUSH
29269: CALL_OW 264
29273: PUSH
29274: LD_INT 14
29276: PUSH
29277: LD_INT 53
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: IN
29284: IFFALSE 29305
// points := [ 40 , 10 , 20 ] ;
29286: LD_ADDR_VAR 0 9
29290: PUSH
29291: LD_INT 40
29293: PUSH
29294: LD_INT 10
29296: PUSH
29297: LD_INT 20
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29305: LD_VAR 0 6
29309: PPUSH
29310: CALL_OW 264
29314: PUSH
29315: LD_INT 9
29317: PUSH
29318: EMPTY
29319: LIST
29320: IN
29321: IFFALSE 29342
// points := [ 5 , 70 , 20 ] ;
29323: LD_ADDR_VAR 0 9
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: LD_INT 70
29333: PUSH
29334: LD_INT 20
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29342: LD_VAR 0 6
29346: PPUSH
29347: CALL_OW 264
29351: PUSH
29352: LD_INT 10
29354: PUSH
29355: EMPTY
29356: LIST
29357: IN
29358: IFFALSE 29379
// points := [ 35 , 110 , 70 ] ;
29360: LD_ADDR_VAR 0 9
29364: PUSH
29365: LD_INT 35
29367: PUSH
29368: LD_INT 110
29370: PUSH
29371: LD_INT 70
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29379: LD_VAR 0 6
29383: PPUSH
29384: CALL_OW 265
29388: PUSH
29389: LD_INT 25
29391: EQUAL
29392: IFFALSE 29413
// points := [ 80 , 65 , 100 ] ;
29394: LD_ADDR_VAR 0 9
29398: PUSH
29399: LD_INT 80
29401: PUSH
29402: LD_INT 65
29404: PUSH
29405: LD_INT 100
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: LIST
29412: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29413: LD_VAR 0 6
29417: PPUSH
29418: CALL_OW 263
29422: PUSH
29423: LD_INT 1
29425: EQUAL
29426: IFFALSE 29461
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29428: LD_ADDR_VAR 0 10
29432: PUSH
29433: LD_VAR 0 10
29437: PUSH
29438: LD_VAR 0 6
29442: PPUSH
29443: CALL_OW 311
29447: PPUSH
29448: LD_INT 3
29450: PPUSH
29451: CALL_OW 259
29455: PUSH
29456: LD_INT 4
29458: MUL
29459: MUL
29460: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29461: LD_VAR 0 6
29465: PPUSH
29466: CALL_OW 263
29470: PUSH
29471: LD_INT 2
29473: EQUAL
29474: IFFALSE 29525
// begin j := IsControledBy ( i ) ;
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 6
29485: PPUSH
29486: CALL_OW 312
29490: ST_TO_ADDR
// if j then
29491: LD_VAR 0 7
29495: IFFALSE 29525
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29497: LD_ADDR_VAR 0 10
29501: PUSH
29502: LD_VAR 0 10
29506: PUSH
29507: LD_VAR 0 7
29511: PPUSH
29512: LD_INT 3
29514: PPUSH
29515: CALL_OW 259
29519: PUSH
29520: LD_INT 3
29522: MUL
29523: MUL
29524: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29525: LD_VAR 0 6
29529: PPUSH
29530: CALL_OW 264
29534: PUSH
29535: LD_INT 5
29537: PUSH
29538: LD_INT 6
29540: PUSH
29541: LD_INT 46
29543: PUSH
29544: LD_INT 44
29546: PUSH
29547: LD_INT 47
29549: PUSH
29550: LD_INT 45
29552: PUSH
29553: LD_INT 28
29555: PUSH
29556: LD_INT 7
29558: PUSH
29559: LD_INT 27
29561: PUSH
29562: LD_INT 29
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: IN
29577: PUSH
29578: LD_VAR 0 1
29582: PPUSH
29583: LD_INT 52
29585: PPUSH
29586: CALL_OW 321
29590: PUSH
29591: LD_INT 2
29593: EQUAL
29594: AND
29595: IFFALSE 29612
// bpoints := bpoints * 1.2 ;
29597: LD_ADDR_VAR 0 10
29601: PUSH
29602: LD_VAR 0 10
29606: PUSH
29607: LD_REAL  1.20000000000000E+0000
29610: MUL
29611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29612: LD_VAR 0 6
29616: PPUSH
29617: CALL_OW 264
29621: PUSH
29622: LD_INT 6
29624: PUSH
29625: LD_INT 46
29627: PUSH
29628: LD_INT 47
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: IN
29636: IFFALSE 29653
// bpoints := bpoints * 1.2 ;
29638: LD_ADDR_VAR 0 10
29642: PUSH
29643: LD_VAR 0 10
29647: PUSH
29648: LD_REAL  1.20000000000000E+0000
29651: MUL
29652: ST_TO_ADDR
// end ; unit_building :
29653: GO 29667
29655: LD_INT 3
29657: DOUBLE
29658: EQUAL
29659: IFTRUE 29663
29661: GO 29666
29663: POP
// ; end ;
29664: GO 29667
29666: POP
// for j = 1 to 3 do
29667: LD_ADDR_VAR 0 7
29671: PUSH
29672: DOUBLE
29673: LD_INT 1
29675: DEC
29676: ST_TO_ADDR
29677: LD_INT 3
29679: PUSH
29680: FOR_TO
29681: IFFALSE 29734
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29683: LD_ADDR_VAR 0 5
29687: PUSH
29688: LD_VAR 0 5
29692: PPUSH
29693: LD_VAR 0 7
29697: PPUSH
29698: LD_VAR 0 5
29702: PUSH
29703: LD_VAR 0 7
29707: ARRAY
29708: PUSH
29709: LD_VAR 0 9
29713: PUSH
29714: LD_VAR 0 7
29718: ARRAY
29719: PUSH
29720: LD_VAR 0 10
29724: MUL
29725: PLUS
29726: PPUSH
29727: CALL_OW 1
29731: ST_TO_ADDR
29732: GO 29680
29734: POP
29735: POP
// end ;
29736: GO 28215
29738: POP
29739: POP
// result := Replace ( result , 4 , tmp ) ;
29740: LD_ADDR_VAR 0 5
29744: PUSH
29745: LD_VAR 0 5
29749: PPUSH
29750: LD_INT 4
29752: PPUSH
29753: LD_VAR 0 8
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
// end ;
29763: LD_VAR 0 5
29767: RET
// export function DangerAtRange ( unit , range ) ; begin
29768: LD_INT 0
29770: PPUSH
// if not unit then
29771: LD_VAR 0 1
29775: NOT
29776: IFFALSE 29780
// exit ;
29778: GO 29825
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 255
29794: PPUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 250
29804: PPUSH
29805: LD_VAR 0 1
29809: PPUSH
29810: CALL_OW 251
29814: PPUSH
29815: LD_VAR 0 2
29819: PPUSH
29820: CALL 28067 0 4
29824: ST_TO_ADDR
// end ;
29825: LD_VAR 0 3
29829: RET
// export function DangerInArea ( side , area ) ; begin
29830: LD_INT 0
29832: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_VAR 0 2
29842: PPUSH
29843: LD_INT 81
29845: PUSH
29846: LD_VAR 0 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 70
29859: ST_TO_ADDR
// end ;
29860: LD_VAR 0 3
29864: RET
// export function IsExtension ( b ) ; begin
29865: LD_INT 0
29867: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29868: LD_ADDR_VAR 0 2
29872: PUSH
29873: LD_VAR 0 1
29877: PUSH
29878: LD_INT 23
29880: PUSH
29881: LD_INT 20
29883: PUSH
29884: LD_INT 22
29886: PUSH
29887: LD_INT 17
29889: PUSH
29890: LD_INT 24
29892: PUSH
29893: LD_INT 21
29895: PUSH
29896: LD_INT 19
29898: PUSH
29899: LD_INT 16
29901: PUSH
29902: LD_INT 25
29904: PUSH
29905: LD_INT 18
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: IN
29920: ST_TO_ADDR
// end ;
29921: LD_VAR 0 2
29925: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29926: LD_INT 0
29928: PPUSH
29929: PPUSH
29930: PPUSH
// result := [ ] ;
29931: LD_ADDR_VAR 0 4
29935: PUSH
29936: EMPTY
29937: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29938: LD_ADDR_VAR 0 5
29942: PUSH
29943: LD_VAR 0 2
29947: PPUSH
29948: LD_INT 21
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PPUSH
29958: CALL_OW 70
29962: ST_TO_ADDR
// if not tmp then
29963: LD_VAR 0 5
29967: NOT
29968: IFFALSE 29972
// exit ;
29970: GO 30036
// if checkLink then
29972: LD_VAR 0 3
29976: IFFALSE 30026
// begin for i in tmp do
29978: LD_ADDR_VAR 0 6
29982: PUSH
29983: LD_VAR 0 5
29987: PUSH
29988: FOR_IN
29989: IFFALSE 30024
// if GetBase ( i ) <> base then
29991: LD_VAR 0 6
29995: PPUSH
29996: CALL_OW 274
30000: PUSH
30001: LD_VAR 0 1
30005: NONEQUAL
30006: IFFALSE 30022
// ComLinkToBase ( base , i ) ;
30008: LD_VAR 0 1
30012: PPUSH
30013: LD_VAR 0 6
30017: PPUSH
30018: CALL_OW 169
30022: GO 29988
30024: POP
30025: POP
// end ; result := tmp ;
30026: LD_ADDR_VAR 0 4
30030: PUSH
30031: LD_VAR 0 5
30035: ST_TO_ADDR
// end ;
30036: LD_VAR 0 4
30040: RET
// export function ComComplete ( units , b ) ; var i ; begin
30041: LD_INT 0
30043: PPUSH
30044: PPUSH
// if not units then
30045: LD_VAR 0 1
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30144
// for i in units do
30054: LD_ADDR_VAR 0 4
30058: PUSH
30059: LD_VAR 0 1
30063: PUSH
30064: FOR_IN
30065: IFFALSE 30142
// if BuildingStatus ( b ) = bs_build then
30067: LD_VAR 0 2
30071: PPUSH
30072: CALL_OW 461
30076: PUSH
30077: LD_INT 1
30079: EQUAL
30080: IFFALSE 30140
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30082: LD_VAR 0 4
30086: PPUSH
30087: LD_STRING h
30089: PUSH
30090: LD_VAR 0 2
30094: PPUSH
30095: CALL_OW 250
30099: PUSH
30100: LD_VAR 0 2
30104: PPUSH
30105: CALL_OW 251
30109: PUSH
30110: LD_VAR 0 2
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: PPUSH
30136: CALL_OW 446
30140: GO 30064
30142: POP
30143: POP
// end ;
30144: LD_VAR 0 3
30148: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30149: LD_INT 0
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30157: LD_VAR 0 1
30161: NOT
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 263
30172: PUSH
30173: LD_INT 2
30175: NONEQUAL
30176: OR
30177: IFFALSE 30181
// exit ;
30179: GO 30497
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30181: LD_ADDR_VAR 0 6
30185: PUSH
30186: LD_INT 22
30188: PUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 255
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 30
30208: PUSH
30209: LD_INT 36
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 34
30218: PUSH
30219: LD_INT 31
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PPUSH
30235: CALL_OW 69
30239: ST_TO_ADDR
// if not tmp then
30240: LD_VAR 0 6
30244: NOT
30245: IFFALSE 30249
// exit ;
30247: GO 30497
// result := [ ] ;
30249: LD_ADDR_VAR 0 2
30253: PUSH
30254: EMPTY
30255: ST_TO_ADDR
// for i in tmp do
30256: LD_ADDR_VAR 0 3
30260: PUSH
30261: LD_VAR 0 6
30265: PUSH
30266: FOR_IN
30267: IFFALSE 30338
// begin t := UnitsInside ( i ) ;
30269: LD_ADDR_VAR 0 4
30273: PUSH
30274: LD_VAR 0 3
30278: PPUSH
30279: CALL_OW 313
30283: ST_TO_ADDR
// if t then
30284: LD_VAR 0 4
30288: IFFALSE 30336
// for j in t do
30290: LD_ADDR_VAR 0 7
30294: PUSH
30295: LD_VAR 0 4
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30334
// result := Replace ( result , result + 1 , j ) ;
30303: LD_ADDR_VAR 0 2
30307: PUSH
30308: LD_VAR 0 2
30312: PPUSH
30313: LD_VAR 0 2
30317: PUSH
30318: LD_INT 1
30320: PLUS
30321: PPUSH
30322: LD_VAR 0 7
30326: PPUSH
30327: CALL_OW 1
30331: ST_TO_ADDR
30332: GO 30300
30334: POP
30335: POP
// end ;
30336: GO 30266
30338: POP
30339: POP
// if not result then
30340: LD_VAR 0 2
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30497
// mech := result [ 1 ] ;
30349: LD_ADDR_VAR 0 5
30353: PUSH
30354: LD_VAR 0 2
30358: PUSH
30359: LD_INT 1
30361: ARRAY
30362: ST_TO_ADDR
// if result > 1 then
30363: LD_VAR 0 2
30367: PUSH
30368: LD_INT 1
30370: GREATER
30371: IFFALSE 30483
// begin for i = 2 to result do
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: DOUBLE
30379: LD_INT 2
30381: DEC
30382: ST_TO_ADDR
30383: LD_VAR 0 2
30387: PUSH
30388: FOR_TO
30389: IFFALSE 30481
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30391: LD_ADDR_VAR 0 4
30395: PUSH
30396: LD_VAR 0 2
30400: PUSH
30401: LD_VAR 0 3
30405: ARRAY
30406: PPUSH
30407: LD_INT 3
30409: PPUSH
30410: CALL_OW 259
30414: PUSH
30415: LD_VAR 0 2
30419: PUSH
30420: LD_VAR 0 3
30424: ARRAY
30425: PPUSH
30426: CALL_OW 432
30430: MINUS
30431: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30432: LD_VAR 0 4
30436: PUSH
30437: LD_VAR 0 5
30441: PPUSH
30442: LD_INT 3
30444: PPUSH
30445: CALL_OW 259
30449: PUSH
30450: LD_VAR 0 5
30454: PPUSH
30455: CALL_OW 432
30459: MINUS
30460: GREATEREQUAL
30461: IFFALSE 30479
// mech := result [ i ] ;
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_VAR 0 2
30472: PUSH
30473: LD_VAR 0 3
30477: ARRAY
30478: ST_TO_ADDR
// end ;
30479: GO 30388
30481: POP
30482: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30483: LD_VAR 0 1
30487: PPUSH
30488: LD_VAR 0 5
30492: PPUSH
30493: CALL_OW 135
// end ;
30497: LD_VAR 0 2
30501: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
// result := [ ] ;
30517: LD_ADDR_VAR 0 7
30521: PUSH
30522: EMPTY
30523: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30524: LD_VAR 0 1
30528: PPUSH
30529: CALL_OW 266
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: IN
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 32183
// if name then
30549: LD_VAR 0 3
30553: IFFALSE 30569
// SetBName ( base_dep , name ) ;
30555: LD_VAR 0 1
30559: PPUSH
30560: LD_VAR 0 3
30564: PPUSH
30565: CALL_OW 500
// base := GetBase ( base_dep ) ;
30569: LD_ADDR_VAR 0 15
30573: PUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 274
30583: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30584: LD_ADDR_VAR 0 16
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 255
30598: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30599: LD_ADDR_VAR 0 17
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 248
30613: ST_TO_ADDR
// if sources then
30614: LD_VAR 0 5
30618: IFFALSE 30665
// for i = 1 to 3 do
30620: LD_ADDR_VAR 0 8
30624: PUSH
30625: DOUBLE
30626: LD_INT 1
30628: DEC
30629: ST_TO_ADDR
30630: LD_INT 3
30632: PUSH
30633: FOR_TO
30634: IFFALSE 30663
// AddResourceType ( base , i , sources [ i ] ) ;
30636: LD_VAR 0 15
30640: PPUSH
30641: LD_VAR 0 8
30645: PPUSH
30646: LD_VAR 0 5
30650: PUSH
30651: LD_VAR 0 8
30655: ARRAY
30656: PPUSH
30657: CALL_OW 276
30661: GO 30633
30663: POP
30664: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30665: LD_ADDR_VAR 0 18
30669: PUSH
30670: LD_VAR 0 15
30674: PPUSH
30675: LD_VAR 0 2
30679: PPUSH
30680: LD_INT 1
30682: PPUSH
30683: CALL 29926 0 3
30687: ST_TO_ADDR
// InitHc ;
30688: CALL_OW 19
// InitUc ;
30692: CALL_OW 18
// uc_side := side ;
30696: LD_ADDR_OWVAR 20
30700: PUSH
30701: LD_VAR 0 16
30705: ST_TO_ADDR
// uc_nation := nation ;
30706: LD_ADDR_OWVAR 21
30710: PUSH
30711: LD_VAR 0 17
30715: ST_TO_ADDR
// if buildings then
30716: LD_VAR 0 18
30720: IFFALSE 32042
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30722: LD_ADDR_VAR 0 19
30726: PUSH
30727: LD_VAR 0 18
30731: PPUSH
30732: LD_INT 2
30734: PUSH
30735: LD_INT 30
30737: PUSH
30738: LD_INT 29
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 30
30747: PUSH
30748: LD_INT 30
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: PPUSH
30760: CALL_OW 72
30764: ST_TO_ADDR
// if tmp then
30765: LD_VAR 0 19
30769: IFFALSE 30817
// for i in tmp do
30771: LD_ADDR_VAR 0 8
30775: PUSH
30776: LD_VAR 0 19
30780: PUSH
30781: FOR_IN
30782: IFFALSE 30815
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30784: LD_VAR 0 8
30788: PPUSH
30789: CALL_OW 250
30793: PPUSH
30794: LD_VAR 0 8
30798: PPUSH
30799: CALL_OW 251
30803: PPUSH
30804: LD_VAR 0 16
30808: PPUSH
30809: CALL_OW 441
30813: GO 30781
30815: POP
30816: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30817: LD_VAR 0 18
30821: PPUSH
30822: LD_INT 2
30824: PUSH
30825: LD_INT 30
30827: PUSH
30828: LD_INT 32
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 30
30837: PUSH
30838: LD_INT 33
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: PPUSH
30850: CALL_OW 72
30854: IFFALSE 30942
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30856: LD_ADDR_VAR 0 8
30860: PUSH
30861: LD_VAR 0 18
30865: PPUSH
30866: LD_INT 2
30868: PUSH
30869: LD_INT 30
30871: PUSH
30872: LD_INT 32
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 30
30881: PUSH
30882: LD_INT 33
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: PPUSH
30894: CALL_OW 72
30898: PUSH
30899: FOR_IN
30900: IFFALSE 30940
// begin if not GetBWeapon ( i ) then
30902: LD_VAR 0 8
30906: PPUSH
30907: CALL_OW 269
30911: NOT
30912: IFFALSE 30938
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30914: LD_VAR 0 8
30918: PPUSH
30919: LD_VAR 0 8
30923: PPUSH
30924: LD_VAR 0 2
30928: PPUSH
30929: CALL 32188 0 2
30933: PPUSH
30934: CALL_OW 431
// end ;
30938: GO 30899
30940: POP
30941: POP
// end ; for i = 1 to personel do
30942: LD_ADDR_VAR 0 8
30946: PUSH
30947: DOUBLE
30948: LD_INT 1
30950: DEC
30951: ST_TO_ADDR
30952: LD_VAR 0 6
30956: PUSH
30957: FOR_TO
30958: IFFALSE 32022
// begin if i > 4 then
30960: LD_VAR 0 8
30964: PUSH
30965: LD_INT 4
30967: GREATER
30968: IFFALSE 30972
// break ;
30970: GO 32022
// case i of 1 :
30972: LD_VAR 0 8
30976: PUSH
30977: LD_INT 1
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31065
30985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30986: LD_ADDR_VAR 0 12
30990: PUSH
30991: LD_VAR 0 18
30995: PPUSH
30996: LD_INT 22
30998: PUSH
30999: LD_VAR 0 16
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 58
31010: PUSH
31011: EMPTY
31012: LIST
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: LD_INT 30
31019: PUSH
31020: LD_INT 32
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 30
31029: PUSH
31030: LD_INT 4
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 30
31039: PUSH
31040: LD_INT 5
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: PPUSH
31058: CALL_OW 72
31062: ST_TO_ADDR
31063: GO 31287
31065: LD_INT 2
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31135
31073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31074: LD_ADDR_VAR 0 12
31078: PUSH
31079: LD_VAR 0 18
31083: PPUSH
31084: LD_INT 22
31086: PUSH
31087: LD_VAR 0 16
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: LD_INT 30
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 30
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 72
31132: ST_TO_ADDR
31133: GO 31287
31135: LD_INT 3
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31205
31143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31144: LD_ADDR_VAR 0 12
31148: PUSH
31149: LD_VAR 0 18
31153: PPUSH
31154: LD_INT 22
31156: PUSH
31157: LD_VAR 0 16
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: LD_INT 30
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 30
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PPUSH
31198: CALL_OW 72
31202: ST_TO_ADDR
31203: GO 31287
31205: LD_INT 4
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31286
31213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31214: LD_ADDR_VAR 0 12
31218: PUSH
31219: LD_VAR 0 18
31223: PPUSH
31224: LD_INT 22
31226: PUSH
31227: LD_VAR 0 16
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 30
31241: PUSH
31242: LD_INT 6
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 30
31251: PUSH
31252: LD_INT 7
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 8
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PPUSH
31279: CALL_OW 72
31283: ST_TO_ADDR
31284: GO 31287
31286: POP
// if i = 1 then
31287: LD_VAR 0 8
31291: PUSH
31292: LD_INT 1
31294: EQUAL
31295: IFFALSE 31406
// begin tmp := [ ] ;
31297: LD_ADDR_VAR 0 19
31301: PUSH
31302: EMPTY
31303: ST_TO_ADDR
// for j in f do
31304: LD_ADDR_VAR 0 9
31308: PUSH
31309: LD_VAR 0 12
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31388
// if GetBType ( j ) = b_bunker then
31317: LD_VAR 0 9
31321: PPUSH
31322: CALL_OW 266
31326: PUSH
31327: LD_INT 32
31329: EQUAL
31330: IFFALSE 31357
// tmp := Insert ( tmp , 1 , j ) else
31332: LD_ADDR_VAR 0 19
31336: PUSH
31337: LD_VAR 0 19
31341: PPUSH
31342: LD_INT 1
31344: PPUSH
31345: LD_VAR 0 9
31349: PPUSH
31350: CALL_OW 2
31354: ST_TO_ADDR
31355: GO 31386
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31357: LD_ADDR_VAR 0 19
31361: PUSH
31362: LD_VAR 0 19
31366: PPUSH
31367: LD_VAR 0 19
31371: PUSH
31372: LD_INT 1
31374: PLUS
31375: PPUSH
31376: LD_VAR 0 9
31380: PPUSH
31381: CALL_OW 2
31385: ST_TO_ADDR
31386: GO 31314
31388: POP
31389: POP
// if tmp then
31390: LD_VAR 0 19
31394: IFFALSE 31406
// f := tmp ;
31396: LD_ADDR_VAR 0 12
31400: PUSH
31401: LD_VAR 0 19
31405: ST_TO_ADDR
// end ; x := personel [ i ] ;
31406: LD_ADDR_VAR 0 13
31410: PUSH
31411: LD_VAR 0 6
31415: PUSH
31416: LD_VAR 0 8
31420: ARRAY
31421: ST_TO_ADDR
// if x = - 1 then
31422: LD_VAR 0 13
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: EQUAL
31431: IFFALSE 31640
// begin for j in f do
31433: LD_ADDR_VAR 0 9
31437: PUSH
31438: LD_VAR 0 12
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31636
// repeat InitHc ;
31446: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31450: LD_VAR 0 9
31454: PPUSH
31455: CALL_OW 266
31459: PUSH
31460: LD_INT 5
31462: EQUAL
31463: IFFALSE 31533
// begin if UnitsInside ( j ) < 3 then
31465: LD_VAR 0 9
31469: PPUSH
31470: CALL_OW 313
31474: PUSH
31475: LD_INT 3
31477: LESS
31478: IFFALSE 31514
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31480: LD_INT 0
31482: PPUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 8
31488: PUSH
31489: LD_INT 9
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: PUSH
31497: LD_VAR 0 17
31501: ARRAY
31502: PPUSH
31503: LD_VAR 0 4
31507: PPUSH
31508: CALL_OW 380
31512: GO 31531
// PrepareHuman ( false , i , skill ) ;
31514: LD_INT 0
31516: PPUSH
31517: LD_VAR 0 8
31521: PPUSH
31522: LD_VAR 0 4
31526: PPUSH
31527: CALL_OW 380
// end else
31531: GO 31550
// PrepareHuman ( false , i , skill ) ;
31533: LD_INT 0
31535: PPUSH
31536: LD_VAR 0 8
31540: PPUSH
31541: LD_VAR 0 4
31545: PPUSH
31546: CALL_OW 380
// un := CreateHuman ;
31550: LD_ADDR_VAR 0 14
31554: PUSH
31555: CALL_OW 44
31559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31560: LD_ADDR_VAR 0 7
31564: PUSH
31565: LD_VAR 0 7
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: LD_VAR 0 14
31577: PPUSH
31578: CALL_OW 2
31582: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31583: LD_VAR 0 14
31587: PPUSH
31588: LD_VAR 0 9
31592: PPUSH
31593: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31597: LD_VAR 0 9
31601: PPUSH
31602: CALL_OW 313
31606: PUSH
31607: LD_INT 6
31609: EQUAL
31610: PUSH
31611: LD_VAR 0 9
31615: PPUSH
31616: CALL_OW 266
31620: PUSH
31621: LD_INT 32
31623: PUSH
31624: LD_INT 31
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: IN
31631: OR
31632: IFFALSE 31446
31634: GO 31443
31636: POP
31637: POP
// end else
31638: GO 32020
// for j = 1 to x do
31640: LD_ADDR_VAR 0 9
31644: PUSH
31645: DOUBLE
31646: LD_INT 1
31648: DEC
31649: ST_TO_ADDR
31650: LD_VAR 0 13
31654: PUSH
31655: FOR_TO
31656: IFFALSE 32018
// begin InitHc ;
31658: CALL_OW 19
// if not f then
31662: LD_VAR 0 12
31666: NOT
31667: IFFALSE 31756
// begin PrepareHuman ( false , i , skill ) ;
31669: LD_INT 0
31671: PPUSH
31672: LD_VAR 0 8
31676: PPUSH
31677: LD_VAR 0 4
31681: PPUSH
31682: CALL_OW 380
// un := CreateHuman ;
31686: LD_ADDR_VAR 0 14
31690: PUSH
31691: CALL_OW 44
31695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31696: LD_ADDR_VAR 0 7
31700: PUSH
31701: LD_VAR 0 7
31705: PPUSH
31706: LD_INT 1
31708: PPUSH
31709: LD_VAR 0 14
31713: PPUSH
31714: CALL_OW 2
31718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31719: LD_VAR 0 14
31723: PPUSH
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 250
31733: PPUSH
31734: LD_VAR 0 1
31738: PPUSH
31739: CALL_OW 251
31743: PPUSH
31744: LD_INT 10
31746: PPUSH
31747: LD_INT 0
31749: PPUSH
31750: CALL_OW 50
// continue ;
31754: GO 31655
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31756: LD_VAR 0 12
31760: PUSH
31761: LD_INT 1
31763: ARRAY
31764: PPUSH
31765: CALL_OW 313
31769: PUSH
31770: LD_VAR 0 12
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: PPUSH
31779: CALL_OW 266
31783: PUSH
31784: LD_INT 32
31786: PUSH
31787: LD_INT 31
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: IN
31794: AND
31795: PUSH
31796: LD_VAR 0 12
31800: PUSH
31801: LD_INT 1
31803: ARRAY
31804: PPUSH
31805: CALL_OW 313
31809: PUSH
31810: LD_INT 6
31812: EQUAL
31813: OR
31814: IFFALSE 31834
// f := Delete ( f , 1 ) ;
31816: LD_ADDR_VAR 0 12
31820: PUSH
31821: LD_VAR 0 12
31825: PPUSH
31826: LD_INT 1
31828: PPUSH
31829: CALL_OW 3
31833: ST_TO_ADDR
// if not f then
31834: LD_VAR 0 12
31838: NOT
31839: IFFALSE 31857
// begin x := x + 2 ;
31841: LD_ADDR_VAR 0 13
31845: PUSH
31846: LD_VAR 0 13
31850: PUSH
31851: LD_INT 2
31853: PLUS
31854: ST_TO_ADDR
// continue ;
31855: GO 31655
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31857: LD_VAR 0 12
31861: PUSH
31862: LD_INT 1
31864: ARRAY
31865: PPUSH
31866: CALL_OW 266
31870: PUSH
31871: LD_INT 5
31873: EQUAL
31874: IFFALSE 31948
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31876: LD_VAR 0 12
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: CALL_OW 313
31889: PUSH
31890: LD_INT 3
31892: LESS
31893: IFFALSE 31929
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31895: LD_INT 0
31897: PPUSH
31898: LD_INT 5
31900: PUSH
31901: LD_INT 8
31903: PUSH
31904: LD_INT 9
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: PUSH
31912: LD_VAR 0 17
31916: ARRAY
31917: PPUSH
31918: LD_VAR 0 4
31922: PPUSH
31923: CALL_OW 380
31927: GO 31946
// PrepareHuman ( false , i , skill ) ;
31929: LD_INT 0
31931: PPUSH
31932: LD_VAR 0 8
31936: PPUSH
31937: LD_VAR 0 4
31941: PPUSH
31942: CALL_OW 380
// end else
31946: GO 31965
// PrepareHuman ( false , i , skill ) ;
31948: LD_INT 0
31950: PPUSH
31951: LD_VAR 0 8
31955: PPUSH
31956: LD_VAR 0 4
31960: PPUSH
31961: CALL_OW 380
// un := CreateHuman ;
31965: LD_ADDR_VAR 0 14
31969: PUSH
31970: CALL_OW 44
31974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31975: LD_ADDR_VAR 0 7
31979: PUSH
31980: LD_VAR 0 7
31984: PPUSH
31985: LD_INT 1
31987: PPUSH
31988: LD_VAR 0 14
31992: PPUSH
31993: CALL_OW 2
31997: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31998: LD_VAR 0 14
32002: PPUSH
32003: LD_VAR 0 12
32007: PUSH
32008: LD_INT 1
32010: ARRAY
32011: PPUSH
32012: CALL_OW 52
// end ;
32016: GO 31655
32018: POP
32019: POP
// end ;
32020: GO 30957
32022: POP
32023: POP
// result := result ^ buildings ;
32024: LD_ADDR_VAR 0 7
32028: PUSH
32029: LD_VAR 0 7
32033: PUSH
32034: LD_VAR 0 18
32038: ADD
32039: ST_TO_ADDR
// end else
32040: GO 32183
// begin for i = 1 to personel do
32042: LD_ADDR_VAR 0 8
32046: PUSH
32047: DOUBLE
32048: LD_INT 1
32050: DEC
32051: ST_TO_ADDR
32052: LD_VAR 0 6
32056: PUSH
32057: FOR_TO
32058: IFFALSE 32181
// begin if i > 4 then
32060: LD_VAR 0 8
32064: PUSH
32065: LD_INT 4
32067: GREATER
32068: IFFALSE 32072
// break ;
32070: GO 32181
// x := personel [ i ] ;
32072: LD_ADDR_VAR 0 13
32076: PUSH
32077: LD_VAR 0 6
32081: PUSH
32082: LD_VAR 0 8
32086: ARRAY
32087: ST_TO_ADDR
// if x = - 1 then
32088: LD_VAR 0 13
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: EQUAL
32097: IFFALSE 32101
// continue ;
32099: GO 32057
// PrepareHuman ( false , i , skill ) ;
32101: LD_INT 0
32103: PPUSH
32104: LD_VAR 0 8
32108: PPUSH
32109: LD_VAR 0 4
32113: PPUSH
32114: CALL_OW 380
// un := CreateHuman ;
32118: LD_ADDR_VAR 0 14
32122: PUSH
32123: CALL_OW 44
32127: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32128: LD_VAR 0 14
32132: PPUSH
32133: LD_VAR 0 1
32137: PPUSH
32138: CALL_OW 250
32142: PPUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 251
32152: PPUSH
32153: LD_INT 10
32155: PPUSH
32156: LD_INT 0
32158: PPUSH
32159: CALL_OW 50
// result := result ^ un ;
32163: LD_ADDR_VAR 0 7
32167: PUSH
32168: LD_VAR 0 7
32172: PUSH
32173: LD_VAR 0 14
32177: ADD
32178: ST_TO_ADDR
// end ;
32179: GO 32057
32181: POP
32182: POP
// end ; end ;
32183: LD_VAR 0 7
32187: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32188: LD_INT 0
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
32205: PPUSH
// result := false ;
32206: LD_ADDR_VAR 0 3
32210: PUSH
32211: LD_INT 0
32213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32214: LD_VAR 0 1
32218: NOT
32219: PUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: CALL_OW 266
32229: PUSH
32230: LD_INT 32
32232: PUSH
32233: LD_INT 33
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: IN
32240: NOT
32241: OR
32242: IFFALSE 32246
// exit ;
32244: GO 33355
// nat := GetNation ( tower ) ;
32246: LD_ADDR_VAR 0 12
32250: PUSH
32251: LD_VAR 0 1
32255: PPUSH
32256: CALL_OW 248
32260: ST_TO_ADDR
// side := GetSide ( tower ) ;
32261: LD_ADDR_VAR 0 16
32265: PUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 255
32275: ST_TO_ADDR
// x := GetX ( tower ) ;
32276: LD_ADDR_VAR 0 10
32280: PUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 250
32290: ST_TO_ADDR
// y := GetY ( tower ) ;
32291: LD_ADDR_VAR 0 11
32295: PUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 251
32305: ST_TO_ADDR
// if not x or not y then
32306: LD_VAR 0 10
32310: NOT
32311: PUSH
32312: LD_VAR 0 11
32316: NOT
32317: OR
32318: IFFALSE 32322
// exit ;
32320: GO 33355
// weapon := 0 ;
32322: LD_ADDR_VAR 0 18
32326: PUSH
32327: LD_INT 0
32329: ST_TO_ADDR
// fac_list := [ ] ;
32330: LD_ADDR_VAR 0 17
32334: PUSH
32335: EMPTY
32336: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32337: LD_ADDR_VAR 0 6
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 274
32351: PPUSH
32352: LD_VAR 0 2
32356: PPUSH
32357: LD_INT 0
32359: PPUSH
32360: CALL 29926 0 3
32364: PPUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PPUSH
32375: CALL_OW 72
32379: ST_TO_ADDR
// if not factories then
32380: LD_VAR 0 6
32384: NOT
32385: IFFALSE 32389
// exit ;
32387: GO 33355
// for i in factories do
32389: LD_ADDR_VAR 0 8
32393: PUSH
32394: LD_VAR 0 6
32398: PUSH
32399: FOR_IN
32400: IFFALSE 32425
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32402: LD_ADDR_VAR 0 17
32406: PUSH
32407: LD_VAR 0 17
32411: PUSH
32412: LD_VAR 0 8
32416: PPUSH
32417: CALL_OW 478
32421: UNION
32422: ST_TO_ADDR
32423: GO 32399
32425: POP
32426: POP
// if not fac_list then
32427: LD_VAR 0 17
32431: NOT
32432: IFFALSE 32436
// exit ;
32434: GO 33355
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 5
32446: PUSH
32447: LD_INT 9
32449: PUSH
32450: LD_INT 10
32452: PUSH
32453: LD_INT 6
32455: PUSH
32456: LD_INT 7
32458: PUSH
32459: LD_INT 11
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 27
32473: PUSH
32474: LD_INT 28
32476: PUSH
32477: LD_INT 26
32479: PUSH
32480: LD_INT 30
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 43
32491: PUSH
32492: LD_INT 44
32494: PUSH
32495: LD_INT 46
32497: PUSH
32498: LD_INT 45
32500: PUSH
32501: LD_INT 47
32503: PUSH
32504: LD_INT 49
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: LD_VAR 0 12
32524: ARRAY
32525: ST_TO_ADDR
// list := list isect fac_list ;
32526: LD_ADDR_VAR 0 5
32530: PUSH
32531: LD_VAR 0 5
32535: PUSH
32536: LD_VAR 0 17
32540: ISECT
32541: ST_TO_ADDR
// if not list then
32542: LD_VAR 0 5
32546: NOT
32547: IFFALSE 32551
// exit ;
32549: GO 33355
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32551: LD_VAR 0 12
32555: PUSH
32556: LD_INT 3
32558: EQUAL
32559: PUSH
32560: LD_INT 49
32562: PUSH
32563: LD_VAR 0 5
32567: IN
32568: AND
32569: PUSH
32570: LD_INT 31
32572: PPUSH
32573: LD_VAR 0 16
32577: PPUSH
32578: CALL_OW 321
32582: PUSH
32583: LD_INT 2
32585: EQUAL
32586: AND
32587: IFFALSE 32647
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32589: LD_INT 22
32591: PUSH
32592: LD_VAR 0 16
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 35
32603: PUSH
32604: LD_INT 49
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 91
32613: PUSH
32614: LD_VAR 0 1
32618: PUSH
32619: LD_INT 10
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: PPUSH
32632: CALL_OW 69
32636: NOT
32637: IFFALSE 32647
// weapon := ru_time_lapser ;
32639: LD_ADDR_VAR 0 18
32643: PUSH
32644: LD_INT 49
32646: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32647: LD_VAR 0 12
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: IN
32662: PUSH
32663: LD_INT 11
32665: PUSH
32666: LD_VAR 0 5
32670: IN
32671: PUSH
32672: LD_INT 30
32674: PUSH
32675: LD_VAR 0 5
32679: IN
32680: OR
32681: AND
32682: PUSH
32683: LD_INT 6
32685: PPUSH
32686: LD_VAR 0 16
32690: PPUSH
32691: CALL_OW 321
32695: PUSH
32696: LD_INT 2
32698: EQUAL
32699: AND
32700: IFFALSE 32865
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32702: LD_INT 22
32704: PUSH
32705: LD_VAR 0 16
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 35
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 35
32729: PUSH
32730: LD_INT 30
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 91
32744: PUSH
32745: LD_VAR 0 1
32749: PUSH
32750: LD_INT 18
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: PPUSH
32763: CALL_OW 69
32767: NOT
32768: PUSH
32769: LD_INT 22
32771: PUSH
32772: LD_VAR 0 16
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 30
32786: PUSH
32787: LD_INT 32
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 30
32796: PUSH
32797: LD_INT 33
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 91
32811: PUSH
32812: LD_VAR 0 1
32816: PUSH
32817: LD_INT 12
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: PUSH
32830: EMPTY
32831: LIST
32832: PPUSH
32833: CALL_OW 69
32837: PUSH
32838: LD_INT 2
32840: GREATER
32841: AND
32842: IFFALSE 32865
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32844: LD_ADDR_VAR 0 18
32848: PUSH
32849: LD_INT 11
32851: PUSH
32852: LD_INT 30
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_VAR 0 12
32863: ARRAY
32864: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32865: LD_VAR 0 18
32869: NOT
32870: PUSH
32871: LD_INT 40
32873: PPUSH
32874: LD_VAR 0 16
32878: PPUSH
32879: CALL_OW 321
32883: PUSH
32884: LD_INT 2
32886: EQUAL
32887: AND
32888: PUSH
32889: LD_INT 7
32891: PUSH
32892: LD_VAR 0 5
32896: IN
32897: PUSH
32898: LD_INT 28
32900: PUSH
32901: LD_VAR 0 5
32905: IN
32906: OR
32907: PUSH
32908: LD_INT 45
32910: PUSH
32911: LD_VAR 0 5
32915: IN
32916: OR
32917: AND
32918: IFFALSE 33172
// begin hex := GetHexInfo ( x , y ) ;
32920: LD_ADDR_VAR 0 4
32924: PUSH
32925: LD_VAR 0 10
32929: PPUSH
32930: LD_VAR 0 11
32934: PPUSH
32935: CALL_OW 546
32939: ST_TO_ADDR
// if hex [ 1 ] then
32940: LD_VAR 0 4
32944: PUSH
32945: LD_INT 1
32947: ARRAY
32948: IFFALSE 32952
// exit ;
32950: GO 33355
// height := hex [ 2 ] ;
32952: LD_ADDR_VAR 0 15
32956: PUSH
32957: LD_VAR 0 4
32961: PUSH
32962: LD_INT 2
32964: ARRAY
32965: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32966: LD_ADDR_VAR 0 14
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 5
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: ST_TO_ADDR
// for i in tmp do
32989: LD_ADDR_VAR 0 8
32993: PUSH
32994: LD_VAR 0 14
32998: PUSH
32999: FOR_IN
33000: IFFALSE 33170
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33002: LD_ADDR_VAR 0 9
33006: PUSH
33007: LD_VAR 0 10
33011: PPUSH
33012: LD_VAR 0 8
33016: PPUSH
33017: LD_INT 5
33019: PPUSH
33020: CALL_OW 272
33024: PUSH
33025: LD_VAR 0 11
33029: PPUSH
33030: LD_VAR 0 8
33034: PPUSH
33035: LD_INT 5
33037: PPUSH
33038: CALL_OW 273
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33047: LD_VAR 0 9
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PPUSH
33056: LD_VAR 0 9
33060: PUSH
33061: LD_INT 2
33063: ARRAY
33064: PPUSH
33065: CALL_OW 488
33069: IFFALSE 33168
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33071: LD_ADDR_VAR 0 4
33075: PUSH
33076: LD_VAR 0 9
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: PPUSH
33085: LD_VAR 0 9
33089: PUSH
33090: LD_INT 2
33092: ARRAY
33093: PPUSH
33094: CALL_OW 546
33098: ST_TO_ADDR
// if hex [ 1 ] then
33099: LD_VAR 0 4
33103: PUSH
33104: LD_INT 1
33106: ARRAY
33107: IFFALSE 33111
// continue ;
33109: GO 32999
// h := hex [ 2 ] ;
33111: LD_ADDR_VAR 0 13
33115: PUSH
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 2
33123: ARRAY
33124: ST_TO_ADDR
// if h + 7 < height then
33125: LD_VAR 0 13
33129: PUSH
33130: LD_INT 7
33132: PLUS
33133: PUSH
33134: LD_VAR 0 15
33138: LESS
33139: IFFALSE 33168
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33141: LD_ADDR_VAR 0 18
33145: PUSH
33146: LD_INT 7
33148: PUSH
33149: LD_INT 28
33151: PUSH
33152: LD_INT 45
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: PUSH
33160: LD_VAR 0 12
33164: ARRAY
33165: ST_TO_ADDR
// break ;
33166: GO 33170
// end ; end ; end ;
33168: GO 32999
33170: POP
33171: POP
// end ; if not weapon then
33172: LD_VAR 0 18
33176: NOT
33177: IFFALSE 33237
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_VAR 0 5
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 30
33194: PUSH
33195: LD_INT 49
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: DIFF
33203: ST_TO_ADDR
// if not list then
33204: LD_VAR 0 5
33208: NOT
33209: IFFALSE 33213
// exit ;
33211: GO 33355
// weapon := list [ rand ( 1 , list ) ] ;
33213: LD_ADDR_VAR 0 18
33217: PUSH
33218: LD_VAR 0 5
33222: PUSH
33223: LD_INT 1
33225: PPUSH
33226: LD_VAR 0 5
33230: PPUSH
33231: CALL_OW 12
33235: ARRAY
33236: ST_TO_ADDR
// end ; if weapon then
33237: LD_VAR 0 18
33241: IFFALSE 33355
// begin tmp := CostOfWeapon ( weapon ) ;
33243: LD_ADDR_VAR 0 14
33247: PUSH
33248: LD_VAR 0 18
33252: PPUSH
33253: CALL_OW 451
33257: ST_TO_ADDR
// j := GetBase ( tower ) ;
33258: LD_ADDR_VAR 0 9
33262: PUSH
33263: LD_VAR 0 1
33267: PPUSH
33268: CALL_OW 274
33272: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33273: LD_VAR 0 9
33277: PPUSH
33278: LD_INT 1
33280: PPUSH
33281: CALL_OW 275
33285: PUSH
33286: LD_VAR 0 14
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: GREATEREQUAL
33295: PUSH
33296: LD_VAR 0 9
33300: PPUSH
33301: LD_INT 2
33303: PPUSH
33304: CALL_OW 275
33308: PUSH
33309: LD_VAR 0 14
33313: PUSH
33314: LD_INT 2
33316: ARRAY
33317: GREATEREQUAL
33318: AND
33319: PUSH
33320: LD_VAR 0 9
33324: PPUSH
33325: LD_INT 3
33327: PPUSH
33328: CALL_OW 275
33332: PUSH
33333: LD_VAR 0 14
33337: PUSH
33338: LD_INT 3
33340: ARRAY
33341: GREATEREQUAL
33342: AND
33343: IFFALSE 33355
// result := weapon ;
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_VAR 0 18
33354: ST_TO_ADDR
// end ; end ;
33355: LD_VAR 0 3
33359: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33360: LD_INT 0
33362: PPUSH
33363: PPUSH
// result := true ;
33364: LD_ADDR_VAR 0 3
33368: PUSH
33369: LD_INT 1
33371: ST_TO_ADDR
// if array1 = array2 then
33372: LD_VAR 0 1
33376: PUSH
33377: LD_VAR 0 2
33381: EQUAL
33382: IFFALSE 33442
// begin for i = 1 to array1 do
33384: LD_ADDR_VAR 0 4
33388: PUSH
33389: DOUBLE
33390: LD_INT 1
33392: DEC
33393: ST_TO_ADDR
33394: LD_VAR 0 1
33398: PUSH
33399: FOR_TO
33400: IFFALSE 33438
// if array1 [ i ] <> array2 [ i ] then
33402: LD_VAR 0 1
33406: PUSH
33407: LD_VAR 0 4
33411: ARRAY
33412: PUSH
33413: LD_VAR 0 2
33417: PUSH
33418: LD_VAR 0 4
33422: ARRAY
33423: NONEQUAL
33424: IFFALSE 33436
// begin result := false ;
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 0
33433: ST_TO_ADDR
// break ;
33434: GO 33438
// end ;
33436: GO 33399
33438: POP
33439: POP
// end else
33440: GO 33450
// result := false ;
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_INT 0
33449: ST_TO_ADDR
// end ;
33450: LD_VAR 0 3
33454: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33455: LD_INT 0
33457: PPUSH
33458: PPUSH
// if not array1 or not array2 then
33459: LD_VAR 0 1
33463: NOT
33464: PUSH
33465: LD_VAR 0 2
33469: NOT
33470: OR
33471: IFFALSE 33475
// exit ;
33473: GO 33539
// result := true ;
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_INT 1
33482: ST_TO_ADDR
// for i = 1 to array1 do
33483: LD_ADDR_VAR 0 4
33487: PUSH
33488: DOUBLE
33489: LD_INT 1
33491: DEC
33492: ST_TO_ADDR
33493: LD_VAR 0 1
33497: PUSH
33498: FOR_TO
33499: IFFALSE 33537
// if array1 [ i ] <> array2 [ i ] then
33501: LD_VAR 0 1
33505: PUSH
33506: LD_VAR 0 4
33510: ARRAY
33511: PUSH
33512: LD_VAR 0 2
33516: PUSH
33517: LD_VAR 0 4
33521: ARRAY
33522: NONEQUAL
33523: IFFALSE 33535
// begin result := false ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_INT 0
33532: ST_TO_ADDR
// break ;
33533: GO 33537
// end ;
33535: GO 33498
33537: POP
33538: POP
// end ;
33539: LD_VAR 0 3
33543: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
33548: PPUSH
// pom := GetBase ( fac ) ;
33549: LD_ADDR_VAR 0 5
33553: PUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: CALL_OW 274
33563: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33564: LD_ADDR_VAR 0 4
33568: PUSH
33569: LD_VAR 0 2
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: PPUSH
33578: LD_VAR 0 2
33582: PUSH
33583: LD_INT 2
33585: ARRAY
33586: PPUSH
33587: LD_VAR 0 2
33591: PUSH
33592: LD_INT 3
33594: ARRAY
33595: PPUSH
33596: LD_VAR 0 2
33600: PUSH
33601: LD_INT 4
33603: ARRAY
33604: PPUSH
33605: CALL_OW 449
33609: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_VAR 0 5
33619: PPUSH
33620: LD_INT 1
33622: PPUSH
33623: CALL_OW 275
33627: PUSH
33628: LD_VAR 0 4
33632: PUSH
33633: LD_INT 1
33635: ARRAY
33636: GREATEREQUAL
33637: PUSH
33638: LD_VAR 0 5
33642: PPUSH
33643: LD_INT 2
33645: PPUSH
33646: CALL_OW 275
33650: PUSH
33651: LD_VAR 0 4
33655: PUSH
33656: LD_INT 2
33658: ARRAY
33659: GREATEREQUAL
33660: AND
33661: PUSH
33662: LD_VAR 0 5
33666: PPUSH
33667: LD_INT 3
33669: PPUSH
33670: CALL_OW 275
33674: PUSH
33675: LD_VAR 0 4
33679: PUSH
33680: LD_INT 3
33682: ARRAY
33683: GREATEREQUAL
33684: AND
33685: ST_TO_ADDR
// end ;
33686: LD_VAR 0 3
33690: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
// pom := GetBase ( building ) ;
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL_OW 274
33711: ST_TO_ADDR
// if not pom then
33712: LD_VAR 0 3
33716: NOT
33717: IFFALSE 33721
// exit ;
33719: GO 33891
// btype := GetBType ( building ) ;
33721: LD_ADDR_VAR 0 5
33725: PUSH
33726: LD_VAR 0 1
33730: PPUSH
33731: CALL_OW 266
33735: ST_TO_ADDR
// if btype = b_armoury then
33736: LD_VAR 0 5
33740: PUSH
33741: LD_INT 4
33743: EQUAL
33744: IFFALSE 33754
// btype := b_barracks ;
33746: LD_ADDR_VAR 0 5
33750: PUSH
33751: LD_INT 5
33753: ST_TO_ADDR
// if btype = b_depot then
33754: LD_VAR 0 5
33758: PUSH
33759: LD_INT 0
33761: EQUAL
33762: IFFALSE 33772
// btype := b_warehouse ;
33764: LD_ADDR_VAR 0 5
33768: PUSH
33769: LD_INT 1
33771: ST_TO_ADDR
// if btype = b_workshop then
33772: LD_VAR 0 5
33776: PUSH
33777: LD_INT 2
33779: EQUAL
33780: IFFALSE 33790
// btype := b_factory ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_INT 3
33789: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33790: LD_ADDR_VAR 0 4
33794: PUSH
33795: LD_VAR 0 5
33799: PPUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 248
33809: PPUSH
33810: CALL_OW 450
33814: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33815: LD_ADDR_VAR 0 2
33819: PUSH
33820: LD_VAR 0 3
33824: PPUSH
33825: LD_INT 1
33827: PPUSH
33828: CALL_OW 275
33832: PUSH
33833: LD_VAR 0 4
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: GREATEREQUAL
33842: PUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: LD_INT 2
33850: PPUSH
33851: CALL_OW 275
33855: PUSH
33856: LD_VAR 0 4
33860: PUSH
33861: LD_INT 2
33863: ARRAY
33864: GREATEREQUAL
33865: AND
33866: PUSH
33867: LD_VAR 0 3
33871: PPUSH
33872: LD_INT 3
33874: PPUSH
33875: CALL_OW 275
33879: PUSH
33880: LD_VAR 0 4
33884: PUSH
33885: LD_INT 3
33887: ARRAY
33888: GREATEREQUAL
33889: AND
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 2
33895: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33896: LD_INT 0
33898: PPUSH
33899: PPUSH
33900: PPUSH
// pom := GetBase ( building ) ;
33901: LD_ADDR_VAR 0 4
33905: PUSH
33906: LD_VAR 0 1
33910: PPUSH
33911: CALL_OW 274
33915: ST_TO_ADDR
// if not pom then
33916: LD_VAR 0 4
33920: NOT
33921: IFFALSE 33925
// exit ;
33923: GO 34026
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33925: LD_ADDR_VAR 0 5
33929: PUSH
33930: LD_VAR 0 2
33934: PPUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 248
33944: PPUSH
33945: CALL_OW 450
33949: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: LD_VAR 0 4
33959: PPUSH
33960: LD_INT 1
33962: PPUSH
33963: CALL_OW 275
33967: PUSH
33968: LD_VAR 0 5
33972: PUSH
33973: LD_INT 1
33975: ARRAY
33976: GREATEREQUAL
33977: PUSH
33978: LD_VAR 0 4
33982: PPUSH
33983: LD_INT 2
33985: PPUSH
33986: CALL_OW 275
33990: PUSH
33991: LD_VAR 0 5
33995: PUSH
33996: LD_INT 2
33998: ARRAY
33999: GREATEREQUAL
34000: AND
34001: PUSH
34002: LD_VAR 0 4
34006: PPUSH
34007: LD_INT 3
34009: PPUSH
34010: CALL_OW 275
34014: PUSH
34015: LD_VAR 0 5
34019: PUSH
34020: LD_INT 3
34022: ARRAY
34023: GREATEREQUAL
34024: AND
34025: ST_TO_ADDR
// end ;
34026: LD_VAR 0 3
34030: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34031: LD_INT 0
34033: PPUSH
34034: PPUSH
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
// result := false ;
34044: LD_ADDR_VAR 0 8
34048: PUSH
34049: LD_INT 0
34051: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34052: LD_VAR 0 5
34056: NOT
34057: PUSH
34058: LD_VAR 0 1
34062: NOT
34063: OR
34064: PUSH
34065: LD_VAR 0 2
34069: NOT
34070: OR
34071: PUSH
34072: LD_VAR 0 3
34076: NOT
34077: OR
34078: IFFALSE 34082
// exit ;
34080: GO 34896
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34082: LD_ADDR_VAR 0 14
34086: PUSH
34087: LD_VAR 0 1
34091: PPUSH
34092: LD_VAR 0 2
34096: PPUSH
34097: LD_VAR 0 3
34101: PPUSH
34102: LD_VAR 0 4
34106: PPUSH
34107: LD_VAR 0 5
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: PPUSH
34116: CALL_OW 248
34120: PPUSH
34121: LD_INT 0
34123: PPUSH
34124: CALL 36149 0 6
34128: ST_TO_ADDR
// if not hexes then
34129: LD_VAR 0 14
34133: NOT
34134: IFFALSE 34138
// exit ;
34136: GO 34896
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34138: LD_ADDR_VAR 0 17
34142: PUSH
34143: LD_VAR 0 5
34147: PPUSH
34148: LD_INT 22
34150: PUSH
34151: LD_VAR 0 13
34155: PPUSH
34156: CALL_OW 255
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 30
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 30
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PPUSH
34197: CALL_OW 72
34201: ST_TO_ADDR
// for i = 1 to hexes do
34202: LD_ADDR_VAR 0 9
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_VAR 0 14
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34894
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34220: LD_ADDR_VAR 0 13
34224: PUSH
34225: LD_VAR 0 14
34229: PUSH
34230: LD_VAR 0 9
34234: ARRAY
34235: PUSH
34236: LD_INT 1
34238: ARRAY
34239: PPUSH
34240: LD_VAR 0 14
34244: PUSH
34245: LD_VAR 0 9
34249: ARRAY
34250: PUSH
34251: LD_INT 2
34253: ARRAY
34254: PPUSH
34255: CALL_OW 428
34259: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34260: LD_VAR 0 14
34264: PUSH
34265: LD_VAR 0 9
34269: ARRAY
34270: PUSH
34271: LD_INT 1
34273: ARRAY
34274: PPUSH
34275: LD_VAR 0 14
34279: PUSH
34280: LD_VAR 0 9
34284: ARRAY
34285: PUSH
34286: LD_INT 2
34288: ARRAY
34289: PPUSH
34290: CALL_OW 351
34294: PUSH
34295: LD_VAR 0 14
34299: PUSH
34300: LD_VAR 0 9
34304: ARRAY
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: LD_VAR 0 14
34314: PUSH
34315: LD_VAR 0 9
34319: ARRAY
34320: PUSH
34321: LD_INT 2
34323: ARRAY
34324: PPUSH
34325: CALL_OW 488
34329: NOT
34330: OR
34331: PUSH
34332: LD_VAR 0 13
34336: PPUSH
34337: CALL_OW 247
34341: PUSH
34342: LD_INT 3
34344: EQUAL
34345: OR
34346: IFFALSE 34352
// exit ;
34348: POP
34349: POP
34350: GO 34896
// if not tmp then
34352: LD_VAR 0 13
34356: NOT
34357: IFFALSE 34361
// continue ;
34359: GO 34217
// result := true ;
34361: LD_ADDR_VAR 0 8
34365: PUSH
34366: LD_INT 1
34368: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34369: LD_VAR 0 6
34373: PUSH
34374: LD_VAR 0 13
34378: PPUSH
34379: CALL_OW 247
34383: PUSH
34384: LD_INT 2
34386: EQUAL
34387: AND
34388: PUSH
34389: LD_VAR 0 13
34393: PPUSH
34394: CALL_OW 263
34398: PUSH
34399: LD_INT 1
34401: EQUAL
34402: AND
34403: IFFALSE 34567
// begin if IsDrivenBy ( tmp ) then
34405: LD_VAR 0 13
34409: PPUSH
34410: CALL_OW 311
34414: IFFALSE 34418
// continue ;
34416: GO 34217
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34418: LD_VAR 0 6
34422: PPUSH
34423: LD_INT 3
34425: PUSH
34426: LD_INT 60
34428: PUSH
34429: EMPTY
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 3
34438: PUSH
34439: LD_INT 55
34441: PUSH
34442: EMPTY
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PPUSH
34453: CALL_OW 72
34457: IFFALSE 34565
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34459: LD_ADDR_VAR 0 18
34463: PUSH
34464: LD_VAR 0 6
34468: PPUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 60
34474: PUSH
34475: EMPTY
34476: LIST
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: LD_INT 55
34487: PUSH
34488: EMPTY
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PPUSH
34499: CALL_OW 72
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: ST_TO_ADDR
// if IsInUnit ( driver ) then
34508: LD_VAR 0 18
34512: PPUSH
34513: CALL_OW 310
34517: IFFALSE 34528
// ComExit ( driver ) ;
34519: LD_VAR 0 18
34523: PPUSH
34524: CALL 59928 0 1
// AddComEnterUnit ( driver , tmp ) ;
34528: LD_VAR 0 18
34532: PPUSH
34533: LD_VAR 0 13
34537: PPUSH
34538: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34542: LD_VAR 0 18
34546: PPUSH
34547: LD_VAR 0 7
34551: PPUSH
34552: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34556: LD_VAR 0 18
34560: PPUSH
34561: CALL_OW 181
// end ; continue ;
34565: GO 34217
// end ; if not cleaners or not tmp in cleaners then
34567: LD_VAR 0 6
34571: NOT
34572: PUSH
34573: LD_VAR 0 13
34577: PUSH
34578: LD_VAR 0 6
34582: IN
34583: NOT
34584: OR
34585: IFFALSE 34892
// begin if dep then
34587: LD_VAR 0 17
34591: IFFALSE 34727
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34593: LD_ADDR_VAR 0 16
34597: PUSH
34598: LD_VAR 0 17
34602: PUSH
34603: LD_INT 1
34605: ARRAY
34606: PPUSH
34607: CALL_OW 250
34611: PPUSH
34612: LD_VAR 0 17
34616: PUSH
34617: LD_INT 1
34619: ARRAY
34620: PPUSH
34621: CALL_OW 254
34625: PPUSH
34626: LD_INT 5
34628: PPUSH
34629: CALL_OW 272
34633: PUSH
34634: LD_VAR 0 17
34638: PUSH
34639: LD_INT 1
34641: ARRAY
34642: PPUSH
34643: CALL_OW 251
34647: PPUSH
34648: LD_VAR 0 17
34652: PUSH
34653: LD_INT 1
34655: ARRAY
34656: PPUSH
34657: CALL_OW 254
34661: PPUSH
34662: LD_INT 5
34664: PPUSH
34665: CALL_OW 273
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34674: LD_VAR 0 16
34678: PUSH
34679: LD_INT 1
34681: ARRAY
34682: PPUSH
34683: LD_VAR 0 16
34687: PUSH
34688: LD_INT 2
34690: ARRAY
34691: PPUSH
34692: CALL_OW 488
34696: IFFALSE 34727
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34698: LD_VAR 0 13
34702: PPUSH
34703: LD_VAR 0 16
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PPUSH
34712: LD_VAR 0 16
34716: PUSH
34717: LD_INT 2
34719: ARRAY
34720: PPUSH
34721: CALL_OW 111
// continue ;
34725: GO 34217
// end ; end ; r := GetDir ( tmp ) ;
34727: LD_ADDR_VAR 0 15
34731: PUSH
34732: LD_VAR 0 13
34736: PPUSH
34737: CALL_OW 254
34741: ST_TO_ADDR
// if r = 5 then
34742: LD_VAR 0 15
34746: PUSH
34747: LD_INT 5
34749: EQUAL
34750: IFFALSE 34760
// r := 0 ;
34752: LD_ADDR_VAR 0 15
34756: PUSH
34757: LD_INT 0
34759: ST_TO_ADDR
// for j = r to 5 do
34760: LD_ADDR_VAR 0 10
34764: PUSH
34765: DOUBLE
34766: LD_VAR 0 15
34770: DEC
34771: ST_TO_ADDR
34772: LD_INT 5
34774: PUSH
34775: FOR_TO
34776: IFFALSE 34890
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34778: LD_ADDR_VAR 0 11
34782: PUSH
34783: LD_VAR 0 13
34787: PPUSH
34788: CALL_OW 250
34792: PPUSH
34793: LD_VAR 0 10
34797: PPUSH
34798: LD_INT 2
34800: PPUSH
34801: CALL_OW 272
34805: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34806: LD_ADDR_VAR 0 12
34810: PUSH
34811: LD_VAR 0 13
34815: PPUSH
34816: CALL_OW 251
34820: PPUSH
34821: LD_VAR 0 10
34825: PPUSH
34826: LD_INT 2
34828: PPUSH
34829: CALL_OW 273
34833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34834: LD_VAR 0 11
34838: PPUSH
34839: LD_VAR 0 12
34843: PPUSH
34844: CALL_OW 488
34848: PUSH
34849: LD_VAR 0 11
34853: PPUSH
34854: LD_VAR 0 12
34858: PPUSH
34859: CALL_OW 428
34863: NOT
34864: AND
34865: IFFALSE 34888
// begin ComMoveXY ( tmp , _x , _y ) ;
34867: LD_VAR 0 13
34871: PPUSH
34872: LD_VAR 0 11
34876: PPUSH
34877: LD_VAR 0 12
34881: PPUSH
34882: CALL_OW 111
// break ;
34886: GO 34890
// end ; end ;
34888: GO 34775
34890: POP
34891: POP
// end ; end ;
34892: GO 34217
34894: POP
34895: POP
// end ;
34896: LD_VAR 0 8
34900: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34901: LD_INT 0
34903: PPUSH
// result := true ;
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_INT 1
34911: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34912: LD_VAR 0 2
34916: PUSH
34917: LD_INT 24
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34931
34923: LD_INT 33
34925: DOUBLE
34926: EQUAL
34927: IFTRUE 34931
34929: GO 34956
34931: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34932: LD_ADDR_VAR 0 3
34936: PUSH
34937: LD_INT 32
34939: PPUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 321
34949: PUSH
34950: LD_INT 2
34952: EQUAL
34953: ST_TO_ADDR
34954: GO 35272
34956: LD_INT 20
34958: DOUBLE
34959: EQUAL
34960: IFTRUE 34964
34962: GO 34989
34964: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34965: LD_ADDR_VAR 0 3
34969: PUSH
34970: LD_INT 6
34972: PPUSH
34973: LD_VAR 0 1
34977: PPUSH
34978: CALL_OW 321
34982: PUSH
34983: LD_INT 2
34985: EQUAL
34986: ST_TO_ADDR
34987: GO 35272
34989: LD_INT 22
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 35003
34995: LD_INT 36
34997: DOUBLE
34998: EQUAL
34999: IFTRUE 35003
35001: GO 35028
35003: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_INT 15
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 321
35021: PUSH
35022: LD_INT 2
35024: EQUAL
35025: ST_TO_ADDR
35026: GO 35272
35028: LD_INT 30
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35061
35036: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 20
35044: PPUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 321
35054: PUSH
35055: LD_INT 2
35057: EQUAL
35058: ST_TO_ADDR
35059: GO 35272
35061: LD_INT 28
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35075
35067: LD_INT 21
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35100
35075: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_INT 21
35083: PPUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 321
35093: PUSH
35094: LD_INT 2
35096: EQUAL
35097: ST_TO_ADDR
35098: GO 35272
35100: LD_INT 16
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35133
35108: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 84
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 321
35126: PUSH
35127: LD_INT 2
35129: EQUAL
35130: ST_TO_ADDR
35131: GO 35272
35133: LD_INT 19
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35147
35139: LD_INT 23
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35172
35147: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 83
35155: PPUSH
35156: LD_VAR 0 1
35160: PPUSH
35161: CALL_OW 321
35165: PUSH
35166: LD_INT 2
35168: EQUAL
35169: ST_TO_ADDR
35170: GO 35272
35172: LD_INT 17
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35205
35180: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_INT 39
35188: PPUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: CALL_OW 321
35198: PUSH
35199: LD_INT 2
35201: EQUAL
35202: ST_TO_ADDR
35203: GO 35272
35205: LD_INT 18
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35238
35213: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_INT 40
35221: PPUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 321
35231: PUSH
35232: LD_INT 2
35234: EQUAL
35235: ST_TO_ADDR
35236: GO 35272
35238: LD_INT 27
35240: DOUBLE
35241: EQUAL
35242: IFTRUE 35246
35244: GO 35271
35246: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35247: LD_ADDR_VAR 0 3
35251: PUSH
35252: LD_INT 35
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 321
35264: PUSH
35265: LD_INT 2
35267: EQUAL
35268: ST_TO_ADDR
35269: GO 35272
35271: POP
// end ;
35272: LD_VAR 0 3
35276: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35277: LD_INT 0
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
// result := false ;
35290: LD_ADDR_VAR 0 6
35294: PUSH
35295: LD_INT 0
35297: ST_TO_ADDR
// if btype = b_depot then
35298: LD_VAR 0 2
35302: PUSH
35303: LD_INT 0
35305: EQUAL
35306: IFFALSE 35318
// begin result := true ;
35308: LD_ADDR_VAR 0 6
35312: PUSH
35313: LD_INT 1
35315: ST_TO_ADDR
// exit ;
35316: GO 36144
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35318: LD_VAR 0 1
35322: NOT
35323: PUSH
35324: LD_VAR 0 1
35328: PPUSH
35329: CALL_OW 266
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: IN
35344: NOT
35345: OR
35346: PUSH
35347: LD_VAR 0 2
35351: NOT
35352: OR
35353: PUSH
35354: LD_VAR 0 5
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 4
35373: PUSH
35374: LD_INT 5
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: IN
35385: NOT
35386: OR
35387: PUSH
35388: LD_VAR 0 3
35392: PPUSH
35393: LD_VAR 0 4
35397: PPUSH
35398: CALL_OW 488
35402: NOT
35403: OR
35404: IFFALSE 35408
// exit ;
35406: GO 36144
// side := GetSide ( depot ) ;
35408: LD_ADDR_VAR 0 9
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 255
35422: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35423: LD_VAR 0 9
35427: PPUSH
35428: LD_VAR 0 2
35432: PPUSH
35433: CALL 34901 0 2
35437: NOT
35438: IFFALSE 35442
// exit ;
35440: GO 36144
// pom := GetBase ( depot ) ;
35442: LD_ADDR_VAR 0 10
35446: PUSH
35447: LD_VAR 0 1
35451: PPUSH
35452: CALL_OW 274
35456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35457: LD_ADDR_VAR 0 11
35461: PUSH
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 248
35476: PPUSH
35477: CALL_OW 450
35481: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35482: LD_VAR 0 10
35486: PPUSH
35487: LD_INT 1
35489: PPUSH
35490: CALL_OW 275
35494: PUSH
35495: LD_VAR 0 11
35499: PUSH
35500: LD_INT 1
35502: ARRAY
35503: GREATEREQUAL
35504: PUSH
35505: LD_VAR 0 10
35509: PPUSH
35510: LD_INT 2
35512: PPUSH
35513: CALL_OW 275
35517: PUSH
35518: LD_VAR 0 11
35522: PUSH
35523: LD_INT 2
35525: ARRAY
35526: GREATEREQUAL
35527: AND
35528: PUSH
35529: LD_VAR 0 10
35533: PPUSH
35534: LD_INT 3
35536: PPUSH
35537: CALL_OW 275
35541: PUSH
35542: LD_VAR 0 11
35546: PUSH
35547: LD_INT 3
35549: ARRAY
35550: GREATEREQUAL
35551: AND
35552: NOT
35553: IFFALSE 35557
// exit ;
35555: GO 36144
// if GetBType ( depot ) = b_depot then
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL_OW 266
35566: PUSH
35567: LD_INT 0
35569: EQUAL
35570: IFFALSE 35582
// dist := 28 else
35572: LD_ADDR_VAR 0 14
35576: PUSH
35577: LD_INT 28
35579: ST_TO_ADDR
35580: GO 35590
// dist := 36 ;
35582: LD_ADDR_VAR 0 14
35586: PUSH
35587: LD_INT 36
35589: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35590: LD_VAR 0 1
35594: PPUSH
35595: LD_VAR 0 3
35599: PPUSH
35600: LD_VAR 0 4
35604: PPUSH
35605: CALL_OW 297
35609: PUSH
35610: LD_VAR 0 14
35614: GREATER
35615: IFFALSE 35619
// exit ;
35617: GO 36144
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35619: LD_ADDR_VAR 0 12
35623: PUSH
35624: LD_VAR 0 2
35628: PPUSH
35629: LD_VAR 0 3
35633: PPUSH
35634: LD_VAR 0 4
35638: PPUSH
35639: LD_VAR 0 5
35643: PPUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 248
35653: PPUSH
35654: LD_INT 0
35656: PPUSH
35657: CALL 36149 0 6
35661: ST_TO_ADDR
// if not hexes then
35662: LD_VAR 0 12
35666: NOT
35667: IFFALSE 35671
// exit ;
35669: GO 36144
// hex := GetHexInfo ( x , y ) ;
35671: LD_ADDR_VAR 0 15
35675: PUSH
35676: LD_VAR 0 3
35680: PPUSH
35681: LD_VAR 0 4
35685: PPUSH
35686: CALL_OW 546
35690: ST_TO_ADDR
// if hex [ 1 ] then
35691: LD_VAR 0 15
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: IFFALSE 35703
// exit ;
35701: GO 36144
// height := hex [ 2 ] ;
35703: LD_ADDR_VAR 0 13
35707: PUSH
35708: LD_VAR 0 15
35712: PUSH
35713: LD_INT 2
35715: ARRAY
35716: ST_TO_ADDR
// for i = 1 to hexes do
35717: LD_ADDR_VAR 0 7
35721: PUSH
35722: DOUBLE
35723: LD_INT 1
35725: DEC
35726: ST_TO_ADDR
35727: LD_VAR 0 12
35731: PUSH
35732: FOR_TO
35733: IFFALSE 36063
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35735: LD_VAR 0 12
35739: PUSH
35740: LD_VAR 0 7
35744: ARRAY
35745: PUSH
35746: LD_INT 1
35748: ARRAY
35749: PPUSH
35750: LD_VAR 0 12
35754: PUSH
35755: LD_VAR 0 7
35759: ARRAY
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PPUSH
35765: CALL_OW 488
35769: NOT
35770: PUSH
35771: LD_VAR 0 12
35775: PUSH
35776: LD_VAR 0 7
35780: ARRAY
35781: PUSH
35782: LD_INT 1
35784: ARRAY
35785: PPUSH
35786: LD_VAR 0 12
35790: PUSH
35791: LD_VAR 0 7
35795: ARRAY
35796: PUSH
35797: LD_INT 2
35799: ARRAY
35800: PPUSH
35801: CALL_OW 428
35805: PUSH
35806: LD_INT 0
35808: GREATER
35809: OR
35810: PUSH
35811: LD_VAR 0 12
35815: PUSH
35816: LD_VAR 0 7
35820: ARRAY
35821: PUSH
35822: LD_INT 1
35824: ARRAY
35825: PPUSH
35826: LD_VAR 0 12
35830: PUSH
35831: LD_VAR 0 7
35835: ARRAY
35836: PUSH
35837: LD_INT 2
35839: ARRAY
35840: PPUSH
35841: CALL_OW 351
35845: OR
35846: IFFALSE 35852
// exit ;
35848: POP
35849: POP
35850: GO 36144
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35852: LD_ADDR_VAR 0 8
35856: PUSH
35857: LD_VAR 0 12
35861: PUSH
35862: LD_VAR 0 7
35866: ARRAY
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PPUSH
35872: LD_VAR 0 12
35876: PUSH
35877: LD_VAR 0 7
35881: ARRAY
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PPUSH
35887: CALL_OW 546
35891: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35892: LD_VAR 0 8
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PUSH
35901: LD_VAR 0 8
35905: PUSH
35906: LD_INT 2
35908: ARRAY
35909: PUSH
35910: LD_VAR 0 13
35914: PUSH
35915: LD_INT 2
35917: PLUS
35918: GREATER
35919: OR
35920: PUSH
35921: LD_VAR 0 8
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: PUSH
35930: LD_VAR 0 13
35934: PUSH
35935: LD_INT 2
35937: MINUS
35938: LESS
35939: OR
35940: PUSH
35941: LD_VAR 0 8
35945: PUSH
35946: LD_INT 3
35948: ARRAY
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 8
35955: PUSH
35956: LD_INT 9
35958: PUSH
35959: LD_INT 10
35961: PUSH
35962: LD_INT 11
35964: PUSH
35965: LD_INT 12
35967: PUSH
35968: LD_INT 13
35970: PUSH
35971: LD_INT 16
35973: PUSH
35974: LD_INT 17
35976: PUSH
35977: LD_INT 18
35979: PUSH
35980: LD_INT 19
35982: PUSH
35983: LD_INT 20
35985: PUSH
35986: LD_INT 21
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: IN
36004: NOT
36005: OR
36006: PUSH
36007: LD_VAR 0 8
36011: PUSH
36012: LD_INT 5
36014: ARRAY
36015: NOT
36016: OR
36017: PUSH
36018: LD_VAR 0 8
36022: PUSH
36023: LD_INT 6
36025: ARRAY
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 7
36035: PUSH
36036: LD_INT 9
36038: PUSH
36039: LD_INT 10
36041: PUSH
36042: LD_INT 11
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: IN
36053: NOT
36054: OR
36055: IFFALSE 36061
// exit ;
36057: POP
36058: POP
36059: GO 36144
// end ;
36061: GO 35732
36063: POP
36064: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36065: LD_VAR 0 9
36069: PPUSH
36070: LD_VAR 0 3
36074: PPUSH
36075: LD_VAR 0 4
36079: PPUSH
36080: LD_INT 20
36082: PPUSH
36083: CALL 28067 0 4
36087: PUSH
36088: LD_INT 4
36090: ARRAY
36091: IFFALSE 36095
// exit ;
36093: GO 36144
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36095: LD_VAR 0 2
36099: PUSH
36100: LD_INT 29
36102: PUSH
36103: LD_INT 30
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: IN
36110: PUSH
36111: LD_VAR 0 3
36115: PPUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: LD_VAR 0 9
36125: PPUSH
36126: CALL_OW 440
36130: NOT
36131: AND
36132: IFFALSE 36136
// exit ;
36134: GO 36144
// result := true ;
36136: LD_ADDR_VAR 0 6
36140: PUSH
36141: LD_INT 1
36143: ST_TO_ADDR
// end ;
36144: LD_VAR 0 6
36148: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36149: LD_INT 0
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
36165: PPUSH
36166: PPUSH
36167: PPUSH
36168: PPUSH
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
// result = [ ] ;
36209: LD_ADDR_VAR 0 7
36213: PUSH
36214: EMPTY
36215: ST_TO_ADDR
// temp_list = [ ] ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: EMPTY
36222: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36223: LD_VAR 0 4
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: LD_INT 4
36242: PUSH
36243: LD_INT 5
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: IN
36254: NOT
36255: PUSH
36256: LD_VAR 0 1
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: IN
36271: PUSH
36272: LD_VAR 0 5
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 3
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: IN
36291: NOT
36292: AND
36293: OR
36294: IFFALSE 36298
// exit ;
36296: GO 54689
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36298: LD_VAR 0 1
36302: PUSH
36303: LD_INT 6
36305: PUSH
36306: LD_INT 7
36308: PUSH
36309: LD_INT 8
36311: PUSH
36312: LD_INT 13
36314: PUSH
36315: LD_INT 12
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 11
36323: PUSH
36324: LD_INT 14
36326: PUSH
36327: LD_INT 10
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: IN
36341: IFFALSE 36351
// btype = b_lab ;
36343: LD_ADDR_VAR 0 1
36347: PUSH
36348: LD_INT 6
36350: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36351: LD_VAR 0 6
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: IN
36370: NOT
36371: PUSH
36372: LD_VAR 0 1
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 6
36391: PUSH
36392: LD_INT 36
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: LD_INT 5
36400: PUSH
36401: LD_INT 31
36403: PUSH
36404: LD_INT 32
36406: PUSH
36407: LD_INT 33
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: IN
36423: NOT
36424: PUSH
36425: LD_VAR 0 6
36429: PUSH
36430: LD_INT 1
36432: EQUAL
36433: AND
36434: OR
36435: PUSH
36436: LD_VAR 0 1
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: IN
36451: NOT
36452: PUSH
36453: LD_VAR 0 6
36457: PUSH
36458: LD_INT 2
36460: EQUAL
36461: AND
36462: OR
36463: IFFALSE 36473
// mode = 0 ;
36465: LD_ADDR_VAR 0 6
36469: PUSH
36470: LD_INT 0
36472: ST_TO_ADDR
// case mode of 0 :
36473: LD_VAR 0 6
36477: PUSH
36478: LD_INT 0
36480: DOUBLE
36481: EQUAL
36482: IFTRUE 36486
36484: GO 47939
36486: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36487: LD_ADDR_VAR 0 11
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 3
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36680: LD_ADDR_VAR 0 12
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: NEG
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 3
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36876: LD_ADDR_VAR 0 13
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: LD_INT 2
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: LD_INT 3
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 3
37035: NEG
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37075: LD_ADDR_VAR 0 14
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 3
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 3
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37271: LD_ADDR_VAR 0 15
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 3
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37464: LD_ADDR_VAR 0 16
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 2
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37657: LD_ADDR_VAR 0 17
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37887: LD_ADDR_VAR 0 18
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38117: LD_ADDR_VAR 0 19
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38347: LD_ADDR_VAR 0 20
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38577: LD_ADDR_VAR 0 21
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38807: LD_ADDR_VAR 0 22
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39037: LD_ADDR_VAR 0 23
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39317: LD_ADDR_VAR 0 24
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: LD_INT 2
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39593: LD_ADDR_VAR 0 25
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39867: LD_ADDR_VAR 0 26
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 3
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40143: LD_ADDR_VAR 0 27
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: NEG
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40423: LD_ADDR_VAR 0 28
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: LD_INT 3
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 3
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40705: LD_ADDR_VAR 0 29
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 3
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 3
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40984: LD_ADDR_VAR 0 30
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 3
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41262: LD_ADDR_VAR 0 31
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: LD_INT 3
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 3
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41540: LD_ADDR_VAR 0 32
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 2
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 3
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: NEG
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41818: LD_ADDR_VAR 0 33
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 2
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: NEG
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42097: LD_ADDR_VAR 0 34
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42377: LD_ADDR_VAR 0 35
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42489: LD_ADDR_VAR 0 36
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42601: LD_ADDR_VAR 0 37
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42713: LD_ADDR_VAR 0 38
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42825: LD_ADDR_VAR 0 39
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42937: LD_ADDR_VAR 0 40
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43049: LD_ADDR_VAR 0 41
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: LD_INT 3
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: NEG
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43399: LD_ADDR_VAR 0 42
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 3
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 3
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 3
43708: NEG
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43749: LD_ADDR_VAR 0 43
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 3
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 3
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44097: LD_ADDR_VAR 0 44
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 3
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 3
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 3
44406: NEG
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44447: LD_ADDR_VAR 0 45
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 3
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 3
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: NEG
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44797: LD_ADDR_VAR 0 46
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 3
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: NEG
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45145: LD_ADDR_VAR 0 47
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45296: LD_ADDR_VAR 0 48
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45443: LD_ADDR_VAR 0 49
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45587: LD_ADDR_VAR 0 50
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45731: LD_ADDR_VAR 0 51
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45878: LD_ADDR_VAR 0 52
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46029: LD_ADDR_VAR 0 53
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46259: LD_ADDR_VAR 0 54
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46489: LD_ADDR_VAR 0 55
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46719: LD_ADDR_VAR 0 56
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46949: LD_ADDR_VAR 0 57
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47179: LD_ADDR_VAR 0 58
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47409: LD_ADDR_VAR 0 59
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47497: LD_ADDR_VAR 0 60
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47585: LD_ADDR_VAR 0 61
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47673: LD_ADDR_VAR 0 62
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47761: LD_ADDR_VAR 0 63
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47849: LD_ADDR_VAR 0 64
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// end ; 1 :
47937: GO 53834
47939: LD_INT 1
47941: DOUBLE
47942: EQUAL
47943: IFTRUE 47947
47945: GO 50570
47947: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 11
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47992: LD_ADDR_VAR 0 12
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48033: LD_ADDR_VAR 0 13
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48073: LD_ADDR_VAR 0 14
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48114: LD_ADDR_VAR 0 15
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48158: LD_ADDR_VAR 0 16
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48204: LD_ADDR_VAR 0 17
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 3
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48248: LD_ADDR_VAR 0 18
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48289: LD_ADDR_VAR 0 19
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48329: LD_ADDR_VAR 0 20
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48370: LD_ADDR_VAR 0 21
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48414: LD_ADDR_VAR 0 22
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: NEG
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48460: LD_ADDR_VAR 0 23
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 4
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 3
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48504: LD_ADDR_VAR 0 24
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 4
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48545: LD_ADDR_VAR 0 25
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 4
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: LD_INT 4
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48585: LD_ADDR_VAR 0 26
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 4
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48626: LD_ADDR_VAR 0 27
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 4
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48670: LD_ADDR_VAR 0 28
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 3
48689: NEG
48690: PUSH
48691: LD_INT 4
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 4
48701: NEG
48702: PUSH
48703: LD_INT 3
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48716: LD_ADDR_VAR 0 29
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 4
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 4
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 5
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 5
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 4
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 6
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 6
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 5
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48871: LD_ADDR_VAR 0 30
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 4
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 4
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 5
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 6
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 6
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49014: LD_ADDR_VAR 0 31
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 4
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 4
49061: PUSH
49062: LD_INT 4
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 4
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: PUSH
49082: LD_INT 4
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 5
49091: PUSH
49092: LD_INT 5
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 4
49101: PUSH
49102: LD_INT 5
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 6
49111: PUSH
49112: LD_INT 5
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 6
49121: PUSH
49122: LD_INT 6
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 5
49131: PUSH
49132: LD_INT 6
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49153: LD_ADDR_VAR 0 32
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 4
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 5
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 5
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 6
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 6
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 5
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49296: LD_ADDR_VAR 0 33
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 4
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 4
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 4
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 5
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 5
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 6
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 6
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49451: LD_ADDR_VAR 0 34
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: LD_INT 4
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 4
49506: NEG
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 4
49518: NEG
49519: PUSH
49520: LD_INT 4
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: LD_INT 5
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 5
49542: NEG
49543: PUSH
49544: LD_INT 4
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 5
49554: NEG
49555: PUSH
49556: LD_INT 5
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 5
49566: NEG
49567: PUSH
49568: LD_INT 6
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 6
49578: NEG
49579: PUSH
49580: LD_INT 5
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 6
49590: NEG
49591: PUSH
49592: LD_INT 6
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49614: LD_ADDR_VAR 0 41
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49658: LD_ADDR_VAR 0 42
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49699: LD_ADDR_VAR 0 43
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 3
49716: PUSH
49717: LD_INT 2
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49739: LD_ADDR_VAR 0 44
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49780: LD_ADDR_VAR 0 45
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49824: LD_ADDR_VAR 0 46
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49870: LD_ADDR_VAR 0 47
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49903: LD_ADDR_VAR 0 48
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49934: LD_ADDR_VAR 0 49
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49963: LD_ADDR_VAR 0 50
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: LD_INT 3
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49992: LD_ADDR_VAR 0 51
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50023: LD_ADDR_VAR 0 52
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50056: LD_ADDR_VAR 0 53
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50100: LD_ADDR_VAR 0 54
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50141: LD_ADDR_VAR 0 55
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50181: LD_ADDR_VAR 0 56
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50222: LD_ADDR_VAR 0 57
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50266: LD_ADDR_VAR 0 58
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50312: LD_ADDR_VAR 0 59
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50356: LD_ADDR_VAR 0 60
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50397: LD_ADDR_VAR 0 61
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50437: LD_ADDR_VAR 0 62
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50478: LD_ADDR_VAR 0 63
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50522: LD_ADDR_VAR 0 64
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// end ; 2 :
50568: GO 53834
50570: LD_INT 2
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 53833
50578: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50579: LD_ADDR_VAR 0 29
50583: PUSH
50584: LD_INT 4
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 4
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 5
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 5
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 5
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 4
50709: PUSH
50710: LD_INT 4
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: LD_INT 4
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 4
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 4
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 5
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 5
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 4
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 5
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 4
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: LD_INT 4
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 4
50976: NEG
50977: PUSH
50978: LD_INT 5
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 4
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: NEG
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 5
51024: NEG
51025: PUSH
51026: LD_INT 4
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 5
51036: NEG
51037: PUSH
51038: LD_INT 5
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 5
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 5
51060: NEG
51061: PUSH
51062: LD_INT 3
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51117: LD_ADDR_VAR 0 30
51121: PUSH
51122: LD_INT 4
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 5
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 5
51154: PUSH
51155: LD_INT 5
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 4
51164: PUSH
51165: LD_INT 5
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 4
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 5
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: LD_INT 5
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 4
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 4
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 5
51363: NEG
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 5
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 5
51386: NEG
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 4
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 4
51481: NEG
51482: PUSH
51483: LD_INT 4
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 4
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 4
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 5
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 4
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 4
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 5
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 5
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51664: LD_ADDR_VAR 0 31
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 5
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 5
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 4
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 5
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 3
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 4
51820: NEG
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 4
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 4
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: NEG
51867: PUSH
51868: LD_INT 4
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 4
51878: NEG
51879: PUSH
51880: LD_INT 5
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 4
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 4
51914: NEG
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 5
51926: NEG
51927: PUSH
51928: LD_INT 4
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 5
51938: NEG
51939: PUSH
51940: LD_INT 5
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 5
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 5
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 4
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 3
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 4
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 4
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 4
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 5
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52214: LD_ADDR_VAR 0 32
52218: PUSH
52219: LD_INT 4
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 4
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 4
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 5
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 5
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 5
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: LD_INT 4
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: LD_INT 4
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 4
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 4
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 5
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 4
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 4
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 5
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 5
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 4
52626: PUSH
52627: LD_INT 4
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 5
52646: PUSH
52647: LD_INT 4
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 5
52656: PUSH
52657: LD_INT 5
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: LD_INT 4
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: LD_INT 5
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52761: LD_ADDR_VAR 0 33
52765: PUSH
52766: LD_INT 4
52768: NEG
52769: PUSH
52770: LD_INT 4
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 4
52780: NEG
52781: PUSH
52782: LD_INT 5
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 4
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 4
52816: NEG
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: LD_INT 4
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: LD_INT 5
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 5
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 5
52864: NEG
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 4
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 4
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 4
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 4
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 4
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 5
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 5
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 4
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 4
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 4
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 4
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 4
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 5
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 5
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53299: LD_ADDR_VAR 0 34
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 4
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 5
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 4
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 3
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 5
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 5
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 4
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 4
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 4
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 5
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 5
53531: PUSH
53532: LD_INT 5
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: PUSH
53542: LD_INT 5
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 5
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 5
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 4
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 4
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 4
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 5
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 5
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 5
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// end ; end ;
53831: GO 53834
53833: POP
// case btype of b_depot , b_warehouse :
53834: LD_VAR 0 1
53838: PUSH
53839: LD_INT 0
53841: DOUBLE
53842: EQUAL
53843: IFTRUE 53853
53845: LD_INT 1
53847: DOUBLE
53848: EQUAL
53849: IFTRUE 53853
53851: GO 54054
53853: POP
// case nation of nation_american :
53854: LD_VAR 0 5
53858: PUSH
53859: LD_INT 1
53861: DOUBLE
53862: EQUAL
53863: IFTRUE 53867
53865: GO 53923
53867: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53868: LD_ADDR_VAR 0 9
53872: PUSH
53873: LD_VAR 0 11
53877: PUSH
53878: LD_VAR 0 12
53882: PUSH
53883: LD_VAR 0 13
53887: PUSH
53888: LD_VAR 0 14
53892: PUSH
53893: LD_VAR 0 15
53897: PUSH
53898: LD_VAR 0 16
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: PUSH
53911: LD_VAR 0 4
53915: PUSH
53916: LD_INT 1
53918: PLUS
53919: ARRAY
53920: ST_TO_ADDR
53921: GO 54052
53923: LD_INT 2
53925: DOUBLE
53926: EQUAL
53927: IFTRUE 53931
53929: GO 53987
53931: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53932: LD_ADDR_VAR 0 9
53936: PUSH
53937: LD_VAR 0 17
53941: PUSH
53942: LD_VAR 0 18
53946: PUSH
53947: LD_VAR 0 19
53951: PUSH
53952: LD_VAR 0 20
53956: PUSH
53957: LD_VAR 0 21
53961: PUSH
53962: LD_VAR 0 22
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: PUSH
53975: LD_VAR 0 4
53979: PUSH
53980: LD_INT 1
53982: PLUS
53983: ARRAY
53984: ST_TO_ADDR
53985: GO 54052
53987: LD_INT 3
53989: DOUBLE
53990: EQUAL
53991: IFTRUE 53995
53993: GO 54051
53995: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53996: LD_ADDR_VAR 0 9
54000: PUSH
54001: LD_VAR 0 23
54005: PUSH
54006: LD_VAR 0 24
54010: PUSH
54011: LD_VAR 0 25
54015: PUSH
54016: LD_VAR 0 26
54020: PUSH
54021: LD_VAR 0 27
54025: PUSH
54026: LD_VAR 0 28
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: PUSH
54039: LD_VAR 0 4
54043: PUSH
54044: LD_INT 1
54046: PLUS
54047: ARRAY
54048: ST_TO_ADDR
54049: GO 54052
54051: POP
54052: GO 54607
54054: LD_INT 2
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54068
54060: LD_INT 3
54062: DOUBLE
54063: EQUAL
54064: IFTRUE 54068
54066: GO 54124
54068: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54069: LD_ADDR_VAR 0 9
54073: PUSH
54074: LD_VAR 0 29
54078: PUSH
54079: LD_VAR 0 30
54083: PUSH
54084: LD_VAR 0 31
54088: PUSH
54089: LD_VAR 0 32
54093: PUSH
54094: LD_VAR 0 33
54098: PUSH
54099: LD_VAR 0 34
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: PUSH
54112: LD_VAR 0 4
54116: PUSH
54117: LD_INT 1
54119: PLUS
54120: ARRAY
54121: ST_TO_ADDR
54122: GO 54607
54124: LD_INT 16
54126: DOUBLE
54127: EQUAL
54128: IFTRUE 54186
54130: LD_INT 17
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54186
54136: LD_INT 18
54138: DOUBLE
54139: EQUAL
54140: IFTRUE 54186
54142: LD_INT 19
54144: DOUBLE
54145: EQUAL
54146: IFTRUE 54186
54148: LD_INT 22
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54186
54154: LD_INT 20
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54186
54160: LD_INT 21
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54186
54166: LD_INT 23
54168: DOUBLE
54169: EQUAL
54170: IFTRUE 54186
54172: LD_INT 24
54174: DOUBLE
54175: EQUAL
54176: IFTRUE 54186
54178: LD_INT 25
54180: DOUBLE
54181: EQUAL
54182: IFTRUE 54186
54184: GO 54242
54186: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54187: LD_ADDR_VAR 0 9
54191: PUSH
54192: LD_VAR 0 35
54196: PUSH
54197: LD_VAR 0 36
54201: PUSH
54202: LD_VAR 0 37
54206: PUSH
54207: LD_VAR 0 38
54211: PUSH
54212: LD_VAR 0 39
54216: PUSH
54217: LD_VAR 0 40
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: PUSH
54230: LD_VAR 0 4
54234: PUSH
54235: LD_INT 1
54237: PLUS
54238: ARRAY
54239: ST_TO_ADDR
54240: GO 54607
54242: LD_INT 6
54244: DOUBLE
54245: EQUAL
54246: IFTRUE 54298
54248: LD_INT 7
54250: DOUBLE
54251: EQUAL
54252: IFTRUE 54298
54254: LD_INT 8
54256: DOUBLE
54257: EQUAL
54258: IFTRUE 54298
54260: LD_INT 13
54262: DOUBLE
54263: EQUAL
54264: IFTRUE 54298
54266: LD_INT 12
54268: DOUBLE
54269: EQUAL
54270: IFTRUE 54298
54272: LD_INT 15
54274: DOUBLE
54275: EQUAL
54276: IFTRUE 54298
54278: LD_INT 11
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54298
54284: LD_INT 14
54286: DOUBLE
54287: EQUAL
54288: IFTRUE 54298
54290: LD_INT 10
54292: DOUBLE
54293: EQUAL
54294: IFTRUE 54298
54296: GO 54354
54298: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54299: LD_ADDR_VAR 0 9
54303: PUSH
54304: LD_VAR 0 41
54308: PUSH
54309: LD_VAR 0 42
54313: PUSH
54314: LD_VAR 0 43
54318: PUSH
54319: LD_VAR 0 44
54323: PUSH
54324: LD_VAR 0 45
54328: PUSH
54329: LD_VAR 0 46
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: PUSH
54342: LD_VAR 0 4
54346: PUSH
54347: LD_INT 1
54349: PLUS
54350: ARRAY
54351: ST_TO_ADDR
54352: GO 54607
54354: LD_INT 36
54356: DOUBLE
54357: EQUAL
54358: IFTRUE 54362
54360: GO 54418
54362: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54363: LD_ADDR_VAR 0 9
54367: PUSH
54368: LD_VAR 0 47
54372: PUSH
54373: LD_VAR 0 48
54377: PUSH
54378: LD_VAR 0 49
54382: PUSH
54383: LD_VAR 0 50
54387: PUSH
54388: LD_VAR 0 51
54392: PUSH
54393: LD_VAR 0 52
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: PUSH
54406: LD_VAR 0 4
54410: PUSH
54411: LD_INT 1
54413: PLUS
54414: ARRAY
54415: ST_TO_ADDR
54416: GO 54607
54418: LD_INT 4
54420: DOUBLE
54421: EQUAL
54422: IFTRUE 54444
54424: LD_INT 5
54426: DOUBLE
54427: EQUAL
54428: IFTRUE 54444
54430: LD_INT 34
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54444
54436: LD_INT 37
54438: DOUBLE
54439: EQUAL
54440: IFTRUE 54444
54442: GO 54500
54444: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54445: LD_ADDR_VAR 0 9
54449: PUSH
54450: LD_VAR 0 53
54454: PUSH
54455: LD_VAR 0 54
54459: PUSH
54460: LD_VAR 0 55
54464: PUSH
54465: LD_VAR 0 56
54469: PUSH
54470: LD_VAR 0 57
54474: PUSH
54475: LD_VAR 0 58
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: PUSH
54488: LD_VAR 0 4
54492: PUSH
54493: LD_INT 1
54495: PLUS
54496: ARRAY
54497: ST_TO_ADDR
54498: GO 54607
54500: LD_INT 31
54502: DOUBLE
54503: EQUAL
54504: IFTRUE 54550
54506: LD_INT 32
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54550
54512: LD_INT 33
54514: DOUBLE
54515: EQUAL
54516: IFTRUE 54550
54518: LD_INT 27
54520: DOUBLE
54521: EQUAL
54522: IFTRUE 54550
54524: LD_INT 26
54526: DOUBLE
54527: EQUAL
54528: IFTRUE 54550
54530: LD_INT 28
54532: DOUBLE
54533: EQUAL
54534: IFTRUE 54550
54536: LD_INT 29
54538: DOUBLE
54539: EQUAL
54540: IFTRUE 54550
54542: LD_INT 30
54544: DOUBLE
54545: EQUAL
54546: IFTRUE 54550
54548: GO 54606
54550: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54551: LD_ADDR_VAR 0 9
54555: PUSH
54556: LD_VAR 0 59
54560: PUSH
54561: LD_VAR 0 60
54565: PUSH
54566: LD_VAR 0 61
54570: PUSH
54571: LD_VAR 0 62
54575: PUSH
54576: LD_VAR 0 63
54580: PUSH
54581: LD_VAR 0 64
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: PUSH
54594: LD_VAR 0 4
54598: PUSH
54599: LD_INT 1
54601: PLUS
54602: ARRAY
54603: ST_TO_ADDR
54604: GO 54607
54606: POP
// temp_list2 = [ ] ;
54607: LD_ADDR_VAR 0 10
54611: PUSH
54612: EMPTY
54613: ST_TO_ADDR
// for i in temp_list do
54614: LD_ADDR_VAR 0 8
54618: PUSH
54619: LD_VAR 0 9
54623: PUSH
54624: FOR_IN
54625: IFFALSE 54677
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54627: LD_ADDR_VAR 0 10
54631: PUSH
54632: LD_VAR 0 10
54636: PUSH
54637: LD_VAR 0 8
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PUSH
54646: LD_VAR 0 2
54650: PLUS
54651: PUSH
54652: LD_VAR 0 8
54656: PUSH
54657: LD_INT 2
54659: ARRAY
54660: PUSH
54661: LD_VAR 0 3
54665: PLUS
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: ADD
54674: ST_TO_ADDR
54675: GO 54624
54677: POP
54678: POP
// result = temp_list2 ;
54679: LD_ADDR_VAR 0 7
54683: PUSH
54684: LD_VAR 0 10
54688: ST_TO_ADDR
// end ;
54689: LD_VAR 0 7
54693: RET
// export function EnemyInRange ( unit , dist ) ; begin
54694: LD_INT 0
54696: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54697: LD_ADDR_VAR 0 3
54701: PUSH
54702: LD_VAR 0 1
54706: PPUSH
54707: CALL_OW 255
54711: PPUSH
54712: LD_VAR 0 1
54716: PPUSH
54717: CALL_OW 250
54721: PPUSH
54722: LD_VAR 0 1
54726: PPUSH
54727: CALL_OW 251
54731: PPUSH
54732: LD_VAR 0 2
54736: PPUSH
54737: CALL 28067 0 4
54741: PUSH
54742: LD_INT 4
54744: ARRAY
54745: ST_TO_ADDR
// end ;
54746: LD_VAR 0 3
54750: RET
// export function PlayerSeeMe ( unit ) ; begin
54751: LD_INT 0
54753: PPUSH
// result := See ( your_side , unit ) ;
54754: LD_ADDR_VAR 0 2
54758: PUSH
54759: LD_OWVAR 2
54763: PPUSH
54764: LD_VAR 0 1
54768: PPUSH
54769: CALL_OW 292
54773: ST_TO_ADDR
// end ;
54774: LD_VAR 0 2
54778: RET
// export function ReverseDir ( unit ) ; begin
54779: LD_INT 0
54781: PPUSH
// if not unit then
54782: LD_VAR 0 1
54786: NOT
54787: IFFALSE 54791
// exit ;
54789: GO 54814
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54791: LD_ADDR_VAR 0 2
54795: PUSH
54796: LD_VAR 0 1
54800: PPUSH
54801: CALL_OW 254
54805: PUSH
54806: LD_INT 3
54808: PLUS
54809: PUSH
54810: LD_INT 6
54812: MOD
54813: ST_TO_ADDR
// end ;
54814: LD_VAR 0 2
54818: RET
// export function ReverseArray ( array ) ; var i ; begin
54819: LD_INT 0
54821: PPUSH
54822: PPUSH
// if not array then
54823: LD_VAR 0 1
54827: NOT
54828: IFFALSE 54832
// exit ;
54830: GO 54887
// result := [ ] ;
54832: LD_ADDR_VAR 0 2
54836: PUSH
54837: EMPTY
54838: ST_TO_ADDR
// for i := array downto 1 do
54839: LD_ADDR_VAR 0 3
54843: PUSH
54844: DOUBLE
54845: LD_VAR 0 1
54849: INC
54850: ST_TO_ADDR
54851: LD_INT 1
54853: PUSH
54854: FOR_DOWNTO
54855: IFFALSE 54885
// result := Join ( result , array [ i ] ) ;
54857: LD_ADDR_VAR 0 2
54861: PUSH
54862: LD_VAR 0 2
54866: PPUSH
54867: LD_VAR 0 1
54871: PUSH
54872: LD_VAR 0 3
54876: ARRAY
54877: PPUSH
54878: CALL 59530 0 2
54882: ST_TO_ADDR
54883: GO 54854
54885: POP
54886: POP
// end ;
54887: LD_VAR 0 2
54891: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54892: LD_INT 0
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
// if not unit or not hexes then
54900: LD_VAR 0 1
54904: NOT
54905: PUSH
54906: LD_VAR 0 2
54910: NOT
54911: OR
54912: IFFALSE 54916
// exit ;
54914: GO 55039
// dist := 9999 ;
54916: LD_ADDR_VAR 0 5
54920: PUSH
54921: LD_INT 9999
54923: ST_TO_ADDR
// for i = 1 to hexes do
54924: LD_ADDR_VAR 0 4
54928: PUSH
54929: DOUBLE
54930: LD_INT 1
54932: DEC
54933: ST_TO_ADDR
54934: LD_VAR 0 2
54938: PUSH
54939: FOR_TO
54940: IFFALSE 55027
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54942: LD_ADDR_VAR 0 6
54946: PUSH
54947: LD_VAR 0 1
54951: PPUSH
54952: LD_VAR 0 2
54956: PUSH
54957: LD_VAR 0 4
54961: ARRAY
54962: PUSH
54963: LD_INT 1
54965: ARRAY
54966: PPUSH
54967: LD_VAR 0 2
54971: PUSH
54972: LD_VAR 0 4
54976: ARRAY
54977: PUSH
54978: LD_INT 2
54980: ARRAY
54981: PPUSH
54982: CALL_OW 297
54986: ST_TO_ADDR
// if tdist < dist then
54987: LD_VAR 0 6
54991: PUSH
54992: LD_VAR 0 5
54996: LESS
54997: IFFALSE 55025
// begin hex := hexes [ i ] ;
54999: LD_ADDR_VAR 0 8
55003: PUSH
55004: LD_VAR 0 2
55008: PUSH
55009: LD_VAR 0 4
55013: ARRAY
55014: ST_TO_ADDR
// dist := tdist ;
55015: LD_ADDR_VAR 0 5
55019: PUSH
55020: LD_VAR 0 6
55024: ST_TO_ADDR
// end ; end ;
55025: GO 54939
55027: POP
55028: POP
// result := hex ;
55029: LD_ADDR_VAR 0 3
55033: PUSH
55034: LD_VAR 0 8
55038: ST_TO_ADDR
// end ;
55039: LD_VAR 0 3
55043: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55044: LD_INT 0
55046: PPUSH
55047: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55048: LD_VAR 0 1
55052: NOT
55053: PUSH
55054: LD_VAR 0 1
55058: PUSH
55059: LD_INT 21
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 23
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PPUSH
55083: CALL_OW 69
55087: IN
55088: NOT
55089: OR
55090: IFFALSE 55094
// exit ;
55092: GO 55141
// for i = 1 to 3 do
55094: LD_ADDR_VAR 0 3
55098: PUSH
55099: DOUBLE
55100: LD_INT 1
55102: DEC
55103: ST_TO_ADDR
55104: LD_INT 3
55106: PUSH
55107: FOR_TO
55108: IFFALSE 55139
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55110: LD_VAR 0 1
55114: PPUSH
55115: CALL_OW 250
55119: PPUSH
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL_OW 251
55129: PPUSH
55130: LD_INT 1
55132: PPUSH
55133: CALL_OW 453
55137: GO 55107
55139: POP
55140: POP
// end ;
55141: LD_VAR 0 2
55145: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55146: LD_INT 0
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55154: LD_VAR 0 1
55158: NOT
55159: PUSH
55160: LD_VAR 0 2
55164: NOT
55165: OR
55166: PUSH
55167: LD_VAR 0 1
55171: PPUSH
55172: CALL_OW 314
55176: OR
55177: IFFALSE 55181
// exit ;
55179: GO 55648
// if GetLives ( i ) < 250 then
55181: LD_VAR 0 4
55185: PPUSH
55186: CALL_OW 256
55190: PUSH
55191: LD_INT 250
55193: LESS
55194: IFFALSE 55207
// begin ComAutodestruct ( i ) ;
55196: LD_VAR 0 4
55200: PPUSH
55201: CALL 55044 0 1
// exit ;
55205: GO 55648
// end ; x := GetX ( enemy_unit ) ;
55207: LD_ADDR_VAR 0 7
55211: PUSH
55212: LD_VAR 0 2
55216: PPUSH
55217: CALL_OW 250
55221: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55222: LD_ADDR_VAR 0 8
55226: PUSH
55227: LD_VAR 0 2
55231: PPUSH
55232: CALL_OW 251
55236: ST_TO_ADDR
// if not x or not y then
55237: LD_VAR 0 7
55241: NOT
55242: PUSH
55243: LD_VAR 0 8
55247: NOT
55248: OR
55249: IFFALSE 55253
// exit ;
55251: GO 55648
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55253: LD_ADDR_VAR 0 6
55257: PUSH
55258: LD_VAR 0 7
55262: PPUSH
55263: LD_INT 0
55265: PPUSH
55266: LD_INT 4
55268: PPUSH
55269: CALL_OW 272
55273: PUSH
55274: LD_VAR 0 8
55278: PPUSH
55279: LD_INT 0
55281: PPUSH
55282: LD_INT 4
55284: PPUSH
55285: CALL_OW 273
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_VAR 0 7
55298: PPUSH
55299: LD_INT 1
55301: PPUSH
55302: LD_INT 4
55304: PPUSH
55305: CALL_OW 272
55309: PUSH
55310: LD_VAR 0 8
55314: PPUSH
55315: LD_INT 1
55317: PPUSH
55318: LD_INT 4
55320: PPUSH
55321: CALL_OW 273
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_VAR 0 7
55334: PPUSH
55335: LD_INT 2
55337: PPUSH
55338: LD_INT 4
55340: PPUSH
55341: CALL_OW 272
55345: PUSH
55346: LD_VAR 0 8
55350: PPUSH
55351: LD_INT 2
55353: PPUSH
55354: LD_INT 4
55356: PPUSH
55357: CALL_OW 273
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_VAR 0 7
55370: PPUSH
55371: LD_INT 3
55373: PPUSH
55374: LD_INT 4
55376: PPUSH
55377: CALL_OW 272
55381: PUSH
55382: LD_VAR 0 8
55386: PPUSH
55387: LD_INT 3
55389: PPUSH
55390: LD_INT 4
55392: PPUSH
55393: CALL_OW 273
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_VAR 0 7
55406: PPUSH
55407: LD_INT 4
55409: PPUSH
55410: LD_INT 4
55412: PPUSH
55413: CALL_OW 272
55417: PUSH
55418: LD_VAR 0 8
55422: PPUSH
55423: LD_INT 4
55425: PPUSH
55426: LD_INT 4
55428: PPUSH
55429: CALL_OW 273
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_VAR 0 7
55442: PPUSH
55443: LD_INT 5
55445: PPUSH
55446: LD_INT 4
55448: PPUSH
55449: CALL_OW 272
55453: PUSH
55454: LD_VAR 0 8
55458: PPUSH
55459: LD_INT 5
55461: PPUSH
55462: LD_INT 4
55464: PPUSH
55465: CALL_OW 273
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// for i = tmp downto 1 do
55482: LD_ADDR_VAR 0 4
55486: PUSH
55487: DOUBLE
55488: LD_VAR 0 6
55492: INC
55493: ST_TO_ADDR
55494: LD_INT 1
55496: PUSH
55497: FOR_DOWNTO
55498: IFFALSE 55599
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55500: LD_VAR 0 6
55504: PUSH
55505: LD_VAR 0 4
55509: ARRAY
55510: PUSH
55511: LD_INT 1
55513: ARRAY
55514: PPUSH
55515: LD_VAR 0 6
55519: PUSH
55520: LD_VAR 0 4
55524: ARRAY
55525: PUSH
55526: LD_INT 2
55528: ARRAY
55529: PPUSH
55530: CALL_OW 488
55534: NOT
55535: PUSH
55536: LD_VAR 0 6
55540: PUSH
55541: LD_VAR 0 4
55545: ARRAY
55546: PUSH
55547: LD_INT 1
55549: ARRAY
55550: PPUSH
55551: LD_VAR 0 6
55555: PUSH
55556: LD_VAR 0 4
55560: ARRAY
55561: PUSH
55562: LD_INT 2
55564: ARRAY
55565: PPUSH
55566: CALL_OW 428
55570: PUSH
55571: LD_INT 0
55573: NONEQUAL
55574: OR
55575: IFFALSE 55597
// tmp := Delete ( tmp , i ) ;
55577: LD_ADDR_VAR 0 6
55581: PUSH
55582: LD_VAR 0 6
55586: PPUSH
55587: LD_VAR 0 4
55591: PPUSH
55592: CALL_OW 3
55596: ST_TO_ADDR
55597: GO 55497
55599: POP
55600: POP
// j := GetClosestHex ( unit , tmp ) ;
55601: LD_ADDR_VAR 0 5
55605: PUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_VAR 0 6
55615: PPUSH
55616: CALL 54892 0 2
55620: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55621: LD_VAR 0 1
55625: PPUSH
55626: LD_VAR 0 5
55630: PUSH
55631: LD_INT 1
55633: ARRAY
55634: PPUSH
55635: LD_VAR 0 5
55639: PUSH
55640: LD_INT 2
55642: ARRAY
55643: PPUSH
55644: CALL_OW 111
// end ;
55648: LD_VAR 0 3
55652: RET
// export function PrepareApemanSoldier ( ) ; begin
55653: LD_INT 0
55655: PPUSH
// uc_nation := 0 ;
55656: LD_ADDR_OWVAR 21
55660: PUSH
55661: LD_INT 0
55663: ST_TO_ADDR
// hc_sex := sex_male ;
55664: LD_ADDR_OWVAR 27
55668: PUSH
55669: LD_INT 1
55671: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55672: LD_ADDR_OWVAR 28
55676: PUSH
55677: LD_INT 15
55679: ST_TO_ADDR
// hc_gallery :=  ;
55680: LD_ADDR_OWVAR 33
55684: PUSH
55685: LD_STRING 
55687: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55688: LD_ADDR_OWVAR 31
55692: PUSH
55693: LD_INT 0
55695: PPUSH
55696: LD_INT 3
55698: PPUSH
55699: CALL_OW 12
55703: PUSH
55704: LD_INT 0
55706: PPUSH
55707: LD_INT 3
55709: PPUSH
55710: CALL_OW 12
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// end ;
55727: LD_VAR 0 1
55731: RET
// export function PrepareApemanEngineer ( ) ; begin
55732: LD_INT 0
55734: PPUSH
// uc_nation := 0 ;
55735: LD_ADDR_OWVAR 21
55739: PUSH
55740: LD_INT 0
55742: ST_TO_ADDR
// hc_sex := sex_male ;
55743: LD_ADDR_OWVAR 27
55747: PUSH
55748: LD_INT 1
55750: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55751: LD_ADDR_OWVAR 28
55755: PUSH
55756: LD_INT 16
55758: ST_TO_ADDR
// hc_gallery :=  ;
55759: LD_ADDR_OWVAR 33
55763: PUSH
55764: LD_STRING 
55766: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55767: LD_ADDR_OWVAR 31
55771: PUSH
55772: LD_INT 0
55774: PPUSH
55775: LD_INT 3
55777: PPUSH
55778: CALL_OW 12
55782: PUSH
55783: LD_INT 0
55785: PPUSH
55786: LD_INT 3
55788: PPUSH
55789: CALL_OW 12
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// end ;
55806: LD_VAR 0 1
55810: RET
// export function PrepareApeman ( agressivity ) ; begin
55811: LD_INT 0
55813: PPUSH
// uc_side := 0 ;
55814: LD_ADDR_OWVAR 20
55818: PUSH
55819: LD_INT 0
55821: ST_TO_ADDR
// uc_nation := 0 ;
55822: LD_ADDR_OWVAR 21
55826: PUSH
55827: LD_INT 0
55829: ST_TO_ADDR
// hc_sex := sex_male ;
55830: LD_ADDR_OWVAR 27
55834: PUSH
55835: LD_INT 1
55837: ST_TO_ADDR
// hc_class := class_apeman ;
55838: LD_ADDR_OWVAR 28
55842: PUSH
55843: LD_INT 12
55845: ST_TO_ADDR
// hc_gallery :=  ;
55846: LD_ADDR_OWVAR 33
55850: PUSH
55851: LD_STRING 
55853: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55854: LD_ADDR_OWVAR 35
55858: PUSH
55859: LD_VAR 0 1
55863: NEG
55864: PPUSH
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 12
55874: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55875: LD_ADDR_OWVAR 31
55879: PUSH
55880: LD_INT 0
55882: PPUSH
55883: LD_INT 3
55885: PPUSH
55886: CALL_OW 12
55890: PUSH
55891: LD_INT 0
55893: PPUSH
55894: LD_INT 3
55896: PPUSH
55897: CALL_OW 12
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// end ;
55914: LD_VAR 0 2
55918: RET
// export function PrepareTiger ( agressivity ) ; begin
55919: LD_INT 0
55921: PPUSH
// uc_side := 0 ;
55922: LD_ADDR_OWVAR 20
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
// uc_nation := 0 ;
55930: LD_ADDR_OWVAR 21
55934: PUSH
55935: LD_INT 0
55937: ST_TO_ADDR
// hc_class := class_tiger ;
55938: LD_ADDR_OWVAR 28
55942: PUSH
55943: LD_INT 14
55945: ST_TO_ADDR
// hc_gallery :=  ;
55946: LD_ADDR_OWVAR 33
55950: PUSH
55951: LD_STRING 
55953: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55954: LD_ADDR_OWVAR 35
55958: PUSH
55959: LD_VAR 0 1
55963: NEG
55964: PPUSH
55965: LD_VAR 0 1
55969: PPUSH
55970: CALL_OW 12
55974: ST_TO_ADDR
// end ;
55975: LD_VAR 0 2
55979: RET
// export function PrepareEnchidna ( ) ; begin
55980: LD_INT 0
55982: PPUSH
// uc_side := 0 ;
55983: LD_ADDR_OWVAR 20
55987: PUSH
55988: LD_INT 0
55990: ST_TO_ADDR
// uc_nation := 0 ;
55991: LD_ADDR_OWVAR 21
55995: PUSH
55996: LD_INT 0
55998: ST_TO_ADDR
// hc_class := class_baggie ;
55999: LD_ADDR_OWVAR 28
56003: PUSH
56004: LD_INT 13
56006: ST_TO_ADDR
// hc_gallery :=  ;
56007: LD_ADDR_OWVAR 33
56011: PUSH
56012: LD_STRING 
56014: ST_TO_ADDR
// end ;
56015: LD_VAR 0 1
56019: RET
// export function PrepareFrog ( ) ; begin
56020: LD_INT 0
56022: PPUSH
// uc_side := 0 ;
56023: LD_ADDR_OWVAR 20
56027: PUSH
56028: LD_INT 0
56030: ST_TO_ADDR
// uc_nation := 0 ;
56031: LD_ADDR_OWVAR 21
56035: PUSH
56036: LD_INT 0
56038: ST_TO_ADDR
// hc_class := class_frog ;
56039: LD_ADDR_OWVAR 28
56043: PUSH
56044: LD_INT 19
56046: ST_TO_ADDR
// hc_gallery :=  ;
56047: LD_ADDR_OWVAR 33
56051: PUSH
56052: LD_STRING 
56054: ST_TO_ADDR
// end ;
56055: LD_VAR 0 1
56059: RET
// export function PrepareFish ( ) ; begin
56060: LD_INT 0
56062: PPUSH
// uc_side := 0 ;
56063: LD_ADDR_OWVAR 20
56067: PUSH
56068: LD_INT 0
56070: ST_TO_ADDR
// uc_nation := 0 ;
56071: LD_ADDR_OWVAR 21
56075: PUSH
56076: LD_INT 0
56078: ST_TO_ADDR
// hc_class := class_fish ;
56079: LD_ADDR_OWVAR 28
56083: PUSH
56084: LD_INT 20
56086: ST_TO_ADDR
// hc_gallery :=  ;
56087: LD_ADDR_OWVAR 33
56091: PUSH
56092: LD_STRING 
56094: ST_TO_ADDR
// end ;
56095: LD_VAR 0 1
56099: RET
// export function PrepareBird ( ) ; begin
56100: LD_INT 0
56102: PPUSH
// uc_side := 0 ;
56103: LD_ADDR_OWVAR 20
56107: PUSH
56108: LD_INT 0
56110: ST_TO_ADDR
// uc_nation := 0 ;
56111: LD_ADDR_OWVAR 21
56115: PUSH
56116: LD_INT 0
56118: ST_TO_ADDR
// hc_class := class_phororhacos ;
56119: LD_ADDR_OWVAR 28
56123: PUSH
56124: LD_INT 18
56126: ST_TO_ADDR
// hc_gallery :=  ;
56127: LD_ADDR_OWVAR 33
56131: PUSH
56132: LD_STRING 
56134: ST_TO_ADDR
// end ;
56135: LD_VAR 0 1
56139: RET
// export function PrepareHorse ( ) ; begin
56140: LD_INT 0
56142: PPUSH
// uc_side := 0 ;
56143: LD_ADDR_OWVAR 20
56147: PUSH
56148: LD_INT 0
56150: ST_TO_ADDR
// uc_nation := 0 ;
56151: LD_ADDR_OWVAR 21
56155: PUSH
56156: LD_INT 0
56158: ST_TO_ADDR
// hc_class := class_horse ;
56159: LD_ADDR_OWVAR 28
56163: PUSH
56164: LD_INT 21
56166: ST_TO_ADDR
// hc_gallery :=  ;
56167: LD_ADDR_OWVAR 33
56171: PUSH
56172: LD_STRING 
56174: ST_TO_ADDR
// end ;
56175: LD_VAR 0 1
56179: RET
// export function PrepareMastodont ( ) ; begin
56180: LD_INT 0
56182: PPUSH
// uc_side := 0 ;
56183: LD_ADDR_OWVAR 20
56187: PUSH
56188: LD_INT 0
56190: ST_TO_ADDR
// uc_nation := 0 ;
56191: LD_ADDR_OWVAR 21
56195: PUSH
56196: LD_INT 0
56198: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56199: LD_ADDR_OWVAR 37
56203: PUSH
56204: LD_INT 31
56206: ST_TO_ADDR
// vc_control := control_rider ;
56207: LD_ADDR_OWVAR 38
56211: PUSH
56212: LD_INT 4
56214: ST_TO_ADDR
// end ;
56215: LD_VAR 0 1
56219: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56220: LD_INT 0
56222: PPUSH
56223: PPUSH
56224: PPUSH
// uc_side = 0 ;
56225: LD_ADDR_OWVAR 20
56229: PUSH
56230: LD_INT 0
56232: ST_TO_ADDR
// uc_nation = 0 ;
56233: LD_ADDR_OWVAR 21
56237: PUSH
56238: LD_INT 0
56240: ST_TO_ADDR
// InitHc_All ( ) ;
56241: CALL_OW 584
// InitVc ;
56245: CALL_OW 20
// if mastodonts then
56249: LD_VAR 0 6
56253: IFFALSE 56320
// for i = 1 to mastodonts do
56255: LD_ADDR_VAR 0 11
56259: PUSH
56260: DOUBLE
56261: LD_INT 1
56263: DEC
56264: ST_TO_ADDR
56265: LD_VAR 0 6
56269: PUSH
56270: FOR_TO
56271: IFFALSE 56318
// begin vc_chassis := 31 ;
56273: LD_ADDR_OWVAR 37
56277: PUSH
56278: LD_INT 31
56280: ST_TO_ADDR
// vc_control := control_rider ;
56281: LD_ADDR_OWVAR 38
56285: PUSH
56286: LD_INT 4
56288: ST_TO_ADDR
// animal := CreateVehicle ;
56289: LD_ADDR_VAR 0 12
56293: PUSH
56294: CALL_OW 45
56298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56299: LD_VAR 0 12
56303: PPUSH
56304: LD_VAR 0 8
56308: PPUSH
56309: LD_INT 0
56311: PPUSH
56312: CALL 58448 0 3
// end ;
56316: GO 56270
56318: POP
56319: POP
// if horses then
56320: LD_VAR 0 5
56324: IFFALSE 56391
// for i = 1 to horses do
56326: LD_ADDR_VAR 0 11
56330: PUSH
56331: DOUBLE
56332: LD_INT 1
56334: DEC
56335: ST_TO_ADDR
56336: LD_VAR 0 5
56340: PUSH
56341: FOR_TO
56342: IFFALSE 56389
// begin hc_class := 21 ;
56344: LD_ADDR_OWVAR 28
56348: PUSH
56349: LD_INT 21
56351: ST_TO_ADDR
// hc_gallery :=  ;
56352: LD_ADDR_OWVAR 33
56356: PUSH
56357: LD_STRING 
56359: ST_TO_ADDR
// animal := CreateHuman ;
56360: LD_ADDR_VAR 0 12
56364: PUSH
56365: CALL_OW 44
56369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56370: LD_VAR 0 12
56374: PPUSH
56375: LD_VAR 0 8
56379: PPUSH
56380: LD_INT 0
56382: PPUSH
56383: CALL 58448 0 3
// end ;
56387: GO 56341
56389: POP
56390: POP
// if birds then
56391: LD_VAR 0 1
56395: IFFALSE 56462
// for i = 1 to birds do
56397: LD_ADDR_VAR 0 11
56401: PUSH
56402: DOUBLE
56403: LD_INT 1
56405: DEC
56406: ST_TO_ADDR
56407: LD_VAR 0 1
56411: PUSH
56412: FOR_TO
56413: IFFALSE 56460
// begin hc_class := 18 ;
56415: LD_ADDR_OWVAR 28
56419: PUSH
56420: LD_INT 18
56422: ST_TO_ADDR
// hc_gallery =  ;
56423: LD_ADDR_OWVAR 33
56427: PUSH
56428: LD_STRING 
56430: ST_TO_ADDR
// animal := CreateHuman ;
56431: LD_ADDR_VAR 0 12
56435: PUSH
56436: CALL_OW 44
56440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56441: LD_VAR 0 12
56445: PPUSH
56446: LD_VAR 0 8
56450: PPUSH
56451: LD_INT 0
56453: PPUSH
56454: CALL 58448 0 3
// end ;
56458: GO 56412
56460: POP
56461: POP
// if tigers then
56462: LD_VAR 0 2
56466: IFFALSE 56550
// for i = 1 to tigers do
56468: LD_ADDR_VAR 0 11
56472: PUSH
56473: DOUBLE
56474: LD_INT 1
56476: DEC
56477: ST_TO_ADDR
56478: LD_VAR 0 2
56482: PUSH
56483: FOR_TO
56484: IFFALSE 56548
// begin hc_class = class_tiger ;
56486: LD_ADDR_OWVAR 28
56490: PUSH
56491: LD_INT 14
56493: ST_TO_ADDR
// hc_gallery =  ;
56494: LD_ADDR_OWVAR 33
56498: PUSH
56499: LD_STRING 
56501: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56502: LD_ADDR_OWVAR 35
56506: PUSH
56507: LD_INT 7
56509: NEG
56510: PPUSH
56511: LD_INT 7
56513: PPUSH
56514: CALL_OW 12
56518: ST_TO_ADDR
// animal := CreateHuman ;
56519: LD_ADDR_VAR 0 12
56523: PUSH
56524: CALL_OW 44
56528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56529: LD_VAR 0 12
56533: PPUSH
56534: LD_VAR 0 8
56538: PPUSH
56539: LD_INT 0
56541: PPUSH
56542: CALL 58448 0 3
// end ;
56546: GO 56483
56548: POP
56549: POP
// if apemans then
56550: LD_VAR 0 3
56554: IFFALSE 56677
// for i = 1 to apemans do
56556: LD_ADDR_VAR 0 11
56560: PUSH
56561: DOUBLE
56562: LD_INT 1
56564: DEC
56565: ST_TO_ADDR
56566: LD_VAR 0 3
56570: PUSH
56571: FOR_TO
56572: IFFALSE 56675
// begin hc_class = class_apeman ;
56574: LD_ADDR_OWVAR 28
56578: PUSH
56579: LD_INT 12
56581: ST_TO_ADDR
// hc_gallery =  ;
56582: LD_ADDR_OWVAR 33
56586: PUSH
56587: LD_STRING 
56589: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56590: LD_ADDR_OWVAR 35
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PPUSH
56599: LD_INT 2
56601: PPUSH
56602: CALL_OW 12
56606: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56607: LD_ADDR_OWVAR 31
56611: PUSH
56612: LD_INT 1
56614: PPUSH
56615: LD_INT 3
56617: PPUSH
56618: CALL_OW 12
56622: PUSH
56623: LD_INT 1
56625: PPUSH
56626: LD_INT 3
56628: PPUSH
56629: CALL_OW 12
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// animal := CreateHuman ;
56646: LD_ADDR_VAR 0 12
56650: PUSH
56651: CALL_OW 44
56655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56656: LD_VAR 0 12
56660: PPUSH
56661: LD_VAR 0 8
56665: PPUSH
56666: LD_INT 0
56668: PPUSH
56669: CALL 58448 0 3
// end ;
56673: GO 56571
56675: POP
56676: POP
// if enchidnas then
56677: LD_VAR 0 4
56681: IFFALSE 56748
// for i = 1 to enchidnas do
56683: LD_ADDR_VAR 0 11
56687: PUSH
56688: DOUBLE
56689: LD_INT 1
56691: DEC
56692: ST_TO_ADDR
56693: LD_VAR 0 4
56697: PUSH
56698: FOR_TO
56699: IFFALSE 56746
// begin hc_class = 13 ;
56701: LD_ADDR_OWVAR 28
56705: PUSH
56706: LD_INT 13
56708: ST_TO_ADDR
// hc_gallery =  ;
56709: LD_ADDR_OWVAR 33
56713: PUSH
56714: LD_STRING 
56716: ST_TO_ADDR
// animal := CreateHuman ;
56717: LD_ADDR_VAR 0 12
56721: PUSH
56722: CALL_OW 44
56726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56727: LD_VAR 0 12
56731: PPUSH
56732: LD_VAR 0 8
56736: PPUSH
56737: LD_INT 0
56739: PPUSH
56740: CALL 58448 0 3
// end ;
56744: GO 56698
56746: POP
56747: POP
// if fishes then
56748: LD_VAR 0 7
56752: IFFALSE 56819
// for i = 1 to fishes do
56754: LD_ADDR_VAR 0 11
56758: PUSH
56759: DOUBLE
56760: LD_INT 1
56762: DEC
56763: ST_TO_ADDR
56764: LD_VAR 0 7
56768: PUSH
56769: FOR_TO
56770: IFFALSE 56817
// begin hc_class = 20 ;
56772: LD_ADDR_OWVAR 28
56776: PUSH
56777: LD_INT 20
56779: ST_TO_ADDR
// hc_gallery =  ;
56780: LD_ADDR_OWVAR 33
56784: PUSH
56785: LD_STRING 
56787: ST_TO_ADDR
// animal := CreateHuman ;
56788: LD_ADDR_VAR 0 12
56792: PUSH
56793: CALL_OW 44
56797: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56798: LD_VAR 0 12
56802: PPUSH
56803: LD_VAR 0 9
56807: PPUSH
56808: LD_INT 0
56810: PPUSH
56811: CALL 58448 0 3
// end ;
56815: GO 56769
56817: POP
56818: POP
// end ;
56819: LD_VAR 0 10
56823: RET
// export function WantHeal ( sci , unit ) ; begin
56824: LD_INT 0
56826: PPUSH
// if GetTaskList ( sci ) > 0 then
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 437
56836: PUSH
56837: LD_INT 0
56839: GREATER
56840: IFFALSE 56910
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL_OW 437
56851: PUSH
56852: LD_INT 1
56854: ARRAY
56855: PUSH
56856: LD_INT 1
56858: ARRAY
56859: PUSH
56860: LD_STRING l
56862: EQUAL
56863: PUSH
56864: LD_VAR 0 1
56868: PPUSH
56869: CALL_OW 437
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: PUSH
56878: LD_INT 4
56880: ARRAY
56881: PUSH
56882: LD_VAR 0 2
56886: EQUAL
56887: AND
56888: IFFALSE 56900
// result := true else
56890: LD_ADDR_VAR 0 3
56894: PUSH
56895: LD_INT 1
56897: ST_TO_ADDR
56898: GO 56908
// result := false ;
56900: LD_ADDR_VAR 0 3
56904: PUSH
56905: LD_INT 0
56907: ST_TO_ADDR
// end else
56908: GO 56918
// result := false ;
56910: LD_ADDR_VAR 0 3
56914: PUSH
56915: LD_INT 0
56917: ST_TO_ADDR
// end ;
56918: LD_VAR 0 3
56922: RET
// export function HealTarget ( sci ) ; begin
56923: LD_INT 0
56925: PPUSH
// if not sci then
56926: LD_VAR 0 1
56930: NOT
56931: IFFALSE 56935
// exit ;
56933: GO 57000
// result := 0 ;
56935: LD_ADDR_VAR 0 2
56939: PUSH
56940: LD_INT 0
56942: ST_TO_ADDR
// if GetTaskList ( sci ) then
56943: LD_VAR 0 1
56947: PPUSH
56948: CALL_OW 437
56952: IFFALSE 57000
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56954: LD_VAR 0 1
56958: PPUSH
56959: CALL_OW 437
56963: PUSH
56964: LD_INT 1
56966: ARRAY
56967: PUSH
56968: LD_INT 1
56970: ARRAY
56971: PUSH
56972: LD_STRING l
56974: EQUAL
56975: IFFALSE 57000
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56977: LD_ADDR_VAR 0 2
56981: PUSH
56982: LD_VAR 0 1
56986: PPUSH
56987: CALL_OW 437
56991: PUSH
56992: LD_INT 1
56994: ARRAY
56995: PUSH
56996: LD_INT 4
56998: ARRAY
56999: ST_TO_ADDR
// end ;
57000: LD_VAR 0 2
57004: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
// if not base_units then
57011: LD_VAR 0 1
57015: NOT
57016: IFFALSE 57020
// exit ;
57018: GO 57107
// result := false ;
57020: LD_ADDR_VAR 0 2
57024: PUSH
57025: LD_INT 0
57027: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57028: LD_ADDR_VAR 0 5
57032: PUSH
57033: LD_VAR 0 1
57037: PPUSH
57038: LD_INT 21
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PPUSH
57048: CALL_OW 72
57052: ST_TO_ADDR
// if not tmp then
57053: LD_VAR 0 5
57057: NOT
57058: IFFALSE 57062
// exit ;
57060: GO 57107
// for i in tmp do
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 5
57071: PUSH
57072: FOR_IN
57073: IFFALSE 57105
// begin result := EnemyInRange ( i , 22 ) ;
57075: LD_ADDR_VAR 0 2
57079: PUSH
57080: LD_VAR 0 3
57084: PPUSH
57085: LD_INT 22
57087: PPUSH
57088: CALL 54694 0 2
57092: ST_TO_ADDR
// if result then
57093: LD_VAR 0 2
57097: IFFALSE 57103
// exit ;
57099: POP
57100: POP
57101: GO 57107
// end ;
57103: GO 57072
57105: POP
57106: POP
// end ;
57107: LD_VAR 0 2
57111: RET
// export function FilterByTag ( units , tag ) ; begin
57112: LD_INT 0
57114: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_VAR 0 1
57124: PPUSH
57125: LD_INT 120
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PPUSH
57137: CALL_OW 72
57141: ST_TO_ADDR
// end ;
57142: LD_VAR 0 3
57146: RET
// export function IsDriver ( un ) ; begin
57147: LD_INT 0
57149: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57150: LD_ADDR_VAR 0 2
57154: PUSH
57155: LD_VAR 0 1
57159: PUSH
57160: LD_INT 55
57162: PUSH
57163: EMPTY
57164: LIST
57165: PPUSH
57166: CALL_OW 69
57170: IN
57171: ST_TO_ADDR
// end ;
57172: LD_VAR 0 2
57176: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57177: LD_INT 0
57179: PPUSH
57180: PPUSH
// list := [ ] ;
57181: LD_ADDR_VAR 0 5
57185: PUSH
57186: EMPTY
57187: ST_TO_ADDR
// case d of 0 :
57188: LD_VAR 0 3
57192: PUSH
57193: LD_INT 0
57195: DOUBLE
57196: EQUAL
57197: IFTRUE 57201
57199: GO 57334
57201: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57202: LD_ADDR_VAR 0 5
57206: PUSH
57207: LD_VAR 0 1
57211: PUSH
57212: LD_INT 4
57214: MINUS
57215: PUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_INT 4
57223: MINUS
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: PUSH
57233: LD_VAR 0 1
57237: PUSH
57238: LD_INT 3
57240: MINUS
57241: PUSH
57242: LD_VAR 0 2
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: PUSH
57255: LD_VAR 0 1
57259: PUSH
57260: LD_INT 4
57262: PLUS
57263: PUSH
57264: LD_VAR 0 2
57268: PUSH
57269: LD_INT 4
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: PUSH
57277: LD_VAR 0 1
57281: PUSH
57282: LD_INT 3
57284: PLUS
57285: PUSH
57286: LD_VAR 0 2
57290: PUSH
57291: LD_INT 3
57293: PLUS
57294: PUSH
57295: LD_INT 5
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: PUSH
57303: LD_VAR 0 1
57307: PUSH
57308: LD_VAR 0 2
57312: PUSH
57313: LD_INT 4
57315: PLUS
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// end ; 1 :
57332: GO 58032
57334: LD_INT 1
57336: DOUBLE
57337: EQUAL
57338: IFTRUE 57342
57340: GO 57475
57342: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57343: LD_ADDR_VAR 0 5
57347: PUSH
57348: LD_VAR 0 1
57352: PUSH
57353: LD_VAR 0 2
57357: PUSH
57358: LD_INT 4
57360: MINUS
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: PUSH
57370: LD_VAR 0 1
57374: PUSH
57375: LD_INT 3
57377: MINUS
57378: PUSH
57379: LD_VAR 0 2
57383: PUSH
57384: LD_INT 3
57386: MINUS
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: PUSH
57396: LD_VAR 0 1
57400: PUSH
57401: LD_INT 4
57403: MINUS
57404: PUSH
57405: LD_VAR 0 2
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: PUSH
57418: LD_VAR 0 1
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: LD_INT 3
57430: PLUS
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: PUSH
57440: LD_VAR 0 1
57444: PUSH
57445: LD_INT 4
57447: PLUS
57448: PUSH
57449: LD_VAR 0 2
57453: PUSH
57454: LD_INT 4
57456: PLUS
57457: PUSH
57458: LD_INT 5
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// end ; 2 :
57473: GO 58032
57475: LD_INT 2
57477: DOUBLE
57478: EQUAL
57479: IFTRUE 57483
57481: GO 57612
57483: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57484: LD_ADDR_VAR 0 5
57488: PUSH
57489: LD_VAR 0 1
57493: PUSH
57494: LD_VAR 0 2
57498: PUSH
57499: LD_INT 3
57501: MINUS
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: PUSH
57511: LD_VAR 0 1
57515: PUSH
57516: LD_INT 4
57518: PLUS
57519: PUSH
57520: LD_VAR 0 2
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: PUSH
57533: LD_VAR 0 1
57537: PUSH
57538: LD_VAR 0 2
57542: PUSH
57543: LD_INT 4
57545: PLUS
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: PUSH
57555: LD_VAR 0 1
57559: PUSH
57560: LD_INT 3
57562: MINUS
57563: PUSH
57564: LD_VAR 0 2
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: PUSH
57577: LD_VAR 0 1
57581: PUSH
57582: LD_INT 4
57584: MINUS
57585: PUSH
57586: LD_VAR 0 2
57590: PUSH
57591: LD_INT 4
57593: MINUS
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// end ; 3 :
57610: GO 58032
57612: LD_INT 3
57614: DOUBLE
57615: EQUAL
57616: IFTRUE 57620
57618: GO 57753
57620: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57621: LD_ADDR_VAR 0 5
57625: PUSH
57626: LD_VAR 0 1
57630: PUSH
57631: LD_INT 3
57633: PLUS
57634: PUSH
57635: LD_VAR 0 2
57639: PUSH
57640: LD_INT 4
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: PUSH
57648: LD_VAR 0 1
57652: PUSH
57653: LD_INT 4
57655: PLUS
57656: PUSH
57657: LD_VAR 0 2
57661: PUSH
57662: LD_INT 4
57664: PLUS
57665: PUSH
57666: LD_INT 5
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: PUSH
57674: LD_VAR 0 1
57678: PUSH
57679: LD_INT 4
57681: MINUS
57682: PUSH
57683: LD_VAR 0 2
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: PUSH
57696: LD_VAR 0 1
57700: PUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_INT 4
57708: MINUS
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 1
57722: PUSH
57723: LD_INT 3
57725: MINUS
57726: PUSH
57727: LD_VAR 0 2
57731: PUSH
57732: LD_INT 3
57734: MINUS
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// end ; 4 :
57751: GO 58032
57753: LD_INT 4
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57761
57759: GO 57894
57761: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 1
57771: PUSH
57772: LD_VAR 0 2
57776: PUSH
57777: LD_INT 4
57779: PLUS
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: PUSH
57789: LD_VAR 0 1
57793: PUSH
57794: LD_INT 3
57796: PLUS
57797: PUSH
57798: LD_VAR 0 2
57802: PUSH
57803: LD_INT 3
57805: PLUS
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: PUSH
57815: LD_VAR 0 1
57819: PUSH
57820: LD_INT 4
57822: PLUS
57823: PUSH
57824: LD_VAR 0 2
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: PUSH
57837: LD_VAR 0 1
57841: PUSH
57842: LD_VAR 0 2
57846: PUSH
57847: LD_INT 3
57849: MINUS
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: PUSH
57859: LD_VAR 0 1
57863: PUSH
57864: LD_INT 4
57866: MINUS
57867: PUSH
57868: LD_VAR 0 2
57872: PUSH
57873: LD_INT 4
57875: MINUS
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// end ; 5 :
57892: GO 58032
57894: LD_INT 5
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 58031
57902: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57903: LD_ADDR_VAR 0 5
57907: PUSH
57908: LD_VAR 0 1
57912: PUSH
57913: LD_INT 4
57915: MINUS
57916: PUSH
57917: LD_VAR 0 2
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: PUSH
57930: LD_VAR 0 1
57934: PUSH
57935: LD_VAR 0 2
57939: PUSH
57940: LD_INT 4
57942: MINUS
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: PUSH
57952: LD_VAR 0 1
57956: PUSH
57957: LD_INT 4
57959: PLUS
57960: PUSH
57961: LD_VAR 0 2
57965: PUSH
57966: LD_INT 4
57968: PLUS
57969: PUSH
57970: LD_INT 5
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: PUSH
57978: LD_VAR 0 1
57982: PUSH
57983: LD_INT 3
57985: PLUS
57986: PUSH
57987: LD_VAR 0 2
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: PUSH
58000: LD_VAR 0 1
58004: PUSH
58005: LD_VAR 0 2
58009: PUSH
58010: LD_INT 3
58012: PLUS
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// end ; end ;
58029: GO 58032
58031: POP
// result := list ;
58032: LD_ADDR_VAR 0 4
58036: PUSH
58037: LD_VAR 0 5
58041: ST_TO_ADDR
// end ;
58042: LD_VAR 0 4
58046: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58047: LD_INT 0
58049: PPUSH
58050: PPUSH
58051: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58052: LD_VAR 0 1
58056: NOT
58057: PUSH
58058: LD_VAR 0 2
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: IN
58081: NOT
58082: OR
58083: IFFALSE 58087
// exit ;
58085: GO 58170
// tmp := [ ] ;
58087: LD_ADDR_VAR 0 5
58091: PUSH
58092: EMPTY
58093: ST_TO_ADDR
// for i in units do
58094: LD_ADDR_VAR 0 4
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: FOR_IN
58105: IFFALSE 58139
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58107: LD_ADDR_VAR 0 5
58111: PUSH
58112: LD_VAR 0 5
58116: PPUSH
58117: LD_VAR 0 4
58121: PPUSH
58122: LD_VAR 0 2
58126: PPUSH
58127: CALL_OW 259
58131: PPUSH
58132: CALL 59530 0 2
58136: ST_TO_ADDR
58137: GO 58104
58139: POP
58140: POP
// if not tmp then
58141: LD_VAR 0 5
58145: NOT
58146: IFFALSE 58150
// exit ;
58148: GO 58170
// result := SortListByListDesc ( units , tmp ) ;
58150: LD_ADDR_VAR 0 3
58154: PUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: LD_VAR 0 5
58164: PPUSH
58165: CALL_OW 77
58169: ST_TO_ADDR
// end ;
58170: LD_VAR 0 3
58174: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58175: LD_INT 0
58177: PPUSH
58178: PPUSH
58179: PPUSH
// result := false ;
58180: LD_ADDR_VAR 0 3
58184: PUSH
58185: LD_INT 0
58187: ST_TO_ADDR
// if not building then
58188: LD_VAR 0 2
58192: NOT
58193: IFFALSE 58197
// exit ;
58195: GO 58335
// x := GetX ( building ) ;
58197: LD_ADDR_VAR 0 4
58201: PUSH
58202: LD_VAR 0 2
58206: PPUSH
58207: CALL_OW 250
58211: ST_TO_ADDR
// y := GetY ( building ) ;
58212: LD_ADDR_VAR 0 5
58216: PUSH
58217: LD_VAR 0 2
58221: PPUSH
58222: CALL_OW 251
58226: ST_TO_ADDR
// if not x or not y then
58227: LD_VAR 0 4
58231: NOT
58232: PUSH
58233: LD_VAR 0 5
58237: NOT
58238: OR
58239: IFFALSE 58243
// exit ;
58241: GO 58335
// if GetTaskList ( unit ) then
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 437
58252: IFFALSE 58335
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58254: LD_STRING e
58256: PUSH
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 437
58266: PUSH
58267: LD_INT 1
58269: ARRAY
58270: PUSH
58271: LD_INT 1
58273: ARRAY
58274: EQUAL
58275: PUSH
58276: LD_VAR 0 4
58280: PUSH
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL_OW 437
58290: PUSH
58291: LD_INT 1
58293: ARRAY
58294: PUSH
58295: LD_INT 2
58297: ARRAY
58298: EQUAL
58299: AND
58300: PUSH
58301: LD_VAR 0 5
58305: PUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: CALL_OW 437
58315: PUSH
58316: LD_INT 1
58318: ARRAY
58319: PUSH
58320: LD_INT 3
58322: ARRAY
58323: EQUAL
58324: AND
58325: IFFALSE 58335
// result := true end ;
58327: LD_ADDR_VAR 0 3
58331: PUSH
58332: LD_INT 1
58334: ST_TO_ADDR
// end ;
58335: LD_VAR 0 3
58339: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58340: LD_INT 0
58342: PPUSH
// result := false ;
58343: LD_ADDR_VAR 0 4
58347: PUSH
58348: LD_INT 0
58350: ST_TO_ADDR
// if GetTaskList ( unit ) then
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL_OW 437
58360: IFFALSE 58443
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58362: LD_STRING M
58364: PUSH
58365: LD_VAR 0 1
58369: PPUSH
58370: CALL_OW 437
58374: PUSH
58375: LD_INT 1
58377: ARRAY
58378: PUSH
58379: LD_INT 1
58381: ARRAY
58382: EQUAL
58383: PUSH
58384: LD_VAR 0 2
58388: PUSH
58389: LD_VAR 0 1
58393: PPUSH
58394: CALL_OW 437
58398: PUSH
58399: LD_INT 1
58401: ARRAY
58402: PUSH
58403: LD_INT 2
58405: ARRAY
58406: EQUAL
58407: AND
58408: PUSH
58409: LD_VAR 0 3
58413: PUSH
58414: LD_VAR 0 1
58418: PPUSH
58419: CALL_OW 437
58423: PUSH
58424: LD_INT 1
58426: ARRAY
58427: PUSH
58428: LD_INT 3
58430: ARRAY
58431: EQUAL
58432: AND
58433: IFFALSE 58443
// result := true ;
58435: LD_ADDR_VAR 0 4
58439: PUSH
58440: LD_INT 1
58442: ST_TO_ADDR
// end ; end ;
58443: LD_VAR 0 4
58447: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58448: LD_INT 0
58450: PPUSH
58451: PPUSH
58452: PPUSH
58453: PPUSH
// if not unit or not area then
58454: LD_VAR 0 1
58458: NOT
58459: PUSH
58460: LD_VAR 0 2
58464: NOT
58465: OR
58466: IFFALSE 58470
// exit ;
58468: GO 58633
// tmp := AreaToList ( area , i ) ;
58470: LD_ADDR_VAR 0 6
58474: PUSH
58475: LD_VAR 0 2
58479: PPUSH
58480: LD_VAR 0 5
58484: PPUSH
58485: CALL_OW 517
58489: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58490: LD_ADDR_VAR 0 5
58494: PUSH
58495: DOUBLE
58496: LD_INT 1
58498: DEC
58499: ST_TO_ADDR
58500: LD_VAR 0 6
58504: PUSH
58505: LD_INT 1
58507: ARRAY
58508: PUSH
58509: FOR_TO
58510: IFFALSE 58631
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58512: LD_ADDR_VAR 0 7
58516: PUSH
58517: LD_VAR 0 6
58521: PUSH
58522: LD_INT 1
58524: ARRAY
58525: PUSH
58526: LD_VAR 0 5
58530: ARRAY
58531: PUSH
58532: LD_VAR 0 6
58536: PUSH
58537: LD_INT 2
58539: ARRAY
58540: PUSH
58541: LD_VAR 0 5
58545: ARRAY
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
58551: LD_INT 92
58553: PUSH
58554: LD_VAR 0 7
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: PUSH
58563: LD_VAR 0 7
58567: PUSH
58568: LD_INT 2
58570: ARRAY
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: PPUSH
58581: CALL_OW 69
58585: PUSH
58586: LD_INT 0
58588: EQUAL
58589: IFFALSE 58629
// begin PlaceUnitArea ( unit , area , mode ) ;
58591: LD_VAR 0 1
58595: PPUSH
58596: LD_VAR 0 2
58600: PPUSH
58601: LD_VAR 0 3
58605: PPUSH
58606: CALL_OW 49
// result := IsPlaced ( unit ) ;
58610: LD_ADDR_VAR 0 4
58614: PUSH
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 305
58624: ST_TO_ADDR
// exit ;
58625: POP
58626: POP
58627: GO 58633
// end ; end ;
58629: GO 58509
58631: POP
58632: POP
// end ;
58633: LD_VAR 0 4
58637: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58638: LD_INT 0
58640: PPUSH
58641: PPUSH
58642: PPUSH
// if not side or side > 8 then
58643: LD_VAR 0 1
58647: NOT
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: LD_INT 8
58656: GREATER
58657: OR
58658: IFFALSE 58662
// exit ;
58660: GO 58849
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58662: LD_ADDR_VAR 0 4
58666: PUSH
58667: LD_INT 22
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 21
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PPUSH
58693: CALL_OW 69
58697: ST_TO_ADDR
// if not tmp then
58698: LD_VAR 0 4
58702: NOT
58703: IFFALSE 58707
// exit ;
58705: GO 58849
// enable_addtolog := true ;
58707: LD_ADDR_OWVAR 81
58711: PUSH
58712: LD_INT 1
58714: ST_TO_ADDR
// AddToLog ( [ ) ;
58715: LD_STRING [
58717: PPUSH
58718: CALL_OW 561
// for i in tmp do
58722: LD_ADDR_VAR 0 3
58726: PUSH
58727: LD_VAR 0 4
58731: PUSH
58732: FOR_IN
58733: IFFALSE 58840
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58735: LD_STRING [
58737: PUSH
58738: LD_VAR 0 3
58742: PPUSH
58743: CALL_OW 266
58747: STR
58748: PUSH
58749: LD_STRING , 
58751: STR
58752: PUSH
58753: LD_VAR 0 3
58757: PPUSH
58758: CALL_OW 250
58762: STR
58763: PUSH
58764: LD_STRING , 
58766: STR
58767: PUSH
58768: LD_VAR 0 3
58772: PPUSH
58773: CALL_OW 251
58777: STR
58778: PUSH
58779: LD_STRING , 
58781: STR
58782: PUSH
58783: LD_VAR 0 3
58787: PPUSH
58788: CALL_OW 254
58792: STR
58793: PUSH
58794: LD_STRING , 
58796: STR
58797: PUSH
58798: LD_VAR 0 3
58802: PPUSH
58803: LD_INT 1
58805: PPUSH
58806: CALL_OW 268
58810: STR
58811: PUSH
58812: LD_STRING , 
58814: STR
58815: PUSH
58816: LD_VAR 0 3
58820: PPUSH
58821: LD_INT 2
58823: PPUSH
58824: CALL_OW 268
58828: STR
58829: PUSH
58830: LD_STRING ],
58832: STR
58833: PPUSH
58834: CALL_OW 561
// end ;
58838: GO 58732
58840: POP
58841: POP
// AddToLog ( ]; ) ;
58842: LD_STRING ];
58844: PPUSH
58845: CALL_OW 561
// end ;
58849: LD_VAR 0 2
58853: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58854: LD_INT 0
58856: PPUSH
58857: PPUSH
58858: PPUSH
58859: PPUSH
58860: PPUSH
// if not area or not rate or not max then
58861: LD_VAR 0 1
58865: NOT
58866: PUSH
58867: LD_VAR 0 2
58871: NOT
58872: OR
58873: PUSH
58874: LD_VAR 0 4
58878: NOT
58879: OR
58880: IFFALSE 58884
// exit ;
58882: GO 59073
// while 1 do
58884: LD_INT 1
58886: IFFALSE 59073
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58888: LD_ADDR_VAR 0 9
58892: PUSH
58893: LD_VAR 0 1
58897: PPUSH
58898: LD_INT 1
58900: PPUSH
58901: CALL_OW 287
58905: PUSH
58906: LD_INT 10
58908: MUL
58909: ST_TO_ADDR
// r := rate / 10 ;
58910: LD_ADDR_VAR 0 7
58914: PUSH
58915: LD_VAR 0 2
58919: PUSH
58920: LD_INT 10
58922: DIVREAL
58923: ST_TO_ADDR
// time := 1 1$00 ;
58924: LD_ADDR_VAR 0 8
58928: PUSH
58929: LD_INT 2100
58931: ST_TO_ADDR
// if amount < min then
58932: LD_VAR 0 9
58936: PUSH
58937: LD_VAR 0 3
58941: LESS
58942: IFFALSE 58960
// r := r * 2 else
58944: LD_ADDR_VAR 0 7
58948: PUSH
58949: LD_VAR 0 7
58953: PUSH
58954: LD_INT 2
58956: MUL
58957: ST_TO_ADDR
58958: GO 58986
// if amount > max then
58960: LD_VAR 0 9
58964: PUSH
58965: LD_VAR 0 4
58969: GREATER
58970: IFFALSE 58986
// r := r / 2 ;
58972: LD_ADDR_VAR 0 7
58976: PUSH
58977: LD_VAR 0 7
58981: PUSH
58982: LD_INT 2
58984: DIVREAL
58985: ST_TO_ADDR
// time := time / r ;
58986: LD_ADDR_VAR 0 8
58990: PUSH
58991: LD_VAR 0 8
58995: PUSH
58996: LD_VAR 0 7
59000: DIVREAL
59001: ST_TO_ADDR
// if time < 0 then
59002: LD_VAR 0 8
59006: PUSH
59007: LD_INT 0
59009: LESS
59010: IFFALSE 59027
// time := time * - 1 ;
59012: LD_ADDR_VAR 0 8
59016: PUSH
59017: LD_VAR 0 8
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: MUL
59026: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59027: LD_VAR 0 8
59031: PUSH
59032: LD_INT 35
59034: PPUSH
59035: LD_INT 875
59037: PPUSH
59038: CALL_OW 12
59042: PLUS
59043: PPUSH
59044: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59048: LD_INT 1
59050: PPUSH
59051: LD_INT 5
59053: PPUSH
59054: CALL_OW 12
59058: PPUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: LD_INT 1
59066: PPUSH
59067: CALL_OW 55
// end ;
59071: GO 58884
// end ;
59073: LD_VAR 0 5
59077: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59078: LD_INT 0
59080: PPUSH
59081: PPUSH
59082: PPUSH
59083: PPUSH
59084: PPUSH
59085: PPUSH
59086: PPUSH
59087: PPUSH
// if not turrets or not factories then
59088: LD_VAR 0 1
59092: NOT
59093: PUSH
59094: LD_VAR 0 2
59098: NOT
59099: OR
59100: IFFALSE 59104
// exit ;
59102: GO 59411
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59104: LD_ADDR_VAR 0 10
59108: PUSH
59109: LD_INT 5
59111: PUSH
59112: LD_INT 6
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 24
59146: PUSH
59147: LD_INT 25
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 23
59156: PUSH
59157: LD_INT 27
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 42
59170: PUSH
59171: LD_INT 43
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 44
59180: PUSH
59181: LD_INT 46
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 45
59190: PUSH
59191: LD_INT 47
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// result := [ ] ;
59208: LD_ADDR_VAR 0 3
59212: PUSH
59213: EMPTY
59214: ST_TO_ADDR
// for i in turrets do
59215: LD_ADDR_VAR 0 4
59219: PUSH
59220: LD_VAR 0 1
59224: PUSH
59225: FOR_IN
59226: IFFALSE 59409
// begin nat := GetNation ( i ) ;
59228: LD_ADDR_VAR 0 7
59232: PUSH
59233: LD_VAR 0 4
59237: PPUSH
59238: CALL_OW 248
59242: ST_TO_ADDR
// weapon := 0 ;
59243: LD_ADDR_VAR 0 8
59247: PUSH
59248: LD_INT 0
59250: ST_TO_ADDR
// if not nat then
59251: LD_VAR 0 7
59255: NOT
59256: IFFALSE 59260
// continue ;
59258: GO 59225
// for j in list [ nat ] do
59260: LD_ADDR_VAR 0 5
59264: PUSH
59265: LD_VAR 0 10
59269: PUSH
59270: LD_VAR 0 7
59274: ARRAY
59275: PUSH
59276: FOR_IN
59277: IFFALSE 59318
// if GetBWeapon ( i ) = j [ 1 ] then
59279: LD_VAR 0 4
59283: PPUSH
59284: CALL_OW 269
59288: PUSH
59289: LD_VAR 0 5
59293: PUSH
59294: LD_INT 1
59296: ARRAY
59297: EQUAL
59298: IFFALSE 59316
// begin weapon := j [ 2 ] ;
59300: LD_ADDR_VAR 0 8
59304: PUSH
59305: LD_VAR 0 5
59309: PUSH
59310: LD_INT 2
59312: ARRAY
59313: ST_TO_ADDR
// break ;
59314: GO 59318
// end ;
59316: GO 59276
59318: POP
59319: POP
// if not weapon then
59320: LD_VAR 0 8
59324: NOT
59325: IFFALSE 59329
// continue ;
59327: GO 59225
// for k in factories do
59329: LD_ADDR_VAR 0 6
59333: PUSH
59334: LD_VAR 0 2
59338: PUSH
59339: FOR_IN
59340: IFFALSE 59405
// begin weapons := AvailableWeaponList ( k ) ;
59342: LD_ADDR_VAR 0 9
59346: PUSH
59347: LD_VAR 0 6
59351: PPUSH
59352: CALL_OW 478
59356: ST_TO_ADDR
// if not weapons then
59357: LD_VAR 0 9
59361: NOT
59362: IFFALSE 59366
// continue ;
59364: GO 59339
// if weapon in weapons then
59366: LD_VAR 0 8
59370: PUSH
59371: LD_VAR 0 9
59375: IN
59376: IFFALSE 59403
// begin result := [ i , weapon ] ;
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: LD_VAR 0 4
59387: PUSH
59388: LD_VAR 0 8
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: ST_TO_ADDR
// exit ;
59397: POP
59398: POP
59399: POP
59400: POP
59401: GO 59411
// end ; end ;
59403: GO 59339
59405: POP
59406: POP
// end ;
59407: GO 59225
59409: POP
59410: POP
// end ;
59411: LD_VAR 0 3
59415: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59416: LD_INT 0
59418: PPUSH
// if not side or side > 8 then
59419: LD_VAR 0 3
59423: NOT
59424: PUSH
59425: LD_VAR 0 3
59429: PUSH
59430: LD_INT 8
59432: GREATER
59433: OR
59434: IFFALSE 59438
// exit ;
59436: GO 59497
// if not range then
59438: LD_VAR 0 4
59442: NOT
59443: IFFALSE 59454
// range := - 12 ;
59445: LD_ADDR_VAR 0 4
59449: PUSH
59450: LD_INT 12
59452: NEG
59453: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59454: LD_VAR 0 1
59458: PPUSH
59459: LD_VAR 0 2
59463: PPUSH
59464: LD_VAR 0 3
59468: PPUSH
59469: LD_VAR 0 4
59473: PPUSH
59474: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59478: LD_VAR 0 1
59482: PPUSH
59483: LD_VAR 0 2
59487: PPUSH
59488: LD_VAR 0 3
59492: PPUSH
59493: CALL_OW 331
// end ;
59497: LD_VAR 0 5
59501: RET
// export function Video ( mode ) ; begin
59502: LD_INT 0
59504: PPUSH
// ingame_video = mode ;
59505: LD_ADDR_OWVAR 52
59509: PUSH
59510: LD_VAR 0 1
59514: ST_TO_ADDR
// interface_hidden = mode ;
59515: LD_ADDR_OWVAR 54
59519: PUSH
59520: LD_VAR 0 1
59524: ST_TO_ADDR
// end ;
59525: LD_VAR 0 2
59529: RET
// export function Join ( array , element ) ; begin
59530: LD_INT 0
59532: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59533: LD_ADDR_VAR 0 3
59537: PUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: LD_VAR 0 1
59547: PUSH
59548: LD_INT 1
59550: PLUS
59551: PPUSH
59552: LD_VAR 0 2
59556: PPUSH
59557: CALL_OW 1
59561: ST_TO_ADDR
// end ;
59562: LD_VAR 0 3
59566: RET
// export function JoinUnion ( array , element ) ; begin
59567: LD_INT 0
59569: PPUSH
// result := array union element ;
59570: LD_ADDR_VAR 0 3
59574: PUSH
59575: LD_VAR 0 1
59579: PUSH
59580: LD_VAR 0 2
59584: UNION
59585: ST_TO_ADDR
// end ;
59586: LD_VAR 0 3
59590: RET
// export function GetBehemoths ( side ) ; begin
59591: LD_INT 0
59593: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59594: LD_ADDR_VAR 0 2
59598: PUSH
59599: LD_INT 22
59601: PUSH
59602: LD_VAR 0 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 31
59613: PUSH
59614: LD_INT 25
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PPUSH
59625: CALL_OW 69
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 2
59634: RET
// export function Shuffle ( array ) ; var i , index ; begin
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
59639: PPUSH
// result := [ ] ;
59640: LD_ADDR_VAR 0 2
59644: PUSH
59645: EMPTY
59646: ST_TO_ADDR
// if not array then
59647: LD_VAR 0 1
59651: NOT
59652: IFFALSE 59656
// exit ;
59654: GO 59755
// Randomize ;
59656: CALL_OW 10
// for i = array downto 1 do
59660: LD_ADDR_VAR 0 3
59664: PUSH
59665: DOUBLE
59666: LD_VAR 0 1
59670: INC
59671: ST_TO_ADDR
59672: LD_INT 1
59674: PUSH
59675: FOR_DOWNTO
59676: IFFALSE 59753
// begin index := rand ( 1 , array ) ;
59678: LD_ADDR_VAR 0 4
59682: PUSH
59683: LD_INT 1
59685: PPUSH
59686: LD_VAR 0 1
59690: PPUSH
59691: CALL_OW 12
59695: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59696: LD_ADDR_VAR 0 2
59700: PUSH
59701: LD_VAR 0 2
59705: PPUSH
59706: LD_VAR 0 2
59710: PUSH
59711: LD_INT 1
59713: PLUS
59714: PPUSH
59715: LD_VAR 0 1
59719: PUSH
59720: LD_VAR 0 4
59724: ARRAY
59725: PPUSH
59726: CALL_OW 2
59730: ST_TO_ADDR
// array := Delete ( array , index ) ;
59731: LD_ADDR_VAR 0 1
59735: PUSH
59736: LD_VAR 0 1
59740: PPUSH
59741: LD_VAR 0 4
59745: PPUSH
59746: CALL_OW 3
59750: ST_TO_ADDR
// end ;
59751: GO 59675
59753: POP
59754: POP
// end ;
59755: LD_VAR 0 2
59759: RET
// export function GetBaseMaterials ( base ) ; begin
59760: LD_INT 0
59762: PPUSH
// result := [ 0 , 0 , 0 ] ;
59763: LD_ADDR_VAR 0 2
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: ST_TO_ADDR
// if not base then
59782: LD_VAR 0 1
59786: NOT
59787: IFFALSE 59791
// exit ;
59789: GO 59840
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59791: LD_ADDR_VAR 0 2
59795: PUSH
59796: LD_VAR 0 1
59800: PPUSH
59801: LD_INT 1
59803: PPUSH
59804: CALL_OW 275
59808: PUSH
59809: LD_VAR 0 1
59813: PPUSH
59814: LD_INT 2
59816: PPUSH
59817: CALL_OW 275
59821: PUSH
59822: LD_VAR 0 1
59826: PPUSH
59827: LD_INT 3
59829: PPUSH
59830: CALL_OW 275
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// end ;
59840: LD_VAR 0 2
59844: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59845: LD_INT 0
59847: PPUSH
59848: PPUSH
// result := array ;
59849: LD_ADDR_VAR 0 3
59853: PUSH
59854: LD_VAR 0 1
59858: ST_TO_ADDR
// if size >= result then
59859: LD_VAR 0 2
59863: PUSH
59864: LD_VAR 0 3
59868: GREATEREQUAL
59869: IFFALSE 59873
// exit ;
59871: GO 59923
// if size then
59873: LD_VAR 0 2
59877: IFFALSE 59923
// for i := array downto size do
59879: LD_ADDR_VAR 0 4
59883: PUSH
59884: DOUBLE
59885: LD_VAR 0 1
59889: INC
59890: ST_TO_ADDR
59891: LD_VAR 0 2
59895: PUSH
59896: FOR_DOWNTO
59897: IFFALSE 59921
// result := Delete ( result , result ) ;
59899: LD_ADDR_VAR 0 3
59903: PUSH
59904: LD_VAR 0 3
59908: PPUSH
59909: LD_VAR 0 3
59913: PPUSH
59914: CALL_OW 3
59918: ST_TO_ADDR
59919: GO 59896
59921: POP
59922: POP
// end ;
59923: LD_VAR 0 3
59927: RET
// export function ComExit ( unit ) ; var tmp ; begin
59928: LD_INT 0
59930: PPUSH
59931: PPUSH
// if not IsInUnit ( unit ) then
59932: LD_VAR 0 1
59936: PPUSH
59937: CALL_OW 310
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 60006
// tmp := IsInUnit ( unit ) ;
59946: LD_ADDR_VAR 0 3
59950: PUSH
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 310
59960: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59961: LD_VAR 0 3
59965: PPUSH
59966: CALL_OW 247
59970: PUSH
59971: LD_INT 2
59973: EQUAL
59974: IFFALSE 59987
// ComExitVehicle ( unit ) else
59976: LD_VAR 0 1
59980: PPUSH
59981: CALL_OW 121
59985: GO 59996
// ComExitBuilding ( unit ) ;
59987: LD_VAR 0 1
59991: PPUSH
59992: CALL_OW 122
// result := tmp ;
59996: LD_ADDR_VAR 0 2
60000: PUSH
60001: LD_VAR 0 3
60005: ST_TO_ADDR
// end ;
60006: LD_VAR 0 2
60010: RET
// export function ComExitAll ( units ) ; var i ; begin
60011: LD_INT 0
60013: PPUSH
60014: PPUSH
// if not units then
60015: LD_VAR 0 1
60019: NOT
60020: IFFALSE 60024
// exit ;
60022: GO 60050
// for i in units do
60024: LD_ADDR_VAR 0 3
60028: PUSH
60029: LD_VAR 0 1
60033: PUSH
60034: FOR_IN
60035: IFFALSE 60048
// ComExit ( i ) ;
60037: LD_VAR 0 3
60041: PPUSH
60042: CALL 59928 0 1
60046: GO 60034
60048: POP
60049: POP
// end ;
60050: LD_VAR 0 2
60054: RET
// export function ResetHc ; begin
60055: LD_INT 0
60057: PPUSH
// InitHc ;
60058: CALL_OW 19
// hc_importance := 0 ;
60062: LD_ADDR_OWVAR 32
60066: PUSH
60067: LD_INT 0
60069: ST_TO_ADDR
// end ;
60070: LD_VAR 0 1
60074: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60075: LD_INT 0
60077: PPUSH
60078: PPUSH
60079: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60080: LD_ADDR_VAR 0 6
60084: PUSH
60085: LD_VAR 0 1
60089: PUSH
60090: LD_VAR 0 3
60094: PLUS
60095: PUSH
60096: LD_INT 2
60098: DIV
60099: ST_TO_ADDR
// if _x < 0 then
60100: LD_VAR 0 6
60104: PUSH
60105: LD_INT 0
60107: LESS
60108: IFFALSE 60125
// _x := _x * - 1 ;
60110: LD_ADDR_VAR 0 6
60114: PUSH
60115: LD_VAR 0 6
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: MUL
60124: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60125: LD_ADDR_VAR 0 7
60129: PUSH
60130: LD_VAR 0 2
60134: PUSH
60135: LD_VAR 0 4
60139: PLUS
60140: PUSH
60141: LD_INT 2
60143: DIV
60144: ST_TO_ADDR
// if _y < 0 then
60145: LD_VAR 0 7
60149: PUSH
60150: LD_INT 0
60152: LESS
60153: IFFALSE 60170
// _y := _y * - 1 ;
60155: LD_ADDR_VAR 0 7
60159: PUSH
60160: LD_VAR 0 7
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: MUL
60169: ST_TO_ADDR
// result := [ _x , _y ] ;
60170: LD_ADDR_VAR 0 5
60174: PUSH
60175: LD_VAR 0 6
60179: PUSH
60180: LD_VAR 0 7
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: ST_TO_ADDR
// end ;
60189: LD_VAR 0 5
60193: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60194: LD_INT 0
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
// task := GetTaskList ( unit ) ;
60200: LD_ADDR_VAR 0 7
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 437
60214: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60215: LD_VAR 0 7
60219: NOT
60220: PUSH
60221: LD_VAR 0 1
60225: PPUSH
60226: LD_VAR 0 2
60230: PPUSH
60231: CALL_OW 308
60235: NOT
60236: AND
60237: IFFALSE 60241
// exit ;
60239: GO 60359
// if IsInArea ( unit , area ) then
60241: LD_VAR 0 1
60245: PPUSH
60246: LD_VAR 0 2
60250: PPUSH
60251: CALL_OW 308
60255: IFFALSE 60273
// begin ComMoveToArea ( unit , goAway ) ;
60257: LD_VAR 0 1
60261: PPUSH
60262: LD_VAR 0 3
60266: PPUSH
60267: CALL_OW 113
// exit ;
60271: GO 60359
// end ; if task [ 1 ] [ 1 ] <> M then
60273: LD_VAR 0 7
60277: PUSH
60278: LD_INT 1
60280: ARRAY
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: PUSH
60286: LD_STRING M
60288: NONEQUAL
60289: IFFALSE 60293
// exit ;
60291: GO 60359
// x := task [ 1 ] [ 2 ] ;
60293: LD_ADDR_VAR 0 5
60297: PUSH
60298: LD_VAR 0 7
60302: PUSH
60303: LD_INT 1
60305: ARRAY
60306: PUSH
60307: LD_INT 2
60309: ARRAY
60310: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60311: LD_ADDR_VAR 0 6
60315: PUSH
60316: LD_VAR 0 7
60320: PUSH
60321: LD_INT 1
60323: ARRAY
60324: PUSH
60325: LD_INT 3
60327: ARRAY
60328: ST_TO_ADDR
// if InArea ( x , y , area ) then
60329: LD_VAR 0 5
60333: PPUSH
60334: LD_VAR 0 6
60338: PPUSH
60339: LD_VAR 0 2
60343: PPUSH
60344: CALL_OW 309
60348: IFFALSE 60359
// ComStop ( unit ) ;
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL_OW 141
// end ;
60359: LD_VAR 0 4
60363: RET
// export function Abs ( value ) ; begin
60364: LD_INT 0
60366: PPUSH
// result := value ;
60367: LD_ADDR_VAR 0 2
60371: PUSH
60372: LD_VAR 0 1
60376: ST_TO_ADDR
// if value < 0 then
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 0
60384: LESS
60385: IFFALSE 60402
// result := value * - 1 ;
60387: LD_ADDR_VAR 0 2
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: MUL
60401: ST_TO_ADDR
// end ;
60402: LD_VAR 0 2
60406: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60407: LD_INT 0
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not unit or not building then
60417: LD_VAR 0 1
60421: NOT
60422: PUSH
60423: LD_VAR 0 2
60427: NOT
60428: OR
60429: IFFALSE 60433
// exit ;
60431: GO 60659
// x := GetX ( building ) ;
60433: LD_ADDR_VAR 0 4
60437: PUSH
60438: LD_VAR 0 2
60442: PPUSH
60443: CALL_OW 250
60447: ST_TO_ADDR
// y := GetY ( building ) ;
60448: LD_ADDR_VAR 0 6
60452: PUSH
60453: LD_VAR 0 2
60457: PPUSH
60458: CALL_OW 251
60462: ST_TO_ADDR
// d := GetDir ( building ) ;
60463: LD_ADDR_VAR 0 8
60467: PUSH
60468: LD_VAR 0 2
60472: PPUSH
60473: CALL_OW 254
60477: ST_TO_ADDR
// r := 4 ;
60478: LD_ADDR_VAR 0 9
60482: PUSH
60483: LD_INT 4
60485: ST_TO_ADDR
// for i := 1 to 5 do
60486: LD_ADDR_VAR 0 10
60490: PUSH
60491: DOUBLE
60492: LD_INT 1
60494: DEC
60495: ST_TO_ADDR
60496: LD_INT 5
60498: PUSH
60499: FOR_TO
60500: IFFALSE 60657
// begin _x := ShiftX ( x , d , r + i ) ;
60502: LD_ADDR_VAR 0 5
60506: PUSH
60507: LD_VAR 0 4
60511: PPUSH
60512: LD_VAR 0 8
60516: PPUSH
60517: LD_VAR 0 9
60521: PUSH
60522: LD_VAR 0 10
60526: PLUS
60527: PPUSH
60528: CALL_OW 272
60532: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60533: LD_ADDR_VAR 0 7
60537: PUSH
60538: LD_VAR 0 6
60542: PPUSH
60543: LD_VAR 0 8
60547: PPUSH
60548: LD_VAR 0 9
60552: PUSH
60553: LD_VAR 0 10
60557: PLUS
60558: PPUSH
60559: CALL_OW 273
60563: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60564: LD_VAR 0 5
60568: PPUSH
60569: LD_VAR 0 7
60573: PPUSH
60574: CALL_OW 488
60578: PUSH
60579: LD_VAR 0 5
60583: PPUSH
60584: LD_VAR 0 7
60588: PPUSH
60589: CALL_OW 428
60593: PPUSH
60594: CALL_OW 247
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: IN
60609: NOT
60610: AND
60611: IFFALSE 60655
// begin ComMoveXY ( unit , _x , _y ) ;
60613: LD_VAR 0 1
60617: PPUSH
60618: LD_VAR 0 5
60622: PPUSH
60623: LD_VAR 0 7
60627: PPUSH
60628: CALL_OW 111
// result := [ _x , _y ] ;
60632: LD_ADDR_VAR 0 3
60636: PUSH
60637: LD_VAR 0 5
60641: PUSH
60642: LD_VAR 0 7
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: ST_TO_ADDR
// exit ;
60651: POP
60652: POP
60653: GO 60659
// end ; end ;
60655: GO 60499
60657: POP
60658: POP
// end ;
60659: LD_VAR 0 3
60663: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60664: LD_INT 0
60666: PPUSH
60667: PPUSH
60668: PPUSH
// result := 0 ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_INT 0
60676: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60677: LD_VAR 0 1
60681: PUSH
60682: LD_INT 0
60684: LESS
60685: PUSH
60686: LD_VAR 0 1
60690: PUSH
60691: LD_INT 8
60693: GREATER
60694: OR
60695: PUSH
60696: LD_VAR 0 2
60700: PUSH
60701: LD_INT 0
60703: LESS
60704: OR
60705: PUSH
60706: LD_VAR 0 2
60710: PUSH
60711: LD_INT 8
60713: GREATER
60714: OR
60715: IFFALSE 60719
// exit ;
60717: GO 60794
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60719: LD_ADDR_VAR 0 4
60723: PUSH
60724: LD_INT 22
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PPUSH
60736: CALL_OW 69
60740: PUSH
60741: FOR_IN
60742: IFFALSE 60792
// begin un := UnitShoot ( i ) ;
60744: LD_ADDR_VAR 0 5
60748: PUSH
60749: LD_VAR 0 4
60753: PPUSH
60754: CALL_OW 504
60758: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60759: LD_VAR 0 5
60763: PPUSH
60764: CALL_OW 255
60768: PUSH
60769: LD_VAR 0 1
60773: EQUAL
60774: IFFALSE 60790
// begin result := un ;
60776: LD_ADDR_VAR 0 3
60780: PUSH
60781: LD_VAR 0 5
60785: ST_TO_ADDR
// exit ;
60786: POP
60787: POP
60788: GO 60794
// end ; end ;
60790: GO 60741
60792: POP
60793: POP
// end ;
60794: LD_VAR 0 3
60798: RET
// export function GetCargoBay ( units ) ; begin
60799: LD_INT 0
60801: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60802: LD_ADDR_VAR 0 2
60806: PUSH
60807: LD_VAR 0 1
60811: PPUSH
60812: LD_INT 2
60814: PUSH
60815: LD_INT 34
60817: PUSH
60818: LD_INT 12
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 34
60827: PUSH
60828: LD_INT 51
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 34
60837: PUSH
60838: LD_INT 32
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 34
60847: PUSH
60848: LD_INT 89
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: PPUSH
60862: CALL_OW 72
60866: ST_TO_ADDR
// end ;
60867: LD_VAR 0 2
60871: RET
// export function Negate ( value ) ; begin
60872: LD_INT 0
60874: PPUSH
// result := not value ;
60875: LD_ADDR_VAR 0 2
60879: PUSH
60880: LD_VAR 0 1
60884: NOT
60885: ST_TO_ADDR
// end ;
60886: LD_VAR 0 2
60890: RET
// export function Inc ( value ) ; begin
60891: LD_INT 0
60893: PPUSH
// result := value + 1 ;
60894: LD_ADDR_VAR 0 2
60898: PUSH
60899: LD_VAR 0 1
60903: PUSH
60904: LD_INT 1
60906: PLUS
60907: ST_TO_ADDR
// end ;
60908: LD_VAR 0 2
60912: RET
// export function Dec ( value ) ; begin
60913: LD_INT 0
60915: PPUSH
// result := value - 1 ;
60916: LD_ADDR_VAR 0 2
60920: PUSH
60921: LD_VAR 0 1
60925: PUSH
60926: LD_INT 1
60928: MINUS
60929: ST_TO_ADDR
// end ;
60930: LD_VAR 0 2
60934: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60935: LD_INT 0
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
60942: PPUSH
60943: PPUSH
60944: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60945: LD_VAR 0 1
60949: PPUSH
60950: LD_VAR 0 2
60954: PPUSH
60955: CALL_OW 488
60959: NOT
60960: PUSH
60961: LD_VAR 0 3
60965: PPUSH
60966: LD_VAR 0 4
60970: PPUSH
60971: CALL_OW 488
60975: NOT
60976: OR
60977: IFFALSE 60990
// begin result := - 1 ;
60979: LD_ADDR_VAR 0 5
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: ST_TO_ADDR
// exit ;
60988: GO 61225
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60990: LD_ADDR_VAR 0 12
60994: PUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: LD_VAR 0 2
61004: PPUSH
61005: LD_VAR 0 3
61009: PPUSH
61010: LD_VAR 0 4
61014: PPUSH
61015: CALL 60075 0 4
61019: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61020: LD_ADDR_VAR 0 11
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: LD_VAR 0 2
61034: PPUSH
61035: LD_VAR 0 12
61039: PUSH
61040: LD_INT 1
61042: ARRAY
61043: PPUSH
61044: LD_VAR 0 12
61048: PUSH
61049: LD_INT 2
61051: ARRAY
61052: PPUSH
61053: CALL_OW 298
61057: ST_TO_ADDR
// distance := 9999 ;
61058: LD_ADDR_VAR 0 10
61062: PUSH
61063: LD_INT 9999
61065: ST_TO_ADDR
// for i := 0 to 5 do
61066: LD_ADDR_VAR 0 6
61070: PUSH
61071: DOUBLE
61072: LD_INT 0
61074: DEC
61075: ST_TO_ADDR
61076: LD_INT 5
61078: PUSH
61079: FOR_TO
61080: IFFALSE 61223
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61082: LD_ADDR_VAR 0 7
61086: PUSH
61087: LD_VAR 0 1
61091: PPUSH
61092: LD_VAR 0 6
61096: PPUSH
61097: LD_VAR 0 11
61101: PPUSH
61102: CALL_OW 272
61106: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61107: LD_ADDR_VAR 0 8
61111: PUSH
61112: LD_VAR 0 2
61116: PPUSH
61117: LD_VAR 0 6
61121: PPUSH
61122: LD_VAR 0 11
61126: PPUSH
61127: CALL_OW 273
61131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61132: LD_VAR 0 7
61136: PPUSH
61137: LD_VAR 0 8
61141: PPUSH
61142: CALL_OW 488
61146: NOT
61147: IFFALSE 61151
// continue ;
61149: GO 61079
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61151: LD_ADDR_VAR 0 9
61155: PUSH
61156: LD_VAR 0 12
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PPUSH
61165: LD_VAR 0 12
61169: PUSH
61170: LD_INT 2
61172: ARRAY
61173: PPUSH
61174: LD_VAR 0 7
61178: PPUSH
61179: LD_VAR 0 8
61183: PPUSH
61184: CALL_OW 298
61188: ST_TO_ADDR
// if tmp < distance then
61189: LD_VAR 0 9
61193: PUSH
61194: LD_VAR 0 10
61198: LESS
61199: IFFALSE 61221
// begin result := i ;
61201: LD_ADDR_VAR 0 5
61205: PUSH
61206: LD_VAR 0 6
61210: ST_TO_ADDR
// distance := tmp ;
61211: LD_ADDR_VAR 0 10
61215: PUSH
61216: LD_VAR 0 9
61220: ST_TO_ADDR
// end ; end ;
61221: GO 61079
61223: POP
61224: POP
// end ;
61225: LD_VAR 0 5
61229: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61230: LD_INT 0
61232: PPUSH
61233: PPUSH
// if not driver or not IsInUnit ( driver ) then
61234: LD_VAR 0 1
61238: NOT
61239: PUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: CALL_OW 310
61249: NOT
61250: OR
61251: IFFALSE 61255
// exit ;
61253: GO 61345
// vehicle := IsInUnit ( driver ) ;
61255: LD_ADDR_VAR 0 3
61259: PUSH
61260: LD_VAR 0 1
61264: PPUSH
61265: CALL_OW 310
61269: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61270: LD_VAR 0 1
61274: PPUSH
61275: LD_STRING \
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: PUSH
61305: LD_STRING E
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_VAR 0 3
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PPUSH
61341: CALL_OW 446
// end ;
61345: LD_VAR 0 2
61349: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61350: LD_INT 0
61352: PPUSH
61353: PPUSH
// if not driver or not IsInUnit ( driver ) then
61354: LD_VAR 0 1
61358: NOT
61359: PUSH
61360: LD_VAR 0 1
61364: PPUSH
61365: CALL_OW 310
61369: NOT
61370: OR
61371: IFFALSE 61375
// exit ;
61373: GO 61465
// vehicle := IsInUnit ( driver ) ;
61375: LD_ADDR_VAR 0 3
61379: PUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL_OW 310
61389: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61390: LD_VAR 0 1
61394: PPUSH
61395: LD_STRING \
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: PUSH
61425: LD_STRING E
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_VAR 0 3
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PPUSH
61461: CALL_OW 447
// end ;
61465: LD_VAR 0 2
61469: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61470: LD_INT 0
61472: PPUSH
61473: PPUSH
61474: PPUSH
// tmp := [ ] ;
61475: LD_ADDR_VAR 0 5
61479: PUSH
61480: EMPTY
61481: ST_TO_ADDR
// for i in units do
61482: LD_ADDR_VAR 0 4
61486: PUSH
61487: LD_VAR 0 1
61491: PUSH
61492: FOR_IN
61493: IFFALSE 61531
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61495: LD_ADDR_VAR 0 5
61499: PUSH
61500: LD_VAR 0 5
61504: PPUSH
61505: LD_VAR 0 5
61509: PUSH
61510: LD_INT 1
61512: PLUS
61513: PPUSH
61514: LD_VAR 0 4
61518: PPUSH
61519: CALL_OW 256
61523: PPUSH
61524: CALL_OW 2
61528: ST_TO_ADDR
61529: GO 61492
61531: POP
61532: POP
// if not tmp then
61533: LD_VAR 0 5
61537: NOT
61538: IFFALSE 61542
// exit ;
61540: GO 61590
// if asc then
61542: LD_VAR 0 2
61546: IFFALSE 61570
// result := SortListByListAsc ( units , tmp ) else
61548: LD_ADDR_VAR 0 3
61552: PUSH
61553: LD_VAR 0 1
61557: PPUSH
61558: LD_VAR 0 5
61562: PPUSH
61563: CALL_OW 76
61567: ST_TO_ADDR
61568: GO 61590
// result := SortListByListDesc ( units , tmp ) ;
61570: LD_ADDR_VAR 0 3
61574: PUSH
61575: LD_VAR 0 1
61579: PPUSH
61580: LD_VAR 0 5
61584: PPUSH
61585: CALL_OW 77
61589: ST_TO_ADDR
// end ;
61590: LD_VAR 0 3
61594: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61595: LD_INT 0
61597: PPUSH
61598: PPUSH
// task := GetTaskList ( mech ) ;
61599: LD_ADDR_VAR 0 4
61603: PUSH
61604: LD_VAR 0 1
61608: PPUSH
61609: CALL_OW 437
61613: ST_TO_ADDR
// if not task then
61614: LD_VAR 0 4
61618: NOT
61619: IFFALSE 61623
// exit ;
61621: GO 61665
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61623: LD_ADDR_VAR 0 3
61627: PUSH
61628: LD_VAR 0 4
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PUSH
61637: LD_INT 1
61639: ARRAY
61640: PUSH
61641: LD_STRING r
61643: EQUAL
61644: PUSH
61645: LD_VAR 0 4
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PUSH
61654: LD_INT 4
61656: ARRAY
61657: PUSH
61658: LD_VAR 0 2
61662: EQUAL
61663: AND
61664: ST_TO_ADDR
// end ;
61665: LD_VAR 0 3
61669: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61670: LD_INT 0
61672: PPUSH
// SetDir ( unit , d ) ;
61673: LD_VAR 0 1
61677: PPUSH
61678: LD_VAR 0 4
61682: PPUSH
61683: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_VAR 0 2
61696: PPUSH
61697: LD_VAR 0 3
61701: PPUSH
61702: LD_VAR 0 5
61706: PPUSH
61707: CALL_OW 48
// end ;
61711: LD_VAR 0 6
61715: RET
// export function ToNaturalNumber ( number ) ; begin
61716: LD_INT 0
61718: PPUSH
// result := number div 1 ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_VAR 0 1
61728: PUSH
61729: LD_INT 1
61731: DIV
61732: ST_TO_ADDR
// if number < 0 then
61733: LD_VAR 0 1
61737: PUSH
61738: LD_INT 0
61740: LESS
61741: IFFALSE 61751
// result := 0 ;
61743: LD_ADDR_VAR 0 2
61747: PUSH
61748: LD_INT 0
61750: ST_TO_ADDR
// end ;
61751: LD_VAR 0 2
61755: RET
// export function SortByClass ( units , class ) ; var un ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
// if not units or not class then
61760: LD_VAR 0 1
61764: NOT
61765: PUSH
61766: LD_VAR 0 2
61770: NOT
61771: OR
61772: IFFALSE 61776
// exit ;
61774: GO 61871
// result := [ ] ;
61776: LD_ADDR_VAR 0 3
61780: PUSH
61781: EMPTY
61782: ST_TO_ADDR
// for un in units do
61783: LD_ADDR_VAR 0 4
61787: PUSH
61788: LD_VAR 0 1
61792: PUSH
61793: FOR_IN
61794: IFFALSE 61869
// if GetClass ( un ) = class then
61796: LD_VAR 0 4
61800: PPUSH
61801: CALL_OW 257
61805: PUSH
61806: LD_VAR 0 2
61810: EQUAL
61811: IFFALSE 61838
// result := Insert ( result , 1 , un ) else
61813: LD_ADDR_VAR 0 3
61817: PUSH
61818: LD_VAR 0 3
61822: PPUSH
61823: LD_INT 1
61825: PPUSH
61826: LD_VAR 0 4
61830: PPUSH
61831: CALL_OW 2
61835: ST_TO_ADDR
61836: GO 61867
// result := Replace ( result , result + 1 , un ) ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 3
61847: PPUSH
61848: LD_VAR 0 3
61852: PUSH
61853: LD_INT 1
61855: PLUS
61856: PPUSH
61857: LD_VAR 0 4
61861: PPUSH
61862: CALL_OW 1
61866: ST_TO_ADDR
61867: GO 61793
61869: POP
61870: POP
// end ;
61871: LD_VAR 0 3
61875: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61876: LD_INT 0
61878: PPUSH
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
// result := [ ] ;
61885: LD_ADDR_VAR 0 4
61889: PUSH
61890: EMPTY
61891: ST_TO_ADDR
// if x - r < 0 then
61892: LD_VAR 0 1
61896: PUSH
61897: LD_VAR 0 3
61901: MINUS
61902: PUSH
61903: LD_INT 0
61905: LESS
61906: IFFALSE 61918
// min_x := 0 else
61908: LD_ADDR_VAR 0 8
61912: PUSH
61913: LD_INT 0
61915: ST_TO_ADDR
61916: GO 61934
// min_x := x - r ;
61918: LD_ADDR_VAR 0 8
61922: PUSH
61923: LD_VAR 0 1
61927: PUSH
61928: LD_VAR 0 3
61932: MINUS
61933: ST_TO_ADDR
// if y - r < 0 then
61934: LD_VAR 0 2
61938: PUSH
61939: LD_VAR 0 3
61943: MINUS
61944: PUSH
61945: LD_INT 0
61947: LESS
61948: IFFALSE 61960
// min_y := 0 else
61950: LD_ADDR_VAR 0 7
61954: PUSH
61955: LD_INT 0
61957: ST_TO_ADDR
61958: GO 61976
// min_y := y - r ;
61960: LD_ADDR_VAR 0 7
61964: PUSH
61965: LD_VAR 0 2
61969: PUSH
61970: LD_VAR 0 3
61974: MINUS
61975: ST_TO_ADDR
// max_x := x + r ;
61976: LD_ADDR_VAR 0 9
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_VAR 0 3
61990: PLUS
61991: ST_TO_ADDR
// max_y := y + r ;
61992: LD_ADDR_VAR 0 10
61996: PUSH
61997: LD_VAR 0 2
62001: PUSH
62002: LD_VAR 0 3
62006: PLUS
62007: ST_TO_ADDR
// for _x = min_x to max_x do
62008: LD_ADDR_VAR 0 5
62012: PUSH
62013: DOUBLE
62014: LD_VAR 0 8
62018: DEC
62019: ST_TO_ADDR
62020: LD_VAR 0 9
62024: PUSH
62025: FOR_TO
62026: IFFALSE 62127
// for _y = min_y to max_y do
62028: LD_ADDR_VAR 0 6
62032: PUSH
62033: DOUBLE
62034: LD_VAR 0 7
62038: DEC
62039: ST_TO_ADDR
62040: LD_VAR 0 10
62044: PUSH
62045: FOR_TO
62046: IFFALSE 62123
// begin if not ValidHex ( _x , _y ) then
62048: LD_VAR 0 5
62052: PPUSH
62053: LD_VAR 0 6
62057: PPUSH
62058: CALL_OW 488
62062: NOT
62063: IFFALSE 62067
// continue ;
62065: GO 62045
// if GetResourceTypeXY ( _x , _y ) then
62067: LD_VAR 0 5
62071: PPUSH
62072: LD_VAR 0 6
62076: PPUSH
62077: CALL_OW 283
62081: IFFALSE 62121
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62083: LD_ADDR_VAR 0 4
62087: PUSH
62088: LD_VAR 0 4
62092: PPUSH
62093: LD_VAR 0 4
62097: PUSH
62098: LD_INT 1
62100: PLUS
62101: PPUSH
62102: LD_VAR 0 5
62106: PUSH
62107: LD_VAR 0 6
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PPUSH
62116: CALL_OW 1
62120: ST_TO_ADDR
// end ;
62121: GO 62045
62123: POP
62124: POP
62125: GO 62025
62127: POP
62128: POP
// end ;
62129: LD_VAR 0 4
62133: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62134: LD_INT 0
62136: PPUSH
62137: PPUSH
62138: PPUSH
62139: PPUSH
62140: PPUSH
62141: PPUSH
62142: PPUSH
62143: PPUSH
// if not units then
62144: LD_VAR 0 1
62148: NOT
62149: IFFALSE 62153
// exit ;
62151: GO 62677
// result := UnitFilter ( units , [ f_ok ] ) ;
62153: LD_ADDR_VAR 0 3
62157: PUSH
62158: LD_VAR 0 1
62162: PPUSH
62163: LD_INT 50
62165: PUSH
62166: EMPTY
62167: LIST
62168: PPUSH
62169: CALL_OW 72
62173: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62174: LD_ADDR_VAR 0 8
62178: PUSH
62179: LD_VAR 0 1
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PPUSH
62188: CALL_OW 255
62192: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62193: LD_ADDR_VAR 0 10
62197: PUSH
62198: LD_INT 29
62200: PUSH
62201: LD_INT 91
62203: PUSH
62204: LD_INT 49
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// if not result then
62212: LD_VAR 0 3
62216: NOT
62217: IFFALSE 62221
// exit ;
62219: GO 62677
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62221: LD_ADDR_VAR 0 5
62225: PUSH
62226: LD_INT 81
62228: PUSH
62229: LD_VAR 0 8
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PPUSH
62238: CALL_OW 69
62242: ST_TO_ADDR
// for i in result do
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: LD_VAR 0 3
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62675
// begin tag := GetTag ( i ) + 1 ;
62256: LD_ADDR_VAR 0 9
62260: PUSH
62261: LD_VAR 0 4
62265: PPUSH
62266: CALL_OW 110
62270: PUSH
62271: LD_INT 1
62273: PLUS
62274: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62275: LD_ADDR_VAR 0 7
62279: PUSH
62280: LD_VAR 0 4
62284: PPUSH
62285: CALL_OW 250
62289: PPUSH
62290: LD_VAR 0 4
62294: PPUSH
62295: CALL_OW 251
62299: PPUSH
62300: LD_INT 6
62302: PPUSH
62303: CALL 61876 0 3
62307: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62308: LD_VAR 0 4
62312: PPUSH
62313: CALL_OW 247
62317: PUSH
62318: LD_INT 2
62320: EQUAL
62321: PUSH
62322: LD_VAR 0 7
62326: AND
62327: PUSH
62328: LD_VAR 0 4
62332: PPUSH
62333: CALL_OW 264
62337: PUSH
62338: LD_VAR 0 10
62342: IN
62343: NOT
62344: AND
62345: IFFALSE 62384
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62347: LD_VAR 0 4
62351: PPUSH
62352: LD_VAR 0 7
62356: PUSH
62357: LD_INT 1
62359: ARRAY
62360: PUSH
62361: LD_INT 1
62363: ARRAY
62364: PPUSH
62365: LD_VAR 0 7
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PUSH
62374: LD_INT 2
62376: ARRAY
62377: PPUSH
62378: CALL_OW 116
62382: GO 62673
// if path > tag then
62384: LD_VAR 0 2
62388: PUSH
62389: LD_VAR 0 9
62393: GREATER
62394: IFFALSE 62602
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62396: LD_ADDR_VAR 0 6
62400: PUSH
62401: LD_VAR 0 5
62405: PPUSH
62406: LD_INT 91
62408: PUSH
62409: LD_VAR 0 4
62413: PUSH
62414: LD_INT 8
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: PPUSH
62422: CALL_OW 72
62426: ST_TO_ADDR
// if nearEnemy then
62427: LD_VAR 0 6
62431: IFFALSE 62500
// begin if GetWeapon ( i ) = ru_time_lapser then
62433: LD_VAR 0 4
62437: PPUSH
62438: CALL_OW 264
62442: PUSH
62443: LD_INT 49
62445: EQUAL
62446: IFFALSE 62474
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62448: LD_VAR 0 4
62452: PPUSH
62453: LD_VAR 0 6
62457: PPUSH
62458: LD_VAR 0 4
62462: PPUSH
62463: CALL_OW 74
62467: PPUSH
62468: CALL_OW 112
62472: GO 62498
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62474: LD_VAR 0 4
62478: PPUSH
62479: LD_VAR 0 6
62483: PPUSH
62484: LD_VAR 0 4
62488: PPUSH
62489: CALL_OW 74
62493: PPUSH
62494: CALL 63602 0 2
// end else
62498: GO 62600
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62500: LD_VAR 0 4
62504: PPUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_VAR 0 9
62514: ARRAY
62515: PUSH
62516: LD_INT 1
62518: ARRAY
62519: PPUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_VAR 0 9
62529: ARRAY
62530: PUSH
62531: LD_INT 2
62533: ARRAY
62534: PPUSH
62535: CALL_OW 297
62539: PUSH
62540: LD_INT 6
62542: GREATER
62543: IFFALSE 62586
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62545: LD_VAR 0 4
62549: PPUSH
62550: LD_VAR 0 2
62554: PUSH
62555: LD_VAR 0 9
62559: ARRAY
62560: PUSH
62561: LD_INT 1
62563: ARRAY
62564: PPUSH
62565: LD_VAR 0 2
62569: PUSH
62570: LD_VAR 0 9
62574: ARRAY
62575: PUSH
62576: LD_INT 2
62578: ARRAY
62579: PPUSH
62580: CALL_OW 114
62584: GO 62600
// SetTag ( i , tag ) ;
62586: LD_VAR 0 4
62590: PPUSH
62591: LD_VAR 0 9
62595: PPUSH
62596: CALL_OW 109
// end else
62600: GO 62673
// if enemy then
62602: LD_VAR 0 5
62606: IFFALSE 62673
// begin if GetWeapon ( i ) = ru_time_lapser then
62608: LD_VAR 0 4
62612: PPUSH
62613: CALL_OW 264
62617: PUSH
62618: LD_INT 49
62620: EQUAL
62621: IFFALSE 62649
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62623: LD_VAR 0 4
62627: PPUSH
62628: LD_VAR 0 5
62632: PPUSH
62633: LD_VAR 0 4
62637: PPUSH
62638: CALL_OW 74
62642: PPUSH
62643: CALL_OW 112
62647: GO 62673
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62649: LD_VAR 0 4
62653: PPUSH
62654: LD_VAR 0 5
62658: PPUSH
62659: LD_VAR 0 4
62663: PPUSH
62664: CALL_OW 74
62668: PPUSH
62669: CALL 63602 0 2
// end ; end ;
62673: GO 62253
62675: POP
62676: POP
// end ;
62677: LD_VAR 0 3
62681: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62682: LD_INT 0
62684: PPUSH
62685: PPUSH
62686: PPUSH
// if not unit or IsInUnit ( unit ) then
62687: LD_VAR 0 1
62691: NOT
62692: PUSH
62693: LD_VAR 0 1
62697: PPUSH
62698: CALL_OW 310
62702: OR
62703: IFFALSE 62707
// exit ;
62705: GO 62798
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62707: LD_ADDR_VAR 0 4
62711: PUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL_OW 250
62721: PPUSH
62722: LD_VAR 0 2
62726: PPUSH
62727: LD_INT 1
62729: PPUSH
62730: CALL_OW 272
62734: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62735: LD_ADDR_VAR 0 5
62739: PUSH
62740: LD_VAR 0 1
62744: PPUSH
62745: CALL_OW 251
62749: PPUSH
62750: LD_VAR 0 2
62754: PPUSH
62755: LD_INT 1
62757: PPUSH
62758: CALL_OW 273
62762: ST_TO_ADDR
// if ValidHex ( x , y ) then
62763: LD_VAR 0 4
62767: PPUSH
62768: LD_VAR 0 5
62772: PPUSH
62773: CALL_OW 488
62777: IFFALSE 62798
// ComTurnXY ( unit , x , y ) ;
62779: LD_VAR 0 1
62783: PPUSH
62784: LD_VAR 0 4
62788: PPUSH
62789: LD_VAR 0 5
62793: PPUSH
62794: CALL_OW 118
// end ;
62798: LD_VAR 0 3
62802: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62803: LD_INT 0
62805: PPUSH
62806: PPUSH
// result := false ;
62807: LD_ADDR_VAR 0 3
62811: PUSH
62812: LD_INT 0
62814: ST_TO_ADDR
// if not units then
62815: LD_VAR 0 2
62819: NOT
62820: IFFALSE 62824
// exit ;
62822: GO 62869
// for i in units do
62824: LD_ADDR_VAR 0 4
62828: PUSH
62829: LD_VAR 0 2
62833: PUSH
62834: FOR_IN
62835: IFFALSE 62867
// if See ( side , i ) then
62837: LD_VAR 0 1
62841: PPUSH
62842: LD_VAR 0 4
62846: PPUSH
62847: CALL_OW 292
62851: IFFALSE 62865
// begin result := true ;
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_INT 1
62860: ST_TO_ADDR
// exit ;
62861: POP
62862: POP
62863: GO 62869
// end ;
62865: GO 62834
62867: POP
62868: POP
// end ;
62869: LD_VAR 0 3
62873: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62874: LD_INT 0
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
// if not unit or not points then
62880: LD_VAR 0 1
62884: NOT
62885: PUSH
62886: LD_VAR 0 2
62890: NOT
62891: OR
62892: IFFALSE 62896
// exit ;
62894: GO 62986
// dist := 99999 ;
62896: LD_ADDR_VAR 0 5
62900: PUSH
62901: LD_INT 99999
62903: ST_TO_ADDR
// for i in points do
62904: LD_ADDR_VAR 0 4
62908: PUSH
62909: LD_VAR 0 2
62913: PUSH
62914: FOR_IN
62915: IFFALSE 62984
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62917: LD_ADDR_VAR 0 6
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_VAR 0 4
62931: PUSH
62932: LD_INT 1
62934: ARRAY
62935: PPUSH
62936: LD_VAR 0 4
62940: PUSH
62941: LD_INT 2
62943: ARRAY
62944: PPUSH
62945: CALL_OW 297
62949: ST_TO_ADDR
// if tmpDist < dist then
62950: LD_VAR 0 6
62954: PUSH
62955: LD_VAR 0 5
62959: LESS
62960: IFFALSE 62982
// begin result := i ;
62962: LD_ADDR_VAR 0 3
62966: PUSH
62967: LD_VAR 0 4
62971: ST_TO_ADDR
// dist := tmpDist ;
62972: LD_ADDR_VAR 0 5
62976: PUSH
62977: LD_VAR 0 6
62981: ST_TO_ADDR
// end ; end ;
62982: GO 62914
62984: POP
62985: POP
// end ;
62986: LD_VAR 0 3
62990: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62991: LD_INT 0
62993: PPUSH
// uc_side := side ;
62994: LD_ADDR_OWVAR 20
62998: PUSH
62999: LD_VAR 0 1
63003: ST_TO_ADDR
// uc_nation := 3 ;
63004: LD_ADDR_OWVAR 21
63008: PUSH
63009: LD_INT 3
63011: ST_TO_ADDR
// vc_chassis := 25 ;
63012: LD_ADDR_OWVAR 37
63016: PUSH
63017: LD_INT 25
63019: ST_TO_ADDR
// vc_engine := engine_siberite ;
63020: LD_ADDR_OWVAR 39
63024: PUSH
63025: LD_INT 3
63027: ST_TO_ADDR
// vc_control := control_computer ;
63028: LD_ADDR_OWVAR 38
63032: PUSH
63033: LD_INT 3
63035: ST_TO_ADDR
// vc_weapon := 59 ;
63036: LD_ADDR_OWVAR 40
63040: PUSH
63041: LD_INT 59
63043: ST_TO_ADDR
// result := CreateVehicle ;
63044: LD_ADDR_VAR 0 5
63048: PUSH
63049: CALL_OW 45
63053: ST_TO_ADDR
// SetDir ( result , d ) ;
63054: LD_VAR 0 5
63058: PPUSH
63059: LD_VAR 0 4
63063: PPUSH
63064: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63068: LD_VAR 0 5
63072: PPUSH
63073: LD_VAR 0 2
63077: PPUSH
63078: LD_VAR 0 3
63082: PPUSH
63083: LD_INT 0
63085: PPUSH
63086: CALL_OW 48
// end ;
63090: LD_VAR 0 5
63094: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63095: LD_INT 0
63097: PPUSH
63098: PPUSH
63099: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63100: LD_ADDR_VAR 0 2
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63123: LD_VAR 0 1
63127: NOT
63128: PUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: CALL_OW 264
63138: PUSH
63139: LD_INT 12
63141: PUSH
63142: LD_INT 51
63144: PUSH
63145: LD_INT 32
63147: PUSH
63148: LD_INT 89
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: IN
63157: NOT
63158: OR
63159: IFFALSE 63163
// exit ;
63161: GO 63261
// for i := 1 to 3 do
63163: LD_ADDR_VAR 0 3
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_INT 3
63175: PUSH
63176: FOR_TO
63177: IFFALSE 63259
// begin tmp := GetCargo ( cargo , i ) ;
63179: LD_ADDR_VAR 0 4
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_VAR 0 3
63193: PPUSH
63194: CALL_OW 289
63198: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: LD_VAR 0 3
63213: PPUSH
63214: LD_VAR 0 4
63218: PPUSH
63219: CALL_OW 1
63223: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63224: LD_ADDR_VAR 0 2
63228: PUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_INT 4
63236: PPUSH
63237: LD_VAR 0 2
63241: PUSH
63242: LD_INT 4
63244: ARRAY
63245: PUSH
63246: LD_VAR 0 4
63250: PLUS
63251: PPUSH
63252: CALL_OW 1
63256: ST_TO_ADDR
// end ;
63257: GO 63176
63259: POP
63260: POP
// end ;
63261: LD_VAR 0 2
63265: RET
// export function Length ( array ) ; begin
63266: LD_INT 0
63268: PPUSH
// result := array + 0 ;
63269: LD_ADDR_VAR 0 2
63273: PUSH
63274: LD_VAR 0 1
63278: PUSH
63279: LD_INT 0
63281: PLUS
63282: ST_TO_ADDR
// end ;
63283: LD_VAR 0 2
63287: RET
// export function PrepareArray ( array ) ; begin
63288: LD_INT 0
63290: PPUSH
// result := array diff 0 ;
63291: LD_ADDR_VAR 0 2
63295: PUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_INT 0
63303: DIFF
63304: ST_TO_ADDR
// if not result [ 1 ] then
63305: LD_VAR 0 2
63309: PUSH
63310: LD_INT 1
63312: ARRAY
63313: NOT
63314: IFFALSE 63334
// result := Delete ( result , 1 ) ;
63316: LD_ADDR_VAR 0 2
63320: PUSH
63321: LD_VAR 0 2
63325: PPUSH
63326: LD_INT 1
63328: PPUSH
63329: CALL_OW 3
63333: ST_TO_ADDR
// end ;
63334: LD_VAR 0 2
63338: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63339: LD_INT 0
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
// sibRocketRange := 25 ;
63345: LD_ADDR_VAR 0 6
63349: PUSH
63350: LD_INT 25
63352: ST_TO_ADDR
// result := false ;
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_INT 0
63360: ST_TO_ADDR
// for i := 0 to 5 do
63361: LD_ADDR_VAR 0 5
63365: PUSH
63366: DOUBLE
63367: LD_INT 0
63369: DEC
63370: ST_TO_ADDR
63371: LD_INT 5
63373: PUSH
63374: FOR_TO
63375: IFFALSE 63442
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_VAR 0 5
63386: PPUSH
63387: LD_VAR 0 6
63391: PPUSH
63392: CALL_OW 272
63396: PPUSH
63397: LD_VAR 0 2
63401: PPUSH
63402: LD_VAR 0 5
63406: PPUSH
63407: LD_VAR 0 6
63411: PPUSH
63412: CALL_OW 273
63416: PPUSH
63417: LD_VAR 0 3
63421: PPUSH
63422: CALL_OW 309
63426: IFFALSE 63440
// begin result := true ;
63428: LD_ADDR_VAR 0 4
63432: PUSH
63433: LD_INT 1
63435: ST_TO_ADDR
// exit ;
63436: POP
63437: POP
63438: GO 63444
// end ;
63440: GO 63374
63442: POP
63443: POP
// end ;
63444: LD_VAR 0 4
63448: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63449: LD_INT 0
63451: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63452: LD_VAR 0 1
63456: PPUSH
63457: LD_VAR 0 2
63461: PPUSH
63462: LD_INT 0
63464: PPUSH
63465: LD_INT 0
63467: PPUSH
63468: LD_INT 1
63470: PPUSH
63471: LD_INT 0
63473: PPUSH
63474: CALL_OW 587
// end ;
63478: LD_VAR 0 3
63482: RET
// export function CenterOnNow ( unit ) ; begin
63483: LD_INT 0
63485: PPUSH
// result := IsInUnit ( unit ) ;
63486: LD_ADDR_VAR 0 2
63490: PUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL_OW 310
63500: ST_TO_ADDR
// if not result then
63501: LD_VAR 0 2
63505: NOT
63506: IFFALSE 63518
// result := unit ;
63508: LD_ADDR_VAR 0 2
63512: PUSH
63513: LD_VAR 0 1
63517: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63518: LD_VAR 0 1
63522: PPUSH
63523: CALL_OW 87
// end ;
63527: LD_VAR 0 2
63531: RET
// export function ComMoveHex ( unit , hex ) ; begin
63532: LD_INT 0
63534: PPUSH
// if not hex then
63535: LD_VAR 0 2
63539: NOT
63540: IFFALSE 63544
// exit ;
63542: GO 63597
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63544: LD_VAR 0 2
63548: PUSH
63549: LD_INT 1
63551: ARRAY
63552: PPUSH
63553: LD_VAR 0 2
63557: PUSH
63558: LD_INT 2
63560: ARRAY
63561: PPUSH
63562: CALL_OW 428
63566: IFFALSE 63570
// exit ;
63568: GO 63597
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63570: LD_VAR 0 1
63574: PPUSH
63575: LD_VAR 0 2
63579: PUSH
63580: LD_INT 1
63582: ARRAY
63583: PPUSH
63584: LD_VAR 0 2
63588: PUSH
63589: LD_INT 2
63591: ARRAY
63592: PPUSH
63593: CALL_OW 111
// end ;
63597: LD_VAR 0 3
63601: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63602: LD_INT 0
63604: PPUSH
63605: PPUSH
63606: PPUSH
// if not unit or not enemy then
63607: LD_VAR 0 1
63611: NOT
63612: PUSH
63613: LD_VAR 0 2
63617: NOT
63618: OR
63619: IFFALSE 63623
// exit ;
63621: GO 63747
// x := GetX ( enemy ) ;
63623: LD_ADDR_VAR 0 4
63627: PUSH
63628: LD_VAR 0 2
63632: PPUSH
63633: CALL_OW 250
63637: ST_TO_ADDR
// y := GetY ( enemy ) ;
63638: LD_ADDR_VAR 0 5
63642: PUSH
63643: LD_VAR 0 2
63647: PPUSH
63648: CALL_OW 251
63652: ST_TO_ADDR
// if ValidHex ( x , y ) then
63653: LD_VAR 0 4
63657: PPUSH
63658: LD_VAR 0 5
63662: PPUSH
63663: CALL_OW 488
63667: IFFALSE 63747
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
63669: LD_VAR 0 2
63673: PPUSH
63674: CALL_OW 247
63678: PUSH
63679: LD_INT 3
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: IN
63689: PUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 255
63699: PPUSH
63700: LD_VAR 0 2
63704: PPUSH
63705: CALL_OW 292
63709: AND
63710: IFFALSE 63728
// ComAttackUnit ( unit , enemy ) else
63712: LD_VAR 0 1
63716: PPUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: CALL_OW 115
63726: GO 63747
// ComAgressiveMove ( unit , x , y ) ;
63728: LD_VAR 0 1
63732: PPUSH
63733: LD_VAR 0 4
63737: PPUSH
63738: LD_VAR 0 5
63742: PPUSH
63743: CALL_OW 114
// end ; end_of_file
63747: LD_VAR 0 3
63751: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63752: LD_VAR 0 1
63756: PPUSH
63757: LD_VAR 0 2
63761: PPUSH
63762: LD_VAR 0 3
63766: PPUSH
63767: LD_VAR 0 4
63771: PPUSH
63772: LD_VAR 0 5
63776: PPUSH
63777: LD_VAR 0 6
63781: PPUSH
63782: CALL 2110 0 6
// end ;
63786: PPOPN 6
63788: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63789: LD_INT 0
63791: PPUSH
// begin if not units then
63792: LD_VAR 0 1
63796: NOT
63797: IFFALSE 63801
// exit ;
63799: GO 63801
// end ;
63801: PPOPN 7
63803: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63804: CALL 2014 0 0
// end ;
63808: PPOPN 1
63810: END
