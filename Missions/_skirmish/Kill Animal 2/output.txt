// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// export function SOS_MapStart ( ) ; begin
1977: LD_INT 0
1979: PPUSH
// if streamModeActive then
1980: LD_EXP 8
1984: IFFALSE 1993
// DefineStreamItems ( true ) ;
1986: LD_INT 1
1988: PPUSH
1989: CALL 3797 0 1
// UpdateLuaVariables ( ) ;
1993: CALL 2010 0 0
// UpdateFactoryWaypoints ( ) ;
1997: CALL 16658 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2001: CALL 16915 0 0
// end ;
2005: LD_VAR 0 1
2009: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
2010: LD_INT 0
2012: PPUSH
// if not globalGameSaveCounter then
2013: LD_EXP 7
2017: NOT
2018: IFFALSE 2029
// ToLua ( setGameSaveCounter(0) ) else
2020: LD_STRING setGameSaveCounter(0)
2022: PPUSH
2023: CALL_OW 559
2027: GO 2061
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
2029: LD_ADDR_EXP 7
2033: PUSH
2034: LD_EXP 7
2038: PPUSH
2039: CALL 61035 0 1
2043: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2044: LD_STRING setGameSaveCounter(
2046: PUSH
2047: LD_EXP 7
2051: STR
2052: PUSH
2053: LD_STRING )
2055: STR
2056: PPUSH
2057: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
2061: LD_STRING setGameDifficulty(
2063: PUSH
2064: LD_OWVAR 67
2068: STR
2069: PUSH
2070: LD_STRING )
2072: STR
2073: PPUSH
2074: CALL_OW 559
// end ;
2078: LD_VAR 0 1
2082: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2083: LD_INT 0
2085: PPUSH
// if p2 = stream_mode then
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 100
2093: EQUAL
2094: IFFALSE 3097
// begin if not StreamModeActive then
2096: LD_EXP 8
2100: NOT
2101: IFFALSE 2111
// StreamModeActive := true ;
2103: LD_ADDR_EXP 8
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// if p3 = 0 then
2111: LD_VAR 0 3
2115: PUSH
2116: LD_INT 0
2118: EQUAL
2119: IFFALSE 2125
// InitStreamMode ;
2121: CALL 3333 0 0
// if p3 = 1 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: EQUAL
2133: IFFALSE 2143
// sRocket := true ;
2135: LD_ADDR_EXP 13
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 2 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 2
2150: EQUAL
2151: IFFALSE 2161
// sSpeed := true ;
2153: LD_ADDR_EXP 12
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 3 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 3
2168: EQUAL
2169: IFFALSE 2179
// sEngine := true ;
2171: LD_ADDR_EXP 14
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 4 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 4
2186: EQUAL
2187: IFFALSE 2197
// sSpec := true ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 5 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 5
2204: EQUAL
2205: IFFALSE 2215
// sLevel := true ;
2207: LD_ADDR_EXP 15
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 6 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 6
2222: EQUAL
2223: IFFALSE 2233
// sArmoury := true ;
2225: LD_ADDR_EXP 16
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 7 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 7
2240: EQUAL
2241: IFFALSE 2251
// sRadar := true ;
2243: LD_ADDR_EXP 17
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 8 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 8
2258: EQUAL
2259: IFFALSE 2269
// sBunker := true ;
2261: LD_ADDR_EXP 18
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 9 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 9
2276: EQUAL
2277: IFFALSE 2287
// sHack := true ;
2279: LD_ADDR_EXP 19
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 10 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 10
2294: EQUAL
2295: IFFALSE 2305
// sFire := true ;
2297: LD_ADDR_EXP 20
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 11 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 11
2312: EQUAL
2313: IFFALSE 2323
// sRefresh := true ;
2315: LD_ADDR_EXP 21
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 12 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 12
2330: EQUAL
2331: IFFALSE 2341
// sExp := true ;
2333: LD_ADDR_EXP 22
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 13 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 13
2348: EQUAL
2349: IFFALSE 2359
// sDepot := true ;
2351: LD_ADDR_EXP 23
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 14 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 14
2366: EQUAL
2367: IFFALSE 2377
// sFlag := true ;
2369: LD_ADDR_EXP 24
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 15 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 15
2384: EQUAL
2385: IFFALSE 2395
// sKamikadze := true ;
2387: LD_ADDR_EXP 32
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 16 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 16
2402: EQUAL
2403: IFFALSE 2413
// sTroll := true ;
2405: LD_ADDR_EXP 33
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 17 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 17
2420: EQUAL
2421: IFFALSE 2431
// sSlow := true ;
2423: LD_ADDR_EXP 34
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 18 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 18
2438: EQUAL
2439: IFFALSE 2449
// sLack := true ;
2441: LD_ADDR_EXP 35
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 19 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 19
2456: EQUAL
2457: IFFALSE 2467
// sTank := true ;
2459: LD_ADDR_EXP 37
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 20 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 20
2474: EQUAL
2475: IFFALSE 2485
// sRemote := true ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 21 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 21
2492: EQUAL
2493: IFFALSE 2503
// sPowell := true ;
2495: LD_ADDR_EXP 39
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 22 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 22
2510: EQUAL
2511: IFFALSE 2521
// sTeleport := true ;
2513: LD_ADDR_EXP 42
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 23 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 23
2528: EQUAL
2529: IFFALSE 2539
// sOilTower := true ;
2531: LD_ADDR_EXP 44
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 24 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 24
2546: EQUAL
2547: IFFALSE 2557
// sShovel := true ;
2549: LD_ADDR_EXP 45
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 25 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 25
2564: EQUAL
2565: IFFALSE 2575
// sSheik := true ;
2567: LD_ADDR_EXP 46
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 26 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 26
2582: EQUAL
2583: IFFALSE 2593
// sEarthquake := true ;
2585: LD_ADDR_EXP 48
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 27 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 27
2600: EQUAL
2601: IFFALSE 2611
// sAI := true ;
2603: LD_ADDR_EXP 49
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 28 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 28
2618: EQUAL
2619: IFFALSE 2629
// sCargo := true ;
2621: LD_ADDR_EXP 52
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 29 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 29
2636: EQUAL
2637: IFFALSE 2647
// sDLaser := true ;
2639: LD_ADDR_EXP 53
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 30 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 30
2654: EQUAL
2655: IFFALSE 2665
// sExchange := true ;
2657: LD_ADDR_EXP 54
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 31 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 31
2672: EQUAL
2673: IFFALSE 2683
// sFac := true ;
2675: LD_ADDR_EXP 55
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 32 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 32
2690: EQUAL
2691: IFFALSE 2701
// sPower := true ;
2693: LD_ADDR_EXP 56
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 33 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 33
2708: EQUAL
2709: IFFALSE 2719
// sRandom := true ;
2711: LD_ADDR_EXP 57
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 34 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 34
2726: EQUAL
2727: IFFALSE 2737
// sShield := true ;
2729: LD_ADDR_EXP 58
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 35 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 35
2744: EQUAL
2745: IFFALSE 2755
// sTime := true ;
2747: LD_ADDR_EXP 59
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 36 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 36
2762: EQUAL
2763: IFFALSE 2773
// sTools := true ;
2765: LD_ADDR_EXP 60
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 101 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 101
2780: EQUAL
2781: IFFALSE 2791
// sSold := true ;
2783: LD_ADDR_EXP 25
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 102 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 102
2798: EQUAL
2799: IFFALSE 2809
// sDiff := true ;
2801: LD_ADDR_EXP 26
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 103 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 103
2816: EQUAL
2817: IFFALSE 2827
// sFog := true ;
2819: LD_ADDR_EXP 29
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 104 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 104
2834: EQUAL
2835: IFFALSE 2845
// sReset := true ;
2837: LD_ADDR_EXP 30
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 105 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 105
2852: EQUAL
2853: IFFALSE 2863
// sSun := true ;
2855: LD_ADDR_EXP 31
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 106 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 106
2870: EQUAL
2871: IFFALSE 2881
// sTiger := true ;
2873: LD_ADDR_EXP 27
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 107 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 107
2888: EQUAL
2889: IFFALSE 2899
// sBomb := true ;
2891: LD_ADDR_EXP 28
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// if p3 = 108 then
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 108
2906: EQUAL
2907: IFFALSE 2917
// sWound := true ;
2909: LD_ADDR_EXP 36
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// if p3 = 109 then
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 109
2924: EQUAL
2925: IFFALSE 2935
// sBetray := true ;
2927: LD_ADDR_EXP 40
2931: PUSH
2932: LD_INT 1
2934: ST_TO_ADDR
// if p3 = 110 then
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 110
2942: EQUAL
2943: IFFALSE 2953
// sContamin := true ;
2945: LD_ADDR_EXP 41
2949: PUSH
2950: LD_INT 1
2952: ST_TO_ADDR
// if p3 = 111 then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_INT 111
2960: EQUAL
2961: IFFALSE 2971
// sOil := true ;
2963: LD_ADDR_EXP 43
2967: PUSH
2968: LD_INT 1
2970: ST_TO_ADDR
// if p3 = 112 then
2971: LD_VAR 0 3
2975: PUSH
2976: LD_INT 112
2978: EQUAL
2979: IFFALSE 2989
// sStu := true ;
2981: LD_ADDR_EXP 47
2985: PUSH
2986: LD_INT 1
2988: ST_TO_ADDR
// if p3 = 113 then
2989: LD_VAR 0 3
2993: PUSH
2994: LD_INT 113
2996: EQUAL
2997: IFFALSE 3007
// sBazooka := true ;
2999: LD_ADDR_EXP 50
3003: PUSH
3004: LD_INT 1
3006: ST_TO_ADDR
// if p3 = 114 then
3007: LD_VAR 0 3
3011: PUSH
3012: LD_INT 114
3014: EQUAL
3015: IFFALSE 3025
// sMortar := true ;
3017: LD_ADDR_EXP 51
3021: PUSH
3022: LD_INT 1
3024: ST_TO_ADDR
// if p3 = 115 then
3025: LD_VAR 0 3
3029: PUSH
3030: LD_INT 115
3032: EQUAL
3033: IFFALSE 3043
// sRanger := true ;
3035: LD_ADDR_EXP 61
3039: PUSH
3040: LD_INT 1
3042: ST_TO_ADDR
// if p3 = 116 then
3043: LD_VAR 0 3
3047: PUSH
3048: LD_INT 116
3050: EQUAL
3051: IFFALSE 3061
// sComputer := true ;
3053: LD_ADDR_EXP 62
3057: PUSH
3058: LD_INT 1
3060: ST_TO_ADDR
// if p3 = 117 then
3061: LD_VAR 0 3
3065: PUSH
3066: LD_INT 117
3068: EQUAL
3069: IFFALSE 3079
// s30 := true ;
3071: LD_ADDR_EXP 63
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// if p3 = 118 then
3079: LD_VAR 0 3
3083: PUSH
3084: LD_INT 118
3086: EQUAL
3087: IFFALSE 3097
// s60 := true ;
3089: LD_ADDR_EXP 64
3093: PUSH
3094: LD_INT 1
3096: ST_TO_ADDR
// end ; if p2 = hack_mode then
3097: LD_VAR 0 2
3101: PUSH
3102: LD_INT 101
3104: EQUAL
3105: IFFALSE 3233
// begin case p3 of 1 :
3107: LD_VAR 0 3
3111: PUSH
3112: LD_INT 1
3114: DOUBLE
3115: EQUAL
3116: IFTRUE 3120
3118: GO 3127
3120: POP
// hHackUnlimitedResources ; 2 :
3121: CALL 15404 0 0
3125: GO 3233
3127: LD_INT 2
3129: DOUBLE
3130: EQUAL
3131: IFTRUE 3135
3133: GO 3142
3135: POP
// hHackSetLevel10 ; 3 :
3136: CALL 15537 0 0
3140: GO 3233
3142: LD_INT 3
3144: DOUBLE
3145: EQUAL
3146: IFTRUE 3150
3148: GO 3157
3150: POP
// hHackSetLevel10YourUnits ; 4 :
3151: CALL 15622 0 0
3155: GO 3233
3157: LD_INT 4
3159: DOUBLE
3160: EQUAL
3161: IFTRUE 3165
3163: GO 3172
3165: POP
// hHackInvincible ; 5 :
3166: CALL 16070 0 0
3170: GO 3233
3172: LD_INT 5
3174: DOUBLE
3175: EQUAL
3176: IFTRUE 3180
3178: GO 3187
3180: POP
// hHackInvisible ; 6 :
3181: CALL 16181 0 0
3185: GO 3233
3187: LD_INT 6
3189: DOUBLE
3190: EQUAL
3191: IFTRUE 3195
3193: GO 3202
3195: POP
// hHackChangeYourSide ; 7 :
3196: CALL 16238 0 0
3200: GO 3233
3202: LD_INT 7
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3217
3210: POP
// hHackChangeUnitSide ; 8 :
3211: CALL 16280 0 0
3215: GO 3233
3217: LD_INT 8
3219: DOUBLE
3220: EQUAL
3221: IFTRUE 3225
3223: GO 3232
3225: POP
// hHackFog ; end ;
3226: CALL 16381 0 0
3230: GO 3233
3232: POP
// end ; if p2 = game_save_mode then
3233: LD_VAR 0 2
3237: PUSH
3238: LD_INT 102
3240: EQUAL
3241: IFFALSE 3306
// begin if p3 = 1 then
3243: LD_VAR 0 3
3247: PUSH
3248: LD_INT 1
3250: EQUAL
3251: IFFALSE 3263
// globalGameSaveCounter := p4 ;
3253: LD_ADDR_EXP 7
3257: PUSH
3258: LD_VAR 0 4
3262: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 2
3270: EQUAL
3271: PUSH
3272: LD_EXP 7
3276: AND
3277: IFFALSE 3296
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3279: LD_STRING setGameSaveCounter(
3281: PUSH
3282: LD_EXP 7
3286: STR
3287: PUSH
3288: LD_STRING )
3290: STR
3291: PPUSH
3292: CALL_OW 559
// display_strings := globalGameSaveCounter ;
3296: LD_ADDR_OWVAR 47
3300: PUSH
3301: LD_EXP 7
3305: ST_TO_ADDR
// end ; end ;
3306: LD_VAR 0 7
3310: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3311: GO 3313
3313: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3314: LD_STRING initStreamRollete();
3316: PPUSH
3317: CALL_OW 559
// InitStreamMode ;
3321: CALL 3333 0 0
// DefineStreamItems ( false ) ;
3325: LD_INT 0
3327: PPUSH
3328: CALL 3797 0 1
// end ;
3332: END
// function InitStreamMode ; begin
3333: LD_INT 0
3335: PPUSH
// streamModeActive := false ;
3336: LD_ADDR_EXP 8
3340: PUSH
3341: LD_INT 0
3343: ST_TO_ADDR
// normalCounter := 36 ;
3344: LD_ADDR_EXP 9
3348: PUSH
3349: LD_INT 36
3351: ST_TO_ADDR
// hardcoreCounter := 18 ;
3352: LD_ADDR_EXP 10
3356: PUSH
3357: LD_INT 18
3359: ST_TO_ADDR
// sRocket := false ;
3360: LD_ADDR_EXP 13
3364: PUSH
3365: LD_INT 0
3367: ST_TO_ADDR
// sSpeed := false ;
3368: LD_ADDR_EXP 12
3372: PUSH
3373: LD_INT 0
3375: ST_TO_ADDR
// sEngine := false ;
3376: LD_ADDR_EXP 14
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// sSpec := false ;
3384: LD_ADDR_EXP 11
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// sLevel := false ;
3392: LD_ADDR_EXP 15
3396: PUSH
3397: LD_INT 0
3399: ST_TO_ADDR
// sArmoury := false ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// sRadar := false ;
3408: LD_ADDR_EXP 17
3412: PUSH
3413: LD_INT 0
3415: ST_TO_ADDR
// sBunker := false ;
3416: LD_ADDR_EXP 18
3420: PUSH
3421: LD_INT 0
3423: ST_TO_ADDR
// sHack := false ;
3424: LD_ADDR_EXP 19
3428: PUSH
3429: LD_INT 0
3431: ST_TO_ADDR
// sFire := false ;
3432: LD_ADDR_EXP 20
3436: PUSH
3437: LD_INT 0
3439: ST_TO_ADDR
// sRefresh := false ;
3440: LD_ADDR_EXP 21
3444: PUSH
3445: LD_INT 0
3447: ST_TO_ADDR
// sExp := false ;
3448: LD_ADDR_EXP 22
3452: PUSH
3453: LD_INT 0
3455: ST_TO_ADDR
// sDepot := false ;
3456: LD_ADDR_EXP 23
3460: PUSH
3461: LD_INT 0
3463: ST_TO_ADDR
// sFlag := false ;
3464: LD_ADDR_EXP 24
3468: PUSH
3469: LD_INT 0
3471: ST_TO_ADDR
// sKamikadze := false ;
3472: LD_ADDR_EXP 32
3476: PUSH
3477: LD_INT 0
3479: ST_TO_ADDR
// sTroll := false ;
3480: LD_ADDR_EXP 33
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// sSlow := false ;
3488: LD_ADDR_EXP 34
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// sLack := false ;
3496: LD_ADDR_EXP 35
3500: PUSH
3501: LD_INT 0
3503: ST_TO_ADDR
// sTank := false ;
3504: LD_ADDR_EXP 37
3508: PUSH
3509: LD_INT 0
3511: ST_TO_ADDR
// sRemote := false ;
3512: LD_ADDR_EXP 38
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// sPowell := false ;
3520: LD_ADDR_EXP 39
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// sTeleport := false ;
3528: LD_ADDR_EXP 42
3532: PUSH
3533: LD_INT 0
3535: ST_TO_ADDR
// sOilTower := false ;
3536: LD_ADDR_EXP 44
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
// sShovel := false ;
3544: LD_ADDR_EXP 45
3548: PUSH
3549: LD_INT 0
3551: ST_TO_ADDR
// sSheik := false ;
3552: LD_ADDR_EXP 46
3556: PUSH
3557: LD_INT 0
3559: ST_TO_ADDR
// sEarthquake := false ;
3560: LD_ADDR_EXP 48
3564: PUSH
3565: LD_INT 0
3567: ST_TO_ADDR
// sAI := false ;
3568: LD_ADDR_EXP 49
3572: PUSH
3573: LD_INT 0
3575: ST_TO_ADDR
// sCargo := false ;
3576: LD_ADDR_EXP 52
3580: PUSH
3581: LD_INT 0
3583: ST_TO_ADDR
// sDLaser := false ;
3584: LD_ADDR_EXP 53
3588: PUSH
3589: LD_INT 0
3591: ST_TO_ADDR
// sExchange := false ;
3592: LD_ADDR_EXP 54
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// sFac := false ;
3600: LD_ADDR_EXP 55
3604: PUSH
3605: LD_INT 0
3607: ST_TO_ADDR
// sPower := false ;
3608: LD_ADDR_EXP 56
3612: PUSH
3613: LD_INT 0
3615: ST_TO_ADDR
// sRandom := false ;
3616: LD_ADDR_EXP 57
3620: PUSH
3621: LD_INT 0
3623: ST_TO_ADDR
// sShield := false ;
3624: LD_ADDR_EXP 58
3628: PUSH
3629: LD_INT 0
3631: ST_TO_ADDR
// sTime := false ;
3632: LD_ADDR_EXP 59
3636: PUSH
3637: LD_INT 0
3639: ST_TO_ADDR
// sTools := false ;
3640: LD_ADDR_EXP 60
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// sSold := false ;
3648: LD_ADDR_EXP 25
3652: PUSH
3653: LD_INT 0
3655: ST_TO_ADDR
// sDiff := false ;
3656: LD_ADDR_EXP 26
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// sFog := false ;
3664: LD_ADDR_EXP 29
3668: PUSH
3669: LD_INT 0
3671: ST_TO_ADDR
// sReset := false ;
3672: LD_ADDR_EXP 30
3676: PUSH
3677: LD_INT 0
3679: ST_TO_ADDR
// sSun := false ;
3680: LD_ADDR_EXP 31
3684: PUSH
3685: LD_INT 0
3687: ST_TO_ADDR
// sTiger := false ;
3688: LD_ADDR_EXP 27
3692: PUSH
3693: LD_INT 0
3695: ST_TO_ADDR
// sBomb := false ;
3696: LD_ADDR_EXP 28
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// sWound := false ;
3704: LD_ADDR_EXP 36
3708: PUSH
3709: LD_INT 0
3711: ST_TO_ADDR
// sBetray := false ;
3712: LD_ADDR_EXP 40
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// sContamin := false ;
3720: LD_ADDR_EXP 41
3724: PUSH
3725: LD_INT 0
3727: ST_TO_ADDR
// sOil := false ;
3728: LD_ADDR_EXP 43
3732: PUSH
3733: LD_INT 0
3735: ST_TO_ADDR
// sStu := false ;
3736: LD_ADDR_EXP 47
3740: PUSH
3741: LD_INT 0
3743: ST_TO_ADDR
// sBazooka := false ;
3744: LD_ADDR_EXP 50
3748: PUSH
3749: LD_INT 0
3751: ST_TO_ADDR
// sMortar := false ;
3752: LD_ADDR_EXP 51
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// sRanger := false ;
3760: LD_ADDR_EXP 61
3764: PUSH
3765: LD_INT 0
3767: ST_TO_ADDR
// sComputer := false ;
3768: LD_ADDR_EXP 62
3772: PUSH
3773: LD_INT 0
3775: ST_TO_ADDR
// s30 := false ;
3776: LD_ADDR_EXP 63
3780: PUSH
3781: LD_INT 0
3783: ST_TO_ADDR
// s60 := false ;
3784: LD_ADDR_EXP 64
3788: PUSH
3789: LD_INT 0
3791: ST_TO_ADDR
// end ;
3792: LD_VAR 0 1
3796: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3797: LD_INT 0
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// result := [ ] ;
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: EMPTY
3812: ST_TO_ADDR
// if campaign_id = 1 then
3813: LD_OWVAR 69
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: IFFALSE 6987
// begin case mission_number of 1 :
3823: LD_OWVAR 70
3827: PUSH
3828: LD_INT 1
3830: DOUBLE
3831: EQUAL
3832: IFTRUE 3836
3834: GO 3912
3836: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 4
3847: PUSH
3848: LD_INT 11
3850: PUSH
3851: LD_INT 12
3853: PUSH
3854: LD_INT 15
3856: PUSH
3857: LD_INT 16
3859: PUSH
3860: LD_INT 22
3862: PUSH
3863: LD_INT 23
3865: PUSH
3866: LD_INT 26
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 101
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 106
3888: PUSH
3889: LD_INT 116
3891: PUSH
3892: LD_INT 117
3894: PUSH
3895: LD_INT 118
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: ST_TO_ADDR
3910: GO 6985
3912: LD_INT 2
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 4004
3920: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: LD_INT 11
3934: PUSH
3935: LD_INT 12
3937: PUSH
3938: LD_INT 15
3940: PUSH
3941: LD_INT 16
3943: PUSH
3944: LD_INT 22
3946: PUSH
3947: LD_INT 23
3949: PUSH
3950: LD_INT 26
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 101
3966: PUSH
3967: LD_INT 102
3969: PUSH
3970: LD_INT 105
3972: PUSH
3973: LD_INT 106
3975: PUSH
3976: LD_INT 108
3978: PUSH
3979: LD_INT 116
3981: PUSH
3982: LD_INT 117
3984: PUSH
3985: LD_INT 118
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: ST_TO_ADDR
4002: GO 6985
4004: LD_INT 3
4006: DOUBLE
4007: EQUAL
4008: IFTRUE 4012
4010: GO 4100
4012: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: LD_INT 4
4023: PUSH
4024: LD_INT 5
4026: PUSH
4027: LD_INT 11
4029: PUSH
4030: LD_INT 12
4032: PUSH
4033: LD_INT 15
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 22
4041: PUSH
4042: LD_INT 26
4044: PUSH
4045: LD_INT 36
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 101
4062: PUSH
4063: LD_INT 102
4065: PUSH
4066: LD_INT 105
4068: PUSH
4069: LD_INT 106
4071: PUSH
4072: LD_INT 108
4074: PUSH
4075: LD_INT 116
4077: PUSH
4078: LD_INT 117
4080: PUSH
4081: LD_INT 118
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: ST_TO_ADDR
4098: GO 6985
4100: LD_INT 4
4102: DOUBLE
4103: EQUAL
4104: IFTRUE 4108
4106: GO 4204
4108: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 4
4119: PUSH
4120: LD_INT 5
4122: PUSH
4123: LD_INT 8
4125: PUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 12
4131: PUSH
4132: LD_INT 15
4134: PUSH
4135: LD_INT 16
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 23
4143: PUSH
4144: LD_INT 26
4146: PUSH
4147: LD_INT 36
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 101
4166: PUSH
4167: LD_INT 102
4169: PUSH
4170: LD_INT 105
4172: PUSH
4173: LD_INT 106
4175: PUSH
4176: LD_INT 108
4178: PUSH
4179: LD_INT 116
4181: PUSH
4182: LD_INT 117
4184: PUSH
4185: LD_INT 118
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: ST_TO_ADDR
4202: GO 6985
4204: LD_INT 5
4206: DOUBLE
4207: EQUAL
4208: IFTRUE 4212
4210: GO 4324
4212: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4213: LD_ADDR_VAR 0 2
4217: PUSH
4218: LD_INT 2
4220: PUSH
4221: LD_INT 4
4223: PUSH
4224: LD_INT 5
4226: PUSH
4227: LD_INT 6
4229: PUSH
4230: LD_INT 8
4232: PUSH
4233: LD_INT 11
4235: PUSH
4236: LD_INT 12
4238: PUSH
4239: LD_INT 15
4241: PUSH
4242: LD_INT 16
4244: PUSH
4245: LD_INT 22
4247: PUSH
4248: LD_INT 23
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 26
4256: PUSH
4257: LD_INT 36
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 101
4278: PUSH
4279: LD_INT 102
4281: PUSH
4282: LD_INT 105
4284: PUSH
4285: LD_INT 106
4287: PUSH
4288: LD_INT 108
4290: PUSH
4291: LD_INT 109
4293: PUSH
4294: LD_INT 112
4296: PUSH
4297: LD_INT 116
4299: PUSH
4300: LD_INT 117
4302: PUSH
4303: LD_INT 118
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: ST_TO_ADDR
4322: GO 6985
4324: LD_INT 6
4326: DOUBLE
4327: EQUAL
4328: IFTRUE 4332
4330: GO 4464
4332: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: LD_INT 2
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 5
4346: PUSH
4347: LD_INT 6
4349: PUSH
4350: LD_INT 8
4352: PUSH
4353: LD_INT 11
4355: PUSH
4356: LD_INT 12
4358: PUSH
4359: LD_INT 15
4361: PUSH
4362: LD_INT 16
4364: PUSH
4365: LD_INT 20
4367: PUSH
4368: LD_INT 21
4370: PUSH
4371: LD_INT 22
4373: PUSH
4374: LD_INT 23
4376: PUSH
4377: LD_INT 25
4379: PUSH
4380: LD_INT 26
4382: PUSH
4383: LD_INT 30
4385: PUSH
4386: LD_INT 31
4388: PUSH
4389: LD_INT 32
4391: PUSH
4392: LD_INT 36
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 101
4418: PUSH
4419: LD_INT 102
4421: PUSH
4422: LD_INT 105
4424: PUSH
4425: LD_INT 106
4427: PUSH
4428: LD_INT 108
4430: PUSH
4431: LD_INT 109
4433: PUSH
4434: LD_INT 112
4436: PUSH
4437: LD_INT 116
4439: PUSH
4440: LD_INT 117
4442: PUSH
4443: LD_INT 118
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: ST_TO_ADDR
4462: GO 6985
4464: LD_INT 7
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4584
4472: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 5
4486: PUSH
4487: LD_INT 7
4489: PUSH
4490: LD_INT 11
4492: PUSH
4493: LD_INT 12
4495: PUSH
4496: LD_INT 15
4498: PUSH
4499: LD_INT 16
4501: PUSH
4502: LD_INT 20
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 23
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 26
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 101
4538: PUSH
4539: LD_INT 102
4541: PUSH
4542: LD_INT 103
4544: PUSH
4545: LD_INT 105
4547: PUSH
4548: LD_INT 106
4550: PUSH
4551: LD_INT 108
4553: PUSH
4554: LD_INT 112
4556: PUSH
4557: LD_INT 116
4559: PUSH
4560: LD_INT 117
4562: PUSH
4563: LD_INT 118
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: ST_TO_ADDR
4582: GO 6985
4584: LD_INT 8
4586: DOUBLE
4587: EQUAL
4588: IFTRUE 4592
4590: GO 4732
4592: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4593: LD_ADDR_VAR 0 2
4597: PUSH
4598: LD_INT 2
4600: PUSH
4601: LD_INT 4
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: LD_INT 6
4609: PUSH
4610: LD_INT 7
4612: PUSH
4613: LD_INT 8
4615: PUSH
4616: LD_INT 11
4618: PUSH
4619: LD_INT 12
4621: PUSH
4622: LD_INT 15
4624: PUSH
4625: LD_INT 16
4627: PUSH
4628: LD_INT 20
4630: PUSH
4631: LD_INT 21
4633: PUSH
4634: LD_INT 22
4636: PUSH
4637: LD_INT 23
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 26
4645: PUSH
4646: LD_INT 30
4648: PUSH
4649: LD_INT 31
4651: PUSH
4652: LD_INT 32
4654: PUSH
4655: LD_INT 36
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 101
4682: PUSH
4683: LD_INT 102
4685: PUSH
4686: LD_INT 103
4688: PUSH
4689: LD_INT 105
4691: PUSH
4692: LD_INT 106
4694: PUSH
4695: LD_INT 108
4697: PUSH
4698: LD_INT 109
4700: PUSH
4701: LD_INT 112
4703: PUSH
4704: LD_INT 116
4706: PUSH
4707: LD_INT 117
4709: PUSH
4710: LD_INT 118
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: ST_TO_ADDR
4730: GO 6985
4732: LD_INT 9
4734: DOUBLE
4735: EQUAL
4736: IFTRUE 4740
4738: GO 4888
4740: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: LD_INT 4
4751: PUSH
4752: LD_INT 5
4754: PUSH
4755: LD_INT 6
4757: PUSH
4758: LD_INT 7
4760: PUSH
4761: LD_INT 8
4763: PUSH
4764: LD_INT 11
4766: PUSH
4767: LD_INT 12
4769: PUSH
4770: LD_INT 15
4772: PUSH
4773: LD_INT 16
4775: PUSH
4776: LD_INT 20
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 23
4787: PUSH
4788: LD_INT 25
4790: PUSH
4791: LD_INT 26
4793: PUSH
4794: LD_INT 28
4796: PUSH
4797: LD_INT 30
4799: PUSH
4800: LD_INT 31
4802: PUSH
4803: LD_INT 32
4805: PUSH
4806: LD_INT 36
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 101
4834: PUSH
4835: LD_INT 102
4837: PUSH
4838: LD_INT 103
4840: PUSH
4841: LD_INT 105
4843: PUSH
4844: LD_INT 106
4846: PUSH
4847: LD_INT 108
4849: PUSH
4850: LD_INT 109
4852: PUSH
4853: LD_INT 112
4855: PUSH
4856: LD_INT 114
4858: PUSH
4859: LD_INT 116
4861: PUSH
4862: LD_INT 117
4864: PUSH
4865: LD_INT 118
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 6985
4888: LD_INT 10
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 5092
4896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: LD_INT 2
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 5
4910: PUSH
4911: LD_INT 6
4913: PUSH
4914: LD_INT 7
4916: PUSH
4917: LD_INT 8
4919: PUSH
4920: LD_INT 9
4922: PUSH
4923: LD_INT 10
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 12
4931: PUSH
4932: LD_INT 13
4934: PUSH
4935: LD_INT 14
4937: PUSH
4938: LD_INT 15
4940: PUSH
4941: LD_INT 16
4943: PUSH
4944: LD_INT 17
4946: PUSH
4947: LD_INT 18
4949: PUSH
4950: LD_INT 19
4952: PUSH
4953: LD_INT 20
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 22
4961: PUSH
4962: LD_INT 23
4964: PUSH
4965: LD_INT 24
4967: PUSH
4968: LD_INT 25
4970: PUSH
4971: LD_INT 26
4973: PUSH
4974: LD_INT 28
4976: PUSH
4977: LD_INT 30
4979: PUSH
4980: LD_INT 31
4982: PUSH
4983: LD_INT 32
4985: PUSH
4986: LD_INT 36
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 101
5022: PUSH
5023: LD_INT 102
5025: PUSH
5026: LD_INT 103
5028: PUSH
5029: LD_INT 104
5031: PUSH
5032: LD_INT 105
5034: PUSH
5035: LD_INT 106
5037: PUSH
5038: LD_INT 107
5040: PUSH
5041: LD_INT 108
5043: PUSH
5044: LD_INT 109
5046: PUSH
5047: LD_INT 110
5049: PUSH
5050: LD_INT 111
5052: PUSH
5053: LD_INT 112
5055: PUSH
5056: LD_INT 114
5058: PUSH
5059: LD_INT 116
5061: PUSH
5062: LD_INT 117
5064: PUSH
5065: LD_INT 118
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: ST_TO_ADDR
5090: GO 6985
5092: LD_INT 11
5094: DOUBLE
5095: EQUAL
5096: IFTRUE 5100
5098: GO 5304
5100: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5101: LD_ADDR_VAR 0 2
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: LD_INT 3
5111: PUSH
5112: LD_INT 4
5114: PUSH
5115: LD_INT 5
5117: PUSH
5118: LD_INT 6
5120: PUSH
5121: LD_INT 7
5123: PUSH
5124: LD_INT 8
5126: PUSH
5127: LD_INT 9
5129: PUSH
5130: LD_INT 10
5132: PUSH
5133: LD_INT 11
5135: PUSH
5136: LD_INT 12
5138: PUSH
5139: LD_INT 13
5141: PUSH
5142: LD_INT 14
5144: PUSH
5145: LD_INT 15
5147: PUSH
5148: LD_INT 16
5150: PUSH
5151: LD_INT 17
5153: PUSH
5154: LD_INT 18
5156: PUSH
5157: LD_INT 19
5159: PUSH
5160: LD_INT 20
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 22
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 24
5174: PUSH
5175: LD_INT 25
5177: PUSH
5178: LD_INT 26
5180: PUSH
5181: LD_INT 28
5183: PUSH
5184: LD_INT 30
5186: PUSH
5187: LD_INT 31
5189: PUSH
5190: LD_INT 32
5192: PUSH
5193: LD_INT 34
5195: PUSH
5196: LD_INT 36
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 101
5234: PUSH
5235: LD_INT 102
5237: PUSH
5238: LD_INT 103
5240: PUSH
5241: LD_INT 104
5243: PUSH
5244: LD_INT 105
5246: PUSH
5247: LD_INT 106
5249: PUSH
5250: LD_INT 107
5252: PUSH
5253: LD_INT 108
5255: PUSH
5256: LD_INT 109
5258: PUSH
5259: LD_INT 110
5261: PUSH
5262: LD_INT 111
5264: PUSH
5265: LD_INT 112
5267: PUSH
5268: LD_INT 114
5270: PUSH
5271: LD_INT 116
5273: PUSH
5274: LD_INT 117
5276: PUSH
5277: LD_INT 118
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 6985
5304: LD_INT 12
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5532
5312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5313: LD_ADDR_VAR 0 2
5317: PUSH
5318: LD_INT 1
5320: PUSH
5321: LD_INT 2
5323: PUSH
5324: LD_INT 3
5326: PUSH
5327: LD_INT 4
5329: PUSH
5330: LD_INT 5
5332: PUSH
5333: LD_INT 6
5335: PUSH
5336: LD_INT 7
5338: PUSH
5339: LD_INT 8
5341: PUSH
5342: LD_INT 9
5344: PUSH
5345: LD_INT 10
5347: PUSH
5348: LD_INT 11
5350: PUSH
5351: LD_INT 12
5353: PUSH
5354: LD_INT 13
5356: PUSH
5357: LD_INT 14
5359: PUSH
5360: LD_INT 15
5362: PUSH
5363: LD_INT 16
5365: PUSH
5366: LD_INT 17
5368: PUSH
5369: LD_INT 18
5371: PUSH
5372: LD_INT 19
5374: PUSH
5375: LD_INT 20
5377: PUSH
5378: LD_INT 21
5380: PUSH
5381: LD_INT 22
5383: PUSH
5384: LD_INT 23
5386: PUSH
5387: LD_INT 24
5389: PUSH
5390: LD_INT 25
5392: PUSH
5393: LD_INT 26
5395: PUSH
5396: LD_INT 27
5398: PUSH
5399: LD_INT 28
5401: PUSH
5402: LD_INT 30
5404: PUSH
5405: LD_INT 31
5407: PUSH
5408: LD_INT 32
5410: PUSH
5411: LD_INT 33
5413: PUSH
5414: LD_INT 34
5416: PUSH
5417: LD_INT 36
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 101
5458: PUSH
5459: LD_INT 102
5461: PUSH
5462: LD_INT 103
5464: PUSH
5465: LD_INT 104
5467: PUSH
5468: LD_INT 105
5470: PUSH
5471: LD_INT 106
5473: PUSH
5474: LD_INT 107
5476: PUSH
5477: LD_INT 108
5479: PUSH
5480: LD_INT 109
5482: PUSH
5483: LD_INT 110
5485: PUSH
5486: LD_INT 111
5488: PUSH
5489: LD_INT 112
5491: PUSH
5492: LD_INT 113
5494: PUSH
5495: LD_INT 114
5497: PUSH
5498: LD_INT 116
5500: PUSH
5501: LD_INT 117
5503: PUSH
5504: LD_INT 118
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: ST_TO_ADDR
5530: GO 6985
5532: LD_INT 13
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5748
5540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 5
5560: PUSH
5561: LD_INT 8
5563: PUSH
5564: LD_INT 9
5566: PUSH
5567: LD_INT 10
5569: PUSH
5570: LD_INT 11
5572: PUSH
5573: LD_INT 12
5575: PUSH
5576: LD_INT 14
5578: PUSH
5579: LD_INT 15
5581: PUSH
5582: LD_INT 16
5584: PUSH
5585: LD_INT 17
5587: PUSH
5588: LD_INT 18
5590: PUSH
5591: LD_INT 19
5593: PUSH
5594: LD_INT 20
5596: PUSH
5597: LD_INT 21
5599: PUSH
5600: LD_INT 22
5602: PUSH
5603: LD_INT 23
5605: PUSH
5606: LD_INT 24
5608: PUSH
5609: LD_INT 25
5611: PUSH
5612: LD_INT 26
5614: PUSH
5615: LD_INT 27
5617: PUSH
5618: LD_INT 28
5620: PUSH
5621: LD_INT 30
5623: PUSH
5624: LD_INT 31
5626: PUSH
5627: LD_INT 32
5629: PUSH
5630: LD_INT 33
5632: PUSH
5633: LD_INT 34
5635: PUSH
5636: LD_INT 36
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 101
5674: PUSH
5675: LD_INT 102
5677: PUSH
5678: LD_INT 103
5680: PUSH
5681: LD_INT 104
5683: PUSH
5684: LD_INT 105
5686: PUSH
5687: LD_INT 106
5689: PUSH
5690: LD_INT 107
5692: PUSH
5693: LD_INT 108
5695: PUSH
5696: LD_INT 109
5698: PUSH
5699: LD_INT 110
5701: PUSH
5702: LD_INT 111
5704: PUSH
5705: LD_INT 112
5707: PUSH
5708: LD_INT 113
5710: PUSH
5711: LD_INT 114
5713: PUSH
5714: LD_INT 116
5716: PUSH
5717: LD_INT 117
5719: PUSH
5720: LD_INT 118
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: ST_TO_ADDR
5746: GO 6985
5748: LD_INT 14
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5980
5756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: LD_INT 1
5764: PUSH
5765: LD_INT 2
5767: PUSH
5768: LD_INT 3
5770: PUSH
5771: LD_INT 4
5773: PUSH
5774: LD_INT 5
5776: PUSH
5777: LD_INT 6
5779: PUSH
5780: LD_INT 7
5782: PUSH
5783: LD_INT 8
5785: PUSH
5786: LD_INT 9
5788: PUSH
5789: LD_INT 10
5791: PUSH
5792: LD_INT 11
5794: PUSH
5795: LD_INT 12
5797: PUSH
5798: LD_INT 13
5800: PUSH
5801: LD_INT 14
5803: PUSH
5804: LD_INT 15
5806: PUSH
5807: LD_INT 16
5809: PUSH
5810: LD_INT 17
5812: PUSH
5813: LD_INT 18
5815: PUSH
5816: LD_INT 19
5818: PUSH
5819: LD_INT 20
5821: PUSH
5822: LD_INT 21
5824: PUSH
5825: LD_INT 22
5827: PUSH
5828: LD_INT 23
5830: PUSH
5831: LD_INT 24
5833: PUSH
5834: LD_INT 25
5836: PUSH
5837: LD_INT 26
5839: PUSH
5840: LD_INT 27
5842: PUSH
5843: LD_INT 28
5845: PUSH
5846: LD_INT 29
5848: PUSH
5849: LD_INT 30
5851: PUSH
5852: LD_INT 31
5854: PUSH
5855: LD_INT 32
5857: PUSH
5858: LD_INT 33
5860: PUSH
5861: LD_INT 34
5863: PUSH
5864: LD_INT 36
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 101
5906: PUSH
5907: LD_INT 102
5909: PUSH
5910: LD_INT 103
5912: PUSH
5913: LD_INT 104
5915: PUSH
5916: LD_INT 105
5918: PUSH
5919: LD_INT 106
5921: PUSH
5922: LD_INT 107
5924: PUSH
5925: LD_INT 108
5927: PUSH
5928: LD_INT 109
5930: PUSH
5931: LD_INT 110
5933: PUSH
5934: LD_INT 111
5936: PUSH
5937: LD_INT 112
5939: PUSH
5940: LD_INT 113
5942: PUSH
5943: LD_INT 114
5945: PUSH
5946: LD_INT 116
5948: PUSH
5949: LD_INT 117
5951: PUSH
5952: LD_INT 118
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: ST_TO_ADDR
5978: GO 6985
5980: LD_INT 15
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 6212
5988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: LD_INT 2
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 5
6008: PUSH
6009: LD_INT 6
6011: PUSH
6012: LD_INT 7
6014: PUSH
6015: LD_INT 8
6017: PUSH
6018: LD_INT 9
6020: PUSH
6021: LD_INT 10
6023: PUSH
6024: LD_INT 11
6026: PUSH
6027: LD_INT 12
6029: PUSH
6030: LD_INT 13
6032: PUSH
6033: LD_INT 14
6035: PUSH
6036: LD_INT 15
6038: PUSH
6039: LD_INT 16
6041: PUSH
6042: LD_INT 17
6044: PUSH
6045: LD_INT 18
6047: PUSH
6048: LD_INT 19
6050: PUSH
6051: LD_INT 20
6053: PUSH
6054: LD_INT 21
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 23
6062: PUSH
6063: LD_INT 24
6065: PUSH
6066: LD_INT 25
6068: PUSH
6069: LD_INT 26
6071: PUSH
6072: LD_INT 27
6074: PUSH
6075: LD_INT 28
6077: PUSH
6078: LD_INT 29
6080: PUSH
6081: LD_INT 30
6083: PUSH
6084: LD_INT 31
6086: PUSH
6087: LD_INT 32
6089: PUSH
6090: LD_INT 33
6092: PUSH
6093: LD_INT 34
6095: PUSH
6096: LD_INT 36
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 101
6138: PUSH
6139: LD_INT 102
6141: PUSH
6142: LD_INT 103
6144: PUSH
6145: LD_INT 104
6147: PUSH
6148: LD_INT 105
6150: PUSH
6151: LD_INT 106
6153: PUSH
6154: LD_INT 107
6156: PUSH
6157: LD_INT 108
6159: PUSH
6160: LD_INT 109
6162: PUSH
6163: LD_INT 110
6165: PUSH
6166: LD_INT 111
6168: PUSH
6169: LD_INT 112
6171: PUSH
6172: LD_INT 113
6174: PUSH
6175: LD_INT 114
6177: PUSH
6178: LD_INT 116
6180: PUSH
6181: LD_INT 117
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: ST_TO_ADDR
6210: GO 6985
6212: LD_INT 16
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6356
6220: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6221: LD_ADDR_VAR 0 2
6225: PUSH
6226: LD_INT 2
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: LD_INT 7
6237: PUSH
6238: LD_INT 11
6240: PUSH
6241: LD_INT 12
6243: PUSH
6244: LD_INT 15
6246: PUSH
6247: LD_INT 16
6249: PUSH
6250: LD_INT 20
6252: PUSH
6253: LD_INT 21
6255: PUSH
6256: LD_INT 22
6258: PUSH
6259: LD_INT 23
6261: PUSH
6262: LD_INT 25
6264: PUSH
6265: LD_INT 26
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: LD_INT 32
6276: PUSH
6277: LD_INT 33
6279: PUSH
6280: LD_INT 34
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 101
6306: PUSH
6307: LD_INT 102
6309: PUSH
6310: LD_INT 103
6312: PUSH
6313: LD_INT 106
6315: PUSH
6316: LD_INT 108
6318: PUSH
6319: LD_INT 112
6321: PUSH
6322: LD_INT 113
6324: PUSH
6325: LD_INT 114
6327: PUSH
6328: LD_INT 116
6330: PUSH
6331: LD_INT 117
6333: PUSH
6334: LD_INT 118
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: ST_TO_ADDR
6354: GO 6985
6356: LD_INT 17
6358: DOUBLE
6359: EQUAL
6360: IFTRUE 6364
6362: GO 6588
6364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6365: LD_ADDR_VAR 0 2
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: LD_INT 3
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 5
6384: PUSH
6385: LD_INT 6
6387: PUSH
6388: LD_INT 7
6390: PUSH
6391: LD_INT 8
6393: PUSH
6394: LD_INT 9
6396: PUSH
6397: LD_INT 10
6399: PUSH
6400: LD_INT 11
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: LD_INT 13
6408: PUSH
6409: LD_INT 14
6411: PUSH
6412: LD_INT 15
6414: PUSH
6415: LD_INT 16
6417: PUSH
6418: LD_INT 17
6420: PUSH
6421: LD_INT 18
6423: PUSH
6424: LD_INT 19
6426: PUSH
6427: LD_INT 20
6429: PUSH
6430: LD_INT 21
6432: PUSH
6433: LD_INT 22
6435: PUSH
6436: LD_INT 23
6438: PUSH
6439: LD_INT 24
6441: PUSH
6442: LD_INT 25
6444: PUSH
6445: LD_INT 26
6447: PUSH
6448: LD_INT 27
6450: PUSH
6451: LD_INT 28
6453: PUSH
6454: LD_INT 29
6456: PUSH
6457: LD_INT 30
6459: PUSH
6460: LD_INT 31
6462: PUSH
6463: LD_INT 32
6465: PUSH
6466: LD_INT 33
6468: PUSH
6469: LD_INT 34
6471: PUSH
6472: LD_INT 36
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: PUSH
6512: LD_INT 101
6514: PUSH
6515: LD_INT 102
6517: PUSH
6518: LD_INT 103
6520: PUSH
6521: LD_INT 104
6523: PUSH
6524: LD_INT 105
6526: PUSH
6527: LD_INT 106
6529: PUSH
6530: LD_INT 107
6532: PUSH
6533: LD_INT 108
6535: PUSH
6536: LD_INT 109
6538: PUSH
6539: LD_INT 110
6541: PUSH
6542: LD_INT 111
6544: PUSH
6545: LD_INT 112
6547: PUSH
6548: LD_INT 113
6550: PUSH
6551: LD_INT 114
6553: PUSH
6554: LD_INT 116
6556: PUSH
6557: LD_INT 117
6559: PUSH
6560: LD_INT 118
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 6985
6588: LD_INT 18
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6744
6596: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6597: LD_ADDR_VAR 0 2
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: LD_INT 7
6613: PUSH
6614: LD_INT 11
6616: PUSH
6617: LD_INT 12
6619: PUSH
6620: LD_INT 15
6622: PUSH
6623: LD_INT 16
6625: PUSH
6626: LD_INT 20
6628: PUSH
6629: LD_INT 21
6631: PUSH
6632: LD_INT 22
6634: PUSH
6635: LD_INT 23
6637: PUSH
6638: LD_INT 25
6640: PUSH
6641: LD_INT 26
6643: PUSH
6644: LD_INT 30
6646: PUSH
6647: LD_INT 31
6649: PUSH
6650: LD_INT 32
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 34
6658: PUSH
6659: LD_INT 35
6661: PUSH
6662: LD_INT 36
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 101
6690: PUSH
6691: LD_INT 102
6693: PUSH
6694: LD_INT 103
6696: PUSH
6697: LD_INT 106
6699: PUSH
6700: LD_INT 108
6702: PUSH
6703: LD_INT 112
6705: PUSH
6706: LD_INT 113
6708: PUSH
6709: LD_INT 114
6711: PUSH
6712: LD_INT 115
6714: PUSH
6715: LD_INT 116
6717: PUSH
6718: LD_INT 117
6720: PUSH
6721: LD_INT 118
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 6985
6744: LD_INT 19
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6984
6752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6753: LD_ADDR_VAR 0 2
6757: PUSH
6758: LD_INT 1
6760: PUSH
6761: LD_INT 2
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: LD_INT 4
6769: PUSH
6770: LD_INT 5
6772: PUSH
6773: LD_INT 6
6775: PUSH
6776: LD_INT 7
6778: PUSH
6779: LD_INT 8
6781: PUSH
6782: LD_INT 9
6784: PUSH
6785: LD_INT 10
6787: PUSH
6788: LD_INT 11
6790: PUSH
6791: LD_INT 12
6793: PUSH
6794: LD_INT 13
6796: PUSH
6797: LD_INT 14
6799: PUSH
6800: LD_INT 15
6802: PUSH
6803: LD_INT 16
6805: PUSH
6806: LD_INT 17
6808: PUSH
6809: LD_INT 18
6811: PUSH
6812: LD_INT 19
6814: PUSH
6815: LD_INT 20
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 24
6829: PUSH
6830: LD_INT 25
6832: PUSH
6833: LD_INT 26
6835: PUSH
6836: LD_INT 27
6838: PUSH
6839: LD_INT 28
6841: PUSH
6842: LD_INT 29
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 31
6850: PUSH
6851: LD_INT 32
6853: PUSH
6854: LD_INT 33
6856: PUSH
6857: LD_INT 34
6859: PUSH
6860: LD_INT 35
6862: PUSH
6863: LD_INT 36
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 101
6906: PUSH
6907: LD_INT 102
6909: PUSH
6910: LD_INT 103
6912: PUSH
6913: LD_INT 104
6915: PUSH
6916: LD_INT 105
6918: PUSH
6919: LD_INT 106
6921: PUSH
6922: LD_INT 107
6924: PUSH
6925: LD_INT 108
6927: PUSH
6928: LD_INT 109
6930: PUSH
6931: LD_INT 110
6933: PUSH
6934: LD_INT 111
6936: PUSH
6937: LD_INT 112
6939: PUSH
6940: LD_INT 113
6942: PUSH
6943: LD_INT 114
6945: PUSH
6946: LD_INT 115
6948: PUSH
6949: LD_INT 116
6951: PUSH
6952: LD_INT 117
6954: PUSH
6955: LD_INT 118
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: ST_TO_ADDR
6982: GO 6985
6984: POP
// end else
6985: GO 7216
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6987: LD_ADDR_VAR 0 2
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: LD_INT 2
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: LD_INT 4
7003: PUSH
7004: LD_INT 5
7006: PUSH
7007: LD_INT 6
7009: PUSH
7010: LD_INT 7
7012: PUSH
7013: LD_INT 8
7015: PUSH
7016: LD_INT 9
7018: PUSH
7019: LD_INT 10
7021: PUSH
7022: LD_INT 11
7024: PUSH
7025: LD_INT 12
7027: PUSH
7028: LD_INT 13
7030: PUSH
7031: LD_INT 14
7033: PUSH
7034: LD_INT 15
7036: PUSH
7037: LD_INT 16
7039: PUSH
7040: LD_INT 17
7042: PUSH
7043: LD_INT 18
7045: PUSH
7046: LD_INT 19
7048: PUSH
7049: LD_INT 20
7051: PUSH
7052: LD_INT 21
7054: PUSH
7055: LD_INT 22
7057: PUSH
7058: LD_INT 23
7060: PUSH
7061: LD_INT 24
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 26
7069: PUSH
7070: LD_INT 27
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: LD_INT 29
7078: PUSH
7079: LD_INT 30
7081: PUSH
7082: LD_INT 31
7084: PUSH
7085: LD_INT 32
7087: PUSH
7088: LD_INT 33
7090: PUSH
7091: LD_INT 34
7093: PUSH
7094: LD_INT 35
7096: PUSH
7097: LD_INT 36
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 101
7140: PUSH
7141: LD_INT 102
7143: PUSH
7144: LD_INT 103
7146: PUSH
7147: LD_INT 104
7149: PUSH
7150: LD_INT 105
7152: PUSH
7153: LD_INT 106
7155: PUSH
7156: LD_INT 107
7158: PUSH
7159: LD_INT 108
7161: PUSH
7162: LD_INT 109
7164: PUSH
7165: LD_INT 110
7167: PUSH
7168: LD_INT 111
7170: PUSH
7171: LD_INT 112
7173: PUSH
7174: LD_INT 113
7176: PUSH
7177: LD_INT 114
7179: PUSH
7180: LD_INT 115
7182: PUSH
7183: LD_INT 116
7185: PUSH
7186: LD_INT 117
7188: PUSH
7189: LD_INT 118
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: ST_TO_ADDR
// if result then
7216: LD_VAR 0 2
7220: IFFALSE 8006
// begin normal :=  ;
7222: LD_ADDR_VAR 0 5
7226: PUSH
7227: LD_STRING 
7229: ST_TO_ADDR
// hardcore :=  ;
7230: LD_ADDR_VAR 0 6
7234: PUSH
7235: LD_STRING 
7237: ST_TO_ADDR
// active :=  ;
7238: LD_ADDR_VAR 0 7
7242: PUSH
7243: LD_STRING 
7245: ST_TO_ADDR
// for i = 1 to normalCounter do
7246: LD_ADDR_VAR 0 8
7250: PUSH
7251: DOUBLE
7252: LD_INT 1
7254: DEC
7255: ST_TO_ADDR
7256: LD_EXP 9
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7363
// begin tmp := 0 ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_STRING 0
7271: ST_TO_ADDR
// if result [ 1 ] then
7272: LD_VAR 0 2
7276: PUSH
7277: LD_INT 1
7279: ARRAY
7280: IFFALSE 7345
// if result [ 1 ] [ 1 ] = i then
7282: LD_VAR 0 2
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PUSH
7291: LD_INT 1
7293: ARRAY
7294: PUSH
7295: LD_VAR 0 8
7299: EQUAL
7300: IFFALSE 7345
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_VAR 0 2
7311: PPUSH
7312: LD_INT 1
7314: PPUSH
7315: LD_VAR 0 2
7319: PUSH
7320: LD_INT 1
7322: ARRAY
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 3
7331: PPUSH
7332: CALL_OW 1
7336: ST_TO_ADDR
// tmp := 1 ;
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_STRING 1
7344: ST_TO_ADDR
// end ; normal := normal & tmp ;
7345: LD_ADDR_VAR 0 5
7349: PUSH
7350: LD_VAR 0 5
7354: PUSH
7355: LD_VAR 0 3
7359: STR
7360: ST_TO_ADDR
// end ;
7361: GO 7261
7363: POP
7364: POP
// for i = 1 to hardcoreCounter do
7365: LD_ADDR_VAR 0 8
7369: PUSH
7370: DOUBLE
7371: LD_INT 1
7373: DEC
7374: ST_TO_ADDR
7375: LD_EXP 10
7379: PUSH
7380: FOR_TO
7381: IFFALSE 7486
// begin tmp := 0 ;
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_STRING 0
7390: ST_TO_ADDR
// if result [ 2 ] then
7391: LD_VAR 0 2
7395: PUSH
7396: LD_INT 2
7398: ARRAY
7399: IFFALSE 7468
// if result [ 2 ] [ 1 ] = 100 + i then
7401: LD_VAR 0 2
7405: PUSH
7406: LD_INT 2
7408: ARRAY
7409: PUSH
7410: LD_INT 1
7412: ARRAY
7413: PUSH
7414: LD_INT 100
7416: PUSH
7417: LD_VAR 0 8
7421: PLUS
7422: EQUAL
7423: IFFALSE 7468
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7425: LD_ADDR_VAR 0 2
7429: PUSH
7430: LD_VAR 0 2
7434: PPUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 2
7445: ARRAY
7446: PPUSH
7447: LD_INT 1
7449: PPUSH
7450: CALL_OW 3
7454: PPUSH
7455: CALL_OW 1
7459: ST_TO_ADDR
// tmp := 1 ;
7460: LD_ADDR_VAR 0 3
7464: PUSH
7465: LD_STRING 1
7467: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7468: LD_ADDR_VAR 0 6
7472: PUSH
7473: LD_VAR 0 6
7477: PUSH
7478: LD_VAR 0 3
7482: STR
7483: ST_TO_ADDR
// end ;
7484: GO 7380
7486: POP
7487: POP
// if isGameLoad then
7488: LD_VAR 0 1
7492: IFFALSE 7967
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7494: LD_ADDR_VAR 0 4
7498: PUSH
7499: LD_EXP 13
7503: PUSH
7504: LD_EXP 12
7508: PUSH
7509: LD_EXP 14
7513: PUSH
7514: LD_EXP 11
7518: PUSH
7519: LD_EXP 15
7523: PUSH
7524: LD_EXP 16
7528: PUSH
7529: LD_EXP 17
7533: PUSH
7534: LD_EXP 18
7538: PUSH
7539: LD_EXP 19
7543: PUSH
7544: LD_EXP 20
7548: PUSH
7549: LD_EXP 21
7553: PUSH
7554: LD_EXP 22
7558: PUSH
7559: LD_EXP 23
7563: PUSH
7564: LD_EXP 24
7568: PUSH
7569: LD_EXP 32
7573: PUSH
7574: LD_EXP 33
7578: PUSH
7579: LD_EXP 34
7583: PUSH
7584: LD_EXP 35
7588: PUSH
7589: LD_EXP 37
7593: PUSH
7594: LD_EXP 38
7598: PUSH
7599: LD_EXP 39
7603: PUSH
7604: LD_EXP 42
7608: PUSH
7609: LD_EXP 44
7613: PUSH
7614: LD_EXP 45
7618: PUSH
7619: LD_EXP 46
7623: PUSH
7624: LD_EXP 48
7628: PUSH
7629: LD_EXP 49
7633: PUSH
7634: LD_EXP 52
7638: PUSH
7639: LD_EXP 53
7643: PUSH
7644: LD_EXP 54
7648: PUSH
7649: LD_EXP 55
7653: PUSH
7654: LD_EXP 56
7658: PUSH
7659: LD_EXP 57
7663: PUSH
7664: LD_EXP 58
7668: PUSH
7669: LD_EXP 59
7673: PUSH
7674: LD_EXP 60
7678: PUSH
7679: LD_EXP 25
7683: PUSH
7684: LD_EXP 26
7688: PUSH
7689: LD_EXP 29
7693: PUSH
7694: LD_EXP 30
7698: PUSH
7699: LD_EXP 31
7703: PUSH
7704: LD_EXP 27
7708: PUSH
7709: LD_EXP 28
7713: PUSH
7714: LD_EXP 36
7718: PUSH
7719: LD_EXP 40
7723: PUSH
7724: LD_EXP 41
7728: PUSH
7729: LD_EXP 43
7733: PUSH
7734: LD_EXP 47
7738: PUSH
7739: LD_EXP 50
7743: PUSH
7744: LD_EXP 51
7748: PUSH
7749: LD_EXP 61
7753: PUSH
7754: LD_EXP 62
7758: PUSH
7759: LD_EXP 63
7763: PUSH
7764: LD_EXP 64
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
// tmp :=  ;
7825: LD_ADDR_VAR 0 3
7829: PUSH
7830: LD_STRING 
7832: ST_TO_ADDR
// for i = 1 to normalCounter do
7833: LD_ADDR_VAR 0 8
7837: PUSH
7838: DOUBLE
7839: LD_INT 1
7841: DEC
7842: ST_TO_ADDR
7843: LD_EXP 9
7847: PUSH
7848: FOR_TO
7849: IFFALSE 7885
// begin if flags [ i ] then
7851: LD_VAR 0 4
7855: PUSH
7856: LD_VAR 0 8
7860: ARRAY
7861: IFFALSE 7883
// tmp := tmp & i & ; ;
7863: LD_ADDR_VAR 0 3
7867: PUSH
7868: LD_VAR 0 3
7872: PUSH
7873: LD_VAR 0 8
7877: STR
7878: PUSH
7879: LD_STRING ;
7881: STR
7882: ST_TO_ADDR
// end ;
7883: GO 7848
7885: POP
7886: POP
// for i = 1 to hardcoreCounter do
7887: LD_ADDR_VAR 0 8
7891: PUSH
7892: DOUBLE
7893: LD_INT 1
7895: DEC
7896: ST_TO_ADDR
7897: LD_EXP 10
7901: PUSH
7902: FOR_TO
7903: IFFALSE 7949
// begin if flags [ normalCounter + i ] then
7905: LD_VAR 0 4
7909: PUSH
7910: LD_EXP 9
7914: PUSH
7915: LD_VAR 0 8
7919: PLUS
7920: ARRAY
7921: IFFALSE 7947
// tmp := tmp & ( 100 + i ) & ; ;
7923: LD_ADDR_VAR 0 3
7927: PUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 100
7935: PUSH
7936: LD_VAR 0 8
7940: PLUS
7941: STR
7942: PUSH
7943: LD_STRING ;
7945: STR
7946: ST_TO_ADDR
// end ;
7947: GO 7902
7949: POP
7950: POP
// if tmp then
7951: LD_VAR 0 3
7955: IFFALSE 7967
// active := tmp ;
7957: LD_ADDR_VAR 0 7
7961: PUSH
7962: LD_VAR 0 3
7966: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7967: LD_STRING getStreamItemsFromMission("
7969: PUSH
7970: LD_VAR 0 5
7974: STR
7975: PUSH
7976: LD_STRING ","
7978: STR
7979: PUSH
7980: LD_VAR 0 6
7984: STR
7985: PUSH
7986: LD_STRING ","
7988: STR
7989: PUSH
7990: LD_VAR 0 7
7994: STR
7995: PUSH
7996: LD_STRING ")
7998: STR
7999: PPUSH
8000: CALL_OW 559
// end else
8004: GO 8013
// ToLua ( getStreamItemsFromMission("","","") ) ;
8006: LD_STRING getStreamItemsFromMission("","","")
8008: PPUSH
8009: CALL_OW 559
// end ;
8013: LD_VAR 0 2
8017: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8018: LD_EXP 8
8022: PUSH
8023: LD_EXP 13
8027: AND
8028: IFFALSE 8152
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin enable ;
8037: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8038: LD_ADDR_VAR 0 2
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_OWVAR 2
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: LD_INT 34
8060: PUSH
8061: LD_INT 7
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 34
8070: PUSH
8071: LD_INT 45
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 34
8080: PUSH
8081: LD_INT 28
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 34
8090: PUSH
8091: LD_INT 47
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PPUSH
8109: CALL_OW 69
8113: ST_TO_ADDR
// if not tmp then
8114: LD_VAR 0 2
8118: NOT
8119: IFFALSE 8123
// exit ;
8121: GO 8152
// for i in tmp do
8123: LD_ADDR_VAR 0 1
8127: PUSH
8128: LD_VAR 0 2
8132: PUSH
8133: FOR_IN
8134: IFFALSE 8150
// begin SetLives ( i , 0 ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_INT 0
8143: PPUSH
8144: CALL_OW 234
// end ;
8148: GO 8133
8150: POP
8151: POP
// end ;
8152: PPOPN 2
8154: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8155: LD_EXP 8
8159: PUSH
8160: LD_EXP 14
8164: AND
8165: IFFALSE 8249
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// begin enable ;
8174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8175: LD_ADDR_VAR 0 2
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_OWVAR 2
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 32
8194: PUSH
8195: LD_INT 3
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 69
8210: ST_TO_ADDR
// if not tmp then
8211: LD_VAR 0 2
8215: NOT
8216: IFFALSE 8220
// exit ;
8218: GO 8249
// for i in tmp do
8220: LD_ADDR_VAR 0 1
8224: PUSH
8225: LD_VAR 0 2
8229: PUSH
8230: FOR_IN
8231: IFFALSE 8247
// begin SetLives ( i , 0 ) ;
8233: LD_VAR 0 1
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 234
// end ;
8245: GO 8230
8247: POP
8248: POP
// end ;
8249: PPOPN 2
8251: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8252: LD_EXP 8
8256: PUSH
8257: LD_EXP 11
8261: AND
8262: IFFALSE 8355
8264: GO 8266
8266: DISABLE
8267: LD_INT 0
8269: PPUSH
// begin enable ;
8270: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8271: LD_ADDR_VAR 0 1
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_OWVAR 2
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 25
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: LD_INT 9
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 25
8313: PUSH
8314: LD_INT 8
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 69
8335: PUSH
8336: FOR_IN
8337: IFFALSE 8353
// begin SetClass ( i , 1 ) ;
8339: LD_VAR 0 1
8343: PPUSH
8344: LD_INT 1
8346: PPUSH
8347: CALL_OW 336
// end ;
8351: GO 8336
8353: POP
8354: POP
// end ;
8355: PPOPN 1
8357: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8358: LD_EXP 8
8362: PUSH
8363: LD_EXP 12
8367: AND
8368: PUSH
8369: LD_OWVAR 65
8373: PUSH
8374: LD_INT 7
8376: LESS
8377: AND
8378: IFFALSE 8392
8380: GO 8382
8382: DISABLE
// begin enable ;
8383: ENABLE
// game_speed := 7 ;
8384: LD_ADDR_OWVAR 65
8388: PUSH
8389: LD_INT 7
8391: ST_TO_ADDR
// end ;
8392: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8393: LD_EXP 8
8397: PUSH
8398: LD_EXP 15
8402: AND
8403: IFFALSE 8605
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8413: LD_ADDR_VAR 0 3
8417: PUSH
8418: LD_INT 81
8420: PUSH
8421: LD_OWVAR 2
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 21
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PPUSH
8444: CALL_OW 69
8448: ST_TO_ADDR
// if not tmp then
8449: LD_VAR 0 3
8453: NOT
8454: IFFALSE 8458
// exit ;
8456: GO 8605
// if tmp > 5 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 5
8465: GREATER
8466: IFFALSE 8478
// k := 5 else
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 5
8475: ST_TO_ADDR
8476: GO 8488
// k := tmp ;
8478: LD_ADDR_VAR 0 2
8482: PUSH
8483: LD_VAR 0 3
8487: ST_TO_ADDR
// for i := 1 to k do
8488: LD_ADDR_VAR 0 1
8492: PUSH
8493: DOUBLE
8494: LD_INT 1
8496: DEC
8497: ST_TO_ADDR
8498: LD_VAR 0 2
8502: PUSH
8503: FOR_TO
8504: IFFALSE 8603
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8506: LD_VAR 0 3
8510: PUSH
8511: LD_VAR 0 1
8515: ARRAY
8516: PPUSH
8517: LD_VAR 0 1
8521: PUSH
8522: LD_INT 4
8524: MOD
8525: PUSH
8526: LD_INT 1
8528: PLUS
8529: PPUSH
8530: CALL_OW 259
8534: PUSH
8535: LD_INT 10
8537: LESS
8538: IFFALSE 8601
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8540: LD_VAR 0 3
8544: PUSH
8545: LD_VAR 0 1
8549: ARRAY
8550: PPUSH
8551: LD_VAR 0 1
8555: PUSH
8556: LD_INT 4
8558: MOD
8559: PUSH
8560: LD_INT 1
8562: PLUS
8563: PPUSH
8564: LD_VAR 0 3
8568: PUSH
8569: LD_VAR 0 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 1
8579: PUSH
8580: LD_INT 4
8582: MOD
8583: PUSH
8584: LD_INT 1
8586: PLUS
8587: PPUSH
8588: CALL_OW 259
8592: PUSH
8593: LD_INT 1
8595: PLUS
8596: PPUSH
8597: CALL_OW 237
8601: GO 8503
8603: POP
8604: POP
// end ;
8605: PPOPN 3
8607: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8608: LD_EXP 8
8612: PUSH
8613: LD_EXP 16
8617: AND
8618: IFFALSE 8638
8620: GO 8622
8622: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8623: LD_INT 4
8625: PPUSH
8626: LD_OWVAR 2
8630: PPUSH
8631: LD_INT 0
8633: PPUSH
8634: CALL_OW 324
8638: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8639: LD_EXP 8
8643: PUSH
8644: LD_EXP 45
8648: AND
8649: IFFALSE 8669
8651: GO 8653
8653: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8654: LD_INT 19
8656: PPUSH
8657: LD_OWVAR 2
8661: PPUSH
8662: LD_INT 0
8664: PPUSH
8665: CALL_OW 324
8669: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8670: LD_EXP 8
8674: PUSH
8675: LD_EXP 17
8679: AND
8680: IFFALSE 8782
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin enable ;
8689: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_INT 22
8697: PUSH
8698: LD_OWVAR 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 2
8709: PUSH
8710: LD_INT 34
8712: PUSH
8713: LD_INT 11
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 34
8722: PUSH
8723: LD_INT 30
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 69
8743: ST_TO_ADDR
// if not tmp then
8744: LD_VAR 0 2
8748: NOT
8749: IFFALSE 8753
// exit ;
8751: GO 8782
// for i in tmp do
8753: LD_ADDR_VAR 0 1
8757: PUSH
8758: LD_VAR 0 2
8762: PUSH
8763: FOR_IN
8764: IFFALSE 8780
// begin SetLives ( i , 0 ) ;
8766: LD_VAR 0 1
8770: PPUSH
8771: LD_INT 0
8773: PPUSH
8774: CALL_OW 234
// end ;
8778: GO 8763
8780: POP
8781: POP
// end ;
8782: PPOPN 2
8784: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8785: LD_EXP 8
8789: PUSH
8790: LD_EXP 18
8794: AND
8795: IFFALSE 8815
8797: GO 8799
8799: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8800: LD_INT 32
8802: PPUSH
8803: LD_OWVAR 2
8807: PPUSH
8808: LD_INT 0
8810: PPUSH
8811: CALL_OW 324
8815: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8816: LD_EXP 8
8820: PUSH
8821: LD_EXP 19
8825: AND
8826: IFFALSE 9007
8828: GO 8830
8830: DISABLE
8831: LD_INT 0
8833: PPUSH
8834: PPUSH
8835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8836: LD_ADDR_VAR 0 2
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_OWVAR 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 33
8855: PUSH
8856: LD_INT 3
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PPUSH
8867: CALL_OW 69
8871: ST_TO_ADDR
// if not tmp then
8872: LD_VAR 0 2
8876: NOT
8877: IFFALSE 8881
// exit ;
8879: GO 9007
// side := 0 ;
8881: LD_ADDR_VAR 0 3
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// for i := 1 to 8 do
8889: LD_ADDR_VAR 0 1
8893: PUSH
8894: DOUBLE
8895: LD_INT 1
8897: DEC
8898: ST_TO_ADDR
8899: LD_INT 8
8901: PUSH
8902: FOR_TO
8903: IFFALSE 8951
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8905: LD_OWVAR 2
8909: PUSH
8910: LD_VAR 0 1
8914: NONEQUAL
8915: PUSH
8916: LD_OWVAR 2
8920: PPUSH
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 81
8930: PUSH
8931: LD_INT 2
8933: EQUAL
8934: AND
8935: IFFALSE 8949
// begin side := i ;
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: LD_VAR 0 1
8946: ST_TO_ADDR
// break ;
8947: GO 8951
// end ;
8949: GO 8902
8951: POP
8952: POP
// if not side then
8953: LD_VAR 0 3
8957: NOT
8958: IFFALSE 8962
// exit ;
8960: GO 9007
// for i := 1 to tmp do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 2
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9005
// if Prob ( 60 ) then
8980: LD_INT 60
8982: PPUSH
8983: CALL_OW 13
8987: IFFALSE 9003
// SetSide ( i , side ) ;
8989: LD_VAR 0 1
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: CALL_OW 235
9003: GO 8977
9005: POP
9006: POP
// end ;
9007: PPOPN 3
9009: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9010: LD_EXP 8
9014: PUSH
9015: LD_EXP 21
9019: AND
9020: IFFALSE 9139
9022: GO 9024
9024: DISABLE
9025: LD_INT 0
9027: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: LD_INT 22
9035: PUSH
9036: LD_OWVAR 2
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 21
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 23
9060: PUSH
9061: LD_INT 0
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9137
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 257
9094: PUSH
9095: LD_INT 1
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 3
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: IN
9113: IFFALSE 9135
// SetClass ( un , rand ( 1 , 4 ) ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 12
9130: PPUSH
9131: CALL_OW 336
9135: GO 9082
9137: POP
9138: POP
// end ;
9139: PPOPN 1
9141: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9142: LD_EXP 8
9146: PUSH
9147: LD_EXP 20
9151: AND
9152: IFFALSE 9231
9154: GO 9156
9156: DISABLE
9157: LD_INT 0
9159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9160: LD_ADDR_VAR 0 1
9164: PUSH
9165: LD_INT 22
9167: PUSH
9168: LD_OWVAR 2
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 21
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 69
9195: ST_TO_ADDR
// if not tmp then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9205
// exit ;
9203: GO 9231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9205: LD_VAR 0 1
9209: PUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 12
9222: ARRAY
9223: PPUSH
9224: LD_INT 100
9226: PPUSH
9227: CALL_OW 234
// end ;
9231: PPOPN 1
9233: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9234: LD_EXP 8
9238: PUSH
9239: LD_EXP 22
9243: AND
9244: IFFALSE 9342
9246: GO 9248
9248: DISABLE
9249: LD_INT 0
9251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9252: LD_ADDR_VAR 0 1
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_OWVAR 2
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL_OW 69
9287: ST_TO_ADDR
// if not tmp then
9288: LD_VAR 0 1
9292: NOT
9293: IFFALSE 9297
// exit ;
9295: GO 9342
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9297: LD_VAR 0 1
9301: PUSH
9302: LD_INT 1
9304: PPUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 12
9314: ARRAY
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 4
9321: PPUSH
9322: CALL_OW 12
9326: PPUSH
9327: LD_INT 3000
9329: PPUSH
9330: LD_INT 9000
9332: PPUSH
9333: CALL_OW 12
9337: PPUSH
9338: CALL_OW 492
// end ;
9342: PPOPN 1
9344: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9345: LD_EXP 8
9349: PUSH
9350: LD_EXP 23
9354: AND
9355: IFFALSE 9375
9357: GO 9359
9359: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9360: LD_INT 1
9362: PPUSH
9363: LD_OWVAR 2
9367: PPUSH
9368: LD_INT 0
9370: PPUSH
9371: CALL_OW 324
9375: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9376: LD_EXP 8
9380: PUSH
9381: LD_EXP 24
9385: AND
9386: IFFALSE 9469
9388: GO 9390
9390: DISABLE
9391: LD_INT 0
9393: PPUSH
9394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9395: LD_ADDR_VAR 0 2
9399: PUSH
9400: LD_INT 22
9402: PUSH
9403: LD_OWVAR 2
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 21
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 69
9430: ST_TO_ADDR
// if not tmp then
9431: LD_VAR 0 2
9435: NOT
9436: IFFALSE 9440
// exit ;
9438: GO 9469
// for i in tmp do
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: LD_VAR 0 2
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9467
// SetBLevel ( i , 10 ) ;
9453: LD_VAR 0 1
9457: PPUSH
9458: LD_INT 10
9460: PPUSH
9461: CALL_OW 241
9465: GO 9450
9467: POP
9468: POP
// end ;
9469: PPOPN 2
9471: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9472: LD_EXP 8
9476: PUSH
9477: LD_EXP 25
9481: AND
9482: IFFALSE 9593
9484: GO 9486
9486: DISABLE
9487: LD_INT 0
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9492: LD_ADDR_VAR 0 3
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_OWVAR 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 69
9527: ST_TO_ADDR
// if not tmp then
9528: LD_VAR 0 3
9532: NOT
9533: IFFALSE 9537
// exit ;
9535: GO 9593
// un := tmp [ rand ( 1 , tmp ) ] ;
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 1
9549: PPUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: CALL_OW 12
9559: ARRAY
9560: ST_TO_ADDR
// if Crawls ( un ) then
9561: LD_VAR 0 2
9565: PPUSH
9566: CALL_OW 318
9570: IFFALSE 9581
// ComWalk ( un ) ;
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 5
9588: PPUSH
9589: CALL_OW 336
// end ;
9593: PPOPN 3
9595: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9596: LD_EXP 8
9600: PUSH
9601: LD_EXP 26
9605: AND
9606: PUSH
9607: LD_OWVAR 67
9611: PUSH
9612: LD_INT 4
9614: LESS
9615: AND
9616: IFFALSE 9635
9618: GO 9620
9620: DISABLE
// begin Difficulty := Difficulty + 1 ;
9621: LD_ADDR_OWVAR 67
9625: PUSH
9626: LD_OWVAR 67
9630: PUSH
9631: LD_INT 1
9633: PLUS
9634: ST_TO_ADDR
// end ;
9635: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9636: LD_EXP 8
9640: PUSH
9641: LD_EXP 27
9645: AND
9646: IFFALSE 9749
9648: GO 9650
9650: DISABLE
9651: LD_INT 0
9653: PPUSH
// begin for i := 1 to 5 do
9654: LD_ADDR_VAR 0 1
9658: PUSH
9659: DOUBLE
9660: LD_INT 1
9662: DEC
9663: ST_TO_ADDR
9664: LD_INT 5
9666: PUSH
9667: FOR_TO
9668: IFFALSE 9747
// begin uc_nation := nation_nature ;
9670: LD_ADDR_OWVAR 21
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// uc_side := 0 ;
9678: LD_ADDR_OWVAR 20
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9686: LD_ADDR_OWVAR 29
9690: PUSH
9691: LD_INT 12
9693: PUSH
9694: LD_INT 12
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: ST_TO_ADDR
// hc_agressivity := 20 ;
9701: LD_ADDR_OWVAR 35
9705: PUSH
9706: LD_INT 20
9708: ST_TO_ADDR
// hc_class := class_tiger ;
9709: LD_ADDR_OWVAR 28
9713: PUSH
9714: LD_INT 14
9716: ST_TO_ADDR
// hc_gallery :=  ;
9717: LD_ADDR_OWVAR 33
9721: PUSH
9722: LD_STRING 
9724: ST_TO_ADDR
// hc_name :=  ;
9725: LD_ADDR_OWVAR 26
9729: PUSH
9730: LD_STRING 
9732: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9733: CALL_OW 44
9737: PPUSH
9738: LD_INT 0
9740: PPUSH
9741: CALL_OW 51
// end ;
9745: GO 9667
9747: POP
9748: POP
// end ;
9749: PPOPN 1
9751: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9752: LD_EXP 8
9756: PUSH
9757: LD_EXP 28
9761: AND
9762: IFFALSE 9771
9764: GO 9766
9766: DISABLE
// StreamSibBomb ;
9767: CALL 9772 0 0
9771: END
// export function StreamSibBomb ; var i , x , y ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
// result := false ;
9778: LD_ADDR_VAR 0 1
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// for i := 1 to 16 do
9786: LD_ADDR_VAR 0 2
9790: PUSH
9791: DOUBLE
9792: LD_INT 1
9794: DEC
9795: ST_TO_ADDR
9796: LD_INT 16
9798: PUSH
9799: FOR_TO
9800: IFFALSE 9999
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9802: LD_ADDR_VAR 0 3
9806: PUSH
9807: LD_INT 10
9809: PUSH
9810: LD_INT 20
9812: PUSH
9813: LD_INT 30
9815: PUSH
9816: LD_INT 40
9818: PUSH
9819: LD_INT 50
9821: PUSH
9822: LD_INT 60
9824: PUSH
9825: LD_INT 70
9827: PUSH
9828: LD_INT 80
9830: PUSH
9831: LD_INT 90
9833: PUSH
9834: LD_INT 100
9836: PUSH
9837: LD_INT 110
9839: PUSH
9840: LD_INT 120
9842: PUSH
9843: LD_INT 130
9845: PUSH
9846: LD_INT 140
9848: PUSH
9849: LD_INT 150
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 1
9871: PPUSH
9872: LD_INT 15
9874: PPUSH
9875: CALL_OW 12
9879: ARRAY
9880: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9881: LD_ADDR_VAR 0 4
9885: PUSH
9886: LD_INT 10
9888: PUSH
9889: LD_INT 20
9891: PUSH
9892: LD_INT 30
9894: PUSH
9895: LD_INT 40
9897: PUSH
9898: LD_INT 50
9900: PUSH
9901: LD_INT 60
9903: PUSH
9904: LD_INT 70
9906: PUSH
9907: LD_INT 80
9909: PUSH
9910: LD_INT 90
9912: PUSH
9913: LD_INT 100
9915: PUSH
9916: LD_INT 110
9918: PUSH
9919: LD_INT 120
9921: PUSH
9922: LD_INT 130
9924: PUSH
9925: LD_INT 140
9927: PUSH
9928: LD_INT 150
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 1
9950: PPUSH
9951: LD_INT 15
9953: PPUSH
9954: CALL_OW 12
9958: ARRAY
9959: ST_TO_ADDR
// if ValidHex ( x , y ) then
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_VAR 0 4
9969: PPUSH
9970: CALL_OW 488
9974: IFFALSE 9997
// begin result := [ x , y ] ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_VAR 0 3
9985: PUSH
9986: LD_VAR 0 4
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// break ;
9995: GO 9999
// end ; end ;
9997: GO 9799
9999: POP
10000: POP
// if result then
10001: LD_VAR 0 1
10005: IFFALSE 10065
// begin ToLua ( playSibBomb() ) ;
10007: LD_STRING playSibBomb()
10009: PPUSH
10010: CALL_OW 559
// wait ( 0 0$14 ) ;
10014: LD_INT 490
10016: PPUSH
10017: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10021: LD_VAR 0 1
10025: PUSH
10026: LD_INT 1
10028: ARRAY
10029: PPUSH
10030: LD_VAR 0 1
10034: PUSH
10035: LD_INT 2
10037: ARRAY
10038: PPUSH
10039: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10043: LD_VAR 0 1
10047: PUSH
10048: LD_INT 1
10050: ARRAY
10051: PPUSH
10052: LD_VAR 0 1
10056: PUSH
10057: LD_INT 2
10059: ARRAY
10060: PPUSH
10061: CALL_OW 429
// end ; end ;
10065: LD_VAR 0 1
10069: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10070: LD_EXP 8
10074: PUSH
10075: LD_EXP 30
10079: AND
10080: IFFALSE 10092
10082: GO 10084
10084: DISABLE
// YouLost (  ) ;
10085: LD_STRING 
10087: PPUSH
10088: CALL_OW 104
10092: END
// every 0 0$1 trigger StreamModeActive and sFog do
10093: LD_EXP 8
10097: PUSH
10098: LD_EXP 29
10102: AND
10103: IFFALSE 10117
10105: GO 10107
10107: DISABLE
// FogOff ( your_side ) ;
10108: LD_OWVAR 2
10112: PPUSH
10113: CALL_OW 344
10117: END
// every 0 0$1 trigger StreamModeActive and sSun do
10118: LD_EXP 8
10122: PUSH
10123: LD_EXP 31
10127: AND
10128: IFFALSE 10156
10130: GO 10132
10132: DISABLE
// begin solar_recharge_percent := 0 ;
10133: LD_ADDR_OWVAR 79
10137: PUSH
10138: LD_INT 0
10140: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10141: LD_INT 10500
10143: PPUSH
10144: CALL_OW 67
// solar_recharge_percent := 100 ;
10148: LD_ADDR_OWVAR 79
10152: PUSH
10153: LD_INT 100
10155: ST_TO_ADDR
// end ;
10156: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10157: LD_EXP 8
10161: PUSH
10162: LD_EXP 32
10166: AND
10167: IFFALSE 10406
10169: GO 10171
10171: DISABLE
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
// begin tmp := [ ] ;
10177: LD_ADDR_VAR 0 3
10181: PUSH
10182: EMPTY
10183: ST_TO_ADDR
// for i := 1 to 6 do
10184: LD_ADDR_VAR 0 1
10188: PUSH
10189: DOUBLE
10190: LD_INT 1
10192: DEC
10193: ST_TO_ADDR
10194: LD_INT 6
10196: PUSH
10197: FOR_TO
10198: IFFALSE 10303
// begin uc_nation := nation_nature ;
10200: LD_ADDR_OWVAR 21
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// uc_side := 0 ;
10208: LD_ADDR_OWVAR 20
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10216: LD_ADDR_OWVAR 29
10220: PUSH
10221: LD_INT 12
10223: PUSH
10224: LD_INT 12
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// hc_agressivity := 20 ;
10231: LD_ADDR_OWVAR 35
10235: PUSH
10236: LD_INT 20
10238: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10239: LD_ADDR_OWVAR 28
10243: PUSH
10244: LD_INT 17
10246: ST_TO_ADDR
// hc_gallery :=  ;
10247: LD_ADDR_OWVAR 33
10251: PUSH
10252: LD_STRING 
10254: ST_TO_ADDR
// hc_name :=  ;
10255: LD_ADDR_OWVAR 26
10259: PUSH
10260: LD_STRING 
10262: ST_TO_ADDR
// un := CreateHuman ;
10263: LD_ADDR_VAR 0 2
10267: PUSH
10268: CALL_OW 44
10272: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10273: LD_VAR 0 2
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL_OW 51
// tmp := tmp ^ un ;
10285: LD_ADDR_VAR 0 3
10289: PUSH
10290: LD_VAR 0 3
10294: PUSH
10295: LD_VAR 0 2
10299: ADD
10300: ST_TO_ADDR
// end ;
10301: GO 10197
10303: POP
10304: POP
// repeat wait ( 0 0$1 ) ;
10305: LD_INT 35
10307: PPUSH
10308: CALL_OW 67
// for un in tmp do
10312: LD_ADDR_VAR 0 2
10316: PUSH
10317: LD_VAR 0 3
10321: PUSH
10322: FOR_IN
10323: IFFALSE 10397
// begin if IsDead ( un ) then
10325: LD_VAR 0 2
10329: PPUSH
10330: CALL_OW 301
10334: IFFALSE 10354
// begin tmp := tmp diff un ;
10336: LD_ADDR_VAR 0 3
10340: PUSH
10341: LD_VAR 0 3
10345: PUSH
10346: LD_VAR 0 2
10350: DIFF
10351: ST_TO_ADDR
// continue ;
10352: GO 10322
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 0
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: PPUSH
10381: LD_VAR 0 2
10385: PPUSH
10386: CALL_OW 74
10390: PPUSH
10391: CALL_OW 115
// end ;
10395: GO 10322
10397: POP
10398: POP
// until not tmp ;
10399: LD_VAR 0 3
10403: NOT
10404: IFFALSE 10305
// end ;
10406: PPOPN 3
10408: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10409: LD_EXP 8
10413: PUSH
10414: LD_EXP 33
10418: AND
10419: IFFALSE 10473
10421: GO 10423
10423: DISABLE
// begin ToLua ( displayTroll(); ) ;
10424: LD_STRING displayTroll();
10426: PPUSH
10427: CALL_OW 559
// wait ( 3 3$00 ) ;
10431: LD_INT 6300
10433: PPUSH
10434: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10438: LD_STRING hideTroll();
10440: PPUSH
10441: CALL_OW 559
// wait ( 1 1$00 ) ;
10445: LD_INT 2100
10447: PPUSH
10448: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10452: LD_STRING displayTroll();
10454: PPUSH
10455: CALL_OW 559
// wait ( 1 1$00 ) ;
10459: LD_INT 2100
10461: PPUSH
10462: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10466: LD_STRING hideTroll();
10468: PPUSH
10469: CALL_OW 559
// end ;
10473: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10474: LD_EXP 8
10478: PUSH
10479: LD_EXP 34
10483: AND
10484: IFFALSE 10547
10486: GO 10488
10488: DISABLE
10489: LD_INT 0
10491: PPUSH
// begin p := 0 ;
10492: LD_ADDR_VAR 0 1
10496: PUSH
10497: LD_INT 0
10499: ST_TO_ADDR
// repeat game_speed := 1 ;
10500: LD_ADDR_OWVAR 65
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10508: LD_INT 35
10510: PPUSH
10511: CALL_OW 67
// p := p + 1 ;
10515: LD_ADDR_VAR 0 1
10519: PUSH
10520: LD_VAR 0 1
10524: PUSH
10525: LD_INT 1
10527: PLUS
10528: ST_TO_ADDR
// until p >= 60 ;
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 60
10536: GREATEREQUAL
10537: IFFALSE 10500
// game_speed := 4 ;
10539: LD_ADDR_OWVAR 65
10543: PUSH
10544: LD_INT 4
10546: ST_TO_ADDR
// end ;
10547: PPOPN 1
10549: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10550: LD_EXP 8
10554: PUSH
10555: LD_EXP 35
10559: AND
10560: IFFALSE 10706
10562: GO 10564
10564: DISABLE
10565: LD_INT 0
10567: PPUSH
10568: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10569: LD_ADDR_VAR 0 1
10573: PUSH
10574: LD_INT 22
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 2
10588: PUSH
10589: LD_INT 30
10591: PUSH
10592: LD_INT 0
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 30
10601: PUSH
10602: LD_INT 1
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PPUSH
10618: CALL_OW 69
10622: ST_TO_ADDR
// if not depot then
10623: LD_VAR 0 1
10627: NOT
10628: IFFALSE 10632
// exit ;
10630: GO 10706
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10632: LD_ADDR_VAR 0 2
10636: PUSH
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 12
10654: ARRAY
10655: PPUSH
10656: CALL_OW 274
10660: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: LD_INT 0
10671: PPUSH
10672: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10676: LD_VAR 0 2
10680: PPUSH
10681: LD_INT 2
10683: PPUSH
10684: LD_INT 0
10686: PPUSH
10687: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10691: LD_VAR 0 2
10695: PPUSH
10696: LD_INT 3
10698: PPUSH
10699: LD_INT 0
10701: PPUSH
10702: CALL_OW 277
// end ;
10706: PPOPN 2
10708: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10709: LD_EXP 8
10713: PUSH
10714: LD_EXP 36
10718: AND
10719: IFFALSE 10816
10721: GO 10723
10723: DISABLE
10724: LD_INT 0
10726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10727: LD_ADDR_VAR 0 1
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_OWVAR 2
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 21
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 0
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: PPUSH
10776: CALL_OW 69
10780: ST_TO_ADDR
// if not tmp then
10781: LD_VAR 0 1
10785: NOT
10786: IFFALSE 10790
// exit ;
10788: GO 10816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10790: LD_VAR 0 1
10794: PUSH
10795: LD_INT 1
10797: PPUSH
10798: LD_VAR 0 1
10802: PPUSH
10803: CALL_OW 12
10807: ARRAY
10808: PPUSH
10809: LD_INT 200
10811: PPUSH
10812: CALL_OW 234
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10819: LD_EXP 8
10823: PUSH
10824: LD_EXP 37
10828: AND
10829: IFFALSE 10908
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10837: LD_ADDR_VAR 0 1
10841: PUSH
10842: LD_INT 22
10844: PUSH
10845: LD_OWVAR 2
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
// if not tmp then
10873: LD_VAR 0 1
10877: NOT
10878: IFFALSE 10882
// exit ;
10880: GO 10908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10882: LD_VAR 0 1
10886: PUSH
10887: LD_INT 1
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 12
10899: ARRAY
10900: PPUSH
10901: LD_INT 60
10903: PPUSH
10904: CALL_OW 234
// end ;
10908: PPOPN 1
10910: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10911: LD_EXP 8
10915: PUSH
10916: LD_EXP 38
10920: AND
10921: IFFALSE 11020
10923: GO 10925
10925: DISABLE
10926: LD_INT 0
10928: PPUSH
10929: PPUSH
// begin enable ;
10930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10931: LD_ADDR_VAR 0 1
10935: PUSH
10936: LD_INT 22
10938: PUSH
10939: LD_OWVAR 2
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 61
10950: PUSH
10951: EMPTY
10952: LIST
10953: PUSH
10954: LD_INT 33
10956: PUSH
10957: LD_INT 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 69
10973: ST_TO_ADDR
// if not tmp then
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10983
// exit ;
10981: GO 11020
// for i in tmp do
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11018
// if IsControledBy ( i ) then
10996: LD_VAR 0 2
11000: PPUSH
11001: CALL_OW 312
11005: IFFALSE 11016
// ComUnlink ( i ) ;
11007: LD_VAR 0 2
11011: PPUSH
11012: CALL_OW 136
11016: GO 10993
11018: POP
11019: POP
// end ;
11020: PPOPN 2
11022: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11023: LD_EXP 8
11027: PUSH
11028: LD_EXP 39
11032: AND
11033: IFFALSE 11173
11035: GO 11037
11037: DISABLE
11038: LD_INT 0
11040: PPUSH
11041: PPUSH
// begin ToLua ( displayPowell(); ) ;
11042: LD_STRING displayPowell();
11044: PPUSH
11045: CALL_OW 559
// uc_side := 0 ;
11049: LD_ADDR_OWVAR 20
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// uc_nation := 2 ;
11057: LD_ADDR_OWVAR 21
11061: PUSH
11062: LD_INT 2
11064: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11065: LD_ADDR_OWVAR 37
11069: PUSH
11070: LD_INT 14
11072: ST_TO_ADDR
// vc_engine := engine_siberite ;
11073: LD_ADDR_OWVAR 39
11077: PUSH
11078: LD_INT 3
11080: ST_TO_ADDR
// vc_control := control_apeman ;
11081: LD_ADDR_OWVAR 38
11085: PUSH
11086: LD_INT 5
11088: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11089: LD_ADDR_OWVAR 40
11093: PUSH
11094: LD_INT 29
11096: ST_TO_ADDR
// un := CreateVehicle ;
11097: LD_ADDR_VAR 0 2
11101: PUSH
11102: CALL_OW 45
11106: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11107: LD_VAR 0 2
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11119: LD_INT 35
11121: PPUSH
11122: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11126: LD_VAR 0 2
11130: PPUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 69
11147: PPUSH
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 74
11157: PPUSH
11158: CALL_OW 115
// until IsDead ( un ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 301
11171: IFFALSE 11119
// end ;
11173: PPOPN 2
11175: END
// every 0 0$1 trigger StreamModeActive and sStu do
11176: LD_EXP 8
11180: PUSH
11181: LD_EXP 47
11185: AND
11186: IFFALSE 11202
11188: GO 11190
11190: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11191: LD_STRING displayStucuk();
11193: PPUSH
11194: CALL_OW 559
// ResetFog ;
11198: CALL_OW 335
// end ;
11202: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11203: LD_EXP 8
11207: PUSH
11208: LD_EXP 40
11212: AND
11213: IFFALSE 11354
11215: GO 11217
11217: DISABLE
11218: LD_INT 0
11220: PPUSH
11221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11222: LD_ADDR_VAR 0 2
11226: PUSH
11227: LD_INT 22
11229: PUSH
11230: LD_OWVAR 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 21
11241: PUSH
11242: LD_INT 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 69
11257: ST_TO_ADDR
// if not tmp then
11258: LD_VAR 0 2
11262: NOT
11263: IFFALSE 11267
// exit ;
11265: GO 11354
// un := tmp [ rand ( 1 , tmp ) ] ;
11267: LD_ADDR_VAR 0 1
11271: PUSH
11272: LD_VAR 0 2
11276: PUSH
11277: LD_INT 1
11279: PPUSH
11280: LD_VAR 0 2
11284: PPUSH
11285: CALL_OW 12
11289: ARRAY
11290: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11291: LD_VAR 0 1
11295: PPUSH
11296: LD_INT 0
11298: PPUSH
11299: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_OWVAR 3
11312: PUSH
11313: LD_VAR 0 1
11317: DIFF
11318: PPUSH
11319: LD_VAR 0 1
11323: PPUSH
11324: CALL_OW 74
11328: PPUSH
11329: CALL_OW 115
// wait ( 0 0$20 ) ;
11333: LD_INT 700
11335: PPUSH
11336: CALL_OW 67
// SetSide ( un , your_side ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: CALL_OW 235
// end ;
11354: PPOPN 2
11356: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11357: LD_EXP 8
11361: PUSH
11362: LD_EXP 41
11366: AND
11367: IFFALSE 11473
11369: GO 11371
11371: DISABLE
11372: LD_INT 0
11374: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_OWVAR 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 2
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 0
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not depot then
11429: LD_VAR 0 1
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11473
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11438: LD_VAR 0 1
11442: PUSH
11443: LD_INT 1
11445: ARRAY
11446: PPUSH
11447: CALL_OW 250
11451: PPUSH
11452: LD_VAR 0 1
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: PPUSH
11461: CALL_OW 251
11465: PPUSH
11466: LD_INT 70
11468: PPUSH
11469: CALL_OW 495
// end ;
11473: PPOPN 1
11475: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11476: LD_EXP 8
11480: PUSH
11481: LD_EXP 42
11485: AND
11486: IFFALSE 11697
11488: GO 11490
11490: DISABLE
11491: LD_INT 0
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
11497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11498: LD_ADDR_VAR 0 5
11502: PUSH
11503: LD_INT 22
11505: PUSH
11506: LD_OWVAR 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 21
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: ST_TO_ADDR
// if not tmp then
11534: LD_VAR 0 5
11538: NOT
11539: IFFALSE 11543
// exit ;
11541: GO 11697
// for i in tmp do
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: LD_VAR 0 5
11552: PUSH
11553: FOR_IN
11554: IFFALSE 11695
// begin d := rand ( 0 , 5 ) ;
11556: LD_ADDR_VAR 0 4
11560: PUSH
11561: LD_INT 0
11563: PPUSH
11564: LD_INT 5
11566: PPUSH
11567: CALL_OW 12
11571: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11572: LD_ADDR_VAR 0 2
11576: PUSH
11577: LD_VAR 0 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_VAR 0 4
11591: PPUSH
11592: LD_INT 3
11594: PPUSH
11595: LD_INT 12
11597: PPUSH
11598: CALL_OW 12
11602: PPUSH
11603: CALL_OW 272
11607: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11608: LD_ADDR_VAR 0 3
11612: PUSH
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 251
11622: PPUSH
11623: LD_VAR 0 4
11627: PPUSH
11628: LD_INT 3
11630: PPUSH
11631: LD_INT 12
11633: PPUSH
11634: CALL_OW 12
11638: PPUSH
11639: CALL_OW 273
11643: ST_TO_ADDR
// if ValidHex ( x , y ) then
11644: LD_VAR 0 2
11648: PPUSH
11649: LD_VAR 0 3
11653: PPUSH
11654: CALL_OW 488
11658: IFFALSE 11693
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11660: LD_VAR 0 1
11664: PPUSH
11665: LD_VAR 0 2
11669: PPUSH
11670: LD_VAR 0 3
11674: PPUSH
11675: LD_INT 3
11677: PPUSH
11678: LD_INT 6
11680: PPUSH
11681: CALL_OW 12
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 483
// end ;
11693: GO 11553
11695: POP
11696: POP
// end ;
11697: PPOPN 5
11699: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11700: LD_EXP 8
11704: PUSH
11705: LD_EXP 43
11709: AND
11710: IFFALSE 11804
11712: GO 11714
11714: DISABLE
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_INT 22
11726: PUSH
11727: LD_OWVAR 2
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 32
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 2
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: ST_TO_ADDR
// if not tmp then
11766: LD_VAR 0 2
11770: NOT
11771: IFFALSE 11775
// exit ;
11773: GO 11804
// for i in tmp do
11775: LD_ADDR_VAR 0 1
11779: PUSH
11780: LD_VAR 0 2
11784: PUSH
11785: FOR_IN
11786: IFFALSE 11802
// SetFuel ( i , 0 ) ;
11788: LD_VAR 0 1
11792: PPUSH
11793: LD_INT 0
11795: PPUSH
11796: CALL_OW 240
11800: GO 11785
11802: POP
11803: POP
// end ;
11804: PPOPN 2
11806: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11807: LD_EXP 8
11811: PUSH
11812: LD_EXP 44
11816: AND
11817: IFFALSE 11883
11819: GO 11821
11821: DISABLE
11822: LD_INT 0
11824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11825: LD_ADDR_VAR 0 1
11829: PUSH
11830: LD_INT 22
11832: PUSH
11833: LD_OWVAR 2
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 30
11844: PUSH
11845: LD_INT 29
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PPUSH
11856: CALL_OW 69
11860: ST_TO_ADDR
// if not tmp then
11861: LD_VAR 0 1
11865: NOT
11866: IFFALSE 11870
// exit ;
11868: GO 11883
// DestroyUnit ( tmp [ 1 ] ) ;
11870: LD_VAR 0 1
11874: PUSH
11875: LD_INT 1
11877: ARRAY
11878: PPUSH
11879: CALL_OW 65
// end ;
11883: PPOPN 1
11885: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11886: LD_EXP 8
11890: PUSH
11891: LD_EXP 46
11895: AND
11896: IFFALSE 12025
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
// begin uc_side := 0 ;
11904: LD_ADDR_OWVAR 20
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// uc_nation := nation_arabian ;
11912: LD_ADDR_OWVAR 21
11916: PUSH
11917: LD_INT 2
11919: ST_TO_ADDR
// hc_gallery :=  ;
11920: LD_ADDR_OWVAR 33
11924: PUSH
11925: LD_STRING 
11927: ST_TO_ADDR
// hc_name :=  ;
11928: LD_ADDR_OWVAR 26
11932: PUSH
11933: LD_STRING 
11935: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11936: LD_INT 1
11938: PPUSH
11939: LD_INT 11
11941: PPUSH
11942: LD_INT 10
11944: PPUSH
11945: CALL_OW 380
// un := CreateHuman ;
11949: LD_ADDR_VAR 0 1
11953: PUSH
11954: CALL_OW 44
11958: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11971: LD_INT 35
11973: PPUSH
11974: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_INT 22
11985: PUSH
11986: LD_OWVAR 2
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PPUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 74
12009: PPUSH
12010: CALL_OW 115
// until IsDead ( un ) ;
12014: LD_VAR 0 1
12018: PPUSH
12019: CALL_OW 301
12023: IFFALSE 11971
// end ;
12025: PPOPN 1
12027: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12028: LD_EXP 8
12032: PUSH
12033: LD_EXP 48
12037: AND
12038: IFFALSE 12050
12040: GO 12042
12042: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12043: LD_STRING earthquake(getX(game), 0, 32)
12045: PPUSH
12046: CALL_OW 559
12050: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12051: LD_EXP 8
12055: PUSH
12056: LD_EXP 49
12060: AND
12061: IFFALSE 12152
12063: GO 12065
12065: DISABLE
12066: LD_INT 0
12068: PPUSH
// begin enable ;
12069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12070: LD_ADDR_VAR 0 1
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_OWVAR 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 21
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 33
12099: PUSH
12100: LD_INT 3
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: PPUSH
12112: CALL_OW 69
12116: ST_TO_ADDR
// if not tmp then
12117: LD_VAR 0 1
12121: NOT
12122: IFFALSE 12126
// exit ;
12124: GO 12152
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 1
12133: PPUSH
12134: LD_VAR 0 1
12138: PPUSH
12139: CALL_OW 12
12143: ARRAY
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 234
// end ;
12152: PPOPN 1
12154: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12155: LD_EXP 8
12159: PUSH
12160: LD_EXP 50
12164: AND
12165: IFFALSE 12306
12167: GO 12169
12169: DISABLE
12170: LD_INT 0
12172: PPUSH
12173: PPUSH
12174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: LD_OWVAR 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: ST_TO_ADDR
// if not tmp then
12211: LD_VAR 0 3
12215: NOT
12216: IFFALSE 12220
// exit ;
12218: GO 12306
// un := tmp [ rand ( 1 , tmp ) ] ;
12220: LD_ADDR_VAR 0 2
12224: PUSH
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_VAR 0 3
12237: PPUSH
12238: CALL_OW 12
12242: ARRAY
12243: ST_TO_ADDR
// if Crawls ( un ) then
12244: LD_VAR 0 2
12248: PPUSH
12249: CALL_OW 318
12253: IFFALSE 12264
// ComWalk ( un ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_INT 9
12271: PPUSH
12272: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12276: LD_INT 28
12278: PPUSH
12279: LD_OWVAR 2
12283: PPUSH
12284: LD_INT 2
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12291: LD_INT 29
12293: PPUSH
12294: LD_OWVAR 2
12298: PPUSH
12299: LD_INT 2
12301: PPUSH
12302: CALL_OW 322
// end ;
12306: PPOPN 3
12308: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12309: LD_EXP 8
12313: PUSH
12314: LD_EXP 51
12318: AND
12319: IFFALSE 12430
12321: GO 12323
12323: DISABLE
12324: LD_INT 0
12326: PPUSH
12327: PPUSH
12328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 22
12336: PUSH
12337: LD_OWVAR 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 25
12348: PUSH
12349: LD_INT 1
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 69
12364: ST_TO_ADDR
// if not tmp then
12365: LD_VAR 0 3
12369: NOT
12370: IFFALSE 12374
// exit ;
12372: GO 12430
// un := tmp [ rand ( 1 , tmp ) ] ;
12374: LD_ADDR_VAR 0 2
12378: PUSH
12379: LD_VAR 0 3
12383: PUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 12
12396: ARRAY
12397: ST_TO_ADDR
// if Crawls ( un ) then
12398: LD_VAR 0 2
12402: PPUSH
12403: CALL_OW 318
12407: IFFALSE 12418
// ComWalk ( un ) ;
12409: LD_VAR 0 2
12413: PPUSH
12414: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_INT 8
12425: PPUSH
12426: CALL_OW 336
// end ;
12430: PPOPN 3
12432: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12433: LD_EXP 8
12437: PUSH
12438: LD_EXP 52
12442: AND
12443: IFFALSE 12587
12445: GO 12447
12447: DISABLE
12448: LD_INT 0
12450: PPUSH
12451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12452: LD_ADDR_VAR 0 2
12456: PUSH
12457: LD_INT 22
12459: PUSH
12460: LD_OWVAR 2
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 21
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 2
12481: PUSH
12482: LD_INT 34
12484: PUSH
12485: LD_INT 12
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 34
12494: PUSH
12495: LD_INT 51
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 34
12504: PUSH
12505: LD_INT 32
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: PPUSH
12523: CALL_OW 69
12527: ST_TO_ADDR
// if not tmp then
12528: LD_VAR 0 2
12532: NOT
12533: IFFALSE 12537
// exit ;
12535: GO 12587
// for i in tmp do
12537: LD_ADDR_VAR 0 1
12541: PUSH
12542: LD_VAR 0 2
12546: PUSH
12547: FOR_IN
12548: IFFALSE 12585
// if GetCargo ( i , mat_artifact ) = 0 then
12550: LD_VAR 0 1
12554: PPUSH
12555: LD_INT 4
12557: PPUSH
12558: CALL_OW 289
12562: PUSH
12563: LD_INT 0
12565: EQUAL
12566: IFFALSE 12583
// SetCargo ( i , mat_siberit , 100 ) ;
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 3
12575: PPUSH
12576: LD_INT 100
12578: PPUSH
12579: CALL_OW 290
12583: GO 12547
12585: POP
12586: POP
// end ;
12587: PPOPN 2
12589: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12590: LD_EXP 8
12594: PUSH
12595: LD_EXP 53
12599: AND
12600: IFFALSE 12783
12602: GO 12604
12604: DISABLE
12605: LD_INT 0
12607: PPUSH
12608: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: LD_INT 22
12616: PUSH
12617: LD_OWVAR 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: ST_TO_ADDR
// if not tmp then
12631: LD_VAR 0 2
12635: NOT
12636: IFFALSE 12640
// exit ;
12638: GO 12783
// for i := 1 to 2 do
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_INT 2
12652: PUSH
12653: FOR_TO
12654: IFFALSE 12781
// begin uc_side := your_side ;
12656: LD_ADDR_OWVAR 20
12660: PUSH
12661: LD_OWVAR 2
12665: ST_TO_ADDR
// uc_nation := nation_american ;
12666: LD_ADDR_OWVAR 21
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// vc_chassis := us_morphling ;
12674: LD_ADDR_OWVAR 37
12678: PUSH
12679: LD_INT 5
12681: ST_TO_ADDR
// vc_engine := engine_siberite ;
12682: LD_ADDR_OWVAR 39
12686: PUSH
12687: LD_INT 3
12689: ST_TO_ADDR
// vc_control := control_computer ;
12690: LD_ADDR_OWVAR 38
12694: PUSH
12695: LD_INT 3
12697: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12698: LD_ADDR_OWVAR 40
12702: PUSH
12703: LD_INT 10
12705: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12706: LD_VAR 0 2
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: CALL_OW 310
12719: NOT
12720: IFFALSE 12767
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12722: CALL_OW 45
12726: PPUSH
12727: LD_VAR 0 2
12731: PUSH
12732: LD_INT 1
12734: ARRAY
12735: PPUSH
12736: CALL_OW 250
12740: PPUSH
12741: LD_VAR 0 2
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: CALL_OW 251
12754: PPUSH
12755: LD_INT 12
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 50
12765: GO 12779
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12767: CALL_OW 45
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 51
// end ;
12779: GO 12653
12781: POP
12782: POP
// end ;
12783: PPOPN 2
12785: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12786: LD_EXP 8
12790: PUSH
12791: LD_EXP 54
12795: AND
12796: IFFALSE 13018
12798: GO 12800
12800: DISABLE
12801: LD_INT 0
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
12807: PPUSH
12808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12809: LD_ADDR_VAR 0 6
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_OWVAR 2
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 21
12828: PUSH
12829: LD_INT 1
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 3
12838: PUSH
12839: LD_INT 23
12841: PUSH
12842: LD_INT 0
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 69
12862: ST_TO_ADDR
// if not tmp then
12863: LD_VAR 0 6
12867: NOT
12868: IFFALSE 12872
// exit ;
12870: GO 13018
// s1 := rand ( 1 , 4 ) ;
12872: LD_ADDR_VAR 0 2
12876: PUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_INT 4
12882: PPUSH
12883: CALL_OW 12
12887: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: LD_VAR 0 6
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PPUSH
12902: LD_VAR 0 2
12906: PPUSH
12907: CALL_OW 259
12911: ST_TO_ADDR
// if s1 = 1 then
12912: LD_VAR 0 2
12916: PUSH
12917: LD_INT 1
12919: EQUAL
12920: IFFALSE 12940
// s2 := rand ( 2 , 4 ) else
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_INT 2
12929: PPUSH
12930: LD_INT 4
12932: PPUSH
12933: CALL_OW 12
12937: ST_TO_ADDR
12938: GO 12948
// s2 := 1 ;
12940: LD_ADDR_VAR 0 3
12944: PUSH
12945: LD_INT 1
12947: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12948: LD_ADDR_VAR 0 5
12952: PUSH
12953: LD_VAR 0 6
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: CALL_OW 259
12971: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12972: LD_VAR 0 6
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 2
12985: PPUSH
12986: LD_VAR 0 5
12990: PPUSH
12991: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12995: LD_VAR 0 6
12999: PUSH
13000: LD_INT 1
13002: ARRAY
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_VAR 0 4
13013: PPUSH
13014: CALL_OW 237
// end ;
13018: PPOPN 6
13020: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13021: LD_EXP 8
13025: PUSH
13026: LD_EXP 55
13030: AND
13031: IFFALSE 13110
13033: GO 13035
13035: DISABLE
13036: LD_INT 0
13038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13039: LD_ADDR_VAR 0 1
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_OWVAR 2
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 30
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PPUSH
13070: CALL_OW 69
13074: ST_TO_ADDR
// if not tmp then
13075: LD_VAR 0 1
13079: NOT
13080: IFFALSE 13084
// exit ;
13082: GO 13110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13084: LD_VAR 0 1
13088: PUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 1
13096: PPUSH
13097: CALL_OW 12
13101: ARRAY
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: CALL_OW 234
// end ;
13110: PPOPN 1
13112: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13113: LD_EXP 8
13117: PUSH
13118: LD_EXP 56
13122: AND
13123: IFFALSE 13235
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 22
13139: PUSH
13140: LD_OWVAR 2
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 2
13151: PUSH
13152: LD_INT 30
13154: PUSH
13155: LD_INT 27
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 26
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 30
13174: PUSH
13175: LD_INT 28
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: ST_TO_ADDR
// if not tmp then
13197: LD_VAR 0 2
13201: NOT
13202: IFFALSE 13206
// exit ;
13204: GO 13235
// for i in tmp do
13206: LD_ADDR_VAR 0 1
13210: PUSH
13211: LD_VAR 0 2
13215: PUSH
13216: FOR_IN
13217: IFFALSE 13233
// SetLives ( i , 1 ) ;
13219: LD_VAR 0 1
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 234
13231: GO 13216
13233: POP
13234: POP
// end ;
13235: PPOPN 2
13237: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13238: LD_EXP 8
13242: PUSH
13243: LD_EXP 57
13247: AND
13248: IFFALSE 13535
13250: GO 13252
13252: DISABLE
13253: LD_INT 0
13255: PPUSH
13256: PPUSH
13257: PPUSH
// begin i := rand ( 1 , 7 ) ;
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_INT 1
13265: PPUSH
13266: LD_INT 7
13268: PPUSH
13269: CALL_OW 12
13273: ST_TO_ADDR
// case i of 1 :
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 1
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13297
13287: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13288: LD_STRING earthquake(getX(game), 0, 32)
13290: PPUSH
13291: CALL_OW 559
13295: GO 13535
13297: LD_INT 2
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13319
13305: POP
// begin ToLua ( displayStucuk(); ) ;
13306: LD_STRING displayStucuk();
13308: PPUSH
13309: CALL_OW 559
// ResetFog ;
13313: CALL_OW 335
// end ; 3 :
13317: GO 13535
13319: LD_INT 3
13321: DOUBLE
13322: EQUAL
13323: IFTRUE 13327
13325: GO 13431
13327: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13328: LD_ADDR_VAR 0 2
13332: PUSH
13333: LD_INT 22
13335: PUSH
13336: LD_OWVAR 2
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 25
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: ST_TO_ADDR
// if not tmp then
13364: LD_VAR 0 2
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13535
// un := tmp [ rand ( 1 , tmp ) ] ;
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: LD_INT 1
13385: PPUSH
13386: LD_VAR 0 2
13390: PPUSH
13391: CALL_OW 12
13395: ARRAY
13396: ST_TO_ADDR
// if Crawls ( un ) then
13397: LD_VAR 0 3
13401: PPUSH
13402: CALL_OW 318
13406: IFFALSE 13417
// ComWalk ( un ) ;
13408: LD_VAR 0 3
13412: PPUSH
13413: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13417: LD_VAR 0 3
13421: PPUSH
13422: LD_INT 8
13424: PPUSH
13425: CALL_OW 336
// end ; 4 :
13429: GO 13535
13431: LD_INT 4
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13513
13439: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: LD_INT 22
13447: PUSH
13448: LD_OWVAR 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 29
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// if not tmp then
13476: LD_VAR 0 2
13480: NOT
13481: IFFALSE 13485
// exit ;
13483: GO 13535
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13485: LD_VAR 0 2
13489: PUSH
13490: LD_INT 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13498: LD_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PPUSH
13507: CALL_OW 65
// end ; 5 .. 7 :
13511: GO 13535
13513: LD_INT 5
13515: DOUBLE
13516: GREATEREQUAL
13517: IFFALSE 13525
13519: LD_INT 7
13521: DOUBLE
13522: LESSEQUAL
13523: IFTRUE 13527
13525: GO 13534
13527: POP
// StreamSibBomb ; end ;
13528: CALL 9772 0 0
13532: GO 13535
13534: POP
// end ;
13535: PPOPN 3
13537: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13538: LD_EXP 8
13542: PUSH
13543: LD_EXP 58
13547: AND
13548: IFFALSE 13704
13550: GO 13552
13552: DISABLE
13553: LD_INT 0
13555: PPUSH
13556: PPUSH
13557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13558: LD_ADDR_VAR 0 2
13562: PUSH
13563: LD_INT 81
13565: PUSH
13566: LD_OWVAR 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 21
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// if not tmp then
13612: LD_VAR 0 2
13616: NOT
13617: IFFALSE 13621
// exit ;
13619: GO 13704
// p := 0 ;
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13629: LD_INT 35
13631: PPUSH
13632: CALL_OW 67
// p := p + 1 ;
13636: LD_ADDR_VAR 0 3
13640: PUSH
13641: LD_VAR 0 3
13645: PUSH
13646: LD_INT 1
13648: PLUS
13649: ST_TO_ADDR
// for i in tmp do
13650: LD_ADDR_VAR 0 1
13654: PUSH
13655: LD_VAR 0 2
13659: PUSH
13660: FOR_IN
13661: IFFALSE 13692
// if GetLives ( i ) < 1000 then
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 256
13672: PUSH
13673: LD_INT 1000
13675: LESS
13676: IFFALSE 13690
// SetLives ( i , 1000 ) ;
13678: LD_VAR 0 1
13682: PPUSH
13683: LD_INT 1000
13685: PPUSH
13686: CALL_OW 234
13690: GO 13660
13692: POP
13693: POP
// until p > 20 ;
13694: LD_VAR 0 3
13698: PUSH
13699: LD_INT 20
13701: GREATER
13702: IFFALSE 13629
// end ;
13704: PPOPN 3
13706: END
// every 0 0$1 trigger StreamModeActive and sTime do
13707: LD_EXP 8
13711: PUSH
13712: LD_EXP 59
13716: AND
13717: IFFALSE 13752
13719: GO 13721
13721: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13722: LD_INT 28
13724: PPUSH
13725: LD_OWVAR 2
13729: PPUSH
13730: LD_INT 2
13732: PPUSH
13733: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13737: LD_INT 30
13739: PPUSH
13740: LD_OWVAR 2
13744: PPUSH
13745: LD_INT 2
13747: PPUSH
13748: CALL_OW 322
// end ;
13752: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13753: LD_EXP 8
13757: PUSH
13758: LD_EXP 60
13762: AND
13763: IFFALSE 13884
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
13771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_OWVAR 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 21
13791: PUSH
13792: LD_INT 1
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 23
13804: PUSH
13805: LD_INT 0
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: PPUSH
13821: CALL_OW 69
13825: ST_TO_ADDR
// if not tmp then
13826: LD_VAR 0 2
13830: NOT
13831: IFFALSE 13835
// exit ;
13833: GO 13884
// for i in tmp do
13835: LD_ADDR_VAR 0 1
13839: PUSH
13840: LD_VAR 0 2
13844: PUSH
13845: FOR_IN
13846: IFFALSE 13882
// begin if Crawls ( i ) then
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 318
13857: IFFALSE 13868
// ComWalk ( i ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 138
// SetClass ( i , 2 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 2
13875: PPUSH
13876: CALL_OW 336
// end ;
13880: GO 13845
13882: POP
13883: POP
// end ;
13884: PPOPN 2
13886: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13887: LD_EXP 8
13891: PUSH
13892: LD_EXP 61
13896: AND
13897: IFFALSE 14185
13899: GO 13901
13901: DISABLE
13902: LD_INT 0
13904: PPUSH
13905: PPUSH
13906: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13907: LD_OWVAR 2
13911: PPUSH
13912: LD_INT 9
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13925: LD_INT 9
13927: PPUSH
13928: LD_OWVAR 2
13932: PPUSH
13933: CALL_OW 343
// uc_side := 9 ;
13937: LD_ADDR_OWVAR 20
13941: PUSH
13942: LD_INT 9
13944: ST_TO_ADDR
// uc_nation := 2 ;
13945: LD_ADDR_OWVAR 21
13949: PUSH
13950: LD_INT 2
13952: ST_TO_ADDR
// hc_name := Dark Warrior ;
13953: LD_ADDR_OWVAR 26
13957: PUSH
13958: LD_STRING Dark Warrior
13960: ST_TO_ADDR
// hc_gallery :=  ;
13961: LD_ADDR_OWVAR 33
13965: PUSH
13966: LD_STRING 
13968: ST_TO_ADDR
// hc_noskilllimit := true ;
13969: LD_ADDR_OWVAR 76
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13977: LD_ADDR_OWVAR 31
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 30
13987: PUSH
13988: LD_INT 30
13990: PUSH
13991: LD_INT 30
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: ST_TO_ADDR
// un := CreateHuman ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: CALL_OW 44
14009: ST_TO_ADDR
// hc_noskilllimit := false ;
14010: LD_ADDR_OWVAR 76
14014: PUSH
14015: LD_INT 0
14017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14018: LD_VAR 0 3
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: CALL_OW 51
// ToLua ( playRanger() ) ;
14030: LD_STRING playRanger()
14032: PPUSH
14033: CALL_OW 559
// p := 0 ;
14037: LD_ADDR_VAR 0 2
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14045: LD_INT 35
14047: PPUSH
14048: CALL_OW 67
// p := p + 1 ;
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 1
14064: PLUS
14065: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14066: LD_VAR 0 3
14070: PPUSH
14071: CALL_OW 256
14075: PUSH
14076: LD_INT 1000
14078: LESS
14079: IFFALSE 14093
// SetLives ( un , 1000 ) ;
14081: LD_VAR 0 3
14085: PPUSH
14086: LD_INT 1000
14088: PPUSH
14089: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 81
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 91
14112: PUSH
14113: LD_VAR 0 3
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: CALL_OW 74
14144: PPUSH
14145: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14149: LD_VAR 0 2
14153: PUSH
14154: LD_INT 80
14156: GREATER
14157: PUSH
14158: LD_VAR 0 3
14162: PPUSH
14163: CALL_OW 301
14167: OR
14168: IFFALSE 14045
// if un then
14170: LD_VAR 0 3
14174: IFFALSE 14185
// RemoveUnit ( un ) ;
14176: LD_VAR 0 3
14180: PPUSH
14181: CALL_OW 64
// end ;
14185: PPOPN 3
14187: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14188: LD_EXP 62
14192: IFFALSE 14308
14194: GO 14196
14196: DISABLE
14197: LD_INT 0
14199: PPUSH
14200: PPUSH
14201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_INT 81
14209: PUSH
14210: LD_OWVAR 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 21
14221: PUSH
14222: LD_INT 1
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14238: LD_STRING playComputer()
14240: PPUSH
14241: CALL_OW 559
// if not tmp then
14245: LD_VAR 0 2
14249: NOT
14250: IFFALSE 14254
// exit ;
14252: GO 14308
// for i in tmp do
14254: LD_ADDR_VAR 0 1
14258: PUSH
14259: LD_VAR 0 2
14263: PUSH
14264: FOR_IN
14265: IFFALSE 14306
// for j := 1 to 4 do
14267: LD_ADDR_VAR 0 3
14271: PUSH
14272: DOUBLE
14273: LD_INT 1
14275: DEC
14276: ST_TO_ADDR
14277: LD_INT 4
14279: PUSH
14280: FOR_TO
14281: IFFALSE 14302
// SetSkill ( i , j , 10 ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_VAR 0 3
14292: PPUSH
14293: LD_INT 10
14295: PPUSH
14296: CALL_OW 237
14300: GO 14280
14302: POP
14303: POP
14304: GO 14264
14306: POP
14307: POP
// end ;
14308: PPOPN 3
14310: END
// every 0 0$1 trigger s30 do var i , tmp ;
14311: LD_EXP 63
14315: IFFALSE 14384
14317: GO 14319
14319: DISABLE
14320: LD_INT 0
14322: PPUSH
14323: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14324: LD_ADDR_VAR 0 2
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_OWVAR 2
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// if not tmp then
14346: LD_VAR 0 2
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14384
// for i in tmp do
14355: LD_ADDR_VAR 0 1
14359: PUSH
14360: LD_VAR 0 2
14364: PUSH
14365: FOR_IN
14366: IFFALSE 14382
// SetLives ( i , 300 ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_INT 300
14375: PPUSH
14376: CALL_OW 234
14380: GO 14365
14382: POP
14383: POP
// end ;
14384: PPOPN 2
14386: END
// every 0 0$1 trigger s60 do var i , tmp ;
14387: LD_EXP 64
14391: IFFALSE 14460
14393: GO 14395
14395: DISABLE
14396: LD_INT 0
14398: PPUSH
14399: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14400: LD_ADDR_VAR 0 2
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_OWVAR 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if not tmp then
14422: LD_VAR 0 2
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14460
// for i in tmp do
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_VAR 0 2
14440: PUSH
14441: FOR_IN
14442: IFFALSE 14458
// SetLives ( i , 600 ) ;
14444: LD_VAR 0 1
14448: PPUSH
14449: LD_INT 600
14451: PPUSH
14452: CALL_OW 234
14456: GO 14441
14458: POP
14459: POP
// end ;
14460: PPOPN 2
14462: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14463: LD_INT 0
14465: PPUSH
// case cmd of 301 :
14466: LD_VAR 0 1
14470: PUSH
14471: LD_INT 301
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14511
14479: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14480: LD_VAR 0 6
14484: PPUSH
14485: LD_VAR 0 7
14489: PPUSH
14490: LD_VAR 0 8
14494: PPUSH
14495: LD_VAR 0 4
14499: PPUSH
14500: LD_VAR 0 5
14504: PPUSH
14505: CALL 15712 0 5
14509: GO 14632
14511: LD_INT 302
14513: DOUBLE
14514: EQUAL
14515: IFTRUE 14519
14517: GO 14556
14519: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14520: LD_VAR 0 6
14524: PPUSH
14525: LD_VAR 0 7
14529: PPUSH
14530: LD_VAR 0 8
14534: PPUSH
14535: LD_VAR 0 9
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: LD_VAR 0 5
14549: PPUSH
14550: CALL 15803 0 6
14554: GO 14632
14556: LD_INT 303
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14601
14564: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14565: LD_VAR 0 6
14569: PPUSH
14570: LD_VAR 0 7
14574: PPUSH
14575: LD_VAR 0 8
14579: PPUSH
14580: LD_VAR 0 9
14584: PPUSH
14585: LD_VAR 0 4
14589: PPUSH
14590: LD_VAR 0 5
14594: PPUSH
14595: CALL 14637 0 6
14599: GO 14632
14601: LD_INT 304
14603: DOUBLE
14604: EQUAL
14605: IFTRUE 14609
14607: GO 14631
14609: POP
// hHackTeleport ( unit , x , y ) ; end ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_VAR 0 4
14619: PPUSH
14620: LD_VAR 0 5
14624: PPUSH
14625: CALL 16396 0 3
14629: GO 14632
14631: POP
// end ;
14632: LD_VAR 0 12
14636: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14637: LD_INT 0
14639: PPUSH
14640: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14641: LD_VAR 0 1
14645: PUSH
14646: LD_INT 1
14648: LESS
14649: PUSH
14650: LD_VAR 0 1
14654: PUSH
14655: LD_INT 3
14657: GREATER
14658: OR
14659: PUSH
14660: LD_VAR 0 5
14664: PPUSH
14665: LD_VAR 0 6
14669: PPUSH
14670: CALL_OW 428
14674: OR
14675: IFFALSE 14679
// exit ;
14677: GO 15399
// uc_side := your_side ;
14679: LD_ADDR_OWVAR 20
14683: PUSH
14684: LD_OWVAR 2
14688: ST_TO_ADDR
// uc_nation := nation ;
14689: LD_ADDR_OWVAR 21
14693: PUSH
14694: LD_VAR 0 1
14698: ST_TO_ADDR
// bc_level = 1 ;
14699: LD_ADDR_OWVAR 43
14703: PUSH
14704: LD_INT 1
14706: ST_TO_ADDR
// case btype of 1 :
14707: LD_VAR 0 2
14711: PUSH
14712: LD_INT 1
14714: DOUBLE
14715: EQUAL
14716: IFTRUE 14720
14718: GO 14731
14720: POP
// bc_type := b_depot ; 2 :
14721: LD_ADDR_OWVAR 42
14725: PUSH
14726: LD_INT 0
14728: ST_TO_ADDR
14729: GO 15343
14731: LD_INT 2
14733: DOUBLE
14734: EQUAL
14735: IFTRUE 14739
14737: GO 14750
14739: POP
// bc_type := b_warehouse ; 3 :
14740: LD_ADDR_OWVAR 42
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
14748: GO 15343
14750: LD_INT 3
14752: DOUBLE
14753: EQUAL
14754: IFTRUE 14758
14756: GO 14769
14758: POP
// bc_type := b_lab ; 4 .. 9 :
14759: LD_ADDR_OWVAR 42
14763: PUSH
14764: LD_INT 6
14766: ST_TO_ADDR
14767: GO 15343
14769: LD_INT 4
14771: DOUBLE
14772: GREATEREQUAL
14773: IFFALSE 14781
14775: LD_INT 9
14777: DOUBLE
14778: LESSEQUAL
14779: IFTRUE 14783
14781: GO 14835
14783: POP
// begin bc_type := b_lab_half ;
14784: LD_ADDR_OWVAR 42
14788: PUSH
14789: LD_INT 7
14791: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14792: LD_ADDR_OWVAR 44
14796: PUSH
14797: LD_INT 10
14799: PUSH
14800: LD_INT 11
14802: PUSH
14803: LD_INT 12
14805: PUSH
14806: LD_INT 15
14808: PUSH
14809: LD_INT 14
14811: PUSH
14812: LD_INT 13
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: LD_VAR 0 2
14827: PUSH
14828: LD_INT 3
14830: MINUS
14831: ARRAY
14832: ST_TO_ADDR
// end ; 10 .. 13 :
14833: GO 15343
14835: LD_INT 10
14837: DOUBLE
14838: GREATEREQUAL
14839: IFFALSE 14847
14841: LD_INT 13
14843: DOUBLE
14844: LESSEQUAL
14845: IFTRUE 14849
14847: GO 14926
14849: POP
// begin bc_type := b_lab_full ;
14850: LD_ADDR_OWVAR 42
14854: PUSH
14855: LD_INT 8
14857: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14858: LD_ADDR_OWVAR 44
14862: PUSH
14863: LD_INT 10
14865: PUSH
14866: LD_INT 12
14868: PUSH
14869: LD_INT 14
14871: PUSH
14872: LD_INT 13
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: LD_INT 9
14888: MINUS
14889: ARRAY
14890: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14891: LD_ADDR_OWVAR 45
14895: PUSH
14896: LD_INT 11
14898: PUSH
14899: LD_INT 15
14901: PUSH
14902: LD_INT 12
14904: PUSH
14905: LD_INT 15
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 9
14921: MINUS
14922: ARRAY
14923: ST_TO_ADDR
// end ; 14 :
14924: GO 15343
14926: LD_INT 14
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 14945
14934: POP
// bc_type := b_workshop ; 15 :
14935: LD_ADDR_OWVAR 42
14939: PUSH
14940: LD_INT 2
14942: ST_TO_ADDR
14943: GO 15343
14945: LD_INT 15
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 14964
14953: POP
// bc_type := b_factory ; 16 :
14954: LD_ADDR_OWVAR 42
14958: PUSH
14959: LD_INT 3
14961: ST_TO_ADDR
14962: GO 15343
14964: LD_INT 16
14966: DOUBLE
14967: EQUAL
14968: IFTRUE 14972
14970: GO 14983
14972: POP
// bc_type := b_ext_gun ; 17 :
14973: LD_ADDR_OWVAR 42
14977: PUSH
14978: LD_INT 17
14980: ST_TO_ADDR
14981: GO 15343
14983: LD_INT 17
14985: DOUBLE
14986: EQUAL
14987: IFTRUE 14991
14989: GO 15019
14991: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14992: LD_ADDR_OWVAR 42
14996: PUSH
14997: LD_INT 19
14999: PUSH
15000: LD_INT 23
15002: PUSH
15003: LD_INT 19
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: LD_VAR 0 1
15015: ARRAY
15016: ST_TO_ADDR
15017: GO 15343
15019: LD_INT 18
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15038
15027: POP
// bc_type := b_ext_radar ; 19 :
15028: LD_ADDR_OWVAR 42
15032: PUSH
15033: LD_INT 20
15035: ST_TO_ADDR
15036: GO 15343
15038: LD_INT 19
15040: DOUBLE
15041: EQUAL
15042: IFTRUE 15046
15044: GO 15057
15046: POP
// bc_type := b_ext_radio ; 20 :
15047: LD_ADDR_OWVAR 42
15051: PUSH
15052: LD_INT 22
15054: ST_TO_ADDR
15055: GO 15343
15057: LD_INT 20
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15076
15065: POP
// bc_type := b_ext_siberium ; 21 :
15066: LD_ADDR_OWVAR 42
15070: PUSH
15071: LD_INT 21
15073: ST_TO_ADDR
15074: GO 15343
15076: LD_INT 21
15078: DOUBLE
15079: EQUAL
15080: IFTRUE 15084
15082: GO 15095
15084: POP
// bc_type := b_ext_computer ; 22 :
15085: LD_ADDR_OWVAR 42
15089: PUSH
15090: LD_INT 24
15092: ST_TO_ADDR
15093: GO 15343
15095: LD_INT 22
15097: DOUBLE
15098: EQUAL
15099: IFTRUE 15103
15101: GO 15114
15103: POP
// bc_type := b_ext_track ; 23 :
15104: LD_ADDR_OWVAR 42
15108: PUSH
15109: LD_INT 16
15111: ST_TO_ADDR
15112: GO 15343
15114: LD_INT 23
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15122
15120: GO 15133
15122: POP
// bc_type := b_ext_laser ; 24 :
15123: LD_ADDR_OWVAR 42
15127: PUSH
15128: LD_INT 25
15130: ST_TO_ADDR
15131: GO 15343
15133: LD_INT 24
15135: DOUBLE
15136: EQUAL
15137: IFTRUE 15141
15139: GO 15152
15141: POP
// bc_type := b_control_tower ; 25 :
15142: LD_ADDR_OWVAR 42
15146: PUSH
15147: LD_INT 36
15149: ST_TO_ADDR
15150: GO 15343
15152: LD_INT 25
15154: DOUBLE
15155: EQUAL
15156: IFTRUE 15160
15158: GO 15171
15160: POP
// bc_type := b_breastwork ; 26 :
15161: LD_ADDR_OWVAR 42
15165: PUSH
15166: LD_INT 31
15168: ST_TO_ADDR
15169: GO 15343
15171: LD_INT 26
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15190
15179: POP
// bc_type := b_bunker ; 27 :
15180: LD_ADDR_OWVAR 42
15184: PUSH
15185: LD_INT 32
15187: ST_TO_ADDR
15188: GO 15343
15190: LD_INT 27
15192: DOUBLE
15193: EQUAL
15194: IFTRUE 15198
15196: GO 15209
15198: POP
// bc_type := b_turret ; 28 :
15199: LD_ADDR_OWVAR 42
15203: PUSH
15204: LD_INT 33
15206: ST_TO_ADDR
15207: GO 15343
15209: LD_INT 28
15211: DOUBLE
15212: EQUAL
15213: IFTRUE 15217
15215: GO 15228
15217: POP
// bc_type := b_armoury ; 29 :
15218: LD_ADDR_OWVAR 42
15222: PUSH
15223: LD_INT 4
15225: ST_TO_ADDR
15226: GO 15343
15228: LD_INT 29
15230: DOUBLE
15231: EQUAL
15232: IFTRUE 15236
15234: GO 15247
15236: POP
// bc_type := b_barracks ; 30 :
15237: LD_ADDR_OWVAR 42
15241: PUSH
15242: LD_INT 5
15244: ST_TO_ADDR
15245: GO 15343
15247: LD_INT 30
15249: DOUBLE
15250: EQUAL
15251: IFTRUE 15255
15253: GO 15266
15255: POP
// bc_type := b_solar_power ; 31 :
15256: LD_ADDR_OWVAR 42
15260: PUSH
15261: LD_INT 27
15263: ST_TO_ADDR
15264: GO 15343
15266: LD_INT 31
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15285
15274: POP
// bc_type := b_oil_power ; 32 :
15275: LD_ADDR_OWVAR 42
15279: PUSH
15280: LD_INT 26
15282: ST_TO_ADDR
15283: GO 15343
15285: LD_INT 32
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15304
15293: POP
// bc_type := b_siberite_power ; 33 :
15294: LD_ADDR_OWVAR 42
15298: PUSH
15299: LD_INT 28
15301: ST_TO_ADDR
15302: GO 15343
15304: LD_INT 33
15306: DOUBLE
15307: EQUAL
15308: IFTRUE 15312
15310: GO 15323
15312: POP
// bc_type := b_oil_mine ; 34 :
15313: LD_ADDR_OWVAR 42
15317: PUSH
15318: LD_INT 29
15320: ST_TO_ADDR
15321: GO 15343
15323: LD_INT 34
15325: DOUBLE
15326: EQUAL
15327: IFTRUE 15331
15329: GO 15342
15331: POP
// bc_type := b_siberite_mine ; end ;
15332: LD_ADDR_OWVAR 42
15336: PUSH
15337: LD_INT 30
15339: ST_TO_ADDR
15340: GO 15343
15342: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15343: LD_ADDR_VAR 0 8
15347: PUSH
15348: LD_VAR 0 5
15352: PPUSH
15353: LD_VAR 0 6
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: CALL_OW 47
15367: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15368: LD_OWVAR 42
15372: PUSH
15373: LD_INT 32
15375: PUSH
15376: LD_INT 33
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: IN
15383: IFFALSE 15399
// PlaceWeaponTurret ( b , weapon ) ;
15385: LD_VAR 0 8
15389: PPUSH
15390: LD_VAR 0 4
15394: PPUSH
15395: CALL_OW 431
// end ;
15399: LD_VAR 0 7
15403: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15404: LD_INT 0
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15410: LD_ADDR_VAR 0 4
15414: PUSH
15415: LD_INT 22
15417: PUSH
15418: LD_OWVAR 2
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: LD_INT 30
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 30
15442: PUSH
15443: LD_INT 1
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 69
15463: ST_TO_ADDR
// if not tmp then
15464: LD_VAR 0 4
15468: NOT
15469: IFFALSE 15473
// exit ;
15471: GO 15532
// for i in tmp do
15473: LD_ADDR_VAR 0 2
15477: PUSH
15478: LD_VAR 0 4
15482: PUSH
15483: FOR_IN
15484: IFFALSE 15530
// for j = 1 to 3 do
15486: LD_ADDR_VAR 0 3
15490: PUSH
15491: DOUBLE
15492: LD_INT 1
15494: DEC
15495: ST_TO_ADDR
15496: LD_INT 3
15498: PUSH
15499: FOR_TO
15500: IFFALSE 15526
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15502: LD_VAR 0 2
15506: PPUSH
15507: CALL_OW 274
15511: PPUSH
15512: LD_VAR 0 3
15516: PPUSH
15517: LD_INT 99999
15519: PPUSH
15520: CALL_OW 277
15524: GO 15499
15526: POP
15527: POP
15528: GO 15483
15530: POP
15531: POP
// end ;
15532: LD_VAR 0 1
15536: RET
// export function hHackSetLevel10 ; var i , j ; begin
15537: LD_INT 0
15539: PPUSH
15540: PPUSH
15541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15542: LD_ADDR_VAR 0 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: PUSH
15562: FOR_IN
15563: IFFALSE 15615
// if IsSelected ( i ) then
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 306
15574: IFFALSE 15613
// begin for j := 1 to 4 do
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: DOUBLE
15582: LD_INT 1
15584: DEC
15585: ST_TO_ADDR
15586: LD_INT 4
15588: PUSH
15589: FOR_TO
15590: IFFALSE 15611
// SetSkill ( i , j , 10 ) ;
15592: LD_VAR 0 2
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 10
15604: PPUSH
15605: CALL_OW 237
15609: GO 15589
15611: POP
15612: POP
// end ;
15613: GO 15562
15615: POP
15616: POP
// end ;
15617: LD_VAR 0 1
15621: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15622: LD_INT 0
15624: PPUSH
15625: PPUSH
15626: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15627: LD_ADDR_VAR 0 2
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_OWVAR 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 21
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PUSH
15663: FOR_IN
15664: IFFALSE 15705
// begin for j := 1 to 4 do
15666: LD_ADDR_VAR 0 3
15670: PUSH
15671: DOUBLE
15672: LD_INT 1
15674: DEC
15675: ST_TO_ADDR
15676: LD_INT 4
15678: PUSH
15679: FOR_TO
15680: IFFALSE 15701
// SetSkill ( i , j , 10 ) ;
15682: LD_VAR 0 2
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 10
15694: PPUSH
15695: CALL_OW 237
15699: GO 15679
15701: POP
15702: POP
// end ;
15703: GO 15663
15705: POP
15706: POP
// end ;
15707: LD_VAR 0 1
15711: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15712: LD_INT 0
15714: PPUSH
// uc_side := your_side ;
15715: LD_ADDR_OWVAR 20
15719: PUSH
15720: LD_OWVAR 2
15724: ST_TO_ADDR
// uc_nation := nation ;
15725: LD_ADDR_OWVAR 21
15729: PUSH
15730: LD_VAR 0 1
15734: ST_TO_ADDR
// InitHc ;
15735: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15739: LD_INT 0
15741: PPUSH
15742: LD_VAR 0 2
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15756: LD_VAR 0 4
15760: PPUSH
15761: LD_VAR 0 5
15765: PPUSH
15766: CALL_OW 428
15770: PUSH
15771: LD_INT 0
15773: EQUAL
15774: IFFALSE 15798
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15776: CALL_OW 44
15780: PPUSH
15781: LD_VAR 0 4
15785: PPUSH
15786: LD_VAR 0 5
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 48
// end ;
15798: LD_VAR 0 6
15802: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15803: LD_INT 0
15805: PPUSH
15806: PPUSH
// uc_side := your_side ;
15807: LD_ADDR_OWVAR 20
15811: PUSH
15812: LD_OWVAR 2
15816: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15817: LD_VAR 0 1
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: LD_INT 3
15830: PUSH
15831: LD_INT 4
15833: PUSH
15834: LD_INT 5
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: IN
15844: IFFALSE 15856
// uc_nation := nation_american else
15846: LD_ADDR_OWVAR 21
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
15854: GO 15899
// if chassis in [ 11 , 12 , 13 , 14 ] then
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 11
15863: PUSH
15864: LD_INT 12
15866: PUSH
15867: LD_INT 13
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: IN
15879: IFFALSE 15891
// uc_nation := nation_arabian else
15881: LD_ADDR_OWVAR 21
15885: PUSH
15886: LD_INT 2
15888: ST_TO_ADDR
15889: GO 15899
// uc_nation := nation_russian ;
15891: LD_ADDR_OWVAR 21
15895: PUSH
15896: LD_INT 3
15898: ST_TO_ADDR
// vc_chassis := chassis ;
15899: LD_ADDR_OWVAR 37
15903: PUSH
15904: LD_VAR 0 1
15908: ST_TO_ADDR
// vc_engine := engine ;
15909: LD_ADDR_OWVAR 39
15913: PUSH
15914: LD_VAR 0 2
15918: ST_TO_ADDR
// vc_control := control ;
15919: LD_ADDR_OWVAR 38
15923: PUSH
15924: LD_VAR 0 3
15928: ST_TO_ADDR
// vc_weapon := weapon ;
15929: LD_ADDR_OWVAR 40
15933: PUSH
15934: LD_VAR 0 4
15938: ST_TO_ADDR
// un := CreateVehicle ;
15939: LD_ADDR_VAR 0 8
15943: PUSH
15944: CALL_OW 45
15948: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15949: LD_VAR 0 8
15953: PPUSH
15954: LD_INT 0
15956: PPUSH
15957: LD_INT 5
15959: PPUSH
15960: CALL_OW 12
15964: PPUSH
15965: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15969: LD_VAR 0 8
15973: PPUSH
15974: LD_VAR 0 5
15978: PPUSH
15979: LD_VAR 0 6
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 48
// end ;
15991: LD_VAR 0 7
15995: RET
// export hInvincible ; every 1 do
15996: GO 15998
15998: DISABLE
// hInvincible := [ ] ;
15999: LD_ADDR_EXP 65
16003: PUSH
16004: EMPTY
16005: ST_TO_ADDR
16006: END
// every 10 do var i ;
16007: GO 16009
16009: DISABLE
16010: LD_INT 0
16012: PPUSH
// begin enable ;
16013: ENABLE
// if not hInvincible then
16014: LD_EXP 65
16018: NOT
16019: IFFALSE 16023
// exit ;
16021: GO 16067
// for i in hInvincible do
16023: LD_ADDR_VAR 0 1
16027: PUSH
16028: LD_EXP 65
16032: PUSH
16033: FOR_IN
16034: IFFALSE 16065
// if GetLives ( i ) < 1000 then
16036: LD_VAR 0 1
16040: PPUSH
16041: CALL_OW 256
16045: PUSH
16046: LD_INT 1000
16048: LESS
16049: IFFALSE 16063
// SetLives ( i , 1000 ) ;
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_INT 1000
16058: PPUSH
16059: CALL_OW 234
16063: GO 16033
16065: POP
16066: POP
// end ;
16067: PPOPN 1
16069: END
// export function hHackInvincible ; var i ; begin
16070: LD_INT 0
16072: PPUSH
16073: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 21
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 2
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: PPUSH
16107: CALL_OW 69
16111: PUSH
16112: FOR_IN
16113: IFFALSE 16174
// if IsSelected ( i ) then
16115: LD_VAR 0 2
16119: PPUSH
16120: CALL_OW 306
16124: IFFALSE 16172
// begin if i in hInvincible then
16126: LD_VAR 0 2
16130: PUSH
16131: LD_EXP 65
16135: IN
16136: IFFALSE 16156
// hInvincible := hInvincible diff i else
16138: LD_ADDR_EXP 65
16142: PUSH
16143: LD_EXP 65
16147: PUSH
16148: LD_VAR 0 2
16152: DIFF
16153: ST_TO_ADDR
16154: GO 16172
// hInvincible := hInvincible union i ;
16156: LD_ADDR_EXP 65
16160: PUSH
16161: LD_EXP 65
16165: PUSH
16166: LD_VAR 0 2
16170: UNION
16171: ST_TO_ADDR
// end ;
16172: GO 16112
16174: POP
16175: POP
// end ;
16176: LD_VAR 0 1
16180: RET
// export function hHackInvisible ; var i , j ; begin
16181: LD_INT 0
16183: PPUSH
16184: PPUSH
16185: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: PUSH
16206: FOR_IN
16207: IFFALSE 16231
// if IsSelected ( i ) then
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 306
16218: IFFALSE 16229
// ComForceInvisible ( i ) ;
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 496
16229: GO 16206
16231: POP
16232: POP
// end ;
16233: LD_VAR 0 1
16237: RET
// export function hHackChangeYourSide ; begin
16238: LD_INT 0
16240: PPUSH
// if your_side = 8 then
16241: LD_OWVAR 2
16245: PUSH
16246: LD_INT 8
16248: EQUAL
16249: IFFALSE 16261
// your_side := 0 else
16251: LD_ADDR_OWVAR 2
16255: PUSH
16256: LD_INT 0
16258: ST_TO_ADDR
16259: GO 16275
// your_side := your_side + 1 ;
16261: LD_ADDR_OWVAR 2
16265: PUSH
16266: LD_OWVAR 2
16270: PUSH
16271: LD_INT 1
16273: PLUS
16274: ST_TO_ADDR
// end ;
16275: LD_VAR 0 1
16279: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
16284: PPUSH
// for i in all_units do
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_OWVAR 3
16294: PUSH
16295: FOR_IN
16296: IFFALSE 16374
// if IsSelected ( i ) then
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL_OW 306
16307: IFFALSE 16372
// begin j := GetSide ( i ) ;
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: CALL_OW 255
16323: ST_TO_ADDR
// if j = 8 then
16324: LD_VAR 0 3
16328: PUSH
16329: LD_INT 8
16331: EQUAL
16332: IFFALSE 16344
// j := 0 else
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
16342: GO 16358
// j := j + 1 ;
16344: LD_ADDR_VAR 0 3
16348: PUSH
16349: LD_VAR 0 3
16353: PUSH
16354: LD_INT 1
16356: PLUS
16357: ST_TO_ADDR
// SetSide ( i , j ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: CALL_OW 235
// end ;
16372: GO 16295
16374: POP
16375: POP
// end ;
16376: LD_VAR 0 1
16380: RET
// export function hHackFog ; begin
16381: LD_INT 0
16383: PPUSH
// FogOff ( true ) ;
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 344
// end ;
16391: LD_VAR 0 1
16395: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16396: LD_INT 0
16398: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16399: LD_VAR 0 1
16403: PPUSH
16404: LD_VAR 0 2
16408: PPUSH
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 483
// CenterOnXY ( x , y ) ;
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: CALL_OW 84
// end ;
16438: LD_VAR 0 4
16442: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16443: LD_INT 0
16445: PPUSH
16446: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16447: LD_VAR 0 1
16451: NOT
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: CALL_OW 488
16467: NOT
16468: OR
16469: PUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 266
16479: PUSH
16480: LD_INT 3
16482: NONEQUAL
16483: PUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 247
16493: PUSH
16494: LD_INT 1
16496: EQUAL
16497: NOT
16498: AND
16499: OR
16500: IFFALSE 16504
// exit ;
16502: GO 16653
// if GetType ( factory ) = unit_human then
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 247
16513: PUSH
16514: LD_INT 1
16516: EQUAL
16517: IFFALSE 16534
// factory := IsInUnit ( factory ) ;
16519: LD_ADDR_VAR 0 1
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 310
16533: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 266
16543: PUSH
16544: LD_INT 3
16546: NONEQUAL
16547: IFFALSE 16551
// exit ;
16549: GO 16653
// if HexInfo ( x , y ) = factory then
16551: LD_VAR 0 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: CALL_OW 428
16565: PUSH
16566: LD_VAR 0 1
16570: EQUAL
16571: IFFALSE 16598
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16573: LD_ADDR_EXP 66
16577: PUSH
16578: LD_EXP 66
16582: PPUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 0
16590: PPUSH
16591: CALL_OW 1
16595: ST_TO_ADDR
16596: GO 16649
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16598: LD_ADDR_EXP 66
16602: PUSH
16603: LD_EXP 66
16607: PPUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 255
16622: PUSH
16623: LD_VAR 0 1
16627: PUSH
16628: LD_VAR 0 2
16632: PUSH
16633: LD_VAR 0 3
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16649: CALL 16658 0 0
// end ;
16653: LD_VAR 0 4
16657: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16658: LD_INT 0
16660: PPUSH
16661: PPUSH
16662: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16663: LD_STRING resetFactoryWaypoint();
16665: PPUSH
16666: CALL_OW 559
// if factoryWaypoints then
16670: LD_EXP 66
16674: IFFALSE 16800
// begin list := PrepareArray ( factoryWaypoints ) ;
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_EXP 66
16685: PPUSH
16686: CALL 63432 0 1
16690: ST_TO_ADDR
// for i := 1 to list do
16691: LD_ADDR_VAR 0 2
16695: PUSH
16696: DOUBLE
16697: LD_INT 1
16699: DEC
16700: ST_TO_ADDR
16701: LD_VAR 0 3
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16798
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16709: LD_STRING setFactoryWaypointXY(
16711: PUSH
16712: LD_VAR 0 3
16716: PUSH
16717: LD_VAR 0 2
16721: ARRAY
16722: PUSH
16723: LD_INT 1
16725: ARRAY
16726: STR
16727: PUSH
16728: LD_STRING ,
16730: STR
16731: PUSH
16732: LD_VAR 0 3
16736: PUSH
16737: LD_VAR 0 2
16741: ARRAY
16742: PUSH
16743: LD_INT 2
16745: ARRAY
16746: STR
16747: PUSH
16748: LD_STRING ,
16750: STR
16751: PUSH
16752: LD_VAR 0 3
16756: PUSH
16757: LD_VAR 0 2
16761: ARRAY
16762: PUSH
16763: LD_INT 3
16765: ARRAY
16766: STR
16767: PUSH
16768: LD_STRING ,
16770: STR
16771: PUSH
16772: LD_VAR 0 3
16776: PUSH
16777: LD_VAR 0 2
16781: ARRAY
16782: PUSH
16783: LD_INT 4
16785: ARRAY
16786: STR
16787: PUSH
16788: LD_STRING )
16790: STR
16791: PPUSH
16792: CALL_OW 559
16796: GO 16706
16798: POP
16799: POP
// end ; end ;
16800: LD_VAR 0 1
16804: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16805: LD_INT 0
16807: PPUSH
// if HexInfo ( x , y ) = warehouse then
16808: LD_VAR 0 2
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: CALL_OW 428
16822: PUSH
16823: LD_VAR 0 1
16827: EQUAL
16828: IFFALSE 16855
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16830: LD_ADDR_EXP 67
16834: PUSH
16835: LD_EXP 67
16839: PPUSH
16840: LD_VAR 0 1
16844: PPUSH
16845: LD_INT 0
16847: PPUSH
16848: CALL_OW 1
16852: ST_TO_ADDR
16853: GO 16906
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16855: LD_ADDR_EXP 67
16859: PUSH
16860: LD_EXP 67
16864: PPUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 255
16879: PUSH
16880: LD_VAR 0 1
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: LD_VAR 0 3
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16906: CALL 16915 0 0
// end ;
16910: LD_VAR 0 4
16914: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
16919: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16920: LD_STRING resetWarehouseGatheringPoints();
16922: PPUSH
16923: CALL_OW 559
// if warehouseGatheringPoints then
16927: LD_EXP 67
16931: IFFALSE 17057
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16933: LD_ADDR_VAR 0 3
16937: PUSH
16938: LD_EXP 67
16942: PPUSH
16943: CALL 63432 0 1
16947: ST_TO_ADDR
// for i := 1 to list do
16948: LD_ADDR_VAR 0 2
16952: PUSH
16953: DOUBLE
16954: LD_INT 1
16956: DEC
16957: ST_TO_ADDR
16958: LD_VAR 0 3
16962: PUSH
16963: FOR_TO
16964: IFFALSE 17055
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16966: LD_STRING setWarehouseGatheringPointXY(
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_VAR 0 2
16978: ARRAY
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: STR
16984: PUSH
16985: LD_STRING ,
16987: STR
16988: PUSH
16989: LD_VAR 0 3
16993: PUSH
16994: LD_VAR 0 2
16998: ARRAY
16999: PUSH
17000: LD_INT 2
17002: ARRAY
17003: STR
17004: PUSH
17005: LD_STRING ,
17007: STR
17008: PUSH
17009: LD_VAR 0 3
17013: PUSH
17014: LD_VAR 0 2
17018: ARRAY
17019: PUSH
17020: LD_INT 3
17022: ARRAY
17023: STR
17024: PUSH
17025: LD_STRING ,
17027: STR
17028: PUSH
17029: LD_VAR 0 3
17033: PUSH
17034: LD_VAR 0 2
17038: ARRAY
17039: PUSH
17040: LD_INT 4
17042: ARRAY
17043: STR
17044: PUSH
17045: LD_STRING )
17047: STR
17048: PPUSH
17049: CALL_OW 559
17053: GO 16963
17055: POP
17056: POP
// end ; end ;
17057: LD_VAR 0 1
17061: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17062: LD_EXP 67
17066: IFFALSE 17751
17068: GO 17070
17070: DISABLE
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
17081: PPUSH
// begin enable ;
17082: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17083: LD_ADDR_VAR 0 3
17087: PUSH
17088: LD_EXP 67
17092: PPUSH
17093: CALL 63432 0 1
17097: ST_TO_ADDR
// if not list then
17098: LD_VAR 0 3
17102: NOT
17103: IFFALSE 17107
// exit ;
17105: GO 17751
// for i := 1 to list do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: DOUBLE
17113: LD_INT 1
17115: DEC
17116: ST_TO_ADDR
17117: LD_VAR 0 3
17121: PUSH
17122: FOR_TO
17123: IFFALSE 17749
// begin depot := list [ i ] [ 2 ] ;
17125: LD_ADDR_VAR 0 8
17129: PUSH
17130: LD_VAR 0 3
17134: PUSH
17135: LD_VAR 0 1
17139: ARRAY
17140: PUSH
17141: LD_INT 2
17143: ARRAY
17144: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17145: LD_ADDR_VAR 0 5
17149: PUSH
17150: LD_VAR 0 3
17154: PUSH
17155: LD_VAR 0 1
17159: ARRAY
17160: PUSH
17161: LD_INT 1
17163: ARRAY
17164: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17165: LD_VAR 0 8
17169: PPUSH
17170: CALL_OW 301
17174: PUSH
17175: LD_VAR 0 5
17179: PUSH
17180: LD_VAR 0 8
17184: PPUSH
17185: CALL_OW 255
17189: NONEQUAL
17190: OR
17191: IFFALSE 17220
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17193: LD_ADDR_EXP 67
17197: PUSH
17198: LD_EXP 67
17202: PPUSH
17203: LD_VAR 0 8
17207: PPUSH
17208: LD_INT 0
17210: PPUSH
17211: CALL_OW 1
17215: ST_TO_ADDR
// exit ;
17216: POP
17217: POP
17218: GO 17751
// end ; x := list [ i ] [ 3 ] ;
17220: LD_ADDR_VAR 0 6
17224: PUSH
17225: LD_VAR 0 3
17229: PUSH
17230: LD_VAR 0 1
17234: ARRAY
17235: PUSH
17236: LD_INT 3
17238: ARRAY
17239: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17240: LD_ADDR_VAR 0 7
17244: PUSH
17245: LD_VAR 0 3
17249: PUSH
17250: LD_VAR 0 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17260: LD_ADDR_VAR 0 9
17264: PUSH
17265: LD_VAR 0 6
17269: PPUSH
17270: LD_VAR 0 7
17274: PPUSH
17275: LD_INT 16
17277: PPUSH
17278: CALL 62020 0 3
17282: ST_TO_ADDR
// if not cratesNearbyPoint then
17283: LD_VAR 0 9
17287: NOT
17288: IFFALSE 17294
// exit ;
17290: POP
17291: POP
17292: GO 17751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17294: LD_ADDR_VAR 0 4
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_VAR 0 5
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 60
17316: PUSH
17317: EMPTY
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 91
17326: PUSH
17327: LD_VAR 0 8
17331: PUSH
17332: LD_INT 6
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: LD_INT 25
17345: PUSH
17346: LD_INT 2
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 25
17355: PUSH
17356: LD_INT 16
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 69
17378: PUSH
17379: LD_VAR 0 8
17383: PPUSH
17384: CALL_OW 313
17388: PPUSH
17389: LD_INT 3
17391: PUSH
17392: LD_INT 60
17394: PUSH
17395: EMPTY
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 25
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 25
17417: PUSH
17418: LD_INT 16
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 72
17438: UNION
17439: ST_TO_ADDR
// if tmp then
17440: LD_VAR 0 4
17444: IFFALSE 17524
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_VAR 0 4
17455: PPUSH
17456: LD_INT 3
17458: PPUSH
17459: CALL 59989 0 2
17463: ST_TO_ADDR
// for j in tmp do
17464: LD_ADDR_VAR 0 2
17468: PUSH
17469: LD_VAR 0 4
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17518
// begin if IsInUnit ( j ) then
17477: LD_VAR 0 2
17481: PPUSH
17482: CALL_OW 310
17486: IFFALSE 17497
// ComExit ( j ) ;
17488: LD_VAR 0 2
17492: PPUSH
17493: CALL 60072 0 1
// AddComCollect ( j , x , y ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_VAR 0 6
17506: PPUSH
17507: LD_VAR 0 7
17511: PPUSH
17512: CALL_OW 177
// end ;
17516: GO 17474
17518: POP
17519: POP
// exit ;
17520: POP
17521: POP
17522: GO 17751
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17524: LD_ADDR_VAR 0 4
17528: PUSH
17529: LD_INT 22
17531: PUSH
17532: LD_VAR 0 5
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 91
17543: PUSH
17544: LD_VAR 0 8
17548: PUSH
17549: LD_INT 8
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 34
17562: PUSH
17563: LD_INT 12
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 34
17572: PUSH
17573: LD_INT 51
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 34
17582: PUSH
17583: LD_INT 32
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 34
17592: PUSH
17593: LD_INT 89
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL_OW 69
17616: ST_TO_ADDR
// if tmp then
17617: LD_VAR 0 4
17621: IFFALSE 17747
// begin for j in tmp do
17623: LD_ADDR_VAR 0 2
17627: PUSH
17628: LD_VAR 0 4
17632: PUSH
17633: FOR_IN
17634: IFFALSE 17745
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17636: LD_VAR 0 2
17640: PPUSH
17641: CALL_OW 262
17645: PUSH
17646: LD_INT 3
17648: EQUAL
17649: PUSH
17650: LD_VAR 0 2
17654: PPUSH
17655: CALL_OW 261
17659: PUSH
17660: LD_INT 20
17662: GREATER
17663: OR
17664: PUSH
17665: LD_VAR 0 2
17669: PPUSH
17670: CALL_OW 314
17674: NOT
17675: AND
17676: PUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 263
17686: PUSH
17687: LD_INT 1
17689: NONEQUAL
17690: PUSH
17691: LD_VAR 0 2
17695: PPUSH
17696: CALL_OW 311
17700: OR
17701: AND
17702: IFFALSE 17743
// begin ComCollect ( j , x , y ) ;
17704: LD_VAR 0 2
17708: PPUSH
17709: LD_VAR 0 6
17713: PPUSH
17714: LD_VAR 0 7
17718: PPUSH
17719: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: LD_VAR 0 8
17732: PPUSH
17733: CALL_OW 172
// exit ;
17737: POP
17738: POP
17739: POP
17740: POP
17741: GO 17751
// end ;
17743: GO 17633
17745: POP
17746: POP
// end ; end ;
17747: GO 17122
17749: POP
17750: POP
// end ; end_of_file
17751: PPOPN 9
17753: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL_OW 264
17769: PUSH
17770: LD_INT 91
17772: EQUAL
17773: IFFALSE 17845
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17775: LD_INT 68
17777: PPUSH
17778: LD_VAR 0 1
17782: PPUSH
17783: CALL_OW 255
17787: PPUSH
17788: CALL_OW 321
17792: PUSH
17793: LD_INT 2
17795: EQUAL
17796: IFFALSE 17808
// eff := 70 else
17798: LD_ADDR_VAR 0 4
17802: PUSH
17803: LD_INT 70
17805: ST_TO_ADDR
17806: GO 17816
// eff := 30 ;
17808: LD_ADDR_VAR 0 4
17812: PUSH
17813: LD_INT 30
17815: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 250
17825: PPUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 251
17835: PPUSH
17836: LD_VAR 0 4
17840: PPUSH
17841: CALL_OW 495
// end ; end ;
17845: LD_VAR 0 2
17849: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17850: LD_INT 0
17852: PPUSH
// end ;
17853: LD_VAR 0 4
17857: RET
// export function SOS_Command ( cmd ) ; begin
17858: LD_INT 0
17860: PPUSH
// end ;
17861: LD_VAR 0 2
17865: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17866: LD_INT 0
17868: PPUSH
// end ;
17869: LD_VAR 0 6
17873: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// if not vehicle or not factory then
17878: LD_VAR 0 1
17882: NOT
17883: PUSH
17884: LD_VAR 0 2
17888: NOT
17889: OR
17890: IFFALSE 17894
// exit ;
17892: GO 18125
// if factoryWaypoints >= factory then
17894: LD_EXP 66
17898: PUSH
17899: LD_VAR 0 2
17903: GREATEREQUAL
17904: IFFALSE 18125
// if factoryWaypoints [ factory ] then
17906: LD_EXP 66
17910: PUSH
17911: LD_VAR 0 2
17915: ARRAY
17916: IFFALSE 18125
// begin if GetControl ( vehicle ) = control_manual then
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 263
17927: PUSH
17928: LD_INT 1
17930: EQUAL
17931: IFFALSE 18012
// begin driver := IsDrivenBy ( vehicle ) ;
17933: LD_ADDR_VAR 0 4
17937: PUSH
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 311
17947: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17948: LD_VAR 0 4
17952: PPUSH
17953: LD_EXP 66
17957: PUSH
17958: LD_VAR 0 2
17962: ARRAY
17963: PUSH
17964: LD_INT 3
17966: ARRAY
17967: PPUSH
17968: LD_EXP 66
17972: PUSH
17973: LD_VAR 0 2
17977: ARRAY
17978: PUSH
17979: LD_INT 4
17981: ARRAY
17982: PPUSH
17983: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17987: LD_VAR 0 4
17991: PPUSH
17992: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17996: LD_VAR 0 4
18000: PPUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 180
// end else
18010: GO 18125
// if GetControl ( vehicle ) = control_remote then
18012: LD_VAR 0 1
18016: PPUSH
18017: CALL_OW 263
18021: PUSH
18022: LD_INT 2
18024: EQUAL
18025: IFFALSE 18086
// begin wait ( 0 0$2 ) ;
18027: LD_INT 70
18029: PPUSH
18030: CALL_OW 67
// if Connect ( vehicle ) then
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL 30312 0 1
18043: IFFALSE 18084
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18045: LD_VAR 0 1
18049: PPUSH
18050: LD_EXP 66
18054: PUSH
18055: LD_VAR 0 2
18059: ARRAY
18060: PUSH
18061: LD_INT 3
18063: ARRAY
18064: PPUSH
18065: LD_EXP 66
18069: PUSH
18070: LD_VAR 0 2
18074: ARRAY
18075: PUSH
18076: LD_INT 4
18078: ARRAY
18079: PPUSH
18080: CALL_OW 171
// end else
18084: GO 18125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_EXP 66
18095: PUSH
18096: LD_VAR 0 2
18100: ARRAY
18101: PUSH
18102: LD_INT 3
18104: ARRAY
18105: PPUSH
18106: LD_EXP 66
18110: PUSH
18111: LD_VAR 0 2
18115: ARRAY
18116: PUSH
18117: LD_INT 4
18119: ARRAY
18120: PPUSH
18121: CALL_OW 171
// end ; end ;
18125: LD_VAR 0 3
18129: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18130: LD_INT 0
18132: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 250
18140: EQUAL
18141: PUSH
18142: LD_VAR 0 2
18146: PPUSH
18147: CALL_OW 264
18151: PUSH
18152: LD_INT 81
18154: EQUAL
18155: AND
18156: IFFALSE 18177
// MinerPlaceMine ( unit , x , y ) ;
18158: LD_VAR 0 2
18162: PPUSH
18163: LD_VAR 0 4
18167: PPUSH
18168: LD_VAR 0 5
18172: PPUSH
18173: CALL 20562 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 251
18184: EQUAL
18185: PUSH
18186: LD_VAR 0 2
18190: PPUSH
18191: CALL_OW 264
18195: PUSH
18196: LD_INT 81
18198: EQUAL
18199: AND
18200: IFFALSE 18221
// MinerDetonateMine ( unit , x , y ) ;
18202: LD_VAR 0 2
18206: PPUSH
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_VAR 0 5
18216: PPUSH
18217: CALL 20837 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18221: LD_VAR 0 1
18225: PUSH
18226: LD_INT 252
18228: EQUAL
18229: PUSH
18230: LD_VAR 0 2
18234: PPUSH
18235: CALL_OW 264
18239: PUSH
18240: LD_INT 81
18242: EQUAL
18243: AND
18244: IFFALSE 18265
// MinerCreateMinefield ( unit , x , y ) ;
18246: LD_VAR 0 2
18250: PPUSH
18251: LD_VAR 0 4
18255: PPUSH
18256: LD_VAR 0 5
18260: PPUSH
18261: CALL 21254 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18265: LD_VAR 0 1
18269: PUSH
18270: LD_INT 253
18272: EQUAL
18273: PUSH
18274: LD_VAR 0 2
18278: PPUSH
18279: CALL_OW 257
18283: PUSH
18284: LD_INT 5
18286: EQUAL
18287: AND
18288: IFFALSE 18309
// ComBinocular ( unit , x , y ) ;
18290: LD_VAR 0 2
18294: PPUSH
18295: LD_VAR 0 4
18299: PPUSH
18300: LD_VAR 0 5
18304: PPUSH
18305: CALL 21623 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18309: LD_VAR 0 1
18313: PUSH
18314: LD_INT 254
18316: EQUAL
18317: PUSH
18318: LD_VAR 0 2
18322: PPUSH
18323: CALL_OW 264
18327: PUSH
18328: LD_INT 99
18330: EQUAL
18331: AND
18332: PUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: CALL_OW 263
18342: PUSH
18343: LD_INT 3
18345: EQUAL
18346: AND
18347: IFFALSE 18363
// HackDestroyVehicle ( unit , selectedUnit ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL 19926 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_INT 255
18370: EQUAL
18371: PUSH
18372: LD_VAR 0 2
18376: PPUSH
18377: CALL_OW 264
18381: PUSH
18382: LD_INT 14
18384: PUSH
18385: LD_INT 53
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: IN
18392: AND
18393: PUSH
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_VAR 0 5
18403: PPUSH
18404: CALL_OW 488
18408: AND
18409: IFFALSE 18433
// CutTreeXYR ( unit , x , y , 12 ) ;
18411: LD_VAR 0 2
18415: PPUSH
18416: LD_VAR 0 4
18420: PPUSH
18421: LD_VAR 0 5
18425: PPUSH
18426: LD_INT 12
18428: PPUSH
18429: CALL 18496 0 4
// if cmd = 256 then
18433: LD_VAR 0 1
18437: PUSH
18438: LD_INT 256
18440: EQUAL
18441: IFFALSE 18462
// SetFactoryWaypoint ( unit , x , y ) ;
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_VAR 0 4
18452: PPUSH
18453: LD_VAR 0 5
18457: PPUSH
18458: CALL 16443 0 3
// if cmd = 257 then
18462: LD_VAR 0 1
18466: PUSH
18467: LD_INT 257
18469: EQUAL
18470: IFFALSE 18491
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_VAR 0 4
18481: PPUSH
18482: LD_VAR 0 5
18486: PPUSH
18487: CALL 16805 0 3
// end ;
18491: LD_VAR 0 6
18495: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18507: LD_VAR 0 1
18511: NOT
18512: PUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: CALL_OW 488
18527: NOT
18528: OR
18529: PUSH
18530: LD_VAR 0 4
18534: NOT
18535: OR
18536: IFFALSE 18540
// exit ;
18538: GO 18880
// list := [ ] ;
18540: LD_ADDR_VAR 0 13
18544: PUSH
18545: EMPTY
18546: ST_TO_ADDR
// if x - r < 0 then
18547: LD_VAR 0 2
18551: PUSH
18552: LD_VAR 0 4
18556: MINUS
18557: PUSH
18558: LD_INT 0
18560: LESS
18561: IFFALSE 18573
// min_x := 0 else
18563: LD_ADDR_VAR 0 7
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
18571: GO 18589
// min_x := x - r ;
18573: LD_ADDR_VAR 0 7
18577: PUSH
18578: LD_VAR 0 2
18582: PUSH
18583: LD_VAR 0 4
18587: MINUS
18588: ST_TO_ADDR
// if y - r < 0 then
18589: LD_VAR 0 3
18593: PUSH
18594: LD_VAR 0 4
18598: MINUS
18599: PUSH
18600: LD_INT 0
18602: LESS
18603: IFFALSE 18615
// min_y := 0 else
18605: LD_ADDR_VAR 0 8
18609: PUSH
18610: LD_INT 0
18612: ST_TO_ADDR
18613: GO 18631
// min_y := y - r ;
18615: LD_ADDR_VAR 0 8
18619: PUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_VAR 0 4
18629: MINUS
18630: ST_TO_ADDR
// max_x := x + r ;
18631: LD_ADDR_VAR 0 9
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: LD_VAR 0 4
18645: PLUS
18646: ST_TO_ADDR
// max_y := y + r ;
18647: LD_ADDR_VAR 0 10
18651: PUSH
18652: LD_VAR 0 3
18656: PUSH
18657: LD_VAR 0 4
18661: PLUS
18662: ST_TO_ADDR
// for _x = min_x to max_x do
18663: LD_ADDR_VAR 0 11
18667: PUSH
18668: DOUBLE
18669: LD_VAR 0 7
18673: DEC
18674: ST_TO_ADDR
18675: LD_VAR 0 9
18679: PUSH
18680: FOR_TO
18681: IFFALSE 18798
// for _y = min_y to max_y do
18683: LD_ADDR_VAR 0 12
18687: PUSH
18688: DOUBLE
18689: LD_VAR 0 8
18693: DEC
18694: ST_TO_ADDR
18695: LD_VAR 0 10
18699: PUSH
18700: FOR_TO
18701: IFFALSE 18794
// begin if not ValidHex ( _x , _y ) then
18703: LD_VAR 0 11
18707: PPUSH
18708: LD_VAR 0 12
18712: PPUSH
18713: CALL_OW 488
18717: NOT
18718: IFFALSE 18722
// continue ;
18720: GO 18700
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18722: LD_VAR 0 11
18726: PPUSH
18727: LD_VAR 0 12
18731: PPUSH
18732: CALL_OW 351
18736: PUSH
18737: LD_VAR 0 11
18741: PPUSH
18742: LD_VAR 0 12
18746: PPUSH
18747: CALL_OW 554
18751: AND
18752: IFFALSE 18792
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18754: LD_ADDR_VAR 0 13
18758: PUSH
18759: LD_VAR 0 13
18763: PPUSH
18764: LD_VAR 0 13
18768: PUSH
18769: LD_INT 1
18771: PLUS
18772: PPUSH
18773: LD_VAR 0 11
18777: PUSH
18778: LD_VAR 0 12
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 2
18791: ST_TO_ADDR
// end ;
18792: GO 18700
18794: POP
18795: POP
18796: GO 18680
18798: POP
18799: POP
// if not list then
18800: LD_VAR 0 13
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 18880
// for i in list do
18809: LD_ADDR_VAR 0 6
18813: PUSH
18814: LD_VAR 0 13
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18878
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_STRING M
18829: PUSH
18830: LD_VAR 0 6
18834: PUSH
18835: LD_INT 1
18837: ARRAY
18838: PUSH
18839: LD_VAR 0 6
18843: PUSH
18844: LD_INT 2
18846: ARRAY
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: PPUSH
18872: CALL_OW 447
18876: GO 18819
18878: POP
18879: POP
// end ;
18880: LD_VAR 0 5
18884: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18885: LD_EXP 69
18889: NOT
18890: IFFALSE 18940
18892: GO 18894
18894: DISABLE
// begin initHack := true ;
18895: LD_ADDR_EXP 69
18899: PUSH
18900: LD_INT 1
18902: ST_TO_ADDR
// hackTanks := [ ] ;
18903: LD_ADDR_EXP 70
18907: PUSH
18908: EMPTY
18909: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18910: LD_ADDR_EXP 71
18914: PUSH
18915: EMPTY
18916: ST_TO_ADDR
// hackLimit := 3 ;
18917: LD_ADDR_EXP 72
18921: PUSH
18922: LD_INT 3
18924: ST_TO_ADDR
// hackDist := 12 ;
18925: LD_ADDR_EXP 73
18929: PUSH
18930: LD_INT 12
18932: ST_TO_ADDR
// hackCounter := [ ] ;
18933: LD_ADDR_EXP 74
18937: PUSH
18938: EMPTY
18939: ST_TO_ADDR
// end ;
18940: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18941: LD_EXP 69
18945: PUSH
18946: LD_INT 34
18948: PUSH
18949: LD_INT 99
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: AND
18961: IFFALSE 19214
18963: GO 18965
18965: DISABLE
18966: LD_INT 0
18968: PPUSH
18969: PPUSH
// begin enable ;
18970: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: LD_INT 34
18978: PUSH
18979: LD_INT 99
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: PUSH
18991: FOR_IN
18992: IFFALSE 19212
// begin if not i in hackTanks then
18994: LD_VAR 0 1
18998: PUSH
18999: LD_EXP 70
19003: IN
19004: NOT
19005: IFFALSE 19088
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19007: LD_ADDR_EXP 70
19011: PUSH
19012: LD_EXP 70
19016: PPUSH
19017: LD_EXP 70
19021: PUSH
19022: LD_INT 1
19024: PLUS
19025: PPUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL_OW 1
19035: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19036: LD_ADDR_EXP 71
19040: PUSH
19041: LD_EXP 71
19045: PPUSH
19046: LD_EXP 71
19050: PUSH
19051: LD_INT 1
19053: PLUS
19054: PPUSH
19055: EMPTY
19056: PPUSH
19057: CALL_OW 1
19061: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19062: LD_ADDR_EXP 74
19066: PUSH
19067: LD_EXP 74
19071: PPUSH
19072: LD_EXP 74
19076: PUSH
19077: LD_INT 1
19079: PLUS
19080: PPUSH
19081: EMPTY
19082: PPUSH
19083: CALL_OW 1
19087: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19088: LD_VAR 0 1
19092: PPUSH
19093: CALL_OW 302
19097: NOT
19098: IFFALSE 19111
// begin HackUnlinkAll ( i ) ;
19100: LD_VAR 0 1
19104: PPUSH
19105: CALL 19217 0 1
// continue ;
19109: GO 18991
// end ; HackCheckCapturedStatus ( i ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: CALL 19660 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_INT 81
19127: PUSH
19128: LD_VAR 0 1
19132: PPUSH
19133: CALL_OW 255
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 33
19144: PUSH
19145: LD_INT 3
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 91
19154: PUSH
19155: LD_VAR 0 1
19159: PUSH
19160: LD_EXP 73
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 50
19172: PUSH
19173: EMPTY
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: ST_TO_ADDR
// if not tmp then
19187: LD_VAR 0 2
19191: NOT
19192: IFFALSE 19196
// continue ;
19194: GO 18991
// HackLink ( i , tmp ) ;
19196: LD_VAR 0 1
19200: PPUSH
19201: LD_VAR 0 2
19205: PPUSH
19206: CALL 19353 0 2
// end ;
19210: GO 18991
19212: POP
19213: POP
// end ;
19214: PPOPN 2
19216: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19217: LD_INT 0
19219: PPUSH
19220: PPUSH
19221: PPUSH
// if not hack in hackTanks then
19222: LD_VAR 0 1
19226: PUSH
19227: LD_EXP 70
19231: IN
19232: NOT
19233: IFFALSE 19237
// exit ;
19235: GO 19348
// index := GetElementIndex ( hackTanks , hack ) ;
19237: LD_ADDR_VAR 0 4
19241: PUSH
19242: LD_EXP 70
19246: PPUSH
19247: LD_VAR 0 1
19251: PPUSH
19252: CALL 27128 0 2
19256: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19257: LD_EXP 71
19261: PUSH
19262: LD_VAR 0 4
19266: ARRAY
19267: IFFALSE 19348
// begin for i in hackTanksCaptured [ index ] do
19269: LD_ADDR_VAR 0 3
19273: PUSH
19274: LD_EXP 71
19278: PUSH
19279: LD_VAR 0 4
19283: ARRAY
19284: PUSH
19285: FOR_IN
19286: IFFALSE 19312
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19288: LD_VAR 0 3
19292: PUSH
19293: LD_INT 1
19295: ARRAY
19296: PPUSH
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 2
19304: ARRAY
19305: PPUSH
19306: CALL_OW 235
19310: GO 19285
19312: POP
19313: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19314: LD_ADDR_EXP 71
19318: PUSH
19319: LD_EXP 71
19323: PPUSH
19324: LD_VAR 0 4
19328: PPUSH
19329: EMPTY
19330: PPUSH
19331: CALL_OW 1
19335: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: LD_INT 0
19343: PPUSH
19344: CALL_OW 505
// end ; end ;
19348: LD_VAR 0 2
19352: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
19357: PPUSH
// if not hack in hackTanks or not vehicles then
19358: LD_VAR 0 1
19362: PUSH
19363: LD_EXP 70
19367: IN
19368: NOT
19369: PUSH
19370: LD_VAR 0 2
19374: NOT
19375: OR
19376: IFFALSE 19380
// exit ;
19378: GO 19655
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_VAR 0 1
19389: PPUSH
19390: LD_VAR 0 2
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: LD_INT 1
19400: PPUSH
19401: CALL 27778 0 4
19405: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_EXP 70
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL 27128 0 2
19425: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19426: LD_EXP 71
19430: PUSH
19431: LD_VAR 0 5
19435: ARRAY
19436: PUSH
19437: LD_EXP 72
19441: LESS
19442: IFFALSE 19631
// begin for i := 1 to vehicles do
19444: LD_ADDR_VAR 0 4
19448: PUSH
19449: DOUBLE
19450: LD_INT 1
19452: DEC
19453: ST_TO_ADDR
19454: LD_VAR 0 2
19458: PUSH
19459: FOR_TO
19460: IFFALSE 19629
// begin if hackTanksCaptured [ index ] = hackLimit then
19462: LD_EXP 71
19466: PUSH
19467: LD_VAR 0 5
19471: ARRAY
19472: PUSH
19473: LD_EXP 72
19477: EQUAL
19478: IFFALSE 19482
// break ;
19480: GO 19629
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19482: LD_ADDR_EXP 74
19486: PUSH
19487: LD_EXP 74
19491: PPUSH
19492: LD_VAR 0 5
19496: PPUSH
19497: LD_EXP 74
19501: PUSH
19502: LD_VAR 0 5
19506: ARRAY
19507: PUSH
19508: LD_INT 1
19510: PLUS
19511: PPUSH
19512: CALL_OW 1
19516: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19517: LD_ADDR_EXP 71
19521: PUSH
19522: LD_EXP 71
19526: PPUSH
19527: LD_VAR 0 5
19531: PUSH
19532: LD_EXP 71
19536: PUSH
19537: LD_VAR 0 5
19541: ARRAY
19542: PUSH
19543: LD_INT 1
19545: PLUS
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PPUSH
19551: LD_VAR 0 2
19555: PUSH
19556: LD_VAR 0 4
19560: ARRAY
19561: PUSH
19562: LD_VAR 0 2
19566: PUSH
19567: LD_VAR 0 4
19571: ARRAY
19572: PPUSH
19573: CALL_OW 255
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PPUSH
19582: CALL 27343 0 3
19586: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19587: LD_VAR 0 2
19591: PUSH
19592: LD_VAR 0 4
19596: ARRAY
19597: PPUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 255
19607: PPUSH
19608: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19612: LD_VAR 0 2
19616: PUSH
19617: LD_VAR 0 4
19621: ARRAY
19622: PPUSH
19623: CALL_OW 141
// end ;
19627: GO 19459
19629: POP
19630: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_EXP 71
19640: PUSH
19641: LD_VAR 0 5
19645: ARRAY
19646: PUSH
19647: LD_INT 0
19649: PLUS
19650: PPUSH
19651: CALL_OW 505
// end ;
19655: LD_VAR 0 3
19659: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19660: LD_INT 0
19662: PPUSH
19663: PPUSH
19664: PPUSH
19665: PPUSH
// if not hack in hackTanks then
19666: LD_VAR 0 1
19670: PUSH
19671: LD_EXP 70
19675: IN
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19921
// index := GetElementIndex ( hackTanks , hack ) ;
19681: LD_ADDR_VAR 0 4
19685: PUSH
19686: LD_EXP 70
19690: PPUSH
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL 27128 0 2
19700: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: DOUBLE
19707: LD_EXP 71
19711: PUSH
19712: LD_VAR 0 4
19716: ARRAY
19717: INC
19718: ST_TO_ADDR
19719: LD_INT 1
19721: PUSH
19722: FOR_DOWNTO
19723: IFFALSE 19895
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19725: LD_ADDR_VAR 0 5
19729: PUSH
19730: LD_EXP 71
19734: PUSH
19735: LD_VAR 0 4
19739: ARRAY
19740: PUSH
19741: LD_VAR 0 3
19745: ARRAY
19746: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19747: LD_VAR 0 5
19751: PUSH
19752: LD_INT 1
19754: ARRAY
19755: PPUSH
19756: CALL_OW 302
19760: NOT
19761: PUSH
19762: LD_VAR 0 5
19766: PUSH
19767: LD_INT 1
19769: ARRAY
19770: PPUSH
19771: CALL_OW 255
19775: PUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 255
19785: NONEQUAL
19786: OR
19787: IFFALSE 19893
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19789: LD_VAR 0 5
19793: PUSH
19794: LD_INT 1
19796: ARRAY
19797: PPUSH
19798: CALL_OW 305
19802: PUSH
19803: LD_VAR 0 5
19807: PUSH
19808: LD_INT 1
19810: ARRAY
19811: PPUSH
19812: CALL_OW 255
19816: PUSH
19817: LD_VAR 0 1
19821: PPUSH
19822: CALL_OW 255
19826: EQUAL
19827: AND
19828: IFFALSE 19852
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19830: LD_VAR 0 5
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: PPUSH
19839: LD_VAR 0 5
19843: PUSH
19844: LD_INT 2
19846: ARRAY
19847: PPUSH
19848: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19852: LD_ADDR_EXP 71
19856: PUSH
19857: LD_EXP 71
19861: PPUSH
19862: LD_VAR 0 4
19866: PPUSH
19867: LD_EXP 71
19871: PUSH
19872: LD_VAR 0 4
19876: ARRAY
19877: PPUSH
19878: LD_VAR 0 3
19882: PPUSH
19883: CALL_OW 3
19887: PPUSH
19888: CALL_OW 1
19892: ST_TO_ADDR
// end ; end ;
19893: GO 19722
19895: POP
19896: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19897: LD_VAR 0 1
19901: PPUSH
19902: LD_EXP 71
19906: PUSH
19907: LD_VAR 0 4
19911: ARRAY
19912: PUSH
19913: LD_INT 0
19915: PLUS
19916: PPUSH
19917: CALL_OW 505
// end ;
19921: LD_VAR 0 2
19925: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
19931: PPUSH
// if not hack in hackTanks then
19932: LD_VAR 0 1
19936: PUSH
19937: LD_EXP 70
19941: IN
19942: NOT
19943: IFFALSE 19947
// exit ;
19945: GO 20032
// index := GetElementIndex ( hackTanks , hack ) ;
19947: LD_ADDR_VAR 0 5
19951: PUSH
19952: LD_EXP 70
19956: PPUSH
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL 27128 0 2
19966: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19967: LD_ADDR_VAR 0 4
19971: PUSH
19972: DOUBLE
19973: LD_INT 1
19975: DEC
19976: ST_TO_ADDR
19977: LD_EXP 71
19981: PUSH
19982: LD_VAR 0 5
19986: ARRAY
19987: PUSH
19988: FOR_TO
19989: IFFALSE 20030
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19991: LD_EXP 71
19995: PUSH
19996: LD_VAR 0 5
20000: ARRAY
20001: PUSH
20002: LD_VAR 0 4
20006: ARRAY
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PUSH
20012: LD_VAR 0 2
20016: EQUAL
20017: IFFALSE 20028
// KillUnit ( vehicle ) ;
20019: LD_VAR 0 2
20023: PPUSH
20024: CALL_OW 66
20028: GO 19988
20030: POP
20031: POP
// end ;
20032: LD_VAR 0 3
20036: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20037: LD_EXP 75
20041: NOT
20042: IFFALSE 20077
20044: GO 20046
20046: DISABLE
// begin initMiner := true ;
20047: LD_ADDR_EXP 75
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// minersList := [ ] ;
20055: LD_ADDR_EXP 76
20059: PUSH
20060: EMPTY
20061: ST_TO_ADDR
// minerMinesList := [ ] ;
20062: LD_ADDR_EXP 77
20066: PUSH
20067: EMPTY
20068: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20069: LD_ADDR_EXP 78
20073: PUSH
20074: LD_INT 5
20076: ST_TO_ADDR
// end ;
20077: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20078: LD_EXP 75
20082: PUSH
20083: LD_INT 34
20085: PUSH
20086: LD_INT 81
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: CALL_OW 69
20097: AND
20098: IFFALSE 20559
20100: GO 20102
20102: DISABLE
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
// begin enable ;
20109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_INT 34
20117: PUSH
20118: LD_INT 81
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: PUSH
20130: FOR_IN
20131: IFFALSE 20203
// begin if not i in minersList then
20133: LD_VAR 0 1
20137: PUSH
20138: LD_EXP 76
20142: IN
20143: NOT
20144: IFFALSE 20201
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20146: LD_ADDR_EXP 76
20150: PUSH
20151: LD_EXP 76
20155: PPUSH
20156: LD_EXP 76
20160: PUSH
20161: LD_INT 1
20163: PLUS
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 1
20174: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20175: LD_ADDR_EXP 77
20179: PUSH
20180: LD_EXP 77
20184: PPUSH
20185: LD_EXP 77
20189: PUSH
20190: LD_INT 1
20192: PLUS
20193: PPUSH
20194: EMPTY
20195: PPUSH
20196: CALL_OW 1
20200: ST_TO_ADDR
// end end ;
20201: GO 20130
20203: POP
20204: POP
// for i := minerMinesList downto 1 do
20205: LD_ADDR_VAR 0 1
20209: PUSH
20210: DOUBLE
20211: LD_EXP 77
20215: INC
20216: ST_TO_ADDR
20217: LD_INT 1
20219: PUSH
20220: FOR_DOWNTO
20221: IFFALSE 20557
// begin if IsLive ( minersList [ i ] ) then
20223: LD_EXP 76
20227: PUSH
20228: LD_VAR 0 1
20232: ARRAY
20233: PPUSH
20234: CALL_OW 300
20238: IFFALSE 20266
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20240: LD_EXP 76
20244: PUSH
20245: LD_VAR 0 1
20249: ARRAY
20250: PPUSH
20251: LD_EXP 77
20255: PUSH
20256: LD_VAR 0 1
20260: ARRAY
20261: PPUSH
20262: CALL_OW 505
// if not minerMinesList [ i ] then
20266: LD_EXP 77
20270: PUSH
20271: LD_VAR 0 1
20275: ARRAY
20276: NOT
20277: IFFALSE 20281
// continue ;
20279: GO 20220
// for j := minerMinesList [ i ] downto 1 do
20281: LD_ADDR_VAR 0 2
20285: PUSH
20286: DOUBLE
20287: LD_EXP 77
20291: PUSH
20292: LD_VAR 0 1
20296: ARRAY
20297: INC
20298: ST_TO_ADDR
20299: LD_INT 1
20301: PUSH
20302: FOR_DOWNTO
20303: IFFALSE 20553
// begin side := GetSide ( minersList [ i ] ) ;
20305: LD_ADDR_VAR 0 3
20309: PUSH
20310: LD_EXP 76
20314: PUSH
20315: LD_VAR 0 1
20319: ARRAY
20320: PPUSH
20321: CALL_OW 255
20325: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20326: LD_ADDR_VAR 0 4
20330: PUSH
20331: LD_EXP 77
20335: PUSH
20336: LD_VAR 0 1
20340: ARRAY
20341: PUSH
20342: LD_VAR 0 2
20346: ARRAY
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: PPUSH
20352: LD_EXP 77
20356: PUSH
20357: LD_VAR 0 1
20361: ARRAY
20362: PUSH
20363: LD_VAR 0 2
20367: ARRAY
20368: PUSH
20369: LD_INT 2
20371: ARRAY
20372: PPUSH
20373: CALL_OW 428
20377: ST_TO_ADDR
// if not tmp then
20378: LD_VAR 0 4
20382: NOT
20383: IFFALSE 20387
// continue ;
20385: GO 20302
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20387: LD_VAR 0 4
20391: PUSH
20392: LD_INT 81
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PPUSH
20404: CALL_OW 69
20408: IN
20409: PUSH
20410: LD_EXP 77
20414: PUSH
20415: LD_VAR 0 1
20419: ARRAY
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: PUSH
20427: LD_INT 1
20429: ARRAY
20430: PPUSH
20431: LD_EXP 77
20435: PUSH
20436: LD_VAR 0 1
20440: ARRAY
20441: PUSH
20442: LD_VAR 0 2
20446: ARRAY
20447: PUSH
20448: LD_INT 2
20450: ARRAY
20451: PPUSH
20452: CALL_OW 458
20456: AND
20457: IFFALSE 20551
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20459: LD_EXP 77
20463: PUSH
20464: LD_VAR 0 1
20468: ARRAY
20469: PUSH
20470: LD_VAR 0 2
20474: ARRAY
20475: PUSH
20476: LD_INT 1
20478: ARRAY
20479: PPUSH
20480: LD_EXP 77
20484: PUSH
20485: LD_VAR 0 1
20489: ARRAY
20490: PUSH
20491: LD_VAR 0 2
20495: ARRAY
20496: PUSH
20497: LD_INT 2
20499: ARRAY
20500: PPUSH
20501: LD_VAR 0 3
20505: PPUSH
20506: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20510: LD_ADDR_EXP 77
20514: PUSH
20515: LD_EXP 77
20519: PPUSH
20520: LD_VAR 0 1
20524: PPUSH
20525: LD_EXP 77
20529: PUSH
20530: LD_VAR 0 1
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 2
20540: PPUSH
20541: CALL_OW 3
20545: PPUSH
20546: CALL_OW 1
20550: ST_TO_ADDR
// end ; end ;
20551: GO 20302
20553: POP
20554: POP
// end ;
20555: GO 20220
20557: POP
20558: POP
// end ;
20559: PPOPN 4
20561: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20562: LD_INT 0
20564: PPUSH
20565: PPUSH
// result := false ;
20566: LD_ADDR_VAR 0 4
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20574: LD_VAR 0 1
20578: PPUSH
20579: CALL_OW 264
20583: PUSH
20584: LD_INT 81
20586: EQUAL
20587: NOT
20588: IFFALSE 20592
// exit ;
20590: GO 20832
// index := GetElementIndex ( minersList , unit ) ;
20592: LD_ADDR_VAR 0 5
20596: PUSH
20597: LD_EXP 76
20601: PPUSH
20602: LD_VAR 0 1
20606: PPUSH
20607: CALL 27128 0 2
20611: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20612: LD_EXP 77
20616: PUSH
20617: LD_VAR 0 5
20621: ARRAY
20622: PUSH
20623: LD_EXP 78
20627: GREATEREQUAL
20628: IFFALSE 20632
// exit ;
20630: GO 20832
// ComMoveXY ( unit , x , y ) ;
20632: LD_VAR 0 1
20636: PPUSH
20637: LD_VAR 0 2
20641: PPUSH
20642: LD_VAR 0 3
20646: PPUSH
20647: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20651: LD_INT 35
20653: PPUSH
20654: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_VAR 0 3
20672: PPUSH
20673: CALL 58483 0 3
20677: NOT
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 314
20688: AND
20689: IFFALSE 20693
// exit ;
20691: GO 20832
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20693: LD_VAR 0 2
20697: PPUSH
20698: LD_VAR 0 3
20702: PPUSH
20703: CALL_OW 428
20707: PUSH
20708: LD_VAR 0 1
20712: EQUAL
20713: PUSH
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 314
20723: NOT
20724: AND
20725: IFFALSE 20651
// PlaySoundXY ( x , y , PlantMine ) ;
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_VAR 0 3
20736: PPUSH
20737: LD_STRING PlantMine
20739: PPUSH
20740: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20744: LD_VAR 0 2
20748: PPUSH
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 255
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20771: LD_ADDR_EXP 77
20775: PUSH
20776: LD_EXP 77
20780: PPUSH
20781: LD_VAR 0 5
20785: PUSH
20786: LD_EXP 77
20790: PUSH
20791: LD_VAR 0 5
20795: ARRAY
20796: PUSH
20797: LD_INT 1
20799: PLUS
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PPUSH
20805: LD_VAR 0 2
20809: PUSH
20810: LD_VAR 0 3
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL 27343 0 3
20823: ST_TO_ADDR
// result := true ;
20824: LD_ADDR_VAR 0 4
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// end ;
20832: LD_VAR 0 4
20836: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
20841: PPUSH
// if not unit in minersList then
20842: LD_VAR 0 1
20846: PUSH
20847: LD_EXP 76
20851: IN
20852: NOT
20853: IFFALSE 20857
// exit ;
20855: GO 21249
// index := GetElementIndex ( minersList , unit ) ;
20857: LD_ADDR_VAR 0 6
20861: PUSH
20862: LD_EXP 76
20866: PPUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL 27128 0 2
20876: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20877: LD_ADDR_VAR 0 5
20881: PUSH
20882: DOUBLE
20883: LD_EXP 77
20887: PUSH
20888: LD_VAR 0 6
20892: ARRAY
20893: INC
20894: ST_TO_ADDR
20895: LD_INT 1
20897: PUSH
20898: FOR_DOWNTO
20899: IFFALSE 21060
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20901: LD_EXP 77
20905: PUSH
20906: LD_VAR 0 6
20910: ARRAY
20911: PUSH
20912: LD_VAR 0 5
20916: ARRAY
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PUSH
20922: LD_VAR 0 2
20926: EQUAL
20927: PUSH
20928: LD_EXP 77
20932: PUSH
20933: LD_VAR 0 6
20937: ARRAY
20938: PUSH
20939: LD_VAR 0 5
20943: ARRAY
20944: PUSH
20945: LD_INT 2
20947: ARRAY
20948: PUSH
20949: LD_VAR 0 3
20953: EQUAL
20954: AND
20955: IFFALSE 21058
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20957: LD_EXP 77
20961: PUSH
20962: LD_VAR 0 6
20966: ARRAY
20967: PUSH
20968: LD_VAR 0 5
20972: ARRAY
20973: PUSH
20974: LD_INT 1
20976: ARRAY
20977: PPUSH
20978: LD_EXP 77
20982: PUSH
20983: LD_VAR 0 6
20987: ARRAY
20988: PUSH
20989: LD_VAR 0 5
20993: ARRAY
20994: PUSH
20995: LD_INT 2
20997: ARRAY
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 255
21008: PPUSH
21009: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21013: LD_ADDR_EXP 77
21017: PUSH
21018: LD_EXP 77
21022: PPUSH
21023: LD_VAR 0 6
21027: PPUSH
21028: LD_EXP 77
21032: PUSH
21033: LD_VAR 0 6
21037: ARRAY
21038: PPUSH
21039: LD_VAR 0 5
21043: PPUSH
21044: CALL_OW 3
21048: PPUSH
21049: CALL_OW 1
21053: ST_TO_ADDR
// exit ;
21054: POP
21055: POP
21056: GO 21249
// end ; end ;
21058: GO 20898
21060: POP
21061: POP
// for i := minerMinesList [ index ] downto 1 do
21062: LD_ADDR_VAR 0 5
21066: PUSH
21067: DOUBLE
21068: LD_EXP 77
21072: PUSH
21073: LD_VAR 0 6
21077: ARRAY
21078: INC
21079: ST_TO_ADDR
21080: LD_INT 1
21082: PUSH
21083: FOR_DOWNTO
21084: IFFALSE 21247
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21086: LD_EXP 77
21090: PUSH
21091: LD_VAR 0 6
21095: ARRAY
21096: PUSH
21097: LD_VAR 0 5
21101: ARRAY
21102: PUSH
21103: LD_INT 1
21105: ARRAY
21106: PPUSH
21107: LD_EXP 77
21111: PUSH
21112: LD_VAR 0 6
21116: ARRAY
21117: PUSH
21118: LD_VAR 0 5
21122: ARRAY
21123: PUSH
21124: LD_INT 2
21126: ARRAY
21127: PPUSH
21128: LD_VAR 0 2
21132: PPUSH
21133: LD_VAR 0 3
21137: PPUSH
21138: CALL_OW 298
21142: PUSH
21143: LD_INT 6
21145: LESS
21146: IFFALSE 21245
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21148: LD_EXP 77
21152: PUSH
21153: LD_VAR 0 6
21157: ARRAY
21158: PUSH
21159: LD_VAR 0 5
21163: ARRAY
21164: PUSH
21165: LD_INT 1
21167: ARRAY
21168: PPUSH
21169: LD_EXP 77
21173: PUSH
21174: LD_VAR 0 6
21178: ARRAY
21179: PUSH
21180: LD_VAR 0 5
21184: ARRAY
21185: PUSH
21186: LD_INT 2
21188: ARRAY
21189: PPUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 255
21199: PPUSH
21200: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21204: LD_ADDR_EXP 77
21208: PUSH
21209: LD_EXP 77
21213: PPUSH
21214: LD_VAR 0 6
21218: PPUSH
21219: LD_EXP 77
21223: PUSH
21224: LD_VAR 0 6
21228: ARRAY
21229: PPUSH
21230: LD_VAR 0 5
21234: PPUSH
21235: CALL_OW 3
21239: PPUSH
21240: CALL_OW 1
21244: ST_TO_ADDR
// end ; end ;
21245: GO 21083
21247: POP
21248: POP
// end ;
21249: LD_VAR 0 4
21253: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21265: LD_VAR 0 1
21269: PPUSH
21270: CALL_OW 264
21274: PUSH
21275: LD_INT 81
21277: EQUAL
21278: NOT
21279: PUSH
21280: LD_VAR 0 1
21284: PUSH
21285: LD_EXP 76
21289: IN
21290: NOT
21291: OR
21292: IFFALSE 21296
// exit ;
21294: GO 21618
// index := GetElementIndex ( minersList , unit ) ;
21296: LD_ADDR_VAR 0 6
21300: PUSH
21301: LD_EXP 76
21305: PPUSH
21306: LD_VAR 0 1
21310: PPUSH
21311: CALL 27128 0 2
21315: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21316: LD_ADDR_VAR 0 8
21320: PUSH
21321: LD_EXP 78
21325: PUSH
21326: LD_EXP 77
21330: PUSH
21331: LD_VAR 0 6
21335: ARRAY
21336: MINUS
21337: ST_TO_ADDR
// if not minesFreeAmount then
21338: LD_VAR 0 8
21342: NOT
21343: IFFALSE 21347
// exit ;
21345: GO 21618
// tmp := [ ] ;
21347: LD_ADDR_VAR 0 7
21351: PUSH
21352: EMPTY
21353: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21354: LD_ADDR_VAR 0 5
21358: PUSH
21359: DOUBLE
21360: LD_INT 1
21362: DEC
21363: ST_TO_ADDR
21364: LD_VAR 0 8
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21565
// begin _d := rand ( 0 , 5 ) ;
21372: LD_ADDR_VAR 0 11
21376: PUSH
21377: LD_INT 0
21379: PPUSH
21380: LD_INT 5
21382: PPUSH
21383: CALL_OW 12
21387: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21388: LD_ADDR_VAR 0 12
21392: PUSH
21393: LD_INT 2
21395: PPUSH
21396: LD_INT 6
21398: PPUSH
21399: CALL_OW 12
21403: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21404: LD_ADDR_VAR 0 9
21408: PUSH
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_VAR 0 11
21418: PPUSH
21419: LD_VAR 0 12
21423: PPUSH
21424: CALL_OW 272
21428: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21429: LD_ADDR_VAR 0 10
21433: PUSH
21434: LD_VAR 0 3
21438: PPUSH
21439: LD_VAR 0 11
21443: PPUSH
21444: LD_VAR 0 12
21448: PPUSH
21449: CALL_OW 273
21453: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21454: LD_VAR 0 9
21458: PPUSH
21459: LD_VAR 0 10
21463: PPUSH
21464: CALL_OW 488
21468: PUSH
21469: LD_VAR 0 9
21473: PUSH
21474: LD_VAR 0 10
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_VAR 0 7
21487: IN
21488: NOT
21489: AND
21490: PUSH
21491: LD_VAR 0 9
21495: PPUSH
21496: LD_VAR 0 10
21500: PPUSH
21501: CALL_OW 458
21505: NOT
21506: AND
21507: IFFALSE 21549
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21509: LD_ADDR_VAR 0 7
21513: PUSH
21514: LD_VAR 0 7
21518: PPUSH
21519: LD_VAR 0 7
21523: PUSH
21524: LD_INT 1
21526: PLUS
21527: PPUSH
21528: LD_VAR 0 9
21532: PUSH
21533: LD_VAR 0 10
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 1
21546: ST_TO_ADDR
21547: GO 21563
// i := i - 1 ;
21549: LD_ADDR_VAR 0 5
21553: PUSH
21554: LD_VAR 0 5
21558: PUSH
21559: LD_INT 1
21561: MINUS
21562: ST_TO_ADDR
// end ;
21563: GO 21369
21565: POP
21566: POP
// for i in tmp do
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: LD_VAR 0 7
21576: PUSH
21577: FOR_IN
21578: IFFALSE 21616
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_VAR 0 5
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PPUSH
21594: LD_VAR 0 5
21598: PUSH
21599: LD_INT 2
21601: ARRAY
21602: PPUSH
21603: CALL 20562 0 3
21607: NOT
21608: IFFALSE 21614
// exit ;
21610: POP
21611: POP
21612: GO 21618
21614: GO 21577
21616: POP
21617: POP
// end ;
21618: LD_VAR 0 4
21622: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21623: LD_INT 0
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
// if not GetClass ( unit ) = class_sniper then
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 257
21641: PUSH
21642: LD_INT 5
21644: EQUAL
21645: NOT
21646: IFFALSE 21650
// exit ;
21648: GO 22038
// dist := 8 ;
21650: LD_ADDR_VAR 0 5
21654: PUSH
21655: LD_INT 8
21657: ST_TO_ADDR
// viewRange := 12 ;
21658: LD_ADDR_VAR 0 7
21662: PUSH
21663: LD_INT 12
21665: ST_TO_ADDR
// side := GetSide ( unit ) ;
21666: LD_ADDR_VAR 0 6
21670: PUSH
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL_OW 255
21680: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21681: LD_INT 61
21683: PPUSH
21684: LD_VAR 0 6
21688: PPUSH
21689: CALL_OW 321
21693: PUSH
21694: LD_INT 2
21696: EQUAL
21697: IFFALSE 21707
// viewRange := 16 ;
21699: LD_ADDR_VAR 0 7
21703: PUSH
21704: LD_INT 16
21706: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_VAR 0 2
21716: PPUSH
21717: LD_VAR 0 3
21721: PPUSH
21722: CALL_OW 297
21726: PUSH
21727: LD_VAR 0 5
21731: GREATER
21732: IFFALSE 21811
// begin ComMoveXY ( unit , x , y ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_VAR 0 2
21743: PPUSH
21744: LD_VAR 0 3
21748: PPUSH
21749: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21753: LD_INT 35
21755: PPUSH
21756: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21760: LD_VAR 0 1
21764: PPUSH
21765: LD_VAR 0 2
21769: PPUSH
21770: LD_VAR 0 3
21774: PPUSH
21775: CALL 58483 0 3
21779: NOT
21780: IFFALSE 21784
// exit ;
21782: GO 22038
// until GetDistUnitXY ( unit , x , y ) < dist ;
21784: LD_VAR 0 1
21788: PPUSH
21789: LD_VAR 0 2
21793: PPUSH
21794: LD_VAR 0 3
21798: PPUSH
21799: CALL_OW 297
21803: PUSH
21804: LD_VAR 0 5
21808: LESS
21809: IFFALSE 21753
// end ; ComTurnXY ( unit , x , y ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_VAR 0 2
21820: PPUSH
21821: LD_VAR 0 3
21825: PPUSH
21826: CALL_OW 118
// wait ( 5 ) ;
21830: LD_INT 5
21832: PPUSH
21833: CALL_OW 67
// _d := GetDir ( unit ) ;
21837: LD_ADDR_VAR 0 10
21841: PUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: CALL_OW 254
21851: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21852: LD_ADDR_VAR 0 8
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 250
21866: PPUSH
21867: LD_VAR 0 10
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL_OW 272
21881: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21882: LD_ADDR_VAR 0 9
21886: PUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 251
21896: PPUSH
21897: LD_VAR 0 10
21901: PPUSH
21902: LD_VAR 0 5
21906: PPUSH
21907: CALL_OW 273
21911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21912: LD_VAR 0 8
21916: PPUSH
21917: LD_VAR 0 9
21921: PPUSH
21922: CALL_OW 488
21926: NOT
21927: IFFALSE 21931
// exit ;
21929: GO 22038
// ComAnimCustom ( unit , 1 ) ;
21931: LD_VAR 0 1
21935: PPUSH
21936: LD_INT 1
21938: PPUSH
21939: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21943: LD_VAR 0 8
21947: PPUSH
21948: LD_VAR 0 9
21952: PPUSH
21953: LD_VAR 0 6
21957: PPUSH
21958: LD_VAR 0 7
21962: PPUSH
21963: CALL_OW 330
// repeat wait ( 1 ) ;
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 316
21983: PUSH
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 314
21993: OR
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 302
22004: NOT
22005: OR
22006: PUSH
22007: LD_VAR 0 1
22011: PPUSH
22012: CALL_OW 301
22016: OR
22017: IFFALSE 21967
// RemoveSeeing ( _x , _y , side ) ;
22019: LD_VAR 0 8
22023: PPUSH
22024: LD_VAR 0 9
22028: PPUSH
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 331
// end ; end_of_file
22038: LD_VAR 0 4
22042: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22043: LD_VAR 0 1
22047: PUSH
22048: LD_INT 200
22050: DOUBLE
22051: GREATEREQUAL
22052: IFFALSE 22060
22054: LD_INT 299
22056: DOUBLE
22057: LESSEQUAL
22058: IFTRUE 22062
22060: GO 22094
22062: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22063: LD_VAR 0 1
22067: PPUSH
22068: LD_VAR 0 2
22072: PPUSH
22073: LD_VAR 0 3
22077: PPUSH
22078: LD_VAR 0 4
22082: PPUSH
22083: LD_VAR 0 5
22087: PPUSH
22088: CALL 18130 0 5
22092: GO 22171
22094: LD_INT 300
22096: DOUBLE
22097: GREATEREQUAL
22098: IFFALSE 22106
22100: LD_INT 399
22102: DOUBLE
22103: LESSEQUAL
22104: IFTRUE 22108
22106: GO 22170
22108: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22109: LD_VAR 0 1
22113: PPUSH
22114: LD_VAR 0 2
22118: PPUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 5
22133: PPUSH
22134: LD_VAR 0 6
22138: PPUSH
22139: LD_VAR 0 7
22143: PPUSH
22144: LD_VAR 0 8
22148: PPUSH
22149: LD_VAR 0 9
22153: PPUSH
22154: LD_VAR 0 10
22158: PPUSH
22159: LD_VAR 0 11
22163: PPUSH
22164: CALL 14463 0 11
22168: GO 22171
22170: POP
// end ;
22171: PPOPN 11
22173: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_VAR 0 2
22183: PPUSH
22184: LD_VAR 0 3
22188: PPUSH
22189: LD_VAR 0 4
22193: PPUSH
22194: LD_VAR 0 5
22198: PPUSH
22199: CALL 17866 0 5
// end ; end_of_file
22203: PPOPN 5
22205: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22206: LD_INT 0
22208: PPUSH
22209: PPUSH
// if exist_mode then
22210: LD_VAR 0 2
22214: IFFALSE 22239
// unit := CreateCharacter ( prefix & ident ) else
22216: LD_ADDR_VAR 0 5
22220: PUSH
22221: LD_VAR 0 3
22225: PUSH
22226: LD_VAR 0 1
22230: STR
22231: PPUSH
22232: CALL_OW 34
22236: ST_TO_ADDR
22237: GO 22254
// unit := NewCharacter ( ident ) ;
22239: LD_ADDR_VAR 0 5
22243: PUSH
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 25
22253: ST_TO_ADDR
// result := unit ;
22254: LD_ADDR_VAR 0 4
22258: PUSH
22259: LD_VAR 0 5
22263: ST_TO_ADDR
// end ;
22264: LD_VAR 0 4
22268: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22269: LD_INT 0
22271: PPUSH
22272: PPUSH
// if not side or not nation then
22273: LD_VAR 0 1
22277: NOT
22278: PUSH
22279: LD_VAR 0 2
22283: NOT
22284: OR
22285: IFFALSE 22289
// exit ;
22287: GO 23057
// case nation of nation_american :
22289: LD_VAR 0 2
22293: PUSH
22294: LD_INT 1
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22302
22300: GO 22516
22302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22303: LD_ADDR_VAR 0 4
22307: PUSH
22308: LD_INT 35
22310: PUSH
22311: LD_INT 45
22313: PUSH
22314: LD_INT 46
22316: PUSH
22317: LD_INT 47
22319: PUSH
22320: LD_INT 82
22322: PUSH
22323: LD_INT 83
22325: PUSH
22326: LD_INT 84
22328: PUSH
22329: LD_INT 85
22331: PUSH
22332: LD_INT 86
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 6
22343: PUSH
22344: LD_INT 15
22346: PUSH
22347: LD_INT 16
22349: PUSH
22350: LD_INT 7
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 13
22358: PUSH
22359: LD_INT 10
22361: PUSH
22362: LD_INT 14
22364: PUSH
22365: LD_INT 20
22367: PUSH
22368: LD_INT 21
22370: PUSH
22371: LD_INT 22
22373: PUSH
22374: LD_INT 25
22376: PUSH
22377: LD_INT 32
22379: PUSH
22380: LD_INT 27
22382: PUSH
22383: LD_INT 36
22385: PUSH
22386: LD_INT 69
22388: PUSH
22389: LD_INT 39
22391: PUSH
22392: LD_INT 34
22394: PUSH
22395: LD_INT 40
22397: PUSH
22398: LD_INT 48
22400: PUSH
22401: LD_INT 49
22403: PUSH
22404: LD_INT 50
22406: PUSH
22407: LD_INT 51
22409: PUSH
22410: LD_INT 52
22412: PUSH
22413: LD_INT 53
22415: PUSH
22416: LD_INT 54
22418: PUSH
22419: LD_INT 55
22421: PUSH
22422: LD_INT 56
22424: PUSH
22425: LD_INT 57
22427: PUSH
22428: LD_INT 58
22430: PUSH
22431: LD_INT 59
22433: PUSH
22434: LD_INT 60
22436: PUSH
22437: LD_INT 61
22439: PUSH
22440: LD_INT 62
22442: PUSH
22443: LD_INT 80
22445: PUSH
22446: LD_INT 82
22448: PUSH
22449: LD_INT 83
22451: PUSH
22452: LD_INT 84
22454: PUSH
22455: LD_INT 85
22457: PUSH
22458: LD_INT 86
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
22514: GO 22981
22516: LD_INT 2
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22750
22524: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22525: LD_ADDR_VAR 0 4
22529: PUSH
22530: LD_INT 35
22532: PUSH
22533: LD_INT 45
22535: PUSH
22536: LD_INT 46
22538: PUSH
22539: LD_INT 47
22541: PUSH
22542: LD_INT 82
22544: PUSH
22545: LD_INT 83
22547: PUSH
22548: LD_INT 84
22550: PUSH
22551: LD_INT 85
22553: PUSH
22554: LD_INT 87
22556: PUSH
22557: LD_INT 70
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 11
22565: PUSH
22566: LD_INT 3
22568: PUSH
22569: LD_INT 4
22571: PUSH
22572: LD_INT 5
22574: PUSH
22575: LD_INT 6
22577: PUSH
22578: LD_INT 15
22580: PUSH
22581: LD_INT 18
22583: PUSH
22584: LD_INT 7
22586: PUSH
22587: LD_INT 17
22589: PUSH
22590: LD_INT 8
22592: PUSH
22593: LD_INT 20
22595: PUSH
22596: LD_INT 21
22598: PUSH
22599: LD_INT 22
22601: PUSH
22602: LD_INT 72
22604: PUSH
22605: LD_INT 26
22607: PUSH
22608: LD_INT 69
22610: PUSH
22611: LD_INT 39
22613: PUSH
22614: LD_INT 40
22616: PUSH
22617: LD_INT 41
22619: PUSH
22620: LD_INT 42
22622: PUSH
22623: LD_INT 43
22625: PUSH
22626: LD_INT 48
22628: PUSH
22629: LD_INT 49
22631: PUSH
22632: LD_INT 50
22634: PUSH
22635: LD_INT 51
22637: PUSH
22638: LD_INT 52
22640: PUSH
22641: LD_INT 53
22643: PUSH
22644: LD_INT 54
22646: PUSH
22647: LD_INT 55
22649: PUSH
22650: LD_INT 56
22652: PUSH
22653: LD_INT 60
22655: PUSH
22656: LD_INT 61
22658: PUSH
22659: LD_INT 62
22661: PUSH
22662: LD_INT 66
22664: PUSH
22665: LD_INT 67
22667: PUSH
22668: LD_INT 68
22670: PUSH
22671: LD_INT 81
22673: PUSH
22674: LD_INT 82
22676: PUSH
22677: LD_INT 83
22679: PUSH
22680: LD_INT 84
22682: PUSH
22683: LD_INT 85
22685: PUSH
22686: LD_INT 87
22688: PUSH
22689: LD_INT 88
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
22748: GO 22981
22750: LD_INT 3
22752: DOUBLE
22753: EQUAL
22754: IFTRUE 22758
22756: GO 22980
22758: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22759: LD_ADDR_VAR 0 4
22763: PUSH
22764: LD_INT 46
22766: PUSH
22767: LD_INT 47
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 82
22778: PUSH
22779: LD_INT 83
22781: PUSH
22782: LD_INT 84
22784: PUSH
22785: LD_INT 85
22787: PUSH
22788: LD_INT 86
22790: PUSH
22791: LD_INT 11
22793: PUSH
22794: LD_INT 9
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 19
22802: PUSH
22803: LD_INT 21
22805: PUSH
22806: LD_INT 24
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_INT 25
22814: PUSH
22815: LD_INT 28
22817: PUSH
22818: LD_INT 29
22820: PUSH
22821: LD_INT 30
22823: PUSH
22824: LD_INT 31
22826: PUSH
22827: LD_INT 37
22829: PUSH
22830: LD_INT 38
22832: PUSH
22833: LD_INT 32
22835: PUSH
22836: LD_INT 27
22838: PUSH
22839: LD_INT 33
22841: PUSH
22842: LD_INT 69
22844: PUSH
22845: LD_INT 39
22847: PUSH
22848: LD_INT 34
22850: PUSH
22851: LD_INT 40
22853: PUSH
22854: LD_INT 71
22856: PUSH
22857: LD_INT 23
22859: PUSH
22860: LD_INT 44
22862: PUSH
22863: LD_INT 48
22865: PUSH
22866: LD_INT 49
22868: PUSH
22869: LD_INT 50
22871: PUSH
22872: LD_INT 51
22874: PUSH
22875: LD_INT 52
22877: PUSH
22878: LD_INT 53
22880: PUSH
22881: LD_INT 54
22883: PUSH
22884: LD_INT 55
22886: PUSH
22887: LD_INT 56
22889: PUSH
22890: LD_INT 57
22892: PUSH
22893: LD_INT 58
22895: PUSH
22896: LD_INT 59
22898: PUSH
22899: LD_INT 63
22901: PUSH
22902: LD_INT 64
22904: PUSH
22905: LD_INT 65
22907: PUSH
22908: LD_INT 82
22910: PUSH
22911: LD_INT 83
22913: PUSH
22914: LD_INT 84
22916: PUSH
22917: LD_INT 85
22919: PUSH
22920: LD_INT 86
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 22981
22980: POP
// if state > - 1 and state < 3 then
22981: LD_VAR 0 3
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: GREATER
22990: PUSH
22991: LD_VAR 0 3
22995: PUSH
22996: LD_INT 3
22998: LESS
22999: AND
23000: IFFALSE 23057
// for i in result do
23002: LD_ADDR_VAR 0 5
23006: PUSH
23007: LD_VAR 0 4
23011: PUSH
23012: FOR_IN
23013: IFFALSE 23055
// if GetTech ( i , side ) <> state then
23015: LD_VAR 0 5
23019: PPUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 321
23029: PUSH
23030: LD_VAR 0 3
23034: NONEQUAL
23035: IFFALSE 23053
// result := result diff i ;
23037: LD_ADDR_VAR 0 4
23041: PUSH
23042: LD_VAR 0 4
23046: PUSH
23047: LD_VAR 0 5
23051: DIFF
23052: ST_TO_ADDR
23053: GO 23012
23055: POP
23056: POP
// end ;
23057: LD_VAR 0 4
23061: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23062: LD_INT 0
23064: PPUSH
23065: PPUSH
23066: PPUSH
// result := true ;
23067: LD_ADDR_VAR 0 3
23071: PUSH
23072: LD_INT 1
23074: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23075: LD_ADDR_VAR 0 5
23079: PUSH
23080: LD_VAR 0 2
23084: PPUSH
23085: CALL_OW 480
23089: ST_TO_ADDR
// if not tmp then
23090: LD_VAR 0 5
23094: NOT
23095: IFFALSE 23099
// exit ;
23097: GO 23148
// for i in tmp do
23099: LD_ADDR_VAR 0 4
23103: PUSH
23104: LD_VAR 0 5
23108: PUSH
23109: FOR_IN
23110: IFFALSE 23146
// if GetTech ( i , side ) <> state_researched then
23112: LD_VAR 0 4
23116: PPUSH
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 321
23126: PUSH
23127: LD_INT 2
23129: NONEQUAL
23130: IFFALSE 23144
// begin result := false ;
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_INT 0
23139: ST_TO_ADDR
// exit ;
23140: POP
23141: POP
23142: GO 23148
// end ;
23144: GO 23109
23146: POP
23147: POP
// end ;
23148: LD_VAR 0 3
23152: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23153: LD_INT 0
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
23167: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23168: LD_VAR 0 1
23172: NOT
23173: PUSH
23174: LD_VAR 0 1
23178: PPUSH
23179: CALL_OW 257
23183: PUSH
23184: LD_INT 9
23186: NONEQUAL
23187: OR
23188: IFFALSE 23192
// exit ;
23190: GO 23765
// side := GetSide ( unit ) ;
23192: LD_ADDR_VAR 0 9
23196: PUSH
23197: LD_VAR 0 1
23201: PPUSH
23202: CALL_OW 255
23206: ST_TO_ADDR
// tech_space := tech_spacanom ;
23207: LD_ADDR_VAR 0 12
23211: PUSH
23212: LD_INT 29
23214: ST_TO_ADDR
// tech_time := tech_taurad ;
23215: LD_ADDR_VAR 0 13
23219: PUSH
23220: LD_INT 28
23222: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23223: LD_ADDR_VAR 0 11
23227: PUSH
23228: LD_VAR 0 1
23232: PPUSH
23233: CALL_OW 310
23237: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23238: LD_VAR 0 11
23242: PPUSH
23243: CALL_OW 247
23247: PUSH
23248: LD_INT 2
23250: EQUAL
23251: IFFALSE 23255
// exit ;
23253: GO 23765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23255: LD_ADDR_VAR 0 8
23259: PUSH
23260: LD_INT 81
23262: PUSH
23263: LD_VAR 0 9
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 21
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: ST_TO_ADDR
// if not tmp then
23298: LD_VAR 0 8
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23765
// if in_unit then
23307: LD_VAR 0 11
23311: IFFALSE 23335
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23313: LD_ADDR_VAR 0 10
23317: PUSH
23318: LD_VAR 0 8
23322: PPUSH
23323: LD_VAR 0 11
23327: PPUSH
23328: CALL_OW 74
23332: ST_TO_ADDR
23333: GO 23355
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23335: LD_ADDR_VAR 0 10
23339: PUSH
23340: LD_VAR 0 8
23344: PPUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 74
23354: ST_TO_ADDR
// if not enemy then
23355: LD_VAR 0 10
23359: NOT
23360: IFFALSE 23364
// exit ;
23362: GO 23765
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23364: LD_VAR 0 11
23368: PUSH
23369: LD_VAR 0 11
23373: PPUSH
23374: LD_VAR 0 10
23378: PPUSH
23379: CALL_OW 296
23383: PUSH
23384: LD_INT 13
23386: GREATER
23387: AND
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: LD_VAR 0 10
23398: PPUSH
23399: CALL_OW 296
23403: PUSH
23404: LD_INT 12
23406: GREATER
23407: OR
23408: IFFALSE 23412
// exit ;
23410: GO 23765
// missile := [ 1 ] ;
23412: LD_ADDR_VAR 0 14
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23423: LD_VAR 0 9
23427: PPUSH
23428: LD_VAR 0 12
23432: PPUSH
23433: CALL_OW 325
23437: IFFALSE 23466
// missile := Replace ( missile , missile + 1 , 2 ) ;
23439: LD_ADDR_VAR 0 14
23443: PUSH
23444: LD_VAR 0 14
23448: PPUSH
23449: LD_VAR 0 14
23453: PUSH
23454: LD_INT 1
23456: PLUS
23457: PPUSH
23458: LD_INT 2
23460: PPUSH
23461: CALL_OW 1
23465: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23466: LD_VAR 0 9
23470: PPUSH
23471: LD_VAR 0 13
23475: PPUSH
23476: CALL_OW 325
23480: PUSH
23481: LD_VAR 0 10
23485: PPUSH
23486: CALL_OW 255
23490: PPUSH
23491: LD_VAR 0 13
23495: PPUSH
23496: CALL_OW 325
23500: NOT
23501: AND
23502: IFFALSE 23531
// missile := Replace ( missile , missile + 1 , 3 ) ;
23504: LD_ADDR_VAR 0 14
23508: PUSH
23509: LD_VAR 0 14
23513: PPUSH
23514: LD_VAR 0 14
23518: PUSH
23519: LD_INT 1
23521: PLUS
23522: PPUSH
23523: LD_INT 3
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
// if missile < 2 then
23531: LD_VAR 0 14
23535: PUSH
23536: LD_INT 2
23538: LESS
23539: IFFALSE 23543
// exit ;
23541: GO 23765
// x := GetX ( enemy ) ;
23543: LD_ADDR_VAR 0 4
23547: PUSH
23548: LD_VAR 0 10
23552: PPUSH
23553: CALL_OW 250
23557: ST_TO_ADDR
// y := GetY ( enemy ) ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_VAR 0 10
23567: PPUSH
23568: CALL_OW 251
23572: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23573: LD_ADDR_VAR 0 6
23577: PUSH
23578: LD_VAR 0 4
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PPUSH
23587: LD_INT 1
23589: PPUSH
23590: CALL_OW 12
23594: PLUS
23595: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23596: LD_ADDR_VAR 0 7
23600: PUSH
23601: LD_VAR 0 5
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PPUSH
23610: LD_INT 1
23612: PPUSH
23613: CALL_OW 12
23617: PLUS
23618: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23619: LD_VAR 0 6
23623: PPUSH
23624: LD_VAR 0 7
23628: PPUSH
23629: CALL_OW 488
23633: NOT
23634: IFFALSE 23656
// begin _x := x ;
23636: LD_ADDR_VAR 0 6
23640: PUSH
23641: LD_VAR 0 4
23645: ST_TO_ADDR
// _y := y ;
23646: LD_ADDR_VAR 0 7
23650: PUSH
23651: LD_VAR 0 5
23655: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: LD_INT 1
23663: PPUSH
23664: LD_VAR 0 14
23668: PPUSH
23669: CALL_OW 12
23673: ST_TO_ADDR
// case i of 1 :
23674: LD_VAR 0 3
23678: PUSH
23679: LD_INT 1
23681: DOUBLE
23682: EQUAL
23683: IFTRUE 23687
23685: GO 23704
23687: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23688: LD_VAR 0 1
23692: PPUSH
23693: LD_VAR 0 10
23697: PPUSH
23698: CALL_OW 115
23702: GO 23765
23704: LD_INT 2
23706: DOUBLE
23707: EQUAL
23708: IFTRUE 23712
23710: GO 23734
23712: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 6
23722: PPUSH
23723: LD_VAR 0 7
23727: PPUSH
23728: CALL_OW 153
23732: GO 23765
23734: LD_INT 3
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 23764
23742: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_VAR 0 6
23752: PPUSH
23753: LD_VAR 0 7
23757: PPUSH
23758: CALL_OW 154
23762: GO 23765
23764: POP
// end ;
23765: LD_VAR 0 2
23769: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23770: LD_INT 0
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
// if not unit or not building then
23778: LD_VAR 0 1
23782: NOT
23783: PUSH
23784: LD_VAR 0 2
23788: NOT
23789: OR
23790: IFFALSE 23794
// exit ;
23792: GO 23952
// x := GetX ( building ) ;
23794: LD_ADDR_VAR 0 5
23798: PUSH
23799: LD_VAR 0 2
23803: PPUSH
23804: CALL_OW 250
23808: ST_TO_ADDR
// y := GetY ( building ) ;
23809: LD_ADDR_VAR 0 6
23813: PUSH
23814: LD_VAR 0 2
23818: PPUSH
23819: CALL_OW 251
23823: ST_TO_ADDR
// for i = 0 to 5 do
23824: LD_ADDR_VAR 0 4
23828: PUSH
23829: DOUBLE
23830: LD_INT 0
23832: DEC
23833: ST_TO_ADDR
23834: LD_INT 5
23836: PUSH
23837: FOR_TO
23838: IFFALSE 23950
// begin _x := ShiftX ( x , i , 3 ) ;
23840: LD_ADDR_VAR 0 7
23844: PUSH
23845: LD_VAR 0 5
23849: PPUSH
23850: LD_VAR 0 4
23854: PPUSH
23855: LD_INT 3
23857: PPUSH
23858: CALL_OW 272
23862: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23863: LD_ADDR_VAR 0 8
23867: PUSH
23868: LD_VAR 0 6
23872: PPUSH
23873: LD_VAR 0 4
23877: PPUSH
23878: LD_INT 3
23880: PPUSH
23881: CALL_OW 273
23885: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23886: LD_VAR 0 7
23890: PPUSH
23891: LD_VAR 0 8
23895: PPUSH
23896: CALL_OW 488
23900: NOT
23901: IFFALSE 23905
// continue ;
23903: GO 23837
// if HexInfo ( _x , _y ) = 0 then
23905: LD_VAR 0 7
23909: PPUSH
23910: LD_VAR 0 8
23914: PPUSH
23915: CALL_OW 428
23919: PUSH
23920: LD_INT 0
23922: EQUAL
23923: IFFALSE 23948
// begin ComMoveXY ( unit , _x , _y ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_VAR 0 7
23934: PPUSH
23935: LD_VAR 0 8
23939: PPUSH
23940: CALL_OW 111
// exit ;
23944: POP
23945: POP
23946: GO 23952
// end ; end ;
23948: GO 23837
23950: POP
23951: POP
// end ;
23952: LD_VAR 0 3
23956: RET
// export function ScanBase ( side , base_area ) ; begin
23957: LD_INT 0
23959: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23960: LD_ADDR_VAR 0 3
23964: PUSH
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_INT 81
23972: PUSH
23973: LD_VAR 0 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PPUSH
23982: CALL_OW 70
23986: ST_TO_ADDR
// end ;
23987: LD_VAR 0 3
23991: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
// result := false ;
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// side := GetSide ( unit ) ;
24006: LD_ADDR_VAR 0 3
24010: PUSH
24011: LD_VAR 0 1
24015: PPUSH
24016: CALL_OW 255
24020: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24021: LD_ADDR_VAR 0 4
24025: PUSH
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 248
24035: ST_TO_ADDR
// case nat of 1 :
24036: LD_VAR 0 4
24040: PUSH
24041: LD_INT 1
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24060
24049: POP
// tech := tech_lassight ; 2 :
24050: LD_ADDR_VAR 0 5
24054: PUSH
24055: LD_INT 12
24057: ST_TO_ADDR
24058: GO 24099
24060: LD_INT 2
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24079
24068: POP
// tech := tech_mortar ; 3 :
24069: LD_ADDR_VAR 0 5
24073: PUSH
24074: LD_INT 41
24076: ST_TO_ADDR
24077: GO 24099
24079: LD_INT 3
24081: DOUBLE
24082: EQUAL
24083: IFTRUE 24087
24085: GO 24098
24087: POP
// tech := tech_bazooka ; end ;
24088: LD_ADDR_VAR 0 5
24092: PUSH
24093: LD_INT 44
24095: ST_TO_ADDR
24096: GO 24099
24098: POP
// if Researched ( side , tech ) then
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_VAR 0 5
24108: PPUSH
24109: CALL_OW 325
24113: IFFALSE 24140
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24115: LD_ADDR_VAR 0 2
24119: PUSH
24120: LD_INT 5
24122: PUSH
24123: LD_INT 8
24125: PUSH
24126: LD_INT 9
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: PUSH
24134: LD_VAR 0 4
24138: ARRAY
24139: ST_TO_ADDR
// end ;
24140: LD_VAR 0 2
24144: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24145: LD_INT 0
24147: PPUSH
24148: PPUSH
24149: PPUSH
// if not mines then
24150: LD_VAR 0 2
24154: NOT
24155: IFFALSE 24159
// exit ;
24157: GO 24303
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24159: LD_ADDR_VAR 0 5
24163: PUSH
24164: LD_INT 81
24166: PUSH
24167: LD_VAR 0 1
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 3
24178: PUSH
24179: LD_INT 21
24181: PUSH
24182: LD_INT 3
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PPUSH
24197: CALL_OW 69
24201: ST_TO_ADDR
// for i in mines do
24202: LD_ADDR_VAR 0 4
24206: PUSH
24207: LD_VAR 0 2
24211: PUSH
24212: FOR_IN
24213: IFFALSE 24301
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24215: LD_VAR 0 4
24219: PUSH
24220: LD_INT 1
24222: ARRAY
24223: PPUSH
24224: LD_VAR 0 4
24228: PUSH
24229: LD_INT 2
24231: ARRAY
24232: PPUSH
24233: CALL_OW 458
24237: NOT
24238: IFFALSE 24242
// continue ;
24240: GO 24212
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24242: LD_VAR 0 4
24246: PUSH
24247: LD_INT 1
24249: ARRAY
24250: PPUSH
24251: LD_VAR 0 4
24255: PUSH
24256: LD_INT 2
24258: ARRAY
24259: PPUSH
24260: CALL_OW 428
24264: PUSH
24265: LD_VAR 0 5
24269: IN
24270: IFFALSE 24299
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24272: LD_VAR 0 4
24276: PUSH
24277: LD_INT 1
24279: ARRAY
24280: PPUSH
24281: LD_VAR 0 4
24285: PUSH
24286: LD_INT 2
24288: ARRAY
24289: PPUSH
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL_OW 456
// end ;
24299: GO 24212
24301: POP
24302: POP
// end ;
24303: LD_VAR 0 3
24307: RET
// export function Count ( array ) ; var i ; begin
24308: LD_INT 0
24310: PPUSH
24311: PPUSH
// result := 0 ;
24312: LD_ADDR_VAR 0 2
24316: PUSH
24317: LD_INT 0
24319: ST_TO_ADDR
// for i in array do
24320: LD_ADDR_VAR 0 3
24324: PUSH
24325: LD_VAR 0 1
24329: PUSH
24330: FOR_IN
24331: IFFALSE 24355
// if i then
24333: LD_VAR 0 3
24337: IFFALSE 24353
// result := result + 1 ;
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: LD_VAR 0 2
24348: PUSH
24349: LD_INT 1
24351: PLUS
24352: ST_TO_ADDR
24353: GO 24330
24355: POP
24356: POP
// end ;
24357: LD_VAR 0 2
24361: RET
// export function IsEmpty ( building ) ; begin
24362: LD_INT 0
24364: PPUSH
// if not building then
24365: LD_VAR 0 1
24369: NOT
24370: IFFALSE 24374
// exit ;
24372: GO 24417
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24374: LD_ADDR_VAR 0 2
24378: PUSH
24379: LD_VAR 0 1
24383: PUSH
24384: LD_INT 22
24386: PUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 58
24403: PUSH
24404: EMPTY
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PPUSH
24411: CALL_OW 69
24415: IN
24416: ST_TO_ADDR
// end ;
24417: LD_VAR 0 2
24421: RET
// export function IsNotFull ( building ) ; var places ; begin
24422: LD_INT 0
24424: PPUSH
24425: PPUSH
// if not building then
24426: LD_VAR 0 1
24430: NOT
24431: IFFALSE 24435
// exit ;
24433: GO 24606
// result := false ;
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_INT 0
24442: ST_TO_ADDR
// places := 0 ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 0
24450: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 266
24460: PUSH
24461: LD_INT 0
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24523
24467: LD_INT 1
24469: DOUBLE
24470: EQUAL
24471: IFTRUE 24523
24473: LD_INT 6
24475: DOUBLE
24476: EQUAL
24477: IFTRUE 24523
24479: LD_INT 7
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24523
24485: LD_INT 8
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24523
24491: LD_INT 4
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24523
24497: LD_INT 5
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24523
24503: LD_INT 2
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24523
24509: LD_INT 3
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24523
24515: LD_INT 35
24517: DOUBLE
24518: EQUAL
24519: IFTRUE 24523
24521: GO 24534
24523: POP
// places := 6 ; b_bunker , b_breastwork :
24524: LD_ADDR_VAR 0 3
24528: PUSH
24529: LD_INT 6
24531: ST_TO_ADDR
24532: GO 24579
24534: LD_INT 32
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24548
24540: LD_INT 31
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24559
24548: POP
// places := 1 ; b_control_tower :
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_INT 1
24556: ST_TO_ADDR
24557: GO 24579
24559: LD_INT 36
24561: DOUBLE
24562: EQUAL
24563: IFTRUE 24567
24565: GO 24578
24567: POP
// places := 3 ; end ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_INT 3
24575: ST_TO_ADDR
24576: GO 24579
24578: POP
// if places then
24579: LD_VAR 0 3
24583: IFFALSE 24606
// result := UnitsInside ( building ) < places ;
24585: LD_ADDR_VAR 0 2
24589: PUSH
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 313
24599: PUSH
24600: LD_VAR 0 3
24604: LESS
24605: ST_TO_ADDR
// end ;
24606: LD_VAR 0 2
24610: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
// tmp := [ ] ;
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: EMPTY
24623: ST_TO_ADDR
// list := [ ] ;
24624: LD_ADDR_VAR 0 5
24628: PUSH
24629: EMPTY
24630: ST_TO_ADDR
// for i = 16 to 25 do
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: DOUBLE
24637: LD_INT 16
24639: DEC
24640: ST_TO_ADDR
24641: LD_INT 25
24643: PUSH
24644: FOR_TO
24645: IFFALSE 24718
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_VAR 0 3
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_VAR 0 1
24664: PPUSH
24665: CALL_OW 255
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 91
24676: PUSH
24677: LD_VAR 0 1
24681: PUSH
24682: LD_INT 6
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 30
24692: PUSH
24693: LD_VAR 0 4
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: PPUSH
24710: CALL_OW 69
24714: ADD
24715: ST_TO_ADDR
24716: GO 24644
24718: POP
24719: POP
// for i = 1 to tmp do
24720: LD_ADDR_VAR 0 4
24724: PUSH
24725: DOUBLE
24726: LD_INT 1
24728: DEC
24729: ST_TO_ADDR
24730: LD_VAR 0 3
24734: PUSH
24735: FOR_TO
24736: IFFALSE 24824
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24738: LD_ADDR_VAR 0 5
24742: PUSH
24743: LD_VAR 0 5
24747: PUSH
24748: LD_VAR 0 3
24752: PUSH
24753: LD_VAR 0 4
24757: ARRAY
24758: PPUSH
24759: CALL_OW 266
24763: PUSH
24764: LD_VAR 0 3
24768: PUSH
24769: LD_VAR 0 4
24773: ARRAY
24774: PPUSH
24775: CALL_OW 250
24779: PUSH
24780: LD_VAR 0 3
24784: PUSH
24785: LD_VAR 0 4
24789: ARRAY
24790: PPUSH
24791: CALL_OW 251
24795: PUSH
24796: LD_VAR 0 3
24800: PUSH
24801: LD_VAR 0 4
24805: ARRAY
24806: PPUSH
24807: CALL_OW 254
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: ADD
24821: ST_TO_ADDR
24822: GO 24735
24824: POP
24825: POP
// result := list ;
24826: LD_ADDR_VAR 0 2
24830: PUSH
24831: LD_VAR 0 5
24835: ST_TO_ADDR
// end ;
24836: LD_VAR 0 2
24840: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24841: LD_INT 0
24843: PPUSH
24844: PPUSH
24845: PPUSH
24846: PPUSH
24847: PPUSH
24848: PPUSH
24849: PPUSH
// if not factory then
24850: LD_VAR 0 1
24854: NOT
24855: IFFALSE 24859
// exit ;
24857: GO 25452
// if control = control_apeman then
24859: LD_VAR 0 4
24863: PUSH
24864: LD_INT 5
24866: EQUAL
24867: IFFALSE 24976
// begin tmp := UnitsInside ( factory ) ;
24869: LD_ADDR_VAR 0 8
24873: PUSH
24874: LD_VAR 0 1
24878: PPUSH
24879: CALL_OW 313
24883: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24884: LD_VAR 0 8
24888: PPUSH
24889: LD_INT 25
24891: PUSH
24892: LD_INT 12
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 72
24903: NOT
24904: IFFALSE 24914
// control := control_manual ;
24906: LD_ADDR_VAR 0 4
24910: PUSH
24911: LD_INT 1
24913: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24914: LD_ADDR_VAR 0 8
24918: PUSH
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL 24611 0 1
24928: ST_TO_ADDR
// if tmp then
24929: LD_VAR 0 8
24933: IFFALSE 24976
// begin for i in tmp do
24935: LD_ADDR_VAR 0 7
24939: PUSH
24940: LD_VAR 0 8
24944: PUSH
24945: FOR_IN
24946: IFFALSE 24974
// if i [ 1 ] = b_ext_radio then
24948: LD_VAR 0 7
24952: PUSH
24953: LD_INT 1
24955: ARRAY
24956: PUSH
24957: LD_INT 22
24959: EQUAL
24960: IFFALSE 24972
// begin control := control_remote ;
24962: LD_ADDR_VAR 0 4
24966: PUSH
24967: LD_INT 2
24969: ST_TO_ADDR
// break ;
24970: GO 24974
// end ;
24972: GO 24945
24974: POP
24975: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24976: LD_VAR 0 1
24980: PPUSH
24981: LD_VAR 0 2
24985: PPUSH
24986: LD_VAR 0 3
24990: PPUSH
24991: LD_VAR 0 4
24995: PPUSH
24996: LD_VAR 0 5
25000: PPUSH
25001: CALL_OW 448
25005: IFFALSE 25040
// begin result := [ chassis , engine , control , weapon ] ;
25007: LD_ADDR_VAR 0 6
25011: PUSH
25012: LD_VAR 0 2
25016: PUSH
25017: LD_VAR 0 3
25021: PUSH
25022: LD_VAR 0 4
25026: PUSH
25027: LD_VAR 0 5
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: ST_TO_ADDR
// exit ;
25038: GO 25452
// end ; _chassis := AvailableChassisList ( factory ) ;
25040: LD_ADDR_VAR 0 9
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 475
25054: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25055: LD_ADDR_VAR 0 11
25059: PUSH
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL_OW 476
25069: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25070: LD_ADDR_VAR 0 12
25074: PUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 477
25084: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25085: LD_ADDR_VAR 0 10
25089: PUSH
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 478
25099: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25100: LD_VAR 0 9
25104: NOT
25105: PUSH
25106: LD_VAR 0 11
25110: NOT
25111: OR
25112: PUSH
25113: LD_VAR 0 12
25117: NOT
25118: OR
25119: PUSH
25120: LD_VAR 0 10
25124: NOT
25125: OR
25126: IFFALSE 25161
// begin result := [ chassis , engine , control , weapon ] ;
25128: LD_ADDR_VAR 0 6
25132: PUSH
25133: LD_VAR 0 2
25137: PUSH
25138: LD_VAR 0 3
25142: PUSH
25143: LD_VAR 0 4
25147: PUSH
25148: LD_VAR 0 5
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// exit ;
25159: GO 25452
// end ; if not chassis in _chassis then
25161: LD_VAR 0 2
25165: PUSH
25166: LD_VAR 0 9
25170: IN
25171: NOT
25172: IFFALSE 25198
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25174: LD_ADDR_VAR 0 2
25178: PUSH
25179: LD_VAR 0 9
25183: PUSH
25184: LD_INT 1
25186: PPUSH
25187: LD_VAR 0 9
25191: PPUSH
25192: CALL_OW 12
25196: ARRAY
25197: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25198: LD_VAR 0 2
25202: PPUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: CALL 25457 0 2
25212: NOT
25213: IFFALSE 25272
// repeat engine := _engine [ 1 ] ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_VAR 0 11
25224: PUSH
25225: LD_INT 1
25227: ARRAY
25228: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25229: LD_ADDR_VAR 0 11
25233: PUSH
25234: LD_VAR 0 11
25238: PPUSH
25239: LD_INT 1
25241: PPUSH
25242: CALL_OW 3
25246: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25247: LD_VAR 0 2
25251: PPUSH
25252: LD_VAR 0 3
25256: PPUSH
25257: CALL 25457 0 2
25261: PUSH
25262: LD_VAR 0 11
25266: PUSH
25267: EMPTY
25268: EQUAL
25269: OR
25270: IFFALSE 25215
// if not control in _control then
25272: LD_VAR 0 4
25276: PUSH
25277: LD_VAR 0 12
25281: IN
25282: NOT
25283: IFFALSE 25309
// control := _control [ rand ( 1 , _control ) ] ;
25285: LD_ADDR_VAR 0 4
25289: PUSH
25290: LD_VAR 0 12
25294: PUSH
25295: LD_INT 1
25297: PPUSH
25298: LD_VAR 0 12
25302: PPUSH
25303: CALL_OW 12
25307: ARRAY
25308: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25309: LD_VAR 0 2
25313: PPUSH
25314: LD_VAR 0 5
25318: PPUSH
25319: CALL 25677 0 2
25323: NOT
25324: IFFALSE 25383
// repeat weapon := _weapon [ 1 ] ;
25326: LD_ADDR_VAR 0 5
25330: PUSH
25331: LD_VAR 0 10
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25340: LD_ADDR_VAR 0 10
25344: PUSH
25345: LD_VAR 0 10
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 3
25357: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25358: LD_VAR 0 2
25362: PPUSH
25363: LD_VAR 0 5
25367: PPUSH
25368: CALL 25677 0 2
25372: PUSH
25373: LD_VAR 0 10
25377: PUSH
25378: EMPTY
25379: EQUAL
25380: OR
25381: IFFALSE 25326
// result := [ ] ;
25383: LD_ADDR_VAR 0 6
25387: PUSH
25388: EMPTY
25389: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25390: LD_VAR 0 1
25394: PPUSH
25395: LD_VAR 0 2
25399: PPUSH
25400: LD_VAR 0 3
25404: PPUSH
25405: LD_VAR 0 4
25409: PPUSH
25410: LD_VAR 0 5
25414: PPUSH
25415: CALL_OW 448
25419: IFFALSE 25452
// result := [ chassis , engine , control , weapon ] ;
25421: LD_ADDR_VAR 0 6
25425: PUSH
25426: LD_VAR 0 2
25430: PUSH
25431: LD_VAR 0 3
25435: PUSH
25436: LD_VAR 0 4
25440: PUSH
25441: LD_VAR 0 5
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: ST_TO_ADDR
// end ;
25452: LD_VAR 0 6
25456: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25457: LD_INT 0
25459: PPUSH
// if not chassis or not engine then
25460: LD_VAR 0 1
25464: NOT
25465: PUSH
25466: LD_VAR 0 2
25470: NOT
25471: OR
25472: IFFALSE 25476
// exit ;
25474: GO 25672
// case engine of engine_solar :
25476: LD_VAR 0 2
25480: PUSH
25481: LD_INT 2
25483: DOUBLE
25484: EQUAL
25485: IFTRUE 25489
25487: GO 25527
25489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25490: LD_ADDR_VAR 0 3
25494: PUSH
25495: LD_INT 11
25497: PUSH
25498: LD_INT 12
25500: PUSH
25501: LD_INT 13
25503: PUSH
25504: LD_INT 14
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
25525: GO 25656
25527: LD_INT 1
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25597
25535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_INT 11
25543: PUSH
25544: LD_INT 12
25546: PUSH
25547: LD_INT 13
25549: PUSH
25550: LD_INT 14
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: LD_INT 4
25564: PUSH
25565: LD_INT 5
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 23
25573: PUSH
25574: LD_INT 22
25576: PUSH
25577: LD_INT 24
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
25595: GO 25656
25597: LD_INT 3
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25655
25605: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_INT 13
25613: PUSH
25614: LD_INT 14
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 4
25625: PUSH
25626: LD_INT 5
25628: PUSH
25629: LD_INT 21
25631: PUSH
25632: LD_INT 22
25634: PUSH
25635: LD_INT 23
25637: PUSH
25638: LD_INT 24
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: ST_TO_ADDR
25653: GO 25656
25655: POP
// result := ( chassis in result ) ;
25656: LD_ADDR_VAR 0 3
25660: PUSH
25661: LD_VAR 0 1
25665: PUSH
25666: LD_VAR 0 3
25670: IN
25671: ST_TO_ADDR
// end ;
25672: LD_VAR 0 3
25676: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25677: LD_INT 0
25679: PPUSH
// if not chassis or not weapon then
25680: LD_VAR 0 1
25684: NOT
25685: PUSH
25686: LD_VAR 0 2
25690: NOT
25691: OR
25692: IFFALSE 25696
// exit ;
25694: GO 26756
// case weapon of us_machine_gun :
25696: LD_VAR 0 2
25700: PUSH
25701: LD_INT 2
25703: DOUBLE
25704: EQUAL
25705: IFTRUE 25709
25707: GO 25739
25709: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25710: LD_ADDR_VAR 0 3
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: LD_INT 3
25723: PUSH
25724: LD_INT 4
25726: PUSH
25727: LD_INT 5
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
25737: GO 26740
25739: LD_INT 3
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25777
25747: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25748: LD_ADDR_VAR 0 3
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 4
25764: PUSH
25765: LD_INT 5
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
25775: GO 26740
25777: LD_INT 11
25779: DOUBLE
25780: EQUAL
25781: IFTRUE 25785
25783: GO 25815
25785: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25786: LD_ADDR_VAR 0 3
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 4
25802: PUSH
25803: LD_INT 5
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
25813: GO 26740
25815: LD_INT 4
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25849
25823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 4
25837: PUSH
25838: LD_INT 5
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
25847: GO 26740
25849: LD_INT 5
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25883
25857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: LD_INT 3
25868: PUSH
25869: LD_INT 4
25871: PUSH
25872: LD_INT 5
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
25881: GO 26740
25883: LD_INT 9
25885: DOUBLE
25886: EQUAL
25887: IFTRUE 25891
25889: GO 25917
25891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25892: LD_ADDR_VAR 0 3
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 4
25905: PUSH
25906: LD_INT 5
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: ST_TO_ADDR
25915: GO 26740
25917: LD_INT 7
25919: DOUBLE
25920: EQUAL
25921: IFTRUE 25925
25923: GO 25951
25925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_INT 2
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: LD_INT 4
25939: PUSH
25940: LD_INT 5
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: ST_TO_ADDR
25949: GO 26740
25951: LD_INT 12
25953: DOUBLE
25954: EQUAL
25955: IFTRUE 25959
25957: GO 25985
25959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25960: LD_ADDR_VAR 0 3
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: ST_TO_ADDR
25983: GO 26740
25985: LD_INT 13
25987: DOUBLE
25988: EQUAL
25989: IFTRUE 25993
25991: GO 26019
25993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25994: LD_ADDR_VAR 0 3
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: LD_INT 4
26007: PUSH
26008: LD_INT 5
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: ST_TO_ADDR
26017: GO 26740
26019: LD_INT 14
26021: DOUBLE
26022: EQUAL
26023: IFTRUE 26027
26025: GO 26045
26027: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26028: LD_ADDR_VAR 0 3
26032: PUSH
26033: LD_INT 4
26035: PUSH
26036: LD_INT 5
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: ST_TO_ADDR
26043: GO 26740
26045: LD_INT 6
26047: DOUBLE
26048: EQUAL
26049: IFTRUE 26053
26051: GO 26071
26053: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_INT 4
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: ST_TO_ADDR
26069: GO 26740
26071: LD_INT 10
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26097
26079: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_INT 4
26087: PUSH
26088: LD_INT 5
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: ST_TO_ADDR
26095: GO 26740
26097: LD_INT 22
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26131
26105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_INT 11
26113: PUSH
26114: LD_INT 12
26116: PUSH
26117: LD_INT 13
26119: PUSH
26120: LD_INT 14
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
26129: GO 26740
26131: LD_INT 23
26133: DOUBLE
26134: EQUAL
26135: IFTRUE 26139
26137: GO 26165
26139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_INT 11
26147: PUSH
26148: LD_INT 12
26150: PUSH
26151: LD_INT 13
26153: PUSH
26154: LD_INT 14
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: ST_TO_ADDR
26163: GO 26740
26165: LD_INT 24
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26199
26173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 11
26181: PUSH
26182: LD_INT 12
26184: PUSH
26185: LD_INT 13
26187: PUSH
26188: LD_INT 14
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 26740
26199: LD_INT 30
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26233
26207: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 11
26215: PUSH
26216: LD_INT 12
26218: PUSH
26219: LD_INT 13
26221: PUSH
26222: LD_INT 14
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: ST_TO_ADDR
26231: GO 26740
26233: LD_INT 25
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26241
26239: GO 26259
26241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26242: LD_ADDR_VAR 0 3
26246: PUSH
26247: LD_INT 13
26249: PUSH
26250: LD_INT 14
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: ST_TO_ADDR
26257: GO 26740
26259: LD_INT 27
26261: DOUBLE
26262: EQUAL
26263: IFTRUE 26267
26265: GO 26285
26267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: LD_INT 13
26275: PUSH
26276: LD_INT 14
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 26740
26285: LD_INT 92
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26319
26293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 11
26301: PUSH
26302: LD_INT 12
26304: PUSH
26305: LD_INT 13
26307: PUSH
26308: LD_INT 14
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: ST_TO_ADDR
26317: GO 26740
26319: LD_INT 28
26321: DOUBLE
26322: EQUAL
26323: IFTRUE 26327
26325: GO 26345
26327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_INT 13
26335: PUSH
26336: LD_INT 14
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: ST_TO_ADDR
26343: GO 26740
26345: LD_INT 29
26347: DOUBLE
26348: EQUAL
26349: IFTRUE 26353
26351: GO 26371
26353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_INT 13
26361: PUSH
26362: LD_INT 14
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: ST_TO_ADDR
26369: GO 26740
26371: LD_INT 31
26373: DOUBLE
26374: EQUAL
26375: IFTRUE 26379
26377: GO 26397
26379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26380: LD_ADDR_VAR 0 3
26384: PUSH
26385: LD_INT 13
26387: PUSH
26388: LD_INT 14
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: ST_TO_ADDR
26395: GO 26740
26397: LD_INT 26
26399: DOUBLE
26400: EQUAL
26401: IFTRUE 26405
26403: GO 26423
26405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26406: LD_ADDR_VAR 0 3
26410: PUSH
26411: LD_INT 13
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: ST_TO_ADDR
26421: GO 26740
26423: LD_INT 42
26425: DOUBLE
26426: EQUAL
26427: IFTRUE 26431
26429: GO 26457
26431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26432: LD_ADDR_VAR 0 3
26436: PUSH
26437: LD_INT 21
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_INT 23
26445: PUSH
26446: LD_INT 24
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: ST_TO_ADDR
26455: GO 26740
26457: LD_INT 43
26459: DOUBLE
26460: EQUAL
26461: IFTRUE 26465
26463: GO 26491
26465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26466: LD_ADDR_VAR 0 3
26470: PUSH
26471: LD_INT 21
26473: PUSH
26474: LD_INT 22
26476: PUSH
26477: LD_INT 23
26479: PUSH
26480: LD_INT 24
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: ST_TO_ADDR
26489: GO 26740
26491: LD_INT 44
26493: DOUBLE
26494: EQUAL
26495: IFTRUE 26499
26497: GO 26525
26499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: LD_INT 21
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_INT 23
26513: PUSH
26514: LD_INT 24
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: ST_TO_ADDR
26523: GO 26740
26525: LD_INT 45
26527: DOUBLE
26528: EQUAL
26529: IFTRUE 26533
26531: GO 26559
26533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_INT 21
26541: PUSH
26542: LD_INT 22
26544: PUSH
26545: LD_INT 23
26547: PUSH
26548: LD_INT 24
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
26557: GO 26740
26559: LD_INT 49
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26593
26567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26568: LD_ADDR_VAR 0 3
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 22
26578: PUSH
26579: LD_INT 23
26581: PUSH
26582: LD_INT 24
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
26591: GO 26740
26593: LD_INT 51
26595: DOUBLE
26596: EQUAL
26597: IFTRUE 26601
26599: GO 26627
26601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26602: LD_ADDR_VAR 0 3
26606: PUSH
26607: LD_INT 21
26609: PUSH
26610: LD_INT 22
26612: PUSH
26613: LD_INT 23
26615: PUSH
26616: LD_INT 24
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: ST_TO_ADDR
26625: GO 26740
26627: LD_INT 52
26629: DOUBLE
26630: EQUAL
26631: IFTRUE 26635
26633: GO 26661
26635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 21
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_INT 23
26649: PUSH
26650: LD_INT 24
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: ST_TO_ADDR
26659: GO 26740
26661: LD_INT 53
26663: DOUBLE
26664: EQUAL
26665: IFTRUE 26669
26667: GO 26687
26669: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26670: LD_ADDR_VAR 0 3
26674: PUSH
26675: LD_INT 23
26677: PUSH
26678: LD_INT 24
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: ST_TO_ADDR
26685: GO 26740
26687: LD_INT 46
26689: DOUBLE
26690: EQUAL
26691: IFTRUE 26695
26693: GO 26713
26695: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26696: LD_ADDR_VAR 0 3
26700: PUSH
26701: LD_INT 23
26703: PUSH
26704: LD_INT 24
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: ST_TO_ADDR
26711: GO 26740
26713: LD_INT 47
26715: DOUBLE
26716: EQUAL
26717: IFTRUE 26721
26719: GO 26739
26721: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26722: LD_ADDR_VAR 0 3
26726: PUSH
26727: LD_INT 23
26729: PUSH
26730: LD_INT 24
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: ST_TO_ADDR
26737: GO 26740
26739: POP
// result := ( chassis in result ) ;
26740: LD_ADDR_VAR 0 3
26744: PUSH
26745: LD_VAR 0 1
26749: PUSH
26750: LD_VAR 0 3
26754: IN
26755: ST_TO_ADDR
// end ;
26756: LD_VAR 0 3
26760: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
// result := array ;
26770: LD_ADDR_VAR 0 5
26774: PUSH
26775: LD_VAR 0 1
26779: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26780: LD_VAR 0 1
26784: NOT
26785: PUSH
26786: LD_VAR 0 2
26790: NOT
26791: OR
26792: PUSH
26793: LD_VAR 0 3
26797: NOT
26798: OR
26799: PUSH
26800: LD_VAR 0 2
26804: PUSH
26805: LD_VAR 0 1
26809: GREATER
26810: OR
26811: PUSH
26812: LD_VAR 0 3
26816: PUSH
26817: LD_VAR 0 1
26821: GREATER
26822: OR
26823: IFFALSE 26827
// exit ;
26825: GO 27123
// if direction then
26827: LD_VAR 0 4
26831: IFFALSE 26895
// begin d := 1 ;
26833: LD_ADDR_VAR 0 9
26837: PUSH
26838: LD_INT 1
26840: ST_TO_ADDR
// if i_from > i_to then
26841: LD_VAR 0 2
26845: PUSH
26846: LD_VAR 0 3
26850: GREATER
26851: IFFALSE 26877
// length := ( array - i_from ) + i_to else
26853: LD_ADDR_VAR 0 11
26857: PUSH
26858: LD_VAR 0 1
26862: PUSH
26863: LD_VAR 0 2
26867: MINUS
26868: PUSH
26869: LD_VAR 0 3
26873: PLUS
26874: ST_TO_ADDR
26875: GO 26893
// length := i_to - i_from ;
26877: LD_ADDR_VAR 0 11
26881: PUSH
26882: LD_VAR 0 3
26886: PUSH
26887: LD_VAR 0 2
26891: MINUS
26892: ST_TO_ADDR
// end else
26893: GO 26956
// begin d := - 1 ;
26895: LD_ADDR_VAR 0 9
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: ST_TO_ADDR
// if i_from > i_to then
26904: LD_VAR 0 2
26908: PUSH
26909: LD_VAR 0 3
26913: GREATER
26914: IFFALSE 26934
// length := i_from - i_to else
26916: LD_ADDR_VAR 0 11
26920: PUSH
26921: LD_VAR 0 2
26925: PUSH
26926: LD_VAR 0 3
26930: MINUS
26931: ST_TO_ADDR
26932: GO 26956
// length := ( array - i_to ) + i_from ;
26934: LD_ADDR_VAR 0 11
26938: PUSH
26939: LD_VAR 0 1
26943: PUSH
26944: LD_VAR 0 3
26948: MINUS
26949: PUSH
26950: LD_VAR 0 2
26954: PLUS
26955: ST_TO_ADDR
// end ; if not length then
26956: LD_VAR 0 11
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27123
// tmp := array ;
26965: LD_ADDR_VAR 0 10
26969: PUSH
26970: LD_VAR 0 1
26974: ST_TO_ADDR
// for i = 1 to length do
26975: LD_ADDR_VAR 0 6
26979: PUSH
26980: DOUBLE
26981: LD_INT 1
26983: DEC
26984: ST_TO_ADDR
26985: LD_VAR 0 11
26989: PUSH
26990: FOR_TO
26991: IFFALSE 27111
// begin for j = 1 to array do
26993: LD_ADDR_VAR 0 7
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_VAR 0 1
27007: PUSH
27008: FOR_TO
27009: IFFALSE 27097
// begin k := j + d ;
27011: LD_ADDR_VAR 0 8
27015: PUSH
27016: LD_VAR 0 7
27020: PUSH
27021: LD_VAR 0 9
27025: PLUS
27026: ST_TO_ADDR
// if k > array then
27027: LD_VAR 0 8
27031: PUSH
27032: LD_VAR 0 1
27036: GREATER
27037: IFFALSE 27047
// k := 1 ;
27039: LD_ADDR_VAR 0 8
27043: PUSH
27044: LD_INT 1
27046: ST_TO_ADDR
// if not k then
27047: LD_VAR 0 8
27051: NOT
27052: IFFALSE 27064
// k := array ;
27054: LD_ADDR_VAR 0 8
27058: PUSH
27059: LD_VAR 0 1
27063: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27064: LD_ADDR_VAR 0 10
27068: PUSH
27069: LD_VAR 0 10
27073: PPUSH
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_VAR 0 1
27083: PUSH
27084: LD_VAR 0 7
27088: ARRAY
27089: PPUSH
27090: CALL_OW 1
27094: ST_TO_ADDR
// end ;
27095: GO 27008
27097: POP
27098: POP
// array := tmp ;
27099: LD_ADDR_VAR 0 1
27103: PUSH
27104: LD_VAR 0 10
27108: ST_TO_ADDR
// end ;
27109: GO 26990
27111: POP
27112: POP
// result := array ;
27113: LD_ADDR_VAR 0 5
27117: PUSH
27118: LD_VAR 0 1
27122: ST_TO_ADDR
// end ;
27123: LD_VAR 0 5
27127: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27128: LD_INT 0
27130: PPUSH
27131: PPUSH
// result := 0 ;
27132: LD_ADDR_VAR 0 3
27136: PUSH
27137: LD_INT 0
27139: ST_TO_ADDR
// if not array or not value in array then
27140: LD_VAR 0 1
27144: NOT
27145: PUSH
27146: LD_VAR 0 2
27150: PUSH
27151: LD_VAR 0 1
27155: IN
27156: NOT
27157: OR
27158: IFFALSE 27162
// exit ;
27160: GO 27216
// for i = 1 to array do
27162: LD_ADDR_VAR 0 4
27166: PUSH
27167: DOUBLE
27168: LD_INT 1
27170: DEC
27171: ST_TO_ADDR
27172: LD_VAR 0 1
27176: PUSH
27177: FOR_TO
27178: IFFALSE 27214
// if value = array [ i ] then
27180: LD_VAR 0 2
27184: PUSH
27185: LD_VAR 0 1
27189: PUSH
27190: LD_VAR 0 4
27194: ARRAY
27195: EQUAL
27196: IFFALSE 27212
// begin result := i ;
27198: LD_ADDR_VAR 0 3
27202: PUSH
27203: LD_VAR 0 4
27207: ST_TO_ADDR
// exit ;
27208: POP
27209: POP
27210: GO 27216
// end ;
27212: GO 27177
27214: POP
27215: POP
// end ;
27216: LD_VAR 0 3
27220: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27221: LD_INT 0
27223: PPUSH
// vc_chassis := chassis ;
27224: LD_ADDR_OWVAR 37
27228: PUSH
27229: LD_VAR 0 1
27233: ST_TO_ADDR
// vc_engine := engine ;
27234: LD_ADDR_OWVAR 39
27238: PUSH
27239: LD_VAR 0 2
27243: ST_TO_ADDR
// vc_control := control ;
27244: LD_ADDR_OWVAR 38
27248: PUSH
27249: LD_VAR 0 3
27253: ST_TO_ADDR
// vc_weapon := weapon ;
27254: LD_ADDR_OWVAR 40
27258: PUSH
27259: LD_VAR 0 4
27263: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27264: LD_ADDR_OWVAR 41
27268: PUSH
27269: LD_VAR 0 5
27273: ST_TO_ADDR
// end ;
27274: LD_VAR 0 6
27278: RET
// export function WantPlant ( unit ) ; var task ; begin
27279: LD_INT 0
27281: PPUSH
27282: PPUSH
// result := false ;
27283: LD_ADDR_VAR 0 2
27287: PUSH
27288: LD_INT 0
27290: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL_OW 437
27305: ST_TO_ADDR
// if task then
27306: LD_VAR 0 3
27310: IFFALSE 27338
// if task [ 1 ] [ 1 ] = p then
27312: LD_VAR 0 3
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PUSH
27325: LD_STRING p
27327: EQUAL
27328: IFFALSE 27338
// result := true ;
27330: LD_ADDR_VAR 0 2
27334: PUSH
27335: LD_INT 1
27337: ST_TO_ADDR
// end ;
27338: LD_VAR 0 2
27342: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27343: LD_INT 0
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
// if pos < 1 then
27349: LD_VAR 0 2
27353: PUSH
27354: LD_INT 1
27356: LESS
27357: IFFALSE 27361
// exit ;
27359: GO 27664
// if pos = 1 then
27361: LD_VAR 0 2
27365: PUSH
27366: LD_INT 1
27368: EQUAL
27369: IFFALSE 27402
// result := Replace ( arr , pos [ 1 ] , value ) else
27371: LD_ADDR_VAR 0 4
27375: PUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_INT 1
27388: ARRAY
27389: PPUSH
27390: LD_VAR 0 3
27394: PPUSH
27395: CALL_OW 1
27399: ST_TO_ADDR
27400: GO 27664
// begin tmp := arr ;
27402: LD_ADDR_VAR 0 6
27406: PUSH
27407: LD_VAR 0 1
27411: ST_TO_ADDR
// s_arr := [ tmp ] ;
27412: LD_ADDR_VAR 0 7
27416: PUSH
27417: LD_VAR 0 6
27421: PUSH
27422: EMPTY
27423: LIST
27424: ST_TO_ADDR
// for i = 1 to pos - 1 do
27425: LD_ADDR_VAR 0 5
27429: PUSH
27430: DOUBLE
27431: LD_INT 1
27433: DEC
27434: ST_TO_ADDR
27435: LD_VAR 0 2
27439: PUSH
27440: LD_INT 1
27442: MINUS
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27490
// begin tmp := tmp [ pos [ i ] ] ;
27447: LD_ADDR_VAR 0 6
27451: PUSH
27452: LD_VAR 0 6
27456: PUSH
27457: LD_VAR 0 2
27461: PUSH
27462: LD_VAR 0 5
27466: ARRAY
27467: ARRAY
27468: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27469: LD_ADDR_VAR 0 7
27473: PUSH
27474: LD_VAR 0 7
27478: PUSH
27479: LD_VAR 0 6
27483: PUSH
27484: EMPTY
27485: LIST
27486: ADD
27487: ST_TO_ADDR
// end ;
27488: GO 27444
27490: POP
27491: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27492: LD_ADDR_VAR 0 6
27496: PUSH
27497: LD_VAR 0 6
27501: PPUSH
27502: LD_VAR 0 2
27506: PUSH
27507: LD_VAR 0 2
27511: ARRAY
27512: PPUSH
27513: LD_VAR 0 3
27517: PPUSH
27518: CALL_OW 1
27522: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27523: LD_ADDR_VAR 0 7
27527: PUSH
27528: LD_VAR 0 7
27532: PPUSH
27533: LD_VAR 0 7
27537: PPUSH
27538: LD_VAR 0 6
27542: PPUSH
27543: CALL_OW 1
27547: ST_TO_ADDR
// for i = s_arr downto 2 do
27548: LD_ADDR_VAR 0 5
27552: PUSH
27553: DOUBLE
27554: LD_VAR 0 7
27558: INC
27559: ST_TO_ADDR
27560: LD_INT 2
27562: PUSH
27563: FOR_DOWNTO
27564: IFFALSE 27648
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27566: LD_ADDR_VAR 0 6
27570: PUSH
27571: LD_VAR 0 7
27575: PUSH
27576: LD_VAR 0 5
27580: PUSH
27581: LD_INT 1
27583: MINUS
27584: ARRAY
27585: PPUSH
27586: LD_VAR 0 2
27590: PUSH
27591: LD_VAR 0 5
27595: PUSH
27596: LD_INT 1
27598: MINUS
27599: ARRAY
27600: PPUSH
27601: LD_VAR 0 7
27605: PUSH
27606: LD_VAR 0 5
27610: ARRAY
27611: PPUSH
27612: CALL_OW 1
27616: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27617: LD_ADDR_VAR 0 7
27621: PUSH
27622: LD_VAR 0 7
27626: PPUSH
27627: LD_VAR 0 5
27631: PUSH
27632: LD_INT 1
27634: MINUS
27635: PPUSH
27636: LD_VAR 0 6
27640: PPUSH
27641: CALL_OW 1
27645: ST_TO_ADDR
// end ;
27646: GO 27563
27648: POP
27649: POP
// result := s_arr [ 1 ] ;
27650: LD_ADDR_VAR 0 4
27654: PUSH
27655: LD_VAR 0 7
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: ST_TO_ADDR
// end ; end ;
27664: LD_VAR 0 4
27668: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27669: LD_INT 0
27671: PPUSH
27672: PPUSH
// if not list then
27673: LD_VAR 0 1
27677: NOT
27678: IFFALSE 27682
// exit ;
27680: GO 27773
// i := list [ pos1 ] ;
27682: LD_ADDR_VAR 0 5
27686: PUSH
27687: LD_VAR 0 1
27691: PUSH
27692: LD_VAR 0 2
27696: ARRAY
27697: ST_TO_ADDR
// if not i then
27698: LD_VAR 0 5
27702: NOT
27703: IFFALSE 27707
// exit ;
27705: GO 27773
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27707: LD_ADDR_VAR 0 1
27711: PUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_VAR 0 1
27726: PUSH
27727: LD_VAR 0 3
27731: ARRAY
27732: PPUSH
27733: CALL_OW 1
27737: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27738: LD_ADDR_VAR 0 1
27742: PUSH
27743: LD_VAR 0 1
27747: PPUSH
27748: LD_VAR 0 3
27752: PPUSH
27753: LD_VAR 0 5
27757: PPUSH
27758: CALL_OW 1
27762: ST_TO_ADDR
// result := list ;
27763: LD_ADDR_VAR 0 4
27767: PUSH
27768: LD_VAR 0 1
27772: ST_TO_ADDR
// end ;
27773: LD_VAR 0 4
27777: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27778: LD_INT 0
27780: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27781: LD_ADDR_VAR 0 5
27785: PUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 250
27795: PPUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: CALL_OW 251
27805: PPUSH
27806: LD_VAR 0 2
27810: PPUSH
27811: LD_VAR 0 3
27815: PPUSH
27816: LD_VAR 0 4
27820: PPUSH
27821: CALL 27831 0 5
27825: ST_TO_ADDR
// end ;
27826: LD_VAR 0 5
27830: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27831: LD_INT 0
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
// if not list then
27837: LD_VAR 0 3
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 28234
// result := [ ] ;
27846: LD_ADDR_VAR 0 6
27850: PUSH
27851: EMPTY
27852: ST_TO_ADDR
// for i in list do
27853: LD_ADDR_VAR 0 7
27857: PUSH
27858: LD_VAR 0 3
27862: PUSH
27863: FOR_IN
27864: IFFALSE 28066
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27866: LD_ADDR_VAR 0 9
27870: PUSH
27871: LD_VAR 0 7
27875: PPUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_VAR 0 2
27885: PPUSH
27886: CALL_OW 297
27890: ST_TO_ADDR
// if not result then
27891: LD_VAR 0 6
27895: NOT
27896: IFFALSE 27922
// result := [ [ i , tmp ] ] else
27898: LD_ADDR_VAR 0 6
27902: PUSH
27903: LD_VAR 0 7
27907: PUSH
27908: LD_VAR 0 9
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: ST_TO_ADDR
27920: GO 28064
// begin if result [ result ] [ 2 ] < tmp then
27922: LD_VAR 0 6
27926: PUSH
27927: LD_VAR 0 6
27931: ARRAY
27932: PUSH
27933: LD_INT 2
27935: ARRAY
27936: PUSH
27937: LD_VAR 0 9
27941: LESS
27942: IFFALSE 27984
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27944: LD_ADDR_VAR 0 6
27948: PUSH
27949: LD_VAR 0 6
27953: PPUSH
27954: LD_VAR 0 6
27958: PUSH
27959: LD_INT 1
27961: PLUS
27962: PPUSH
27963: LD_VAR 0 7
27967: PUSH
27968: LD_VAR 0 9
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 2
27981: ST_TO_ADDR
27982: GO 28064
// for j = 1 to result do
27984: LD_ADDR_VAR 0 8
27988: PUSH
27989: DOUBLE
27990: LD_INT 1
27992: DEC
27993: ST_TO_ADDR
27994: LD_VAR 0 6
27998: PUSH
27999: FOR_TO
28000: IFFALSE 28062
// begin if tmp < result [ j ] [ 2 ] then
28002: LD_VAR 0 9
28006: PUSH
28007: LD_VAR 0 6
28011: PUSH
28012: LD_VAR 0 8
28016: ARRAY
28017: PUSH
28018: LD_INT 2
28020: ARRAY
28021: LESS
28022: IFFALSE 28060
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28024: LD_ADDR_VAR 0 6
28028: PUSH
28029: LD_VAR 0 6
28033: PPUSH
28034: LD_VAR 0 8
28038: PPUSH
28039: LD_VAR 0 7
28043: PUSH
28044: LD_VAR 0 9
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 2
28057: ST_TO_ADDR
// break ;
28058: GO 28062
// end ; end ;
28060: GO 27999
28062: POP
28063: POP
// end ; end ;
28064: GO 27863
28066: POP
28067: POP
// if result and not asc then
28068: LD_VAR 0 6
28072: PUSH
28073: LD_VAR 0 4
28077: NOT
28078: AND
28079: IFFALSE 28154
// begin tmp := result ;
28081: LD_ADDR_VAR 0 9
28085: PUSH
28086: LD_VAR 0 6
28090: ST_TO_ADDR
// for i = tmp downto 1 do
28091: LD_ADDR_VAR 0 7
28095: PUSH
28096: DOUBLE
28097: LD_VAR 0 9
28101: INC
28102: ST_TO_ADDR
28103: LD_INT 1
28105: PUSH
28106: FOR_DOWNTO
28107: IFFALSE 28152
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28109: LD_ADDR_VAR 0 6
28113: PUSH
28114: LD_VAR 0 6
28118: PPUSH
28119: LD_VAR 0 9
28123: PUSH
28124: LD_VAR 0 7
28128: MINUS
28129: PUSH
28130: LD_INT 1
28132: PLUS
28133: PPUSH
28134: LD_VAR 0 9
28138: PUSH
28139: LD_VAR 0 7
28143: ARRAY
28144: PPUSH
28145: CALL_OW 1
28149: ST_TO_ADDR
28150: GO 28106
28152: POP
28153: POP
// end ; tmp := [ ] ;
28154: LD_ADDR_VAR 0 9
28158: PUSH
28159: EMPTY
28160: ST_TO_ADDR
// if mode then
28161: LD_VAR 0 5
28165: IFFALSE 28234
// begin for i = 1 to result do
28167: LD_ADDR_VAR 0 7
28171: PUSH
28172: DOUBLE
28173: LD_INT 1
28175: DEC
28176: ST_TO_ADDR
28177: LD_VAR 0 6
28181: PUSH
28182: FOR_TO
28183: IFFALSE 28222
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28185: LD_ADDR_VAR 0 9
28189: PUSH
28190: LD_VAR 0 9
28194: PPUSH
28195: LD_VAR 0 7
28199: PPUSH
28200: LD_VAR 0 6
28204: PUSH
28205: LD_VAR 0 7
28209: ARRAY
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: CALL_OW 1
28219: ST_TO_ADDR
28220: GO 28182
28222: POP
28223: POP
// result := tmp ;
28224: LD_ADDR_VAR 0 6
28228: PUSH
28229: LD_VAR 0 9
28233: ST_TO_ADDR
// end ; end ;
28234: LD_VAR 0 6
28238: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28247: LD_ADDR_VAR 0 5
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// if not x or not y then
28269: LD_VAR 0 2
28273: NOT
28274: PUSH
28275: LD_VAR 0 3
28279: NOT
28280: OR
28281: IFFALSE 28285
// exit ;
28283: GO 29935
// if not range then
28285: LD_VAR 0 4
28289: NOT
28290: IFFALSE 28300
// range := 10 ;
28292: LD_ADDR_VAR 0 4
28296: PUSH
28297: LD_INT 10
28299: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28300: LD_ADDR_VAR 0 8
28304: PUSH
28305: LD_INT 81
28307: PUSH
28308: LD_VAR 0 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 92
28319: PUSH
28320: LD_VAR 0 2
28324: PUSH
28325: LD_VAR 0 3
28329: PUSH
28330: LD_VAR 0 4
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: LD_INT 21
28346: PUSH
28347: LD_INT 3
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: PPUSH
28363: CALL_OW 69
28367: ST_TO_ADDR
// if not tmp then
28368: LD_VAR 0 8
28372: NOT
28373: IFFALSE 28377
// exit ;
28375: GO 29935
// for i in tmp do
28377: LD_ADDR_VAR 0 6
28381: PUSH
28382: LD_VAR 0 8
28386: PUSH
28387: FOR_IN
28388: IFFALSE 29910
// begin points := [ 0 , 0 , 0 ] ;
28390: LD_ADDR_VAR 0 9
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// bpoints := 1 ;
28409: LD_ADDR_VAR 0 10
28413: PUSH
28414: LD_INT 1
28416: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28417: LD_VAR 0 6
28421: PPUSH
28422: CALL_OW 247
28426: PUSH
28427: LD_INT 1
28429: DOUBLE
28430: EQUAL
28431: IFTRUE 28435
28433: GO 29013
28435: POP
// begin if GetClass ( i ) = 1 then
28436: LD_VAR 0 6
28440: PPUSH
28441: CALL_OW 257
28445: PUSH
28446: LD_INT 1
28448: EQUAL
28449: IFFALSE 28470
// points := [ 10 , 5 , 3 ] ;
28451: LD_ADDR_VAR 0 9
28455: PUSH
28456: LD_INT 10
28458: PUSH
28459: LD_INT 5
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28470: LD_VAR 0 6
28474: PPUSH
28475: CALL_OW 257
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: LD_INT 4
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: IN
28494: IFFALSE 28515
// points := [ 3 , 2 , 1 ] ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_INT 3
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28515: LD_VAR 0 6
28519: PPUSH
28520: CALL_OW 257
28524: PUSH
28525: LD_INT 5
28527: EQUAL
28528: IFFALSE 28549
// points := [ 130 , 5 , 2 ] ;
28530: LD_ADDR_VAR 0 9
28534: PUSH
28535: LD_INT 130
28537: PUSH
28538: LD_INT 5
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28549: LD_VAR 0 6
28553: PPUSH
28554: CALL_OW 257
28558: PUSH
28559: LD_INT 8
28561: EQUAL
28562: IFFALSE 28583
// points := [ 35 , 35 , 30 ] ;
28564: LD_ADDR_VAR 0 9
28568: PUSH
28569: LD_INT 35
28571: PUSH
28572: LD_INT 35
28574: PUSH
28575: LD_INT 30
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28583: LD_VAR 0 6
28587: PPUSH
28588: CALL_OW 257
28592: PUSH
28593: LD_INT 9
28595: EQUAL
28596: IFFALSE 28617
// points := [ 20 , 55 , 40 ] ;
28598: LD_ADDR_VAR 0 9
28602: PUSH
28603: LD_INT 20
28605: PUSH
28606: LD_INT 55
28608: PUSH
28609: LD_INT 40
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28617: LD_VAR 0 6
28621: PPUSH
28622: CALL_OW 257
28626: PUSH
28627: LD_INT 12
28629: PUSH
28630: LD_INT 16
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: IN
28637: IFFALSE 28658
// points := [ 5 , 3 , 2 ] ;
28639: LD_ADDR_VAR 0 9
28643: PUSH
28644: LD_INT 5
28646: PUSH
28647: LD_INT 3
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28658: LD_VAR 0 6
28662: PPUSH
28663: CALL_OW 257
28667: PUSH
28668: LD_INT 17
28670: EQUAL
28671: IFFALSE 28692
// points := [ 100 , 50 , 75 ] ;
28673: LD_ADDR_VAR 0 9
28677: PUSH
28678: LD_INT 100
28680: PUSH
28681: LD_INT 50
28683: PUSH
28684: LD_INT 75
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28692: LD_VAR 0 6
28696: PPUSH
28697: CALL_OW 257
28701: PUSH
28702: LD_INT 15
28704: EQUAL
28705: IFFALSE 28726
// points := [ 10 , 5 , 3 ] ;
28707: LD_ADDR_VAR 0 9
28711: PUSH
28712: LD_INT 10
28714: PUSH
28715: LD_INT 5
28717: PUSH
28718: LD_INT 3
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28726: LD_VAR 0 6
28730: PPUSH
28731: CALL_OW 257
28735: PUSH
28736: LD_INT 14
28738: EQUAL
28739: IFFALSE 28760
// points := [ 10 , 0 , 0 ] ;
28741: LD_ADDR_VAR 0 9
28745: PUSH
28746: LD_INT 10
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28760: LD_VAR 0 6
28764: PPUSH
28765: CALL_OW 257
28769: PUSH
28770: LD_INT 11
28772: EQUAL
28773: IFFALSE 28794
// points := [ 30 , 10 , 5 ] ;
28775: LD_ADDR_VAR 0 9
28779: PUSH
28780: LD_INT 30
28782: PUSH
28783: LD_INT 10
28785: PUSH
28786: LD_INT 5
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28794: LD_VAR 0 1
28798: PPUSH
28799: LD_INT 5
28801: PPUSH
28802: CALL_OW 321
28806: PUSH
28807: LD_INT 2
28809: EQUAL
28810: IFFALSE 28827
// bpoints := bpoints * 1.8 ;
28812: LD_ADDR_VAR 0 10
28816: PUSH
28817: LD_VAR 0 10
28821: PUSH
28822: LD_REAL  1.80000000000000E+0000
28825: MUL
28826: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28827: LD_VAR 0 6
28831: PPUSH
28832: CALL_OW 257
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 4
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: IN
28855: PUSH
28856: LD_VAR 0 1
28860: PPUSH
28861: LD_INT 51
28863: PPUSH
28864: CALL_OW 321
28868: PUSH
28869: LD_INT 2
28871: EQUAL
28872: AND
28873: IFFALSE 28890
// bpoints := bpoints * 1.2 ;
28875: LD_ADDR_VAR 0 10
28879: PUSH
28880: LD_VAR 0 10
28884: PUSH
28885: LD_REAL  1.20000000000000E+0000
28888: MUL
28889: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28890: LD_VAR 0 6
28894: PPUSH
28895: CALL_OW 257
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: LD_INT 7
28905: PUSH
28906: LD_INT 9
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: IN
28914: PUSH
28915: LD_VAR 0 1
28919: PPUSH
28920: LD_INT 52
28922: PPUSH
28923: CALL_OW 321
28927: PUSH
28928: LD_INT 2
28930: EQUAL
28931: AND
28932: IFFALSE 28949
// bpoints := bpoints * 1.5 ;
28934: LD_ADDR_VAR 0 10
28938: PUSH
28939: LD_VAR 0 10
28943: PUSH
28944: LD_REAL  1.50000000000000E+0000
28947: MUL
28948: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28949: LD_VAR 0 1
28953: PPUSH
28954: LD_INT 66
28956: PPUSH
28957: CALL_OW 321
28961: PUSH
28962: LD_INT 2
28964: EQUAL
28965: IFFALSE 28982
// bpoints := bpoints * 1.1 ;
28967: LD_ADDR_VAR 0 10
28971: PUSH
28972: LD_VAR 0 10
28976: PUSH
28977: LD_REAL  1.10000000000000E+0000
28980: MUL
28981: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28982: LD_ADDR_VAR 0 10
28986: PUSH
28987: LD_VAR 0 10
28991: PUSH
28992: LD_VAR 0 6
28996: PPUSH
28997: LD_INT 1
28999: PPUSH
29000: CALL_OW 259
29004: PUSH
29005: LD_REAL  1.15000000000000E+0000
29008: MUL
29009: MUL
29010: ST_TO_ADDR
// end ; unit_vehicle :
29011: GO 29839
29013: LD_INT 2
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29827
29021: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29022: LD_VAR 0 6
29026: PPUSH
29027: CALL_OW 264
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: LD_INT 42
29037: PUSH
29038: LD_INT 24
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: IN
29046: IFFALSE 29067
// points := [ 25 , 5 , 3 ] ;
29048: LD_ADDR_VAR 0 9
29052: PUSH
29053: LD_INT 25
29055: PUSH
29056: LD_INT 5
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29067: LD_VAR 0 6
29071: PPUSH
29072: CALL_OW 264
29076: PUSH
29077: LD_INT 4
29079: PUSH
29080: LD_INT 43
29082: PUSH
29083: LD_INT 25
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: IN
29091: IFFALSE 29112
// points := [ 40 , 15 , 5 ] ;
29093: LD_ADDR_VAR 0 9
29097: PUSH
29098: LD_INT 40
29100: PUSH
29101: LD_INT 15
29103: PUSH
29104: LD_INT 5
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29112: LD_VAR 0 6
29116: PPUSH
29117: CALL_OW 264
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: LD_INT 23
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: IN
29132: IFFALSE 29153
// points := [ 7 , 25 , 8 ] ;
29134: LD_ADDR_VAR 0 9
29138: PUSH
29139: LD_INT 7
29141: PUSH
29142: LD_INT 25
29144: PUSH
29145: LD_INT 8
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29153: LD_VAR 0 6
29157: PPUSH
29158: CALL_OW 264
29162: PUSH
29163: LD_INT 5
29165: PUSH
29166: LD_INT 27
29168: PUSH
29169: LD_INT 44
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: IN
29177: IFFALSE 29198
// points := [ 14 , 50 , 16 ] ;
29179: LD_ADDR_VAR 0 9
29183: PUSH
29184: LD_INT 14
29186: PUSH
29187: LD_INT 50
29189: PUSH
29190: LD_INT 16
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29198: LD_VAR 0 6
29202: PPUSH
29203: CALL_OW 264
29207: PUSH
29208: LD_INT 6
29210: PUSH
29211: LD_INT 46
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: IN
29218: IFFALSE 29239
// points := [ 32 , 120 , 70 ] ;
29220: LD_ADDR_VAR 0 9
29224: PUSH
29225: LD_INT 32
29227: PUSH
29228: LD_INT 120
29230: PUSH
29231: LD_INT 70
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29239: LD_VAR 0 6
29243: PPUSH
29244: CALL_OW 264
29248: PUSH
29249: LD_INT 7
29251: PUSH
29252: LD_INT 28
29254: PUSH
29255: LD_INT 45
29257: PUSH
29258: LD_INT 92
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: IN
29267: IFFALSE 29288
// points := [ 35 , 20 , 45 ] ;
29269: LD_ADDR_VAR 0 9
29273: PUSH
29274: LD_INT 35
29276: PUSH
29277: LD_INT 20
29279: PUSH
29280: LD_INT 45
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29288: LD_VAR 0 6
29292: PPUSH
29293: CALL_OW 264
29297: PUSH
29298: LD_INT 47
29300: PUSH
29301: EMPTY
29302: LIST
29303: IN
29304: IFFALSE 29325
// points := [ 67 , 45 , 75 ] ;
29306: LD_ADDR_VAR 0 9
29310: PUSH
29311: LD_INT 67
29313: PUSH
29314: LD_INT 45
29316: PUSH
29317: LD_INT 75
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29325: LD_VAR 0 6
29329: PPUSH
29330: CALL_OW 264
29334: PUSH
29335: LD_INT 26
29337: PUSH
29338: EMPTY
29339: LIST
29340: IN
29341: IFFALSE 29362
// points := [ 120 , 30 , 80 ] ;
29343: LD_ADDR_VAR 0 9
29347: PUSH
29348: LD_INT 120
29350: PUSH
29351: LD_INT 30
29353: PUSH
29354: LD_INT 80
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29362: LD_VAR 0 6
29366: PPUSH
29367: CALL_OW 264
29371: PUSH
29372: LD_INT 22
29374: PUSH
29375: EMPTY
29376: LIST
29377: IN
29378: IFFALSE 29399
// points := [ 40 , 1 , 1 ] ;
29380: LD_ADDR_VAR 0 9
29384: PUSH
29385: LD_INT 40
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29399: LD_VAR 0 6
29403: PPUSH
29404: CALL_OW 264
29408: PUSH
29409: LD_INT 29
29411: PUSH
29412: EMPTY
29413: LIST
29414: IN
29415: IFFALSE 29436
// points := [ 70 , 200 , 400 ] ;
29417: LD_ADDR_VAR 0 9
29421: PUSH
29422: LD_INT 70
29424: PUSH
29425: LD_INT 200
29427: PUSH
29428: LD_INT 400
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29436: LD_VAR 0 6
29440: PPUSH
29441: CALL_OW 264
29445: PUSH
29446: LD_INT 14
29448: PUSH
29449: LD_INT 53
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: IN
29456: IFFALSE 29477
// points := [ 40 , 10 , 20 ] ;
29458: LD_ADDR_VAR 0 9
29462: PUSH
29463: LD_INT 40
29465: PUSH
29466: LD_INT 10
29468: PUSH
29469: LD_INT 20
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29477: LD_VAR 0 6
29481: PPUSH
29482: CALL_OW 264
29486: PUSH
29487: LD_INT 9
29489: PUSH
29490: EMPTY
29491: LIST
29492: IN
29493: IFFALSE 29514
// points := [ 5 , 70 , 20 ] ;
29495: LD_ADDR_VAR 0 9
29499: PUSH
29500: LD_INT 5
29502: PUSH
29503: LD_INT 70
29505: PUSH
29506: LD_INT 20
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29514: LD_VAR 0 6
29518: PPUSH
29519: CALL_OW 264
29523: PUSH
29524: LD_INT 10
29526: PUSH
29527: EMPTY
29528: LIST
29529: IN
29530: IFFALSE 29551
// points := [ 35 , 110 , 70 ] ;
29532: LD_ADDR_VAR 0 9
29536: PUSH
29537: LD_INT 35
29539: PUSH
29540: LD_INT 110
29542: PUSH
29543: LD_INT 70
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29551: LD_VAR 0 6
29555: PPUSH
29556: CALL_OW 265
29560: PUSH
29561: LD_INT 25
29563: EQUAL
29564: IFFALSE 29585
// points := [ 80 , 65 , 100 ] ;
29566: LD_ADDR_VAR 0 9
29570: PUSH
29571: LD_INT 80
29573: PUSH
29574: LD_INT 65
29576: PUSH
29577: LD_INT 100
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29585: LD_VAR 0 6
29589: PPUSH
29590: CALL_OW 263
29594: PUSH
29595: LD_INT 1
29597: EQUAL
29598: IFFALSE 29633
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29600: LD_ADDR_VAR 0 10
29604: PUSH
29605: LD_VAR 0 10
29609: PUSH
29610: LD_VAR 0 6
29614: PPUSH
29615: CALL_OW 311
29619: PPUSH
29620: LD_INT 3
29622: PPUSH
29623: CALL_OW 259
29627: PUSH
29628: LD_INT 4
29630: MUL
29631: MUL
29632: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29633: LD_VAR 0 6
29637: PPUSH
29638: CALL_OW 263
29642: PUSH
29643: LD_INT 2
29645: EQUAL
29646: IFFALSE 29697
// begin j := IsControledBy ( i ) ;
29648: LD_ADDR_VAR 0 7
29652: PUSH
29653: LD_VAR 0 6
29657: PPUSH
29658: CALL_OW 312
29662: ST_TO_ADDR
// if j then
29663: LD_VAR 0 7
29667: IFFALSE 29697
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29669: LD_ADDR_VAR 0 10
29673: PUSH
29674: LD_VAR 0 10
29678: PUSH
29679: LD_VAR 0 7
29683: PPUSH
29684: LD_INT 3
29686: PPUSH
29687: CALL_OW 259
29691: PUSH
29692: LD_INT 3
29694: MUL
29695: MUL
29696: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29697: LD_VAR 0 6
29701: PPUSH
29702: CALL_OW 264
29706: PUSH
29707: LD_INT 5
29709: PUSH
29710: LD_INT 6
29712: PUSH
29713: LD_INT 46
29715: PUSH
29716: LD_INT 44
29718: PUSH
29719: LD_INT 47
29721: PUSH
29722: LD_INT 45
29724: PUSH
29725: LD_INT 28
29727: PUSH
29728: LD_INT 7
29730: PUSH
29731: LD_INT 27
29733: PUSH
29734: LD_INT 29
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: IN
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_INT 52
29757: PPUSH
29758: CALL_OW 321
29762: PUSH
29763: LD_INT 2
29765: EQUAL
29766: AND
29767: IFFALSE 29784
// bpoints := bpoints * 1.2 ;
29769: LD_ADDR_VAR 0 10
29773: PUSH
29774: LD_VAR 0 10
29778: PUSH
29779: LD_REAL  1.20000000000000E+0000
29782: MUL
29783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29784: LD_VAR 0 6
29788: PPUSH
29789: CALL_OW 264
29793: PUSH
29794: LD_INT 6
29796: PUSH
29797: LD_INT 46
29799: PUSH
29800: LD_INT 47
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: IN
29808: IFFALSE 29825
// bpoints := bpoints * 1.2 ;
29810: LD_ADDR_VAR 0 10
29814: PUSH
29815: LD_VAR 0 10
29819: PUSH
29820: LD_REAL  1.20000000000000E+0000
29823: MUL
29824: ST_TO_ADDR
// end ; unit_building :
29825: GO 29839
29827: LD_INT 3
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29838
29835: POP
// ; end ;
29836: GO 29839
29838: POP
// for j = 1 to 3 do
29839: LD_ADDR_VAR 0 7
29843: PUSH
29844: DOUBLE
29845: LD_INT 1
29847: DEC
29848: ST_TO_ADDR
29849: LD_INT 3
29851: PUSH
29852: FOR_TO
29853: IFFALSE 29906
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29855: LD_ADDR_VAR 0 5
29859: PUSH
29860: LD_VAR 0 5
29864: PPUSH
29865: LD_VAR 0 7
29869: PPUSH
29870: LD_VAR 0 5
29874: PUSH
29875: LD_VAR 0 7
29879: ARRAY
29880: PUSH
29881: LD_VAR 0 9
29885: PUSH
29886: LD_VAR 0 7
29890: ARRAY
29891: PUSH
29892: LD_VAR 0 10
29896: MUL
29897: PLUS
29898: PPUSH
29899: CALL_OW 1
29903: ST_TO_ADDR
29904: GO 29852
29906: POP
29907: POP
// end ;
29908: GO 28387
29910: POP
29911: POP
// result := Replace ( result , 4 , tmp ) ;
29912: LD_ADDR_VAR 0 5
29916: PUSH
29917: LD_VAR 0 5
29921: PPUSH
29922: LD_INT 4
29924: PPUSH
29925: LD_VAR 0 8
29929: PPUSH
29930: CALL_OW 1
29934: ST_TO_ADDR
// end ;
29935: LD_VAR 0 5
29939: RET
// export function DangerAtRange ( unit , range ) ; begin
29940: LD_INT 0
29942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_VAR 0 1
29952: PPUSH
29953: CALL_OW 255
29957: PPUSH
29958: LD_VAR 0 1
29962: PPUSH
29963: CALL_OW 250
29967: PPUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 251
29977: PPUSH
29978: LD_VAR 0 2
29982: PPUSH
29983: CALL 28239 0 4
29987: ST_TO_ADDR
// end ;
29988: LD_VAR 0 3
29992: RET
// export function DangerInArea ( side , area ) ; begin
29993: LD_INT 0
29995: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29996: LD_ADDR_VAR 0 3
30000: PUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: LD_INT 81
30008: PUSH
30009: LD_VAR 0 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PPUSH
30018: CALL_OW 70
30022: ST_TO_ADDR
// end ;
30023: LD_VAR 0 3
30027: RET
// export function IsExtension ( b ) ; begin
30028: LD_INT 0
30030: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30031: LD_ADDR_VAR 0 2
30035: PUSH
30036: LD_VAR 0 1
30040: PUSH
30041: LD_INT 23
30043: PUSH
30044: LD_INT 20
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_INT 17
30052: PUSH
30053: LD_INT 24
30055: PUSH
30056: LD_INT 21
30058: PUSH
30059: LD_INT 19
30061: PUSH
30062: LD_INT 16
30064: PUSH
30065: LD_INT 25
30067: PUSH
30068: LD_INT 18
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: IN
30083: ST_TO_ADDR
// end ;
30084: LD_VAR 0 2
30088: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30089: LD_INT 0
30091: PPUSH
30092: PPUSH
30093: PPUSH
// result := [ ] ;
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: EMPTY
30100: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30101: LD_ADDR_VAR 0 5
30105: PUSH
30106: LD_VAR 0 2
30110: PPUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PPUSH
30121: CALL_OW 70
30125: ST_TO_ADDR
// if not tmp then
30126: LD_VAR 0 5
30130: NOT
30131: IFFALSE 30135
// exit ;
30133: GO 30199
// if checkLink then
30135: LD_VAR 0 3
30139: IFFALSE 30189
// begin for i in tmp do
30141: LD_ADDR_VAR 0 6
30145: PUSH
30146: LD_VAR 0 5
30150: PUSH
30151: FOR_IN
30152: IFFALSE 30187
// if GetBase ( i ) <> base then
30154: LD_VAR 0 6
30158: PPUSH
30159: CALL_OW 274
30163: PUSH
30164: LD_VAR 0 1
30168: NONEQUAL
30169: IFFALSE 30185
// ComLinkToBase ( base , i ) ;
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_VAR 0 6
30180: PPUSH
30181: CALL_OW 169
30185: GO 30151
30187: POP
30188: POP
// end ; result := tmp ;
30189: LD_ADDR_VAR 0 4
30193: PUSH
30194: LD_VAR 0 5
30198: ST_TO_ADDR
// end ;
30199: LD_VAR 0 4
30203: RET
// export function ComComplete ( units , b ) ; var i ; begin
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
// if not units then
30208: LD_VAR 0 1
30212: NOT
30213: IFFALSE 30217
// exit ;
30215: GO 30307
// for i in units do
30217: LD_ADDR_VAR 0 4
30221: PUSH
30222: LD_VAR 0 1
30226: PUSH
30227: FOR_IN
30228: IFFALSE 30305
// if BuildingStatus ( b ) = bs_build then
30230: LD_VAR 0 2
30234: PPUSH
30235: CALL_OW 461
30239: PUSH
30240: LD_INT 1
30242: EQUAL
30243: IFFALSE 30303
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30245: LD_VAR 0 4
30249: PPUSH
30250: LD_STRING h
30252: PUSH
30253: LD_VAR 0 2
30257: PPUSH
30258: CALL_OW 250
30262: PUSH
30263: LD_VAR 0 2
30267: PPUSH
30268: CALL_OW 251
30272: PUSH
30273: LD_VAR 0 2
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: PPUSH
30299: CALL_OW 446
30303: GO 30227
30305: POP
30306: POP
// end ;
30307: LD_VAR 0 3
30311: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30320: LD_VAR 0 1
30324: NOT
30325: PUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 263
30335: PUSH
30336: LD_INT 2
30338: NONEQUAL
30339: OR
30340: IFFALSE 30344
// exit ;
30342: GO 30660
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30344: LD_ADDR_VAR 0 6
30348: PUSH
30349: LD_INT 22
30351: PUSH
30352: LD_VAR 0 1
30356: PPUSH
30357: CALL_OW 255
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 30
30371: PUSH
30372: LD_INT 36
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 34
30381: PUSH
30382: LD_INT 31
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PPUSH
30398: CALL_OW 69
30402: ST_TO_ADDR
// if not tmp then
30403: LD_VAR 0 6
30407: NOT
30408: IFFALSE 30412
// exit ;
30410: GO 30660
// result := [ ] ;
30412: LD_ADDR_VAR 0 2
30416: PUSH
30417: EMPTY
30418: ST_TO_ADDR
// for i in tmp do
30419: LD_ADDR_VAR 0 3
30423: PUSH
30424: LD_VAR 0 6
30428: PUSH
30429: FOR_IN
30430: IFFALSE 30501
// begin t := UnitsInside ( i ) ;
30432: LD_ADDR_VAR 0 4
30436: PUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: CALL_OW 313
30446: ST_TO_ADDR
// if t then
30447: LD_VAR 0 4
30451: IFFALSE 30499
// for j in t do
30453: LD_ADDR_VAR 0 7
30457: PUSH
30458: LD_VAR 0 4
30462: PUSH
30463: FOR_IN
30464: IFFALSE 30497
// result := Replace ( result , result + 1 , j ) ;
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_VAR 0 2
30475: PPUSH
30476: LD_VAR 0 2
30480: PUSH
30481: LD_INT 1
30483: PLUS
30484: PPUSH
30485: LD_VAR 0 7
30489: PPUSH
30490: CALL_OW 1
30494: ST_TO_ADDR
30495: GO 30463
30497: POP
30498: POP
// end ;
30499: GO 30429
30501: POP
30502: POP
// if not result then
30503: LD_VAR 0 2
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30660
// mech := result [ 1 ] ;
30512: LD_ADDR_VAR 0 5
30516: PUSH
30517: LD_VAR 0 2
30521: PUSH
30522: LD_INT 1
30524: ARRAY
30525: ST_TO_ADDR
// if result > 1 then
30526: LD_VAR 0 2
30530: PUSH
30531: LD_INT 1
30533: GREATER
30534: IFFALSE 30646
// begin for i = 2 to result do
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: DOUBLE
30542: LD_INT 2
30544: DEC
30545: ST_TO_ADDR
30546: LD_VAR 0 2
30550: PUSH
30551: FOR_TO
30552: IFFALSE 30644
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30554: LD_ADDR_VAR 0 4
30558: PUSH
30559: LD_VAR 0 2
30563: PUSH
30564: LD_VAR 0 3
30568: ARRAY
30569: PPUSH
30570: LD_INT 3
30572: PPUSH
30573: CALL_OW 259
30577: PUSH
30578: LD_VAR 0 2
30582: PUSH
30583: LD_VAR 0 3
30587: ARRAY
30588: PPUSH
30589: CALL_OW 432
30593: MINUS
30594: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30595: LD_VAR 0 4
30599: PUSH
30600: LD_VAR 0 5
30604: PPUSH
30605: LD_INT 3
30607: PPUSH
30608: CALL_OW 259
30612: PUSH
30613: LD_VAR 0 5
30617: PPUSH
30618: CALL_OW 432
30622: MINUS
30623: GREATEREQUAL
30624: IFFALSE 30642
// mech := result [ i ] ;
30626: LD_ADDR_VAR 0 5
30630: PUSH
30631: LD_VAR 0 2
30635: PUSH
30636: LD_VAR 0 3
30640: ARRAY
30641: ST_TO_ADDR
// end ;
30642: GO 30551
30644: POP
30645: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_VAR 0 5
30655: PPUSH
30656: CALL_OW 135
// end ;
30660: LD_VAR 0 2
30664: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30665: LD_INT 0
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
// result := [ ] ;
30680: LD_ADDR_VAR 0 7
30684: PUSH
30685: EMPTY
30686: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30687: LD_VAR 0 1
30691: PPUSH
30692: CALL_OW 266
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: IN
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 32346
// if name then
30712: LD_VAR 0 3
30716: IFFALSE 30732
// SetBName ( base_dep , name ) ;
30718: LD_VAR 0 1
30722: PPUSH
30723: LD_VAR 0 3
30727: PPUSH
30728: CALL_OW 500
// base := GetBase ( base_dep ) ;
30732: LD_ADDR_VAR 0 15
30736: PUSH
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL_OW 274
30746: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30747: LD_ADDR_VAR 0 16
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: CALL_OW 255
30761: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30762: LD_ADDR_VAR 0 17
30766: PUSH
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 248
30776: ST_TO_ADDR
// if sources then
30777: LD_VAR 0 5
30781: IFFALSE 30828
// for i = 1 to 3 do
30783: LD_ADDR_VAR 0 8
30787: PUSH
30788: DOUBLE
30789: LD_INT 1
30791: DEC
30792: ST_TO_ADDR
30793: LD_INT 3
30795: PUSH
30796: FOR_TO
30797: IFFALSE 30826
// AddResourceType ( base , i , sources [ i ] ) ;
30799: LD_VAR 0 15
30803: PPUSH
30804: LD_VAR 0 8
30808: PPUSH
30809: LD_VAR 0 5
30813: PUSH
30814: LD_VAR 0 8
30818: ARRAY
30819: PPUSH
30820: CALL_OW 276
30824: GO 30796
30826: POP
30827: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30828: LD_ADDR_VAR 0 18
30832: PUSH
30833: LD_VAR 0 15
30837: PPUSH
30838: LD_VAR 0 2
30842: PPUSH
30843: LD_INT 1
30845: PPUSH
30846: CALL 30089 0 3
30850: ST_TO_ADDR
// InitHc ;
30851: CALL_OW 19
// InitUc ;
30855: CALL_OW 18
// uc_side := side ;
30859: LD_ADDR_OWVAR 20
30863: PUSH
30864: LD_VAR 0 16
30868: ST_TO_ADDR
// uc_nation := nation ;
30869: LD_ADDR_OWVAR 21
30873: PUSH
30874: LD_VAR 0 17
30878: ST_TO_ADDR
// if buildings then
30879: LD_VAR 0 18
30883: IFFALSE 32205
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30885: LD_ADDR_VAR 0 19
30889: PUSH
30890: LD_VAR 0 18
30894: PPUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 30
30900: PUSH
30901: LD_INT 29
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 30
30910: PUSH
30911: LD_INT 30
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: PPUSH
30923: CALL_OW 72
30927: ST_TO_ADDR
// if tmp then
30928: LD_VAR 0 19
30932: IFFALSE 30980
// for i in tmp do
30934: LD_ADDR_VAR 0 8
30938: PUSH
30939: LD_VAR 0 19
30943: PUSH
30944: FOR_IN
30945: IFFALSE 30978
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30947: LD_VAR 0 8
30951: PPUSH
30952: CALL_OW 250
30956: PPUSH
30957: LD_VAR 0 8
30961: PPUSH
30962: CALL_OW 251
30966: PPUSH
30967: LD_VAR 0 16
30971: PPUSH
30972: CALL_OW 441
30976: GO 30944
30978: POP
30979: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30980: LD_VAR 0 18
30984: PPUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 30
30990: PUSH
30991: LD_INT 32
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 30
31000: PUSH
31001: LD_INT 33
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: PPUSH
31013: CALL_OW 72
31017: IFFALSE 31105
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31019: LD_ADDR_VAR 0 8
31023: PUSH
31024: LD_VAR 0 18
31028: PPUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 30
31034: PUSH
31035: LD_INT 32
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 30
31044: PUSH
31045: LD_INT 33
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 72
31061: PUSH
31062: FOR_IN
31063: IFFALSE 31103
// begin if not GetBWeapon ( i ) then
31065: LD_VAR 0 8
31069: PPUSH
31070: CALL_OW 269
31074: NOT
31075: IFFALSE 31101
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31077: LD_VAR 0 8
31081: PPUSH
31082: LD_VAR 0 8
31086: PPUSH
31087: LD_VAR 0 2
31091: PPUSH
31092: CALL 32351 0 2
31096: PPUSH
31097: CALL_OW 431
// end ;
31101: GO 31062
31103: POP
31104: POP
// end ; for i = 1 to personel do
31105: LD_ADDR_VAR 0 8
31109: PUSH
31110: DOUBLE
31111: LD_INT 1
31113: DEC
31114: ST_TO_ADDR
31115: LD_VAR 0 6
31119: PUSH
31120: FOR_TO
31121: IFFALSE 32185
// begin if i > 4 then
31123: LD_VAR 0 8
31127: PUSH
31128: LD_INT 4
31130: GREATER
31131: IFFALSE 31135
// break ;
31133: GO 32185
// case i of 1 :
31135: LD_VAR 0 8
31139: PUSH
31140: LD_INT 1
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31228
31148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31149: LD_ADDR_VAR 0 12
31153: PUSH
31154: LD_VAR 0 18
31158: PPUSH
31159: LD_INT 22
31161: PUSH
31162: LD_VAR 0 16
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 58
31173: PUSH
31174: EMPTY
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 30
31182: PUSH
31183: LD_INT 32
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 30
31192: PUSH
31193: LD_INT 4
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 30
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 72
31225: ST_TO_ADDR
31226: GO 31450
31228: LD_INT 2
31230: DOUBLE
31231: EQUAL
31232: IFTRUE 31236
31234: GO 31298
31236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31237: LD_ADDR_VAR 0 12
31241: PUSH
31242: LD_VAR 0 18
31246: PPUSH
31247: LD_INT 22
31249: PUSH
31250: LD_VAR 0 16
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 30
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PPUSH
31291: CALL_OW 72
31295: ST_TO_ADDR
31296: GO 31450
31298: LD_INT 3
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31368
31306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31307: LD_ADDR_VAR 0 12
31311: PUSH
31312: LD_VAR 0 18
31316: PPUSH
31317: LD_INT 22
31319: PUSH
31320: LD_VAR 0 16
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 30
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 30
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PPUSH
31361: CALL_OW 72
31365: ST_TO_ADDR
31366: GO 31450
31368: LD_INT 4
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31449
31376: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31377: LD_ADDR_VAR 0 12
31381: PUSH
31382: LD_VAR 0 18
31386: PPUSH
31387: LD_INT 22
31389: PUSH
31390: LD_VAR 0 16
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 30
31404: PUSH
31405: LD_INT 6
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 30
31414: PUSH
31415: LD_INT 7
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 30
31424: PUSH
31425: LD_INT 8
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 72
31446: ST_TO_ADDR
31447: GO 31450
31449: POP
// if i = 1 then
31450: LD_VAR 0 8
31454: PUSH
31455: LD_INT 1
31457: EQUAL
31458: IFFALSE 31569
// begin tmp := [ ] ;
31460: LD_ADDR_VAR 0 19
31464: PUSH
31465: EMPTY
31466: ST_TO_ADDR
// for j in f do
31467: LD_ADDR_VAR 0 9
31471: PUSH
31472: LD_VAR 0 12
31476: PUSH
31477: FOR_IN
31478: IFFALSE 31551
// if GetBType ( j ) = b_bunker then
31480: LD_VAR 0 9
31484: PPUSH
31485: CALL_OW 266
31489: PUSH
31490: LD_INT 32
31492: EQUAL
31493: IFFALSE 31520
// tmp := Insert ( tmp , 1 , j ) else
31495: LD_ADDR_VAR 0 19
31499: PUSH
31500: LD_VAR 0 19
31504: PPUSH
31505: LD_INT 1
31507: PPUSH
31508: LD_VAR 0 9
31512: PPUSH
31513: CALL_OW 2
31517: ST_TO_ADDR
31518: GO 31549
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31520: LD_ADDR_VAR 0 19
31524: PUSH
31525: LD_VAR 0 19
31529: PPUSH
31530: LD_VAR 0 19
31534: PUSH
31535: LD_INT 1
31537: PLUS
31538: PPUSH
31539: LD_VAR 0 9
31543: PPUSH
31544: CALL_OW 2
31548: ST_TO_ADDR
31549: GO 31477
31551: POP
31552: POP
// if tmp then
31553: LD_VAR 0 19
31557: IFFALSE 31569
// f := tmp ;
31559: LD_ADDR_VAR 0 12
31563: PUSH
31564: LD_VAR 0 19
31568: ST_TO_ADDR
// end ; x := personel [ i ] ;
31569: LD_ADDR_VAR 0 13
31573: PUSH
31574: LD_VAR 0 6
31578: PUSH
31579: LD_VAR 0 8
31583: ARRAY
31584: ST_TO_ADDR
// if x = - 1 then
31585: LD_VAR 0 13
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: EQUAL
31594: IFFALSE 31803
// begin for j in f do
31596: LD_ADDR_VAR 0 9
31600: PUSH
31601: LD_VAR 0 12
31605: PUSH
31606: FOR_IN
31607: IFFALSE 31799
// repeat InitHc ;
31609: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31613: LD_VAR 0 9
31617: PPUSH
31618: CALL_OW 266
31622: PUSH
31623: LD_INT 5
31625: EQUAL
31626: IFFALSE 31696
// begin if UnitsInside ( j ) < 3 then
31628: LD_VAR 0 9
31632: PPUSH
31633: CALL_OW 313
31637: PUSH
31638: LD_INT 3
31640: LESS
31641: IFFALSE 31677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31643: LD_INT 0
31645: PPUSH
31646: LD_INT 5
31648: PUSH
31649: LD_INT 8
31651: PUSH
31652: LD_INT 9
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: PUSH
31660: LD_VAR 0 17
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 4
31670: PPUSH
31671: CALL_OW 380
31675: GO 31694
// PrepareHuman ( false , i , skill ) ;
31677: LD_INT 0
31679: PPUSH
31680: LD_VAR 0 8
31684: PPUSH
31685: LD_VAR 0 4
31689: PPUSH
31690: CALL_OW 380
// end else
31694: GO 31713
// PrepareHuman ( false , i , skill ) ;
31696: LD_INT 0
31698: PPUSH
31699: LD_VAR 0 8
31703: PPUSH
31704: LD_VAR 0 4
31708: PPUSH
31709: CALL_OW 380
// un := CreateHuman ;
31713: LD_ADDR_VAR 0 14
31717: PUSH
31718: CALL_OW 44
31722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31723: LD_ADDR_VAR 0 7
31727: PUSH
31728: LD_VAR 0 7
31732: PPUSH
31733: LD_INT 1
31735: PPUSH
31736: LD_VAR 0 14
31740: PPUSH
31741: CALL_OW 2
31745: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31746: LD_VAR 0 14
31750: PPUSH
31751: LD_VAR 0 9
31755: PPUSH
31756: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31760: LD_VAR 0 9
31764: PPUSH
31765: CALL_OW 313
31769: PUSH
31770: LD_INT 6
31772: EQUAL
31773: PUSH
31774: LD_VAR 0 9
31778: PPUSH
31779: CALL_OW 266
31783: PUSH
31784: LD_INT 32
31786: PUSH
31787: LD_INT 31
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: IN
31794: OR
31795: IFFALSE 31609
31797: GO 31606
31799: POP
31800: POP
// end else
31801: GO 32183
// for j = 1 to x do
31803: LD_ADDR_VAR 0 9
31807: PUSH
31808: DOUBLE
31809: LD_INT 1
31811: DEC
31812: ST_TO_ADDR
31813: LD_VAR 0 13
31817: PUSH
31818: FOR_TO
31819: IFFALSE 32181
// begin InitHc ;
31821: CALL_OW 19
// if not f then
31825: LD_VAR 0 12
31829: NOT
31830: IFFALSE 31919
// begin PrepareHuman ( false , i , skill ) ;
31832: LD_INT 0
31834: PPUSH
31835: LD_VAR 0 8
31839: PPUSH
31840: LD_VAR 0 4
31844: PPUSH
31845: CALL_OW 380
// un := CreateHuman ;
31849: LD_ADDR_VAR 0 14
31853: PUSH
31854: CALL_OW 44
31858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31859: LD_ADDR_VAR 0 7
31863: PUSH
31864: LD_VAR 0 7
31868: PPUSH
31869: LD_INT 1
31871: PPUSH
31872: LD_VAR 0 14
31876: PPUSH
31877: CALL_OW 2
31881: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31882: LD_VAR 0 14
31886: PPUSH
31887: LD_VAR 0 1
31891: PPUSH
31892: CALL_OW 250
31896: PPUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 251
31906: PPUSH
31907: LD_INT 10
31909: PPUSH
31910: LD_INT 0
31912: PPUSH
31913: CALL_OW 50
// continue ;
31917: GO 31818
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31919: LD_VAR 0 12
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: CALL_OW 313
31932: PUSH
31933: LD_VAR 0 12
31937: PUSH
31938: LD_INT 1
31940: ARRAY
31941: PPUSH
31942: CALL_OW 266
31946: PUSH
31947: LD_INT 32
31949: PUSH
31950: LD_INT 31
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: IN
31957: AND
31958: PUSH
31959: LD_VAR 0 12
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: CALL_OW 313
31972: PUSH
31973: LD_INT 6
31975: EQUAL
31976: OR
31977: IFFALSE 31997
// f := Delete ( f , 1 ) ;
31979: LD_ADDR_VAR 0 12
31983: PUSH
31984: LD_VAR 0 12
31988: PPUSH
31989: LD_INT 1
31991: PPUSH
31992: CALL_OW 3
31996: ST_TO_ADDR
// if not f then
31997: LD_VAR 0 12
32001: NOT
32002: IFFALSE 32020
// begin x := x + 2 ;
32004: LD_ADDR_VAR 0 13
32008: PUSH
32009: LD_VAR 0 13
32013: PUSH
32014: LD_INT 2
32016: PLUS
32017: ST_TO_ADDR
// continue ;
32018: GO 31818
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32020: LD_VAR 0 12
32024: PUSH
32025: LD_INT 1
32027: ARRAY
32028: PPUSH
32029: CALL_OW 266
32033: PUSH
32034: LD_INT 5
32036: EQUAL
32037: IFFALSE 32111
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32039: LD_VAR 0 12
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: PPUSH
32048: CALL_OW 313
32052: PUSH
32053: LD_INT 3
32055: LESS
32056: IFFALSE 32092
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32058: LD_INT 0
32060: PPUSH
32061: LD_INT 5
32063: PUSH
32064: LD_INT 8
32066: PUSH
32067: LD_INT 9
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: PUSH
32075: LD_VAR 0 17
32079: ARRAY
32080: PPUSH
32081: LD_VAR 0 4
32085: PPUSH
32086: CALL_OW 380
32090: GO 32109
// PrepareHuman ( false , i , skill ) ;
32092: LD_INT 0
32094: PPUSH
32095: LD_VAR 0 8
32099: PPUSH
32100: LD_VAR 0 4
32104: PPUSH
32105: CALL_OW 380
// end else
32109: GO 32128
// PrepareHuman ( false , i , skill ) ;
32111: LD_INT 0
32113: PPUSH
32114: LD_VAR 0 8
32118: PPUSH
32119: LD_VAR 0 4
32123: PPUSH
32124: CALL_OW 380
// un := CreateHuman ;
32128: LD_ADDR_VAR 0 14
32132: PUSH
32133: CALL_OW 44
32137: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32138: LD_ADDR_VAR 0 7
32142: PUSH
32143: LD_VAR 0 7
32147: PPUSH
32148: LD_INT 1
32150: PPUSH
32151: LD_VAR 0 14
32155: PPUSH
32156: CALL_OW 2
32160: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32161: LD_VAR 0 14
32165: PPUSH
32166: LD_VAR 0 12
32170: PUSH
32171: LD_INT 1
32173: ARRAY
32174: PPUSH
32175: CALL_OW 52
// end ;
32179: GO 31818
32181: POP
32182: POP
// end ;
32183: GO 31120
32185: POP
32186: POP
// result := result ^ buildings ;
32187: LD_ADDR_VAR 0 7
32191: PUSH
32192: LD_VAR 0 7
32196: PUSH
32197: LD_VAR 0 18
32201: ADD
32202: ST_TO_ADDR
// end else
32203: GO 32346
// begin for i = 1 to personel do
32205: LD_ADDR_VAR 0 8
32209: PUSH
32210: DOUBLE
32211: LD_INT 1
32213: DEC
32214: ST_TO_ADDR
32215: LD_VAR 0 6
32219: PUSH
32220: FOR_TO
32221: IFFALSE 32344
// begin if i > 4 then
32223: LD_VAR 0 8
32227: PUSH
32228: LD_INT 4
32230: GREATER
32231: IFFALSE 32235
// break ;
32233: GO 32344
// x := personel [ i ] ;
32235: LD_ADDR_VAR 0 13
32239: PUSH
32240: LD_VAR 0 6
32244: PUSH
32245: LD_VAR 0 8
32249: ARRAY
32250: ST_TO_ADDR
// if x = - 1 then
32251: LD_VAR 0 13
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: EQUAL
32260: IFFALSE 32264
// continue ;
32262: GO 32220
// PrepareHuman ( false , i , skill ) ;
32264: LD_INT 0
32266: PPUSH
32267: LD_VAR 0 8
32271: PPUSH
32272: LD_VAR 0 4
32276: PPUSH
32277: CALL_OW 380
// un := CreateHuman ;
32281: LD_ADDR_VAR 0 14
32285: PUSH
32286: CALL_OW 44
32290: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32291: LD_VAR 0 14
32295: PPUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 250
32305: PPUSH
32306: LD_VAR 0 1
32310: PPUSH
32311: CALL_OW 251
32315: PPUSH
32316: LD_INT 10
32318: PPUSH
32319: LD_INT 0
32321: PPUSH
32322: CALL_OW 50
// result := result ^ un ;
32326: LD_ADDR_VAR 0 7
32330: PUSH
32331: LD_VAR 0 7
32335: PUSH
32336: LD_VAR 0 14
32340: ADD
32341: ST_TO_ADDR
// end ;
32342: GO 32220
32344: POP
32345: POP
// end ; end ;
32346: LD_VAR 0 7
32350: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32351: LD_INT 0
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
32364: PPUSH
32365: PPUSH
32366: PPUSH
32367: PPUSH
32368: PPUSH
// result := false ;
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 0
32376: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32377: LD_VAR 0 1
32381: NOT
32382: PUSH
32383: LD_VAR 0 1
32387: PPUSH
32388: CALL_OW 266
32392: PUSH
32393: LD_INT 32
32395: PUSH
32396: LD_INT 33
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: IN
32403: NOT
32404: OR
32405: IFFALSE 32409
// exit ;
32407: GO 33518
// nat := GetNation ( tower ) ;
32409: LD_ADDR_VAR 0 12
32413: PUSH
32414: LD_VAR 0 1
32418: PPUSH
32419: CALL_OW 248
32423: ST_TO_ADDR
// side := GetSide ( tower ) ;
32424: LD_ADDR_VAR 0 16
32428: PUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL_OW 255
32438: ST_TO_ADDR
// x := GetX ( tower ) ;
32439: LD_ADDR_VAR 0 10
32443: PUSH
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 250
32453: ST_TO_ADDR
// y := GetY ( tower ) ;
32454: LD_ADDR_VAR 0 11
32458: PUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: CALL_OW 251
32468: ST_TO_ADDR
// if not x or not y then
32469: LD_VAR 0 10
32473: NOT
32474: PUSH
32475: LD_VAR 0 11
32479: NOT
32480: OR
32481: IFFALSE 32485
// exit ;
32483: GO 33518
// weapon := 0 ;
32485: LD_ADDR_VAR 0 18
32489: PUSH
32490: LD_INT 0
32492: ST_TO_ADDR
// fac_list := [ ] ;
32493: LD_ADDR_VAR 0 17
32497: PUSH
32498: EMPTY
32499: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32500: LD_ADDR_VAR 0 6
32504: PUSH
32505: LD_VAR 0 1
32509: PPUSH
32510: CALL_OW 274
32514: PPUSH
32515: LD_VAR 0 2
32519: PPUSH
32520: LD_INT 0
32522: PPUSH
32523: CALL 30089 0 3
32527: PPUSH
32528: LD_INT 30
32530: PUSH
32531: LD_INT 3
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PPUSH
32538: CALL_OW 72
32542: ST_TO_ADDR
// if not factories then
32543: LD_VAR 0 6
32547: NOT
32548: IFFALSE 32552
// exit ;
32550: GO 33518
// for i in factories do
32552: LD_ADDR_VAR 0 8
32556: PUSH
32557: LD_VAR 0 6
32561: PUSH
32562: FOR_IN
32563: IFFALSE 32588
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32565: LD_ADDR_VAR 0 17
32569: PUSH
32570: LD_VAR 0 17
32574: PUSH
32575: LD_VAR 0 8
32579: PPUSH
32580: CALL_OW 478
32584: UNION
32585: ST_TO_ADDR
32586: GO 32562
32588: POP
32589: POP
// if not fac_list then
32590: LD_VAR 0 17
32594: NOT
32595: IFFALSE 32599
// exit ;
32597: GO 33518
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: LD_INT 5
32609: PUSH
32610: LD_INT 9
32612: PUSH
32613: LD_INT 10
32615: PUSH
32616: LD_INT 6
32618: PUSH
32619: LD_INT 7
32621: PUSH
32622: LD_INT 11
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 27
32636: PUSH
32637: LD_INT 28
32639: PUSH
32640: LD_INT 26
32642: PUSH
32643: LD_INT 30
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 43
32654: PUSH
32655: LD_INT 44
32657: PUSH
32658: LD_INT 46
32660: PUSH
32661: LD_INT 45
32663: PUSH
32664: LD_INT 47
32666: PUSH
32667: LD_INT 49
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: PUSH
32683: LD_VAR 0 12
32687: ARRAY
32688: ST_TO_ADDR
// list := list isect fac_list ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 5
32698: PUSH
32699: LD_VAR 0 17
32703: ISECT
32704: ST_TO_ADDR
// if not list then
32705: LD_VAR 0 5
32709: NOT
32710: IFFALSE 32714
// exit ;
32712: GO 33518
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32714: LD_VAR 0 12
32718: PUSH
32719: LD_INT 3
32721: EQUAL
32722: PUSH
32723: LD_INT 49
32725: PUSH
32726: LD_VAR 0 5
32730: IN
32731: AND
32732: PUSH
32733: LD_INT 31
32735: PPUSH
32736: LD_VAR 0 16
32740: PPUSH
32741: CALL_OW 321
32745: PUSH
32746: LD_INT 2
32748: EQUAL
32749: AND
32750: IFFALSE 32810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32752: LD_INT 22
32754: PUSH
32755: LD_VAR 0 16
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 35
32766: PUSH
32767: LD_INT 49
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 91
32776: PUSH
32777: LD_VAR 0 1
32781: PUSH
32782: LD_INT 10
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: PPUSH
32795: CALL_OW 69
32799: NOT
32800: IFFALSE 32810
// weapon := ru_time_lapser ;
32802: LD_ADDR_VAR 0 18
32806: PUSH
32807: LD_INT 49
32809: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32810: LD_VAR 0 12
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: IN
32825: PUSH
32826: LD_INT 11
32828: PUSH
32829: LD_VAR 0 5
32833: IN
32834: PUSH
32835: LD_INT 30
32837: PUSH
32838: LD_VAR 0 5
32842: IN
32843: OR
32844: AND
32845: PUSH
32846: LD_INT 6
32848: PPUSH
32849: LD_VAR 0 16
32853: PPUSH
32854: CALL_OW 321
32858: PUSH
32859: LD_INT 2
32861: EQUAL
32862: AND
32863: IFFALSE 33028
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32865: LD_INT 22
32867: PUSH
32868: LD_VAR 0 16
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 35
32882: PUSH
32883: LD_INT 11
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 35
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 91
32907: PUSH
32908: LD_VAR 0 1
32912: PUSH
32913: LD_INT 18
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 69
32930: NOT
32931: PUSH
32932: LD_INT 22
32934: PUSH
32935: LD_VAR 0 16
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 30
32949: PUSH
32950: LD_INT 32
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: LD_INT 33
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 91
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_INT 12
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: PPUSH
32996: CALL_OW 69
33000: PUSH
33001: LD_INT 2
33003: GREATER
33004: AND
33005: IFFALSE 33028
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33007: LD_ADDR_VAR 0 18
33011: PUSH
33012: LD_INT 11
33014: PUSH
33015: LD_INT 30
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_VAR 0 12
33026: ARRAY
33027: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33028: LD_VAR 0 18
33032: NOT
33033: PUSH
33034: LD_INT 40
33036: PPUSH
33037: LD_VAR 0 16
33041: PPUSH
33042: CALL_OW 321
33046: PUSH
33047: LD_INT 2
33049: EQUAL
33050: AND
33051: PUSH
33052: LD_INT 7
33054: PUSH
33055: LD_VAR 0 5
33059: IN
33060: PUSH
33061: LD_INT 28
33063: PUSH
33064: LD_VAR 0 5
33068: IN
33069: OR
33070: PUSH
33071: LD_INT 45
33073: PUSH
33074: LD_VAR 0 5
33078: IN
33079: OR
33080: AND
33081: IFFALSE 33335
// begin hex := GetHexInfo ( x , y ) ;
33083: LD_ADDR_VAR 0 4
33087: PUSH
33088: LD_VAR 0 10
33092: PPUSH
33093: LD_VAR 0 11
33097: PPUSH
33098: CALL_OW 546
33102: ST_TO_ADDR
// if hex [ 1 ] then
33103: LD_VAR 0 4
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: IFFALSE 33115
// exit ;
33113: GO 33518
// height := hex [ 2 ] ;
33115: LD_ADDR_VAR 0 15
33119: PUSH
33120: LD_VAR 0 4
33124: PUSH
33125: LD_INT 2
33127: ARRAY
33128: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33129: LD_ADDR_VAR 0 14
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: LD_INT 3
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// for i in tmp do
33152: LD_ADDR_VAR 0 8
33156: PUSH
33157: LD_VAR 0 14
33161: PUSH
33162: FOR_IN
33163: IFFALSE 33333
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33165: LD_ADDR_VAR 0 9
33169: PUSH
33170: LD_VAR 0 10
33174: PPUSH
33175: LD_VAR 0 8
33179: PPUSH
33180: LD_INT 5
33182: PPUSH
33183: CALL_OW 272
33187: PUSH
33188: LD_VAR 0 11
33192: PPUSH
33193: LD_VAR 0 8
33197: PPUSH
33198: LD_INT 5
33200: PPUSH
33201: CALL_OW 273
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33210: LD_VAR 0 9
33214: PUSH
33215: LD_INT 1
33217: ARRAY
33218: PPUSH
33219: LD_VAR 0 9
33223: PUSH
33224: LD_INT 2
33226: ARRAY
33227: PPUSH
33228: CALL_OW 488
33232: IFFALSE 33331
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33234: LD_ADDR_VAR 0 4
33238: PUSH
33239: LD_VAR 0 9
33243: PUSH
33244: LD_INT 1
33246: ARRAY
33247: PPUSH
33248: LD_VAR 0 9
33252: PUSH
33253: LD_INT 2
33255: ARRAY
33256: PPUSH
33257: CALL_OW 546
33261: ST_TO_ADDR
// if hex [ 1 ] then
33262: LD_VAR 0 4
33266: PUSH
33267: LD_INT 1
33269: ARRAY
33270: IFFALSE 33274
// continue ;
33272: GO 33162
// h := hex [ 2 ] ;
33274: LD_ADDR_VAR 0 13
33278: PUSH
33279: LD_VAR 0 4
33283: PUSH
33284: LD_INT 2
33286: ARRAY
33287: ST_TO_ADDR
// if h + 7 < height then
33288: LD_VAR 0 13
33292: PUSH
33293: LD_INT 7
33295: PLUS
33296: PUSH
33297: LD_VAR 0 15
33301: LESS
33302: IFFALSE 33331
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33304: LD_ADDR_VAR 0 18
33308: PUSH
33309: LD_INT 7
33311: PUSH
33312: LD_INT 28
33314: PUSH
33315: LD_INT 45
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: PUSH
33323: LD_VAR 0 12
33327: ARRAY
33328: ST_TO_ADDR
// break ;
33329: GO 33333
// end ; end ; end ;
33331: GO 33162
33333: POP
33334: POP
// end ; if not weapon then
33335: LD_VAR 0 18
33339: NOT
33340: IFFALSE 33400
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33342: LD_ADDR_VAR 0 5
33346: PUSH
33347: LD_VAR 0 5
33351: PUSH
33352: LD_INT 11
33354: PUSH
33355: LD_INT 30
33357: PUSH
33358: LD_INT 49
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: DIFF
33366: ST_TO_ADDR
// if not list then
33367: LD_VAR 0 5
33371: NOT
33372: IFFALSE 33376
// exit ;
33374: GO 33518
// weapon := list [ rand ( 1 , list ) ] ;
33376: LD_ADDR_VAR 0 18
33380: PUSH
33381: LD_VAR 0 5
33385: PUSH
33386: LD_INT 1
33388: PPUSH
33389: LD_VAR 0 5
33393: PPUSH
33394: CALL_OW 12
33398: ARRAY
33399: ST_TO_ADDR
// end ; if weapon then
33400: LD_VAR 0 18
33404: IFFALSE 33518
// begin tmp := CostOfWeapon ( weapon ) ;
33406: LD_ADDR_VAR 0 14
33410: PUSH
33411: LD_VAR 0 18
33415: PPUSH
33416: CALL_OW 451
33420: ST_TO_ADDR
// j := GetBase ( tower ) ;
33421: LD_ADDR_VAR 0 9
33425: PUSH
33426: LD_VAR 0 1
33430: PPUSH
33431: CALL_OW 274
33435: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33436: LD_VAR 0 9
33440: PPUSH
33441: LD_INT 1
33443: PPUSH
33444: CALL_OW 275
33448: PUSH
33449: LD_VAR 0 14
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: GREATEREQUAL
33458: PUSH
33459: LD_VAR 0 9
33463: PPUSH
33464: LD_INT 2
33466: PPUSH
33467: CALL_OW 275
33471: PUSH
33472: LD_VAR 0 14
33476: PUSH
33477: LD_INT 2
33479: ARRAY
33480: GREATEREQUAL
33481: AND
33482: PUSH
33483: LD_VAR 0 9
33487: PPUSH
33488: LD_INT 3
33490: PPUSH
33491: CALL_OW 275
33495: PUSH
33496: LD_VAR 0 14
33500: PUSH
33501: LD_INT 3
33503: ARRAY
33504: GREATEREQUAL
33505: AND
33506: IFFALSE 33518
// result := weapon ;
33508: LD_ADDR_VAR 0 3
33512: PUSH
33513: LD_VAR 0 18
33517: ST_TO_ADDR
// end ; end ;
33518: LD_VAR 0 3
33522: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33523: LD_INT 0
33525: PPUSH
33526: PPUSH
// result := true ;
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_INT 1
33534: ST_TO_ADDR
// if array1 = array2 then
33535: LD_VAR 0 1
33539: PUSH
33540: LD_VAR 0 2
33544: EQUAL
33545: IFFALSE 33605
// begin for i = 1 to array1 do
33547: LD_ADDR_VAR 0 4
33551: PUSH
33552: DOUBLE
33553: LD_INT 1
33555: DEC
33556: ST_TO_ADDR
33557: LD_VAR 0 1
33561: PUSH
33562: FOR_TO
33563: IFFALSE 33601
// if array1 [ i ] <> array2 [ i ] then
33565: LD_VAR 0 1
33569: PUSH
33570: LD_VAR 0 4
33574: ARRAY
33575: PUSH
33576: LD_VAR 0 2
33580: PUSH
33581: LD_VAR 0 4
33585: ARRAY
33586: NONEQUAL
33587: IFFALSE 33599
// begin result := false ;
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_INT 0
33596: ST_TO_ADDR
// break ;
33597: GO 33601
// end ;
33599: GO 33562
33601: POP
33602: POP
// end else
33603: GO 33613
// result := false ;
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_INT 0
33612: ST_TO_ADDR
// end ;
33613: LD_VAR 0 3
33617: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33618: LD_INT 0
33620: PPUSH
33621: PPUSH
// if not array1 or not array2 then
33622: LD_VAR 0 1
33626: NOT
33627: PUSH
33628: LD_VAR 0 2
33632: NOT
33633: OR
33634: IFFALSE 33638
// exit ;
33636: GO 33702
// result := true ;
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 1
33645: ST_TO_ADDR
// for i = 1 to array1 do
33646: LD_ADDR_VAR 0 4
33650: PUSH
33651: DOUBLE
33652: LD_INT 1
33654: DEC
33655: ST_TO_ADDR
33656: LD_VAR 0 1
33660: PUSH
33661: FOR_TO
33662: IFFALSE 33700
// if array1 [ i ] <> array2 [ i ] then
33664: LD_VAR 0 1
33668: PUSH
33669: LD_VAR 0 4
33673: ARRAY
33674: PUSH
33675: LD_VAR 0 2
33679: PUSH
33680: LD_VAR 0 4
33684: ARRAY
33685: NONEQUAL
33686: IFFALSE 33698
// begin result := false ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 0
33695: ST_TO_ADDR
// break ;
33696: GO 33700
// end ;
33698: GO 33661
33700: POP
33701: POP
// end ;
33702: LD_VAR 0 3
33706: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33707: LD_INT 0
33709: PPUSH
33710: PPUSH
33711: PPUSH
// pom := GetBase ( fac ) ;
33712: LD_ADDR_VAR 0 5
33716: PUSH
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL_OW 274
33726: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33727: LD_ADDR_VAR 0 4
33731: PUSH
33732: LD_VAR 0 2
33736: PUSH
33737: LD_INT 1
33739: ARRAY
33740: PPUSH
33741: LD_VAR 0 2
33745: PUSH
33746: LD_INT 2
33748: ARRAY
33749: PPUSH
33750: LD_VAR 0 2
33754: PUSH
33755: LD_INT 3
33757: ARRAY
33758: PPUSH
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 4
33766: ARRAY
33767: PPUSH
33768: CALL_OW 449
33772: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33773: LD_ADDR_VAR 0 3
33777: PUSH
33778: LD_VAR 0 5
33782: PPUSH
33783: LD_INT 1
33785: PPUSH
33786: CALL_OW 275
33790: PUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 1
33798: ARRAY
33799: GREATEREQUAL
33800: PUSH
33801: LD_VAR 0 5
33805: PPUSH
33806: LD_INT 2
33808: PPUSH
33809: CALL_OW 275
33813: PUSH
33814: LD_VAR 0 4
33818: PUSH
33819: LD_INT 2
33821: ARRAY
33822: GREATEREQUAL
33823: AND
33824: PUSH
33825: LD_VAR 0 5
33829: PPUSH
33830: LD_INT 3
33832: PPUSH
33833: CALL_OW 275
33837: PUSH
33838: LD_VAR 0 4
33842: PUSH
33843: LD_INT 3
33845: ARRAY
33846: GREATEREQUAL
33847: AND
33848: ST_TO_ADDR
// end ;
33849: LD_VAR 0 3
33853: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33854: LD_INT 0
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
// pom := GetBase ( building ) ;
33860: LD_ADDR_VAR 0 3
33864: PUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 274
33874: ST_TO_ADDR
// if not pom then
33875: LD_VAR 0 3
33879: NOT
33880: IFFALSE 33884
// exit ;
33882: GO 34054
// btype := GetBType ( building ) ;
33884: LD_ADDR_VAR 0 5
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 266
33898: ST_TO_ADDR
// if btype = b_armoury then
33899: LD_VAR 0 5
33903: PUSH
33904: LD_INT 4
33906: EQUAL
33907: IFFALSE 33917
// btype := b_barracks ;
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: LD_INT 5
33916: ST_TO_ADDR
// if btype = b_depot then
33917: LD_VAR 0 5
33921: PUSH
33922: LD_INT 0
33924: EQUAL
33925: IFFALSE 33935
// btype := b_warehouse ;
33927: LD_ADDR_VAR 0 5
33931: PUSH
33932: LD_INT 1
33934: ST_TO_ADDR
// if btype = b_workshop then
33935: LD_VAR 0 5
33939: PUSH
33940: LD_INT 2
33942: EQUAL
33943: IFFALSE 33953
// btype := b_factory ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_INT 3
33952: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33953: LD_ADDR_VAR 0 4
33957: PUSH
33958: LD_VAR 0 5
33962: PPUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 248
33972: PPUSH
33973: CALL_OW 450
33977: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33978: LD_ADDR_VAR 0 2
33982: PUSH
33983: LD_VAR 0 3
33987: PPUSH
33988: LD_INT 1
33990: PPUSH
33991: CALL_OW 275
33995: PUSH
33996: LD_VAR 0 4
34000: PUSH
34001: LD_INT 1
34003: ARRAY
34004: GREATEREQUAL
34005: PUSH
34006: LD_VAR 0 3
34010: PPUSH
34011: LD_INT 2
34013: PPUSH
34014: CALL_OW 275
34018: PUSH
34019: LD_VAR 0 4
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: GREATEREQUAL
34028: AND
34029: PUSH
34030: LD_VAR 0 3
34034: PPUSH
34035: LD_INT 3
34037: PPUSH
34038: CALL_OW 275
34042: PUSH
34043: LD_VAR 0 4
34047: PUSH
34048: LD_INT 3
34050: ARRAY
34051: GREATEREQUAL
34052: AND
34053: ST_TO_ADDR
// end ;
34054: LD_VAR 0 2
34058: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34059: LD_INT 0
34061: PPUSH
34062: PPUSH
34063: PPUSH
// pom := GetBase ( building ) ;
34064: LD_ADDR_VAR 0 4
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 274
34078: ST_TO_ADDR
// if not pom then
34079: LD_VAR 0 4
34083: NOT
34084: IFFALSE 34088
// exit ;
34086: GO 34189
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34088: LD_ADDR_VAR 0 5
34092: PUSH
34093: LD_VAR 0 2
34097: PPUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 248
34107: PPUSH
34108: CALL_OW 450
34112: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34113: LD_ADDR_VAR 0 3
34117: PUSH
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_INT 1
34125: PPUSH
34126: CALL_OW 275
34130: PUSH
34131: LD_VAR 0 5
34135: PUSH
34136: LD_INT 1
34138: ARRAY
34139: GREATEREQUAL
34140: PUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: LD_INT 2
34148: PPUSH
34149: CALL_OW 275
34153: PUSH
34154: LD_VAR 0 5
34158: PUSH
34159: LD_INT 2
34161: ARRAY
34162: GREATEREQUAL
34163: AND
34164: PUSH
34165: LD_VAR 0 4
34169: PPUSH
34170: LD_INT 3
34172: PPUSH
34173: CALL_OW 275
34177: PUSH
34178: LD_VAR 0 5
34182: PUSH
34183: LD_INT 3
34185: ARRAY
34186: GREATEREQUAL
34187: AND
34188: ST_TO_ADDR
// end ;
34189: LD_VAR 0 3
34193: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34194: LD_INT 0
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
// result := false ;
34207: LD_ADDR_VAR 0 8
34211: PUSH
34212: LD_INT 0
34214: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34215: LD_VAR 0 5
34219: NOT
34220: PUSH
34221: LD_VAR 0 1
34225: NOT
34226: OR
34227: PUSH
34228: LD_VAR 0 2
34232: NOT
34233: OR
34234: PUSH
34235: LD_VAR 0 3
34239: NOT
34240: OR
34241: IFFALSE 34245
// exit ;
34243: GO 35059
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34245: LD_ADDR_VAR 0 14
34249: PUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_VAR 0 2
34259: PPUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 5
34274: PUSH
34275: LD_INT 1
34277: ARRAY
34278: PPUSH
34279: CALL_OW 248
34283: PPUSH
34284: LD_INT 0
34286: PPUSH
34287: CALL 36292 0 6
34291: ST_TO_ADDR
// if not hexes then
34292: LD_VAR 0 14
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 35059
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34301: LD_ADDR_VAR 0 17
34305: PUSH
34306: LD_VAR 0 5
34310: PPUSH
34311: LD_INT 22
34313: PUSH
34314: LD_VAR 0 13
34318: PPUSH
34319: CALL_OW 255
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 30
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 30
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PPUSH
34360: CALL_OW 72
34364: ST_TO_ADDR
// for i = 1 to hexes do
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: DOUBLE
34371: LD_INT 1
34373: DEC
34374: ST_TO_ADDR
34375: LD_VAR 0 14
34379: PUSH
34380: FOR_TO
34381: IFFALSE 35057
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34383: LD_ADDR_VAR 0 13
34387: PUSH
34388: LD_VAR 0 14
34392: PUSH
34393: LD_VAR 0 9
34397: ARRAY
34398: PUSH
34399: LD_INT 1
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 14
34407: PUSH
34408: LD_VAR 0 9
34412: ARRAY
34413: PUSH
34414: LD_INT 2
34416: ARRAY
34417: PPUSH
34418: CALL_OW 428
34422: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34423: LD_VAR 0 14
34427: PUSH
34428: LD_VAR 0 9
34432: ARRAY
34433: PUSH
34434: LD_INT 1
34436: ARRAY
34437: PPUSH
34438: LD_VAR 0 14
34442: PUSH
34443: LD_VAR 0 9
34447: ARRAY
34448: PUSH
34449: LD_INT 2
34451: ARRAY
34452: PPUSH
34453: CALL_OW 351
34457: PUSH
34458: LD_VAR 0 14
34462: PUSH
34463: LD_VAR 0 9
34467: ARRAY
34468: PUSH
34469: LD_INT 1
34471: ARRAY
34472: PPUSH
34473: LD_VAR 0 14
34477: PUSH
34478: LD_VAR 0 9
34482: ARRAY
34483: PUSH
34484: LD_INT 2
34486: ARRAY
34487: PPUSH
34488: CALL_OW 488
34492: NOT
34493: OR
34494: PUSH
34495: LD_VAR 0 13
34499: PPUSH
34500: CALL_OW 247
34504: PUSH
34505: LD_INT 3
34507: EQUAL
34508: OR
34509: IFFALSE 34515
// exit ;
34511: POP
34512: POP
34513: GO 35059
// if not tmp then
34515: LD_VAR 0 13
34519: NOT
34520: IFFALSE 34524
// continue ;
34522: GO 34380
// result := true ;
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_INT 1
34531: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34532: LD_VAR 0 6
34536: PUSH
34537: LD_VAR 0 13
34541: PPUSH
34542: CALL_OW 247
34546: PUSH
34547: LD_INT 2
34549: EQUAL
34550: AND
34551: PUSH
34552: LD_VAR 0 13
34556: PPUSH
34557: CALL_OW 263
34561: PUSH
34562: LD_INT 1
34564: EQUAL
34565: AND
34566: IFFALSE 34730
// begin if IsDrivenBy ( tmp ) then
34568: LD_VAR 0 13
34572: PPUSH
34573: CALL_OW 311
34577: IFFALSE 34581
// continue ;
34579: GO 34380
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34581: LD_VAR 0 6
34585: PPUSH
34586: LD_INT 3
34588: PUSH
34589: LD_INT 60
34591: PUSH
34592: EMPTY
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 55
34604: PUSH
34605: EMPTY
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PPUSH
34616: CALL_OW 72
34620: IFFALSE 34728
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34622: LD_ADDR_VAR 0 18
34626: PUSH
34627: LD_VAR 0 6
34631: PPUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 60
34637: PUSH
34638: EMPTY
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: LD_INT 55
34650: PUSH
34651: EMPTY
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PPUSH
34662: CALL_OW 72
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: ST_TO_ADDR
// if IsInUnit ( driver ) then
34671: LD_VAR 0 18
34675: PPUSH
34676: CALL_OW 310
34680: IFFALSE 34691
// ComExit ( driver ) ;
34682: LD_VAR 0 18
34686: PPUSH
34687: CALL 60072 0 1
// AddComEnterUnit ( driver , tmp ) ;
34691: LD_VAR 0 18
34695: PPUSH
34696: LD_VAR 0 13
34700: PPUSH
34701: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34705: LD_VAR 0 18
34709: PPUSH
34710: LD_VAR 0 7
34714: PPUSH
34715: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34719: LD_VAR 0 18
34723: PPUSH
34724: CALL_OW 181
// end ; continue ;
34728: GO 34380
// end ; if not cleaners or not tmp in cleaners then
34730: LD_VAR 0 6
34734: NOT
34735: PUSH
34736: LD_VAR 0 13
34740: PUSH
34741: LD_VAR 0 6
34745: IN
34746: NOT
34747: OR
34748: IFFALSE 35055
// begin if dep then
34750: LD_VAR 0 17
34754: IFFALSE 34890
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34756: LD_ADDR_VAR 0 16
34760: PUSH
34761: LD_VAR 0 17
34765: PUSH
34766: LD_INT 1
34768: ARRAY
34769: PPUSH
34770: CALL_OW 250
34774: PPUSH
34775: LD_VAR 0 17
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: PPUSH
34784: CALL_OW 254
34788: PPUSH
34789: LD_INT 5
34791: PPUSH
34792: CALL_OW 272
34796: PUSH
34797: LD_VAR 0 17
34801: PUSH
34802: LD_INT 1
34804: ARRAY
34805: PPUSH
34806: CALL_OW 251
34810: PPUSH
34811: LD_VAR 0 17
34815: PUSH
34816: LD_INT 1
34818: ARRAY
34819: PPUSH
34820: CALL_OW 254
34824: PPUSH
34825: LD_INT 5
34827: PPUSH
34828: CALL_OW 273
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34837: LD_VAR 0 16
34841: PUSH
34842: LD_INT 1
34844: ARRAY
34845: PPUSH
34846: LD_VAR 0 16
34850: PUSH
34851: LD_INT 2
34853: ARRAY
34854: PPUSH
34855: CALL_OW 488
34859: IFFALSE 34890
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34861: LD_VAR 0 13
34865: PPUSH
34866: LD_VAR 0 16
34870: PUSH
34871: LD_INT 1
34873: ARRAY
34874: PPUSH
34875: LD_VAR 0 16
34879: PUSH
34880: LD_INT 2
34882: ARRAY
34883: PPUSH
34884: CALL_OW 111
// continue ;
34888: GO 34380
// end ; end ; r := GetDir ( tmp ) ;
34890: LD_ADDR_VAR 0 15
34894: PUSH
34895: LD_VAR 0 13
34899: PPUSH
34900: CALL_OW 254
34904: ST_TO_ADDR
// if r = 5 then
34905: LD_VAR 0 15
34909: PUSH
34910: LD_INT 5
34912: EQUAL
34913: IFFALSE 34923
// r := 0 ;
34915: LD_ADDR_VAR 0 15
34919: PUSH
34920: LD_INT 0
34922: ST_TO_ADDR
// for j = r to 5 do
34923: LD_ADDR_VAR 0 10
34927: PUSH
34928: DOUBLE
34929: LD_VAR 0 15
34933: DEC
34934: ST_TO_ADDR
34935: LD_INT 5
34937: PUSH
34938: FOR_TO
34939: IFFALSE 35053
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34941: LD_ADDR_VAR 0 11
34945: PUSH
34946: LD_VAR 0 13
34950: PPUSH
34951: CALL_OW 250
34955: PPUSH
34956: LD_VAR 0 10
34960: PPUSH
34961: LD_INT 2
34963: PPUSH
34964: CALL_OW 272
34968: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34969: LD_ADDR_VAR 0 12
34973: PUSH
34974: LD_VAR 0 13
34978: PPUSH
34979: CALL_OW 251
34983: PPUSH
34984: LD_VAR 0 10
34988: PPUSH
34989: LD_INT 2
34991: PPUSH
34992: CALL_OW 273
34996: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34997: LD_VAR 0 11
35001: PPUSH
35002: LD_VAR 0 12
35006: PPUSH
35007: CALL_OW 488
35011: PUSH
35012: LD_VAR 0 11
35016: PPUSH
35017: LD_VAR 0 12
35021: PPUSH
35022: CALL_OW 428
35026: NOT
35027: AND
35028: IFFALSE 35051
// begin ComMoveXY ( tmp , _x , _y ) ;
35030: LD_VAR 0 13
35034: PPUSH
35035: LD_VAR 0 11
35039: PPUSH
35040: LD_VAR 0 12
35044: PPUSH
35045: CALL_OW 111
// break ;
35049: GO 35053
// end ; end ;
35051: GO 34938
35053: POP
35054: POP
// end ; end ;
35055: GO 34380
35057: POP
35058: POP
// end ;
35059: LD_VAR 0 8
35063: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35064: LD_INT 0
35066: PPUSH
// result := true ;
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_INT 1
35074: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 24
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35094
35086: LD_INT 33
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 35119
35094: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_INT 32
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 321
35112: PUSH
35113: LD_INT 2
35115: EQUAL
35116: ST_TO_ADDR
35117: GO 35435
35119: LD_INT 20
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35152
35127: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35128: LD_ADDR_VAR 0 3
35132: PUSH
35133: LD_INT 6
35135: PPUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 321
35145: PUSH
35146: LD_INT 2
35148: EQUAL
35149: ST_TO_ADDR
35150: GO 35435
35152: LD_INT 22
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35166
35158: LD_INT 36
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35191
35166: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_INT 15
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 321
35184: PUSH
35185: LD_INT 2
35187: EQUAL
35188: ST_TO_ADDR
35189: GO 35435
35191: LD_INT 30
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35224
35199: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 20
35207: PPUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 321
35217: PUSH
35218: LD_INT 2
35220: EQUAL
35221: ST_TO_ADDR
35222: GO 35435
35224: LD_INT 28
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35238
35230: LD_INT 21
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35238
35236: GO 35263
35238: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35239: LD_ADDR_VAR 0 3
35243: PUSH
35244: LD_INT 21
35246: PPUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: CALL_OW 321
35256: PUSH
35257: LD_INT 2
35259: EQUAL
35260: ST_TO_ADDR
35261: GO 35435
35263: LD_INT 16
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35296
35271: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_INT 84
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 321
35289: PUSH
35290: LD_INT 2
35292: EQUAL
35293: ST_TO_ADDR
35294: GO 35435
35296: LD_INT 19
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35310
35302: LD_INT 23
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35310
35308: GO 35335
35310: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_INT 83
35318: PPUSH
35319: LD_VAR 0 1
35323: PPUSH
35324: CALL_OW 321
35328: PUSH
35329: LD_INT 2
35331: EQUAL
35332: ST_TO_ADDR
35333: GO 35435
35335: LD_INT 17
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35368
35343: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35344: LD_ADDR_VAR 0 3
35348: PUSH
35349: LD_INT 39
35351: PPUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 321
35361: PUSH
35362: LD_INT 2
35364: EQUAL
35365: ST_TO_ADDR
35366: GO 35435
35368: LD_INT 18
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35401
35376: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 40
35384: PPUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 321
35394: PUSH
35395: LD_INT 2
35397: EQUAL
35398: ST_TO_ADDR
35399: GO 35435
35401: LD_INT 27
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35434
35409: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 35
35417: PPUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 321
35427: PUSH
35428: LD_INT 2
35430: EQUAL
35431: ST_TO_ADDR
35432: GO 35435
35434: POP
// end ;
35435: LD_VAR 0 3
35439: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// result := false ;
35453: LD_ADDR_VAR 0 6
35457: PUSH
35458: LD_INT 0
35460: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35461: LD_VAR 0 1
35465: NOT
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 266
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: IN
35487: NOT
35488: OR
35489: PUSH
35490: LD_VAR 0 2
35494: NOT
35495: OR
35496: PUSH
35497: LD_VAR 0 5
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: LD_INT 4
35516: PUSH
35517: LD_INT 5
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: IN
35528: NOT
35529: OR
35530: PUSH
35531: LD_VAR 0 3
35535: PPUSH
35536: LD_VAR 0 4
35540: PPUSH
35541: CALL_OW 488
35545: NOT
35546: OR
35547: IFFALSE 35551
// exit ;
35549: GO 36287
// side := GetSide ( depot ) ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: CALL_OW 255
35565: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35566: LD_VAR 0 9
35570: PPUSH
35571: LD_VAR 0 2
35575: PPUSH
35576: CALL 35064 0 2
35580: NOT
35581: IFFALSE 35585
// exit ;
35583: GO 36287
// pom := GetBase ( depot ) ;
35585: LD_ADDR_VAR 0 10
35589: PUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL_OW 274
35599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35600: LD_ADDR_VAR 0 11
35604: PUSH
35605: LD_VAR 0 2
35609: PPUSH
35610: LD_VAR 0 1
35614: PPUSH
35615: CALL_OW 248
35619: PPUSH
35620: CALL_OW 450
35624: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35625: LD_VAR 0 10
35629: PPUSH
35630: LD_INT 1
35632: PPUSH
35633: CALL_OW 275
35637: PUSH
35638: LD_VAR 0 11
35642: PUSH
35643: LD_INT 1
35645: ARRAY
35646: GREATEREQUAL
35647: PUSH
35648: LD_VAR 0 10
35652: PPUSH
35653: LD_INT 2
35655: PPUSH
35656: CALL_OW 275
35660: PUSH
35661: LD_VAR 0 11
35665: PUSH
35666: LD_INT 2
35668: ARRAY
35669: GREATEREQUAL
35670: AND
35671: PUSH
35672: LD_VAR 0 10
35676: PPUSH
35677: LD_INT 3
35679: PPUSH
35680: CALL_OW 275
35684: PUSH
35685: LD_VAR 0 11
35689: PUSH
35690: LD_INT 3
35692: ARRAY
35693: GREATEREQUAL
35694: AND
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 36287
// if GetBType ( depot ) = b_depot then
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 266
35709: PUSH
35710: LD_INT 0
35712: EQUAL
35713: IFFALSE 35725
// dist := 28 else
35715: LD_ADDR_VAR 0 14
35719: PUSH
35720: LD_INT 28
35722: ST_TO_ADDR
35723: GO 35733
// dist := 36 ;
35725: LD_ADDR_VAR 0 14
35729: PUSH
35730: LD_INT 36
35732: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35733: LD_VAR 0 1
35737: PPUSH
35738: LD_VAR 0 3
35742: PPUSH
35743: LD_VAR 0 4
35747: PPUSH
35748: CALL_OW 297
35752: PUSH
35753: LD_VAR 0 14
35757: GREATER
35758: IFFALSE 35762
// exit ;
35760: GO 36287
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35762: LD_ADDR_VAR 0 12
35766: PUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 3
35776: PPUSH
35777: LD_VAR 0 4
35781: PPUSH
35782: LD_VAR 0 5
35786: PPUSH
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL_OW 248
35796: PPUSH
35797: LD_INT 0
35799: PPUSH
35800: CALL 36292 0 6
35804: ST_TO_ADDR
// if not hexes then
35805: LD_VAR 0 12
35809: NOT
35810: IFFALSE 35814
// exit ;
35812: GO 36287
// hex := GetHexInfo ( x , y ) ;
35814: LD_ADDR_VAR 0 15
35818: PUSH
35819: LD_VAR 0 3
35823: PPUSH
35824: LD_VAR 0 4
35828: PPUSH
35829: CALL_OW 546
35833: ST_TO_ADDR
// if hex [ 1 ] then
35834: LD_VAR 0 15
35838: PUSH
35839: LD_INT 1
35841: ARRAY
35842: IFFALSE 35846
// exit ;
35844: GO 36287
// height := hex [ 2 ] ;
35846: LD_ADDR_VAR 0 13
35850: PUSH
35851: LD_VAR 0 15
35855: PUSH
35856: LD_INT 2
35858: ARRAY
35859: ST_TO_ADDR
// for i = 1 to hexes do
35860: LD_ADDR_VAR 0 7
35864: PUSH
35865: DOUBLE
35866: LD_INT 1
35868: DEC
35869: ST_TO_ADDR
35870: LD_VAR 0 12
35874: PUSH
35875: FOR_TO
35876: IFFALSE 36206
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35878: LD_VAR 0 12
35882: PUSH
35883: LD_VAR 0 7
35887: ARRAY
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: PPUSH
35893: LD_VAR 0 12
35897: PUSH
35898: LD_VAR 0 7
35902: ARRAY
35903: PUSH
35904: LD_INT 2
35906: ARRAY
35907: PPUSH
35908: CALL_OW 488
35912: NOT
35913: PUSH
35914: LD_VAR 0 12
35918: PUSH
35919: LD_VAR 0 7
35923: ARRAY
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PPUSH
35929: LD_VAR 0 12
35933: PUSH
35934: LD_VAR 0 7
35938: ARRAY
35939: PUSH
35940: LD_INT 2
35942: ARRAY
35943: PPUSH
35944: CALL_OW 428
35948: PUSH
35949: LD_INT 0
35951: GREATER
35952: OR
35953: PUSH
35954: LD_VAR 0 12
35958: PUSH
35959: LD_VAR 0 7
35963: ARRAY
35964: PUSH
35965: LD_INT 1
35967: ARRAY
35968: PPUSH
35969: LD_VAR 0 12
35973: PUSH
35974: LD_VAR 0 7
35978: ARRAY
35979: PUSH
35980: LD_INT 2
35982: ARRAY
35983: PPUSH
35984: CALL_OW 351
35988: OR
35989: IFFALSE 35995
// exit ;
35991: POP
35992: POP
35993: GO 36287
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35995: LD_ADDR_VAR 0 8
35999: PUSH
36000: LD_VAR 0 12
36004: PUSH
36005: LD_VAR 0 7
36009: ARRAY
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: PPUSH
36015: LD_VAR 0 12
36019: PUSH
36020: LD_VAR 0 7
36024: ARRAY
36025: PUSH
36026: LD_INT 2
36028: ARRAY
36029: PPUSH
36030: CALL_OW 546
36034: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36035: LD_VAR 0 8
36039: PUSH
36040: LD_INT 1
36042: ARRAY
36043: PUSH
36044: LD_VAR 0 8
36048: PUSH
36049: LD_INT 2
36051: ARRAY
36052: PUSH
36053: LD_VAR 0 13
36057: PUSH
36058: LD_INT 2
36060: PLUS
36061: GREATER
36062: OR
36063: PUSH
36064: LD_VAR 0 8
36068: PUSH
36069: LD_INT 2
36071: ARRAY
36072: PUSH
36073: LD_VAR 0 13
36077: PUSH
36078: LD_INT 2
36080: MINUS
36081: LESS
36082: OR
36083: PUSH
36084: LD_VAR 0 8
36088: PUSH
36089: LD_INT 3
36091: ARRAY
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 8
36098: PUSH
36099: LD_INT 9
36101: PUSH
36102: LD_INT 10
36104: PUSH
36105: LD_INT 11
36107: PUSH
36108: LD_INT 12
36110: PUSH
36111: LD_INT 13
36113: PUSH
36114: LD_INT 16
36116: PUSH
36117: LD_INT 17
36119: PUSH
36120: LD_INT 18
36122: PUSH
36123: LD_INT 19
36125: PUSH
36126: LD_INT 20
36128: PUSH
36129: LD_INT 21
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: IN
36147: NOT
36148: OR
36149: PUSH
36150: LD_VAR 0 8
36154: PUSH
36155: LD_INT 5
36157: ARRAY
36158: NOT
36159: OR
36160: PUSH
36161: LD_VAR 0 8
36165: PUSH
36166: LD_INT 6
36168: ARRAY
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 7
36178: PUSH
36179: LD_INT 9
36181: PUSH
36182: LD_INT 10
36184: PUSH
36185: LD_INT 11
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: IN
36196: NOT
36197: OR
36198: IFFALSE 36204
// exit ;
36200: POP
36201: POP
36202: GO 36287
// end ;
36204: GO 35875
36206: POP
36207: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36208: LD_VAR 0 9
36212: PPUSH
36213: LD_VAR 0 3
36217: PPUSH
36218: LD_VAR 0 4
36222: PPUSH
36223: LD_INT 20
36225: PPUSH
36226: CALL 28239 0 4
36230: PUSH
36231: LD_INT 4
36233: ARRAY
36234: IFFALSE 36238
// exit ;
36236: GO 36287
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36238: LD_VAR 0 2
36242: PUSH
36243: LD_INT 29
36245: PUSH
36246: LD_INT 30
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: IN
36253: PUSH
36254: LD_VAR 0 3
36258: PPUSH
36259: LD_VAR 0 4
36263: PPUSH
36264: LD_VAR 0 9
36268: PPUSH
36269: CALL_OW 440
36273: NOT
36274: AND
36275: IFFALSE 36279
// exit ;
36277: GO 36287
// result := true ;
36279: LD_ADDR_VAR 0 6
36283: PUSH
36284: LD_INT 1
36286: ST_TO_ADDR
// end ;
36287: LD_VAR 0 6
36291: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
// result = [ ] ;
36352: LD_ADDR_VAR 0 7
36356: PUSH
36357: EMPTY
36358: ST_TO_ADDR
// temp_list = [ ] ;
36359: LD_ADDR_VAR 0 9
36363: PUSH
36364: EMPTY
36365: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36366: LD_VAR 0 4
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: IN
36397: NOT
36398: PUSH
36399: LD_VAR 0 1
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: IN
36414: PUSH
36415: LD_VAR 0 5
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: IN
36434: NOT
36435: AND
36436: OR
36437: IFFALSE 36441
// exit ;
36439: GO 54832
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36441: LD_VAR 0 1
36445: PUSH
36446: LD_INT 6
36448: PUSH
36449: LD_INT 7
36451: PUSH
36452: LD_INT 8
36454: PUSH
36455: LD_INT 13
36457: PUSH
36458: LD_INT 12
36460: PUSH
36461: LD_INT 15
36463: PUSH
36464: LD_INT 11
36466: PUSH
36467: LD_INT 14
36469: PUSH
36470: LD_INT 10
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: IN
36484: IFFALSE 36494
// btype = b_lab ;
36486: LD_ADDR_VAR 0 1
36490: PUSH
36491: LD_INT 6
36493: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36494: LD_VAR 0 6
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: IN
36513: NOT
36514: PUSH
36515: LD_VAR 0 1
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: LD_INT 6
36534: PUSH
36535: LD_INT 36
36537: PUSH
36538: LD_INT 4
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: LD_INT 31
36546: PUSH
36547: LD_INT 32
36549: PUSH
36550: LD_INT 33
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: IN
36566: NOT
36567: PUSH
36568: LD_VAR 0 6
36572: PUSH
36573: LD_INT 1
36575: EQUAL
36576: AND
36577: OR
36578: PUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: IN
36594: NOT
36595: PUSH
36596: LD_VAR 0 6
36600: PUSH
36601: LD_INT 2
36603: EQUAL
36604: AND
36605: OR
36606: IFFALSE 36616
// mode = 0 ;
36608: LD_ADDR_VAR 0 6
36612: PUSH
36613: LD_INT 0
36615: ST_TO_ADDR
// case mode of 0 :
36616: LD_VAR 0 6
36620: PUSH
36621: LD_INT 0
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 48082
36629: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36630: LD_ADDR_VAR 0 11
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 3
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36823: LD_ADDR_VAR 0 12
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37019: LD_ADDR_VAR 0 13
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: LD_INT 3
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37218: LD_ADDR_VAR 0 14
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 3
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 3
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37414: LD_ADDR_VAR 0 15
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37607: LD_ADDR_VAR 0 16
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37800: LD_ADDR_VAR 0 17
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: LD_INT 2
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38030: LD_ADDR_VAR 0 18
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38260: LD_ADDR_VAR 0 19
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38490: LD_ADDR_VAR 0 20
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38720: LD_ADDR_VAR 0 21
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38950: LD_ADDR_VAR 0 22
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39180: LD_ADDR_VAR 0 23
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: NEG
39392: PUSH
39393: LD_INT 3
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 3
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39460: LD_ADDR_VAR 0 24
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39736: LD_ADDR_VAR 0 25
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40010: LD_ADDR_VAR 0 26
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40286: LD_ADDR_VAR 0 27
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 3
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40566: LD_ADDR_VAR 0 28
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 3
40813: NEG
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40848: LD_ADDR_VAR 0 29
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41127: LD_ADDR_VAR 0 30
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 3
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41405: LD_ADDR_VAR 0 31
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41683: LD_ADDR_VAR 0 32
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 3
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41961: LD_ADDR_VAR 0 33
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42240: LD_ADDR_VAR 0 34
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42520: LD_ADDR_VAR 0 35
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42632: LD_ADDR_VAR 0 36
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42744: LD_ADDR_VAR 0 37
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42856: LD_ADDR_VAR 0 38
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42968: LD_ADDR_VAR 0 39
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43080: LD_ADDR_VAR 0 40
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43192: LD_ADDR_VAR 0 41
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 3
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: NEG
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43542: LD_ADDR_VAR 0 42
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 3
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 3
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 3
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 3
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43892: LD_ADDR_VAR 0 43
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 3
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 3
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 3
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44240: LD_ADDR_VAR 0 44
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 3
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 3
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44590: LD_ADDR_VAR 0 45
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 3
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 3
44899: NEG
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44940: LD_ADDR_VAR 0 46
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45288: LD_ADDR_VAR 0 47
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45439: LD_ADDR_VAR 0 48
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45586: LD_ADDR_VAR 0 49
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45730: LD_ADDR_VAR 0 50
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45874: LD_ADDR_VAR 0 51
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46021: LD_ADDR_VAR 0 52
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46172: LD_ADDR_VAR 0 53
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46402: LD_ADDR_VAR 0 54
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46632: LD_ADDR_VAR 0 55
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46862: LD_ADDR_VAR 0 56
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47092: LD_ADDR_VAR 0 57
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47322: LD_ADDR_VAR 0 58
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47552: LD_ADDR_VAR 0 59
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47640: LD_ADDR_VAR 0 60
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47728: LD_ADDR_VAR 0 61
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47816: LD_ADDR_VAR 0 62
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47904: LD_ADDR_VAR 0 63
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47992: LD_ADDR_VAR 0 64
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// end ; 1 :
48080: GO 53977
48082: LD_INT 1
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 50713
48090: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48091: LD_ADDR_VAR 0 11
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48135: LD_ADDR_VAR 0 12
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48176: LD_ADDR_VAR 0 13
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48216: LD_ADDR_VAR 0 14
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48257: LD_ADDR_VAR 0 15
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48301: LD_ADDR_VAR 0 16
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48347: LD_ADDR_VAR 0 17
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48391: LD_ADDR_VAR 0 18
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48432: LD_ADDR_VAR 0 19
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48472: LD_ADDR_VAR 0 20
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48513: LD_ADDR_VAR 0 21
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48557: LD_ADDR_VAR 0 22
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48603: LD_ADDR_VAR 0 23
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 3
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 4
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48647: LD_ADDR_VAR 0 24
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 4
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48688: LD_ADDR_VAR 0 25
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 4
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 4
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48728: LD_ADDR_VAR 0 26
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48769: LD_ADDR_VAR 0 27
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48813: LD_ADDR_VAR 0 28
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 4
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 4
48844: NEG
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48859: LD_ADDR_VAR 0 29
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 3
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 4
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 4
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 5
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 5
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 4
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 6
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 6
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 5
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49014: LD_ADDR_VAR 0 30
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 4
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 4
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 4
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 5
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 5
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 5
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 6
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 6
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49157: LD_ADDR_VAR 0 31
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 3
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 4
49204: PUSH
49205: LD_INT 4
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: LD_INT 4
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 4
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: PUSH
49235: LD_INT 5
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 4
49244: PUSH
49245: LD_INT 5
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 6
49254: PUSH
49255: LD_INT 5
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 6
49264: PUSH
49265: LD_INT 6
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 5
49274: PUSH
49275: LD_INT 6
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49296: LD_ADDR_VAR 0 32
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 4
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 4
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 5
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 5
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 4
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 6
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 6
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 5
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49439: LD_ADDR_VAR 0 33
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 4
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 5
49525: NEG
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 5
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 5
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 6
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 6
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49594: LD_ADDR_VAR 0 34
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: LD_INT 4
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 4
49649: NEG
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 4
49661: NEG
49662: PUSH
49663: LD_INT 4
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 4
49673: NEG
49674: PUSH
49675: LD_INT 5
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 5
49685: NEG
49686: PUSH
49687: LD_INT 4
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 5
49697: NEG
49698: PUSH
49699: LD_INT 5
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 5
49709: NEG
49710: PUSH
49711: LD_INT 6
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 6
49721: NEG
49722: PUSH
49723: LD_INT 5
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 6
49733: NEG
49734: PUSH
49735: LD_INT 6
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49757: LD_ADDR_VAR 0 41
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49801: LD_ADDR_VAR 0 42
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49842: LD_ADDR_VAR 0 43
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49882: LD_ADDR_VAR 0 44
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49923: LD_ADDR_VAR 0 45
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49967: LD_ADDR_VAR 0 46
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50013: LD_ADDR_VAR 0 47
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50046: LD_ADDR_VAR 0 48
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50077: LD_ADDR_VAR 0 49
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50106: LD_ADDR_VAR 0 50
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50135: LD_ADDR_VAR 0 51
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50166: LD_ADDR_VAR 0 52
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50199: LD_ADDR_VAR 0 53
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50243: LD_ADDR_VAR 0 54
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50284: LD_ADDR_VAR 0 55
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50324: LD_ADDR_VAR 0 56
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50365: LD_ADDR_VAR 0 57
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 3
50394: NEG
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50409: LD_ADDR_VAR 0 58
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: LD_INT 3
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50455: LD_ADDR_VAR 0 59
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50499: LD_ADDR_VAR 0 60
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50540: LD_ADDR_VAR 0 61
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50580: LD_ADDR_VAR 0 62
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50621: LD_ADDR_VAR 0 63
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50665: LD_ADDR_VAR 0 64
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// end ; 2 :
50711: GO 53977
50713: LD_INT 2
50715: DOUBLE
50716: EQUAL
50717: IFTRUE 50721
50719: GO 53976
50721: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50722: LD_ADDR_VAR 0 29
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 4
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 5
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 5
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 4
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 5
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 4
50852: PUSH
50853: LD_INT 4
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: LD_INT 4
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 4
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 4
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 4
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 4
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 5
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 5
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 4
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 5
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 4
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 4
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 4
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: LD_INT 4
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: LD_INT 5
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 4
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: NEG
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 5
51167: NEG
51168: PUSH
51169: LD_INT 4
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 5
51179: NEG
51180: PUSH
51181: LD_INT 5
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 5
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 5
51203: NEG
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51260: LD_ADDR_VAR 0 30
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 4
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 5
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: PUSH
51298: LD_INT 5
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 4
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 4
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 4
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 4
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 3
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 4
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 5
51506: NEG
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 5
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 5
51529: NEG
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 4
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 4
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 4
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: LD_INT 4
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 4
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 5
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 4
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 5
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 5
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51807: LD_ADDR_VAR 0 31
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 4
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 4
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 5
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 5
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 4
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 4
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 4
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: LD_INT 4
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: NEG
52022: PUSH
52023: LD_INT 5
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: LD_INT 4
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 4
52057: NEG
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 5
52069: NEG
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: LD_INT 5
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: LD_INT 5
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: NEG
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 4
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 3
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 4
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 4
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 4
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 5
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 5
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 4
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 5
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52357: LD_ADDR_VAR 0 32
52361: PUSH
52362: LD_INT 4
52364: NEG
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 4
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 5
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 5
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 5
52443: NEG
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: LD_INT 4
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: LD_INT 4
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 4
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 5
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 4
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 4
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 5
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 5
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 4
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 4
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: LD_INT 4
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: PUSH
52800: LD_INT 5
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 4
52809: PUSH
52810: LD_INT 5
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 3
52819: PUSH
52820: LD_INT 4
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 5
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: LD_INT 5
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52904: LD_ADDR_VAR 0 33
52908: PUSH
52909: LD_INT 4
52911: NEG
52912: PUSH
52913: LD_INT 4
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 4
52923: NEG
52924: PUSH
52925: LD_INT 5
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: NEG
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 5
52971: NEG
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: LD_INT 5
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 5
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 4
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 4
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 4
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 4
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 4
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 5
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 5
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 4
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 5
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 4
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 4
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 4
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 5
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 5
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 4
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 5
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53442: LD_ADDR_VAR 0 34
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 4
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 4
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 4
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 5
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 5
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 4
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 4
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 4
53644: PUSH
53645: LD_INT 4
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 5
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: LD_INT 5
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 4
53684: PUSH
53685: LD_INT 5
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 4
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 5
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: LD_INT 5
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 4
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 4
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 4
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 4
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 4
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 5
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 5
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 5
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
// end ; end ;
53974: GO 53977
53976: POP
// case btype of b_depot , b_warehouse :
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 0
53984: DOUBLE
53985: EQUAL
53986: IFTRUE 53996
53988: LD_INT 1
53990: DOUBLE
53991: EQUAL
53992: IFTRUE 53996
53994: GO 54197
53996: POP
// case nation of nation_american :
53997: LD_VAR 0 5
54001: PUSH
54002: LD_INT 1
54004: DOUBLE
54005: EQUAL
54006: IFTRUE 54010
54008: GO 54066
54010: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54011: LD_ADDR_VAR 0 9
54015: PUSH
54016: LD_VAR 0 11
54020: PUSH
54021: LD_VAR 0 12
54025: PUSH
54026: LD_VAR 0 13
54030: PUSH
54031: LD_VAR 0 14
54035: PUSH
54036: LD_VAR 0 15
54040: PUSH
54041: LD_VAR 0 16
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: PUSH
54054: LD_VAR 0 4
54058: PUSH
54059: LD_INT 1
54061: PLUS
54062: ARRAY
54063: ST_TO_ADDR
54064: GO 54195
54066: LD_INT 2
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54074
54072: GO 54130
54074: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54075: LD_ADDR_VAR 0 9
54079: PUSH
54080: LD_VAR 0 17
54084: PUSH
54085: LD_VAR 0 18
54089: PUSH
54090: LD_VAR 0 19
54094: PUSH
54095: LD_VAR 0 20
54099: PUSH
54100: LD_VAR 0 21
54104: PUSH
54105: LD_VAR 0 22
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: PUSH
54118: LD_VAR 0 4
54122: PUSH
54123: LD_INT 1
54125: PLUS
54126: ARRAY
54127: ST_TO_ADDR
54128: GO 54195
54130: LD_INT 3
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54194
54138: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54139: LD_ADDR_VAR 0 9
54143: PUSH
54144: LD_VAR 0 23
54148: PUSH
54149: LD_VAR 0 24
54153: PUSH
54154: LD_VAR 0 25
54158: PUSH
54159: LD_VAR 0 26
54163: PUSH
54164: LD_VAR 0 27
54168: PUSH
54169: LD_VAR 0 28
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: PUSH
54182: LD_VAR 0 4
54186: PUSH
54187: LD_INT 1
54189: PLUS
54190: ARRAY
54191: ST_TO_ADDR
54192: GO 54195
54194: POP
54195: GO 54750
54197: LD_INT 2
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54211
54203: LD_INT 3
54205: DOUBLE
54206: EQUAL
54207: IFTRUE 54211
54209: GO 54267
54211: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54212: LD_ADDR_VAR 0 9
54216: PUSH
54217: LD_VAR 0 29
54221: PUSH
54222: LD_VAR 0 30
54226: PUSH
54227: LD_VAR 0 31
54231: PUSH
54232: LD_VAR 0 32
54236: PUSH
54237: LD_VAR 0 33
54241: PUSH
54242: LD_VAR 0 34
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: PUSH
54255: LD_VAR 0 4
54259: PUSH
54260: LD_INT 1
54262: PLUS
54263: ARRAY
54264: ST_TO_ADDR
54265: GO 54750
54267: LD_INT 16
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54329
54273: LD_INT 17
54275: DOUBLE
54276: EQUAL
54277: IFTRUE 54329
54279: LD_INT 18
54281: DOUBLE
54282: EQUAL
54283: IFTRUE 54329
54285: LD_INT 19
54287: DOUBLE
54288: EQUAL
54289: IFTRUE 54329
54291: LD_INT 22
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54329
54297: LD_INT 20
54299: DOUBLE
54300: EQUAL
54301: IFTRUE 54329
54303: LD_INT 21
54305: DOUBLE
54306: EQUAL
54307: IFTRUE 54329
54309: LD_INT 23
54311: DOUBLE
54312: EQUAL
54313: IFTRUE 54329
54315: LD_INT 24
54317: DOUBLE
54318: EQUAL
54319: IFTRUE 54329
54321: LD_INT 25
54323: DOUBLE
54324: EQUAL
54325: IFTRUE 54329
54327: GO 54385
54329: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54330: LD_ADDR_VAR 0 9
54334: PUSH
54335: LD_VAR 0 35
54339: PUSH
54340: LD_VAR 0 36
54344: PUSH
54345: LD_VAR 0 37
54349: PUSH
54350: LD_VAR 0 38
54354: PUSH
54355: LD_VAR 0 39
54359: PUSH
54360: LD_VAR 0 40
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: PUSH
54373: LD_VAR 0 4
54377: PUSH
54378: LD_INT 1
54380: PLUS
54381: ARRAY
54382: ST_TO_ADDR
54383: GO 54750
54385: LD_INT 6
54387: DOUBLE
54388: EQUAL
54389: IFTRUE 54441
54391: LD_INT 7
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54441
54397: LD_INT 8
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54441
54403: LD_INT 13
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54441
54409: LD_INT 12
54411: DOUBLE
54412: EQUAL
54413: IFTRUE 54441
54415: LD_INT 15
54417: DOUBLE
54418: EQUAL
54419: IFTRUE 54441
54421: LD_INT 11
54423: DOUBLE
54424: EQUAL
54425: IFTRUE 54441
54427: LD_INT 14
54429: DOUBLE
54430: EQUAL
54431: IFTRUE 54441
54433: LD_INT 10
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54441
54439: GO 54497
54441: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54442: LD_ADDR_VAR 0 9
54446: PUSH
54447: LD_VAR 0 41
54451: PUSH
54452: LD_VAR 0 42
54456: PUSH
54457: LD_VAR 0 43
54461: PUSH
54462: LD_VAR 0 44
54466: PUSH
54467: LD_VAR 0 45
54471: PUSH
54472: LD_VAR 0 46
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: PUSH
54485: LD_VAR 0 4
54489: PUSH
54490: LD_INT 1
54492: PLUS
54493: ARRAY
54494: ST_TO_ADDR
54495: GO 54750
54497: LD_INT 36
54499: DOUBLE
54500: EQUAL
54501: IFTRUE 54505
54503: GO 54561
54505: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54506: LD_ADDR_VAR 0 9
54510: PUSH
54511: LD_VAR 0 47
54515: PUSH
54516: LD_VAR 0 48
54520: PUSH
54521: LD_VAR 0 49
54525: PUSH
54526: LD_VAR 0 50
54530: PUSH
54531: LD_VAR 0 51
54535: PUSH
54536: LD_VAR 0 52
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: PUSH
54549: LD_VAR 0 4
54553: PUSH
54554: LD_INT 1
54556: PLUS
54557: ARRAY
54558: ST_TO_ADDR
54559: GO 54750
54561: LD_INT 4
54563: DOUBLE
54564: EQUAL
54565: IFTRUE 54587
54567: LD_INT 5
54569: DOUBLE
54570: EQUAL
54571: IFTRUE 54587
54573: LD_INT 34
54575: DOUBLE
54576: EQUAL
54577: IFTRUE 54587
54579: LD_INT 37
54581: DOUBLE
54582: EQUAL
54583: IFTRUE 54587
54585: GO 54643
54587: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54588: LD_ADDR_VAR 0 9
54592: PUSH
54593: LD_VAR 0 53
54597: PUSH
54598: LD_VAR 0 54
54602: PUSH
54603: LD_VAR 0 55
54607: PUSH
54608: LD_VAR 0 56
54612: PUSH
54613: LD_VAR 0 57
54617: PUSH
54618: LD_VAR 0 58
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: PUSH
54631: LD_VAR 0 4
54635: PUSH
54636: LD_INT 1
54638: PLUS
54639: ARRAY
54640: ST_TO_ADDR
54641: GO 54750
54643: LD_INT 31
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54693
54649: LD_INT 32
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54693
54655: LD_INT 33
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54693
54661: LD_INT 27
54663: DOUBLE
54664: EQUAL
54665: IFTRUE 54693
54667: LD_INT 26
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54693
54673: LD_INT 28
54675: DOUBLE
54676: EQUAL
54677: IFTRUE 54693
54679: LD_INT 29
54681: DOUBLE
54682: EQUAL
54683: IFTRUE 54693
54685: LD_INT 30
54687: DOUBLE
54688: EQUAL
54689: IFTRUE 54693
54691: GO 54749
54693: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54694: LD_ADDR_VAR 0 9
54698: PUSH
54699: LD_VAR 0 59
54703: PUSH
54704: LD_VAR 0 60
54708: PUSH
54709: LD_VAR 0 61
54713: PUSH
54714: LD_VAR 0 62
54718: PUSH
54719: LD_VAR 0 63
54723: PUSH
54724: LD_VAR 0 64
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: PUSH
54737: LD_VAR 0 4
54741: PUSH
54742: LD_INT 1
54744: PLUS
54745: ARRAY
54746: ST_TO_ADDR
54747: GO 54750
54749: POP
// temp_list2 = [ ] ;
54750: LD_ADDR_VAR 0 10
54754: PUSH
54755: EMPTY
54756: ST_TO_ADDR
// for i in temp_list do
54757: LD_ADDR_VAR 0 8
54761: PUSH
54762: LD_VAR 0 9
54766: PUSH
54767: FOR_IN
54768: IFFALSE 54820
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54770: LD_ADDR_VAR 0 10
54774: PUSH
54775: LD_VAR 0 10
54779: PUSH
54780: LD_VAR 0 8
54784: PUSH
54785: LD_INT 1
54787: ARRAY
54788: PUSH
54789: LD_VAR 0 2
54793: PLUS
54794: PUSH
54795: LD_VAR 0 8
54799: PUSH
54800: LD_INT 2
54802: ARRAY
54803: PUSH
54804: LD_VAR 0 3
54808: PLUS
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: ADD
54817: ST_TO_ADDR
54818: GO 54767
54820: POP
54821: POP
// result = temp_list2 ;
54822: LD_ADDR_VAR 0 7
54826: PUSH
54827: LD_VAR 0 10
54831: ST_TO_ADDR
// end ;
54832: LD_VAR 0 7
54836: RET
// export function EnemyInRange ( unit , dist ) ; begin
54837: LD_INT 0
54839: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_VAR 0 1
54849: PPUSH
54850: CALL_OW 255
54854: PPUSH
54855: LD_VAR 0 1
54859: PPUSH
54860: CALL_OW 250
54864: PPUSH
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 251
54874: PPUSH
54875: LD_VAR 0 2
54879: PPUSH
54880: CALL 28239 0 4
54884: PUSH
54885: LD_INT 4
54887: ARRAY
54888: ST_TO_ADDR
// end ;
54889: LD_VAR 0 3
54893: RET
// export function PlayerSeeMe ( unit ) ; begin
54894: LD_INT 0
54896: PPUSH
// result := See ( your_side , unit ) ;
54897: LD_ADDR_VAR 0 2
54901: PUSH
54902: LD_OWVAR 2
54906: PPUSH
54907: LD_VAR 0 1
54911: PPUSH
54912: CALL_OW 292
54916: ST_TO_ADDR
// end ;
54917: LD_VAR 0 2
54921: RET
// export function ReverseDir ( unit ) ; begin
54922: LD_INT 0
54924: PPUSH
// if not unit then
54925: LD_VAR 0 1
54929: NOT
54930: IFFALSE 54934
// exit ;
54932: GO 54957
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54934: LD_ADDR_VAR 0 2
54938: PUSH
54939: LD_VAR 0 1
54943: PPUSH
54944: CALL_OW 254
54948: PUSH
54949: LD_INT 3
54951: PLUS
54952: PUSH
54953: LD_INT 6
54955: MOD
54956: ST_TO_ADDR
// end ;
54957: LD_VAR 0 2
54961: RET
// export function ReverseArray ( array ) ; var i ; begin
54962: LD_INT 0
54964: PPUSH
54965: PPUSH
// if not array then
54966: LD_VAR 0 1
54970: NOT
54971: IFFALSE 54975
// exit ;
54973: GO 55030
// result := [ ] ;
54975: LD_ADDR_VAR 0 2
54979: PUSH
54980: EMPTY
54981: ST_TO_ADDR
// for i := array downto 1 do
54982: LD_ADDR_VAR 0 3
54986: PUSH
54987: DOUBLE
54988: LD_VAR 0 1
54992: INC
54993: ST_TO_ADDR
54994: LD_INT 1
54996: PUSH
54997: FOR_DOWNTO
54998: IFFALSE 55028
// result := Join ( result , array [ i ] ) ;
55000: LD_ADDR_VAR 0 2
55004: PUSH
55005: LD_VAR 0 2
55009: PPUSH
55010: LD_VAR 0 1
55014: PUSH
55015: LD_VAR 0 3
55019: ARRAY
55020: PPUSH
55021: CALL 59674 0 2
55025: ST_TO_ADDR
55026: GO 54997
55028: POP
55029: POP
// end ;
55030: LD_VAR 0 2
55034: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55035: LD_INT 0
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
// if not unit or not hexes then
55043: LD_VAR 0 1
55047: NOT
55048: PUSH
55049: LD_VAR 0 2
55053: NOT
55054: OR
55055: IFFALSE 55059
// exit ;
55057: GO 55182
// dist := 9999 ;
55059: LD_ADDR_VAR 0 5
55063: PUSH
55064: LD_INT 9999
55066: ST_TO_ADDR
// for i = 1 to hexes do
55067: LD_ADDR_VAR 0 4
55071: PUSH
55072: DOUBLE
55073: LD_INT 1
55075: DEC
55076: ST_TO_ADDR
55077: LD_VAR 0 2
55081: PUSH
55082: FOR_TO
55083: IFFALSE 55170
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55085: LD_ADDR_VAR 0 6
55089: PUSH
55090: LD_VAR 0 1
55094: PPUSH
55095: LD_VAR 0 2
55099: PUSH
55100: LD_VAR 0 4
55104: ARRAY
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: LD_VAR 0 2
55114: PUSH
55115: LD_VAR 0 4
55119: ARRAY
55120: PUSH
55121: LD_INT 2
55123: ARRAY
55124: PPUSH
55125: CALL_OW 297
55129: ST_TO_ADDR
// if tdist < dist then
55130: LD_VAR 0 6
55134: PUSH
55135: LD_VAR 0 5
55139: LESS
55140: IFFALSE 55168
// begin hex := hexes [ i ] ;
55142: LD_ADDR_VAR 0 8
55146: PUSH
55147: LD_VAR 0 2
55151: PUSH
55152: LD_VAR 0 4
55156: ARRAY
55157: ST_TO_ADDR
// dist := tdist ;
55158: LD_ADDR_VAR 0 5
55162: PUSH
55163: LD_VAR 0 6
55167: ST_TO_ADDR
// end ; end ;
55168: GO 55082
55170: POP
55171: POP
// result := hex ;
55172: LD_ADDR_VAR 0 3
55176: PUSH
55177: LD_VAR 0 8
55181: ST_TO_ADDR
// end ;
55182: LD_VAR 0 3
55186: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55187: LD_INT 0
55189: PPUSH
55190: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55191: LD_VAR 0 1
55195: NOT
55196: PUSH
55197: LD_VAR 0 1
55201: PUSH
55202: LD_INT 21
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 23
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: IN
55231: NOT
55232: OR
55233: IFFALSE 55237
// exit ;
55235: GO 55284
// for i = 1 to 3 do
55237: LD_ADDR_VAR 0 3
55241: PUSH
55242: DOUBLE
55243: LD_INT 1
55245: DEC
55246: ST_TO_ADDR
55247: LD_INT 3
55249: PUSH
55250: FOR_TO
55251: IFFALSE 55282
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55253: LD_VAR 0 1
55257: PPUSH
55258: CALL_OW 250
55262: PPUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL_OW 251
55272: PPUSH
55273: LD_INT 1
55275: PPUSH
55276: CALL_OW 453
55280: GO 55250
55282: POP
55283: POP
// end ;
55284: LD_VAR 0 2
55288: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55289: LD_INT 0
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55297: LD_VAR 0 1
55301: NOT
55302: PUSH
55303: LD_VAR 0 2
55307: NOT
55308: OR
55309: PUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 314
55319: OR
55320: IFFALSE 55324
// exit ;
55322: GO 55791
// if GetLives ( i ) < 250 then
55324: LD_VAR 0 4
55328: PPUSH
55329: CALL_OW 256
55333: PUSH
55334: LD_INT 250
55336: LESS
55337: IFFALSE 55350
// begin ComAutodestruct ( i ) ;
55339: LD_VAR 0 4
55343: PPUSH
55344: CALL 55187 0 1
// exit ;
55348: GO 55791
// end ; x := GetX ( enemy_unit ) ;
55350: LD_ADDR_VAR 0 7
55354: PUSH
55355: LD_VAR 0 2
55359: PPUSH
55360: CALL_OW 250
55364: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55365: LD_ADDR_VAR 0 8
55369: PUSH
55370: LD_VAR 0 2
55374: PPUSH
55375: CALL_OW 251
55379: ST_TO_ADDR
// if not x or not y then
55380: LD_VAR 0 7
55384: NOT
55385: PUSH
55386: LD_VAR 0 8
55390: NOT
55391: OR
55392: IFFALSE 55396
// exit ;
55394: GO 55791
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55396: LD_ADDR_VAR 0 6
55400: PUSH
55401: LD_VAR 0 7
55405: PPUSH
55406: LD_INT 0
55408: PPUSH
55409: LD_INT 4
55411: PPUSH
55412: CALL_OW 272
55416: PUSH
55417: LD_VAR 0 8
55421: PPUSH
55422: LD_INT 0
55424: PPUSH
55425: LD_INT 4
55427: PPUSH
55428: CALL_OW 273
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_VAR 0 7
55441: PPUSH
55442: LD_INT 1
55444: PPUSH
55445: LD_INT 4
55447: PPUSH
55448: CALL_OW 272
55452: PUSH
55453: LD_VAR 0 8
55457: PPUSH
55458: LD_INT 1
55460: PPUSH
55461: LD_INT 4
55463: PPUSH
55464: CALL_OW 273
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_VAR 0 7
55477: PPUSH
55478: LD_INT 2
55480: PPUSH
55481: LD_INT 4
55483: PPUSH
55484: CALL_OW 272
55488: PUSH
55489: LD_VAR 0 8
55493: PPUSH
55494: LD_INT 2
55496: PPUSH
55497: LD_INT 4
55499: PPUSH
55500: CALL_OW 273
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_VAR 0 7
55513: PPUSH
55514: LD_INT 3
55516: PPUSH
55517: LD_INT 4
55519: PPUSH
55520: CALL_OW 272
55524: PUSH
55525: LD_VAR 0 8
55529: PPUSH
55530: LD_INT 3
55532: PPUSH
55533: LD_INT 4
55535: PPUSH
55536: CALL_OW 273
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_VAR 0 7
55549: PPUSH
55550: LD_INT 4
55552: PPUSH
55553: LD_INT 4
55555: PPUSH
55556: CALL_OW 272
55560: PUSH
55561: LD_VAR 0 8
55565: PPUSH
55566: LD_INT 4
55568: PPUSH
55569: LD_INT 4
55571: PPUSH
55572: CALL_OW 273
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_VAR 0 7
55585: PPUSH
55586: LD_INT 5
55588: PPUSH
55589: LD_INT 4
55591: PPUSH
55592: CALL_OW 272
55596: PUSH
55597: LD_VAR 0 8
55601: PPUSH
55602: LD_INT 5
55604: PPUSH
55605: LD_INT 4
55607: PPUSH
55608: CALL_OW 273
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// for i = tmp downto 1 do
55625: LD_ADDR_VAR 0 4
55629: PUSH
55630: DOUBLE
55631: LD_VAR 0 6
55635: INC
55636: ST_TO_ADDR
55637: LD_INT 1
55639: PUSH
55640: FOR_DOWNTO
55641: IFFALSE 55742
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55643: LD_VAR 0 6
55647: PUSH
55648: LD_VAR 0 4
55652: ARRAY
55653: PUSH
55654: LD_INT 1
55656: ARRAY
55657: PPUSH
55658: LD_VAR 0 6
55662: PUSH
55663: LD_VAR 0 4
55667: ARRAY
55668: PUSH
55669: LD_INT 2
55671: ARRAY
55672: PPUSH
55673: CALL_OW 488
55677: NOT
55678: PUSH
55679: LD_VAR 0 6
55683: PUSH
55684: LD_VAR 0 4
55688: ARRAY
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PPUSH
55694: LD_VAR 0 6
55698: PUSH
55699: LD_VAR 0 4
55703: ARRAY
55704: PUSH
55705: LD_INT 2
55707: ARRAY
55708: PPUSH
55709: CALL_OW 428
55713: PUSH
55714: LD_INT 0
55716: NONEQUAL
55717: OR
55718: IFFALSE 55740
// tmp := Delete ( tmp , i ) ;
55720: LD_ADDR_VAR 0 6
55724: PUSH
55725: LD_VAR 0 6
55729: PPUSH
55730: LD_VAR 0 4
55734: PPUSH
55735: CALL_OW 3
55739: ST_TO_ADDR
55740: GO 55640
55742: POP
55743: POP
// j := GetClosestHex ( unit , tmp ) ;
55744: LD_ADDR_VAR 0 5
55748: PUSH
55749: LD_VAR 0 1
55753: PPUSH
55754: LD_VAR 0 6
55758: PPUSH
55759: CALL 55035 0 2
55763: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55764: LD_VAR 0 1
55768: PPUSH
55769: LD_VAR 0 5
55773: PUSH
55774: LD_INT 1
55776: ARRAY
55777: PPUSH
55778: LD_VAR 0 5
55782: PUSH
55783: LD_INT 2
55785: ARRAY
55786: PPUSH
55787: CALL_OW 111
// end ;
55791: LD_VAR 0 3
55795: RET
// export function PrepareApemanSoldier ( ) ; begin
55796: LD_INT 0
55798: PPUSH
// uc_nation := 0 ;
55799: LD_ADDR_OWVAR 21
55803: PUSH
55804: LD_INT 0
55806: ST_TO_ADDR
// hc_sex := sex_male ;
55807: LD_ADDR_OWVAR 27
55811: PUSH
55812: LD_INT 1
55814: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55815: LD_ADDR_OWVAR 28
55819: PUSH
55820: LD_INT 15
55822: ST_TO_ADDR
// hc_gallery :=  ;
55823: LD_ADDR_OWVAR 33
55827: PUSH
55828: LD_STRING 
55830: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55831: LD_ADDR_OWVAR 31
55835: PUSH
55836: LD_INT 0
55838: PPUSH
55839: LD_INT 3
55841: PPUSH
55842: CALL_OW 12
55846: PUSH
55847: LD_INT 0
55849: PPUSH
55850: LD_INT 3
55852: PPUSH
55853: CALL_OW 12
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// end ;
55870: LD_VAR 0 1
55874: RET
// export function PrepareApemanEngineer ( ) ; begin
55875: LD_INT 0
55877: PPUSH
// uc_nation := 0 ;
55878: LD_ADDR_OWVAR 21
55882: PUSH
55883: LD_INT 0
55885: ST_TO_ADDR
// hc_sex := sex_male ;
55886: LD_ADDR_OWVAR 27
55890: PUSH
55891: LD_INT 1
55893: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55894: LD_ADDR_OWVAR 28
55898: PUSH
55899: LD_INT 16
55901: ST_TO_ADDR
// hc_gallery :=  ;
55902: LD_ADDR_OWVAR 33
55906: PUSH
55907: LD_STRING 
55909: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55910: LD_ADDR_OWVAR 31
55914: PUSH
55915: LD_INT 0
55917: PPUSH
55918: LD_INT 3
55920: PPUSH
55921: CALL_OW 12
55925: PUSH
55926: LD_INT 0
55928: PPUSH
55929: LD_INT 3
55931: PPUSH
55932: CALL_OW 12
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// end ;
55949: LD_VAR 0 1
55953: RET
// export function PrepareApeman ( agressivity ) ; begin
55954: LD_INT 0
55956: PPUSH
// uc_side := 0 ;
55957: LD_ADDR_OWVAR 20
55961: PUSH
55962: LD_INT 0
55964: ST_TO_ADDR
// uc_nation := 0 ;
55965: LD_ADDR_OWVAR 21
55969: PUSH
55970: LD_INT 0
55972: ST_TO_ADDR
// hc_sex := sex_male ;
55973: LD_ADDR_OWVAR 27
55977: PUSH
55978: LD_INT 1
55980: ST_TO_ADDR
// hc_class := class_apeman ;
55981: LD_ADDR_OWVAR 28
55985: PUSH
55986: LD_INT 12
55988: ST_TO_ADDR
// hc_gallery :=  ;
55989: LD_ADDR_OWVAR 33
55993: PUSH
55994: LD_STRING 
55996: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55997: LD_ADDR_OWVAR 35
56001: PUSH
56002: LD_VAR 0 1
56006: NEG
56007: PPUSH
56008: LD_VAR 0 1
56012: PPUSH
56013: CALL_OW 12
56017: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56018: LD_ADDR_OWVAR 31
56022: PUSH
56023: LD_INT 0
56025: PPUSH
56026: LD_INT 3
56028: PPUSH
56029: CALL_OW 12
56033: PUSH
56034: LD_INT 0
56036: PPUSH
56037: LD_INT 3
56039: PPUSH
56040: CALL_OW 12
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: ST_TO_ADDR
// end ;
56057: LD_VAR 0 2
56061: RET
// export function PrepareTiger ( agressivity ) ; begin
56062: LD_INT 0
56064: PPUSH
// uc_side := 0 ;
56065: LD_ADDR_OWVAR 20
56069: PUSH
56070: LD_INT 0
56072: ST_TO_ADDR
// uc_nation := 0 ;
56073: LD_ADDR_OWVAR 21
56077: PUSH
56078: LD_INT 0
56080: ST_TO_ADDR
// hc_class := class_tiger ;
56081: LD_ADDR_OWVAR 28
56085: PUSH
56086: LD_INT 14
56088: ST_TO_ADDR
// hc_gallery :=  ;
56089: LD_ADDR_OWVAR 33
56093: PUSH
56094: LD_STRING 
56096: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56097: LD_ADDR_OWVAR 35
56101: PUSH
56102: LD_VAR 0 1
56106: NEG
56107: PPUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL_OW 12
56117: ST_TO_ADDR
// end ;
56118: LD_VAR 0 2
56122: RET
// export function PrepareEnchidna ( ) ; begin
56123: LD_INT 0
56125: PPUSH
// uc_side := 0 ;
56126: LD_ADDR_OWVAR 20
56130: PUSH
56131: LD_INT 0
56133: ST_TO_ADDR
// uc_nation := 0 ;
56134: LD_ADDR_OWVAR 21
56138: PUSH
56139: LD_INT 0
56141: ST_TO_ADDR
// hc_class := class_baggie ;
56142: LD_ADDR_OWVAR 28
56146: PUSH
56147: LD_INT 13
56149: ST_TO_ADDR
// hc_gallery :=  ;
56150: LD_ADDR_OWVAR 33
56154: PUSH
56155: LD_STRING 
56157: ST_TO_ADDR
// end ;
56158: LD_VAR 0 1
56162: RET
// export function PrepareFrog ( ) ; begin
56163: LD_INT 0
56165: PPUSH
// uc_side := 0 ;
56166: LD_ADDR_OWVAR 20
56170: PUSH
56171: LD_INT 0
56173: ST_TO_ADDR
// uc_nation := 0 ;
56174: LD_ADDR_OWVAR 21
56178: PUSH
56179: LD_INT 0
56181: ST_TO_ADDR
// hc_class := class_frog ;
56182: LD_ADDR_OWVAR 28
56186: PUSH
56187: LD_INT 19
56189: ST_TO_ADDR
// hc_gallery :=  ;
56190: LD_ADDR_OWVAR 33
56194: PUSH
56195: LD_STRING 
56197: ST_TO_ADDR
// end ;
56198: LD_VAR 0 1
56202: RET
// export function PrepareFish ( ) ; begin
56203: LD_INT 0
56205: PPUSH
// uc_side := 0 ;
56206: LD_ADDR_OWVAR 20
56210: PUSH
56211: LD_INT 0
56213: ST_TO_ADDR
// uc_nation := 0 ;
56214: LD_ADDR_OWVAR 21
56218: PUSH
56219: LD_INT 0
56221: ST_TO_ADDR
// hc_class := class_fish ;
56222: LD_ADDR_OWVAR 28
56226: PUSH
56227: LD_INT 20
56229: ST_TO_ADDR
// hc_gallery :=  ;
56230: LD_ADDR_OWVAR 33
56234: PUSH
56235: LD_STRING 
56237: ST_TO_ADDR
// end ;
56238: LD_VAR 0 1
56242: RET
// export function PrepareBird ( ) ; begin
56243: LD_INT 0
56245: PPUSH
// uc_side := 0 ;
56246: LD_ADDR_OWVAR 20
56250: PUSH
56251: LD_INT 0
56253: ST_TO_ADDR
// uc_nation := 0 ;
56254: LD_ADDR_OWVAR 21
56258: PUSH
56259: LD_INT 0
56261: ST_TO_ADDR
// hc_class := class_phororhacos ;
56262: LD_ADDR_OWVAR 28
56266: PUSH
56267: LD_INT 18
56269: ST_TO_ADDR
// hc_gallery :=  ;
56270: LD_ADDR_OWVAR 33
56274: PUSH
56275: LD_STRING 
56277: ST_TO_ADDR
// end ;
56278: LD_VAR 0 1
56282: RET
// export function PrepareHorse ( ) ; begin
56283: LD_INT 0
56285: PPUSH
// uc_side := 0 ;
56286: LD_ADDR_OWVAR 20
56290: PUSH
56291: LD_INT 0
56293: ST_TO_ADDR
// uc_nation := 0 ;
56294: LD_ADDR_OWVAR 21
56298: PUSH
56299: LD_INT 0
56301: ST_TO_ADDR
// hc_class := class_horse ;
56302: LD_ADDR_OWVAR 28
56306: PUSH
56307: LD_INT 21
56309: ST_TO_ADDR
// hc_gallery :=  ;
56310: LD_ADDR_OWVAR 33
56314: PUSH
56315: LD_STRING 
56317: ST_TO_ADDR
// end ;
56318: LD_VAR 0 1
56322: RET
// export function PrepareMastodont ( ) ; begin
56323: LD_INT 0
56325: PPUSH
// uc_side := 0 ;
56326: LD_ADDR_OWVAR 20
56330: PUSH
56331: LD_INT 0
56333: ST_TO_ADDR
// uc_nation := 0 ;
56334: LD_ADDR_OWVAR 21
56338: PUSH
56339: LD_INT 0
56341: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56342: LD_ADDR_OWVAR 37
56346: PUSH
56347: LD_INT 31
56349: ST_TO_ADDR
// vc_control := control_rider ;
56350: LD_ADDR_OWVAR 38
56354: PUSH
56355: LD_INT 4
56357: ST_TO_ADDR
// end ;
56358: LD_VAR 0 1
56362: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56363: LD_INT 0
56365: PPUSH
56366: PPUSH
56367: PPUSH
// uc_side = 0 ;
56368: LD_ADDR_OWVAR 20
56372: PUSH
56373: LD_INT 0
56375: ST_TO_ADDR
// uc_nation = 0 ;
56376: LD_ADDR_OWVAR 21
56380: PUSH
56381: LD_INT 0
56383: ST_TO_ADDR
// InitHc_All ( ) ;
56384: CALL_OW 584
// InitVc ;
56388: CALL_OW 20
// if mastodonts then
56392: LD_VAR 0 6
56396: IFFALSE 56463
// for i = 1 to mastodonts do
56398: LD_ADDR_VAR 0 11
56402: PUSH
56403: DOUBLE
56404: LD_INT 1
56406: DEC
56407: ST_TO_ADDR
56408: LD_VAR 0 6
56412: PUSH
56413: FOR_TO
56414: IFFALSE 56461
// begin vc_chassis := 31 ;
56416: LD_ADDR_OWVAR 37
56420: PUSH
56421: LD_INT 31
56423: ST_TO_ADDR
// vc_control := control_rider ;
56424: LD_ADDR_OWVAR 38
56428: PUSH
56429: LD_INT 4
56431: ST_TO_ADDR
// animal := CreateVehicle ;
56432: LD_ADDR_VAR 0 12
56436: PUSH
56437: CALL_OW 45
56441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56442: LD_VAR 0 12
56446: PPUSH
56447: LD_VAR 0 8
56451: PPUSH
56452: LD_INT 0
56454: PPUSH
56455: CALL 58591 0 3
// end ;
56459: GO 56413
56461: POP
56462: POP
// if horses then
56463: LD_VAR 0 5
56467: IFFALSE 56534
// for i = 1 to horses do
56469: LD_ADDR_VAR 0 11
56473: PUSH
56474: DOUBLE
56475: LD_INT 1
56477: DEC
56478: ST_TO_ADDR
56479: LD_VAR 0 5
56483: PUSH
56484: FOR_TO
56485: IFFALSE 56532
// begin hc_class := 21 ;
56487: LD_ADDR_OWVAR 28
56491: PUSH
56492: LD_INT 21
56494: ST_TO_ADDR
// hc_gallery :=  ;
56495: LD_ADDR_OWVAR 33
56499: PUSH
56500: LD_STRING 
56502: ST_TO_ADDR
// animal := CreateHuman ;
56503: LD_ADDR_VAR 0 12
56507: PUSH
56508: CALL_OW 44
56512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56513: LD_VAR 0 12
56517: PPUSH
56518: LD_VAR 0 8
56522: PPUSH
56523: LD_INT 0
56525: PPUSH
56526: CALL 58591 0 3
// end ;
56530: GO 56484
56532: POP
56533: POP
// if birds then
56534: LD_VAR 0 1
56538: IFFALSE 56605
// for i = 1 to birds do
56540: LD_ADDR_VAR 0 11
56544: PUSH
56545: DOUBLE
56546: LD_INT 1
56548: DEC
56549: ST_TO_ADDR
56550: LD_VAR 0 1
56554: PUSH
56555: FOR_TO
56556: IFFALSE 56603
// begin hc_class = 18 ;
56558: LD_ADDR_OWVAR 28
56562: PUSH
56563: LD_INT 18
56565: ST_TO_ADDR
// hc_gallery =  ;
56566: LD_ADDR_OWVAR 33
56570: PUSH
56571: LD_STRING 
56573: ST_TO_ADDR
// animal := CreateHuman ;
56574: LD_ADDR_VAR 0 12
56578: PUSH
56579: CALL_OW 44
56583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56584: LD_VAR 0 12
56588: PPUSH
56589: LD_VAR 0 8
56593: PPUSH
56594: LD_INT 0
56596: PPUSH
56597: CALL 58591 0 3
// end ;
56601: GO 56555
56603: POP
56604: POP
// if tigers then
56605: LD_VAR 0 2
56609: IFFALSE 56693
// for i = 1 to tigers do
56611: LD_ADDR_VAR 0 11
56615: PUSH
56616: DOUBLE
56617: LD_INT 1
56619: DEC
56620: ST_TO_ADDR
56621: LD_VAR 0 2
56625: PUSH
56626: FOR_TO
56627: IFFALSE 56691
// begin hc_class = class_tiger ;
56629: LD_ADDR_OWVAR 28
56633: PUSH
56634: LD_INT 14
56636: ST_TO_ADDR
// hc_gallery =  ;
56637: LD_ADDR_OWVAR 33
56641: PUSH
56642: LD_STRING 
56644: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56645: LD_ADDR_OWVAR 35
56649: PUSH
56650: LD_INT 7
56652: NEG
56653: PPUSH
56654: LD_INT 7
56656: PPUSH
56657: CALL_OW 12
56661: ST_TO_ADDR
// animal := CreateHuman ;
56662: LD_ADDR_VAR 0 12
56666: PUSH
56667: CALL_OW 44
56671: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56672: LD_VAR 0 12
56676: PPUSH
56677: LD_VAR 0 8
56681: PPUSH
56682: LD_INT 0
56684: PPUSH
56685: CALL 58591 0 3
// end ;
56689: GO 56626
56691: POP
56692: POP
// if apemans then
56693: LD_VAR 0 3
56697: IFFALSE 56820
// for i = 1 to apemans do
56699: LD_ADDR_VAR 0 11
56703: PUSH
56704: DOUBLE
56705: LD_INT 1
56707: DEC
56708: ST_TO_ADDR
56709: LD_VAR 0 3
56713: PUSH
56714: FOR_TO
56715: IFFALSE 56818
// begin hc_class = class_apeman ;
56717: LD_ADDR_OWVAR 28
56721: PUSH
56722: LD_INT 12
56724: ST_TO_ADDR
// hc_gallery =  ;
56725: LD_ADDR_OWVAR 33
56729: PUSH
56730: LD_STRING 
56732: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56733: LD_ADDR_OWVAR 35
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PPUSH
56742: LD_INT 2
56744: PPUSH
56745: CALL_OW 12
56749: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56750: LD_ADDR_OWVAR 31
56754: PUSH
56755: LD_INT 1
56757: PPUSH
56758: LD_INT 3
56760: PPUSH
56761: CALL_OW 12
56765: PUSH
56766: LD_INT 1
56768: PPUSH
56769: LD_INT 3
56771: PPUSH
56772: CALL_OW 12
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// animal := CreateHuman ;
56789: LD_ADDR_VAR 0 12
56793: PUSH
56794: CALL_OW 44
56798: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56799: LD_VAR 0 12
56803: PPUSH
56804: LD_VAR 0 8
56808: PPUSH
56809: LD_INT 0
56811: PPUSH
56812: CALL 58591 0 3
// end ;
56816: GO 56714
56818: POP
56819: POP
// if enchidnas then
56820: LD_VAR 0 4
56824: IFFALSE 56891
// for i = 1 to enchidnas do
56826: LD_ADDR_VAR 0 11
56830: PUSH
56831: DOUBLE
56832: LD_INT 1
56834: DEC
56835: ST_TO_ADDR
56836: LD_VAR 0 4
56840: PUSH
56841: FOR_TO
56842: IFFALSE 56889
// begin hc_class = 13 ;
56844: LD_ADDR_OWVAR 28
56848: PUSH
56849: LD_INT 13
56851: ST_TO_ADDR
// hc_gallery =  ;
56852: LD_ADDR_OWVAR 33
56856: PUSH
56857: LD_STRING 
56859: ST_TO_ADDR
// animal := CreateHuman ;
56860: LD_ADDR_VAR 0 12
56864: PUSH
56865: CALL_OW 44
56869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56870: LD_VAR 0 12
56874: PPUSH
56875: LD_VAR 0 8
56879: PPUSH
56880: LD_INT 0
56882: PPUSH
56883: CALL 58591 0 3
// end ;
56887: GO 56841
56889: POP
56890: POP
// if fishes then
56891: LD_VAR 0 7
56895: IFFALSE 56962
// for i = 1 to fishes do
56897: LD_ADDR_VAR 0 11
56901: PUSH
56902: DOUBLE
56903: LD_INT 1
56905: DEC
56906: ST_TO_ADDR
56907: LD_VAR 0 7
56911: PUSH
56912: FOR_TO
56913: IFFALSE 56960
// begin hc_class = 20 ;
56915: LD_ADDR_OWVAR 28
56919: PUSH
56920: LD_INT 20
56922: ST_TO_ADDR
// hc_gallery =  ;
56923: LD_ADDR_OWVAR 33
56927: PUSH
56928: LD_STRING 
56930: ST_TO_ADDR
// animal := CreateHuman ;
56931: LD_ADDR_VAR 0 12
56935: PUSH
56936: CALL_OW 44
56940: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56941: LD_VAR 0 12
56945: PPUSH
56946: LD_VAR 0 9
56950: PPUSH
56951: LD_INT 0
56953: PPUSH
56954: CALL 58591 0 3
// end ;
56958: GO 56912
56960: POP
56961: POP
// end ;
56962: LD_VAR 0 10
56966: RET
// export function WantHeal ( sci , unit ) ; begin
56967: LD_INT 0
56969: PPUSH
// if GetTaskList ( sci ) > 0 then
56970: LD_VAR 0 1
56974: PPUSH
56975: CALL_OW 437
56979: PUSH
56980: LD_INT 0
56982: GREATER
56983: IFFALSE 57053
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56985: LD_VAR 0 1
56989: PPUSH
56990: CALL_OW 437
56994: PUSH
56995: LD_INT 1
56997: ARRAY
56998: PUSH
56999: LD_INT 1
57001: ARRAY
57002: PUSH
57003: LD_STRING l
57005: EQUAL
57006: PUSH
57007: LD_VAR 0 1
57011: PPUSH
57012: CALL_OW 437
57016: PUSH
57017: LD_INT 1
57019: ARRAY
57020: PUSH
57021: LD_INT 4
57023: ARRAY
57024: PUSH
57025: LD_VAR 0 2
57029: EQUAL
57030: AND
57031: IFFALSE 57043
// result := true else
57033: LD_ADDR_VAR 0 3
57037: PUSH
57038: LD_INT 1
57040: ST_TO_ADDR
57041: GO 57051
// result := false ;
57043: LD_ADDR_VAR 0 3
57047: PUSH
57048: LD_INT 0
57050: ST_TO_ADDR
// end else
57051: GO 57061
// result := false ;
57053: LD_ADDR_VAR 0 3
57057: PUSH
57058: LD_INT 0
57060: ST_TO_ADDR
// end ;
57061: LD_VAR 0 3
57065: RET
// export function HealTarget ( sci ) ; begin
57066: LD_INT 0
57068: PPUSH
// if not sci then
57069: LD_VAR 0 1
57073: NOT
57074: IFFALSE 57078
// exit ;
57076: GO 57143
// result := 0 ;
57078: LD_ADDR_VAR 0 2
57082: PUSH
57083: LD_INT 0
57085: ST_TO_ADDR
// if GetTaskList ( sci ) then
57086: LD_VAR 0 1
57090: PPUSH
57091: CALL_OW 437
57095: IFFALSE 57143
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57097: LD_VAR 0 1
57101: PPUSH
57102: CALL_OW 437
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PUSH
57115: LD_STRING l
57117: EQUAL
57118: IFFALSE 57143
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57120: LD_ADDR_VAR 0 2
57124: PUSH
57125: LD_VAR 0 1
57129: PPUSH
57130: CALL_OW 437
57134: PUSH
57135: LD_INT 1
57137: ARRAY
57138: PUSH
57139: LD_INT 4
57141: ARRAY
57142: ST_TO_ADDR
// end ;
57143: LD_VAR 0 2
57147: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57148: LD_INT 0
57150: PPUSH
57151: PPUSH
57152: PPUSH
57153: PPUSH
// if not base_units then
57154: LD_VAR 0 1
57158: NOT
57159: IFFALSE 57163
// exit ;
57161: GO 57250
// result := false ;
57163: LD_ADDR_VAR 0 2
57167: PUSH
57168: LD_INT 0
57170: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57171: LD_ADDR_VAR 0 5
57175: PUSH
57176: LD_VAR 0 1
57180: PPUSH
57181: LD_INT 21
57183: PUSH
57184: LD_INT 3
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PPUSH
57191: CALL_OW 72
57195: ST_TO_ADDR
// if not tmp then
57196: LD_VAR 0 5
57200: NOT
57201: IFFALSE 57205
// exit ;
57203: GO 57250
// for i in tmp do
57205: LD_ADDR_VAR 0 3
57209: PUSH
57210: LD_VAR 0 5
57214: PUSH
57215: FOR_IN
57216: IFFALSE 57248
// begin result := EnemyInRange ( i , 22 ) ;
57218: LD_ADDR_VAR 0 2
57222: PUSH
57223: LD_VAR 0 3
57227: PPUSH
57228: LD_INT 22
57230: PPUSH
57231: CALL 54837 0 2
57235: ST_TO_ADDR
// if result then
57236: LD_VAR 0 2
57240: IFFALSE 57246
// exit ;
57242: POP
57243: POP
57244: GO 57250
// end ;
57246: GO 57215
57248: POP
57249: POP
// end ;
57250: LD_VAR 0 2
57254: RET
// export function FilterByTag ( units , tag ) ; begin
57255: LD_INT 0
57257: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57258: LD_ADDR_VAR 0 3
57262: PUSH
57263: LD_VAR 0 1
57267: PPUSH
57268: LD_INT 120
57270: PUSH
57271: LD_VAR 0 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PPUSH
57280: CALL_OW 72
57284: ST_TO_ADDR
// end ;
57285: LD_VAR 0 3
57289: RET
// export function IsDriver ( un ) ; begin
57290: LD_INT 0
57292: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57293: LD_ADDR_VAR 0 2
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 55
57305: PUSH
57306: EMPTY
57307: LIST
57308: PPUSH
57309: CALL_OW 69
57313: IN
57314: ST_TO_ADDR
// end ;
57315: LD_VAR 0 2
57319: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57320: LD_INT 0
57322: PPUSH
57323: PPUSH
// list := [ ] ;
57324: LD_ADDR_VAR 0 5
57328: PUSH
57329: EMPTY
57330: ST_TO_ADDR
// case d of 0 :
57331: LD_VAR 0 3
57335: PUSH
57336: LD_INT 0
57338: DOUBLE
57339: EQUAL
57340: IFTRUE 57344
57342: GO 57477
57344: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57345: LD_ADDR_VAR 0 5
57349: PUSH
57350: LD_VAR 0 1
57354: PUSH
57355: LD_INT 4
57357: MINUS
57358: PUSH
57359: LD_VAR 0 2
57363: PUSH
57364: LD_INT 4
57366: MINUS
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: PUSH
57376: LD_VAR 0 1
57380: PUSH
57381: LD_INT 3
57383: MINUS
57384: PUSH
57385: LD_VAR 0 2
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: PUSH
57398: LD_VAR 0 1
57402: PUSH
57403: LD_INT 4
57405: PLUS
57406: PUSH
57407: LD_VAR 0 2
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: PUSH
57420: LD_VAR 0 1
57424: PUSH
57425: LD_INT 3
57427: PLUS
57428: PUSH
57429: LD_VAR 0 2
57433: PUSH
57434: LD_INT 3
57436: PLUS
57437: PUSH
57438: LD_INT 5
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: LD_VAR 0 1
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_INT 4
57458: PLUS
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// end ; 1 :
57475: GO 58175
57477: LD_INT 1
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57485
57483: GO 57618
57485: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57486: LD_ADDR_VAR 0 5
57490: PUSH
57491: LD_VAR 0 1
57495: PUSH
57496: LD_VAR 0 2
57500: PUSH
57501: LD_INT 4
57503: MINUS
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: PUSH
57513: LD_VAR 0 1
57517: PUSH
57518: LD_INT 3
57520: MINUS
57521: PUSH
57522: LD_VAR 0 2
57526: PUSH
57527: LD_INT 3
57529: MINUS
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: PUSH
57539: LD_VAR 0 1
57543: PUSH
57544: LD_INT 4
57546: MINUS
57547: PUSH
57548: LD_VAR 0 2
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: PUSH
57561: LD_VAR 0 1
57565: PUSH
57566: LD_VAR 0 2
57570: PUSH
57571: LD_INT 3
57573: PLUS
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: PUSH
57583: LD_VAR 0 1
57587: PUSH
57588: LD_INT 4
57590: PLUS
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_INT 4
57599: PLUS
57600: PUSH
57601: LD_INT 5
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// end ; 2 :
57616: GO 58175
57618: LD_INT 2
57620: DOUBLE
57621: EQUAL
57622: IFTRUE 57626
57624: GO 57755
57626: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57627: LD_ADDR_VAR 0 5
57631: PUSH
57632: LD_VAR 0 1
57636: PUSH
57637: LD_VAR 0 2
57641: PUSH
57642: LD_INT 3
57644: MINUS
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: PUSH
57654: LD_VAR 0 1
57658: PUSH
57659: LD_INT 4
57661: PLUS
57662: PUSH
57663: LD_VAR 0 2
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: PUSH
57676: LD_VAR 0 1
57680: PUSH
57681: LD_VAR 0 2
57685: PUSH
57686: LD_INT 4
57688: PLUS
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: PUSH
57698: LD_VAR 0 1
57702: PUSH
57703: LD_INT 3
57705: MINUS
57706: PUSH
57707: LD_VAR 0 2
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: LD_VAR 0 1
57724: PUSH
57725: LD_INT 4
57727: MINUS
57728: PUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_INT 4
57736: MINUS
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// end ; 3 :
57753: GO 58175
57755: LD_INT 3
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57763
57761: GO 57896
57763: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57764: LD_ADDR_VAR 0 5
57768: PUSH
57769: LD_VAR 0 1
57773: PUSH
57774: LD_INT 3
57776: PLUS
57777: PUSH
57778: LD_VAR 0 2
57782: PUSH
57783: LD_INT 4
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: PUSH
57791: LD_VAR 0 1
57795: PUSH
57796: LD_INT 4
57798: PLUS
57799: PUSH
57800: LD_VAR 0 2
57804: PUSH
57805: LD_INT 4
57807: PLUS
57808: PUSH
57809: LD_INT 5
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: PUSH
57817: LD_VAR 0 1
57821: PUSH
57822: LD_INT 4
57824: MINUS
57825: PUSH
57826: LD_VAR 0 2
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: LIST
57838: PUSH
57839: LD_VAR 0 1
57843: PUSH
57844: LD_VAR 0 2
57848: PUSH
57849: LD_INT 4
57851: MINUS
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: PUSH
57861: LD_VAR 0 1
57865: PUSH
57866: LD_INT 3
57868: MINUS
57869: PUSH
57870: LD_VAR 0 2
57874: PUSH
57875: LD_INT 3
57877: MINUS
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// end ; 4 :
57894: GO 58175
57896: LD_INT 4
57898: DOUBLE
57899: EQUAL
57900: IFTRUE 57904
57902: GO 58037
57904: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57905: LD_ADDR_VAR 0 5
57909: PUSH
57910: LD_VAR 0 1
57914: PUSH
57915: LD_VAR 0 2
57919: PUSH
57920: LD_INT 4
57922: PLUS
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: PUSH
57932: LD_VAR 0 1
57936: PUSH
57937: LD_INT 3
57939: PLUS
57940: PUSH
57941: LD_VAR 0 2
57945: PUSH
57946: LD_INT 3
57948: PLUS
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: PUSH
57958: LD_VAR 0 1
57962: PUSH
57963: LD_INT 4
57965: PLUS
57966: PUSH
57967: LD_VAR 0 2
57971: PUSH
57972: LD_INT 4
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: PUSH
57980: LD_VAR 0 1
57984: PUSH
57985: LD_VAR 0 2
57989: PUSH
57990: LD_INT 3
57992: MINUS
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: PUSH
58002: LD_VAR 0 1
58006: PUSH
58007: LD_INT 4
58009: MINUS
58010: PUSH
58011: LD_VAR 0 2
58015: PUSH
58016: LD_INT 4
58018: MINUS
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// end ; 5 :
58035: GO 58175
58037: LD_INT 5
58039: DOUBLE
58040: EQUAL
58041: IFTRUE 58045
58043: GO 58174
58045: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58046: LD_ADDR_VAR 0 5
58050: PUSH
58051: LD_VAR 0 1
58055: PUSH
58056: LD_INT 4
58058: MINUS
58059: PUSH
58060: LD_VAR 0 2
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: PUSH
58073: LD_VAR 0 1
58077: PUSH
58078: LD_VAR 0 2
58082: PUSH
58083: LD_INT 4
58085: MINUS
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: PUSH
58095: LD_VAR 0 1
58099: PUSH
58100: LD_INT 4
58102: PLUS
58103: PUSH
58104: LD_VAR 0 2
58108: PUSH
58109: LD_INT 4
58111: PLUS
58112: PUSH
58113: LD_INT 5
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: PUSH
58121: LD_VAR 0 1
58125: PUSH
58126: LD_INT 3
58128: PLUS
58129: PUSH
58130: LD_VAR 0 2
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: PUSH
58143: LD_VAR 0 1
58147: PUSH
58148: LD_VAR 0 2
58152: PUSH
58153: LD_INT 3
58155: PLUS
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// end ; end ;
58172: GO 58175
58174: POP
// result := list ;
58175: LD_ADDR_VAR 0 4
58179: PUSH
58180: LD_VAR 0 5
58184: ST_TO_ADDR
// end ;
58185: LD_VAR 0 4
58189: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58190: LD_INT 0
58192: PPUSH
58193: PPUSH
58194: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58195: LD_VAR 0 1
58199: NOT
58200: PUSH
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 4
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: IN
58224: NOT
58225: OR
58226: IFFALSE 58230
// exit ;
58228: GO 58313
// tmp := [ ] ;
58230: LD_ADDR_VAR 0 5
58234: PUSH
58235: EMPTY
58236: ST_TO_ADDR
// for i in units do
58237: LD_ADDR_VAR 0 4
58241: PUSH
58242: LD_VAR 0 1
58246: PUSH
58247: FOR_IN
58248: IFFALSE 58282
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58250: LD_ADDR_VAR 0 5
58254: PUSH
58255: LD_VAR 0 5
58259: PPUSH
58260: LD_VAR 0 4
58264: PPUSH
58265: LD_VAR 0 2
58269: PPUSH
58270: CALL_OW 259
58274: PPUSH
58275: CALL 59674 0 2
58279: ST_TO_ADDR
58280: GO 58247
58282: POP
58283: POP
// if not tmp then
58284: LD_VAR 0 5
58288: NOT
58289: IFFALSE 58293
// exit ;
58291: GO 58313
// result := SortListByListDesc ( units , tmp ) ;
58293: LD_ADDR_VAR 0 3
58297: PUSH
58298: LD_VAR 0 1
58302: PPUSH
58303: LD_VAR 0 5
58307: PPUSH
58308: CALL_OW 77
58312: ST_TO_ADDR
// end ;
58313: LD_VAR 0 3
58317: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58318: LD_INT 0
58320: PPUSH
58321: PPUSH
58322: PPUSH
// result := false ;
58323: LD_ADDR_VAR 0 3
58327: PUSH
58328: LD_INT 0
58330: ST_TO_ADDR
// if not building then
58331: LD_VAR 0 2
58335: NOT
58336: IFFALSE 58340
// exit ;
58338: GO 58478
// x := GetX ( building ) ;
58340: LD_ADDR_VAR 0 4
58344: PUSH
58345: LD_VAR 0 2
58349: PPUSH
58350: CALL_OW 250
58354: ST_TO_ADDR
// y := GetY ( building ) ;
58355: LD_ADDR_VAR 0 5
58359: PUSH
58360: LD_VAR 0 2
58364: PPUSH
58365: CALL_OW 251
58369: ST_TO_ADDR
// if not x or not y then
58370: LD_VAR 0 4
58374: NOT
58375: PUSH
58376: LD_VAR 0 5
58380: NOT
58381: OR
58382: IFFALSE 58386
// exit ;
58384: GO 58478
// if GetTaskList ( unit ) then
58386: LD_VAR 0 1
58390: PPUSH
58391: CALL_OW 437
58395: IFFALSE 58478
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58397: LD_STRING e
58399: PUSH
58400: LD_VAR 0 1
58404: PPUSH
58405: CALL_OW 437
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PUSH
58414: LD_INT 1
58416: ARRAY
58417: EQUAL
58418: PUSH
58419: LD_VAR 0 4
58423: PUSH
58424: LD_VAR 0 1
58428: PPUSH
58429: CALL_OW 437
58433: PUSH
58434: LD_INT 1
58436: ARRAY
58437: PUSH
58438: LD_INT 2
58440: ARRAY
58441: EQUAL
58442: AND
58443: PUSH
58444: LD_VAR 0 5
58448: PUSH
58449: LD_VAR 0 1
58453: PPUSH
58454: CALL_OW 437
58458: PUSH
58459: LD_INT 1
58461: ARRAY
58462: PUSH
58463: LD_INT 3
58465: ARRAY
58466: EQUAL
58467: AND
58468: IFFALSE 58478
// result := true end ;
58470: LD_ADDR_VAR 0 3
58474: PUSH
58475: LD_INT 1
58477: ST_TO_ADDR
// end ;
58478: LD_VAR 0 3
58482: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58483: LD_INT 0
58485: PPUSH
// result := false ;
58486: LD_ADDR_VAR 0 4
58490: PUSH
58491: LD_INT 0
58493: ST_TO_ADDR
// if GetTaskList ( unit ) then
58494: LD_VAR 0 1
58498: PPUSH
58499: CALL_OW 437
58503: IFFALSE 58586
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58505: LD_STRING M
58507: PUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: CALL_OW 437
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PUSH
58522: LD_INT 1
58524: ARRAY
58525: EQUAL
58526: PUSH
58527: LD_VAR 0 2
58531: PUSH
58532: LD_VAR 0 1
58536: PPUSH
58537: CALL_OW 437
58541: PUSH
58542: LD_INT 1
58544: ARRAY
58545: PUSH
58546: LD_INT 2
58548: ARRAY
58549: EQUAL
58550: AND
58551: PUSH
58552: LD_VAR 0 3
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: CALL_OW 437
58566: PUSH
58567: LD_INT 1
58569: ARRAY
58570: PUSH
58571: LD_INT 3
58573: ARRAY
58574: EQUAL
58575: AND
58576: IFFALSE 58586
// result := true ;
58578: LD_ADDR_VAR 0 4
58582: PUSH
58583: LD_INT 1
58585: ST_TO_ADDR
// end ; end ;
58586: LD_VAR 0 4
58590: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58591: LD_INT 0
58593: PPUSH
58594: PPUSH
58595: PPUSH
58596: PPUSH
// if not unit or not area then
58597: LD_VAR 0 1
58601: NOT
58602: PUSH
58603: LD_VAR 0 2
58607: NOT
58608: OR
58609: IFFALSE 58613
// exit ;
58611: GO 58777
// tmp := AreaToList ( area , i ) ;
58613: LD_ADDR_VAR 0 6
58617: PUSH
58618: LD_VAR 0 2
58622: PPUSH
58623: LD_VAR 0 5
58627: PPUSH
58628: CALL_OW 517
58632: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58633: LD_ADDR_VAR 0 5
58637: PUSH
58638: DOUBLE
58639: LD_INT 1
58641: DEC
58642: ST_TO_ADDR
58643: LD_VAR 0 6
58647: PUSH
58648: LD_INT 1
58650: ARRAY
58651: PUSH
58652: FOR_TO
58653: IFFALSE 58775
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58655: LD_ADDR_VAR 0 7
58659: PUSH
58660: LD_VAR 0 6
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PUSH
58669: LD_VAR 0 5
58673: ARRAY
58674: PUSH
58675: LD_VAR 0 6
58679: PUSH
58680: LD_INT 2
58682: ARRAY
58683: PUSH
58684: LD_VAR 0 5
58688: ARRAY
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58694: LD_VAR 0 7
58698: PUSH
58699: LD_INT 1
58701: ARRAY
58702: PPUSH
58703: LD_VAR 0 7
58707: PUSH
58708: LD_INT 2
58710: ARRAY
58711: PPUSH
58712: CALL_OW 428
58716: PUSH
58717: LD_INT 0
58719: EQUAL
58720: IFFALSE 58773
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58722: LD_VAR 0 1
58726: PPUSH
58727: LD_VAR 0 7
58731: PUSH
58732: LD_INT 1
58734: ARRAY
58735: PPUSH
58736: LD_VAR 0 7
58740: PUSH
58741: LD_INT 2
58743: ARRAY
58744: PPUSH
58745: LD_VAR 0 3
58749: PPUSH
58750: CALL_OW 48
// result := IsPlaced ( unit ) ;
58754: LD_ADDR_VAR 0 4
58758: PUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 305
58768: ST_TO_ADDR
// exit ;
58769: POP
58770: POP
58771: GO 58777
// end ; end ;
58773: GO 58652
58775: POP
58776: POP
// end ;
58777: LD_VAR 0 4
58781: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58782: LD_INT 0
58784: PPUSH
58785: PPUSH
58786: PPUSH
// if not side or side > 8 then
58787: LD_VAR 0 1
58791: NOT
58792: PUSH
58793: LD_VAR 0 1
58797: PUSH
58798: LD_INT 8
58800: GREATER
58801: OR
58802: IFFALSE 58806
// exit ;
58804: GO 58993
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58806: LD_ADDR_VAR 0 4
58810: PUSH
58811: LD_INT 22
58813: PUSH
58814: LD_VAR 0 1
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 21
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PPUSH
58837: CALL_OW 69
58841: ST_TO_ADDR
// if not tmp then
58842: LD_VAR 0 4
58846: NOT
58847: IFFALSE 58851
// exit ;
58849: GO 58993
// enable_addtolog := true ;
58851: LD_ADDR_OWVAR 81
58855: PUSH
58856: LD_INT 1
58858: ST_TO_ADDR
// AddToLog ( [ ) ;
58859: LD_STRING [
58861: PPUSH
58862: CALL_OW 561
// for i in tmp do
58866: LD_ADDR_VAR 0 3
58870: PUSH
58871: LD_VAR 0 4
58875: PUSH
58876: FOR_IN
58877: IFFALSE 58984
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58879: LD_STRING [
58881: PUSH
58882: LD_VAR 0 3
58886: PPUSH
58887: CALL_OW 266
58891: STR
58892: PUSH
58893: LD_STRING , 
58895: STR
58896: PUSH
58897: LD_VAR 0 3
58901: PPUSH
58902: CALL_OW 250
58906: STR
58907: PUSH
58908: LD_STRING , 
58910: STR
58911: PUSH
58912: LD_VAR 0 3
58916: PPUSH
58917: CALL_OW 251
58921: STR
58922: PUSH
58923: LD_STRING , 
58925: STR
58926: PUSH
58927: LD_VAR 0 3
58931: PPUSH
58932: CALL_OW 254
58936: STR
58937: PUSH
58938: LD_STRING , 
58940: STR
58941: PUSH
58942: LD_VAR 0 3
58946: PPUSH
58947: LD_INT 1
58949: PPUSH
58950: CALL_OW 268
58954: STR
58955: PUSH
58956: LD_STRING , 
58958: STR
58959: PUSH
58960: LD_VAR 0 3
58964: PPUSH
58965: LD_INT 2
58967: PPUSH
58968: CALL_OW 268
58972: STR
58973: PUSH
58974: LD_STRING ],
58976: STR
58977: PPUSH
58978: CALL_OW 561
// end ;
58982: GO 58876
58984: POP
58985: POP
// AddToLog ( ]; ) ;
58986: LD_STRING ];
58988: PPUSH
58989: CALL_OW 561
// end ;
58993: LD_VAR 0 2
58997: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58998: LD_INT 0
59000: PPUSH
59001: PPUSH
59002: PPUSH
59003: PPUSH
59004: PPUSH
// if not area or not rate or not max then
59005: LD_VAR 0 1
59009: NOT
59010: PUSH
59011: LD_VAR 0 2
59015: NOT
59016: OR
59017: PUSH
59018: LD_VAR 0 4
59022: NOT
59023: OR
59024: IFFALSE 59028
// exit ;
59026: GO 59217
// while 1 do
59028: LD_INT 1
59030: IFFALSE 59217
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59032: LD_ADDR_VAR 0 9
59036: PUSH
59037: LD_VAR 0 1
59041: PPUSH
59042: LD_INT 1
59044: PPUSH
59045: CALL_OW 287
59049: PUSH
59050: LD_INT 10
59052: MUL
59053: ST_TO_ADDR
// r := rate / 10 ;
59054: LD_ADDR_VAR 0 7
59058: PUSH
59059: LD_VAR 0 2
59063: PUSH
59064: LD_INT 10
59066: DIVREAL
59067: ST_TO_ADDR
// time := 1 1$00 ;
59068: LD_ADDR_VAR 0 8
59072: PUSH
59073: LD_INT 2100
59075: ST_TO_ADDR
// if amount < min then
59076: LD_VAR 0 9
59080: PUSH
59081: LD_VAR 0 3
59085: LESS
59086: IFFALSE 59104
// r := r * 2 else
59088: LD_ADDR_VAR 0 7
59092: PUSH
59093: LD_VAR 0 7
59097: PUSH
59098: LD_INT 2
59100: MUL
59101: ST_TO_ADDR
59102: GO 59130
// if amount > max then
59104: LD_VAR 0 9
59108: PUSH
59109: LD_VAR 0 4
59113: GREATER
59114: IFFALSE 59130
// r := r / 2 ;
59116: LD_ADDR_VAR 0 7
59120: PUSH
59121: LD_VAR 0 7
59125: PUSH
59126: LD_INT 2
59128: DIVREAL
59129: ST_TO_ADDR
// time := time / r ;
59130: LD_ADDR_VAR 0 8
59134: PUSH
59135: LD_VAR 0 8
59139: PUSH
59140: LD_VAR 0 7
59144: DIVREAL
59145: ST_TO_ADDR
// if time < 0 then
59146: LD_VAR 0 8
59150: PUSH
59151: LD_INT 0
59153: LESS
59154: IFFALSE 59171
// time := time * - 1 ;
59156: LD_ADDR_VAR 0 8
59160: PUSH
59161: LD_VAR 0 8
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: MUL
59170: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59171: LD_VAR 0 8
59175: PUSH
59176: LD_INT 35
59178: PPUSH
59179: LD_INT 875
59181: PPUSH
59182: CALL_OW 12
59186: PLUS
59187: PPUSH
59188: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59192: LD_INT 1
59194: PPUSH
59195: LD_INT 5
59197: PPUSH
59198: CALL_OW 12
59202: PPUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: LD_INT 1
59210: PPUSH
59211: CALL_OW 55
// end ;
59215: GO 59028
// end ;
59217: LD_VAR 0 5
59221: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59222: LD_INT 0
59224: PPUSH
59225: PPUSH
59226: PPUSH
59227: PPUSH
59228: PPUSH
59229: PPUSH
59230: PPUSH
59231: PPUSH
// if not turrets or not factories then
59232: LD_VAR 0 1
59236: NOT
59237: PUSH
59238: LD_VAR 0 2
59242: NOT
59243: OR
59244: IFFALSE 59248
// exit ;
59246: GO 59555
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59248: LD_ADDR_VAR 0 10
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: LD_INT 6
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 5
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 24
59290: PUSH
59291: LD_INT 25
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 23
59300: PUSH
59301: LD_INT 27
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 42
59314: PUSH
59315: LD_INT 43
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 44
59324: PUSH
59325: LD_INT 46
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 45
59334: PUSH
59335: LD_INT 47
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: ST_TO_ADDR
// result := [ ] ;
59352: LD_ADDR_VAR 0 3
59356: PUSH
59357: EMPTY
59358: ST_TO_ADDR
// for i in turrets do
59359: LD_ADDR_VAR 0 4
59363: PUSH
59364: LD_VAR 0 1
59368: PUSH
59369: FOR_IN
59370: IFFALSE 59553
// begin nat := GetNation ( i ) ;
59372: LD_ADDR_VAR 0 7
59376: PUSH
59377: LD_VAR 0 4
59381: PPUSH
59382: CALL_OW 248
59386: ST_TO_ADDR
// weapon := 0 ;
59387: LD_ADDR_VAR 0 8
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// if not nat then
59395: LD_VAR 0 7
59399: NOT
59400: IFFALSE 59404
// continue ;
59402: GO 59369
// for j in list [ nat ] do
59404: LD_ADDR_VAR 0 5
59408: PUSH
59409: LD_VAR 0 10
59413: PUSH
59414: LD_VAR 0 7
59418: ARRAY
59419: PUSH
59420: FOR_IN
59421: IFFALSE 59462
// if GetBWeapon ( i ) = j [ 1 ] then
59423: LD_VAR 0 4
59427: PPUSH
59428: CALL_OW 269
59432: PUSH
59433: LD_VAR 0 5
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: EQUAL
59442: IFFALSE 59460
// begin weapon := j [ 2 ] ;
59444: LD_ADDR_VAR 0 8
59448: PUSH
59449: LD_VAR 0 5
59453: PUSH
59454: LD_INT 2
59456: ARRAY
59457: ST_TO_ADDR
// break ;
59458: GO 59462
// end ;
59460: GO 59420
59462: POP
59463: POP
// if not weapon then
59464: LD_VAR 0 8
59468: NOT
59469: IFFALSE 59473
// continue ;
59471: GO 59369
// for k in factories do
59473: LD_ADDR_VAR 0 6
59477: PUSH
59478: LD_VAR 0 2
59482: PUSH
59483: FOR_IN
59484: IFFALSE 59549
// begin weapons := AvailableWeaponList ( k ) ;
59486: LD_ADDR_VAR 0 9
59490: PUSH
59491: LD_VAR 0 6
59495: PPUSH
59496: CALL_OW 478
59500: ST_TO_ADDR
// if not weapons then
59501: LD_VAR 0 9
59505: NOT
59506: IFFALSE 59510
// continue ;
59508: GO 59483
// if weapon in weapons then
59510: LD_VAR 0 8
59514: PUSH
59515: LD_VAR 0 9
59519: IN
59520: IFFALSE 59547
// begin result := [ i , weapon ] ;
59522: LD_ADDR_VAR 0 3
59526: PUSH
59527: LD_VAR 0 4
59531: PUSH
59532: LD_VAR 0 8
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// exit ;
59541: POP
59542: POP
59543: POP
59544: POP
59545: GO 59555
// end ; end ;
59547: GO 59483
59549: POP
59550: POP
// end ;
59551: GO 59369
59553: POP
59554: POP
// end ;
59555: LD_VAR 0 3
59559: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59560: LD_INT 0
59562: PPUSH
// if not side or side > 8 then
59563: LD_VAR 0 3
59567: NOT
59568: PUSH
59569: LD_VAR 0 3
59573: PUSH
59574: LD_INT 8
59576: GREATER
59577: OR
59578: IFFALSE 59582
// exit ;
59580: GO 59641
// if not range then
59582: LD_VAR 0 4
59586: NOT
59587: IFFALSE 59598
// range := - 12 ;
59589: LD_ADDR_VAR 0 4
59593: PUSH
59594: LD_INT 12
59596: NEG
59597: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_VAR 0 2
59607: PPUSH
59608: LD_VAR 0 3
59612: PPUSH
59613: LD_VAR 0 4
59617: PPUSH
59618: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59622: LD_VAR 0 1
59626: PPUSH
59627: LD_VAR 0 2
59631: PPUSH
59632: LD_VAR 0 3
59636: PPUSH
59637: CALL_OW 331
// end ;
59641: LD_VAR 0 5
59645: RET
// export function Video ( mode ) ; begin
59646: LD_INT 0
59648: PPUSH
// ingame_video = mode ;
59649: LD_ADDR_OWVAR 52
59653: PUSH
59654: LD_VAR 0 1
59658: ST_TO_ADDR
// interface_hidden = mode ;
59659: LD_ADDR_OWVAR 54
59663: PUSH
59664: LD_VAR 0 1
59668: ST_TO_ADDR
// end ;
59669: LD_VAR 0 2
59673: RET
// export function Join ( array , element ) ; begin
59674: LD_INT 0
59676: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59677: LD_ADDR_VAR 0 3
59681: PUSH
59682: LD_VAR 0 1
59686: PPUSH
59687: LD_VAR 0 1
59691: PUSH
59692: LD_INT 1
59694: PLUS
59695: PPUSH
59696: LD_VAR 0 2
59700: PPUSH
59701: CALL_OW 1
59705: ST_TO_ADDR
// end ;
59706: LD_VAR 0 3
59710: RET
// export function JoinUnion ( array , element ) ; begin
59711: LD_INT 0
59713: PPUSH
// result := array union element ;
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_VAR 0 1
59723: PUSH
59724: LD_VAR 0 2
59728: UNION
59729: ST_TO_ADDR
// end ;
59730: LD_VAR 0 3
59734: RET
// export function GetBehemoths ( side ) ; begin
59735: LD_INT 0
59737: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59738: LD_ADDR_VAR 0 2
59742: PUSH
59743: LD_INT 22
59745: PUSH
59746: LD_VAR 0 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 31
59757: PUSH
59758: LD_INT 25
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PPUSH
59769: CALL_OW 69
59773: ST_TO_ADDR
// end ;
59774: LD_VAR 0 2
59778: RET
// export function Shuffle ( array ) ; var i , index ; begin
59779: LD_INT 0
59781: PPUSH
59782: PPUSH
59783: PPUSH
// result := [ ] ;
59784: LD_ADDR_VAR 0 2
59788: PUSH
59789: EMPTY
59790: ST_TO_ADDR
// if not array then
59791: LD_VAR 0 1
59795: NOT
59796: IFFALSE 59800
// exit ;
59798: GO 59899
// Randomize ;
59800: CALL_OW 10
// for i = array downto 1 do
59804: LD_ADDR_VAR 0 3
59808: PUSH
59809: DOUBLE
59810: LD_VAR 0 1
59814: INC
59815: ST_TO_ADDR
59816: LD_INT 1
59818: PUSH
59819: FOR_DOWNTO
59820: IFFALSE 59897
// begin index := rand ( 1 , array ) ;
59822: LD_ADDR_VAR 0 4
59826: PUSH
59827: LD_INT 1
59829: PPUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL_OW 12
59839: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59840: LD_ADDR_VAR 0 2
59844: PUSH
59845: LD_VAR 0 2
59849: PPUSH
59850: LD_VAR 0 2
59854: PUSH
59855: LD_INT 1
59857: PLUS
59858: PPUSH
59859: LD_VAR 0 1
59863: PUSH
59864: LD_VAR 0 4
59868: ARRAY
59869: PPUSH
59870: CALL_OW 2
59874: ST_TO_ADDR
// array := Delete ( array , index ) ;
59875: LD_ADDR_VAR 0 1
59879: PUSH
59880: LD_VAR 0 1
59884: PPUSH
59885: LD_VAR 0 4
59889: PPUSH
59890: CALL_OW 3
59894: ST_TO_ADDR
// end ;
59895: GO 59819
59897: POP
59898: POP
// end ;
59899: LD_VAR 0 2
59903: RET
// export function GetBaseMaterials ( base ) ; begin
59904: LD_INT 0
59906: PPUSH
// result := [ 0 , 0 , 0 ] ;
59907: LD_ADDR_VAR 0 2
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// if not base then
59926: LD_VAR 0 1
59930: NOT
59931: IFFALSE 59935
// exit ;
59933: GO 59984
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59935: LD_ADDR_VAR 0 2
59939: PUSH
59940: LD_VAR 0 1
59944: PPUSH
59945: LD_INT 1
59947: PPUSH
59948: CALL_OW 275
59952: PUSH
59953: LD_VAR 0 1
59957: PPUSH
59958: LD_INT 2
59960: PPUSH
59961: CALL_OW 275
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: LD_INT 3
59973: PPUSH
59974: CALL_OW 275
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: ST_TO_ADDR
// end ;
59984: LD_VAR 0 2
59988: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59989: LD_INT 0
59991: PPUSH
59992: PPUSH
// result := array ;
59993: LD_ADDR_VAR 0 3
59997: PUSH
59998: LD_VAR 0 1
60002: ST_TO_ADDR
// if size >= result then
60003: LD_VAR 0 2
60007: PUSH
60008: LD_VAR 0 3
60012: GREATEREQUAL
60013: IFFALSE 60017
// exit ;
60015: GO 60067
// if size then
60017: LD_VAR 0 2
60021: IFFALSE 60067
// for i := array downto size do
60023: LD_ADDR_VAR 0 4
60027: PUSH
60028: DOUBLE
60029: LD_VAR 0 1
60033: INC
60034: ST_TO_ADDR
60035: LD_VAR 0 2
60039: PUSH
60040: FOR_DOWNTO
60041: IFFALSE 60065
// result := Delete ( result , result ) ;
60043: LD_ADDR_VAR 0 3
60047: PUSH
60048: LD_VAR 0 3
60052: PPUSH
60053: LD_VAR 0 3
60057: PPUSH
60058: CALL_OW 3
60062: ST_TO_ADDR
60063: GO 60040
60065: POP
60066: POP
// end ;
60067: LD_VAR 0 3
60071: RET
// export function ComExit ( unit ) ; var tmp ; begin
60072: LD_INT 0
60074: PPUSH
60075: PPUSH
// if not IsInUnit ( unit ) then
60076: LD_VAR 0 1
60080: PPUSH
60081: CALL_OW 310
60085: NOT
60086: IFFALSE 60090
// exit ;
60088: GO 60150
// tmp := IsInUnit ( unit ) ;
60090: LD_ADDR_VAR 0 3
60094: PUSH
60095: LD_VAR 0 1
60099: PPUSH
60100: CALL_OW 310
60104: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60105: LD_VAR 0 3
60109: PPUSH
60110: CALL_OW 247
60114: PUSH
60115: LD_INT 2
60117: EQUAL
60118: IFFALSE 60131
// ComExitVehicle ( unit ) else
60120: LD_VAR 0 1
60124: PPUSH
60125: CALL_OW 121
60129: GO 60140
// ComExitBuilding ( unit ) ;
60131: LD_VAR 0 1
60135: PPUSH
60136: CALL_OW 122
// result := tmp ;
60140: LD_ADDR_VAR 0 2
60144: PUSH
60145: LD_VAR 0 3
60149: ST_TO_ADDR
// end ;
60150: LD_VAR 0 2
60154: RET
// export function ComExitAll ( units ) ; var i ; begin
60155: LD_INT 0
60157: PPUSH
60158: PPUSH
// if not units then
60159: LD_VAR 0 1
60163: NOT
60164: IFFALSE 60168
// exit ;
60166: GO 60194
// for i in units do
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_VAR 0 1
60177: PUSH
60178: FOR_IN
60179: IFFALSE 60192
// ComExit ( i ) ;
60181: LD_VAR 0 3
60185: PPUSH
60186: CALL 60072 0 1
60190: GO 60178
60192: POP
60193: POP
// end ;
60194: LD_VAR 0 2
60198: RET
// export function ResetHc ; begin
60199: LD_INT 0
60201: PPUSH
// InitHc ;
60202: CALL_OW 19
// hc_importance := 0 ;
60206: LD_ADDR_OWVAR 32
60210: PUSH
60211: LD_INT 0
60213: ST_TO_ADDR
// end ;
60214: LD_VAR 0 1
60218: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60219: LD_INT 0
60221: PPUSH
60222: PPUSH
60223: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60224: LD_ADDR_VAR 0 6
60228: PUSH
60229: LD_VAR 0 1
60233: PUSH
60234: LD_VAR 0 3
60238: PLUS
60239: PUSH
60240: LD_INT 2
60242: DIV
60243: ST_TO_ADDR
// if _x < 0 then
60244: LD_VAR 0 6
60248: PUSH
60249: LD_INT 0
60251: LESS
60252: IFFALSE 60269
// _x := _x * - 1 ;
60254: LD_ADDR_VAR 0 6
60258: PUSH
60259: LD_VAR 0 6
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: MUL
60268: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60269: LD_ADDR_VAR 0 7
60273: PUSH
60274: LD_VAR 0 2
60278: PUSH
60279: LD_VAR 0 4
60283: PLUS
60284: PUSH
60285: LD_INT 2
60287: DIV
60288: ST_TO_ADDR
// if _y < 0 then
60289: LD_VAR 0 7
60293: PUSH
60294: LD_INT 0
60296: LESS
60297: IFFALSE 60314
// _y := _y * - 1 ;
60299: LD_ADDR_VAR 0 7
60303: PUSH
60304: LD_VAR 0 7
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: MUL
60313: ST_TO_ADDR
// result := [ _x , _y ] ;
60314: LD_ADDR_VAR 0 5
60318: PUSH
60319: LD_VAR 0 6
60323: PUSH
60324: LD_VAR 0 7
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// end ;
60333: LD_VAR 0 5
60337: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60338: LD_INT 0
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
// task := GetTaskList ( unit ) ;
60344: LD_ADDR_VAR 0 7
60348: PUSH
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 437
60358: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60359: LD_VAR 0 7
60363: NOT
60364: PUSH
60365: LD_VAR 0 1
60369: PPUSH
60370: LD_VAR 0 2
60374: PPUSH
60375: CALL_OW 308
60379: NOT
60380: AND
60381: IFFALSE 60385
// exit ;
60383: GO 60503
// if IsInArea ( unit , area ) then
60385: LD_VAR 0 1
60389: PPUSH
60390: LD_VAR 0 2
60394: PPUSH
60395: CALL_OW 308
60399: IFFALSE 60417
// begin ComMoveToArea ( unit , goAway ) ;
60401: LD_VAR 0 1
60405: PPUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: CALL_OW 113
// exit ;
60415: GO 60503
// end ; if task [ 1 ] [ 1 ] <> M then
60417: LD_VAR 0 7
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_INT 1
60428: ARRAY
60429: PUSH
60430: LD_STRING M
60432: NONEQUAL
60433: IFFALSE 60437
// exit ;
60435: GO 60503
// x := task [ 1 ] [ 2 ] ;
60437: LD_ADDR_VAR 0 5
60441: PUSH
60442: LD_VAR 0 7
60446: PUSH
60447: LD_INT 1
60449: ARRAY
60450: PUSH
60451: LD_INT 2
60453: ARRAY
60454: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60455: LD_ADDR_VAR 0 6
60459: PUSH
60460: LD_VAR 0 7
60464: PUSH
60465: LD_INT 1
60467: ARRAY
60468: PUSH
60469: LD_INT 3
60471: ARRAY
60472: ST_TO_ADDR
// if InArea ( x , y , area ) then
60473: LD_VAR 0 5
60477: PPUSH
60478: LD_VAR 0 6
60482: PPUSH
60483: LD_VAR 0 2
60487: PPUSH
60488: CALL_OW 309
60492: IFFALSE 60503
// ComStop ( unit ) ;
60494: LD_VAR 0 1
60498: PPUSH
60499: CALL_OW 141
// end ;
60503: LD_VAR 0 4
60507: RET
// export function Abs ( value ) ; begin
60508: LD_INT 0
60510: PPUSH
// result := value ;
60511: LD_ADDR_VAR 0 2
60515: PUSH
60516: LD_VAR 0 1
60520: ST_TO_ADDR
// if value < 0 then
60521: LD_VAR 0 1
60525: PUSH
60526: LD_INT 0
60528: LESS
60529: IFFALSE 60546
// result := value * - 1 ;
60531: LD_ADDR_VAR 0 2
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: MUL
60545: ST_TO_ADDR
// end ;
60546: LD_VAR 0 2
60550: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60551: LD_INT 0
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
60557: PPUSH
60558: PPUSH
60559: PPUSH
60560: PPUSH
// if not unit or not building then
60561: LD_VAR 0 1
60565: NOT
60566: PUSH
60567: LD_VAR 0 2
60571: NOT
60572: OR
60573: IFFALSE 60577
// exit ;
60575: GO 60803
// x := GetX ( building ) ;
60577: LD_ADDR_VAR 0 4
60581: PUSH
60582: LD_VAR 0 2
60586: PPUSH
60587: CALL_OW 250
60591: ST_TO_ADDR
// y := GetY ( building ) ;
60592: LD_ADDR_VAR 0 6
60596: PUSH
60597: LD_VAR 0 2
60601: PPUSH
60602: CALL_OW 251
60606: ST_TO_ADDR
// d := GetDir ( building ) ;
60607: LD_ADDR_VAR 0 8
60611: PUSH
60612: LD_VAR 0 2
60616: PPUSH
60617: CALL_OW 254
60621: ST_TO_ADDR
// r := 4 ;
60622: LD_ADDR_VAR 0 9
60626: PUSH
60627: LD_INT 4
60629: ST_TO_ADDR
// for i := 1 to 5 do
60630: LD_ADDR_VAR 0 10
60634: PUSH
60635: DOUBLE
60636: LD_INT 1
60638: DEC
60639: ST_TO_ADDR
60640: LD_INT 5
60642: PUSH
60643: FOR_TO
60644: IFFALSE 60801
// begin _x := ShiftX ( x , d , r + i ) ;
60646: LD_ADDR_VAR 0 5
60650: PUSH
60651: LD_VAR 0 4
60655: PPUSH
60656: LD_VAR 0 8
60660: PPUSH
60661: LD_VAR 0 9
60665: PUSH
60666: LD_VAR 0 10
60670: PLUS
60671: PPUSH
60672: CALL_OW 272
60676: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60677: LD_ADDR_VAR 0 7
60681: PUSH
60682: LD_VAR 0 6
60686: PPUSH
60687: LD_VAR 0 8
60691: PPUSH
60692: LD_VAR 0 9
60696: PUSH
60697: LD_VAR 0 10
60701: PLUS
60702: PPUSH
60703: CALL_OW 273
60707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60708: LD_VAR 0 5
60712: PPUSH
60713: LD_VAR 0 7
60717: PPUSH
60718: CALL_OW 488
60722: PUSH
60723: LD_VAR 0 5
60727: PPUSH
60728: LD_VAR 0 7
60732: PPUSH
60733: CALL_OW 428
60737: PPUSH
60738: CALL_OW 247
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: IN
60753: NOT
60754: AND
60755: IFFALSE 60799
// begin ComMoveXY ( unit , _x , _y ) ;
60757: LD_VAR 0 1
60761: PPUSH
60762: LD_VAR 0 5
60766: PPUSH
60767: LD_VAR 0 7
60771: PPUSH
60772: CALL_OW 111
// result := [ _x , _y ] ;
60776: LD_ADDR_VAR 0 3
60780: PUSH
60781: LD_VAR 0 5
60785: PUSH
60786: LD_VAR 0 7
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: ST_TO_ADDR
// exit ;
60795: POP
60796: POP
60797: GO 60803
// end ; end ;
60799: GO 60643
60801: POP
60802: POP
// end ;
60803: LD_VAR 0 3
60807: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60808: LD_INT 0
60810: PPUSH
60811: PPUSH
60812: PPUSH
// result := 0 ;
60813: LD_ADDR_VAR 0 3
60817: PUSH
60818: LD_INT 0
60820: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60821: LD_VAR 0 1
60825: PUSH
60826: LD_INT 0
60828: LESS
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_INT 8
60837: GREATER
60838: OR
60839: PUSH
60840: LD_VAR 0 2
60844: PUSH
60845: LD_INT 0
60847: LESS
60848: OR
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_INT 8
60857: GREATER
60858: OR
60859: IFFALSE 60863
// exit ;
60861: GO 60938
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60863: LD_ADDR_VAR 0 4
60867: PUSH
60868: LD_INT 22
60870: PUSH
60871: LD_VAR 0 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PPUSH
60880: CALL_OW 69
60884: PUSH
60885: FOR_IN
60886: IFFALSE 60936
// begin un := UnitShoot ( i ) ;
60888: LD_ADDR_VAR 0 5
60892: PUSH
60893: LD_VAR 0 4
60897: PPUSH
60898: CALL_OW 504
60902: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60903: LD_VAR 0 5
60907: PPUSH
60908: CALL_OW 255
60912: PUSH
60913: LD_VAR 0 1
60917: EQUAL
60918: IFFALSE 60934
// begin result := un ;
60920: LD_ADDR_VAR 0 3
60924: PUSH
60925: LD_VAR 0 5
60929: ST_TO_ADDR
// exit ;
60930: POP
60931: POP
60932: GO 60938
// end ; end ;
60934: GO 60885
60936: POP
60937: POP
// end ;
60938: LD_VAR 0 3
60942: RET
// export function GetCargoBay ( units ) ; begin
60943: LD_INT 0
60945: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60946: LD_ADDR_VAR 0 2
60950: PUSH
60951: LD_VAR 0 1
60955: PPUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 34
60961: PUSH
60962: LD_INT 12
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 34
60971: PUSH
60972: LD_INT 51
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 34
60981: PUSH
60982: LD_INT 32
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 34
60991: PUSH
60992: LD_INT 89
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: PPUSH
61006: CALL_OW 72
61010: ST_TO_ADDR
// end ;
61011: LD_VAR 0 2
61015: RET
// export function Negate ( value ) ; begin
61016: LD_INT 0
61018: PPUSH
// result := not value ;
61019: LD_ADDR_VAR 0 2
61023: PUSH
61024: LD_VAR 0 1
61028: NOT
61029: ST_TO_ADDR
// end ;
61030: LD_VAR 0 2
61034: RET
// export function Inc ( value ) ; begin
61035: LD_INT 0
61037: PPUSH
// result := value + 1 ;
61038: LD_ADDR_VAR 0 2
61042: PUSH
61043: LD_VAR 0 1
61047: PUSH
61048: LD_INT 1
61050: PLUS
61051: ST_TO_ADDR
// end ;
61052: LD_VAR 0 2
61056: RET
// export function Dec ( value ) ; begin
61057: LD_INT 0
61059: PPUSH
// result := value - 1 ;
61060: LD_ADDR_VAR 0 2
61064: PUSH
61065: LD_VAR 0 1
61069: PUSH
61070: LD_INT 1
61072: MINUS
61073: ST_TO_ADDR
// end ;
61074: LD_VAR 0 2
61078: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61079: LD_INT 0
61081: PPUSH
61082: PPUSH
61083: PPUSH
61084: PPUSH
61085: PPUSH
61086: PPUSH
61087: PPUSH
61088: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61089: LD_VAR 0 1
61093: PPUSH
61094: LD_VAR 0 2
61098: PPUSH
61099: CALL_OW 488
61103: NOT
61104: PUSH
61105: LD_VAR 0 3
61109: PPUSH
61110: LD_VAR 0 4
61114: PPUSH
61115: CALL_OW 488
61119: NOT
61120: OR
61121: IFFALSE 61134
// begin result := - 1 ;
61123: LD_ADDR_VAR 0 5
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: ST_TO_ADDR
// exit ;
61132: GO 61369
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61134: LD_ADDR_VAR 0 12
61138: PUSH
61139: LD_VAR 0 1
61143: PPUSH
61144: LD_VAR 0 2
61148: PPUSH
61149: LD_VAR 0 3
61153: PPUSH
61154: LD_VAR 0 4
61158: PPUSH
61159: CALL 60219 0 4
61163: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61164: LD_ADDR_VAR 0 11
61168: PUSH
61169: LD_VAR 0 1
61173: PPUSH
61174: LD_VAR 0 2
61178: PPUSH
61179: LD_VAR 0 12
61183: PUSH
61184: LD_INT 1
61186: ARRAY
61187: PPUSH
61188: LD_VAR 0 12
61192: PUSH
61193: LD_INT 2
61195: ARRAY
61196: PPUSH
61197: CALL_OW 298
61201: ST_TO_ADDR
// distance := 9999 ;
61202: LD_ADDR_VAR 0 10
61206: PUSH
61207: LD_INT 9999
61209: ST_TO_ADDR
// for i := 0 to 5 do
61210: LD_ADDR_VAR 0 6
61214: PUSH
61215: DOUBLE
61216: LD_INT 0
61218: DEC
61219: ST_TO_ADDR
61220: LD_INT 5
61222: PUSH
61223: FOR_TO
61224: IFFALSE 61367
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61226: LD_ADDR_VAR 0 7
61230: PUSH
61231: LD_VAR 0 1
61235: PPUSH
61236: LD_VAR 0 6
61240: PPUSH
61241: LD_VAR 0 11
61245: PPUSH
61246: CALL_OW 272
61250: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61251: LD_ADDR_VAR 0 8
61255: PUSH
61256: LD_VAR 0 2
61260: PPUSH
61261: LD_VAR 0 6
61265: PPUSH
61266: LD_VAR 0 11
61270: PPUSH
61271: CALL_OW 273
61275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61276: LD_VAR 0 7
61280: PPUSH
61281: LD_VAR 0 8
61285: PPUSH
61286: CALL_OW 488
61290: NOT
61291: IFFALSE 61295
// continue ;
61293: GO 61223
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61295: LD_ADDR_VAR 0 9
61299: PUSH
61300: LD_VAR 0 12
61304: PUSH
61305: LD_INT 1
61307: ARRAY
61308: PPUSH
61309: LD_VAR 0 12
61313: PUSH
61314: LD_INT 2
61316: ARRAY
61317: PPUSH
61318: LD_VAR 0 7
61322: PPUSH
61323: LD_VAR 0 8
61327: PPUSH
61328: CALL_OW 298
61332: ST_TO_ADDR
// if tmp < distance then
61333: LD_VAR 0 9
61337: PUSH
61338: LD_VAR 0 10
61342: LESS
61343: IFFALSE 61365
// begin result := i ;
61345: LD_ADDR_VAR 0 5
61349: PUSH
61350: LD_VAR 0 6
61354: ST_TO_ADDR
// distance := tmp ;
61355: LD_ADDR_VAR 0 10
61359: PUSH
61360: LD_VAR 0 9
61364: ST_TO_ADDR
// end ; end ;
61365: GO 61223
61367: POP
61368: POP
// end ;
61369: LD_VAR 0 5
61373: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61374: LD_INT 0
61376: PPUSH
61377: PPUSH
// if not driver or not IsInUnit ( driver ) then
61378: LD_VAR 0 1
61382: NOT
61383: PUSH
61384: LD_VAR 0 1
61388: PPUSH
61389: CALL_OW 310
61393: NOT
61394: OR
61395: IFFALSE 61399
// exit ;
61397: GO 61489
// vehicle := IsInUnit ( driver ) ;
61399: LD_ADDR_VAR 0 3
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 310
61413: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61414: LD_VAR 0 1
61418: PPUSH
61419: LD_STRING \
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: PUSH
61449: LD_STRING E
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_VAR 0 3
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PPUSH
61485: CALL_OW 446
// end ;
61489: LD_VAR 0 2
61493: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61494: LD_INT 0
61496: PPUSH
61497: PPUSH
// if not driver or not IsInUnit ( driver ) then
61498: LD_VAR 0 1
61502: NOT
61503: PUSH
61504: LD_VAR 0 1
61508: PPUSH
61509: CALL_OW 310
61513: NOT
61514: OR
61515: IFFALSE 61519
// exit ;
61517: GO 61609
// vehicle := IsInUnit ( driver ) ;
61519: LD_ADDR_VAR 0 3
61523: PUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: CALL_OW 310
61533: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61534: LD_VAR 0 1
61538: PPUSH
61539: LD_STRING \
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: PUSH
61569: LD_STRING E
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_VAR 0 3
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PPUSH
61605: CALL_OW 447
// end ;
61609: LD_VAR 0 2
61613: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61614: LD_INT 0
61616: PPUSH
61617: PPUSH
61618: PPUSH
// tmp := [ ] ;
61619: LD_ADDR_VAR 0 5
61623: PUSH
61624: EMPTY
61625: ST_TO_ADDR
// for i in units do
61626: LD_ADDR_VAR 0 4
61630: PUSH
61631: LD_VAR 0 1
61635: PUSH
61636: FOR_IN
61637: IFFALSE 61675
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61639: LD_ADDR_VAR 0 5
61643: PUSH
61644: LD_VAR 0 5
61648: PPUSH
61649: LD_VAR 0 5
61653: PUSH
61654: LD_INT 1
61656: PLUS
61657: PPUSH
61658: LD_VAR 0 4
61662: PPUSH
61663: CALL_OW 256
61667: PPUSH
61668: CALL_OW 2
61672: ST_TO_ADDR
61673: GO 61636
61675: POP
61676: POP
// if not tmp then
61677: LD_VAR 0 5
61681: NOT
61682: IFFALSE 61686
// exit ;
61684: GO 61734
// if asc then
61686: LD_VAR 0 2
61690: IFFALSE 61714
// result := SortListByListAsc ( units , tmp ) else
61692: LD_ADDR_VAR 0 3
61696: PUSH
61697: LD_VAR 0 1
61701: PPUSH
61702: LD_VAR 0 5
61706: PPUSH
61707: CALL_OW 76
61711: ST_TO_ADDR
61712: GO 61734
// result := SortListByListDesc ( units , tmp ) ;
61714: LD_ADDR_VAR 0 3
61718: PUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: LD_VAR 0 5
61728: PPUSH
61729: CALL_OW 77
61733: ST_TO_ADDR
// end ;
61734: LD_VAR 0 3
61738: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61739: LD_INT 0
61741: PPUSH
61742: PPUSH
// task := GetTaskList ( mech ) ;
61743: LD_ADDR_VAR 0 4
61747: PUSH
61748: LD_VAR 0 1
61752: PPUSH
61753: CALL_OW 437
61757: ST_TO_ADDR
// if not task then
61758: LD_VAR 0 4
61762: NOT
61763: IFFALSE 61767
// exit ;
61765: GO 61809
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61767: LD_ADDR_VAR 0 3
61771: PUSH
61772: LD_VAR 0 4
61776: PUSH
61777: LD_INT 1
61779: ARRAY
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: PUSH
61785: LD_STRING r
61787: EQUAL
61788: PUSH
61789: LD_VAR 0 4
61793: PUSH
61794: LD_INT 1
61796: ARRAY
61797: PUSH
61798: LD_INT 4
61800: ARRAY
61801: PUSH
61802: LD_VAR 0 2
61806: EQUAL
61807: AND
61808: ST_TO_ADDR
// end ;
61809: LD_VAR 0 3
61813: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61814: LD_INT 0
61816: PPUSH
// SetDir ( unit , d ) ;
61817: LD_VAR 0 1
61821: PPUSH
61822: LD_VAR 0 4
61826: PPUSH
61827: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61831: LD_VAR 0 1
61835: PPUSH
61836: LD_VAR 0 2
61840: PPUSH
61841: LD_VAR 0 3
61845: PPUSH
61846: LD_VAR 0 5
61850: PPUSH
61851: CALL_OW 48
// end ;
61855: LD_VAR 0 6
61859: RET
// export function ToNaturalNumber ( number ) ; begin
61860: LD_INT 0
61862: PPUSH
// result := number div 1 ;
61863: LD_ADDR_VAR 0 2
61867: PUSH
61868: LD_VAR 0 1
61872: PUSH
61873: LD_INT 1
61875: DIV
61876: ST_TO_ADDR
// if number < 0 then
61877: LD_VAR 0 1
61881: PUSH
61882: LD_INT 0
61884: LESS
61885: IFFALSE 61895
// result := 0 ;
61887: LD_ADDR_VAR 0 2
61891: PUSH
61892: LD_INT 0
61894: ST_TO_ADDR
// end ;
61895: LD_VAR 0 2
61899: RET
// export function SortByClass ( units , class ) ; var un ; begin
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
// if not units or not class then
61904: LD_VAR 0 1
61908: NOT
61909: PUSH
61910: LD_VAR 0 2
61914: NOT
61915: OR
61916: IFFALSE 61920
// exit ;
61918: GO 62015
// result := [ ] ;
61920: LD_ADDR_VAR 0 3
61924: PUSH
61925: EMPTY
61926: ST_TO_ADDR
// for un in units do
61927: LD_ADDR_VAR 0 4
61931: PUSH
61932: LD_VAR 0 1
61936: PUSH
61937: FOR_IN
61938: IFFALSE 62013
// if GetClass ( un ) = class then
61940: LD_VAR 0 4
61944: PPUSH
61945: CALL_OW 257
61949: PUSH
61950: LD_VAR 0 2
61954: EQUAL
61955: IFFALSE 61982
// result := Insert ( result , 1 , un ) else
61957: LD_ADDR_VAR 0 3
61961: PUSH
61962: LD_VAR 0 3
61966: PPUSH
61967: LD_INT 1
61969: PPUSH
61970: LD_VAR 0 4
61974: PPUSH
61975: CALL_OW 2
61979: ST_TO_ADDR
61980: GO 62011
// result := Replace ( result , result + 1 , un ) ;
61982: LD_ADDR_VAR 0 3
61986: PUSH
61987: LD_VAR 0 3
61991: PPUSH
61992: LD_VAR 0 3
61996: PUSH
61997: LD_INT 1
61999: PLUS
62000: PPUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: CALL_OW 1
62010: ST_TO_ADDR
62011: GO 61937
62013: POP
62014: POP
// end ;
62015: LD_VAR 0 3
62019: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62020: LD_INT 0
62022: PPUSH
62023: PPUSH
62024: PPUSH
62025: PPUSH
62026: PPUSH
62027: PPUSH
62028: PPUSH
// result := [ ] ;
62029: LD_ADDR_VAR 0 4
62033: PUSH
62034: EMPTY
62035: ST_TO_ADDR
// if x - r < 0 then
62036: LD_VAR 0 1
62040: PUSH
62041: LD_VAR 0 3
62045: MINUS
62046: PUSH
62047: LD_INT 0
62049: LESS
62050: IFFALSE 62062
// min_x := 0 else
62052: LD_ADDR_VAR 0 8
62056: PUSH
62057: LD_INT 0
62059: ST_TO_ADDR
62060: GO 62078
// min_x := x - r ;
62062: LD_ADDR_VAR 0 8
62066: PUSH
62067: LD_VAR 0 1
62071: PUSH
62072: LD_VAR 0 3
62076: MINUS
62077: ST_TO_ADDR
// if y - r < 0 then
62078: LD_VAR 0 2
62082: PUSH
62083: LD_VAR 0 3
62087: MINUS
62088: PUSH
62089: LD_INT 0
62091: LESS
62092: IFFALSE 62104
// min_y := 0 else
62094: LD_ADDR_VAR 0 7
62098: PUSH
62099: LD_INT 0
62101: ST_TO_ADDR
62102: GO 62120
// min_y := y - r ;
62104: LD_ADDR_VAR 0 7
62108: PUSH
62109: LD_VAR 0 2
62113: PUSH
62114: LD_VAR 0 3
62118: MINUS
62119: ST_TO_ADDR
// max_x := x + r ;
62120: LD_ADDR_VAR 0 9
62124: PUSH
62125: LD_VAR 0 1
62129: PUSH
62130: LD_VAR 0 3
62134: PLUS
62135: ST_TO_ADDR
// max_y := y + r ;
62136: LD_ADDR_VAR 0 10
62140: PUSH
62141: LD_VAR 0 2
62145: PUSH
62146: LD_VAR 0 3
62150: PLUS
62151: ST_TO_ADDR
// for _x = min_x to max_x do
62152: LD_ADDR_VAR 0 5
62156: PUSH
62157: DOUBLE
62158: LD_VAR 0 8
62162: DEC
62163: ST_TO_ADDR
62164: LD_VAR 0 9
62168: PUSH
62169: FOR_TO
62170: IFFALSE 62271
// for _y = min_y to max_y do
62172: LD_ADDR_VAR 0 6
62176: PUSH
62177: DOUBLE
62178: LD_VAR 0 7
62182: DEC
62183: ST_TO_ADDR
62184: LD_VAR 0 10
62188: PUSH
62189: FOR_TO
62190: IFFALSE 62267
// begin if not ValidHex ( _x , _y ) then
62192: LD_VAR 0 5
62196: PPUSH
62197: LD_VAR 0 6
62201: PPUSH
62202: CALL_OW 488
62206: NOT
62207: IFFALSE 62211
// continue ;
62209: GO 62189
// if GetResourceTypeXY ( _x , _y ) then
62211: LD_VAR 0 5
62215: PPUSH
62216: LD_VAR 0 6
62220: PPUSH
62221: CALL_OW 283
62225: IFFALSE 62265
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62227: LD_ADDR_VAR 0 4
62231: PUSH
62232: LD_VAR 0 4
62236: PPUSH
62237: LD_VAR 0 4
62241: PUSH
62242: LD_INT 1
62244: PLUS
62245: PPUSH
62246: LD_VAR 0 5
62250: PUSH
62251: LD_VAR 0 6
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PPUSH
62260: CALL_OW 1
62264: ST_TO_ADDR
// end ;
62265: GO 62189
62267: POP
62268: POP
62269: GO 62169
62271: POP
62272: POP
// end ;
62273: LD_VAR 0 4
62277: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62278: LD_INT 0
62280: PPUSH
62281: PPUSH
62282: PPUSH
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
62287: PPUSH
// if not units then
62288: LD_VAR 0 1
62292: NOT
62293: IFFALSE 62297
// exit ;
62295: GO 62821
// result := UnitFilter ( units , [ f_ok ] ) ;
62297: LD_ADDR_VAR 0 3
62301: PUSH
62302: LD_VAR 0 1
62306: PPUSH
62307: LD_INT 50
62309: PUSH
62310: EMPTY
62311: LIST
62312: PPUSH
62313: CALL_OW 72
62317: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62318: LD_ADDR_VAR 0 8
62322: PUSH
62323: LD_VAR 0 1
62327: PUSH
62328: LD_INT 1
62330: ARRAY
62331: PPUSH
62332: CALL_OW 255
62336: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62337: LD_ADDR_VAR 0 10
62341: PUSH
62342: LD_INT 29
62344: PUSH
62345: LD_INT 91
62347: PUSH
62348: LD_INT 49
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// if not result then
62356: LD_VAR 0 3
62360: NOT
62361: IFFALSE 62365
// exit ;
62363: GO 62821
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62365: LD_ADDR_VAR 0 5
62369: PUSH
62370: LD_INT 81
62372: PUSH
62373: LD_VAR 0 8
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PPUSH
62382: CALL_OW 69
62386: ST_TO_ADDR
// for i in result do
62387: LD_ADDR_VAR 0 4
62391: PUSH
62392: LD_VAR 0 3
62396: PUSH
62397: FOR_IN
62398: IFFALSE 62819
// begin tag := GetTag ( i ) + 1 ;
62400: LD_ADDR_VAR 0 9
62404: PUSH
62405: LD_VAR 0 4
62409: PPUSH
62410: CALL_OW 110
62414: PUSH
62415: LD_INT 1
62417: PLUS
62418: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62419: LD_ADDR_VAR 0 7
62423: PUSH
62424: LD_VAR 0 4
62428: PPUSH
62429: CALL_OW 250
62433: PPUSH
62434: LD_VAR 0 4
62438: PPUSH
62439: CALL_OW 251
62443: PPUSH
62444: LD_INT 6
62446: PPUSH
62447: CALL 62020 0 3
62451: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62452: LD_VAR 0 4
62456: PPUSH
62457: CALL_OW 247
62461: PUSH
62462: LD_INT 2
62464: EQUAL
62465: PUSH
62466: LD_VAR 0 7
62470: AND
62471: PUSH
62472: LD_VAR 0 4
62476: PPUSH
62477: CALL_OW 264
62481: PUSH
62482: LD_VAR 0 10
62486: IN
62487: NOT
62488: AND
62489: IFFALSE 62528
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62491: LD_VAR 0 4
62495: PPUSH
62496: LD_VAR 0 7
62500: PUSH
62501: LD_INT 1
62503: ARRAY
62504: PUSH
62505: LD_INT 1
62507: ARRAY
62508: PPUSH
62509: LD_VAR 0 7
62513: PUSH
62514: LD_INT 1
62516: ARRAY
62517: PUSH
62518: LD_INT 2
62520: ARRAY
62521: PPUSH
62522: CALL_OW 116
62526: GO 62817
// if path > tag then
62528: LD_VAR 0 2
62532: PUSH
62533: LD_VAR 0 9
62537: GREATER
62538: IFFALSE 62746
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62540: LD_ADDR_VAR 0 6
62544: PUSH
62545: LD_VAR 0 5
62549: PPUSH
62550: LD_INT 91
62552: PUSH
62553: LD_VAR 0 4
62557: PUSH
62558: LD_INT 8
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: PPUSH
62566: CALL_OW 72
62570: ST_TO_ADDR
// if nearEnemy then
62571: LD_VAR 0 6
62575: IFFALSE 62644
// begin if GetWeapon ( i ) = ru_time_lapser then
62577: LD_VAR 0 4
62581: PPUSH
62582: CALL_OW 264
62586: PUSH
62587: LD_INT 49
62589: EQUAL
62590: IFFALSE 62618
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62592: LD_VAR 0 4
62596: PPUSH
62597: LD_VAR 0 6
62601: PPUSH
62602: LD_VAR 0 4
62606: PPUSH
62607: CALL_OW 74
62611: PPUSH
62612: CALL_OW 112
62616: GO 62642
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62618: LD_VAR 0 4
62622: PPUSH
62623: LD_VAR 0 6
62627: PPUSH
62628: LD_VAR 0 4
62632: PPUSH
62633: CALL_OW 74
62637: PPUSH
62638: CALL_OW 115
// end else
62642: GO 62744
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62644: LD_VAR 0 4
62648: PPUSH
62649: LD_VAR 0 2
62653: PUSH
62654: LD_VAR 0 9
62658: ARRAY
62659: PUSH
62660: LD_INT 1
62662: ARRAY
62663: PPUSH
62664: LD_VAR 0 2
62668: PUSH
62669: LD_VAR 0 9
62673: ARRAY
62674: PUSH
62675: LD_INT 2
62677: ARRAY
62678: PPUSH
62679: CALL_OW 297
62683: PUSH
62684: LD_INT 6
62686: GREATER
62687: IFFALSE 62730
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62689: LD_VAR 0 4
62693: PPUSH
62694: LD_VAR 0 2
62698: PUSH
62699: LD_VAR 0 9
62703: ARRAY
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PPUSH
62709: LD_VAR 0 2
62713: PUSH
62714: LD_VAR 0 9
62718: ARRAY
62719: PUSH
62720: LD_INT 2
62722: ARRAY
62723: PPUSH
62724: CALL_OW 114
62728: GO 62744
// SetTag ( i , tag ) ;
62730: LD_VAR 0 4
62734: PPUSH
62735: LD_VAR 0 9
62739: PPUSH
62740: CALL_OW 109
// end else
62744: GO 62817
// if enemy then
62746: LD_VAR 0 5
62750: IFFALSE 62817
// begin if GetWeapon ( i ) = ru_time_lapser then
62752: LD_VAR 0 4
62756: PPUSH
62757: CALL_OW 264
62761: PUSH
62762: LD_INT 49
62764: EQUAL
62765: IFFALSE 62793
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62767: LD_VAR 0 4
62771: PPUSH
62772: LD_VAR 0 5
62776: PPUSH
62777: LD_VAR 0 4
62781: PPUSH
62782: CALL_OW 74
62786: PPUSH
62787: CALL_OW 112
62791: GO 62817
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62793: LD_VAR 0 4
62797: PPUSH
62798: LD_VAR 0 5
62802: PPUSH
62803: LD_VAR 0 4
62807: PPUSH
62808: CALL_OW 74
62812: PPUSH
62813: CALL_OW 115
// end ; end ;
62817: GO 62397
62819: POP
62820: POP
// end ;
62821: LD_VAR 0 3
62825: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62826: LD_INT 0
62828: PPUSH
62829: PPUSH
62830: PPUSH
// if not unit or IsInUnit ( unit ) then
62831: LD_VAR 0 1
62835: NOT
62836: PUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 310
62846: OR
62847: IFFALSE 62851
// exit ;
62849: GO 62942
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62851: LD_ADDR_VAR 0 4
62855: PUSH
62856: LD_VAR 0 1
62860: PPUSH
62861: CALL_OW 250
62865: PPUSH
62866: LD_VAR 0 2
62870: PPUSH
62871: LD_INT 1
62873: PPUSH
62874: CALL_OW 272
62878: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62879: LD_ADDR_VAR 0 5
62883: PUSH
62884: LD_VAR 0 1
62888: PPUSH
62889: CALL_OW 251
62893: PPUSH
62894: LD_VAR 0 2
62898: PPUSH
62899: LD_INT 1
62901: PPUSH
62902: CALL_OW 273
62906: ST_TO_ADDR
// if ValidHex ( x , y ) then
62907: LD_VAR 0 4
62911: PPUSH
62912: LD_VAR 0 5
62916: PPUSH
62917: CALL_OW 488
62921: IFFALSE 62942
// ComTurnXY ( unit , x , y ) ;
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_VAR 0 4
62932: PPUSH
62933: LD_VAR 0 5
62937: PPUSH
62938: CALL_OW 118
// end ;
62942: LD_VAR 0 3
62946: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62947: LD_INT 0
62949: PPUSH
62950: PPUSH
// result := false ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// if not units then
62959: LD_VAR 0 2
62963: NOT
62964: IFFALSE 62968
// exit ;
62966: GO 63013
// for i in units do
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_VAR 0 2
62977: PUSH
62978: FOR_IN
62979: IFFALSE 63011
// if See ( side , i ) then
62981: LD_VAR 0 1
62985: PPUSH
62986: LD_VAR 0 4
62990: PPUSH
62991: CALL_OW 292
62995: IFFALSE 63009
// begin result := true ;
62997: LD_ADDR_VAR 0 3
63001: PUSH
63002: LD_INT 1
63004: ST_TO_ADDR
// exit ;
63005: POP
63006: POP
63007: GO 63013
// end ;
63009: GO 62978
63011: POP
63012: POP
// end ;
63013: LD_VAR 0 3
63017: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63018: LD_INT 0
63020: PPUSH
63021: PPUSH
63022: PPUSH
63023: PPUSH
// if not unit or not points then
63024: LD_VAR 0 1
63028: NOT
63029: PUSH
63030: LD_VAR 0 2
63034: NOT
63035: OR
63036: IFFALSE 63040
// exit ;
63038: GO 63130
// dist := 99999 ;
63040: LD_ADDR_VAR 0 5
63044: PUSH
63045: LD_INT 99999
63047: ST_TO_ADDR
// for i in points do
63048: LD_ADDR_VAR 0 4
63052: PUSH
63053: LD_VAR 0 2
63057: PUSH
63058: FOR_IN
63059: IFFALSE 63128
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63061: LD_ADDR_VAR 0 6
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: LD_VAR 0 4
63075: PUSH
63076: LD_INT 1
63078: ARRAY
63079: PPUSH
63080: LD_VAR 0 4
63084: PUSH
63085: LD_INT 2
63087: ARRAY
63088: PPUSH
63089: CALL_OW 297
63093: ST_TO_ADDR
// if tmpDist < dist then
63094: LD_VAR 0 6
63098: PUSH
63099: LD_VAR 0 5
63103: LESS
63104: IFFALSE 63126
// begin result := i ;
63106: LD_ADDR_VAR 0 3
63110: PUSH
63111: LD_VAR 0 4
63115: ST_TO_ADDR
// dist := tmpDist ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: LD_VAR 0 6
63125: ST_TO_ADDR
// end ; end ;
63126: GO 63058
63128: POP
63129: POP
// end ;
63130: LD_VAR 0 3
63134: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63135: LD_INT 0
63137: PPUSH
// uc_side := side ;
63138: LD_ADDR_OWVAR 20
63142: PUSH
63143: LD_VAR 0 1
63147: ST_TO_ADDR
// uc_nation := 3 ;
63148: LD_ADDR_OWVAR 21
63152: PUSH
63153: LD_INT 3
63155: ST_TO_ADDR
// vc_chassis := 25 ;
63156: LD_ADDR_OWVAR 37
63160: PUSH
63161: LD_INT 25
63163: ST_TO_ADDR
// vc_engine := engine_siberite ;
63164: LD_ADDR_OWVAR 39
63168: PUSH
63169: LD_INT 3
63171: ST_TO_ADDR
// vc_control := control_computer ;
63172: LD_ADDR_OWVAR 38
63176: PUSH
63177: LD_INT 3
63179: ST_TO_ADDR
// vc_weapon := 59 ;
63180: LD_ADDR_OWVAR 40
63184: PUSH
63185: LD_INT 59
63187: ST_TO_ADDR
// result := CreateVehicle ;
63188: LD_ADDR_VAR 0 5
63192: PUSH
63193: CALL_OW 45
63197: ST_TO_ADDR
// SetDir ( result , d ) ;
63198: LD_VAR 0 5
63202: PPUSH
63203: LD_VAR 0 4
63207: PPUSH
63208: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63212: LD_VAR 0 5
63216: PPUSH
63217: LD_VAR 0 2
63221: PPUSH
63222: LD_VAR 0 3
63226: PPUSH
63227: LD_INT 0
63229: PPUSH
63230: CALL_OW 48
// end ;
63234: LD_VAR 0 5
63238: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63267: LD_VAR 0 1
63271: NOT
63272: PUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: CALL_OW 264
63282: PUSH
63283: LD_INT 12
63285: PUSH
63286: LD_INT 51
63288: PUSH
63289: LD_INT 32
63291: PUSH
63292: LD_INT 89
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: IN
63301: NOT
63302: OR
63303: IFFALSE 63307
// exit ;
63305: GO 63405
// for i := 1 to 3 do
63307: LD_ADDR_VAR 0 3
63311: PUSH
63312: DOUBLE
63313: LD_INT 1
63315: DEC
63316: ST_TO_ADDR
63317: LD_INT 3
63319: PUSH
63320: FOR_TO
63321: IFFALSE 63403
// begin tmp := GetCargo ( cargo , i ) ;
63323: LD_ADDR_VAR 0 4
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: LD_VAR 0 3
63337: PPUSH
63338: CALL_OW 289
63342: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63343: LD_ADDR_VAR 0 2
63347: PUSH
63348: LD_VAR 0 2
63352: PPUSH
63353: LD_VAR 0 3
63357: PPUSH
63358: LD_VAR 0 4
63362: PPUSH
63363: CALL_OW 1
63367: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63368: LD_ADDR_VAR 0 2
63372: PUSH
63373: LD_VAR 0 2
63377: PPUSH
63378: LD_INT 4
63380: PPUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 4
63388: ARRAY
63389: PUSH
63390: LD_VAR 0 4
63394: PLUS
63395: PPUSH
63396: CALL_OW 1
63400: ST_TO_ADDR
// end ;
63401: GO 63320
63403: POP
63404: POP
// end ;
63405: LD_VAR 0 2
63409: RET
// export function Length ( array ) ; begin
63410: LD_INT 0
63412: PPUSH
// result := array + 0 ;
63413: LD_ADDR_VAR 0 2
63417: PUSH
63418: LD_VAR 0 1
63422: PUSH
63423: LD_INT 0
63425: PLUS
63426: ST_TO_ADDR
// end ;
63427: LD_VAR 0 2
63431: RET
// export function PrepareArray ( array ) ; begin
63432: LD_INT 0
63434: PPUSH
// result := array diff 0 ;
63435: LD_ADDR_VAR 0 2
63439: PUSH
63440: LD_VAR 0 1
63444: PUSH
63445: LD_INT 0
63447: DIFF
63448: ST_TO_ADDR
// if not result [ 1 ] then
63449: LD_VAR 0 2
63453: PUSH
63454: LD_INT 1
63456: ARRAY
63457: NOT
63458: IFFALSE 63478
// result := Delete ( result , 1 ) ;
63460: LD_ADDR_VAR 0 2
63464: PUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: LD_INT 1
63472: PPUSH
63473: CALL_OW 3
63477: ST_TO_ADDR
// end ;
63478: LD_VAR 0 2
63482: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63483: LD_INT 0
63485: PPUSH
63486: PPUSH
63487: PPUSH
63488: PPUSH
// sibRocketRange := 25 ;
63489: LD_ADDR_VAR 0 6
63493: PUSH
63494: LD_INT 25
63496: ST_TO_ADDR
// result := false ;
63497: LD_ADDR_VAR 0 4
63501: PUSH
63502: LD_INT 0
63504: ST_TO_ADDR
// for i := 0 to 5 do
63505: LD_ADDR_VAR 0 5
63509: PUSH
63510: DOUBLE
63511: LD_INT 0
63513: DEC
63514: ST_TO_ADDR
63515: LD_INT 5
63517: PUSH
63518: FOR_TO
63519: IFFALSE 63586
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63521: LD_VAR 0 1
63525: PPUSH
63526: LD_VAR 0 5
63530: PPUSH
63531: LD_VAR 0 6
63535: PPUSH
63536: CALL_OW 272
63540: PPUSH
63541: LD_VAR 0 2
63545: PPUSH
63546: LD_VAR 0 5
63550: PPUSH
63551: LD_VAR 0 6
63555: PPUSH
63556: CALL_OW 273
63560: PPUSH
63561: LD_VAR 0 3
63565: PPUSH
63566: CALL_OW 309
63570: IFFALSE 63584
// begin result := true ;
63572: LD_ADDR_VAR 0 4
63576: PUSH
63577: LD_INT 1
63579: ST_TO_ADDR
// exit ;
63580: POP
63581: POP
63582: GO 63588
// end ;
63584: GO 63518
63586: POP
63587: POP
// end ;
63588: LD_VAR 0 4
63592: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63593: LD_INT 0
63595: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63596: LD_VAR 0 1
63600: PPUSH
63601: LD_VAR 0 2
63605: PPUSH
63606: LD_INT 0
63608: PPUSH
63609: LD_INT 0
63611: PPUSH
63612: LD_INT 1
63614: PPUSH
63615: LD_INT 0
63617: PPUSH
63618: CALL_OW 587
// end ; end_of_file
63622: LD_VAR 0 3
63626: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63627: LD_VAR 0 1
63631: PPUSH
63632: LD_VAR 0 2
63636: PPUSH
63637: LD_VAR 0 3
63641: PPUSH
63642: LD_VAR 0 4
63646: PPUSH
63647: LD_VAR 0 5
63651: PPUSH
63652: LD_VAR 0 6
63656: PPUSH
63657: CALL 2083 0 6
// end ;
63661: PPOPN 6
63663: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63664: LD_INT 0
63666: PPUSH
// begin if not units then
63667: LD_VAR 0 1
63671: NOT
63672: IFFALSE 63676
// exit ;
63674: GO 63676
// end ;
63676: PPOPN 7
63678: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63679: CALL 1977 0 0
// end ;
63683: PPOPN 1
63685: END
