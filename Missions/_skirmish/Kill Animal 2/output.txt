// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 958 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 10
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 10
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 10
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 10
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 9
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 10
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// for i = 1 to 3 do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_INT 3
 920: PUSH
 921: FOR_TO
 922: IFFALSE 951
// begin animal := CreateHuman ;
 924: LD_ADDR_VAR 0 3
 928: PUSH
 929: CALL_OW 44
 933: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 934: LD_VAR 0 3
 938: PPUSH
 939: LD_INT 11
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// end ;
 949: GO 921
 951: POP
 952: POP
// end ; end_of_file
 953: LD_VAR 0 1
 957: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 958: LD_INT 0
 960: PPUSH
// score_player := 0 ;
 961: LD_ADDR_EXP 28
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// score_enemy1 := 0 ;
 969: LD_ADDR_EXP 29
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// score_enemy2 := 0 ;
 977: LD_ADDR_EXP 30
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// score_enemy3 := 0 ;
 985: LD_ADDR_EXP 31
 989: PUSH
 990: LD_INT 0
 992: ST_TO_ADDR
// score_enemy4 := 0 ;
 993: LD_ADDR_EXP 32
 997: PUSH
 998: LD_INT 0
1000: ST_TO_ADDR
// score_enemy5 := 0 ;
1001: LD_ADDR_EXP 33
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// score_enemy6 := 0 ;
1009: LD_ADDR_EXP 34
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// score_enemy7 := 0 ;
1017: LD_ADDR_EXP 35
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// if difficulty > 1 then
1025: LD_OWVAR 67
1029: PUSH
1030: LD_INT 1
1032: GREATER
1033: IFFALSE 1045
// class_2 := class_sniper else
1035: LD_ADDR_EXP 26
1039: PUSH
1040: LD_INT 5
1042: ST_TO_ADDR
1043: GO 1053
// class_2 := class_soldier ;
1045: LD_ADDR_EXP 26
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// uc_side := 1 ;
1053: LD_ADDR_OWVAR 20
1057: PUSH
1058: LD_INT 1
1060: ST_TO_ADDR
// uc_nation := 1 ;
1061: LD_ADDR_OWVAR 21
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// hc_name :=  ;
1069: LD_ADDR_OWVAR 26
1073: PUSH
1074: LD_STRING 
1076: ST_TO_ADDR
// hc_sex := sex_male ;
1077: LD_ADDR_OWVAR 27
1081: PUSH
1082: LD_INT 1
1084: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1085: LD_ADDR_OWVAR 29
1089: PUSH
1090: LD_INT 12
1092: PUSH
1093: LD_INT 11
1095: PUSH
1096: LD_INT 10
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_OWVAR 67
1108: ARRAY
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: ST_TO_ADDR
// hc_class := class_1 ;
1117: LD_ADDR_OWVAR 28
1121: PUSH
1122: LD_EXP 25
1126: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1127: LD_ADDR_OWVAR 31
1131: PUSH
1132: LD_INT 10
1134: PUSH
1135: LD_INT 7
1137: PUSH
1138: LD_INT 5
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 0
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// hc_gallery :=  ;
1167: LD_ADDR_OWVAR 33
1171: PUSH
1172: LD_STRING 
1174: ST_TO_ADDR
// player := CreateHuman ;
1175: LD_ADDR_EXP 19
1179: PUSH
1180: CALL_OW 44
1184: ST_TO_ADDR
// uc_side := 2 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 2
1192: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1193: LD_ADDR_EXP 26
1197: PUSH
1198: LD_INT 5
1200: PUSH
1201: LD_INT 1
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 1
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 12
1218: ARRAY
1219: ST_TO_ADDR
// hc_sex := sex_male ;
1220: LD_ADDR_OWVAR 27
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1228: LD_ADDR_OWVAR 29
1232: PUSH
1233: LD_INT 11
1235: PUSH
1236: LD_INT 12
1238: PUSH
1239: LD_INT 13
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: LD_INT 10
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: ST_TO_ADDR
// hc_class := class_2 ;
1260: LD_ADDR_OWVAR 28
1264: PUSH
1265: LD_EXP 26
1269: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1270: LD_ADDR_OWVAR 31
1274: PUSH
1275: LD_INT 8
1277: PUSH
1278: LD_INT 9
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PUSH
1295: LD_INT 0
1297: PUSH
1298: LD_INT 0
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// hc_gallery :=  ;
1310: LD_ADDR_OWVAR 33
1314: PUSH
1315: LD_STRING 
1317: ST_TO_ADDR
// player_1 := CreateHuman ;
1318: LD_ADDR_EXP 17
1322: PUSH
1323: CALL_OW 44
1327: ST_TO_ADDR
// uc_side := 3 ;
1328: LD_ADDR_OWVAR 20
1332: PUSH
1333: LD_INT 3
1335: ST_TO_ADDR
// uc_nation := 1 ;
1336: LD_ADDR_OWVAR 21
1340: PUSH
1341: LD_INT 1
1343: ST_TO_ADDR
// hc_sex := sex_male ;
1344: LD_ADDR_OWVAR 27
1348: PUSH
1349: LD_INT 1
1351: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1352: LD_ADDR_OWVAR 29
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: LD_INT 11
1362: PUSH
1363: LD_INT 12
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PUSH
1377: LD_INT 10
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1384: LD_ADDR_EXP 26
1388: PUSH
1389: LD_INT 5
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 1
1401: PPUSH
1402: LD_INT 2
1404: PPUSH
1405: CALL_OW 12
1409: ARRAY
1410: ST_TO_ADDR
// hc_class := class_2 ;
1411: LD_ADDR_OWVAR 28
1415: PUSH
1416: LD_EXP 26
1420: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1421: LD_ADDR_OWVAR 31
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 7
1431: PUSH
1432: LD_INT 10
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_OWVAR 67
1444: ARRAY
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// hc_gallery :=  ;
1461: LD_ADDR_OWVAR 33
1465: PUSH
1466: LD_STRING 
1468: ST_TO_ADDR
// player_2 := CreateHuman ;
1469: LD_ADDR_EXP 18
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1479: LD_ADDR_EXP 26
1483: PUSH
1484: LD_INT 5
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: CALL_OW 12
1504: ARRAY
1505: ST_TO_ADDR
// hc_class := class_2 ;
1506: LD_ADDR_OWVAR 28
1510: PUSH
1511: LD_EXP 26
1515: ST_TO_ADDR
// player_3 := CreateHuman ;
1516: LD_ADDR_EXP 20
1520: PUSH
1521: CALL_OW 44
1525: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1526: LD_ADDR_EXP 26
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PPUSH
1544: LD_INT 2
1546: PPUSH
1547: CALL_OW 12
1551: ARRAY
1552: ST_TO_ADDR
// hc_class := class_2 ;
1553: LD_ADDR_OWVAR 28
1557: PUSH
1558: LD_EXP 26
1562: ST_TO_ADDR
// player_4 := CreateHuman ;
1563: LD_ADDR_EXP 21
1567: PUSH
1568: CALL_OW 44
1572: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1573: LD_ADDR_EXP 26
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 1
1590: PPUSH
1591: LD_INT 2
1593: PPUSH
1594: CALL_OW 12
1598: ARRAY
1599: ST_TO_ADDR
// hc_class := class_2 ;
1600: LD_ADDR_OWVAR 28
1604: PUSH
1605: LD_EXP 26
1609: ST_TO_ADDR
// player_5 := CreateHuman ;
1610: LD_ADDR_EXP 22
1614: PUSH
1615: CALL_OW 44
1619: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 5
1627: PUSH
1628: LD_INT 1
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 2
1640: PPUSH
1641: CALL_OW 12
1645: ARRAY
1646: ST_TO_ADDR
// hc_class := class_2 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_EXP 26
1656: ST_TO_ADDR
// player_6 := CreateHuman ;
1657: LD_ADDR_EXP 23
1661: PUSH
1662: CALL_OW 44
1666: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 5
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 2
1687: PPUSH
1688: CALL_OW 12
1692: ARRAY
1693: ST_TO_ADDR
// hc_class := class_2 ;
1694: LD_ADDR_OWVAR 28
1698: PUSH
1699: LD_EXP 26
1703: ST_TO_ADDR
// player_7 := CreateHuman ;
1704: LD_ADDR_EXP 24
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1714: LD_EXP 17
1718: PPUSH
1719: LD_INT 1
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1729: LD_EXP 18
1733: PPUSH
1734: LD_INT 2
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1744: LD_EXP 19
1748: PPUSH
1749: LD_INT 4
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1759: LD_EXP 20
1763: PPUSH
1764: LD_INT 3
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1774: LD_EXP 21
1778: PPUSH
1779: LD_INT 5
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1789: LD_EXP 22
1793: PPUSH
1794: LD_INT 6
1796: PPUSH
1797: LD_INT 0
1799: PPUSH
1800: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1804: LD_EXP 23
1808: PPUSH
1809: LD_INT 7
1811: PPUSH
1812: LD_INT 0
1814: PPUSH
1815: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1819: LD_EXP 24
1823: PPUSH
1824: LD_INT 8
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1834: LD_EXP 19
1838: PPUSH
1839: CALL_OW 87
// end ;
1843: LD_VAR 0 1
1847: RET
// every 0 0$01 trigger player do var i , un , tab ;
1848: LD_EXP 19
1852: IFFALSE 2181
1854: GO 1856
1856: DISABLE
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// begin enable ;
1862: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1863: LD_ADDR_VAR 0 3
1867: PUSH
1868: LD_EXP 17
1872: PUSH
1873: LD_EXP 18
1877: PUSH
1878: LD_EXP 20
1882: PUSH
1883: LD_EXP 21
1887: PUSH
1888: LD_EXP 22
1892: PUSH
1893: LD_EXP 23
1897: PUSH
1898: LD_EXP 24
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_INT 24
1924: PUSH
1925: LD_INT 250
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 72
1936: ST_TO_ADDR
// for i = 1 to un do
1937: LD_ADDR_VAR 0 1
1941: PUSH
1942: DOUBLE
1943: LD_INT 1
1945: DEC
1946: ST_TO_ADDR
1947: LD_VAR 0 2
1951: PUSH
1952: FOR_TO
1953: IFFALSE 2179
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1955: LD_VAR 0 2
1959: PUSH
1960: LD_VAR 0 1
1964: ARRAY
1965: PPUSH
1966: CALL_OW 300
1970: PUSH
1971: LD_VAR 0 2
1975: PUSH
1976: LD_VAR 0 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 314
1986: NOT
1987: AND
1988: IFFALSE 2177
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1990: LD_INT 22
1992: PUSH
1993: LD_INT 0
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_VAR 0 1
2014: ARRAY
2015: PPUSH
2016: CALL_OW 74
2020: PPUSH
2021: LD_VAR 0 2
2025: PUSH
2026: LD_VAR 0 1
2030: ARRAY
2031: PPUSH
2032: CALL_OW 296
2036: PUSH
2037: LD_INT 8
2039: GREATER
2040: IFFALSE 2131
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: PPUSH
2053: LD_INT 22
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: PPUSH
2068: LD_VAR 0 2
2072: PUSH
2073: LD_VAR 0 1
2077: ARRAY
2078: PPUSH
2079: CALL_OW 74
2083: PPUSH
2084: CALL_OW 250
2088: PPUSH
2089: LD_INT 22
2091: PUSH
2092: LD_INT 0
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: PPUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_VAR 0 1
2113: ARRAY
2114: PPUSH
2115: CALL_OW 74
2119: PPUSH
2120: CALL_OW 251
2124: PPUSH
2125: CALL_OW 111
2129: GO 2177
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2131: LD_VAR 0 2
2135: PUSH
2136: LD_VAR 0 1
2140: ARRAY
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 69
2156: PPUSH
2157: LD_VAR 0 2
2161: PUSH
2162: LD_VAR 0 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 74
2172: PPUSH
2173: CALL_OW 115
// end ;
2177: GO 1952
2179: POP
2180: POP
// end ; end_of_file
2181: PPOPN 3
2183: END
// on UnitGoesToRed ( un ) do begin if un = player then
2184: LD_VAR 0 1
2188: PUSH
2189: LD_EXP 19
2193: EQUAL
2194: IFFALSE 2203
// YouLost ( hunt2 ) ;
2196: LD_STRING hunt2
2198: PPUSH
2199: CALL_OW 104
// end ;
2203: PPOPN 1
2205: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2206: LD_INT 0
2208: PPUSH
2209: PPUSH
2210: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2211: LD_ADDR_VAR 0 4
2215: PUSH
2216: LD_EXP 19
2220: PUSH
2221: LD_EXP 17
2225: PUSH
2226: LD_EXP 18
2230: PUSH
2231: LD_EXP 20
2235: PUSH
2236: LD_EXP 21
2240: PUSH
2241: LD_EXP 22
2245: PUSH
2246: LD_EXP 23
2250: PUSH
2251: LD_EXP 24
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: PUSH
2276: LD_INT 0
2278: EQUAL
2279: PUSH
2280: LD_VAR 0 1
2284: PPUSH
2285: CALL_OW 110
2289: PUSH
2290: LD_INT 100
2292: NEG
2293: NONEQUAL
2294: AND
2295: IFFALSE 2693
// begin play := killer_unit ;
2297: LD_ADDR_VAR 0 6
2301: PUSH
2302: LD_VAR 0 3
2306: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2307: LD_VAR 0 1
2311: PPUSH
2312: CALL_OW 257
2316: PUSH
2317: LD_INT 18
2319: DOUBLE
2320: EQUAL
2321: IFTRUE 2325
2323: GO 2338
2325: POP
// score := PB ; class_tiger :
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_EXP 11
2335: ST_TO_ADDR
2336: GO 2444
2338: LD_INT 14
2340: DOUBLE
2341: EQUAL
2342: IFTRUE 2346
2344: GO 2359
2346: POP
// score := PT ; class_fish :
2347: LD_ADDR_VAR 0 5
2351: PUSH
2352: LD_EXP 12
2356: ST_TO_ADDR
2357: GO 2444
2359: LD_INT 20
2361: DOUBLE
2362: EQUAL
2363: IFTRUE 2367
2365: GO 2380
2367: POP
// score := PF ; 21 :
2368: LD_ADDR_VAR 0 5
2372: PUSH
2373: LD_EXP 13
2377: ST_TO_ADDR
2378: GO 2444
2380: LD_INT 21
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2401
2388: POP
// score := PH ; 13 :
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_EXP 14
2398: ST_TO_ADDR
2399: GO 2444
2401: LD_INT 13
2403: DOUBLE
2404: EQUAL
2405: IFTRUE 2409
2407: GO 2422
2409: POP
// score := PE ; class_apeman :
2410: LD_ADDR_VAR 0 5
2414: PUSH
2415: LD_EXP 10
2419: ST_TO_ADDR
2420: GO 2444
2422: LD_INT 12
2424: DOUBLE
2425: EQUAL
2426: IFTRUE 2430
2428: GO 2443
2430: POP
// score := PA ; end ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_EXP 16
2440: ST_TO_ADDR
2441: GO 2444
2443: POP
// if GetChassis ( un ) = 31 then
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL_OW 265
2453: PUSH
2454: LD_INT 31
2456: EQUAL
2457: IFFALSE 2469
// score := PM ;
2459: LD_ADDR_VAR 0 5
2463: PUSH
2464: LD_EXP 15
2468: ST_TO_ADDR
// if play = player then
2469: LD_VAR 0 6
2473: PUSH
2474: LD_EXP 19
2478: EQUAL
2479: IFFALSE 2497
// score_player := score_player + score ;
2481: LD_ADDR_EXP 28
2485: PUSH
2486: LD_EXP 28
2490: PUSH
2491: LD_VAR 0 5
2495: PLUS
2496: ST_TO_ADDR
// if play = player_1 then
2497: LD_VAR 0 6
2501: PUSH
2502: LD_EXP 17
2506: EQUAL
2507: IFFALSE 2525
// score_enemy1 := score_enemy1 + score ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PUSH
2519: LD_VAR 0 5
2523: PLUS
2524: ST_TO_ADDR
// if play = player_2 then
2525: LD_VAR 0 6
2529: PUSH
2530: LD_EXP 18
2534: EQUAL
2535: IFFALSE 2553
// score_enemy2 := score_enemy2 + score ;
2537: LD_ADDR_EXP 30
2541: PUSH
2542: LD_EXP 30
2546: PUSH
2547: LD_VAR 0 5
2551: PLUS
2552: ST_TO_ADDR
// if play = player_3 then
2553: LD_VAR 0 6
2557: PUSH
2558: LD_EXP 20
2562: EQUAL
2563: IFFALSE 2581
// score_enemy3 := score_enemy3 + score ;
2565: LD_ADDR_EXP 31
2569: PUSH
2570: LD_EXP 31
2574: PUSH
2575: LD_VAR 0 5
2579: PLUS
2580: ST_TO_ADDR
// if play = player_4 then
2581: LD_VAR 0 6
2585: PUSH
2586: LD_EXP 21
2590: EQUAL
2591: IFFALSE 2609
// score_enemy4 := score_enemy4 + score ;
2593: LD_ADDR_EXP 32
2597: PUSH
2598: LD_EXP 32
2602: PUSH
2603: LD_VAR 0 5
2607: PLUS
2608: ST_TO_ADDR
// if play = player_5 then
2609: LD_VAR 0 6
2613: PUSH
2614: LD_EXP 22
2618: EQUAL
2619: IFFALSE 2637
// score_enemy5 := score_enemy5 + score ;
2621: LD_ADDR_EXP 33
2625: PUSH
2626: LD_EXP 33
2630: PUSH
2631: LD_VAR 0 5
2635: PLUS
2636: ST_TO_ADDR
// if play = player_6 then
2637: LD_VAR 0 6
2641: PUSH
2642: LD_EXP 23
2646: EQUAL
2647: IFFALSE 2665
// score_enemy6 := score_enemy6 + score ;
2649: LD_ADDR_EXP 34
2653: PUSH
2654: LD_EXP 34
2658: PUSH
2659: LD_VAR 0 5
2663: PLUS
2664: ST_TO_ADDR
// if play = player_7 then
2665: LD_VAR 0 6
2669: PUSH
2670: LD_EXP 24
2674: EQUAL
2675: IFFALSE 2693
// score_enemy7 := score_enemy7 + score ;
2677: LD_ADDR_EXP 35
2681: PUSH
2682: LD_EXP 35
2686: PUSH
2687: LD_VAR 0 5
2691: PLUS
2692: ST_TO_ADDR
// end ; end ;
2693: PPOPN 6
2695: END
// every 10 do
2696: GO 2698
2698: DISABLE
// begin enable ;
2699: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2700: LD_ADDR_OWVAR 47
2704: PUSH
2705: LD_STRING #player1
2707: PUSH
2708: LD_EXP 28
2712: PUSH
2713: LD_STRING #player2
2715: PUSH
2716: LD_EXP 29
2720: PUSH
2721: LD_STRING #player3
2723: PUSH
2724: LD_EXP 30
2728: PUSH
2729: LD_STRING #player4
2731: PUSH
2732: LD_EXP 31
2736: PUSH
2737: LD_STRING #player5
2739: PUSH
2740: LD_EXP 32
2744: PUSH
2745: LD_STRING #player6
2747: PUSH
2748: LD_EXP 33
2752: PUSH
2753: LD_STRING #player7
2755: PUSH
2756: LD_EXP 34
2760: PUSH
2761: LD_STRING #player8
2763: PUSH
2764: LD_EXP 35
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: ST_TO_ADDR
// end ;
2787: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2788: LD_VAR 0 1
2792: PUSH
2793: LD_OWVAR 2
2797: EQUAL
2798: PUSH
2799: LD_VAR 0 2
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: AND
2808: IFFALSE 2817
// YouLost ( hunt1 ) ;
2810: LD_STRING hunt1
2812: PPUSH
2813: CALL_OW 104
// end ;
2817: PPOPN 2
2819: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2820: LD_INT 22
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 0
2837: EQUAL
2838: IFFALSE 2947
2840: GO 2842
2842: DISABLE
// begin Wait ( 0 0$03 ) ;
2843: LD_INT 105
2845: PPUSH
2846: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2850: LD_EXP 28
2854: PUSH
2855: LD_EXP 29
2859: GREATER
2860: PUSH
2861: LD_EXP 28
2865: PUSH
2866: LD_EXP 30
2870: GREATER
2871: AND
2872: PUSH
2873: LD_EXP 28
2877: PUSH
2878: LD_EXP 31
2882: GREATER
2883: AND
2884: PUSH
2885: LD_EXP 28
2889: PUSH
2890: LD_EXP 32
2894: GREATER
2895: AND
2896: PUSH
2897: LD_EXP 28
2901: PUSH
2902: LD_EXP 33
2906: GREATER
2907: AND
2908: PUSH
2909: LD_EXP 28
2913: PUSH
2914: LD_EXP 34
2918: GREATER
2919: AND
2920: PUSH
2921: LD_EXP 28
2925: PUSH
2926: LD_EXP 35
2930: GREATER
2931: AND
2932: IFFALSE 2940
// YouWin else
2934: CALL_OW 103
2938: GO 2947
// YouLost ( hunt3 ) ;
2940: LD_STRING hunt3
2942: PPUSH
2943: CALL_OW 104
// end ; end_of_file
2947: END
