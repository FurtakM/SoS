// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 83 0 0
// InitGlobalVariables ;
  18: CALL 63300 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 3
  60: PUSH
  61: LD_INT 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: LIST
  71: LIST
  72: LIST
  73: PPUSH
  74: CALL 395 0 3
// PrepareHunters ( ) ;
  78: CALL 241 0 0
// end ;
  82: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 6
 346: PUSH
 347: LD_EXP 6
 351: PPUSH
 352: LD_EXP 6
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 3
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_INT 21
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 449: LD_ADDR_VAR 0 8
 453: PUSH
 454: LD_INT 20
 456: PUSH
 457: LD_INT 19
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: ST_TO_ADDR
// InitHc_All ( ) ;
 464: CALL_OW 584
// for i := 1 to numbers - 2 do
 468: LD_ADDR_VAR 0 5
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_VAR 0 3
 482: PUSH
 483: LD_INT 2
 485: MINUS
 486: PUSH
 487: FOR_TO
 488: IFFALSE 629
// begin if numbers [ i ] = 0 then
 490: LD_VAR 0 3
 494: PUSH
 495: LD_VAR 0 5
 499: ARRAY
 500: PUSH
 501: LD_INT 0
 503: EQUAL
 504: IFFALSE 508
// continue ;
 506: GO 487
// hc_class := classes [ i ] ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_VAR 0 7
 517: PUSH
 518: LD_VAR 0 5
 522: ARRAY
 523: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 524: LD_ADDR_OWVAR 29
 528: PUSH
 529: LD_INT 8
 531: PPUSH
 532: LD_INT 12
 534: PPUSH
 535: CALL_OW 12
 539: PUSH
 540: LD_INT 8
 542: PPUSH
 543: LD_INT 12
 545: PPUSH
 546: CALL_OW 12
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 555: LD_ADDR_OWVAR 35
 559: PUSH
 560: LD_INT 5
 562: NEG
 563: PPUSH
 564: LD_INT 5
 566: PPUSH
 567: CALL_OW 12
 571: PUSH
 572: LD_OWVAR 67
 576: PUSH
 577: LD_INT 5
 579: MUL
 580: PLUS
 581: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 582: LD_ADDR_VAR 0 6
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_VAR 0 3
 596: PUSH
 597: LD_VAR 0 5
 601: ARRAY
 602: PUSH
 603: FOR_TO
 604: IFFALSE 625
// PlaceUnitArea ( CreateHuman , area , false ) ;
 606: CALL_OW 44
 610: PPUSH
 611: LD_VAR 0 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
 623: GO 603
 625: POP
 626: POP
// end ;
 627: GO 487
 629: POP
 630: POP
// if not waterArea then
 631: LD_VAR 0 2
 635: NOT
 636: IFFALSE 640
// exit ;
 638: GO 800
// hc_class := waterClass [ 1 ] ;
 640: LD_ADDR_OWVAR 28
 644: PUSH
 645: LD_VAR 0 8
 649: PUSH
 650: LD_INT 1
 652: ARRAY
 653: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 654: LD_ADDR_OWVAR 29
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 10
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: ST_TO_ADDR
// hc_agressivity := 0 ;
 669: LD_ADDR_OWVAR 35
 673: PUSH
 674: LD_INT 0
 676: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 677: LD_ADDR_VAR 0 6
 681: PUSH
 682: DOUBLE
 683: LD_INT 1
 685: DEC
 686: ST_TO_ADDR
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 7
 694: ARRAY
 695: PUSH
 696: FOR_TO
 697: IFFALSE 718
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 699: CALL_OW 44
 703: PPUSH
 704: LD_VAR 0 2
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: CALL_OW 49
 716: GO 696
 718: POP
 719: POP
// hc_class := waterClass [ 2 ] ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_VAR 0 8
 729: PUSH
 730: LD_INT 2
 732: ARRAY
 733: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 734: LD_ADDR_OWVAR 29
 738: PUSH
 739: LD_INT 10
 741: PUSH
 742: LD_INT 10
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: ST_TO_ADDR
// hc_agressivity := 0 ;
 749: LD_ADDR_OWVAR 35
 753: PUSH
 754: LD_INT 0
 756: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 757: LD_ADDR_VAR 0 6
 761: PUSH
 762: DOUBLE
 763: LD_INT 1
 765: DEC
 766: ST_TO_ADDR
 767: LD_VAR 0 3
 771: PUSH
 772: LD_INT 8
 774: ARRAY
 775: PUSH
 776: FOR_TO
 777: IFFALSE 798
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: CALL_OW 49
 796: GO 776
 798: POP
 799: POP
// end ; end_of_file
 800: LD_VAR 0 4
 804: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 805: LD_INT 22
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: LD_INT 25
 817: PUSH
 818: LD_INT 15
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PPUSH
 829: CALL_OW 69
 833: IFFALSE 939
 835: GO 837
 837: DISABLE
 838: LD_INT 0
 840: PPUSH
// begin enable ;
 841: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 842: LD_ADDR_VAR 0 1
 846: PUSH
 847: LD_INT 22
 849: PUSH
 850: LD_INT 0
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PUSH
 857: LD_INT 25
 859: PUSH
 860: LD_INT 15
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PUSH
 867: EMPTY
 868: LIST
 869: LIST
 870: PPUSH
 871: CALL_OW 69
 875: PUSH
 876: FOR_IN
 877: IFFALSE 937
// if GetLives ( i ) < 1000 then
 879: LD_VAR 0 1
 883: PPUSH
 884: CALL_OW 256
 888: PUSH
 889: LD_INT 1000
 891: LESS
 892: IFFALSE 935
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: LD_INT 3
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PPUSH
 921: LD_VAR 0 1
 925: PPUSH
 926: CALL_OW 74
 930: PPUSH
 931: CALL_OW 115
 935: GO 876
 937: POP
 938: POP
// end ;
 939: PPOPN 1
 941: END
// every 3 do var i , enemy , x , y , d ;
 942: GO 944
 944: DISABLE
 945: LD_INT 0
 947: PPUSH
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
// begin enable ;
 952: ENABLE
// for i := 2 to huntersAmount do
 953: LD_ADDR_VAR 0 1
 957: PUSH
 958: DOUBLE
 959: LD_INT 2
 961: DEC
 962: ST_TO_ADDR
 963: LD_EXP 3
 967: PUSH
 968: FOR_TO
 969: IFFALSE 1308
// begin if not HasTask ( hunters [ i ] ) then
 971: LD_EXP 6
 975: PUSH
 976: LD_VAR 0 1
 980: ARRAY
 981: PPUSH
 982: CALL_OW 314
 986: NOT
 987: IFFALSE 1306
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 989: LD_ADDR_VAR 0 2
 993: PUSH
 994: LD_INT 22
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PPUSH
1004: CALL_OW 69
1008: PPUSH
1009: LD_EXP 6
1013: PUSH
1014: LD_VAR 0 1
1018: ARRAY
1019: PPUSH
1020: CALL_OW 74
1024: ST_TO_ADDR
// if not enemy then
1025: LD_VAR 0 2
1029: NOT
1030: IFFALSE 1034
// continue ;
1032: GO 968
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1034: LD_EXP 6
1038: PUSH
1039: LD_VAR 0 1
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 2
1049: PPUSH
1050: CALL_OW 296
1054: PUSH
1055: LD_INT 17
1057: LESS
1058: IFFALSE 1161
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1060: LD_EXP 6
1064: PUSH
1065: LD_VAR 0 1
1069: ARRAY
1070: PPUSH
1071: CALL_OW 257
1075: PUSH
1076: LD_INT 11
1078: EQUAL
1079: IFFALSE 1139
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1081: LD_VAR 0 2
1085: PPUSH
1086: CALL_OW 257
1090: PUSH
1091: LD_INT 19
1093: PUSH
1094: LD_INT 20
1096: PUSH
1097: LD_INT 13
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: IN
1105: IFFALSE 1124
// ComCarabine ( hunters [ i ] ) else
1107: LD_EXP 6
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: CALL_OW 162
1122: GO 1139
// ComSabre ( hunters [ i ] ) ;
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1139: LD_EXP 6
1143: PUSH
1144: LD_VAR 0 1
1148: ARRAY
1149: PPUSH
1150: LD_VAR 0 2
1154: PPUSH
1155: CALL_OW 115
// end else
1159: GO 1306
// begin d := rand ( 0 , 5 ) ;
1161: LD_ADDR_VAR 0 5
1165: PUSH
1166: LD_INT 0
1168: PPUSH
1169: LD_INT 5
1171: PPUSH
1172: CALL_OW 12
1176: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1177: LD_ADDR_VAR 0 3
1181: PUSH
1182: LD_EXP 6
1186: PUSH
1187: LD_VAR 0 1
1191: ARRAY
1192: PPUSH
1193: CALL_OW 250
1197: PPUSH
1198: LD_VAR 0 5
1202: PPUSH
1203: LD_INT 8
1205: PPUSH
1206: CALL_OW 272
1210: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1211: LD_ADDR_VAR 0 4
1215: PUSH
1216: LD_EXP 6
1220: PUSH
1221: LD_VAR 0 1
1225: ARRAY
1226: PPUSH
1227: CALL_OW 251
1231: PPUSH
1232: LD_VAR 0 5
1236: PPUSH
1237: LD_INT 8
1239: PPUSH
1240: CALL_OW 273
1244: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1245: LD_VAR 0 3
1249: PPUSH
1250: LD_VAR 0 4
1254: PPUSH
1255: CALL_OW 488
1259: PUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: LD_VAR 0 4
1269: PPUSH
1270: CALL_OW 428
1274: PUSH
1275: LD_INT 0
1277: EQUAL
1278: AND
1279: IFFALSE 1306
// ComMoveXY ( hunters [ i ] , x , y ) ;
1281: LD_EXP 6
1285: PUSH
1286: LD_VAR 0 1
1290: ARRAY
1291: PPUSH
1292: LD_VAR 0 3
1296: PPUSH
1297: LD_VAR 0 4
1301: PPUSH
1302: CALL_OW 111
// end ; end ; end ;
1306: GO 968
1308: POP
1309: POP
// end ; end_of_file
1310: PPOPN 5
1312: END
// on UnitGoesToRed ( un ) do var i ;
1313: LD_INT 0
1315: PPUSH
// begin if GetSide ( un ) = 1 then
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 255
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: IFFALSE 1338
// YouLost ( hunt2 ) ;
1331: LD_STRING hunt2
1333: PPUSH
1334: CALL_OW 104
// if GetSide ( un ) > 1 then
1338: LD_VAR 0 1
1342: PPUSH
1343: CALL_OW 255
1347: PUSH
1348: LD_INT 1
1350: GREATER
1351: IFFALSE 1404
// begin for i := 1 to 6 do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_INT 6
1365: PUSH
1366: FOR_TO
1367: IFFALSE 1390
// begin wait ( 0 0$1 ) ;
1369: LD_INT 35
1371: PPUSH
1372: CALL_OW 67
// SetLives ( un , 249 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 249
1383: PPUSH
1384: CALL_OW 234
// end ;
1388: GO 1366
1390: POP
1391: POP
// SetLives ( un , 1000 ) ;
1392: LD_VAR 0 1
1396: PPUSH
1397: LD_INT 1000
1399: PPUSH
1400: CALL_OW 234
// end ; end ;
1404: PPOPN 2
1406: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1407: LD_VAR 0 1
1411: PUSH
1412: LD_INT 1
1414: EQUAL
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 1
1423: GREATER
1424: AND
1425: IFFALSE 1434
// YouLost ( hunt1 ) ;
1427: LD_STRING hunt1
1429: PPUSH
1430: CALL_OW 104
// end ;
1434: PPOPN 2
1436: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1437: LD_INT 0
1439: PPUSH
// begin point := 0 ;
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 0
1447: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 257
1457: PUSH
1458: LD_INT 20
1460: DOUBLE
1461: EQUAL
1462: IFTRUE 1466
1464: GO 1477
1466: POP
// point := 10 ; class_horse :
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_INT 10
1474: ST_TO_ADDR
1475: GO 1611
1477: LD_INT 21
1479: DOUBLE
1480: EQUAL
1481: IFTRUE 1485
1483: GO 1496
1485: POP
// point := 10 ; class_baggie :
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: LD_INT 10
1493: ST_TO_ADDR
1494: GO 1611
1496: LD_INT 13
1498: DOUBLE
1499: EQUAL
1500: IFTRUE 1504
1502: GO 1515
1504: POP
// point := 5 ; class_phororhacos :
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_INT 5
1512: ST_TO_ADDR
1513: GO 1611
1515: LD_INT 18
1517: DOUBLE
1518: EQUAL
1519: IFTRUE 1523
1521: GO 1534
1523: POP
// point := 10 ; class_tiger :
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: LD_INT 10
1531: ST_TO_ADDR
1532: GO 1611
1534: LD_INT 14
1536: DOUBLE
1537: EQUAL
1538: IFTRUE 1542
1540: GO 1553
1542: POP
// point := 20 ; class_apeman :
1543: LD_ADDR_VAR 0 4
1547: PUSH
1548: LD_INT 20
1550: ST_TO_ADDR
1551: GO 1611
1553: LD_INT 12
1555: DOUBLE
1556: EQUAL
1557: IFTRUE 1561
1559: GO 1572
1561: POP
// point := 30 ; class_apeman_soldier :
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: LD_INT 30
1569: ST_TO_ADDR
1570: GO 1611
1572: LD_INT 15
1574: DOUBLE
1575: EQUAL
1576: IFTRUE 1580
1578: GO 1591
1580: POP
// point := 50 ; class_frog :
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_INT 50
1588: ST_TO_ADDR
1589: GO 1611
1591: LD_INT 19
1593: DOUBLE
1594: EQUAL
1595: IFTRUE 1599
1597: GO 1610
1599: POP
// point := 10 ; end ;
1600: LD_ADDR_VAR 0 4
1604: PUSH
1605: LD_INT 10
1607: ST_TO_ADDR
1608: GO 1611
1610: POP
// if point then
1611: LD_VAR 0 4
1615: IFFALSE 1654
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1617: LD_ADDR_EXP 5
1621: PUSH
1622: LD_EXP 5
1626: PPUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_EXP 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_VAR 0 4
1647: PLUS
1648: PPUSH
1649: CALL_OW 1
1653: ST_TO_ADDR
// end ;
1654: PPOPN 4
1656: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1657: LD_INT 22
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: CALL_OW 69
1671: PUSH
1672: LD_INT 10
1674: LESS
1675: IFFALSE 1789
1677: GO 1679
1679: DISABLE
// begin enable ;
1680: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1681: LD_INT 2
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: LD_INT 4
1692: PPUSH
1693: CALL_OW 12
1697: PUSH
1698: LD_INT 0
1700: PPUSH
1701: LD_INT 2
1703: PPUSH
1704: CALL_OW 12
1708: PUSH
1709: LD_INT 0
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: PUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: CALL_OW 12
1730: PUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 4
1736: PPUSH
1737: CALL_OW 12
1741: PUSH
1742: LD_INT 0
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: CALL_OW 12
1752: PUSH
1753: LD_INT 0
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: CALL_OW 12
1763: PUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 2
1769: PPUSH
1770: CALL_OW 12
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL 395 0 3
// end ;
1789: END
// every 0 0$1 do var i ;
1790: GO 1792
1792: DISABLE
1793: LD_INT 0
1795: PPUSH
// begin enable ;
1796: ENABLE
// display_strings := [ ] ;
1797: LD_ADDR_OWVAR 47
1801: PUSH
1802: EMPTY
1803: ST_TO_ADDR
// for i := 1 to huntersAmount do
1804: LD_ADDR_VAR 0 1
1808: PUSH
1809: DOUBLE
1810: LD_INT 1
1812: DEC
1813: ST_TO_ADDR
1814: LD_EXP 3
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1954
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1822: LD_ADDR_OWVAR 47
1826: PUSH
1827: LD_OWVAR 47
1831: PUSH
1832: LD_STRING #player
1834: PUSH
1835: LD_VAR 0 1
1839: STR
1840: PUSH
1841: LD_VAR 0 1
1845: PUSH
1846: LD_EXP 5
1850: PUSH
1851: LD_VAR 0 1
1855: ARRAY
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: ADD
1862: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1863: LD_EXP 5
1867: PUSH
1868: LD_VAR 0 1
1872: ARRAY
1873: PUSH
1874: LD_INT 750
1876: PUSH
1877: LD_INT 1250
1879: PUSH
1880: LD_INT 2000
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_OWVAR 67
1892: ARRAY
1893: GREATEREQUAL
1894: IFFALSE 1952
// begin if i = 1 then
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 1
1903: EQUAL
1904: IFFALSE 1945
// begin DialogueOn ;
1906: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1910: LD_STRING ACH_HUNT
1912: PPUSH
1913: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1917: LD_ADDR_OWVAR 47
1921: PUSH
1922: LD_STRING #hunting-win
1924: PUSH
1925: EMPTY
1926: LIST
1927: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1928: LD_INT 175
1930: PPUSH
1931: CALL_OW 68
// YouWin ;
1935: CALL_OW 103
// DialogueOff ;
1939: CALL_OW 7
// end else
1943: GO 1952
// YouLost ( hunt3 ) ;
1945: LD_STRING hunt3
1947: PPUSH
1948: CALL_OW 104
// end ; end ;
1952: GO 1819
1954: POP
1955: POP
// end ; end_of_file end_of_file
1956: PPOPN 1
1958: END
// every 0 0$1 do
1959: GO 1961
1961: DISABLE
// begin enable ;
1962: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1963: LD_STRING updateTimer(
1965: PUSH
1966: LD_OWVAR 1
1970: STR
1971: PUSH
1972: LD_STRING );
1974: STR
1975: PPUSH
1976: CALL_OW 559
// end ;
1980: END
// export function SOS_MapStart ( ) ; begin
1981: LD_INT 0
1983: PPUSH
// if streamModeActive then
1984: LD_EXP 7
1988: IFFALSE 1997
// DefineStreamItems ( true ) ;
1990: LD_INT 1
1992: PPUSH
1993: CALL 3651 0 1
// UpdateFactoryWaypoints ( ) ;
1997: CALL 16512 0 0
// UpdateWarehouseGatheringPoints ( ) ;
2001: CALL 16769 0 0
// end ;
2005: LD_VAR 0 1
2009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2010: LD_INT 0
2012: PPUSH
// if p2 = 100 then
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 100
2020: EQUAL
2021: IFFALSE 3024
// begin if not StreamModeActive then
2023: LD_EXP 7
2027: NOT
2028: IFFALSE 2038
// StreamModeActive := true ;
2030: LD_ADDR_EXP 7
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// if p3 = 0 then
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 0
2045: EQUAL
2046: IFFALSE 2052
// InitStreamMode ;
2048: CALL 3187 0 0
// if p3 = 1 then
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 1
2059: EQUAL
2060: IFFALSE 2070
// sRocket := true ;
2062: LD_ADDR_EXP 12
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// if p3 = 2 then
2070: LD_VAR 0 3
2074: PUSH
2075: LD_INT 2
2077: EQUAL
2078: IFFALSE 2088
// sSpeed := true ;
2080: LD_ADDR_EXP 11
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// if p3 = 3 then
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 3
2095: EQUAL
2096: IFFALSE 2106
// sEngine := true ;
2098: LD_ADDR_EXP 13
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// if p3 = 4 then
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 4
2113: EQUAL
2114: IFFALSE 2124
// sSpec := true ;
2116: LD_ADDR_EXP 10
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// if p3 = 5 then
2124: LD_VAR 0 3
2128: PUSH
2129: LD_INT 5
2131: EQUAL
2132: IFFALSE 2142
// sLevel := true ;
2134: LD_ADDR_EXP 14
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// if p3 = 6 then
2142: LD_VAR 0 3
2146: PUSH
2147: LD_INT 6
2149: EQUAL
2150: IFFALSE 2160
// sArmoury := true ;
2152: LD_ADDR_EXP 15
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// if p3 = 7 then
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 7
2167: EQUAL
2168: IFFALSE 2178
// sRadar := true ;
2170: LD_ADDR_EXP 16
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// if p3 = 8 then
2178: LD_VAR 0 3
2182: PUSH
2183: LD_INT 8
2185: EQUAL
2186: IFFALSE 2196
// sBunker := true ;
2188: LD_ADDR_EXP 17
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// if p3 = 9 then
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 9
2203: EQUAL
2204: IFFALSE 2214
// sHack := true ;
2206: LD_ADDR_EXP 18
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// if p3 = 10 then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 10
2221: EQUAL
2222: IFFALSE 2232
// sFire := true ;
2224: LD_ADDR_EXP 19
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// if p3 = 11 then
2232: LD_VAR 0 3
2236: PUSH
2237: LD_INT 11
2239: EQUAL
2240: IFFALSE 2250
// sRefresh := true ;
2242: LD_ADDR_EXP 20
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// if p3 = 12 then
2250: LD_VAR 0 3
2254: PUSH
2255: LD_INT 12
2257: EQUAL
2258: IFFALSE 2268
// sExp := true ;
2260: LD_ADDR_EXP 21
2264: PUSH
2265: LD_INT 1
2267: ST_TO_ADDR
// if p3 = 13 then
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 13
2275: EQUAL
2276: IFFALSE 2286
// sDepot := true ;
2278: LD_ADDR_EXP 22
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// if p3 = 14 then
2286: LD_VAR 0 3
2290: PUSH
2291: LD_INT 14
2293: EQUAL
2294: IFFALSE 2304
// sFlag := true ;
2296: LD_ADDR_EXP 23
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// if p3 = 15 then
2304: LD_VAR 0 3
2308: PUSH
2309: LD_INT 15
2311: EQUAL
2312: IFFALSE 2322
// sKamikadze := true ;
2314: LD_ADDR_EXP 31
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// if p3 = 16 then
2322: LD_VAR 0 3
2326: PUSH
2327: LD_INT 16
2329: EQUAL
2330: IFFALSE 2340
// sTroll := true ;
2332: LD_ADDR_EXP 32
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// if p3 = 17 then
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 17
2347: EQUAL
2348: IFFALSE 2358
// sSlow := true ;
2350: LD_ADDR_EXP 33
2354: PUSH
2355: LD_INT 1
2357: ST_TO_ADDR
// if p3 = 18 then
2358: LD_VAR 0 3
2362: PUSH
2363: LD_INT 18
2365: EQUAL
2366: IFFALSE 2376
// sLack := true ;
2368: LD_ADDR_EXP 34
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// if p3 = 19 then
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 19
2383: EQUAL
2384: IFFALSE 2394
// sTank := true ;
2386: LD_ADDR_EXP 36
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// if p3 = 20 then
2394: LD_VAR 0 3
2398: PUSH
2399: LD_INT 20
2401: EQUAL
2402: IFFALSE 2412
// sRemote := true ;
2404: LD_ADDR_EXP 37
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// if p3 = 21 then
2412: LD_VAR 0 3
2416: PUSH
2417: LD_INT 21
2419: EQUAL
2420: IFFALSE 2430
// sPowell := true ;
2422: LD_ADDR_EXP 38
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// if p3 = 22 then
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 22
2437: EQUAL
2438: IFFALSE 2448
// sTeleport := true ;
2440: LD_ADDR_EXP 41
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// if p3 = 23 then
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 23
2455: EQUAL
2456: IFFALSE 2466
// sOilTower := true ;
2458: LD_ADDR_EXP 43
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// if p3 = 24 then
2466: LD_VAR 0 3
2470: PUSH
2471: LD_INT 24
2473: EQUAL
2474: IFFALSE 2484
// sShovel := true ;
2476: LD_ADDR_EXP 44
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// if p3 = 25 then
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 25
2491: EQUAL
2492: IFFALSE 2502
// sSheik := true ;
2494: LD_ADDR_EXP 45
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// if p3 = 26 then
2502: LD_VAR 0 3
2506: PUSH
2507: LD_INT 26
2509: EQUAL
2510: IFFALSE 2520
// sEarthquake := true ;
2512: LD_ADDR_EXP 47
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// if p3 = 27 then
2520: LD_VAR 0 3
2524: PUSH
2525: LD_INT 27
2527: EQUAL
2528: IFFALSE 2538
// sAI := true ;
2530: LD_ADDR_EXP 48
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if p3 = 28 then
2538: LD_VAR 0 3
2542: PUSH
2543: LD_INT 28
2545: EQUAL
2546: IFFALSE 2556
// sCargo := true ;
2548: LD_ADDR_EXP 51
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// if p3 = 29 then
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 29
2563: EQUAL
2564: IFFALSE 2574
// sDLaser := true ;
2566: LD_ADDR_EXP 52
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if p3 = 30 then
2574: LD_VAR 0 3
2578: PUSH
2579: LD_INT 30
2581: EQUAL
2582: IFFALSE 2592
// sExchange := true ;
2584: LD_ADDR_EXP 53
2588: PUSH
2589: LD_INT 1
2591: ST_TO_ADDR
// if p3 = 31 then
2592: LD_VAR 0 3
2596: PUSH
2597: LD_INT 31
2599: EQUAL
2600: IFFALSE 2610
// sFac := true ;
2602: LD_ADDR_EXP 54
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// if p3 = 32 then
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 32
2617: EQUAL
2618: IFFALSE 2628
// sPower := true ;
2620: LD_ADDR_EXP 55
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// if p3 = 33 then
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 33
2635: EQUAL
2636: IFFALSE 2646
// sRandom := true ;
2638: LD_ADDR_EXP 56
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// if p3 = 34 then
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 34
2653: EQUAL
2654: IFFALSE 2664
// sShield := true ;
2656: LD_ADDR_EXP 57
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// if p3 = 35 then
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 35
2671: EQUAL
2672: IFFALSE 2682
// sTime := true ;
2674: LD_ADDR_EXP 58
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// if p3 = 36 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 36
2689: EQUAL
2690: IFFALSE 2700
// sTools := true ;
2692: LD_ADDR_EXP 59
2696: PUSH
2697: LD_INT 1
2699: ST_TO_ADDR
// if p3 = 101 then
2700: LD_VAR 0 3
2704: PUSH
2705: LD_INT 101
2707: EQUAL
2708: IFFALSE 2718
// sSold := true ;
2710: LD_ADDR_EXP 24
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// if p3 = 102 then
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 102
2725: EQUAL
2726: IFFALSE 2736
// sDiff := true ;
2728: LD_ADDR_EXP 25
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// if p3 = 103 then
2736: LD_VAR 0 3
2740: PUSH
2741: LD_INT 103
2743: EQUAL
2744: IFFALSE 2754
// sFog := true ;
2746: LD_ADDR_EXP 28
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// if p3 = 104 then
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 104
2761: EQUAL
2762: IFFALSE 2772
// sReset := true ;
2764: LD_ADDR_EXP 29
2768: PUSH
2769: LD_INT 1
2771: ST_TO_ADDR
// if p3 = 105 then
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 105
2779: EQUAL
2780: IFFALSE 2790
// sSun := true ;
2782: LD_ADDR_EXP 30
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// if p3 = 106 then
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 106
2797: EQUAL
2798: IFFALSE 2808
// sTiger := true ;
2800: LD_ADDR_EXP 26
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// if p3 = 107 then
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 107
2815: EQUAL
2816: IFFALSE 2826
// sBomb := true ;
2818: LD_ADDR_EXP 27
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// if p3 = 108 then
2826: LD_VAR 0 3
2830: PUSH
2831: LD_INT 108
2833: EQUAL
2834: IFFALSE 2844
// sWound := true ;
2836: LD_ADDR_EXP 35
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// if p3 = 109 then
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 109
2851: EQUAL
2852: IFFALSE 2862
// sBetray := true ;
2854: LD_ADDR_EXP 39
2858: PUSH
2859: LD_INT 1
2861: ST_TO_ADDR
// if p3 = 110 then
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 110
2869: EQUAL
2870: IFFALSE 2880
// sContamin := true ;
2872: LD_ADDR_EXP 40
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// if p3 = 111 then
2880: LD_VAR 0 3
2884: PUSH
2885: LD_INT 111
2887: EQUAL
2888: IFFALSE 2898
// sOil := true ;
2890: LD_ADDR_EXP 42
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// if p3 = 112 then
2898: LD_VAR 0 3
2902: PUSH
2903: LD_INT 112
2905: EQUAL
2906: IFFALSE 2916
// sStu := true ;
2908: LD_ADDR_EXP 46
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// if p3 = 113 then
2916: LD_VAR 0 3
2920: PUSH
2921: LD_INT 113
2923: EQUAL
2924: IFFALSE 2934
// sBazooka := true ;
2926: LD_ADDR_EXP 49
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// if p3 = 114 then
2934: LD_VAR 0 3
2938: PUSH
2939: LD_INT 114
2941: EQUAL
2942: IFFALSE 2952
// sMortar := true ;
2944: LD_ADDR_EXP 50
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// if p3 = 115 then
2952: LD_VAR 0 3
2956: PUSH
2957: LD_INT 115
2959: EQUAL
2960: IFFALSE 2970
// sRanger := true ;
2962: LD_ADDR_EXP 60
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// if p3 = 116 then
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 116
2977: EQUAL
2978: IFFALSE 2988
// sComputer := true ;
2980: LD_ADDR_EXP 61
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// if p3 = 117 then
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 117
2995: EQUAL
2996: IFFALSE 3006
// s30 := true ;
2998: LD_ADDR_EXP 62
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// if p3 = 118 then
3006: LD_VAR 0 3
3010: PUSH
3011: LD_INT 118
3013: EQUAL
3014: IFFALSE 3024
// s60 := true ;
3016: LD_ADDR_EXP 63
3020: PUSH
3021: LD_INT 1
3023: ST_TO_ADDR
// end ; if p2 = 101 then
3024: LD_VAR 0 2
3028: PUSH
3029: LD_INT 101
3031: EQUAL
3032: IFFALSE 3160
// begin case p3 of 1 :
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 1
3041: DOUBLE
3042: EQUAL
3043: IFTRUE 3047
3045: GO 3054
3047: POP
// hHackUnlimitedResources ; 2 :
3048: CALL 15258 0 0
3052: GO 3160
3054: LD_INT 2
3056: DOUBLE
3057: EQUAL
3058: IFTRUE 3062
3060: GO 3069
3062: POP
// hHackSetLevel10 ; 3 :
3063: CALL 15391 0 0
3067: GO 3160
3069: LD_INT 3
3071: DOUBLE
3072: EQUAL
3073: IFTRUE 3077
3075: GO 3084
3077: POP
// hHackSetLevel10YourUnits ; 4 :
3078: CALL 15476 0 0
3082: GO 3160
3084: LD_INT 4
3086: DOUBLE
3087: EQUAL
3088: IFTRUE 3092
3090: GO 3099
3092: POP
// hHackInvincible ; 5 :
3093: CALL 15924 0 0
3097: GO 3160
3099: LD_INT 5
3101: DOUBLE
3102: EQUAL
3103: IFTRUE 3107
3105: GO 3114
3107: POP
// hHackInvisible ; 6 :
3108: CALL 16035 0 0
3112: GO 3160
3114: LD_INT 6
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3129
3122: POP
// hHackChangeYourSide ; 7 :
3123: CALL 16092 0 0
3127: GO 3160
3129: LD_INT 7
3131: DOUBLE
3132: EQUAL
3133: IFTRUE 3137
3135: GO 3144
3137: POP
// hHackChangeUnitSide ; 8 :
3138: CALL 16134 0 0
3142: GO 3160
3144: LD_INT 8
3146: DOUBLE
3147: EQUAL
3148: IFTRUE 3152
3150: GO 3159
3152: POP
// hHackFog ; end ;
3153: CALL 16235 0 0
3157: GO 3160
3159: POP
// end ; end ;
3160: LD_VAR 0 7
3164: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3165: GO 3167
3167: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3168: LD_STRING initStreamRollete();
3170: PPUSH
3171: CALL_OW 559
// InitStreamMode ;
3175: CALL 3187 0 0
// DefineStreamItems ( false ) ;
3179: LD_INT 0
3181: PPUSH
3182: CALL 3651 0 1
// end ;
3186: END
// function InitStreamMode ; begin
3187: LD_INT 0
3189: PPUSH
// streamModeActive := false ;
3190: LD_ADDR_EXP 7
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// normalCounter := 36 ;
3198: LD_ADDR_EXP 8
3202: PUSH
3203: LD_INT 36
3205: ST_TO_ADDR
// hardcoreCounter := 18 ;
3206: LD_ADDR_EXP 9
3210: PUSH
3211: LD_INT 18
3213: ST_TO_ADDR
// sRocket := false ;
3214: LD_ADDR_EXP 12
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sSpeed := false ;
3222: LD_ADDR_EXP 11
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sEngine := false ;
3230: LD_ADDR_EXP 13
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sSpec := false ;
3238: LD_ADDR_EXP 10
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sLevel := false ;
3246: LD_ADDR_EXP 14
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sArmoury := false ;
3254: LD_ADDR_EXP 15
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sRadar := false ;
3262: LD_ADDR_EXP 16
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sBunker := false ;
3270: LD_ADDR_EXP 17
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sHack := false ;
3278: LD_ADDR_EXP 18
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sFire := false ;
3286: LD_ADDR_EXP 19
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sRefresh := false ;
3294: LD_ADDR_EXP 20
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sExp := false ;
3302: LD_ADDR_EXP 21
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sDepot := false ;
3310: LD_ADDR_EXP 22
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sFlag := false ;
3318: LD_ADDR_EXP 23
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sKamikadze := false ;
3326: LD_ADDR_EXP 31
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sTroll := false ;
3334: LD_ADDR_EXP 32
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sSlow := false ;
3342: LD_ADDR_EXP 33
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sLack := false ;
3350: LD_ADDR_EXP 34
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sTank := false ;
3358: LD_ADDR_EXP 36
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sRemote := false ;
3366: LD_ADDR_EXP 37
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sPowell := false ;
3374: LD_ADDR_EXP 38
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTeleport := false ;
3382: LD_ADDR_EXP 41
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sOilTower := false ;
3390: LD_ADDR_EXP 43
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sShovel := false ;
3398: LD_ADDR_EXP 44
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sSheik := false ;
3406: LD_ADDR_EXP 45
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sEarthquake := false ;
3414: LD_ADDR_EXP 47
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sAI := false ;
3422: LD_ADDR_EXP 48
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sCargo := false ;
3430: LD_ADDR_EXP 51
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sDLaser := false ;
3438: LD_ADDR_EXP 52
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sExchange := false ;
3446: LD_ADDR_EXP 53
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sFac := false ;
3454: LD_ADDR_EXP 54
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sPower := false ;
3462: LD_ADDR_EXP 55
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sRandom := false ;
3470: LD_ADDR_EXP 56
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sShield := false ;
3478: LD_ADDR_EXP 57
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sTime := false ;
3486: LD_ADDR_EXP 58
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sTools := false ;
3494: LD_ADDR_EXP 59
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sSold := false ;
3502: LD_ADDR_EXP 24
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// sDiff := false ;
3510: LD_ADDR_EXP 25
3514: PUSH
3515: LD_INT 0
3517: ST_TO_ADDR
// sFog := false ;
3518: LD_ADDR_EXP 28
3522: PUSH
3523: LD_INT 0
3525: ST_TO_ADDR
// sReset := false ;
3526: LD_ADDR_EXP 29
3530: PUSH
3531: LD_INT 0
3533: ST_TO_ADDR
// sSun := false ;
3534: LD_ADDR_EXP 30
3538: PUSH
3539: LD_INT 0
3541: ST_TO_ADDR
// sTiger := false ;
3542: LD_ADDR_EXP 26
3546: PUSH
3547: LD_INT 0
3549: ST_TO_ADDR
// sBomb := false ;
3550: LD_ADDR_EXP 27
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// sWound := false ;
3558: LD_ADDR_EXP 35
3562: PUSH
3563: LD_INT 0
3565: ST_TO_ADDR
// sBetray := false ;
3566: LD_ADDR_EXP 39
3570: PUSH
3571: LD_INT 0
3573: ST_TO_ADDR
// sContamin := false ;
3574: LD_ADDR_EXP 40
3578: PUSH
3579: LD_INT 0
3581: ST_TO_ADDR
// sOil := false ;
3582: LD_ADDR_EXP 42
3586: PUSH
3587: LD_INT 0
3589: ST_TO_ADDR
// sStu := false ;
3590: LD_ADDR_EXP 46
3594: PUSH
3595: LD_INT 0
3597: ST_TO_ADDR
// sBazooka := false ;
3598: LD_ADDR_EXP 49
3602: PUSH
3603: LD_INT 0
3605: ST_TO_ADDR
// sMortar := false ;
3606: LD_ADDR_EXP 50
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// sRanger := false ;
3614: LD_ADDR_EXP 60
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// sComputer := false ;
3622: LD_ADDR_EXP 61
3626: PUSH
3627: LD_INT 0
3629: ST_TO_ADDR
// s30 := false ;
3630: LD_ADDR_EXP 62
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// s60 := false ;
3638: LD_ADDR_EXP 63
3642: PUSH
3643: LD_INT 0
3645: ST_TO_ADDR
// end ;
3646: LD_VAR 0 1
3650: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3651: LD_INT 0
3653: PPUSH
3654: PPUSH
3655: PPUSH
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
// result := [ ] ;
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: EMPTY
3666: ST_TO_ADDR
// if campaign_id = 1 then
3667: LD_OWVAR 69
3671: PUSH
3672: LD_INT 1
3674: EQUAL
3675: IFFALSE 6841
// begin case mission_number of 1 :
3677: LD_OWVAR 70
3681: PUSH
3682: LD_INT 1
3684: DOUBLE
3685: EQUAL
3686: IFTRUE 3690
3688: GO 3766
3690: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3691: LD_ADDR_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 11
3704: PUSH
3705: LD_INT 12
3707: PUSH
3708: LD_INT 15
3710: PUSH
3711: LD_INT 16
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 23
3719: PUSH
3720: LD_INT 26
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_INT 101
3736: PUSH
3737: LD_INT 102
3739: PUSH
3740: LD_INT 106
3742: PUSH
3743: LD_INT 116
3745: PUSH
3746: LD_INT 117
3748: PUSH
3749: LD_INT 118
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: ST_TO_ADDR
3764: GO 6839
3766: LD_INT 2
3768: DOUBLE
3769: EQUAL
3770: IFTRUE 3774
3772: GO 3858
3774: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3775: LD_ADDR_VAR 0 2
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: LD_INT 4
3785: PUSH
3786: LD_INT 11
3788: PUSH
3789: LD_INT 12
3791: PUSH
3792: LD_INT 15
3794: PUSH
3795: LD_INT 16
3797: PUSH
3798: LD_INT 22
3800: PUSH
3801: LD_INT 23
3803: PUSH
3804: LD_INT 26
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_INT 101
3820: PUSH
3821: LD_INT 102
3823: PUSH
3824: LD_INT 105
3826: PUSH
3827: LD_INT 106
3829: PUSH
3830: LD_INT 108
3832: PUSH
3833: LD_INT 116
3835: PUSH
3836: LD_INT 117
3838: PUSH
3839: LD_INT 118
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: ST_TO_ADDR
3856: GO 6839
3858: LD_INT 3
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3954
3866: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: LD_INT 2
3874: PUSH
3875: LD_INT 4
3877: PUSH
3878: LD_INT 5
3880: PUSH
3881: LD_INT 11
3883: PUSH
3884: LD_INT 12
3886: PUSH
3887: LD_INT 15
3889: PUSH
3890: LD_INT 16
3892: PUSH
3893: LD_INT 22
3895: PUSH
3896: LD_INT 26
3898: PUSH
3899: LD_INT 36
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 101
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 105
3922: PUSH
3923: LD_INT 106
3925: PUSH
3926: LD_INT 108
3928: PUSH
3929: LD_INT 116
3931: PUSH
3932: LD_INT 117
3934: PUSH
3935: LD_INT 118
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
3952: GO 6839
3954: LD_INT 4
3956: DOUBLE
3957: EQUAL
3958: IFTRUE 3962
3960: GO 4058
3962: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3963: LD_ADDR_VAR 0 2
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: LD_INT 4
3973: PUSH
3974: LD_INT 5
3976: PUSH
3977: LD_INT 8
3979: PUSH
3980: LD_INT 11
3982: PUSH
3983: LD_INT 12
3985: PUSH
3986: LD_INT 15
3988: PUSH
3989: LD_INT 16
3991: PUSH
3992: LD_INT 22
3994: PUSH
3995: LD_INT 23
3997: PUSH
3998: LD_INT 26
4000: PUSH
4001: LD_INT 36
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: PUSH
4018: LD_INT 101
4020: PUSH
4021: LD_INT 102
4023: PUSH
4024: LD_INT 105
4026: PUSH
4027: LD_INT 106
4029: PUSH
4030: LD_INT 108
4032: PUSH
4033: LD_INT 116
4035: PUSH
4036: LD_INT 117
4038: PUSH
4039: LD_INT 118
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: ST_TO_ADDR
4056: GO 6839
4058: LD_INT 5
4060: DOUBLE
4061: EQUAL
4062: IFTRUE 4066
4064: GO 4178
4066: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4067: LD_ADDR_VAR 0 2
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: LD_INT 5
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: LD_INT 8
4086: PUSH
4087: LD_INT 11
4089: PUSH
4090: LD_INT 12
4092: PUSH
4093: LD_INT 15
4095: PUSH
4096: LD_INT 16
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 23
4104: PUSH
4105: LD_INT 25
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 36
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 101
4132: PUSH
4133: LD_INT 102
4135: PUSH
4136: LD_INT 105
4138: PUSH
4139: LD_INT 106
4141: PUSH
4142: LD_INT 108
4144: PUSH
4145: LD_INT 109
4147: PUSH
4148: LD_INT 112
4150: PUSH
4151: LD_INT 116
4153: PUSH
4154: LD_INT 117
4156: PUSH
4157: LD_INT 118
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: ST_TO_ADDR
4176: GO 6839
4178: LD_INT 6
4180: DOUBLE
4181: EQUAL
4182: IFTRUE 4186
4184: GO 4318
4186: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4187: LD_ADDR_VAR 0 2
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 5
4200: PUSH
4201: LD_INT 6
4203: PUSH
4204: LD_INT 8
4206: PUSH
4207: LD_INT 11
4209: PUSH
4210: LD_INT 12
4212: PUSH
4213: LD_INT 15
4215: PUSH
4216: LD_INT 16
4218: PUSH
4219: LD_INT 20
4221: PUSH
4222: LD_INT 21
4224: PUSH
4225: LD_INT 22
4227: PUSH
4228: LD_INT 23
4230: PUSH
4231: LD_INT 25
4233: PUSH
4234: LD_INT 26
4236: PUSH
4237: LD_INT 30
4239: PUSH
4240: LD_INT 31
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 36
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 101
4272: PUSH
4273: LD_INT 102
4275: PUSH
4276: LD_INT 105
4278: PUSH
4279: LD_INT 106
4281: PUSH
4282: LD_INT 108
4284: PUSH
4285: LD_INT 109
4287: PUSH
4288: LD_INT 112
4290: PUSH
4291: LD_INT 116
4293: PUSH
4294: LD_INT 117
4296: PUSH
4297: LD_INT 118
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: ST_TO_ADDR
4316: GO 6839
4318: LD_INT 7
4320: DOUBLE
4321: EQUAL
4322: IFTRUE 4326
4324: GO 4438
4326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4327: LD_ADDR_VAR 0 2
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 4
4337: PUSH
4338: LD_INT 5
4340: PUSH
4341: LD_INT 7
4343: PUSH
4344: LD_INT 11
4346: PUSH
4347: LD_INT 12
4349: PUSH
4350: LD_INT 15
4352: PUSH
4353: LD_INT 16
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: LD_INT 21
4361: PUSH
4362: LD_INT 22
4364: PUSH
4365: LD_INT 23
4367: PUSH
4368: LD_INT 25
4370: PUSH
4371: LD_INT 26
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 101
4392: PUSH
4393: LD_INT 102
4395: PUSH
4396: LD_INT 103
4398: PUSH
4399: LD_INT 105
4401: PUSH
4402: LD_INT 106
4404: PUSH
4405: LD_INT 108
4407: PUSH
4408: LD_INT 112
4410: PUSH
4411: LD_INT 116
4413: PUSH
4414: LD_INT 117
4416: PUSH
4417: LD_INT 118
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: ST_TO_ADDR
4436: GO 6839
4438: LD_INT 8
4440: DOUBLE
4441: EQUAL
4442: IFTRUE 4446
4444: GO 4586
4446: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4447: LD_ADDR_VAR 0 2
4451: PUSH
4452: LD_INT 2
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 5
4460: PUSH
4461: LD_INT 6
4463: PUSH
4464: LD_INT 7
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: LD_INT 11
4472: PUSH
4473: LD_INT 12
4475: PUSH
4476: LD_INT 15
4478: PUSH
4479: LD_INT 16
4481: PUSH
4482: LD_INT 20
4484: PUSH
4485: LD_INT 21
4487: PUSH
4488: LD_INT 22
4490: PUSH
4491: LD_INT 23
4493: PUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 26
4499: PUSH
4500: LD_INT 30
4502: PUSH
4503: LD_INT 31
4505: PUSH
4506: LD_INT 32
4508: PUSH
4509: LD_INT 36
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 101
4536: PUSH
4537: LD_INT 102
4539: PUSH
4540: LD_INT 103
4542: PUSH
4543: LD_INT 105
4545: PUSH
4546: LD_INT 106
4548: PUSH
4549: LD_INT 108
4551: PUSH
4552: LD_INT 109
4554: PUSH
4555: LD_INT 112
4557: PUSH
4558: LD_INT 116
4560: PUSH
4561: LD_INT 117
4563: PUSH
4564: LD_INT 118
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: ST_TO_ADDR
4584: GO 6839
4586: LD_INT 9
4588: DOUBLE
4589: EQUAL
4590: IFTRUE 4594
4592: GO 4742
4594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 2
4602: PUSH
4603: LD_INT 4
4605: PUSH
4606: LD_INT 5
4608: PUSH
4609: LD_INT 6
4611: PUSH
4612: LD_INT 7
4614: PUSH
4615: LD_INT 8
4617: PUSH
4618: LD_INT 11
4620: PUSH
4621: LD_INT 12
4623: PUSH
4624: LD_INT 15
4626: PUSH
4627: LD_INT 16
4629: PUSH
4630: LD_INT 20
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 22
4638: PUSH
4639: LD_INT 23
4641: PUSH
4642: LD_INT 25
4644: PUSH
4645: LD_INT 26
4647: PUSH
4648: LD_INT 28
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 31
4656: PUSH
4657: LD_INT 32
4659: PUSH
4660: LD_INT 36
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 101
4688: PUSH
4689: LD_INT 102
4691: PUSH
4692: LD_INT 103
4694: PUSH
4695: LD_INT 105
4697: PUSH
4698: LD_INT 106
4700: PUSH
4701: LD_INT 108
4703: PUSH
4704: LD_INT 109
4706: PUSH
4707: LD_INT 112
4709: PUSH
4710: LD_INT 114
4712: PUSH
4713: LD_INT 116
4715: PUSH
4716: LD_INT 117
4718: PUSH
4719: LD_INT 118
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: ST_TO_ADDR
4740: GO 6839
4742: LD_INT 10
4744: DOUBLE
4745: EQUAL
4746: IFTRUE 4750
4748: GO 4946
4750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: LD_INT 2
4758: PUSH
4759: LD_INT 4
4761: PUSH
4762: LD_INT 5
4764: PUSH
4765: LD_INT 6
4767: PUSH
4768: LD_INT 7
4770: PUSH
4771: LD_INT 8
4773: PUSH
4774: LD_INT 9
4776: PUSH
4777: LD_INT 10
4779: PUSH
4780: LD_INT 11
4782: PUSH
4783: LD_INT 12
4785: PUSH
4786: LD_INT 13
4788: PUSH
4789: LD_INT 14
4791: PUSH
4792: LD_INT 15
4794: PUSH
4795: LD_INT 16
4797: PUSH
4798: LD_INT 17
4800: PUSH
4801: LD_INT 18
4803: PUSH
4804: LD_INT 19
4806: PUSH
4807: LD_INT 20
4809: PUSH
4810: LD_INT 21
4812: PUSH
4813: LD_INT 22
4815: PUSH
4816: LD_INT 23
4818: PUSH
4819: LD_INT 24
4821: PUSH
4822: LD_INT 25
4824: PUSH
4825: LD_INT 26
4827: PUSH
4828: LD_INT 28
4830: PUSH
4831: LD_INT 30
4833: PUSH
4834: LD_INT 31
4836: PUSH
4837: LD_INT 32
4839: PUSH
4840: LD_INT 36
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 101
4876: PUSH
4877: LD_INT 102
4879: PUSH
4880: LD_INT 103
4882: PUSH
4883: LD_INT 104
4885: PUSH
4886: LD_INT 105
4888: PUSH
4889: LD_INT 106
4891: PUSH
4892: LD_INT 107
4894: PUSH
4895: LD_INT 108
4897: PUSH
4898: LD_INT 109
4900: PUSH
4901: LD_INT 110
4903: PUSH
4904: LD_INT 111
4906: PUSH
4907: LD_INT 112
4909: PUSH
4910: LD_INT 114
4912: PUSH
4913: LD_INT 116
4915: PUSH
4916: LD_INT 117
4918: PUSH
4919: LD_INT 118
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: ST_TO_ADDR
4944: GO 6839
4946: LD_INT 11
4948: DOUBLE
4949: EQUAL
4950: IFTRUE 4954
4952: GO 5158
4954: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: LD_INT 2
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: LD_INT 4
4968: PUSH
4969: LD_INT 5
4971: PUSH
4972: LD_INT 6
4974: PUSH
4975: LD_INT 7
4977: PUSH
4978: LD_INT 8
4980: PUSH
4981: LD_INT 9
4983: PUSH
4984: LD_INT 10
4986: PUSH
4987: LD_INT 11
4989: PUSH
4990: LD_INT 12
4992: PUSH
4993: LD_INT 13
4995: PUSH
4996: LD_INT 14
4998: PUSH
4999: LD_INT 15
5001: PUSH
5002: LD_INT 16
5004: PUSH
5005: LD_INT 17
5007: PUSH
5008: LD_INT 18
5010: PUSH
5011: LD_INT 19
5013: PUSH
5014: LD_INT 20
5016: PUSH
5017: LD_INT 21
5019: PUSH
5020: LD_INT 22
5022: PUSH
5023: LD_INT 23
5025: PUSH
5026: LD_INT 24
5028: PUSH
5029: LD_INT 25
5031: PUSH
5032: LD_INT 26
5034: PUSH
5035: LD_INT 28
5037: PUSH
5038: LD_INT 30
5040: PUSH
5041: LD_INT 31
5043: PUSH
5044: LD_INT 32
5046: PUSH
5047: LD_INT 34
5049: PUSH
5050: LD_INT 36
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 101
5088: PUSH
5089: LD_INT 102
5091: PUSH
5092: LD_INT 103
5094: PUSH
5095: LD_INT 104
5097: PUSH
5098: LD_INT 105
5100: PUSH
5101: LD_INT 106
5103: PUSH
5104: LD_INT 107
5106: PUSH
5107: LD_INT 108
5109: PUSH
5110: LD_INT 109
5112: PUSH
5113: LD_INT 110
5115: PUSH
5116: LD_INT 111
5118: PUSH
5119: LD_INT 112
5121: PUSH
5122: LD_INT 114
5124: PUSH
5125: LD_INT 116
5127: PUSH
5128: LD_INT 117
5130: PUSH
5131: LD_INT 118
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: ST_TO_ADDR
5156: GO 6839
5158: LD_INT 12
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5166
5164: GO 5386
5166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5167: LD_ADDR_VAR 0 2
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: LD_INT 2
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: LD_INT 4
5183: PUSH
5184: LD_INT 5
5186: PUSH
5187: LD_INT 6
5189: PUSH
5190: LD_INT 7
5192: PUSH
5193: LD_INT 8
5195: PUSH
5196: LD_INT 9
5198: PUSH
5199: LD_INT 10
5201: PUSH
5202: LD_INT 11
5204: PUSH
5205: LD_INT 12
5207: PUSH
5208: LD_INT 13
5210: PUSH
5211: LD_INT 14
5213: PUSH
5214: LD_INT 15
5216: PUSH
5217: LD_INT 16
5219: PUSH
5220: LD_INT 17
5222: PUSH
5223: LD_INT 18
5225: PUSH
5226: LD_INT 19
5228: PUSH
5229: LD_INT 20
5231: PUSH
5232: LD_INT 21
5234: PUSH
5235: LD_INT 22
5237: PUSH
5238: LD_INT 23
5240: PUSH
5241: LD_INT 24
5243: PUSH
5244: LD_INT 25
5246: PUSH
5247: LD_INT 26
5249: PUSH
5250: LD_INT 27
5252: PUSH
5253: LD_INT 28
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 36
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 101
5312: PUSH
5313: LD_INT 102
5315: PUSH
5316: LD_INT 103
5318: PUSH
5319: LD_INT 104
5321: PUSH
5322: LD_INT 105
5324: PUSH
5325: LD_INT 106
5327: PUSH
5328: LD_INT 107
5330: PUSH
5331: LD_INT 108
5333: PUSH
5334: LD_INT 109
5336: PUSH
5337: LD_INT 110
5339: PUSH
5340: LD_INT 111
5342: PUSH
5343: LD_INT 112
5345: PUSH
5346: LD_INT 113
5348: PUSH
5349: LD_INT 114
5351: PUSH
5352: LD_INT 116
5354: PUSH
5355: LD_INT 117
5357: PUSH
5358: LD_INT 118
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 6839
5386: LD_INT 13
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5602
5394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5395: LD_ADDR_VAR 0 2
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: LD_INT 2
5405: PUSH
5406: LD_INT 3
5408: PUSH
5409: LD_INT 4
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: LD_INT 8
5417: PUSH
5418: LD_INT 9
5420: PUSH
5421: LD_INT 10
5423: PUSH
5424: LD_INT 11
5426: PUSH
5427: LD_INT 12
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: LD_INT 15
5435: PUSH
5436: LD_INT 16
5438: PUSH
5439: LD_INT 17
5441: PUSH
5442: LD_INT 18
5444: PUSH
5445: LD_INT 19
5447: PUSH
5448: LD_INT 20
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: LD_INT 25
5465: PUSH
5466: LD_INT 26
5468: PUSH
5469: LD_INT 27
5471: PUSH
5472: LD_INT 28
5474: PUSH
5475: LD_INT 30
5477: PUSH
5478: LD_INT 31
5480: PUSH
5481: LD_INT 32
5483: PUSH
5484: LD_INT 33
5486: PUSH
5487: LD_INT 34
5489: PUSH
5490: LD_INT 36
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 101
5528: PUSH
5529: LD_INT 102
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 104
5537: PUSH
5538: LD_INT 105
5540: PUSH
5541: LD_INT 106
5543: PUSH
5544: LD_INT 107
5546: PUSH
5547: LD_INT 108
5549: PUSH
5550: LD_INT 109
5552: PUSH
5553: LD_INT 110
5555: PUSH
5556: LD_INT 111
5558: PUSH
5559: LD_INT 112
5561: PUSH
5562: LD_INT 113
5564: PUSH
5565: LD_INT 114
5567: PUSH
5568: LD_INT 116
5570: PUSH
5571: LD_INT 117
5573: PUSH
5574: LD_INT 118
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: ST_TO_ADDR
5600: GO 6839
5602: LD_INT 14
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5834
5610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: LD_INT 2
5621: PUSH
5622: LD_INT 3
5624: PUSH
5625: LD_INT 4
5627: PUSH
5628: LD_INT 5
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: LD_INT 7
5636: PUSH
5637: LD_INT 8
5639: PUSH
5640: LD_INT 9
5642: PUSH
5643: LD_INT 10
5645: PUSH
5646: LD_INT 11
5648: PUSH
5649: LD_INT 12
5651: PUSH
5652: LD_INT 13
5654: PUSH
5655: LD_INT 14
5657: PUSH
5658: LD_INT 15
5660: PUSH
5661: LD_INT 16
5663: PUSH
5664: LD_INT 17
5666: PUSH
5667: LD_INT 18
5669: PUSH
5670: LD_INT 19
5672: PUSH
5673: LD_INT 20
5675: PUSH
5676: LD_INT 21
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 23
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 25
5690: PUSH
5691: LD_INT 26
5693: PUSH
5694: LD_INT 27
5696: PUSH
5697: LD_INT 28
5699: PUSH
5700: LD_INT 29
5702: PUSH
5703: LD_INT 30
5705: PUSH
5706: LD_INT 31
5708: PUSH
5709: LD_INT 32
5711: PUSH
5712: LD_INT 33
5714: PUSH
5715: LD_INT 34
5717: PUSH
5718: LD_INT 36
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 101
5760: PUSH
5761: LD_INT 102
5763: PUSH
5764: LD_INT 103
5766: PUSH
5767: LD_INT 104
5769: PUSH
5770: LD_INT 105
5772: PUSH
5773: LD_INT 106
5775: PUSH
5776: LD_INT 107
5778: PUSH
5779: LD_INT 108
5781: PUSH
5782: LD_INT 109
5784: PUSH
5785: LD_INT 110
5787: PUSH
5788: LD_INT 111
5790: PUSH
5791: LD_INT 112
5793: PUSH
5794: LD_INT 113
5796: PUSH
5797: LD_INT 114
5799: PUSH
5800: LD_INT 116
5802: PUSH
5803: LD_INT 117
5805: PUSH
5806: LD_INT 118
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: ST_TO_ADDR
5832: GO 6839
5834: LD_INT 15
5836: DOUBLE
5837: EQUAL
5838: IFTRUE 5842
5840: GO 6066
5842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5843: LD_ADDR_VAR 0 2
5847: PUSH
5848: LD_INT 1
5850: PUSH
5851: LD_INT 2
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: LD_INT 4
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: LD_INT 6
5865: PUSH
5866: LD_INT 7
5868: PUSH
5869: LD_INT 8
5871: PUSH
5872: LD_INT 9
5874: PUSH
5875: LD_INT 10
5877: PUSH
5878: LD_INT 11
5880: PUSH
5881: LD_INT 12
5883: PUSH
5884: LD_INT 13
5886: PUSH
5887: LD_INT 14
5889: PUSH
5890: LD_INT 15
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: LD_INT 17
5898: PUSH
5899: LD_INT 18
5901: PUSH
5902: LD_INT 19
5904: PUSH
5905: LD_INT 20
5907: PUSH
5908: LD_INT 21
5910: PUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 23
5916: PUSH
5917: LD_INT 24
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 26
5925: PUSH
5926: LD_INT 27
5928: PUSH
5929: LD_INT 28
5931: PUSH
5932: LD_INT 29
5934: PUSH
5935: LD_INT 30
5937: PUSH
5938: LD_INT 31
5940: PUSH
5941: LD_INT 32
5943: PUSH
5944: LD_INT 33
5946: PUSH
5947: LD_INT 34
5949: PUSH
5950: LD_INT 36
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 101
5992: PUSH
5993: LD_INT 102
5995: PUSH
5996: LD_INT 103
5998: PUSH
5999: LD_INT 104
6001: PUSH
6002: LD_INT 105
6004: PUSH
6005: LD_INT 106
6007: PUSH
6008: LD_INT 107
6010: PUSH
6011: LD_INT 108
6013: PUSH
6014: LD_INT 109
6016: PUSH
6017: LD_INT 110
6019: PUSH
6020: LD_INT 111
6022: PUSH
6023: LD_INT 112
6025: PUSH
6026: LD_INT 113
6028: PUSH
6029: LD_INT 114
6031: PUSH
6032: LD_INT 116
6034: PUSH
6035: LD_INT 117
6037: PUSH
6038: LD_INT 118
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: ST_TO_ADDR
6064: GO 6839
6066: LD_INT 16
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6210
6074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6075: LD_ADDR_VAR 0 2
6079: PUSH
6080: LD_INT 2
6082: PUSH
6083: LD_INT 4
6085: PUSH
6086: LD_INT 5
6088: PUSH
6089: LD_INT 7
6091: PUSH
6092: LD_INT 11
6094: PUSH
6095: LD_INT 12
6097: PUSH
6098: LD_INT 15
6100: PUSH
6101: LD_INT 16
6103: PUSH
6104: LD_INT 20
6106: PUSH
6107: LD_INT 21
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_INT 23
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 26
6121: PUSH
6122: LD_INT 30
6124: PUSH
6125: LD_INT 31
6127: PUSH
6128: LD_INT 32
6130: PUSH
6131: LD_INT 33
6133: PUSH
6134: LD_INT 34
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 101
6160: PUSH
6161: LD_INT 102
6163: PUSH
6164: LD_INT 103
6166: PUSH
6167: LD_INT 106
6169: PUSH
6170: LD_INT 108
6172: PUSH
6173: LD_INT 112
6175: PUSH
6176: LD_INT 113
6178: PUSH
6179: LD_INT 114
6181: PUSH
6182: LD_INT 116
6184: PUSH
6185: LD_INT 117
6187: PUSH
6188: LD_INT 118
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: ST_TO_ADDR
6208: GO 6839
6210: LD_INT 17
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6218
6216: GO 6442
6218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6219: LD_ADDR_VAR 0 2
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: LD_INT 2
6229: PUSH
6230: LD_INT 3
6232: PUSH
6233: LD_INT 4
6235: PUSH
6236: LD_INT 5
6238: PUSH
6239: LD_INT 6
6241: PUSH
6242: LD_INT 7
6244: PUSH
6245: LD_INT 8
6247: PUSH
6248: LD_INT 9
6250: PUSH
6251: LD_INT 10
6253: PUSH
6254: LD_INT 11
6256: PUSH
6257: LD_INT 12
6259: PUSH
6260: LD_INT 13
6262: PUSH
6263: LD_INT 14
6265: PUSH
6266: LD_INT 15
6268: PUSH
6269: LD_INT 16
6271: PUSH
6272: LD_INT 17
6274: PUSH
6275: LD_INT 18
6277: PUSH
6278: LD_INT 19
6280: PUSH
6281: LD_INT 20
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 23
6292: PUSH
6293: LD_INT 24
6295: PUSH
6296: LD_INT 25
6298: PUSH
6299: LD_INT 26
6301: PUSH
6302: LD_INT 27
6304: PUSH
6305: LD_INT 28
6307: PUSH
6308: LD_INT 29
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 31
6316: PUSH
6317: LD_INT 32
6319: PUSH
6320: LD_INT 33
6322: PUSH
6323: LD_INT 34
6325: PUSH
6326: LD_INT 36
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 101
6368: PUSH
6369: LD_INT 102
6371: PUSH
6372: LD_INT 103
6374: PUSH
6375: LD_INT 104
6377: PUSH
6378: LD_INT 105
6380: PUSH
6381: LD_INT 106
6383: PUSH
6384: LD_INT 107
6386: PUSH
6387: LD_INT 108
6389: PUSH
6390: LD_INT 109
6392: PUSH
6393: LD_INT 110
6395: PUSH
6396: LD_INT 111
6398: PUSH
6399: LD_INT 112
6401: PUSH
6402: LD_INT 113
6404: PUSH
6405: LD_INT 114
6407: PUSH
6408: LD_INT 116
6410: PUSH
6411: LD_INT 117
6413: PUSH
6414: LD_INT 118
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: ST_TO_ADDR
6440: GO 6839
6442: LD_INT 18
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6598
6450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6451: LD_ADDR_VAR 0 2
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: LD_INT 5
6464: PUSH
6465: LD_INT 7
6467: PUSH
6468: LD_INT 11
6470: PUSH
6471: LD_INT 12
6473: PUSH
6474: LD_INT 15
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 20
6482: PUSH
6483: LD_INT 21
6485: PUSH
6486: LD_INT 22
6488: PUSH
6489: LD_INT 23
6491: PUSH
6492: LD_INT 25
6494: PUSH
6495: LD_INT 26
6497: PUSH
6498: LD_INT 30
6500: PUSH
6501: LD_INT 31
6503: PUSH
6504: LD_INT 32
6506: PUSH
6507: LD_INT 33
6509: PUSH
6510: LD_INT 34
6512: PUSH
6513: LD_INT 35
6515: PUSH
6516: LD_INT 36
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 101
6544: PUSH
6545: LD_INT 102
6547: PUSH
6548: LD_INT 103
6550: PUSH
6551: LD_INT 106
6553: PUSH
6554: LD_INT 108
6556: PUSH
6557: LD_INT 112
6559: PUSH
6560: LD_INT 113
6562: PUSH
6563: LD_INT 114
6565: PUSH
6566: LD_INT 115
6568: PUSH
6569: LD_INT 116
6571: PUSH
6572: LD_INT 117
6574: PUSH
6575: LD_INT 118
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: ST_TO_ADDR
6596: GO 6839
6598: LD_INT 19
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6838
6606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 4
6623: PUSH
6624: LD_INT 5
6626: PUSH
6627: LD_INT 6
6629: PUSH
6630: LD_INT 7
6632: PUSH
6633: LD_INT 8
6635: PUSH
6636: LD_INT 9
6638: PUSH
6639: LD_INT 10
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 13
6650: PUSH
6651: LD_INT 14
6653: PUSH
6654: LD_INT 15
6656: PUSH
6657: LD_INT 16
6659: PUSH
6660: LD_INT 17
6662: PUSH
6663: LD_INT 18
6665: PUSH
6666: LD_INT 19
6668: PUSH
6669: LD_INT 20
6671: PUSH
6672: LD_INT 21
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 23
6680: PUSH
6681: LD_INT 24
6683: PUSH
6684: LD_INT 25
6686: PUSH
6687: LD_INT 26
6689: PUSH
6690: LD_INT 27
6692: PUSH
6693: LD_INT 28
6695: PUSH
6696: LD_INT 29
6698: PUSH
6699: LD_INT 30
6701: PUSH
6702: LD_INT 31
6704: PUSH
6705: LD_INT 32
6707: PUSH
6708: LD_INT 33
6710: PUSH
6711: LD_INT 34
6713: PUSH
6714: LD_INT 35
6716: PUSH
6717: LD_INT 36
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 101
6760: PUSH
6761: LD_INT 102
6763: PUSH
6764: LD_INT 103
6766: PUSH
6767: LD_INT 104
6769: PUSH
6770: LD_INT 105
6772: PUSH
6773: LD_INT 106
6775: PUSH
6776: LD_INT 107
6778: PUSH
6779: LD_INT 108
6781: PUSH
6782: LD_INT 109
6784: PUSH
6785: LD_INT 110
6787: PUSH
6788: LD_INT 111
6790: PUSH
6791: LD_INT 112
6793: PUSH
6794: LD_INT 113
6796: PUSH
6797: LD_INT 114
6799: PUSH
6800: LD_INT 115
6802: PUSH
6803: LD_INT 116
6805: PUSH
6806: LD_INT 117
6808: PUSH
6809: LD_INT 118
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: ST_TO_ADDR
6836: GO 6839
6838: POP
// end else
6839: GO 7070
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6841: LD_ADDR_VAR 0 2
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: LD_INT 2
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: LD_INT 4
6857: PUSH
6858: LD_INT 5
6860: PUSH
6861: LD_INT 6
6863: PUSH
6864: LD_INT 7
6866: PUSH
6867: LD_INT 8
6869: PUSH
6870: LD_INT 9
6872: PUSH
6873: LD_INT 10
6875: PUSH
6876: LD_INT 11
6878: PUSH
6879: LD_INT 12
6881: PUSH
6882: LD_INT 13
6884: PUSH
6885: LD_INT 14
6887: PUSH
6888: LD_INT 15
6890: PUSH
6891: LD_INT 16
6893: PUSH
6894: LD_INT 17
6896: PUSH
6897: LD_INT 18
6899: PUSH
6900: LD_INT 19
6902: PUSH
6903: LD_INT 20
6905: PUSH
6906: LD_INT 21
6908: PUSH
6909: LD_INT 22
6911: PUSH
6912: LD_INT 23
6914: PUSH
6915: LD_INT 24
6917: PUSH
6918: LD_INT 25
6920: PUSH
6921: LD_INT 26
6923: PUSH
6924: LD_INT 27
6926: PUSH
6927: LD_INT 28
6929: PUSH
6930: LD_INT 29
6932: PUSH
6933: LD_INT 30
6935: PUSH
6936: LD_INT 31
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: LD_INT 33
6944: PUSH
6945: LD_INT 34
6947: PUSH
6948: LD_INT 35
6950: PUSH
6951: LD_INT 36
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 101
6994: PUSH
6995: LD_INT 102
6997: PUSH
6998: LD_INT 103
7000: PUSH
7001: LD_INT 104
7003: PUSH
7004: LD_INT 105
7006: PUSH
7007: LD_INT 106
7009: PUSH
7010: LD_INT 107
7012: PUSH
7013: LD_INT 108
7015: PUSH
7016: LD_INT 109
7018: PUSH
7019: LD_INT 110
7021: PUSH
7022: LD_INT 111
7024: PUSH
7025: LD_INT 112
7027: PUSH
7028: LD_INT 113
7030: PUSH
7031: LD_INT 114
7033: PUSH
7034: LD_INT 115
7036: PUSH
7037: LD_INT 116
7039: PUSH
7040: LD_INT 117
7042: PUSH
7043: LD_INT 118
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// if result then
7070: LD_VAR 0 2
7074: IFFALSE 7860
// begin normal :=  ;
7076: LD_ADDR_VAR 0 5
7080: PUSH
7081: LD_STRING 
7083: ST_TO_ADDR
// hardcore :=  ;
7084: LD_ADDR_VAR 0 6
7088: PUSH
7089: LD_STRING 
7091: ST_TO_ADDR
// active :=  ;
7092: LD_ADDR_VAR 0 7
7096: PUSH
7097: LD_STRING 
7099: ST_TO_ADDR
// for i = 1 to normalCounter do
7100: LD_ADDR_VAR 0 8
7104: PUSH
7105: DOUBLE
7106: LD_INT 1
7108: DEC
7109: ST_TO_ADDR
7110: LD_EXP 8
7114: PUSH
7115: FOR_TO
7116: IFFALSE 7217
// begin tmp := 0 ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_STRING 0
7125: ST_TO_ADDR
// if result [ 1 ] then
7126: LD_VAR 0 2
7130: PUSH
7131: LD_INT 1
7133: ARRAY
7134: IFFALSE 7199
// if result [ 1 ] [ 1 ] = i then
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PUSH
7149: LD_VAR 0 8
7153: EQUAL
7154: IFFALSE 7199
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_VAR 0 2
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 3
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// tmp := 1 ;
7191: LD_ADDR_VAR 0 3
7195: PUSH
7196: LD_STRING 1
7198: ST_TO_ADDR
// end ; normal := normal & tmp ;
7199: LD_ADDR_VAR 0 5
7203: PUSH
7204: LD_VAR 0 5
7208: PUSH
7209: LD_VAR 0 3
7213: STR
7214: ST_TO_ADDR
// end ;
7215: GO 7115
7217: POP
7218: POP
// for i = 1 to hardcoreCounter do
7219: LD_ADDR_VAR 0 8
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_EXP 9
7233: PUSH
7234: FOR_TO
7235: IFFALSE 7340
// begin tmp := 0 ;
7237: LD_ADDR_VAR 0 3
7241: PUSH
7242: LD_STRING 0
7244: ST_TO_ADDR
// if result [ 2 ] then
7245: LD_VAR 0 2
7249: PUSH
7250: LD_INT 2
7252: ARRAY
7253: IFFALSE 7322
// if result [ 2 ] [ 1 ] = 100 + i then
7255: LD_VAR 0 2
7259: PUSH
7260: LD_INT 2
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PUSH
7268: LD_INT 100
7270: PUSH
7271: LD_VAR 0 8
7275: PLUS
7276: EQUAL
7277: IFFALSE 7322
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7279: LD_ADDR_VAR 0 2
7283: PUSH
7284: LD_VAR 0 2
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: LD_VAR 0 2
7296: PUSH
7297: LD_INT 2
7299: ARRAY
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 3
7308: PPUSH
7309: CALL_OW 1
7313: ST_TO_ADDR
// tmp := 1 ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_STRING 1
7321: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7322: LD_ADDR_VAR 0 6
7326: PUSH
7327: LD_VAR 0 6
7331: PUSH
7332: LD_VAR 0 3
7336: STR
7337: ST_TO_ADDR
// end ;
7338: GO 7234
7340: POP
7341: POP
// if isGameLoad then
7342: LD_VAR 0 1
7346: IFFALSE 7821
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_EXP 12
7357: PUSH
7358: LD_EXP 11
7362: PUSH
7363: LD_EXP 13
7367: PUSH
7368: LD_EXP 10
7372: PUSH
7373: LD_EXP 14
7377: PUSH
7378: LD_EXP 15
7382: PUSH
7383: LD_EXP 16
7387: PUSH
7388: LD_EXP 17
7392: PUSH
7393: LD_EXP 18
7397: PUSH
7398: LD_EXP 19
7402: PUSH
7403: LD_EXP 20
7407: PUSH
7408: LD_EXP 21
7412: PUSH
7413: LD_EXP 22
7417: PUSH
7418: LD_EXP 23
7422: PUSH
7423: LD_EXP 31
7427: PUSH
7428: LD_EXP 32
7432: PUSH
7433: LD_EXP 33
7437: PUSH
7438: LD_EXP 34
7442: PUSH
7443: LD_EXP 36
7447: PUSH
7448: LD_EXP 37
7452: PUSH
7453: LD_EXP 38
7457: PUSH
7458: LD_EXP 41
7462: PUSH
7463: LD_EXP 43
7467: PUSH
7468: LD_EXP 44
7472: PUSH
7473: LD_EXP 45
7477: PUSH
7478: LD_EXP 47
7482: PUSH
7483: LD_EXP 48
7487: PUSH
7488: LD_EXP 51
7492: PUSH
7493: LD_EXP 52
7497: PUSH
7498: LD_EXP 53
7502: PUSH
7503: LD_EXP 54
7507: PUSH
7508: LD_EXP 55
7512: PUSH
7513: LD_EXP 56
7517: PUSH
7518: LD_EXP 57
7522: PUSH
7523: LD_EXP 58
7527: PUSH
7528: LD_EXP 59
7532: PUSH
7533: LD_EXP 24
7537: PUSH
7538: LD_EXP 25
7542: PUSH
7543: LD_EXP 28
7547: PUSH
7548: LD_EXP 29
7552: PUSH
7553: LD_EXP 30
7557: PUSH
7558: LD_EXP 26
7562: PUSH
7563: LD_EXP 27
7567: PUSH
7568: LD_EXP 35
7572: PUSH
7573: LD_EXP 39
7577: PUSH
7578: LD_EXP 40
7582: PUSH
7583: LD_EXP 42
7587: PUSH
7588: LD_EXP 46
7592: PUSH
7593: LD_EXP 49
7597: PUSH
7598: LD_EXP 50
7602: PUSH
7603: LD_EXP 60
7607: PUSH
7608: LD_EXP 61
7612: PUSH
7613: LD_EXP 62
7617: PUSH
7618: LD_EXP 63
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: ST_TO_ADDR
// tmp :=  ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: LD_STRING 
7686: ST_TO_ADDR
// for i = 1 to normalCounter do
7687: LD_ADDR_VAR 0 8
7691: PUSH
7692: DOUBLE
7693: LD_INT 1
7695: DEC
7696: ST_TO_ADDR
7697: LD_EXP 8
7701: PUSH
7702: FOR_TO
7703: IFFALSE 7739
// begin if flags [ i ] then
7705: LD_VAR 0 4
7709: PUSH
7710: LD_VAR 0 8
7714: ARRAY
7715: IFFALSE 7737
// tmp := tmp & i & ; ;
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: LD_VAR 0 3
7726: PUSH
7727: LD_VAR 0 8
7731: STR
7732: PUSH
7733: LD_STRING ;
7735: STR
7736: ST_TO_ADDR
// end ;
7737: GO 7702
7739: POP
7740: POP
// for i = 1 to hardcoreCounter do
7741: LD_ADDR_VAR 0 8
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_EXP 9
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7803
// begin if flags [ normalCounter + i ] then
7759: LD_VAR 0 4
7763: PUSH
7764: LD_EXP 8
7768: PUSH
7769: LD_VAR 0 8
7773: PLUS
7774: ARRAY
7775: IFFALSE 7801
// tmp := tmp & ( 100 + i ) & ; ;
7777: LD_ADDR_VAR 0 3
7781: PUSH
7782: LD_VAR 0 3
7786: PUSH
7787: LD_INT 100
7789: PUSH
7790: LD_VAR 0 8
7794: PLUS
7795: STR
7796: PUSH
7797: LD_STRING ;
7799: STR
7800: ST_TO_ADDR
// end ;
7801: GO 7756
7803: POP
7804: POP
// if tmp then
7805: LD_VAR 0 3
7809: IFFALSE 7821
// active := tmp ;
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: LD_VAR 0 3
7820: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7821: LD_STRING getStreamItemsFromMission("
7823: PUSH
7824: LD_VAR 0 5
7828: STR
7829: PUSH
7830: LD_STRING ","
7832: STR
7833: PUSH
7834: LD_VAR 0 6
7838: STR
7839: PUSH
7840: LD_STRING ","
7842: STR
7843: PUSH
7844: LD_VAR 0 7
7848: STR
7849: PUSH
7850: LD_STRING ")
7852: STR
7853: PPUSH
7854: CALL_OW 559
// end else
7858: GO 7867
// ToLua ( getStreamItemsFromMission("","","") ) ;
7860: LD_STRING getStreamItemsFromMission("","","")
7862: PPUSH
7863: CALL_OW 559
// end ;
7867: LD_VAR 0 2
7871: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7872: LD_EXP 7
7876: PUSH
7877: LD_EXP 12
7881: AND
7882: IFFALSE 8006
7884: GO 7886
7886: DISABLE
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// begin enable ;
7891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_OWVAR 2
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: LD_INT 34
7914: PUSH
7915: LD_INT 7
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 34
7924: PUSH
7925: LD_INT 45
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 34
7934: PUSH
7935: LD_INT 28
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 34
7944: PUSH
7945: LD_INT 47
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PPUSH
7963: CALL_OW 69
7967: ST_TO_ADDR
// if not tmp then
7968: LD_VAR 0 2
7972: NOT
7973: IFFALSE 7977
// exit ;
7975: GO 8006
// for i in tmp do
7977: LD_ADDR_VAR 0 1
7981: PUSH
7982: LD_VAR 0 2
7986: PUSH
7987: FOR_IN
7988: IFFALSE 8004
// begin SetLives ( i , 0 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_INT 0
7997: PPUSH
7998: CALL_OW 234
// end ;
8002: GO 7987
8004: POP
8005: POP
// end ;
8006: PPOPN 2
8008: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8009: LD_EXP 7
8013: PUSH
8014: LD_EXP 13
8018: AND
8019: IFFALSE 8103
8021: GO 8023
8023: DISABLE
8024: LD_INT 0
8026: PPUSH
8027: PPUSH
// begin enable ;
8028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_INT 22
8036: PUSH
8037: LD_OWVAR 2
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: LD_INT 32
8048: PUSH
8049: LD_INT 3
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 69
8064: ST_TO_ADDR
// if not tmp then
8065: LD_VAR 0 2
8069: NOT
8070: IFFALSE 8074
// exit ;
8072: GO 8103
// for i in tmp do
8074: LD_ADDR_VAR 0 1
8078: PUSH
8079: LD_VAR 0 2
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8101
// begin SetLives ( i , 0 ) ;
8087: LD_VAR 0 1
8091: PPUSH
8092: LD_INT 0
8094: PPUSH
8095: CALL_OW 234
// end ;
8099: GO 8084
8101: POP
8102: POP
// end ;
8103: PPOPN 2
8105: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8106: LD_EXP 7
8110: PUSH
8111: LD_EXP 10
8115: AND
8116: IFFALSE 8209
8118: GO 8120
8120: DISABLE
8121: LD_INT 0
8123: PPUSH
// begin enable ;
8124: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_INT 22
8132: PUSH
8133: LD_OWVAR 2
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 25
8147: PUSH
8148: LD_INT 5
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 25
8157: PUSH
8158: LD_INT 9
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 25
8167: PUSH
8168: LD_INT 8
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 69
8189: PUSH
8190: FOR_IN
8191: IFFALSE 8207
// begin SetClass ( i , 1 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 1
8200: PPUSH
8201: CALL_OW 336
// end ;
8205: GO 8190
8207: POP
8208: POP
// end ;
8209: PPOPN 1
8211: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8212: LD_EXP 7
8216: PUSH
8217: LD_EXP 11
8221: AND
8222: PUSH
8223: LD_OWVAR 65
8227: PUSH
8228: LD_INT 7
8230: LESS
8231: AND
8232: IFFALSE 8246
8234: GO 8236
8236: DISABLE
// begin enable ;
8237: ENABLE
// game_speed := 7 ;
8238: LD_ADDR_OWVAR 65
8242: PUSH
8243: LD_INT 7
8245: ST_TO_ADDR
// end ;
8246: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8247: LD_EXP 7
8251: PUSH
8252: LD_EXP 14
8256: AND
8257: IFFALSE 8459
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8267: LD_ADDR_VAR 0 3
8271: PUSH
8272: LD_INT 81
8274: PUSH
8275: LD_OWVAR 2
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 1
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 69
8302: ST_TO_ADDR
// if not tmp then
8303: LD_VAR 0 3
8307: NOT
8308: IFFALSE 8312
// exit ;
8310: GO 8459
// if tmp > 5 then
8312: LD_VAR 0 3
8316: PUSH
8317: LD_INT 5
8319: GREATER
8320: IFFALSE 8332
// k := 5 else
8322: LD_ADDR_VAR 0 2
8326: PUSH
8327: LD_INT 5
8329: ST_TO_ADDR
8330: GO 8342
// k := tmp ;
8332: LD_ADDR_VAR 0 2
8336: PUSH
8337: LD_VAR 0 3
8341: ST_TO_ADDR
// for i := 1 to k do
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: DOUBLE
8348: LD_INT 1
8350: DEC
8351: ST_TO_ADDR
8352: LD_VAR 0 2
8356: PUSH
8357: FOR_TO
8358: IFFALSE 8457
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8360: LD_VAR 0 3
8364: PUSH
8365: LD_VAR 0 1
8369: ARRAY
8370: PPUSH
8371: LD_VAR 0 1
8375: PUSH
8376: LD_INT 4
8378: MOD
8379: PUSH
8380: LD_INT 1
8382: PLUS
8383: PPUSH
8384: CALL_OW 259
8388: PUSH
8389: LD_INT 10
8391: LESS
8392: IFFALSE 8455
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8394: LD_VAR 0 3
8398: PUSH
8399: LD_VAR 0 1
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 1
8409: PUSH
8410: LD_INT 4
8412: MOD
8413: PUSH
8414: LD_INT 1
8416: PLUS
8417: PPUSH
8418: LD_VAR 0 3
8422: PUSH
8423: LD_VAR 0 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 1
8433: PUSH
8434: LD_INT 4
8436: MOD
8437: PUSH
8438: LD_INT 1
8440: PLUS
8441: PPUSH
8442: CALL_OW 259
8446: PUSH
8447: LD_INT 1
8449: PLUS
8450: PPUSH
8451: CALL_OW 237
8455: GO 8357
8457: POP
8458: POP
// end ;
8459: PPOPN 3
8461: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8462: LD_EXP 7
8466: PUSH
8467: LD_EXP 15
8471: AND
8472: IFFALSE 8492
8474: GO 8476
8476: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8477: LD_INT 4
8479: PPUSH
8480: LD_OWVAR 2
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 324
8492: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8493: LD_EXP 7
8497: PUSH
8498: LD_EXP 44
8502: AND
8503: IFFALSE 8523
8505: GO 8507
8507: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8508: LD_INT 19
8510: PPUSH
8511: LD_OWVAR 2
8515: PPUSH
8516: LD_INT 0
8518: PPUSH
8519: CALL_OW 324
8523: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8524: LD_EXP 7
8528: PUSH
8529: LD_EXP 16
8533: AND
8534: IFFALSE 8636
8536: GO 8538
8538: DISABLE
8539: LD_INT 0
8541: PPUSH
8542: PPUSH
// begin enable ;
8543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_OWVAR 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 2
8563: PUSH
8564: LD_INT 34
8566: PUSH
8567: LD_INT 11
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 34
8576: PUSH
8577: LD_INT 30
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 69
8597: ST_TO_ADDR
// if not tmp then
8598: LD_VAR 0 2
8602: NOT
8603: IFFALSE 8607
// exit ;
8605: GO 8636
// for i in tmp do
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: LD_VAR 0 2
8616: PUSH
8617: FOR_IN
8618: IFFALSE 8634
// begin SetLives ( i , 0 ) ;
8620: LD_VAR 0 1
8624: PPUSH
8625: LD_INT 0
8627: PPUSH
8628: CALL_OW 234
// end ;
8632: GO 8617
8634: POP
8635: POP
// end ;
8636: PPOPN 2
8638: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8639: LD_EXP 7
8643: PUSH
8644: LD_EXP 17
8648: AND
8649: IFFALSE 8669
8651: GO 8653
8653: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8654: LD_INT 32
8656: PPUSH
8657: LD_OWVAR 2
8661: PPUSH
8662: LD_INT 0
8664: PPUSH
8665: CALL_OW 324
8669: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8670: LD_EXP 7
8674: PUSH
8675: LD_EXP 18
8679: AND
8680: IFFALSE 8861
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
8689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_INT 22
8697: PUSH
8698: LD_OWVAR 2
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 33
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PPUSH
8721: CALL_OW 69
8725: ST_TO_ADDR
// if not tmp then
8726: LD_VAR 0 2
8730: NOT
8731: IFFALSE 8735
// exit ;
8733: GO 8861
// side := 0 ;
8735: LD_ADDR_VAR 0 3
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// for i := 1 to 8 do
8743: LD_ADDR_VAR 0 1
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_INT 8
8755: PUSH
8756: FOR_TO
8757: IFFALSE 8805
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8759: LD_OWVAR 2
8763: PUSH
8764: LD_VAR 0 1
8768: NONEQUAL
8769: PUSH
8770: LD_OWVAR 2
8774: PPUSH
8775: LD_VAR 0 1
8779: PPUSH
8780: CALL_OW 81
8784: PUSH
8785: LD_INT 2
8787: EQUAL
8788: AND
8789: IFFALSE 8803
// begin side := i ;
8791: LD_ADDR_VAR 0 3
8795: PUSH
8796: LD_VAR 0 1
8800: ST_TO_ADDR
// break ;
8801: GO 8805
// end ;
8803: GO 8756
8805: POP
8806: POP
// if not side then
8807: LD_VAR 0 3
8811: NOT
8812: IFFALSE 8816
// exit ;
8814: GO 8861
// for i := 1 to tmp do
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: DOUBLE
8822: LD_INT 1
8824: DEC
8825: ST_TO_ADDR
8826: LD_VAR 0 2
8830: PUSH
8831: FOR_TO
8832: IFFALSE 8859
// if Prob ( 60 ) then
8834: LD_INT 60
8836: PPUSH
8837: CALL_OW 13
8841: IFFALSE 8857
// SetSide ( i , side ) ;
8843: LD_VAR 0 1
8847: PPUSH
8848: LD_VAR 0 3
8852: PPUSH
8853: CALL_OW 235
8857: GO 8831
8859: POP
8860: POP
// end ;
8861: PPOPN 3
8863: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8864: LD_EXP 7
8868: PUSH
8869: LD_EXP 20
8873: AND
8874: IFFALSE 8993
8876: GO 8878
8878: DISABLE
8879: LD_INT 0
8881: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8882: LD_ADDR_VAR 0 1
8886: PUSH
8887: LD_INT 22
8889: PUSH
8890: LD_OWVAR 2
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 21
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8991
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8939: LD_VAR 0 1
8943: PPUSH
8944: CALL_OW 257
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: LD_INT 2
8954: PUSH
8955: LD_INT 3
8957: PUSH
8958: LD_INT 4
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: IN
8967: IFFALSE 8989
// SetClass ( un , rand ( 1 , 4 ) ) ;
8969: LD_VAR 0 1
8973: PPUSH
8974: LD_INT 1
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 12
8984: PPUSH
8985: CALL_OW 336
8989: GO 8936
8991: POP
8992: POP
// end ;
8993: PPOPN 1
8995: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8996: LD_EXP 7
9000: PUSH
9001: LD_EXP 19
9005: AND
9006: IFFALSE 9085
9008: GO 9010
9010: DISABLE
9011: LD_INT 0
9013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9014: LD_ADDR_VAR 0 1
9018: PUSH
9019: LD_INT 22
9021: PUSH
9022: LD_OWVAR 2
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 21
9033: PUSH
9034: LD_INT 3
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 69
9049: ST_TO_ADDR
// if not tmp then
9050: LD_VAR 0 1
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9059: LD_VAR 0 1
9063: PUSH
9064: LD_INT 1
9066: PPUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 12
9076: ARRAY
9077: PPUSH
9078: LD_INT 100
9080: PPUSH
9081: CALL_OW 234
// end ;
9085: PPOPN 1
9087: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9088: LD_EXP 7
9092: PUSH
9093: LD_EXP 21
9097: AND
9098: IFFALSE 9196
9100: GO 9102
9102: DISABLE
9103: LD_INT 0
9105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9106: LD_ADDR_VAR 0 1
9110: PUSH
9111: LD_INT 22
9113: PUSH
9114: LD_OWVAR 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 21
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 69
9141: ST_TO_ADDR
// if not tmp then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9196
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9151: LD_VAR 0 1
9155: PUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 1
9163: PPUSH
9164: CALL_OW 12
9168: ARRAY
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_INT 4
9175: PPUSH
9176: CALL_OW 12
9180: PPUSH
9181: LD_INT 3000
9183: PPUSH
9184: LD_INT 9000
9186: PPUSH
9187: CALL_OW 12
9191: PPUSH
9192: CALL_OW 492
// end ;
9196: PPOPN 1
9198: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9199: LD_EXP 7
9203: PUSH
9204: LD_EXP 22
9208: AND
9209: IFFALSE 9229
9211: GO 9213
9213: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9214: LD_INT 1
9216: PPUSH
9217: LD_OWVAR 2
9221: PPUSH
9222: LD_INT 0
9224: PPUSH
9225: CALL_OW 324
9229: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9230: LD_EXP 7
9234: PUSH
9235: LD_EXP 23
9239: AND
9240: IFFALSE 9323
9242: GO 9244
9244: DISABLE
9245: LD_INT 0
9247: PPUSH
9248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9249: LD_ADDR_VAR 0 2
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_OWVAR 2
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 21
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PPUSH
9280: CALL_OW 69
9284: ST_TO_ADDR
// if not tmp then
9285: LD_VAR 0 2
9289: NOT
9290: IFFALSE 9294
// exit ;
9292: GO 9323
// for i in tmp do
9294: LD_ADDR_VAR 0 1
9298: PUSH
9299: LD_VAR 0 2
9303: PUSH
9304: FOR_IN
9305: IFFALSE 9321
// SetBLevel ( i , 10 ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_INT 10
9314: PPUSH
9315: CALL_OW 241
9319: GO 9304
9321: POP
9322: POP
// end ;
9323: PPOPN 2
9325: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9326: LD_EXP 7
9330: PUSH
9331: LD_EXP 24
9335: AND
9336: IFFALSE 9447
9338: GO 9340
9340: DISABLE
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
9345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_INT 22
9353: PUSH
9354: LD_OWVAR 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 25
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// if not tmp then
9382: LD_VAR 0 3
9386: NOT
9387: IFFALSE 9391
// exit ;
9389: GO 9447
// un := tmp [ rand ( 1 , tmp ) ] ;
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_VAR 0 3
9400: PUSH
9401: LD_INT 1
9403: PPUSH
9404: LD_VAR 0 3
9408: PPUSH
9409: CALL_OW 12
9413: ARRAY
9414: ST_TO_ADDR
// if Crawls ( un ) then
9415: LD_VAR 0 2
9419: PPUSH
9420: CALL_OW 318
9424: IFFALSE 9435
// ComWalk ( un ) ;
9426: LD_VAR 0 2
9430: PPUSH
9431: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9435: LD_VAR 0 2
9439: PPUSH
9440: LD_INT 5
9442: PPUSH
9443: CALL_OW 336
// end ;
9447: PPOPN 3
9449: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9450: LD_EXP 7
9454: PUSH
9455: LD_EXP 25
9459: AND
9460: PUSH
9461: LD_OWVAR 67
9465: PUSH
9466: LD_INT 4
9468: LESS
9469: AND
9470: IFFALSE 9489
9472: GO 9474
9474: DISABLE
// begin Difficulty := Difficulty + 1 ;
9475: LD_ADDR_OWVAR 67
9479: PUSH
9480: LD_OWVAR 67
9484: PUSH
9485: LD_INT 1
9487: PLUS
9488: ST_TO_ADDR
// end ;
9489: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9490: LD_EXP 7
9494: PUSH
9495: LD_EXP 26
9499: AND
9500: IFFALSE 9603
9502: GO 9504
9504: DISABLE
9505: LD_INT 0
9507: PPUSH
// begin for i := 1 to 5 do
9508: LD_ADDR_VAR 0 1
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_INT 5
9520: PUSH
9521: FOR_TO
9522: IFFALSE 9601
// begin uc_nation := nation_nature ;
9524: LD_ADDR_OWVAR 21
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// uc_side := 0 ;
9532: LD_ADDR_OWVAR 20
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9540: LD_ADDR_OWVAR 29
9544: PUSH
9545: LD_INT 12
9547: PUSH
9548: LD_INT 12
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: ST_TO_ADDR
// hc_agressivity := 20 ;
9555: LD_ADDR_OWVAR 35
9559: PUSH
9560: LD_INT 20
9562: ST_TO_ADDR
// hc_class := class_tiger ;
9563: LD_ADDR_OWVAR 28
9567: PUSH
9568: LD_INT 14
9570: ST_TO_ADDR
// hc_gallery :=  ;
9571: LD_ADDR_OWVAR 33
9575: PUSH
9576: LD_STRING 
9578: ST_TO_ADDR
// hc_name :=  ;
9579: LD_ADDR_OWVAR 26
9583: PUSH
9584: LD_STRING 
9586: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9587: CALL_OW 44
9591: PPUSH
9592: LD_INT 0
9594: PPUSH
9595: CALL_OW 51
// end ;
9599: GO 9521
9601: POP
9602: POP
// end ;
9603: PPOPN 1
9605: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9606: LD_EXP 7
9610: PUSH
9611: LD_EXP 27
9615: AND
9616: IFFALSE 9625
9618: GO 9620
9620: DISABLE
// StreamSibBomb ;
9621: CALL 9626 0 0
9625: END
// export function StreamSibBomb ; var i , x , y ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
// result := false ;
9632: LD_ADDR_VAR 0 1
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// for i := 1 to 16 do
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_INT 16
9652: PUSH
9653: FOR_TO
9654: IFFALSE 9853
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9656: LD_ADDR_VAR 0 3
9660: PUSH
9661: LD_INT 10
9663: PUSH
9664: LD_INT 20
9666: PUSH
9667: LD_INT 30
9669: PUSH
9670: LD_INT 40
9672: PUSH
9673: LD_INT 50
9675: PUSH
9676: LD_INT 60
9678: PUSH
9679: LD_INT 70
9681: PUSH
9682: LD_INT 80
9684: PUSH
9685: LD_INT 90
9687: PUSH
9688: LD_INT 100
9690: PUSH
9691: LD_INT 110
9693: PUSH
9694: LD_INT 120
9696: PUSH
9697: LD_INT 130
9699: PUSH
9700: LD_INT 140
9702: PUSH
9703: LD_INT 150
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 1
9725: PPUSH
9726: LD_INT 15
9728: PPUSH
9729: CALL_OW 12
9733: ARRAY
9734: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9735: LD_ADDR_VAR 0 4
9739: PUSH
9740: LD_INT 10
9742: PUSH
9743: LD_INT 20
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 40
9751: PUSH
9752: LD_INT 50
9754: PUSH
9755: LD_INT 60
9757: PUSH
9758: LD_INT 70
9760: PUSH
9761: LD_INT 80
9763: PUSH
9764: LD_INT 90
9766: PUSH
9767: LD_INT 100
9769: PUSH
9770: LD_INT 110
9772: PUSH
9773: LD_INT 120
9775: PUSH
9776: LD_INT 130
9778: PUSH
9779: LD_INT 140
9781: PUSH
9782: LD_INT 150
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 15
9807: PPUSH
9808: CALL_OW 12
9812: ARRAY
9813: ST_TO_ADDR
// if ValidHex ( x , y ) then
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_VAR 0 4
9823: PPUSH
9824: CALL_OW 488
9828: IFFALSE 9851
// begin result := [ x , y ] ;
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: LD_VAR 0 3
9839: PUSH
9840: LD_VAR 0 4
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: ST_TO_ADDR
// break ;
9849: GO 9853
// end ; end ;
9851: GO 9653
9853: POP
9854: POP
// if result then
9855: LD_VAR 0 1
9859: IFFALSE 9919
// begin ToLua ( playSibBomb() ) ;
9861: LD_STRING playSibBomb()
9863: PPUSH
9864: CALL_OW 559
// wait ( 0 0$14 ) ;
9868: LD_INT 490
9870: PPUSH
9871: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9875: LD_VAR 0 1
9879: PUSH
9880: LD_INT 1
9882: ARRAY
9883: PPUSH
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 2
9891: ARRAY
9892: PPUSH
9893: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9897: LD_VAR 0 1
9901: PUSH
9902: LD_INT 1
9904: ARRAY
9905: PPUSH
9906: LD_VAR 0 1
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PPUSH
9915: CALL_OW 429
// end ; end ;
9919: LD_VAR 0 1
9923: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9924: LD_EXP 7
9928: PUSH
9929: LD_EXP 29
9933: AND
9934: IFFALSE 9946
9936: GO 9938
9938: DISABLE
// YouLost (  ) ;
9939: LD_STRING 
9941: PPUSH
9942: CALL_OW 104
9946: END
// every 0 0$1 trigger StreamModeActive and sFog do
9947: LD_EXP 7
9951: PUSH
9952: LD_EXP 28
9956: AND
9957: IFFALSE 9971
9959: GO 9961
9961: DISABLE
// FogOff ( your_side ) ;
9962: LD_OWVAR 2
9966: PPUSH
9967: CALL_OW 344
9971: END
// every 0 0$1 trigger StreamModeActive and sSun do
9972: LD_EXP 7
9976: PUSH
9977: LD_EXP 30
9981: AND
9982: IFFALSE 10010
9984: GO 9986
9986: DISABLE
// begin solar_recharge_percent := 0 ;
9987: LD_ADDR_OWVAR 79
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9995: LD_INT 10500
9997: PPUSH
9998: CALL_OW 67
// solar_recharge_percent := 100 ;
10002: LD_ADDR_OWVAR 79
10006: PUSH
10007: LD_INT 100
10009: ST_TO_ADDR
// end ;
10010: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10011: LD_EXP 7
10015: PUSH
10016: LD_EXP 31
10020: AND
10021: IFFALSE 10260
10023: GO 10025
10025: DISABLE
10026: LD_INT 0
10028: PPUSH
10029: PPUSH
10030: PPUSH
// begin tmp := [ ] ;
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: EMPTY
10037: ST_TO_ADDR
// for i := 1 to 6 do
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: DOUBLE
10044: LD_INT 1
10046: DEC
10047: ST_TO_ADDR
10048: LD_INT 6
10050: PUSH
10051: FOR_TO
10052: IFFALSE 10157
// begin uc_nation := nation_nature ;
10054: LD_ADDR_OWVAR 21
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// uc_side := 0 ;
10062: LD_ADDR_OWVAR 20
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10070: LD_ADDR_OWVAR 29
10074: PUSH
10075: LD_INT 12
10077: PUSH
10078: LD_INT 12
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: ST_TO_ADDR
// hc_agressivity := 20 ;
10085: LD_ADDR_OWVAR 35
10089: PUSH
10090: LD_INT 20
10092: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10093: LD_ADDR_OWVAR 28
10097: PUSH
10098: LD_INT 17
10100: ST_TO_ADDR
// hc_gallery :=  ;
10101: LD_ADDR_OWVAR 33
10105: PUSH
10106: LD_STRING 
10108: ST_TO_ADDR
// hc_name :=  ;
10109: LD_ADDR_OWVAR 26
10113: PUSH
10114: LD_STRING 
10116: ST_TO_ADDR
// un := CreateHuman ;
10117: LD_ADDR_VAR 0 2
10121: PUSH
10122: CALL_OW 44
10126: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10127: LD_VAR 0 2
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 51
// tmp := tmp ^ un ;
10139: LD_ADDR_VAR 0 3
10143: PUSH
10144: LD_VAR 0 3
10148: PUSH
10149: LD_VAR 0 2
10153: ADD
10154: ST_TO_ADDR
// end ;
10155: GO 10051
10157: POP
10158: POP
// repeat wait ( 0 0$1 ) ;
10159: LD_INT 35
10161: PPUSH
10162: CALL_OW 67
// for un in tmp do
10166: LD_ADDR_VAR 0 2
10170: PUSH
10171: LD_VAR 0 3
10175: PUSH
10176: FOR_IN
10177: IFFALSE 10251
// begin if IsDead ( un ) then
10179: LD_VAR 0 2
10183: PPUSH
10184: CALL_OW 301
10188: IFFALSE 10208
// begin tmp := tmp diff un ;
10190: LD_ADDR_VAR 0 3
10194: PUSH
10195: LD_VAR 0 3
10199: PUSH
10200: LD_VAR 0 2
10204: DIFF
10205: ST_TO_ADDR
// continue ;
10206: GO 10176
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10208: LD_VAR 0 2
10212: PPUSH
10213: LD_INT 3
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_INT 0
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PPUSH
10230: CALL_OW 69
10234: PPUSH
10235: LD_VAR 0 2
10239: PPUSH
10240: CALL_OW 74
10244: PPUSH
10245: CALL_OW 115
// end ;
10249: GO 10176
10251: POP
10252: POP
// until not tmp ;
10253: LD_VAR 0 3
10257: NOT
10258: IFFALSE 10159
// end ;
10260: PPOPN 3
10262: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10263: LD_EXP 7
10267: PUSH
10268: LD_EXP 32
10272: AND
10273: IFFALSE 10327
10275: GO 10277
10277: DISABLE
// begin ToLua ( displayTroll(); ) ;
10278: LD_STRING displayTroll();
10280: PPUSH
10281: CALL_OW 559
// wait ( 3 3$00 ) ;
10285: LD_INT 6300
10287: PPUSH
10288: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10292: LD_STRING hideTroll();
10294: PPUSH
10295: CALL_OW 559
// wait ( 1 1$00 ) ;
10299: LD_INT 2100
10301: PPUSH
10302: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10306: LD_STRING displayTroll();
10308: PPUSH
10309: CALL_OW 559
// wait ( 1 1$00 ) ;
10313: LD_INT 2100
10315: PPUSH
10316: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10320: LD_STRING hideTroll();
10322: PPUSH
10323: CALL_OW 559
// end ;
10327: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10328: LD_EXP 7
10332: PUSH
10333: LD_EXP 33
10337: AND
10338: IFFALSE 10401
10340: GO 10342
10342: DISABLE
10343: LD_INT 0
10345: PPUSH
// begin p := 0 ;
10346: LD_ADDR_VAR 0 1
10350: PUSH
10351: LD_INT 0
10353: ST_TO_ADDR
// repeat game_speed := 1 ;
10354: LD_ADDR_OWVAR 65
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10362: LD_INT 35
10364: PPUSH
10365: CALL_OW 67
// p := p + 1 ;
10369: LD_ADDR_VAR 0 1
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: LD_INT 1
10381: PLUS
10382: ST_TO_ADDR
// until p >= 60 ;
10383: LD_VAR 0 1
10387: PUSH
10388: LD_INT 60
10390: GREATEREQUAL
10391: IFFALSE 10354
// game_speed := 4 ;
10393: LD_ADDR_OWVAR 65
10397: PUSH
10398: LD_INT 4
10400: ST_TO_ADDR
// end ;
10401: PPOPN 1
10403: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10404: LD_EXP 7
10408: PUSH
10409: LD_EXP 34
10413: AND
10414: IFFALSE 10560
10416: GO 10418
10418: DISABLE
10419: LD_INT 0
10421: PPUSH
10422: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10423: LD_ADDR_VAR 0 1
10427: PUSH
10428: LD_INT 22
10430: PUSH
10431: LD_OWVAR 2
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 2
10442: PUSH
10443: LD_INT 30
10445: PUSH
10446: LD_INT 0
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 30
10455: PUSH
10456: LD_INT 1
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: ST_TO_ADDR
// if not depot then
10477: LD_VAR 0 1
10481: NOT
10482: IFFALSE 10486
// exit ;
10484: GO 10560
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10486: LD_ADDR_VAR 0 2
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 1
10498: PPUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: CALL_OW 274
10514: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10515: LD_VAR 0 2
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: LD_INT 0
10525: PPUSH
10526: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10530: LD_VAR 0 2
10534: PPUSH
10535: LD_INT 2
10537: PPUSH
10538: LD_INT 0
10540: PPUSH
10541: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10545: LD_VAR 0 2
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 0
10555: PPUSH
10556: CALL_OW 277
// end ;
10560: PPOPN 2
10562: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10563: LD_EXP 7
10567: PUSH
10568: LD_EXP 35
10572: AND
10573: IFFALSE 10670
10575: GO 10577
10577: DISABLE
10578: LD_INT 0
10580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10581: LD_ADDR_VAR 0 1
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_OWVAR 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 21
10600: PUSH
10601: LD_INT 1
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 3
10610: PUSH
10611: LD_INT 23
10613: PUSH
10614: LD_INT 0
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: PPUSH
10630: CALL_OW 69
10634: ST_TO_ADDR
// if not tmp then
10635: LD_VAR 0 1
10639: NOT
10640: IFFALSE 10644
// exit ;
10642: GO 10670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10644: LD_VAR 0 1
10648: PUSH
10649: LD_INT 1
10651: PPUSH
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 12
10661: ARRAY
10662: PPUSH
10663: LD_INT 200
10665: PPUSH
10666: CALL_OW 234
// end ;
10670: PPOPN 1
10672: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10673: LD_EXP 7
10677: PUSH
10678: LD_EXP 36
10682: AND
10683: IFFALSE 10762
10685: GO 10687
10687: DISABLE
10688: LD_INT 0
10690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_INT 22
10698: PUSH
10699: LD_OWVAR 2
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 21
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: ST_TO_ADDR
// if not tmp then
10727: LD_VAR 0 1
10731: NOT
10732: IFFALSE 10736
// exit ;
10734: GO 10762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_VAR 0 1
10748: PPUSH
10749: CALL_OW 12
10753: ARRAY
10754: PPUSH
10755: LD_INT 60
10757: PPUSH
10758: CALL_OW 234
// end ;
10762: PPOPN 1
10764: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10765: LD_EXP 7
10769: PUSH
10770: LD_EXP 37
10774: AND
10775: IFFALSE 10874
10777: GO 10779
10779: DISABLE
10780: LD_INT 0
10782: PPUSH
10783: PPUSH
// begin enable ;
10784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: LD_INT 22
10792: PUSH
10793: LD_OWVAR 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 61
10804: PUSH
10805: EMPTY
10806: LIST
10807: PUSH
10808: LD_INT 33
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: ST_TO_ADDR
// if not tmp then
10828: LD_VAR 0 1
10832: NOT
10833: IFFALSE 10837
// exit ;
10835: GO 10874
// for i in tmp do
10837: LD_ADDR_VAR 0 2
10841: PUSH
10842: LD_VAR 0 1
10846: PUSH
10847: FOR_IN
10848: IFFALSE 10872
// if IsControledBy ( i ) then
10850: LD_VAR 0 2
10854: PPUSH
10855: CALL_OW 312
10859: IFFALSE 10870
// ComUnlink ( i ) ;
10861: LD_VAR 0 2
10865: PPUSH
10866: CALL_OW 136
10870: GO 10847
10872: POP
10873: POP
// end ;
10874: PPOPN 2
10876: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10877: LD_EXP 7
10881: PUSH
10882: LD_EXP 38
10886: AND
10887: IFFALSE 11027
10889: GO 10891
10891: DISABLE
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// begin ToLua ( displayPowell(); ) ;
10896: LD_STRING displayPowell();
10898: PPUSH
10899: CALL_OW 559
// uc_side := 0 ;
10903: LD_ADDR_OWVAR 20
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// uc_nation := 2 ;
10911: LD_ADDR_OWVAR 21
10915: PUSH
10916: LD_INT 2
10918: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10919: LD_ADDR_OWVAR 37
10923: PUSH
10924: LD_INT 14
10926: ST_TO_ADDR
// vc_engine := engine_siberite ;
10927: LD_ADDR_OWVAR 39
10931: PUSH
10932: LD_INT 3
10934: ST_TO_ADDR
// vc_control := control_apeman ;
10935: LD_ADDR_OWVAR 38
10939: PUSH
10940: LD_INT 5
10942: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10943: LD_ADDR_OWVAR 40
10947: PUSH
10948: LD_INT 29
10950: ST_TO_ADDR
// un := CreateVehicle ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: CALL_OW 45
10960: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10961: LD_VAR 0 2
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10973: LD_INT 35
10975: PPUSH
10976: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_INT 22
10987: PUSH
10988: LD_OWVAR 2
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PPUSH
10997: CALL_OW 69
11001: PPUSH
11002: LD_VAR 0 2
11006: PPUSH
11007: CALL_OW 74
11011: PPUSH
11012: CALL_OW 115
// until IsDead ( un ) ;
11016: LD_VAR 0 2
11020: PPUSH
11021: CALL_OW 301
11025: IFFALSE 10973
// end ;
11027: PPOPN 2
11029: END
// every 0 0$1 trigger StreamModeActive and sStu do
11030: LD_EXP 7
11034: PUSH
11035: LD_EXP 46
11039: AND
11040: IFFALSE 11056
11042: GO 11044
11044: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11045: LD_STRING displayStucuk();
11047: PPUSH
11048: CALL_OW 559
// ResetFog ;
11052: CALL_OW 335
// end ;
11056: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11057: LD_EXP 7
11061: PUSH
11062: LD_EXP 39
11066: AND
11067: IFFALSE 11208
11069: GO 11071
11071: DISABLE
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_OWVAR 2
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 21
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PPUSH
11107: CALL_OW 69
11111: ST_TO_ADDR
// if not tmp then
11112: LD_VAR 0 2
11116: NOT
11117: IFFALSE 11121
// exit ;
11119: GO 11208
// un := tmp [ rand ( 1 , tmp ) ] ;
11121: LD_ADDR_VAR 0 1
11125: PUSH
11126: LD_VAR 0 2
11130: PUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: CALL_OW 12
11143: ARRAY
11144: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11145: LD_VAR 0 1
11149: PPUSH
11150: LD_INT 0
11152: PPUSH
11153: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11157: LD_VAR 0 1
11161: PPUSH
11162: LD_OWVAR 3
11166: PUSH
11167: LD_VAR 0 1
11171: DIFF
11172: PPUSH
11173: LD_VAR 0 1
11177: PPUSH
11178: CALL_OW 74
11182: PPUSH
11183: CALL_OW 115
// wait ( 0 0$20 ) ;
11187: LD_INT 700
11189: PPUSH
11190: CALL_OW 67
// SetSide ( un , your_side ) ;
11194: LD_VAR 0 1
11198: PPUSH
11199: LD_OWVAR 2
11203: PPUSH
11204: CALL_OW 235
// end ;
11208: PPOPN 2
11210: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11211: LD_EXP 7
11215: PUSH
11216: LD_EXP 40
11220: AND
11221: IFFALSE 11327
11223: GO 11225
11225: DISABLE
11226: LD_INT 0
11228: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: LD_INT 22
11236: PUSH
11237: LD_OWVAR 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 0
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: LD_INT 1
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: ST_TO_ADDR
// if not depot then
11283: LD_VAR 0 1
11287: NOT
11288: IFFALSE 11292
// exit ;
11290: GO 11327
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11292: LD_VAR 0 1
11296: PUSH
11297: LD_INT 1
11299: ARRAY
11300: PPUSH
11301: CALL_OW 250
11305: PPUSH
11306: LD_VAR 0 1
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: PPUSH
11315: CALL_OW 251
11319: PPUSH
11320: LD_INT 70
11322: PPUSH
11323: CALL_OW 495
// end ;
11327: PPOPN 1
11329: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11330: LD_EXP 7
11334: PUSH
11335: LD_EXP 41
11339: AND
11340: IFFALSE 11551
11342: GO 11344
11344: DISABLE
11345: LD_INT 0
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
11351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11352: LD_ADDR_VAR 0 5
11356: PUSH
11357: LD_INT 22
11359: PUSH
11360: LD_OWVAR 2
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 21
11371: PUSH
11372: LD_INT 1
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 69
11387: ST_TO_ADDR
// if not tmp then
11388: LD_VAR 0 5
11392: NOT
11393: IFFALSE 11397
// exit ;
11395: GO 11551
// for i in tmp do
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_VAR 0 5
11406: PUSH
11407: FOR_IN
11408: IFFALSE 11549
// begin d := rand ( 0 , 5 ) ;
11410: LD_ADDR_VAR 0 4
11414: PUSH
11415: LD_INT 0
11417: PPUSH
11418: LD_INT 5
11420: PPUSH
11421: CALL_OW 12
11425: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11426: LD_ADDR_VAR 0 2
11430: PUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 250
11440: PPUSH
11441: LD_VAR 0 4
11445: PPUSH
11446: LD_INT 3
11448: PPUSH
11449: LD_INT 12
11451: PPUSH
11452: CALL_OW 12
11456: PPUSH
11457: CALL_OW 272
11461: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11462: LD_ADDR_VAR 0 3
11466: PUSH
11467: LD_VAR 0 1
11471: PPUSH
11472: CALL_OW 251
11476: PPUSH
11477: LD_VAR 0 4
11481: PPUSH
11482: LD_INT 3
11484: PPUSH
11485: LD_INT 12
11487: PPUSH
11488: CALL_OW 12
11492: PPUSH
11493: CALL_OW 273
11497: ST_TO_ADDR
// if ValidHex ( x , y ) then
11498: LD_VAR 0 2
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: CALL_OW 488
11512: IFFALSE 11547
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11514: LD_VAR 0 1
11518: PPUSH
11519: LD_VAR 0 2
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: LD_INT 6
11534: PPUSH
11535: CALL_OW 12
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 483
// end ;
11547: GO 11407
11549: POP
11550: POP
// end ;
11551: PPOPN 5
11553: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11554: LD_EXP 7
11558: PUSH
11559: LD_EXP 42
11563: AND
11564: IFFALSE 11658
11566: GO 11568
11568: DISABLE
11569: LD_INT 0
11571: PPUSH
11572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11573: LD_ADDR_VAR 0 2
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_OWVAR 2
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 32
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 21
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: PPUSH
11615: CALL_OW 69
11619: ST_TO_ADDR
// if not tmp then
11620: LD_VAR 0 2
11624: NOT
11625: IFFALSE 11629
// exit ;
11627: GO 11658
// for i in tmp do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_VAR 0 2
11638: PUSH
11639: FOR_IN
11640: IFFALSE 11656
// SetFuel ( i , 0 ) ;
11642: LD_VAR 0 1
11646: PPUSH
11647: LD_INT 0
11649: PPUSH
11650: CALL_OW 240
11654: GO 11639
11656: POP
11657: POP
// end ;
11658: PPOPN 2
11660: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11661: LD_EXP 7
11665: PUSH
11666: LD_EXP 43
11670: AND
11671: IFFALSE 11737
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11679: LD_ADDR_VAR 0 1
11683: PUSH
11684: LD_INT 22
11686: PUSH
11687: LD_OWVAR 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 30
11698: PUSH
11699: LD_INT 29
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 69
11714: ST_TO_ADDR
// if not tmp then
11715: LD_VAR 0 1
11719: NOT
11720: IFFALSE 11724
// exit ;
11722: GO 11737
// DestroyUnit ( tmp [ 1 ] ) ;
11724: LD_VAR 0 1
11728: PUSH
11729: LD_INT 1
11731: ARRAY
11732: PPUSH
11733: CALL_OW 65
// end ;
11737: PPOPN 1
11739: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11740: LD_EXP 7
11744: PUSH
11745: LD_EXP 45
11749: AND
11750: IFFALSE 11879
11752: GO 11754
11754: DISABLE
11755: LD_INT 0
11757: PPUSH
// begin uc_side := 0 ;
11758: LD_ADDR_OWVAR 20
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// uc_nation := nation_arabian ;
11766: LD_ADDR_OWVAR 21
11770: PUSH
11771: LD_INT 2
11773: ST_TO_ADDR
// hc_gallery :=  ;
11774: LD_ADDR_OWVAR 33
11778: PUSH
11779: LD_STRING 
11781: ST_TO_ADDR
// hc_name :=  ;
11782: LD_ADDR_OWVAR 26
11786: PUSH
11787: LD_STRING 
11789: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11790: LD_INT 1
11792: PPUSH
11793: LD_INT 11
11795: PPUSH
11796: LD_INT 10
11798: PPUSH
11799: CALL_OW 380
// un := CreateHuman ;
11803: LD_ADDR_VAR 0 1
11807: PUSH
11808: CALL_OW 44
11812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11813: LD_VAR 0 1
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11825: LD_INT 35
11827: PPUSH
11828: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11832: LD_VAR 0 1
11836: PPUSH
11837: LD_INT 22
11839: PUSH
11840: LD_OWVAR 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: PPUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 74
11863: PPUSH
11864: CALL_OW 115
// until IsDead ( un ) ;
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 301
11877: IFFALSE 11825
// end ;
11879: PPOPN 1
11881: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11882: LD_EXP 7
11886: PUSH
11887: LD_EXP 47
11891: AND
11892: IFFALSE 11904
11894: GO 11896
11896: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11897: LD_STRING earthquake(getX(game), 0, 32)
11899: PPUSH
11900: CALL_OW 559
11904: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11905: LD_EXP 7
11909: PUSH
11910: LD_EXP 48
11914: AND
11915: IFFALSE 12006
11917: GO 11919
11919: DISABLE
11920: LD_INT 0
11922: PPUSH
// begin enable ;
11923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11924: LD_ADDR_VAR 0 1
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: LD_OWVAR 2
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 21
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 33
11953: PUSH
11954: LD_INT 3
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 69
11970: ST_TO_ADDR
// if not tmp then
11971: LD_VAR 0 1
11975: NOT
11976: IFFALSE 11980
// exit ;
11978: GO 12006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11980: LD_VAR 0 1
11984: PUSH
11985: LD_INT 1
11987: PPUSH
11988: LD_VAR 0 1
11992: PPUSH
11993: CALL_OW 12
11997: ARRAY
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 234
// end ;
12006: PPOPN 1
12008: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12009: LD_EXP 7
12013: PUSH
12014: LD_EXP 49
12018: AND
12019: IFFALSE 12160
12021: GO 12023
12023: DISABLE
12024: LD_INT 0
12026: PPUSH
12027: PPUSH
12028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12029: LD_ADDR_VAR 0 3
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_OWVAR 2
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 1
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PPUSH
12060: CALL_OW 69
12064: ST_TO_ADDR
// if not tmp then
12065: LD_VAR 0 3
12069: NOT
12070: IFFALSE 12074
// exit ;
12072: GO 12160
// un := tmp [ rand ( 1 , tmp ) ] ;
12074: LD_ADDR_VAR 0 2
12078: PUSH
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: CALL_OW 12
12096: ARRAY
12097: ST_TO_ADDR
// if Crawls ( un ) then
12098: LD_VAR 0 2
12102: PPUSH
12103: CALL_OW 318
12107: IFFALSE 12118
// ComWalk ( un ) ;
12109: LD_VAR 0 2
12113: PPUSH
12114: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12118: LD_VAR 0 2
12122: PPUSH
12123: LD_INT 9
12125: PPUSH
12126: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12130: LD_INT 28
12132: PPUSH
12133: LD_OWVAR 2
12137: PPUSH
12138: LD_INT 2
12140: PPUSH
12141: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12145: LD_INT 29
12147: PPUSH
12148: LD_OWVAR 2
12152: PPUSH
12153: LD_INT 2
12155: PPUSH
12156: CALL_OW 322
// end ;
12160: PPOPN 3
12162: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12163: LD_EXP 7
12167: PUSH
12168: LD_EXP 50
12172: AND
12173: IFFALSE 12284
12175: GO 12177
12177: DISABLE
12178: LD_INT 0
12180: PPUSH
12181: PPUSH
12182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12183: LD_ADDR_VAR 0 3
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_OWVAR 2
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 25
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: ST_TO_ADDR
// if not tmp then
12219: LD_VAR 0 3
12223: NOT
12224: IFFALSE 12228
// exit ;
12226: GO 12284
// un := tmp [ rand ( 1 , tmp ) ] ;
12228: LD_ADDR_VAR 0 2
12232: PUSH
12233: LD_VAR 0 3
12237: PUSH
12238: LD_INT 1
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: CALL_OW 12
12250: ARRAY
12251: ST_TO_ADDR
// if Crawls ( un ) then
12252: LD_VAR 0 2
12256: PPUSH
12257: CALL_OW 318
12261: IFFALSE 12272
// ComWalk ( un ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12272: LD_VAR 0 2
12276: PPUSH
12277: LD_INT 8
12279: PPUSH
12280: CALL_OW 336
// end ;
12284: PPOPN 3
12286: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12287: LD_EXP 7
12291: PUSH
12292: LD_EXP 51
12296: AND
12297: IFFALSE 12441
12299: GO 12301
12301: DISABLE
12302: LD_INT 0
12304: PPUSH
12305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: LD_INT 22
12313: PUSH
12314: LD_OWVAR 2
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 21
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 34
12338: PUSH
12339: LD_INT 12
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 34
12348: PUSH
12349: LD_INT 51
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 34
12358: PUSH
12359: LD_INT 32
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
// if not tmp then
12382: LD_VAR 0 2
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12441
// for i in tmp do
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_VAR 0 2
12400: PUSH
12401: FOR_IN
12402: IFFALSE 12439
// if GetCargo ( i , mat_artifact ) = 0 then
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_INT 4
12411: PPUSH
12412: CALL_OW 289
12416: PUSH
12417: LD_INT 0
12419: EQUAL
12420: IFFALSE 12437
// SetCargo ( i , mat_siberit , 100 ) ;
12422: LD_VAR 0 1
12426: PPUSH
12427: LD_INT 3
12429: PPUSH
12430: LD_INT 100
12432: PPUSH
12433: CALL_OW 290
12437: GO 12401
12439: POP
12440: POP
// end ;
12441: PPOPN 2
12443: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12444: LD_EXP 7
12448: PUSH
12449: LD_EXP 52
12453: AND
12454: IFFALSE 12637
12456: GO 12458
12458: DISABLE
12459: LD_INT 0
12461: PPUSH
12462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: ST_TO_ADDR
// if not tmp then
12485: LD_VAR 0 2
12489: NOT
12490: IFFALSE 12494
// exit ;
12492: GO 12637
// for i := 1 to 2 do
12494: LD_ADDR_VAR 0 1
12498: PUSH
12499: DOUBLE
12500: LD_INT 1
12502: DEC
12503: ST_TO_ADDR
12504: LD_INT 2
12506: PUSH
12507: FOR_TO
12508: IFFALSE 12635
// begin uc_side := your_side ;
12510: LD_ADDR_OWVAR 20
12514: PUSH
12515: LD_OWVAR 2
12519: ST_TO_ADDR
// uc_nation := nation_american ;
12520: LD_ADDR_OWVAR 21
12524: PUSH
12525: LD_INT 1
12527: ST_TO_ADDR
// vc_chassis := us_morphling ;
12528: LD_ADDR_OWVAR 37
12532: PUSH
12533: LD_INT 5
12535: ST_TO_ADDR
// vc_engine := engine_siberite ;
12536: LD_ADDR_OWVAR 39
12540: PUSH
12541: LD_INT 3
12543: ST_TO_ADDR
// vc_control := control_computer ;
12544: LD_ADDR_OWVAR 38
12548: PUSH
12549: LD_INT 3
12551: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12552: LD_ADDR_OWVAR 40
12556: PUSH
12557: LD_INT 10
12559: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12560: LD_VAR 0 2
12564: PUSH
12565: LD_INT 1
12567: ARRAY
12568: PPUSH
12569: CALL_OW 310
12573: NOT
12574: IFFALSE 12621
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12576: CALL_OW 45
12580: PPUSH
12581: LD_VAR 0 2
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PPUSH
12590: CALL_OW 250
12594: PPUSH
12595: LD_VAR 0 2
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 251
12608: PPUSH
12609: LD_INT 12
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 50
12619: GO 12633
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12621: CALL_OW 45
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 51
// end ;
12633: GO 12507
12635: POP
12636: POP
// end ;
12637: PPOPN 2
12639: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12640: LD_EXP 7
12644: PUSH
12645: LD_EXP 53
12649: AND
12650: IFFALSE 12872
12652: GO 12654
12654: DISABLE
12655: LD_INT 0
12657: PPUSH
12658: PPUSH
12659: PPUSH
12660: PPUSH
12661: PPUSH
12662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12663: LD_ADDR_VAR 0 6
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_OWVAR 2
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 3
12692: PUSH
12693: LD_INT 23
12695: PUSH
12696: LD_INT 0
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: ST_TO_ADDR
// if not tmp then
12717: LD_VAR 0 6
12721: NOT
12722: IFFALSE 12726
// exit ;
12724: GO 12872
// s1 := rand ( 1 , 4 ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 1
12733: PPUSH
12734: LD_INT 4
12736: PPUSH
12737: CALL_OW 12
12741: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12742: LD_ADDR_VAR 0 4
12746: PUSH
12747: LD_VAR 0 6
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: LD_VAR 0 2
12760: PPUSH
12761: CALL_OW 259
12765: ST_TO_ADDR
// if s1 = 1 then
12766: LD_VAR 0 2
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: IFFALSE 12794
// s2 := rand ( 2 , 4 ) else
12776: LD_ADDR_VAR 0 3
12780: PUSH
12781: LD_INT 2
12783: PPUSH
12784: LD_INT 4
12786: PPUSH
12787: CALL_OW 12
12791: ST_TO_ADDR
12792: GO 12802
// s2 := 1 ;
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12802: LD_ADDR_VAR 0 5
12806: PUSH
12807: LD_VAR 0 6
12811: PUSH
12812: LD_INT 1
12814: ARRAY
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: CALL_OW 259
12825: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12826: LD_VAR 0 6
12830: PUSH
12831: LD_INT 1
12833: ARRAY
12834: PPUSH
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_VAR 0 5
12844: PPUSH
12845: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12849: LD_VAR 0 6
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: PPUSH
12858: LD_VAR 0 3
12862: PPUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: CALL_OW 237
// end ;
12872: PPOPN 6
12874: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12875: LD_EXP 7
12879: PUSH
12880: LD_EXP 54
12884: AND
12885: IFFALSE 12964
12887: GO 12889
12889: DISABLE
12890: LD_INT 0
12892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12893: LD_ADDR_VAR 0 1
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 30
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: ST_TO_ADDR
// if not tmp then
12929: LD_VAR 0 1
12933: NOT
12934: IFFALSE 12938
// exit ;
12936: GO 12964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12938: LD_VAR 0 1
12942: PUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 1
12950: PPUSH
12951: CALL_OW 12
12955: ARRAY
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 234
// end ;
12964: PPOPN 1
12966: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12967: LD_EXP 7
12971: PUSH
12972: LD_EXP 55
12976: AND
12977: IFFALSE 13089
12979: GO 12981
12981: DISABLE
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12986: LD_ADDR_VAR 0 2
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_OWVAR 2
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: LD_INT 30
13008: PUSH
13009: LD_INT 27
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 26
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 28
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 69
13050: ST_TO_ADDR
// if not tmp then
13051: LD_VAR 0 2
13055: NOT
13056: IFFALSE 13060
// exit ;
13058: GO 13089
// for i in tmp do
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_VAR 0 2
13069: PUSH
13070: FOR_IN
13071: IFFALSE 13087
// SetLives ( i , 1 ) ;
13073: LD_VAR 0 1
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 234
13085: GO 13070
13087: POP
13088: POP
// end ;
13089: PPOPN 2
13091: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13092: LD_EXP 7
13096: PUSH
13097: LD_EXP 56
13101: AND
13102: IFFALSE 13389
13104: GO 13106
13106: DISABLE
13107: LD_INT 0
13109: PPUSH
13110: PPUSH
13111: PPUSH
// begin i := rand ( 1 , 7 ) ;
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 7
13122: PPUSH
13123: CALL_OW 12
13127: ST_TO_ADDR
// case i of 1 :
13128: LD_VAR 0 1
13132: PUSH
13133: LD_INT 1
13135: DOUBLE
13136: EQUAL
13137: IFTRUE 13141
13139: GO 13151
13141: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13142: LD_STRING earthquake(getX(game), 0, 32)
13144: PPUSH
13145: CALL_OW 559
13149: GO 13389
13151: LD_INT 2
13153: DOUBLE
13154: EQUAL
13155: IFTRUE 13159
13157: GO 13173
13159: POP
// begin ToLua ( displayStucuk(); ) ;
13160: LD_STRING displayStucuk();
13162: PPUSH
13163: CALL_OW 559
// ResetFog ;
13167: CALL_OW 335
// end ; 3 :
13171: GO 13389
13173: LD_INT 3
13175: DOUBLE
13176: EQUAL
13177: IFTRUE 13181
13179: GO 13285
13181: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_OWVAR 2
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not tmp then
13218: LD_VAR 0 2
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13389
// un := tmp [ rand ( 1 , tmp ) ] ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_VAR 0 2
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 2
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: ST_TO_ADDR
// if Crawls ( un ) then
13251: LD_VAR 0 3
13255: PPUSH
13256: CALL_OW 318
13260: IFFALSE 13271
// ComWalk ( un ) ;
13262: LD_VAR 0 3
13266: PPUSH
13267: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13271: LD_VAR 0 3
13275: PPUSH
13276: LD_INT 8
13278: PPUSH
13279: CALL_OW 336
// end ; 4 :
13283: GO 13389
13285: LD_INT 4
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13367
13293: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: LD_INT 22
13301: PUSH
13302: LD_OWVAR 2
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 30
13313: PUSH
13314: LD_INT 29
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: ST_TO_ADDR
// if not tmp then
13330: LD_VAR 0 2
13334: NOT
13335: IFFALSE 13339
// exit ;
13337: GO 13389
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13339: LD_VAR 0 2
13343: PUSH
13344: LD_INT 1
13346: ARRAY
13347: PPUSH
13348: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13352: LD_VAR 0 2
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 65
// end ; 5 .. 7 :
13365: GO 13389
13367: LD_INT 5
13369: DOUBLE
13370: GREATEREQUAL
13371: IFFALSE 13379
13373: LD_INT 7
13375: DOUBLE
13376: LESSEQUAL
13377: IFTRUE 13381
13379: GO 13388
13381: POP
// StreamSibBomb ; end ;
13382: CALL 9626 0 0
13386: GO 13389
13388: POP
// end ;
13389: PPOPN 3
13391: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13392: LD_EXP 7
13396: PUSH
13397: LD_EXP 57
13401: AND
13402: IFFALSE 13558
13404: GO 13406
13406: DISABLE
13407: LD_INT 0
13409: PPUSH
13410: PPUSH
13411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13412: LD_ADDR_VAR 0 2
13416: PUSH
13417: LD_INT 81
13419: PUSH
13420: LD_OWVAR 2
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: LD_INT 21
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 21
13444: PUSH
13445: LD_INT 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PPUSH
13461: CALL_OW 69
13465: ST_TO_ADDR
// if not tmp then
13466: LD_VAR 0 2
13470: NOT
13471: IFFALSE 13475
// exit ;
13473: GO 13558
// p := 0 ;
13475: LD_ADDR_VAR 0 3
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13483: LD_INT 35
13485: PPUSH
13486: CALL_OW 67
// p := p + 1 ;
13490: LD_ADDR_VAR 0 3
13494: PUSH
13495: LD_VAR 0 3
13499: PUSH
13500: LD_INT 1
13502: PLUS
13503: ST_TO_ADDR
// for i in tmp do
13504: LD_ADDR_VAR 0 1
13508: PUSH
13509: LD_VAR 0 2
13513: PUSH
13514: FOR_IN
13515: IFFALSE 13546
// if GetLives ( i ) < 1000 then
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 256
13526: PUSH
13527: LD_INT 1000
13529: LESS
13530: IFFALSE 13544
// SetLives ( i , 1000 ) ;
13532: LD_VAR 0 1
13536: PPUSH
13537: LD_INT 1000
13539: PPUSH
13540: CALL_OW 234
13544: GO 13514
13546: POP
13547: POP
// until p > 20 ;
13548: LD_VAR 0 3
13552: PUSH
13553: LD_INT 20
13555: GREATER
13556: IFFALSE 13483
// end ;
13558: PPOPN 3
13560: END
// every 0 0$1 trigger StreamModeActive and sTime do
13561: LD_EXP 7
13565: PUSH
13566: LD_EXP 58
13570: AND
13571: IFFALSE 13606
13573: GO 13575
13575: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13576: LD_INT 28
13578: PPUSH
13579: LD_OWVAR 2
13583: PPUSH
13584: LD_INT 2
13586: PPUSH
13587: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13591: LD_INT 30
13593: PPUSH
13594: LD_OWVAR 2
13598: PPUSH
13599: LD_INT 2
13601: PPUSH
13602: CALL_OW 322
// end ;
13606: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13607: LD_EXP 7
13611: PUSH
13612: LD_EXP 59
13616: AND
13617: IFFALSE 13738
13619: GO 13621
13621: DISABLE
13622: LD_INT 0
13624: PPUSH
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 23
13658: PUSH
13659: LD_INT 0
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: ST_TO_ADDR
// if not tmp then
13680: LD_VAR 0 2
13684: NOT
13685: IFFALSE 13689
// exit ;
13687: GO 13738
// for i in tmp do
13689: LD_ADDR_VAR 0 1
13693: PUSH
13694: LD_VAR 0 2
13698: PUSH
13699: FOR_IN
13700: IFFALSE 13736
// begin if Crawls ( i ) then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 318
13711: IFFALSE 13722
// ComWalk ( i ) ;
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 138
// SetClass ( i , 2 ) ;
13722: LD_VAR 0 1
13726: PPUSH
13727: LD_INT 2
13729: PPUSH
13730: CALL_OW 336
// end ;
13734: GO 13699
13736: POP
13737: POP
// end ;
13738: PPOPN 2
13740: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13741: LD_EXP 7
13745: PUSH
13746: LD_EXP 60
13750: AND
13751: IFFALSE 14039
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13761: LD_OWVAR 2
13765: PPUSH
13766: LD_INT 9
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13779: LD_INT 9
13781: PPUSH
13782: LD_OWVAR 2
13786: PPUSH
13787: CALL_OW 343
// uc_side := 9 ;
13791: LD_ADDR_OWVAR 20
13795: PUSH
13796: LD_INT 9
13798: ST_TO_ADDR
// uc_nation := 2 ;
13799: LD_ADDR_OWVAR 21
13803: PUSH
13804: LD_INT 2
13806: ST_TO_ADDR
// hc_name := Dark Warrior ;
13807: LD_ADDR_OWVAR 26
13811: PUSH
13812: LD_STRING Dark Warrior
13814: ST_TO_ADDR
// hc_gallery :=  ;
13815: LD_ADDR_OWVAR 33
13819: PUSH
13820: LD_STRING 
13822: ST_TO_ADDR
// hc_noskilllimit := true ;
13823: LD_ADDR_OWVAR 76
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13831: LD_ADDR_OWVAR 31
13835: PUSH
13836: LD_INT 30
13838: PUSH
13839: LD_INT 30
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 30
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: ST_TO_ADDR
// un := CreateHuman ;
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: CALL_OW 44
13863: ST_TO_ADDR
// hc_noskilllimit := false ;
13864: LD_ADDR_OWVAR 76
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13872: LD_VAR 0 3
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: CALL_OW 51
// ToLua ( playRanger() ) ;
13884: LD_STRING playRanger()
13886: PPUSH
13887: CALL_OW 559
// p := 0 ;
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// p := p + 1 ;
13906: LD_ADDR_VAR 0 2
13910: PUSH
13911: LD_VAR 0 2
13915: PUSH
13916: LD_INT 1
13918: PLUS
13919: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13920: LD_VAR 0 3
13924: PPUSH
13925: CALL_OW 256
13929: PUSH
13930: LD_INT 1000
13932: LESS
13933: IFFALSE 13947
// SetLives ( un , 1000 ) ;
13935: LD_VAR 0 3
13939: PPUSH
13940: LD_INT 1000
13942: PPUSH
13943: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_INT 81
13954: PUSH
13955: LD_OWVAR 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 91
13966: PUSH
13967: LD_VAR 0 3
13971: PUSH
13972: LD_INT 30
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PPUSH
13984: CALL_OW 69
13988: PPUSH
13989: LD_VAR 0 3
13993: PPUSH
13994: CALL_OW 74
13998: PPUSH
13999: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14003: LD_VAR 0 2
14007: PUSH
14008: LD_INT 80
14010: GREATER
14011: PUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: CALL_OW 301
14021: OR
14022: IFFALSE 13899
// if un then
14024: LD_VAR 0 3
14028: IFFALSE 14039
// RemoveUnit ( un ) ;
14030: LD_VAR 0 3
14034: PPUSH
14035: CALL_OW 64
// end ;
14039: PPOPN 3
14041: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14042: LD_EXP 61
14046: IFFALSE 14162
14048: GO 14050
14050: DISABLE
14051: LD_INT 0
14053: PPUSH
14054: PPUSH
14055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14056: LD_ADDR_VAR 0 2
14060: PUSH
14061: LD_INT 81
14063: PUSH
14064: LD_OWVAR 2
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14092: LD_STRING playComputer()
14094: PPUSH
14095: CALL_OW 559
// if not tmp then
14099: LD_VAR 0 2
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14162
// for i in tmp do
14108: LD_ADDR_VAR 0 1
14112: PUSH
14113: LD_VAR 0 2
14117: PUSH
14118: FOR_IN
14119: IFFALSE 14160
// for j := 1 to 4 do
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: DOUBLE
14127: LD_INT 1
14129: DEC
14130: ST_TO_ADDR
14131: LD_INT 4
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14156
// SetSkill ( i , j , 10 ) ;
14137: LD_VAR 0 1
14141: PPUSH
14142: LD_VAR 0 3
14146: PPUSH
14147: LD_INT 10
14149: PPUSH
14150: CALL_OW 237
14154: GO 14134
14156: POP
14157: POP
14158: GO 14118
14160: POP
14161: POP
// end ;
14162: PPOPN 3
14164: END
// every 0 0$1 trigger s30 do var i , tmp ;
14165: LD_EXP 62
14169: IFFALSE 14238
14171: GO 14173
14173: DISABLE
14174: LD_INT 0
14176: PPUSH
14177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14178: LD_ADDR_VAR 0 2
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_OWVAR 2
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: ST_TO_ADDR
// if not tmp then
14200: LD_VAR 0 2
14204: NOT
14205: IFFALSE 14209
// exit ;
14207: GO 14238
// for i in tmp do
14209: LD_ADDR_VAR 0 1
14213: PUSH
14214: LD_VAR 0 2
14218: PUSH
14219: FOR_IN
14220: IFFALSE 14236
// SetLives ( i , 300 ) ;
14222: LD_VAR 0 1
14226: PPUSH
14227: LD_INT 300
14229: PPUSH
14230: CALL_OW 234
14234: GO 14219
14236: POP
14237: POP
// end ;
14238: PPOPN 2
14240: END
// every 0 0$1 trigger s60 do var i , tmp ;
14241: LD_EXP 63
14245: IFFALSE 14314
14247: GO 14249
14249: DISABLE
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14254: LD_ADDR_VAR 0 2
14258: PUSH
14259: LD_INT 22
14261: PUSH
14262: LD_OWVAR 2
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PPUSH
14271: CALL_OW 69
14275: ST_TO_ADDR
// if not tmp then
14276: LD_VAR 0 2
14280: NOT
14281: IFFALSE 14285
// exit ;
14283: GO 14314
// for i in tmp do
14285: LD_ADDR_VAR 0 1
14289: PUSH
14290: LD_VAR 0 2
14294: PUSH
14295: FOR_IN
14296: IFFALSE 14312
// SetLives ( i , 600 ) ;
14298: LD_VAR 0 1
14302: PPUSH
14303: LD_INT 600
14305: PPUSH
14306: CALL_OW 234
14310: GO 14295
14312: POP
14313: POP
// end ;
14314: PPOPN 2
14316: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14317: LD_INT 0
14319: PPUSH
// case cmd of 301 :
14320: LD_VAR 0 1
14324: PUSH
14325: LD_INT 301
14327: DOUBLE
14328: EQUAL
14329: IFTRUE 14333
14331: GO 14365
14333: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14334: LD_VAR 0 6
14338: PPUSH
14339: LD_VAR 0 7
14343: PPUSH
14344: LD_VAR 0 8
14348: PPUSH
14349: LD_VAR 0 4
14353: PPUSH
14354: LD_VAR 0 5
14358: PPUSH
14359: CALL 15566 0 5
14363: GO 14486
14365: LD_INT 302
14367: DOUBLE
14368: EQUAL
14369: IFTRUE 14373
14371: GO 14410
14373: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14374: LD_VAR 0 6
14378: PPUSH
14379: LD_VAR 0 7
14383: PPUSH
14384: LD_VAR 0 8
14388: PPUSH
14389: LD_VAR 0 9
14393: PPUSH
14394: LD_VAR 0 4
14398: PPUSH
14399: LD_VAR 0 5
14403: PPUSH
14404: CALL 15657 0 6
14408: GO 14486
14410: LD_INT 303
14412: DOUBLE
14413: EQUAL
14414: IFTRUE 14418
14416: GO 14455
14418: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14419: LD_VAR 0 6
14423: PPUSH
14424: LD_VAR 0 7
14428: PPUSH
14429: LD_VAR 0 8
14433: PPUSH
14434: LD_VAR 0 9
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL 14491 0 6
14453: GO 14486
14455: LD_INT 304
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14485
14463: POP
// hHackTeleport ( unit , x , y ) ; end ;
14464: LD_VAR 0 2
14468: PPUSH
14469: LD_VAR 0 4
14473: PPUSH
14474: LD_VAR 0 5
14478: PPUSH
14479: CALL 16250 0 3
14483: GO 14486
14485: POP
// end ;
14486: LD_VAR 0 12
14490: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14495: LD_VAR 0 1
14499: PUSH
14500: LD_INT 1
14502: LESS
14503: PUSH
14504: LD_VAR 0 1
14508: PUSH
14509: LD_INT 3
14511: GREATER
14512: OR
14513: PUSH
14514: LD_VAR 0 5
14518: PPUSH
14519: LD_VAR 0 6
14523: PPUSH
14524: CALL_OW 428
14528: OR
14529: IFFALSE 14533
// exit ;
14531: GO 15253
// uc_side := your_side ;
14533: LD_ADDR_OWVAR 20
14537: PUSH
14538: LD_OWVAR 2
14542: ST_TO_ADDR
// uc_nation := nation ;
14543: LD_ADDR_OWVAR 21
14547: PUSH
14548: LD_VAR 0 1
14552: ST_TO_ADDR
// bc_level = 1 ;
14553: LD_ADDR_OWVAR 43
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// case btype of 1 :
14561: LD_VAR 0 2
14565: PUSH
14566: LD_INT 1
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14585
14574: POP
// bc_type := b_depot ; 2 :
14575: LD_ADDR_OWVAR 42
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
14583: GO 15197
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14604
14593: POP
// bc_type := b_warehouse ; 3 :
14594: LD_ADDR_OWVAR 42
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
14602: GO 15197
14604: LD_INT 3
14606: DOUBLE
14607: EQUAL
14608: IFTRUE 14612
14610: GO 14623
14612: POP
// bc_type := b_lab ; 4 .. 9 :
14613: LD_ADDR_OWVAR 42
14617: PUSH
14618: LD_INT 6
14620: ST_TO_ADDR
14621: GO 15197
14623: LD_INT 4
14625: DOUBLE
14626: GREATEREQUAL
14627: IFFALSE 14635
14629: LD_INT 9
14631: DOUBLE
14632: LESSEQUAL
14633: IFTRUE 14637
14635: GO 14689
14637: POP
// begin bc_type := b_lab_half ;
14638: LD_ADDR_OWVAR 42
14642: PUSH
14643: LD_INT 7
14645: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14646: LD_ADDR_OWVAR 44
14650: PUSH
14651: LD_INT 10
14653: PUSH
14654: LD_INT 11
14656: PUSH
14657: LD_INT 12
14659: PUSH
14660: LD_INT 15
14662: PUSH
14663: LD_INT 14
14665: PUSH
14666: LD_INT 13
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_INT 3
14684: MINUS
14685: ARRAY
14686: ST_TO_ADDR
// end ; 10 .. 13 :
14687: GO 15197
14689: LD_INT 10
14691: DOUBLE
14692: GREATEREQUAL
14693: IFFALSE 14701
14695: LD_INT 13
14697: DOUBLE
14698: LESSEQUAL
14699: IFTRUE 14703
14701: GO 14780
14703: POP
// begin bc_type := b_lab_full ;
14704: LD_ADDR_OWVAR 42
14708: PUSH
14709: LD_INT 8
14711: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14712: LD_ADDR_OWVAR 44
14716: PUSH
14717: LD_INT 10
14719: PUSH
14720: LD_INT 12
14722: PUSH
14723: LD_INT 14
14725: PUSH
14726: LD_INT 13
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: LD_VAR 0 2
14739: PUSH
14740: LD_INT 9
14742: MINUS
14743: ARRAY
14744: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14745: LD_ADDR_OWVAR 45
14749: PUSH
14750: LD_INT 11
14752: PUSH
14753: LD_INT 15
14755: PUSH
14756: LD_INT 12
14758: PUSH
14759: LD_INT 15
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: PUSH
14768: LD_VAR 0 2
14772: PUSH
14773: LD_INT 9
14775: MINUS
14776: ARRAY
14777: ST_TO_ADDR
// end ; 14 :
14778: GO 15197
14780: LD_INT 14
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 14799
14788: POP
// bc_type := b_workshop ; 15 :
14789: LD_ADDR_OWVAR 42
14793: PUSH
14794: LD_INT 2
14796: ST_TO_ADDR
14797: GO 15197
14799: LD_INT 15
14801: DOUBLE
14802: EQUAL
14803: IFTRUE 14807
14805: GO 14818
14807: POP
// bc_type := b_factory ; 16 :
14808: LD_ADDR_OWVAR 42
14812: PUSH
14813: LD_INT 3
14815: ST_TO_ADDR
14816: GO 15197
14818: LD_INT 16
14820: DOUBLE
14821: EQUAL
14822: IFTRUE 14826
14824: GO 14837
14826: POP
// bc_type := b_ext_gun ; 17 :
14827: LD_ADDR_OWVAR 42
14831: PUSH
14832: LD_INT 17
14834: ST_TO_ADDR
14835: GO 15197
14837: LD_INT 17
14839: DOUBLE
14840: EQUAL
14841: IFTRUE 14845
14843: GO 14873
14845: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14846: LD_ADDR_OWVAR 42
14850: PUSH
14851: LD_INT 19
14853: PUSH
14854: LD_INT 23
14856: PUSH
14857: LD_INT 19
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_VAR 0 1
14869: ARRAY
14870: ST_TO_ADDR
14871: GO 15197
14873: LD_INT 18
14875: DOUBLE
14876: EQUAL
14877: IFTRUE 14881
14879: GO 14892
14881: POP
// bc_type := b_ext_radar ; 19 :
14882: LD_ADDR_OWVAR 42
14886: PUSH
14887: LD_INT 20
14889: ST_TO_ADDR
14890: GO 15197
14892: LD_INT 19
14894: DOUBLE
14895: EQUAL
14896: IFTRUE 14900
14898: GO 14911
14900: POP
// bc_type := b_ext_radio ; 20 :
14901: LD_ADDR_OWVAR 42
14905: PUSH
14906: LD_INT 22
14908: ST_TO_ADDR
14909: GO 15197
14911: LD_INT 20
14913: DOUBLE
14914: EQUAL
14915: IFTRUE 14919
14917: GO 14930
14919: POP
// bc_type := b_ext_siberium ; 21 :
14920: LD_ADDR_OWVAR 42
14924: PUSH
14925: LD_INT 21
14927: ST_TO_ADDR
14928: GO 15197
14930: LD_INT 21
14932: DOUBLE
14933: EQUAL
14934: IFTRUE 14938
14936: GO 14949
14938: POP
// bc_type := b_ext_computer ; 22 :
14939: LD_ADDR_OWVAR 42
14943: PUSH
14944: LD_INT 24
14946: ST_TO_ADDR
14947: GO 15197
14949: LD_INT 22
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 14968
14957: POP
// bc_type := b_ext_track ; 23 :
14958: LD_ADDR_OWVAR 42
14962: PUSH
14963: LD_INT 16
14965: ST_TO_ADDR
14966: GO 15197
14968: LD_INT 23
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 14987
14976: POP
// bc_type := b_ext_laser ; 24 :
14977: LD_ADDR_OWVAR 42
14981: PUSH
14982: LD_INT 25
14984: ST_TO_ADDR
14985: GO 15197
14987: LD_INT 24
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15006
14995: POP
// bc_type := b_control_tower ; 25 :
14996: LD_ADDR_OWVAR 42
15000: PUSH
15001: LD_INT 36
15003: ST_TO_ADDR
15004: GO 15197
15006: LD_INT 25
15008: DOUBLE
15009: EQUAL
15010: IFTRUE 15014
15012: GO 15025
15014: POP
// bc_type := b_breastwork ; 26 :
15015: LD_ADDR_OWVAR 42
15019: PUSH
15020: LD_INT 31
15022: ST_TO_ADDR
15023: GO 15197
15025: LD_INT 26
15027: DOUBLE
15028: EQUAL
15029: IFTRUE 15033
15031: GO 15044
15033: POP
// bc_type := b_bunker ; 27 :
15034: LD_ADDR_OWVAR 42
15038: PUSH
15039: LD_INT 32
15041: ST_TO_ADDR
15042: GO 15197
15044: LD_INT 27
15046: DOUBLE
15047: EQUAL
15048: IFTRUE 15052
15050: GO 15063
15052: POP
// bc_type := b_turret ; 28 :
15053: LD_ADDR_OWVAR 42
15057: PUSH
15058: LD_INT 33
15060: ST_TO_ADDR
15061: GO 15197
15063: LD_INT 28
15065: DOUBLE
15066: EQUAL
15067: IFTRUE 15071
15069: GO 15082
15071: POP
// bc_type := b_armoury ; 29 :
15072: LD_ADDR_OWVAR 42
15076: PUSH
15077: LD_INT 4
15079: ST_TO_ADDR
15080: GO 15197
15082: LD_INT 29
15084: DOUBLE
15085: EQUAL
15086: IFTRUE 15090
15088: GO 15101
15090: POP
// bc_type := b_barracks ; 30 :
15091: LD_ADDR_OWVAR 42
15095: PUSH
15096: LD_INT 5
15098: ST_TO_ADDR
15099: GO 15197
15101: LD_INT 30
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15120
15109: POP
// bc_type := b_solar_power ; 31 :
15110: LD_ADDR_OWVAR 42
15114: PUSH
15115: LD_INT 27
15117: ST_TO_ADDR
15118: GO 15197
15120: LD_INT 31
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15139
15128: POP
// bc_type := b_oil_power ; 32 :
15129: LD_ADDR_OWVAR 42
15133: PUSH
15134: LD_INT 26
15136: ST_TO_ADDR
15137: GO 15197
15139: LD_INT 32
15141: DOUBLE
15142: EQUAL
15143: IFTRUE 15147
15145: GO 15158
15147: POP
// bc_type := b_siberite_power ; 33 :
15148: LD_ADDR_OWVAR 42
15152: PUSH
15153: LD_INT 28
15155: ST_TO_ADDR
15156: GO 15197
15158: LD_INT 33
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15177
15166: POP
// bc_type := b_oil_mine ; 34 :
15167: LD_ADDR_OWVAR 42
15171: PUSH
15172: LD_INT 29
15174: ST_TO_ADDR
15175: GO 15197
15177: LD_INT 34
15179: DOUBLE
15180: EQUAL
15181: IFTRUE 15185
15183: GO 15196
15185: POP
// bc_type := b_siberite_mine ; end ;
15186: LD_ADDR_OWVAR 42
15190: PUSH
15191: LD_INT 30
15193: ST_TO_ADDR
15194: GO 15197
15196: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15197: LD_ADDR_VAR 0 8
15201: PUSH
15202: LD_VAR 0 5
15206: PPUSH
15207: LD_VAR 0 6
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: CALL_OW 47
15221: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15222: LD_OWVAR 42
15226: PUSH
15227: LD_INT 32
15229: PUSH
15230: LD_INT 33
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: IN
15237: IFFALSE 15253
// PlaceWeaponTurret ( b , weapon ) ;
15239: LD_VAR 0 8
15243: PPUSH
15244: LD_VAR 0 4
15248: PPUSH
15249: CALL_OW 431
// end ;
15253: LD_VAR 0 7
15257: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15264: LD_ADDR_VAR 0 4
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_OWVAR 2
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 0
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 30
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PPUSH
15313: CALL_OW 69
15317: ST_TO_ADDR
// if not tmp then
15318: LD_VAR 0 4
15322: NOT
15323: IFFALSE 15327
// exit ;
15325: GO 15386
// for i in tmp do
15327: LD_ADDR_VAR 0 2
15331: PUSH
15332: LD_VAR 0 4
15336: PUSH
15337: FOR_IN
15338: IFFALSE 15384
// for j = 1 to 3 do
15340: LD_ADDR_VAR 0 3
15344: PUSH
15345: DOUBLE
15346: LD_INT 1
15348: DEC
15349: ST_TO_ADDR
15350: LD_INT 3
15352: PUSH
15353: FOR_TO
15354: IFFALSE 15380
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15356: LD_VAR 0 2
15360: PPUSH
15361: CALL_OW 274
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 99999
15373: PPUSH
15374: CALL_OW 277
15378: GO 15353
15380: POP
15381: POP
15382: GO 15337
15384: POP
15385: POP
// end ;
15386: LD_VAR 0 1
15390: RET
// export function hHackSetLevel10 ; var i , j ; begin
15391: LD_INT 0
15393: PPUSH
15394: PPUSH
15395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: PUSH
15416: FOR_IN
15417: IFFALSE 15469
// if IsSelected ( i ) then
15419: LD_VAR 0 2
15423: PPUSH
15424: CALL_OW 306
15428: IFFALSE 15467
// begin for j := 1 to 4 do
15430: LD_ADDR_VAR 0 3
15434: PUSH
15435: DOUBLE
15436: LD_INT 1
15438: DEC
15439: ST_TO_ADDR
15440: LD_INT 4
15442: PUSH
15443: FOR_TO
15444: IFFALSE 15465
// SetSkill ( i , j , 10 ) ;
15446: LD_VAR 0 2
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: LD_INT 10
15458: PPUSH
15459: CALL_OW 237
15463: GO 15443
15465: POP
15466: POP
// end ;
15467: GO 15416
15469: POP
15470: POP
// end ;
15471: LD_VAR 0 1
15475: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15476: LD_INT 0
15478: PPUSH
15479: PPUSH
15480: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15481: LD_ADDR_VAR 0 2
15485: PUSH
15486: LD_INT 22
15488: PUSH
15489: LD_OWVAR 2
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PPUSH
15512: CALL_OW 69
15516: PUSH
15517: FOR_IN
15518: IFFALSE 15559
// begin for j := 1 to 4 do
15520: LD_ADDR_VAR 0 3
15524: PUSH
15525: DOUBLE
15526: LD_INT 1
15528: DEC
15529: ST_TO_ADDR
15530: LD_INT 4
15532: PUSH
15533: FOR_TO
15534: IFFALSE 15555
// SetSkill ( i , j , 10 ) ;
15536: LD_VAR 0 2
15540: PPUSH
15541: LD_VAR 0 3
15545: PPUSH
15546: LD_INT 10
15548: PPUSH
15549: CALL_OW 237
15553: GO 15533
15555: POP
15556: POP
// end ;
15557: GO 15517
15559: POP
15560: POP
// end ;
15561: LD_VAR 0 1
15565: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15566: LD_INT 0
15568: PPUSH
// uc_side := your_side ;
15569: LD_ADDR_OWVAR 20
15573: PUSH
15574: LD_OWVAR 2
15578: ST_TO_ADDR
// uc_nation := nation ;
15579: LD_ADDR_OWVAR 21
15583: PUSH
15584: LD_VAR 0 1
15588: ST_TO_ADDR
// InitHc ;
15589: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15593: LD_INT 0
15595: PPUSH
15596: LD_VAR 0 2
15600: PPUSH
15601: LD_VAR 0 3
15605: PPUSH
15606: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15610: LD_VAR 0 4
15614: PPUSH
15615: LD_VAR 0 5
15619: PPUSH
15620: CALL_OW 428
15624: PUSH
15625: LD_INT 0
15627: EQUAL
15628: IFFALSE 15652
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15630: CALL_OW 44
15634: PPUSH
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_VAR 0 5
15644: PPUSH
15645: LD_INT 1
15647: PPUSH
15648: CALL_OW 48
// end ;
15652: LD_VAR 0 6
15656: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15657: LD_INT 0
15659: PPUSH
15660: PPUSH
// uc_side := your_side ;
15661: LD_ADDR_OWVAR 20
15665: PUSH
15666: LD_OWVAR 2
15670: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15671: LD_VAR 0 1
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 4
15687: PUSH
15688: LD_INT 5
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: IN
15698: IFFALSE 15710
// uc_nation := nation_american else
15700: LD_ADDR_OWVAR 21
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
15708: GO 15753
// if chassis in [ 11 , 12 , 13 , 14 ] then
15710: LD_VAR 0 1
15714: PUSH
15715: LD_INT 11
15717: PUSH
15718: LD_INT 12
15720: PUSH
15721: LD_INT 13
15723: PUSH
15724: LD_INT 14
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: IN
15733: IFFALSE 15745
// uc_nation := nation_arabian else
15735: LD_ADDR_OWVAR 21
15739: PUSH
15740: LD_INT 2
15742: ST_TO_ADDR
15743: GO 15753
// uc_nation := nation_russian ;
15745: LD_ADDR_OWVAR 21
15749: PUSH
15750: LD_INT 3
15752: ST_TO_ADDR
// vc_chassis := chassis ;
15753: LD_ADDR_OWVAR 37
15757: PUSH
15758: LD_VAR 0 1
15762: ST_TO_ADDR
// vc_engine := engine ;
15763: LD_ADDR_OWVAR 39
15767: PUSH
15768: LD_VAR 0 2
15772: ST_TO_ADDR
// vc_control := control ;
15773: LD_ADDR_OWVAR 38
15777: PUSH
15778: LD_VAR 0 3
15782: ST_TO_ADDR
// vc_weapon := weapon ;
15783: LD_ADDR_OWVAR 40
15787: PUSH
15788: LD_VAR 0 4
15792: ST_TO_ADDR
// un := CreateVehicle ;
15793: LD_ADDR_VAR 0 8
15797: PUSH
15798: CALL_OW 45
15802: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15803: LD_VAR 0 8
15807: PPUSH
15808: LD_INT 0
15810: PPUSH
15811: LD_INT 5
15813: PPUSH
15814: CALL_OW 12
15818: PPUSH
15819: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15823: LD_VAR 0 8
15827: PPUSH
15828: LD_VAR 0 5
15832: PPUSH
15833: LD_VAR 0 6
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 48
// end ;
15845: LD_VAR 0 7
15849: RET
// export hInvincible ; every 1 do
15850: GO 15852
15852: DISABLE
// hInvincible := [ ] ;
15853: LD_ADDR_EXP 64
15857: PUSH
15858: EMPTY
15859: ST_TO_ADDR
15860: END
// every 10 do var i ;
15861: GO 15863
15863: DISABLE
15864: LD_INT 0
15866: PPUSH
// begin enable ;
15867: ENABLE
// if not hInvincible then
15868: LD_EXP 64
15872: NOT
15873: IFFALSE 15877
// exit ;
15875: GO 15921
// for i in hInvincible do
15877: LD_ADDR_VAR 0 1
15881: PUSH
15882: LD_EXP 64
15886: PUSH
15887: FOR_IN
15888: IFFALSE 15919
// if GetLives ( i ) < 1000 then
15890: LD_VAR 0 1
15894: PPUSH
15895: CALL_OW 256
15899: PUSH
15900: LD_INT 1000
15902: LESS
15903: IFFALSE 15917
// SetLives ( i , 1000 ) ;
15905: LD_VAR 0 1
15909: PPUSH
15910: LD_INT 1000
15912: PPUSH
15913: CALL_OW 234
15917: GO 15887
15919: POP
15920: POP
// end ;
15921: PPOPN 1
15923: END
// export function hHackInvincible ; var i ; begin
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 2
15935: PUSH
15936: LD_INT 21
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: PPUSH
15961: CALL_OW 69
15965: PUSH
15966: FOR_IN
15967: IFFALSE 16028
// if IsSelected ( i ) then
15969: LD_VAR 0 2
15973: PPUSH
15974: CALL_OW 306
15978: IFFALSE 16026
// begin if i in hInvincible then
15980: LD_VAR 0 2
15984: PUSH
15985: LD_EXP 64
15989: IN
15990: IFFALSE 16010
// hInvincible := hInvincible diff i else
15992: LD_ADDR_EXP 64
15996: PUSH
15997: LD_EXP 64
16001: PUSH
16002: LD_VAR 0 2
16006: DIFF
16007: ST_TO_ADDR
16008: GO 16026
// hInvincible := hInvincible union i ;
16010: LD_ADDR_EXP 64
16014: PUSH
16015: LD_EXP 64
16019: PUSH
16020: LD_VAR 0 2
16024: UNION
16025: ST_TO_ADDR
// end ;
16026: GO 15966
16028: POP
16029: POP
// end ;
16030: LD_VAR 0 1
16034: RET
// export function hHackInvisible ; var i , j ; begin
16035: LD_INT 0
16037: PPUSH
16038: PPUSH
16039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 69
16059: PUSH
16060: FOR_IN
16061: IFFALSE 16085
// if IsSelected ( i ) then
16063: LD_VAR 0 2
16067: PPUSH
16068: CALL_OW 306
16072: IFFALSE 16083
// ComForceInvisible ( i ) ;
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 496
16083: GO 16060
16085: POP
16086: POP
// end ;
16087: LD_VAR 0 1
16091: RET
// export function hHackChangeYourSide ; begin
16092: LD_INT 0
16094: PPUSH
// if your_side = 8 then
16095: LD_OWVAR 2
16099: PUSH
16100: LD_INT 8
16102: EQUAL
16103: IFFALSE 16115
// your_side := 0 else
16105: LD_ADDR_OWVAR 2
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
16113: GO 16129
// your_side := your_side + 1 ;
16115: LD_ADDR_OWVAR 2
16119: PUSH
16120: LD_OWVAR 2
16124: PUSH
16125: LD_INT 1
16127: PLUS
16128: ST_TO_ADDR
// end ;
16129: LD_VAR 0 1
16133: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16134: LD_INT 0
16136: PPUSH
16137: PPUSH
16138: PPUSH
// for i in all_units do
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_OWVAR 3
16148: PUSH
16149: FOR_IN
16150: IFFALSE 16228
// if IsSelected ( i ) then
16152: LD_VAR 0 2
16156: PPUSH
16157: CALL_OW 306
16161: IFFALSE 16226
// begin j := GetSide ( i ) ;
16163: LD_ADDR_VAR 0 3
16167: PUSH
16168: LD_VAR 0 2
16172: PPUSH
16173: CALL_OW 255
16177: ST_TO_ADDR
// if j = 8 then
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 8
16185: EQUAL
16186: IFFALSE 16198
// j := 0 else
16188: LD_ADDR_VAR 0 3
16192: PUSH
16193: LD_INT 0
16195: ST_TO_ADDR
16196: GO 16212
// j := j + 1 ;
16198: LD_ADDR_VAR 0 3
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: LD_INT 1
16210: PLUS
16211: ST_TO_ADDR
// SetSide ( i , j ) ;
16212: LD_VAR 0 2
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: CALL_OW 235
// end ;
16226: GO 16149
16228: POP
16229: POP
// end ;
16230: LD_VAR 0 1
16234: RET
// export function hHackFog ; begin
16235: LD_INT 0
16237: PPUSH
// FogOff ( true ) ;
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 344
// end ;
16245: LD_VAR 0 1
16249: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16250: LD_INT 0
16252: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16253: LD_VAR 0 1
16257: PPUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 1
16270: PPUSH
16271: LD_INT 1
16273: PPUSH
16274: CALL_OW 483
// CenterOnXY ( x , y ) ;
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_VAR 0 3
16287: PPUSH
16288: CALL_OW 84
// end ;
16292: LD_VAR 0 4
16296: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16297: LD_INT 0
16299: PPUSH
16300: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16301: LD_VAR 0 1
16305: NOT
16306: PUSH
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: CALL_OW 488
16321: NOT
16322: OR
16323: PUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 266
16333: PUSH
16334: LD_INT 3
16336: NONEQUAL
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 247
16347: PUSH
16348: LD_INT 1
16350: EQUAL
16351: NOT
16352: AND
16353: OR
16354: IFFALSE 16358
// exit ;
16356: GO 16507
// if GetType ( factory ) = unit_human then
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 247
16367: PUSH
16368: LD_INT 1
16370: EQUAL
16371: IFFALSE 16388
// factory := IsInUnit ( factory ) ;
16373: LD_ADDR_VAR 0 1
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 310
16387: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 266
16397: PUSH
16398: LD_INT 3
16400: NONEQUAL
16401: IFFALSE 16405
// exit ;
16403: GO 16507
// if HexInfo ( x , y ) = factory then
16405: LD_VAR 0 2
16409: PPUSH
16410: LD_VAR 0 3
16414: PPUSH
16415: CALL_OW 428
16419: PUSH
16420: LD_VAR 0 1
16424: EQUAL
16425: IFFALSE 16452
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16427: LD_ADDR_EXP 65
16431: PUSH
16432: LD_EXP 65
16436: PPUSH
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 1
16449: ST_TO_ADDR
16450: GO 16503
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16452: LD_ADDR_EXP 65
16456: PUSH
16457: LD_EXP 65
16461: PPUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 255
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: LD_VAR 0 2
16486: PUSH
16487: LD_VAR 0 3
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 1
16502: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16503: CALL 16512 0 0
// end ;
16507: LD_VAR 0 4
16511: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16512: LD_INT 0
16514: PPUSH
16515: PPUSH
16516: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16517: LD_STRING resetFactoryWaypoint();
16519: PPUSH
16520: CALL_OW 559
// if factoryWaypoints then
16524: LD_EXP 65
16528: IFFALSE 16654
// begin list := PrepareArray ( factoryWaypoints ) ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: LD_EXP 65
16539: PPUSH
16540: CALL 63249 0 1
16544: ST_TO_ADDR
// for i := 1 to list do
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: DOUBLE
16551: LD_INT 1
16553: DEC
16554: ST_TO_ADDR
16555: LD_VAR 0 3
16559: PUSH
16560: FOR_TO
16561: IFFALSE 16652
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16563: LD_STRING setFactoryWaypointXY(
16565: PUSH
16566: LD_VAR 0 3
16570: PUSH
16571: LD_VAR 0 2
16575: ARRAY
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: STR
16581: PUSH
16582: LD_STRING ,
16584: STR
16585: PUSH
16586: LD_VAR 0 3
16590: PUSH
16591: LD_VAR 0 2
16595: ARRAY
16596: PUSH
16597: LD_INT 2
16599: ARRAY
16600: STR
16601: PUSH
16602: LD_STRING ,
16604: STR
16605: PUSH
16606: LD_VAR 0 3
16610: PUSH
16611: LD_VAR 0 2
16615: ARRAY
16616: PUSH
16617: LD_INT 3
16619: ARRAY
16620: STR
16621: PUSH
16622: LD_STRING ,
16624: STR
16625: PUSH
16626: LD_VAR 0 3
16630: PUSH
16631: LD_VAR 0 2
16635: ARRAY
16636: PUSH
16637: LD_INT 4
16639: ARRAY
16640: STR
16641: PUSH
16642: LD_STRING )
16644: STR
16645: PPUSH
16646: CALL_OW 559
16650: GO 16560
16652: POP
16653: POP
// end ; end ;
16654: LD_VAR 0 1
16658: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16659: LD_INT 0
16661: PPUSH
// if HexInfo ( x , y ) = warehouse then
16662: LD_VAR 0 2
16666: PPUSH
16667: LD_VAR 0 3
16671: PPUSH
16672: CALL_OW 428
16676: PUSH
16677: LD_VAR 0 1
16681: EQUAL
16682: IFFALSE 16709
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16684: LD_ADDR_EXP 66
16688: PUSH
16689: LD_EXP 66
16693: PPUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_INT 0
16701: PPUSH
16702: CALL_OW 1
16706: ST_TO_ADDR
16707: GO 16760
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16709: LD_ADDR_EXP 66
16713: PUSH
16714: LD_EXP 66
16718: PPUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: CALL_OW 255
16733: PUSH
16734: LD_VAR 0 1
16738: PUSH
16739: LD_VAR 0 2
16743: PUSH
16744: LD_VAR 0 3
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16760: CALL 16769 0 0
// end ;
16764: LD_VAR 0 4
16768: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16769: LD_INT 0
16771: PPUSH
16772: PPUSH
16773: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16774: LD_STRING resetWarehouseGatheringPoints();
16776: PPUSH
16777: CALL_OW 559
// if warehouseGatheringPoints then
16781: LD_EXP 66
16785: IFFALSE 16911
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_EXP 66
16796: PPUSH
16797: CALL 63249 0 1
16801: ST_TO_ADDR
// for i := 1 to list do
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_VAR 0 3
16816: PUSH
16817: FOR_TO
16818: IFFALSE 16909
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16820: LD_STRING setWarehouseGatheringPointXY(
16822: PUSH
16823: LD_VAR 0 3
16827: PUSH
16828: LD_VAR 0 2
16832: ARRAY
16833: PUSH
16834: LD_INT 1
16836: ARRAY
16837: STR
16838: PUSH
16839: LD_STRING ,
16841: STR
16842: PUSH
16843: LD_VAR 0 3
16847: PUSH
16848: LD_VAR 0 2
16852: ARRAY
16853: PUSH
16854: LD_INT 2
16856: ARRAY
16857: STR
16858: PUSH
16859: LD_STRING ,
16861: STR
16862: PUSH
16863: LD_VAR 0 3
16867: PUSH
16868: LD_VAR 0 2
16872: ARRAY
16873: PUSH
16874: LD_INT 3
16876: ARRAY
16877: STR
16878: PUSH
16879: LD_STRING ,
16881: STR
16882: PUSH
16883: LD_VAR 0 3
16887: PUSH
16888: LD_VAR 0 2
16892: ARRAY
16893: PUSH
16894: LD_INT 4
16896: ARRAY
16897: STR
16898: PUSH
16899: LD_STRING )
16901: STR
16902: PPUSH
16903: CALL_OW 559
16907: GO 16817
16909: POP
16910: POP
// end ; end ;
16911: LD_VAR 0 1
16915: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16916: LD_EXP 66
16920: IFFALSE 17607
16922: GO 16924
16924: DISABLE
16925: LD_INT 0
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
16933: PPUSH
16934: PPUSH
16935: PPUSH
// begin enable ;
16936: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16937: LD_ADDR_VAR 0 3
16941: PUSH
16942: LD_EXP 66
16946: PPUSH
16947: CALL 63249 0 1
16951: ST_TO_ADDR
// if not list then
16952: LD_VAR 0 3
16956: NOT
16957: IFFALSE 16961
// exit ;
16959: GO 17607
// for i := 1 to list do
16961: LD_ADDR_VAR 0 1
16965: PUSH
16966: DOUBLE
16967: LD_INT 1
16969: DEC
16970: ST_TO_ADDR
16971: LD_VAR 0 3
16975: PUSH
16976: FOR_TO
16977: IFFALSE 17605
// begin depot := list [ i ] [ 2 ] ;
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: LD_VAR 0 3
16988: PUSH
16989: LD_VAR 0 1
16993: ARRAY
16994: PUSH
16995: LD_INT 2
16997: ARRAY
16998: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16999: LD_ADDR_VAR 0 5
17003: PUSH
17004: LD_VAR 0 3
17008: PUSH
17009: LD_VAR 0 1
17013: ARRAY
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17019: LD_VAR 0 8
17023: PPUSH
17024: CALL_OW 301
17028: PUSH
17029: LD_VAR 0 5
17033: PUSH
17034: LD_VAR 0 8
17038: PPUSH
17039: CALL_OW 255
17043: NONEQUAL
17044: OR
17045: IFFALSE 17074
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17047: LD_ADDR_EXP 66
17051: PUSH
17052: LD_EXP 66
17056: PPUSH
17057: LD_VAR 0 8
17061: PPUSH
17062: LD_INT 0
17064: PPUSH
17065: CALL_OW 1
17069: ST_TO_ADDR
// exit ;
17070: POP
17071: POP
17072: GO 17607
// end ; x := list [ i ] [ 3 ] ;
17074: LD_ADDR_VAR 0 6
17078: PUSH
17079: LD_VAR 0 3
17083: PUSH
17084: LD_VAR 0 1
17088: ARRAY
17089: PUSH
17090: LD_INT 3
17092: ARRAY
17093: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: LD_VAR 0 3
17103: PUSH
17104: LD_VAR 0 1
17108: ARRAY
17109: PUSH
17110: LD_INT 4
17112: ARRAY
17113: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17114: LD_ADDR_VAR 0 9
17118: PUSH
17119: LD_VAR 0 6
17123: PPUSH
17124: LD_VAR 0 7
17128: PPUSH
17129: LD_INT 16
17131: PPUSH
17132: CALL 61833 0 3
17136: ST_TO_ADDR
// if not cratesNearbyPoint then
17137: LD_VAR 0 9
17141: NOT
17142: IFFALSE 17148
// exit ;
17144: POP
17145: POP
17146: GO 17607
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17148: LD_ADDR_VAR 0 4
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_VAR 0 5
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 3
17167: PUSH
17168: LD_INT 60
17170: PUSH
17171: EMPTY
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 91
17180: PUSH
17181: LD_VAR 0 8
17185: PUSH
17186: LD_INT 6
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 25
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 16
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: LD_VAR 0 8
17237: PPUSH
17238: CALL_OW 313
17242: PPUSH
17243: LD_INT 3
17245: PUSH
17246: LD_INT 60
17248: PUSH
17249: EMPTY
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: LD_INT 25
17261: PUSH
17262: LD_INT 2
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 25
17271: PUSH
17272: LD_INT 16
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 72
17292: UNION
17293: ST_TO_ADDR
// if tmp then
17294: LD_VAR 0 4
17298: IFFALSE 17378
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17300: LD_ADDR_VAR 0 4
17304: PUSH
17305: LD_VAR 0 4
17309: PPUSH
17310: LD_INT 3
17312: PPUSH
17313: CALL 59800 0 2
17317: ST_TO_ADDR
// for j in tmp do
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_VAR 0 4
17327: PUSH
17328: FOR_IN
17329: IFFALSE 17372
// begin if IsInUnit ( j ) then
17331: LD_VAR 0 2
17335: PPUSH
17336: CALL_OW 310
17340: IFFALSE 17351
// ComExit ( j ) ;
17342: LD_VAR 0 2
17346: PPUSH
17347: CALL 59883 0 1
// AddComCollect ( j , x , y ) ;
17351: LD_VAR 0 2
17355: PPUSH
17356: LD_VAR 0 6
17360: PPUSH
17361: LD_VAR 0 7
17365: PPUSH
17366: CALL_OW 177
// end ;
17370: GO 17328
17372: POP
17373: POP
// exit ;
17374: POP
17375: POP
17376: GO 17607
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17378: LD_ADDR_VAR 0 4
17382: PUSH
17383: LD_INT 22
17385: PUSH
17386: LD_VAR 0 5
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 91
17397: PUSH
17398: LD_VAR 0 8
17402: PUSH
17403: LD_INT 8
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 34
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 34
17426: PUSH
17427: LD_INT 51
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 34
17436: PUSH
17437: LD_INT 32
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 34
17446: PUSH
17447: LD_EXP 79
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// if tmp then
17473: LD_VAR 0 4
17477: IFFALSE 17603
// begin for j in tmp do
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: LD_VAR 0 4
17488: PUSH
17489: FOR_IN
17490: IFFALSE 17601
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17492: LD_VAR 0 2
17496: PPUSH
17497: CALL_OW 262
17501: PUSH
17502: LD_INT 3
17504: EQUAL
17505: PUSH
17506: LD_VAR 0 2
17510: PPUSH
17511: CALL_OW 261
17515: PUSH
17516: LD_INT 20
17518: GREATER
17519: OR
17520: PUSH
17521: LD_VAR 0 2
17525: PPUSH
17526: CALL_OW 314
17530: NOT
17531: AND
17532: PUSH
17533: LD_VAR 0 2
17537: PPUSH
17538: CALL_OW 263
17542: PUSH
17543: LD_INT 1
17545: NONEQUAL
17546: PUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: CALL_OW 311
17556: OR
17557: AND
17558: IFFALSE 17599
// begin ComCollect ( j , x , y ) ;
17560: LD_VAR 0 2
17564: PPUSH
17565: LD_VAR 0 6
17569: PPUSH
17570: LD_VAR 0 7
17574: PPUSH
17575: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17579: LD_VAR 0 2
17583: PPUSH
17584: LD_VAR 0 8
17588: PPUSH
17589: CALL_OW 172
// exit ;
17593: POP
17594: POP
17595: POP
17596: POP
17597: GO 17607
// end ;
17599: GO 17489
17601: POP
17602: POP
// end ; end ;
17603: GO 16976
17605: POP
17606: POP
// end ; end_of_file
17607: PPOPN 9
17609: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17610: LD_INT 0
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 264
17625: PUSH
17626: LD_EXP 82
17630: EQUAL
17631: IFFALSE 17703
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17633: LD_INT 68
17635: PPUSH
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 255
17645: PPUSH
17646: CALL_OW 321
17650: PUSH
17651: LD_INT 2
17653: EQUAL
17654: IFFALSE 17666
// eff := 70 else
17656: LD_ADDR_VAR 0 4
17660: PUSH
17661: LD_INT 70
17663: ST_TO_ADDR
17664: GO 17674
// eff := 30 ;
17666: LD_ADDR_VAR 0 4
17670: PUSH
17671: LD_INT 30
17673: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 250
17683: PPUSH
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 251
17693: PPUSH
17694: LD_VAR 0 4
17698: PPUSH
17699: CALL_OW 495
// end ; end ;
17703: LD_VAR 0 2
17707: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17708: LD_INT 0
17710: PPUSH
// end ;
17711: LD_VAR 0 4
17715: RET
// export function SOS_Command ( cmd ) ; begin
17716: LD_INT 0
17718: PPUSH
// end ;
17719: LD_VAR 0 2
17723: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17724: LD_INT 0
17726: PPUSH
// end ;
17727: LD_VAR 0 6
17731: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17732: LD_INT 0
17734: PPUSH
17735: PPUSH
// if not vehicle or not factory then
17736: LD_VAR 0 1
17740: NOT
17741: PUSH
17742: LD_VAR 0 2
17746: NOT
17747: OR
17748: IFFALSE 17752
// exit ;
17750: GO 17983
// if factoryWaypoints >= factory then
17752: LD_EXP 65
17756: PUSH
17757: LD_VAR 0 2
17761: GREATEREQUAL
17762: IFFALSE 17983
// if factoryWaypoints [ factory ] then
17764: LD_EXP 65
17768: PUSH
17769: LD_VAR 0 2
17773: ARRAY
17774: IFFALSE 17983
// begin if GetControl ( vehicle ) = control_manual then
17776: LD_VAR 0 1
17780: PPUSH
17781: CALL_OW 263
17785: PUSH
17786: LD_INT 1
17788: EQUAL
17789: IFFALSE 17870
// begin driver := IsDrivenBy ( vehicle ) ;
17791: LD_ADDR_VAR 0 4
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 311
17805: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17806: LD_VAR 0 4
17810: PPUSH
17811: LD_EXP 65
17815: PUSH
17816: LD_VAR 0 2
17820: ARRAY
17821: PUSH
17822: LD_INT 3
17824: ARRAY
17825: PPUSH
17826: LD_EXP 65
17830: PUSH
17831: LD_VAR 0 2
17835: ARRAY
17836: PUSH
17837: LD_INT 4
17839: ARRAY
17840: PPUSH
17841: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17845: LD_VAR 0 4
17849: PPUSH
17850: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17854: LD_VAR 0 4
17858: PPUSH
17859: LD_VAR 0 2
17863: PPUSH
17864: CALL_OW 180
// end else
17868: GO 17983
// if GetControl ( vehicle ) = control_remote then
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL_OW 263
17879: PUSH
17880: LD_INT 2
17882: EQUAL
17883: IFFALSE 17944
// begin wait ( 0 0$2 ) ;
17885: LD_INT 70
17887: PPUSH
17888: CALL_OW 67
// if Connect ( vehicle ) then
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL 30194 0 1
17901: IFFALSE 17942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17903: LD_VAR 0 1
17907: PPUSH
17908: LD_EXP 65
17912: PUSH
17913: LD_VAR 0 2
17917: ARRAY
17918: PUSH
17919: LD_INT 3
17921: ARRAY
17922: PPUSH
17923: LD_EXP 65
17927: PUSH
17928: LD_VAR 0 2
17932: ARRAY
17933: PUSH
17934: LD_INT 4
17936: ARRAY
17937: PPUSH
17938: CALL_OW 171
// end else
17942: GO 17983
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_EXP 65
17953: PUSH
17954: LD_VAR 0 2
17958: ARRAY
17959: PUSH
17960: LD_INT 3
17962: ARRAY
17963: PPUSH
17964: LD_EXP 65
17968: PUSH
17969: LD_VAR 0 2
17973: ARRAY
17974: PUSH
17975: LD_INT 4
17977: ARRAY
17978: PPUSH
17979: CALL_OW 171
// end ; end ;
17983: LD_VAR 0 3
17987: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17988: LD_INT 0
17990: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17991: LD_VAR 0 1
17995: PUSH
17996: LD_INT 250
17998: EQUAL
17999: PUSH
18000: LD_VAR 0 2
18004: PPUSH
18005: CALL_OW 264
18009: PUSH
18010: LD_EXP 85
18014: EQUAL
18015: AND
18016: IFFALSE 18037
// MinerPlaceMine ( unit , x , y ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: LD_VAR 0 4
18027: PPUSH
18028: LD_VAR 0 5
18032: PPUSH
18033: CALL 20436 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18037: LD_VAR 0 1
18041: PUSH
18042: LD_INT 251
18044: EQUAL
18045: PUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: CALL_OW 264
18055: PUSH
18056: LD_EXP 85
18060: EQUAL
18061: AND
18062: IFFALSE 18083
// MinerDetonateMine ( unit , x , y ) ;
18064: LD_VAR 0 2
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_VAR 0 5
18078: PPUSH
18079: CALL 20713 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 252
18090: EQUAL
18091: PUSH
18092: LD_VAR 0 2
18096: PPUSH
18097: CALL_OW 264
18101: PUSH
18102: LD_EXP 85
18106: EQUAL
18107: AND
18108: IFFALSE 18129
// MinerCreateMinefield ( unit , x , y ) ;
18110: LD_VAR 0 2
18114: PPUSH
18115: LD_VAR 0 4
18119: PPUSH
18120: LD_VAR 0 5
18124: PPUSH
18125: CALL 21130 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18129: LD_VAR 0 1
18133: PUSH
18134: LD_INT 253
18136: EQUAL
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: CALL_OW 257
18147: PUSH
18148: LD_INT 5
18150: EQUAL
18151: AND
18152: IFFALSE 18173
// ComBinocular ( unit , x , y ) ;
18154: LD_VAR 0 2
18158: PPUSH
18159: LD_VAR 0 4
18163: PPUSH
18164: LD_VAR 0 5
18168: PPUSH
18169: CALL 21501 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18173: LD_VAR 0 1
18177: PUSH
18178: LD_INT 254
18180: EQUAL
18181: PUSH
18182: LD_VAR 0 2
18186: PPUSH
18187: CALL_OW 264
18191: PUSH
18192: LD_EXP 80
18196: EQUAL
18197: AND
18198: PUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: CALL_OW 263
18208: PUSH
18209: LD_INT 3
18211: EQUAL
18212: AND
18213: IFFALSE 18229
// HackDestroyVehicle ( unit , selectedUnit ) ;
18215: LD_VAR 0 2
18219: PPUSH
18220: LD_VAR 0 3
18224: PPUSH
18225: CALL 19796 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18229: LD_VAR 0 1
18233: PUSH
18234: LD_INT 255
18236: EQUAL
18237: PUSH
18238: LD_VAR 0 2
18242: PPUSH
18243: CALL_OW 264
18247: PUSH
18248: LD_INT 14
18250: PUSH
18251: LD_INT 53
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: IN
18258: AND
18259: PUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_VAR 0 5
18269: PPUSH
18270: CALL_OW 488
18274: AND
18275: IFFALSE 18299
// CutTreeXYR ( unit , x , y , 12 ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 4
18286: PPUSH
18287: LD_VAR 0 5
18291: PPUSH
18292: LD_INT 12
18294: PPUSH
18295: CALL 18362 0 4
// if cmd = 256 then
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 256
18306: EQUAL
18307: IFFALSE 18328
// SetFactoryWaypoint ( unit , x , y ) ;
18309: LD_VAR 0 2
18313: PPUSH
18314: LD_VAR 0 4
18318: PPUSH
18319: LD_VAR 0 5
18323: PPUSH
18324: CALL 16297 0 3
// if cmd = 257 then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 257
18335: EQUAL
18336: IFFALSE 18357
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 4
18347: PPUSH
18348: LD_VAR 0 5
18352: PPUSH
18353: CALL 16659 0 3
// end ;
18357: LD_VAR 0 6
18361: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18373: LD_VAR 0 1
18377: NOT
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: CALL_OW 488
18393: NOT
18394: OR
18395: PUSH
18396: LD_VAR 0 4
18400: NOT
18401: OR
18402: IFFALSE 18406
// exit ;
18404: GO 18746
// list := [ ] ;
18406: LD_ADDR_VAR 0 13
18410: PUSH
18411: EMPTY
18412: ST_TO_ADDR
// if x - r < 0 then
18413: LD_VAR 0 2
18417: PUSH
18418: LD_VAR 0 4
18422: MINUS
18423: PUSH
18424: LD_INT 0
18426: LESS
18427: IFFALSE 18439
// min_x := 0 else
18429: LD_ADDR_VAR 0 7
18433: PUSH
18434: LD_INT 0
18436: ST_TO_ADDR
18437: GO 18455
// min_x := x - r ;
18439: LD_ADDR_VAR 0 7
18443: PUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_VAR 0 4
18453: MINUS
18454: ST_TO_ADDR
// if y - r < 0 then
18455: LD_VAR 0 3
18459: PUSH
18460: LD_VAR 0 4
18464: MINUS
18465: PUSH
18466: LD_INT 0
18468: LESS
18469: IFFALSE 18481
// min_y := 0 else
18471: LD_ADDR_VAR 0 8
18475: PUSH
18476: LD_INT 0
18478: ST_TO_ADDR
18479: GO 18497
// min_y := y - r ;
18481: LD_ADDR_VAR 0 8
18485: PUSH
18486: LD_VAR 0 3
18490: PUSH
18491: LD_VAR 0 4
18495: MINUS
18496: ST_TO_ADDR
// max_x := x + r ;
18497: LD_ADDR_VAR 0 9
18501: PUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 4
18511: PLUS
18512: ST_TO_ADDR
// max_y := y + r ;
18513: LD_ADDR_VAR 0 10
18517: PUSH
18518: LD_VAR 0 3
18522: PUSH
18523: LD_VAR 0 4
18527: PLUS
18528: ST_TO_ADDR
// for _x = min_x to max_x do
18529: LD_ADDR_VAR 0 11
18533: PUSH
18534: DOUBLE
18535: LD_VAR 0 7
18539: DEC
18540: ST_TO_ADDR
18541: LD_VAR 0 9
18545: PUSH
18546: FOR_TO
18547: IFFALSE 18664
// for _y = min_y to max_y do
18549: LD_ADDR_VAR 0 12
18553: PUSH
18554: DOUBLE
18555: LD_VAR 0 8
18559: DEC
18560: ST_TO_ADDR
18561: LD_VAR 0 10
18565: PUSH
18566: FOR_TO
18567: IFFALSE 18660
// begin if not ValidHex ( _x , _y ) then
18569: LD_VAR 0 11
18573: PPUSH
18574: LD_VAR 0 12
18578: PPUSH
18579: CALL_OW 488
18583: NOT
18584: IFFALSE 18588
// continue ;
18586: GO 18566
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18588: LD_VAR 0 11
18592: PPUSH
18593: LD_VAR 0 12
18597: PPUSH
18598: CALL_OW 351
18602: PUSH
18603: LD_VAR 0 11
18607: PPUSH
18608: LD_VAR 0 12
18612: PPUSH
18613: CALL_OW 554
18617: AND
18618: IFFALSE 18658
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18620: LD_ADDR_VAR 0 13
18624: PUSH
18625: LD_VAR 0 13
18629: PPUSH
18630: LD_VAR 0 13
18634: PUSH
18635: LD_INT 1
18637: PLUS
18638: PPUSH
18639: LD_VAR 0 11
18643: PUSH
18644: LD_VAR 0 12
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 2
18657: ST_TO_ADDR
// end ;
18658: GO 18566
18660: POP
18661: POP
18662: GO 18546
18664: POP
18665: POP
// if not list then
18666: LD_VAR 0 13
18670: NOT
18671: IFFALSE 18675
// exit ;
18673: GO 18746
// for i in list do
18675: LD_ADDR_VAR 0 6
18679: PUSH
18680: LD_VAR 0 13
18684: PUSH
18685: FOR_IN
18686: IFFALSE 18744
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18688: LD_VAR 0 1
18692: PPUSH
18693: LD_STRING M
18695: PUSH
18696: LD_VAR 0 6
18700: PUSH
18701: LD_INT 1
18703: ARRAY
18704: PUSH
18705: LD_VAR 0 6
18709: PUSH
18710: LD_INT 2
18712: ARRAY
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 0
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: PPUSH
18738: CALL_OW 447
18742: GO 18685
18744: POP
18745: POP
// end ;
18746: LD_VAR 0 5
18750: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18751: LD_EXP 68
18755: NOT
18756: IFFALSE 18806
18758: GO 18760
18760: DISABLE
// begin initHack := true ;
18761: LD_ADDR_EXP 68
18765: PUSH
18766: LD_INT 1
18768: ST_TO_ADDR
// hackTanks := [ ] ;
18769: LD_ADDR_EXP 69
18773: PUSH
18774: EMPTY
18775: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18776: LD_ADDR_EXP 70
18780: PUSH
18781: EMPTY
18782: ST_TO_ADDR
// hackLimit := 3 ;
18783: LD_ADDR_EXP 71
18787: PUSH
18788: LD_INT 3
18790: ST_TO_ADDR
// hackDist := 12 ;
18791: LD_ADDR_EXP 72
18795: PUSH
18796: LD_INT 12
18798: ST_TO_ADDR
// hackCounter := [ ] ;
18799: LD_ADDR_EXP 73
18803: PUSH
18804: EMPTY
18805: ST_TO_ADDR
// end ;
18806: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18807: LD_EXP 68
18811: PUSH
18812: LD_INT 34
18814: PUSH
18815: LD_EXP 80
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PPUSH
18824: CALL_OW 69
18828: AND
18829: IFFALSE 19084
18831: GO 18833
18833: DISABLE
18834: LD_INT 0
18836: PPUSH
18837: PPUSH
// begin enable ;
18838: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18839: LD_ADDR_VAR 0 1
18843: PUSH
18844: LD_INT 34
18846: PUSH
18847: LD_EXP 80
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PUSH
18861: FOR_IN
18862: IFFALSE 19082
// begin if not i in hackTanks then
18864: LD_VAR 0 1
18868: PUSH
18869: LD_EXP 69
18873: IN
18874: NOT
18875: IFFALSE 18958
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18877: LD_ADDR_EXP 69
18881: PUSH
18882: LD_EXP 69
18886: PPUSH
18887: LD_EXP 69
18891: PUSH
18892: LD_INT 1
18894: PLUS
18895: PPUSH
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL_OW 1
18905: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18906: LD_ADDR_EXP 70
18910: PUSH
18911: LD_EXP 70
18915: PPUSH
18916: LD_EXP 70
18920: PUSH
18921: LD_INT 1
18923: PLUS
18924: PPUSH
18925: EMPTY
18926: PPUSH
18927: CALL_OW 1
18931: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18932: LD_ADDR_EXP 73
18936: PUSH
18937: LD_EXP 73
18941: PPUSH
18942: LD_EXP 73
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: PPUSH
18951: EMPTY
18952: PPUSH
18953: CALL_OW 1
18957: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18958: LD_VAR 0 1
18962: PPUSH
18963: CALL_OW 302
18967: NOT
18968: IFFALSE 18981
// begin HackUnlinkAll ( i ) ;
18970: LD_VAR 0 1
18974: PPUSH
18975: CALL 19087 0 1
// continue ;
18979: GO 18861
// end ; HackCheckCapturedStatus ( i ) ;
18981: LD_VAR 0 1
18985: PPUSH
18986: CALL 19530 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18990: LD_ADDR_VAR 0 2
18994: PUSH
18995: LD_INT 81
18997: PUSH
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 255
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 33
19014: PUSH
19015: LD_INT 3
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 91
19024: PUSH
19025: LD_VAR 0 1
19029: PUSH
19030: LD_EXP 72
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 50
19042: PUSH
19043: EMPTY
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: ST_TO_ADDR
// if not tmp then
19057: LD_VAR 0 2
19061: NOT
19062: IFFALSE 19066
// continue ;
19064: GO 18861
// HackLink ( i , tmp ) ;
19066: LD_VAR 0 1
19070: PPUSH
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL 19223 0 2
// end ;
19080: GO 18861
19082: POP
19083: POP
// end ;
19084: PPOPN 2
19086: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
// if not hack in hackTanks then
19092: LD_VAR 0 1
19096: PUSH
19097: LD_EXP 69
19101: IN
19102: NOT
19103: IFFALSE 19107
// exit ;
19105: GO 19218
// index := GetElementIndex ( hackTanks , hack ) ;
19107: LD_ADDR_VAR 0 4
19111: PUSH
19112: LD_EXP 69
19116: PPUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL 27008 0 2
19126: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19127: LD_EXP 70
19131: PUSH
19132: LD_VAR 0 4
19136: ARRAY
19137: IFFALSE 19218
// begin for i in hackTanksCaptured [ index ] do
19139: LD_ADDR_VAR 0 3
19143: PUSH
19144: LD_EXP 70
19148: PUSH
19149: LD_VAR 0 4
19153: ARRAY
19154: PUSH
19155: FOR_IN
19156: IFFALSE 19182
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 1
19165: ARRAY
19166: PPUSH
19167: LD_VAR 0 3
19171: PUSH
19172: LD_INT 2
19174: ARRAY
19175: PPUSH
19176: CALL_OW 235
19180: GO 19155
19182: POP
19183: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19184: LD_ADDR_EXP 70
19188: PUSH
19189: LD_EXP 70
19193: PPUSH
19194: LD_VAR 0 4
19198: PPUSH
19199: EMPTY
19200: PPUSH
19201: CALL_OW 1
19205: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19206: LD_VAR 0 1
19210: PPUSH
19211: LD_INT 0
19213: PPUSH
19214: CALL_OW 505
// end ; end ;
19218: LD_VAR 0 2
19222: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
19227: PPUSH
// if not hack in hackTanks or not vehicles then
19228: LD_VAR 0 1
19232: PUSH
19233: LD_EXP 69
19237: IN
19238: NOT
19239: PUSH
19240: LD_VAR 0 2
19244: NOT
19245: OR
19246: IFFALSE 19250
// exit ;
19248: GO 19525
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19250: LD_ADDR_VAR 0 2
19254: PUSH
19255: LD_VAR 0 1
19259: PPUSH
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: LD_INT 1
19270: PPUSH
19271: CALL 27658 0 4
19275: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19276: LD_ADDR_VAR 0 5
19280: PUSH
19281: LD_EXP 69
19285: PPUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL 27008 0 2
19295: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19296: LD_EXP 70
19300: PUSH
19301: LD_VAR 0 5
19305: ARRAY
19306: PUSH
19307: LD_EXP 71
19311: LESS
19312: IFFALSE 19501
// begin for i := 1 to vehicles do
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: DOUBLE
19320: LD_INT 1
19322: DEC
19323: ST_TO_ADDR
19324: LD_VAR 0 2
19328: PUSH
19329: FOR_TO
19330: IFFALSE 19499
// begin if hackTanksCaptured [ index ] = hackLimit then
19332: LD_EXP 70
19336: PUSH
19337: LD_VAR 0 5
19341: ARRAY
19342: PUSH
19343: LD_EXP 71
19347: EQUAL
19348: IFFALSE 19352
// break ;
19350: GO 19499
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19352: LD_ADDR_EXP 73
19356: PUSH
19357: LD_EXP 73
19361: PPUSH
19362: LD_VAR 0 5
19366: PPUSH
19367: LD_EXP 73
19371: PUSH
19372: LD_VAR 0 5
19376: ARRAY
19377: PUSH
19378: LD_INT 1
19380: PLUS
19381: PPUSH
19382: CALL_OW 1
19386: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19387: LD_ADDR_EXP 70
19391: PUSH
19392: LD_EXP 70
19396: PPUSH
19397: LD_VAR 0 5
19401: PUSH
19402: LD_EXP 70
19406: PUSH
19407: LD_VAR 0 5
19411: ARRAY
19412: PUSH
19413: LD_INT 1
19415: PLUS
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PPUSH
19421: LD_VAR 0 2
19425: PUSH
19426: LD_VAR 0 4
19430: ARRAY
19431: PUSH
19432: LD_VAR 0 2
19436: PUSH
19437: LD_VAR 0 4
19441: ARRAY
19442: PPUSH
19443: CALL_OW 255
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PPUSH
19452: CALL 27223 0 3
19456: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19457: LD_VAR 0 2
19461: PUSH
19462: LD_VAR 0 4
19466: ARRAY
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 255
19477: PPUSH
19478: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19482: LD_VAR 0 2
19486: PUSH
19487: LD_VAR 0 4
19491: ARRAY
19492: PPUSH
19493: CALL_OW 141
// end ;
19497: GO 19329
19499: POP
19500: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_EXP 70
19510: PUSH
19511: LD_VAR 0 5
19515: ARRAY
19516: PUSH
19517: LD_INT 0
19519: PLUS
19520: PPUSH
19521: CALL_OW 505
// end ;
19525: LD_VAR 0 3
19529: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
// if not hack in hackTanks then
19536: LD_VAR 0 1
19540: PUSH
19541: LD_EXP 69
19545: IN
19546: NOT
19547: IFFALSE 19551
// exit ;
19549: GO 19791
// index := GetElementIndex ( hackTanks , hack ) ;
19551: LD_ADDR_VAR 0 4
19555: PUSH
19556: LD_EXP 69
19560: PPUSH
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL 27008 0 2
19570: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: DOUBLE
19577: LD_EXP 70
19581: PUSH
19582: LD_VAR 0 4
19586: ARRAY
19587: INC
19588: ST_TO_ADDR
19589: LD_INT 1
19591: PUSH
19592: FOR_DOWNTO
19593: IFFALSE 19765
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_EXP 70
19604: PUSH
19605: LD_VAR 0 4
19609: ARRAY
19610: PUSH
19611: LD_VAR 0 3
19615: ARRAY
19616: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19617: LD_VAR 0 5
19621: PUSH
19622: LD_INT 1
19624: ARRAY
19625: PPUSH
19626: CALL_OW 302
19630: NOT
19631: PUSH
19632: LD_VAR 0 5
19636: PUSH
19637: LD_INT 1
19639: ARRAY
19640: PPUSH
19641: CALL_OW 255
19645: PUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 255
19655: NONEQUAL
19656: OR
19657: IFFALSE 19763
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19659: LD_VAR 0 5
19663: PUSH
19664: LD_INT 1
19666: ARRAY
19667: PPUSH
19668: CALL_OW 305
19672: PUSH
19673: LD_VAR 0 5
19677: PUSH
19678: LD_INT 1
19680: ARRAY
19681: PPUSH
19682: CALL_OW 255
19686: PUSH
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: EQUAL
19697: AND
19698: IFFALSE 19722
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19700: LD_VAR 0 5
19704: PUSH
19705: LD_INT 1
19707: ARRAY
19708: PPUSH
19709: LD_VAR 0 5
19713: PUSH
19714: LD_INT 2
19716: ARRAY
19717: PPUSH
19718: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19722: LD_ADDR_EXP 70
19726: PUSH
19727: LD_EXP 70
19731: PPUSH
19732: LD_VAR 0 4
19736: PPUSH
19737: LD_EXP 70
19741: PUSH
19742: LD_VAR 0 4
19746: ARRAY
19747: PPUSH
19748: LD_VAR 0 3
19752: PPUSH
19753: CALL_OW 3
19757: PPUSH
19758: CALL_OW 1
19762: ST_TO_ADDR
// end ; end ;
19763: GO 19592
19765: POP
19766: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19767: LD_VAR 0 1
19771: PPUSH
19772: LD_EXP 70
19776: PUSH
19777: LD_VAR 0 4
19781: ARRAY
19782: PUSH
19783: LD_INT 0
19785: PLUS
19786: PPUSH
19787: CALL_OW 505
// end ;
19791: LD_VAR 0 2
19795: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19796: LD_INT 0
19798: PPUSH
19799: PPUSH
19800: PPUSH
19801: PPUSH
// if not hack in hackTanks then
19802: LD_VAR 0 1
19806: PUSH
19807: LD_EXP 69
19811: IN
19812: NOT
19813: IFFALSE 19817
// exit ;
19815: GO 19902
// index := GetElementIndex ( hackTanks , hack ) ;
19817: LD_ADDR_VAR 0 5
19821: PUSH
19822: LD_EXP 69
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL 27008 0 2
19836: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19837: LD_ADDR_VAR 0 4
19841: PUSH
19842: DOUBLE
19843: LD_INT 1
19845: DEC
19846: ST_TO_ADDR
19847: LD_EXP 70
19851: PUSH
19852: LD_VAR 0 5
19856: ARRAY
19857: PUSH
19858: FOR_TO
19859: IFFALSE 19900
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19861: LD_EXP 70
19865: PUSH
19866: LD_VAR 0 5
19870: ARRAY
19871: PUSH
19872: LD_VAR 0 4
19876: ARRAY
19877: PUSH
19878: LD_INT 1
19880: ARRAY
19881: PUSH
19882: LD_VAR 0 2
19886: EQUAL
19887: IFFALSE 19898
// KillUnit ( vehicle ) ;
19889: LD_VAR 0 2
19893: PPUSH
19894: CALL_OW 66
19898: GO 19858
19900: POP
19901: POP
// end ;
19902: LD_VAR 0 3
19906: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19907: LD_EXP 74
19911: NOT
19912: IFFALSE 19947
19914: GO 19916
19916: DISABLE
// begin initMiner := true ;
19917: LD_ADDR_EXP 74
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// minersList := [ ] ;
19925: LD_ADDR_EXP 75
19929: PUSH
19930: EMPTY
19931: ST_TO_ADDR
// minerMinesList := [ ] ;
19932: LD_ADDR_EXP 76
19936: PUSH
19937: EMPTY
19938: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19939: LD_ADDR_EXP 77
19943: PUSH
19944: LD_INT 5
19946: ST_TO_ADDR
// end ;
19947: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19948: LD_EXP 74
19952: PUSH
19953: LD_INT 34
19955: PUSH
19956: LD_EXP 85
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PPUSH
19965: CALL_OW 69
19969: AND
19970: IFFALSE 20433
19972: GO 19974
19974: DISABLE
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
// begin enable ;
19981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19982: LD_ADDR_VAR 0 1
19986: PUSH
19987: LD_INT 34
19989: PUSH
19990: LD_EXP 85
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PPUSH
19999: CALL_OW 69
20003: PUSH
20004: FOR_IN
20005: IFFALSE 20077
// begin if not i in minersList then
20007: LD_VAR 0 1
20011: PUSH
20012: LD_EXP 75
20016: IN
20017: NOT
20018: IFFALSE 20075
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20020: LD_ADDR_EXP 75
20024: PUSH
20025: LD_EXP 75
20029: PPUSH
20030: LD_EXP 75
20034: PUSH
20035: LD_INT 1
20037: PLUS
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 1
20048: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20049: LD_ADDR_EXP 76
20053: PUSH
20054: LD_EXP 76
20058: PPUSH
20059: LD_EXP 76
20063: PUSH
20064: LD_INT 1
20066: PLUS
20067: PPUSH
20068: EMPTY
20069: PPUSH
20070: CALL_OW 1
20074: ST_TO_ADDR
// end end ;
20075: GO 20004
20077: POP
20078: POP
// for i := minerMinesList downto 1 do
20079: LD_ADDR_VAR 0 1
20083: PUSH
20084: DOUBLE
20085: LD_EXP 76
20089: INC
20090: ST_TO_ADDR
20091: LD_INT 1
20093: PUSH
20094: FOR_DOWNTO
20095: IFFALSE 20431
// begin if IsLive ( minersList [ i ] ) then
20097: LD_EXP 75
20101: PUSH
20102: LD_VAR 0 1
20106: ARRAY
20107: PPUSH
20108: CALL_OW 300
20112: IFFALSE 20140
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20114: LD_EXP 75
20118: PUSH
20119: LD_VAR 0 1
20123: ARRAY
20124: PPUSH
20125: LD_EXP 76
20129: PUSH
20130: LD_VAR 0 1
20134: ARRAY
20135: PPUSH
20136: CALL_OW 505
// if not minerMinesList [ i ] then
20140: LD_EXP 76
20144: PUSH
20145: LD_VAR 0 1
20149: ARRAY
20150: NOT
20151: IFFALSE 20155
// continue ;
20153: GO 20094
// for j := minerMinesList [ i ] downto 1 do
20155: LD_ADDR_VAR 0 2
20159: PUSH
20160: DOUBLE
20161: LD_EXP 76
20165: PUSH
20166: LD_VAR 0 1
20170: ARRAY
20171: INC
20172: ST_TO_ADDR
20173: LD_INT 1
20175: PUSH
20176: FOR_DOWNTO
20177: IFFALSE 20427
// begin side := GetSide ( minersList [ i ] ) ;
20179: LD_ADDR_VAR 0 3
20183: PUSH
20184: LD_EXP 75
20188: PUSH
20189: LD_VAR 0 1
20193: ARRAY
20194: PPUSH
20195: CALL_OW 255
20199: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: LD_EXP 76
20209: PUSH
20210: LD_VAR 0 1
20214: ARRAY
20215: PUSH
20216: LD_VAR 0 2
20220: ARRAY
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: LD_EXP 76
20230: PUSH
20231: LD_VAR 0 1
20235: ARRAY
20236: PUSH
20237: LD_VAR 0 2
20241: ARRAY
20242: PUSH
20243: LD_INT 2
20245: ARRAY
20246: PPUSH
20247: CALL_OW 428
20251: ST_TO_ADDR
// if not tmp then
20252: LD_VAR 0 4
20256: NOT
20257: IFFALSE 20261
// continue ;
20259: GO 20176
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20261: LD_VAR 0 4
20265: PUSH
20266: LD_INT 81
20268: PUSH
20269: LD_VAR 0 3
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 69
20282: IN
20283: PUSH
20284: LD_EXP 76
20288: PUSH
20289: LD_VAR 0 1
20293: ARRAY
20294: PUSH
20295: LD_VAR 0 2
20299: ARRAY
20300: PUSH
20301: LD_INT 1
20303: ARRAY
20304: PPUSH
20305: LD_EXP 76
20309: PUSH
20310: LD_VAR 0 1
20314: ARRAY
20315: PUSH
20316: LD_VAR 0 2
20320: ARRAY
20321: PUSH
20322: LD_INT 2
20324: ARRAY
20325: PPUSH
20326: CALL_OW 458
20330: AND
20331: IFFALSE 20425
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20333: LD_EXP 76
20337: PUSH
20338: LD_VAR 0 1
20342: ARRAY
20343: PUSH
20344: LD_VAR 0 2
20348: ARRAY
20349: PUSH
20350: LD_INT 1
20352: ARRAY
20353: PPUSH
20354: LD_EXP 76
20358: PUSH
20359: LD_VAR 0 1
20363: ARRAY
20364: PUSH
20365: LD_VAR 0 2
20369: ARRAY
20370: PUSH
20371: LD_INT 2
20373: ARRAY
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20384: LD_ADDR_EXP 76
20388: PUSH
20389: LD_EXP 76
20393: PPUSH
20394: LD_VAR 0 1
20398: PPUSH
20399: LD_EXP 76
20403: PUSH
20404: LD_VAR 0 1
20408: ARRAY
20409: PPUSH
20410: LD_VAR 0 2
20414: PPUSH
20415: CALL_OW 3
20419: PPUSH
20420: CALL_OW 1
20424: ST_TO_ADDR
// end ; end ;
20425: GO 20176
20427: POP
20428: POP
// end ;
20429: GO 20094
20431: POP
20432: POP
// end ;
20433: PPOPN 4
20435: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20436: LD_INT 0
20438: PPUSH
20439: PPUSH
// result := false ;
20440: LD_ADDR_VAR 0 4
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 264
20457: PUSH
20458: LD_EXP 85
20462: EQUAL
20463: NOT
20464: IFFALSE 20468
// exit ;
20466: GO 20708
// index := GetElementIndex ( minersList , unit ) ;
20468: LD_ADDR_VAR 0 5
20472: PUSH
20473: LD_EXP 75
20477: PPUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL 27008 0 2
20487: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20488: LD_EXP 76
20492: PUSH
20493: LD_VAR 0 5
20497: ARRAY
20498: PUSH
20499: LD_EXP 77
20503: GREATEREQUAL
20504: IFFALSE 20508
// exit ;
20506: GO 20708
// ComMoveXY ( unit , x , y ) ;
20508: LD_VAR 0 1
20512: PPUSH
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20527: LD_INT 35
20529: PPUSH
20530: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_VAR 0 2
20543: PPUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: CALL 58294 0 3
20553: NOT
20554: PUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL_OW 314
20564: AND
20565: IFFALSE 20569
// exit ;
20567: GO 20708
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: CALL_OW 428
20583: PUSH
20584: LD_VAR 0 1
20588: EQUAL
20589: PUSH
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 314
20599: NOT
20600: AND
20601: IFFALSE 20527
// PlaySoundXY ( x , y , PlantMine ) ;
20603: LD_VAR 0 2
20607: PPUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: LD_STRING PlantMine
20615: PPUSH
20616: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20620: LD_VAR 0 2
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 255
20639: PPUSH
20640: LD_INT 0
20642: PPUSH
20643: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20647: LD_ADDR_EXP 76
20651: PUSH
20652: LD_EXP 76
20656: PPUSH
20657: LD_VAR 0 5
20661: PUSH
20662: LD_EXP 76
20666: PUSH
20667: LD_VAR 0 5
20671: ARRAY
20672: PUSH
20673: LD_INT 1
20675: PLUS
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PPUSH
20681: LD_VAR 0 2
20685: PUSH
20686: LD_VAR 0 3
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PPUSH
20695: CALL 27223 0 3
20699: ST_TO_ADDR
// result := true ;
20700: LD_ADDR_VAR 0 4
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// end ;
20708: LD_VAR 0 4
20712: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
20717: PPUSH
// if not unit in minersList then
20718: LD_VAR 0 1
20722: PUSH
20723: LD_EXP 75
20727: IN
20728: NOT
20729: IFFALSE 20733
// exit ;
20731: GO 21125
// index := GetElementIndex ( minersList , unit ) ;
20733: LD_ADDR_VAR 0 6
20737: PUSH
20738: LD_EXP 75
20742: PPUSH
20743: LD_VAR 0 1
20747: PPUSH
20748: CALL 27008 0 2
20752: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20753: LD_ADDR_VAR 0 5
20757: PUSH
20758: DOUBLE
20759: LD_EXP 76
20763: PUSH
20764: LD_VAR 0 6
20768: ARRAY
20769: INC
20770: ST_TO_ADDR
20771: LD_INT 1
20773: PUSH
20774: FOR_DOWNTO
20775: IFFALSE 20936
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20777: LD_EXP 76
20781: PUSH
20782: LD_VAR 0 6
20786: ARRAY
20787: PUSH
20788: LD_VAR 0 5
20792: ARRAY
20793: PUSH
20794: LD_INT 1
20796: ARRAY
20797: PUSH
20798: LD_VAR 0 2
20802: EQUAL
20803: PUSH
20804: LD_EXP 76
20808: PUSH
20809: LD_VAR 0 6
20813: ARRAY
20814: PUSH
20815: LD_VAR 0 5
20819: ARRAY
20820: PUSH
20821: LD_INT 2
20823: ARRAY
20824: PUSH
20825: LD_VAR 0 3
20829: EQUAL
20830: AND
20831: IFFALSE 20934
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20833: LD_EXP 76
20837: PUSH
20838: LD_VAR 0 6
20842: ARRAY
20843: PUSH
20844: LD_VAR 0 5
20848: ARRAY
20849: PUSH
20850: LD_INT 1
20852: ARRAY
20853: PPUSH
20854: LD_EXP 76
20858: PUSH
20859: LD_VAR 0 6
20863: ARRAY
20864: PUSH
20865: LD_VAR 0 5
20869: ARRAY
20870: PUSH
20871: LD_INT 2
20873: ARRAY
20874: PPUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: CALL_OW 255
20884: PPUSH
20885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20889: LD_ADDR_EXP 76
20893: PUSH
20894: LD_EXP 76
20898: PPUSH
20899: LD_VAR 0 6
20903: PPUSH
20904: LD_EXP 76
20908: PUSH
20909: LD_VAR 0 6
20913: ARRAY
20914: PPUSH
20915: LD_VAR 0 5
20919: PPUSH
20920: CALL_OW 3
20924: PPUSH
20925: CALL_OW 1
20929: ST_TO_ADDR
// exit ;
20930: POP
20931: POP
20932: GO 21125
// end ; end ;
20934: GO 20774
20936: POP
20937: POP
// for i := minerMinesList [ index ] downto 1 do
20938: LD_ADDR_VAR 0 5
20942: PUSH
20943: DOUBLE
20944: LD_EXP 76
20948: PUSH
20949: LD_VAR 0 6
20953: ARRAY
20954: INC
20955: ST_TO_ADDR
20956: LD_INT 1
20958: PUSH
20959: FOR_DOWNTO
20960: IFFALSE 21123
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20962: LD_EXP 76
20966: PUSH
20967: LD_VAR 0 6
20971: ARRAY
20972: PUSH
20973: LD_VAR 0 5
20977: ARRAY
20978: PUSH
20979: LD_INT 1
20981: ARRAY
20982: PPUSH
20983: LD_EXP 76
20987: PUSH
20988: LD_VAR 0 6
20992: ARRAY
20993: PUSH
20994: LD_VAR 0 5
20998: ARRAY
20999: PUSH
21000: LD_INT 2
21002: ARRAY
21003: PPUSH
21004: LD_VAR 0 2
21008: PPUSH
21009: LD_VAR 0 3
21013: PPUSH
21014: CALL_OW 298
21018: PUSH
21019: LD_INT 6
21021: LESS
21022: IFFALSE 21121
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21024: LD_EXP 76
21028: PUSH
21029: LD_VAR 0 6
21033: ARRAY
21034: PUSH
21035: LD_VAR 0 5
21039: ARRAY
21040: PUSH
21041: LD_INT 1
21043: ARRAY
21044: PPUSH
21045: LD_EXP 76
21049: PUSH
21050: LD_VAR 0 6
21054: ARRAY
21055: PUSH
21056: LD_VAR 0 5
21060: ARRAY
21061: PUSH
21062: LD_INT 2
21064: ARRAY
21065: PPUSH
21066: LD_VAR 0 1
21070: PPUSH
21071: CALL_OW 255
21075: PPUSH
21076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21080: LD_ADDR_EXP 76
21084: PUSH
21085: LD_EXP 76
21089: PPUSH
21090: LD_VAR 0 6
21094: PPUSH
21095: LD_EXP 76
21099: PUSH
21100: LD_VAR 0 6
21104: ARRAY
21105: PPUSH
21106: LD_VAR 0 5
21110: PPUSH
21111: CALL_OW 3
21115: PPUSH
21116: CALL_OW 1
21120: ST_TO_ADDR
// end ; end ;
21121: GO 20959
21123: POP
21124: POP
// end ;
21125: LD_VAR 0 4
21129: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
21135: PPUSH
21136: PPUSH
21137: PPUSH
21138: PPUSH
21139: PPUSH
21140: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL_OW 264
21150: PUSH
21151: LD_EXP 85
21155: EQUAL
21156: NOT
21157: PUSH
21158: LD_VAR 0 1
21162: PUSH
21163: LD_EXP 75
21167: IN
21168: NOT
21169: OR
21170: IFFALSE 21174
// exit ;
21172: GO 21496
// index := GetElementIndex ( minersList , unit ) ;
21174: LD_ADDR_VAR 0 6
21178: PUSH
21179: LD_EXP 75
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL 27008 0 2
21193: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21194: LD_ADDR_VAR 0 8
21198: PUSH
21199: LD_EXP 77
21203: PUSH
21204: LD_EXP 76
21208: PUSH
21209: LD_VAR 0 6
21213: ARRAY
21214: MINUS
21215: ST_TO_ADDR
// if not minesFreeAmount then
21216: LD_VAR 0 8
21220: NOT
21221: IFFALSE 21225
// exit ;
21223: GO 21496
// tmp := [ ] ;
21225: LD_ADDR_VAR 0 7
21229: PUSH
21230: EMPTY
21231: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: DOUBLE
21238: LD_INT 1
21240: DEC
21241: ST_TO_ADDR
21242: LD_VAR 0 8
21246: PUSH
21247: FOR_TO
21248: IFFALSE 21443
// begin _d := rand ( 0 , 5 ) ;
21250: LD_ADDR_VAR 0 11
21254: PUSH
21255: LD_INT 0
21257: PPUSH
21258: LD_INT 5
21260: PPUSH
21261: CALL_OW 12
21265: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21266: LD_ADDR_VAR 0 12
21270: PUSH
21271: LD_INT 2
21273: PPUSH
21274: LD_INT 6
21276: PPUSH
21277: CALL_OW 12
21281: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21282: LD_ADDR_VAR 0 9
21286: PUSH
21287: LD_VAR 0 2
21291: PPUSH
21292: LD_VAR 0 11
21296: PPUSH
21297: LD_VAR 0 12
21301: PPUSH
21302: CALL_OW 272
21306: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21307: LD_ADDR_VAR 0 10
21311: PUSH
21312: LD_VAR 0 3
21316: PPUSH
21317: LD_VAR 0 11
21321: PPUSH
21322: LD_VAR 0 12
21326: PPUSH
21327: CALL_OW 273
21331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21332: LD_VAR 0 9
21336: PPUSH
21337: LD_VAR 0 10
21341: PPUSH
21342: CALL_OW 488
21346: PUSH
21347: LD_VAR 0 9
21351: PUSH
21352: LD_VAR 0 10
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_VAR 0 7
21365: IN
21366: NOT
21367: AND
21368: PUSH
21369: LD_VAR 0 9
21373: PPUSH
21374: LD_VAR 0 10
21378: PPUSH
21379: CALL_OW 458
21383: NOT
21384: AND
21385: IFFALSE 21427
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21387: LD_ADDR_VAR 0 7
21391: PUSH
21392: LD_VAR 0 7
21396: PPUSH
21397: LD_VAR 0 7
21401: PUSH
21402: LD_INT 1
21404: PLUS
21405: PPUSH
21406: LD_VAR 0 9
21410: PUSH
21411: LD_VAR 0 10
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PPUSH
21420: CALL_OW 1
21424: ST_TO_ADDR
21425: GO 21441
// i := i - 1 ;
21427: LD_ADDR_VAR 0 5
21431: PUSH
21432: LD_VAR 0 5
21436: PUSH
21437: LD_INT 1
21439: MINUS
21440: ST_TO_ADDR
// end ;
21441: GO 21247
21443: POP
21444: POP
// for i in tmp do
21445: LD_ADDR_VAR 0 5
21449: PUSH
21450: LD_VAR 0 7
21454: PUSH
21455: FOR_IN
21456: IFFALSE 21494
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_VAR 0 5
21467: PUSH
21468: LD_INT 1
21470: ARRAY
21471: PPUSH
21472: LD_VAR 0 5
21476: PUSH
21477: LD_INT 2
21479: ARRAY
21480: PPUSH
21481: CALL 20436 0 3
21485: NOT
21486: IFFALSE 21492
// exit ;
21488: POP
21489: POP
21490: GO 21496
21492: GO 21455
21494: POP
21495: POP
// end ;
21496: LD_VAR 0 4
21500: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21501: LD_INT 0
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
// if not GetClass ( unit ) = class_sniper then
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 257
21519: PUSH
21520: LD_INT 5
21522: EQUAL
21523: NOT
21524: IFFALSE 21528
// exit ;
21526: GO 21916
// dist := 8 ;
21528: LD_ADDR_VAR 0 5
21532: PUSH
21533: LD_INT 8
21535: ST_TO_ADDR
// viewRange := 12 ;
21536: LD_ADDR_VAR 0 7
21540: PUSH
21541: LD_INT 12
21543: ST_TO_ADDR
// side := GetSide ( unit ) ;
21544: LD_ADDR_VAR 0 6
21548: PUSH
21549: LD_VAR 0 1
21553: PPUSH
21554: CALL_OW 255
21558: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21559: LD_INT 61
21561: PPUSH
21562: LD_VAR 0 6
21566: PPUSH
21567: CALL_OW 321
21571: PUSH
21572: LD_INT 2
21574: EQUAL
21575: IFFALSE 21585
// viewRange := 16 ;
21577: LD_ADDR_VAR 0 7
21581: PUSH
21582: LD_INT 16
21584: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_VAR 0 2
21594: PPUSH
21595: LD_VAR 0 3
21599: PPUSH
21600: CALL_OW 297
21604: PUSH
21605: LD_VAR 0 5
21609: GREATER
21610: IFFALSE 21689
// begin ComMoveXY ( unit , x , y ) ;
21612: LD_VAR 0 1
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21631: LD_INT 35
21633: PPUSH
21634: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21638: LD_VAR 0 1
21642: PPUSH
21643: LD_VAR 0 2
21647: PPUSH
21648: LD_VAR 0 3
21652: PPUSH
21653: CALL 58294 0 3
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21916
// until GetDistUnitXY ( unit , x , y ) < dist ;
21662: LD_VAR 0 1
21666: PPUSH
21667: LD_VAR 0 2
21671: PPUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: CALL_OW 297
21681: PUSH
21682: LD_VAR 0 5
21686: LESS
21687: IFFALSE 21631
// end ; ComTurnXY ( unit , x , y ) ;
21689: LD_VAR 0 1
21693: PPUSH
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 3
21703: PPUSH
21704: CALL_OW 118
// wait ( 5 ) ;
21708: LD_INT 5
21710: PPUSH
21711: CALL_OW 67
// _d := GetDir ( unit ) ;
21715: LD_ADDR_VAR 0 10
21719: PUSH
21720: LD_VAR 0 1
21724: PPUSH
21725: CALL_OW 254
21729: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21730: LD_ADDR_VAR 0 8
21734: PUSH
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL_OW 250
21744: PPUSH
21745: LD_VAR 0 10
21749: PPUSH
21750: LD_VAR 0 5
21754: PPUSH
21755: CALL_OW 272
21759: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21760: LD_ADDR_VAR 0 9
21764: PUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 251
21774: PPUSH
21775: LD_VAR 0 10
21779: PPUSH
21780: LD_VAR 0 5
21784: PPUSH
21785: CALL_OW 273
21789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21790: LD_VAR 0 8
21794: PPUSH
21795: LD_VAR 0 9
21799: PPUSH
21800: CALL_OW 488
21804: NOT
21805: IFFALSE 21809
// exit ;
21807: GO 21916
// ComAnimCustom ( unit , 1 ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21821: LD_VAR 0 8
21825: PPUSH
21826: LD_VAR 0 9
21830: PPUSH
21831: LD_VAR 0 6
21835: PPUSH
21836: LD_VAR 0 7
21840: PPUSH
21841: CALL_OW 330
// repeat wait ( 1 ) ;
21845: LD_INT 1
21847: PPUSH
21848: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 316
21861: PUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: CALL_OW 314
21871: OR
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 302
21882: NOT
21883: OR
21884: PUSH
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 301
21894: OR
21895: IFFALSE 21845
// RemoveSeeing ( _x , _y , side ) ;
21897: LD_VAR 0 8
21901: PPUSH
21902: LD_VAR 0 9
21906: PPUSH
21907: LD_VAR 0 6
21911: PPUSH
21912: CALL_OW 331
// end ; end_of_file
21916: LD_VAR 0 4
21920: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21921: LD_VAR 0 1
21925: PUSH
21926: LD_INT 200
21928: DOUBLE
21929: GREATEREQUAL
21930: IFFALSE 21938
21932: LD_INT 299
21934: DOUBLE
21935: LESSEQUAL
21936: IFTRUE 21940
21938: GO 21972
21940: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21941: LD_VAR 0 1
21945: PPUSH
21946: LD_VAR 0 2
21950: PPUSH
21951: LD_VAR 0 3
21955: PPUSH
21956: LD_VAR 0 4
21960: PPUSH
21961: LD_VAR 0 5
21965: PPUSH
21966: CALL 17988 0 5
21970: GO 22049
21972: LD_INT 300
21974: DOUBLE
21975: GREATEREQUAL
21976: IFFALSE 21984
21978: LD_INT 399
21980: DOUBLE
21981: LESSEQUAL
21982: IFTRUE 21986
21984: GO 22048
21986: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21987: LD_VAR 0 1
21991: PPUSH
21992: LD_VAR 0 2
21996: PPUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: LD_VAR 0 4
22006: PPUSH
22007: LD_VAR 0 5
22011: PPUSH
22012: LD_VAR 0 6
22016: PPUSH
22017: LD_VAR 0 7
22021: PPUSH
22022: LD_VAR 0 8
22026: PPUSH
22027: LD_VAR 0 9
22031: PPUSH
22032: LD_VAR 0 10
22036: PPUSH
22037: LD_VAR 0 11
22041: PPUSH
22042: CALL 14317 0 11
22046: GO 22049
22048: POP
// end ;
22049: PPOPN 11
22051: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22052: LD_VAR 0 1
22056: PPUSH
22057: LD_VAR 0 2
22061: PPUSH
22062: LD_VAR 0 3
22066: PPUSH
22067: LD_VAR 0 4
22071: PPUSH
22072: LD_VAR 0 5
22076: PPUSH
22077: CALL 17724 0 5
// end ; end_of_file
22081: PPOPN 5
22083: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22084: LD_INT 0
22086: PPUSH
22087: PPUSH
// if exist_mode then
22088: LD_VAR 0 2
22092: IFFALSE 22117
// unit := CreateCharacter ( prefix & ident ) else
22094: LD_ADDR_VAR 0 5
22098: PUSH
22099: LD_VAR 0 3
22103: PUSH
22104: LD_VAR 0 1
22108: STR
22109: PPUSH
22110: CALL_OW 34
22114: ST_TO_ADDR
22115: GO 22132
// unit := NewCharacter ( ident ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 25
22131: ST_TO_ADDR
// result := unit ;
22132: LD_ADDR_VAR 0 4
22136: PUSH
22137: LD_VAR 0 5
22141: ST_TO_ADDR
// end ;
22142: LD_VAR 0 4
22146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// if not side or not nation then
22151: LD_VAR 0 1
22155: NOT
22156: PUSH
22157: LD_VAR 0 2
22161: NOT
22162: OR
22163: IFFALSE 22167
// exit ;
22165: GO 22935
// case nation of nation_american :
22167: LD_VAR 0 2
22171: PUSH
22172: LD_INT 1
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22394
22180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22181: LD_ADDR_VAR 0 4
22185: PUSH
22186: LD_INT 35
22188: PUSH
22189: LD_INT 45
22191: PUSH
22192: LD_INT 46
22194: PUSH
22195: LD_INT 47
22197: PUSH
22198: LD_INT 82
22200: PUSH
22201: LD_INT 83
22203: PUSH
22204: LD_INT 84
22206: PUSH
22207: LD_INT 85
22209: PUSH
22210: LD_INT 86
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 6
22221: PUSH
22222: LD_INT 15
22224: PUSH
22225: LD_INT 16
22227: PUSH
22228: LD_INT 7
22230: PUSH
22231: LD_INT 12
22233: PUSH
22234: LD_INT 13
22236: PUSH
22237: LD_INT 10
22239: PUSH
22240: LD_INT 14
22242: PUSH
22243: LD_INT 20
22245: PUSH
22246: LD_INT 21
22248: PUSH
22249: LD_INT 22
22251: PUSH
22252: LD_INT 25
22254: PUSH
22255: LD_INT 32
22257: PUSH
22258: LD_INT 27
22260: PUSH
22261: LD_INT 36
22263: PUSH
22264: LD_INT 69
22266: PUSH
22267: LD_INT 39
22269: PUSH
22270: LD_INT 34
22272: PUSH
22273: LD_INT 40
22275: PUSH
22276: LD_INT 48
22278: PUSH
22279: LD_INT 49
22281: PUSH
22282: LD_INT 50
22284: PUSH
22285: LD_INT 51
22287: PUSH
22288: LD_INT 52
22290: PUSH
22291: LD_INT 53
22293: PUSH
22294: LD_INT 54
22296: PUSH
22297: LD_INT 55
22299: PUSH
22300: LD_INT 56
22302: PUSH
22303: LD_INT 57
22305: PUSH
22306: LD_INT 58
22308: PUSH
22309: LD_INT 59
22311: PUSH
22312: LD_INT 60
22314: PUSH
22315: LD_INT 61
22317: PUSH
22318: LD_INT 62
22320: PUSH
22321: LD_INT 80
22323: PUSH
22324: LD_INT 82
22326: PUSH
22327: LD_INT 83
22329: PUSH
22330: LD_INT 84
22332: PUSH
22333: LD_INT 85
22335: PUSH
22336: LD_INT 86
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
22392: GO 22859
22394: LD_INT 2
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22628
22402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22403: LD_ADDR_VAR 0 4
22407: PUSH
22408: LD_INT 35
22410: PUSH
22411: LD_INT 45
22413: PUSH
22414: LD_INT 46
22416: PUSH
22417: LD_INT 47
22419: PUSH
22420: LD_INT 82
22422: PUSH
22423: LD_INT 83
22425: PUSH
22426: LD_INT 84
22428: PUSH
22429: LD_INT 85
22431: PUSH
22432: LD_INT 87
22434: PUSH
22435: LD_INT 70
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 11
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: LD_INT 4
22449: PUSH
22450: LD_INT 5
22452: PUSH
22453: LD_INT 6
22455: PUSH
22456: LD_INT 15
22458: PUSH
22459: LD_INT 18
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: LD_INT 17
22467: PUSH
22468: LD_INT 8
22470: PUSH
22471: LD_INT 20
22473: PUSH
22474: LD_INT 21
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_INT 72
22482: PUSH
22483: LD_INT 26
22485: PUSH
22486: LD_INT 69
22488: PUSH
22489: LD_INT 39
22491: PUSH
22492: LD_INT 40
22494: PUSH
22495: LD_INT 41
22497: PUSH
22498: LD_INT 42
22500: PUSH
22501: LD_INT 43
22503: PUSH
22504: LD_INT 48
22506: PUSH
22507: LD_INT 49
22509: PUSH
22510: LD_INT 50
22512: PUSH
22513: LD_INT 51
22515: PUSH
22516: LD_INT 52
22518: PUSH
22519: LD_INT 53
22521: PUSH
22522: LD_INT 54
22524: PUSH
22525: LD_INT 55
22527: PUSH
22528: LD_INT 56
22530: PUSH
22531: LD_INT 60
22533: PUSH
22534: LD_INT 61
22536: PUSH
22537: LD_INT 62
22539: PUSH
22540: LD_INT 66
22542: PUSH
22543: LD_INT 67
22545: PUSH
22546: LD_INT 68
22548: PUSH
22549: LD_INT 81
22551: PUSH
22552: LD_INT 82
22554: PUSH
22555: LD_INT 83
22557: PUSH
22558: LD_INT 84
22560: PUSH
22561: LD_INT 85
22563: PUSH
22564: LD_INT 87
22566: PUSH
22567: LD_INT 88
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 22859
22628: LD_INT 3
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22858
22636: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: LD_INT 46
22644: PUSH
22645: LD_INT 47
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 82
22656: PUSH
22657: LD_INT 83
22659: PUSH
22660: LD_INT 84
22662: PUSH
22663: LD_INT 85
22665: PUSH
22666: LD_INT 86
22668: PUSH
22669: LD_INT 11
22671: PUSH
22672: LD_INT 9
22674: PUSH
22675: LD_INT 20
22677: PUSH
22678: LD_INT 19
22680: PUSH
22681: LD_INT 21
22683: PUSH
22684: LD_INT 24
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_INT 25
22692: PUSH
22693: LD_INT 28
22695: PUSH
22696: LD_INT 29
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: LD_INT 31
22704: PUSH
22705: LD_INT 37
22707: PUSH
22708: LD_INT 38
22710: PUSH
22711: LD_INT 32
22713: PUSH
22714: LD_INT 27
22716: PUSH
22717: LD_INT 33
22719: PUSH
22720: LD_INT 69
22722: PUSH
22723: LD_INT 39
22725: PUSH
22726: LD_INT 34
22728: PUSH
22729: LD_INT 40
22731: PUSH
22732: LD_INT 71
22734: PUSH
22735: LD_INT 23
22737: PUSH
22738: LD_INT 44
22740: PUSH
22741: LD_INT 48
22743: PUSH
22744: LD_INT 49
22746: PUSH
22747: LD_INT 50
22749: PUSH
22750: LD_INT 51
22752: PUSH
22753: LD_INT 52
22755: PUSH
22756: LD_INT 53
22758: PUSH
22759: LD_INT 54
22761: PUSH
22762: LD_INT 55
22764: PUSH
22765: LD_INT 56
22767: PUSH
22768: LD_INT 57
22770: PUSH
22771: LD_INT 58
22773: PUSH
22774: LD_INT 59
22776: PUSH
22777: LD_INT 63
22779: PUSH
22780: LD_INT 64
22782: PUSH
22783: LD_INT 65
22785: PUSH
22786: LD_INT 82
22788: PUSH
22789: LD_INT 83
22791: PUSH
22792: LD_INT 84
22794: PUSH
22795: LD_INT 85
22797: PUSH
22798: LD_INT 86
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
22856: GO 22859
22858: POP
// if state > - 1 and state < 3 then
22859: LD_VAR 0 3
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: GREATER
22868: PUSH
22869: LD_VAR 0 3
22873: PUSH
22874: LD_INT 3
22876: LESS
22877: AND
22878: IFFALSE 22935
// for i in result do
22880: LD_ADDR_VAR 0 5
22884: PUSH
22885: LD_VAR 0 4
22889: PUSH
22890: FOR_IN
22891: IFFALSE 22933
// if GetTech ( i , side ) <> state then
22893: LD_VAR 0 5
22897: PPUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 321
22907: PUSH
22908: LD_VAR 0 3
22912: NONEQUAL
22913: IFFALSE 22931
// result := result diff i ;
22915: LD_ADDR_VAR 0 4
22919: PUSH
22920: LD_VAR 0 4
22924: PUSH
22925: LD_VAR 0 5
22929: DIFF
22930: ST_TO_ADDR
22931: GO 22890
22933: POP
22934: POP
// end ;
22935: LD_VAR 0 4
22939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22940: LD_INT 0
22942: PPUSH
22943: PPUSH
22944: PPUSH
// result := true ;
22945: LD_ADDR_VAR 0 3
22949: PUSH
22950: LD_INT 1
22952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22953: LD_ADDR_VAR 0 5
22957: PUSH
22958: LD_VAR 0 2
22962: PPUSH
22963: CALL_OW 480
22967: ST_TO_ADDR
// if not tmp then
22968: LD_VAR 0 5
22972: NOT
22973: IFFALSE 22977
// exit ;
22975: GO 23026
// for i in tmp do
22977: LD_ADDR_VAR 0 4
22981: PUSH
22982: LD_VAR 0 5
22986: PUSH
22987: FOR_IN
22988: IFFALSE 23024
// if GetTech ( i , side ) <> state_researched then
22990: LD_VAR 0 4
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 321
23004: PUSH
23005: LD_INT 2
23007: NONEQUAL
23008: IFFALSE 23022
// begin result := false ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_INT 0
23017: ST_TO_ADDR
// exit ;
23018: POP
23019: POP
23020: GO 23026
// end ;
23022: GO 22987
23024: POP
23025: POP
// end ;
23026: LD_VAR 0 3
23030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
23044: PPUSH
23045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23046: LD_VAR 0 1
23050: NOT
23051: PUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 257
23061: PUSH
23062: LD_INT 9
23064: NONEQUAL
23065: OR
23066: IFFALSE 23070
// exit ;
23068: GO 23643
// side := GetSide ( unit ) ;
23070: LD_ADDR_VAR 0 9
23074: PUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 255
23084: ST_TO_ADDR
// tech_space := tech_spacanom ;
23085: LD_ADDR_VAR 0 12
23089: PUSH
23090: LD_INT 29
23092: ST_TO_ADDR
// tech_time := tech_taurad ;
23093: LD_ADDR_VAR 0 13
23097: PUSH
23098: LD_INT 28
23100: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23101: LD_ADDR_VAR 0 11
23105: PUSH
23106: LD_VAR 0 1
23110: PPUSH
23111: CALL_OW 310
23115: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23116: LD_VAR 0 11
23120: PPUSH
23121: CALL_OW 247
23125: PUSH
23126: LD_INT 2
23128: EQUAL
23129: IFFALSE 23133
// exit ;
23131: GO 23643
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23133: LD_ADDR_VAR 0 8
23137: PUSH
23138: LD_INT 81
23140: PUSH
23141: LD_VAR 0 9
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 3
23152: PUSH
23153: LD_INT 21
23155: PUSH
23156: LD_INT 3
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: ST_TO_ADDR
// if not tmp then
23176: LD_VAR 0 8
23180: NOT
23181: IFFALSE 23185
// exit ;
23183: GO 23643
// if in_unit then
23185: LD_VAR 0 11
23189: IFFALSE 23213
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23191: LD_ADDR_VAR 0 10
23195: PUSH
23196: LD_VAR 0 8
23200: PPUSH
23201: LD_VAR 0 11
23205: PPUSH
23206: CALL_OW 74
23210: ST_TO_ADDR
23211: GO 23233
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23213: LD_ADDR_VAR 0 10
23217: PUSH
23218: LD_VAR 0 8
23222: PPUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 74
23232: ST_TO_ADDR
// if not enemy then
23233: LD_VAR 0 10
23237: NOT
23238: IFFALSE 23242
// exit ;
23240: GO 23643
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23242: LD_VAR 0 11
23246: PUSH
23247: LD_VAR 0 11
23251: PPUSH
23252: LD_VAR 0 10
23256: PPUSH
23257: CALL_OW 296
23261: PUSH
23262: LD_INT 13
23264: GREATER
23265: AND
23266: PUSH
23267: LD_VAR 0 1
23271: PPUSH
23272: LD_VAR 0 10
23276: PPUSH
23277: CALL_OW 296
23281: PUSH
23282: LD_INT 12
23284: GREATER
23285: OR
23286: IFFALSE 23290
// exit ;
23288: GO 23643
// missile := [ 1 ] ;
23290: LD_ADDR_VAR 0 14
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23301: LD_VAR 0 9
23305: PPUSH
23306: LD_VAR 0 12
23310: PPUSH
23311: CALL_OW 325
23315: IFFALSE 23344
// missile := Replace ( missile , missile + 1 , 2 ) ;
23317: LD_ADDR_VAR 0 14
23321: PUSH
23322: LD_VAR 0 14
23326: PPUSH
23327: LD_VAR 0 14
23331: PUSH
23332: LD_INT 1
23334: PLUS
23335: PPUSH
23336: LD_INT 2
23338: PPUSH
23339: CALL_OW 1
23343: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23344: LD_VAR 0 9
23348: PPUSH
23349: LD_VAR 0 13
23353: PPUSH
23354: CALL_OW 325
23358: PUSH
23359: LD_VAR 0 10
23363: PPUSH
23364: CALL_OW 255
23368: PPUSH
23369: LD_VAR 0 13
23373: PPUSH
23374: CALL_OW 325
23378: NOT
23379: AND
23380: IFFALSE 23409
// missile := Replace ( missile , missile + 1 , 3 ) ;
23382: LD_ADDR_VAR 0 14
23386: PUSH
23387: LD_VAR 0 14
23391: PPUSH
23392: LD_VAR 0 14
23396: PUSH
23397: LD_INT 1
23399: PLUS
23400: PPUSH
23401: LD_INT 3
23403: PPUSH
23404: CALL_OW 1
23408: ST_TO_ADDR
// if missile < 2 then
23409: LD_VAR 0 14
23413: PUSH
23414: LD_INT 2
23416: LESS
23417: IFFALSE 23421
// exit ;
23419: GO 23643
// x := GetX ( enemy ) ;
23421: LD_ADDR_VAR 0 4
23425: PUSH
23426: LD_VAR 0 10
23430: PPUSH
23431: CALL_OW 250
23435: ST_TO_ADDR
// y := GetY ( enemy ) ;
23436: LD_ADDR_VAR 0 5
23440: PUSH
23441: LD_VAR 0 10
23445: PPUSH
23446: CALL_OW 251
23450: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23451: LD_ADDR_VAR 0 6
23455: PUSH
23456: LD_VAR 0 4
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PPUSH
23465: LD_INT 1
23467: PPUSH
23468: CALL_OW 12
23472: PLUS
23473: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23474: LD_ADDR_VAR 0 7
23478: PUSH
23479: LD_VAR 0 5
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PPUSH
23488: LD_INT 1
23490: PPUSH
23491: CALL_OW 12
23495: PLUS
23496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23497: LD_VAR 0 6
23501: PPUSH
23502: LD_VAR 0 7
23506: PPUSH
23507: CALL_OW 488
23511: NOT
23512: IFFALSE 23534
// begin _x := x ;
23514: LD_ADDR_VAR 0 6
23518: PUSH
23519: LD_VAR 0 4
23523: ST_TO_ADDR
// _y := y ;
23524: LD_ADDR_VAR 0 7
23528: PUSH
23529: LD_VAR 0 5
23533: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: LD_INT 1
23541: PPUSH
23542: LD_VAR 0 14
23546: PPUSH
23547: CALL_OW 12
23551: ST_TO_ADDR
// case i of 1 :
23552: LD_VAR 0 3
23556: PUSH
23557: LD_INT 1
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23582
23565: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23566: LD_VAR 0 1
23570: PPUSH
23571: LD_VAR 0 10
23575: PPUSH
23576: CALL_OW 115
23580: GO 23643
23582: LD_INT 2
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23612
23590: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_VAR 0 6
23600: PPUSH
23601: LD_VAR 0 7
23605: PPUSH
23606: CALL_OW 153
23610: GO 23643
23612: LD_INT 3
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23642
23620: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_VAR 0 6
23630: PPUSH
23631: LD_VAR 0 7
23635: PPUSH
23636: CALL_OW 154
23640: GO 23643
23642: POP
// end ;
23643: LD_VAR 0 2
23647: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23648: LD_INT 0
23650: PPUSH
23651: PPUSH
23652: PPUSH
23653: PPUSH
23654: PPUSH
23655: PPUSH
// if not unit or not building then
23656: LD_VAR 0 1
23660: NOT
23661: PUSH
23662: LD_VAR 0 2
23666: NOT
23667: OR
23668: IFFALSE 23672
// exit ;
23670: GO 23830
// x := GetX ( building ) ;
23672: LD_ADDR_VAR 0 5
23676: PUSH
23677: LD_VAR 0 2
23681: PPUSH
23682: CALL_OW 250
23686: ST_TO_ADDR
// y := GetY ( building ) ;
23687: LD_ADDR_VAR 0 6
23691: PUSH
23692: LD_VAR 0 2
23696: PPUSH
23697: CALL_OW 251
23701: ST_TO_ADDR
// for i = 0 to 5 do
23702: LD_ADDR_VAR 0 4
23706: PUSH
23707: DOUBLE
23708: LD_INT 0
23710: DEC
23711: ST_TO_ADDR
23712: LD_INT 5
23714: PUSH
23715: FOR_TO
23716: IFFALSE 23828
// begin _x := ShiftX ( x , i , 3 ) ;
23718: LD_ADDR_VAR 0 7
23722: PUSH
23723: LD_VAR 0 5
23727: PPUSH
23728: LD_VAR 0 4
23732: PPUSH
23733: LD_INT 3
23735: PPUSH
23736: CALL_OW 272
23740: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23741: LD_ADDR_VAR 0 8
23745: PUSH
23746: LD_VAR 0 6
23750: PPUSH
23751: LD_VAR 0 4
23755: PPUSH
23756: LD_INT 3
23758: PPUSH
23759: CALL_OW 273
23763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23764: LD_VAR 0 7
23768: PPUSH
23769: LD_VAR 0 8
23773: PPUSH
23774: CALL_OW 488
23778: NOT
23779: IFFALSE 23783
// continue ;
23781: GO 23715
// if HexInfo ( _x , _y ) = 0 then
23783: LD_VAR 0 7
23787: PPUSH
23788: LD_VAR 0 8
23792: PPUSH
23793: CALL_OW 428
23797: PUSH
23798: LD_INT 0
23800: EQUAL
23801: IFFALSE 23826
// begin ComMoveXY ( unit , _x , _y ) ;
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_VAR 0 7
23812: PPUSH
23813: LD_VAR 0 8
23817: PPUSH
23818: CALL_OW 111
// exit ;
23822: POP
23823: POP
23824: GO 23830
// end ; end ;
23826: GO 23715
23828: POP
23829: POP
// end ;
23830: LD_VAR 0 3
23834: RET
// export function ScanBase ( side , base_area ) ; begin
23835: LD_INT 0
23837: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23838: LD_ADDR_VAR 0 3
23842: PUSH
23843: LD_VAR 0 2
23847: PPUSH
23848: LD_INT 81
23850: PUSH
23851: LD_VAR 0 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PPUSH
23860: CALL_OW 70
23864: ST_TO_ADDR
// end ;
23865: LD_VAR 0 3
23869: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23870: LD_INT 0
23872: PPUSH
23873: PPUSH
23874: PPUSH
23875: PPUSH
// result := false ;
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 0
23883: ST_TO_ADDR
// side := GetSide ( unit ) ;
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 255
23898: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23899: LD_ADDR_VAR 0 4
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 248
23913: ST_TO_ADDR
// case nat of 1 :
23914: LD_VAR 0 4
23918: PUSH
23919: LD_INT 1
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23938
23927: POP
// tech := tech_lassight ; 2 :
23928: LD_ADDR_VAR 0 5
23932: PUSH
23933: LD_INT 12
23935: ST_TO_ADDR
23936: GO 23977
23938: LD_INT 2
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23957
23946: POP
// tech := tech_mortar ; 3 :
23947: LD_ADDR_VAR 0 5
23951: PUSH
23952: LD_INT 41
23954: ST_TO_ADDR
23955: GO 23977
23957: LD_INT 3
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23976
23965: POP
// tech := tech_bazooka ; end ;
23966: LD_ADDR_VAR 0 5
23970: PUSH
23971: LD_INT 44
23973: ST_TO_ADDR
23974: GO 23977
23976: POP
// if Researched ( side , tech ) then
23977: LD_VAR 0 3
23981: PPUSH
23982: LD_VAR 0 5
23986: PPUSH
23987: CALL_OW 325
23991: IFFALSE 24018
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23993: LD_ADDR_VAR 0 2
23997: PUSH
23998: LD_INT 5
24000: PUSH
24001: LD_INT 8
24003: PUSH
24004: LD_INT 9
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_VAR 0 4
24016: ARRAY
24017: ST_TO_ADDR
// end ;
24018: LD_VAR 0 2
24022: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24023: LD_INT 0
24025: PPUSH
24026: PPUSH
24027: PPUSH
// if not mines then
24028: LD_VAR 0 2
24032: NOT
24033: IFFALSE 24037
// exit ;
24035: GO 24181
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24037: LD_ADDR_VAR 0 5
24041: PUSH
24042: LD_INT 81
24044: PUSH
24045: LD_VAR 0 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 3
24056: PUSH
24057: LD_INT 21
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PPUSH
24075: CALL_OW 69
24079: ST_TO_ADDR
// for i in mines do
24080: LD_ADDR_VAR 0 4
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: FOR_IN
24091: IFFALSE 24179
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24093: LD_VAR 0 4
24097: PUSH
24098: LD_INT 1
24100: ARRAY
24101: PPUSH
24102: LD_VAR 0 4
24106: PUSH
24107: LD_INT 2
24109: ARRAY
24110: PPUSH
24111: CALL_OW 458
24115: NOT
24116: IFFALSE 24120
// continue ;
24118: GO 24090
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24120: LD_VAR 0 4
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: LD_VAR 0 4
24133: PUSH
24134: LD_INT 2
24136: ARRAY
24137: PPUSH
24138: CALL_OW 428
24142: PUSH
24143: LD_VAR 0 5
24147: IN
24148: IFFALSE 24177
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24150: LD_VAR 0 4
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: PPUSH
24159: LD_VAR 0 4
24163: PUSH
24164: LD_INT 2
24166: ARRAY
24167: PPUSH
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 456
// end ;
24177: GO 24090
24179: POP
24180: POP
// end ;
24181: LD_VAR 0 3
24185: RET
// export function Count ( array ) ; var i ; begin
24186: LD_INT 0
24188: PPUSH
24189: PPUSH
// result := 0 ;
24190: LD_ADDR_VAR 0 2
24194: PUSH
24195: LD_INT 0
24197: ST_TO_ADDR
// for i in array do
24198: LD_ADDR_VAR 0 3
24202: PUSH
24203: LD_VAR 0 1
24207: PUSH
24208: FOR_IN
24209: IFFALSE 24233
// if i then
24211: LD_VAR 0 3
24215: IFFALSE 24231
// result := result + 1 ;
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_VAR 0 2
24226: PUSH
24227: LD_INT 1
24229: PLUS
24230: ST_TO_ADDR
24231: GO 24208
24233: POP
24234: POP
// end ;
24235: LD_VAR 0 2
24239: RET
// export function IsEmpty ( building ) ; begin
24240: LD_INT 0
24242: PPUSH
// if not building then
24243: LD_VAR 0 1
24247: NOT
24248: IFFALSE 24252
// exit ;
24250: GO 24295
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PUSH
24262: LD_INT 22
24264: PUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 255
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 58
24281: PUSH
24282: EMPTY
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 69
24293: IN
24294: ST_TO_ADDR
// end ;
24295: LD_VAR 0 2
24299: RET
// export function IsNotFull ( building ) ; var places ; begin
24300: LD_INT 0
24302: PPUSH
24303: PPUSH
// if not building then
24304: LD_VAR 0 1
24308: NOT
24309: IFFALSE 24313
// exit ;
24311: GO 24484
// result := false ;
24313: LD_ADDR_VAR 0 2
24317: PUSH
24318: LD_INT 0
24320: ST_TO_ADDR
// places := 0 ;
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_INT 0
24328: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 266
24338: PUSH
24339: LD_INT 0
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24401
24345: LD_INT 1
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24401
24351: LD_INT 6
24353: DOUBLE
24354: EQUAL
24355: IFTRUE 24401
24357: LD_INT 7
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24401
24363: LD_INT 8
24365: DOUBLE
24366: EQUAL
24367: IFTRUE 24401
24369: LD_INT 4
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24401
24375: LD_INT 5
24377: DOUBLE
24378: EQUAL
24379: IFTRUE 24401
24381: LD_INT 2
24383: DOUBLE
24384: EQUAL
24385: IFTRUE 24401
24387: LD_INT 3
24389: DOUBLE
24390: EQUAL
24391: IFTRUE 24401
24393: LD_INT 35
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24412
24401: POP
// places := 6 ; b_bunker , b_breastwork :
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_INT 6
24409: ST_TO_ADDR
24410: GO 24457
24412: LD_INT 32
24414: DOUBLE
24415: EQUAL
24416: IFTRUE 24426
24418: LD_INT 31
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24437
24426: POP
// places := 1 ; b_control_tower :
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_INT 1
24434: ST_TO_ADDR
24435: GO 24457
24437: LD_INT 36
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24456
24445: POP
// places := 3 ; end ;
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_INT 3
24453: ST_TO_ADDR
24454: GO 24457
24456: POP
// if places then
24457: LD_VAR 0 3
24461: IFFALSE 24484
// result := UnitsInside ( building ) < places ;
24463: LD_ADDR_VAR 0 2
24467: PUSH
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 313
24477: PUSH
24478: LD_VAR 0 3
24482: LESS
24483: ST_TO_ADDR
// end ;
24484: LD_VAR 0 2
24488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24489: LD_INT 0
24491: PPUSH
24492: PPUSH
24493: PPUSH
24494: PPUSH
// tmp := [ ] ;
24495: LD_ADDR_VAR 0 3
24499: PUSH
24500: EMPTY
24501: ST_TO_ADDR
// list := [ ] ;
24502: LD_ADDR_VAR 0 5
24506: PUSH
24507: EMPTY
24508: ST_TO_ADDR
// for i = 16 to 25 do
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: DOUBLE
24515: LD_INT 16
24517: DEC
24518: ST_TO_ADDR
24519: LD_INT 25
24521: PUSH
24522: FOR_TO
24523: IFFALSE 24596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24525: LD_ADDR_VAR 0 3
24529: PUSH
24530: LD_VAR 0 3
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 255
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 91
24554: PUSH
24555: LD_VAR 0 1
24559: PUSH
24560: LD_INT 6
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 30
24570: PUSH
24571: LD_VAR 0 4
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: PUSH
24585: EMPTY
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: ADD
24593: ST_TO_ADDR
24594: GO 24522
24596: POP
24597: POP
// for i = 1 to tmp do
24598: LD_ADDR_VAR 0 4
24602: PUSH
24603: DOUBLE
24604: LD_INT 1
24606: DEC
24607: ST_TO_ADDR
24608: LD_VAR 0 3
24612: PUSH
24613: FOR_TO
24614: IFFALSE 24702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24616: LD_ADDR_VAR 0 5
24620: PUSH
24621: LD_VAR 0 5
24625: PUSH
24626: LD_VAR 0 3
24630: PUSH
24631: LD_VAR 0 4
24635: ARRAY
24636: PPUSH
24637: CALL_OW 266
24641: PUSH
24642: LD_VAR 0 3
24646: PUSH
24647: LD_VAR 0 4
24651: ARRAY
24652: PPUSH
24653: CALL_OW 250
24657: PUSH
24658: LD_VAR 0 3
24662: PUSH
24663: LD_VAR 0 4
24667: ARRAY
24668: PPUSH
24669: CALL_OW 251
24673: PUSH
24674: LD_VAR 0 3
24678: PUSH
24679: LD_VAR 0 4
24683: ARRAY
24684: PPUSH
24685: CALL_OW 254
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: ADD
24699: ST_TO_ADDR
24700: GO 24613
24702: POP
24703: POP
// result := list ;
24704: LD_ADDR_VAR 0 2
24708: PUSH
24709: LD_VAR 0 5
24713: ST_TO_ADDR
// end ;
24714: LD_VAR 0 2
24718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
24725: PPUSH
24726: PPUSH
24727: PPUSH
// if not factory then
24728: LD_VAR 0 1
24732: NOT
24733: IFFALSE 24737
// exit ;
24735: GO 25330
// if control = control_apeman then
24737: LD_VAR 0 4
24741: PUSH
24742: LD_INT 5
24744: EQUAL
24745: IFFALSE 24854
// begin tmp := UnitsInside ( factory ) ;
24747: LD_ADDR_VAR 0 8
24751: PUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 313
24761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24762: LD_VAR 0 8
24766: PPUSH
24767: LD_INT 25
24769: PUSH
24770: LD_INT 12
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 72
24781: NOT
24782: IFFALSE 24792
// control := control_manual ;
24784: LD_ADDR_VAR 0 4
24788: PUSH
24789: LD_INT 1
24791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24792: LD_ADDR_VAR 0 8
24796: PUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL 24489 0 1
24806: ST_TO_ADDR
// if tmp then
24807: LD_VAR 0 8
24811: IFFALSE 24854
// begin for i in tmp do
24813: LD_ADDR_VAR 0 7
24817: PUSH
24818: LD_VAR 0 8
24822: PUSH
24823: FOR_IN
24824: IFFALSE 24852
// if i [ 1 ] = b_ext_radio then
24826: LD_VAR 0 7
24830: PUSH
24831: LD_INT 1
24833: ARRAY
24834: PUSH
24835: LD_INT 22
24837: EQUAL
24838: IFFALSE 24850
// begin control := control_remote ;
24840: LD_ADDR_VAR 0 4
24844: PUSH
24845: LD_INT 2
24847: ST_TO_ADDR
// break ;
24848: GO 24852
// end ;
24850: GO 24823
24852: POP
24853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_VAR 0 2
24863: PPUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: LD_VAR 0 4
24873: PPUSH
24874: LD_VAR 0 5
24878: PPUSH
24879: CALL_OW 448
24883: IFFALSE 24918
// begin result := [ chassis , engine , control , weapon ] ;
24885: LD_ADDR_VAR 0 6
24889: PUSH
24890: LD_VAR 0 2
24894: PUSH
24895: LD_VAR 0 3
24899: PUSH
24900: LD_VAR 0 4
24904: PUSH
24905: LD_VAR 0 5
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
// exit ;
24916: GO 25330
// end ; _chassis := AvailableChassisList ( factory ) ;
24918: LD_ADDR_VAR 0 9
24922: PUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 475
24932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24933: LD_ADDR_VAR 0 11
24937: PUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 476
24947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24948: LD_ADDR_VAR 0 12
24952: PUSH
24953: LD_VAR 0 1
24957: PPUSH
24958: CALL_OW 477
24962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24963: LD_ADDR_VAR 0 10
24967: PUSH
24968: LD_VAR 0 1
24972: PPUSH
24973: CALL_OW 478
24977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24978: LD_VAR 0 9
24982: NOT
24983: PUSH
24984: LD_VAR 0 11
24988: NOT
24989: OR
24990: PUSH
24991: LD_VAR 0 12
24995: NOT
24996: OR
24997: PUSH
24998: LD_VAR 0 10
25002: NOT
25003: OR
25004: IFFALSE 25039
// begin result := [ chassis , engine , control , weapon ] ;
25006: LD_ADDR_VAR 0 6
25010: PUSH
25011: LD_VAR 0 2
25015: PUSH
25016: LD_VAR 0 3
25020: PUSH
25021: LD_VAR 0 4
25025: PUSH
25026: LD_VAR 0 5
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: ST_TO_ADDR
// exit ;
25037: GO 25330
// end ; if not chassis in _chassis then
25039: LD_VAR 0 2
25043: PUSH
25044: LD_VAR 0 9
25048: IN
25049: NOT
25050: IFFALSE 25076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25052: LD_ADDR_VAR 0 2
25056: PUSH
25057: LD_VAR 0 9
25061: PUSH
25062: LD_INT 1
25064: PPUSH
25065: LD_VAR 0 9
25069: PPUSH
25070: CALL_OW 12
25074: ARRAY
25075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25076: LD_VAR 0 2
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: CALL 25335 0 2
25090: NOT
25091: IFFALSE 25150
// repeat engine := _engine [ 1 ] ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_VAR 0 11
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25107: LD_ADDR_VAR 0 11
25111: PUSH
25112: LD_VAR 0 11
25116: PPUSH
25117: LD_INT 1
25119: PPUSH
25120: CALL_OW 3
25124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25125: LD_VAR 0 2
25129: PPUSH
25130: LD_VAR 0 3
25134: PPUSH
25135: CALL 25335 0 2
25139: PUSH
25140: LD_VAR 0 11
25144: PUSH
25145: EMPTY
25146: EQUAL
25147: OR
25148: IFFALSE 25093
// if not control in _control then
25150: LD_VAR 0 4
25154: PUSH
25155: LD_VAR 0 12
25159: IN
25160: NOT
25161: IFFALSE 25187
// control := _control [ rand ( 1 , _control ) ] ;
25163: LD_ADDR_VAR 0 4
25167: PUSH
25168: LD_VAR 0 12
25172: PUSH
25173: LD_INT 1
25175: PPUSH
25176: LD_VAR 0 12
25180: PPUSH
25181: CALL_OW 12
25185: ARRAY
25186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25187: LD_VAR 0 2
25191: PPUSH
25192: LD_VAR 0 5
25196: PPUSH
25197: CALL 25555 0 2
25201: NOT
25202: IFFALSE 25261
// repeat weapon := _weapon [ 1 ] ;
25204: LD_ADDR_VAR 0 5
25208: PUSH
25209: LD_VAR 0 10
25213: PUSH
25214: LD_INT 1
25216: ARRAY
25217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25218: LD_ADDR_VAR 0 10
25222: PUSH
25223: LD_VAR 0 10
25227: PPUSH
25228: LD_INT 1
25230: PPUSH
25231: CALL_OW 3
25235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25236: LD_VAR 0 2
25240: PPUSH
25241: LD_VAR 0 5
25245: PPUSH
25246: CALL 25555 0 2
25250: PUSH
25251: LD_VAR 0 10
25255: PUSH
25256: EMPTY
25257: EQUAL
25258: OR
25259: IFFALSE 25204
// result := [ ] ;
25261: LD_ADDR_VAR 0 6
25265: PUSH
25266: EMPTY
25267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: LD_VAR 0 4
25287: PPUSH
25288: LD_VAR 0 5
25292: PPUSH
25293: CALL_OW 448
25297: IFFALSE 25330
// result := [ chassis , engine , control , weapon ] ;
25299: LD_ADDR_VAR 0 6
25303: PUSH
25304: LD_VAR 0 2
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_VAR 0 4
25318: PUSH
25319: LD_VAR 0 5
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: ST_TO_ADDR
// end ;
25330: LD_VAR 0 6
25334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25335: LD_INT 0
25337: PPUSH
// if not chassis or not engine then
25338: LD_VAR 0 1
25342: NOT
25343: PUSH
25344: LD_VAR 0 2
25348: NOT
25349: OR
25350: IFFALSE 25354
// exit ;
25352: GO 25550
// case engine of engine_solar :
25354: LD_VAR 0 2
25358: PUSH
25359: LD_INT 2
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25405
25367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25368: LD_ADDR_VAR 0 3
25372: PUSH
25373: LD_INT 11
25375: PUSH
25376: LD_INT 12
25378: PUSH
25379: LD_INT 13
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25534
25405: LD_INT 1
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25475
25413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 11
25421: PUSH
25422: LD_INT 12
25424: PUSH
25425: LD_INT 13
25427: PUSH
25428: LD_INT 14
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: LD_INT 3
25439: PUSH
25440: LD_INT 4
25442: PUSH
25443: LD_INT 5
25445: PUSH
25446: LD_INT 21
25448: PUSH
25449: LD_INT 23
25451: PUSH
25452: LD_INT 22
25454: PUSH
25455: LD_INT 24
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
25473: GO 25534
25475: LD_INT 3
25477: DOUBLE
25478: EQUAL
25479: IFTRUE 25483
25481: GO 25533
25483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25484: LD_ADDR_VAR 0 3
25488: PUSH
25489: LD_INT 13
25491: PUSH
25492: LD_INT 14
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: LD_INT 4
25503: PUSH
25504: LD_INT 5
25506: PUSH
25507: LD_INT 21
25509: PUSH
25510: LD_INT 22
25512: PUSH
25513: LD_INT 23
25515: PUSH
25516: LD_INT 24
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 25534
25533: POP
// result := ( chassis in result ) ;
25534: LD_ADDR_VAR 0 3
25538: PUSH
25539: LD_VAR 0 1
25543: PUSH
25544: LD_VAR 0 3
25548: IN
25549: ST_TO_ADDR
// end ;
25550: LD_VAR 0 3
25554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25555: LD_INT 0
25557: PPUSH
// if not chassis or not weapon then
25558: LD_VAR 0 1
25562: NOT
25563: PUSH
25564: LD_VAR 0 2
25568: NOT
25569: OR
25570: IFFALSE 25574
// exit ;
25572: GO 26636
// case weapon of us_machine_gun :
25574: LD_VAR 0 2
25578: PUSH
25579: LD_INT 2
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25617
25587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: LD_INT 3
25601: PUSH
25602: LD_INT 4
25604: PUSH
25605: LD_INT 5
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: ST_TO_ADDR
25615: GO 26620
25617: LD_INT 3
25619: DOUBLE
25620: EQUAL
25621: IFTRUE 25625
25623: GO 25655
25625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25626: LD_ADDR_VAR 0 3
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 4
25642: PUSH
25643: LD_INT 5
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: ST_TO_ADDR
25653: GO 26620
25655: LD_INT 11
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25693
25663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 3
25677: PUSH
25678: LD_INT 4
25680: PUSH
25681: LD_INT 5
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: ST_TO_ADDR
25691: GO 26620
25693: LD_INT 4
25695: DOUBLE
25696: EQUAL
25697: IFTRUE 25701
25699: GO 25727
25701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25702: LD_ADDR_VAR 0 3
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: LD_INT 4
25715: PUSH
25716: LD_INT 5
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: ST_TO_ADDR
25725: GO 26620
25727: LD_INT 5
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25761
25735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25736: LD_ADDR_VAR 0 3
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 3
25746: PUSH
25747: LD_INT 4
25749: PUSH
25750: LD_INT 5
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
25759: GO 26620
25761: LD_INT 9
25763: DOUBLE
25764: EQUAL
25765: IFTRUE 25769
25767: GO 25795
25769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25770: LD_ADDR_VAR 0 3
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: LD_INT 4
25783: PUSH
25784: LD_INT 5
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: ST_TO_ADDR
25793: GO 26620
25795: LD_INT 7
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25829
25803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 3
25814: PUSH
25815: LD_INT 4
25817: PUSH
25818: LD_INT 5
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: ST_TO_ADDR
25827: GO 26620
25829: LD_INT 12
25831: DOUBLE
25832: EQUAL
25833: IFTRUE 25837
25835: GO 25863
25837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25838: LD_ADDR_VAR 0 3
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: LD_INT 5
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: ST_TO_ADDR
25861: GO 26620
25863: LD_INT 13
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25897
25871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25872: LD_ADDR_VAR 0 3
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: LD_INT 3
25882: PUSH
25883: LD_INT 4
25885: PUSH
25886: LD_INT 5
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: ST_TO_ADDR
25895: GO 26620
25897: LD_INT 14
25899: DOUBLE
25900: EQUAL
25901: IFTRUE 25905
25903: GO 25923
25905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25906: LD_ADDR_VAR 0 3
25910: PUSH
25911: LD_INT 4
25913: PUSH
25914: LD_INT 5
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 26620
25923: LD_INT 6
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 25949
25931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25932: LD_ADDR_VAR 0 3
25936: PUSH
25937: LD_INT 4
25939: PUSH
25940: LD_INT 5
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: ST_TO_ADDR
25947: GO 26620
25949: LD_INT 10
25951: DOUBLE
25952: EQUAL
25953: IFTRUE 25957
25955: GO 25975
25957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_INT 4
25965: PUSH
25966: LD_INT 5
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: ST_TO_ADDR
25973: GO 26620
25975: LD_INT 22
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 26009
25983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25984: LD_ADDR_VAR 0 3
25988: PUSH
25989: LD_INT 11
25991: PUSH
25992: LD_INT 12
25994: PUSH
25995: LD_INT 13
25997: PUSH
25998: LD_INT 14
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: ST_TO_ADDR
26007: GO 26620
26009: LD_INT 23
26011: DOUBLE
26012: EQUAL
26013: IFTRUE 26017
26015: GO 26043
26017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_INT 11
26025: PUSH
26026: LD_INT 12
26028: PUSH
26029: LD_INT 13
26031: PUSH
26032: LD_INT 14
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: ST_TO_ADDR
26041: GO 26620
26043: LD_INT 24
26045: DOUBLE
26046: EQUAL
26047: IFTRUE 26051
26049: GO 26077
26051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26052: LD_ADDR_VAR 0 3
26056: PUSH
26057: LD_INT 11
26059: PUSH
26060: LD_INT 12
26062: PUSH
26063: LD_INT 13
26065: PUSH
26066: LD_INT 14
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
26075: GO 26620
26077: LD_INT 30
26079: DOUBLE
26080: EQUAL
26081: IFTRUE 26085
26083: GO 26111
26085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_INT 11
26093: PUSH
26094: LD_INT 12
26096: PUSH
26097: LD_INT 13
26099: PUSH
26100: LD_INT 14
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: ST_TO_ADDR
26109: GO 26620
26111: LD_INT 25
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26119
26117: GO 26137
26119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_INT 13
26127: PUSH
26128: LD_INT 14
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26620
26137: LD_INT 27
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26163
26145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 13
26153: PUSH
26154: LD_INT 14
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: ST_TO_ADDR
26161: GO 26620
26163: LD_EXP 83
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26199
26173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 11
26181: PUSH
26182: LD_INT 12
26184: PUSH
26185: LD_INT 13
26187: PUSH
26188: LD_INT 14
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 26620
26199: LD_INT 28
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26225
26207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 13
26215: PUSH
26216: LD_INT 14
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: ST_TO_ADDR
26223: GO 26620
26225: LD_INT 29
26227: DOUBLE
26228: EQUAL
26229: IFTRUE 26233
26231: GO 26251
26233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26234: LD_ADDR_VAR 0 3
26238: PUSH
26239: LD_INT 13
26241: PUSH
26242: LD_INT 14
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: ST_TO_ADDR
26249: GO 26620
26251: LD_INT 31
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26277
26259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26260: LD_ADDR_VAR 0 3
26264: PUSH
26265: LD_INT 13
26267: PUSH
26268: LD_INT 14
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: ST_TO_ADDR
26275: GO 26620
26277: LD_INT 26
26279: DOUBLE
26280: EQUAL
26281: IFTRUE 26285
26283: GO 26303
26285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26286: LD_ADDR_VAR 0 3
26290: PUSH
26291: LD_INT 13
26293: PUSH
26294: LD_INT 14
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: ST_TO_ADDR
26301: GO 26620
26303: LD_INT 42
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26337
26311: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26312: LD_ADDR_VAR 0 3
26316: PUSH
26317: LD_INT 21
26319: PUSH
26320: LD_INT 22
26322: PUSH
26323: LD_INT 23
26325: PUSH
26326: LD_INT 24
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: ST_TO_ADDR
26335: GO 26620
26337: LD_INT 43
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26371
26345: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26346: LD_ADDR_VAR 0 3
26350: PUSH
26351: LD_INT 21
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_INT 23
26359: PUSH
26360: LD_INT 24
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: ST_TO_ADDR
26369: GO 26620
26371: LD_INT 44
26373: DOUBLE
26374: EQUAL
26375: IFTRUE 26379
26377: GO 26405
26379: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26380: LD_ADDR_VAR 0 3
26384: PUSH
26385: LD_INT 21
26387: PUSH
26388: LD_INT 22
26390: PUSH
26391: LD_INT 23
26393: PUSH
26394: LD_INT 24
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: ST_TO_ADDR
26403: GO 26620
26405: LD_INT 45
26407: DOUBLE
26408: EQUAL
26409: IFTRUE 26413
26411: GO 26439
26413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26414: LD_ADDR_VAR 0 3
26418: PUSH
26419: LD_INT 21
26421: PUSH
26422: LD_INT 22
26424: PUSH
26425: LD_INT 23
26427: PUSH
26428: LD_INT 24
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: ST_TO_ADDR
26437: GO 26620
26439: LD_INT 49
26441: DOUBLE
26442: EQUAL
26443: IFTRUE 26447
26445: GO 26473
26447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 22
26458: PUSH
26459: LD_INT 23
26461: PUSH
26462: LD_INT 24
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: ST_TO_ADDR
26471: GO 26620
26473: LD_INT 51
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26507
26481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26482: LD_ADDR_VAR 0 3
26486: PUSH
26487: LD_INT 21
26489: PUSH
26490: LD_INT 22
26492: PUSH
26493: LD_INT 23
26495: PUSH
26496: LD_INT 24
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
26505: GO 26620
26507: LD_INT 52
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26515
26513: GO 26541
26515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26516: LD_ADDR_VAR 0 3
26520: PUSH
26521: LD_INT 21
26523: PUSH
26524: LD_INT 22
26526: PUSH
26527: LD_INT 23
26529: PUSH
26530: LD_INT 24
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
26539: GO 26620
26541: LD_INT 53
26543: DOUBLE
26544: EQUAL
26545: IFTRUE 26549
26547: GO 26567
26549: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_INT 23
26557: PUSH
26558: LD_INT 24
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: ST_TO_ADDR
26565: GO 26620
26567: LD_INT 46
26569: DOUBLE
26570: EQUAL
26571: IFTRUE 26575
26573: GO 26593
26575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: LD_INT 23
26583: PUSH
26584: LD_INT 24
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: ST_TO_ADDR
26591: GO 26620
26593: LD_INT 47
26595: DOUBLE
26596: EQUAL
26597: IFTRUE 26601
26599: GO 26619
26601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26602: LD_ADDR_VAR 0 3
26606: PUSH
26607: LD_INT 23
26609: PUSH
26610: LD_INT 24
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: ST_TO_ADDR
26617: GO 26620
26619: POP
// result := ( chassis in result ) ;
26620: LD_ADDR_VAR 0 3
26624: PUSH
26625: LD_VAR 0 1
26629: PUSH
26630: LD_VAR 0 3
26634: IN
26635: ST_TO_ADDR
// end ;
26636: LD_VAR 0 3
26640: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
// result := array ;
26650: LD_ADDR_VAR 0 5
26654: PUSH
26655: LD_VAR 0 1
26659: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26660: LD_VAR 0 1
26664: NOT
26665: PUSH
26666: LD_VAR 0 2
26670: NOT
26671: OR
26672: PUSH
26673: LD_VAR 0 3
26677: NOT
26678: OR
26679: PUSH
26680: LD_VAR 0 2
26684: PUSH
26685: LD_VAR 0 1
26689: GREATER
26690: OR
26691: PUSH
26692: LD_VAR 0 3
26696: PUSH
26697: LD_VAR 0 1
26701: GREATER
26702: OR
26703: IFFALSE 26707
// exit ;
26705: GO 27003
// if direction then
26707: LD_VAR 0 4
26711: IFFALSE 26775
// begin d := 1 ;
26713: LD_ADDR_VAR 0 9
26717: PUSH
26718: LD_INT 1
26720: ST_TO_ADDR
// if i_from > i_to then
26721: LD_VAR 0 2
26725: PUSH
26726: LD_VAR 0 3
26730: GREATER
26731: IFFALSE 26757
// length := ( array - i_from ) + i_to else
26733: LD_ADDR_VAR 0 11
26737: PUSH
26738: LD_VAR 0 1
26742: PUSH
26743: LD_VAR 0 2
26747: MINUS
26748: PUSH
26749: LD_VAR 0 3
26753: PLUS
26754: ST_TO_ADDR
26755: GO 26773
// length := i_to - i_from ;
26757: LD_ADDR_VAR 0 11
26761: PUSH
26762: LD_VAR 0 3
26766: PUSH
26767: LD_VAR 0 2
26771: MINUS
26772: ST_TO_ADDR
// end else
26773: GO 26836
// begin d := - 1 ;
26775: LD_ADDR_VAR 0 9
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: ST_TO_ADDR
// if i_from > i_to then
26784: LD_VAR 0 2
26788: PUSH
26789: LD_VAR 0 3
26793: GREATER
26794: IFFALSE 26814
// length := i_from - i_to else
26796: LD_ADDR_VAR 0 11
26800: PUSH
26801: LD_VAR 0 2
26805: PUSH
26806: LD_VAR 0 3
26810: MINUS
26811: ST_TO_ADDR
26812: GO 26836
// length := ( array - i_to ) + i_from ;
26814: LD_ADDR_VAR 0 11
26818: PUSH
26819: LD_VAR 0 1
26823: PUSH
26824: LD_VAR 0 3
26828: MINUS
26829: PUSH
26830: LD_VAR 0 2
26834: PLUS
26835: ST_TO_ADDR
// end ; if not length then
26836: LD_VAR 0 11
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 27003
// tmp := array ;
26845: LD_ADDR_VAR 0 10
26849: PUSH
26850: LD_VAR 0 1
26854: ST_TO_ADDR
// for i = 1 to length do
26855: LD_ADDR_VAR 0 6
26859: PUSH
26860: DOUBLE
26861: LD_INT 1
26863: DEC
26864: ST_TO_ADDR
26865: LD_VAR 0 11
26869: PUSH
26870: FOR_TO
26871: IFFALSE 26991
// begin for j = 1 to array do
26873: LD_ADDR_VAR 0 7
26877: PUSH
26878: DOUBLE
26879: LD_INT 1
26881: DEC
26882: ST_TO_ADDR
26883: LD_VAR 0 1
26887: PUSH
26888: FOR_TO
26889: IFFALSE 26977
// begin k := j + d ;
26891: LD_ADDR_VAR 0 8
26895: PUSH
26896: LD_VAR 0 7
26900: PUSH
26901: LD_VAR 0 9
26905: PLUS
26906: ST_TO_ADDR
// if k > array then
26907: LD_VAR 0 8
26911: PUSH
26912: LD_VAR 0 1
26916: GREATER
26917: IFFALSE 26927
// k := 1 ;
26919: LD_ADDR_VAR 0 8
26923: PUSH
26924: LD_INT 1
26926: ST_TO_ADDR
// if not k then
26927: LD_VAR 0 8
26931: NOT
26932: IFFALSE 26944
// k := array ;
26934: LD_ADDR_VAR 0 8
26938: PUSH
26939: LD_VAR 0 1
26943: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26944: LD_ADDR_VAR 0 10
26948: PUSH
26949: LD_VAR 0 10
26953: PPUSH
26954: LD_VAR 0 8
26958: PPUSH
26959: LD_VAR 0 1
26963: PUSH
26964: LD_VAR 0 7
26968: ARRAY
26969: PPUSH
26970: CALL_OW 1
26974: ST_TO_ADDR
// end ;
26975: GO 26888
26977: POP
26978: POP
// array := tmp ;
26979: LD_ADDR_VAR 0 1
26983: PUSH
26984: LD_VAR 0 10
26988: ST_TO_ADDR
// end ;
26989: GO 26870
26991: POP
26992: POP
// result := array ;
26993: LD_ADDR_VAR 0 5
26997: PUSH
26998: LD_VAR 0 1
27002: ST_TO_ADDR
// end ;
27003: LD_VAR 0 5
27007: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27008: LD_INT 0
27010: PPUSH
27011: PPUSH
// result := 0 ;
27012: LD_ADDR_VAR 0 3
27016: PUSH
27017: LD_INT 0
27019: ST_TO_ADDR
// if not array or not value in array then
27020: LD_VAR 0 1
27024: NOT
27025: PUSH
27026: LD_VAR 0 2
27030: PUSH
27031: LD_VAR 0 1
27035: IN
27036: NOT
27037: OR
27038: IFFALSE 27042
// exit ;
27040: GO 27096
// for i = 1 to array do
27042: LD_ADDR_VAR 0 4
27046: PUSH
27047: DOUBLE
27048: LD_INT 1
27050: DEC
27051: ST_TO_ADDR
27052: LD_VAR 0 1
27056: PUSH
27057: FOR_TO
27058: IFFALSE 27094
// if value = array [ i ] then
27060: LD_VAR 0 2
27064: PUSH
27065: LD_VAR 0 1
27069: PUSH
27070: LD_VAR 0 4
27074: ARRAY
27075: EQUAL
27076: IFFALSE 27092
// begin result := i ;
27078: LD_ADDR_VAR 0 3
27082: PUSH
27083: LD_VAR 0 4
27087: ST_TO_ADDR
// exit ;
27088: POP
27089: POP
27090: GO 27096
// end ;
27092: GO 27057
27094: POP
27095: POP
// end ;
27096: LD_VAR 0 3
27100: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27101: LD_INT 0
27103: PPUSH
// vc_chassis := chassis ;
27104: LD_ADDR_OWVAR 37
27108: PUSH
27109: LD_VAR 0 1
27113: ST_TO_ADDR
// vc_engine := engine ;
27114: LD_ADDR_OWVAR 39
27118: PUSH
27119: LD_VAR 0 2
27123: ST_TO_ADDR
// vc_control := control ;
27124: LD_ADDR_OWVAR 38
27128: PUSH
27129: LD_VAR 0 3
27133: ST_TO_ADDR
// vc_weapon := weapon ;
27134: LD_ADDR_OWVAR 40
27138: PUSH
27139: LD_VAR 0 4
27143: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27144: LD_ADDR_OWVAR 41
27148: PUSH
27149: LD_VAR 0 5
27153: ST_TO_ADDR
// end ;
27154: LD_VAR 0 6
27158: RET
// export function WantPlant ( unit ) ; var task ; begin
27159: LD_INT 0
27161: PPUSH
27162: PPUSH
// result := false ;
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: LD_INT 0
27170: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27171: LD_ADDR_VAR 0 3
27175: PUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 437
27185: ST_TO_ADDR
// if task then
27186: LD_VAR 0 3
27190: IFFALSE 27218
// if task [ 1 ] [ 1 ] = p then
27192: LD_VAR 0 3
27196: PUSH
27197: LD_INT 1
27199: ARRAY
27200: PUSH
27201: LD_INT 1
27203: ARRAY
27204: PUSH
27205: LD_STRING p
27207: EQUAL
27208: IFFALSE 27218
// result := true ;
27210: LD_ADDR_VAR 0 2
27214: PUSH
27215: LD_INT 1
27217: ST_TO_ADDR
// end ;
27218: LD_VAR 0 2
27222: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27223: LD_INT 0
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
// if pos < 1 then
27229: LD_VAR 0 2
27233: PUSH
27234: LD_INT 1
27236: LESS
27237: IFFALSE 27241
// exit ;
27239: GO 27544
// if pos = 1 then
27241: LD_VAR 0 2
27245: PUSH
27246: LD_INT 1
27248: EQUAL
27249: IFFALSE 27282
// result := Replace ( arr , pos [ 1 ] , value ) else
27251: LD_ADDR_VAR 0 4
27255: PUSH
27256: LD_VAR 0 1
27260: PPUSH
27261: LD_VAR 0 2
27265: PUSH
27266: LD_INT 1
27268: ARRAY
27269: PPUSH
27270: LD_VAR 0 3
27274: PPUSH
27275: CALL_OW 1
27279: ST_TO_ADDR
27280: GO 27544
// begin tmp := arr ;
27282: LD_ADDR_VAR 0 6
27286: PUSH
27287: LD_VAR 0 1
27291: ST_TO_ADDR
// s_arr := [ tmp ] ;
27292: LD_ADDR_VAR 0 7
27296: PUSH
27297: LD_VAR 0 6
27301: PUSH
27302: EMPTY
27303: LIST
27304: ST_TO_ADDR
// for i = 1 to pos - 1 do
27305: LD_ADDR_VAR 0 5
27309: PUSH
27310: DOUBLE
27311: LD_INT 1
27313: DEC
27314: ST_TO_ADDR
27315: LD_VAR 0 2
27319: PUSH
27320: LD_INT 1
27322: MINUS
27323: PUSH
27324: FOR_TO
27325: IFFALSE 27370
// begin tmp := tmp [ pos [ i ] ] ;
27327: LD_ADDR_VAR 0 6
27331: PUSH
27332: LD_VAR 0 6
27336: PUSH
27337: LD_VAR 0 2
27341: PUSH
27342: LD_VAR 0 5
27346: ARRAY
27347: ARRAY
27348: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27349: LD_ADDR_VAR 0 7
27353: PUSH
27354: LD_VAR 0 7
27358: PUSH
27359: LD_VAR 0 6
27363: PUSH
27364: EMPTY
27365: LIST
27366: ADD
27367: ST_TO_ADDR
// end ;
27368: GO 27324
27370: POP
27371: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27372: LD_ADDR_VAR 0 6
27376: PUSH
27377: LD_VAR 0 6
27381: PPUSH
27382: LD_VAR 0 2
27386: PUSH
27387: LD_VAR 0 2
27391: ARRAY
27392: PPUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: CALL_OW 1
27402: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27403: LD_ADDR_VAR 0 7
27407: PUSH
27408: LD_VAR 0 7
27412: PPUSH
27413: LD_VAR 0 7
27417: PPUSH
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 1
27427: ST_TO_ADDR
// for i = s_arr downto 2 do
27428: LD_ADDR_VAR 0 5
27432: PUSH
27433: DOUBLE
27434: LD_VAR 0 7
27438: INC
27439: ST_TO_ADDR
27440: LD_INT 2
27442: PUSH
27443: FOR_DOWNTO
27444: IFFALSE 27528
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27446: LD_ADDR_VAR 0 6
27450: PUSH
27451: LD_VAR 0 7
27455: PUSH
27456: LD_VAR 0 5
27460: PUSH
27461: LD_INT 1
27463: MINUS
27464: ARRAY
27465: PPUSH
27466: LD_VAR 0 2
27470: PUSH
27471: LD_VAR 0 5
27475: PUSH
27476: LD_INT 1
27478: MINUS
27479: ARRAY
27480: PPUSH
27481: LD_VAR 0 7
27485: PUSH
27486: LD_VAR 0 5
27490: ARRAY
27491: PPUSH
27492: CALL_OW 1
27496: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27497: LD_ADDR_VAR 0 7
27501: PUSH
27502: LD_VAR 0 7
27506: PPUSH
27507: LD_VAR 0 5
27511: PUSH
27512: LD_INT 1
27514: MINUS
27515: PPUSH
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 1
27525: ST_TO_ADDR
// end ;
27526: GO 27443
27528: POP
27529: POP
// result := s_arr [ 1 ] ;
27530: LD_ADDR_VAR 0 4
27534: PUSH
27535: LD_VAR 0 7
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: ST_TO_ADDR
// end ; end ;
27544: LD_VAR 0 4
27548: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27549: LD_INT 0
27551: PPUSH
27552: PPUSH
// if not list then
27553: LD_VAR 0 1
27557: NOT
27558: IFFALSE 27562
// exit ;
27560: GO 27653
// i := list [ pos1 ] ;
27562: LD_ADDR_VAR 0 5
27566: PUSH
27567: LD_VAR 0 1
27571: PUSH
27572: LD_VAR 0 2
27576: ARRAY
27577: ST_TO_ADDR
// if not i then
27578: LD_VAR 0 5
27582: NOT
27583: IFFALSE 27587
// exit ;
27585: GO 27653
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27587: LD_ADDR_VAR 0 1
27591: PUSH
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 1
27606: PUSH
27607: LD_VAR 0 3
27611: ARRAY
27612: PPUSH
27613: CALL_OW 1
27617: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27618: LD_ADDR_VAR 0 1
27622: PUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: LD_VAR 0 3
27632: PPUSH
27633: LD_VAR 0 5
27637: PPUSH
27638: CALL_OW 1
27642: ST_TO_ADDR
// result := list ;
27643: LD_ADDR_VAR 0 4
27647: PUSH
27648: LD_VAR 0 1
27652: ST_TO_ADDR
// end ;
27653: LD_VAR 0 4
27657: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27658: LD_INT 0
27660: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27661: LD_ADDR_VAR 0 5
27665: PUSH
27666: LD_VAR 0 1
27670: PPUSH
27671: CALL_OW 250
27675: PPUSH
27676: LD_VAR 0 1
27680: PPUSH
27681: CALL_OW 251
27685: PPUSH
27686: LD_VAR 0 2
27690: PPUSH
27691: LD_VAR 0 3
27695: PPUSH
27696: LD_VAR 0 4
27700: PPUSH
27701: CALL 27711 0 5
27705: ST_TO_ADDR
// end ;
27706: LD_VAR 0 5
27710: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
// if not list then
27717: LD_VAR 0 3
27721: NOT
27722: IFFALSE 27726
// exit ;
27724: GO 28114
// result := [ ] ;
27726: LD_ADDR_VAR 0 6
27730: PUSH
27731: EMPTY
27732: ST_TO_ADDR
// for i in list do
27733: LD_ADDR_VAR 0 7
27737: PUSH
27738: LD_VAR 0 3
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27946
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27746: LD_ADDR_VAR 0 9
27750: PUSH
27751: LD_VAR 0 7
27755: PPUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL_OW 297
27770: ST_TO_ADDR
// if not result then
27771: LD_VAR 0 6
27775: NOT
27776: IFFALSE 27802
// result := [ [ i , tmp ] ] else
27778: LD_ADDR_VAR 0 6
27782: PUSH
27783: LD_VAR 0 7
27787: PUSH
27788: LD_VAR 0 9
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: ST_TO_ADDR
27800: GO 27944
// begin if result [ result ] [ 2 ] < tmp then
27802: LD_VAR 0 6
27806: PUSH
27807: LD_VAR 0 6
27811: ARRAY
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: PUSH
27817: LD_VAR 0 9
27821: LESS
27822: IFFALSE 27864
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27824: LD_ADDR_VAR 0 6
27828: PUSH
27829: LD_VAR 0 6
27833: PPUSH
27834: LD_VAR 0 6
27838: PUSH
27839: LD_INT 1
27841: PLUS
27842: PPUSH
27843: LD_VAR 0 7
27847: PUSH
27848: LD_VAR 0 9
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PPUSH
27857: CALL_OW 2
27861: ST_TO_ADDR
27862: GO 27944
// for j = 1 to result do
27864: LD_ADDR_VAR 0 8
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_VAR 0 6
27878: PUSH
27879: FOR_TO
27880: IFFALSE 27942
// begin if tmp < result [ j ] [ 2 ] then
27882: LD_VAR 0 9
27886: PUSH
27887: LD_VAR 0 6
27891: PUSH
27892: LD_VAR 0 8
27896: ARRAY
27897: PUSH
27898: LD_INT 2
27900: ARRAY
27901: LESS
27902: IFFALSE 27940
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27904: LD_ADDR_VAR 0 6
27908: PUSH
27909: LD_VAR 0 6
27913: PPUSH
27914: LD_VAR 0 8
27918: PPUSH
27919: LD_VAR 0 7
27923: PUSH
27924: LD_VAR 0 9
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 2
27937: ST_TO_ADDR
// break ;
27938: GO 27942
// end ; end ;
27940: GO 27879
27942: POP
27943: POP
// end ; end ;
27944: GO 27743
27946: POP
27947: POP
// if result and not asc then
27948: LD_VAR 0 6
27952: PUSH
27953: LD_VAR 0 4
27957: NOT
27958: AND
27959: IFFALSE 28034
// begin tmp := result ;
27961: LD_ADDR_VAR 0 9
27965: PUSH
27966: LD_VAR 0 6
27970: ST_TO_ADDR
// for i = tmp downto 1 do
27971: LD_ADDR_VAR 0 7
27975: PUSH
27976: DOUBLE
27977: LD_VAR 0 9
27981: INC
27982: ST_TO_ADDR
27983: LD_INT 1
27985: PUSH
27986: FOR_DOWNTO
27987: IFFALSE 28032
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27989: LD_ADDR_VAR 0 6
27993: PUSH
27994: LD_VAR 0 6
27998: PPUSH
27999: LD_VAR 0 9
28003: PUSH
28004: LD_VAR 0 7
28008: MINUS
28009: PUSH
28010: LD_INT 1
28012: PLUS
28013: PPUSH
28014: LD_VAR 0 9
28018: PUSH
28019: LD_VAR 0 7
28023: ARRAY
28024: PPUSH
28025: CALL_OW 1
28029: ST_TO_ADDR
28030: GO 27986
28032: POP
28033: POP
// end ; tmp := [ ] ;
28034: LD_ADDR_VAR 0 9
28038: PUSH
28039: EMPTY
28040: ST_TO_ADDR
// if mode then
28041: LD_VAR 0 5
28045: IFFALSE 28114
// begin for i = 1 to result do
28047: LD_ADDR_VAR 0 7
28051: PUSH
28052: DOUBLE
28053: LD_INT 1
28055: DEC
28056: ST_TO_ADDR
28057: LD_VAR 0 6
28061: PUSH
28062: FOR_TO
28063: IFFALSE 28102
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28065: LD_ADDR_VAR 0 9
28069: PUSH
28070: LD_VAR 0 9
28074: PPUSH
28075: LD_VAR 0 7
28079: PPUSH
28080: LD_VAR 0 6
28084: PUSH
28085: LD_VAR 0 7
28089: ARRAY
28090: PUSH
28091: LD_INT 1
28093: ARRAY
28094: PPUSH
28095: CALL_OW 1
28099: ST_TO_ADDR
28100: GO 28062
28102: POP
28103: POP
// result := tmp ;
28104: LD_ADDR_VAR 0 6
28108: PUSH
28109: LD_VAR 0 9
28113: ST_TO_ADDR
// end ; end ;
28114: LD_VAR 0 6
28118: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
28123: PPUSH
28124: PPUSH
28125: PPUSH
28126: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28127: LD_ADDR_VAR 0 5
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// if not x or not y then
28149: LD_VAR 0 2
28153: NOT
28154: PUSH
28155: LD_VAR 0 3
28159: NOT
28160: OR
28161: IFFALSE 28165
// exit ;
28163: GO 29817
// if not range then
28165: LD_VAR 0 4
28169: NOT
28170: IFFALSE 28180
// range := 10 ;
28172: LD_ADDR_VAR 0 4
28176: PUSH
28177: LD_INT 10
28179: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28180: LD_ADDR_VAR 0 8
28184: PUSH
28185: LD_INT 81
28187: PUSH
28188: LD_VAR 0 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 92
28199: PUSH
28200: LD_VAR 0 2
28204: PUSH
28205: LD_VAR 0 3
28209: PUSH
28210: LD_VAR 0 4
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: LD_INT 21
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: ST_TO_ADDR
// if not tmp then
28248: LD_VAR 0 8
28252: NOT
28253: IFFALSE 28257
// exit ;
28255: GO 29817
// for i in tmp do
28257: LD_ADDR_VAR 0 6
28261: PUSH
28262: LD_VAR 0 8
28266: PUSH
28267: FOR_IN
28268: IFFALSE 29792
// begin points := [ 0 , 0 , 0 ] ;
28270: LD_ADDR_VAR 0 9
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// bpoints := 1 ;
28289: LD_ADDR_VAR 0 10
28293: PUSH
28294: LD_INT 1
28296: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28297: LD_VAR 0 6
28301: PPUSH
28302: CALL_OW 247
28306: PUSH
28307: LD_INT 1
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 28893
28315: POP
// begin if GetClass ( i ) = 1 then
28316: LD_VAR 0 6
28320: PPUSH
28321: CALL_OW 257
28325: PUSH
28326: LD_INT 1
28328: EQUAL
28329: IFFALSE 28350
// points := [ 10 , 5 , 3 ] ;
28331: LD_ADDR_VAR 0 9
28335: PUSH
28336: LD_INT 10
28338: PUSH
28339: LD_INT 5
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28350: LD_VAR 0 6
28354: PPUSH
28355: CALL_OW 257
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: LD_INT 4
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: IN
28374: IFFALSE 28395
// points := [ 3 , 2 , 1 ] ;
28376: LD_ADDR_VAR 0 9
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28395: LD_VAR 0 6
28399: PPUSH
28400: CALL_OW 257
28404: PUSH
28405: LD_INT 5
28407: EQUAL
28408: IFFALSE 28429
// points := [ 130 , 5 , 2 ] ;
28410: LD_ADDR_VAR 0 9
28414: PUSH
28415: LD_INT 130
28417: PUSH
28418: LD_INT 5
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28429: LD_VAR 0 6
28433: PPUSH
28434: CALL_OW 257
28438: PUSH
28439: LD_INT 8
28441: EQUAL
28442: IFFALSE 28463
// points := [ 35 , 35 , 30 ] ;
28444: LD_ADDR_VAR 0 9
28448: PUSH
28449: LD_INT 35
28451: PUSH
28452: LD_INT 35
28454: PUSH
28455: LD_INT 30
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28463: LD_VAR 0 6
28467: PPUSH
28468: CALL_OW 257
28472: PUSH
28473: LD_INT 9
28475: EQUAL
28476: IFFALSE 28497
// points := [ 20 , 55 , 40 ] ;
28478: LD_ADDR_VAR 0 9
28482: PUSH
28483: LD_INT 20
28485: PUSH
28486: LD_INT 55
28488: PUSH
28489: LD_INT 40
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28497: LD_VAR 0 6
28501: PPUSH
28502: CALL_OW 257
28506: PUSH
28507: LD_INT 12
28509: PUSH
28510: LD_INT 16
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: IN
28517: IFFALSE 28538
// points := [ 5 , 3 , 2 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 5
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 257
28547: PUSH
28548: LD_INT 17
28550: EQUAL
28551: IFFALSE 28572
// points := [ 100 , 50 , 75 ] ;
28553: LD_ADDR_VAR 0 9
28557: PUSH
28558: LD_INT 100
28560: PUSH
28561: LD_INT 50
28563: PUSH
28564: LD_INT 75
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28572: LD_VAR 0 6
28576: PPUSH
28577: CALL_OW 257
28581: PUSH
28582: LD_INT 15
28584: EQUAL
28585: IFFALSE 28606
// points := [ 10 , 5 , 3 ] ;
28587: LD_ADDR_VAR 0 9
28591: PUSH
28592: LD_INT 10
28594: PUSH
28595: LD_INT 5
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28606: LD_VAR 0 6
28610: PPUSH
28611: CALL_OW 257
28615: PUSH
28616: LD_INT 14
28618: EQUAL
28619: IFFALSE 28640
// points := [ 10 , 0 , 0 ] ;
28621: LD_ADDR_VAR 0 9
28625: PUSH
28626: LD_INT 10
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28640: LD_VAR 0 6
28644: PPUSH
28645: CALL_OW 257
28649: PUSH
28650: LD_INT 11
28652: EQUAL
28653: IFFALSE 28674
// points := [ 30 , 10 , 5 ] ;
28655: LD_ADDR_VAR 0 9
28659: PUSH
28660: LD_INT 30
28662: PUSH
28663: LD_INT 10
28665: PUSH
28666: LD_INT 5
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28674: LD_VAR 0 1
28678: PPUSH
28679: LD_INT 5
28681: PPUSH
28682: CALL_OW 321
28686: PUSH
28687: LD_INT 2
28689: EQUAL
28690: IFFALSE 28707
// bpoints := bpoints * 1.8 ;
28692: LD_ADDR_VAR 0 10
28696: PUSH
28697: LD_VAR 0 10
28701: PUSH
28702: LD_REAL  1.80000000000000E+0000
28705: MUL
28706: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28707: LD_VAR 0 6
28711: PPUSH
28712: CALL_OW 257
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 4
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: IN
28735: PUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_INT 51
28743: PPUSH
28744: CALL_OW 321
28748: PUSH
28749: LD_INT 2
28751: EQUAL
28752: AND
28753: IFFALSE 28770
// bpoints := bpoints * 1.2 ;
28755: LD_ADDR_VAR 0 10
28759: PUSH
28760: LD_VAR 0 10
28764: PUSH
28765: LD_REAL  1.20000000000000E+0000
28768: MUL
28769: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28770: LD_VAR 0 6
28774: PPUSH
28775: CALL_OW 257
28779: PUSH
28780: LD_INT 5
28782: PUSH
28783: LD_INT 7
28785: PUSH
28786: LD_INT 9
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: IN
28794: PUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 52
28802: PPUSH
28803: CALL_OW 321
28807: PUSH
28808: LD_INT 2
28810: EQUAL
28811: AND
28812: IFFALSE 28829
// bpoints := bpoints * 1.5 ;
28814: LD_ADDR_VAR 0 10
28818: PUSH
28819: LD_VAR 0 10
28823: PUSH
28824: LD_REAL  1.50000000000000E+0000
28827: MUL
28828: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28829: LD_VAR 0 1
28833: PPUSH
28834: LD_INT 66
28836: PPUSH
28837: CALL_OW 321
28841: PUSH
28842: LD_INT 2
28844: EQUAL
28845: IFFALSE 28862
// bpoints := bpoints * 1.1 ;
28847: LD_ADDR_VAR 0 10
28851: PUSH
28852: LD_VAR 0 10
28856: PUSH
28857: LD_REAL  1.10000000000000E+0000
28860: MUL
28861: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28862: LD_ADDR_VAR 0 10
28866: PUSH
28867: LD_VAR 0 10
28871: PUSH
28872: LD_VAR 0 6
28876: PPUSH
28877: LD_INT 1
28879: PPUSH
28880: CALL_OW 259
28884: PUSH
28885: LD_REAL  1.15000000000000E+0000
28888: MUL
28889: MUL
28890: ST_TO_ADDR
// end ; unit_vehicle :
28891: GO 29721
28893: LD_INT 2
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28901
28899: GO 29709
28901: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28902: LD_VAR 0 6
28906: PPUSH
28907: CALL_OW 264
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: LD_INT 42
28917: PUSH
28918: LD_INT 24
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: IN
28926: IFFALSE 28947
// points := [ 25 , 5 , 3 ] ;
28928: LD_ADDR_VAR 0 9
28932: PUSH
28933: LD_INT 25
28935: PUSH
28936: LD_INT 5
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28947: LD_VAR 0 6
28951: PPUSH
28952: CALL_OW 264
28956: PUSH
28957: LD_INT 4
28959: PUSH
28960: LD_INT 43
28962: PUSH
28963: LD_INT 25
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: IN
28971: IFFALSE 28992
// points := [ 40 , 15 , 5 ] ;
28973: LD_ADDR_VAR 0 9
28977: PUSH
28978: LD_INT 40
28980: PUSH
28981: LD_INT 15
28983: PUSH
28984: LD_INT 5
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28992: LD_VAR 0 6
28996: PPUSH
28997: CALL_OW 264
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: LD_INT 23
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: IN
29012: IFFALSE 29033
// points := [ 7 , 25 , 8 ] ;
29014: LD_ADDR_VAR 0 9
29018: PUSH
29019: LD_INT 7
29021: PUSH
29022: LD_INT 25
29024: PUSH
29025: LD_INT 8
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29033: LD_VAR 0 6
29037: PPUSH
29038: CALL_OW 264
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: LD_INT 27
29048: PUSH
29049: LD_INT 44
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: IN
29057: IFFALSE 29078
// points := [ 14 , 50 , 16 ] ;
29059: LD_ADDR_VAR 0 9
29063: PUSH
29064: LD_INT 14
29066: PUSH
29067: LD_INT 50
29069: PUSH
29070: LD_INT 16
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29078: LD_VAR 0 6
29082: PPUSH
29083: CALL_OW 264
29087: PUSH
29088: LD_INT 6
29090: PUSH
29091: LD_INT 46
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: IN
29098: IFFALSE 29119
// points := [ 32 , 120 , 70 ] ;
29100: LD_ADDR_VAR 0 9
29104: PUSH
29105: LD_INT 32
29107: PUSH
29108: LD_INT 120
29110: PUSH
29111: LD_INT 70
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29119: LD_VAR 0 6
29123: PPUSH
29124: CALL_OW 264
29128: PUSH
29129: LD_INT 7
29131: PUSH
29132: LD_INT 28
29134: PUSH
29135: LD_INT 45
29137: PUSH
29138: LD_EXP 83
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: IN
29149: IFFALSE 29170
// points := [ 35 , 20 , 45 ] ;
29151: LD_ADDR_VAR 0 9
29155: PUSH
29156: LD_INT 35
29158: PUSH
29159: LD_INT 20
29161: PUSH
29162: LD_INT 45
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29170: LD_VAR 0 6
29174: PPUSH
29175: CALL_OW 264
29179: PUSH
29180: LD_INT 47
29182: PUSH
29183: EMPTY
29184: LIST
29185: IN
29186: IFFALSE 29207
// points := [ 67 , 45 , 75 ] ;
29188: LD_ADDR_VAR 0 9
29192: PUSH
29193: LD_INT 67
29195: PUSH
29196: LD_INT 45
29198: PUSH
29199: LD_INT 75
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29207: LD_VAR 0 6
29211: PPUSH
29212: CALL_OW 264
29216: PUSH
29217: LD_INT 26
29219: PUSH
29220: EMPTY
29221: LIST
29222: IN
29223: IFFALSE 29244
// points := [ 120 , 30 , 80 ] ;
29225: LD_ADDR_VAR 0 9
29229: PUSH
29230: LD_INT 120
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 80
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29244: LD_VAR 0 6
29248: PPUSH
29249: CALL_OW 264
29253: PUSH
29254: LD_INT 22
29256: PUSH
29257: EMPTY
29258: LIST
29259: IN
29260: IFFALSE 29281
// points := [ 40 , 1 , 1 ] ;
29262: LD_ADDR_VAR 0 9
29266: PUSH
29267: LD_INT 40
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29281: LD_VAR 0 6
29285: PPUSH
29286: CALL_OW 264
29290: PUSH
29291: LD_INT 29
29293: PUSH
29294: EMPTY
29295: LIST
29296: IN
29297: IFFALSE 29318
// points := [ 70 , 200 , 400 ] ;
29299: LD_ADDR_VAR 0 9
29303: PUSH
29304: LD_INT 70
29306: PUSH
29307: LD_INT 200
29309: PUSH
29310: LD_INT 400
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29318: LD_VAR 0 6
29322: PPUSH
29323: CALL_OW 264
29327: PUSH
29328: LD_INT 14
29330: PUSH
29331: LD_INT 53
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: IN
29338: IFFALSE 29359
// points := [ 40 , 10 , 20 ] ;
29340: LD_ADDR_VAR 0 9
29344: PUSH
29345: LD_INT 40
29347: PUSH
29348: LD_INT 10
29350: PUSH
29351: LD_INT 20
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29359: LD_VAR 0 6
29363: PPUSH
29364: CALL_OW 264
29368: PUSH
29369: LD_INT 9
29371: PUSH
29372: EMPTY
29373: LIST
29374: IN
29375: IFFALSE 29396
// points := [ 5 , 70 , 20 ] ;
29377: LD_ADDR_VAR 0 9
29381: PUSH
29382: LD_INT 5
29384: PUSH
29385: LD_INT 70
29387: PUSH
29388: LD_INT 20
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29396: LD_VAR 0 6
29400: PPUSH
29401: CALL_OW 264
29405: PUSH
29406: LD_INT 10
29408: PUSH
29409: EMPTY
29410: LIST
29411: IN
29412: IFFALSE 29433
// points := [ 35 , 110 , 70 ] ;
29414: LD_ADDR_VAR 0 9
29418: PUSH
29419: LD_INT 35
29421: PUSH
29422: LD_INT 110
29424: PUSH
29425: LD_INT 70
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29433: LD_VAR 0 6
29437: PPUSH
29438: CALL_OW 265
29442: PUSH
29443: LD_INT 25
29445: EQUAL
29446: IFFALSE 29467
// points := [ 80 , 65 , 100 ] ;
29448: LD_ADDR_VAR 0 9
29452: PUSH
29453: LD_INT 80
29455: PUSH
29456: LD_INT 65
29458: PUSH
29459: LD_INT 100
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29467: LD_VAR 0 6
29471: PPUSH
29472: CALL_OW 263
29476: PUSH
29477: LD_INT 1
29479: EQUAL
29480: IFFALSE 29515
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29482: LD_ADDR_VAR 0 10
29486: PUSH
29487: LD_VAR 0 10
29491: PUSH
29492: LD_VAR 0 6
29496: PPUSH
29497: CALL_OW 311
29501: PPUSH
29502: LD_INT 3
29504: PPUSH
29505: CALL_OW 259
29509: PUSH
29510: LD_INT 4
29512: MUL
29513: MUL
29514: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29515: LD_VAR 0 6
29519: PPUSH
29520: CALL_OW 263
29524: PUSH
29525: LD_INT 2
29527: EQUAL
29528: IFFALSE 29579
// begin j := IsControledBy ( i ) ;
29530: LD_ADDR_VAR 0 7
29534: PUSH
29535: LD_VAR 0 6
29539: PPUSH
29540: CALL_OW 312
29544: ST_TO_ADDR
// if j then
29545: LD_VAR 0 7
29549: IFFALSE 29579
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29551: LD_ADDR_VAR 0 10
29555: PUSH
29556: LD_VAR 0 10
29560: PUSH
29561: LD_VAR 0 7
29565: PPUSH
29566: LD_INT 3
29568: PPUSH
29569: CALL_OW 259
29573: PUSH
29574: LD_INT 3
29576: MUL
29577: MUL
29578: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29579: LD_VAR 0 6
29583: PPUSH
29584: CALL_OW 264
29588: PUSH
29589: LD_INT 5
29591: PUSH
29592: LD_INT 6
29594: PUSH
29595: LD_INT 46
29597: PUSH
29598: LD_INT 44
29600: PUSH
29601: LD_INT 47
29603: PUSH
29604: LD_INT 45
29606: PUSH
29607: LD_INT 28
29609: PUSH
29610: LD_INT 7
29612: PUSH
29613: LD_INT 27
29615: PUSH
29616: LD_INT 29
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: IN
29631: PUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: LD_INT 52
29639: PPUSH
29640: CALL_OW 321
29644: PUSH
29645: LD_INT 2
29647: EQUAL
29648: AND
29649: IFFALSE 29666
// bpoints := bpoints * 1.2 ;
29651: LD_ADDR_VAR 0 10
29655: PUSH
29656: LD_VAR 0 10
29660: PUSH
29661: LD_REAL  1.20000000000000E+0000
29664: MUL
29665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29666: LD_VAR 0 6
29670: PPUSH
29671: CALL_OW 264
29675: PUSH
29676: LD_INT 6
29678: PUSH
29679: LD_INT 46
29681: PUSH
29682: LD_INT 47
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: IN
29690: IFFALSE 29707
// bpoints := bpoints * 1.2 ;
29692: LD_ADDR_VAR 0 10
29696: PUSH
29697: LD_VAR 0 10
29701: PUSH
29702: LD_REAL  1.20000000000000E+0000
29705: MUL
29706: ST_TO_ADDR
// end ; unit_building :
29707: GO 29721
29709: LD_INT 3
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29720
29717: POP
// ; end ;
29718: GO 29721
29720: POP
// for j = 1 to 3 do
29721: LD_ADDR_VAR 0 7
29725: PUSH
29726: DOUBLE
29727: LD_INT 1
29729: DEC
29730: ST_TO_ADDR
29731: LD_INT 3
29733: PUSH
29734: FOR_TO
29735: IFFALSE 29788
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29737: LD_ADDR_VAR 0 5
29741: PUSH
29742: LD_VAR 0 5
29746: PPUSH
29747: LD_VAR 0 7
29751: PPUSH
29752: LD_VAR 0 5
29756: PUSH
29757: LD_VAR 0 7
29761: ARRAY
29762: PUSH
29763: LD_VAR 0 9
29767: PUSH
29768: LD_VAR 0 7
29772: ARRAY
29773: PUSH
29774: LD_VAR 0 10
29778: MUL
29779: PLUS
29780: PPUSH
29781: CALL_OW 1
29785: ST_TO_ADDR
29786: GO 29734
29788: POP
29789: POP
// end ;
29790: GO 28267
29792: POP
29793: POP
// result := Replace ( result , 4 , tmp ) ;
29794: LD_ADDR_VAR 0 5
29798: PUSH
29799: LD_VAR 0 5
29803: PPUSH
29804: LD_INT 4
29806: PPUSH
29807: LD_VAR 0 8
29811: PPUSH
29812: CALL_OW 1
29816: ST_TO_ADDR
// end ;
29817: LD_VAR 0 5
29821: RET
// export function DangerAtRange ( unit , range ) ; begin
29822: LD_INT 0
29824: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29825: LD_ADDR_VAR 0 3
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 255
29839: PPUSH
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 250
29849: PPUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 251
29859: PPUSH
29860: LD_VAR 0 2
29864: PPUSH
29865: CALL 28119 0 4
29869: ST_TO_ADDR
// end ;
29870: LD_VAR 0 3
29874: RET
// export function DangerInArea ( side , area ) ; begin
29875: LD_INT 0
29877: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_VAR 0 2
29887: PPUSH
29888: LD_INT 81
29890: PUSH
29891: LD_VAR 0 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PPUSH
29900: CALL_OW 70
29904: ST_TO_ADDR
// end ;
29905: LD_VAR 0 3
29909: RET
// export function IsExtension ( b ) ; begin
29910: LD_INT 0
29912: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29913: LD_ADDR_VAR 0 2
29917: PUSH
29918: LD_VAR 0 1
29922: PUSH
29923: LD_INT 23
29925: PUSH
29926: LD_INT 20
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_INT 17
29934: PUSH
29935: LD_INT 24
29937: PUSH
29938: LD_INT 21
29940: PUSH
29941: LD_INT 19
29943: PUSH
29944: LD_INT 16
29946: PUSH
29947: LD_INT 25
29949: PUSH
29950: LD_INT 18
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: IN
29965: ST_TO_ADDR
// end ;
29966: LD_VAR 0 2
29970: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29971: LD_INT 0
29973: PPUSH
29974: PPUSH
29975: PPUSH
// result := [ ] ;
29976: LD_ADDR_VAR 0 4
29980: PUSH
29981: EMPTY
29982: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29983: LD_ADDR_VAR 0 5
29987: PUSH
29988: LD_VAR 0 2
29992: PPUSH
29993: LD_INT 21
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 70
30007: ST_TO_ADDR
// if not tmp then
30008: LD_VAR 0 5
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30081
// if checkLink then
30017: LD_VAR 0 3
30021: IFFALSE 30071
// begin for i in tmp do
30023: LD_ADDR_VAR 0 6
30027: PUSH
30028: LD_VAR 0 5
30032: PUSH
30033: FOR_IN
30034: IFFALSE 30069
// if GetBase ( i ) <> base then
30036: LD_VAR 0 6
30040: PPUSH
30041: CALL_OW 274
30045: PUSH
30046: LD_VAR 0 1
30050: NONEQUAL
30051: IFFALSE 30067
// ComLinkToBase ( base , i ) ;
30053: LD_VAR 0 1
30057: PPUSH
30058: LD_VAR 0 6
30062: PPUSH
30063: CALL_OW 169
30067: GO 30033
30069: POP
30070: POP
// end ; result := tmp ;
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_VAR 0 5
30080: ST_TO_ADDR
// end ;
30081: LD_VAR 0 4
30085: RET
// export function ComComplete ( units , b ) ; var i ; begin
30086: LD_INT 0
30088: PPUSH
30089: PPUSH
// if not units then
30090: LD_VAR 0 1
30094: NOT
30095: IFFALSE 30099
// exit ;
30097: GO 30189
// for i in units do
30099: LD_ADDR_VAR 0 4
30103: PUSH
30104: LD_VAR 0 1
30108: PUSH
30109: FOR_IN
30110: IFFALSE 30187
// if BuildingStatus ( b ) = bs_build then
30112: LD_VAR 0 2
30116: PPUSH
30117: CALL_OW 461
30121: PUSH
30122: LD_INT 1
30124: EQUAL
30125: IFFALSE 30185
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30127: LD_VAR 0 4
30131: PPUSH
30132: LD_STRING h
30134: PUSH
30135: LD_VAR 0 2
30139: PPUSH
30140: CALL_OW 250
30144: PUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: CALL_OW 251
30154: PUSH
30155: LD_VAR 0 2
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: PPUSH
30181: CALL_OW 446
30185: GO 30109
30187: POP
30188: POP
// end ;
30189: LD_VAR 0 3
30193: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30194: LD_INT 0
30196: PPUSH
30197: PPUSH
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30202: LD_VAR 0 1
30206: NOT
30207: PUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 263
30217: PUSH
30218: LD_INT 2
30220: NONEQUAL
30221: OR
30222: IFFALSE 30226
// exit ;
30224: GO 30542
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30226: LD_ADDR_VAR 0 6
30230: PUSH
30231: LD_INT 22
30233: PUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 30
30253: PUSH
30254: LD_INT 36
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 34
30263: PUSH
30264: LD_INT 31
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PPUSH
30280: CALL_OW 69
30284: ST_TO_ADDR
// if not tmp then
30285: LD_VAR 0 6
30289: NOT
30290: IFFALSE 30294
// exit ;
30292: GO 30542
// result := [ ] ;
30294: LD_ADDR_VAR 0 2
30298: PUSH
30299: EMPTY
30300: ST_TO_ADDR
// for i in tmp do
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_VAR 0 6
30310: PUSH
30311: FOR_IN
30312: IFFALSE 30383
// begin t := UnitsInside ( i ) ;
30314: LD_ADDR_VAR 0 4
30318: PUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 313
30328: ST_TO_ADDR
// if t then
30329: LD_VAR 0 4
30333: IFFALSE 30381
// for j in t do
30335: LD_ADDR_VAR 0 7
30339: PUSH
30340: LD_VAR 0 4
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30379
// result := Replace ( result , result + 1 , j ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_VAR 0 2
30357: PPUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_INT 1
30365: PLUS
30366: PPUSH
30367: LD_VAR 0 7
30371: PPUSH
30372: CALL_OW 1
30376: ST_TO_ADDR
30377: GO 30345
30379: POP
30380: POP
// end ;
30381: GO 30311
30383: POP
30384: POP
// if not result then
30385: LD_VAR 0 2
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30542
// mech := result [ 1 ] ;
30394: LD_ADDR_VAR 0 5
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: ST_TO_ADDR
// if result > 1 then
30408: LD_VAR 0 2
30412: PUSH
30413: LD_INT 1
30415: GREATER
30416: IFFALSE 30528
// begin for i = 2 to result do
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: DOUBLE
30424: LD_INT 2
30426: DEC
30427: ST_TO_ADDR
30428: LD_VAR 0 2
30432: PUSH
30433: FOR_TO
30434: IFFALSE 30526
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30436: LD_ADDR_VAR 0 4
30440: PUSH
30441: LD_VAR 0 2
30445: PUSH
30446: LD_VAR 0 3
30450: ARRAY
30451: PPUSH
30452: LD_INT 3
30454: PPUSH
30455: CALL_OW 259
30459: PUSH
30460: LD_VAR 0 2
30464: PUSH
30465: LD_VAR 0 3
30469: ARRAY
30470: PPUSH
30471: CALL_OW 432
30475: MINUS
30476: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30477: LD_VAR 0 4
30481: PUSH
30482: LD_VAR 0 5
30486: PPUSH
30487: LD_INT 3
30489: PPUSH
30490: CALL_OW 259
30494: PUSH
30495: LD_VAR 0 5
30499: PPUSH
30500: CALL_OW 432
30504: MINUS
30505: GREATEREQUAL
30506: IFFALSE 30524
// mech := result [ i ] ;
30508: LD_ADDR_VAR 0 5
30512: PUSH
30513: LD_VAR 0 2
30517: PUSH
30518: LD_VAR 0 3
30522: ARRAY
30523: ST_TO_ADDR
// end ;
30524: GO 30433
30526: POP
30527: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_VAR 0 5
30537: PPUSH
30538: CALL_OW 135
// end ;
30542: LD_VAR 0 2
30546: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
30553: PPUSH
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// result := [ ] ;
30562: LD_ADDR_VAR 0 7
30566: PUSH
30567: EMPTY
30568: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 266
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: IN
30589: NOT
30590: IFFALSE 30594
// exit ;
30592: GO 32228
// if name then
30594: LD_VAR 0 3
30598: IFFALSE 30614
// SetBName ( base_dep , name ) ;
30600: LD_VAR 0 1
30604: PPUSH
30605: LD_VAR 0 3
30609: PPUSH
30610: CALL_OW 500
// base := GetBase ( base_dep ) ;
30614: LD_ADDR_VAR 0 15
30618: PUSH
30619: LD_VAR 0 1
30623: PPUSH
30624: CALL_OW 274
30628: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30629: LD_ADDR_VAR 0 16
30633: PUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 255
30643: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30644: LD_ADDR_VAR 0 17
30648: PUSH
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 248
30658: ST_TO_ADDR
// if sources then
30659: LD_VAR 0 5
30663: IFFALSE 30710
// for i = 1 to 3 do
30665: LD_ADDR_VAR 0 8
30669: PUSH
30670: DOUBLE
30671: LD_INT 1
30673: DEC
30674: ST_TO_ADDR
30675: LD_INT 3
30677: PUSH
30678: FOR_TO
30679: IFFALSE 30708
// AddResourceType ( base , i , sources [ i ] ) ;
30681: LD_VAR 0 15
30685: PPUSH
30686: LD_VAR 0 8
30690: PPUSH
30691: LD_VAR 0 5
30695: PUSH
30696: LD_VAR 0 8
30700: ARRAY
30701: PPUSH
30702: CALL_OW 276
30706: GO 30678
30708: POP
30709: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30710: LD_ADDR_VAR 0 18
30714: PUSH
30715: LD_VAR 0 15
30719: PPUSH
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_INT 1
30727: PPUSH
30728: CALL 29971 0 3
30732: ST_TO_ADDR
// InitHc ;
30733: CALL_OW 19
// InitUc ;
30737: CALL_OW 18
// uc_side := side ;
30741: LD_ADDR_OWVAR 20
30745: PUSH
30746: LD_VAR 0 16
30750: ST_TO_ADDR
// uc_nation := nation ;
30751: LD_ADDR_OWVAR 21
30755: PUSH
30756: LD_VAR 0 17
30760: ST_TO_ADDR
// if buildings then
30761: LD_VAR 0 18
30765: IFFALSE 32087
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30767: LD_ADDR_VAR 0 19
30771: PUSH
30772: LD_VAR 0 18
30776: PPUSH
30777: LD_INT 2
30779: PUSH
30780: LD_INT 30
30782: PUSH
30783: LD_INT 29
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 30
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: PPUSH
30805: CALL_OW 72
30809: ST_TO_ADDR
// if tmp then
30810: LD_VAR 0 19
30814: IFFALSE 30862
// for i in tmp do
30816: LD_ADDR_VAR 0 8
30820: PUSH
30821: LD_VAR 0 19
30825: PUSH
30826: FOR_IN
30827: IFFALSE 30860
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30829: LD_VAR 0 8
30833: PPUSH
30834: CALL_OW 250
30838: PPUSH
30839: LD_VAR 0 8
30843: PPUSH
30844: CALL_OW 251
30848: PPUSH
30849: LD_VAR 0 16
30853: PPUSH
30854: CALL_OW 441
30858: GO 30826
30860: POP
30861: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30862: LD_VAR 0 18
30866: PPUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 32
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 33
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 72
30899: IFFALSE 30987
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30901: LD_ADDR_VAR 0 8
30905: PUSH
30906: LD_VAR 0 18
30910: PPUSH
30911: LD_INT 2
30913: PUSH
30914: LD_INT 30
30916: PUSH
30917: LD_INT 32
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 30
30926: PUSH
30927: LD_INT 33
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: PPUSH
30939: CALL_OW 72
30943: PUSH
30944: FOR_IN
30945: IFFALSE 30985
// begin if not GetBWeapon ( i ) then
30947: LD_VAR 0 8
30951: PPUSH
30952: CALL_OW 269
30956: NOT
30957: IFFALSE 30983
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30959: LD_VAR 0 8
30963: PPUSH
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_VAR 0 2
30973: PPUSH
30974: CALL 32233 0 2
30978: PPUSH
30979: CALL_OW 431
// end ;
30983: GO 30944
30985: POP
30986: POP
// end ; for i = 1 to personel do
30987: LD_ADDR_VAR 0 8
30991: PUSH
30992: DOUBLE
30993: LD_INT 1
30995: DEC
30996: ST_TO_ADDR
30997: LD_VAR 0 6
31001: PUSH
31002: FOR_TO
31003: IFFALSE 32067
// begin if i > 4 then
31005: LD_VAR 0 8
31009: PUSH
31010: LD_INT 4
31012: GREATER
31013: IFFALSE 31017
// break ;
31015: GO 32067
// case i of 1 :
31017: LD_VAR 0 8
31021: PUSH
31022: LD_INT 1
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31110
31030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31031: LD_ADDR_VAR 0 12
31035: PUSH
31036: LD_VAR 0 18
31040: PPUSH
31041: LD_INT 22
31043: PUSH
31044: LD_VAR 0 16
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 58
31055: PUSH
31056: EMPTY
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 30
31064: PUSH
31065: LD_INT 32
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 30
31074: PUSH
31075: LD_INT 4
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 30
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: PPUSH
31103: CALL_OW 72
31107: ST_TO_ADDR
31108: GO 31332
31110: LD_INT 2
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31180
31118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31119: LD_ADDR_VAR 0 12
31123: PUSH
31124: LD_VAR 0 18
31128: PPUSH
31129: LD_INT 22
31131: PUSH
31132: LD_VAR 0 16
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 30
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 30
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PPUSH
31173: CALL_OW 72
31177: ST_TO_ADDR
31178: GO 31332
31180: LD_INT 3
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31250
31188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31189: LD_ADDR_VAR 0 12
31193: PUSH
31194: LD_VAR 0 18
31198: PPUSH
31199: LD_INT 22
31201: PUSH
31202: LD_VAR 0 16
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 30
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PPUSH
31243: CALL_OW 72
31247: ST_TO_ADDR
31248: GO 31332
31250: LD_INT 4
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31331
31258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31259: LD_ADDR_VAR 0 12
31263: PUSH
31264: LD_VAR 0 18
31268: PPUSH
31269: LD_INT 22
31271: PUSH
31272: LD_VAR 0 16
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 6
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 30
31296: PUSH
31297: LD_INT 7
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 30
31306: PUSH
31307: LD_INT 8
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 72
31328: ST_TO_ADDR
31329: GO 31332
31331: POP
// if i = 1 then
31332: LD_VAR 0 8
31336: PUSH
31337: LD_INT 1
31339: EQUAL
31340: IFFALSE 31451
// begin tmp := [ ] ;
31342: LD_ADDR_VAR 0 19
31346: PUSH
31347: EMPTY
31348: ST_TO_ADDR
// for j in f do
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_VAR 0 12
31358: PUSH
31359: FOR_IN
31360: IFFALSE 31433
// if GetBType ( j ) = b_bunker then
31362: LD_VAR 0 9
31366: PPUSH
31367: CALL_OW 266
31371: PUSH
31372: LD_INT 32
31374: EQUAL
31375: IFFALSE 31402
// tmp := Insert ( tmp , 1 , j ) else
31377: LD_ADDR_VAR 0 19
31381: PUSH
31382: LD_VAR 0 19
31386: PPUSH
31387: LD_INT 1
31389: PPUSH
31390: LD_VAR 0 9
31394: PPUSH
31395: CALL_OW 2
31399: ST_TO_ADDR
31400: GO 31431
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31402: LD_ADDR_VAR 0 19
31406: PUSH
31407: LD_VAR 0 19
31411: PPUSH
31412: LD_VAR 0 19
31416: PUSH
31417: LD_INT 1
31419: PLUS
31420: PPUSH
31421: LD_VAR 0 9
31425: PPUSH
31426: CALL_OW 2
31430: ST_TO_ADDR
31431: GO 31359
31433: POP
31434: POP
// if tmp then
31435: LD_VAR 0 19
31439: IFFALSE 31451
// f := tmp ;
31441: LD_ADDR_VAR 0 12
31445: PUSH
31446: LD_VAR 0 19
31450: ST_TO_ADDR
// end ; x := personel [ i ] ;
31451: LD_ADDR_VAR 0 13
31455: PUSH
31456: LD_VAR 0 6
31460: PUSH
31461: LD_VAR 0 8
31465: ARRAY
31466: ST_TO_ADDR
// if x = - 1 then
31467: LD_VAR 0 13
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: EQUAL
31476: IFFALSE 31685
// begin for j in f do
31478: LD_ADDR_VAR 0 9
31482: PUSH
31483: LD_VAR 0 12
31487: PUSH
31488: FOR_IN
31489: IFFALSE 31681
// repeat InitHc ;
31491: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31495: LD_VAR 0 9
31499: PPUSH
31500: CALL_OW 266
31504: PUSH
31505: LD_INT 5
31507: EQUAL
31508: IFFALSE 31578
// begin if UnitsInside ( j ) < 3 then
31510: LD_VAR 0 9
31514: PPUSH
31515: CALL_OW 313
31519: PUSH
31520: LD_INT 3
31522: LESS
31523: IFFALSE 31559
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31525: LD_INT 0
31527: PPUSH
31528: LD_INT 5
31530: PUSH
31531: LD_INT 8
31533: PUSH
31534: LD_INT 9
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: PUSH
31542: LD_VAR 0 17
31546: ARRAY
31547: PPUSH
31548: LD_VAR 0 4
31552: PPUSH
31553: CALL_OW 380
31557: GO 31576
// PrepareHuman ( false , i , skill ) ;
31559: LD_INT 0
31561: PPUSH
31562: LD_VAR 0 8
31566: PPUSH
31567: LD_VAR 0 4
31571: PPUSH
31572: CALL_OW 380
// end else
31576: GO 31595
// PrepareHuman ( false , i , skill ) ;
31578: LD_INT 0
31580: PPUSH
31581: LD_VAR 0 8
31585: PPUSH
31586: LD_VAR 0 4
31590: PPUSH
31591: CALL_OW 380
// un := CreateHuman ;
31595: LD_ADDR_VAR 0 14
31599: PUSH
31600: CALL_OW 44
31604: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31605: LD_ADDR_VAR 0 7
31609: PUSH
31610: LD_VAR 0 7
31614: PPUSH
31615: LD_INT 1
31617: PPUSH
31618: LD_VAR 0 14
31622: PPUSH
31623: CALL_OW 2
31627: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31628: LD_VAR 0 14
31632: PPUSH
31633: LD_VAR 0 9
31637: PPUSH
31638: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31642: LD_VAR 0 9
31646: PPUSH
31647: CALL_OW 313
31651: PUSH
31652: LD_INT 6
31654: EQUAL
31655: PUSH
31656: LD_VAR 0 9
31660: PPUSH
31661: CALL_OW 266
31665: PUSH
31666: LD_INT 32
31668: PUSH
31669: LD_INT 31
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: IN
31676: OR
31677: IFFALSE 31491
31679: GO 31488
31681: POP
31682: POP
// end else
31683: GO 32065
// for j = 1 to x do
31685: LD_ADDR_VAR 0 9
31689: PUSH
31690: DOUBLE
31691: LD_INT 1
31693: DEC
31694: ST_TO_ADDR
31695: LD_VAR 0 13
31699: PUSH
31700: FOR_TO
31701: IFFALSE 32063
// begin InitHc ;
31703: CALL_OW 19
// if not f then
31707: LD_VAR 0 12
31711: NOT
31712: IFFALSE 31801
// begin PrepareHuman ( false , i , skill ) ;
31714: LD_INT 0
31716: PPUSH
31717: LD_VAR 0 8
31721: PPUSH
31722: LD_VAR 0 4
31726: PPUSH
31727: CALL_OW 380
// un := CreateHuman ;
31731: LD_ADDR_VAR 0 14
31735: PUSH
31736: CALL_OW 44
31740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31741: LD_ADDR_VAR 0 7
31745: PUSH
31746: LD_VAR 0 7
31750: PPUSH
31751: LD_INT 1
31753: PPUSH
31754: LD_VAR 0 14
31758: PPUSH
31759: CALL_OW 2
31763: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31764: LD_VAR 0 14
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 250
31778: PPUSH
31779: LD_VAR 0 1
31783: PPUSH
31784: CALL_OW 251
31788: PPUSH
31789: LD_INT 10
31791: PPUSH
31792: LD_INT 0
31794: PPUSH
31795: CALL_OW 50
// continue ;
31799: GO 31700
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31801: LD_VAR 0 12
31805: PUSH
31806: LD_INT 1
31808: ARRAY
31809: PPUSH
31810: CALL_OW 313
31814: PUSH
31815: LD_VAR 0 12
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: PPUSH
31824: CALL_OW 266
31828: PUSH
31829: LD_INT 32
31831: PUSH
31832: LD_INT 31
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: IN
31839: AND
31840: PUSH
31841: LD_VAR 0 12
31845: PUSH
31846: LD_INT 1
31848: ARRAY
31849: PPUSH
31850: CALL_OW 313
31854: PUSH
31855: LD_INT 6
31857: EQUAL
31858: OR
31859: IFFALSE 31879
// f := Delete ( f , 1 ) ;
31861: LD_ADDR_VAR 0 12
31865: PUSH
31866: LD_VAR 0 12
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 3
31878: ST_TO_ADDR
// if not f then
31879: LD_VAR 0 12
31883: NOT
31884: IFFALSE 31902
// begin x := x + 2 ;
31886: LD_ADDR_VAR 0 13
31890: PUSH
31891: LD_VAR 0 13
31895: PUSH
31896: LD_INT 2
31898: PLUS
31899: ST_TO_ADDR
// continue ;
31900: GO 31700
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31902: LD_VAR 0 12
31906: PUSH
31907: LD_INT 1
31909: ARRAY
31910: PPUSH
31911: CALL_OW 266
31915: PUSH
31916: LD_INT 5
31918: EQUAL
31919: IFFALSE 31993
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31921: LD_VAR 0 12
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PPUSH
31930: CALL_OW 313
31934: PUSH
31935: LD_INT 3
31937: LESS
31938: IFFALSE 31974
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31940: LD_INT 0
31942: PPUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 8
31948: PUSH
31949: LD_INT 9
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: PUSH
31957: LD_VAR 0 17
31961: ARRAY
31962: PPUSH
31963: LD_VAR 0 4
31967: PPUSH
31968: CALL_OW 380
31972: GO 31991
// PrepareHuman ( false , i , skill ) ;
31974: LD_INT 0
31976: PPUSH
31977: LD_VAR 0 8
31981: PPUSH
31982: LD_VAR 0 4
31986: PPUSH
31987: CALL_OW 380
// end else
31991: GO 32010
// PrepareHuman ( false , i , skill ) ;
31993: LD_INT 0
31995: PPUSH
31996: LD_VAR 0 8
32000: PPUSH
32001: LD_VAR 0 4
32005: PPUSH
32006: CALL_OW 380
// un := CreateHuman ;
32010: LD_ADDR_VAR 0 14
32014: PUSH
32015: CALL_OW 44
32019: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32020: LD_ADDR_VAR 0 7
32024: PUSH
32025: LD_VAR 0 7
32029: PPUSH
32030: LD_INT 1
32032: PPUSH
32033: LD_VAR 0 14
32037: PPUSH
32038: CALL_OW 2
32042: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32043: LD_VAR 0 14
32047: PPUSH
32048: LD_VAR 0 12
32052: PUSH
32053: LD_INT 1
32055: ARRAY
32056: PPUSH
32057: CALL_OW 52
// end ;
32061: GO 31700
32063: POP
32064: POP
// end ;
32065: GO 31002
32067: POP
32068: POP
// result := result ^ buildings ;
32069: LD_ADDR_VAR 0 7
32073: PUSH
32074: LD_VAR 0 7
32078: PUSH
32079: LD_VAR 0 18
32083: ADD
32084: ST_TO_ADDR
// end else
32085: GO 32228
// begin for i = 1 to personel do
32087: LD_ADDR_VAR 0 8
32091: PUSH
32092: DOUBLE
32093: LD_INT 1
32095: DEC
32096: ST_TO_ADDR
32097: LD_VAR 0 6
32101: PUSH
32102: FOR_TO
32103: IFFALSE 32226
// begin if i > 4 then
32105: LD_VAR 0 8
32109: PUSH
32110: LD_INT 4
32112: GREATER
32113: IFFALSE 32117
// break ;
32115: GO 32226
// x := personel [ i ] ;
32117: LD_ADDR_VAR 0 13
32121: PUSH
32122: LD_VAR 0 6
32126: PUSH
32127: LD_VAR 0 8
32131: ARRAY
32132: ST_TO_ADDR
// if x = - 1 then
32133: LD_VAR 0 13
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: EQUAL
32142: IFFALSE 32146
// continue ;
32144: GO 32102
// PrepareHuman ( false , i , skill ) ;
32146: LD_INT 0
32148: PPUSH
32149: LD_VAR 0 8
32153: PPUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: CALL_OW 380
// un := CreateHuman ;
32163: LD_ADDR_VAR 0 14
32167: PUSH
32168: CALL_OW 44
32172: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32173: LD_VAR 0 14
32177: PPUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: CALL_OW 250
32187: PPUSH
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 251
32197: PPUSH
32198: LD_INT 10
32200: PPUSH
32201: LD_INT 0
32203: PPUSH
32204: CALL_OW 50
// result := result ^ un ;
32208: LD_ADDR_VAR 0 7
32212: PUSH
32213: LD_VAR 0 7
32217: PUSH
32218: LD_VAR 0 14
32222: ADD
32223: ST_TO_ADDR
// end ;
32224: GO 32102
32226: POP
32227: POP
// end ; end ;
32228: LD_VAR 0 7
32232: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32233: LD_INT 0
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
32250: PPUSH
// result := false ;
32251: LD_ADDR_VAR 0 3
32255: PUSH
32256: LD_INT 0
32258: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32259: LD_VAR 0 1
32263: NOT
32264: PUSH
32265: LD_VAR 0 1
32269: PPUSH
32270: CALL_OW 266
32274: PUSH
32275: LD_INT 32
32277: PUSH
32278: LD_INT 33
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: IN
32285: NOT
32286: OR
32287: IFFALSE 32291
// exit ;
32289: GO 33400
// nat := GetNation ( tower ) ;
32291: LD_ADDR_VAR 0 12
32295: PUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 248
32305: ST_TO_ADDR
// side := GetSide ( tower ) ;
32306: LD_ADDR_VAR 0 16
32310: PUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 255
32320: ST_TO_ADDR
// x := GetX ( tower ) ;
32321: LD_ADDR_VAR 0 10
32325: PUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 250
32335: ST_TO_ADDR
// y := GetY ( tower ) ;
32336: LD_ADDR_VAR 0 11
32340: PUSH
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL_OW 251
32350: ST_TO_ADDR
// if not x or not y then
32351: LD_VAR 0 10
32355: NOT
32356: PUSH
32357: LD_VAR 0 11
32361: NOT
32362: OR
32363: IFFALSE 32367
// exit ;
32365: GO 33400
// weapon := 0 ;
32367: LD_ADDR_VAR 0 18
32371: PUSH
32372: LD_INT 0
32374: ST_TO_ADDR
// fac_list := [ ] ;
32375: LD_ADDR_VAR 0 17
32379: PUSH
32380: EMPTY
32381: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32382: LD_ADDR_VAR 0 6
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 274
32396: PPUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: LD_INT 0
32404: PPUSH
32405: CALL 29971 0 3
32409: PPUSH
32410: LD_INT 30
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 72
32424: ST_TO_ADDR
// if not factories then
32425: LD_VAR 0 6
32429: NOT
32430: IFFALSE 32434
// exit ;
32432: GO 33400
// for i in factories do
32434: LD_ADDR_VAR 0 8
32438: PUSH
32439: LD_VAR 0 6
32443: PUSH
32444: FOR_IN
32445: IFFALSE 32470
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32447: LD_ADDR_VAR 0 17
32451: PUSH
32452: LD_VAR 0 17
32456: PUSH
32457: LD_VAR 0 8
32461: PPUSH
32462: CALL_OW 478
32466: UNION
32467: ST_TO_ADDR
32468: GO 32444
32470: POP
32471: POP
// if not fac_list then
32472: LD_VAR 0 17
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 33400
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_INT 4
32488: PUSH
32489: LD_INT 5
32491: PUSH
32492: LD_INT 9
32494: PUSH
32495: LD_INT 10
32497: PUSH
32498: LD_INT 6
32500: PUSH
32501: LD_INT 7
32503: PUSH
32504: LD_INT 11
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 27
32518: PUSH
32519: LD_INT 28
32521: PUSH
32522: LD_INT 26
32524: PUSH
32525: LD_INT 30
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 43
32536: PUSH
32537: LD_INT 44
32539: PUSH
32540: LD_INT 46
32542: PUSH
32543: LD_INT 45
32545: PUSH
32546: LD_INT 47
32548: PUSH
32549: LD_INT 49
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: PUSH
32565: LD_VAR 0 12
32569: ARRAY
32570: ST_TO_ADDR
// list := list isect fac_list ;
32571: LD_ADDR_VAR 0 5
32575: PUSH
32576: LD_VAR 0 5
32580: PUSH
32581: LD_VAR 0 17
32585: ISECT
32586: ST_TO_ADDR
// if not list then
32587: LD_VAR 0 5
32591: NOT
32592: IFFALSE 32596
// exit ;
32594: GO 33400
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32596: LD_VAR 0 12
32600: PUSH
32601: LD_INT 3
32603: EQUAL
32604: PUSH
32605: LD_INT 49
32607: PUSH
32608: LD_VAR 0 5
32612: IN
32613: AND
32614: PUSH
32615: LD_INT 31
32617: PPUSH
32618: LD_VAR 0 16
32622: PPUSH
32623: CALL_OW 321
32627: PUSH
32628: LD_INT 2
32630: EQUAL
32631: AND
32632: IFFALSE 32692
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32634: LD_INT 22
32636: PUSH
32637: LD_VAR 0 16
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 35
32648: PUSH
32649: LD_INT 49
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 91
32658: PUSH
32659: LD_VAR 0 1
32663: PUSH
32664: LD_INT 10
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: PPUSH
32677: CALL_OW 69
32681: NOT
32682: IFFALSE 32692
// weapon := ru_time_lapser ;
32684: LD_ADDR_VAR 0 18
32688: PUSH
32689: LD_INT 49
32691: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32692: LD_VAR 0 12
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: IN
32707: PUSH
32708: LD_INT 11
32710: PUSH
32711: LD_VAR 0 5
32715: IN
32716: PUSH
32717: LD_INT 30
32719: PUSH
32720: LD_VAR 0 5
32724: IN
32725: OR
32726: AND
32727: PUSH
32728: LD_INT 6
32730: PPUSH
32731: LD_VAR 0 16
32735: PPUSH
32736: CALL_OW 321
32740: PUSH
32741: LD_INT 2
32743: EQUAL
32744: AND
32745: IFFALSE 32910
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32747: LD_INT 22
32749: PUSH
32750: LD_VAR 0 16
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 35
32764: PUSH
32765: LD_INT 11
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 35
32774: PUSH
32775: LD_INT 30
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 91
32789: PUSH
32790: LD_VAR 0 1
32794: PUSH
32795: LD_INT 18
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: PPUSH
32808: CALL_OW 69
32812: NOT
32813: PUSH
32814: LD_INT 22
32816: PUSH
32817: LD_VAR 0 16
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 30
32831: PUSH
32832: LD_INT 32
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 30
32841: PUSH
32842: LD_INT 33
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 91
32856: PUSH
32857: LD_VAR 0 1
32861: PUSH
32862: LD_INT 12
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: PPUSH
32878: CALL_OW 69
32882: PUSH
32883: LD_INT 2
32885: GREATER
32886: AND
32887: IFFALSE 32910
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32889: LD_ADDR_VAR 0 18
32893: PUSH
32894: LD_INT 11
32896: PUSH
32897: LD_INT 30
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_VAR 0 12
32908: ARRAY
32909: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32910: LD_VAR 0 18
32914: NOT
32915: PUSH
32916: LD_INT 40
32918: PPUSH
32919: LD_VAR 0 16
32923: PPUSH
32924: CALL_OW 321
32928: PUSH
32929: LD_INT 2
32931: EQUAL
32932: AND
32933: PUSH
32934: LD_INT 7
32936: PUSH
32937: LD_VAR 0 5
32941: IN
32942: PUSH
32943: LD_INT 28
32945: PUSH
32946: LD_VAR 0 5
32950: IN
32951: OR
32952: PUSH
32953: LD_INT 45
32955: PUSH
32956: LD_VAR 0 5
32960: IN
32961: OR
32962: AND
32963: IFFALSE 33217
// begin hex := GetHexInfo ( x , y ) ;
32965: LD_ADDR_VAR 0 4
32969: PUSH
32970: LD_VAR 0 10
32974: PPUSH
32975: LD_VAR 0 11
32979: PPUSH
32980: CALL_OW 546
32984: ST_TO_ADDR
// if hex [ 1 ] then
32985: LD_VAR 0 4
32989: PUSH
32990: LD_INT 1
32992: ARRAY
32993: IFFALSE 32997
// exit ;
32995: GO 33400
// height := hex [ 2 ] ;
32997: LD_ADDR_VAR 0 15
33001: PUSH
33002: LD_VAR 0 4
33006: PUSH
33007: LD_INT 2
33009: ARRAY
33010: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33011: LD_ADDR_VAR 0 14
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: LD_INT 5
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: ST_TO_ADDR
// for i in tmp do
33034: LD_ADDR_VAR 0 8
33038: PUSH
33039: LD_VAR 0 14
33043: PUSH
33044: FOR_IN
33045: IFFALSE 33215
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33047: LD_ADDR_VAR 0 9
33051: PUSH
33052: LD_VAR 0 10
33056: PPUSH
33057: LD_VAR 0 8
33061: PPUSH
33062: LD_INT 5
33064: PPUSH
33065: CALL_OW 272
33069: PUSH
33070: LD_VAR 0 11
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_INT 5
33082: PPUSH
33083: CALL_OW 273
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33092: LD_VAR 0 9
33096: PUSH
33097: LD_INT 1
33099: ARRAY
33100: PPUSH
33101: LD_VAR 0 9
33105: PUSH
33106: LD_INT 2
33108: ARRAY
33109: PPUSH
33110: CALL_OW 488
33114: IFFALSE 33213
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: LD_VAR 0 9
33125: PUSH
33126: LD_INT 1
33128: ARRAY
33129: PPUSH
33130: LD_VAR 0 9
33134: PUSH
33135: LD_INT 2
33137: ARRAY
33138: PPUSH
33139: CALL_OW 546
33143: ST_TO_ADDR
// if hex [ 1 ] then
33144: LD_VAR 0 4
33148: PUSH
33149: LD_INT 1
33151: ARRAY
33152: IFFALSE 33156
// continue ;
33154: GO 33044
// h := hex [ 2 ] ;
33156: LD_ADDR_VAR 0 13
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: ST_TO_ADDR
// if h + 7 < height then
33170: LD_VAR 0 13
33174: PUSH
33175: LD_INT 7
33177: PLUS
33178: PUSH
33179: LD_VAR 0 15
33183: LESS
33184: IFFALSE 33213
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33186: LD_ADDR_VAR 0 18
33190: PUSH
33191: LD_INT 7
33193: PUSH
33194: LD_INT 28
33196: PUSH
33197: LD_INT 45
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: PUSH
33205: LD_VAR 0 12
33209: ARRAY
33210: ST_TO_ADDR
// break ;
33211: GO 33215
// end ; end ; end ;
33213: GO 33044
33215: POP
33216: POP
// end ; if not weapon then
33217: LD_VAR 0 18
33221: NOT
33222: IFFALSE 33282
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33224: LD_ADDR_VAR 0 5
33228: PUSH
33229: LD_VAR 0 5
33233: PUSH
33234: LD_INT 11
33236: PUSH
33237: LD_INT 30
33239: PUSH
33240: LD_INT 49
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: DIFF
33248: ST_TO_ADDR
// if not list then
33249: LD_VAR 0 5
33253: NOT
33254: IFFALSE 33258
// exit ;
33256: GO 33400
// weapon := list [ rand ( 1 , list ) ] ;
33258: LD_ADDR_VAR 0 18
33262: PUSH
33263: LD_VAR 0 5
33267: PUSH
33268: LD_INT 1
33270: PPUSH
33271: LD_VAR 0 5
33275: PPUSH
33276: CALL_OW 12
33280: ARRAY
33281: ST_TO_ADDR
// end ; if weapon then
33282: LD_VAR 0 18
33286: IFFALSE 33400
// begin tmp := CostOfWeapon ( weapon ) ;
33288: LD_ADDR_VAR 0 14
33292: PUSH
33293: LD_VAR 0 18
33297: PPUSH
33298: CALL_OW 451
33302: ST_TO_ADDR
// j := GetBase ( tower ) ;
33303: LD_ADDR_VAR 0 9
33307: PUSH
33308: LD_VAR 0 1
33312: PPUSH
33313: CALL_OW 274
33317: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33318: LD_VAR 0 9
33322: PPUSH
33323: LD_INT 1
33325: PPUSH
33326: CALL_OW 275
33330: PUSH
33331: LD_VAR 0 14
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: GREATEREQUAL
33340: PUSH
33341: LD_VAR 0 9
33345: PPUSH
33346: LD_INT 2
33348: PPUSH
33349: CALL_OW 275
33353: PUSH
33354: LD_VAR 0 14
33358: PUSH
33359: LD_INT 2
33361: ARRAY
33362: GREATEREQUAL
33363: AND
33364: PUSH
33365: LD_VAR 0 9
33369: PPUSH
33370: LD_INT 3
33372: PPUSH
33373: CALL_OW 275
33377: PUSH
33378: LD_VAR 0 14
33382: PUSH
33383: LD_INT 3
33385: ARRAY
33386: GREATEREQUAL
33387: AND
33388: IFFALSE 33400
// result := weapon ;
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_VAR 0 18
33399: ST_TO_ADDR
// end ; end ;
33400: LD_VAR 0 3
33404: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33405: LD_INT 0
33407: PPUSH
33408: PPUSH
// result := true ;
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_INT 1
33416: ST_TO_ADDR
// if array1 = array2 then
33417: LD_VAR 0 1
33421: PUSH
33422: LD_VAR 0 2
33426: EQUAL
33427: IFFALSE 33487
// begin for i = 1 to array1 do
33429: LD_ADDR_VAR 0 4
33433: PUSH
33434: DOUBLE
33435: LD_INT 1
33437: DEC
33438: ST_TO_ADDR
33439: LD_VAR 0 1
33443: PUSH
33444: FOR_TO
33445: IFFALSE 33483
// if array1 [ i ] <> array2 [ i ] then
33447: LD_VAR 0 1
33451: PUSH
33452: LD_VAR 0 4
33456: ARRAY
33457: PUSH
33458: LD_VAR 0 2
33462: PUSH
33463: LD_VAR 0 4
33467: ARRAY
33468: NONEQUAL
33469: IFFALSE 33481
// begin result := false ;
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 0
33478: ST_TO_ADDR
// break ;
33479: GO 33483
// end ;
33481: GO 33444
33483: POP
33484: POP
// end else
33485: GO 33495
// result := false ;
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: LD_INT 0
33494: ST_TO_ADDR
// end ;
33495: LD_VAR 0 3
33499: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33500: LD_INT 0
33502: PPUSH
33503: PPUSH
// if not array1 or not array2 then
33504: LD_VAR 0 1
33508: NOT
33509: PUSH
33510: LD_VAR 0 2
33514: NOT
33515: OR
33516: IFFALSE 33520
// exit ;
33518: GO 33584
// result := true ;
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 1
33527: ST_TO_ADDR
// for i = 1 to array1 do
33528: LD_ADDR_VAR 0 4
33532: PUSH
33533: DOUBLE
33534: LD_INT 1
33536: DEC
33537: ST_TO_ADDR
33538: LD_VAR 0 1
33542: PUSH
33543: FOR_TO
33544: IFFALSE 33582
// if array1 [ i ] <> array2 [ i ] then
33546: LD_VAR 0 1
33550: PUSH
33551: LD_VAR 0 4
33555: ARRAY
33556: PUSH
33557: LD_VAR 0 2
33561: PUSH
33562: LD_VAR 0 4
33566: ARRAY
33567: NONEQUAL
33568: IFFALSE 33580
// begin result := false ;
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: LD_INT 0
33577: ST_TO_ADDR
// break ;
33578: GO 33582
// end ;
33580: GO 33543
33582: POP
33583: POP
// end ;
33584: LD_VAR 0 3
33588: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
33593: PPUSH
// pom := GetBase ( fac ) ;
33594: LD_ADDR_VAR 0 5
33598: PUSH
33599: LD_VAR 0 1
33603: PPUSH
33604: CALL_OW 274
33608: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33609: LD_ADDR_VAR 0 4
33613: PUSH
33614: LD_VAR 0 2
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PPUSH
33623: LD_VAR 0 2
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: LD_VAR 0 2
33636: PUSH
33637: LD_INT 3
33639: ARRAY
33640: PPUSH
33641: LD_VAR 0 2
33645: PUSH
33646: LD_INT 4
33648: ARRAY
33649: PPUSH
33650: CALL_OW 449
33654: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_VAR 0 5
33664: PPUSH
33665: LD_INT 1
33667: PPUSH
33668: CALL_OW 275
33672: PUSH
33673: LD_VAR 0 4
33677: PUSH
33678: LD_INT 1
33680: ARRAY
33681: GREATEREQUAL
33682: PUSH
33683: LD_VAR 0 5
33687: PPUSH
33688: LD_INT 2
33690: PPUSH
33691: CALL_OW 275
33695: PUSH
33696: LD_VAR 0 4
33700: PUSH
33701: LD_INT 2
33703: ARRAY
33704: GREATEREQUAL
33705: AND
33706: PUSH
33707: LD_VAR 0 5
33711: PPUSH
33712: LD_INT 3
33714: PPUSH
33715: CALL_OW 275
33719: PUSH
33720: LD_VAR 0 4
33724: PUSH
33725: LD_INT 3
33727: ARRAY
33728: GREATEREQUAL
33729: AND
33730: ST_TO_ADDR
// end ;
33731: LD_VAR 0 3
33735: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
// pom := GetBase ( building ) ;
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: CALL_OW 274
33756: ST_TO_ADDR
// if not pom then
33757: LD_VAR 0 3
33761: NOT
33762: IFFALSE 33766
// exit ;
33764: GO 33936
// btype := GetBType ( building ) ;
33766: LD_ADDR_VAR 0 5
33770: PUSH
33771: LD_VAR 0 1
33775: PPUSH
33776: CALL_OW 266
33780: ST_TO_ADDR
// if btype = b_armoury then
33781: LD_VAR 0 5
33785: PUSH
33786: LD_INT 4
33788: EQUAL
33789: IFFALSE 33799
// btype := b_barracks ;
33791: LD_ADDR_VAR 0 5
33795: PUSH
33796: LD_INT 5
33798: ST_TO_ADDR
// if btype = b_depot then
33799: LD_VAR 0 5
33803: PUSH
33804: LD_INT 0
33806: EQUAL
33807: IFFALSE 33817
// btype := b_warehouse ;
33809: LD_ADDR_VAR 0 5
33813: PUSH
33814: LD_INT 1
33816: ST_TO_ADDR
// if btype = b_workshop then
33817: LD_VAR 0 5
33821: PUSH
33822: LD_INT 2
33824: EQUAL
33825: IFFALSE 33835
// btype := b_factory ;
33827: LD_ADDR_VAR 0 5
33831: PUSH
33832: LD_INT 3
33834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33835: LD_ADDR_VAR 0 4
33839: PUSH
33840: LD_VAR 0 5
33844: PPUSH
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 248
33854: PPUSH
33855: CALL_OW 450
33859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33860: LD_ADDR_VAR 0 2
33864: PUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: LD_INT 1
33872: PPUSH
33873: CALL_OW 275
33877: PUSH
33878: LD_VAR 0 4
33882: PUSH
33883: LD_INT 1
33885: ARRAY
33886: GREATEREQUAL
33887: PUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: LD_INT 2
33895: PPUSH
33896: CALL_OW 275
33900: PUSH
33901: LD_VAR 0 4
33905: PUSH
33906: LD_INT 2
33908: ARRAY
33909: GREATEREQUAL
33910: AND
33911: PUSH
33912: LD_VAR 0 3
33916: PPUSH
33917: LD_INT 3
33919: PPUSH
33920: CALL_OW 275
33924: PUSH
33925: LD_VAR 0 4
33929: PUSH
33930: LD_INT 3
33932: ARRAY
33933: GREATEREQUAL
33934: AND
33935: ST_TO_ADDR
// end ;
33936: LD_VAR 0 2
33940: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33941: LD_INT 0
33943: PPUSH
33944: PPUSH
33945: PPUSH
// pom := GetBase ( building ) ;
33946: LD_ADDR_VAR 0 4
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 274
33960: ST_TO_ADDR
// if not pom then
33961: LD_VAR 0 4
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 34071
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33970: LD_ADDR_VAR 0 5
33974: PUSH
33975: LD_VAR 0 2
33979: PPUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 248
33989: PPUSH
33990: CALL_OW 450
33994: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_VAR 0 4
34004: PPUSH
34005: LD_INT 1
34007: PPUSH
34008: CALL_OW 275
34012: PUSH
34013: LD_VAR 0 5
34017: PUSH
34018: LD_INT 1
34020: ARRAY
34021: GREATEREQUAL
34022: PUSH
34023: LD_VAR 0 4
34027: PPUSH
34028: LD_INT 2
34030: PPUSH
34031: CALL_OW 275
34035: PUSH
34036: LD_VAR 0 5
34040: PUSH
34041: LD_INT 2
34043: ARRAY
34044: GREATEREQUAL
34045: AND
34046: PUSH
34047: LD_VAR 0 4
34051: PPUSH
34052: LD_INT 3
34054: PPUSH
34055: CALL_OW 275
34059: PUSH
34060: LD_VAR 0 5
34064: PUSH
34065: LD_INT 3
34067: ARRAY
34068: GREATEREQUAL
34069: AND
34070: ST_TO_ADDR
// end ;
34071: LD_VAR 0 3
34075: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34076: LD_INT 0
34078: PPUSH
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
// result := false ;
34089: LD_ADDR_VAR 0 8
34093: PUSH
34094: LD_INT 0
34096: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34097: LD_VAR 0 5
34101: NOT
34102: PUSH
34103: LD_VAR 0 1
34107: NOT
34108: OR
34109: PUSH
34110: LD_VAR 0 2
34114: NOT
34115: OR
34116: PUSH
34117: LD_VAR 0 3
34121: NOT
34122: OR
34123: IFFALSE 34127
// exit ;
34125: GO 34941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34127: LD_ADDR_VAR 0 14
34131: PUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: LD_VAR 0 2
34141: PPUSH
34142: LD_VAR 0 3
34146: PPUSH
34147: LD_VAR 0 4
34151: PPUSH
34152: LD_VAR 0 5
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: PPUSH
34161: CALL_OW 248
34165: PPUSH
34166: LD_INT 0
34168: PPUSH
34169: CALL 36178 0 6
34173: ST_TO_ADDR
// if not hexes then
34174: LD_VAR 0 14
34178: NOT
34179: IFFALSE 34183
// exit ;
34181: GO 34941
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34183: LD_ADDR_VAR 0 17
34187: PUSH
34188: LD_VAR 0 5
34192: PPUSH
34193: LD_INT 22
34195: PUSH
34196: LD_VAR 0 13
34200: PPUSH
34201: CALL_OW 255
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: LD_INT 30
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 30
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PPUSH
34242: CALL_OW 72
34246: ST_TO_ADDR
// for i = 1 to hexes do
34247: LD_ADDR_VAR 0 9
34251: PUSH
34252: DOUBLE
34253: LD_INT 1
34255: DEC
34256: ST_TO_ADDR
34257: LD_VAR 0 14
34261: PUSH
34262: FOR_TO
34263: IFFALSE 34939
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34265: LD_ADDR_VAR 0 13
34269: PUSH
34270: LD_VAR 0 14
34274: PUSH
34275: LD_VAR 0 9
34279: ARRAY
34280: PUSH
34281: LD_INT 1
34283: ARRAY
34284: PPUSH
34285: LD_VAR 0 14
34289: PUSH
34290: LD_VAR 0 9
34294: ARRAY
34295: PUSH
34296: LD_INT 2
34298: ARRAY
34299: PPUSH
34300: CALL_OW 428
34304: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34305: LD_VAR 0 14
34309: PUSH
34310: LD_VAR 0 9
34314: ARRAY
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 14
34324: PUSH
34325: LD_VAR 0 9
34329: ARRAY
34330: PUSH
34331: LD_INT 2
34333: ARRAY
34334: PPUSH
34335: CALL_OW 351
34339: PUSH
34340: LD_VAR 0 14
34344: PUSH
34345: LD_VAR 0 9
34349: ARRAY
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: LD_VAR 0 14
34359: PUSH
34360: LD_VAR 0 9
34364: ARRAY
34365: PUSH
34366: LD_INT 2
34368: ARRAY
34369: PPUSH
34370: CALL_OW 488
34374: NOT
34375: OR
34376: PUSH
34377: LD_VAR 0 13
34381: PPUSH
34382: CALL_OW 247
34386: PUSH
34387: LD_INT 3
34389: EQUAL
34390: OR
34391: IFFALSE 34397
// exit ;
34393: POP
34394: POP
34395: GO 34941
// if not tmp then
34397: LD_VAR 0 13
34401: NOT
34402: IFFALSE 34406
// continue ;
34404: GO 34262
// result := true ;
34406: LD_ADDR_VAR 0 8
34410: PUSH
34411: LD_INT 1
34413: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34414: LD_VAR 0 6
34418: PUSH
34419: LD_VAR 0 13
34423: PPUSH
34424: CALL_OW 247
34428: PUSH
34429: LD_INT 2
34431: EQUAL
34432: AND
34433: PUSH
34434: LD_VAR 0 13
34438: PPUSH
34439: CALL_OW 263
34443: PUSH
34444: LD_INT 1
34446: EQUAL
34447: AND
34448: IFFALSE 34612
// begin if IsDrivenBy ( tmp ) then
34450: LD_VAR 0 13
34454: PPUSH
34455: CALL_OW 311
34459: IFFALSE 34463
// continue ;
34461: GO 34262
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34463: LD_VAR 0 6
34467: PPUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 60
34473: PUSH
34474: EMPTY
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 55
34486: PUSH
34487: EMPTY
34488: LIST
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PPUSH
34498: CALL_OW 72
34502: IFFALSE 34610
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34504: LD_ADDR_VAR 0 18
34508: PUSH
34509: LD_VAR 0 6
34513: PPUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 60
34519: PUSH
34520: EMPTY
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 55
34532: PUSH
34533: EMPTY
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 72
34548: PUSH
34549: LD_INT 1
34551: ARRAY
34552: ST_TO_ADDR
// if IsInUnit ( driver ) then
34553: LD_VAR 0 18
34557: PPUSH
34558: CALL_OW 310
34562: IFFALSE 34573
// ComExit ( driver ) ;
34564: LD_VAR 0 18
34568: PPUSH
34569: CALL 59883 0 1
// AddComEnterUnit ( driver , tmp ) ;
34573: LD_VAR 0 18
34577: PPUSH
34578: LD_VAR 0 13
34582: PPUSH
34583: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34587: LD_VAR 0 18
34591: PPUSH
34592: LD_VAR 0 7
34596: PPUSH
34597: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34601: LD_VAR 0 18
34605: PPUSH
34606: CALL_OW 181
// end ; continue ;
34610: GO 34262
// end ; if not cleaners or not tmp in cleaners then
34612: LD_VAR 0 6
34616: NOT
34617: PUSH
34618: LD_VAR 0 13
34622: PUSH
34623: LD_VAR 0 6
34627: IN
34628: NOT
34629: OR
34630: IFFALSE 34937
// begin if dep then
34632: LD_VAR 0 17
34636: IFFALSE 34772
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34638: LD_ADDR_VAR 0 16
34642: PUSH
34643: LD_VAR 0 17
34647: PUSH
34648: LD_INT 1
34650: ARRAY
34651: PPUSH
34652: CALL_OW 250
34656: PPUSH
34657: LD_VAR 0 17
34661: PUSH
34662: LD_INT 1
34664: ARRAY
34665: PPUSH
34666: CALL_OW 254
34670: PPUSH
34671: LD_INT 5
34673: PPUSH
34674: CALL_OW 272
34678: PUSH
34679: LD_VAR 0 17
34683: PUSH
34684: LD_INT 1
34686: ARRAY
34687: PPUSH
34688: CALL_OW 251
34692: PPUSH
34693: LD_VAR 0 17
34697: PUSH
34698: LD_INT 1
34700: ARRAY
34701: PPUSH
34702: CALL_OW 254
34706: PPUSH
34707: LD_INT 5
34709: PPUSH
34710: CALL_OW 273
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34719: LD_VAR 0 16
34723: PUSH
34724: LD_INT 1
34726: ARRAY
34727: PPUSH
34728: LD_VAR 0 16
34732: PUSH
34733: LD_INT 2
34735: ARRAY
34736: PPUSH
34737: CALL_OW 488
34741: IFFALSE 34772
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34743: LD_VAR 0 13
34747: PPUSH
34748: LD_VAR 0 16
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: PPUSH
34757: LD_VAR 0 16
34761: PUSH
34762: LD_INT 2
34764: ARRAY
34765: PPUSH
34766: CALL_OW 111
// continue ;
34770: GO 34262
// end ; end ; r := GetDir ( tmp ) ;
34772: LD_ADDR_VAR 0 15
34776: PUSH
34777: LD_VAR 0 13
34781: PPUSH
34782: CALL_OW 254
34786: ST_TO_ADDR
// if r = 5 then
34787: LD_VAR 0 15
34791: PUSH
34792: LD_INT 5
34794: EQUAL
34795: IFFALSE 34805
// r := 0 ;
34797: LD_ADDR_VAR 0 15
34801: PUSH
34802: LD_INT 0
34804: ST_TO_ADDR
// for j = r to 5 do
34805: LD_ADDR_VAR 0 10
34809: PUSH
34810: DOUBLE
34811: LD_VAR 0 15
34815: DEC
34816: ST_TO_ADDR
34817: LD_INT 5
34819: PUSH
34820: FOR_TO
34821: IFFALSE 34935
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34823: LD_ADDR_VAR 0 11
34827: PUSH
34828: LD_VAR 0 13
34832: PPUSH
34833: CALL_OW 250
34837: PPUSH
34838: LD_VAR 0 10
34842: PPUSH
34843: LD_INT 2
34845: PPUSH
34846: CALL_OW 272
34850: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34851: LD_ADDR_VAR 0 12
34855: PUSH
34856: LD_VAR 0 13
34860: PPUSH
34861: CALL_OW 251
34865: PPUSH
34866: LD_VAR 0 10
34870: PPUSH
34871: LD_INT 2
34873: PPUSH
34874: CALL_OW 273
34878: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34879: LD_VAR 0 11
34883: PPUSH
34884: LD_VAR 0 12
34888: PPUSH
34889: CALL_OW 488
34893: PUSH
34894: LD_VAR 0 11
34898: PPUSH
34899: LD_VAR 0 12
34903: PPUSH
34904: CALL_OW 428
34908: NOT
34909: AND
34910: IFFALSE 34933
// begin ComMoveXY ( tmp , _x , _y ) ;
34912: LD_VAR 0 13
34916: PPUSH
34917: LD_VAR 0 11
34921: PPUSH
34922: LD_VAR 0 12
34926: PPUSH
34927: CALL_OW 111
// break ;
34931: GO 34935
// end ; end ;
34933: GO 34820
34935: POP
34936: POP
// end ; end ;
34937: GO 34262
34939: POP
34940: POP
// end ;
34941: LD_VAR 0 8
34945: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34946: LD_INT 0
34948: PPUSH
// result := true ;
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_INT 1
34956: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34957: LD_VAR 0 2
34961: PUSH
34962: LD_INT 24
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34976
34968: LD_INT 33
34970: DOUBLE
34971: EQUAL
34972: IFTRUE 34976
34974: GO 35001
34976: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34977: LD_ADDR_VAR 0 3
34981: PUSH
34982: LD_INT 32
34984: PPUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 321
34994: PUSH
34995: LD_INT 2
34997: EQUAL
34998: ST_TO_ADDR
34999: GO 35321
35001: LD_INT 20
35003: DOUBLE
35004: EQUAL
35005: IFTRUE 35009
35007: GO 35034
35009: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 6
35017: PPUSH
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL_OW 321
35027: PUSH
35028: LD_INT 2
35030: EQUAL
35031: ST_TO_ADDR
35032: GO 35321
35034: LD_INT 22
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35048
35040: LD_INT 36
35042: DOUBLE
35043: EQUAL
35044: IFTRUE 35048
35046: GO 35073
35048: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35049: LD_ADDR_VAR 0 3
35053: PUSH
35054: LD_INT 15
35056: PPUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 321
35066: PUSH
35067: LD_INT 2
35069: EQUAL
35070: ST_TO_ADDR
35071: GO 35321
35073: LD_INT 30
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35081
35079: GO 35106
35081: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_INT 20
35089: PPUSH
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 321
35099: PUSH
35100: LD_INT 2
35102: EQUAL
35103: ST_TO_ADDR
35104: GO 35321
35106: LD_INT 28
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35120
35112: LD_INT 21
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35120
35118: GO 35145
35120: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35121: LD_ADDR_VAR 0 3
35125: PUSH
35126: LD_INT 21
35128: PPUSH
35129: LD_VAR 0 1
35133: PPUSH
35134: CALL_OW 321
35138: PUSH
35139: LD_INT 2
35141: EQUAL
35142: ST_TO_ADDR
35143: GO 35321
35145: LD_INT 16
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35180
35153: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_EXP 91
35163: PPUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 321
35173: PUSH
35174: LD_INT 2
35176: EQUAL
35177: ST_TO_ADDR
35178: GO 35321
35180: LD_INT 19
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35194
35186: LD_INT 23
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35221
35194: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35195: LD_ADDR_VAR 0 3
35199: PUSH
35200: LD_EXP 90
35204: PPUSH
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 321
35214: PUSH
35215: LD_INT 2
35217: EQUAL
35218: ST_TO_ADDR
35219: GO 35321
35221: LD_INT 17
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35229
35227: GO 35254
35229: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35230: LD_ADDR_VAR 0 3
35234: PUSH
35235: LD_INT 39
35237: PPUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 321
35247: PUSH
35248: LD_INT 2
35250: EQUAL
35251: ST_TO_ADDR
35252: GO 35321
35254: LD_INT 18
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35262
35260: GO 35287
35262: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35263: LD_ADDR_VAR 0 3
35267: PUSH
35268: LD_INT 40
35270: PPUSH
35271: LD_VAR 0 1
35275: PPUSH
35276: CALL_OW 321
35280: PUSH
35281: LD_INT 2
35283: EQUAL
35284: ST_TO_ADDR
35285: GO 35321
35287: LD_INT 27
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35320
35295: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 35
35303: PPUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 321
35313: PUSH
35314: LD_INT 2
35316: EQUAL
35317: ST_TO_ADDR
35318: GO 35321
35320: POP
// end ;
35321: LD_VAR 0 3
35325: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35326: LD_INT 0
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
// result := false ;
35339: LD_ADDR_VAR 0 6
35343: PUSH
35344: LD_INT 0
35346: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35347: LD_VAR 0 1
35351: NOT
35352: PUSH
35353: LD_VAR 0 1
35357: PPUSH
35358: CALL_OW 266
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: IN
35373: NOT
35374: OR
35375: PUSH
35376: LD_VAR 0 2
35380: NOT
35381: OR
35382: PUSH
35383: LD_VAR 0 5
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 4
35402: PUSH
35403: LD_INT 5
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: IN
35414: NOT
35415: OR
35416: PUSH
35417: LD_VAR 0 3
35421: PPUSH
35422: LD_VAR 0 4
35426: PPUSH
35427: CALL_OW 488
35431: NOT
35432: OR
35433: IFFALSE 35437
// exit ;
35435: GO 36173
// side := GetSide ( depot ) ;
35437: LD_ADDR_VAR 0 9
35441: PUSH
35442: LD_VAR 0 1
35446: PPUSH
35447: CALL_OW 255
35451: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35452: LD_VAR 0 9
35456: PPUSH
35457: LD_VAR 0 2
35461: PPUSH
35462: CALL 34946 0 2
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 36173
// pom := GetBase ( depot ) ;
35471: LD_ADDR_VAR 0 10
35475: PUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 274
35485: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35486: LD_ADDR_VAR 0 11
35490: PUSH
35491: LD_VAR 0 2
35495: PPUSH
35496: LD_VAR 0 1
35500: PPUSH
35501: CALL_OW 248
35505: PPUSH
35506: CALL_OW 450
35510: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35511: LD_VAR 0 10
35515: PPUSH
35516: LD_INT 1
35518: PPUSH
35519: CALL_OW 275
35523: PUSH
35524: LD_VAR 0 11
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: GREATEREQUAL
35533: PUSH
35534: LD_VAR 0 10
35538: PPUSH
35539: LD_INT 2
35541: PPUSH
35542: CALL_OW 275
35546: PUSH
35547: LD_VAR 0 11
35551: PUSH
35552: LD_INT 2
35554: ARRAY
35555: GREATEREQUAL
35556: AND
35557: PUSH
35558: LD_VAR 0 10
35562: PPUSH
35563: LD_INT 3
35565: PPUSH
35566: CALL_OW 275
35570: PUSH
35571: LD_VAR 0 11
35575: PUSH
35576: LD_INT 3
35578: ARRAY
35579: GREATEREQUAL
35580: AND
35581: NOT
35582: IFFALSE 35586
// exit ;
35584: GO 36173
// if GetBType ( depot ) = b_depot then
35586: LD_VAR 0 1
35590: PPUSH
35591: CALL_OW 266
35595: PUSH
35596: LD_INT 0
35598: EQUAL
35599: IFFALSE 35611
// dist := 28 else
35601: LD_ADDR_VAR 0 14
35605: PUSH
35606: LD_INT 28
35608: ST_TO_ADDR
35609: GO 35619
// dist := 36 ;
35611: LD_ADDR_VAR 0 14
35615: PUSH
35616: LD_INT 36
35618: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35619: LD_VAR 0 1
35623: PPUSH
35624: LD_VAR 0 3
35628: PPUSH
35629: LD_VAR 0 4
35633: PPUSH
35634: CALL_OW 297
35638: PUSH
35639: LD_VAR 0 14
35643: GREATER
35644: IFFALSE 35648
// exit ;
35646: GO 36173
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35648: LD_ADDR_VAR 0 12
35652: PUSH
35653: LD_VAR 0 2
35657: PPUSH
35658: LD_VAR 0 3
35662: PPUSH
35663: LD_VAR 0 4
35667: PPUSH
35668: LD_VAR 0 5
35672: PPUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 248
35682: PPUSH
35683: LD_INT 0
35685: PPUSH
35686: CALL 36178 0 6
35690: ST_TO_ADDR
// if not hexes then
35691: LD_VAR 0 12
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 36173
// hex := GetHexInfo ( x , y ) ;
35700: LD_ADDR_VAR 0 15
35704: PUSH
35705: LD_VAR 0 3
35709: PPUSH
35710: LD_VAR 0 4
35714: PPUSH
35715: CALL_OW 546
35719: ST_TO_ADDR
// if hex [ 1 ] then
35720: LD_VAR 0 15
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: IFFALSE 35732
// exit ;
35730: GO 36173
// height := hex [ 2 ] ;
35732: LD_ADDR_VAR 0 13
35736: PUSH
35737: LD_VAR 0 15
35741: PUSH
35742: LD_INT 2
35744: ARRAY
35745: ST_TO_ADDR
// for i = 1 to hexes do
35746: LD_ADDR_VAR 0 7
35750: PUSH
35751: DOUBLE
35752: LD_INT 1
35754: DEC
35755: ST_TO_ADDR
35756: LD_VAR 0 12
35760: PUSH
35761: FOR_TO
35762: IFFALSE 36092
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35764: LD_VAR 0 12
35768: PUSH
35769: LD_VAR 0 7
35773: ARRAY
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: PPUSH
35779: LD_VAR 0 12
35783: PUSH
35784: LD_VAR 0 7
35788: ARRAY
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: PPUSH
35794: CALL_OW 488
35798: NOT
35799: PUSH
35800: LD_VAR 0 12
35804: PUSH
35805: LD_VAR 0 7
35809: ARRAY
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: LD_VAR 0 12
35819: PUSH
35820: LD_VAR 0 7
35824: ARRAY
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: PPUSH
35830: CALL_OW 428
35834: PUSH
35835: LD_INT 0
35837: GREATER
35838: OR
35839: PUSH
35840: LD_VAR 0 12
35844: PUSH
35845: LD_VAR 0 7
35849: ARRAY
35850: PUSH
35851: LD_INT 1
35853: ARRAY
35854: PPUSH
35855: LD_VAR 0 12
35859: PUSH
35860: LD_VAR 0 7
35864: ARRAY
35865: PUSH
35866: LD_INT 2
35868: ARRAY
35869: PPUSH
35870: CALL_OW 351
35874: OR
35875: IFFALSE 35881
// exit ;
35877: POP
35878: POP
35879: GO 36173
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35881: LD_ADDR_VAR 0 8
35885: PUSH
35886: LD_VAR 0 12
35890: PUSH
35891: LD_VAR 0 7
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: LD_VAR 0 12
35905: PUSH
35906: LD_VAR 0 7
35910: ARRAY
35911: PUSH
35912: LD_INT 2
35914: ARRAY
35915: PPUSH
35916: CALL_OW 546
35920: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35921: LD_VAR 0 8
35925: PUSH
35926: LD_INT 1
35928: ARRAY
35929: PUSH
35930: LD_VAR 0 8
35934: PUSH
35935: LD_INT 2
35937: ARRAY
35938: PUSH
35939: LD_VAR 0 13
35943: PUSH
35944: LD_INT 2
35946: PLUS
35947: GREATER
35948: OR
35949: PUSH
35950: LD_VAR 0 8
35954: PUSH
35955: LD_INT 2
35957: ARRAY
35958: PUSH
35959: LD_VAR 0 13
35963: PUSH
35964: LD_INT 2
35966: MINUS
35967: LESS
35968: OR
35969: PUSH
35970: LD_VAR 0 8
35974: PUSH
35975: LD_INT 3
35977: ARRAY
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 8
35984: PUSH
35985: LD_INT 9
35987: PUSH
35988: LD_INT 10
35990: PUSH
35991: LD_INT 11
35993: PUSH
35994: LD_INT 12
35996: PUSH
35997: LD_INT 13
35999: PUSH
36000: LD_INT 16
36002: PUSH
36003: LD_INT 17
36005: PUSH
36006: LD_INT 18
36008: PUSH
36009: LD_INT 19
36011: PUSH
36012: LD_INT 20
36014: PUSH
36015: LD_INT 21
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: IN
36033: NOT
36034: OR
36035: PUSH
36036: LD_VAR 0 8
36040: PUSH
36041: LD_INT 5
36043: ARRAY
36044: NOT
36045: OR
36046: PUSH
36047: LD_VAR 0 8
36051: PUSH
36052: LD_INT 6
36054: ARRAY
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: LD_INT 7
36064: PUSH
36065: LD_INT 9
36067: PUSH
36068: LD_INT 10
36070: PUSH
36071: LD_INT 11
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: IN
36082: NOT
36083: OR
36084: IFFALSE 36090
// exit ;
36086: POP
36087: POP
36088: GO 36173
// end ;
36090: GO 35761
36092: POP
36093: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36094: LD_VAR 0 9
36098: PPUSH
36099: LD_VAR 0 3
36103: PPUSH
36104: LD_VAR 0 4
36108: PPUSH
36109: LD_INT 20
36111: PPUSH
36112: CALL 28119 0 4
36116: PUSH
36117: LD_INT 4
36119: ARRAY
36120: IFFALSE 36124
// exit ;
36122: GO 36173
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36124: LD_VAR 0 2
36128: PUSH
36129: LD_INT 29
36131: PUSH
36132: LD_INT 30
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: IN
36139: PUSH
36140: LD_VAR 0 3
36144: PPUSH
36145: LD_VAR 0 4
36149: PPUSH
36150: LD_VAR 0 9
36154: PPUSH
36155: CALL_OW 440
36159: NOT
36160: AND
36161: IFFALSE 36165
// exit ;
36163: GO 36173
// result := true ;
36165: LD_ADDR_VAR 0 6
36169: PUSH
36170: LD_INT 1
36172: ST_TO_ADDR
// end ;
36173: LD_VAR 0 6
36177: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36178: LD_INT 0
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
// result = [ ] ;
36238: LD_ADDR_VAR 0 7
36242: PUSH
36243: EMPTY
36244: ST_TO_ADDR
// temp_list = [ ] ;
36245: LD_ADDR_VAR 0 9
36249: PUSH
36250: EMPTY
36251: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36252: LD_VAR 0 4
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: LD_INT 4
36271: PUSH
36272: LD_INT 5
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: IN
36283: NOT
36284: PUSH
36285: LD_VAR 0 1
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: IN
36300: PUSH
36301: LD_VAR 0 5
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 3
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: LIST
36319: IN
36320: NOT
36321: AND
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 54718
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36327: LD_VAR 0 1
36331: PUSH
36332: LD_INT 6
36334: PUSH
36335: LD_INT 7
36337: PUSH
36338: LD_INT 8
36340: PUSH
36341: LD_INT 13
36343: PUSH
36344: LD_INT 12
36346: PUSH
36347: LD_INT 15
36349: PUSH
36350: LD_INT 11
36352: PUSH
36353: LD_INT 14
36355: PUSH
36356: LD_INT 10
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: IN
36370: IFFALSE 36380
// btype = b_lab ;
36372: LD_ADDR_VAR 0 1
36376: PUSH
36377: LD_INT 6
36379: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36380: LD_VAR 0 6
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: IN
36399: NOT
36400: PUSH
36401: LD_VAR 0 1
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 6
36420: PUSH
36421: LD_INT 36
36423: PUSH
36424: LD_INT 4
36426: PUSH
36427: LD_INT 5
36429: PUSH
36430: LD_INT 31
36432: PUSH
36433: LD_INT 32
36435: PUSH
36436: LD_INT 33
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: IN
36452: NOT
36453: PUSH
36454: LD_VAR 0 6
36458: PUSH
36459: LD_INT 1
36461: EQUAL
36462: AND
36463: OR
36464: PUSH
36465: LD_VAR 0 1
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: IN
36480: NOT
36481: PUSH
36482: LD_VAR 0 6
36486: PUSH
36487: LD_INT 2
36489: EQUAL
36490: AND
36491: OR
36492: IFFALSE 36502
// mode = 0 ;
36494: LD_ADDR_VAR 0 6
36498: PUSH
36499: LD_INT 0
36501: ST_TO_ADDR
// case mode of 0 :
36502: LD_VAR 0 6
36506: PUSH
36507: LD_INT 0
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 47968
36515: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36516: LD_ADDR_VAR 0 11
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 2
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: LD_INT 3
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36709: LD_ADDR_VAR 0 12
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 3
36877: NEG
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36905: LD_ADDR_VAR 0 13
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 3
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 3
37064: NEG
37065: PUSH
37066: LD_INT 2
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 3
37076: NEG
37077: PUSH
37078: LD_INT 3
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37104: LD_ADDR_VAR 0 14
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 3
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37300: LD_ADDR_VAR 0 15
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37493: LD_ADDR_VAR 0 16
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 3
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 3
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37686: LD_ADDR_VAR 0 17
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37916: LD_ADDR_VAR 0 18
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 2
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38146: LD_ADDR_VAR 0 19
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 2
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38376: LD_ADDR_VAR 0 20
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38606: LD_ADDR_VAR 0 21
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38836: LD_ADDR_VAR 0 22
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39066: LD_ADDR_VAR 0 23
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39346: LD_ADDR_VAR 0 24
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39622: LD_ADDR_VAR 0 25
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39896: LD_ADDR_VAR 0 26
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 3
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40172: LD_ADDR_VAR 0 27
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 3
40405: NEG
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 3
40417: NEG
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40452: LD_ADDR_VAR 0 28
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40734: LD_ADDR_VAR 0 29
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 3
40978: NEG
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41013: LD_ADDR_VAR 0 30
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 3
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 3
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41291: LD_ADDR_VAR 0 31
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41569: LD_ADDR_VAR 0 32
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41847: LD_ADDR_VAR 0 33
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 3
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42126: LD_ADDR_VAR 0 34
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42406: LD_ADDR_VAR 0 35
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42518: LD_ADDR_VAR 0 36
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42630: LD_ADDR_VAR 0 37
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42742: LD_ADDR_VAR 0 38
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42854: LD_ADDR_VAR 0 39
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42966: LD_ADDR_VAR 0 40
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43078: LD_ADDR_VAR 0 41
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 3
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: NEG
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43428: LD_ADDR_VAR 0 42
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 3
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43778: LD_ADDR_VAR 0 43
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 3
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 3
44085: NEG
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44126: LD_ADDR_VAR 0 44
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 3
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: NEG
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44476: LD_ADDR_VAR 0 45
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 3
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 3
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 3
44773: NEG
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 3
44785: NEG
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44826: LD_ADDR_VAR 0 46
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 3
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45174: LD_ADDR_VAR 0 47
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45325: LD_ADDR_VAR 0 48
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45472: LD_ADDR_VAR 0 49
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45616: LD_ADDR_VAR 0 50
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45760: LD_ADDR_VAR 0 51
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45907: LD_ADDR_VAR 0 52
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46058: LD_ADDR_VAR 0 53
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46288: LD_ADDR_VAR 0 54
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46518: LD_ADDR_VAR 0 55
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46748: LD_ADDR_VAR 0 56
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46978: LD_ADDR_VAR 0 57
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47208: LD_ADDR_VAR 0 58
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47438: LD_ADDR_VAR 0 59
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47526: LD_ADDR_VAR 0 60
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47614: LD_ADDR_VAR 0 61
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47702: LD_ADDR_VAR 0 62
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47790: LD_ADDR_VAR 0 63
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47878: LD_ADDR_VAR 0 64
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// end ; 1 :
47966: GO 53863
47968: LD_INT 1
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47976
47974: GO 50599
47976: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47977: LD_ADDR_VAR 0 11
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48021: LD_ADDR_VAR 0 12
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48062: LD_ADDR_VAR 0 13
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48102: LD_ADDR_VAR 0 14
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48143: LD_ADDR_VAR 0 15
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48187: LD_ADDR_VAR 0 16
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48233: LD_ADDR_VAR 0 17
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48277: LD_ADDR_VAR 0 18
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48318: LD_ADDR_VAR 0 19
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48358: LD_ADDR_VAR 0 20
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48399: LD_ADDR_VAR 0 21
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48443: LD_ADDR_VAR 0 22
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 3
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48489: LD_ADDR_VAR 0 23
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 4
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48533: LD_ADDR_VAR 0 24
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 4
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48574: LD_ADDR_VAR 0 25
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 4
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: LD_INT 4
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48614: LD_ADDR_VAR 0 26
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 3
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48655: LD_ADDR_VAR 0 27
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 4
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48699: LD_ADDR_VAR 0 28
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 4
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 4
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48745: LD_ADDR_VAR 0 29
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 3
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 4
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 5
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 5
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 4
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 6
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 6
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 5
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48900: LD_ADDR_VAR 0 30
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 4
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 4
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 4
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 5
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 5
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 6
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 6
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49043: LD_ADDR_VAR 0 31
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 4
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 4
49090: PUSH
49091: LD_INT 4
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 4
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: LD_INT 4
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: PUSH
49121: LD_INT 5
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 4
49130: PUSH
49131: LD_INT 5
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 6
49140: PUSH
49141: LD_INT 5
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 6
49150: PUSH
49151: LD_INT 6
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 5
49160: PUSH
49161: LD_INT 6
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49182: LD_ADDR_VAR 0 32
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 5
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 5
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 4
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 6
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 6
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 5
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49325: LD_ADDR_VAR 0 33
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 4
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 4
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 5
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 5
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 5
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 6
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 6
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49480: LD_ADDR_VAR 0 34
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 3
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: LD_INT 4
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 4
49547: NEG
49548: PUSH
49549: LD_INT 4
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 4
49559: NEG
49560: PUSH
49561: LD_INT 5
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 5
49571: NEG
49572: PUSH
49573: LD_INT 4
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 5
49583: NEG
49584: PUSH
49585: LD_INT 5
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 5
49595: NEG
49596: PUSH
49597: LD_INT 6
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 6
49607: NEG
49608: PUSH
49609: LD_INT 5
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 6
49619: NEG
49620: PUSH
49621: LD_INT 6
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49643: LD_ADDR_VAR 0 41
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 3
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49687: LD_ADDR_VAR 0 42
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49728: LD_ADDR_VAR 0 43
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49768: LD_ADDR_VAR 0 44
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49809: LD_ADDR_VAR 0 45
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49853: LD_ADDR_VAR 0 46
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 3
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49899: LD_ADDR_VAR 0 47
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49932: LD_ADDR_VAR 0 48
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49963: LD_ADDR_VAR 0 49
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49992: LD_ADDR_VAR 0 50
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50021: LD_ADDR_VAR 0 51
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50052: LD_ADDR_VAR 0 52
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50085: LD_ADDR_VAR 0 53
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 3
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50129: LD_ADDR_VAR 0 54
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50170: LD_ADDR_VAR 0 55
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50210: LD_ADDR_VAR 0 56
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50251: LD_ADDR_VAR 0 57
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50295: LD_ADDR_VAR 0 58
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50341: LD_ADDR_VAR 0 59
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50385: LD_ADDR_VAR 0 60
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50426: LD_ADDR_VAR 0 61
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50466: LD_ADDR_VAR 0 62
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50507: LD_ADDR_VAR 0 63
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50551: LD_ADDR_VAR 0 64
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// end ; 2 :
50597: GO 53863
50599: LD_INT 2
50601: DOUBLE
50602: EQUAL
50603: IFTRUE 50607
50605: GO 53862
50607: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50608: LD_ADDR_VAR 0 29
50612: PUSH
50613: LD_INT 4
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 4
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 5
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 5
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 4
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 5
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 4
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 4
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 4
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 5
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 5
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 4
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: LD_INT 5
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 4
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: NEG
50994: PUSH
50995: LD_INT 4
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: LD_INT 5
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: LD_INT 4
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 4
51041: NEG
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 5
51053: NEG
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 5
51065: NEG
51066: PUSH
51067: LD_INT 5
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 5
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 5
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51146: LD_ADDR_VAR 0 30
51150: PUSH
51151: LD_INT 4
51153: PUSH
51154: LD_INT 4
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 5
51173: PUSH
51174: LD_INT 4
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 5
51183: PUSH
51184: LD_INT 5
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: PUSH
51194: LD_INT 5
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 4
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 5
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 5
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 4
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 4
51336: NEG
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 4
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 5
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 5
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 5
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 4
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 4
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 4
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 4
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 4
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 4
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 5
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 4
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 5
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 3
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: LD_INT 5
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51693: LD_ADDR_VAR 0 31
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 4
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 5
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 5
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 4
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 5
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: NEG
51896: PUSH
51897: LD_INT 4
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: LD_INT 5
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 4
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 5
51955: NEG
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 5
51967: NEG
51968: PUSH
51969: LD_INT 5
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 5
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 5
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 4
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 4
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 4
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 4
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 4
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52243: LD_ADDR_VAR 0 32
52247: PUSH
52248: LD_INT 4
52250: NEG
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 4
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 5
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 5
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 5
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 4
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 4
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 4
52424: NEG
52425: PUSH
52426: LD_INT 4
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 4
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 4
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 4
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 5
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 4
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 4
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 5
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 4
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 4
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 4
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 5
52675: PUSH
52676: LD_INT 4
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 5
52685: PUSH
52686: LD_INT 5
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 4
52695: PUSH
52696: LD_INT 5
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: LD_INT 4
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 5
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: LD_INT 5
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52790: LD_ADDR_VAR 0 33
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: LD_INT 4
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 4
52809: NEG
52810: PUSH
52811: LD_INT 5
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: LD_INT 4
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 4
52845: NEG
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 5
52857: NEG
52858: PUSH
52859: LD_INT 4
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 5
52869: NEG
52870: PUSH
52871: LD_INT 5
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 5
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 5
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 4
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 3
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 4
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 4
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 4
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 4
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 5
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 5
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 4
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 5
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 4
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 4
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 4
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 4
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 5
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53328: LD_ADDR_VAR 0 34
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 5
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 4
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 4
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 5
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 5
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 4
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: LD_INT 4
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 5
53550: PUSH
53551: LD_INT 4
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 5
53560: PUSH
53561: LD_INT 5
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 4
53570: PUSH
53571: LD_INT 5
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 4
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: PUSH
53591: LD_INT 3
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 5
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: LD_INT 5
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 4
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 4
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 4
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 4
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 5
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 5
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 5
53792: NEG
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// end ; end ;
53860: GO 53863
53862: POP
// case btype of b_depot , b_warehouse :
53863: LD_VAR 0 1
53867: PUSH
53868: LD_INT 0
53870: DOUBLE
53871: EQUAL
53872: IFTRUE 53882
53874: LD_INT 1
53876: DOUBLE
53877: EQUAL
53878: IFTRUE 53882
53880: GO 54083
53882: POP
// case nation of nation_american :
53883: LD_VAR 0 5
53887: PUSH
53888: LD_INT 1
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53896
53894: GO 53952
53896: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53897: LD_ADDR_VAR 0 9
53901: PUSH
53902: LD_VAR 0 11
53906: PUSH
53907: LD_VAR 0 12
53911: PUSH
53912: LD_VAR 0 13
53916: PUSH
53917: LD_VAR 0 14
53921: PUSH
53922: LD_VAR 0 15
53926: PUSH
53927: LD_VAR 0 16
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: PUSH
53940: LD_VAR 0 4
53944: PUSH
53945: LD_INT 1
53947: PLUS
53948: ARRAY
53949: ST_TO_ADDR
53950: GO 54081
53952: LD_INT 2
53954: DOUBLE
53955: EQUAL
53956: IFTRUE 53960
53958: GO 54016
53960: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53961: LD_ADDR_VAR 0 9
53965: PUSH
53966: LD_VAR 0 17
53970: PUSH
53971: LD_VAR 0 18
53975: PUSH
53976: LD_VAR 0 19
53980: PUSH
53981: LD_VAR 0 20
53985: PUSH
53986: LD_VAR 0 21
53990: PUSH
53991: LD_VAR 0 22
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: PUSH
54004: LD_VAR 0 4
54008: PUSH
54009: LD_INT 1
54011: PLUS
54012: ARRAY
54013: ST_TO_ADDR
54014: GO 54081
54016: LD_INT 3
54018: DOUBLE
54019: EQUAL
54020: IFTRUE 54024
54022: GO 54080
54024: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54025: LD_ADDR_VAR 0 9
54029: PUSH
54030: LD_VAR 0 23
54034: PUSH
54035: LD_VAR 0 24
54039: PUSH
54040: LD_VAR 0 25
54044: PUSH
54045: LD_VAR 0 26
54049: PUSH
54050: LD_VAR 0 27
54054: PUSH
54055: LD_VAR 0 28
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: PUSH
54068: LD_VAR 0 4
54072: PUSH
54073: LD_INT 1
54075: PLUS
54076: ARRAY
54077: ST_TO_ADDR
54078: GO 54081
54080: POP
54081: GO 54636
54083: LD_INT 2
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54097
54089: LD_INT 3
54091: DOUBLE
54092: EQUAL
54093: IFTRUE 54097
54095: GO 54153
54097: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54098: LD_ADDR_VAR 0 9
54102: PUSH
54103: LD_VAR 0 29
54107: PUSH
54108: LD_VAR 0 30
54112: PUSH
54113: LD_VAR 0 31
54117: PUSH
54118: LD_VAR 0 32
54122: PUSH
54123: LD_VAR 0 33
54127: PUSH
54128: LD_VAR 0 34
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: PUSH
54141: LD_VAR 0 4
54145: PUSH
54146: LD_INT 1
54148: PLUS
54149: ARRAY
54150: ST_TO_ADDR
54151: GO 54636
54153: LD_INT 16
54155: DOUBLE
54156: EQUAL
54157: IFTRUE 54215
54159: LD_INT 17
54161: DOUBLE
54162: EQUAL
54163: IFTRUE 54215
54165: LD_INT 18
54167: DOUBLE
54168: EQUAL
54169: IFTRUE 54215
54171: LD_INT 19
54173: DOUBLE
54174: EQUAL
54175: IFTRUE 54215
54177: LD_INT 22
54179: DOUBLE
54180: EQUAL
54181: IFTRUE 54215
54183: LD_INT 20
54185: DOUBLE
54186: EQUAL
54187: IFTRUE 54215
54189: LD_INT 21
54191: DOUBLE
54192: EQUAL
54193: IFTRUE 54215
54195: LD_INT 23
54197: DOUBLE
54198: EQUAL
54199: IFTRUE 54215
54201: LD_INT 24
54203: DOUBLE
54204: EQUAL
54205: IFTRUE 54215
54207: LD_INT 25
54209: DOUBLE
54210: EQUAL
54211: IFTRUE 54215
54213: GO 54271
54215: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54216: LD_ADDR_VAR 0 9
54220: PUSH
54221: LD_VAR 0 35
54225: PUSH
54226: LD_VAR 0 36
54230: PUSH
54231: LD_VAR 0 37
54235: PUSH
54236: LD_VAR 0 38
54240: PUSH
54241: LD_VAR 0 39
54245: PUSH
54246: LD_VAR 0 40
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: PUSH
54259: LD_VAR 0 4
54263: PUSH
54264: LD_INT 1
54266: PLUS
54267: ARRAY
54268: ST_TO_ADDR
54269: GO 54636
54271: LD_INT 6
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54327
54277: LD_INT 7
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54327
54283: LD_INT 8
54285: DOUBLE
54286: EQUAL
54287: IFTRUE 54327
54289: LD_INT 13
54291: DOUBLE
54292: EQUAL
54293: IFTRUE 54327
54295: LD_INT 12
54297: DOUBLE
54298: EQUAL
54299: IFTRUE 54327
54301: LD_INT 15
54303: DOUBLE
54304: EQUAL
54305: IFTRUE 54327
54307: LD_INT 11
54309: DOUBLE
54310: EQUAL
54311: IFTRUE 54327
54313: LD_INT 14
54315: DOUBLE
54316: EQUAL
54317: IFTRUE 54327
54319: LD_INT 10
54321: DOUBLE
54322: EQUAL
54323: IFTRUE 54327
54325: GO 54383
54327: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54328: LD_ADDR_VAR 0 9
54332: PUSH
54333: LD_VAR 0 41
54337: PUSH
54338: LD_VAR 0 42
54342: PUSH
54343: LD_VAR 0 43
54347: PUSH
54348: LD_VAR 0 44
54352: PUSH
54353: LD_VAR 0 45
54357: PUSH
54358: LD_VAR 0 46
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: PUSH
54371: LD_VAR 0 4
54375: PUSH
54376: LD_INT 1
54378: PLUS
54379: ARRAY
54380: ST_TO_ADDR
54381: GO 54636
54383: LD_INT 36
54385: DOUBLE
54386: EQUAL
54387: IFTRUE 54391
54389: GO 54447
54391: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54392: LD_ADDR_VAR 0 9
54396: PUSH
54397: LD_VAR 0 47
54401: PUSH
54402: LD_VAR 0 48
54406: PUSH
54407: LD_VAR 0 49
54411: PUSH
54412: LD_VAR 0 50
54416: PUSH
54417: LD_VAR 0 51
54421: PUSH
54422: LD_VAR 0 52
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 4
54439: PUSH
54440: LD_INT 1
54442: PLUS
54443: ARRAY
54444: ST_TO_ADDR
54445: GO 54636
54447: LD_INT 4
54449: DOUBLE
54450: EQUAL
54451: IFTRUE 54473
54453: LD_INT 5
54455: DOUBLE
54456: EQUAL
54457: IFTRUE 54473
54459: LD_INT 34
54461: DOUBLE
54462: EQUAL
54463: IFTRUE 54473
54465: LD_INT 37
54467: DOUBLE
54468: EQUAL
54469: IFTRUE 54473
54471: GO 54529
54473: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54474: LD_ADDR_VAR 0 9
54478: PUSH
54479: LD_VAR 0 53
54483: PUSH
54484: LD_VAR 0 54
54488: PUSH
54489: LD_VAR 0 55
54493: PUSH
54494: LD_VAR 0 56
54498: PUSH
54499: LD_VAR 0 57
54503: PUSH
54504: LD_VAR 0 58
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: PUSH
54517: LD_VAR 0 4
54521: PUSH
54522: LD_INT 1
54524: PLUS
54525: ARRAY
54526: ST_TO_ADDR
54527: GO 54636
54529: LD_INT 31
54531: DOUBLE
54532: EQUAL
54533: IFTRUE 54579
54535: LD_INT 32
54537: DOUBLE
54538: EQUAL
54539: IFTRUE 54579
54541: LD_INT 33
54543: DOUBLE
54544: EQUAL
54545: IFTRUE 54579
54547: LD_INT 27
54549: DOUBLE
54550: EQUAL
54551: IFTRUE 54579
54553: LD_INT 26
54555: DOUBLE
54556: EQUAL
54557: IFTRUE 54579
54559: LD_INT 28
54561: DOUBLE
54562: EQUAL
54563: IFTRUE 54579
54565: LD_INT 29
54567: DOUBLE
54568: EQUAL
54569: IFTRUE 54579
54571: LD_INT 30
54573: DOUBLE
54574: EQUAL
54575: IFTRUE 54579
54577: GO 54635
54579: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 59
54589: PUSH
54590: LD_VAR 0 60
54594: PUSH
54595: LD_VAR 0 61
54599: PUSH
54600: LD_VAR 0 62
54604: PUSH
54605: LD_VAR 0 63
54609: PUSH
54610: LD_VAR 0 64
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 4
54627: PUSH
54628: LD_INT 1
54630: PLUS
54631: ARRAY
54632: ST_TO_ADDR
54633: GO 54636
54635: POP
// temp_list2 = [ ] ;
54636: LD_ADDR_VAR 0 10
54640: PUSH
54641: EMPTY
54642: ST_TO_ADDR
// for i in temp_list do
54643: LD_ADDR_VAR 0 8
54647: PUSH
54648: LD_VAR 0 9
54652: PUSH
54653: FOR_IN
54654: IFFALSE 54706
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54656: LD_ADDR_VAR 0 10
54660: PUSH
54661: LD_VAR 0 10
54665: PUSH
54666: LD_VAR 0 8
54670: PUSH
54671: LD_INT 1
54673: ARRAY
54674: PUSH
54675: LD_VAR 0 2
54679: PLUS
54680: PUSH
54681: LD_VAR 0 8
54685: PUSH
54686: LD_INT 2
54688: ARRAY
54689: PUSH
54690: LD_VAR 0 3
54694: PLUS
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: ADD
54703: ST_TO_ADDR
54704: GO 54653
54706: POP
54707: POP
// result = temp_list2 ;
54708: LD_ADDR_VAR 0 7
54712: PUSH
54713: LD_VAR 0 10
54717: ST_TO_ADDR
// end ;
54718: LD_VAR 0 7
54722: RET
// export function EnemyInRange ( unit , dist ) ; begin
54723: LD_INT 0
54725: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54726: LD_ADDR_VAR 0 3
54730: PUSH
54731: LD_VAR 0 1
54735: PPUSH
54736: CALL_OW 255
54740: PPUSH
54741: LD_VAR 0 1
54745: PPUSH
54746: CALL_OW 250
54750: PPUSH
54751: LD_VAR 0 1
54755: PPUSH
54756: CALL_OW 251
54760: PPUSH
54761: LD_VAR 0 2
54765: PPUSH
54766: CALL 28119 0 4
54770: PUSH
54771: LD_INT 4
54773: ARRAY
54774: ST_TO_ADDR
// end ;
54775: LD_VAR 0 3
54779: RET
// export function PlayerSeeMe ( unit ) ; begin
54780: LD_INT 0
54782: PPUSH
// result := See ( your_side , unit ) ;
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: LD_OWVAR 2
54792: PPUSH
54793: LD_VAR 0 1
54797: PPUSH
54798: CALL_OW 292
54802: ST_TO_ADDR
// end ;
54803: LD_VAR 0 2
54807: RET
// export function ReverseDir ( unit ) ; begin
54808: LD_INT 0
54810: PPUSH
// if not unit then
54811: LD_VAR 0 1
54815: NOT
54816: IFFALSE 54820
// exit ;
54818: GO 54843
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54820: LD_ADDR_VAR 0 2
54824: PUSH
54825: LD_VAR 0 1
54829: PPUSH
54830: CALL_OW 254
54834: PUSH
54835: LD_INT 3
54837: PLUS
54838: PUSH
54839: LD_INT 6
54841: MOD
54842: ST_TO_ADDR
// end ;
54843: LD_VAR 0 2
54847: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54848: LD_INT 0
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
// if not hexes then
54855: LD_VAR 0 2
54859: NOT
54860: IFFALSE 54864
// exit ;
54862: GO 55012
// dist := 9999 ;
54864: LD_ADDR_VAR 0 5
54868: PUSH
54869: LD_INT 9999
54871: ST_TO_ADDR
// for i = 1 to hexes do
54872: LD_ADDR_VAR 0 4
54876: PUSH
54877: DOUBLE
54878: LD_INT 1
54880: DEC
54881: ST_TO_ADDR
54882: LD_VAR 0 2
54886: PUSH
54887: FOR_TO
54888: IFFALSE 55000
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54890: LD_VAR 0 1
54894: PPUSH
54895: LD_VAR 0 2
54899: PUSH
54900: LD_VAR 0 4
54904: ARRAY
54905: PUSH
54906: LD_INT 1
54908: ARRAY
54909: PPUSH
54910: LD_VAR 0 2
54914: PUSH
54915: LD_VAR 0 4
54919: ARRAY
54920: PUSH
54921: LD_INT 2
54923: ARRAY
54924: PPUSH
54925: CALL_OW 297
54929: PUSH
54930: LD_VAR 0 5
54934: LESS
54935: IFFALSE 54998
// begin hex := hexes [ i ] ;
54937: LD_ADDR_VAR 0 7
54941: PUSH
54942: LD_VAR 0 2
54946: PUSH
54947: LD_VAR 0 4
54951: ARRAY
54952: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54953: LD_ADDR_VAR 0 5
54957: PUSH
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 2
54967: PUSH
54968: LD_VAR 0 4
54972: ARRAY
54973: PUSH
54974: LD_INT 1
54976: ARRAY
54977: PPUSH
54978: LD_VAR 0 2
54982: PUSH
54983: LD_VAR 0 4
54987: ARRAY
54988: PUSH
54989: LD_INT 2
54991: ARRAY
54992: PPUSH
54993: CALL_OW 297
54997: ST_TO_ADDR
// end ; end ;
54998: GO 54887
55000: POP
55001: POP
// result := hex ;
55002: LD_ADDR_VAR 0 3
55006: PUSH
55007: LD_VAR 0 7
55011: ST_TO_ADDR
// end ;
55012: LD_VAR 0 3
55016: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55017: LD_INT 0
55019: PPUSH
55020: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55021: LD_VAR 0 1
55025: NOT
55026: PUSH
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 21
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 23
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PPUSH
55056: CALL_OW 69
55060: IN
55061: NOT
55062: OR
55063: IFFALSE 55067
// exit ;
55065: GO 55114
// for i = 1 to 3 do
55067: LD_ADDR_VAR 0 3
55071: PUSH
55072: DOUBLE
55073: LD_INT 1
55075: DEC
55076: ST_TO_ADDR
55077: LD_INT 3
55079: PUSH
55080: FOR_TO
55081: IFFALSE 55112
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL_OW 250
55092: PPUSH
55093: LD_VAR 0 1
55097: PPUSH
55098: CALL_OW 251
55102: PPUSH
55103: LD_INT 1
55105: PPUSH
55106: CALL_OW 453
55110: GO 55080
55112: POP
55113: POP
// end ;
55114: LD_VAR 0 2
55118: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55119: LD_INT 0
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55127: LD_VAR 0 1
55131: NOT
55132: PUSH
55133: LD_VAR 0 2
55137: NOT
55138: OR
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 314
55149: OR
55150: IFFALSE 55154
// exit ;
55152: GO 55595
// x := GetX ( enemy_unit ) ;
55154: LD_ADDR_VAR 0 7
55158: PUSH
55159: LD_VAR 0 2
55163: PPUSH
55164: CALL_OW 250
55168: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55169: LD_ADDR_VAR 0 8
55173: PUSH
55174: LD_VAR 0 2
55178: PPUSH
55179: CALL_OW 251
55183: ST_TO_ADDR
// if not x or not y then
55184: LD_VAR 0 7
55188: NOT
55189: PUSH
55190: LD_VAR 0 8
55194: NOT
55195: OR
55196: IFFALSE 55200
// exit ;
55198: GO 55595
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55200: LD_ADDR_VAR 0 6
55204: PUSH
55205: LD_VAR 0 7
55209: PPUSH
55210: LD_INT 0
55212: PPUSH
55213: LD_INT 4
55215: PPUSH
55216: CALL_OW 272
55220: PUSH
55221: LD_VAR 0 8
55225: PPUSH
55226: LD_INT 0
55228: PPUSH
55229: LD_INT 4
55231: PPUSH
55232: CALL_OW 273
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_VAR 0 7
55245: PPUSH
55246: LD_INT 1
55248: PPUSH
55249: LD_INT 4
55251: PPUSH
55252: CALL_OW 272
55256: PUSH
55257: LD_VAR 0 8
55261: PPUSH
55262: LD_INT 1
55264: PPUSH
55265: LD_INT 4
55267: PPUSH
55268: CALL_OW 273
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_VAR 0 7
55281: PPUSH
55282: LD_INT 2
55284: PPUSH
55285: LD_INT 4
55287: PPUSH
55288: CALL_OW 272
55292: PUSH
55293: LD_VAR 0 8
55297: PPUSH
55298: LD_INT 2
55300: PPUSH
55301: LD_INT 4
55303: PPUSH
55304: CALL_OW 273
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_VAR 0 7
55317: PPUSH
55318: LD_INT 3
55320: PPUSH
55321: LD_INT 4
55323: PPUSH
55324: CALL_OW 272
55328: PUSH
55329: LD_VAR 0 8
55333: PPUSH
55334: LD_INT 3
55336: PPUSH
55337: LD_INT 4
55339: PPUSH
55340: CALL_OW 273
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_VAR 0 7
55353: PPUSH
55354: LD_INT 4
55356: PPUSH
55357: LD_INT 4
55359: PPUSH
55360: CALL_OW 272
55364: PUSH
55365: LD_VAR 0 8
55369: PPUSH
55370: LD_INT 4
55372: PPUSH
55373: LD_INT 4
55375: PPUSH
55376: CALL_OW 273
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_VAR 0 7
55389: PPUSH
55390: LD_INT 5
55392: PPUSH
55393: LD_INT 4
55395: PPUSH
55396: CALL_OW 272
55400: PUSH
55401: LD_VAR 0 8
55405: PPUSH
55406: LD_INT 5
55408: PPUSH
55409: LD_INT 4
55411: PPUSH
55412: CALL_OW 273
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: ST_TO_ADDR
// for i = tmp downto 1 do
55429: LD_ADDR_VAR 0 4
55433: PUSH
55434: DOUBLE
55435: LD_VAR 0 6
55439: INC
55440: ST_TO_ADDR
55441: LD_INT 1
55443: PUSH
55444: FOR_DOWNTO
55445: IFFALSE 55546
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55447: LD_VAR 0 6
55451: PUSH
55452: LD_VAR 0 4
55456: ARRAY
55457: PUSH
55458: LD_INT 1
55460: ARRAY
55461: PPUSH
55462: LD_VAR 0 6
55466: PUSH
55467: LD_VAR 0 4
55471: ARRAY
55472: PUSH
55473: LD_INT 2
55475: ARRAY
55476: PPUSH
55477: CALL_OW 488
55481: NOT
55482: PUSH
55483: LD_VAR 0 6
55487: PUSH
55488: LD_VAR 0 4
55492: ARRAY
55493: PUSH
55494: LD_INT 1
55496: ARRAY
55497: PPUSH
55498: LD_VAR 0 6
55502: PUSH
55503: LD_VAR 0 4
55507: ARRAY
55508: PUSH
55509: LD_INT 2
55511: ARRAY
55512: PPUSH
55513: CALL_OW 428
55517: PUSH
55518: LD_INT 0
55520: NONEQUAL
55521: OR
55522: IFFALSE 55544
// tmp := Delete ( tmp , i ) ;
55524: LD_ADDR_VAR 0 6
55528: PUSH
55529: LD_VAR 0 6
55533: PPUSH
55534: LD_VAR 0 4
55538: PPUSH
55539: CALL_OW 3
55543: ST_TO_ADDR
55544: GO 55444
55546: POP
55547: POP
// j := GetClosestHex ( unit , tmp ) ;
55548: LD_ADDR_VAR 0 5
55552: PUSH
55553: LD_VAR 0 1
55557: PPUSH
55558: LD_VAR 0 6
55562: PPUSH
55563: CALL 54848 0 2
55567: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55568: LD_VAR 0 1
55572: PPUSH
55573: LD_VAR 0 5
55577: PUSH
55578: LD_INT 1
55580: ARRAY
55581: PPUSH
55582: LD_VAR 0 5
55586: PUSH
55587: LD_INT 2
55589: ARRAY
55590: PPUSH
55591: CALL_OW 111
// end ;
55595: LD_VAR 0 3
55599: RET
// export function PrepareApemanSoldier ( ) ; begin
55600: LD_INT 0
55602: PPUSH
// uc_nation := 0 ;
55603: LD_ADDR_OWVAR 21
55607: PUSH
55608: LD_INT 0
55610: ST_TO_ADDR
// hc_sex := sex_male ;
55611: LD_ADDR_OWVAR 27
55615: PUSH
55616: LD_INT 1
55618: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55619: LD_ADDR_OWVAR 28
55623: PUSH
55624: LD_INT 15
55626: ST_TO_ADDR
// hc_gallery :=  ;
55627: LD_ADDR_OWVAR 33
55631: PUSH
55632: LD_STRING 
55634: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55635: LD_ADDR_OWVAR 31
55639: PUSH
55640: LD_INT 0
55642: PPUSH
55643: LD_INT 3
55645: PPUSH
55646: CALL_OW 12
55650: PUSH
55651: LD_INT 0
55653: PPUSH
55654: LD_INT 3
55656: PPUSH
55657: CALL_OW 12
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// end ;
55674: LD_VAR 0 1
55678: RET
// export function PrepareApemanEngineer ( ) ; begin
55679: LD_INT 0
55681: PPUSH
// uc_nation := 0 ;
55682: LD_ADDR_OWVAR 21
55686: PUSH
55687: LD_INT 0
55689: ST_TO_ADDR
// hc_sex := sex_male ;
55690: LD_ADDR_OWVAR 27
55694: PUSH
55695: LD_INT 1
55697: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55698: LD_ADDR_OWVAR 28
55702: PUSH
55703: LD_INT 16
55705: ST_TO_ADDR
// hc_gallery :=  ;
55706: LD_ADDR_OWVAR 33
55710: PUSH
55711: LD_STRING 
55713: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55714: LD_ADDR_OWVAR 31
55718: PUSH
55719: LD_INT 0
55721: PPUSH
55722: LD_INT 3
55724: PPUSH
55725: CALL_OW 12
55729: PUSH
55730: LD_INT 0
55732: PPUSH
55733: LD_INT 3
55735: PPUSH
55736: CALL_OW 12
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// end ;
55753: LD_VAR 0 1
55757: RET
// export function PrepareApeman ( agressivity ) ; begin
55758: LD_INT 0
55760: PPUSH
// uc_side := 0 ;
55761: LD_ADDR_OWVAR 20
55765: PUSH
55766: LD_INT 0
55768: ST_TO_ADDR
// uc_nation := 0 ;
55769: LD_ADDR_OWVAR 21
55773: PUSH
55774: LD_INT 0
55776: ST_TO_ADDR
// hc_sex := sex_male ;
55777: LD_ADDR_OWVAR 27
55781: PUSH
55782: LD_INT 1
55784: ST_TO_ADDR
// hc_class := class_apeman ;
55785: LD_ADDR_OWVAR 28
55789: PUSH
55790: LD_INT 12
55792: ST_TO_ADDR
// hc_gallery :=  ;
55793: LD_ADDR_OWVAR 33
55797: PUSH
55798: LD_STRING 
55800: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55801: LD_ADDR_OWVAR 35
55805: PUSH
55806: LD_VAR 0 1
55810: NEG
55811: PPUSH
55812: LD_VAR 0 1
55816: PPUSH
55817: CALL_OW 12
55821: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55822: LD_ADDR_OWVAR 31
55826: PUSH
55827: LD_INT 0
55829: PPUSH
55830: LD_INT 3
55832: PPUSH
55833: CALL_OW 12
55837: PUSH
55838: LD_INT 0
55840: PPUSH
55841: LD_INT 3
55843: PPUSH
55844: CALL_OW 12
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// end ;
55861: LD_VAR 0 2
55865: RET
// export function PrepareTiger ( agressivity ) ; begin
55866: LD_INT 0
55868: PPUSH
// uc_side := 0 ;
55869: LD_ADDR_OWVAR 20
55873: PUSH
55874: LD_INT 0
55876: ST_TO_ADDR
// uc_nation := 0 ;
55877: LD_ADDR_OWVAR 21
55881: PUSH
55882: LD_INT 0
55884: ST_TO_ADDR
// hc_class := class_tiger ;
55885: LD_ADDR_OWVAR 28
55889: PUSH
55890: LD_INT 14
55892: ST_TO_ADDR
// hc_gallery :=  ;
55893: LD_ADDR_OWVAR 33
55897: PUSH
55898: LD_STRING 
55900: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55901: LD_ADDR_OWVAR 35
55905: PUSH
55906: LD_VAR 0 1
55910: NEG
55911: PPUSH
55912: LD_VAR 0 1
55916: PPUSH
55917: CALL_OW 12
55921: ST_TO_ADDR
// end ;
55922: LD_VAR 0 2
55926: RET
// export function PrepareEnchidna ( ) ; begin
55927: LD_INT 0
55929: PPUSH
// uc_side := 0 ;
55930: LD_ADDR_OWVAR 20
55934: PUSH
55935: LD_INT 0
55937: ST_TO_ADDR
// uc_nation := 0 ;
55938: LD_ADDR_OWVAR 21
55942: PUSH
55943: LD_INT 0
55945: ST_TO_ADDR
// hc_class := class_baggie ;
55946: LD_ADDR_OWVAR 28
55950: PUSH
55951: LD_INT 13
55953: ST_TO_ADDR
// hc_gallery :=  ;
55954: LD_ADDR_OWVAR 33
55958: PUSH
55959: LD_STRING 
55961: ST_TO_ADDR
// end ;
55962: LD_VAR 0 1
55966: RET
// export function PrepareFrog ( ) ; begin
55967: LD_INT 0
55969: PPUSH
// uc_side := 0 ;
55970: LD_ADDR_OWVAR 20
55974: PUSH
55975: LD_INT 0
55977: ST_TO_ADDR
// uc_nation := 0 ;
55978: LD_ADDR_OWVAR 21
55982: PUSH
55983: LD_INT 0
55985: ST_TO_ADDR
// hc_class := class_frog ;
55986: LD_ADDR_OWVAR 28
55990: PUSH
55991: LD_INT 19
55993: ST_TO_ADDR
// hc_gallery :=  ;
55994: LD_ADDR_OWVAR 33
55998: PUSH
55999: LD_STRING 
56001: ST_TO_ADDR
// end ;
56002: LD_VAR 0 1
56006: RET
// export function PrepareFish ( ) ; begin
56007: LD_INT 0
56009: PPUSH
// uc_side := 0 ;
56010: LD_ADDR_OWVAR 20
56014: PUSH
56015: LD_INT 0
56017: ST_TO_ADDR
// uc_nation := 0 ;
56018: LD_ADDR_OWVAR 21
56022: PUSH
56023: LD_INT 0
56025: ST_TO_ADDR
// hc_class := class_fish ;
56026: LD_ADDR_OWVAR 28
56030: PUSH
56031: LD_INT 20
56033: ST_TO_ADDR
// hc_gallery :=  ;
56034: LD_ADDR_OWVAR 33
56038: PUSH
56039: LD_STRING 
56041: ST_TO_ADDR
// end ;
56042: LD_VAR 0 1
56046: RET
// export function PrepareBird ( ) ; begin
56047: LD_INT 0
56049: PPUSH
// uc_side := 0 ;
56050: LD_ADDR_OWVAR 20
56054: PUSH
56055: LD_INT 0
56057: ST_TO_ADDR
// uc_nation := 0 ;
56058: LD_ADDR_OWVAR 21
56062: PUSH
56063: LD_INT 0
56065: ST_TO_ADDR
// hc_class := class_phororhacos ;
56066: LD_ADDR_OWVAR 28
56070: PUSH
56071: LD_INT 18
56073: ST_TO_ADDR
// hc_gallery :=  ;
56074: LD_ADDR_OWVAR 33
56078: PUSH
56079: LD_STRING 
56081: ST_TO_ADDR
// end ;
56082: LD_VAR 0 1
56086: RET
// export function PrepareHorse ( ) ; begin
56087: LD_INT 0
56089: PPUSH
// uc_side := 0 ;
56090: LD_ADDR_OWVAR 20
56094: PUSH
56095: LD_INT 0
56097: ST_TO_ADDR
// uc_nation := 0 ;
56098: LD_ADDR_OWVAR 21
56102: PUSH
56103: LD_INT 0
56105: ST_TO_ADDR
// hc_class := class_horse ;
56106: LD_ADDR_OWVAR 28
56110: PUSH
56111: LD_INT 21
56113: ST_TO_ADDR
// hc_gallery :=  ;
56114: LD_ADDR_OWVAR 33
56118: PUSH
56119: LD_STRING 
56121: ST_TO_ADDR
// end ;
56122: LD_VAR 0 1
56126: RET
// export function PrepareMastodont ( ) ; begin
56127: LD_INT 0
56129: PPUSH
// uc_side := 0 ;
56130: LD_ADDR_OWVAR 20
56134: PUSH
56135: LD_INT 0
56137: ST_TO_ADDR
// uc_nation := 0 ;
56138: LD_ADDR_OWVAR 21
56142: PUSH
56143: LD_INT 0
56145: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56146: LD_ADDR_OWVAR 37
56150: PUSH
56151: LD_INT 31
56153: ST_TO_ADDR
// vc_control := control_rider ;
56154: LD_ADDR_OWVAR 38
56158: PUSH
56159: LD_INT 4
56161: ST_TO_ADDR
// end ;
56162: LD_VAR 0 1
56166: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56167: LD_INT 0
56169: PPUSH
56170: PPUSH
56171: PPUSH
// uc_side = 0 ;
56172: LD_ADDR_OWVAR 20
56176: PUSH
56177: LD_INT 0
56179: ST_TO_ADDR
// uc_nation = 0 ;
56180: LD_ADDR_OWVAR 21
56184: PUSH
56185: LD_INT 0
56187: ST_TO_ADDR
// InitHc_All ( ) ;
56188: CALL_OW 584
// InitVc ;
56192: CALL_OW 20
// if mastodonts then
56196: LD_VAR 0 6
56200: IFFALSE 56267
// for i = 1 to mastodonts do
56202: LD_ADDR_VAR 0 11
56206: PUSH
56207: DOUBLE
56208: LD_INT 1
56210: DEC
56211: ST_TO_ADDR
56212: LD_VAR 0 6
56216: PUSH
56217: FOR_TO
56218: IFFALSE 56265
// begin vc_chassis := 31 ;
56220: LD_ADDR_OWVAR 37
56224: PUSH
56225: LD_INT 31
56227: ST_TO_ADDR
// vc_control := control_rider ;
56228: LD_ADDR_OWVAR 38
56232: PUSH
56233: LD_INT 4
56235: ST_TO_ADDR
// animal := CreateVehicle ;
56236: LD_ADDR_VAR 0 12
56240: PUSH
56241: CALL_OW 45
56245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56246: LD_VAR 0 12
56250: PPUSH
56251: LD_VAR 0 8
56255: PPUSH
56256: LD_INT 0
56258: PPUSH
56259: CALL 58402 0 3
// end ;
56263: GO 56217
56265: POP
56266: POP
// if horses then
56267: LD_VAR 0 5
56271: IFFALSE 56338
// for i = 1 to horses do
56273: LD_ADDR_VAR 0 11
56277: PUSH
56278: DOUBLE
56279: LD_INT 1
56281: DEC
56282: ST_TO_ADDR
56283: LD_VAR 0 5
56287: PUSH
56288: FOR_TO
56289: IFFALSE 56336
// begin hc_class := 21 ;
56291: LD_ADDR_OWVAR 28
56295: PUSH
56296: LD_INT 21
56298: ST_TO_ADDR
// hc_gallery :=  ;
56299: LD_ADDR_OWVAR 33
56303: PUSH
56304: LD_STRING 
56306: ST_TO_ADDR
// animal := CreateHuman ;
56307: LD_ADDR_VAR 0 12
56311: PUSH
56312: CALL_OW 44
56316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56317: LD_VAR 0 12
56321: PPUSH
56322: LD_VAR 0 8
56326: PPUSH
56327: LD_INT 0
56329: PPUSH
56330: CALL 58402 0 3
// end ;
56334: GO 56288
56336: POP
56337: POP
// if birds then
56338: LD_VAR 0 1
56342: IFFALSE 56409
// for i = 1 to birds do
56344: LD_ADDR_VAR 0 11
56348: PUSH
56349: DOUBLE
56350: LD_INT 1
56352: DEC
56353: ST_TO_ADDR
56354: LD_VAR 0 1
56358: PUSH
56359: FOR_TO
56360: IFFALSE 56407
// begin hc_class = 18 ;
56362: LD_ADDR_OWVAR 28
56366: PUSH
56367: LD_INT 18
56369: ST_TO_ADDR
// hc_gallery =  ;
56370: LD_ADDR_OWVAR 33
56374: PUSH
56375: LD_STRING 
56377: ST_TO_ADDR
// animal := CreateHuman ;
56378: LD_ADDR_VAR 0 12
56382: PUSH
56383: CALL_OW 44
56387: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56388: LD_VAR 0 12
56392: PPUSH
56393: LD_VAR 0 8
56397: PPUSH
56398: LD_INT 0
56400: PPUSH
56401: CALL 58402 0 3
// end ;
56405: GO 56359
56407: POP
56408: POP
// if tigers then
56409: LD_VAR 0 2
56413: IFFALSE 56497
// for i = 1 to tigers do
56415: LD_ADDR_VAR 0 11
56419: PUSH
56420: DOUBLE
56421: LD_INT 1
56423: DEC
56424: ST_TO_ADDR
56425: LD_VAR 0 2
56429: PUSH
56430: FOR_TO
56431: IFFALSE 56495
// begin hc_class = class_tiger ;
56433: LD_ADDR_OWVAR 28
56437: PUSH
56438: LD_INT 14
56440: ST_TO_ADDR
// hc_gallery =  ;
56441: LD_ADDR_OWVAR 33
56445: PUSH
56446: LD_STRING 
56448: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56449: LD_ADDR_OWVAR 35
56453: PUSH
56454: LD_INT 7
56456: NEG
56457: PPUSH
56458: LD_INT 7
56460: PPUSH
56461: CALL_OW 12
56465: ST_TO_ADDR
// animal := CreateHuman ;
56466: LD_ADDR_VAR 0 12
56470: PUSH
56471: CALL_OW 44
56475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56476: LD_VAR 0 12
56480: PPUSH
56481: LD_VAR 0 8
56485: PPUSH
56486: LD_INT 0
56488: PPUSH
56489: CALL 58402 0 3
// end ;
56493: GO 56430
56495: POP
56496: POP
// if apemans then
56497: LD_VAR 0 3
56501: IFFALSE 56624
// for i = 1 to apemans do
56503: LD_ADDR_VAR 0 11
56507: PUSH
56508: DOUBLE
56509: LD_INT 1
56511: DEC
56512: ST_TO_ADDR
56513: LD_VAR 0 3
56517: PUSH
56518: FOR_TO
56519: IFFALSE 56622
// begin hc_class = class_apeman ;
56521: LD_ADDR_OWVAR 28
56525: PUSH
56526: LD_INT 12
56528: ST_TO_ADDR
// hc_gallery =  ;
56529: LD_ADDR_OWVAR 33
56533: PUSH
56534: LD_STRING 
56536: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56537: LD_ADDR_OWVAR 35
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PPUSH
56546: LD_INT 2
56548: PPUSH
56549: CALL_OW 12
56553: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56554: LD_ADDR_OWVAR 31
56558: PUSH
56559: LD_INT 1
56561: PPUSH
56562: LD_INT 3
56564: PPUSH
56565: CALL_OW 12
56569: PUSH
56570: LD_INT 1
56572: PPUSH
56573: LD_INT 3
56575: PPUSH
56576: CALL_OW 12
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: ST_TO_ADDR
// animal := CreateHuman ;
56593: LD_ADDR_VAR 0 12
56597: PUSH
56598: CALL_OW 44
56602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56603: LD_VAR 0 12
56607: PPUSH
56608: LD_VAR 0 8
56612: PPUSH
56613: LD_INT 0
56615: PPUSH
56616: CALL 58402 0 3
// end ;
56620: GO 56518
56622: POP
56623: POP
// if enchidnas then
56624: LD_VAR 0 4
56628: IFFALSE 56695
// for i = 1 to enchidnas do
56630: LD_ADDR_VAR 0 11
56634: PUSH
56635: DOUBLE
56636: LD_INT 1
56638: DEC
56639: ST_TO_ADDR
56640: LD_VAR 0 4
56644: PUSH
56645: FOR_TO
56646: IFFALSE 56693
// begin hc_class = 13 ;
56648: LD_ADDR_OWVAR 28
56652: PUSH
56653: LD_INT 13
56655: ST_TO_ADDR
// hc_gallery =  ;
56656: LD_ADDR_OWVAR 33
56660: PUSH
56661: LD_STRING 
56663: ST_TO_ADDR
// animal := CreateHuman ;
56664: LD_ADDR_VAR 0 12
56668: PUSH
56669: CALL_OW 44
56673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56674: LD_VAR 0 12
56678: PPUSH
56679: LD_VAR 0 8
56683: PPUSH
56684: LD_INT 0
56686: PPUSH
56687: CALL 58402 0 3
// end ;
56691: GO 56645
56693: POP
56694: POP
// if fishes then
56695: LD_VAR 0 7
56699: IFFALSE 56766
// for i = 1 to fishes do
56701: LD_ADDR_VAR 0 11
56705: PUSH
56706: DOUBLE
56707: LD_INT 1
56709: DEC
56710: ST_TO_ADDR
56711: LD_VAR 0 7
56715: PUSH
56716: FOR_TO
56717: IFFALSE 56764
// begin hc_class = 20 ;
56719: LD_ADDR_OWVAR 28
56723: PUSH
56724: LD_INT 20
56726: ST_TO_ADDR
// hc_gallery =  ;
56727: LD_ADDR_OWVAR 33
56731: PUSH
56732: LD_STRING 
56734: ST_TO_ADDR
// animal := CreateHuman ;
56735: LD_ADDR_VAR 0 12
56739: PUSH
56740: CALL_OW 44
56744: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56745: LD_VAR 0 12
56749: PPUSH
56750: LD_VAR 0 9
56754: PPUSH
56755: LD_INT 0
56757: PPUSH
56758: CALL 58402 0 3
// end ;
56762: GO 56716
56764: POP
56765: POP
// end ;
56766: LD_VAR 0 10
56770: RET
// export function WantHeal ( sci , unit ) ; begin
56771: LD_INT 0
56773: PPUSH
// if GetTaskList ( sci ) > 0 then
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 437
56783: PUSH
56784: LD_INT 0
56786: GREATER
56787: IFFALSE 56857
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56789: LD_VAR 0 1
56793: PPUSH
56794: CALL_OW 437
56798: PUSH
56799: LD_INT 1
56801: ARRAY
56802: PUSH
56803: LD_INT 1
56805: ARRAY
56806: PUSH
56807: LD_STRING l
56809: EQUAL
56810: PUSH
56811: LD_VAR 0 1
56815: PPUSH
56816: CALL_OW 437
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_INT 4
56827: ARRAY
56828: PUSH
56829: LD_VAR 0 2
56833: EQUAL
56834: AND
56835: IFFALSE 56847
// result := true else
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: LD_INT 1
56844: ST_TO_ADDR
56845: GO 56855
// result := false ;
56847: LD_ADDR_VAR 0 3
56851: PUSH
56852: LD_INT 0
56854: ST_TO_ADDR
// end else
56855: GO 56865
// result := false ;
56857: LD_ADDR_VAR 0 3
56861: PUSH
56862: LD_INT 0
56864: ST_TO_ADDR
// end ;
56865: LD_VAR 0 3
56869: RET
// export function HealTarget ( sci ) ; begin
56870: LD_INT 0
56872: PPUSH
// if not sci then
56873: LD_VAR 0 1
56877: NOT
56878: IFFALSE 56882
// exit ;
56880: GO 56947
// result := 0 ;
56882: LD_ADDR_VAR 0 2
56886: PUSH
56887: LD_INT 0
56889: ST_TO_ADDR
// if GetTaskList ( sci ) then
56890: LD_VAR 0 1
56894: PPUSH
56895: CALL_OW 437
56899: IFFALSE 56947
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56901: LD_VAR 0 1
56905: PPUSH
56906: CALL_OW 437
56910: PUSH
56911: LD_INT 1
56913: ARRAY
56914: PUSH
56915: LD_INT 1
56917: ARRAY
56918: PUSH
56919: LD_STRING l
56921: EQUAL
56922: IFFALSE 56947
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56924: LD_ADDR_VAR 0 2
56928: PUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 437
56938: PUSH
56939: LD_INT 1
56941: ARRAY
56942: PUSH
56943: LD_INT 4
56945: ARRAY
56946: ST_TO_ADDR
// end ;
56947: LD_VAR 0 2
56951: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56952: LD_INT 0
56954: PPUSH
56955: PPUSH
56956: PPUSH
56957: PPUSH
// if not base_units then
56958: LD_VAR 0 1
56962: NOT
56963: IFFALSE 56967
// exit ;
56965: GO 57054
// result := false ;
56967: LD_ADDR_VAR 0 2
56971: PUSH
56972: LD_INT 0
56974: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56975: LD_ADDR_VAR 0 5
56979: PUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: LD_INT 21
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PPUSH
56995: CALL_OW 72
56999: ST_TO_ADDR
// if not tmp then
57000: LD_VAR 0 5
57004: NOT
57005: IFFALSE 57009
// exit ;
57007: GO 57054
// for i in tmp do
57009: LD_ADDR_VAR 0 3
57013: PUSH
57014: LD_VAR 0 5
57018: PUSH
57019: FOR_IN
57020: IFFALSE 57052
// begin result := EnemyInRange ( i , 22 ) ;
57022: LD_ADDR_VAR 0 2
57026: PUSH
57027: LD_VAR 0 3
57031: PPUSH
57032: LD_INT 22
57034: PPUSH
57035: CALL 54723 0 2
57039: ST_TO_ADDR
// if result then
57040: LD_VAR 0 2
57044: IFFALSE 57050
// exit ;
57046: POP
57047: POP
57048: GO 57054
// end ;
57050: GO 57019
57052: POP
57053: POP
// end ;
57054: LD_VAR 0 2
57058: RET
// export function FilterByTag ( units , tag ) ; begin
57059: LD_INT 0
57061: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 1
57071: PPUSH
57072: LD_INT 120
57074: PUSH
57075: LD_VAR 0 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PPUSH
57084: CALL_OW 72
57088: ST_TO_ADDR
// end ;
57089: LD_VAR 0 3
57093: RET
// export function IsDriver ( un ) ; begin
57094: LD_INT 0
57096: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57097: LD_ADDR_VAR 0 2
57101: PUSH
57102: LD_VAR 0 1
57106: PUSH
57107: LD_INT 55
57109: PUSH
57110: EMPTY
57111: LIST
57112: PPUSH
57113: CALL_OW 69
57117: IN
57118: ST_TO_ADDR
// end ;
57119: LD_VAR 0 2
57123: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57124: LD_INT 0
57126: PPUSH
57127: PPUSH
// list := [ ] ;
57128: LD_ADDR_VAR 0 5
57132: PUSH
57133: EMPTY
57134: ST_TO_ADDR
// case d of 0 :
57135: LD_VAR 0 3
57139: PUSH
57140: LD_INT 0
57142: DOUBLE
57143: EQUAL
57144: IFTRUE 57148
57146: GO 57281
57148: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57149: LD_ADDR_VAR 0 5
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_INT 4
57161: MINUS
57162: PUSH
57163: LD_VAR 0 2
57167: PUSH
57168: LD_INT 4
57170: MINUS
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: PUSH
57180: LD_VAR 0 1
57184: PUSH
57185: LD_INT 3
57187: MINUS
57188: PUSH
57189: LD_VAR 0 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: PUSH
57202: LD_VAR 0 1
57206: PUSH
57207: LD_INT 4
57209: PLUS
57210: PUSH
57211: LD_VAR 0 2
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: PUSH
57224: LD_VAR 0 1
57228: PUSH
57229: LD_INT 3
57231: PLUS
57232: PUSH
57233: LD_VAR 0 2
57237: PUSH
57238: LD_INT 3
57240: PLUS
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: PUSH
57250: LD_VAR 0 1
57254: PUSH
57255: LD_VAR 0 2
57259: PUSH
57260: LD_INT 4
57262: PLUS
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// end ; 1 :
57279: GO 57979
57281: LD_INT 1
57283: DOUBLE
57284: EQUAL
57285: IFTRUE 57289
57287: GO 57422
57289: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57290: LD_ADDR_VAR 0 5
57294: PUSH
57295: LD_VAR 0 1
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_INT 4
57307: MINUS
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: PUSH
57317: LD_VAR 0 1
57321: PUSH
57322: LD_INT 3
57324: MINUS
57325: PUSH
57326: LD_VAR 0 2
57330: PUSH
57331: LD_INT 3
57333: MINUS
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: PUSH
57343: LD_VAR 0 1
57347: PUSH
57348: LD_INT 4
57350: MINUS
57351: PUSH
57352: LD_VAR 0 2
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: PUSH
57365: LD_VAR 0 1
57369: PUSH
57370: LD_VAR 0 2
57374: PUSH
57375: LD_INT 3
57377: PLUS
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: PUSH
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 4
57394: PLUS
57395: PUSH
57396: LD_VAR 0 2
57400: PUSH
57401: LD_INT 4
57403: PLUS
57404: PUSH
57405: LD_INT 5
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: ST_TO_ADDR
// end ; 2 :
57420: GO 57979
57422: LD_INT 2
57424: DOUBLE
57425: EQUAL
57426: IFTRUE 57430
57428: GO 57559
57430: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57431: LD_ADDR_VAR 0 5
57435: PUSH
57436: LD_VAR 0 1
57440: PUSH
57441: LD_VAR 0 2
57445: PUSH
57446: LD_INT 3
57448: MINUS
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: PUSH
57458: LD_VAR 0 1
57462: PUSH
57463: LD_INT 4
57465: PLUS
57466: PUSH
57467: LD_VAR 0 2
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: PUSH
57480: LD_VAR 0 1
57484: PUSH
57485: LD_VAR 0 2
57489: PUSH
57490: LD_INT 4
57492: PLUS
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: PUSH
57502: LD_VAR 0 1
57506: PUSH
57507: LD_INT 3
57509: MINUS
57510: PUSH
57511: LD_VAR 0 2
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: PUSH
57524: LD_VAR 0 1
57528: PUSH
57529: LD_INT 4
57531: MINUS
57532: PUSH
57533: LD_VAR 0 2
57537: PUSH
57538: LD_INT 4
57540: MINUS
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// end ; 3 :
57557: GO 57979
57559: LD_INT 3
57561: DOUBLE
57562: EQUAL
57563: IFTRUE 57567
57565: GO 57700
57567: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57568: LD_ADDR_VAR 0 5
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_INT 3
57580: PLUS
57581: PUSH
57582: LD_VAR 0 2
57586: PUSH
57587: LD_INT 4
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: PUSH
57595: LD_VAR 0 1
57599: PUSH
57600: LD_INT 4
57602: PLUS
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_INT 4
57611: PLUS
57612: PUSH
57613: LD_INT 5
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: PUSH
57621: LD_VAR 0 1
57625: PUSH
57626: LD_INT 4
57628: MINUS
57629: PUSH
57630: LD_VAR 0 2
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: PUSH
57643: LD_VAR 0 1
57647: PUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_INT 4
57655: MINUS
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: PUSH
57665: LD_VAR 0 1
57669: PUSH
57670: LD_INT 3
57672: MINUS
57673: PUSH
57674: LD_VAR 0 2
57678: PUSH
57679: LD_INT 3
57681: MINUS
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// end ; 4 :
57698: GO 57979
57700: LD_INT 4
57702: DOUBLE
57703: EQUAL
57704: IFTRUE 57708
57706: GO 57841
57708: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57709: LD_ADDR_VAR 0 5
57713: PUSH
57714: LD_VAR 0 1
57718: PUSH
57719: LD_VAR 0 2
57723: PUSH
57724: LD_INT 4
57726: PLUS
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: PUSH
57736: LD_VAR 0 1
57740: PUSH
57741: LD_INT 3
57743: PLUS
57744: PUSH
57745: LD_VAR 0 2
57749: PUSH
57750: LD_INT 3
57752: PLUS
57753: PUSH
57754: LD_INT 5
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: PUSH
57762: LD_VAR 0 1
57766: PUSH
57767: LD_INT 4
57769: PLUS
57770: PUSH
57771: LD_VAR 0 2
57775: PUSH
57776: LD_INT 4
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: PUSH
57784: LD_VAR 0 1
57788: PUSH
57789: LD_VAR 0 2
57793: PUSH
57794: LD_INT 3
57796: MINUS
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: PUSH
57806: LD_VAR 0 1
57810: PUSH
57811: LD_INT 4
57813: MINUS
57814: PUSH
57815: LD_VAR 0 2
57819: PUSH
57820: LD_INT 4
57822: MINUS
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: ST_TO_ADDR
// end ; 5 :
57839: GO 57979
57841: LD_INT 5
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57849
57847: GO 57978
57849: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57850: LD_ADDR_VAR 0 5
57854: PUSH
57855: LD_VAR 0 1
57859: PUSH
57860: LD_INT 4
57862: MINUS
57863: PUSH
57864: LD_VAR 0 2
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: PUSH
57877: LD_VAR 0 1
57881: PUSH
57882: LD_VAR 0 2
57886: PUSH
57887: LD_INT 4
57889: MINUS
57890: PUSH
57891: LD_INT 3
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: PUSH
57899: LD_VAR 0 1
57903: PUSH
57904: LD_INT 4
57906: PLUS
57907: PUSH
57908: LD_VAR 0 2
57912: PUSH
57913: LD_INT 4
57915: PLUS
57916: PUSH
57917: LD_INT 5
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: LIST
57924: PUSH
57925: LD_VAR 0 1
57929: PUSH
57930: LD_INT 3
57932: PLUS
57933: PUSH
57934: LD_VAR 0 2
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: PUSH
57947: LD_VAR 0 1
57951: PUSH
57952: LD_VAR 0 2
57956: PUSH
57957: LD_INT 3
57959: PLUS
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// end ; end ;
57976: GO 57979
57978: POP
// result := list ;
57979: LD_ADDR_VAR 0 4
57983: PUSH
57984: LD_VAR 0 5
57988: ST_TO_ADDR
// end ;
57989: LD_VAR 0 4
57993: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57994: LD_INT 0
57996: PPUSH
57997: PPUSH
57998: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57999: LD_VAR 0 1
58003: NOT
58004: PUSH
58005: LD_VAR 0 2
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: IN
58028: NOT
58029: OR
58030: IFFALSE 58034
// exit ;
58032: GO 58126
// tmp := [ ] ;
58034: LD_ADDR_VAR 0 5
58038: PUSH
58039: EMPTY
58040: ST_TO_ADDR
// for i in units do
58041: LD_ADDR_VAR 0 4
58045: PUSH
58046: LD_VAR 0 1
58050: PUSH
58051: FOR_IN
58052: IFFALSE 58095
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58054: LD_ADDR_VAR 0 5
58058: PUSH
58059: LD_VAR 0 5
58063: PPUSH
58064: LD_VAR 0 5
58068: PUSH
58069: LD_INT 1
58071: PLUS
58072: PPUSH
58073: LD_VAR 0 4
58077: PPUSH
58078: LD_VAR 0 2
58082: PPUSH
58083: CALL_OW 259
58087: PPUSH
58088: CALL_OW 2
58092: ST_TO_ADDR
58093: GO 58051
58095: POP
58096: POP
// if not tmp then
58097: LD_VAR 0 5
58101: NOT
58102: IFFALSE 58106
// exit ;
58104: GO 58126
// result := SortListByListDesc ( units , tmp ) ;
58106: LD_ADDR_VAR 0 3
58110: PUSH
58111: LD_VAR 0 1
58115: PPUSH
58116: LD_VAR 0 5
58120: PPUSH
58121: CALL_OW 77
58125: ST_TO_ADDR
// end ;
58126: LD_VAR 0 3
58130: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58131: LD_INT 0
58133: PPUSH
58134: PPUSH
58135: PPUSH
// result := false ;
58136: LD_ADDR_VAR 0 3
58140: PUSH
58141: LD_INT 0
58143: ST_TO_ADDR
// x := GetX ( building ) ;
58144: LD_ADDR_VAR 0 4
58148: PUSH
58149: LD_VAR 0 2
58153: PPUSH
58154: CALL_OW 250
58158: ST_TO_ADDR
// y := GetY ( building ) ;
58159: LD_ADDR_VAR 0 5
58163: PUSH
58164: LD_VAR 0 2
58168: PPUSH
58169: CALL_OW 251
58173: ST_TO_ADDR
// if not building or not x or not y then
58174: LD_VAR 0 2
58178: NOT
58179: PUSH
58180: LD_VAR 0 4
58184: NOT
58185: OR
58186: PUSH
58187: LD_VAR 0 5
58191: NOT
58192: OR
58193: IFFALSE 58197
// exit ;
58195: GO 58289
// if GetTaskList ( unit ) then
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL_OW 437
58206: IFFALSE 58289
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58208: LD_STRING e
58210: PUSH
58211: LD_VAR 0 1
58215: PPUSH
58216: CALL_OW 437
58220: PUSH
58221: LD_INT 1
58223: ARRAY
58224: PUSH
58225: LD_INT 1
58227: ARRAY
58228: EQUAL
58229: PUSH
58230: LD_VAR 0 4
58234: PUSH
58235: LD_VAR 0 1
58239: PPUSH
58240: CALL_OW 437
58244: PUSH
58245: LD_INT 1
58247: ARRAY
58248: PUSH
58249: LD_INT 2
58251: ARRAY
58252: EQUAL
58253: AND
58254: PUSH
58255: LD_VAR 0 5
58259: PUSH
58260: LD_VAR 0 1
58264: PPUSH
58265: CALL_OW 437
58269: PUSH
58270: LD_INT 1
58272: ARRAY
58273: PUSH
58274: LD_INT 3
58276: ARRAY
58277: EQUAL
58278: AND
58279: IFFALSE 58289
// result := true end ;
58281: LD_ADDR_VAR 0 3
58285: PUSH
58286: LD_INT 1
58288: ST_TO_ADDR
// end ;
58289: LD_VAR 0 3
58293: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58294: LD_INT 0
58296: PPUSH
// result := false ;
58297: LD_ADDR_VAR 0 4
58301: PUSH
58302: LD_INT 0
58304: ST_TO_ADDR
// if GetTaskList ( unit ) then
58305: LD_VAR 0 1
58309: PPUSH
58310: CALL_OW 437
58314: IFFALSE 58397
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58316: LD_STRING M
58318: PUSH
58319: LD_VAR 0 1
58323: PPUSH
58324: CALL_OW 437
58328: PUSH
58329: LD_INT 1
58331: ARRAY
58332: PUSH
58333: LD_INT 1
58335: ARRAY
58336: EQUAL
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: CALL_OW 437
58352: PUSH
58353: LD_INT 1
58355: ARRAY
58356: PUSH
58357: LD_INT 2
58359: ARRAY
58360: EQUAL
58361: AND
58362: PUSH
58363: LD_VAR 0 3
58367: PUSH
58368: LD_VAR 0 1
58372: PPUSH
58373: CALL_OW 437
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PUSH
58382: LD_INT 3
58384: ARRAY
58385: EQUAL
58386: AND
58387: IFFALSE 58397
// result := true ;
58389: LD_ADDR_VAR 0 4
58393: PUSH
58394: LD_INT 1
58396: ST_TO_ADDR
// end ; end ;
58397: LD_VAR 0 4
58401: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58402: LD_INT 0
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
// if not unit or not area then
58408: LD_VAR 0 1
58412: NOT
58413: PUSH
58414: LD_VAR 0 2
58418: NOT
58419: OR
58420: IFFALSE 58424
// exit ;
58422: GO 58588
// tmp := AreaToList ( area , i ) ;
58424: LD_ADDR_VAR 0 6
58428: PUSH
58429: LD_VAR 0 2
58433: PPUSH
58434: LD_VAR 0 5
58438: PPUSH
58439: CALL_OW 517
58443: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58444: LD_ADDR_VAR 0 5
58448: PUSH
58449: DOUBLE
58450: LD_INT 1
58452: DEC
58453: ST_TO_ADDR
58454: LD_VAR 0 6
58458: PUSH
58459: LD_INT 1
58461: ARRAY
58462: PUSH
58463: FOR_TO
58464: IFFALSE 58586
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58466: LD_ADDR_VAR 0 7
58470: PUSH
58471: LD_VAR 0 6
58475: PUSH
58476: LD_INT 1
58478: ARRAY
58479: PUSH
58480: LD_VAR 0 5
58484: ARRAY
58485: PUSH
58486: LD_VAR 0 6
58490: PUSH
58491: LD_INT 2
58493: ARRAY
58494: PUSH
58495: LD_VAR 0 5
58499: ARRAY
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58505: LD_VAR 0 7
58509: PUSH
58510: LD_INT 1
58512: ARRAY
58513: PPUSH
58514: LD_VAR 0 7
58518: PUSH
58519: LD_INT 2
58521: ARRAY
58522: PPUSH
58523: CALL_OW 428
58527: PUSH
58528: LD_INT 0
58530: EQUAL
58531: IFFALSE 58584
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58533: LD_VAR 0 1
58537: PPUSH
58538: LD_VAR 0 7
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PPUSH
58547: LD_VAR 0 7
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: PPUSH
58556: LD_VAR 0 3
58560: PPUSH
58561: CALL_OW 48
// result := IsPlaced ( unit ) ;
58565: LD_ADDR_VAR 0 4
58569: PUSH
58570: LD_VAR 0 1
58574: PPUSH
58575: CALL_OW 305
58579: ST_TO_ADDR
// exit ;
58580: POP
58581: POP
58582: GO 58588
// end ; end ;
58584: GO 58463
58586: POP
58587: POP
// end ;
58588: LD_VAR 0 4
58592: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58593: LD_INT 0
58595: PPUSH
58596: PPUSH
58597: PPUSH
// if not side or side > 8 then
58598: LD_VAR 0 1
58602: NOT
58603: PUSH
58604: LD_VAR 0 1
58608: PUSH
58609: LD_INT 8
58611: GREATER
58612: OR
58613: IFFALSE 58617
// exit ;
58615: GO 58804
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58617: LD_ADDR_VAR 0 4
58621: PUSH
58622: LD_INT 22
58624: PUSH
58625: LD_VAR 0 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 21
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PPUSH
58648: CALL_OW 69
58652: ST_TO_ADDR
// if not tmp then
58653: LD_VAR 0 4
58657: NOT
58658: IFFALSE 58662
// exit ;
58660: GO 58804
// enable_addtolog := true ;
58662: LD_ADDR_OWVAR 81
58666: PUSH
58667: LD_INT 1
58669: ST_TO_ADDR
// AddToLog ( [ ) ;
58670: LD_STRING [
58672: PPUSH
58673: CALL_OW 561
// for i in tmp do
58677: LD_ADDR_VAR 0 3
58681: PUSH
58682: LD_VAR 0 4
58686: PUSH
58687: FOR_IN
58688: IFFALSE 58795
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58690: LD_STRING [
58692: PUSH
58693: LD_VAR 0 3
58697: PPUSH
58698: CALL_OW 266
58702: STR
58703: PUSH
58704: LD_STRING , 
58706: STR
58707: PUSH
58708: LD_VAR 0 3
58712: PPUSH
58713: CALL_OW 250
58717: STR
58718: PUSH
58719: LD_STRING , 
58721: STR
58722: PUSH
58723: LD_VAR 0 3
58727: PPUSH
58728: CALL_OW 251
58732: STR
58733: PUSH
58734: LD_STRING , 
58736: STR
58737: PUSH
58738: LD_VAR 0 3
58742: PPUSH
58743: CALL_OW 254
58747: STR
58748: PUSH
58749: LD_STRING , 
58751: STR
58752: PUSH
58753: LD_VAR 0 3
58757: PPUSH
58758: LD_INT 1
58760: PPUSH
58761: CALL_OW 268
58765: STR
58766: PUSH
58767: LD_STRING , 
58769: STR
58770: PUSH
58771: LD_VAR 0 3
58775: PPUSH
58776: LD_INT 2
58778: PPUSH
58779: CALL_OW 268
58783: STR
58784: PUSH
58785: LD_STRING ],
58787: STR
58788: PPUSH
58789: CALL_OW 561
// end ;
58793: GO 58687
58795: POP
58796: POP
// AddToLog ( ]; ) ;
58797: LD_STRING ];
58799: PPUSH
58800: CALL_OW 561
// end ;
58804: LD_VAR 0 2
58808: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
// if not area or not rate or not max then
58816: LD_VAR 0 1
58820: NOT
58821: PUSH
58822: LD_VAR 0 2
58826: NOT
58827: OR
58828: PUSH
58829: LD_VAR 0 4
58833: NOT
58834: OR
58835: IFFALSE 58839
// exit ;
58837: GO 59028
// while 1 do
58839: LD_INT 1
58841: IFFALSE 59028
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58843: LD_ADDR_VAR 0 9
58847: PUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: LD_INT 1
58855: PPUSH
58856: CALL_OW 287
58860: PUSH
58861: LD_INT 10
58863: MUL
58864: ST_TO_ADDR
// r := rate / 10 ;
58865: LD_ADDR_VAR 0 7
58869: PUSH
58870: LD_VAR 0 2
58874: PUSH
58875: LD_INT 10
58877: DIVREAL
58878: ST_TO_ADDR
// time := 1 1$00 ;
58879: LD_ADDR_VAR 0 8
58883: PUSH
58884: LD_INT 2100
58886: ST_TO_ADDR
// if amount < min then
58887: LD_VAR 0 9
58891: PUSH
58892: LD_VAR 0 3
58896: LESS
58897: IFFALSE 58915
// r := r * 2 else
58899: LD_ADDR_VAR 0 7
58903: PUSH
58904: LD_VAR 0 7
58908: PUSH
58909: LD_INT 2
58911: MUL
58912: ST_TO_ADDR
58913: GO 58941
// if amount > max then
58915: LD_VAR 0 9
58919: PUSH
58920: LD_VAR 0 4
58924: GREATER
58925: IFFALSE 58941
// r := r / 2 ;
58927: LD_ADDR_VAR 0 7
58931: PUSH
58932: LD_VAR 0 7
58936: PUSH
58937: LD_INT 2
58939: DIVREAL
58940: ST_TO_ADDR
// time := time / r ;
58941: LD_ADDR_VAR 0 8
58945: PUSH
58946: LD_VAR 0 8
58950: PUSH
58951: LD_VAR 0 7
58955: DIVREAL
58956: ST_TO_ADDR
// if time < 0 then
58957: LD_VAR 0 8
58961: PUSH
58962: LD_INT 0
58964: LESS
58965: IFFALSE 58982
// time := time * - 1 ;
58967: LD_ADDR_VAR 0 8
58971: PUSH
58972: LD_VAR 0 8
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: MUL
58981: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58982: LD_VAR 0 8
58986: PUSH
58987: LD_INT 35
58989: PPUSH
58990: LD_INT 875
58992: PPUSH
58993: CALL_OW 12
58997: PLUS
58998: PPUSH
58999: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59003: LD_INT 1
59005: PPUSH
59006: LD_INT 5
59008: PPUSH
59009: CALL_OW 12
59013: PPUSH
59014: LD_VAR 0 1
59018: PPUSH
59019: LD_INT 1
59021: PPUSH
59022: CALL_OW 55
// end ;
59026: GO 58839
// end ;
59028: LD_VAR 0 5
59032: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59033: LD_INT 0
59035: PPUSH
59036: PPUSH
59037: PPUSH
59038: PPUSH
59039: PPUSH
59040: PPUSH
59041: PPUSH
59042: PPUSH
// if not turrets or not factories then
59043: LD_VAR 0 1
59047: NOT
59048: PUSH
59049: LD_VAR 0 2
59053: NOT
59054: OR
59055: IFFALSE 59059
// exit ;
59057: GO 59366
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59059: LD_ADDR_VAR 0 10
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: LD_INT 6
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: LD_INT 4
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 5
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 24
59101: PUSH
59102: LD_INT 25
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 23
59111: PUSH
59112: LD_INT 27
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 42
59125: PUSH
59126: LD_INT 43
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 44
59135: PUSH
59136: LD_INT 46
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 45
59145: PUSH
59146: LD_INT 47
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// result := [ ] ;
59163: LD_ADDR_VAR 0 3
59167: PUSH
59168: EMPTY
59169: ST_TO_ADDR
// for i in turrets do
59170: LD_ADDR_VAR 0 4
59174: PUSH
59175: LD_VAR 0 1
59179: PUSH
59180: FOR_IN
59181: IFFALSE 59364
// begin nat := GetNation ( i ) ;
59183: LD_ADDR_VAR 0 7
59187: PUSH
59188: LD_VAR 0 4
59192: PPUSH
59193: CALL_OW 248
59197: ST_TO_ADDR
// weapon := 0 ;
59198: LD_ADDR_VAR 0 8
59202: PUSH
59203: LD_INT 0
59205: ST_TO_ADDR
// if not nat then
59206: LD_VAR 0 7
59210: NOT
59211: IFFALSE 59215
// continue ;
59213: GO 59180
// for j in list [ nat ] do
59215: LD_ADDR_VAR 0 5
59219: PUSH
59220: LD_VAR 0 10
59224: PUSH
59225: LD_VAR 0 7
59229: ARRAY
59230: PUSH
59231: FOR_IN
59232: IFFALSE 59273
// if GetBWeapon ( i ) = j [ 1 ] then
59234: LD_VAR 0 4
59238: PPUSH
59239: CALL_OW 269
59243: PUSH
59244: LD_VAR 0 5
59248: PUSH
59249: LD_INT 1
59251: ARRAY
59252: EQUAL
59253: IFFALSE 59271
// begin weapon := j [ 2 ] ;
59255: LD_ADDR_VAR 0 8
59259: PUSH
59260: LD_VAR 0 5
59264: PUSH
59265: LD_INT 2
59267: ARRAY
59268: ST_TO_ADDR
// break ;
59269: GO 59273
// end ;
59271: GO 59231
59273: POP
59274: POP
// if not weapon then
59275: LD_VAR 0 8
59279: NOT
59280: IFFALSE 59284
// continue ;
59282: GO 59180
// for k in factories do
59284: LD_ADDR_VAR 0 6
59288: PUSH
59289: LD_VAR 0 2
59293: PUSH
59294: FOR_IN
59295: IFFALSE 59360
// begin weapons := AvailableWeaponList ( k ) ;
59297: LD_ADDR_VAR 0 9
59301: PUSH
59302: LD_VAR 0 6
59306: PPUSH
59307: CALL_OW 478
59311: ST_TO_ADDR
// if not weapons then
59312: LD_VAR 0 9
59316: NOT
59317: IFFALSE 59321
// continue ;
59319: GO 59294
// if weapon in weapons then
59321: LD_VAR 0 8
59325: PUSH
59326: LD_VAR 0 9
59330: IN
59331: IFFALSE 59358
// begin result := [ i , weapon ] ;
59333: LD_ADDR_VAR 0 3
59337: PUSH
59338: LD_VAR 0 4
59342: PUSH
59343: LD_VAR 0 8
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: ST_TO_ADDR
// exit ;
59352: POP
59353: POP
59354: POP
59355: POP
59356: GO 59366
// end ; end ;
59358: GO 59294
59360: POP
59361: POP
// end ;
59362: GO 59180
59364: POP
59365: POP
// end ;
59366: LD_VAR 0 3
59370: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59371: LD_INT 0
59373: PPUSH
// if not side or side > 8 then
59374: LD_VAR 0 3
59378: NOT
59379: PUSH
59380: LD_VAR 0 3
59384: PUSH
59385: LD_INT 8
59387: GREATER
59388: OR
59389: IFFALSE 59393
// exit ;
59391: GO 59452
// if not range then
59393: LD_VAR 0 4
59397: NOT
59398: IFFALSE 59409
// range := - 12 ;
59400: LD_ADDR_VAR 0 4
59404: PUSH
59405: LD_INT 12
59407: NEG
59408: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59409: LD_VAR 0 1
59413: PPUSH
59414: LD_VAR 0 2
59418: PPUSH
59419: LD_VAR 0 3
59423: PPUSH
59424: LD_VAR 0 4
59428: PPUSH
59429: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59433: LD_VAR 0 1
59437: PPUSH
59438: LD_VAR 0 2
59442: PPUSH
59443: LD_VAR 0 3
59447: PPUSH
59448: CALL_OW 331
// end ;
59452: LD_VAR 0 5
59456: RET
// export function Video ( mode ) ; begin
59457: LD_INT 0
59459: PPUSH
// ingame_video = mode ;
59460: LD_ADDR_OWVAR 52
59464: PUSH
59465: LD_VAR 0 1
59469: ST_TO_ADDR
// interface_hidden = mode ;
59470: LD_ADDR_OWVAR 54
59474: PUSH
59475: LD_VAR 0 1
59479: ST_TO_ADDR
// end ;
59480: LD_VAR 0 2
59484: RET
// export function Join ( array , element ) ; begin
59485: LD_INT 0
59487: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59488: LD_ADDR_VAR 0 3
59492: PUSH
59493: LD_VAR 0 1
59497: PPUSH
59498: LD_VAR 0 1
59502: PUSH
59503: LD_INT 1
59505: PLUS
59506: PPUSH
59507: LD_VAR 0 2
59511: PPUSH
59512: CALL_OW 1
59516: ST_TO_ADDR
// end ;
59517: LD_VAR 0 3
59521: RET
// export function JoinUnion ( array , element ) ; begin
59522: LD_INT 0
59524: PPUSH
// result := array union element ;
59525: LD_ADDR_VAR 0 3
59529: PUSH
59530: LD_VAR 0 1
59534: PUSH
59535: LD_VAR 0 2
59539: UNION
59540: ST_TO_ADDR
// end ;
59541: LD_VAR 0 3
59545: RET
// export function GetBehemoths ( side ) ; begin
59546: LD_INT 0
59548: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59549: LD_ADDR_VAR 0 2
59553: PUSH
59554: LD_INT 22
59556: PUSH
59557: LD_VAR 0 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 31
59568: PUSH
59569: LD_INT 25
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PPUSH
59580: CALL_OW 69
59584: ST_TO_ADDR
// end ;
59585: LD_VAR 0 2
59589: RET
// export function Shuffle ( array ) ; var i , index ; begin
59590: LD_INT 0
59592: PPUSH
59593: PPUSH
59594: PPUSH
// result := [ ] ;
59595: LD_ADDR_VAR 0 2
59599: PUSH
59600: EMPTY
59601: ST_TO_ADDR
// if not array then
59602: LD_VAR 0 1
59606: NOT
59607: IFFALSE 59611
// exit ;
59609: GO 59710
// Randomize ;
59611: CALL_OW 10
// for i = array downto 1 do
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: DOUBLE
59621: LD_VAR 0 1
59625: INC
59626: ST_TO_ADDR
59627: LD_INT 1
59629: PUSH
59630: FOR_DOWNTO
59631: IFFALSE 59708
// begin index := rand ( 1 , array ) ;
59633: LD_ADDR_VAR 0 4
59637: PUSH
59638: LD_INT 1
59640: PPUSH
59641: LD_VAR 0 1
59645: PPUSH
59646: CALL_OW 12
59650: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59651: LD_ADDR_VAR 0 2
59655: PUSH
59656: LD_VAR 0 2
59660: PPUSH
59661: LD_VAR 0 2
59665: PUSH
59666: LD_INT 1
59668: PLUS
59669: PPUSH
59670: LD_VAR 0 1
59674: PUSH
59675: LD_VAR 0 4
59679: ARRAY
59680: PPUSH
59681: CALL_OW 2
59685: ST_TO_ADDR
// array := Delete ( array , index ) ;
59686: LD_ADDR_VAR 0 1
59690: PUSH
59691: LD_VAR 0 1
59695: PPUSH
59696: LD_VAR 0 4
59700: PPUSH
59701: CALL_OW 3
59705: ST_TO_ADDR
// end ;
59706: GO 59630
59708: POP
59709: POP
// end ;
59710: LD_VAR 0 2
59714: RET
// export function GetBaseMaterials ( base ) ; begin
59715: LD_INT 0
59717: PPUSH
// result := [ 0 , 0 , 0 ] ;
59718: LD_ADDR_VAR 0 2
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// if not base then
59737: LD_VAR 0 1
59741: NOT
59742: IFFALSE 59746
// exit ;
59744: GO 59795
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59746: LD_ADDR_VAR 0 2
59750: PUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_INT 1
59758: PPUSH
59759: CALL_OW 275
59763: PUSH
59764: LD_VAR 0 1
59768: PPUSH
59769: LD_INT 2
59771: PPUSH
59772: CALL_OW 275
59776: PUSH
59777: LD_VAR 0 1
59781: PPUSH
59782: LD_INT 3
59784: PPUSH
59785: CALL_OW 275
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// end ;
59795: LD_VAR 0 2
59799: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59800: LD_INT 0
59802: PPUSH
59803: PPUSH
// result := array ;
59804: LD_ADDR_VAR 0 3
59808: PUSH
59809: LD_VAR 0 1
59813: ST_TO_ADDR
// if size >= result then
59814: LD_VAR 0 2
59818: PUSH
59819: LD_VAR 0 3
59823: GREATEREQUAL
59824: IFFALSE 59828
// exit ;
59826: GO 59878
// if size then
59828: LD_VAR 0 2
59832: IFFALSE 59878
// for i := array downto size do
59834: LD_ADDR_VAR 0 4
59838: PUSH
59839: DOUBLE
59840: LD_VAR 0 1
59844: INC
59845: ST_TO_ADDR
59846: LD_VAR 0 2
59850: PUSH
59851: FOR_DOWNTO
59852: IFFALSE 59876
// result := Delete ( result , result ) ;
59854: LD_ADDR_VAR 0 3
59858: PUSH
59859: LD_VAR 0 3
59863: PPUSH
59864: LD_VAR 0 3
59868: PPUSH
59869: CALL_OW 3
59873: ST_TO_ADDR
59874: GO 59851
59876: POP
59877: POP
// end ;
59878: LD_VAR 0 3
59882: RET
// export function ComExit ( unit ) ; var tmp ; begin
59883: LD_INT 0
59885: PPUSH
59886: PPUSH
// if not IsInUnit ( unit ) then
59887: LD_VAR 0 1
59891: PPUSH
59892: CALL_OW 310
59896: NOT
59897: IFFALSE 59901
// exit ;
59899: GO 59961
// tmp := IsInUnit ( unit ) ;
59901: LD_ADDR_VAR 0 3
59905: PUSH
59906: LD_VAR 0 1
59910: PPUSH
59911: CALL_OW 310
59915: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59916: LD_VAR 0 3
59920: PPUSH
59921: CALL_OW 247
59925: PUSH
59926: LD_INT 2
59928: EQUAL
59929: IFFALSE 59942
// ComExitVehicle ( unit ) else
59931: LD_VAR 0 1
59935: PPUSH
59936: CALL_OW 121
59940: GO 59951
// ComExitBuilding ( unit ) ;
59942: LD_VAR 0 1
59946: PPUSH
59947: CALL_OW 122
// result := tmp ;
59951: LD_ADDR_VAR 0 2
59955: PUSH
59956: LD_VAR 0 3
59960: ST_TO_ADDR
// end ;
59961: LD_VAR 0 2
59965: RET
// export function ComExitAll ( units ) ; var i ; begin
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
// if not units then
59970: LD_VAR 0 1
59974: NOT
59975: IFFALSE 59979
// exit ;
59977: GO 60005
// for i in units do
59979: LD_ADDR_VAR 0 3
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: FOR_IN
59990: IFFALSE 60003
// ComExit ( i ) ;
59992: LD_VAR 0 3
59996: PPUSH
59997: CALL 59883 0 1
60001: GO 59989
60003: POP
60004: POP
// end ;
60005: LD_VAR 0 2
60009: RET
// export function ResetHc ; begin
60010: LD_INT 0
60012: PPUSH
// InitHc ;
60013: CALL_OW 19
// hc_importance := 0 ;
60017: LD_ADDR_OWVAR 32
60021: PUSH
60022: LD_INT 0
60024: ST_TO_ADDR
// end ;
60025: LD_VAR 0 1
60029: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60030: LD_INT 0
60032: PPUSH
60033: PPUSH
60034: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60035: LD_ADDR_VAR 0 6
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: LD_VAR 0 3
60049: PLUS
60050: PUSH
60051: LD_INT 2
60053: DIV
60054: ST_TO_ADDR
// if _x < 0 then
60055: LD_VAR 0 6
60059: PUSH
60060: LD_INT 0
60062: LESS
60063: IFFALSE 60080
// _x := _x * - 1 ;
60065: LD_ADDR_VAR 0 6
60069: PUSH
60070: LD_VAR 0 6
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: MUL
60079: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60080: LD_ADDR_VAR 0 7
60084: PUSH
60085: LD_VAR 0 2
60089: PUSH
60090: LD_VAR 0 4
60094: PLUS
60095: PUSH
60096: LD_INT 2
60098: DIV
60099: ST_TO_ADDR
// if _y < 0 then
60100: LD_VAR 0 7
60104: PUSH
60105: LD_INT 0
60107: LESS
60108: IFFALSE 60125
// _y := _y * - 1 ;
60110: LD_ADDR_VAR 0 7
60114: PUSH
60115: LD_VAR 0 7
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: MUL
60124: ST_TO_ADDR
// result := [ _x , _y ] ;
60125: LD_ADDR_VAR 0 5
60129: PUSH
60130: LD_VAR 0 6
60134: PUSH
60135: LD_VAR 0 7
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// end ;
60144: LD_VAR 0 5
60148: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60149: LD_INT 0
60151: PPUSH
60152: PPUSH
60153: PPUSH
60154: PPUSH
// task := GetTaskList ( unit ) ;
60155: LD_ADDR_VAR 0 7
60159: PUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL_OW 437
60169: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60170: LD_VAR 0 7
60174: NOT
60175: PUSH
60176: LD_VAR 0 1
60180: PPUSH
60181: LD_VAR 0 2
60185: PPUSH
60186: CALL_OW 308
60190: NOT
60191: AND
60192: IFFALSE 60196
// exit ;
60194: GO 60314
// if IsInArea ( unit , area ) then
60196: LD_VAR 0 1
60200: PPUSH
60201: LD_VAR 0 2
60205: PPUSH
60206: CALL_OW 308
60210: IFFALSE 60228
// begin ComMoveToArea ( unit , goAway ) ;
60212: LD_VAR 0 1
60216: PPUSH
60217: LD_VAR 0 3
60221: PPUSH
60222: CALL_OW 113
// exit ;
60226: GO 60314
// end ; if task [ 1 ] [ 1 ] <> M then
60228: LD_VAR 0 7
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PUSH
60237: LD_INT 1
60239: ARRAY
60240: PUSH
60241: LD_STRING M
60243: NONEQUAL
60244: IFFALSE 60248
// exit ;
60246: GO 60314
// x := task [ 1 ] [ 2 ] ;
60248: LD_ADDR_VAR 0 5
60252: PUSH
60253: LD_VAR 0 7
60257: PUSH
60258: LD_INT 1
60260: ARRAY
60261: PUSH
60262: LD_INT 2
60264: ARRAY
60265: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60266: LD_ADDR_VAR 0 6
60270: PUSH
60271: LD_VAR 0 7
60275: PUSH
60276: LD_INT 1
60278: ARRAY
60279: PUSH
60280: LD_INT 3
60282: ARRAY
60283: ST_TO_ADDR
// if InArea ( x , y , area ) then
60284: LD_VAR 0 5
60288: PPUSH
60289: LD_VAR 0 6
60293: PPUSH
60294: LD_VAR 0 2
60298: PPUSH
60299: CALL_OW 309
60303: IFFALSE 60314
// ComStop ( unit ) ;
60305: LD_VAR 0 1
60309: PPUSH
60310: CALL_OW 141
// end ;
60314: LD_VAR 0 4
60318: RET
// export function Abs ( value ) ; begin
60319: LD_INT 0
60321: PPUSH
// result := value ;
60322: LD_ADDR_VAR 0 2
60326: PUSH
60327: LD_VAR 0 1
60331: ST_TO_ADDR
// if value < 0 then
60332: LD_VAR 0 1
60336: PUSH
60337: LD_INT 0
60339: LESS
60340: IFFALSE 60357
// result := value * - 1 ;
60342: LD_ADDR_VAR 0 2
60346: PUSH
60347: LD_VAR 0 1
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: MUL
60356: ST_TO_ADDR
// end ;
60357: LD_VAR 0 2
60361: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60362: LD_INT 0
60364: PPUSH
60365: PPUSH
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
// if not unit or not building then
60372: LD_VAR 0 1
60376: NOT
60377: PUSH
60378: LD_VAR 0 2
60382: NOT
60383: OR
60384: IFFALSE 60388
// exit ;
60386: GO 60614
// x := GetX ( building ) ;
60388: LD_ADDR_VAR 0 4
60392: PUSH
60393: LD_VAR 0 2
60397: PPUSH
60398: CALL_OW 250
60402: ST_TO_ADDR
// y := GetY ( building ) ;
60403: LD_ADDR_VAR 0 6
60407: PUSH
60408: LD_VAR 0 2
60412: PPUSH
60413: CALL_OW 251
60417: ST_TO_ADDR
// d := GetDir ( building ) ;
60418: LD_ADDR_VAR 0 8
60422: PUSH
60423: LD_VAR 0 2
60427: PPUSH
60428: CALL_OW 254
60432: ST_TO_ADDR
// r := 4 ;
60433: LD_ADDR_VAR 0 9
60437: PUSH
60438: LD_INT 4
60440: ST_TO_ADDR
// for i := 1 to 5 do
60441: LD_ADDR_VAR 0 10
60445: PUSH
60446: DOUBLE
60447: LD_INT 1
60449: DEC
60450: ST_TO_ADDR
60451: LD_INT 5
60453: PUSH
60454: FOR_TO
60455: IFFALSE 60612
// begin _x := ShiftX ( x , d , r + i ) ;
60457: LD_ADDR_VAR 0 5
60461: PUSH
60462: LD_VAR 0 4
60466: PPUSH
60467: LD_VAR 0 8
60471: PPUSH
60472: LD_VAR 0 9
60476: PUSH
60477: LD_VAR 0 10
60481: PLUS
60482: PPUSH
60483: CALL_OW 272
60487: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60488: LD_ADDR_VAR 0 7
60492: PUSH
60493: LD_VAR 0 6
60497: PPUSH
60498: LD_VAR 0 8
60502: PPUSH
60503: LD_VAR 0 9
60507: PUSH
60508: LD_VAR 0 10
60512: PLUS
60513: PPUSH
60514: CALL_OW 273
60518: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60519: LD_VAR 0 5
60523: PPUSH
60524: LD_VAR 0 7
60528: PPUSH
60529: CALL_OW 488
60533: PUSH
60534: LD_VAR 0 5
60538: PPUSH
60539: LD_VAR 0 7
60543: PPUSH
60544: CALL_OW 428
60548: PPUSH
60549: CALL_OW 247
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: IN
60564: NOT
60565: AND
60566: IFFALSE 60610
// begin ComMoveXY ( unit , _x , _y ) ;
60568: LD_VAR 0 1
60572: PPUSH
60573: LD_VAR 0 5
60577: PPUSH
60578: LD_VAR 0 7
60582: PPUSH
60583: CALL_OW 111
// result := [ _x , _y ] ;
60587: LD_ADDR_VAR 0 3
60591: PUSH
60592: LD_VAR 0 5
60596: PUSH
60597: LD_VAR 0 7
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// exit ;
60606: POP
60607: POP
60608: GO 60614
// end ; end ;
60610: GO 60454
60612: POP
60613: POP
// end ;
60614: LD_VAR 0 3
60618: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60619: LD_INT 0
60621: PPUSH
60622: PPUSH
60623: PPUSH
// result := 0 ;
60624: LD_ADDR_VAR 0 3
60628: PUSH
60629: LD_INT 0
60631: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60632: LD_VAR 0 1
60636: PUSH
60637: LD_INT 0
60639: LESS
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: LD_INT 8
60648: GREATER
60649: OR
60650: PUSH
60651: LD_VAR 0 2
60655: PUSH
60656: LD_INT 0
60658: LESS
60659: OR
60660: PUSH
60661: LD_VAR 0 2
60665: PUSH
60666: LD_INT 8
60668: GREATER
60669: OR
60670: IFFALSE 60674
// exit ;
60672: GO 60749
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60674: LD_ADDR_VAR 0 4
60678: PUSH
60679: LD_INT 22
60681: PUSH
60682: LD_VAR 0 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PPUSH
60691: CALL_OW 69
60695: PUSH
60696: FOR_IN
60697: IFFALSE 60747
// begin un := UnitShoot ( i ) ;
60699: LD_ADDR_VAR 0 5
60703: PUSH
60704: LD_VAR 0 4
60708: PPUSH
60709: CALL_OW 504
60713: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60714: LD_VAR 0 5
60718: PPUSH
60719: CALL_OW 255
60723: PUSH
60724: LD_VAR 0 1
60728: EQUAL
60729: IFFALSE 60745
// begin result := un ;
60731: LD_ADDR_VAR 0 3
60735: PUSH
60736: LD_VAR 0 5
60740: ST_TO_ADDR
// exit ;
60741: POP
60742: POP
60743: GO 60749
// end ; end ;
60745: GO 60696
60747: POP
60748: POP
// end ;
60749: LD_VAR 0 3
60753: RET
// export function GetCargoBay ( units ) ; begin
60754: LD_INT 0
60756: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60757: LD_ADDR_VAR 0 2
60761: PUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 34
60772: PUSH
60773: LD_INT 12
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 34
60782: PUSH
60783: LD_INT 51
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 34
60792: PUSH
60793: LD_INT 32
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 34
60802: PUSH
60803: LD_EXP 79
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: PPUSH
60819: CALL_OW 72
60823: ST_TO_ADDR
// end ;
60824: LD_VAR 0 2
60828: RET
// export function Negate ( value ) ; begin
60829: LD_INT 0
60831: PPUSH
// result := not value ;
60832: LD_ADDR_VAR 0 2
60836: PUSH
60837: LD_VAR 0 1
60841: NOT
60842: ST_TO_ADDR
// end ;
60843: LD_VAR 0 2
60847: RET
// export function Inc ( value ) ; begin
60848: LD_INT 0
60850: PPUSH
// result := value + 1 ;
60851: LD_ADDR_VAR 0 2
60855: PUSH
60856: LD_VAR 0 1
60860: PUSH
60861: LD_INT 1
60863: PLUS
60864: ST_TO_ADDR
// end ;
60865: LD_VAR 0 2
60869: RET
// export function Dec ( value ) ; begin
60870: LD_INT 0
60872: PPUSH
// result := value - 1 ;
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: LD_VAR 0 1
60882: PUSH
60883: LD_INT 1
60885: MINUS
60886: ST_TO_ADDR
// end ;
60887: LD_VAR 0 2
60891: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60892: LD_INT 0
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
60898: PPUSH
60899: PPUSH
60900: PPUSH
60901: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60902: LD_VAR 0 1
60906: PPUSH
60907: LD_VAR 0 2
60911: PPUSH
60912: CALL_OW 488
60916: NOT
60917: PUSH
60918: LD_VAR 0 3
60922: PPUSH
60923: LD_VAR 0 4
60927: PPUSH
60928: CALL_OW 488
60932: NOT
60933: OR
60934: IFFALSE 60947
// begin result := - 1 ;
60936: LD_ADDR_VAR 0 5
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: ST_TO_ADDR
// exit ;
60945: GO 61182
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60947: LD_ADDR_VAR 0 12
60951: PUSH
60952: LD_VAR 0 1
60956: PPUSH
60957: LD_VAR 0 2
60961: PPUSH
60962: LD_VAR 0 3
60966: PPUSH
60967: LD_VAR 0 4
60971: PPUSH
60972: CALL 60030 0 4
60976: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60977: LD_ADDR_VAR 0 11
60981: PUSH
60982: LD_VAR 0 1
60986: PPUSH
60987: LD_VAR 0 2
60991: PPUSH
60992: LD_VAR 0 12
60996: PUSH
60997: LD_INT 1
60999: ARRAY
61000: PPUSH
61001: LD_VAR 0 12
61005: PUSH
61006: LD_INT 2
61008: ARRAY
61009: PPUSH
61010: CALL_OW 298
61014: ST_TO_ADDR
// distance := 9999 ;
61015: LD_ADDR_VAR 0 10
61019: PUSH
61020: LD_INT 9999
61022: ST_TO_ADDR
// for i := 0 to 5 do
61023: LD_ADDR_VAR 0 6
61027: PUSH
61028: DOUBLE
61029: LD_INT 0
61031: DEC
61032: ST_TO_ADDR
61033: LD_INT 5
61035: PUSH
61036: FOR_TO
61037: IFFALSE 61180
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61039: LD_ADDR_VAR 0 7
61043: PUSH
61044: LD_VAR 0 1
61048: PPUSH
61049: LD_VAR 0 6
61053: PPUSH
61054: LD_VAR 0 11
61058: PPUSH
61059: CALL_OW 272
61063: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61064: LD_ADDR_VAR 0 8
61068: PUSH
61069: LD_VAR 0 2
61073: PPUSH
61074: LD_VAR 0 6
61078: PPUSH
61079: LD_VAR 0 11
61083: PPUSH
61084: CALL_OW 273
61088: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61089: LD_VAR 0 7
61093: PPUSH
61094: LD_VAR 0 8
61098: PPUSH
61099: CALL_OW 488
61103: NOT
61104: IFFALSE 61108
// continue ;
61106: GO 61036
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61108: LD_ADDR_VAR 0 9
61112: PUSH
61113: LD_VAR 0 12
61117: PUSH
61118: LD_INT 1
61120: ARRAY
61121: PPUSH
61122: LD_VAR 0 12
61126: PUSH
61127: LD_INT 2
61129: ARRAY
61130: PPUSH
61131: LD_VAR 0 7
61135: PPUSH
61136: LD_VAR 0 8
61140: PPUSH
61141: CALL_OW 298
61145: ST_TO_ADDR
// if tmp < distance then
61146: LD_VAR 0 9
61150: PUSH
61151: LD_VAR 0 10
61155: LESS
61156: IFFALSE 61178
// begin result := i ;
61158: LD_ADDR_VAR 0 5
61162: PUSH
61163: LD_VAR 0 6
61167: ST_TO_ADDR
// distance := tmp ;
61168: LD_ADDR_VAR 0 10
61172: PUSH
61173: LD_VAR 0 9
61177: ST_TO_ADDR
// end ; end ;
61178: GO 61036
61180: POP
61181: POP
// end ;
61182: LD_VAR 0 5
61186: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61187: LD_INT 0
61189: PPUSH
61190: PPUSH
// if not driver or not IsInUnit ( driver ) then
61191: LD_VAR 0 1
61195: NOT
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: CALL_OW 310
61206: NOT
61207: OR
61208: IFFALSE 61212
// exit ;
61210: GO 61302
// vehicle := IsInUnit ( driver ) ;
61212: LD_ADDR_VAR 0 3
61216: PUSH
61217: LD_VAR 0 1
61221: PPUSH
61222: CALL_OW 310
61226: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61227: LD_VAR 0 1
61231: PPUSH
61232: LD_STRING \
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: LD_STRING E
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_VAR 0 3
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PPUSH
61298: CALL_OW 446
// end ;
61302: LD_VAR 0 2
61306: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61307: LD_INT 0
61309: PPUSH
61310: PPUSH
// if not driver or not IsInUnit ( driver ) then
61311: LD_VAR 0 1
61315: NOT
61316: PUSH
61317: LD_VAR 0 1
61321: PPUSH
61322: CALL_OW 310
61326: NOT
61327: OR
61328: IFFALSE 61332
// exit ;
61330: GO 61422
// vehicle := IsInUnit ( driver ) ;
61332: LD_ADDR_VAR 0 3
61336: PUSH
61337: LD_VAR 0 1
61341: PPUSH
61342: CALL_OW 310
61346: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61347: LD_VAR 0 1
61351: PPUSH
61352: LD_STRING \
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: PUSH
61382: LD_STRING E
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_VAR 0 3
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PPUSH
61418: CALL_OW 447
// end ;
61422: LD_VAR 0 2
61426: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61427: LD_INT 0
61429: PPUSH
61430: PPUSH
61431: PPUSH
// tmp := [ ] ;
61432: LD_ADDR_VAR 0 5
61436: PUSH
61437: EMPTY
61438: ST_TO_ADDR
// for i in units do
61439: LD_ADDR_VAR 0 4
61443: PUSH
61444: LD_VAR 0 1
61448: PUSH
61449: FOR_IN
61450: IFFALSE 61488
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61452: LD_ADDR_VAR 0 5
61456: PUSH
61457: LD_VAR 0 5
61461: PPUSH
61462: LD_VAR 0 5
61466: PUSH
61467: LD_INT 1
61469: PLUS
61470: PPUSH
61471: LD_VAR 0 4
61475: PPUSH
61476: CALL_OW 256
61480: PPUSH
61481: CALL_OW 2
61485: ST_TO_ADDR
61486: GO 61449
61488: POP
61489: POP
// if not tmp then
61490: LD_VAR 0 5
61494: NOT
61495: IFFALSE 61499
// exit ;
61497: GO 61547
// if asc then
61499: LD_VAR 0 2
61503: IFFALSE 61527
// result := SortListByListAsc ( units , tmp ) else
61505: LD_ADDR_VAR 0 3
61509: PUSH
61510: LD_VAR 0 1
61514: PPUSH
61515: LD_VAR 0 5
61519: PPUSH
61520: CALL_OW 76
61524: ST_TO_ADDR
61525: GO 61547
// result := SortListByListDesc ( units , tmp ) ;
61527: LD_ADDR_VAR 0 3
61531: PUSH
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_VAR 0 5
61541: PPUSH
61542: CALL_OW 77
61546: ST_TO_ADDR
// end ;
61547: LD_VAR 0 3
61551: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61552: LD_INT 0
61554: PPUSH
61555: PPUSH
// task := GetTaskList ( mech ) ;
61556: LD_ADDR_VAR 0 4
61560: PUSH
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 437
61570: ST_TO_ADDR
// if not task then
61571: LD_VAR 0 4
61575: NOT
61576: IFFALSE 61580
// exit ;
61578: GO 61622
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_VAR 0 4
61589: PUSH
61590: LD_INT 1
61592: ARRAY
61593: PUSH
61594: LD_INT 1
61596: ARRAY
61597: PUSH
61598: LD_STRING r
61600: EQUAL
61601: PUSH
61602: LD_VAR 0 4
61606: PUSH
61607: LD_INT 1
61609: ARRAY
61610: PUSH
61611: LD_INT 4
61613: ARRAY
61614: PUSH
61615: LD_VAR 0 2
61619: EQUAL
61620: AND
61621: ST_TO_ADDR
// end ;
61622: LD_VAR 0 3
61626: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61627: LD_INT 0
61629: PPUSH
// SetDir ( unit , d ) ;
61630: LD_VAR 0 1
61634: PPUSH
61635: LD_VAR 0 4
61639: PPUSH
61640: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61644: LD_VAR 0 1
61648: PPUSH
61649: LD_VAR 0 2
61653: PPUSH
61654: LD_VAR 0 3
61658: PPUSH
61659: LD_VAR 0 5
61663: PPUSH
61664: CALL_OW 48
// end ;
61668: LD_VAR 0 6
61672: RET
// export function ToNaturalNumber ( number ) ; begin
61673: LD_INT 0
61675: PPUSH
// result := number div 1 ;
61676: LD_ADDR_VAR 0 2
61680: PUSH
61681: LD_VAR 0 1
61685: PUSH
61686: LD_INT 1
61688: DIV
61689: ST_TO_ADDR
// if number < 0 then
61690: LD_VAR 0 1
61694: PUSH
61695: LD_INT 0
61697: LESS
61698: IFFALSE 61708
// result := 0 ;
61700: LD_ADDR_VAR 0 2
61704: PUSH
61705: LD_INT 0
61707: ST_TO_ADDR
// end ;
61708: LD_VAR 0 2
61712: RET
// export function SortByClass ( units , class ) ; var un ; begin
61713: LD_INT 0
61715: PPUSH
61716: PPUSH
// if not units or not class then
61717: LD_VAR 0 1
61721: NOT
61722: PUSH
61723: LD_VAR 0 2
61727: NOT
61728: OR
61729: IFFALSE 61733
// exit ;
61731: GO 61828
// result := [ ] ;
61733: LD_ADDR_VAR 0 3
61737: PUSH
61738: EMPTY
61739: ST_TO_ADDR
// for un in units do
61740: LD_ADDR_VAR 0 4
61744: PUSH
61745: LD_VAR 0 1
61749: PUSH
61750: FOR_IN
61751: IFFALSE 61826
// if GetClass ( un ) = class then
61753: LD_VAR 0 4
61757: PPUSH
61758: CALL_OW 257
61762: PUSH
61763: LD_VAR 0 2
61767: EQUAL
61768: IFFALSE 61795
// result := Insert ( result , 1 , un ) else
61770: LD_ADDR_VAR 0 3
61774: PUSH
61775: LD_VAR 0 3
61779: PPUSH
61780: LD_INT 1
61782: PPUSH
61783: LD_VAR 0 4
61787: PPUSH
61788: CALL_OW 2
61792: ST_TO_ADDR
61793: GO 61824
// result := Replace ( result , result + 1 , un ) ;
61795: LD_ADDR_VAR 0 3
61799: PUSH
61800: LD_VAR 0 3
61804: PPUSH
61805: LD_VAR 0 3
61809: PUSH
61810: LD_INT 1
61812: PLUS
61813: PPUSH
61814: LD_VAR 0 4
61818: PPUSH
61819: CALL_OW 1
61823: ST_TO_ADDR
61824: GO 61750
61826: POP
61827: POP
// end ;
61828: LD_VAR 0 3
61832: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61833: LD_INT 0
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
// result := [ ] ;
61842: LD_ADDR_VAR 0 4
61846: PUSH
61847: EMPTY
61848: ST_TO_ADDR
// if x - r < 0 then
61849: LD_VAR 0 1
61853: PUSH
61854: LD_VAR 0 3
61858: MINUS
61859: PUSH
61860: LD_INT 0
61862: LESS
61863: IFFALSE 61875
// min_x := 0 else
61865: LD_ADDR_VAR 0 8
61869: PUSH
61870: LD_INT 0
61872: ST_TO_ADDR
61873: GO 61891
// min_x := x - r ;
61875: LD_ADDR_VAR 0 8
61879: PUSH
61880: LD_VAR 0 1
61884: PUSH
61885: LD_VAR 0 3
61889: MINUS
61890: ST_TO_ADDR
// if y - r < 0 then
61891: LD_VAR 0 2
61895: PUSH
61896: LD_VAR 0 3
61900: MINUS
61901: PUSH
61902: LD_INT 0
61904: LESS
61905: IFFALSE 61917
// min_y := 0 else
61907: LD_ADDR_VAR 0 7
61911: PUSH
61912: LD_INT 0
61914: ST_TO_ADDR
61915: GO 61933
// min_y := y - r ;
61917: LD_ADDR_VAR 0 7
61921: PUSH
61922: LD_VAR 0 2
61926: PUSH
61927: LD_VAR 0 3
61931: MINUS
61932: ST_TO_ADDR
// max_x := x + r ;
61933: LD_ADDR_VAR 0 9
61937: PUSH
61938: LD_VAR 0 1
61942: PUSH
61943: LD_VAR 0 3
61947: PLUS
61948: ST_TO_ADDR
// max_y := y + r ;
61949: LD_ADDR_VAR 0 10
61953: PUSH
61954: LD_VAR 0 2
61958: PUSH
61959: LD_VAR 0 3
61963: PLUS
61964: ST_TO_ADDR
// for _x = min_x to max_x do
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: DOUBLE
61971: LD_VAR 0 8
61975: DEC
61976: ST_TO_ADDR
61977: LD_VAR 0 9
61981: PUSH
61982: FOR_TO
61983: IFFALSE 62084
// for _y = min_y to max_y do
61985: LD_ADDR_VAR 0 6
61989: PUSH
61990: DOUBLE
61991: LD_VAR 0 7
61995: DEC
61996: ST_TO_ADDR
61997: LD_VAR 0 10
62001: PUSH
62002: FOR_TO
62003: IFFALSE 62080
// begin if not ValidHex ( _x , _y ) then
62005: LD_VAR 0 5
62009: PPUSH
62010: LD_VAR 0 6
62014: PPUSH
62015: CALL_OW 488
62019: NOT
62020: IFFALSE 62024
// continue ;
62022: GO 62002
// if GetResourceTypeXY ( _x , _y ) then
62024: LD_VAR 0 5
62028: PPUSH
62029: LD_VAR 0 6
62033: PPUSH
62034: CALL_OW 283
62038: IFFALSE 62078
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62040: LD_ADDR_VAR 0 4
62044: PUSH
62045: LD_VAR 0 4
62049: PPUSH
62050: LD_VAR 0 4
62054: PUSH
62055: LD_INT 1
62057: PLUS
62058: PPUSH
62059: LD_VAR 0 5
62063: PUSH
62064: LD_VAR 0 6
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PPUSH
62073: CALL_OW 1
62077: ST_TO_ADDR
// end ;
62078: GO 62002
62080: POP
62081: POP
62082: GO 61982
62084: POP
62085: POP
// end ;
62086: LD_VAR 0 4
62090: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62091: LD_INT 0
62093: PPUSH
62094: PPUSH
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
// if not units then
62101: LD_VAR 0 1
62105: NOT
62106: IFFALSE 62110
// exit ;
62108: GO 62636
// result := UnitFilter ( units , [ f_ok ] ) ;
62110: LD_ADDR_VAR 0 3
62114: PUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: LD_INT 50
62122: PUSH
62123: EMPTY
62124: LIST
62125: PPUSH
62126: CALL_OW 72
62130: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62131: LD_ADDR_VAR 0 8
62135: PUSH
62136: LD_VAR 0 1
62140: PUSH
62141: LD_INT 1
62143: ARRAY
62144: PPUSH
62145: CALL_OW 255
62149: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62150: LD_ADDR_VAR 0 10
62154: PUSH
62155: LD_INT 29
62157: PUSH
62158: LD_EXP 82
62162: PUSH
62163: LD_INT 49
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: ST_TO_ADDR
// if not result then
62171: LD_VAR 0 3
62175: NOT
62176: IFFALSE 62180
// exit ;
62178: GO 62636
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62180: LD_ADDR_VAR 0 5
62184: PUSH
62185: LD_INT 81
62187: PUSH
62188: LD_VAR 0 8
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PPUSH
62197: CALL_OW 69
62201: ST_TO_ADDR
// for i in result do
62202: LD_ADDR_VAR 0 4
62206: PUSH
62207: LD_VAR 0 3
62211: PUSH
62212: FOR_IN
62213: IFFALSE 62634
// begin tag := GetTag ( i ) + 1 ;
62215: LD_ADDR_VAR 0 9
62219: PUSH
62220: LD_VAR 0 4
62224: PPUSH
62225: CALL_OW 110
62229: PUSH
62230: LD_INT 1
62232: PLUS
62233: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62234: LD_ADDR_VAR 0 7
62238: PUSH
62239: LD_VAR 0 4
62243: PPUSH
62244: CALL_OW 250
62248: PPUSH
62249: LD_VAR 0 4
62253: PPUSH
62254: CALL_OW 251
62258: PPUSH
62259: LD_INT 6
62261: PPUSH
62262: CALL 61833 0 3
62266: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62267: LD_VAR 0 4
62271: PPUSH
62272: CALL_OW 247
62276: PUSH
62277: LD_INT 2
62279: EQUAL
62280: PUSH
62281: LD_VAR 0 7
62285: AND
62286: PUSH
62287: LD_VAR 0 4
62291: PPUSH
62292: CALL_OW 264
62296: PUSH
62297: LD_VAR 0 10
62301: IN
62302: NOT
62303: AND
62304: IFFALSE 62343
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62306: LD_VAR 0 4
62310: PPUSH
62311: LD_VAR 0 7
62315: PUSH
62316: LD_INT 1
62318: ARRAY
62319: PUSH
62320: LD_INT 1
62322: ARRAY
62323: PPUSH
62324: LD_VAR 0 7
62328: PUSH
62329: LD_INT 1
62331: ARRAY
62332: PUSH
62333: LD_INT 2
62335: ARRAY
62336: PPUSH
62337: CALL_OW 116
62341: GO 62632
// if path > tag then
62343: LD_VAR 0 2
62347: PUSH
62348: LD_VAR 0 9
62352: GREATER
62353: IFFALSE 62561
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62355: LD_ADDR_VAR 0 6
62359: PUSH
62360: LD_VAR 0 5
62364: PPUSH
62365: LD_INT 91
62367: PUSH
62368: LD_VAR 0 4
62372: PUSH
62373: LD_INT 8
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: PPUSH
62381: CALL_OW 72
62385: ST_TO_ADDR
// if nearEnemy then
62386: LD_VAR 0 6
62390: IFFALSE 62459
// begin if GetWeapon ( i ) = ru_time_lapser then
62392: LD_VAR 0 4
62396: PPUSH
62397: CALL_OW 264
62401: PUSH
62402: LD_INT 49
62404: EQUAL
62405: IFFALSE 62433
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62407: LD_VAR 0 4
62411: PPUSH
62412: LD_VAR 0 6
62416: PPUSH
62417: LD_VAR 0 4
62421: PPUSH
62422: CALL_OW 74
62426: PPUSH
62427: CALL_OW 112
62431: GO 62457
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62433: LD_VAR 0 4
62437: PPUSH
62438: LD_VAR 0 6
62442: PPUSH
62443: LD_VAR 0 4
62447: PPUSH
62448: CALL_OW 74
62452: PPUSH
62453: CALL_OW 115
// end else
62457: GO 62559
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62459: LD_VAR 0 4
62463: PPUSH
62464: LD_VAR 0 2
62468: PUSH
62469: LD_VAR 0 9
62473: ARRAY
62474: PUSH
62475: LD_INT 1
62477: ARRAY
62478: PPUSH
62479: LD_VAR 0 2
62483: PUSH
62484: LD_VAR 0 9
62488: ARRAY
62489: PUSH
62490: LD_INT 2
62492: ARRAY
62493: PPUSH
62494: CALL_OW 297
62498: PUSH
62499: LD_INT 6
62501: GREATER
62502: IFFALSE 62545
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62504: LD_VAR 0 4
62508: PPUSH
62509: LD_VAR 0 2
62513: PUSH
62514: LD_VAR 0 9
62518: ARRAY
62519: PUSH
62520: LD_INT 1
62522: ARRAY
62523: PPUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_VAR 0 9
62533: ARRAY
62534: PUSH
62535: LD_INT 2
62537: ARRAY
62538: PPUSH
62539: CALL_OW 114
62543: GO 62559
// SetTag ( i , tag ) ;
62545: LD_VAR 0 4
62549: PPUSH
62550: LD_VAR 0 9
62554: PPUSH
62555: CALL_OW 109
// end else
62559: GO 62632
// if enemy then
62561: LD_VAR 0 5
62565: IFFALSE 62632
// begin if GetWeapon ( i ) = ru_time_lapser then
62567: LD_VAR 0 4
62571: PPUSH
62572: CALL_OW 264
62576: PUSH
62577: LD_INT 49
62579: EQUAL
62580: IFFALSE 62608
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62582: LD_VAR 0 4
62586: PPUSH
62587: LD_VAR 0 5
62591: PPUSH
62592: LD_VAR 0 4
62596: PPUSH
62597: CALL_OW 74
62601: PPUSH
62602: CALL_OW 112
62606: GO 62632
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62608: LD_VAR 0 4
62612: PPUSH
62613: LD_VAR 0 5
62617: PPUSH
62618: LD_VAR 0 4
62622: PPUSH
62623: CALL_OW 74
62627: PPUSH
62628: CALL_OW 115
// end ; end ;
62632: GO 62212
62634: POP
62635: POP
// end ;
62636: LD_VAR 0 3
62640: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62641: LD_INT 0
62643: PPUSH
62644: PPUSH
62645: PPUSH
// if not unit or IsInUnit ( unit ) then
62646: LD_VAR 0 1
62650: NOT
62651: PUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: CALL_OW 310
62661: OR
62662: IFFALSE 62666
// exit ;
62664: GO 62757
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62666: LD_ADDR_VAR 0 4
62670: PUSH
62671: LD_VAR 0 1
62675: PPUSH
62676: CALL_OW 250
62680: PPUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: LD_INT 1
62688: PPUSH
62689: CALL_OW 272
62693: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62694: LD_ADDR_VAR 0 5
62698: PUSH
62699: LD_VAR 0 1
62703: PPUSH
62704: CALL_OW 251
62708: PPUSH
62709: LD_VAR 0 2
62713: PPUSH
62714: LD_INT 1
62716: PPUSH
62717: CALL_OW 273
62721: ST_TO_ADDR
// if ValidHex ( x , y ) then
62722: LD_VAR 0 4
62726: PPUSH
62727: LD_VAR 0 5
62731: PPUSH
62732: CALL_OW 488
62736: IFFALSE 62757
// ComTurnXY ( unit , x , y ) ;
62738: LD_VAR 0 1
62742: PPUSH
62743: LD_VAR 0 4
62747: PPUSH
62748: LD_VAR 0 5
62752: PPUSH
62753: CALL_OW 118
// end ;
62757: LD_VAR 0 3
62761: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
// result := false ;
62766: LD_ADDR_VAR 0 3
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// if not units then
62774: LD_VAR 0 2
62778: NOT
62779: IFFALSE 62783
// exit ;
62781: GO 62828
// for i in units do
62783: LD_ADDR_VAR 0 4
62787: PUSH
62788: LD_VAR 0 2
62792: PUSH
62793: FOR_IN
62794: IFFALSE 62826
// if See ( side , i ) then
62796: LD_VAR 0 1
62800: PPUSH
62801: LD_VAR 0 4
62805: PPUSH
62806: CALL_OW 292
62810: IFFALSE 62824
// begin result := true ;
62812: LD_ADDR_VAR 0 3
62816: PUSH
62817: LD_INT 1
62819: ST_TO_ADDR
// exit ;
62820: POP
62821: POP
62822: GO 62828
// end ;
62824: GO 62793
62826: POP
62827: POP
// end ;
62828: LD_VAR 0 3
62832: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62833: LD_INT 0
62835: PPUSH
62836: PPUSH
62837: PPUSH
62838: PPUSH
// if not unit or not points then
62839: LD_VAR 0 1
62843: NOT
62844: PUSH
62845: LD_VAR 0 2
62849: NOT
62850: OR
62851: IFFALSE 62855
// exit ;
62853: GO 62945
// dist := 99999 ;
62855: LD_ADDR_VAR 0 5
62859: PUSH
62860: LD_INT 99999
62862: ST_TO_ADDR
// for i in points do
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 2
62872: PUSH
62873: FOR_IN
62874: IFFALSE 62943
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62876: LD_ADDR_VAR 0 6
62880: PUSH
62881: LD_VAR 0 1
62885: PPUSH
62886: LD_VAR 0 4
62890: PUSH
62891: LD_INT 1
62893: ARRAY
62894: PPUSH
62895: LD_VAR 0 4
62899: PUSH
62900: LD_INT 2
62902: ARRAY
62903: PPUSH
62904: CALL_OW 297
62908: ST_TO_ADDR
// if tmpDist < dist then
62909: LD_VAR 0 6
62913: PUSH
62914: LD_VAR 0 5
62918: LESS
62919: IFFALSE 62941
// begin result := i ;
62921: LD_ADDR_VAR 0 3
62925: PUSH
62926: LD_VAR 0 4
62930: ST_TO_ADDR
// dist := tmpDist ;
62931: LD_ADDR_VAR 0 5
62935: PUSH
62936: LD_VAR 0 6
62940: ST_TO_ADDR
// end ; end ;
62941: GO 62873
62943: POP
62944: POP
// end ;
62945: LD_VAR 0 3
62949: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62950: LD_INT 0
62952: PPUSH
// uc_side := side ;
62953: LD_ADDR_OWVAR 20
62957: PUSH
62958: LD_VAR 0 1
62962: ST_TO_ADDR
// uc_nation := 3 ;
62963: LD_ADDR_OWVAR 21
62967: PUSH
62968: LD_INT 3
62970: ST_TO_ADDR
// vc_chassis := 25 ;
62971: LD_ADDR_OWVAR 37
62975: PUSH
62976: LD_INT 25
62978: ST_TO_ADDR
// vc_engine := engine_siberite ;
62979: LD_ADDR_OWVAR 39
62983: PUSH
62984: LD_INT 3
62986: ST_TO_ADDR
// vc_control := control_computer ;
62987: LD_ADDR_OWVAR 38
62991: PUSH
62992: LD_INT 3
62994: ST_TO_ADDR
// vc_weapon := 59 ;
62995: LD_ADDR_OWVAR 40
62999: PUSH
63000: LD_INT 59
63002: ST_TO_ADDR
// result := CreateVehicle ;
63003: LD_ADDR_VAR 0 5
63007: PUSH
63008: CALL_OW 45
63012: ST_TO_ADDR
// SetDir ( result , d ) ;
63013: LD_VAR 0 5
63017: PPUSH
63018: LD_VAR 0 4
63022: PPUSH
63023: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63027: LD_VAR 0 5
63031: PPUSH
63032: LD_VAR 0 2
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_INT 0
63044: PPUSH
63045: CALL_OW 48
// end ;
63049: LD_VAR 0 5
63053: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63054: LD_INT 0
63056: PPUSH
63057: PPUSH
63058: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63059: LD_ADDR_VAR 0 2
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63082: LD_VAR 0 1
63086: NOT
63087: PUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 264
63097: PUSH
63098: LD_INT 12
63100: PUSH
63101: LD_INT 51
63103: PUSH
63104: LD_INT 32
63106: PUSH
63107: LD_EXP 79
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: IN
63118: NOT
63119: OR
63120: IFFALSE 63124
// exit ;
63122: GO 63222
// for i := 1 to 3 do
63124: LD_ADDR_VAR 0 3
63128: PUSH
63129: DOUBLE
63130: LD_INT 1
63132: DEC
63133: ST_TO_ADDR
63134: LD_INT 3
63136: PUSH
63137: FOR_TO
63138: IFFALSE 63220
// begin tmp := GetCargo ( cargo , i ) ;
63140: LD_ADDR_VAR 0 4
63144: PUSH
63145: LD_VAR 0 1
63149: PPUSH
63150: LD_VAR 0 3
63154: PPUSH
63155: CALL_OW 289
63159: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63160: LD_ADDR_VAR 0 2
63164: PUSH
63165: LD_VAR 0 2
63169: PPUSH
63170: LD_VAR 0 3
63174: PPUSH
63175: LD_VAR 0 4
63179: PPUSH
63180: CALL_OW 1
63184: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63185: LD_ADDR_VAR 0 2
63189: PUSH
63190: LD_VAR 0 2
63194: PPUSH
63195: LD_INT 4
63197: PPUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 4
63205: ARRAY
63206: PUSH
63207: LD_VAR 0 4
63211: PLUS
63212: PPUSH
63213: CALL_OW 1
63217: ST_TO_ADDR
// end ;
63218: GO 63137
63220: POP
63221: POP
// end ;
63222: LD_VAR 0 2
63226: RET
// export function Length ( array ) ; begin
63227: LD_INT 0
63229: PPUSH
// result := array + 0 ;
63230: LD_ADDR_VAR 0 2
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: LD_INT 0
63242: PLUS
63243: ST_TO_ADDR
// end ;
63244: LD_VAR 0 2
63248: RET
// export function PrepareArray ( array ) ; begin
63249: LD_INT 0
63251: PPUSH
// result := array diff 0 ;
63252: LD_ADDR_VAR 0 2
63256: PUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_INT 0
63264: DIFF
63265: ST_TO_ADDR
// if not result [ 1 ] then
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 1
63273: ARRAY
63274: NOT
63275: IFFALSE 63295
// result := Delete ( result , 1 ) ;
63277: LD_ADDR_VAR 0 2
63281: PUSH
63282: LD_VAR 0 2
63286: PPUSH
63287: LD_INT 1
63289: PPUSH
63290: CALL_OW 3
63294: ST_TO_ADDR
// end ; end_of_file
63295: LD_VAR 0 2
63299: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
63300: LD_INT 0
63302: PPUSH
// ar_miner := 81 ;
63303: LD_ADDR_EXP 85
63307: PUSH
63308: LD_INT 81
63310: ST_TO_ADDR
// ar_crane := 88 ;
63311: LD_ADDR_EXP 84
63315: PUSH
63316: LD_INT 88
63318: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63319: LD_ADDR_EXP 79
63323: PUSH
63324: LD_INT 89
63326: ST_TO_ADDR
// us_hack := 99 ;
63327: LD_ADDR_EXP 80
63331: PUSH
63332: LD_INT 99
63334: ST_TO_ADDR
// us_artillery := 97 ;
63335: LD_ADDR_EXP 81
63339: PUSH
63340: LD_INT 97
63342: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63343: LD_ADDR_EXP 82
63347: PUSH
63348: LD_INT 91
63350: ST_TO_ADDR
// ar_mortar := 92 ;
63351: LD_ADDR_EXP 83
63355: PUSH
63356: LD_INT 92
63358: ST_TO_ADDR
// ru_flamethrower := 93 ;
63359: LD_ADDR_EXP 86
63363: PUSH
63364: LD_INT 93
63366: ST_TO_ADDR
// ru_radar := 98 ;
63367: LD_ADDR_EXP 78
63371: PUSH
63372: LD_INT 98
63374: ST_TO_ADDR
// tech_Artillery := 80 ;
63375: LD_ADDR_EXP 87
63379: PUSH
63380: LD_INT 80
63382: ST_TO_ADDR
// tech_RadMat := 81 ;
63383: LD_ADDR_EXP 88
63387: PUSH
63388: LD_INT 81
63390: ST_TO_ADDR
// tech_BasicTools := 82 ;
63391: LD_ADDR_EXP 89
63395: PUSH
63396: LD_INT 82
63398: ST_TO_ADDR
// tech_Cargo := 83 ;
63399: LD_ADDR_EXP 90
63403: PUSH
63404: LD_INT 83
63406: ST_TO_ADDR
// tech_Track := 84 ;
63407: LD_ADDR_EXP 91
63411: PUSH
63412: LD_INT 84
63414: ST_TO_ADDR
// tech_Crane := 85 ;
63415: LD_ADDR_EXP 92
63419: PUSH
63420: LD_INT 85
63422: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63423: LD_ADDR_EXP 93
63427: PUSH
63428: LD_INT 86
63430: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63431: LD_ADDR_EXP 94
63435: PUSH
63436: LD_INT 87
63438: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63439: LD_ADDR_EXP 95
63443: PUSH
63444: LD_INT 88
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 1
63451: RET
// every 1 do
63452: GO 63454
63454: DISABLE
// InitGlobalVariables ; end_of_file
63455: CALL 63300 0 0
63459: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63460: LD_VAR 0 1
63464: PPUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: LD_VAR 0 3
63474: PPUSH
63475: LD_VAR 0 4
63479: PPUSH
63480: LD_VAR 0 5
63484: PPUSH
63485: LD_VAR 0 6
63489: PPUSH
63490: CALL 2010 0 6
// end ;
63494: PPOPN 6
63496: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63497: LD_INT 0
63499: PPUSH
// begin if not units then
63500: LD_VAR 0 1
63504: NOT
63505: IFFALSE 63509
// exit ;
63507: GO 63509
// end ;
63509: PPOPN 7
63511: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63512: CALL 1981 0 0
// end ;
63516: PPOPN 1
63518: END
