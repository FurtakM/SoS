// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// PrepareNature ( nat_area , wat_area , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 399 0 3
// PrepareHunters ( ) ;
  74: CALL 245 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export class_horse ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// class_horse := 21 ;
  90: LD_ADDR_EXP 5
  94: PUSH
  95: LD_INT 21
  97: ST_TO_ADDR
// if debug then
  98: LD_EXP 1
 102: IFFALSE 137
// begin FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// Difficulty := 2 ;
 111: LD_ADDR_OWVAR 67
 115: PUSH
 116: LD_INT 2
 118: ST_TO_ADDR
// hunterClass := 3 ;
 119: LD_ADDR_EXP 2
 123: PUSH
 124: LD_INT 3
 126: ST_TO_ADDR
// animalAmount := 2 ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: ST_TO_ADDR
// end else
 135: GO 176
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 137: LD_ADDR_OWVAR 67
 141: PUSH
 142: LD_INT 0
 144: PPUSH
 145: CALL_OW 426
 149: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_INT 2
 157: PPUSH
 158: CALL_OW 426
 162: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 163: LD_ADDR_EXP 4
 167: PUSH
 168: LD_INT 1
 170: PPUSH
 171: CALL_OW 426
 175: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 176: LD_ADDR_EXP 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 6
 186: PUSH
 187: LD_INT 8
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: LIST
 194: PUSH
 195: LD_OWVAR 67
 199: ARRAY
 200: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: LD_INT 0
 223: PUSH
 224: LD_INT 0
 226: PUSH
 227: LD_INT 0
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// export function PrepareHunters ; var i , un ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
// for i := 1 to huntersAmount do
 250: LD_ADDR_VAR 0 2
 254: PUSH
 255: DOUBLE
 256: LD_INT 1
 258: DEC
 259: ST_TO_ADDR
 260: LD_EXP 3
 264: PUSH
 265: FOR_TO
 266: IFFALSE 392
// begin uc_side := i ;
 268: LD_ADDR_OWVAR 20
 272: PUSH
 273: LD_VAR 0 2
 277: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 278: LD_ADDR_OWVAR 21
 282: PUSH
 283: LD_VAR 0 2
 287: PUSH
 288: LD_INT 3
 290: MOD
 291: PUSH
 292: LD_INT 1
 294: PLUS
 295: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 296: LD_INT 0
 298: PPUSH
 299: LD_INT 1
 301: PUSH
 302: LD_INT 5
 304: PUSH
 305: LD_INT 11
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: PUSH
 313: LD_EXP 2
 317: ARRAY
 318: PPUSH
 319: LD_INT 10
 321: PUSH
 322: LD_OWVAR 67
 326: PUSH
 327: LD_INT 2
 329: MUL
 330: MINUS
 331: PPUSH
 332: CALL_OW 380
// un := CreateHuman ;
 336: LD_ADDR_VAR 0 3
 340: PUSH
 341: CALL_OW 44
 345: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 346: LD_ADDR_EXP 7
 350: PUSH
 351: LD_EXP 7
 355: PPUSH
 356: LD_EXP 7
 360: PUSH
 361: LD_INT 1
 363: PLUS
 364: PPUSH
 365: LD_VAR 0 3
 369: PPUSH
 370: CALL_OW 1
 374: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 375: LD_VAR 0 3
 379: PPUSH
 380: LD_INT 3
 382: PPUSH
 383: LD_INT 0
 385: PPUSH
 386: CALL_OW 49
// end ;
 390: GO 265
 392: POP
 393: POP
// end ; end_of_file
 394: LD_VAR 0 1
 398: RET
// export function PrepareNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 399: LD_INT 0
 401: PPUSH
 402: PPUSH
 403: PPUSH
 404: PPUSH
 405: PPUSH
// uc_side = 0 ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// uc_nation = 0 ;
 414: LD_ADDR_OWVAR 21
 418: PUSH
 419: LD_INT 0
 421: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 422: LD_ADDR_VAR 0 7
 426: PUSH
 427: LD_INT 12
 429: PUSH
 430: LD_INT 15
 432: PUSH
 433: LD_INT 13
 435: PUSH
 436: LD_INT 18
 438: PUSH
 439: LD_INT 14
 441: PUSH
 442: LD_EXP 5
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 455: LD_ADDR_VAR 0 8
 459: PUSH
 460: LD_INT 20
 462: PUSH
 463: LD_INT 19
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: ST_TO_ADDR
// InitHc_All ( ) ;
 470: CALL_OW 584
// for i := 1 to numbers - 2 do
 474: LD_ADDR_VAR 0 5
 478: PUSH
 479: DOUBLE
 480: LD_INT 1
 482: DEC
 483: ST_TO_ADDR
 484: LD_VAR 0 3
 488: PUSH
 489: LD_INT 2
 491: MINUS
 492: PUSH
 493: FOR_TO
 494: IFFALSE 635
// begin if numbers [ i ] = 0 then
 496: LD_VAR 0 3
 500: PUSH
 501: LD_VAR 0 5
 505: ARRAY
 506: PUSH
 507: LD_INT 0
 509: EQUAL
 510: IFFALSE 514
// continue ;
 512: GO 493
// hc_class := classes [ i ] ;
 514: LD_ADDR_OWVAR 28
 518: PUSH
 519: LD_VAR 0 7
 523: PUSH
 524: LD_VAR 0 5
 528: ARRAY
 529: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 530: LD_ADDR_OWVAR 29
 534: PUSH
 535: LD_INT 8
 537: PPUSH
 538: LD_INT 12
 540: PPUSH
 541: CALL_OW 12
 545: PUSH
 546: LD_INT 8
 548: PPUSH
 549: LD_INT 12
 551: PPUSH
 552: CALL_OW 12
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 561: LD_ADDR_OWVAR 35
 565: PUSH
 566: LD_INT 5
 568: NEG
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL_OW 12
 577: PUSH
 578: LD_OWVAR 67
 582: PUSH
 583: LD_INT 5
 585: MUL
 586: PLUS
 587: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 588: LD_ADDR_VAR 0 6
 592: PUSH
 593: DOUBLE
 594: LD_INT 1
 596: DEC
 597: ST_TO_ADDR
 598: LD_VAR 0 3
 602: PUSH
 603: LD_VAR 0 5
 607: ARRAY
 608: PUSH
 609: FOR_TO
 610: IFFALSE 631
// PlaceUnitArea ( CreateHuman , area , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 1
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
 629: GO 609
 631: POP
 632: POP
// end ;
 633: GO 493
 635: POP
 636: POP
// if not waterArea then
 637: LD_VAR 0 2
 641: NOT
 642: IFFALSE 646
// exit ;
 644: GO 806
// hc_class := waterClass [ 1 ] ;
 646: LD_ADDR_OWVAR 28
 650: PUSH
 651: LD_VAR 0 8
 655: PUSH
 656: LD_INT 1
 658: ARRAY
 659: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 660: LD_ADDR_OWVAR 29
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 10
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: ST_TO_ADDR
// hc_agressivity := 0 ;
 675: LD_ADDR_OWVAR 35
 679: PUSH
 680: LD_INT 0
 682: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 683: LD_ADDR_VAR 0 6
 687: PUSH
 688: DOUBLE
 689: LD_INT 1
 691: DEC
 692: ST_TO_ADDR
 693: LD_VAR 0 3
 697: PUSH
 698: LD_INT 7
 700: ARRAY
 701: PUSH
 702: FOR_TO
 703: IFFALSE 724
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 705: CALL_OW 44
 709: PPUSH
 710: LD_VAR 0 2
 714: PPUSH
 715: LD_INT 0
 717: PPUSH
 718: CALL_OW 49
 722: GO 702
 724: POP
 725: POP
// hc_class := waterClass [ 2 ] ;
 726: LD_ADDR_OWVAR 28
 730: PUSH
 731: LD_VAR 0 8
 735: PUSH
 736: LD_INT 2
 738: ARRAY
 739: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 740: LD_ADDR_OWVAR 29
 744: PUSH
 745: LD_INT 10
 747: PUSH
 748: LD_INT 10
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// hc_agressivity := 0 ;
 755: LD_ADDR_OWVAR 35
 759: PUSH
 760: LD_INT 0
 762: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 763: LD_ADDR_VAR 0 6
 767: PUSH
 768: DOUBLE
 769: LD_INT 1
 771: DEC
 772: ST_TO_ADDR
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 8
 780: ARRAY
 781: PUSH
 782: FOR_TO
 783: IFFALSE 804
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 785: CALL_OW 44
 789: PPUSH
 790: LD_VAR 0 2
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 49
 802: GO 782
 804: POP
 805: POP
// end ; end_of_file
 806: LD_VAR 0 4
 810: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 811: LD_INT 22
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 25
 823: PUSH
 824: LD_INT 15
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PPUSH
 835: CALL_OW 69
 839: IFFALSE 945
 841: GO 843
 843: DISABLE
 844: LD_INT 0
 846: PPUSH
// begin enable ;
 847: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 848: LD_ADDR_VAR 0 1
 852: PUSH
 853: LD_INT 22
 855: PUSH
 856: LD_INT 0
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 25
 865: PUSH
 866: LD_INT 15
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: PUSH
 882: FOR_IN
 883: IFFALSE 943
// if GetLives ( i ) < 1000 then
 885: LD_VAR 0 1
 889: PPUSH
 890: CALL_OW 256
 894: PUSH
 895: LD_INT 1000
 897: LESS
 898: IFFALSE 941
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_INT 3
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PPUSH
 922: CALL_OW 69
 926: PPUSH
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 74
 936: PPUSH
 937: CALL_OW 115
 941: GO 882
 943: POP
 944: POP
// end ;
 945: PPOPN 1
 947: END
// every 3 do var i , enemy , x , y , d ;
 948: GO 950
 950: DISABLE
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
// begin enable ;
 958: ENABLE
// for i := 2 to huntersAmount do
 959: LD_ADDR_VAR 0 1
 963: PUSH
 964: DOUBLE
 965: LD_INT 2
 967: DEC
 968: ST_TO_ADDR
 969: LD_EXP 3
 973: PUSH
 974: FOR_TO
 975: IFFALSE 1314
// begin if not HasTask ( hunters [ i ] ) then
 977: LD_EXP 7
 981: PUSH
 982: LD_VAR 0 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 314
 992: NOT
 993: IFFALSE 1312
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 22
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: PPUSH
1015: LD_EXP 7
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 74
1030: ST_TO_ADDR
// if not enemy then
1031: LD_VAR 0 2
1035: NOT
1036: IFFALSE 1040
// continue ;
1038: GO 974
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1040: LD_EXP 7
1044: PUSH
1045: LD_VAR 0 1
1049: ARRAY
1050: PPUSH
1051: LD_VAR 0 2
1055: PPUSH
1056: CALL_OW 296
1060: PUSH
1061: LD_INT 17
1063: LESS
1064: IFFALSE 1167
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1066: LD_EXP 7
1070: PUSH
1071: LD_VAR 0 1
1075: ARRAY
1076: PPUSH
1077: CALL_OW 257
1081: PUSH
1082: LD_INT 11
1084: EQUAL
1085: IFFALSE 1145
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1087: LD_VAR 0 2
1091: PPUSH
1092: CALL_OW 257
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 20
1102: PUSH
1103: LD_INT 13
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: IN
1111: IFFALSE 1130
// ComCarabine ( hunters [ i ] ) else
1113: LD_EXP 7
1117: PUSH
1118: LD_VAR 0 1
1122: ARRAY
1123: PPUSH
1124: CALL_OW 162
1128: GO 1145
// ComSabre ( hunters [ i ] ) ;
1130: LD_EXP 7
1134: PUSH
1135: LD_VAR 0 1
1139: ARRAY
1140: PPUSH
1141: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1145: LD_EXP 7
1149: PUSH
1150: LD_VAR 0 1
1154: ARRAY
1155: PPUSH
1156: LD_VAR 0 2
1160: PPUSH
1161: CALL_OW 115
// end else
1165: GO 1312
// begin d := rand ( 0 , 5 ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_INT 0
1174: PPUSH
1175: LD_INT 5
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: LD_EXP 7
1192: PUSH
1193: LD_VAR 0 1
1197: ARRAY
1198: PPUSH
1199: CALL_OW 250
1203: PPUSH
1204: LD_VAR 0 5
1208: PPUSH
1209: LD_INT 8
1211: PPUSH
1212: CALL_OW 272
1216: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1217: LD_ADDR_VAR 0 4
1221: PUSH
1222: LD_EXP 7
1226: PUSH
1227: LD_VAR 0 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 251
1237: PPUSH
1238: LD_VAR 0 5
1242: PPUSH
1243: LD_INT 8
1245: PPUSH
1246: CALL_OW 273
1250: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_VAR 0 4
1260: PPUSH
1261: CALL_OW 488
1265: PUSH
1266: LD_VAR 0 3
1270: PPUSH
1271: LD_VAR 0 4
1275: PPUSH
1276: CALL_OW 428
1280: PUSH
1281: LD_INT 0
1283: EQUAL
1284: AND
1285: IFFALSE 1312
// ComMoveXY ( hunters [ i ] , x , y ) ;
1287: LD_EXP 7
1291: PUSH
1292: LD_VAR 0 1
1296: ARRAY
1297: PPUSH
1298: LD_VAR 0 3
1302: PPUSH
1303: LD_VAR 0 4
1307: PPUSH
1308: CALL_OW 111
// end ; end ; end ;
1312: GO 974
1314: POP
1315: POP
// end ; end_of_file
1316: PPOPN 5
1318: END
// on UnitGoesToRed ( un ) do var i ;
1319: LD_INT 0
1321: PPUSH
// begin if GetSide ( un ) = 1 then
1322: LD_VAR 0 1
1326: PPUSH
1327: CALL_OW 255
1331: PUSH
1332: LD_INT 1
1334: EQUAL
1335: IFFALSE 1344
// YouLost ( hunt2 ) ;
1337: LD_STRING hunt2
1339: PPUSH
1340: CALL_OW 104
// if GetSide ( un ) > 1 then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 255
1353: PUSH
1354: LD_INT 1
1356: GREATER
1357: IFFALSE 1410
// begin for i := 1 to 6 do
1359: LD_ADDR_VAR 0 2
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_INT 6
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1396
// begin wait ( 0 0$1 ) ;
1375: LD_INT 35
1377: PPUSH
1378: CALL_OW 67
// SetLives ( un , 249 ) ;
1382: LD_VAR 0 1
1386: PPUSH
1387: LD_INT 249
1389: PPUSH
1390: CALL_OW 234
// end ;
1394: GO 1372
1396: POP
1397: POP
// SetLives ( un , 1000 ) ;
1398: LD_VAR 0 1
1402: PPUSH
1403: LD_INT 1000
1405: PPUSH
1406: CALL_OW 234
// end ; end ;
1410: PPOPN 2
1412: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1413: LD_VAR 0 1
1417: PUSH
1418: LD_INT 1
1420: EQUAL
1421: PUSH
1422: LD_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: GREATER
1430: AND
1431: IFFALSE 1440
// YouLost ( hunt1 ) ;
1433: LD_STRING hunt1
1435: PPUSH
1436: CALL_OW 104
// end ;
1440: PPOPN 2
1442: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1443: LD_INT 0
1445: PPUSH
// begin point := 0 ;
1446: LD_ADDR_VAR 0 4
1450: PUSH
1451: LD_INT 0
1453: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1454: LD_VAR 0 1
1458: PPUSH
1459: CALL_OW 257
1463: PUSH
1464: LD_INT 20
1466: DOUBLE
1467: EQUAL
1468: IFTRUE 1472
1470: GO 1483
1472: POP
// point := 10 ; class_horse :
1473: LD_ADDR_VAR 0 4
1477: PUSH
1478: LD_INT 10
1480: ST_TO_ADDR
1481: GO 1619
1483: LD_EXP 5
1487: DOUBLE
1488: EQUAL
1489: IFTRUE 1493
1491: GO 1504
1493: POP
// point := 10 ; class_baggie :
1494: LD_ADDR_VAR 0 4
1498: PUSH
1499: LD_INT 10
1501: ST_TO_ADDR
1502: GO 1619
1504: LD_INT 13
1506: DOUBLE
1507: EQUAL
1508: IFTRUE 1512
1510: GO 1523
1512: POP
// point := 5 ; class_phororhacos :
1513: LD_ADDR_VAR 0 4
1517: PUSH
1518: LD_INT 5
1520: ST_TO_ADDR
1521: GO 1619
1523: LD_INT 18
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1542
1531: POP
// point := 10 ; class_tiger :
1532: LD_ADDR_VAR 0 4
1536: PUSH
1537: LD_INT 10
1539: ST_TO_ADDR
1540: GO 1619
1542: LD_INT 14
1544: DOUBLE
1545: EQUAL
1546: IFTRUE 1550
1548: GO 1561
1550: POP
// point := 20 ; class_apeman :
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: LD_INT 20
1558: ST_TO_ADDR
1559: GO 1619
1561: LD_INT 12
1563: DOUBLE
1564: EQUAL
1565: IFTRUE 1569
1567: GO 1580
1569: POP
// point := 30 ; class_apeman_soldier :
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 30
1577: ST_TO_ADDR
1578: GO 1619
1580: LD_INT 15
1582: DOUBLE
1583: EQUAL
1584: IFTRUE 1588
1586: GO 1599
1588: POP
// point := 50 ; class_frog :
1589: LD_ADDR_VAR 0 4
1593: PUSH
1594: LD_INT 50
1596: ST_TO_ADDR
1597: GO 1619
1599: LD_INT 19
1601: DOUBLE
1602: EQUAL
1603: IFTRUE 1607
1605: GO 1618
1607: POP
// point := 10 ; end ;
1608: LD_ADDR_VAR 0 4
1612: PUSH
1613: LD_INT 10
1615: ST_TO_ADDR
1616: GO 1619
1618: POP
// if point then
1619: LD_VAR 0 4
1623: IFFALSE 1662
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1625: LD_ADDR_EXP 6
1629: PUSH
1630: LD_EXP 6
1634: PPUSH
1635: LD_VAR 0 2
1639: PPUSH
1640: LD_EXP 6
1644: PUSH
1645: LD_VAR 0 2
1649: ARRAY
1650: PUSH
1651: LD_VAR 0 4
1655: PLUS
1656: PPUSH
1657: CALL_OW 1
1661: ST_TO_ADDR
// end ;
1662: PPOPN 4
1664: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1665: LD_INT 22
1667: PUSH
1668: LD_INT 0
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PPUSH
1675: CALL_OW 69
1679: PUSH
1680: LD_INT 10
1682: LESS
1683: IFFALSE 1797
1685: GO 1687
1687: DISABLE
// begin enable ;
1688: ENABLE
// PrepareNature ( nat_area , wat_area , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1689: LD_INT 2
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: LD_INT 0
1697: PPUSH
1698: LD_INT 4
1700: PPUSH
1701: CALL_OW 12
1705: PUSH
1706: LD_INT 0
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PUSH
1717: LD_INT 0
1719: PPUSH
1720: LD_INT 4
1722: PPUSH
1723: CALL_OW 12
1727: PUSH
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 4
1733: PPUSH
1734: CALL_OW 12
1738: PUSH
1739: LD_INT 2
1741: PPUSH
1742: LD_INT 4
1744: PPUSH
1745: CALL_OW 12
1749: PUSH
1750: LD_INT 0
1752: PPUSH
1753: LD_INT 2
1755: PPUSH
1756: CALL_OW 12
1760: PUSH
1761: LD_INT 0
1763: PPUSH
1764: LD_INT 4
1766: PPUSH
1767: CALL_OW 12
1771: PUSH
1772: LD_INT 0
1774: PPUSH
1775: LD_INT 2
1777: PPUSH
1778: CALL_OW 12
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL 399 0 3
// end ;
1797: END
// every 0 0$1 do var i ;
1798: GO 1800
1800: DISABLE
1801: LD_INT 0
1803: PPUSH
// begin enable ;
1804: ENABLE
// display_strings := [ ] ;
1805: LD_ADDR_OWVAR 47
1809: PUSH
1810: EMPTY
1811: ST_TO_ADDR
// for i := 1 to huntersAmount do
1812: LD_ADDR_VAR 0 1
1816: PUSH
1817: DOUBLE
1818: LD_INT 1
1820: DEC
1821: ST_TO_ADDR
1822: LD_EXP 3
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1962
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1830: LD_ADDR_OWVAR 47
1834: PUSH
1835: LD_OWVAR 47
1839: PUSH
1840: LD_STRING #player
1842: PUSH
1843: LD_VAR 0 1
1847: STR
1848: PUSH
1849: LD_VAR 0 1
1853: PUSH
1854: LD_EXP 6
1858: PUSH
1859: LD_VAR 0 1
1863: ARRAY
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: ADD
1870: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1871: LD_EXP 6
1875: PUSH
1876: LD_VAR 0 1
1880: ARRAY
1881: PUSH
1882: LD_INT 750
1884: PUSH
1885: LD_INT 1250
1887: PUSH
1888: LD_INT 2000
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: LD_OWVAR 67
1900: ARRAY
1901: GREATEREQUAL
1902: IFFALSE 1960
// begin if i = 1 then
1904: LD_VAR 0 1
1908: PUSH
1909: LD_INT 1
1911: EQUAL
1912: IFFALSE 1953
// begin DialogueOn ;
1914: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1918: LD_STRING ACH_HUNT
1920: PPUSH
1921: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1925: LD_ADDR_OWVAR 47
1929: PUSH
1930: LD_STRING #hunting-win
1932: PUSH
1933: EMPTY
1934: LIST
1935: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1936: LD_INT 175
1938: PPUSH
1939: CALL_OW 68
// YouWin ;
1943: CALL_OW 103
// DialogueOff ;
1947: CALL_OW 7
// end else
1951: GO 1960
// YouLost ( hunt3 ) ;
1953: LD_STRING hunt3
1955: PPUSH
1956: CALL_OW 104
// end ; end ;
1960: GO 1827
1962: POP
1963: POP
// end ; end_of_file end_of_file
1964: PPOPN 1
1966: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
1967: GO 1969
1969: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1970: LD_STRING initStreamRollete();
1972: PPUSH
1973: CALL_OW 559
// InitStreamMode ;
1977: CALL 1986 0 0
// DefineStreamItems ( ) ;
1981: CALL 2426 0 0
// end ;
1985: END
// function InitStreamMode ; begin
1986: LD_INT 0
1988: PPUSH
// streamModeActive := false ;
1989: LD_ADDR_EXP 8
1993: PUSH
1994: LD_INT 0
1996: ST_TO_ADDR
// normalCounter := 36 ;
1997: LD_ADDR_EXP 9
2001: PUSH
2002: LD_INT 36
2004: ST_TO_ADDR
// hardcoreCounter := 16 ;
2005: LD_ADDR_EXP 10
2009: PUSH
2010: LD_INT 16
2012: ST_TO_ADDR
// sRocket := false ;
2013: LD_ADDR_EXP 13
2017: PUSH
2018: LD_INT 0
2020: ST_TO_ADDR
// sSpeed := false ;
2021: LD_ADDR_EXP 12
2025: PUSH
2026: LD_INT 0
2028: ST_TO_ADDR
// sEngine := false ;
2029: LD_ADDR_EXP 14
2033: PUSH
2034: LD_INT 0
2036: ST_TO_ADDR
// sSpec := false ;
2037: LD_ADDR_EXP 11
2041: PUSH
2042: LD_INT 0
2044: ST_TO_ADDR
// sLevel := false ;
2045: LD_ADDR_EXP 15
2049: PUSH
2050: LD_INT 0
2052: ST_TO_ADDR
// sArmoury := false ;
2053: LD_ADDR_EXP 16
2057: PUSH
2058: LD_INT 0
2060: ST_TO_ADDR
// sRadar := false ;
2061: LD_ADDR_EXP 17
2065: PUSH
2066: LD_INT 0
2068: ST_TO_ADDR
// sBunker := false ;
2069: LD_ADDR_EXP 18
2073: PUSH
2074: LD_INT 0
2076: ST_TO_ADDR
// sHack := false ;
2077: LD_ADDR_EXP 19
2081: PUSH
2082: LD_INT 0
2084: ST_TO_ADDR
// sFire := false ;
2085: LD_ADDR_EXP 20
2089: PUSH
2090: LD_INT 0
2092: ST_TO_ADDR
// sRefresh := false ;
2093: LD_ADDR_EXP 21
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// sExp := false ;
2101: LD_ADDR_EXP 22
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// sDepot := false ;
2109: LD_ADDR_EXP 23
2113: PUSH
2114: LD_INT 0
2116: ST_TO_ADDR
// sFlag := false ;
2117: LD_ADDR_EXP 24
2121: PUSH
2122: LD_INT 0
2124: ST_TO_ADDR
// sKamikadze := false ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 0
2132: ST_TO_ADDR
// sTroll := false ;
2133: LD_ADDR_EXP 33
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// sSlow := false ;
2141: LD_ADDR_EXP 34
2145: PUSH
2146: LD_INT 0
2148: ST_TO_ADDR
// sLack := false ;
2149: LD_ADDR_EXP 35
2153: PUSH
2154: LD_INT 0
2156: ST_TO_ADDR
// sTank := false ;
2157: LD_ADDR_EXP 37
2161: PUSH
2162: LD_INT 0
2164: ST_TO_ADDR
// sRemote := false ;
2165: LD_ADDR_EXP 38
2169: PUSH
2170: LD_INT 0
2172: ST_TO_ADDR
// sPowell := false ;
2173: LD_ADDR_EXP 39
2177: PUSH
2178: LD_INT 0
2180: ST_TO_ADDR
// sTeleport := false ;
2181: LD_ADDR_EXP 42
2185: PUSH
2186: LD_INT 0
2188: ST_TO_ADDR
// sOilTower := false ;
2189: LD_ADDR_EXP 44
2193: PUSH
2194: LD_INT 0
2196: ST_TO_ADDR
// sShovel := false ;
2197: LD_ADDR_EXP 45
2201: PUSH
2202: LD_INT 0
2204: ST_TO_ADDR
// sSheik := false ;
2205: LD_ADDR_EXP 46
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// sEarthquake := false ;
2213: LD_ADDR_EXP 48
2217: PUSH
2218: LD_INT 0
2220: ST_TO_ADDR
// sAI := false ;
2221: LD_ADDR_EXP 49
2225: PUSH
2226: LD_INT 0
2228: ST_TO_ADDR
// sCargo := false ;
2229: LD_ADDR_EXP 52
2233: PUSH
2234: LD_INT 0
2236: ST_TO_ADDR
// sDLaser := false ;
2237: LD_ADDR_EXP 53
2241: PUSH
2242: LD_INT 0
2244: ST_TO_ADDR
// sExchange := false ;
2245: LD_ADDR_EXP 54
2249: PUSH
2250: LD_INT 0
2252: ST_TO_ADDR
// sFac := false ;
2253: LD_ADDR_EXP 55
2257: PUSH
2258: LD_INT 0
2260: ST_TO_ADDR
// sPower := false ;
2261: LD_ADDR_EXP 56
2265: PUSH
2266: LD_INT 0
2268: ST_TO_ADDR
// sRandom := false ;
2269: LD_ADDR_EXP 57
2273: PUSH
2274: LD_INT 0
2276: ST_TO_ADDR
// sShield := false ;
2277: LD_ADDR_EXP 58
2281: PUSH
2282: LD_INT 0
2284: ST_TO_ADDR
// sTime := false ;
2285: LD_ADDR_EXP 59
2289: PUSH
2290: LD_INT 0
2292: ST_TO_ADDR
// sTools := false ;
2293: LD_ADDR_EXP 60
2297: PUSH
2298: LD_INT 0
2300: ST_TO_ADDR
// sSold := false ;
2301: LD_ADDR_EXP 25
2305: PUSH
2306: LD_INT 0
2308: ST_TO_ADDR
// sDiff := false ;
2309: LD_ADDR_EXP 26
2313: PUSH
2314: LD_INT 0
2316: ST_TO_ADDR
// sFog := false ;
2317: LD_ADDR_EXP 29
2321: PUSH
2322: LD_INT 0
2324: ST_TO_ADDR
// sReset := false ;
2325: LD_ADDR_EXP 30
2329: PUSH
2330: LD_INT 0
2332: ST_TO_ADDR
// sSun := false ;
2333: LD_ADDR_EXP 31
2337: PUSH
2338: LD_INT 0
2340: ST_TO_ADDR
// sTiger := false ;
2341: LD_ADDR_EXP 27
2345: PUSH
2346: LD_INT 0
2348: ST_TO_ADDR
// sBomb := false ;
2349: LD_ADDR_EXP 28
2353: PUSH
2354: LD_INT 0
2356: ST_TO_ADDR
// sWound := false ;
2357: LD_ADDR_EXP 36
2361: PUSH
2362: LD_INT 0
2364: ST_TO_ADDR
// sBetray := false ;
2365: LD_ADDR_EXP 40
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// sContamin := false ;
2373: LD_ADDR_EXP 41
2377: PUSH
2378: LD_INT 0
2380: ST_TO_ADDR
// sOil := false ;
2381: LD_ADDR_EXP 43
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// sStu := false ;
2389: LD_ADDR_EXP 47
2393: PUSH
2394: LD_INT 0
2396: ST_TO_ADDR
// sBazooka := false ;
2397: LD_ADDR_EXP 50
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// sMortar := false ;
2405: LD_ADDR_EXP 51
2409: PUSH
2410: LD_INT 0
2412: ST_TO_ADDR
// sRanger := false ;
2413: LD_ADDR_EXP 61
2417: PUSH
2418: LD_INT 0
2420: ST_TO_ADDR
// end ;
2421: LD_VAR 0 1
2425: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
2432: PPUSH
// result := [ ] ;
2433: LD_ADDR_VAR 0 1
2437: PUSH
2438: EMPTY
2439: ST_TO_ADDR
// if campaign_id = 1 then
2440: LD_OWVAR 69
2444: PUSH
2445: LD_INT 1
2447: EQUAL
2448: IFFALSE 5386
// begin case mission_number of 1 :
2450: LD_OWVAR 70
2454: PUSH
2455: LD_INT 1
2457: DOUBLE
2458: EQUAL
2459: IFTRUE 2463
2461: GO 2527
2463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
2464: LD_ADDR_VAR 0 1
2468: PUSH
2469: LD_INT 2
2471: PUSH
2472: LD_INT 4
2474: PUSH
2475: LD_INT 11
2477: PUSH
2478: LD_INT 12
2480: PUSH
2481: LD_INT 15
2483: PUSH
2484: LD_INT 16
2486: PUSH
2487: LD_INT 22
2489: PUSH
2490: LD_INT 23
2492: PUSH
2493: LD_INT 26
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 101
2509: PUSH
2510: LD_INT 102
2512: PUSH
2513: LD_INT 106
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: ST_TO_ADDR
2525: GO 5384
2527: LD_INT 2
2529: DOUBLE
2530: EQUAL
2531: IFTRUE 2535
2533: GO 2607
2535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
2536: LD_ADDR_VAR 0 1
2540: PUSH
2541: LD_INT 2
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: LD_INT 11
2549: PUSH
2550: LD_INT 12
2552: PUSH
2553: LD_INT 15
2555: PUSH
2556: LD_INT 16
2558: PUSH
2559: LD_INT 22
2561: PUSH
2562: LD_INT 23
2564: PUSH
2565: LD_INT 26
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 101
2581: PUSH
2582: LD_INT 102
2584: PUSH
2585: LD_INT 105
2587: PUSH
2588: LD_INT 106
2590: PUSH
2591: LD_INT 108
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: ST_TO_ADDR
2605: GO 5384
2607: LD_INT 3
2609: DOUBLE
2610: EQUAL
2611: IFTRUE 2615
2613: GO 2691
2615: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
2616: LD_ADDR_VAR 0 1
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_INT 4
2626: PUSH
2627: LD_INT 5
2629: PUSH
2630: LD_INT 11
2632: PUSH
2633: LD_INT 12
2635: PUSH
2636: LD_INT 15
2638: PUSH
2639: LD_INT 16
2641: PUSH
2642: LD_INT 22
2644: PUSH
2645: LD_INT 26
2647: PUSH
2648: LD_INT 36
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 101
2665: PUSH
2666: LD_INT 102
2668: PUSH
2669: LD_INT 105
2671: PUSH
2672: LD_INT 106
2674: PUSH
2675: LD_INT 108
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: ST_TO_ADDR
2689: GO 5384
2691: LD_INT 4
2693: DOUBLE
2694: EQUAL
2695: IFTRUE 2699
2697: GO 2783
2699: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
2700: LD_ADDR_VAR 0 1
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 5
2713: PUSH
2714: LD_INT 8
2716: PUSH
2717: LD_INT 11
2719: PUSH
2720: LD_INT 12
2722: PUSH
2723: LD_INT 15
2725: PUSH
2726: LD_INT 16
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 23
2734: PUSH
2735: LD_INT 26
2737: PUSH
2738: LD_INT 36
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 101
2757: PUSH
2758: LD_INT 102
2760: PUSH
2761: LD_INT 105
2763: PUSH
2764: LD_INT 106
2766: PUSH
2767: LD_INT 108
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: ST_TO_ADDR
2781: GO 5384
2783: LD_INT 5
2785: DOUBLE
2786: EQUAL
2787: IFTRUE 2791
2789: GO 2891
2791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
2792: LD_ADDR_VAR 0 1
2796: PUSH
2797: LD_INT 2
2799: PUSH
2800: LD_INT 4
2802: PUSH
2803: LD_INT 5
2805: PUSH
2806: LD_INT 6
2808: PUSH
2809: LD_INT 8
2811: PUSH
2812: LD_INT 11
2814: PUSH
2815: LD_INT 12
2817: PUSH
2818: LD_INT 15
2820: PUSH
2821: LD_INT 16
2823: PUSH
2824: LD_INT 22
2826: PUSH
2827: LD_INT 23
2829: PUSH
2830: LD_INT 25
2832: PUSH
2833: LD_INT 26
2835: PUSH
2836: LD_INT 36
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 101
2857: PUSH
2858: LD_INT 102
2860: PUSH
2861: LD_INT 105
2863: PUSH
2864: LD_INT 106
2866: PUSH
2867: LD_INT 108
2869: PUSH
2870: LD_INT 109
2872: PUSH
2873: LD_INT 112
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: ST_TO_ADDR
2889: GO 5384
2891: LD_INT 6
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 3019
2899: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
2900: LD_ADDR_VAR 0 1
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: LD_INT 4
2910: PUSH
2911: LD_INT 5
2913: PUSH
2914: LD_INT 6
2916: PUSH
2917: LD_INT 8
2919: PUSH
2920: LD_INT 11
2922: PUSH
2923: LD_INT 12
2925: PUSH
2926: LD_INT 15
2928: PUSH
2929: LD_INT 16
2931: PUSH
2932: LD_INT 20
2934: PUSH
2935: LD_INT 21
2937: PUSH
2938: LD_INT 22
2940: PUSH
2941: LD_INT 23
2943: PUSH
2944: LD_INT 25
2946: PUSH
2947: LD_INT 26
2949: PUSH
2950: LD_INT 30
2952: PUSH
2953: LD_INT 31
2955: PUSH
2956: LD_INT 32
2958: PUSH
2959: LD_INT 36
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 101
2985: PUSH
2986: LD_INT 102
2988: PUSH
2989: LD_INT 105
2991: PUSH
2992: LD_INT 106
2994: PUSH
2995: LD_INT 108
2997: PUSH
2998: LD_INT 109
3000: PUSH
3001: LD_INT 112
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: ST_TO_ADDR
3017: GO 5384
3019: LD_INT 7
3021: DOUBLE
3022: EQUAL
3023: IFTRUE 3027
3025: GO 3127
3027: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
3028: LD_ADDR_VAR 0 1
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: LD_INT 5
3041: PUSH
3042: LD_INT 7
3044: PUSH
3045: LD_INT 11
3047: PUSH
3048: LD_INT 12
3050: PUSH
3051: LD_INT 15
3053: PUSH
3054: LD_INT 16
3056: PUSH
3057: LD_INT 20
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 22
3065: PUSH
3066: LD_INT 23
3068: PUSH
3069: LD_INT 25
3071: PUSH
3072: LD_INT 26
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 101
3093: PUSH
3094: LD_INT 102
3096: PUSH
3097: LD_INT 103
3099: PUSH
3100: LD_INT 105
3102: PUSH
3103: LD_INT 106
3105: PUSH
3106: LD_INT 108
3108: PUSH
3109: LD_INT 112
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: ST_TO_ADDR
3125: GO 5384
3127: LD_INT 8
3129: DOUBLE
3130: EQUAL
3131: IFTRUE 3135
3133: GO 3263
3135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
3136: LD_ADDR_VAR 0 1
3140: PUSH
3141: LD_INT 2
3143: PUSH
3144: LD_INT 4
3146: PUSH
3147: LD_INT 5
3149: PUSH
3150: LD_INT 6
3152: PUSH
3153: LD_INT 7
3155: PUSH
3156: LD_INT 8
3158: PUSH
3159: LD_INT 11
3161: PUSH
3162: LD_INT 12
3164: PUSH
3165: LD_INT 15
3167: PUSH
3168: LD_INT 16
3170: PUSH
3171: LD_INT 20
3173: PUSH
3174: LD_INT 21
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_INT 23
3182: PUSH
3183: LD_INT 25
3185: PUSH
3186: LD_INT 26
3188: PUSH
3189: LD_INT 30
3191: PUSH
3192: LD_INT 31
3194: PUSH
3195: LD_INT 32
3197: PUSH
3198: LD_INT 36
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 101
3225: PUSH
3226: LD_INT 102
3228: PUSH
3229: LD_INT 103
3231: PUSH
3232: LD_INT 105
3234: PUSH
3235: LD_INT 106
3237: PUSH
3238: LD_INT 108
3240: PUSH
3241: LD_INT 109
3243: PUSH
3244: LD_INT 112
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: ST_TO_ADDR
3261: GO 5384
3263: LD_INT 9
3265: DOUBLE
3266: EQUAL
3267: IFTRUE 3271
3269: GO 3407
3271: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
3272: LD_ADDR_VAR 0 1
3276: PUSH
3277: LD_INT 2
3279: PUSH
3280: LD_INT 4
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: LD_INT 6
3288: PUSH
3289: LD_INT 7
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: LD_INT 11
3297: PUSH
3298: LD_INT 12
3300: PUSH
3301: LD_INT 15
3303: PUSH
3304: LD_INT 16
3306: PUSH
3307: LD_INT 20
3309: PUSH
3310: LD_INT 21
3312: PUSH
3313: LD_INT 22
3315: PUSH
3316: LD_INT 23
3318: PUSH
3319: LD_INT 25
3321: PUSH
3322: LD_INT 26
3324: PUSH
3325: LD_INT 28
3327: PUSH
3328: LD_INT 30
3330: PUSH
3331: LD_INT 31
3333: PUSH
3334: LD_INT 32
3336: PUSH
3337: LD_INT 36
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_INT 101
3365: PUSH
3366: LD_INT 102
3368: PUSH
3369: LD_INT 103
3371: PUSH
3372: LD_INT 105
3374: PUSH
3375: LD_INT 106
3377: PUSH
3378: LD_INT 108
3380: PUSH
3381: LD_INT 109
3383: PUSH
3384: LD_INT 112
3386: PUSH
3387: LD_INT 114
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: ST_TO_ADDR
3405: GO 5384
3407: LD_INT 10
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3415
3413: GO 3599
3415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
3416: LD_ADDR_VAR 0 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 4
3426: PUSH
3427: LD_INT 5
3429: PUSH
3430: LD_INT 6
3432: PUSH
3433: LD_INT 7
3435: PUSH
3436: LD_INT 8
3438: PUSH
3439: LD_INT 9
3441: PUSH
3442: LD_INT 10
3444: PUSH
3445: LD_INT 11
3447: PUSH
3448: LD_INT 12
3450: PUSH
3451: LD_INT 13
3453: PUSH
3454: LD_INT 14
3456: PUSH
3457: LD_INT 15
3459: PUSH
3460: LD_INT 16
3462: PUSH
3463: LD_INT 17
3465: PUSH
3466: LD_INT 18
3468: PUSH
3469: LD_INT 19
3471: PUSH
3472: LD_INT 20
3474: PUSH
3475: LD_INT 21
3477: PUSH
3478: LD_INT 22
3480: PUSH
3481: LD_INT 23
3483: PUSH
3484: LD_INT 24
3486: PUSH
3487: LD_INT 25
3489: PUSH
3490: LD_INT 26
3492: PUSH
3493: LD_INT 28
3495: PUSH
3496: LD_INT 30
3498: PUSH
3499: LD_INT 31
3501: PUSH
3502: LD_INT 32
3504: PUSH
3505: LD_INT 36
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 101
3541: PUSH
3542: LD_INT 102
3544: PUSH
3545: LD_INT 103
3547: PUSH
3548: LD_INT 104
3550: PUSH
3551: LD_INT 105
3553: PUSH
3554: LD_INT 106
3556: PUSH
3557: LD_INT 107
3559: PUSH
3560: LD_INT 108
3562: PUSH
3563: LD_INT 109
3565: PUSH
3566: LD_INT 110
3568: PUSH
3569: LD_INT 111
3571: PUSH
3572: LD_INT 112
3574: PUSH
3575: LD_INT 114
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: ST_TO_ADDR
3597: GO 5384
3599: LD_INT 11
3601: DOUBLE
3602: EQUAL
3603: IFTRUE 3607
3605: GO 3799
3607: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
3608: LD_ADDR_VAR 0 1
3612: PUSH
3613: LD_INT 2
3615: PUSH
3616: LD_INT 3
3618: PUSH
3619: LD_INT 4
3621: PUSH
3622: LD_INT 5
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: LD_INT 7
3630: PUSH
3631: LD_INT 8
3633: PUSH
3634: LD_INT 9
3636: PUSH
3637: LD_INT 10
3639: PUSH
3640: LD_INT 11
3642: PUSH
3643: LD_INT 12
3645: PUSH
3646: LD_INT 13
3648: PUSH
3649: LD_INT 14
3651: PUSH
3652: LD_INT 15
3654: PUSH
3655: LD_INT 16
3657: PUSH
3658: LD_INT 17
3660: PUSH
3661: LD_INT 18
3663: PUSH
3664: LD_INT 19
3666: PUSH
3667: LD_INT 20
3669: PUSH
3670: LD_INT 21
3672: PUSH
3673: LD_INT 22
3675: PUSH
3676: LD_INT 23
3678: PUSH
3679: LD_INT 24
3681: PUSH
3682: LD_INT 25
3684: PUSH
3685: LD_INT 26
3687: PUSH
3688: LD_INT 28
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: LD_INT 32
3699: PUSH
3700: LD_INT 34
3702: PUSH
3703: LD_INT 36
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 101
3741: PUSH
3742: LD_INT 102
3744: PUSH
3745: LD_INT 103
3747: PUSH
3748: LD_INT 104
3750: PUSH
3751: LD_INT 105
3753: PUSH
3754: LD_INT 106
3756: PUSH
3757: LD_INT 107
3759: PUSH
3760: LD_INT 108
3762: PUSH
3763: LD_INT 109
3765: PUSH
3766: LD_INT 110
3768: PUSH
3769: LD_INT 111
3771: PUSH
3772: LD_INT 112
3774: PUSH
3775: LD_INT 114
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: ST_TO_ADDR
3797: GO 5384
3799: LD_INT 12
3801: DOUBLE
3802: EQUAL
3803: IFTRUE 3807
3805: GO 4015
3807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
3808: LD_ADDR_VAR 0 1
3812: PUSH
3813: LD_INT 1
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 5
3827: PUSH
3828: LD_INT 6
3830: PUSH
3831: LD_INT 7
3833: PUSH
3834: LD_INT 8
3836: PUSH
3837: LD_INT 9
3839: PUSH
3840: LD_INT 10
3842: PUSH
3843: LD_INT 11
3845: PUSH
3846: LD_INT 12
3848: PUSH
3849: LD_INT 13
3851: PUSH
3852: LD_INT 14
3854: PUSH
3855: LD_INT 15
3857: PUSH
3858: LD_INT 16
3860: PUSH
3861: LD_INT 17
3863: PUSH
3864: LD_INT 18
3866: PUSH
3867: LD_INT 19
3869: PUSH
3870: LD_INT 20
3872: PUSH
3873: LD_INT 21
3875: PUSH
3876: LD_INT 22
3878: PUSH
3879: LD_INT 23
3881: PUSH
3882: LD_INT 24
3884: PUSH
3885: LD_INT 25
3887: PUSH
3888: LD_INT 26
3890: PUSH
3891: LD_INT 27
3893: PUSH
3894: LD_INT 28
3896: PUSH
3897: LD_INT 30
3899: PUSH
3900: LD_INT 31
3902: PUSH
3903: LD_INT 32
3905: PUSH
3906: LD_INT 33
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 36
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 101
3953: PUSH
3954: LD_INT 102
3956: PUSH
3957: LD_INT 103
3959: PUSH
3960: LD_INT 104
3962: PUSH
3963: LD_INT 105
3965: PUSH
3966: LD_INT 106
3968: PUSH
3969: LD_INT 107
3971: PUSH
3972: LD_INT 108
3974: PUSH
3975: LD_INT 109
3977: PUSH
3978: LD_INT 110
3980: PUSH
3981: LD_INT 111
3983: PUSH
3984: LD_INT 112
3986: PUSH
3987: LD_INT 113
3989: PUSH
3990: LD_INT 114
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: ST_TO_ADDR
4013: GO 5384
4015: LD_INT 13
4017: DOUBLE
4018: EQUAL
4019: IFTRUE 4023
4021: GO 4219
4023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 5
4043: PUSH
4044: LD_INT 8
4046: PUSH
4047: LD_INT 9
4049: PUSH
4050: LD_INT 10
4052: PUSH
4053: LD_INT 11
4055: PUSH
4056: LD_INT 12
4058: PUSH
4059: LD_INT 14
4061: PUSH
4062: LD_INT 15
4064: PUSH
4065: LD_INT 16
4067: PUSH
4068: LD_INT 17
4070: PUSH
4071: LD_INT 18
4073: PUSH
4074: LD_INT 19
4076: PUSH
4077: LD_INT 20
4079: PUSH
4080: LD_INT 21
4082: PUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 23
4088: PUSH
4089: LD_INT 24
4091: PUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 26
4097: PUSH
4098: LD_INT 27
4100: PUSH
4101: LD_INT 28
4103: PUSH
4104: LD_INT 30
4106: PUSH
4107: LD_INT 31
4109: PUSH
4110: LD_INT 32
4112: PUSH
4113: LD_INT 33
4115: PUSH
4116: LD_INT 34
4118: PUSH
4119: LD_INT 36
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 101
4157: PUSH
4158: LD_INT 102
4160: PUSH
4161: LD_INT 103
4163: PUSH
4164: LD_INT 104
4166: PUSH
4167: LD_INT 105
4169: PUSH
4170: LD_INT 106
4172: PUSH
4173: LD_INT 107
4175: PUSH
4176: LD_INT 108
4178: PUSH
4179: LD_INT 109
4181: PUSH
4182: LD_INT 110
4184: PUSH
4185: LD_INT 111
4187: PUSH
4188: LD_INT 112
4190: PUSH
4191: LD_INT 113
4193: PUSH
4194: LD_INT 114
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: ST_TO_ADDR
4217: GO 5384
4219: LD_INT 14
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4439
4227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
4228: LD_ADDR_VAR 0 1
4232: PUSH
4233: LD_INT 1
4235: PUSH
4236: LD_INT 2
4238: PUSH
4239: LD_INT 3
4241: PUSH
4242: LD_INT 4
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 6
4250: PUSH
4251: LD_INT 7
4253: PUSH
4254: LD_INT 8
4256: PUSH
4257: LD_INT 9
4259: PUSH
4260: LD_INT 10
4262: PUSH
4263: LD_INT 11
4265: PUSH
4266: LD_INT 12
4268: PUSH
4269: LD_INT 13
4271: PUSH
4272: LD_INT 14
4274: PUSH
4275: LD_INT 15
4277: PUSH
4278: LD_INT 16
4280: PUSH
4281: LD_INT 17
4283: PUSH
4284: LD_INT 18
4286: PUSH
4287: LD_INT 19
4289: PUSH
4290: LD_INT 20
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_INT 23
4301: PUSH
4302: LD_INT 24
4304: PUSH
4305: LD_INT 25
4307: PUSH
4308: LD_INT 26
4310: PUSH
4311: LD_INT 27
4313: PUSH
4314: LD_INT 28
4316: PUSH
4317: LD_INT 29
4319: PUSH
4320: LD_INT 30
4322: PUSH
4323: LD_INT 31
4325: PUSH
4326: LD_INT 32
4328: PUSH
4329: LD_INT 33
4331: PUSH
4332: LD_INT 34
4334: PUSH
4335: LD_INT 36
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: PUSH
4375: LD_INT 101
4377: PUSH
4378: LD_INT 102
4380: PUSH
4381: LD_INT 103
4383: PUSH
4384: LD_INT 104
4386: PUSH
4387: LD_INT 105
4389: PUSH
4390: LD_INT 106
4392: PUSH
4393: LD_INT 107
4395: PUSH
4396: LD_INT 108
4398: PUSH
4399: LD_INT 109
4401: PUSH
4402: LD_INT 110
4404: PUSH
4405: LD_INT 111
4407: PUSH
4408: LD_INT 112
4410: PUSH
4411: LD_INT 113
4413: PUSH
4414: LD_INT 114
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: ST_TO_ADDR
4437: GO 5384
4439: LD_INT 15
4441: DOUBLE
4442: EQUAL
4443: IFTRUE 4447
4445: GO 4659
4447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: LD_INT 2
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: LD_INT 6
4470: PUSH
4471: LD_INT 7
4473: PUSH
4474: LD_INT 8
4476: PUSH
4477: LD_INT 9
4479: PUSH
4480: LD_INT 10
4482: PUSH
4483: LD_INT 11
4485: PUSH
4486: LD_INT 12
4488: PUSH
4489: LD_INT 13
4491: PUSH
4492: LD_INT 14
4494: PUSH
4495: LD_INT 15
4497: PUSH
4498: LD_INT 16
4500: PUSH
4501: LD_INT 17
4503: PUSH
4504: LD_INT 18
4506: PUSH
4507: LD_INT 19
4509: PUSH
4510: LD_INT 20
4512: PUSH
4513: LD_INT 21
4515: PUSH
4516: LD_INT 22
4518: PUSH
4519: LD_INT 23
4521: PUSH
4522: LD_INT 24
4524: PUSH
4525: LD_INT 25
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 27
4533: PUSH
4534: LD_INT 28
4536: PUSH
4537: LD_INT 29
4539: PUSH
4540: LD_INT 30
4542: PUSH
4543: LD_INT 31
4545: PUSH
4546: LD_INT 32
4548: PUSH
4549: LD_INT 33
4551: PUSH
4552: LD_INT 34
4554: PUSH
4555: LD_INT 36
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 101
4597: PUSH
4598: LD_INT 102
4600: PUSH
4601: LD_INT 103
4603: PUSH
4604: LD_INT 104
4606: PUSH
4607: LD_INT 105
4609: PUSH
4610: LD_INT 106
4612: PUSH
4613: LD_INT 107
4615: PUSH
4616: LD_INT 108
4618: PUSH
4619: LD_INT 109
4621: PUSH
4622: LD_INT 110
4624: PUSH
4625: LD_INT 111
4627: PUSH
4628: LD_INT 112
4630: PUSH
4631: LD_INT 113
4633: PUSH
4634: LD_INT 114
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: ST_TO_ADDR
4657: GO 5384
4659: LD_INT 16
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4791
4667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
4668: LD_ADDR_VAR 0 1
4672: PUSH
4673: LD_INT 2
4675: PUSH
4676: LD_INT 4
4678: PUSH
4679: LD_INT 5
4681: PUSH
4682: LD_INT 7
4684: PUSH
4685: LD_INT 11
4687: PUSH
4688: LD_INT 12
4690: PUSH
4691: LD_INT 15
4693: PUSH
4694: LD_INT 16
4696: PUSH
4697: LD_INT 20
4699: PUSH
4700: LD_INT 21
4702: PUSH
4703: LD_INT 22
4705: PUSH
4706: LD_INT 23
4708: PUSH
4709: LD_INT 25
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 30
4717: PUSH
4718: LD_INT 31
4720: PUSH
4721: LD_INT 32
4723: PUSH
4724: LD_INT 33
4726: PUSH
4727: LD_INT 34
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 101
4753: PUSH
4754: LD_INT 102
4756: PUSH
4757: LD_INT 103
4759: PUSH
4760: LD_INT 106
4762: PUSH
4763: LD_INT 108
4765: PUSH
4766: LD_INT 112
4768: PUSH
4769: LD_INT 113
4771: PUSH
4772: LD_INT 114
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: ST_TO_ADDR
4789: GO 5384
4791: LD_INT 17
4793: DOUBLE
4794: EQUAL
4795: IFTRUE 4799
4797: GO 5011
4799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 6
4822: PUSH
4823: LD_INT 7
4825: PUSH
4826: LD_INT 8
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: LD_INT 10
4834: PUSH
4835: LD_INT 11
4837: PUSH
4838: LD_INT 12
4840: PUSH
4841: LD_INT 13
4843: PUSH
4844: LD_INT 14
4846: PUSH
4847: LD_INT 15
4849: PUSH
4850: LD_INT 16
4852: PUSH
4853: LD_INT 17
4855: PUSH
4856: LD_INT 18
4858: PUSH
4859: LD_INT 19
4861: PUSH
4862: LD_INT 20
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 23
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 25
4879: PUSH
4880: LD_INT 26
4882: PUSH
4883: LD_INT 27
4885: PUSH
4886: LD_INT 28
4888: PUSH
4889: LD_INT 29
4891: PUSH
4892: LD_INT 30
4894: PUSH
4895: LD_INT 31
4897: PUSH
4898: LD_INT 32
4900: PUSH
4901: LD_INT 33
4903: PUSH
4904: LD_INT 34
4906: PUSH
4907: LD_INT 36
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 101
4949: PUSH
4950: LD_INT 102
4952: PUSH
4953: LD_INT 103
4955: PUSH
4956: LD_INT 104
4958: PUSH
4959: LD_INT 105
4961: PUSH
4962: LD_INT 106
4964: PUSH
4965: LD_INT 107
4967: PUSH
4968: LD_INT 108
4970: PUSH
4971: LD_INT 109
4973: PUSH
4974: LD_INT 110
4976: PUSH
4977: LD_INT 111
4979: PUSH
4980: LD_INT 112
4982: PUSH
4983: LD_INT 113
4985: PUSH
4986: LD_INT 114
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5384
5011: LD_INT 18
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5155
5019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
5020: LD_ADDR_VAR 0 1
5024: PUSH
5025: LD_INT 2
5027: PUSH
5028: LD_INT 4
5030: PUSH
5031: LD_INT 5
5033: PUSH
5034: LD_INT 7
5036: PUSH
5037: LD_INT 11
5039: PUSH
5040: LD_INT 12
5042: PUSH
5043: LD_INT 15
5045: PUSH
5046: LD_INT 16
5048: PUSH
5049: LD_INT 20
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 22
5057: PUSH
5058: LD_INT 23
5060: PUSH
5061: LD_INT 25
5063: PUSH
5064: LD_INT 26
5066: PUSH
5067: LD_INT 30
5069: PUSH
5070: LD_INT 31
5072: PUSH
5073: LD_INT 32
5075: PUSH
5076: LD_INT 33
5078: PUSH
5079: LD_INT 34
5081: PUSH
5082: LD_INT 35
5084: PUSH
5085: LD_INT 36
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 101
5113: PUSH
5114: LD_INT 102
5116: PUSH
5117: LD_INT 103
5119: PUSH
5120: LD_INT 106
5122: PUSH
5123: LD_INT 108
5125: PUSH
5126: LD_INT 112
5128: PUSH
5129: LD_INT 113
5131: PUSH
5132: LD_INT 114
5134: PUSH
5135: LD_INT 115
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 5384
5155: LD_INT 19
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5383
5163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
5164: LD_ADDR_VAR 0 1
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: LD_INT 6
5186: PUSH
5187: LD_INT 7
5189: PUSH
5190: LD_INT 8
5192: PUSH
5193: LD_INT 9
5195: PUSH
5196: LD_INT 10
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 13
5207: PUSH
5208: LD_INT 14
5210: PUSH
5211: LD_INT 15
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: LD_INT 17
5219: PUSH
5220: LD_INT 18
5222: PUSH
5223: LD_INT 19
5225: PUSH
5226: LD_INT 20
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_INT 23
5237: PUSH
5238: LD_INT 24
5240: PUSH
5241: LD_INT 25
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 27
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 29
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 35
5273: PUSH
5274: LD_INT 36
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 101
5317: PUSH
5318: LD_INT 102
5320: PUSH
5321: LD_INT 103
5323: PUSH
5324: LD_INT 104
5326: PUSH
5327: LD_INT 105
5329: PUSH
5330: LD_INT 106
5332: PUSH
5333: LD_INT 107
5335: PUSH
5336: LD_INT 108
5338: PUSH
5339: LD_INT 109
5341: PUSH
5342: LD_INT 110
5344: PUSH
5345: LD_INT 111
5347: PUSH
5348: LD_INT 112
5350: PUSH
5351: LD_INT 113
5353: PUSH
5354: LD_INT 114
5356: PUSH
5357: LD_INT 115
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: ST_TO_ADDR
5381: GO 5384
5383: POP
// end else
5384: GO 5603
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
5386: LD_ADDR_VAR 0 1
5390: PUSH
5391: LD_INT 1
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: LD_INT 3
5399: PUSH
5400: LD_INT 4
5402: PUSH
5403: LD_INT 5
5405: PUSH
5406: LD_INT 6
5408: PUSH
5409: LD_INT 7
5411: PUSH
5412: LD_INT 8
5414: PUSH
5415: LD_INT 9
5417: PUSH
5418: LD_INT 10
5420: PUSH
5421: LD_INT 11
5423: PUSH
5424: LD_INT 12
5426: PUSH
5427: LD_INT 13
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: LD_INT 15
5435: PUSH
5436: LD_INT 16
5438: PUSH
5439: LD_INT 17
5441: PUSH
5442: LD_INT 18
5444: PUSH
5445: LD_INT 19
5447: PUSH
5448: LD_INT 20
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: LD_INT 25
5465: PUSH
5466: LD_INT 26
5468: PUSH
5469: LD_INT 27
5471: PUSH
5472: LD_INT 28
5474: PUSH
5475: LD_INT 29
5477: PUSH
5478: LD_INT 30
5480: PUSH
5481: LD_INT 31
5483: PUSH
5484: LD_INT 32
5486: PUSH
5487: LD_INT 33
5489: PUSH
5490: LD_INT 34
5492: PUSH
5493: LD_INT 35
5495: PUSH
5496: LD_INT 36
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 101
5539: PUSH
5540: LD_INT 102
5542: PUSH
5543: LD_INT 103
5545: PUSH
5546: LD_INT 104
5548: PUSH
5549: LD_INT 105
5551: PUSH
5552: LD_INT 106
5554: PUSH
5555: LD_INT 107
5557: PUSH
5558: LD_INT 108
5560: PUSH
5561: LD_INT 109
5563: PUSH
5564: LD_INT 110
5566: PUSH
5567: LD_INT 111
5569: PUSH
5570: LD_INT 112
5572: PUSH
5573: LD_INT 113
5575: PUSH
5576: LD_INT 114
5578: PUSH
5579: LD_INT 115
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: ST_TO_ADDR
// if result then
5603: LD_VAR 0 1
5607: IFFALSE 5896
// begin normal :=  ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_STRING 
5616: ST_TO_ADDR
// hardcore :=  ;
5617: LD_ADDR_VAR 0 4
5621: PUSH
5622: LD_STRING 
5624: ST_TO_ADDR
// for i = 1 to normalCounter do
5625: LD_ADDR_VAR 0 5
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_EXP 9
5639: PUSH
5640: FOR_TO
5641: IFFALSE 5742
// begin tmp := 0 ;
5643: LD_ADDR_VAR 0 2
5647: PUSH
5648: LD_STRING 0
5650: ST_TO_ADDR
// if result [ 1 ] then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: IFFALSE 5724
// if result [ 1 ] [ 1 ] = i then
5661: LD_VAR 0 1
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_INT 1
5672: ARRAY
5673: PUSH
5674: LD_VAR 0 5
5678: EQUAL
5679: IFFALSE 5724
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5681: LD_ADDR_VAR 0 1
5685: PUSH
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: LD_VAR 0 1
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PPUSH
5703: LD_INT 1
5705: PPUSH
5706: CALL_OW 3
5710: PPUSH
5711: CALL_OW 1
5715: ST_TO_ADDR
// tmp := 1 ;
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: LD_STRING 1
5723: ST_TO_ADDR
// end ; normal := normal & tmp ;
5724: LD_ADDR_VAR 0 3
5728: PUSH
5729: LD_VAR 0 3
5733: PUSH
5734: LD_VAR 0 2
5738: STR
5739: ST_TO_ADDR
// end ;
5740: GO 5640
5742: POP
5743: POP
// for i = 1 to hardcoreCounter do
5744: LD_ADDR_VAR 0 5
5748: PUSH
5749: DOUBLE
5750: LD_INT 1
5752: DEC
5753: ST_TO_ADDR
5754: LD_EXP 10
5758: PUSH
5759: FOR_TO
5760: IFFALSE 5865
// begin tmp := 0 ;
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: LD_STRING 0
5769: ST_TO_ADDR
// if result [ 2 ] then
5770: LD_VAR 0 1
5774: PUSH
5775: LD_INT 2
5777: ARRAY
5778: IFFALSE 5847
// if result [ 2 ] [ 1 ] = 100 + i then
5780: LD_VAR 0 1
5784: PUSH
5785: LD_INT 2
5787: ARRAY
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PUSH
5793: LD_INT 100
5795: PUSH
5796: LD_VAR 0 5
5800: PLUS
5801: EQUAL
5802: IFFALSE 5847
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5804: LD_ADDR_VAR 0 1
5808: PUSH
5809: LD_VAR 0 1
5813: PPUSH
5814: LD_INT 2
5816: PPUSH
5817: LD_VAR 0 1
5821: PUSH
5822: LD_INT 2
5824: ARRAY
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 3
5833: PPUSH
5834: CALL_OW 1
5838: ST_TO_ADDR
// tmp := 1 ;
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_STRING 1
5846: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5847: LD_ADDR_VAR 0 4
5851: PUSH
5852: LD_VAR 0 4
5856: PUSH
5857: LD_VAR 0 2
5861: STR
5862: ST_TO_ADDR
// end ;
5863: GO 5759
5865: POP
5866: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
5867: LD_STRING getStreamItemsFromMission("
5869: PUSH
5870: LD_VAR 0 3
5874: STR
5875: PUSH
5876: LD_STRING ","
5878: STR
5879: PUSH
5880: LD_VAR 0 4
5884: STR
5885: PUSH
5886: LD_STRING ")
5888: STR
5889: PPUSH
5890: CALL_OW 559
// end else
5894: GO 5903
// ToLua ( getStreamItemsFromMission("","") ) ;
5896: LD_STRING getStreamItemsFromMission("","")
5898: PPUSH
5899: CALL_OW 559
// end ;
5903: LD_VAR 0 1
5907: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5908: LD_VAR 0 2
5912: PUSH
5913: LD_INT 100
5915: EQUAL
5916: IFFALSE 6865
// begin if not StreamModeActive then
5918: LD_EXP 8
5922: NOT
5923: IFFALSE 5933
// StreamModeActive := true ;
5925: LD_ADDR_EXP 8
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 0 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 0
5940: EQUAL
5941: IFFALSE 5947
// InitStreamMode ;
5943: CALL 1986 0 0
// if p3 = 1 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 1
5954: EQUAL
5955: IFFALSE 5965
// sRocket := true ;
5957: LD_ADDR_EXP 13
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 2 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 2
5972: EQUAL
5973: IFFALSE 5983
// sSpeed := true ;
5975: LD_ADDR_EXP 12
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 3 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 3
5990: EQUAL
5991: IFFALSE 6001
// sEngine := true ;
5993: LD_ADDR_EXP 14
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 4 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 4
6008: EQUAL
6009: IFFALSE 6019
// sSpec := true ;
6011: LD_ADDR_EXP 11
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 5 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 5
6026: EQUAL
6027: IFFALSE 6037
// sLevel := true ;
6029: LD_ADDR_EXP 15
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 6 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 6
6044: EQUAL
6045: IFFALSE 6055
// sArmoury := true ;
6047: LD_ADDR_EXP 16
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 7 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 7
6062: EQUAL
6063: IFFALSE 6073
// sRadar := true ;
6065: LD_ADDR_EXP 17
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 8 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 8
6080: EQUAL
6081: IFFALSE 6091
// sBunker := true ;
6083: LD_ADDR_EXP 18
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 9 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 9
6098: EQUAL
6099: IFFALSE 6109
// sHack := true ;
6101: LD_ADDR_EXP 19
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 10 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 10
6116: EQUAL
6117: IFFALSE 6127
// sFire := true ;
6119: LD_ADDR_EXP 20
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 11 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 11
6134: EQUAL
6135: IFFALSE 6145
// sRefresh := true ;
6137: LD_ADDR_EXP 21
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 12 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 12
6152: EQUAL
6153: IFFALSE 6163
// sExp := true ;
6155: LD_ADDR_EXP 22
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 13 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 13
6170: EQUAL
6171: IFFALSE 6181
// sDepot := true ;
6173: LD_ADDR_EXP 23
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 14 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 14
6188: EQUAL
6189: IFFALSE 6199
// sFlag := true ;
6191: LD_ADDR_EXP 24
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 15 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 15
6206: EQUAL
6207: IFFALSE 6217
// sKamikadze := true ;
6209: LD_ADDR_EXP 32
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 16 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 16
6224: EQUAL
6225: IFFALSE 6235
// sTroll := true ;
6227: LD_ADDR_EXP 33
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 17 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 17
6242: EQUAL
6243: IFFALSE 6253
// sSlow := true ;
6245: LD_ADDR_EXP 34
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 18 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 18
6260: EQUAL
6261: IFFALSE 6271
// sLack := true ;
6263: LD_ADDR_EXP 35
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 19 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 19
6278: EQUAL
6279: IFFALSE 6289
// sTank := true ;
6281: LD_ADDR_EXP 37
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 20 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 20
6296: EQUAL
6297: IFFALSE 6307
// sRemote := true ;
6299: LD_ADDR_EXP 38
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 21 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 21
6314: EQUAL
6315: IFFALSE 6325
// sPowell := true ;
6317: LD_ADDR_EXP 39
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 22 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 22
6332: EQUAL
6333: IFFALSE 6343
// sTeleport := true ;
6335: LD_ADDR_EXP 42
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 23 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 23
6350: EQUAL
6351: IFFALSE 6361
// sOilTower := true ;
6353: LD_ADDR_EXP 44
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 24 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 24
6368: EQUAL
6369: IFFALSE 6379
// sShovel := true ;
6371: LD_ADDR_EXP 45
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 25 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 25
6386: EQUAL
6387: IFFALSE 6397
// sSheik := true ;
6389: LD_ADDR_EXP 46
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 26 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 26
6404: EQUAL
6405: IFFALSE 6415
// sEarthquake := true ;
6407: LD_ADDR_EXP 48
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 27 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 27
6422: EQUAL
6423: IFFALSE 6433
// sAI := true ;
6425: LD_ADDR_EXP 49
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 28 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 28
6440: EQUAL
6441: IFFALSE 6451
// sCargo := true ;
6443: LD_ADDR_EXP 52
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 29 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 29
6458: EQUAL
6459: IFFALSE 6469
// sDLaser := true ;
6461: LD_ADDR_EXP 53
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 30 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 30
6476: EQUAL
6477: IFFALSE 6487
// sExchange := true ;
6479: LD_ADDR_EXP 54
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 31 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 31
6494: EQUAL
6495: IFFALSE 6505
// sFac := true ;
6497: LD_ADDR_EXP 55
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 32 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 32
6512: EQUAL
6513: IFFALSE 6523
// sPower := true ;
6515: LD_ADDR_EXP 56
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 33 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 33
6530: EQUAL
6531: IFFALSE 6541
// sRandom := true ;
6533: LD_ADDR_EXP 57
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 34 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 34
6548: EQUAL
6549: IFFALSE 6559
// sShield := true ;
6551: LD_ADDR_EXP 58
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 35 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 35
6566: EQUAL
6567: IFFALSE 6577
// sTime := true ;
6569: LD_ADDR_EXP 59
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 36 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 36
6584: EQUAL
6585: IFFALSE 6595
// sTools := true ;
6587: LD_ADDR_EXP 60
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 101 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 101
6602: EQUAL
6603: IFFALSE 6613
// sSold := true ;
6605: LD_ADDR_EXP 25
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// if p3 = 102 then
6613: LD_VAR 0 3
6617: PUSH
6618: LD_INT 102
6620: EQUAL
6621: IFFALSE 6631
// sDiff := true ;
6623: LD_ADDR_EXP 26
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// if p3 = 103 then
6631: LD_VAR 0 3
6635: PUSH
6636: LD_INT 103
6638: EQUAL
6639: IFFALSE 6649
// sFog := true ;
6641: LD_ADDR_EXP 29
6645: PUSH
6646: LD_INT 1
6648: ST_TO_ADDR
// if p3 = 104 then
6649: LD_VAR 0 3
6653: PUSH
6654: LD_INT 104
6656: EQUAL
6657: IFFALSE 6667
// sReset := true ;
6659: LD_ADDR_EXP 30
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// if p3 = 105 then
6667: LD_VAR 0 3
6671: PUSH
6672: LD_INT 105
6674: EQUAL
6675: IFFALSE 6685
// sSun := true ;
6677: LD_ADDR_EXP 31
6681: PUSH
6682: LD_INT 1
6684: ST_TO_ADDR
// if p3 = 106 then
6685: LD_VAR 0 3
6689: PUSH
6690: LD_INT 106
6692: EQUAL
6693: IFFALSE 6703
// sTiger := true ;
6695: LD_ADDR_EXP 27
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// if p3 = 107 then
6703: LD_VAR 0 3
6707: PUSH
6708: LD_INT 107
6710: EQUAL
6711: IFFALSE 6721
// sBomb := true ;
6713: LD_ADDR_EXP 28
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// if p3 = 108 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_INT 108
6728: EQUAL
6729: IFFALSE 6739
// sWound := true ;
6731: LD_ADDR_EXP 36
6735: PUSH
6736: LD_INT 1
6738: ST_TO_ADDR
// if p3 = 109 then
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 109
6746: EQUAL
6747: IFFALSE 6757
// sBetray := true ;
6749: LD_ADDR_EXP 40
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// if p3 = 110 then
6757: LD_VAR 0 3
6761: PUSH
6762: LD_INT 110
6764: EQUAL
6765: IFFALSE 6775
// sContamin := true ;
6767: LD_ADDR_EXP 41
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// if p3 = 111 then
6775: LD_VAR 0 3
6779: PUSH
6780: LD_INT 111
6782: EQUAL
6783: IFFALSE 6793
// sOil := true ;
6785: LD_ADDR_EXP 43
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// if p3 = 112 then
6793: LD_VAR 0 3
6797: PUSH
6798: LD_INT 112
6800: EQUAL
6801: IFFALSE 6811
// sStu := true ;
6803: LD_ADDR_EXP 47
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// if p3 = 113 then
6811: LD_VAR 0 3
6815: PUSH
6816: LD_INT 113
6818: EQUAL
6819: IFFALSE 6829
// sBazooka := true ;
6821: LD_ADDR_EXP 50
6825: PUSH
6826: LD_INT 1
6828: ST_TO_ADDR
// if p3 = 114 then
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 114
6836: EQUAL
6837: IFFALSE 6847
// sMortar := true ;
6839: LD_ADDR_EXP 51
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// if p3 = 115 then
6847: LD_VAR 0 3
6851: PUSH
6852: LD_INT 115
6854: EQUAL
6855: IFFALSE 6865
// sRanger := true ;
6857: LD_ADDR_EXP 61
6861: PUSH
6862: LD_INT 1
6864: ST_TO_ADDR
// end ; end ;
6865: PPOPN 6
6867: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6868: LD_EXP 8
6872: PUSH
6873: LD_EXP 13
6877: AND
6878: IFFALSE 7002
6880: GO 6882
6882: DISABLE
6883: LD_INT 0
6885: PPUSH
6886: PPUSH
// begin enable ;
6887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_OWVAR 2
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 2
6907: PUSH
6908: LD_INT 34
6910: PUSH
6911: LD_INT 7
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 34
6920: PUSH
6921: LD_INT 45
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 34
6930: PUSH
6931: LD_INT 28
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 34
6940: PUSH
6941: LD_INT 47
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PPUSH
6959: CALL_OW 69
6963: ST_TO_ADDR
// if not tmp then
6964: LD_VAR 0 2
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7002
// for i in tmp do
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 2
6982: PUSH
6983: FOR_IN
6984: IFFALSE 7000
// begin SetLives ( i , 0 ) ;
6986: LD_VAR 0 1
6990: PPUSH
6991: LD_INT 0
6993: PPUSH
6994: CALL_OW 234
// end ;
6998: GO 6983
7000: POP
7001: POP
// end ;
7002: PPOPN 2
7004: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7005: LD_EXP 8
7009: PUSH
7010: LD_EXP 14
7014: AND
7015: IFFALSE 7099
7017: GO 7019
7019: DISABLE
7020: LD_INT 0
7022: PPUSH
7023: PPUSH
// begin enable ;
7024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_OWVAR 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 32
7044: PUSH
7045: LD_INT 3
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 69
7060: ST_TO_ADDR
// if not tmp then
7061: LD_VAR 0 2
7065: NOT
7066: IFFALSE 7070
// exit ;
7068: GO 7099
// for i in tmp do
7070: LD_ADDR_VAR 0 1
7074: PUSH
7075: LD_VAR 0 2
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7097
// begin SetLives ( i , 0 ) ;
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_INT 0
7090: PPUSH
7091: CALL_OW 234
// end ;
7095: GO 7080
7097: POP
7098: POP
// end ;
7099: PPOPN 2
7101: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7102: LD_EXP 8
7106: PUSH
7107: LD_EXP 11
7111: AND
7112: IFFALSE 7205
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
// begin enable ;
7120: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7121: LD_ADDR_VAR 0 1
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_OWVAR 2
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 5
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 9
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7203
// begin SetClass ( i , 1 ) ;
7189: LD_VAR 0 1
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: CALL_OW 336
// end ;
7201: GO 7186
7203: POP
7204: POP
// end ;
7205: PPOPN 1
7207: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7208: LD_EXP 8
7212: PUSH
7213: LD_EXP 12
7217: AND
7218: PUSH
7219: LD_OWVAR 65
7223: PUSH
7224: LD_INT 7
7226: LESS
7227: AND
7228: IFFALSE 7242
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// game_speed := 7 ;
7234: LD_ADDR_OWVAR 65
7238: PUSH
7239: LD_INT 7
7241: ST_TO_ADDR
// end ;
7242: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7243: LD_EXP 8
7247: PUSH
7248: LD_EXP 15
7252: AND
7253: IFFALSE 7455
7255: GO 7257
7257: DISABLE
7258: LD_INT 0
7260: PPUSH
7261: PPUSH
7262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_INT 81
7270: PUSH
7271: LD_OWVAR 2
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PPUSH
7294: CALL_OW 69
7298: ST_TO_ADDR
// if not tmp then
7299: LD_VAR 0 3
7303: NOT
7304: IFFALSE 7308
// exit ;
7306: GO 7455
// if tmp > 5 then
7308: LD_VAR 0 3
7312: PUSH
7313: LD_INT 5
7315: GREATER
7316: IFFALSE 7328
// k := 5 else
7318: LD_ADDR_VAR 0 2
7322: PUSH
7323: LD_INT 5
7325: ST_TO_ADDR
7326: GO 7338
// k := tmp ;
7328: LD_ADDR_VAR 0 2
7332: PUSH
7333: LD_VAR 0 3
7337: ST_TO_ADDR
// for i := 1 to k do
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: DOUBLE
7344: LD_INT 1
7346: DEC
7347: ST_TO_ADDR
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7453
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7356: LD_VAR 0 3
7360: PUSH
7361: LD_VAR 0 1
7365: ARRAY
7366: PPUSH
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 4
7374: MOD
7375: PUSH
7376: LD_INT 1
7378: PLUS
7379: PPUSH
7380: CALL_OW 259
7384: PUSH
7385: LD_INT 10
7387: LESS
7388: IFFALSE 7451
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7390: LD_VAR 0 3
7394: PUSH
7395: LD_VAR 0 1
7399: ARRAY
7400: PPUSH
7401: LD_VAR 0 1
7405: PUSH
7406: LD_INT 4
7408: MOD
7409: PUSH
7410: LD_INT 1
7412: PLUS
7413: PPUSH
7414: LD_VAR 0 3
7418: PUSH
7419: LD_VAR 0 1
7423: ARRAY
7424: PPUSH
7425: LD_VAR 0 1
7429: PUSH
7430: LD_INT 4
7432: MOD
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: CALL_OW 259
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: CALL_OW 237
7451: GO 7353
7453: POP
7454: POP
// end ;
7455: PPOPN 3
7457: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7458: LD_EXP 8
7462: PUSH
7463: LD_EXP 16
7467: AND
7468: IFFALSE 7488
7470: GO 7472
7472: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7473: LD_INT 4
7475: PPUSH
7476: LD_OWVAR 2
7480: PPUSH
7481: LD_INT 0
7483: PPUSH
7484: CALL_OW 324
7488: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7489: LD_EXP 8
7493: PUSH
7494: LD_EXP 45
7498: AND
7499: IFFALSE 7519
7501: GO 7503
7503: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7504: LD_INT 19
7506: PPUSH
7507: LD_OWVAR 2
7511: PPUSH
7512: LD_INT 0
7514: PPUSH
7515: CALL_OW 324
7519: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7520: LD_EXP 8
7524: PUSH
7525: LD_EXP 17
7529: AND
7530: IFFALSE 7632
7532: GO 7534
7534: DISABLE
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
// begin enable ;
7539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7540: LD_ADDR_VAR 0 2
7544: PUSH
7545: LD_INT 22
7547: PUSH
7548: LD_OWVAR 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: LD_INT 34
7562: PUSH
7563: LD_INT 11
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 30
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PPUSH
7589: CALL_OW 69
7593: ST_TO_ADDR
// if not tmp then
7594: LD_VAR 0 2
7598: NOT
7599: IFFALSE 7603
// exit ;
7601: GO 7632
// for i in tmp do
7603: LD_ADDR_VAR 0 1
7607: PUSH
7608: LD_VAR 0 2
7612: PUSH
7613: FOR_IN
7614: IFFALSE 7630
// begin SetLives ( i , 0 ) ;
7616: LD_VAR 0 1
7620: PPUSH
7621: LD_INT 0
7623: PPUSH
7624: CALL_OW 234
// end ;
7628: GO 7613
7630: POP
7631: POP
// end ;
7632: PPOPN 2
7634: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7635: LD_EXP 8
7639: PUSH
7640: LD_EXP 18
7644: AND
7645: IFFALSE 7665
7647: GO 7649
7649: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7650: LD_INT 32
7652: PPUSH
7653: LD_OWVAR 2
7657: PPUSH
7658: LD_INT 0
7660: PPUSH
7661: CALL_OW 324
7665: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7666: LD_EXP 8
7670: PUSH
7671: LD_EXP 19
7675: AND
7676: IFFALSE 7857
7678: GO 7680
7680: DISABLE
7681: LD_INT 0
7683: PPUSH
7684: PPUSH
7685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7686: LD_ADDR_VAR 0 2
7690: PUSH
7691: LD_INT 22
7693: PUSH
7694: LD_OWVAR 2
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 33
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PPUSH
7717: CALL_OW 69
7721: ST_TO_ADDR
// if not tmp then
7722: LD_VAR 0 2
7726: NOT
7727: IFFALSE 7731
// exit ;
7729: GO 7857
// side := 0 ;
7731: LD_ADDR_VAR 0 3
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// for i := 1 to 8 do
7739: LD_ADDR_VAR 0 1
7743: PUSH
7744: DOUBLE
7745: LD_INT 1
7747: DEC
7748: ST_TO_ADDR
7749: LD_INT 8
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7801
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7755: LD_OWVAR 2
7759: PUSH
7760: LD_VAR 0 1
7764: NONEQUAL
7765: PUSH
7766: LD_OWVAR 2
7770: PPUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 81
7780: PUSH
7781: LD_INT 2
7783: EQUAL
7784: AND
7785: IFFALSE 7799
// begin side := i ;
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_VAR 0 1
7796: ST_TO_ADDR
// break ;
7797: GO 7801
// end ;
7799: GO 7752
7801: POP
7802: POP
// if not side then
7803: LD_VAR 0 3
7807: NOT
7808: IFFALSE 7812
// exit ;
7810: GO 7857
// for i := 1 to tmp do
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: DOUBLE
7818: LD_INT 1
7820: DEC
7821: ST_TO_ADDR
7822: LD_VAR 0 2
7826: PUSH
7827: FOR_TO
7828: IFFALSE 7855
// if Prob ( 60 ) then
7830: LD_INT 60
7832: PPUSH
7833: CALL_OW 13
7837: IFFALSE 7853
// SetSide ( i , side ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_VAR 0 3
7848: PPUSH
7849: CALL_OW 235
7853: GO 7827
7855: POP
7856: POP
// end ;
7857: PPOPN 3
7859: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7860: LD_EXP 8
7864: PUSH
7865: LD_EXP 21
7869: AND
7870: IFFALSE 7989
7872: GO 7874
7874: DISABLE
7875: LD_INT 0
7877: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_INT 22
7885: PUSH
7886: LD_OWVAR 2
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 21
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 23
7910: PUSH
7911: LD_INT 0
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 69
7931: PUSH
7932: FOR_IN
7933: IFFALSE 7987
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7935: LD_VAR 0 1
7939: PPUSH
7940: CALL_OW 257
7944: PUSH
7945: LD_INT 1
7947: PUSH
7948: LD_INT 2
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 4
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: IN
7963: IFFALSE 7985
// SetClass ( un , rand ( 1 , 4 ) ) ;
7965: LD_VAR 0 1
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: LD_INT 4
7975: PPUSH
7976: CALL_OW 12
7980: PPUSH
7981: CALL_OW 336
7985: GO 7932
7987: POP
7988: POP
// end ;
7989: PPOPN 1
7991: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7992: LD_EXP 8
7996: PUSH
7997: LD_EXP 20
8001: AND
8002: IFFALSE 8081
8004: GO 8006
8006: DISABLE
8007: LD_INT 0
8009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8010: LD_ADDR_VAR 0 1
8014: PUSH
8015: LD_INT 22
8017: PUSH
8018: LD_OWVAR 2
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 21
8029: PUSH
8030: LD_INT 3
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PPUSH
8041: CALL_OW 69
8045: ST_TO_ADDR
// if not tmp then
8046: LD_VAR 0 1
8050: NOT
8051: IFFALSE 8055
// exit ;
8053: GO 8081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8055: LD_VAR 0 1
8059: PUSH
8060: LD_INT 1
8062: PPUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 12
8072: ARRAY
8073: PPUSH
8074: LD_INT 100
8076: PPUSH
8077: CALL_OW 234
// end ;
8081: PPOPN 1
8083: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8084: LD_EXP 8
8088: PUSH
8089: LD_EXP 22
8093: AND
8094: IFFALSE 8192
8096: GO 8098
8098: DISABLE
8099: LD_INT 0
8101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8102: LD_ADDR_VAR 0 1
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_OWVAR 2
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 21
8121: PUSH
8122: LD_INT 1
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 69
8137: ST_TO_ADDR
// if not tmp then
8138: LD_VAR 0 1
8142: NOT
8143: IFFALSE 8147
// exit ;
8145: GO 8192
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8147: LD_VAR 0 1
8151: PUSH
8152: LD_INT 1
8154: PPUSH
8155: LD_VAR 0 1
8159: PPUSH
8160: CALL_OW 12
8164: ARRAY
8165: PPUSH
8166: LD_INT 1
8168: PPUSH
8169: LD_INT 4
8171: PPUSH
8172: CALL_OW 12
8176: PPUSH
8177: LD_INT 3000
8179: PPUSH
8180: LD_INT 9000
8182: PPUSH
8183: CALL_OW 12
8187: PPUSH
8188: CALL_OW 492
// end ;
8192: PPOPN 1
8194: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8195: LD_EXP 8
8199: PUSH
8200: LD_EXP 23
8204: AND
8205: IFFALSE 8225
8207: GO 8209
8209: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8210: LD_INT 1
8212: PPUSH
8213: LD_OWVAR 2
8217: PPUSH
8218: LD_INT 0
8220: PPUSH
8221: CALL_OW 324
8225: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8226: LD_EXP 8
8230: PUSH
8231: LD_EXP 24
8235: AND
8236: IFFALSE 8319
8238: GO 8240
8240: DISABLE
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8245: LD_ADDR_VAR 0 2
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_OWVAR 2
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 69
8280: ST_TO_ADDR
// if not tmp then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8319
// for i in tmp do
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_VAR 0 2
8299: PUSH
8300: FOR_IN
8301: IFFALSE 8317
// SetBLevel ( i , 10 ) ;
8303: LD_VAR 0 1
8307: PPUSH
8308: LD_INT 10
8310: PPUSH
8311: CALL_OW 241
8315: GO 8300
8317: POP
8318: POP
// end ;
8319: PPOPN 2
8321: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 25
8331: AND
8332: IFFALSE 8443
8334: GO 8336
8336: DISABLE
8337: LD_INT 0
8339: PPUSH
8340: PPUSH
8341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8342: LD_ADDR_VAR 0 3
8346: PUSH
8347: LD_INT 22
8349: PUSH
8350: LD_OWVAR 2
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: LD_INT 1
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: ST_TO_ADDR
// if not tmp then
8378: LD_VAR 0 3
8382: NOT
8383: IFFALSE 8387
// exit ;
8385: GO 8443
// un := tmp [ rand ( 1 , tmp ) ] ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 1
8399: PPUSH
8400: LD_VAR 0 3
8404: PPUSH
8405: CALL_OW 12
8409: ARRAY
8410: ST_TO_ADDR
// if Crawls ( un ) then
8411: LD_VAR 0 2
8415: PPUSH
8416: CALL_OW 318
8420: IFFALSE 8431
// ComWalk ( un ) ;
8422: LD_VAR 0 2
8426: PPUSH
8427: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_INT 5
8438: PPUSH
8439: CALL_OW 336
// end ;
8443: PPOPN 3
8445: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8446: LD_EXP 8
8450: PUSH
8451: LD_EXP 26
8455: AND
8456: PUSH
8457: LD_OWVAR 67
8461: PUSH
8462: LD_INT 3
8464: LESS
8465: AND
8466: IFFALSE 8485
8468: GO 8470
8470: DISABLE
// Difficulty := Difficulty + 1 ;
8471: LD_ADDR_OWVAR 67
8475: PUSH
8476: LD_OWVAR 67
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ST_TO_ADDR
8485: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8486: LD_EXP 8
8490: PUSH
8491: LD_EXP 27
8495: AND
8496: IFFALSE 8599
8498: GO 8500
8500: DISABLE
8501: LD_INT 0
8503: PPUSH
// begin for i := 1 to 5 do
8504: LD_ADDR_VAR 0 1
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_INT 5
8516: PUSH
8517: FOR_TO
8518: IFFALSE 8597
// begin uc_nation := nation_nature ;
8520: LD_ADDR_OWVAR 21
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// uc_side := 0 ;
8528: LD_ADDR_OWVAR 20
8532: PUSH
8533: LD_INT 0
8535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8536: LD_ADDR_OWVAR 29
8540: PUSH
8541: LD_INT 12
8543: PUSH
8544: LD_INT 12
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: ST_TO_ADDR
// hc_agressivity := 20 ;
8551: LD_ADDR_OWVAR 35
8555: PUSH
8556: LD_INT 20
8558: ST_TO_ADDR
// hc_class := class_tiger ;
8559: LD_ADDR_OWVAR 28
8563: PUSH
8564: LD_INT 14
8566: ST_TO_ADDR
// hc_gallery :=  ;
8567: LD_ADDR_OWVAR 33
8571: PUSH
8572: LD_STRING 
8574: ST_TO_ADDR
// hc_name :=  ;
8575: LD_ADDR_OWVAR 26
8579: PUSH
8580: LD_STRING 
8582: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8583: CALL_OW 44
8587: PPUSH
8588: LD_INT 0
8590: PPUSH
8591: CALL_OW 51
// end ;
8595: GO 8517
8597: POP
8598: POP
// end ;
8599: PPOPN 1
8601: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8602: LD_EXP 8
8606: PUSH
8607: LD_EXP 28
8611: AND
8612: IFFALSE 8621
8614: GO 8616
8616: DISABLE
// StreamSibBomb ;
8617: CALL 8622 0 0
8621: END
// export function StreamSibBomb ; var i , x , y ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
// result := false ;
8628: LD_ADDR_VAR 0 1
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// for i := 1 to 16 do
8636: LD_ADDR_VAR 0 2
8640: PUSH
8641: DOUBLE
8642: LD_INT 1
8644: DEC
8645: ST_TO_ADDR
8646: LD_INT 16
8648: PUSH
8649: FOR_TO
8650: IFFALSE 8849
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_INT 10
8659: PUSH
8660: LD_INT 20
8662: PUSH
8663: LD_INT 30
8665: PUSH
8666: LD_INT 40
8668: PUSH
8669: LD_INT 50
8671: PUSH
8672: LD_INT 60
8674: PUSH
8675: LD_INT 70
8677: PUSH
8678: LD_INT 80
8680: PUSH
8681: LD_INT 90
8683: PUSH
8684: LD_INT 100
8686: PUSH
8687: LD_INT 110
8689: PUSH
8690: LD_INT 120
8692: PUSH
8693: LD_INT 130
8695: PUSH
8696: LD_INT 140
8698: PUSH
8699: LD_INT 150
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 1
8721: PPUSH
8722: LD_INT 15
8724: PPUSH
8725: CALL_OW 12
8729: ARRAY
8730: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8731: LD_ADDR_VAR 0 4
8735: PUSH
8736: LD_INT 10
8738: PUSH
8739: LD_INT 20
8741: PUSH
8742: LD_INT 30
8744: PUSH
8745: LD_INT 40
8747: PUSH
8748: LD_INT 50
8750: PUSH
8751: LD_INT 60
8753: PUSH
8754: LD_INT 70
8756: PUSH
8757: LD_INT 80
8759: PUSH
8760: LD_INT 90
8762: PUSH
8763: LD_INT 100
8765: PUSH
8766: LD_INT 110
8768: PUSH
8769: LD_INT 120
8771: PUSH
8772: LD_INT 130
8774: PUSH
8775: LD_INT 140
8777: PUSH
8778: LD_INT 150
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 1
8800: PPUSH
8801: LD_INT 15
8803: PPUSH
8804: CALL_OW 12
8808: ARRAY
8809: ST_TO_ADDR
// if ValidHex ( x , y ) then
8810: LD_VAR 0 3
8814: PPUSH
8815: LD_VAR 0 4
8819: PPUSH
8820: CALL_OW 488
8824: IFFALSE 8847
// begin result := [ x , y ] ;
8826: LD_ADDR_VAR 0 1
8830: PUSH
8831: LD_VAR 0 3
8835: PUSH
8836: LD_VAR 0 4
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: ST_TO_ADDR
// break ;
8845: GO 8849
// end ; end ;
8847: GO 8649
8849: POP
8850: POP
// if result then
8851: LD_VAR 0 1
8855: IFFALSE 8915
// begin ToLua ( playSibBomb() ) ;
8857: LD_STRING playSibBomb()
8859: PPUSH
8860: CALL_OW 559
// wait ( 0 0$14 ) ;
8864: LD_INT 490
8866: PPUSH
8867: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 1
8884: PUSH
8885: LD_INT 2
8887: ARRAY
8888: PPUSH
8889: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8893: LD_VAR 0 1
8897: PUSH
8898: LD_INT 1
8900: ARRAY
8901: PPUSH
8902: LD_VAR 0 1
8906: PUSH
8907: LD_INT 2
8909: ARRAY
8910: PPUSH
8911: CALL_OW 429
// end ; end ;
8915: LD_VAR 0 1
8919: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8920: LD_EXP 8
8924: PUSH
8925: LD_EXP 30
8929: AND
8930: IFFALSE 8942
8932: GO 8934
8934: DISABLE
// YouLost (  ) ;
8935: LD_STRING 
8937: PPUSH
8938: CALL_OW 104
8942: END
// every 0 0$1 trigger StreamModeActive and sFog do
8943: LD_EXP 8
8947: PUSH
8948: LD_EXP 29
8952: AND
8953: IFFALSE 8967
8955: GO 8957
8957: DISABLE
// FogOff ( your_side ) ;
8958: LD_OWVAR 2
8962: PPUSH
8963: CALL_OW 344
8967: END
// every 0 0$1 trigger StreamModeActive and sSun do
8968: LD_EXP 8
8972: PUSH
8973: LD_EXP 31
8977: AND
8978: IFFALSE 9006
8980: GO 8982
8982: DISABLE
// begin solar_recharge_percent := 0 ;
8983: LD_ADDR_OWVAR 79
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8991: LD_INT 10500
8993: PPUSH
8994: CALL_OW 67
// solar_recharge_percent := 100 ;
8998: LD_ADDR_OWVAR 79
9002: PUSH
9003: LD_INT 100
9005: ST_TO_ADDR
// end ;
9006: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9007: LD_EXP 8
9011: PUSH
9012: LD_EXP 32
9016: AND
9017: IFFALSE 9256
9019: GO 9021
9021: DISABLE
9022: LD_INT 0
9024: PPUSH
9025: PPUSH
9026: PPUSH
// begin tmp := [ ] ;
9027: LD_ADDR_VAR 0 3
9031: PUSH
9032: EMPTY
9033: ST_TO_ADDR
// for i := 1 to 6 do
9034: LD_ADDR_VAR 0 1
9038: PUSH
9039: DOUBLE
9040: LD_INT 1
9042: DEC
9043: ST_TO_ADDR
9044: LD_INT 6
9046: PUSH
9047: FOR_TO
9048: IFFALSE 9153
// begin uc_nation := nation_nature ;
9050: LD_ADDR_OWVAR 21
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// uc_side := 0 ;
9058: LD_ADDR_OWVAR 20
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9066: LD_ADDR_OWVAR 29
9070: PUSH
9071: LD_INT 12
9073: PUSH
9074: LD_INT 12
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: ST_TO_ADDR
// hc_agressivity := 20 ;
9081: LD_ADDR_OWVAR 35
9085: PUSH
9086: LD_INT 20
9088: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9089: LD_ADDR_OWVAR 28
9093: PUSH
9094: LD_INT 17
9096: ST_TO_ADDR
// hc_gallery :=  ;
9097: LD_ADDR_OWVAR 33
9101: PUSH
9102: LD_STRING 
9104: ST_TO_ADDR
// hc_name :=  ;
9105: LD_ADDR_OWVAR 26
9109: PUSH
9110: LD_STRING 
9112: ST_TO_ADDR
// un := CreateHuman ;
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: CALL_OW 44
9122: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9123: LD_VAR 0 2
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: CALL_OW 51
// tmp := tmp ^ un ;
9135: LD_ADDR_VAR 0 3
9139: PUSH
9140: LD_VAR 0 3
9144: PUSH
9145: LD_VAR 0 2
9149: ADD
9150: ST_TO_ADDR
// end ;
9151: GO 9047
9153: POP
9154: POP
// repeat wait ( 0 0$1 ) ;
9155: LD_INT 35
9157: PPUSH
9158: CALL_OW 67
// for un in tmp do
9162: LD_ADDR_VAR 0 2
9166: PUSH
9167: LD_VAR 0 3
9171: PUSH
9172: FOR_IN
9173: IFFALSE 9247
// begin if IsDead ( un ) then
9175: LD_VAR 0 2
9179: PPUSH
9180: CALL_OW 301
9184: IFFALSE 9204
// begin tmp := tmp diff un ;
9186: LD_ADDR_VAR 0 3
9190: PUSH
9191: LD_VAR 0 3
9195: PUSH
9196: LD_VAR 0 2
9200: DIFF
9201: ST_TO_ADDR
// continue ;
9202: GO 9172
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9204: LD_VAR 0 2
9208: PPUSH
9209: LD_INT 3
9211: PUSH
9212: LD_INT 22
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PPUSH
9231: LD_VAR 0 2
9235: PPUSH
9236: CALL_OW 74
9240: PPUSH
9241: CALL_OW 115
// end ;
9245: GO 9172
9247: POP
9248: POP
// until not tmp ;
9249: LD_VAR 0 3
9253: NOT
9254: IFFALSE 9155
// end ;
9256: PPOPN 3
9258: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9259: LD_EXP 8
9263: PUSH
9264: LD_EXP 33
9268: AND
9269: IFFALSE 9323
9271: GO 9273
9273: DISABLE
// begin ToLua ( displayTroll(); ) ;
9274: LD_STRING displayTroll();
9276: PPUSH
9277: CALL_OW 559
// wait ( 3 3$00 ) ;
9281: LD_INT 6300
9283: PPUSH
9284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9288: LD_STRING hideTroll();
9290: PPUSH
9291: CALL_OW 559
// wait ( 1 1$00 ) ;
9295: LD_INT 2100
9297: PPUSH
9298: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9302: LD_STRING displayTroll();
9304: PPUSH
9305: CALL_OW 559
// wait ( 1 1$00 ) ;
9309: LD_INT 2100
9311: PPUSH
9312: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9316: LD_STRING hideTroll();
9318: PPUSH
9319: CALL_OW 559
// end ;
9323: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9324: LD_EXP 8
9328: PUSH
9329: LD_EXP 34
9333: AND
9334: IFFALSE 9397
9336: GO 9338
9338: DISABLE
9339: LD_INT 0
9341: PPUSH
// begin p := 0 ;
9342: LD_ADDR_VAR 0 1
9346: PUSH
9347: LD_INT 0
9349: ST_TO_ADDR
// repeat game_speed := 1 ;
9350: LD_ADDR_OWVAR 65
9354: PUSH
9355: LD_INT 1
9357: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9358: LD_INT 35
9360: PPUSH
9361: CALL_OW 67
// p := p + 1 ;
9365: LD_ADDR_VAR 0 1
9369: PUSH
9370: LD_VAR 0 1
9374: PUSH
9375: LD_INT 1
9377: PLUS
9378: ST_TO_ADDR
// until p >= 60 ;
9379: LD_VAR 0 1
9383: PUSH
9384: LD_INT 60
9386: GREATEREQUAL
9387: IFFALSE 9350
// game_speed := 4 ;
9389: LD_ADDR_OWVAR 65
9393: PUSH
9394: LD_INT 4
9396: ST_TO_ADDR
// end ;
9397: PPOPN 1
9399: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9400: LD_EXP 8
9404: PUSH
9405: LD_EXP 35
9409: AND
9410: IFFALSE 9556
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9419: LD_ADDR_VAR 0 1
9423: PUSH
9424: LD_INT 22
9426: PUSH
9427: LD_OWVAR 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 2
9438: PUSH
9439: LD_INT 30
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 30
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PPUSH
9468: CALL_OW 69
9472: ST_TO_ADDR
// if not depot then
9473: LD_VAR 0 1
9477: NOT
9478: IFFALSE 9482
// exit ;
9480: GO 9556
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9482: LD_ADDR_VAR 0 2
9486: PUSH
9487: LD_VAR 0 1
9491: PUSH
9492: LD_INT 1
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 12
9504: ARRAY
9505: PPUSH
9506: CALL_OW 274
9510: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9511: LD_VAR 0 2
9515: PPUSH
9516: LD_INT 1
9518: PPUSH
9519: LD_INT 0
9521: PPUSH
9522: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9526: LD_VAR 0 2
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 0
9536: PPUSH
9537: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9541: LD_VAR 0 2
9545: PPUSH
9546: LD_INT 3
9548: PPUSH
9549: LD_INT 0
9551: PPUSH
9552: CALL_OW 277
// end ;
9556: PPOPN 2
9558: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9559: LD_EXP 8
9563: PUSH
9564: LD_EXP 36
9568: AND
9569: IFFALSE 9666
9571: GO 9573
9573: DISABLE
9574: LD_INT 0
9576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9577: LD_ADDR_VAR 0 1
9581: PUSH
9582: LD_INT 22
9584: PUSH
9585: LD_OWVAR 2
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 21
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 23
9609: PUSH
9610: LD_INT 0
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: PPUSH
9626: CALL_OW 69
9630: ST_TO_ADDR
// if not tmp then
9631: LD_VAR 0 1
9635: NOT
9636: IFFALSE 9640
// exit ;
9638: GO 9666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9640: LD_VAR 0 1
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 12
9657: ARRAY
9658: PPUSH
9659: LD_INT 200
9661: PPUSH
9662: CALL_OW 234
// end ;
9666: PPOPN 1
9668: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9669: LD_EXP 8
9673: PUSH
9674: LD_EXP 37
9678: AND
9679: IFFALSE 9758
9681: GO 9683
9683: DISABLE
9684: LD_INT 0
9686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9687: LD_ADDR_VAR 0 1
9691: PUSH
9692: LD_INT 22
9694: PUSH
9695: LD_OWVAR 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 21
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if not tmp then
9723: LD_VAR 0 1
9727: NOT
9728: IFFALSE 9732
// exit ;
9730: GO 9758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9732: LD_VAR 0 1
9736: PUSH
9737: LD_INT 1
9739: PPUSH
9740: LD_VAR 0 1
9744: PPUSH
9745: CALL_OW 12
9749: ARRAY
9750: PPUSH
9751: LD_INT 60
9753: PPUSH
9754: CALL_OW 234
// end ;
9758: PPOPN 1
9760: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9761: LD_EXP 8
9765: PUSH
9766: LD_EXP 38
9770: AND
9771: IFFALSE 9870
9773: GO 9775
9775: DISABLE
9776: LD_INT 0
9778: PPUSH
9779: PPUSH
// begin enable ;
9780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_OWVAR 2
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 61
9800: PUSH
9801: EMPTY
9802: LIST
9803: PUSH
9804: LD_INT 33
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: ST_TO_ADDR
// if not tmp then
9824: LD_VAR 0 1
9828: NOT
9829: IFFALSE 9833
// exit ;
9831: GO 9870
// for i in tmp do
9833: LD_ADDR_VAR 0 2
9837: PUSH
9838: LD_VAR 0 1
9842: PUSH
9843: FOR_IN
9844: IFFALSE 9868
// if IsControledBy ( i ) then
9846: LD_VAR 0 2
9850: PPUSH
9851: CALL_OW 312
9855: IFFALSE 9866
// ComUnlink ( i ) ;
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 136
9866: GO 9843
9868: POP
9869: POP
// end ;
9870: PPOPN 2
9872: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9873: LD_EXP 8
9877: PUSH
9878: LD_EXP 39
9882: AND
9883: IFFALSE 10023
9885: GO 9887
9887: DISABLE
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
// begin ToLua ( displayPowell(); ) ;
9892: LD_STRING displayPowell();
9894: PPUSH
9895: CALL_OW 559
// uc_side := 0 ;
9899: LD_ADDR_OWVAR 20
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// uc_nation := 2 ;
9907: LD_ADDR_OWVAR 21
9911: PUSH
9912: LD_INT 2
9914: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9915: LD_ADDR_OWVAR 37
9919: PUSH
9920: LD_INT 14
9922: ST_TO_ADDR
// vc_engine := engine_siberite ;
9923: LD_ADDR_OWVAR 39
9927: PUSH
9928: LD_INT 3
9930: ST_TO_ADDR
// vc_control := control_apeman ;
9931: LD_ADDR_OWVAR 38
9935: PUSH
9936: LD_INT 5
9938: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9939: LD_ADDR_OWVAR 40
9943: PUSH
9944: LD_INT 29
9946: ST_TO_ADDR
// un := CreateVehicle ;
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: CALL_OW 45
9956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9957: LD_VAR 0 2
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9969: LD_INT 35
9971: PPUSH
9972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9976: LD_VAR 0 2
9980: PPUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 69
9997: PPUSH
9998: LD_VAR 0 2
10002: PPUSH
10003: CALL_OW 74
10007: PPUSH
10008: CALL_OW 115
// until IsDead ( un ) ;
10012: LD_VAR 0 2
10016: PPUSH
10017: CALL_OW 301
10021: IFFALSE 9969
// end ;
10023: PPOPN 2
10025: END
// every 0 0$1 trigger StreamModeActive and sStu do
10026: LD_EXP 8
10030: PUSH
10031: LD_EXP 47
10035: AND
10036: IFFALSE 10052
10038: GO 10040
10040: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10041: LD_STRING displayStucuk();
10043: PPUSH
10044: CALL_OW 559
// ResetFog ;
10048: CALL_OW 335
// end ;
10052: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10053: LD_EXP 8
10057: PUSH
10058: LD_EXP 40
10062: AND
10063: IFFALSE 10204
10065: GO 10067
10067: DISABLE
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10072: LD_ADDR_VAR 0 2
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_OWVAR 2
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 21
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: ST_TO_ADDR
// if not tmp then
10108: LD_VAR 0 2
10112: NOT
10113: IFFALSE 10117
// exit ;
10115: GO 10204
// un := tmp [ rand ( 1 , tmp ) ] ;
10117: LD_ADDR_VAR 0 1
10121: PUSH
10122: LD_VAR 0 2
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_VAR 0 2
10134: PPUSH
10135: CALL_OW 12
10139: ARRAY
10140: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10141: LD_VAR 0 1
10145: PPUSH
10146: LD_INT 0
10148: PPUSH
10149: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10153: LD_VAR 0 1
10157: PPUSH
10158: LD_OWVAR 3
10162: PUSH
10163: LD_VAR 0 1
10167: DIFF
10168: PPUSH
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 74
10178: PPUSH
10179: CALL_OW 115
// wait ( 0 0$20 ) ;
10183: LD_INT 700
10185: PPUSH
10186: CALL_OW 67
// SetSide ( un , your_side ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_OWVAR 2
10199: PPUSH
10200: CALL_OW 235
// end ;
10204: PPOPN 2
10206: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10207: LD_EXP 8
10211: PUSH
10212: LD_EXP 41
10216: AND
10217: IFFALSE 10323
10219: GO 10221
10221: DISABLE
10222: LD_INT 0
10224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10225: LD_ADDR_VAR 0 1
10229: PUSH
10230: LD_INT 22
10232: PUSH
10233: LD_OWVAR 2
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 2
10244: PUSH
10245: LD_INT 30
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 30
10257: PUSH
10258: LD_INT 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 69
10278: ST_TO_ADDR
// if not depot then
10279: LD_VAR 0 1
10283: NOT
10284: IFFALSE 10288
// exit ;
10286: GO 10323
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10288: LD_VAR 0 1
10292: PUSH
10293: LD_INT 1
10295: ARRAY
10296: PPUSH
10297: CALL_OW 250
10301: PPUSH
10302: LD_VAR 0 1
10306: PUSH
10307: LD_INT 1
10309: ARRAY
10310: PPUSH
10311: CALL_OW 251
10315: PPUSH
10316: LD_INT 70
10318: PPUSH
10319: CALL_OW 495
// end ;
10323: PPOPN 1
10325: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10326: LD_EXP 8
10330: PUSH
10331: LD_EXP 42
10335: AND
10336: IFFALSE 10547
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
10344: PPUSH
10345: PPUSH
10346: PPUSH
10347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10348: LD_ADDR_VAR 0 5
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_OWVAR 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: ST_TO_ADDR
// if not tmp then
10384: LD_VAR 0 5
10388: NOT
10389: IFFALSE 10393
// exit ;
10391: GO 10547
// for i in tmp do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 5
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10545
// begin d := rand ( 0 , 5 ) ;
10406: LD_ADDR_VAR 0 4
10410: PUSH
10411: LD_INT 0
10413: PPUSH
10414: LD_INT 5
10416: PPUSH
10417: CALL_OW 12
10421: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10422: LD_ADDR_VAR 0 2
10426: PUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 250
10436: PPUSH
10437: LD_VAR 0 4
10441: PPUSH
10442: LD_INT 3
10444: PPUSH
10445: LD_INT 12
10447: PPUSH
10448: CALL_OW 12
10452: PPUSH
10453: CALL_OW 272
10457: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10458: LD_ADDR_VAR 0 3
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 251
10472: PPUSH
10473: LD_VAR 0 4
10477: PPUSH
10478: LD_INT 3
10480: PPUSH
10481: LD_INT 12
10483: PPUSH
10484: CALL_OW 12
10488: PPUSH
10489: CALL_OW 273
10493: ST_TO_ADDR
// if ValidHex ( x , y ) then
10494: LD_VAR 0 2
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: CALL_OW 488
10508: IFFALSE 10543
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_VAR 0 2
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_INT 3
10527: PPUSH
10528: LD_INT 6
10530: PPUSH
10531: CALL_OW 12
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 483
// end ;
10543: GO 10403
10545: POP
10546: POP
// end ;
10547: PPOPN 5
10549: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10550: LD_EXP 8
10554: PUSH
10555: LD_EXP 43
10559: AND
10560: IFFALSE 10654
10562: GO 10564
10564: DISABLE
10565: LD_INT 0
10567: PPUSH
10568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_INT 22
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 32
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 21
10598: PUSH
10599: LD_INT 2
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: ST_TO_ADDR
// if not tmp then
10616: LD_VAR 0 2
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10654
// for i in tmp do
10625: LD_ADDR_VAR 0 1
10629: PUSH
10630: LD_VAR 0 2
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10652
// SetFuel ( i , 0 ) ;
10638: LD_VAR 0 1
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 240
10650: GO 10635
10652: POP
10653: POP
// end ;
10654: PPOPN 2
10656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10657: LD_EXP 8
10661: PUSH
10662: LD_EXP 44
10666: AND
10667: IFFALSE 10733
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10675: LD_ADDR_VAR 0 1
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_OWVAR 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 29
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// if not tmp then
10711: LD_VAR 0 1
10715: NOT
10716: IFFALSE 10720
// exit ;
10718: GO 10733
// DestroyUnit ( tmp [ 1 ] ) ;
10720: LD_VAR 0 1
10724: PUSH
10725: LD_INT 1
10727: ARRAY
10728: PPUSH
10729: CALL_OW 65
// end ;
10733: PPOPN 1
10735: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10736: LD_EXP 8
10740: PUSH
10741: LD_EXP 46
10745: AND
10746: IFFALSE 10875
10748: GO 10750
10750: DISABLE
10751: LD_INT 0
10753: PPUSH
// begin uc_side := 0 ;
10754: LD_ADDR_OWVAR 20
10758: PUSH
10759: LD_INT 0
10761: ST_TO_ADDR
// uc_nation := nation_arabian ;
10762: LD_ADDR_OWVAR 21
10766: PUSH
10767: LD_INT 2
10769: ST_TO_ADDR
// hc_gallery :=  ;
10770: LD_ADDR_OWVAR 33
10774: PUSH
10775: LD_STRING 
10777: ST_TO_ADDR
// hc_name :=  ;
10778: LD_ADDR_OWVAR 26
10782: PUSH
10783: LD_STRING 
10785: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10786: LD_INT 1
10788: PPUSH
10789: LD_INT 11
10791: PPUSH
10792: LD_INT 10
10794: PPUSH
10795: CALL_OW 380
// un := CreateHuman ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: CALL_OW 44
10808: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10809: LD_VAR 0 1
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10821: LD_INT 35
10823: PPUSH
10824: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 22
10835: PUSH
10836: LD_OWVAR 2
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 74
10859: PPUSH
10860: CALL_OW 115
// until IsDead ( un ) ;
10864: LD_VAR 0 1
10868: PPUSH
10869: CALL_OW 301
10873: IFFALSE 10821
// end ;
10875: PPOPN 1
10877: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10878: LD_EXP 8
10882: PUSH
10883: LD_EXP 48
10887: AND
10888: IFFALSE 10900
10890: GO 10892
10892: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10893: LD_STRING earthquake(getX(game), 0, 32)
10895: PPUSH
10896: CALL_OW 559
10900: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10901: LD_EXP 8
10905: PUSH
10906: LD_EXP 49
10910: AND
10911: IFFALSE 11002
10913: GO 10915
10915: DISABLE
10916: LD_INT 0
10918: PPUSH
// begin enable ;
10919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10920: LD_ADDR_VAR 0 1
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_OWVAR 2
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 21
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 33
10949: PUSH
10950: LD_INT 3
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: ST_TO_ADDR
// if not tmp then
10967: LD_VAR 0 1
10971: NOT
10972: IFFALSE 10976
// exit ;
10974: GO 11002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10976: LD_VAR 0 1
10980: PUSH
10981: LD_INT 1
10983: PPUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 12
10993: ARRAY
10994: PPUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL_OW 234
// end ;
11002: PPOPN 1
11004: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11005: LD_EXP 8
11009: PUSH
11010: LD_EXP 50
11014: AND
11015: IFFALSE 11156
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
11023: PPUSH
11024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11025: LD_ADDR_VAR 0 3
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_OWVAR 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 69
11060: ST_TO_ADDR
// if not tmp then
11061: LD_VAR 0 3
11065: NOT
11066: IFFALSE 11070
// exit ;
11068: GO 11156
// un := tmp [ rand ( 1 , tmp ) ] ;
11070: LD_ADDR_VAR 0 2
11074: PUSH
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 1
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: CALL_OW 12
11092: ARRAY
11093: ST_TO_ADDR
// if Crawls ( un ) then
11094: LD_VAR 0 2
11098: PPUSH
11099: CALL_OW 318
11103: IFFALSE 11114
// ComWalk ( un ) ;
11105: LD_VAR 0 2
11109: PPUSH
11110: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11114: LD_VAR 0 2
11118: PPUSH
11119: LD_INT 9
11121: PPUSH
11122: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11126: LD_INT 28
11128: PPUSH
11129: LD_OWVAR 2
11133: PPUSH
11134: LD_INT 2
11136: PPUSH
11137: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11141: LD_INT 29
11143: PPUSH
11144: LD_OWVAR 2
11148: PPUSH
11149: LD_INT 2
11151: PPUSH
11152: CALL_OW 322
// end ;
11156: PPOPN 3
11158: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11159: LD_EXP 8
11163: PUSH
11164: LD_EXP 51
11168: AND
11169: IFFALSE 11280
11171: GO 11173
11173: DISABLE
11174: LD_INT 0
11176: PPUSH
11177: PPUSH
11178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11179: LD_ADDR_VAR 0 3
11183: PUSH
11184: LD_INT 22
11186: PUSH
11187: LD_OWVAR 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PPUSH
11210: CALL_OW 69
11214: ST_TO_ADDR
// if not tmp then
11215: LD_VAR 0 3
11219: NOT
11220: IFFALSE 11224
// exit ;
11222: GO 11280
// un := tmp [ rand ( 1 , tmp ) ] ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: LD_VAR 0 3
11233: PUSH
11234: LD_INT 1
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: CALL_OW 12
11246: ARRAY
11247: ST_TO_ADDR
// if Crawls ( un ) then
11248: LD_VAR 0 2
11252: PPUSH
11253: CALL_OW 318
11257: IFFALSE 11268
// ComWalk ( un ) ;
11259: LD_VAR 0 2
11263: PPUSH
11264: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11268: LD_VAR 0 2
11272: PPUSH
11273: LD_INT 8
11275: PPUSH
11276: CALL_OW 336
// end ;
11280: PPOPN 3
11282: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11283: LD_EXP 8
11287: PUSH
11288: LD_EXP 52
11292: AND
11293: IFFALSE 11437
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11302: LD_ADDR_VAR 0 2
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_OWVAR 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 21
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: LD_INT 34
11334: PUSH
11335: LD_INT 12
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 34
11344: PUSH
11345: LD_INT 51
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 34
11354: PUSH
11355: LD_INT 32
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: PPUSH
11373: CALL_OW 69
11377: ST_TO_ADDR
// if not tmp then
11378: LD_VAR 0 2
11382: NOT
11383: IFFALSE 11387
// exit ;
11385: GO 11437
// for i in tmp do
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_VAR 0 2
11396: PUSH
11397: FOR_IN
11398: IFFALSE 11435
// if GetCargo ( i , mat_artifact ) = 0 then
11400: LD_VAR 0 1
11404: PPUSH
11405: LD_INT 4
11407: PPUSH
11408: CALL_OW 289
11412: PUSH
11413: LD_INT 0
11415: EQUAL
11416: IFFALSE 11433
// SetCargo ( i , mat_siberit , 100 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 3
11425: PPUSH
11426: LD_INT 100
11428: PPUSH
11429: CALL_OW 290
11433: GO 11397
11435: POP
11436: POP
// end ;
11437: PPOPN 2
11439: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11440: LD_EXP 8
11444: PUSH
11445: LD_EXP 53
11449: AND
11450: IFFALSE 11633
11452: GO 11454
11454: DISABLE
11455: LD_INT 0
11457: PPUSH
11458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11459: LD_ADDR_VAR 0 2
11463: PUSH
11464: LD_INT 22
11466: PUSH
11467: LD_OWVAR 2
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: ST_TO_ADDR
// if not tmp then
11481: LD_VAR 0 2
11485: NOT
11486: IFFALSE 11490
// exit ;
11488: GO 11633
// for i := 1 to 2 do
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_INT 2
11502: PUSH
11503: FOR_TO
11504: IFFALSE 11631
// begin uc_side := your_side ;
11506: LD_ADDR_OWVAR 20
11510: PUSH
11511: LD_OWVAR 2
11515: ST_TO_ADDR
// uc_nation := nation_american ;
11516: LD_ADDR_OWVAR 21
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// vc_chassis := us_morphling ;
11524: LD_ADDR_OWVAR 37
11528: PUSH
11529: LD_INT 5
11531: ST_TO_ADDR
// vc_engine := engine_siberite ;
11532: LD_ADDR_OWVAR 39
11536: PUSH
11537: LD_INT 3
11539: ST_TO_ADDR
// vc_control := control_computer ;
11540: LD_ADDR_OWVAR 38
11544: PUSH
11545: LD_INT 3
11547: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11548: LD_ADDR_OWVAR 40
11552: PUSH
11553: LD_INT 10
11555: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11556: LD_VAR 0 2
11560: PUSH
11561: LD_INT 1
11563: ARRAY
11564: PPUSH
11565: CALL_OW 310
11569: NOT
11570: IFFALSE 11617
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11572: CALL_OW 45
11576: PPUSH
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 1
11584: ARRAY
11585: PPUSH
11586: CALL_OW 250
11590: PPUSH
11591: LD_VAR 0 2
11595: PUSH
11596: LD_INT 1
11598: ARRAY
11599: PPUSH
11600: CALL_OW 251
11604: PPUSH
11605: LD_INT 12
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 50
11615: GO 11629
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11617: CALL_OW 45
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: CALL_OW 51
// end ;
11629: GO 11503
11631: POP
11632: POP
// end ;
11633: PPOPN 2
11635: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11636: LD_EXP 8
11640: PUSH
11641: LD_EXP 54
11645: AND
11646: IFFALSE 11868
11648: GO 11650
11650: DISABLE
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11659: LD_ADDR_VAR 0 6
11663: PUSH
11664: LD_INT 22
11666: PUSH
11667: LD_OWVAR 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: LD_INT 23
11691: PUSH
11692: LD_INT 0
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: ST_TO_ADDR
// if not tmp then
11713: LD_VAR 0 6
11717: NOT
11718: IFFALSE 11722
// exit ;
11720: GO 11868
// s1 := rand ( 1 , 4 ) ;
11722: LD_ADDR_VAR 0 2
11726: PUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 4
11732: PPUSH
11733: CALL_OW 12
11737: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11738: LD_ADDR_VAR 0 4
11742: PUSH
11743: LD_VAR 0 6
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: PPUSH
11752: LD_VAR 0 2
11756: PPUSH
11757: CALL_OW 259
11761: ST_TO_ADDR
// if s1 = 1 then
11762: LD_VAR 0 2
11766: PUSH
11767: LD_INT 1
11769: EQUAL
11770: IFFALSE 11790
// s2 := rand ( 2 , 4 ) else
11772: LD_ADDR_VAR 0 3
11776: PUSH
11777: LD_INT 2
11779: PPUSH
11780: LD_INT 4
11782: PPUSH
11783: CALL_OW 12
11787: ST_TO_ADDR
11788: GO 11798
// s2 := 1 ;
11790: LD_ADDR_VAR 0 3
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11798: LD_ADDR_VAR 0 5
11802: PUSH
11803: LD_VAR 0 6
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: PPUSH
11812: LD_VAR 0 3
11816: PPUSH
11817: CALL_OW 259
11821: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11822: LD_VAR 0 6
11826: PUSH
11827: LD_INT 1
11829: ARRAY
11830: PPUSH
11831: LD_VAR 0 2
11835: PPUSH
11836: LD_VAR 0 5
11840: PPUSH
11841: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11845: LD_VAR 0 6
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_VAR 0 4
11863: PPUSH
11864: CALL_OW 237
// end ;
11868: PPOPN 6
11870: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11871: LD_EXP 8
11875: PUSH
11876: LD_EXP 55
11880: AND
11881: IFFALSE 11960
11883: GO 11885
11885: DISABLE
11886: LD_INT 0
11888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11889: LD_ADDR_VAR 0 1
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_OWVAR 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: ST_TO_ADDR
// if not tmp then
11925: LD_VAR 0 1
11929: NOT
11930: IFFALSE 11934
// exit ;
11932: GO 11960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11934: LD_VAR 0 1
11938: PUSH
11939: LD_INT 1
11941: PPUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 12
11951: ARRAY
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 234
// end ;
11960: PPOPN 1
11962: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11963: LD_EXP 8
11967: PUSH
11968: LD_EXP 56
11972: AND
11973: IFFALSE 12085
11975: GO 11977
11977: DISABLE
11978: LD_INT 0
11980: PPUSH
11981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_OWVAR 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 30
12004: PUSH
12005: LD_INT 27
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 30
12014: PUSH
12015: LD_INT 26
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 30
12024: PUSH
12025: LD_INT 28
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: ST_TO_ADDR
// if not tmp then
12047: LD_VAR 0 2
12051: NOT
12052: IFFALSE 12056
// exit ;
12054: GO 12085
// for i in tmp do
12056: LD_ADDR_VAR 0 1
12060: PUSH
12061: LD_VAR 0 2
12065: PUSH
12066: FOR_IN
12067: IFFALSE 12083
// SetLives ( i , 1 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 234
12081: GO 12066
12083: POP
12084: POP
// end ;
12085: PPOPN 2
12087: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12088: LD_EXP 8
12092: PUSH
12093: LD_EXP 57
12097: AND
12098: IFFALSE 12372
12100: GO 12102
12102: DISABLE
12103: LD_INT 0
12105: PPUSH
12106: PPUSH
12107: PPUSH
// begin i := rand ( 1 , 7 ) ;
12108: LD_ADDR_VAR 0 1
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 7
12118: PPUSH
12119: CALL_OW 12
12123: ST_TO_ADDR
// case i of 1 :
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 1
12131: DOUBLE
12132: EQUAL
12133: IFTRUE 12137
12135: GO 12147
12137: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12138: LD_STRING earthquake(getX(game), 0, 32)
12140: PPUSH
12141: CALL_OW 559
12145: GO 12372
12147: LD_INT 2
12149: DOUBLE
12150: EQUAL
12151: IFTRUE 12155
12153: GO 12169
12155: POP
// begin ToLua ( displayStucuk(); ) ;
12156: LD_STRING displayStucuk();
12158: PPUSH
12159: CALL_OW 559
// ResetFog ;
12163: CALL_OW 335
// end ; 3 :
12167: GO 12372
12169: LD_INT 3
12171: DOUBLE
12172: EQUAL
12173: IFTRUE 12177
12175: GO 12281
12177: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_OWVAR 2
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: ST_TO_ADDR
// if not tmp then
12214: LD_VAR 0 2
12218: NOT
12219: IFFALSE 12223
// exit ;
12221: GO 12372
// un := tmp [ rand ( 1 , tmp ) ] ;
12223: LD_ADDR_VAR 0 3
12227: PUSH
12228: LD_VAR 0 2
12232: PUSH
12233: LD_INT 1
12235: PPUSH
12236: LD_VAR 0 2
12240: PPUSH
12241: CALL_OW 12
12245: ARRAY
12246: ST_TO_ADDR
// if Crawls ( un ) then
12247: LD_VAR 0 3
12251: PPUSH
12252: CALL_OW 318
12256: IFFALSE 12267
// ComWalk ( un ) ;
12258: LD_VAR 0 3
12262: PPUSH
12263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 8
12274: PPUSH
12275: CALL_OW 336
// end ; 4 :
12279: GO 12372
12281: LD_INT 4
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12350
12289: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_OWVAR 2
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 29
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 69
12325: ST_TO_ADDR
// if not tmp then
12326: LD_VAR 0 2
12330: NOT
12331: IFFALSE 12335
// exit ;
12333: GO 12372
// DestroyUnit ( tmp [ 1 ] ) ;
12335: LD_VAR 0 2
12339: PUSH
12340: LD_INT 1
12342: ARRAY
12343: PPUSH
12344: CALL_OW 65
// end ; 5 .. 7 :
12348: GO 12372
12350: LD_INT 5
12352: DOUBLE
12353: GREATEREQUAL
12354: IFFALSE 12362
12356: LD_INT 7
12358: DOUBLE
12359: LESSEQUAL
12360: IFTRUE 12364
12362: GO 12371
12364: POP
// StreamSibBomb ; end ;
12365: CALL 8622 0 0
12369: GO 12372
12371: POP
// end ;
12372: PPOPN 3
12374: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12375: LD_EXP 8
12379: PUSH
12380: LD_EXP 58
12384: AND
12385: IFFALSE 12541
12387: GO 12389
12389: DISABLE
12390: LD_INT 0
12392: PPUSH
12393: PPUSH
12394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_INT 81
12402: PUSH
12403: LD_OWVAR 2
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 21
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: ST_TO_ADDR
// if not tmp then
12449: LD_VAR 0 2
12453: NOT
12454: IFFALSE 12458
// exit ;
12456: GO 12541
// p := 0 ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12466: LD_INT 35
12468: PPUSH
12469: CALL_OW 67
// p := p + 1 ;
12473: LD_ADDR_VAR 0 3
12477: PUSH
12478: LD_VAR 0 3
12482: PUSH
12483: LD_INT 1
12485: PLUS
12486: ST_TO_ADDR
// for i in tmp do
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_VAR 0 2
12496: PUSH
12497: FOR_IN
12498: IFFALSE 12529
// if GetLives ( i ) < 1000 then
12500: LD_VAR 0 1
12504: PPUSH
12505: CALL_OW 256
12509: PUSH
12510: LD_INT 1000
12512: LESS
12513: IFFALSE 12527
// SetLives ( i , 1000 ) ;
12515: LD_VAR 0 1
12519: PPUSH
12520: LD_INT 1000
12522: PPUSH
12523: CALL_OW 234
12527: GO 12497
12529: POP
12530: POP
// until p > 20 ;
12531: LD_VAR 0 3
12535: PUSH
12536: LD_INT 20
12538: GREATER
12539: IFFALSE 12466
// end ;
12541: PPOPN 3
12543: END
// every 0 0$1 trigger StreamModeActive and sTime do
12544: LD_EXP 8
12548: PUSH
12549: LD_EXP 59
12553: AND
12554: IFFALSE 12589
12556: GO 12558
12558: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12559: LD_INT 28
12561: PPUSH
12562: LD_OWVAR 2
12566: PPUSH
12567: LD_INT 2
12569: PPUSH
12570: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12574: LD_INT 30
12576: PPUSH
12577: LD_OWVAR 2
12581: PPUSH
12582: LD_INT 2
12584: PPUSH
12585: CALL_OW 322
// end ;
12589: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12590: LD_EXP 8
12594: PUSH
12595: LD_EXP 60
12599: AND
12600: IFFALSE 12721
12602: GO 12604
12604: DISABLE
12605: LD_INT 0
12607: PPUSH
12608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: LD_INT 22
12616: PUSH
12617: LD_OWVAR 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 21
12628: PUSH
12629: LD_INT 1
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 3
12638: PUSH
12639: LD_INT 23
12641: PUSH
12642: LD_INT 0
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 69
12662: ST_TO_ADDR
// if not tmp then
12663: LD_VAR 0 2
12667: NOT
12668: IFFALSE 12672
// exit ;
12670: GO 12721
// for i in tmp do
12672: LD_ADDR_VAR 0 1
12676: PUSH
12677: LD_VAR 0 2
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12719
// begin if Crawls ( i ) then
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 318
12694: IFFALSE 12705
// ComWalk ( i ) ;
12696: LD_VAR 0 1
12700: PPUSH
12701: CALL_OW 138
// SetClass ( i , 2 ) ;
12705: LD_VAR 0 1
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 336
// end ;
12717: GO 12682
12719: POP
12720: POP
// end ;
12721: PPOPN 2
12723: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12724: LD_EXP 8
12728: PUSH
12729: LD_EXP 61
12733: AND
12734: IFFALSE 13015
12736: GO 12738
12738: DISABLE
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12744: LD_OWVAR 2
12748: PPUSH
12749: LD_INT 9
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12762: LD_INT 9
12764: PPUSH
12765: LD_OWVAR 2
12769: PPUSH
12770: CALL_OW 343
// uc_side := 9 ;
12774: LD_ADDR_OWVAR 20
12778: PUSH
12779: LD_INT 9
12781: ST_TO_ADDR
// uc_nation := 2 ;
12782: LD_ADDR_OWVAR 21
12786: PUSH
12787: LD_INT 2
12789: ST_TO_ADDR
// hc_name := Dark Warrior ;
12790: LD_ADDR_OWVAR 26
12794: PUSH
12795: LD_STRING Dark Warrior
12797: ST_TO_ADDR
// hc_gallery :=  ;
12798: LD_ADDR_OWVAR 33
12802: PUSH
12803: LD_STRING 
12805: ST_TO_ADDR
// hc_noskilllimit := true ;
12806: LD_ADDR_OWVAR 76
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12814: LD_ADDR_OWVAR 31
12818: PUSH
12819: LD_INT 30
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 30
12827: PUSH
12828: LD_INT 30
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: ST_TO_ADDR
// un := CreateHuman ;
12837: LD_ADDR_VAR 0 3
12841: PUSH
12842: CALL_OW 44
12846: ST_TO_ADDR
// hc_noskilllimit := false ;
12847: LD_ADDR_OWVAR 76
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: CALL_OW 51
// p := 0 ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12875: LD_INT 35
12877: PPUSH
12878: CALL_OW 67
// p := p + 1 ;
12882: LD_ADDR_VAR 0 2
12886: PUSH
12887: LD_VAR 0 2
12891: PUSH
12892: LD_INT 1
12894: PLUS
12895: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12896: LD_VAR 0 3
12900: PPUSH
12901: CALL_OW 256
12905: PUSH
12906: LD_INT 1000
12908: LESS
12909: IFFALSE 12923
// SetLives ( un , 1000 ) ;
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_INT 1000
12918: PPUSH
12919: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12923: LD_VAR 0 3
12927: PPUSH
12928: LD_INT 81
12930: PUSH
12931: LD_OWVAR 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 91
12942: PUSH
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: PPUSH
12965: LD_VAR 0 3
12969: PPUSH
12970: CALL_OW 74
12974: PPUSH
12975: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
12979: LD_VAR 0 2
12983: PUSH
12984: LD_INT 60
12986: GREATER
12987: PUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 301
12997: OR
12998: IFFALSE 12875
// if un then
13000: LD_VAR 0 3
13004: IFFALSE 13015
// RemoveUnit ( un ) ;
13006: LD_VAR 0 3
13010: PPUSH
13011: CALL_OW 64
// end ;
13015: PPOPN 3
13017: END
