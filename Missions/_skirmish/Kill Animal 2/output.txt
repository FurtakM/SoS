// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 3
  56: PUSH
  57: LD_INT 3
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 3
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 445: LD_ADDR_VAR 0 8
 449: PUSH
 450: LD_INT 20
 452: PUSH
 453: LD_INT 19
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// InitHc_All ( ) ;
 460: CALL_OW 584
// for i := 1 to numbers - 2 do
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: DOUBLE
 470: LD_INT 1
 472: DEC
 473: ST_TO_ADDR
 474: LD_VAR 0 3
 478: PUSH
 479: LD_INT 2
 481: MINUS
 482: PUSH
 483: FOR_TO
 484: IFFALSE 625
// begin if numbers [ i ] = 0 then
 486: LD_VAR 0 3
 490: PUSH
 491: LD_VAR 0 5
 495: ARRAY
 496: PUSH
 497: LD_INT 0
 499: EQUAL
 500: IFFALSE 504
// continue ;
 502: GO 483
// hc_class := classes [ i ] ;
 504: LD_ADDR_OWVAR 28
 508: PUSH
 509: LD_VAR 0 7
 513: PUSH
 514: LD_VAR 0 5
 518: ARRAY
 519: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 520: LD_ADDR_OWVAR 29
 524: PUSH
 525: LD_INT 8
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: CALL_OW 12
 535: PUSH
 536: LD_INT 8
 538: PPUSH
 539: LD_INT 12
 541: PPUSH
 542: CALL_OW 12
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 551: LD_ADDR_OWVAR 35
 555: PUSH
 556: LD_INT 5
 558: NEG
 559: PPUSH
 560: LD_INT 5
 562: PPUSH
 563: CALL_OW 12
 567: PUSH
 568: LD_OWVAR 67
 572: PUSH
 573: LD_INT 5
 575: MUL
 576: PLUS
 577: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 578: LD_ADDR_VAR 0 6
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_VAR 0 3
 592: PUSH
 593: LD_VAR 0 5
 597: ARRAY
 598: PUSH
 599: FOR_TO
 600: IFFALSE 621
// PlaceUnitArea ( CreateHuman , area , false ) ;
 602: CALL_OW 44
 606: PPUSH
 607: LD_VAR 0 1
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 49
 619: GO 599
 621: POP
 622: POP
// end ;
 623: GO 483
 625: POP
 626: POP
// if not waterArea then
 627: LD_VAR 0 2
 631: NOT
 632: IFFALSE 636
// exit ;
 634: GO 796
// hc_class := waterClass [ 1 ] ;
 636: LD_ADDR_OWVAR 28
 640: PUSH
 641: LD_VAR 0 8
 645: PUSH
 646: LD_INT 1
 648: ARRAY
 649: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 650: LD_ADDR_OWVAR 29
 654: PUSH
 655: LD_INT 10
 657: PUSH
 658: LD_INT 10
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_agressivity := 0 ;
 665: LD_ADDR_OWVAR 35
 669: PUSH
 670: LD_INT 0
 672: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 673: LD_ADDR_VAR 0 6
 677: PUSH
 678: DOUBLE
 679: LD_INT 1
 681: DEC
 682: ST_TO_ADDR
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 7
 690: ARRAY
 691: PUSH
 692: FOR_TO
 693: IFFALSE 714
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 695: CALL_OW 44
 699: PPUSH
 700: LD_VAR 0 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
 712: GO 692
 714: POP
 715: POP
// hc_class := waterClass [ 2 ] ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_VAR 0 8
 725: PUSH
 726: LD_INT 2
 728: ARRAY
 729: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 730: LD_ADDR_OWVAR 29
 734: PUSH
 735: LD_INT 10
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: ST_TO_ADDR
// hc_agressivity := 0 ;
 745: LD_ADDR_OWVAR 35
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 753: LD_ADDR_VAR 0 6
 757: PUSH
 758: DOUBLE
 759: LD_INT 1
 761: DEC
 762: ST_TO_ADDR
 763: LD_VAR 0 3
 767: PUSH
 768: LD_INT 8
 770: ARRAY
 771: PUSH
 772: FOR_TO
 773: IFFALSE 794
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 775: CALL_OW 44
 779: PPUSH
 780: LD_VAR 0 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
 792: GO 772
 794: POP
 795: POP
// end ; end_of_file
 796: LD_VAR 0 4
 800: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 801: LD_INT 22
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 25
 813: PUSH
 814: LD_INT 15
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: IFFALSE 935
 831: GO 833
 833: DISABLE
 834: LD_INT 0
 836: PPUSH
// begin enable ;
 837: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 838: LD_ADDR_VAR 0 1
 842: PUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 25
 855: PUSH
 856: LD_INT 15
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: PUSH
 872: FOR_IN
 873: IFFALSE 933
// if GetLives ( i ) < 1000 then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 256
 884: PUSH
 885: LD_INT 1000
 887: LESS
 888: IFFALSE 931
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_VAR 0 1
 921: PPUSH
 922: CALL_OW 74
 926: PPUSH
 927: CALL_OW 115
 931: GO 872
 933: POP
 934: POP
// end ;
 935: PPOPN 1
 937: END
// every 3 do var i , enemy , x , y , d ;
 938: GO 940
 940: DISABLE
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
 946: PPUSH
 947: PPUSH
// begin enable ;
 948: ENABLE
// for i := 2 to huntersAmount do
 949: LD_ADDR_VAR 0 1
 953: PUSH
 954: DOUBLE
 955: LD_INT 2
 957: DEC
 958: ST_TO_ADDR
 959: LD_EXP 3
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1304
// begin if not HasTask ( hunters [ i ] ) then
 967: LD_EXP 6
 971: PUSH
 972: LD_VAR 0 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 314
 982: NOT
 983: IFFALSE 1302
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 0
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PPUSH
1005: LD_EXP 6
1009: PUSH
1010: LD_VAR 0 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 74
1020: ST_TO_ADDR
// if not enemy then
1021: LD_VAR 0 2
1025: NOT
1026: IFFALSE 1030
// continue ;
1028: GO 964
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1030: LD_EXP 6
1034: PUSH
1035: LD_VAR 0 1
1039: ARRAY
1040: PPUSH
1041: LD_VAR 0 2
1045: PPUSH
1046: CALL_OW 296
1050: PUSH
1051: LD_INT 17
1053: LESS
1054: IFFALSE 1157
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1056: LD_EXP 6
1060: PUSH
1061: LD_VAR 0 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 257
1071: PUSH
1072: LD_INT 11
1074: EQUAL
1075: IFFALSE 1135
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1077: LD_VAR 0 2
1081: PPUSH
1082: CALL_OW 257
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: LD_INT 20
1092: PUSH
1093: LD_INT 13
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: IN
1101: IFFALSE 1120
// ComCarabine ( hunters [ i ] ) else
1103: LD_EXP 6
1107: PUSH
1108: LD_VAR 0 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 162
1118: GO 1135
// ComSabre ( hunters [ i ] ) ;
1120: LD_EXP 6
1124: PUSH
1125: LD_VAR 0 1
1129: ARRAY
1130: PPUSH
1131: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1135: LD_EXP 6
1139: PUSH
1140: LD_VAR 0 1
1144: ARRAY
1145: PPUSH
1146: LD_VAR 0 2
1150: PPUSH
1151: CALL_OW 115
// end else
1155: GO 1302
// begin d := rand ( 0 , 5 ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 0
1164: PPUSH
1165: LD_INT 5
1167: PPUSH
1168: CALL_OW 12
1172: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1173: LD_ADDR_VAR 0 3
1177: PUSH
1178: LD_EXP 6
1182: PUSH
1183: LD_VAR 0 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 250
1193: PPUSH
1194: LD_VAR 0 5
1198: PPUSH
1199: LD_INT 8
1201: PPUSH
1202: CALL_OW 272
1206: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_VAR 0 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 251
1227: PPUSH
1228: LD_VAR 0 5
1232: PPUSH
1233: LD_INT 8
1235: PPUSH
1236: CALL_OW 273
1240: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_VAR 0 4
1250: PPUSH
1251: CALL_OW 488
1255: PUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: LD_VAR 0 4
1265: PPUSH
1266: CALL_OW 428
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: AND
1275: IFFALSE 1302
// ComMoveXY ( hunters [ i ] , x , y ) ;
1277: LD_EXP 6
1281: PUSH
1282: LD_VAR 0 1
1286: ARRAY
1287: PPUSH
1288: LD_VAR 0 3
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: CALL_OW 111
// end ; end ; end ;
1302: GO 964
1304: POP
1305: POP
// end ; end_of_file
1306: PPOPN 5
1308: END
// on UnitGoesToRed ( un ) do var i ;
1309: LD_INT 0
1311: PPUSH
// begin if GetSide ( un ) = 1 then
1312: LD_VAR 0 1
1316: PPUSH
1317: CALL_OW 255
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1334
// YouLost ( hunt2 ) ;
1327: LD_STRING hunt2
1329: PPUSH
1330: CALL_OW 104
// if GetSide ( un ) > 1 then
1334: LD_VAR 0 1
1338: PPUSH
1339: CALL_OW 255
1343: PUSH
1344: LD_INT 1
1346: GREATER
1347: IFFALSE 1400
// begin for i := 1 to 6 do
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 6
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1386
// begin wait ( 0 0$1 ) ;
1365: LD_INT 35
1367: PPUSH
1368: CALL_OW 67
// SetLives ( un , 249 ) ;
1372: LD_VAR 0 1
1376: PPUSH
1377: LD_INT 249
1379: PPUSH
1380: CALL_OW 234
// end ;
1384: GO 1362
1386: POP
1387: POP
// SetLives ( un , 1000 ) ;
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_INT 1000
1395: PPUSH
1396: CALL_OW 234
// end ; end ;
1400: PPOPN 2
1402: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1403: LD_VAR 0 1
1407: PUSH
1408: LD_INT 1
1410: EQUAL
1411: PUSH
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 1
1419: GREATER
1420: AND
1421: IFFALSE 1430
// YouLost ( hunt1 ) ;
1423: LD_STRING hunt1
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: PPOPN 2
1432: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1433: LD_INT 0
1435: PPUSH
// begin point := 0 ;
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 257
1453: PUSH
1454: LD_INT 20
1456: DOUBLE
1457: EQUAL
1458: IFTRUE 1462
1460: GO 1473
1462: POP
// point := 10 ; class_horse :
1463: LD_ADDR_VAR 0 4
1467: PUSH
1468: LD_INT 10
1470: ST_TO_ADDR
1471: GO 1607
1473: LD_INT 21
1475: DOUBLE
1476: EQUAL
1477: IFTRUE 1481
1479: GO 1492
1481: POP
// point := 10 ; class_baggie :
1482: LD_ADDR_VAR 0 4
1486: PUSH
1487: LD_INT 10
1489: ST_TO_ADDR
1490: GO 1607
1492: LD_INT 13
1494: DOUBLE
1495: EQUAL
1496: IFTRUE 1500
1498: GO 1511
1500: POP
// point := 5 ; class_phororhacos :
1501: LD_ADDR_VAR 0 4
1505: PUSH
1506: LD_INT 5
1508: ST_TO_ADDR
1509: GO 1607
1511: LD_INT 18
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1530
1519: POP
// point := 10 ; class_tiger :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 10
1527: ST_TO_ADDR
1528: GO 1607
1530: LD_INT 14
1532: DOUBLE
1533: EQUAL
1534: IFTRUE 1538
1536: GO 1549
1538: POP
// point := 20 ; class_apeman :
1539: LD_ADDR_VAR 0 4
1543: PUSH
1544: LD_INT 20
1546: ST_TO_ADDR
1547: GO 1607
1549: LD_INT 12
1551: DOUBLE
1552: EQUAL
1553: IFTRUE 1557
1555: GO 1568
1557: POP
// point := 30 ; class_apeman_soldier :
1558: LD_ADDR_VAR 0 4
1562: PUSH
1563: LD_INT 30
1565: ST_TO_ADDR
1566: GO 1607
1568: LD_INT 15
1570: DOUBLE
1571: EQUAL
1572: IFTRUE 1576
1574: GO 1587
1576: POP
// point := 50 ; class_frog :
1577: LD_ADDR_VAR 0 4
1581: PUSH
1582: LD_INT 50
1584: ST_TO_ADDR
1585: GO 1607
1587: LD_INT 19
1589: DOUBLE
1590: EQUAL
1591: IFTRUE 1595
1593: GO 1606
1595: POP
// point := 10 ; end ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_INT 10
1603: ST_TO_ADDR
1604: GO 1607
1606: POP
// if point then
1607: LD_VAR 0 4
1611: IFFALSE 1650
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1613: LD_ADDR_EXP 5
1617: PUSH
1618: LD_EXP 5
1622: PPUSH
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_EXP 5
1632: PUSH
1633: LD_VAR 0 2
1637: ARRAY
1638: PUSH
1639: LD_VAR 0 4
1643: PLUS
1644: PPUSH
1645: CALL_OW 1
1649: ST_TO_ADDR
// end ;
1650: PPOPN 4
1652: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1653: LD_INT 22
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: PUSH
1668: LD_INT 10
1670: LESS
1671: IFFALSE 1785
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1677: LD_INT 2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: LD_INT 4
1688: PPUSH
1689: CALL_OW 12
1693: PUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 2
1699: PPUSH
1700: CALL_OW 12
1704: PUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: CALL_OW 12
1715: PUSH
1716: LD_INT 2
1718: PPUSH
1719: LD_INT 4
1721: PPUSH
1722: CALL_OW 12
1726: PUSH
1727: LD_INT 2
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: CALL_OW 12
1737: PUSH
1738: LD_INT 0
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 12
1748: PUSH
1749: LD_INT 0
1751: PPUSH
1752: LD_INT 4
1754: PPUSH
1755: CALL_OW 12
1759: PUSH
1760: LD_INT 0
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: CALL_OW 12
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL 391 0 3
// end ;
1785: END
// every 0 0$1 do var i ;
1786: GO 1788
1788: DISABLE
1789: LD_INT 0
1791: PPUSH
// begin enable ;
1792: ENABLE
// display_strings := [ ] ;
1793: LD_ADDR_OWVAR 47
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to huntersAmount do
1800: LD_ADDR_VAR 0 1
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_EXP 3
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1950
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1818: LD_ADDR_OWVAR 47
1822: PUSH
1823: LD_OWVAR 47
1827: PUSH
1828: LD_STRING #player
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PUSH
1837: LD_VAR 0 1
1841: PUSH
1842: LD_EXP 5
1846: PUSH
1847: LD_VAR 0 1
1851: ARRAY
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: ADD
1858: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1859: LD_EXP 5
1863: PUSH
1864: LD_VAR 0 1
1868: ARRAY
1869: PUSH
1870: LD_INT 750
1872: PUSH
1873: LD_INT 1250
1875: PUSH
1876: LD_INT 2000
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: GREATEREQUAL
1890: IFFALSE 1948
// begin if i = 1 then
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 1
1899: EQUAL
1900: IFFALSE 1941
// begin DialogueOn ;
1902: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1906: LD_STRING ACH_HUNT
1908: PPUSH
1909: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1913: LD_ADDR_OWVAR 47
1917: PUSH
1918: LD_STRING #hunting-win
1920: PUSH
1921: EMPTY
1922: LIST
1923: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1924: LD_INT 175
1926: PPUSH
1927: CALL_OW 68
// YouWin ;
1931: CALL_OW 103
// DialogueOff ;
1935: CALL_OW 7
// end else
1939: GO 1948
// YouLost ( hunt3 ) ;
1941: LD_STRING hunt3
1943: PPUSH
1944: CALL_OW 104
// end ; end ;
1948: GO 1815
1950: POP
1951: POP
// end ; end_of_file end_of_file
1952: PPOPN 1
1954: END
// every 0 0$1 do
1955: GO 1957
1957: DISABLE
// begin enable ;
1958: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1959: LD_STRING updateTimer(
1961: PUSH
1962: LD_OWVAR 1
1966: STR
1967: PUSH
1968: LD_STRING );
1970: STR
1971: PPUSH
1972: CALL_OW 559
// end ;
1976: END
// export function SOS_MapStart ( ) ; begin
1977: LD_INT 0
1979: PPUSH
// if streamModeActive then
1980: LD_EXP 7
1984: IFFALSE 1993
// DefineStreamItems ( true ) ;
1986: LD_INT 1
1988: PPUSH
1989: CALL 3647 0 1
// UpdateFactoryWaypoints ( ) ;
1993: CALL 16508 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1997: CALL 16765 0 0
// end ;
2001: LD_VAR 0 1
2005: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2006: LD_INT 0
2008: PPUSH
// if p2 = 100 then
2009: LD_VAR 0 2
2013: PUSH
2014: LD_INT 100
2016: EQUAL
2017: IFFALSE 3020
// begin if not StreamModeActive then
2019: LD_EXP 7
2023: NOT
2024: IFFALSE 2034
// StreamModeActive := true ;
2026: LD_ADDR_EXP 7
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// if p3 = 0 then
2034: LD_VAR 0 3
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: IFFALSE 2048
// InitStreamMode ;
2044: CALL 3183 0 0
// if p3 = 1 then
2048: LD_VAR 0 3
2052: PUSH
2053: LD_INT 1
2055: EQUAL
2056: IFFALSE 2066
// sRocket := true ;
2058: LD_ADDR_EXP 12
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// if p3 = 2 then
2066: LD_VAR 0 3
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2084
// sSpeed := true ;
2076: LD_ADDR_EXP 11
2080: PUSH
2081: LD_INT 1
2083: ST_TO_ADDR
// if p3 = 3 then
2084: LD_VAR 0 3
2088: PUSH
2089: LD_INT 3
2091: EQUAL
2092: IFFALSE 2102
// sEngine := true ;
2094: LD_ADDR_EXP 13
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// if p3 = 4 then
2102: LD_VAR 0 3
2106: PUSH
2107: LD_INT 4
2109: EQUAL
2110: IFFALSE 2120
// sSpec := true ;
2112: LD_ADDR_EXP 10
2116: PUSH
2117: LD_INT 1
2119: ST_TO_ADDR
// if p3 = 5 then
2120: LD_VAR 0 3
2124: PUSH
2125: LD_INT 5
2127: EQUAL
2128: IFFALSE 2138
// sLevel := true ;
2130: LD_ADDR_EXP 14
2134: PUSH
2135: LD_INT 1
2137: ST_TO_ADDR
// if p3 = 6 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 6
2145: EQUAL
2146: IFFALSE 2156
// sArmoury := true ;
2148: LD_ADDR_EXP 15
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// if p3 = 7 then
2156: LD_VAR 0 3
2160: PUSH
2161: LD_INT 7
2163: EQUAL
2164: IFFALSE 2174
// sRadar := true ;
2166: LD_ADDR_EXP 16
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// if p3 = 8 then
2174: LD_VAR 0 3
2178: PUSH
2179: LD_INT 8
2181: EQUAL
2182: IFFALSE 2192
// sBunker := true ;
2184: LD_ADDR_EXP 17
2188: PUSH
2189: LD_INT 1
2191: ST_TO_ADDR
// if p3 = 9 then
2192: LD_VAR 0 3
2196: PUSH
2197: LD_INT 9
2199: EQUAL
2200: IFFALSE 2210
// sHack := true ;
2202: LD_ADDR_EXP 18
2206: PUSH
2207: LD_INT 1
2209: ST_TO_ADDR
// if p3 = 10 then
2210: LD_VAR 0 3
2214: PUSH
2215: LD_INT 10
2217: EQUAL
2218: IFFALSE 2228
// sFire := true ;
2220: LD_ADDR_EXP 19
2224: PUSH
2225: LD_INT 1
2227: ST_TO_ADDR
// if p3 = 11 then
2228: LD_VAR 0 3
2232: PUSH
2233: LD_INT 11
2235: EQUAL
2236: IFFALSE 2246
// sRefresh := true ;
2238: LD_ADDR_EXP 20
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// if p3 = 12 then
2246: LD_VAR 0 3
2250: PUSH
2251: LD_INT 12
2253: EQUAL
2254: IFFALSE 2264
// sExp := true ;
2256: LD_ADDR_EXP 21
2260: PUSH
2261: LD_INT 1
2263: ST_TO_ADDR
// if p3 = 13 then
2264: LD_VAR 0 3
2268: PUSH
2269: LD_INT 13
2271: EQUAL
2272: IFFALSE 2282
// sDepot := true ;
2274: LD_ADDR_EXP 22
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// if p3 = 14 then
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 14
2289: EQUAL
2290: IFFALSE 2300
// sFlag := true ;
2292: LD_ADDR_EXP 23
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// if p3 = 15 then
2300: LD_VAR 0 3
2304: PUSH
2305: LD_INT 15
2307: EQUAL
2308: IFFALSE 2318
// sKamikadze := true ;
2310: LD_ADDR_EXP 31
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// if p3 = 16 then
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 16
2325: EQUAL
2326: IFFALSE 2336
// sTroll := true ;
2328: LD_ADDR_EXP 32
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// if p3 = 17 then
2336: LD_VAR 0 3
2340: PUSH
2341: LD_INT 17
2343: EQUAL
2344: IFFALSE 2354
// sSlow := true ;
2346: LD_ADDR_EXP 33
2350: PUSH
2351: LD_INT 1
2353: ST_TO_ADDR
// if p3 = 18 then
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 18
2361: EQUAL
2362: IFFALSE 2372
// sLack := true ;
2364: LD_ADDR_EXP 34
2368: PUSH
2369: LD_INT 1
2371: ST_TO_ADDR
// if p3 = 19 then
2372: LD_VAR 0 3
2376: PUSH
2377: LD_INT 19
2379: EQUAL
2380: IFFALSE 2390
// sTank := true ;
2382: LD_ADDR_EXP 36
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// if p3 = 20 then
2390: LD_VAR 0 3
2394: PUSH
2395: LD_INT 20
2397: EQUAL
2398: IFFALSE 2408
// sRemote := true ;
2400: LD_ADDR_EXP 37
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// if p3 = 21 then
2408: LD_VAR 0 3
2412: PUSH
2413: LD_INT 21
2415: EQUAL
2416: IFFALSE 2426
// sPowell := true ;
2418: LD_ADDR_EXP 38
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// if p3 = 22 then
2426: LD_VAR 0 3
2430: PUSH
2431: LD_INT 22
2433: EQUAL
2434: IFFALSE 2444
// sTeleport := true ;
2436: LD_ADDR_EXP 41
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// if p3 = 23 then
2444: LD_VAR 0 3
2448: PUSH
2449: LD_INT 23
2451: EQUAL
2452: IFFALSE 2462
// sOilTower := true ;
2454: LD_ADDR_EXP 43
2458: PUSH
2459: LD_INT 1
2461: ST_TO_ADDR
// if p3 = 24 then
2462: LD_VAR 0 3
2466: PUSH
2467: LD_INT 24
2469: EQUAL
2470: IFFALSE 2480
// sShovel := true ;
2472: LD_ADDR_EXP 44
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// if p3 = 25 then
2480: LD_VAR 0 3
2484: PUSH
2485: LD_INT 25
2487: EQUAL
2488: IFFALSE 2498
// sSheik := true ;
2490: LD_ADDR_EXP 45
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// if p3 = 26 then
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 26
2505: EQUAL
2506: IFFALSE 2516
// sEarthquake := true ;
2508: LD_ADDR_EXP 47
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// if p3 = 27 then
2516: LD_VAR 0 3
2520: PUSH
2521: LD_INT 27
2523: EQUAL
2524: IFFALSE 2534
// sAI := true ;
2526: LD_ADDR_EXP 48
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// if p3 = 28 then
2534: LD_VAR 0 3
2538: PUSH
2539: LD_INT 28
2541: EQUAL
2542: IFFALSE 2552
// sCargo := true ;
2544: LD_ADDR_EXP 51
2548: PUSH
2549: LD_INT 1
2551: ST_TO_ADDR
// if p3 = 29 then
2552: LD_VAR 0 3
2556: PUSH
2557: LD_INT 29
2559: EQUAL
2560: IFFALSE 2570
// sDLaser := true ;
2562: LD_ADDR_EXP 52
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// if p3 = 30 then
2570: LD_VAR 0 3
2574: PUSH
2575: LD_INT 30
2577: EQUAL
2578: IFFALSE 2588
// sExchange := true ;
2580: LD_ADDR_EXP 53
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// if p3 = 31 then
2588: LD_VAR 0 3
2592: PUSH
2593: LD_INT 31
2595: EQUAL
2596: IFFALSE 2606
// sFac := true ;
2598: LD_ADDR_EXP 54
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// if p3 = 32 then
2606: LD_VAR 0 3
2610: PUSH
2611: LD_INT 32
2613: EQUAL
2614: IFFALSE 2624
// sPower := true ;
2616: LD_ADDR_EXP 55
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// if p3 = 33 then
2624: LD_VAR 0 3
2628: PUSH
2629: LD_INT 33
2631: EQUAL
2632: IFFALSE 2642
// sRandom := true ;
2634: LD_ADDR_EXP 56
2638: PUSH
2639: LD_INT 1
2641: ST_TO_ADDR
// if p3 = 34 then
2642: LD_VAR 0 3
2646: PUSH
2647: LD_INT 34
2649: EQUAL
2650: IFFALSE 2660
// sShield := true ;
2652: LD_ADDR_EXP 57
2656: PUSH
2657: LD_INT 1
2659: ST_TO_ADDR
// if p3 = 35 then
2660: LD_VAR 0 3
2664: PUSH
2665: LD_INT 35
2667: EQUAL
2668: IFFALSE 2678
// sTime := true ;
2670: LD_ADDR_EXP 58
2674: PUSH
2675: LD_INT 1
2677: ST_TO_ADDR
// if p3 = 36 then
2678: LD_VAR 0 3
2682: PUSH
2683: LD_INT 36
2685: EQUAL
2686: IFFALSE 2696
// sTools := true ;
2688: LD_ADDR_EXP 59
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// if p3 = 101 then
2696: LD_VAR 0 3
2700: PUSH
2701: LD_INT 101
2703: EQUAL
2704: IFFALSE 2714
// sSold := true ;
2706: LD_ADDR_EXP 24
2710: PUSH
2711: LD_INT 1
2713: ST_TO_ADDR
// if p3 = 102 then
2714: LD_VAR 0 3
2718: PUSH
2719: LD_INT 102
2721: EQUAL
2722: IFFALSE 2732
// sDiff := true ;
2724: LD_ADDR_EXP 25
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// if p3 = 103 then
2732: LD_VAR 0 3
2736: PUSH
2737: LD_INT 103
2739: EQUAL
2740: IFFALSE 2750
// sFog := true ;
2742: LD_ADDR_EXP 28
2746: PUSH
2747: LD_INT 1
2749: ST_TO_ADDR
// if p3 = 104 then
2750: LD_VAR 0 3
2754: PUSH
2755: LD_INT 104
2757: EQUAL
2758: IFFALSE 2768
// sReset := true ;
2760: LD_ADDR_EXP 29
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// if p3 = 105 then
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 105
2775: EQUAL
2776: IFFALSE 2786
// sSun := true ;
2778: LD_ADDR_EXP 30
2782: PUSH
2783: LD_INT 1
2785: ST_TO_ADDR
// if p3 = 106 then
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 106
2793: EQUAL
2794: IFFALSE 2804
// sTiger := true ;
2796: LD_ADDR_EXP 26
2800: PUSH
2801: LD_INT 1
2803: ST_TO_ADDR
// if p3 = 107 then
2804: LD_VAR 0 3
2808: PUSH
2809: LD_INT 107
2811: EQUAL
2812: IFFALSE 2822
// sBomb := true ;
2814: LD_ADDR_EXP 27
2818: PUSH
2819: LD_INT 1
2821: ST_TO_ADDR
// if p3 = 108 then
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 108
2829: EQUAL
2830: IFFALSE 2840
// sWound := true ;
2832: LD_ADDR_EXP 35
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// if p3 = 109 then
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 109
2847: EQUAL
2848: IFFALSE 2858
// sBetray := true ;
2850: LD_ADDR_EXP 39
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// if p3 = 110 then
2858: LD_VAR 0 3
2862: PUSH
2863: LD_INT 110
2865: EQUAL
2866: IFFALSE 2876
// sContamin := true ;
2868: LD_ADDR_EXP 40
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// if p3 = 111 then
2876: LD_VAR 0 3
2880: PUSH
2881: LD_INT 111
2883: EQUAL
2884: IFFALSE 2894
// sOil := true ;
2886: LD_ADDR_EXP 42
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// if p3 = 112 then
2894: LD_VAR 0 3
2898: PUSH
2899: LD_INT 112
2901: EQUAL
2902: IFFALSE 2912
// sStu := true ;
2904: LD_ADDR_EXP 46
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// if p3 = 113 then
2912: LD_VAR 0 3
2916: PUSH
2917: LD_INT 113
2919: EQUAL
2920: IFFALSE 2930
// sBazooka := true ;
2922: LD_ADDR_EXP 49
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// if p3 = 114 then
2930: LD_VAR 0 3
2934: PUSH
2935: LD_INT 114
2937: EQUAL
2938: IFFALSE 2948
// sMortar := true ;
2940: LD_ADDR_EXP 50
2944: PUSH
2945: LD_INT 1
2947: ST_TO_ADDR
// if p3 = 115 then
2948: LD_VAR 0 3
2952: PUSH
2953: LD_INT 115
2955: EQUAL
2956: IFFALSE 2966
// sRanger := true ;
2958: LD_ADDR_EXP 60
2962: PUSH
2963: LD_INT 1
2965: ST_TO_ADDR
// if p3 = 116 then
2966: LD_VAR 0 3
2970: PUSH
2971: LD_INT 116
2973: EQUAL
2974: IFFALSE 2984
// sComputer := true ;
2976: LD_ADDR_EXP 61
2980: PUSH
2981: LD_INT 1
2983: ST_TO_ADDR
// if p3 = 117 then
2984: LD_VAR 0 3
2988: PUSH
2989: LD_INT 117
2991: EQUAL
2992: IFFALSE 3002
// s30 := true ;
2994: LD_ADDR_EXP 62
2998: PUSH
2999: LD_INT 1
3001: ST_TO_ADDR
// if p3 = 118 then
3002: LD_VAR 0 3
3006: PUSH
3007: LD_INT 118
3009: EQUAL
3010: IFFALSE 3020
// s60 := true ;
3012: LD_ADDR_EXP 63
3016: PUSH
3017: LD_INT 1
3019: ST_TO_ADDR
// end ; if p2 = 101 then
3020: LD_VAR 0 2
3024: PUSH
3025: LD_INT 101
3027: EQUAL
3028: IFFALSE 3156
// begin case p3 of 1 :
3030: LD_VAR 0 3
3034: PUSH
3035: LD_INT 1
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3050
3043: POP
// hHackUnlimitedResources ; 2 :
3044: CALL 15254 0 0
3048: GO 3156
3050: LD_INT 2
3052: DOUBLE
3053: EQUAL
3054: IFTRUE 3058
3056: GO 3065
3058: POP
// hHackSetLevel10 ; 3 :
3059: CALL 15387 0 0
3063: GO 3156
3065: LD_INT 3
3067: DOUBLE
3068: EQUAL
3069: IFTRUE 3073
3071: GO 3080
3073: POP
// hHackSetLevel10YourUnits ; 4 :
3074: CALL 15472 0 0
3078: GO 3156
3080: LD_INT 4
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3095
3088: POP
// hHackInvincible ; 5 :
3089: CALL 15920 0 0
3093: GO 3156
3095: LD_INT 5
3097: DOUBLE
3098: EQUAL
3099: IFTRUE 3103
3101: GO 3110
3103: POP
// hHackInvisible ; 6 :
3104: CALL 16031 0 0
3108: GO 3156
3110: LD_INT 6
3112: DOUBLE
3113: EQUAL
3114: IFTRUE 3118
3116: GO 3125
3118: POP
// hHackChangeYourSide ; 7 :
3119: CALL 16088 0 0
3123: GO 3156
3125: LD_INT 7
3127: DOUBLE
3128: EQUAL
3129: IFTRUE 3133
3131: GO 3140
3133: POP
// hHackChangeUnitSide ; 8 :
3134: CALL 16130 0 0
3138: GO 3156
3140: LD_INT 8
3142: DOUBLE
3143: EQUAL
3144: IFTRUE 3148
3146: GO 3155
3148: POP
// hHackFog ; end ;
3149: CALL 16231 0 0
3153: GO 3156
3155: POP
// end ; end ;
3156: LD_VAR 0 7
3160: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3161: GO 3163
3163: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3164: LD_STRING initStreamRollete();
3166: PPUSH
3167: CALL_OW 559
// InitStreamMode ;
3171: CALL 3183 0 0
// DefineStreamItems ( false ) ;
3175: LD_INT 0
3177: PPUSH
3178: CALL 3647 0 1
// end ;
3182: END
// function InitStreamMode ; begin
3183: LD_INT 0
3185: PPUSH
// streamModeActive := false ;
3186: LD_ADDR_EXP 7
3190: PUSH
3191: LD_INT 0
3193: ST_TO_ADDR
// normalCounter := 36 ;
3194: LD_ADDR_EXP 8
3198: PUSH
3199: LD_INT 36
3201: ST_TO_ADDR
// hardcoreCounter := 18 ;
3202: LD_ADDR_EXP 9
3206: PUSH
3207: LD_INT 18
3209: ST_TO_ADDR
// sRocket := false ;
3210: LD_ADDR_EXP 12
3214: PUSH
3215: LD_INT 0
3217: ST_TO_ADDR
// sSpeed := false ;
3218: LD_ADDR_EXP 11
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// sEngine := false ;
3226: LD_ADDR_EXP 13
3230: PUSH
3231: LD_INT 0
3233: ST_TO_ADDR
// sSpec := false ;
3234: LD_ADDR_EXP 10
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// sLevel := false ;
3242: LD_ADDR_EXP 14
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// sArmoury := false ;
3250: LD_ADDR_EXP 15
3254: PUSH
3255: LD_INT 0
3257: ST_TO_ADDR
// sRadar := false ;
3258: LD_ADDR_EXP 16
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// sBunker := false ;
3266: LD_ADDR_EXP 17
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// sHack := false ;
3274: LD_ADDR_EXP 18
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// sFire := false ;
3282: LD_ADDR_EXP 19
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// sRefresh := false ;
3290: LD_ADDR_EXP 20
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// sExp := false ;
3298: LD_ADDR_EXP 21
3302: PUSH
3303: LD_INT 0
3305: ST_TO_ADDR
// sDepot := false ;
3306: LD_ADDR_EXP 22
3310: PUSH
3311: LD_INT 0
3313: ST_TO_ADDR
// sFlag := false ;
3314: LD_ADDR_EXP 23
3318: PUSH
3319: LD_INT 0
3321: ST_TO_ADDR
// sKamikadze := false ;
3322: LD_ADDR_EXP 31
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// sTroll := false ;
3330: LD_ADDR_EXP 32
3334: PUSH
3335: LD_INT 0
3337: ST_TO_ADDR
// sSlow := false ;
3338: LD_ADDR_EXP 33
3342: PUSH
3343: LD_INT 0
3345: ST_TO_ADDR
// sLack := false ;
3346: LD_ADDR_EXP 34
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// sTank := false ;
3354: LD_ADDR_EXP 36
3358: PUSH
3359: LD_INT 0
3361: ST_TO_ADDR
// sRemote := false ;
3362: LD_ADDR_EXP 37
3366: PUSH
3367: LD_INT 0
3369: ST_TO_ADDR
// sPowell := false ;
3370: LD_ADDR_EXP 38
3374: PUSH
3375: LD_INT 0
3377: ST_TO_ADDR
// sTeleport := false ;
3378: LD_ADDR_EXP 41
3382: PUSH
3383: LD_INT 0
3385: ST_TO_ADDR
// sOilTower := false ;
3386: LD_ADDR_EXP 43
3390: PUSH
3391: LD_INT 0
3393: ST_TO_ADDR
// sShovel := false ;
3394: LD_ADDR_EXP 44
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// sSheik := false ;
3402: LD_ADDR_EXP 45
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// sEarthquake := false ;
3410: LD_ADDR_EXP 47
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// sAI := false ;
3418: LD_ADDR_EXP 48
3422: PUSH
3423: LD_INT 0
3425: ST_TO_ADDR
// sCargo := false ;
3426: LD_ADDR_EXP 51
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// sDLaser := false ;
3434: LD_ADDR_EXP 52
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// sExchange := false ;
3442: LD_ADDR_EXP 53
3446: PUSH
3447: LD_INT 0
3449: ST_TO_ADDR
// sFac := false ;
3450: LD_ADDR_EXP 54
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// sPower := false ;
3458: LD_ADDR_EXP 55
3462: PUSH
3463: LD_INT 0
3465: ST_TO_ADDR
// sRandom := false ;
3466: LD_ADDR_EXP 56
3470: PUSH
3471: LD_INT 0
3473: ST_TO_ADDR
// sShield := false ;
3474: LD_ADDR_EXP 57
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// sTime := false ;
3482: LD_ADDR_EXP 58
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
// sTools := false ;
3490: LD_ADDR_EXP 59
3494: PUSH
3495: LD_INT 0
3497: ST_TO_ADDR
// sSold := false ;
3498: LD_ADDR_EXP 24
3502: PUSH
3503: LD_INT 0
3505: ST_TO_ADDR
// sDiff := false ;
3506: LD_ADDR_EXP 25
3510: PUSH
3511: LD_INT 0
3513: ST_TO_ADDR
// sFog := false ;
3514: LD_ADDR_EXP 28
3518: PUSH
3519: LD_INT 0
3521: ST_TO_ADDR
// sReset := false ;
3522: LD_ADDR_EXP 29
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// sSun := false ;
3530: LD_ADDR_EXP 30
3534: PUSH
3535: LD_INT 0
3537: ST_TO_ADDR
// sTiger := false ;
3538: LD_ADDR_EXP 26
3542: PUSH
3543: LD_INT 0
3545: ST_TO_ADDR
// sBomb := false ;
3546: LD_ADDR_EXP 27
3550: PUSH
3551: LD_INT 0
3553: ST_TO_ADDR
// sWound := false ;
3554: LD_ADDR_EXP 35
3558: PUSH
3559: LD_INT 0
3561: ST_TO_ADDR
// sBetray := false ;
3562: LD_ADDR_EXP 39
3566: PUSH
3567: LD_INT 0
3569: ST_TO_ADDR
// sContamin := false ;
3570: LD_ADDR_EXP 40
3574: PUSH
3575: LD_INT 0
3577: ST_TO_ADDR
// sOil := false ;
3578: LD_ADDR_EXP 42
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// sStu := false ;
3586: LD_ADDR_EXP 46
3590: PUSH
3591: LD_INT 0
3593: ST_TO_ADDR
// sBazooka := false ;
3594: LD_ADDR_EXP 49
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// sMortar := false ;
3602: LD_ADDR_EXP 50
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// sRanger := false ;
3610: LD_ADDR_EXP 60
3614: PUSH
3615: LD_INT 0
3617: ST_TO_ADDR
// sComputer := false ;
3618: LD_ADDR_EXP 61
3622: PUSH
3623: LD_INT 0
3625: ST_TO_ADDR
// s30 := false ;
3626: LD_ADDR_EXP 62
3630: PUSH
3631: LD_INT 0
3633: ST_TO_ADDR
// s60 := false ;
3634: LD_ADDR_EXP 63
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// end ;
3642: LD_VAR 0 1
3646: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
// result := [ ] ;
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: EMPTY
3662: ST_TO_ADDR
// if campaign_id = 1 then
3663: LD_OWVAR 69
3667: PUSH
3668: LD_INT 1
3670: EQUAL
3671: IFFALSE 6837
// begin case mission_number of 1 :
3673: LD_OWVAR 70
3677: PUSH
3678: LD_INT 1
3680: DOUBLE
3681: EQUAL
3682: IFTRUE 3686
3684: GO 3762
3686: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3687: LD_ADDR_VAR 0 2
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: LD_INT 4
3697: PUSH
3698: LD_INT 11
3700: PUSH
3701: LD_INT 12
3703: PUSH
3704: LD_INT 15
3706: PUSH
3707: LD_INT 16
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 23
3715: PUSH
3716: LD_INT 26
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 101
3732: PUSH
3733: LD_INT 102
3735: PUSH
3736: LD_INT 106
3738: PUSH
3739: LD_INT 116
3741: PUSH
3742: LD_INT 117
3744: PUSH
3745: LD_INT 118
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: ST_TO_ADDR
3760: GO 6835
3762: LD_INT 2
3764: DOUBLE
3765: EQUAL
3766: IFTRUE 3770
3768: GO 3854
3770: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3771: LD_ADDR_VAR 0 2
3775: PUSH
3776: LD_INT 2
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 12
3787: PUSH
3788: LD_INT 15
3790: PUSH
3791: LD_INT 16
3793: PUSH
3794: LD_INT 22
3796: PUSH
3797: LD_INT 23
3799: PUSH
3800: LD_INT 26
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 101
3816: PUSH
3817: LD_INT 102
3819: PUSH
3820: LD_INT 105
3822: PUSH
3823: LD_INT 106
3825: PUSH
3826: LD_INT 108
3828: PUSH
3829: LD_INT 116
3831: PUSH
3832: LD_INT 117
3834: PUSH
3835: LD_INT 118
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: ST_TO_ADDR
3852: GO 6835
3854: LD_INT 3
3856: DOUBLE
3857: EQUAL
3858: IFTRUE 3862
3860: GO 3950
3862: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: LD_INT 2
3870: PUSH
3871: LD_INT 4
3873: PUSH
3874: LD_INT 5
3876: PUSH
3877: LD_INT 11
3879: PUSH
3880: LD_INT 12
3882: PUSH
3883: LD_INT 15
3885: PUSH
3886: LD_INT 16
3888: PUSH
3889: LD_INT 22
3891: PUSH
3892: LD_INT 26
3894: PUSH
3895: LD_INT 36
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 101
3912: PUSH
3913: LD_INT 102
3915: PUSH
3916: LD_INT 105
3918: PUSH
3919: LD_INT 106
3921: PUSH
3922: LD_INT 108
3924: PUSH
3925: LD_INT 116
3927: PUSH
3928: LD_INT 117
3930: PUSH
3931: LD_INT 118
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: ST_TO_ADDR
3948: GO 6835
3950: LD_INT 4
3952: DOUBLE
3953: EQUAL
3954: IFTRUE 3958
3956: GO 4054
3958: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3959: LD_ADDR_VAR 0 2
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: LD_INT 4
3969: PUSH
3970: LD_INT 5
3972: PUSH
3973: LD_INT 8
3975: PUSH
3976: LD_INT 11
3978: PUSH
3979: LD_INT 12
3981: PUSH
3982: LD_INT 15
3984: PUSH
3985: LD_INT 16
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 23
3993: PUSH
3994: LD_INT 26
3996: PUSH
3997: LD_INT 36
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 101
4016: PUSH
4017: LD_INT 102
4019: PUSH
4020: LD_INT 105
4022: PUSH
4023: LD_INT 106
4025: PUSH
4026: LD_INT 108
4028: PUSH
4029: LD_INT 116
4031: PUSH
4032: LD_INT 117
4034: PUSH
4035: LD_INT 118
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: ST_TO_ADDR
4052: GO 6835
4054: LD_INT 5
4056: DOUBLE
4057: EQUAL
4058: IFTRUE 4062
4060: GO 4174
4062: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4063: LD_ADDR_VAR 0 2
4067: PUSH
4068: LD_INT 2
4070: PUSH
4071: LD_INT 4
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: LD_INT 6
4079: PUSH
4080: LD_INT 8
4082: PUSH
4083: LD_INT 11
4085: PUSH
4086: LD_INT 12
4088: PUSH
4089: LD_INT 15
4091: PUSH
4092: LD_INT 16
4094: PUSH
4095: LD_INT 22
4097: PUSH
4098: LD_INT 23
4100: PUSH
4101: LD_INT 25
4103: PUSH
4104: LD_INT 26
4106: PUSH
4107: LD_INT 36
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 101
4128: PUSH
4129: LD_INT 102
4131: PUSH
4132: LD_INT 105
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 108
4140: PUSH
4141: LD_INT 109
4143: PUSH
4144: LD_INT 112
4146: PUSH
4147: LD_INT 116
4149: PUSH
4150: LD_INT 117
4152: PUSH
4153: LD_INT 118
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: ST_TO_ADDR
4172: GO 6835
4174: LD_INT 6
4176: DOUBLE
4177: EQUAL
4178: IFTRUE 4182
4180: GO 4314
4182: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4183: LD_ADDR_VAR 0 2
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 4
4193: PUSH
4194: LD_INT 5
4196: PUSH
4197: LD_INT 6
4199: PUSH
4200: LD_INT 8
4202: PUSH
4203: LD_INT 11
4205: PUSH
4206: LD_INT 12
4208: PUSH
4209: LD_INT 15
4211: PUSH
4212: LD_INT 16
4214: PUSH
4215: LD_INT 20
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_INT 23
4226: PUSH
4227: LD_INT 25
4229: PUSH
4230: LD_INT 26
4232: PUSH
4233: LD_INT 30
4235: PUSH
4236: LD_INT 31
4238: PUSH
4239: LD_INT 32
4241: PUSH
4242: LD_INT 36
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 101
4268: PUSH
4269: LD_INT 102
4271: PUSH
4272: LD_INT 105
4274: PUSH
4275: LD_INT 106
4277: PUSH
4278: LD_INT 108
4280: PUSH
4281: LD_INT 109
4283: PUSH
4284: LD_INT 112
4286: PUSH
4287: LD_INT 116
4289: PUSH
4290: LD_INT 117
4292: PUSH
4293: LD_INT 118
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 6835
4314: LD_INT 7
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4434
4322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4323: LD_ADDR_VAR 0 2
4327: PUSH
4328: LD_INT 2
4330: PUSH
4331: LD_INT 4
4333: PUSH
4334: LD_INT 5
4336: PUSH
4337: LD_INT 7
4339: PUSH
4340: LD_INT 11
4342: PUSH
4343: LD_INT 12
4345: PUSH
4346: LD_INT 15
4348: PUSH
4349: LD_INT 16
4351: PUSH
4352: LD_INT 20
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 22
4360: PUSH
4361: LD_INT 23
4363: PUSH
4364: LD_INT 25
4366: PUSH
4367: LD_INT 26
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 101
4388: PUSH
4389: LD_INT 102
4391: PUSH
4392: LD_INT 103
4394: PUSH
4395: LD_INT 105
4397: PUSH
4398: LD_INT 106
4400: PUSH
4401: LD_INT 108
4403: PUSH
4404: LD_INT 112
4406: PUSH
4407: LD_INT 116
4409: PUSH
4410: LD_INT 117
4412: PUSH
4413: LD_INT 118
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: ST_TO_ADDR
4432: GO 6835
4434: LD_INT 8
4436: DOUBLE
4437: EQUAL
4438: IFTRUE 4442
4440: GO 4582
4442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: LD_INT 2
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 5
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: LD_INT 7
4462: PUSH
4463: LD_INT 8
4465: PUSH
4466: LD_INT 11
4468: PUSH
4469: LD_INT 12
4471: PUSH
4472: LD_INT 15
4474: PUSH
4475: LD_INT 16
4477: PUSH
4478: LD_INT 20
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 22
4486: PUSH
4487: LD_INT 23
4489: PUSH
4490: LD_INT 25
4492: PUSH
4493: LD_INT 26
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 31
4501: PUSH
4502: LD_INT 32
4504: PUSH
4505: LD_INT 36
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 101
4532: PUSH
4533: LD_INT 102
4535: PUSH
4536: LD_INT 103
4538: PUSH
4539: LD_INT 105
4541: PUSH
4542: LD_INT 106
4544: PUSH
4545: LD_INT 108
4547: PUSH
4548: LD_INT 109
4550: PUSH
4551: LD_INT 112
4553: PUSH
4554: LD_INT 116
4556: PUSH
4557: LD_INT 117
4559: PUSH
4560: LD_INT 118
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: ST_TO_ADDR
4580: GO 6835
4582: LD_INT 9
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4738
4590: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 5
4604: PUSH
4605: LD_INT 6
4607: PUSH
4608: LD_INT 7
4610: PUSH
4611: LD_INT 8
4613: PUSH
4614: LD_INT 11
4616: PUSH
4617: LD_INT 12
4619: PUSH
4620: LD_INT 15
4622: PUSH
4623: LD_INT 16
4625: PUSH
4626: LD_INT 20
4628: PUSH
4629: LD_INT 21
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_INT 23
4637: PUSH
4638: LD_INT 25
4640: PUSH
4641: LD_INT 26
4643: PUSH
4644: LD_INT 28
4646: PUSH
4647: LD_INT 30
4649: PUSH
4650: LD_INT 31
4652: PUSH
4653: LD_INT 32
4655: PUSH
4656: LD_INT 36
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 101
4684: PUSH
4685: LD_INT 102
4687: PUSH
4688: LD_INT 103
4690: PUSH
4691: LD_INT 105
4693: PUSH
4694: LD_INT 106
4696: PUSH
4697: LD_INT 108
4699: PUSH
4700: LD_INT 109
4702: PUSH
4703: LD_INT 112
4705: PUSH
4706: LD_INT 114
4708: PUSH
4709: LD_INT 116
4711: PUSH
4712: LD_INT 117
4714: PUSH
4715: LD_INT 118
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: ST_TO_ADDR
4736: GO 6835
4738: LD_INT 10
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4942
4746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4747: LD_ADDR_VAR 0 2
4751: PUSH
4752: LD_INT 2
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: LD_INT 6
4763: PUSH
4764: LD_INT 7
4766: PUSH
4767: LD_INT 8
4769: PUSH
4770: LD_INT 9
4772: PUSH
4773: LD_INT 10
4775: PUSH
4776: LD_INT 11
4778: PUSH
4779: LD_INT 12
4781: PUSH
4782: LD_INT 13
4784: PUSH
4785: LD_INT 14
4787: PUSH
4788: LD_INT 15
4790: PUSH
4791: LD_INT 16
4793: PUSH
4794: LD_INT 17
4796: PUSH
4797: LD_INT 18
4799: PUSH
4800: LD_INT 19
4802: PUSH
4803: LD_INT 20
4805: PUSH
4806: LD_INT 21
4808: PUSH
4809: LD_INT 22
4811: PUSH
4812: LD_INT 23
4814: PUSH
4815: LD_INT 24
4817: PUSH
4818: LD_INT 25
4820: PUSH
4821: LD_INT 26
4823: PUSH
4824: LD_INT 28
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 31
4832: PUSH
4833: LD_INT 32
4835: PUSH
4836: LD_INT 36
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 101
4872: PUSH
4873: LD_INT 102
4875: PUSH
4876: LD_INT 103
4878: PUSH
4879: LD_INT 104
4881: PUSH
4882: LD_INT 105
4884: PUSH
4885: LD_INT 106
4887: PUSH
4888: LD_INT 107
4890: PUSH
4891: LD_INT 108
4893: PUSH
4894: LD_INT 109
4896: PUSH
4897: LD_INT 110
4899: PUSH
4900: LD_INT 111
4902: PUSH
4903: LD_INT 112
4905: PUSH
4906: LD_INT 114
4908: PUSH
4909: LD_INT 116
4911: PUSH
4912: LD_INT 117
4914: PUSH
4915: LD_INT 118
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: ST_TO_ADDR
4940: GO 6835
4942: LD_INT 11
4944: DOUBLE
4945: EQUAL
4946: IFTRUE 4950
4948: GO 5154
4950: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 6
4970: PUSH
4971: LD_INT 7
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: LD_INT 9
4979: PUSH
4980: LD_INT 10
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: LD_INT 15
4997: PUSH
4998: LD_INT 16
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: LD_INT 18
5006: PUSH
5007: LD_INT 19
5009: PUSH
5010: LD_INT 20
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: LD_INT 25
5027: PUSH
5028: LD_INT 26
5030: PUSH
5031: LD_INT 28
5033: PUSH
5034: LD_INT 30
5036: PUSH
5037: LD_INT 31
5039: PUSH
5040: LD_INT 32
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 36
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 101
5084: PUSH
5085: LD_INT 102
5087: PUSH
5088: LD_INT 103
5090: PUSH
5091: LD_INT 104
5093: PUSH
5094: LD_INT 105
5096: PUSH
5097: LD_INT 106
5099: PUSH
5100: LD_INT 107
5102: PUSH
5103: LD_INT 108
5105: PUSH
5106: LD_INT 109
5108: PUSH
5109: LD_INT 110
5111: PUSH
5112: LD_INT 111
5114: PUSH
5115: LD_INT 112
5117: PUSH
5118: LD_INT 114
5120: PUSH
5121: LD_INT 116
5123: PUSH
5124: LD_INT 117
5126: PUSH
5127: LD_INT 118
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: ST_TO_ADDR
5152: GO 6835
5154: LD_INT 12
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5382
5162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5163: LD_ADDR_VAR 0 2
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: LD_INT 7
5188: PUSH
5189: LD_INT 8
5191: PUSH
5192: LD_INT 9
5194: PUSH
5195: LD_INT 10
5197: PUSH
5198: LD_INT 11
5200: PUSH
5201: LD_INT 12
5203: PUSH
5204: LD_INT 13
5206: PUSH
5207: LD_INT 14
5209: PUSH
5210: LD_INT 15
5212: PUSH
5213: LD_INT 16
5215: PUSH
5216: LD_INT 17
5218: PUSH
5219: LD_INT 18
5221: PUSH
5222: LD_INT 19
5224: PUSH
5225: LD_INT 20
5227: PUSH
5228: LD_INT 21
5230: PUSH
5231: LD_INT 22
5233: PUSH
5234: LD_INT 23
5236: PUSH
5237: LD_INT 24
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 26
5245: PUSH
5246: LD_INT 27
5248: PUSH
5249: LD_INT 28
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 31
5257: PUSH
5258: LD_INT 32
5260: PUSH
5261: LD_INT 33
5263: PUSH
5264: LD_INT 34
5266: PUSH
5267: LD_INT 36
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 101
5308: PUSH
5309: LD_INT 102
5311: PUSH
5312: LD_INT 103
5314: PUSH
5315: LD_INT 104
5317: PUSH
5318: LD_INT 105
5320: PUSH
5321: LD_INT 106
5323: PUSH
5324: LD_INT 107
5326: PUSH
5327: LD_INT 108
5329: PUSH
5330: LD_INT 109
5332: PUSH
5333: LD_INT 110
5335: PUSH
5336: LD_INT 111
5338: PUSH
5339: LD_INT 112
5341: PUSH
5342: LD_INT 113
5344: PUSH
5345: LD_INT 114
5347: PUSH
5348: LD_INT 116
5350: PUSH
5351: LD_INT 117
5353: PUSH
5354: LD_INT 118
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: ST_TO_ADDR
5380: GO 6835
5382: LD_INT 13
5384: DOUBLE
5385: EQUAL
5386: IFTRUE 5390
5388: GO 5598
5390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 3
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 5
5410: PUSH
5411: LD_INT 8
5413: PUSH
5414: LD_INT 9
5416: PUSH
5417: LD_INT 10
5419: PUSH
5420: LD_INT 11
5422: PUSH
5423: LD_INT 12
5425: PUSH
5426: LD_INT 14
5428: PUSH
5429: LD_INT 15
5431: PUSH
5432: LD_INT 16
5434: PUSH
5435: LD_INT 17
5437: PUSH
5438: LD_INT 18
5440: PUSH
5441: LD_INT 19
5443: PUSH
5444: LD_INT 20
5446: PUSH
5447: LD_INT 21
5449: PUSH
5450: LD_INT 22
5452: PUSH
5453: LD_INT 23
5455: PUSH
5456: LD_INT 24
5458: PUSH
5459: LD_INT 25
5461: PUSH
5462: LD_INT 26
5464: PUSH
5465: LD_INT 27
5467: PUSH
5468: LD_INT 28
5470: PUSH
5471: LD_INT 30
5473: PUSH
5474: LD_INT 31
5476: PUSH
5477: LD_INT 32
5479: PUSH
5480: LD_INT 33
5482: PUSH
5483: LD_INT 34
5485: PUSH
5486: LD_INT 36
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 101
5524: PUSH
5525: LD_INT 102
5527: PUSH
5528: LD_INT 103
5530: PUSH
5531: LD_INT 104
5533: PUSH
5534: LD_INT 105
5536: PUSH
5537: LD_INT 106
5539: PUSH
5540: LD_INT 107
5542: PUSH
5543: LD_INT 108
5545: PUSH
5546: LD_INT 109
5548: PUSH
5549: LD_INT 110
5551: PUSH
5552: LD_INT 111
5554: PUSH
5555: LD_INT 112
5557: PUSH
5558: LD_INT 113
5560: PUSH
5561: LD_INT 114
5563: PUSH
5564: LD_INT 116
5566: PUSH
5567: LD_INT 117
5569: PUSH
5570: LD_INT 118
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: ST_TO_ADDR
5596: GO 6835
5598: LD_INT 14
5600: DOUBLE
5601: EQUAL
5602: IFTRUE 5606
5604: GO 5830
5606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5607: LD_ADDR_VAR 0 2
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 2
5617: PUSH
5618: LD_INT 3
5620: PUSH
5621: LD_INT 4
5623: PUSH
5624: LD_INT 5
5626: PUSH
5627: LD_INT 6
5629: PUSH
5630: LD_INT 7
5632: PUSH
5633: LD_INT 8
5635: PUSH
5636: LD_INT 9
5638: PUSH
5639: LD_INT 10
5641: PUSH
5642: LD_INT 11
5644: PUSH
5645: LD_INT 12
5647: PUSH
5648: LD_INT 13
5650: PUSH
5651: LD_INT 14
5653: PUSH
5654: LD_INT 15
5656: PUSH
5657: LD_INT 16
5659: PUSH
5660: LD_INT 17
5662: PUSH
5663: LD_INT 18
5665: PUSH
5666: LD_INT 19
5668: PUSH
5669: LD_INT 20
5671: PUSH
5672: LD_INT 21
5674: PUSH
5675: LD_INT 22
5677: PUSH
5678: LD_INT 23
5680: PUSH
5681: LD_INT 24
5683: PUSH
5684: LD_INT 25
5686: PUSH
5687: LD_INT 26
5689: PUSH
5690: LD_INT 27
5692: PUSH
5693: LD_INT 28
5695: PUSH
5696: LD_INT 29
5698: PUSH
5699: LD_INT 30
5701: PUSH
5702: LD_INT 31
5704: PUSH
5705: LD_INT 32
5707: PUSH
5708: LD_INT 33
5710: PUSH
5711: LD_INT 34
5713: PUSH
5714: LD_INT 36
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: PUSH
5754: LD_INT 101
5756: PUSH
5757: LD_INT 102
5759: PUSH
5760: LD_INT 103
5762: PUSH
5763: LD_INT 104
5765: PUSH
5766: LD_INT 105
5768: PUSH
5769: LD_INT 106
5771: PUSH
5772: LD_INT 107
5774: PUSH
5775: LD_INT 108
5777: PUSH
5778: LD_INT 109
5780: PUSH
5781: LD_INT 110
5783: PUSH
5784: LD_INT 111
5786: PUSH
5787: LD_INT 112
5789: PUSH
5790: LD_INT 113
5792: PUSH
5793: LD_INT 114
5795: PUSH
5796: LD_INT 116
5798: PUSH
5799: LD_INT 117
5801: PUSH
5802: LD_INT 118
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: ST_TO_ADDR
5828: GO 6835
5830: LD_INT 15
5832: DOUBLE
5833: EQUAL
5834: IFTRUE 5838
5836: GO 6062
5838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_INT 1
5846: PUSH
5847: LD_INT 2
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: LD_INT 4
5855: PUSH
5856: LD_INT 5
5858: PUSH
5859: LD_INT 6
5861: PUSH
5862: LD_INT 7
5864: PUSH
5865: LD_INT 8
5867: PUSH
5868: LD_INT 9
5870: PUSH
5871: LD_INT 10
5873: PUSH
5874: LD_INT 11
5876: PUSH
5877: LD_INT 12
5879: PUSH
5880: LD_INT 13
5882: PUSH
5883: LD_INT 14
5885: PUSH
5886: LD_INT 15
5888: PUSH
5889: LD_INT 16
5891: PUSH
5892: LD_INT 17
5894: PUSH
5895: LD_INT 18
5897: PUSH
5898: LD_INT 19
5900: PUSH
5901: LD_INT 20
5903: PUSH
5904: LD_INT 21
5906: PUSH
5907: LD_INT 22
5909: PUSH
5910: LD_INT 23
5912: PUSH
5913: LD_INT 24
5915: PUSH
5916: LD_INT 25
5918: PUSH
5919: LD_INT 26
5921: PUSH
5922: LD_INT 27
5924: PUSH
5925: LD_INT 28
5927: PUSH
5928: LD_INT 29
5930: PUSH
5931: LD_INT 30
5933: PUSH
5934: LD_INT 31
5936: PUSH
5937: LD_INT 32
5939: PUSH
5940: LD_INT 33
5942: PUSH
5943: LD_INT 34
5945: PUSH
5946: LD_INT 36
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 101
5988: PUSH
5989: LD_INT 102
5991: PUSH
5992: LD_INT 103
5994: PUSH
5995: LD_INT 104
5997: PUSH
5998: LD_INT 105
6000: PUSH
6001: LD_INT 106
6003: PUSH
6004: LD_INT 107
6006: PUSH
6007: LD_INT 108
6009: PUSH
6010: LD_INT 109
6012: PUSH
6013: LD_INT 110
6015: PUSH
6016: LD_INT 111
6018: PUSH
6019: LD_INT 112
6021: PUSH
6022: LD_INT 113
6024: PUSH
6025: LD_INT 114
6027: PUSH
6028: LD_INT 116
6030: PUSH
6031: LD_INT 117
6033: PUSH
6034: LD_INT 118
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: ST_TO_ADDR
6060: GO 6835
6062: LD_INT 16
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6206
6070: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6071: LD_ADDR_VAR 0 2
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: LD_INT 4
6081: PUSH
6082: LD_INT 5
6084: PUSH
6085: LD_INT 7
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 15
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: LD_INT 20
6102: PUSH
6103: LD_INT 21
6105: PUSH
6106: LD_INT 22
6108: PUSH
6109: LD_INT 23
6111: PUSH
6112: LD_INT 25
6114: PUSH
6115: LD_INT 26
6117: PUSH
6118: LD_INT 30
6120: PUSH
6121: LD_INT 31
6123: PUSH
6124: LD_INT 32
6126: PUSH
6127: LD_INT 33
6129: PUSH
6130: LD_INT 34
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 101
6156: PUSH
6157: LD_INT 102
6159: PUSH
6160: LD_INT 103
6162: PUSH
6163: LD_INT 106
6165: PUSH
6166: LD_INT 108
6168: PUSH
6169: LD_INT 112
6171: PUSH
6172: LD_INT 113
6174: PUSH
6175: LD_INT 114
6177: PUSH
6178: LD_INT 116
6180: PUSH
6181: LD_INT 117
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: ST_TO_ADDR
6204: GO 6835
6206: LD_INT 17
6208: DOUBLE
6209: EQUAL
6210: IFTRUE 6214
6212: GO 6438
6214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6215: LD_ADDR_VAR 0 2
6219: PUSH
6220: LD_INT 1
6222: PUSH
6223: LD_INT 2
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: LD_INT 6
6237: PUSH
6238: LD_INT 7
6240: PUSH
6241: LD_INT 8
6243: PUSH
6244: LD_INT 9
6246: PUSH
6247: LD_INT 10
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 13
6258: PUSH
6259: LD_INT 14
6261: PUSH
6262: LD_INT 15
6264: PUSH
6265: LD_INT 16
6267: PUSH
6268: LD_INT 17
6270: PUSH
6271: LD_INT 18
6273: PUSH
6274: LD_INT 19
6276: PUSH
6277: LD_INT 20
6279: PUSH
6280: LD_INT 21
6282: PUSH
6283: LD_INT 22
6285: PUSH
6286: LD_INT 23
6288: PUSH
6289: LD_INT 24
6291: PUSH
6292: LD_INT 25
6294: PUSH
6295: LD_INT 26
6297: PUSH
6298: LD_INT 27
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 29
6306: PUSH
6307: LD_INT 30
6309: PUSH
6310: LD_INT 31
6312: PUSH
6313: LD_INT 32
6315: PUSH
6316: LD_INT 33
6318: PUSH
6319: LD_INT 34
6321: PUSH
6322: LD_INT 36
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 101
6364: PUSH
6365: LD_INT 102
6367: PUSH
6368: LD_INT 103
6370: PUSH
6371: LD_INT 104
6373: PUSH
6374: LD_INT 105
6376: PUSH
6377: LD_INT 106
6379: PUSH
6380: LD_INT 107
6382: PUSH
6383: LD_INT 108
6385: PUSH
6386: LD_INT 109
6388: PUSH
6389: LD_INT 110
6391: PUSH
6392: LD_INT 111
6394: PUSH
6395: LD_INT 112
6397: PUSH
6398: LD_INT 113
6400: PUSH
6401: LD_INT 114
6403: PUSH
6404: LD_INT 116
6406: PUSH
6407: LD_INT 117
6409: PUSH
6410: LD_INT 118
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: ST_TO_ADDR
6436: GO 6835
6438: LD_INT 18
6440: DOUBLE
6441: EQUAL
6442: IFTRUE 6446
6444: GO 6594
6446: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: LD_INT 7
6463: PUSH
6464: LD_INT 11
6466: PUSH
6467: LD_INT 12
6469: PUSH
6470: LD_INT 15
6472: PUSH
6473: LD_INT 16
6475: PUSH
6476: LD_INT 20
6478: PUSH
6479: LD_INT 21
6481: PUSH
6482: LD_INT 22
6484: PUSH
6485: LD_INT 23
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: LD_INT 30
6496: PUSH
6497: LD_INT 31
6499: PUSH
6500: LD_INT 32
6502: PUSH
6503: LD_INT 33
6505: PUSH
6506: LD_INT 34
6508: PUSH
6509: LD_INT 35
6511: PUSH
6512: LD_INT 36
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 101
6540: PUSH
6541: LD_INT 102
6543: PUSH
6544: LD_INT 103
6546: PUSH
6547: LD_INT 106
6549: PUSH
6550: LD_INT 108
6552: PUSH
6553: LD_INT 112
6555: PUSH
6556: LD_INT 113
6558: PUSH
6559: LD_INT 114
6561: PUSH
6562: LD_INT 115
6564: PUSH
6565: LD_INT 116
6567: PUSH
6568: LD_INT 117
6570: PUSH
6571: LD_INT 118
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: ST_TO_ADDR
6592: GO 6835
6594: LD_INT 19
6596: DOUBLE
6597: EQUAL
6598: IFTRUE 6602
6600: GO 6834
6602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: LD_INT 3
6616: PUSH
6617: LD_INT 4
6619: PUSH
6620: LD_INT 5
6622: PUSH
6623: LD_INT 6
6625: PUSH
6626: LD_INT 7
6628: PUSH
6629: LD_INT 8
6631: PUSH
6632: LD_INT 9
6634: PUSH
6635: LD_INT 10
6637: PUSH
6638: LD_INT 11
6640: PUSH
6641: LD_INT 12
6643: PUSH
6644: LD_INT 13
6646: PUSH
6647: LD_INT 14
6649: PUSH
6650: LD_INT 15
6652: PUSH
6653: LD_INT 16
6655: PUSH
6656: LD_INT 17
6658: PUSH
6659: LD_INT 18
6661: PUSH
6662: LD_INT 19
6664: PUSH
6665: LD_INT 20
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 22
6673: PUSH
6674: LD_INT 23
6676: PUSH
6677: LD_INT 24
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: LD_INT 26
6685: PUSH
6686: LD_INT 27
6688: PUSH
6689: LD_INT 28
6691: PUSH
6692: LD_INT 29
6694: PUSH
6695: LD_INT 30
6697: PUSH
6698: LD_INT 31
6700: PUSH
6701: LD_INT 32
6703: PUSH
6704: LD_INT 33
6706: PUSH
6707: LD_INT 34
6709: PUSH
6710: LD_INT 35
6712: PUSH
6713: LD_INT 36
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 101
6756: PUSH
6757: LD_INT 102
6759: PUSH
6760: LD_INT 103
6762: PUSH
6763: LD_INT 104
6765: PUSH
6766: LD_INT 105
6768: PUSH
6769: LD_INT 106
6771: PUSH
6772: LD_INT 107
6774: PUSH
6775: LD_INT 108
6777: PUSH
6778: LD_INT 109
6780: PUSH
6781: LD_INT 110
6783: PUSH
6784: LD_INT 111
6786: PUSH
6787: LD_INT 112
6789: PUSH
6790: LD_INT 113
6792: PUSH
6793: LD_INT 114
6795: PUSH
6796: LD_INT 115
6798: PUSH
6799: LD_INT 116
6801: PUSH
6802: LD_INT 117
6804: PUSH
6805: LD_INT 118
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: ST_TO_ADDR
6832: GO 6835
6834: POP
// end else
6835: GO 7066
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 3
6850: PUSH
6851: LD_INT 4
6853: PUSH
6854: LD_INT 5
6856: PUSH
6857: LD_INT 6
6859: PUSH
6860: LD_INT 7
6862: PUSH
6863: LD_INT 8
6865: PUSH
6866: LD_INT 9
6868: PUSH
6869: LD_INT 10
6871: PUSH
6872: LD_INT 11
6874: PUSH
6875: LD_INT 12
6877: PUSH
6878: LD_INT 13
6880: PUSH
6881: LD_INT 14
6883: PUSH
6884: LD_INT 15
6886: PUSH
6887: LD_INT 16
6889: PUSH
6890: LD_INT 17
6892: PUSH
6893: LD_INT 18
6895: PUSH
6896: LD_INT 19
6898: PUSH
6899: LD_INT 20
6901: PUSH
6902: LD_INT 21
6904: PUSH
6905: LD_INT 22
6907: PUSH
6908: LD_INT 23
6910: PUSH
6911: LD_INT 24
6913: PUSH
6914: LD_INT 25
6916: PUSH
6917: LD_INT 26
6919: PUSH
6920: LD_INT 27
6922: PUSH
6923: LD_INT 28
6925: PUSH
6926: LD_INT 29
6928: PUSH
6929: LD_INT 30
6931: PUSH
6932: LD_INT 31
6934: PUSH
6935: LD_INT 32
6937: PUSH
6938: LD_INT 33
6940: PUSH
6941: LD_INT 34
6943: PUSH
6944: LD_INT 35
6946: PUSH
6947: LD_INT 36
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 101
6990: PUSH
6991: LD_INT 102
6993: PUSH
6994: LD_INT 103
6996: PUSH
6997: LD_INT 104
6999: PUSH
7000: LD_INT 105
7002: PUSH
7003: LD_INT 106
7005: PUSH
7006: LD_INT 107
7008: PUSH
7009: LD_INT 108
7011: PUSH
7012: LD_INT 109
7014: PUSH
7015: LD_INT 110
7017: PUSH
7018: LD_INT 111
7020: PUSH
7021: LD_INT 112
7023: PUSH
7024: LD_INT 113
7026: PUSH
7027: LD_INT 114
7029: PUSH
7030: LD_INT 115
7032: PUSH
7033: LD_INT 116
7035: PUSH
7036: LD_INT 117
7038: PUSH
7039: LD_INT 118
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: ST_TO_ADDR
// if result then
7066: LD_VAR 0 2
7070: IFFALSE 7856
// begin normal :=  ;
7072: LD_ADDR_VAR 0 5
7076: PUSH
7077: LD_STRING 
7079: ST_TO_ADDR
// hardcore :=  ;
7080: LD_ADDR_VAR 0 6
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// active :=  ;
7088: LD_ADDR_VAR 0 7
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// for i = 1 to normalCounter do
7096: LD_ADDR_VAR 0 8
7100: PUSH
7101: DOUBLE
7102: LD_INT 1
7104: DEC
7105: ST_TO_ADDR
7106: LD_EXP 8
7110: PUSH
7111: FOR_TO
7112: IFFALSE 7213
// begin tmp := 0 ;
7114: LD_ADDR_VAR 0 3
7118: PUSH
7119: LD_STRING 0
7121: ST_TO_ADDR
// if result [ 1 ] then
7122: LD_VAR 0 2
7126: PUSH
7127: LD_INT 1
7129: ARRAY
7130: IFFALSE 7195
// if result [ 1 ] [ 1 ] = i then
7132: LD_VAR 0 2
7136: PUSH
7137: LD_INT 1
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PUSH
7145: LD_VAR 0 8
7149: EQUAL
7150: IFFALSE 7195
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: LD_INT 1
7164: PPUSH
7165: LD_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: PPUSH
7174: LD_INT 1
7176: PPUSH
7177: CALL_OW 3
7181: PPUSH
7182: CALL_OW 1
7186: ST_TO_ADDR
// tmp := 1 ;
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: LD_STRING 1
7194: ST_TO_ADDR
// end ; normal := normal & tmp ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 5
7204: PUSH
7205: LD_VAR 0 3
7209: STR
7210: ST_TO_ADDR
// end ;
7211: GO 7111
7213: POP
7214: POP
// for i = 1 to hardcoreCounter do
7215: LD_ADDR_VAR 0 8
7219: PUSH
7220: DOUBLE
7221: LD_INT 1
7223: DEC
7224: ST_TO_ADDR
7225: LD_EXP 9
7229: PUSH
7230: FOR_TO
7231: IFFALSE 7336
// begin tmp := 0 ;
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: LD_STRING 0
7240: ST_TO_ADDR
// if result [ 2 ] then
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 2
7248: ARRAY
7249: IFFALSE 7318
// if result [ 2 ] [ 1 ] = 100 + i then
7251: LD_VAR 0 2
7255: PUSH
7256: LD_INT 2
7258: ARRAY
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PUSH
7264: LD_INT 100
7266: PUSH
7267: LD_VAR 0 8
7271: PLUS
7272: EQUAL
7273: IFFALSE 7318
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7275: LD_ADDR_VAR 0 2
7279: PUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_INT 2
7287: PPUSH
7288: LD_VAR 0 2
7292: PUSH
7293: LD_INT 2
7295: ARRAY
7296: PPUSH
7297: LD_INT 1
7299: PPUSH
7300: CALL_OW 3
7304: PPUSH
7305: CALL_OW 1
7309: ST_TO_ADDR
// tmp := 1 ;
7310: LD_ADDR_VAR 0 3
7314: PUSH
7315: LD_STRING 1
7317: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7318: LD_ADDR_VAR 0 6
7322: PUSH
7323: LD_VAR 0 6
7327: PUSH
7328: LD_VAR 0 3
7332: STR
7333: ST_TO_ADDR
// end ;
7334: GO 7230
7336: POP
7337: POP
// if isGameLoad then
7338: LD_VAR 0 1
7342: IFFALSE 7817
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7344: LD_ADDR_VAR 0 4
7348: PUSH
7349: LD_EXP 12
7353: PUSH
7354: LD_EXP 11
7358: PUSH
7359: LD_EXP 13
7363: PUSH
7364: LD_EXP 10
7368: PUSH
7369: LD_EXP 14
7373: PUSH
7374: LD_EXP 15
7378: PUSH
7379: LD_EXP 16
7383: PUSH
7384: LD_EXP 17
7388: PUSH
7389: LD_EXP 18
7393: PUSH
7394: LD_EXP 19
7398: PUSH
7399: LD_EXP 20
7403: PUSH
7404: LD_EXP 21
7408: PUSH
7409: LD_EXP 22
7413: PUSH
7414: LD_EXP 23
7418: PUSH
7419: LD_EXP 31
7423: PUSH
7424: LD_EXP 32
7428: PUSH
7429: LD_EXP 33
7433: PUSH
7434: LD_EXP 34
7438: PUSH
7439: LD_EXP 36
7443: PUSH
7444: LD_EXP 37
7448: PUSH
7449: LD_EXP 38
7453: PUSH
7454: LD_EXP 41
7458: PUSH
7459: LD_EXP 43
7463: PUSH
7464: LD_EXP 44
7468: PUSH
7469: LD_EXP 45
7473: PUSH
7474: LD_EXP 47
7478: PUSH
7479: LD_EXP 48
7483: PUSH
7484: LD_EXP 51
7488: PUSH
7489: LD_EXP 52
7493: PUSH
7494: LD_EXP 53
7498: PUSH
7499: LD_EXP 54
7503: PUSH
7504: LD_EXP 55
7508: PUSH
7509: LD_EXP 56
7513: PUSH
7514: LD_EXP 57
7518: PUSH
7519: LD_EXP 58
7523: PUSH
7524: LD_EXP 59
7528: PUSH
7529: LD_EXP 24
7533: PUSH
7534: LD_EXP 25
7538: PUSH
7539: LD_EXP 28
7543: PUSH
7544: LD_EXP 29
7548: PUSH
7549: LD_EXP 30
7553: PUSH
7554: LD_EXP 26
7558: PUSH
7559: LD_EXP 27
7563: PUSH
7564: LD_EXP 35
7568: PUSH
7569: LD_EXP 39
7573: PUSH
7574: LD_EXP 40
7578: PUSH
7579: LD_EXP 42
7583: PUSH
7584: LD_EXP 46
7588: PUSH
7589: LD_EXP 49
7593: PUSH
7594: LD_EXP 50
7598: PUSH
7599: LD_EXP 60
7603: PUSH
7604: LD_EXP 61
7608: PUSH
7609: LD_EXP 62
7613: PUSH
7614: LD_EXP 63
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: ST_TO_ADDR
// tmp :=  ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_STRING 
7682: ST_TO_ADDR
// for i = 1 to normalCounter do
7683: LD_ADDR_VAR 0 8
7687: PUSH
7688: DOUBLE
7689: LD_INT 1
7691: DEC
7692: ST_TO_ADDR
7693: LD_EXP 8
7697: PUSH
7698: FOR_TO
7699: IFFALSE 7735
// begin if flags [ i ] then
7701: LD_VAR 0 4
7705: PUSH
7706: LD_VAR 0 8
7710: ARRAY
7711: IFFALSE 7733
// tmp := tmp & i & ; ;
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: LD_VAR 0 3
7722: PUSH
7723: LD_VAR 0 8
7727: STR
7728: PUSH
7729: LD_STRING ;
7731: STR
7732: ST_TO_ADDR
// end ;
7733: GO 7698
7735: POP
7736: POP
// for i = 1 to hardcoreCounter do
7737: LD_ADDR_VAR 0 8
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_EXP 9
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7799
// begin if flags [ normalCounter + i ] then
7755: LD_VAR 0 4
7759: PUSH
7760: LD_EXP 8
7764: PUSH
7765: LD_VAR 0 8
7769: PLUS
7770: ARRAY
7771: IFFALSE 7797
// tmp := tmp & ( 100 + i ) & ; ;
7773: LD_ADDR_VAR 0 3
7777: PUSH
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 100
7785: PUSH
7786: LD_VAR 0 8
7790: PLUS
7791: STR
7792: PUSH
7793: LD_STRING ;
7795: STR
7796: ST_TO_ADDR
// end ;
7797: GO 7752
7799: POP
7800: POP
// if tmp then
7801: LD_VAR 0 3
7805: IFFALSE 7817
// active := tmp ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 3
7816: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7817: LD_STRING getStreamItemsFromMission("
7819: PUSH
7820: LD_VAR 0 5
7824: STR
7825: PUSH
7826: LD_STRING ","
7828: STR
7829: PUSH
7830: LD_VAR 0 6
7834: STR
7835: PUSH
7836: LD_STRING ","
7838: STR
7839: PUSH
7840: LD_VAR 0 7
7844: STR
7845: PUSH
7846: LD_STRING ")
7848: STR
7849: PPUSH
7850: CALL_OW 559
// end else
7854: GO 7863
// ToLua ( getStreamItemsFromMission("","","") ) ;
7856: LD_STRING getStreamItemsFromMission("","","")
7858: PPUSH
7859: CALL_OW 559
// end ;
7863: LD_VAR 0 2
7867: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7868: LD_EXP 7
7872: PUSH
7873: LD_EXP 12
7877: AND
7878: IFFALSE 8002
7880: GO 7882
7882: DISABLE
7883: LD_INT 0
7885: PPUSH
7886: PPUSH
// begin enable ;
7887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7888: LD_ADDR_VAR 0 2
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_OWVAR 2
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 34
7910: PUSH
7911: LD_INT 7
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 34
7920: PUSH
7921: LD_INT 45
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 34
7930: PUSH
7931: LD_INT 28
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 34
7940: PUSH
7941: LD_INT 47
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: ST_TO_ADDR
// if not tmp then
7964: LD_VAR 0 2
7968: NOT
7969: IFFALSE 7973
// exit ;
7971: GO 8002
// for i in tmp do
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_VAR 0 2
7982: PUSH
7983: FOR_IN
7984: IFFALSE 8000
// begin SetLives ( i , 0 ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: CALL_OW 234
// end ;
7998: GO 7983
8000: POP
8001: POP
// end ;
8002: PPOPN 2
8004: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8005: LD_EXP 7
8009: PUSH
8010: LD_EXP 13
8014: AND
8015: IFFALSE 8099
8017: GO 8019
8019: DISABLE
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
// begin enable ;
8024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_OWVAR 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 32
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: ST_TO_ADDR
// if not tmp then
8061: LD_VAR 0 2
8065: NOT
8066: IFFALSE 8070
// exit ;
8068: GO 8099
// for i in tmp do
8070: LD_ADDR_VAR 0 1
8074: PUSH
8075: LD_VAR 0 2
8079: PUSH
8080: FOR_IN
8081: IFFALSE 8097
// begin SetLives ( i , 0 ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: LD_INT 0
8090: PPUSH
8091: CALL_OW 234
// end ;
8095: GO 8080
8097: POP
8098: POP
// end ;
8099: PPOPN 2
8101: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8102: LD_EXP 7
8106: PUSH
8107: LD_EXP 10
8111: AND
8112: IFFALSE 8205
8114: GO 8116
8116: DISABLE
8117: LD_INT 0
8119: PPUSH
// begin enable ;
8120: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_INT 22
8128: PUSH
8129: LD_OWVAR 2
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 25
8143: PUSH
8144: LD_INT 5
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 25
8153: PUSH
8154: LD_INT 9
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 25
8163: PUSH
8164: LD_INT 8
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 69
8185: PUSH
8186: FOR_IN
8187: IFFALSE 8203
// begin SetClass ( i , 1 ) ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 336
// end ;
8201: GO 8186
8203: POP
8204: POP
// end ;
8205: PPOPN 1
8207: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8208: LD_EXP 7
8212: PUSH
8213: LD_EXP 11
8217: AND
8218: PUSH
8219: LD_OWVAR 65
8223: PUSH
8224: LD_INT 7
8226: LESS
8227: AND
8228: IFFALSE 8242
8230: GO 8232
8232: DISABLE
// begin enable ;
8233: ENABLE
// game_speed := 7 ;
8234: LD_ADDR_OWVAR 65
8238: PUSH
8239: LD_INT 7
8241: ST_TO_ADDR
// end ;
8242: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8243: LD_EXP 7
8247: PUSH
8248: LD_EXP 14
8252: AND
8253: IFFALSE 8455
8255: GO 8257
8257: DISABLE
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8263: LD_ADDR_VAR 0 3
8267: PUSH
8268: LD_INT 81
8270: PUSH
8271: LD_OWVAR 2
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 69
8298: ST_TO_ADDR
// if not tmp then
8299: LD_VAR 0 3
8303: NOT
8304: IFFALSE 8308
// exit ;
8306: GO 8455
// if tmp > 5 then
8308: LD_VAR 0 3
8312: PUSH
8313: LD_INT 5
8315: GREATER
8316: IFFALSE 8328
// k := 5 else
8318: LD_ADDR_VAR 0 2
8322: PUSH
8323: LD_INT 5
8325: ST_TO_ADDR
8326: GO 8338
// k := tmp ;
8328: LD_ADDR_VAR 0 2
8332: PUSH
8333: LD_VAR 0 3
8337: ST_TO_ADDR
// for i := 1 to k do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 2
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8453
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_VAR 0 1
8365: ARRAY
8366: PPUSH
8367: LD_VAR 0 1
8371: PUSH
8372: LD_INT 4
8374: MOD
8375: PUSH
8376: LD_INT 1
8378: PLUS
8379: PPUSH
8380: CALL_OW 259
8384: PUSH
8385: LD_INT 10
8387: LESS
8388: IFFALSE 8451
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8390: LD_VAR 0 3
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 1
8405: PUSH
8406: LD_INT 4
8408: MOD
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: PPUSH
8414: LD_VAR 0 3
8418: PUSH
8419: LD_VAR 0 1
8423: ARRAY
8424: PPUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_INT 4
8432: MOD
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: PPUSH
8438: CALL_OW 259
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: PPUSH
8447: CALL_OW 237
8451: GO 8353
8453: POP
8454: POP
// end ;
8455: PPOPN 3
8457: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8458: LD_EXP 7
8462: PUSH
8463: LD_EXP 15
8467: AND
8468: IFFALSE 8488
8470: GO 8472
8472: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8473: LD_INT 4
8475: PPUSH
8476: LD_OWVAR 2
8480: PPUSH
8481: LD_INT 0
8483: PPUSH
8484: CALL_OW 324
8488: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8489: LD_EXP 7
8493: PUSH
8494: LD_EXP 44
8498: AND
8499: IFFALSE 8519
8501: GO 8503
8503: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8504: LD_INT 19
8506: PPUSH
8507: LD_OWVAR 2
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 324
8519: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8520: LD_EXP 7
8524: PUSH
8525: LD_EXP 16
8529: AND
8530: IFFALSE 8632
8532: GO 8534
8534: DISABLE
8535: LD_INT 0
8537: PPUSH
8538: PPUSH
// begin enable ;
8539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8540: LD_ADDR_VAR 0 2
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_OWVAR 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 34
8562: PUSH
8563: LD_INT 11
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 34
8572: PUSH
8573: LD_INT 30
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 69
8593: ST_TO_ADDR
// if not tmp then
8594: LD_VAR 0 2
8598: NOT
8599: IFFALSE 8603
// exit ;
8601: GO 8632
// for i in tmp do
8603: LD_ADDR_VAR 0 1
8607: PUSH
8608: LD_VAR 0 2
8612: PUSH
8613: FOR_IN
8614: IFFALSE 8630
// begin SetLives ( i , 0 ) ;
8616: LD_VAR 0 1
8620: PPUSH
8621: LD_INT 0
8623: PPUSH
8624: CALL_OW 234
// end ;
8628: GO 8613
8630: POP
8631: POP
// end ;
8632: PPOPN 2
8634: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8635: LD_EXP 7
8639: PUSH
8640: LD_EXP 17
8644: AND
8645: IFFALSE 8665
8647: GO 8649
8649: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8650: LD_INT 32
8652: PPUSH
8653: LD_OWVAR 2
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 324
8665: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8666: LD_EXP 7
8670: PUSH
8671: LD_EXP 18
8675: AND
8676: IFFALSE 8857
8678: GO 8680
8680: DISABLE
8681: LD_INT 0
8683: PPUSH
8684: PPUSH
8685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_OWVAR 2
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: LD_INT 3
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PPUSH
8717: CALL_OW 69
8721: ST_TO_ADDR
// if not tmp then
8722: LD_VAR 0 2
8726: NOT
8727: IFFALSE 8731
// exit ;
8729: GO 8857
// side := 0 ;
8731: LD_ADDR_VAR 0 3
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// for i := 1 to 8 do
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: DOUBLE
8745: LD_INT 1
8747: DEC
8748: ST_TO_ADDR
8749: LD_INT 8
8751: PUSH
8752: FOR_TO
8753: IFFALSE 8801
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8755: LD_OWVAR 2
8759: PUSH
8760: LD_VAR 0 1
8764: NONEQUAL
8765: PUSH
8766: LD_OWVAR 2
8770: PPUSH
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 2
8783: EQUAL
8784: AND
8785: IFFALSE 8799
// begin side := i ;
8787: LD_ADDR_VAR 0 3
8791: PUSH
8792: LD_VAR 0 1
8796: ST_TO_ADDR
// break ;
8797: GO 8801
// end ;
8799: GO 8752
8801: POP
8802: POP
// if not side then
8803: LD_VAR 0 3
8807: NOT
8808: IFFALSE 8812
// exit ;
8810: GO 8857
// for i := 1 to tmp do
8812: LD_ADDR_VAR 0 1
8816: PUSH
8817: DOUBLE
8818: LD_INT 1
8820: DEC
8821: ST_TO_ADDR
8822: LD_VAR 0 2
8826: PUSH
8827: FOR_TO
8828: IFFALSE 8855
// if Prob ( 60 ) then
8830: LD_INT 60
8832: PPUSH
8833: CALL_OW 13
8837: IFFALSE 8853
// SetSide ( i , side ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_VAR 0 3
8848: PPUSH
8849: CALL_OW 235
8853: GO 8827
8855: POP
8856: POP
// end ;
8857: PPOPN 3
8859: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8860: LD_EXP 7
8864: PUSH
8865: LD_EXP 20
8869: AND
8870: IFFALSE 8989
8872: GO 8874
8874: DISABLE
8875: LD_INT 0
8877: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_OWVAR 2
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 21
8897: PUSH
8898: LD_INT 1
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 23
8910: PUSH
8911: LD_INT 0
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: PUSH
8932: FOR_IN
8933: IFFALSE 8987
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8935: LD_VAR 0 1
8939: PPUSH
8940: CALL_OW 257
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 3
8953: PUSH
8954: LD_INT 4
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: IN
8963: IFFALSE 8985
// SetClass ( un , rand ( 1 , 4 ) ) ;
8965: LD_VAR 0 1
8969: PPUSH
8970: LD_INT 1
8972: PPUSH
8973: LD_INT 4
8975: PPUSH
8976: CALL_OW 12
8980: PPUSH
8981: CALL_OW 336
8985: GO 8932
8987: POP
8988: POP
// end ;
8989: PPOPN 1
8991: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8992: LD_EXP 7
8996: PUSH
8997: LD_EXP 19
9001: AND
9002: IFFALSE 9081
9004: GO 9006
9006: DISABLE
9007: LD_INT 0
9009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9010: LD_ADDR_VAR 0 1
9014: PUSH
9015: LD_INT 22
9017: PUSH
9018: LD_OWVAR 2
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 21
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: ST_TO_ADDR
// if not tmp then
9046: LD_VAR 0 1
9050: NOT
9051: IFFALSE 9055
// exit ;
9053: GO 9081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9055: LD_VAR 0 1
9059: PUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_VAR 0 1
9067: PPUSH
9068: CALL_OW 12
9072: ARRAY
9073: PPUSH
9074: LD_INT 100
9076: PPUSH
9077: CALL_OW 234
// end ;
9081: PPOPN 1
9083: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9084: LD_EXP 7
9088: PUSH
9089: LD_EXP 21
9093: AND
9094: IFFALSE 9192
9096: GO 9098
9098: DISABLE
9099: LD_INT 0
9101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9102: LD_ADDR_VAR 0 1
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_OWVAR 2
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 21
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 69
9137: ST_TO_ADDR
// if not tmp then
9138: LD_VAR 0 1
9142: NOT
9143: IFFALSE 9147
// exit ;
9145: GO 9192
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9147: LD_VAR 0 1
9151: PUSH
9152: LD_INT 1
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 12
9164: ARRAY
9165: PPUSH
9166: LD_INT 1
9168: PPUSH
9169: LD_INT 4
9171: PPUSH
9172: CALL_OW 12
9176: PPUSH
9177: LD_INT 3000
9179: PPUSH
9180: LD_INT 9000
9182: PPUSH
9183: CALL_OW 12
9187: PPUSH
9188: CALL_OW 492
// end ;
9192: PPOPN 1
9194: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9195: LD_EXP 7
9199: PUSH
9200: LD_EXP 22
9204: AND
9205: IFFALSE 9225
9207: GO 9209
9209: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9210: LD_INT 1
9212: PPUSH
9213: LD_OWVAR 2
9217: PPUSH
9218: LD_INT 0
9220: PPUSH
9221: CALL_OW 324
9225: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9226: LD_EXP 7
9230: PUSH
9231: LD_EXP 23
9235: AND
9236: IFFALSE 9319
9238: GO 9240
9240: DISABLE
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9245: LD_ADDR_VAR 0 2
9249: PUSH
9250: LD_INT 22
9252: PUSH
9253: LD_OWVAR 2
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 21
9264: PUSH
9265: LD_INT 3
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: ST_TO_ADDR
// if not tmp then
9281: LD_VAR 0 2
9285: NOT
9286: IFFALSE 9290
// exit ;
9288: GO 9319
// for i in tmp do
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: LD_VAR 0 2
9299: PUSH
9300: FOR_IN
9301: IFFALSE 9317
// SetBLevel ( i , 10 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 10
9310: PPUSH
9311: CALL_OW 241
9315: GO 9300
9317: POP
9318: POP
// end ;
9319: PPOPN 2
9321: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9322: LD_EXP 7
9326: PUSH
9327: LD_EXP 24
9331: AND
9332: IFFALSE 9443
9334: GO 9336
9336: DISABLE
9337: LD_INT 0
9339: PPUSH
9340: PPUSH
9341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_OWVAR 2
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 69
9377: ST_TO_ADDR
// if not tmp then
9378: LD_VAR 0 3
9382: NOT
9383: IFFALSE 9387
// exit ;
9385: GO 9443
// un := tmp [ rand ( 1 , tmp ) ] ;
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_VAR 0 3
9396: PUSH
9397: LD_INT 1
9399: PPUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: CALL_OW 12
9409: ARRAY
9410: ST_TO_ADDR
// if Crawls ( un ) then
9411: LD_VAR 0 2
9415: PPUSH
9416: CALL_OW 318
9420: IFFALSE 9431
// ComWalk ( un ) ;
9422: LD_VAR 0 2
9426: PPUSH
9427: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9431: LD_VAR 0 2
9435: PPUSH
9436: LD_INT 5
9438: PPUSH
9439: CALL_OW 336
// end ;
9443: PPOPN 3
9445: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9446: LD_EXP 7
9450: PUSH
9451: LD_EXP 25
9455: AND
9456: PUSH
9457: LD_OWVAR 67
9461: PUSH
9462: LD_INT 4
9464: LESS
9465: AND
9466: IFFALSE 9485
9468: GO 9470
9470: DISABLE
// begin Difficulty := Difficulty + 1 ;
9471: LD_ADDR_OWVAR 67
9475: PUSH
9476: LD_OWVAR 67
9480: PUSH
9481: LD_INT 1
9483: PLUS
9484: ST_TO_ADDR
// end ;
9485: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9486: LD_EXP 7
9490: PUSH
9491: LD_EXP 26
9495: AND
9496: IFFALSE 9599
9498: GO 9500
9500: DISABLE
9501: LD_INT 0
9503: PPUSH
// begin for i := 1 to 5 do
9504: LD_ADDR_VAR 0 1
9508: PUSH
9509: DOUBLE
9510: LD_INT 1
9512: DEC
9513: ST_TO_ADDR
9514: LD_INT 5
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9597
// begin uc_nation := nation_nature ;
9520: LD_ADDR_OWVAR 21
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// uc_side := 0 ;
9528: LD_ADDR_OWVAR 20
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9536: LD_ADDR_OWVAR 29
9540: PUSH
9541: LD_INT 12
9543: PUSH
9544: LD_INT 12
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: ST_TO_ADDR
// hc_agressivity := 20 ;
9551: LD_ADDR_OWVAR 35
9555: PUSH
9556: LD_INT 20
9558: ST_TO_ADDR
// hc_class := class_tiger ;
9559: LD_ADDR_OWVAR 28
9563: PUSH
9564: LD_INT 14
9566: ST_TO_ADDR
// hc_gallery :=  ;
9567: LD_ADDR_OWVAR 33
9571: PUSH
9572: LD_STRING 
9574: ST_TO_ADDR
// hc_name :=  ;
9575: LD_ADDR_OWVAR 26
9579: PUSH
9580: LD_STRING 
9582: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9583: CALL_OW 44
9587: PPUSH
9588: LD_INT 0
9590: PPUSH
9591: CALL_OW 51
// end ;
9595: GO 9517
9597: POP
9598: POP
// end ;
9599: PPOPN 1
9601: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9602: LD_EXP 7
9606: PUSH
9607: LD_EXP 27
9611: AND
9612: IFFALSE 9621
9614: GO 9616
9616: DISABLE
// StreamSibBomb ;
9617: CALL 9622 0 0
9621: END
// export function StreamSibBomb ; var i , x , y ; begin
9622: LD_INT 0
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
// result := false ;
9628: LD_ADDR_VAR 0 1
9632: PUSH
9633: LD_INT 0
9635: ST_TO_ADDR
// for i := 1 to 16 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 16
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9849
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: LD_INT 10
9659: PUSH
9660: LD_INT 20
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 40
9668: PUSH
9669: LD_INT 50
9671: PUSH
9672: LD_INT 60
9674: PUSH
9675: LD_INT 70
9677: PUSH
9678: LD_INT 80
9680: PUSH
9681: LD_INT 90
9683: PUSH
9684: LD_INT 100
9686: PUSH
9687: LD_INT 110
9689: PUSH
9690: LD_INT 120
9692: PUSH
9693: LD_INT 130
9695: PUSH
9696: LD_INT 140
9698: PUSH
9699: LD_INT 150
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 1
9721: PPUSH
9722: LD_INT 15
9724: PPUSH
9725: CALL_OW 12
9729: ARRAY
9730: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9731: LD_ADDR_VAR 0 4
9735: PUSH
9736: LD_INT 10
9738: PUSH
9739: LD_INT 20
9741: PUSH
9742: LD_INT 30
9744: PUSH
9745: LD_INT 40
9747: PUSH
9748: LD_INT 50
9750: PUSH
9751: LD_INT 60
9753: PUSH
9754: LD_INT 70
9756: PUSH
9757: LD_INT 80
9759: PUSH
9760: LD_INT 90
9762: PUSH
9763: LD_INT 100
9765: PUSH
9766: LD_INT 110
9768: PUSH
9769: LD_INT 120
9771: PUSH
9772: LD_INT 130
9774: PUSH
9775: LD_INT 140
9777: PUSH
9778: LD_INT 150
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 1
9800: PPUSH
9801: LD_INT 15
9803: PPUSH
9804: CALL_OW 12
9808: ARRAY
9809: ST_TO_ADDR
// if ValidHex ( x , y ) then
9810: LD_VAR 0 3
9814: PPUSH
9815: LD_VAR 0 4
9819: PPUSH
9820: CALL_OW 488
9824: IFFALSE 9847
// begin result := [ x , y ] ;
9826: LD_ADDR_VAR 0 1
9830: PUSH
9831: LD_VAR 0 3
9835: PUSH
9836: LD_VAR 0 4
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: ST_TO_ADDR
// break ;
9845: GO 9849
// end ; end ;
9847: GO 9649
9849: POP
9850: POP
// if result then
9851: LD_VAR 0 1
9855: IFFALSE 9915
// begin ToLua ( playSibBomb() ) ;
9857: LD_STRING playSibBomb()
9859: PPUSH
9860: CALL_OW 559
// wait ( 0 0$14 ) ;
9864: LD_INT 490
9866: PPUSH
9867: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9871: LD_VAR 0 1
9875: PUSH
9876: LD_INT 1
9878: ARRAY
9879: PPUSH
9880: LD_VAR 0 1
9884: PUSH
9885: LD_INT 2
9887: ARRAY
9888: PPUSH
9889: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9893: LD_VAR 0 1
9897: PUSH
9898: LD_INT 1
9900: ARRAY
9901: PPUSH
9902: LD_VAR 0 1
9906: PUSH
9907: LD_INT 2
9909: ARRAY
9910: PPUSH
9911: CALL_OW 429
// end ; end ;
9915: LD_VAR 0 1
9919: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9920: LD_EXP 7
9924: PUSH
9925: LD_EXP 29
9929: AND
9930: IFFALSE 9942
9932: GO 9934
9934: DISABLE
// YouLost (  ) ;
9935: LD_STRING 
9937: PPUSH
9938: CALL_OW 104
9942: END
// every 0 0$1 trigger StreamModeActive and sFog do
9943: LD_EXP 7
9947: PUSH
9948: LD_EXP 28
9952: AND
9953: IFFALSE 9967
9955: GO 9957
9957: DISABLE
// FogOff ( your_side ) ;
9958: LD_OWVAR 2
9962: PPUSH
9963: CALL_OW 344
9967: END
// every 0 0$1 trigger StreamModeActive and sSun do
9968: LD_EXP 7
9972: PUSH
9973: LD_EXP 30
9977: AND
9978: IFFALSE 10006
9980: GO 9982
9982: DISABLE
// begin solar_recharge_percent := 0 ;
9983: LD_ADDR_OWVAR 79
9987: PUSH
9988: LD_INT 0
9990: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9991: LD_INT 10500
9993: PPUSH
9994: CALL_OW 67
// solar_recharge_percent := 100 ;
9998: LD_ADDR_OWVAR 79
10002: PUSH
10003: LD_INT 100
10005: ST_TO_ADDR
// end ;
10006: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10007: LD_EXP 7
10011: PUSH
10012: LD_EXP 31
10016: AND
10017: IFFALSE 10256
10019: GO 10021
10021: DISABLE
10022: LD_INT 0
10024: PPUSH
10025: PPUSH
10026: PPUSH
// begin tmp := [ ] ;
10027: LD_ADDR_VAR 0 3
10031: PUSH
10032: EMPTY
10033: ST_TO_ADDR
// for i := 1 to 6 do
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: DOUBLE
10040: LD_INT 1
10042: DEC
10043: ST_TO_ADDR
10044: LD_INT 6
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10153
// begin uc_nation := nation_nature ;
10050: LD_ADDR_OWVAR 21
10054: PUSH
10055: LD_INT 0
10057: ST_TO_ADDR
// uc_side := 0 ;
10058: LD_ADDR_OWVAR 20
10062: PUSH
10063: LD_INT 0
10065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10066: LD_ADDR_OWVAR 29
10070: PUSH
10071: LD_INT 12
10073: PUSH
10074: LD_INT 12
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: ST_TO_ADDR
// hc_agressivity := 20 ;
10081: LD_ADDR_OWVAR 35
10085: PUSH
10086: LD_INT 20
10088: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10089: LD_ADDR_OWVAR 28
10093: PUSH
10094: LD_INT 17
10096: ST_TO_ADDR
// hc_gallery :=  ;
10097: LD_ADDR_OWVAR 33
10101: PUSH
10102: LD_STRING 
10104: ST_TO_ADDR
// hc_name :=  ;
10105: LD_ADDR_OWVAR 26
10109: PUSH
10110: LD_STRING 
10112: ST_TO_ADDR
// un := CreateHuman ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: CALL_OW 44
10122: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10123: LD_VAR 0 2
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 51
// tmp := tmp ^ un ;
10135: LD_ADDR_VAR 0 3
10139: PUSH
10140: LD_VAR 0 3
10144: PUSH
10145: LD_VAR 0 2
10149: ADD
10150: ST_TO_ADDR
// end ;
10151: GO 10047
10153: POP
10154: POP
// repeat wait ( 0 0$1 ) ;
10155: LD_INT 35
10157: PPUSH
10158: CALL_OW 67
// for un in tmp do
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_VAR 0 3
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10247
// begin if IsDead ( un ) then
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 301
10184: IFFALSE 10204
// begin tmp := tmp diff un ;
10186: LD_ADDR_VAR 0 3
10190: PUSH
10191: LD_VAR 0 3
10195: PUSH
10196: LD_VAR 0 2
10200: DIFF
10201: ST_TO_ADDR
// continue ;
10202: GO 10172
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10204: LD_VAR 0 2
10208: PPUSH
10209: LD_INT 3
10211: PUSH
10212: LD_INT 22
10214: PUSH
10215: LD_INT 0
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PPUSH
10226: CALL_OW 69
10230: PPUSH
10231: LD_VAR 0 2
10235: PPUSH
10236: CALL_OW 74
10240: PPUSH
10241: CALL_OW 115
// end ;
10245: GO 10172
10247: POP
10248: POP
// until not tmp ;
10249: LD_VAR 0 3
10253: NOT
10254: IFFALSE 10155
// end ;
10256: PPOPN 3
10258: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10259: LD_EXP 7
10263: PUSH
10264: LD_EXP 32
10268: AND
10269: IFFALSE 10323
10271: GO 10273
10273: DISABLE
// begin ToLua ( displayTroll(); ) ;
10274: LD_STRING displayTroll();
10276: PPUSH
10277: CALL_OW 559
// wait ( 3 3$00 ) ;
10281: LD_INT 6300
10283: PPUSH
10284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10288: LD_STRING hideTroll();
10290: PPUSH
10291: CALL_OW 559
// wait ( 1 1$00 ) ;
10295: LD_INT 2100
10297: PPUSH
10298: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10302: LD_STRING displayTroll();
10304: PPUSH
10305: CALL_OW 559
// wait ( 1 1$00 ) ;
10309: LD_INT 2100
10311: PPUSH
10312: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10316: LD_STRING hideTroll();
10318: PPUSH
10319: CALL_OW 559
// end ;
10323: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10324: LD_EXP 7
10328: PUSH
10329: LD_EXP 33
10333: AND
10334: IFFALSE 10397
10336: GO 10338
10338: DISABLE
10339: LD_INT 0
10341: PPUSH
// begin p := 0 ;
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// repeat game_speed := 1 ;
10350: LD_ADDR_OWVAR 65
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10358: LD_INT 35
10360: PPUSH
10361: CALL_OW 67
// p := p + 1 ;
10365: LD_ADDR_VAR 0 1
10369: PUSH
10370: LD_VAR 0 1
10374: PUSH
10375: LD_INT 1
10377: PLUS
10378: ST_TO_ADDR
// until p >= 60 ;
10379: LD_VAR 0 1
10383: PUSH
10384: LD_INT 60
10386: GREATEREQUAL
10387: IFFALSE 10350
// game_speed := 4 ;
10389: LD_ADDR_OWVAR 65
10393: PUSH
10394: LD_INT 4
10396: ST_TO_ADDR
// end ;
10397: PPOPN 1
10399: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10400: LD_EXP 7
10404: PUSH
10405: LD_EXP 34
10409: AND
10410: IFFALSE 10556
10412: GO 10414
10414: DISABLE
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10419: LD_ADDR_VAR 0 1
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_OWVAR 2
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: LD_INT 30
10441: PUSH
10442: LD_INT 0
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 30
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: ST_TO_ADDR
// if not depot then
10473: LD_VAR 0 1
10477: NOT
10478: IFFALSE 10482
// exit ;
10480: GO 10556
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: LD_VAR 0 1
10491: PUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_VAR 0 1
10499: PPUSH
10500: CALL_OW 12
10504: ARRAY
10505: PPUSH
10506: CALL_OW 274
10510: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10511: LD_VAR 0 2
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10526: LD_VAR 0 2
10530: PPUSH
10531: LD_INT 2
10533: PPUSH
10534: LD_INT 0
10536: PPUSH
10537: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_INT 3
10548: PPUSH
10549: LD_INT 0
10551: PPUSH
10552: CALL_OW 277
// end ;
10556: PPOPN 2
10558: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10559: LD_EXP 7
10563: PUSH
10564: LD_EXP 35
10568: AND
10569: IFFALSE 10666
10571: GO 10573
10573: DISABLE
10574: LD_INT 0
10576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10577: LD_ADDR_VAR 0 1
10581: PUSH
10582: LD_INT 22
10584: PUSH
10585: LD_OWVAR 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: LD_INT 23
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: PPUSH
10626: CALL_OW 69
10630: ST_TO_ADDR
// if not tmp then
10631: LD_VAR 0 1
10635: NOT
10636: IFFALSE 10640
// exit ;
10638: GO 10666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10640: LD_VAR 0 1
10644: PUSH
10645: LD_INT 1
10647: PPUSH
10648: LD_VAR 0 1
10652: PPUSH
10653: CALL_OW 12
10657: ARRAY
10658: PPUSH
10659: LD_INT 200
10661: PPUSH
10662: CALL_OW 234
// end ;
10666: PPOPN 1
10668: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10669: LD_EXP 7
10673: PUSH
10674: LD_EXP 36
10678: AND
10679: IFFALSE 10758
10681: GO 10683
10683: DISABLE
10684: LD_INT 0
10686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: LD_INT 22
10694: PUSH
10695: LD_OWVAR 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 21
10706: PUSH
10707: LD_INT 2
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 1
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10732: LD_VAR 0 1
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL_OW 12
10749: ARRAY
10750: PPUSH
10751: LD_INT 60
10753: PPUSH
10754: CALL_OW 234
// end ;
10758: PPOPN 1
10760: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10761: LD_EXP 7
10765: PUSH
10766: LD_EXP 37
10770: AND
10771: IFFALSE 10870
10773: GO 10775
10775: DISABLE
10776: LD_INT 0
10778: PPUSH
10779: PPUSH
// begin enable ;
10780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10781: LD_ADDR_VAR 0 1
10785: PUSH
10786: LD_INT 22
10788: PUSH
10789: LD_OWVAR 2
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 61
10800: PUSH
10801: EMPTY
10802: LIST
10803: PUSH
10804: LD_INT 33
10806: PUSH
10807: LD_INT 2
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: PPUSH
10819: CALL_OW 69
10823: ST_TO_ADDR
// if not tmp then
10824: LD_VAR 0 1
10828: NOT
10829: IFFALSE 10833
// exit ;
10831: GO 10870
// for i in tmp do
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: LD_VAR 0 1
10842: PUSH
10843: FOR_IN
10844: IFFALSE 10868
// if IsControledBy ( i ) then
10846: LD_VAR 0 2
10850: PPUSH
10851: CALL_OW 312
10855: IFFALSE 10866
// ComUnlink ( i ) ;
10857: LD_VAR 0 2
10861: PPUSH
10862: CALL_OW 136
10866: GO 10843
10868: POP
10869: POP
// end ;
10870: PPOPN 2
10872: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10873: LD_EXP 7
10877: PUSH
10878: LD_EXP 38
10882: AND
10883: IFFALSE 11023
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
// begin ToLua ( displayPowell(); ) ;
10892: LD_STRING displayPowell();
10894: PPUSH
10895: CALL_OW 559
// uc_side := 0 ;
10899: LD_ADDR_OWVAR 20
10903: PUSH
10904: LD_INT 0
10906: ST_TO_ADDR
// uc_nation := 2 ;
10907: LD_ADDR_OWVAR 21
10911: PUSH
10912: LD_INT 2
10914: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10915: LD_ADDR_OWVAR 37
10919: PUSH
10920: LD_INT 14
10922: ST_TO_ADDR
// vc_engine := engine_siberite ;
10923: LD_ADDR_OWVAR 39
10927: PUSH
10928: LD_INT 3
10930: ST_TO_ADDR
// vc_control := control_apeman ;
10931: LD_ADDR_OWVAR 38
10935: PUSH
10936: LD_INT 5
10938: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10939: LD_ADDR_OWVAR 40
10943: PUSH
10944: LD_INT 29
10946: ST_TO_ADDR
// un := CreateVehicle ;
10947: LD_ADDR_VAR 0 2
10951: PUSH
10952: CALL_OW 45
10956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10957: LD_VAR 0 2
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10969: LD_INT 35
10971: PPUSH
10972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10976: LD_VAR 0 2
10980: PPUSH
10981: LD_INT 22
10983: PUSH
10984: LD_OWVAR 2
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PPUSH
10993: CALL_OW 69
10997: PPUSH
10998: LD_VAR 0 2
11002: PPUSH
11003: CALL_OW 74
11007: PPUSH
11008: CALL_OW 115
// until IsDead ( un ) ;
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 301
11021: IFFALSE 10969
// end ;
11023: PPOPN 2
11025: END
// every 0 0$1 trigger StreamModeActive and sStu do
11026: LD_EXP 7
11030: PUSH
11031: LD_EXP 46
11035: AND
11036: IFFALSE 11052
11038: GO 11040
11040: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11041: LD_STRING displayStucuk();
11043: PPUSH
11044: CALL_OW 559
// ResetFog ;
11048: CALL_OW 335
// end ;
11052: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11053: LD_EXP 7
11057: PUSH
11058: LD_EXP 39
11062: AND
11063: IFFALSE 11204
11065: GO 11067
11067: DISABLE
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11072: LD_ADDR_VAR 0 2
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_OWVAR 2
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 21
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: ST_TO_ADDR
// if not tmp then
11108: LD_VAR 0 2
11112: NOT
11113: IFFALSE 11117
// exit ;
11115: GO 11204
// un := tmp [ rand ( 1 , tmp ) ] ;
11117: LD_ADDR_VAR 0 1
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_INT 1
11129: PPUSH
11130: LD_VAR 0 2
11134: PPUSH
11135: CALL_OW 12
11139: ARRAY
11140: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11141: LD_VAR 0 1
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11153: LD_VAR 0 1
11157: PPUSH
11158: LD_OWVAR 3
11162: PUSH
11163: LD_VAR 0 1
11167: DIFF
11168: PPUSH
11169: LD_VAR 0 1
11173: PPUSH
11174: CALL_OW 74
11178: PPUSH
11179: CALL_OW 115
// wait ( 0 0$20 ) ;
11183: LD_INT 700
11185: PPUSH
11186: CALL_OW 67
// SetSide ( un , your_side ) ;
11190: LD_VAR 0 1
11194: PPUSH
11195: LD_OWVAR 2
11199: PPUSH
11200: CALL_OW 235
// end ;
11204: PPOPN 2
11206: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11207: LD_EXP 7
11211: PUSH
11212: LD_EXP 40
11216: AND
11217: IFFALSE 11323
11219: GO 11221
11221: DISABLE
11222: LD_INT 0
11224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11225: LD_ADDR_VAR 0 1
11229: PUSH
11230: LD_INT 22
11232: PUSH
11233: LD_OWVAR 2
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 2
11244: PUSH
11245: LD_INT 30
11247: PUSH
11248: LD_INT 0
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PPUSH
11274: CALL_OW 69
11278: ST_TO_ADDR
// if not depot then
11279: LD_VAR 0 1
11283: NOT
11284: IFFALSE 11288
// exit ;
11286: GO 11323
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11288: LD_VAR 0 1
11292: PUSH
11293: LD_INT 1
11295: ARRAY
11296: PPUSH
11297: CALL_OW 250
11301: PPUSH
11302: LD_VAR 0 1
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PPUSH
11311: CALL_OW 251
11315: PPUSH
11316: LD_INT 70
11318: PPUSH
11319: CALL_OW 495
// end ;
11323: PPOPN 1
11325: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11326: LD_EXP 7
11330: PUSH
11331: LD_EXP 41
11335: AND
11336: IFFALSE 11547
11338: GO 11340
11340: DISABLE
11341: LD_INT 0
11343: PPUSH
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11348: LD_ADDR_VAR 0 5
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_OWVAR 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// if not tmp then
11384: LD_VAR 0 5
11388: NOT
11389: IFFALSE 11393
// exit ;
11391: GO 11547
// for i in tmp do
11393: LD_ADDR_VAR 0 1
11397: PUSH
11398: LD_VAR 0 5
11402: PUSH
11403: FOR_IN
11404: IFFALSE 11545
// begin d := rand ( 0 , 5 ) ;
11406: LD_ADDR_VAR 0 4
11410: PUSH
11411: LD_INT 0
11413: PPUSH
11414: LD_INT 5
11416: PPUSH
11417: CALL_OW 12
11421: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_VAR 0 1
11431: PPUSH
11432: CALL_OW 250
11436: PPUSH
11437: LD_VAR 0 4
11441: PPUSH
11442: LD_INT 3
11444: PPUSH
11445: LD_INT 12
11447: PPUSH
11448: CALL_OW 12
11452: PPUSH
11453: CALL_OW 272
11457: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 251
11472: PPUSH
11473: LD_VAR 0 4
11477: PPUSH
11478: LD_INT 3
11480: PPUSH
11481: LD_INT 12
11483: PPUSH
11484: CALL_OW 12
11488: PPUSH
11489: CALL_OW 273
11493: ST_TO_ADDR
// if ValidHex ( x , y ) then
11494: LD_VAR 0 2
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: CALL_OW 488
11508: IFFALSE 11543
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_VAR 0 2
11519: PPUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: LD_INT 3
11527: PPUSH
11528: LD_INT 6
11530: PPUSH
11531: CALL_OW 12
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 483
// end ;
11543: GO 11403
11545: POP
11546: POP
// end ;
11547: PPOPN 5
11549: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11550: LD_EXP 7
11554: PUSH
11555: LD_EXP 42
11559: AND
11560: IFFALSE 11654
11562: GO 11564
11564: DISABLE
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 22
11576: PUSH
11577: LD_OWVAR 2
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 32
11588: PUSH
11589: LD_INT 1
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 21
11598: PUSH
11599: LD_INT 2
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: PPUSH
11611: CALL_OW 69
11615: ST_TO_ADDR
// if not tmp then
11616: LD_VAR 0 2
11620: NOT
11621: IFFALSE 11625
// exit ;
11623: GO 11654
// for i in tmp do
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: FOR_IN
11636: IFFALSE 11652
// SetFuel ( i , 0 ) ;
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_INT 0
11645: PPUSH
11646: CALL_OW 240
11650: GO 11635
11652: POP
11653: POP
// end ;
11654: PPOPN 2
11656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11657: LD_EXP 7
11661: PUSH
11662: LD_EXP 43
11666: AND
11667: IFFALSE 11733
11669: GO 11671
11671: DISABLE
11672: LD_INT 0
11674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_OWVAR 2
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 30
11694: PUSH
11695: LD_INT 29
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// if not tmp then
11711: LD_VAR 0 1
11715: NOT
11716: IFFALSE 11720
// exit ;
11718: GO 11733
// DestroyUnit ( tmp [ 1 ] ) ;
11720: LD_VAR 0 1
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: CALL_OW 65
// end ;
11733: PPOPN 1
11735: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11736: LD_EXP 7
11740: PUSH
11741: LD_EXP 45
11745: AND
11746: IFFALSE 11875
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin uc_side := 0 ;
11754: LD_ADDR_OWVAR 20
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// uc_nation := nation_arabian ;
11762: LD_ADDR_OWVAR 21
11766: PUSH
11767: LD_INT 2
11769: ST_TO_ADDR
// hc_gallery :=  ;
11770: LD_ADDR_OWVAR 33
11774: PUSH
11775: LD_STRING 
11777: ST_TO_ADDR
// hc_name :=  ;
11778: LD_ADDR_OWVAR 26
11782: PUSH
11783: LD_STRING 
11785: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11786: LD_INT 1
11788: PPUSH
11789: LD_INT 11
11791: PPUSH
11792: LD_INT 10
11794: PPUSH
11795: CALL_OW 380
// un := CreateHuman ;
11799: LD_ADDR_VAR 0 1
11803: PUSH
11804: CALL_OW 44
11808: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11809: LD_VAR 0 1
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11821: LD_INT 35
11823: PPUSH
11824: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_INT 22
11835: PUSH
11836: LD_OWVAR 2
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: PPUSH
11850: LD_VAR 0 1
11854: PPUSH
11855: CALL_OW 74
11859: PPUSH
11860: CALL_OW 115
// until IsDead ( un ) ;
11864: LD_VAR 0 1
11868: PPUSH
11869: CALL_OW 301
11873: IFFALSE 11821
// end ;
11875: PPOPN 1
11877: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11878: LD_EXP 7
11882: PUSH
11883: LD_EXP 47
11887: AND
11888: IFFALSE 11900
11890: GO 11892
11892: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11893: LD_STRING earthquake(getX(game), 0, 32)
11895: PPUSH
11896: CALL_OW 559
11900: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11901: LD_EXP 7
11905: PUSH
11906: LD_EXP 48
11910: AND
11911: IFFALSE 12002
11913: GO 11915
11915: DISABLE
11916: LD_INT 0
11918: PPUSH
// begin enable ;
11919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11920: LD_ADDR_VAR 0 1
11924: PUSH
11925: LD_INT 22
11927: PUSH
11928: LD_OWVAR 2
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 21
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 33
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: ST_TO_ADDR
// if not tmp then
11967: LD_VAR 0 1
11971: NOT
11972: IFFALSE 11976
// exit ;
11974: GO 12002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11976: LD_VAR 0 1
11980: PUSH
11981: LD_INT 1
11983: PPUSH
11984: LD_VAR 0 1
11988: PPUSH
11989: CALL_OW 12
11993: ARRAY
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 234
// end ;
12002: PPOPN 1
12004: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12005: LD_EXP 7
12009: PUSH
12010: LD_EXP 49
12014: AND
12015: IFFALSE 12156
12017: GO 12019
12019: DISABLE
12020: LD_INT 0
12022: PPUSH
12023: PPUSH
12024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_OWVAR 2
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 69
12060: ST_TO_ADDR
// if not tmp then
12061: LD_VAR 0 3
12065: NOT
12066: IFFALSE 12070
// exit ;
12068: GO 12156
// un := tmp [ rand ( 1 , tmp ) ] ;
12070: LD_ADDR_VAR 0 2
12074: PUSH
12075: LD_VAR 0 3
12079: PUSH
12080: LD_INT 1
12082: PPUSH
12083: LD_VAR 0 3
12087: PPUSH
12088: CALL_OW 12
12092: ARRAY
12093: ST_TO_ADDR
// if Crawls ( un ) then
12094: LD_VAR 0 2
12098: PPUSH
12099: CALL_OW 318
12103: IFFALSE 12114
// ComWalk ( un ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_INT 9
12121: PPUSH
12122: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12126: LD_INT 28
12128: PPUSH
12129: LD_OWVAR 2
12133: PPUSH
12134: LD_INT 2
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12141: LD_INT 29
12143: PPUSH
12144: LD_OWVAR 2
12148: PPUSH
12149: LD_INT 2
12151: PPUSH
12152: CALL_OW 322
// end ;
12156: PPOPN 3
12158: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12159: LD_EXP 7
12163: PUSH
12164: LD_EXP 50
12168: AND
12169: IFFALSE 12280
12171: GO 12173
12173: DISABLE
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12179: LD_ADDR_VAR 0 3
12183: PUSH
12184: LD_INT 22
12186: PUSH
12187: LD_OWVAR 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: ST_TO_ADDR
// if not tmp then
12215: LD_VAR 0 3
12219: NOT
12220: IFFALSE 12224
// exit ;
12222: GO 12280
// un := tmp [ rand ( 1 , tmp ) ] ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 1
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: CALL_OW 12
12246: ARRAY
12247: ST_TO_ADDR
// if Crawls ( un ) then
12248: LD_VAR 0 2
12252: PPUSH
12253: CALL_OW 318
12257: IFFALSE 12268
// ComWalk ( un ) ;
12259: LD_VAR 0 2
12263: PPUSH
12264: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12268: LD_VAR 0 2
12272: PPUSH
12273: LD_INT 8
12275: PPUSH
12276: CALL_OW 336
// end ;
12280: PPOPN 3
12282: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12283: LD_EXP 7
12287: PUSH
12288: LD_EXP 51
12292: AND
12293: IFFALSE 12437
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12302: LD_ADDR_VAR 0 2
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_OWVAR 2
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 21
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: LD_INT 34
12334: PUSH
12335: LD_INT 12
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 34
12344: PUSH
12345: LD_INT 51
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 34
12354: PUSH
12355: LD_INT 32
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: PPUSH
12373: CALL_OW 69
12377: ST_TO_ADDR
// if not tmp then
12378: LD_VAR 0 2
12382: NOT
12383: IFFALSE 12387
// exit ;
12385: GO 12437
// for i in tmp do
12387: LD_ADDR_VAR 0 1
12391: PUSH
12392: LD_VAR 0 2
12396: PUSH
12397: FOR_IN
12398: IFFALSE 12435
// if GetCargo ( i , mat_artifact ) = 0 then
12400: LD_VAR 0 1
12404: PPUSH
12405: LD_INT 4
12407: PPUSH
12408: CALL_OW 289
12412: PUSH
12413: LD_INT 0
12415: EQUAL
12416: IFFALSE 12433
// SetCargo ( i , mat_siberit , 100 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 100
12428: PPUSH
12429: CALL_OW 290
12433: GO 12397
12435: POP
12436: POP
// end ;
12437: PPOPN 2
12439: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12440: LD_EXP 7
12444: PUSH
12445: LD_EXP 52
12449: AND
12450: IFFALSE 12633
12452: GO 12454
12454: DISABLE
12455: LD_INT 0
12457: PPUSH
12458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12459: LD_ADDR_VAR 0 2
12463: PUSH
12464: LD_INT 22
12466: PUSH
12467: LD_OWVAR 2
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PPUSH
12476: CALL_OW 69
12480: ST_TO_ADDR
// if not tmp then
12481: LD_VAR 0 2
12485: NOT
12486: IFFALSE 12490
// exit ;
12488: GO 12633
// for i := 1 to 2 do
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: DOUBLE
12496: LD_INT 1
12498: DEC
12499: ST_TO_ADDR
12500: LD_INT 2
12502: PUSH
12503: FOR_TO
12504: IFFALSE 12631
// begin uc_side := your_side ;
12506: LD_ADDR_OWVAR 20
12510: PUSH
12511: LD_OWVAR 2
12515: ST_TO_ADDR
// uc_nation := nation_american ;
12516: LD_ADDR_OWVAR 21
12520: PUSH
12521: LD_INT 1
12523: ST_TO_ADDR
// vc_chassis := us_morphling ;
12524: LD_ADDR_OWVAR 37
12528: PUSH
12529: LD_INT 5
12531: ST_TO_ADDR
// vc_engine := engine_siberite ;
12532: LD_ADDR_OWVAR 39
12536: PUSH
12537: LD_INT 3
12539: ST_TO_ADDR
// vc_control := control_computer ;
12540: LD_ADDR_OWVAR 38
12544: PUSH
12545: LD_INT 3
12547: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12548: LD_ADDR_OWVAR 40
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12556: LD_VAR 0 2
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: CALL_OW 310
12569: NOT
12570: IFFALSE 12617
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12572: CALL_OW 45
12576: PPUSH
12577: LD_VAR 0 2
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 250
12590: PPUSH
12591: LD_VAR 0 2
12595: PUSH
12596: LD_INT 1
12598: ARRAY
12599: PPUSH
12600: CALL_OW 251
12604: PPUSH
12605: LD_INT 12
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 50
12615: GO 12629
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12617: CALL_OW 45
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 51
// end ;
12629: GO 12503
12631: POP
12632: POP
// end ;
12633: PPOPN 2
12635: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12636: LD_EXP 7
12640: PUSH
12641: LD_EXP 53
12645: AND
12646: IFFALSE 12868
12648: GO 12650
12650: DISABLE
12651: LD_INT 0
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
12658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12659: LD_ADDR_VAR 0 6
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_OWVAR 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 21
12678: PUSH
12679: LD_INT 1
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 3
12688: PUSH
12689: LD_INT 23
12691: PUSH
12692: LD_INT 0
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: ST_TO_ADDR
// if not tmp then
12713: LD_VAR 0 6
12717: NOT
12718: IFFALSE 12722
// exit ;
12720: GO 12868
// s1 := rand ( 1 , 4 ) ;
12722: LD_ADDR_VAR 0 2
12726: PUSH
12727: LD_INT 1
12729: PPUSH
12730: LD_INT 4
12732: PPUSH
12733: CALL_OW 12
12737: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12738: LD_ADDR_VAR 0 4
12742: PUSH
12743: LD_VAR 0 6
12747: PUSH
12748: LD_INT 1
12750: ARRAY
12751: PPUSH
12752: LD_VAR 0 2
12756: PPUSH
12757: CALL_OW 259
12761: ST_TO_ADDR
// if s1 = 1 then
12762: LD_VAR 0 2
12766: PUSH
12767: LD_INT 1
12769: EQUAL
12770: IFFALSE 12790
// s2 := rand ( 2 , 4 ) else
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 2
12779: PPUSH
12780: LD_INT 4
12782: PPUSH
12783: CALL_OW 12
12787: ST_TO_ADDR
12788: GO 12798
// s2 := 1 ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12798: LD_ADDR_VAR 0 5
12802: PUSH
12803: LD_VAR 0 6
12807: PUSH
12808: LD_INT 1
12810: ARRAY
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: CALL_OW 259
12821: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12822: LD_VAR 0 6
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: LD_VAR 0 2
12835: PPUSH
12836: LD_VAR 0 5
12840: PPUSH
12841: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12845: LD_VAR 0 6
12849: PUSH
12850: LD_INT 1
12852: ARRAY
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_VAR 0 4
12863: PPUSH
12864: CALL_OW 237
// end ;
12868: PPOPN 6
12870: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12871: LD_EXP 7
12875: PUSH
12876: LD_EXP 54
12880: AND
12881: IFFALSE 12960
12883: GO 12885
12885: DISABLE
12886: LD_INT 0
12888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12889: LD_ADDR_VAR 0 1
12893: PUSH
12894: LD_INT 22
12896: PUSH
12897: LD_OWVAR 2
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 3
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: CALL_OW 69
12924: ST_TO_ADDR
// if not tmp then
12925: LD_VAR 0 1
12929: NOT
12930: IFFALSE 12934
// exit ;
12932: GO 12960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12934: LD_VAR 0 1
12938: PUSH
12939: LD_INT 1
12941: PPUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 12
12951: ARRAY
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: CALL_OW 234
// end ;
12960: PPOPN 1
12962: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12963: LD_EXP 7
12967: PUSH
12968: LD_EXP 55
12972: AND
12973: IFFALSE 13085
12975: GO 12977
12977: DISABLE
12978: LD_INT 0
12980: PPUSH
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 2
13001: PUSH
13002: LD_INT 30
13004: PUSH
13005: LD_INT 27
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 30
13014: PUSH
13015: LD_INT 26
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 30
13024: PUSH
13025: LD_INT 28
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: ST_TO_ADDR
// if not tmp then
13047: LD_VAR 0 2
13051: NOT
13052: IFFALSE 13056
// exit ;
13054: GO 13085
// for i in tmp do
13056: LD_ADDR_VAR 0 1
13060: PUSH
13061: LD_VAR 0 2
13065: PUSH
13066: FOR_IN
13067: IFFALSE 13083
// SetLives ( i , 1 ) ;
13069: LD_VAR 0 1
13073: PPUSH
13074: LD_INT 1
13076: PPUSH
13077: CALL_OW 234
13081: GO 13066
13083: POP
13084: POP
// end ;
13085: PPOPN 2
13087: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13088: LD_EXP 7
13092: PUSH
13093: LD_EXP 56
13097: AND
13098: IFFALSE 13385
13100: GO 13102
13102: DISABLE
13103: LD_INT 0
13105: PPUSH
13106: PPUSH
13107: PPUSH
// begin i := rand ( 1 , 7 ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_INT 1
13115: PPUSH
13116: LD_INT 7
13118: PPUSH
13119: CALL_OW 12
13123: ST_TO_ADDR
// case i of 1 :
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 1
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13147
13137: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13138: LD_STRING earthquake(getX(game), 0, 32)
13140: PPUSH
13141: CALL_OW 559
13145: GO 13385
13147: LD_INT 2
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13169
13155: POP
// begin ToLua ( displayStucuk(); ) ;
13156: LD_STRING displayStucuk();
13158: PPUSH
13159: CALL_OW 559
// ResetFog ;
13163: CALL_OW 335
// end ; 3 :
13167: GO 13385
13169: LD_INT 3
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13281
13177: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13178: LD_ADDR_VAR 0 2
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_OWVAR 2
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 25
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 69
13213: ST_TO_ADDR
// if not tmp then
13214: LD_VAR 0 2
13218: NOT
13219: IFFALSE 13223
// exit ;
13221: GO 13385
// un := tmp [ rand ( 1 , tmp ) ] ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_VAR 0 2
13232: PUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_VAR 0 2
13240: PPUSH
13241: CALL_OW 12
13245: ARRAY
13246: ST_TO_ADDR
// if Crawls ( un ) then
13247: LD_VAR 0 3
13251: PPUSH
13252: CALL_OW 318
13256: IFFALSE 13267
// ComWalk ( un ) ;
13258: LD_VAR 0 3
13262: PPUSH
13263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13267: LD_VAR 0 3
13271: PPUSH
13272: LD_INT 8
13274: PPUSH
13275: CALL_OW 336
// end ; 4 :
13279: GO 13385
13281: LD_INT 4
13283: DOUBLE
13284: EQUAL
13285: IFTRUE 13289
13287: GO 13363
13289: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13290: LD_ADDR_VAR 0 2
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_OWVAR 2
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 30
13309: PUSH
13310: LD_INT 29
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if not tmp then
13326: LD_VAR 0 2
13330: NOT
13331: IFFALSE 13335
// exit ;
13333: GO 13385
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13335: LD_VAR 0 2
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PPUSH
13344: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13348: LD_VAR 0 2
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: CALL_OW 65
// end ; 5 .. 7 :
13361: GO 13385
13363: LD_INT 5
13365: DOUBLE
13366: GREATEREQUAL
13367: IFFALSE 13375
13369: LD_INT 7
13371: DOUBLE
13372: LESSEQUAL
13373: IFTRUE 13377
13375: GO 13384
13377: POP
// StreamSibBomb ; end ;
13378: CALL 9622 0 0
13382: GO 13385
13384: POP
// end ;
13385: PPOPN 3
13387: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13388: LD_EXP 7
13392: PUSH
13393: LD_EXP 57
13397: AND
13398: IFFALSE 13554
13400: GO 13402
13402: DISABLE
13403: LD_INT 0
13405: PPUSH
13406: PPUSH
13407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13408: LD_ADDR_VAR 0 2
13412: PUSH
13413: LD_INT 81
13415: PUSH
13416: LD_OWVAR 2
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: LD_INT 21
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 69
13461: ST_TO_ADDR
// if not tmp then
13462: LD_VAR 0 2
13466: NOT
13467: IFFALSE 13471
// exit ;
13469: GO 13554
// p := 0 ;
13471: LD_ADDR_VAR 0 3
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13479: LD_INT 35
13481: PPUSH
13482: CALL_OW 67
// p := p + 1 ;
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_VAR 0 3
13495: PUSH
13496: LD_INT 1
13498: PLUS
13499: ST_TO_ADDR
// for i in tmp do
13500: LD_ADDR_VAR 0 1
13504: PUSH
13505: LD_VAR 0 2
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13542
// if GetLives ( i ) < 1000 then
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 256
13522: PUSH
13523: LD_INT 1000
13525: LESS
13526: IFFALSE 13540
// SetLives ( i , 1000 ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_INT 1000
13535: PPUSH
13536: CALL_OW 234
13540: GO 13510
13542: POP
13543: POP
// until p > 20 ;
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 20
13551: GREATER
13552: IFFALSE 13479
// end ;
13554: PPOPN 3
13556: END
// every 0 0$1 trigger StreamModeActive and sTime do
13557: LD_EXP 7
13561: PUSH
13562: LD_EXP 58
13566: AND
13567: IFFALSE 13602
13569: GO 13571
13571: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13572: LD_INT 28
13574: PPUSH
13575: LD_OWVAR 2
13579: PPUSH
13580: LD_INT 2
13582: PPUSH
13583: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13587: LD_INT 30
13589: PPUSH
13590: LD_OWVAR 2
13594: PPUSH
13595: LD_INT 2
13597: PPUSH
13598: CALL_OW 322
// end ;
13602: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13603: LD_EXP 7
13607: PUSH
13608: LD_EXP 59
13612: AND
13613: IFFALSE 13734
13615: GO 13617
13617: DISABLE
13618: LD_INT 0
13620: PPUSH
13621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13622: LD_ADDR_VAR 0 2
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_OWVAR 2
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 1
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 3
13651: PUSH
13652: LD_INT 23
13654: PUSH
13655: LD_INT 0
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PPUSH
13671: CALL_OW 69
13675: ST_TO_ADDR
// if not tmp then
13676: LD_VAR 0 2
13680: NOT
13681: IFFALSE 13685
// exit ;
13683: GO 13734
// for i in tmp do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: LD_VAR 0 2
13694: PUSH
13695: FOR_IN
13696: IFFALSE 13732
// begin if Crawls ( i ) then
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 318
13707: IFFALSE 13718
// ComWalk ( i ) ;
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 138
// SetClass ( i , 2 ) ;
13718: LD_VAR 0 1
13722: PPUSH
13723: LD_INT 2
13725: PPUSH
13726: CALL_OW 336
// end ;
13730: GO 13695
13732: POP
13733: POP
// end ;
13734: PPOPN 2
13736: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13737: LD_EXP 7
13741: PUSH
13742: LD_EXP 60
13746: AND
13747: IFFALSE 14035
13749: GO 13751
13751: DISABLE
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13757: LD_OWVAR 2
13761: PPUSH
13762: LD_INT 9
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13775: LD_INT 9
13777: PPUSH
13778: LD_OWVAR 2
13782: PPUSH
13783: CALL_OW 343
// uc_side := 9 ;
13787: LD_ADDR_OWVAR 20
13791: PUSH
13792: LD_INT 9
13794: ST_TO_ADDR
// uc_nation := 2 ;
13795: LD_ADDR_OWVAR 21
13799: PUSH
13800: LD_INT 2
13802: ST_TO_ADDR
// hc_name := Dark Warrior ;
13803: LD_ADDR_OWVAR 26
13807: PUSH
13808: LD_STRING Dark Warrior
13810: ST_TO_ADDR
// hc_gallery :=  ;
13811: LD_ADDR_OWVAR 33
13815: PUSH
13816: LD_STRING 
13818: ST_TO_ADDR
// hc_noskilllimit := true ;
13819: LD_ADDR_OWVAR 76
13823: PUSH
13824: LD_INT 1
13826: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13827: LD_ADDR_OWVAR 31
13831: PUSH
13832: LD_INT 30
13834: PUSH
13835: LD_INT 30
13837: PUSH
13838: LD_INT 30
13840: PUSH
13841: LD_INT 30
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// un := CreateHuman ;
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: CALL_OW 44
13859: ST_TO_ADDR
// hc_noskilllimit := false ;
13860: LD_ADDR_OWVAR 76
13864: PUSH
13865: LD_INT 0
13867: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13868: LD_VAR 0 3
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 51
// ToLua ( playRanger() ) ;
13880: LD_STRING playRanger()
13882: PPUSH
13883: CALL_OW 559
// p := 0 ;
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13895: LD_INT 35
13897: PPUSH
13898: CALL_OW 67
// p := p + 1 ;
13902: LD_ADDR_VAR 0 2
13906: PUSH
13907: LD_VAR 0 2
13911: PUSH
13912: LD_INT 1
13914: PLUS
13915: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13916: LD_VAR 0 3
13920: PPUSH
13921: CALL_OW 256
13925: PUSH
13926: LD_INT 1000
13928: LESS
13929: IFFALSE 13943
// SetLives ( un , 1000 ) ;
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 1000
13938: PPUSH
13939: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13943: LD_VAR 0 3
13947: PPUSH
13948: LD_INT 81
13950: PUSH
13951: LD_OWVAR 2
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 91
13962: PUSH
13963: LD_VAR 0 3
13967: PUSH
13968: LD_INT 30
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: CALL_OW 74
13994: PPUSH
13995: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13999: LD_VAR 0 2
14003: PUSH
14004: LD_INT 80
14006: GREATER
14007: PUSH
14008: LD_VAR 0 3
14012: PPUSH
14013: CALL_OW 301
14017: OR
14018: IFFALSE 13895
// if un then
14020: LD_VAR 0 3
14024: IFFALSE 14035
// RemoveUnit ( un ) ;
14026: LD_VAR 0 3
14030: PPUSH
14031: CALL_OW 64
// end ;
14035: PPOPN 3
14037: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14038: LD_EXP 61
14042: IFFALSE 14158
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
14051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_INT 81
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 69
14087: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14088: LD_STRING playComputer()
14090: PPUSH
14091: CALL_OW 559
// if not tmp then
14095: LD_VAR 0 2
14099: NOT
14100: IFFALSE 14104
// exit ;
14102: GO 14158
// for i in tmp do
14104: LD_ADDR_VAR 0 1
14108: PUSH
14109: LD_VAR 0 2
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14156
// for j := 1 to 4 do
14117: LD_ADDR_VAR 0 3
14121: PUSH
14122: DOUBLE
14123: LD_INT 1
14125: DEC
14126: ST_TO_ADDR
14127: LD_INT 4
14129: PUSH
14130: FOR_TO
14131: IFFALSE 14152
// SetSkill ( i , j , 10 ) ;
14133: LD_VAR 0 1
14137: PPUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: LD_INT 10
14145: PPUSH
14146: CALL_OW 237
14150: GO 14130
14152: POP
14153: POP
14154: GO 14114
14156: POP
14157: POP
// end ;
14158: PPOPN 3
14160: END
// every 0 0$1 trigger s30 do var i , tmp ;
14161: LD_EXP 62
14165: IFFALSE 14234
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_OWVAR 2
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PPUSH
14191: CALL_OW 69
14195: ST_TO_ADDR
// if not tmp then
14196: LD_VAR 0 2
14200: NOT
14201: IFFALSE 14205
// exit ;
14203: GO 14234
// for i in tmp do
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: LD_VAR 0 2
14214: PUSH
14215: FOR_IN
14216: IFFALSE 14232
// SetLives ( i , 300 ) ;
14218: LD_VAR 0 1
14222: PPUSH
14223: LD_INT 300
14225: PPUSH
14226: CALL_OW 234
14230: GO 14215
14232: POP
14233: POP
// end ;
14234: PPOPN 2
14236: END
// every 0 0$1 trigger s60 do var i , tmp ;
14237: LD_EXP 63
14241: IFFALSE 14310
14243: GO 14245
14245: DISABLE
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_OWVAR 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// if not tmp then
14272: LD_VAR 0 2
14276: NOT
14277: IFFALSE 14281
// exit ;
14279: GO 14310
// for i in tmp do
14281: LD_ADDR_VAR 0 1
14285: PUSH
14286: LD_VAR 0 2
14290: PUSH
14291: FOR_IN
14292: IFFALSE 14308
// SetLives ( i , 600 ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_INT 600
14301: PPUSH
14302: CALL_OW 234
14306: GO 14291
14308: POP
14309: POP
// end ;
14310: PPOPN 2
14312: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14313: LD_INT 0
14315: PPUSH
// case cmd of 301 :
14316: LD_VAR 0 1
14320: PUSH
14321: LD_INT 301
14323: DOUBLE
14324: EQUAL
14325: IFTRUE 14329
14327: GO 14361
14329: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14330: LD_VAR 0 6
14334: PPUSH
14335: LD_VAR 0 7
14339: PPUSH
14340: LD_VAR 0 8
14344: PPUSH
14345: LD_VAR 0 4
14349: PPUSH
14350: LD_VAR 0 5
14354: PPUSH
14355: CALL 15562 0 5
14359: GO 14482
14361: LD_INT 302
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14406
14369: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14370: LD_VAR 0 6
14374: PPUSH
14375: LD_VAR 0 7
14379: PPUSH
14380: LD_VAR 0 8
14384: PPUSH
14385: LD_VAR 0 9
14389: PPUSH
14390: LD_VAR 0 4
14394: PPUSH
14395: LD_VAR 0 5
14399: PPUSH
14400: CALL 15653 0 6
14404: GO 14482
14406: LD_INT 303
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14451
14414: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14415: LD_VAR 0 6
14419: PPUSH
14420: LD_VAR 0 7
14424: PPUSH
14425: LD_VAR 0 8
14429: PPUSH
14430: LD_VAR 0 9
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: LD_VAR 0 5
14444: PPUSH
14445: CALL 14487 0 6
14449: GO 14482
14451: LD_INT 304
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14481
14459: POP
// hHackTeleport ( unit , x , y ) ; end ;
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_VAR 0 4
14469: PPUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: CALL 16246 0 3
14479: GO 14482
14481: POP
// end ;
14482: LD_VAR 0 12
14486: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14491: LD_VAR 0 1
14495: PUSH
14496: LD_INT 1
14498: LESS
14499: PUSH
14500: LD_VAR 0 1
14504: PUSH
14505: LD_INT 3
14507: GREATER
14508: OR
14509: PUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_VAR 0 6
14519: PPUSH
14520: CALL_OW 428
14524: OR
14525: IFFALSE 14529
// exit ;
14527: GO 15249
// uc_side := your_side ;
14529: LD_ADDR_OWVAR 20
14533: PUSH
14534: LD_OWVAR 2
14538: ST_TO_ADDR
// uc_nation := nation ;
14539: LD_ADDR_OWVAR 21
14543: PUSH
14544: LD_VAR 0 1
14548: ST_TO_ADDR
// bc_level = 1 ;
14549: LD_ADDR_OWVAR 43
14553: PUSH
14554: LD_INT 1
14556: ST_TO_ADDR
// case btype of 1 :
14557: LD_VAR 0 2
14561: PUSH
14562: LD_INT 1
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14581
14570: POP
// bc_type := b_depot ; 2 :
14571: LD_ADDR_OWVAR 42
14575: PUSH
14576: LD_INT 0
14578: ST_TO_ADDR
14579: GO 15193
14581: LD_INT 2
14583: DOUBLE
14584: EQUAL
14585: IFTRUE 14589
14587: GO 14600
14589: POP
// bc_type := b_warehouse ; 3 :
14590: LD_ADDR_OWVAR 42
14594: PUSH
14595: LD_INT 1
14597: ST_TO_ADDR
14598: GO 15193
14600: LD_INT 3
14602: DOUBLE
14603: EQUAL
14604: IFTRUE 14608
14606: GO 14619
14608: POP
// bc_type := b_lab ; 4 .. 9 :
14609: LD_ADDR_OWVAR 42
14613: PUSH
14614: LD_INT 6
14616: ST_TO_ADDR
14617: GO 15193
14619: LD_INT 4
14621: DOUBLE
14622: GREATEREQUAL
14623: IFFALSE 14631
14625: LD_INT 9
14627: DOUBLE
14628: LESSEQUAL
14629: IFTRUE 14633
14631: GO 14685
14633: POP
// begin bc_type := b_lab_half ;
14634: LD_ADDR_OWVAR 42
14638: PUSH
14639: LD_INT 7
14641: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14642: LD_ADDR_OWVAR 44
14646: PUSH
14647: LD_INT 10
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: LD_INT 12
14655: PUSH
14656: LD_INT 15
14658: PUSH
14659: LD_INT 14
14661: PUSH
14662: LD_INT 13
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_VAR 0 2
14677: PUSH
14678: LD_INT 3
14680: MINUS
14681: ARRAY
14682: ST_TO_ADDR
// end ; 10 .. 13 :
14683: GO 15193
14685: LD_INT 10
14687: DOUBLE
14688: GREATEREQUAL
14689: IFFALSE 14697
14691: LD_INT 13
14693: DOUBLE
14694: LESSEQUAL
14695: IFTRUE 14699
14697: GO 14776
14699: POP
// begin bc_type := b_lab_full ;
14700: LD_ADDR_OWVAR 42
14704: PUSH
14705: LD_INT 8
14707: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14708: LD_ADDR_OWVAR 44
14712: PUSH
14713: LD_INT 10
14715: PUSH
14716: LD_INT 12
14718: PUSH
14719: LD_INT 14
14721: PUSH
14722: LD_INT 13
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: LD_VAR 0 2
14735: PUSH
14736: LD_INT 9
14738: MINUS
14739: ARRAY
14740: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14741: LD_ADDR_OWVAR 45
14745: PUSH
14746: LD_INT 11
14748: PUSH
14749: LD_INT 15
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: LD_INT 15
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: PUSH
14764: LD_VAR 0 2
14768: PUSH
14769: LD_INT 9
14771: MINUS
14772: ARRAY
14773: ST_TO_ADDR
// end ; 14 :
14774: GO 15193
14776: LD_INT 14
14778: DOUBLE
14779: EQUAL
14780: IFTRUE 14784
14782: GO 14795
14784: POP
// bc_type := b_workshop ; 15 :
14785: LD_ADDR_OWVAR 42
14789: PUSH
14790: LD_INT 2
14792: ST_TO_ADDR
14793: GO 15193
14795: LD_INT 15
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14803
14801: GO 14814
14803: POP
// bc_type := b_factory ; 16 :
14804: LD_ADDR_OWVAR 42
14808: PUSH
14809: LD_INT 3
14811: ST_TO_ADDR
14812: GO 15193
14814: LD_INT 16
14816: DOUBLE
14817: EQUAL
14818: IFTRUE 14822
14820: GO 14833
14822: POP
// bc_type := b_ext_gun ; 17 :
14823: LD_ADDR_OWVAR 42
14827: PUSH
14828: LD_INT 17
14830: ST_TO_ADDR
14831: GO 15193
14833: LD_INT 17
14835: DOUBLE
14836: EQUAL
14837: IFTRUE 14841
14839: GO 14869
14841: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14842: LD_ADDR_OWVAR 42
14846: PUSH
14847: LD_INT 19
14849: PUSH
14850: LD_INT 23
14852: PUSH
14853: LD_INT 19
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: PUSH
14861: LD_VAR 0 1
14865: ARRAY
14866: ST_TO_ADDR
14867: GO 15193
14869: LD_INT 18
14871: DOUBLE
14872: EQUAL
14873: IFTRUE 14877
14875: GO 14888
14877: POP
// bc_type := b_ext_radar ; 19 :
14878: LD_ADDR_OWVAR 42
14882: PUSH
14883: LD_INT 20
14885: ST_TO_ADDR
14886: GO 15193
14888: LD_INT 19
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 14907
14896: POP
// bc_type := b_ext_radio ; 20 :
14897: LD_ADDR_OWVAR 42
14901: PUSH
14902: LD_INT 22
14904: ST_TO_ADDR
14905: GO 15193
14907: LD_INT 20
14909: DOUBLE
14910: EQUAL
14911: IFTRUE 14915
14913: GO 14926
14915: POP
// bc_type := b_ext_siberium ; 21 :
14916: LD_ADDR_OWVAR 42
14920: PUSH
14921: LD_INT 21
14923: ST_TO_ADDR
14924: GO 15193
14926: LD_INT 21
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 14945
14934: POP
// bc_type := b_ext_computer ; 22 :
14935: LD_ADDR_OWVAR 42
14939: PUSH
14940: LD_INT 24
14942: ST_TO_ADDR
14943: GO 15193
14945: LD_INT 22
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 14964
14953: POP
// bc_type := b_ext_track ; 23 :
14954: LD_ADDR_OWVAR 42
14958: PUSH
14959: LD_INT 16
14961: ST_TO_ADDR
14962: GO 15193
14964: LD_INT 23
14966: DOUBLE
14967: EQUAL
14968: IFTRUE 14972
14970: GO 14983
14972: POP
// bc_type := b_ext_laser ; 24 :
14973: LD_ADDR_OWVAR 42
14977: PUSH
14978: LD_INT 25
14980: ST_TO_ADDR
14981: GO 15193
14983: LD_INT 24
14985: DOUBLE
14986: EQUAL
14987: IFTRUE 14991
14989: GO 15002
14991: POP
// bc_type := b_control_tower ; 25 :
14992: LD_ADDR_OWVAR 42
14996: PUSH
14997: LD_INT 36
14999: ST_TO_ADDR
15000: GO 15193
15002: LD_INT 25
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15010
15008: GO 15021
15010: POP
// bc_type := b_breastwork ; 26 :
15011: LD_ADDR_OWVAR 42
15015: PUSH
15016: LD_INT 31
15018: ST_TO_ADDR
15019: GO 15193
15021: LD_INT 26
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15040
15029: POP
// bc_type := b_bunker ; 27 :
15030: LD_ADDR_OWVAR 42
15034: PUSH
15035: LD_INT 32
15037: ST_TO_ADDR
15038: GO 15193
15040: LD_INT 27
15042: DOUBLE
15043: EQUAL
15044: IFTRUE 15048
15046: GO 15059
15048: POP
// bc_type := b_turret ; 28 :
15049: LD_ADDR_OWVAR 42
15053: PUSH
15054: LD_INT 33
15056: ST_TO_ADDR
15057: GO 15193
15059: LD_INT 28
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15078
15067: POP
// bc_type := b_armoury ; 29 :
15068: LD_ADDR_OWVAR 42
15072: PUSH
15073: LD_INT 4
15075: ST_TO_ADDR
15076: GO 15193
15078: LD_INT 29
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15097
15086: POP
// bc_type := b_barracks ; 30 :
15087: LD_ADDR_OWVAR 42
15091: PUSH
15092: LD_INT 5
15094: ST_TO_ADDR
15095: GO 15193
15097: LD_INT 30
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15116
15105: POP
// bc_type := b_solar_power ; 31 :
15106: LD_ADDR_OWVAR 42
15110: PUSH
15111: LD_INT 27
15113: ST_TO_ADDR
15114: GO 15193
15116: LD_INT 31
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15135
15124: POP
// bc_type := b_oil_power ; 32 :
15125: LD_ADDR_OWVAR 42
15129: PUSH
15130: LD_INT 26
15132: ST_TO_ADDR
15133: GO 15193
15135: LD_INT 32
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15143
15141: GO 15154
15143: POP
// bc_type := b_siberite_power ; 33 :
15144: LD_ADDR_OWVAR 42
15148: PUSH
15149: LD_INT 28
15151: ST_TO_ADDR
15152: GO 15193
15154: LD_INT 33
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15173
15162: POP
// bc_type := b_oil_mine ; 34 :
15163: LD_ADDR_OWVAR 42
15167: PUSH
15168: LD_INT 29
15170: ST_TO_ADDR
15171: GO 15193
15173: LD_INT 34
15175: DOUBLE
15176: EQUAL
15177: IFTRUE 15181
15179: GO 15192
15181: POP
// bc_type := b_siberite_mine ; end ;
15182: LD_ADDR_OWVAR 42
15186: PUSH
15187: LD_INT 30
15189: ST_TO_ADDR
15190: GO 15193
15192: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15193: LD_ADDR_VAR 0 8
15197: PUSH
15198: LD_VAR 0 5
15202: PPUSH
15203: LD_VAR 0 6
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: CALL_OW 47
15217: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15218: LD_OWVAR 42
15222: PUSH
15223: LD_INT 32
15225: PUSH
15226: LD_INT 33
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: IN
15233: IFFALSE 15249
// PlaceWeaponTurret ( b , weapon ) ;
15235: LD_VAR 0 8
15239: PPUSH
15240: LD_VAR 0 4
15244: PPUSH
15245: CALL_OW 431
// end ;
15249: LD_VAR 0 7
15253: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15254: LD_INT 0
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15260: LD_ADDR_VAR 0 4
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_OWVAR 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: LD_INT 30
15282: PUSH
15283: LD_INT 0
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 30
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 69
15313: ST_TO_ADDR
// if not tmp then
15314: LD_VAR 0 4
15318: NOT
15319: IFFALSE 15323
// exit ;
15321: GO 15382
// for i in tmp do
15323: LD_ADDR_VAR 0 2
15327: PUSH
15328: LD_VAR 0 4
15332: PUSH
15333: FOR_IN
15334: IFFALSE 15380
// for j = 1 to 3 do
15336: LD_ADDR_VAR 0 3
15340: PUSH
15341: DOUBLE
15342: LD_INT 1
15344: DEC
15345: ST_TO_ADDR
15346: LD_INT 3
15348: PUSH
15349: FOR_TO
15350: IFFALSE 15376
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 274
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 99999
15369: PPUSH
15370: CALL_OW 277
15374: GO 15349
15376: POP
15377: POP
15378: GO 15333
15380: POP
15381: POP
// end ;
15382: LD_VAR 0 1
15386: RET
// export function hHackSetLevel10 ; var i , j ; begin
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
15391: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15392: LD_ADDR_VAR 0 2
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: FOR_IN
15413: IFFALSE 15465
// if IsSelected ( i ) then
15415: LD_VAR 0 2
15419: PPUSH
15420: CALL_OW 306
15424: IFFALSE 15463
// begin for j := 1 to 4 do
15426: LD_ADDR_VAR 0 3
15430: PUSH
15431: DOUBLE
15432: LD_INT 1
15434: DEC
15435: ST_TO_ADDR
15436: LD_INT 4
15438: PUSH
15439: FOR_TO
15440: IFFALSE 15461
// SetSkill ( i , j , 10 ) ;
15442: LD_VAR 0 2
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_INT 10
15454: PPUSH
15455: CALL_OW 237
15459: GO 15439
15461: POP
15462: POP
// end ;
15463: GO 15412
15465: POP
15466: POP
// end ;
15467: LD_VAR 0 1
15471: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_OWVAR 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 21
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15555
// begin for j := 1 to 4 do
15516: LD_ADDR_VAR 0 3
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_INT 4
15528: PUSH
15529: FOR_TO
15530: IFFALSE 15551
// SetSkill ( i , j , 10 ) ;
15532: LD_VAR 0 2
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 10
15544: PPUSH
15545: CALL_OW 237
15549: GO 15529
15551: POP
15552: POP
// end ;
15553: GO 15513
15555: POP
15556: POP
// end ;
15557: LD_VAR 0 1
15561: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15562: LD_INT 0
15564: PPUSH
// uc_side := your_side ;
15565: LD_ADDR_OWVAR 20
15569: PUSH
15570: LD_OWVAR 2
15574: ST_TO_ADDR
// uc_nation := nation ;
15575: LD_ADDR_OWVAR 21
15579: PUSH
15580: LD_VAR 0 1
15584: ST_TO_ADDR
// InitHc ;
15585: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15589: LD_INT 0
15591: PPUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15606: LD_VAR 0 4
15610: PPUSH
15611: LD_VAR 0 5
15615: PPUSH
15616: CALL_OW 428
15620: PUSH
15621: LD_INT 0
15623: EQUAL
15624: IFFALSE 15648
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15626: CALL_OW 44
15630: PPUSH
15631: LD_VAR 0 4
15635: PPUSH
15636: LD_VAR 0 5
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: CALL_OW 48
// end ;
15648: LD_VAR 0 6
15652: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15653: LD_INT 0
15655: PPUSH
15656: PPUSH
// uc_side := your_side ;
15657: LD_ADDR_OWVAR 20
15661: PUSH
15662: LD_OWVAR 2
15666: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15667: LD_VAR 0 1
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: LD_INT 2
15677: PUSH
15678: LD_INT 3
15680: PUSH
15681: LD_INT 4
15683: PUSH
15684: LD_INT 5
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: IN
15694: IFFALSE 15706
// uc_nation := nation_american else
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
15704: GO 15749
// if chassis in [ 11 , 12 , 13 , 14 ] then
15706: LD_VAR 0 1
15710: PUSH
15711: LD_INT 11
15713: PUSH
15714: LD_INT 12
15716: PUSH
15717: LD_INT 13
15719: PUSH
15720: LD_INT 14
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: IN
15729: IFFALSE 15741
// uc_nation := nation_arabian else
15731: LD_ADDR_OWVAR 21
15735: PUSH
15736: LD_INT 2
15738: ST_TO_ADDR
15739: GO 15749
// uc_nation := nation_russian ;
15741: LD_ADDR_OWVAR 21
15745: PUSH
15746: LD_INT 3
15748: ST_TO_ADDR
// vc_chassis := chassis ;
15749: LD_ADDR_OWVAR 37
15753: PUSH
15754: LD_VAR 0 1
15758: ST_TO_ADDR
// vc_engine := engine ;
15759: LD_ADDR_OWVAR 39
15763: PUSH
15764: LD_VAR 0 2
15768: ST_TO_ADDR
// vc_control := control ;
15769: LD_ADDR_OWVAR 38
15773: PUSH
15774: LD_VAR 0 3
15778: ST_TO_ADDR
// vc_weapon := weapon ;
15779: LD_ADDR_OWVAR 40
15783: PUSH
15784: LD_VAR 0 4
15788: ST_TO_ADDR
// un := CreateVehicle ;
15789: LD_ADDR_VAR 0 8
15793: PUSH
15794: CALL_OW 45
15798: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15799: LD_VAR 0 8
15803: PPUSH
15804: LD_INT 0
15806: PPUSH
15807: LD_INT 5
15809: PPUSH
15810: CALL_OW 12
15814: PPUSH
15815: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15819: LD_VAR 0 8
15823: PPUSH
15824: LD_VAR 0 5
15828: PPUSH
15829: LD_VAR 0 6
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 48
// end ;
15841: LD_VAR 0 7
15845: RET
// export hInvincible ; every 1 do
15846: GO 15848
15848: DISABLE
// hInvincible := [ ] ;
15849: LD_ADDR_EXP 64
15853: PUSH
15854: EMPTY
15855: ST_TO_ADDR
15856: END
// every 10 do var i ;
15857: GO 15859
15859: DISABLE
15860: LD_INT 0
15862: PPUSH
// begin enable ;
15863: ENABLE
// if not hInvincible then
15864: LD_EXP 64
15868: NOT
15869: IFFALSE 15873
// exit ;
15871: GO 15917
// for i in hInvincible do
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_EXP 64
15882: PUSH
15883: FOR_IN
15884: IFFALSE 15915
// if GetLives ( i ) < 1000 then
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 256
15895: PUSH
15896: LD_INT 1000
15898: LESS
15899: IFFALSE 15913
// SetLives ( i , 1000 ) ;
15901: LD_VAR 0 1
15905: PPUSH
15906: LD_INT 1000
15908: PPUSH
15909: CALL_OW 234
15913: GO 15883
15915: POP
15916: POP
// end ;
15917: PPOPN 1
15919: END
// export function hHackInvincible ; var i ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: LD_INT 2
15931: PUSH
15932: LD_INT 21
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: PUSH
15962: FOR_IN
15963: IFFALSE 16024
// if IsSelected ( i ) then
15965: LD_VAR 0 2
15969: PPUSH
15970: CALL_OW 306
15974: IFFALSE 16022
// begin if i in hInvincible then
15976: LD_VAR 0 2
15980: PUSH
15981: LD_EXP 64
15985: IN
15986: IFFALSE 16006
// hInvincible := hInvincible diff i else
15988: LD_ADDR_EXP 64
15992: PUSH
15993: LD_EXP 64
15997: PUSH
15998: LD_VAR 0 2
16002: DIFF
16003: ST_TO_ADDR
16004: GO 16022
// hInvincible := hInvincible union i ;
16006: LD_ADDR_EXP 64
16010: PUSH
16011: LD_EXP 64
16015: PUSH
16016: LD_VAR 0 2
16020: UNION
16021: ST_TO_ADDR
// end ;
16022: GO 15962
16024: POP
16025: POP
// end ;
16026: LD_VAR 0 1
16030: RET
// export function hHackInvisible ; var i , j ; begin
16031: LD_INT 0
16033: PPUSH
16034: PPUSH
16035: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_INT 21
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PPUSH
16051: CALL_OW 69
16055: PUSH
16056: FOR_IN
16057: IFFALSE 16081
// if IsSelected ( i ) then
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 306
16068: IFFALSE 16079
// ComForceInvisible ( i ) ;
16070: LD_VAR 0 2
16074: PPUSH
16075: CALL_OW 496
16079: GO 16056
16081: POP
16082: POP
// end ;
16083: LD_VAR 0 1
16087: RET
// export function hHackChangeYourSide ; begin
16088: LD_INT 0
16090: PPUSH
// if your_side = 8 then
16091: LD_OWVAR 2
16095: PUSH
16096: LD_INT 8
16098: EQUAL
16099: IFFALSE 16111
// your_side := 0 else
16101: LD_ADDR_OWVAR 2
16105: PUSH
16106: LD_INT 0
16108: ST_TO_ADDR
16109: GO 16125
// your_side := your_side + 1 ;
16111: LD_ADDR_OWVAR 2
16115: PUSH
16116: LD_OWVAR 2
16120: PUSH
16121: LD_INT 1
16123: PLUS
16124: ST_TO_ADDR
// end ;
16125: LD_VAR 0 1
16129: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
16134: PPUSH
// for i in all_units do
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_OWVAR 3
16144: PUSH
16145: FOR_IN
16146: IFFALSE 16224
// if IsSelected ( i ) then
16148: LD_VAR 0 2
16152: PPUSH
16153: CALL_OW 306
16157: IFFALSE 16222
// begin j := GetSide ( i ) ;
16159: LD_ADDR_VAR 0 3
16163: PUSH
16164: LD_VAR 0 2
16168: PPUSH
16169: CALL_OW 255
16173: ST_TO_ADDR
// if j = 8 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 8
16181: EQUAL
16182: IFFALSE 16194
// j := 0 else
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
16192: GO 16208
// j := j + 1 ;
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: LD_VAR 0 3
16203: PUSH
16204: LD_INT 1
16206: PLUS
16207: ST_TO_ADDR
// SetSide ( i , j ) ;
16208: LD_VAR 0 2
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL_OW 235
// end ;
16222: GO 16145
16224: POP
16225: POP
// end ;
16226: LD_VAR 0 1
16230: RET
// export function hHackFog ; begin
16231: LD_INT 0
16233: PPUSH
// FogOff ( true ) ;
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 344
// end ;
16241: LD_VAR 0 1
16245: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16246: LD_INT 0
16248: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16249: LD_VAR 0 1
16253: PPUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: LD_INT 1
16269: PPUSH
16270: CALL_OW 483
// CenterOnXY ( x , y ) ;
16274: LD_VAR 0 2
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: CALL_OW 84
// end ;
16288: LD_VAR 0 4
16292: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16297: LD_VAR 0 1
16301: NOT
16302: PUSH
16303: LD_VAR 0 2
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: CALL_OW 488
16317: NOT
16318: OR
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 266
16329: PUSH
16330: LD_INT 3
16332: NONEQUAL
16333: PUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 247
16343: PUSH
16344: LD_INT 1
16346: EQUAL
16347: NOT
16348: AND
16349: OR
16350: IFFALSE 16354
// exit ;
16352: GO 16503
// if GetType ( factory ) = unit_human then
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 247
16363: PUSH
16364: LD_INT 1
16366: EQUAL
16367: IFFALSE 16384
// factory := IsInUnit ( factory ) ;
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 310
16383: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 266
16393: PUSH
16394: LD_INT 3
16396: NONEQUAL
16397: IFFALSE 16401
// exit ;
16399: GO 16503
// if HexInfo ( x , y ) = factory then
16401: LD_VAR 0 2
16405: PPUSH
16406: LD_VAR 0 3
16410: PPUSH
16411: CALL_OW 428
16415: PUSH
16416: LD_VAR 0 1
16420: EQUAL
16421: IFFALSE 16448
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16423: LD_ADDR_EXP 65
16427: PUSH
16428: LD_EXP 65
16432: PPUSH
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_INT 0
16440: PPUSH
16441: CALL_OW 1
16445: ST_TO_ADDR
16446: GO 16499
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16448: LD_ADDR_EXP 65
16452: PUSH
16453: LD_EXP 65
16457: PPUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 255
16472: PUSH
16473: LD_VAR 0 1
16477: PUSH
16478: LD_VAR 0 2
16482: PUSH
16483: LD_VAR 0 3
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 1
16498: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16499: CALL 16508 0 0
// end ;
16503: LD_VAR 0 4
16507: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16508: LD_INT 0
16510: PPUSH
16511: PPUSH
16512: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16513: LD_STRING resetFactoryWaypoint();
16515: PPUSH
16516: CALL_OW 559
// if factoryWaypoints then
16520: LD_EXP 65
16524: IFFALSE 16650
// begin list := PrepareArray ( factoryWaypoints ) ;
16526: LD_ADDR_VAR 0 3
16530: PUSH
16531: LD_EXP 65
16535: PPUSH
16536: CALL 63190 0 1
16540: ST_TO_ADDR
// for i := 1 to list do
16541: LD_ADDR_VAR 0 2
16545: PUSH
16546: DOUBLE
16547: LD_INT 1
16549: DEC
16550: ST_TO_ADDR
16551: LD_VAR 0 3
16555: PUSH
16556: FOR_TO
16557: IFFALSE 16648
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16559: LD_STRING setFactoryWaypointXY(
16561: PUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_VAR 0 2
16571: ARRAY
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: STR
16577: PUSH
16578: LD_STRING ,
16580: STR
16581: PUSH
16582: LD_VAR 0 3
16586: PUSH
16587: LD_VAR 0 2
16591: ARRAY
16592: PUSH
16593: LD_INT 2
16595: ARRAY
16596: STR
16597: PUSH
16598: LD_STRING ,
16600: STR
16601: PUSH
16602: LD_VAR 0 3
16606: PUSH
16607: LD_VAR 0 2
16611: ARRAY
16612: PUSH
16613: LD_INT 3
16615: ARRAY
16616: STR
16617: PUSH
16618: LD_STRING ,
16620: STR
16621: PUSH
16622: LD_VAR 0 3
16626: PUSH
16627: LD_VAR 0 2
16631: ARRAY
16632: PUSH
16633: LD_INT 4
16635: ARRAY
16636: STR
16637: PUSH
16638: LD_STRING )
16640: STR
16641: PPUSH
16642: CALL_OW 559
16646: GO 16556
16648: POP
16649: POP
// end ; end ;
16650: LD_VAR 0 1
16654: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16655: LD_INT 0
16657: PPUSH
// if HexInfo ( x , y ) = warehouse then
16658: LD_VAR 0 2
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 428
16672: PUSH
16673: LD_VAR 0 1
16677: EQUAL
16678: IFFALSE 16705
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16680: LD_ADDR_EXP 66
16684: PUSH
16685: LD_EXP 66
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL_OW 1
16702: ST_TO_ADDR
16703: GO 16756
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16705: LD_ADDR_EXP 66
16709: PUSH
16710: LD_EXP 66
16714: PPUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 255
16729: PUSH
16730: LD_VAR 0 1
16734: PUSH
16735: LD_VAR 0 2
16739: PUSH
16740: LD_VAR 0 3
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 1
16755: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16756: CALL 16765 0 0
// end ;
16760: LD_VAR 0 4
16764: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16765: LD_INT 0
16767: PPUSH
16768: PPUSH
16769: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16770: LD_STRING resetWarehouseGatheringPoints();
16772: PPUSH
16773: CALL_OW 559
// if warehouseGatheringPoints then
16777: LD_EXP 66
16781: IFFALSE 16907
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16783: LD_ADDR_VAR 0 3
16787: PUSH
16788: LD_EXP 66
16792: PPUSH
16793: CALL 63190 0 1
16797: ST_TO_ADDR
// for i := 1 to list do
16798: LD_ADDR_VAR 0 2
16802: PUSH
16803: DOUBLE
16804: LD_INT 1
16806: DEC
16807: ST_TO_ADDR
16808: LD_VAR 0 3
16812: PUSH
16813: FOR_TO
16814: IFFALSE 16905
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16816: LD_STRING setWarehouseGatheringPointXY(
16818: PUSH
16819: LD_VAR 0 3
16823: PUSH
16824: LD_VAR 0 2
16828: ARRAY
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: STR
16834: PUSH
16835: LD_STRING ,
16837: STR
16838: PUSH
16839: LD_VAR 0 3
16843: PUSH
16844: LD_VAR 0 2
16848: ARRAY
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: STR
16854: PUSH
16855: LD_STRING ,
16857: STR
16858: PUSH
16859: LD_VAR 0 3
16863: PUSH
16864: LD_VAR 0 2
16868: ARRAY
16869: PUSH
16870: LD_INT 3
16872: ARRAY
16873: STR
16874: PUSH
16875: LD_STRING ,
16877: STR
16878: PUSH
16879: LD_VAR 0 3
16883: PUSH
16884: LD_VAR 0 2
16888: ARRAY
16889: PUSH
16890: LD_INT 4
16892: ARRAY
16893: STR
16894: PUSH
16895: LD_STRING )
16897: STR
16898: PPUSH
16899: CALL_OW 559
16903: GO 16813
16905: POP
16906: POP
// end ; end ;
16907: LD_VAR 0 1
16911: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16912: LD_EXP 66
16916: IFFALSE 17601
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
// begin enable ;
16932: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16933: LD_ADDR_VAR 0 3
16937: PUSH
16938: LD_EXP 66
16942: PPUSH
16943: CALL 63190 0 1
16947: ST_TO_ADDR
// if not list then
16948: LD_VAR 0 3
16952: NOT
16953: IFFALSE 16957
// exit ;
16955: GO 17601
// for i := 1 to list do
16957: LD_ADDR_VAR 0 1
16961: PUSH
16962: DOUBLE
16963: LD_INT 1
16965: DEC
16966: ST_TO_ADDR
16967: LD_VAR 0 3
16971: PUSH
16972: FOR_TO
16973: IFFALSE 17599
// begin depot := list [ i ] [ 2 ] ;
16975: LD_ADDR_VAR 0 8
16979: PUSH
16980: LD_VAR 0 3
16984: PUSH
16985: LD_VAR 0 1
16989: ARRAY
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16995: LD_ADDR_VAR 0 5
16999: PUSH
17000: LD_VAR 0 3
17004: PUSH
17005: LD_VAR 0 1
17009: ARRAY
17010: PUSH
17011: LD_INT 1
17013: ARRAY
17014: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17015: LD_VAR 0 8
17019: PPUSH
17020: CALL_OW 301
17024: PUSH
17025: LD_VAR 0 5
17029: PUSH
17030: LD_VAR 0 8
17034: PPUSH
17035: CALL_OW 255
17039: NONEQUAL
17040: OR
17041: IFFALSE 17070
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17043: LD_ADDR_EXP 66
17047: PUSH
17048: LD_EXP 66
17052: PPUSH
17053: LD_VAR 0 8
17057: PPUSH
17058: LD_INT 0
17060: PPUSH
17061: CALL_OW 1
17065: ST_TO_ADDR
// exit ;
17066: POP
17067: POP
17068: GO 17601
// end ; x := list [ i ] [ 3 ] ;
17070: LD_ADDR_VAR 0 6
17074: PUSH
17075: LD_VAR 0 3
17079: PUSH
17080: LD_VAR 0 1
17084: ARRAY
17085: PUSH
17086: LD_INT 3
17088: ARRAY
17089: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17090: LD_ADDR_VAR 0 7
17094: PUSH
17095: LD_VAR 0 3
17099: PUSH
17100: LD_VAR 0 1
17104: ARRAY
17105: PUSH
17106: LD_INT 4
17108: ARRAY
17109: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17110: LD_ADDR_VAR 0 9
17114: PUSH
17115: LD_VAR 0 6
17119: PPUSH
17120: LD_VAR 0 7
17124: PPUSH
17125: LD_INT 16
17127: PPUSH
17128: CALL 61778 0 3
17132: ST_TO_ADDR
// if not cratesNearbyPoint then
17133: LD_VAR 0 9
17137: NOT
17138: IFFALSE 17144
// exit ;
17140: POP
17141: POP
17142: GO 17601
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17144: LD_ADDR_VAR 0 4
17148: PUSH
17149: LD_INT 22
17151: PUSH
17152: LD_VAR 0 5
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: LD_INT 60
17166: PUSH
17167: EMPTY
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 91
17176: PUSH
17177: LD_VAR 0 8
17181: PUSH
17182: LD_INT 6
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 2
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 25
17205: PUSH
17206: LD_INT 16
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: PPUSH
17224: CALL_OW 69
17228: PUSH
17229: LD_VAR 0 8
17233: PPUSH
17234: CALL_OW 313
17238: PPUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 60
17244: PUSH
17245: EMPTY
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: LD_INT 25
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 25
17267: PUSH
17268: LD_INT 16
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 72
17288: UNION
17289: ST_TO_ADDR
// if tmp then
17290: LD_VAR 0 4
17294: IFFALSE 17374
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17296: LD_ADDR_VAR 0 4
17300: PUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: LD_INT 3
17308: PPUSH
17309: CALL 59747 0 2
17313: ST_TO_ADDR
// for j in tmp do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_VAR 0 4
17323: PUSH
17324: FOR_IN
17325: IFFALSE 17368
// begin if IsInUnit ( j ) then
17327: LD_VAR 0 2
17331: PPUSH
17332: CALL_OW 310
17336: IFFALSE 17347
// ComExit ( j ) ;
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL 59830 0 1
// AddComCollect ( j , x , y ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_VAR 0 6
17356: PPUSH
17357: LD_VAR 0 7
17361: PPUSH
17362: CALL_OW 177
// end ;
17366: GO 17324
17368: POP
17369: POP
// exit ;
17370: POP
17371: POP
17372: GO 17601
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_INT 22
17381: PUSH
17382: LD_VAR 0 5
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 91
17393: PUSH
17394: LD_VAR 0 8
17398: PUSH
17399: LD_INT 8
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 34
17412: PUSH
17413: LD_INT 12
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 34
17422: PUSH
17423: LD_INT 51
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 34
17432: PUSH
17433: LD_INT 32
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 34
17442: PUSH
17443: LD_INT 89
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: ST_TO_ADDR
// if tmp then
17467: LD_VAR 0 4
17471: IFFALSE 17597
// begin for j in tmp do
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_VAR 0 4
17482: PUSH
17483: FOR_IN
17484: IFFALSE 17595
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17486: LD_VAR 0 2
17490: PPUSH
17491: CALL_OW 262
17495: PUSH
17496: LD_INT 3
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 2
17504: PPUSH
17505: CALL_OW 261
17509: PUSH
17510: LD_INT 20
17512: GREATER
17513: OR
17514: PUSH
17515: LD_VAR 0 2
17519: PPUSH
17520: CALL_OW 314
17524: NOT
17525: AND
17526: PUSH
17527: LD_VAR 0 2
17531: PPUSH
17532: CALL_OW 263
17536: PUSH
17537: LD_INT 1
17539: NONEQUAL
17540: PUSH
17541: LD_VAR 0 2
17545: PPUSH
17546: CALL_OW 311
17550: OR
17551: AND
17552: IFFALSE 17593
// begin ComCollect ( j , x , y ) ;
17554: LD_VAR 0 2
17558: PPUSH
17559: LD_VAR 0 6
17563: PPUSH
17564: LD_VAR 0 7
17568: PPUSH
17569: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_VAR 0 8
17582: PPUSH
17583: CALL_OW 172
// exit ;
17587: POP
17588: POP
17589: POP
17590: POP
17591: GO 17601
// end ;
17593: GO 17483
17595: POP
17596: POP
// end ; end ;
17597: GO 16972
17599: POP
17600: POP
// end ; end_of_file
17601: PPOPN 9
17603: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17604: LD_INT 0
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 264
17619: PUSH
17620: LD_INT 91
17622: EQUAL
17623: IFFALSE 17695
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17625: LD_INT 68
17627: PPUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 255
17637: PPUSH
17638: CALL_OW 321
17642: PUSH
17643: LD_INT 2
17645: EQUAL
17646: IFFALSE 17658
// eff := 70 else
17648: LD_ADDR_VAR 0 4
17652: PUSH
17653: LD_INT 70
17655: ST_TO_ADDR
17656: GO 17666
// eff := 30 ;
17658: LD_ADDR_VAR 0 4
17662: PUSH
17663: LD_INT 30
17665: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 250
17675: PPUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 251
17685: PPUSH
17686: LD_VAR 0 4
17690: PPUSH
17691: CALL_OW 495
// end ; end ;
17695: LD_VAR 0 2
17699: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17700: LD_INT 0
17702: PPUSH
// end ;
17703: LD_VAR 0 4
17707: RET
// export function SOS_Command ( cmd ) ; begin
17708: LD_INT 0
17710: PPUSH
// end ;
17711: LD_VAR 0 2
17715: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17716: LD_INT 0
17718: PPUSH
// end ;
17719: LD_VAR 0 6
17723: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
// if not vehicle or not factory then
17728: LD_VAR 0 1
17732: NOT
17733: PUSH
17734: LD_VAR 0 2
17738: NOT
17739: OR
17740: IFFALSE 17744
// exit ;
17742: GO 17975
// if factoryWaypoints >= factory then
17744: LD_EXP 65
17748: PUSH
17749: LD_VAR 0 2
17753: GREATEREQUAL
17754: IFFALSE 17975
// if factoryWaypoints [ factory ] then
17756: LD_EXP 65
17760: PUSH
17761: LD_VAR 0 2
17765: ARRAY
17766: IFFALSE 17975
// begin if GetControl ( vehicle ) = control_manual then
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 263
17777: PUSH
17778: LD_INT 1
17780: EQUAL
17781: IFFALSE 17862
// begin driver := IsDrivenBy ( vehicle ) ;
17783: LD_ADDR_VAR 0 4
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 311
17797: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17798: LD_VAR 0 4
17802: PPUSH
17803: LD_EXP 65
17807: PUSH
17808: LD_VAR 0 2
17812: ARRAY
17813: PUSH
17814: LD_INT 3
17816: ARRAY
17817: PPUSH
17818: LD_EXP 65
17822: PUSH
17823: LD_VAR 0 2
17827: ARRAY
17828: PUSH
17829: LD_INT 4
17831: ARRAY
17832: PPUSH
17833: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17837: LD_VAR 0 4
17841: PPUSH
17842: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17846: LD_VAR 0 4
17850: PPUSH
17851: LD_VAR 0 2
17855: PPUSH
17856: CALL_OW 180
// end else
17860: GO 17975
// if GetControl ( vehicle ) = control_remote then
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 263
17871: PUSH
17872: LD_INT 2
17874: EQUAL
17875: IFFALSE 17936
// begin wait ( 0 0$2 ) ;
17877: LD_INT 70
17879: PPUSH
17880: CALL_OW 67
// if Connect ( vehicle ) then
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL 30162 0 1
17893: IFFALSE 17934
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17895: LD_VAR 0 1
17899: PPUSH
17900: LD_EXP 65
17904: PUSH
17905: LD_VAR 0 2
17909: ARRAY
17910: PUSH
17911: LD_INT 3
17913: ARRAY
17914: PPUSH
17915: LD_EXP 65
17919: PUSH
17920: LD_VAR 0 2
17924: ARRAY
17925: PUSH
17926: LD_INT 4
17928: ARRAY
17929: PPUSH
17930: CALL_OW 171
// end else
17934: GO 17975
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17936: LD_VAR 0 1
17940: PPUSH
17941: LD_EXP 65
17945: PUSH
17946: LD_VAR 0 2
17950: ARRAY
17951: PUSH
17952: LD_INT 3
17954: ARRAY
17955: PPUSH
17956: LD_EXP 65
17960: PUSH
17961: LD_VAR 0 2
17965: ARRAY
17966: PUSH
17967: LD_INT 4
17969: ARRAY
17970: PPUSH
17971: CALL_OW 171
// end ; end ;
17975: LD_VAR 0 3
17979: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17980: LD_INT 0
17982: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17983: LD_VAR 0 1
17987: PUSH
17988: LD_INT 250
17990: EQUAL
17991: PUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: CALL_OW 264
18001: PUSH
18002: LD_INT 81
18004: EQUAL
18005: AND
18006: IFFALSE 18027
// MinerPlaceMine ( unit , x , y ) ;
18008: LD_VAR 0 2
18012: PPUSH
18013: LD_VAR 0 4
18017: PPUSH
18018: LD_VAR 0 5
18022: PPUSH
18023: CALL 20412 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18027: LD_VAR 0 1
18031: PUSH
18032: LD_INT 251
18034: EQUAL
18035: PUSH
18036: LD_VAR 0 2
18040: PPUSH
18041: CALL_OW 264
18045: PUSH
18046: LD_INT 81
18048: EQUAL
18049: AND
18050: IFFALSE 18071
// MinerDetonateMine ( unit , x , y ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_VAR 0 4
18061: PPUSH
18062: LD_VAR 0 5
18066: PPUSH
18067: CALL 20687 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18071: LD_VAR 0 1
18075: PUSH
18076: LD_INT 252
18078: EQUAL
18079: PUSH
18080: LD_VAR 0 2
18084: PPUSH
18085: CALL_OW 264
18089: PUSH
18090: LD_INT 81
18092: EQUAL
18093: AND
18094: IFFALSE 18115
// MinerCreateMinefield ( unit , x , y ) ;
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 4
18105: PPUSH
18106: LD_VAR 0 5
18110: PPUSH
18111: CALL 21104 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 253
18122: EQUAL
18123: PUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL_OW 257
18133: PUSH
18134: LD_INT 5
18136: EQUAL
18137: AND
18138: IFFALSE 18159
// ComBinocular ( unit , x , y ) ;
18140: LD_VAR 0 2
18144: PPUSH
18145: LD_VAR 0 4
18149: PPUSH
18150: LD_VAR 0 5
18154: PPUSH
18155: CALL 21473 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18159: LD_VAR 0 1
18163: PUSH
18164: LD_INT 254
18166: EQUAL
18167: PUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: CALL_OW 264
18177: PUSH
18178: LD_INT 99
18180: EQUAL
18181: AND
18182: PUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: CALL_OW 263
18192: PUSH
18193: LD_INT 3
18195: EQUAL
18196: AND
18197: IFFALSE 18213
// HackDestroyVehicle ( unit , selectedUnit ) ;
18199: LD_VAR 0 2
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: CALL 19776 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18213: LD_VAR 0 1
18217: PUSH
18218: LD_INT 255
18220: EQUAL
18221: PUSH
18222: LD_VAR 0 2
18226: PPUSH
18227: CALL_OW 264
18231: PUSH
18232: LD_INT 14
18234: PUSH
18235: LD_INT 53
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: IN
18242: AND
18243: PUSH
18244: LD_VAR 0 4
18248: PPUSH
18249: LD_VAR 0 5
18253: PPUSH
18254: CALL_OW 488
18258: AND
18259: IFFALSE 18283
// CutTreeXYR ( unit , x , y , 12 ) ;
18261: LD_VAR 0 2
18265: PPUSH
18266: LD_VAR 0 4
18270: PPUSH
18271: LD_VAR 0 5
18275: PPUSH
18276: LD_INT 12
18278: PPUSH
18279: CALL 18346 0 4
// if cmd = 256 then
18283: LD_VAR 0 1
18287: PUSH
18288: LD_INT 256
18290: EQUAL
18291: IFFALSE 18312
// SetFactoryWaypoint ( unit , x , y ) ;
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_VAR 0 4
18302: PPUSH
18303: LD_VAR 0 5
18307: PPUSH
18308: CALL 16293 0 3
// if cmd = 257 then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_INT 257
18319: EQUAL
18320: IFFALSE 18341
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18322: LD_VAR 0 2
18326: PPUSH
18327: LD_VAR 0 4
18331: PPUSH
18332: LD_VAR 0 5
18336: PPUSH
18337: CALL 16655 0 3
// end ;
18341: LD_VAR 0 6
18345: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18357: LD_VAR 0 1
18361: NOT
18362: PUSH
18363: LD_VAR 0 2
18367: PPUSH
18368: LD_VAR 0 3
18372: PPUSH
18373: CALL_OW 488
18377: NOT
18378: OR
18379: PUSH
18380: LD_VAR 0 4
18384: NOT
18385: OR
18386: IFFALSE 18390
// exit ;
18388: GO 18730
// list := [ ] ;
18390: LD_ADDR_VAR 0 13
18394: PUSH
18395: EMPTY
18396: ST_TO_ADDR
// if x - r < 0 then
18397: LD_VAR 0 2
18401: PUSH
18402: LD_VAR 0 4
18406: MINUS
18407: PUSH
18408: LD_INT 0
18410: LESS
18411: IFFALSE 18423
// min_x := 0 else
18413: LD_ADDR_VAR 0 7
18417: PUSH
18418: LD_INT 0
18420: ST_TO_ADDR
18421: GO 18439
// min_x := x - r ;
18423: LD_ADDR_VAR 0 7
18427: PUSH
18428: LD_VAR 0 2
18432: PUSH
18433: LD_VAR 0 4
18437: MINUS
18438: ST_TO_ADDR
// if y - r < 0 then
18439: LD_VAR 0 3
18443: PUSH
18444: LD_VAR 0 4
18448: MINUS
18449: PUSH
18450: LD_INT 0
18452: LESS
18453: IFFALSE 18465
// min_y := 0 else
18455: LD_ADDR_VAR 0 8
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
18463: GO 18481
// min_y := y - r ;
18465: LD_ADDR_VAR 0 8
18469: PUSH
18470: LD_VAR 0 3
18474: PUSH
18475: LD_VAR 0 4
18479: MINUS
18480: ST_TO_ADDR
// max_x := x + r ;
18481: LD_ADDR_VAR 0 9
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: LD_VAR 0 4
18495: PLUS
18496: ST_TO_ADDR
// max_y := y + r ;
18497: LD_ADDR_VAR 0 10
18501: PUSH
18502: LD_VAR 0 3
18506: PUSH
18507: LD_VAR 0 4
18511: PLUS
18512: ST_TO_ADDR
// for _x = min_x to max_x do
18513: LD_ADDR_VAR 0 11
18517: PUSH
18518: DOUBLE
18519: LD_VAR 0 7
18523: DEC
18524: ST_TO_ADDR
18525: LD_VAR 0 9
18529: PUSH
18530: FOR_TO
18531: IFFALSE 18648
// for _y = min_y to max_y do
18533: LD_ADDR_VAR 0 12
18537: PUSH
18538: DOUBLE
18539: LD_VAR 0 8
18543: DEC
18544: ST_TO_ADDR
18545: LD_VAR 0 10
18549: PUSH
18550: FOR_TO
18551: IFFALSE 18644
// begin if not ValidHex ( _x , _y ) then
18553: LD_VAR 0 11
18557: PPUSH
18558: LD_VAR 0 12
18562: PPUSH
18563: CALL_OW 488
18567: NOT
18568: IFFALSE 18572
// continue ;
18570: GO 18550
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18572: LD_VAR 0 11
18576: PPUSH
18577: LD_VAR 0 12
18581: PPUSH
18582: CALL_OW 351
18586: PUSH
18587: LD_VAR 0 11
18591: PPUSH
18592: LD_VAR 0 12
18596: PPUSH
18597: CALL_OW 554
18601: AND
18602: IFFALSE 18642
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18604: LD_ADDR_VAR 0 13
18608: PUSH
18609: LD_VAR 0 13
18613: PPUSH
18614: LD_VAR 0 13
18618: PUSH
18619: LD_INT 1
18621: PLUS
18622: PPUSH
18623: LD_VAR 0 11
18627: PUSH
18628: LD_VAR 0 12
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 2
18641: ST_TO_ADDR
// end ;
18642: GO 18550
18644: POP
18645: POP
18646: GO 18530
18648: POP
18649: POP
// if not list then
18650: LD_VAR 0 13
18654: NOT
18655: IFFALSE 18659
// exit ;
18657: GO 18730
// for i in list do
18659: LD_ADDR_VAR 0 6
18663: PUSH
18664: LD_VAR 0 13
18668: PUSH
18669: FOR_IN
18670: IFFALSE 18728
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18672: LD_VAR 0 1
18676: PPUSH
18677: LD_STRING M
18679: PUSH
18680: LD_VAR 0 6
18684: PUSH
18685: LD_INT 1
18687: ARRAY
18688: PUSH
18689: LD_VAR 0 6
18693: PUSH
18694: LD_INT 2
18696: ARRAY
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 0
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: PPUSH
18722: CALL_OW 447
18726: GO 18669
18728: POP
18729: POP
// end ;
18730: LD_VAR 0 5
18734: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18735: LD_EXP 68
18739: NOT
18740: IFFALSE 18790
18742: GO 18744
18744: DISABLE
// begin initHack := true ;
18745: LD_ADDR_EXP 68
18749: PUSH
18750: LD_INT 1
18752: ST_TO_ADDR
// hackTanks := [ ] ;
18753: LD_ADDR_EXP 69
18757: PUSH
18758: EMPTY
18759: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18760: LD_ADDR_EXP 70
18764: PUSH
18765: EMPTY
18766: ST_TO_ADDR
// hackLimit := 3 ;
18767: LD_ADDR_EXP 71
18771: PUSH
18772: LD_INT 3
18774: ST_TO_ADDR
// hackDist := 12 ;
18775: LD_ADDR_EXP 72
18779: PUSH
18780: LD_INT 12
18782: ST_TO_ADDR
// hackCounter := [ ] ;
18783: LD_ADDR_EXP 73
18787: PUSH
18788: EMPTY
18789: ST_TO_ADDR
// end ;
18790: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18791: LD_EXP 68
18795: PUSH
18796: LD_INT 34
18798: PUSH
18799: LD_INT 99
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PPUSH
18806: CALL_OW 69
18810: AND
18811: IFFALSE 19064
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
// begin enable ;
18820: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18821: LD_ADDR_VAR 0 1
18825: PUSH
18826: LD_INT 34
18828: PUSH
18829: LD_INT 99
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PPUSH
18836: CALL_OW 69
18840: PUSH
18841: FOR_IN
18842: IFFALSE 19062
// begin if not i in hackTanks then
18844: LD_VAR 0 1
18848: PUSH
18849: LD_EXP 69
18853: IN
18854: NOT
18855: IFFALSE 18938
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18857: LD_ADDR_EXP 69
18861: PUSH
18862: LD_EXP 69
18866: PPUSH
18867: LD_EXP 69
18871: PUSH
18872: LD_INT 1
18874: PLUS
18875: PPUSH
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 1
18885: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18886: LD_ADDR_EXP 70
18890: PUSH
18891: LD_EXP 70
18895: PPUSH
18896: LD_EXP 70
18900: PUSH
18901: LD_INT 1
18903: PLUS
18904: PPUSH
18905: EMPTY
18906: PPUSH
18907: CALL_OW 1
18911: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18912: LD_ADDR_EXP 73
18916: PUSH
18917: LD_EXP 73
18921: PPUSH
18922: LD_EXP 73
18926: PUSH
18927: LD_INT 1
18929: PLUS
18930: PPUSH
18931: EMPTY
18932: PPUSH
18933: CALL_OW 1
18937: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 302
18947: NOT
18948: IFFALSE 18961
// begin HackUnlinkAll ( i ) ;
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL 19067 0 1
// continue ;
18959: GO 18841
// end ; HackCheckCapturedStatus ( i ) ;
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL 19510 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18970: LD_ADDR_VAR 0 2
18974: PUSH
18975: LD_INT 81
18977: PUSH
18978: LD_VAR 0 1
18982: PPUSH
18983: CALL_OW 255
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 33
18994: PUSH
18995: LD_INT 3
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 91
19004: PUSH
19005: LD_VAR 0 1
19009: PUSH
19010: LD_EXP 72
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 50
19022: PUSH
19023: EMPTY
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 69
19036: ST_TO_ADDR
// if not tmp then
19037: LD_VAR 0 2
19041: NOT
19042: IFFALSE 19046
// continue ;
19044: GO 18841
// HackLink ( i , tmp ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_VAR 0 2
19055: PPUSH
19056: CALL 19203 0 2
// end ;
19060: GO 18841
19062: POP
19063: POP
// end ;
19064: PPOPN 2
19066: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
19071: PPUSH
// if not hack in hackTanks then
19072: LD_VAR 0 1
19076: PUSH
19077: LD_EXP 69
19081: IN
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19198
// index := GetElementIndex ( hackTanks , hack ) ;
19087: LD_ADDR_VAR 0 4
19091: PUSH
19092: LD_EXP 69
19096: PPUSH
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL 26978 0 2
19106: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19107: LD_EXP 70
19111: PUSH
19112: LD_VAR 0 4
19116: ARRAY
19117: IFFALSE 19198
// begin for i in hackTanksCaptured [ index ] do
19119: LD_ADDR_VAR 0 3
19123: PUSH
19124: LD_EXP 70
19128: PUSH
19129: LD_VAR 0 4
19133: ARRAY
19134: PUSH
19135: FOR_IN
19136: IFFALSE 19162
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19138: LD_VAR 0 3
19142: PUSH
19143: LD_INT 1
19145: ARRAY
19146: PPUSH
19147: LD_VAR 0 3
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: PPUSH
19156: CALL_OW 235
19160: GO 19135
19162: POP
19163: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19164: LD_ADDR_EXP 70
19168: PUSH
19169: LD_EXP 70
19173: PPUSH
19174: LD_VAR 0 4
19178: PPUSH
19179: EMPTY
19180: PPUSH
19181: CALL_OW 1
19185: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 0
19193: PPUSH
19194: CALL_OW 505
// end ; end ;
19198: LD_VAR 0 2
19202: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// if not hack in hackTanks or not vehicles then
19208: LD_VAR 0 1
19212: PUSH
19213: LD_EXP 69
19217: IN
19218: NOT
19219: PUSH
19220: LD_VAR 0 2
19224: NOT
19225: OR
19226: IFFALSE 19230
// exit ;
19228: GO 19505
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: LD_INT 1
19250: PPUSH
19251: CALL 27628 0 4
19255: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19256: LD_ADDR_VAR 0 5
19260: PUSH
19261: LD_EXP 69
19265: PPUSH
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL 26978 0 2
19275: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19276: LD_EXP 70
19280: PUSH
19281: LD_VAR 0 5
19285: ARRAY
19286: PUSH
19287: LD_EXP 71
19291: LESS
19292: IFFALSE 19481
// begin for i := 1 to vehicles do
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: DOUBLE
19300: LD_INT 1
19302: DEC
19303: ST_TO_ADDR
19304: LD_VAR 0 2
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19479
// begin if hackTanksCaptured [ index ] = hackLimit then
19312: LD_EXP 70
19316: PUSH
19317: LD_VAR 0 5
19321: ARRAY
19322: PUSH
19323: LD_EXP 71
19327: EQUAL
19328: IFFALSE 19332
// break ;
19330: GO 19479
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19332: LD_ADDR_EXP 73
19336: PUSH
19337: LD_EXP 73
19341: PPUSH
19342: LD_VAR 0 5
19346: PPUSH
19347: LD_EXP 73
19351: PUSH
19352: LD_VAR 0 5
19356: ARRAY
19357: PUSH
19358: LD_INT 1
19360: PLUS
19361: PPUSH
19362: CALL_OW 1
19366: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19367: LD_ADDR_EXP 70
19371: PUSH
19372: LD_EXP 70
19376: PPUSH
19377: LD_VAR 0 5
19381: PUSH
19382: LD_EXP 70
19386: PUSH
19387: LD_VAR 0 5
19391: ARRAY
19392: PUSH
19393: LD_INT 1
19395: PLUS
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PPUSH
19401: LD_VAR 0 2
19405: PUSH
19406: LD_VAR 0 4
19410: ARRAY
19411: PUSH
19412: LD_VAR 0 2
19416: PUSH
19417: LD_VAR 0 4
19421: ARRAY
19422: PPUSH
19423: CALL_OW 255
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL 27193 0 3
19436: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19437: LD_VAR 0 2
19441: PUSH
19442: LD_VAR 0 4
19446: ARRAY
19447: PPUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 255
19457: PPUSH
19458: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19462: LD_VAR 0 2
19466: PUSH
19467: LD_VAR 0 4
19471: ARRAY
19472: PPUSH
19473: CALL_OW 141
// end ;
19477: GO 19309
19479: POP
19480: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19481: LD_VAR 0 1
19485: PPUSH
19486: LD_EXP 70
19490: PUSH
19491: LD_VAR 0 5
19495: ARRAY
19496: PUSH
19497: LD_INT 0
19499: PLUS
19500: PPUSH
19501: CALL_OW 505
// end ;
19505: LD_VAR 0 3
19509: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
19514: PPUSH
19515: PPUSH
// if not hack in hackTanks then
19516: LD_VAR 0 1
19520: PUSH
19521: LD_EXP 69
19525: IN
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19771
// index := GetElementIndex ( hackTanks , hack ) ;
19531: LD_ADDR_VAR 0 4
19535: PUSH
19536: LD_EXP 69
19540: PPUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL 26978 0 2
19550: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: DOUBLE
19557: LD_EXP 70
19561: PUSH
19562: LD_VAR 0 4
19566: ARRAY
19567: INC
19568: ST_TO_ADDR
19569: LD_INT 1
19571: PUSH
19572: FOR_DOWNTO
19573: IFFALSE 19745
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19575: LD_ADDR_VAR 0 5
19579: PUSH
19580: LD_EXP 70
19584: PUSH
19585: LD_VAR 0 4
19589: ARRAY
19590: PUSH
19591: LD_VAR 0 3
19595: ARRAY
19596: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19597: LD_VAR 0 5
19601: PUSH
19602: LD_INT 1
19604: ARRAY
19605: PPUSH
19606: CALL_OW 302
19610: NOT
19611: PUSH
19612: LD_VAR 0 5
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PPUSH
19621: CALL_OW 255
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 255
19635: NONEQUAL
19636: OR
19637: IFFALSE 19743
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19639: LD_VAR 0 5
19643: PUSH
19644: LD_INT 1
19646: ARRAY
19647: PPUSH
19648: CALL_OW 305
19652: PUSH
19653: LD_VAR 0 5
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 255
19666: PUSH
19667: LD_VAR 0 1
19671: PPUSH
19672: CALL_OW 255
19676: EQUAL
19677: AND
19678: IFFALSE 19702
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19680: LD_VAR 0 5
19684: PUSH
19685: LD_INT 1
19687: ARRAY
19688: PPUSH
19689: LD_VAR 0 5
19693: PUSH
19694: LD_INT 2
19696: ARRAY
19697: PPUSH
19698: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19702: LD_ADDR_EXP 70
19706: PUSH
19707: LD_EXP 70
19711: PPUSH
19712: LD_VAR 0 4
19716: PPUSH
19717: LD_EXP 70
19721: PUSH
19722: LD_VAR 0 4
19726: ARRAY
19727: PPUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: CALL_OW 3
19737: PPUSH
19738: CALL_OW 1
19742: ST_TO_ADDR
// end ; end ;
19743: GO 19572
19745: POP
19746: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_EXP 70
19756: PUSH
19757: LD_VAR 0 4
19761: ARRAY
19762: PUSH
19763: LD_INT 0
19765: PLUS
19766: PPUSH
19767: CALL_OW 505
// end ;
19771: LD_VAR 0 2
19775: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19776: LD_INT 0
19778: PPUSH
19779: PPUSH
19780: PPUSH
19781: PPUSH
// if not hack in hackTanks then
19782: LD_VAR 0 1
19786: PUSH
19787: LD_EXP 69
19791: IN
19792: NOT
19793: IFFALSE 19797
// exit ;
19795: GO 19882
// index := GetElementIndex ( hackTanks , hack ) ;
19797: LD_ADDR_VAR 0 5
19801: PUSH
19802: LD_EXP 69
19806: PPUSH
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL 26978 0 2
19816: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19817: LD_ADDR_VAR 0 4
19821: PUSH
19822: DOUBLE
19823: LD_INT 1
19825: DEC
19826: ST_TO_ADDR
19827: LD_EXP 70
19831: PUSH
19832: LD_VAR 0 5
19836: ARRAY
19837: PUSH
19838: FOR_TO
19839: IFFALSE 19880
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19841: LD_EXP 70
19845: PUSH
19846: LD_VAR 0 5
19850: ARRAY
19851: PUSH
19852: LD_VAR 0 4
19856: ARRAY
19857: PUSH
19858: LD_INT 1
19860: ARRAY
19861: PUSH
19862: LD_VAR 0 2
19866: EQUAL
19867: IFFALSE 19878
// KillUnit ( vehicle ) ;
19869: LD_VAR 0 2
19873: PPUSH
19874: CALL_OW 66
19878: GO 19838
19880: POP
19881: POP
// end ;
19882: LD_VAR 0 3
19886: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19887: LD_EXP 74
19891: NOT
19892: IFFALSE 19927
19894: GO 19896
19896: DISABLE
// begin initMiner := true ;
19897: LD_ADDR_EXP 74
19901: PUSH
19902: LD_INT 1
19904: ST_TO_ADDR
// minersList := [ ] ;
19905: LD_ADDR_EXP 75
19909: PUSH
19910: EMPTY
19911: ST_TO_ADDR
// minerMinesList := [ ] ;
19912: LD_ADDR_EXP 76
19916: PUSH
19917: EMPTY
19918: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19919: LD_ADDR_EXP 77
19923: PUSH
19924: LD_INT 5
19926: ST_TO_ADDR
// end ;
19927: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19928: LD_EXP 74
19932: PUSH
19933: LD_INT 34
19935: PUSH
19936: LD_INT 81
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: AND
19948: IFFALSE 20409
19950: GO 19952
19952: DISABLE
19953: LD_INT 0
19955: PPUSH
19956: PPUSH
19957: PPUSH
19958: PPUSH
// begin enable ;
19959: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19960: LD_ADDR_VAR 0 1
19964: PUSH
19965: LD_INT 34
19967: PUSH
19968: LD_INT 81
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PPUSH
19975: CALL_OW 69
19979: PUSH
19980: FOR_IN
19981: IFFALSE 20053
// begin if not i in minersList then
19983: LD_VAR 0 1
19987: PUSH
19988: LD_EXP 75
19992: IN
19993: NOT
19994: IFFALSE 20051
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19996: LD_ADDR_EXP 75
20000: PUSH
20001: LD_EXP 75
20005: PPUSH
20006: LD_EXP 75
20010: PUSH
20011: LD_INT 1
20013: PLUS
20014: PPUSH
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL_OW 1
20024: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20025: LD_ADDR_EXP 76
20029: PUSH
20030: LD_EXP 76
20034: PPUSH
20035: LD_EXP 76
20039: PUSH
20040: LD_INT 1
20042: PLUS
20043: PPUSH
20044: EMPTY
20045: PPUSH
20046: CALL_OW 1
20050: ST_TO_ADDR
// end end ;
20051: GO 19980
20053: POP
20054: POP
// for i := minerMinesList downto 1 do
20055: LD_ADDR_VAR 0 1
20059: PUSH
20060: DOUBLE
20061: LD_EXP 76
20065: INC
20066: ST_TO_ADDR
20067: LD_INT 1
20069: PUSH
20070: FOR_DOWNTO
20071: IFFALSE 20407
// begin if IsLive ( minersList [ i ] ) then
20073: LD_EXP 75
20077: PUSH
20078: LD_VAR 0 1
20082: ARRAY
20083: PPUSH
20084: CALL_OW 300
20088: IFFALSE 20116
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20090: LD_EXP 75
20094: PUSH
20095: LD_VAR 0 1
20099: ARRAY
20100: PPUSH
20101: LD_EXP 76
20105: PUSH
20106: LD_VAR 0 1
20110: ARRAY
20111: PPUSH
20112: CALL_OW 505
// if not minerMinesList [ i ] then
20116: LD_EXP 76
20120: PUSH
20121: LD_VAR 0 1
20125: ARRAY
20126: NOT
20127: IFFALSE 20131
// continue ;
20129: GO 20070
// for j := minerMinesList [ i ] downto 1 do
20131: LD_ADDR_VAR 0 2
20135: PUSH
20136: DOUBLE
20137: LD_EXP 76
20141: PUSH
20142: LD_VAR 0 1
20146: ARRAY
20147: INC
20148: ST_TO_ADDR
20149: LD_INT 1
20151: PUSH
20152: FOR_DOWNTO
20153: IFFALSE 20403
// begin side := GetSide ( minersList [ i ] ) ;
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_EXP 75
20164: PUSH
20165: LD_VAR 0 1
20169: ARRAY
20170: PPUSH
20171: CALL_OW 255
20175: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20176: LD_ADDR_VAR 0 4
20180: PUSH
20181: LD_EXP 76
20185: PUSH
20186: LD_VAR 0 1
20190: ARRAY
20191: PUSH
20192: LD_VAR 0 2
20196: ARRAY
20197: PUSH
20198: LD_INT 1
20200: ARRAY
20201: PPUSH
20202: LD_EXP 76
20206: PUSH
20207: LD_VAR 0 1
20211: ARRAY
20212: PUSH
20213: LD_VAR 0 2
20217: ARRAY
20218: PUSH
20219: LD_INT 2
20221: ARRAY
20222: PPUSH
20223: CALL_OW 428
20227: ST_TO_ADDR
// if not tmp then
20228: LD_VAR 0 4
20232: NOT
20233: IFFALSE 20237
// continue ;
20235: GO 20152
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20237: LD_VAR 0 4
20241: PUSH
20242: LD_INT 81
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PPUSH
20254: CALL_OW 69
20258: IN
20259: PUSH
20260: LD_EXP 76
20264: PUSH
20265: LD_VAR 0 1
20269: ARRAY
20270: PUSH
20271: LD_VAR 0 2
20275: ARRAY
20276: PUSH
20277: LD_INT 1
20279: ARRAY
20280: PPUSH
20281: LD_EXP 76
20285: PUSH
20286: LD_VAR 0 1
20290: ARRAY
20291: PUSH
20292: LD_VAR 0 2
20296: ARRAY
20297: PUSH
20298: LD_INT 2
20300: ARRAY
20301: PPUSH
20302: CALL_OW 458
20306: AND
20307: IFFALSE 20401
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20309: LD_EXP 76
20313: PUSH
20314: LD_VAR 0 1
20318: ARRAY
20319: PUSH
20320: LD_VAR 0 2
20324: ARRAY
20325: PUSH
20326: LD_INT 1
20328: ARRAY
20329: PPUSH
20330: LD_EXP 76
20334: PUSH
20335: LD_VAR 0 1
20339: ARRAY
20340: PUSH
20341: LD_VAR 0 2
20345: ARRAY
20346: PUSH
20347: LD_INT 2
20349: ARRAY
20350: PPUSH
20351: LD_VAR 0 3
20355: PPUSH
20356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20360: LD_ADDR_EXP 76
20364: PUSH
20365: LD_EXP 76
20369: PPUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: LD_EXP 76
20379: PUSH
20380: LD_VAR 0 1
20384: ARRAY
20385: PPUSH
20386: LD_VAR 0 2
20390: PPUSH
20391: CALL_OW 3
20395: PPUSH
20396: CALL_OW 1
20400: ST_TO_ADDR
// end ; end ;
20401: GO 20152
20403: POP
20404: POP
// end ;
20405: GO 20070
20407: POP
20408: POP
// end ;
20409: PPOPN 4
20411: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20412: LD_INT 0
20414: PPUSH
20415: PPUSH
// result := false ;
20416: LD_ADDR_VAR 0 4
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 264
20433: PUSH
20434: LD_INT 81
20436: EQUAL
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20682
// index := GetElementIndex ( minersList , unit ) ;
20442: LD_ADDR_VAR 0 5
20446: PUSH
20447: LD_EXP 75
20451: PPUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL 26978 0 2
20461: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20462: LD_EXP 76
20466: PUSH
20467: LD_VAR 0 5
20471: ARRAY
20472: PUSH
20473: LD_EXP 77
20477: GREATEREQUAL
20478: IFFALSE 20482
// exit ;
20480: GO 20682
// ComMoveXY ( unit , x , y ) ;
20482: LD_VAR 0 1
20486: PPUSH
20487: LD_VAR 0 2
20491: PPUSH
20492: LD_VAR 0 3
20496: PPUSH
20497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20508: LD_VAR 0 1
20512: PPUSH
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: CALL 58241 0 3
20527: NOT
20528: PUSH
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 314
20538: AND
20539: IFFALSE 20543
// exit ;
20541: GO 20682
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20543: LD_VAR 0 2
20547: PPUSH
20548: LD_VAR 0 3
20552: PPUSH
20553: CALL_OW 428
20557: PUSH
20558: LD_VAR 0 1
20562: EQUAL
20563: PUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 314
20573: NOT
20574: AND
20575: IFFALSE 20501
// PlaySoundXY ( x , y , PlantMine ) ;
20577: LD_VAR 0 2
20581: PPUSH
20582: LD_VAR 0 3
20586: PPUSH
20587: LD_STRING PlantMine
20589: PPUSH
20590: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: LD_VAR 0 3
20603: PPUSH
20604: LD_VAR 0 1
20608: PPUSH
20609: CALL_OW 255
20613: PPUSH
20614: LD_INT 0
20616: PPUSH
20617: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20621: LD_ADDR_EXP 76
20625: PUSH
20626: LD_EXP 76
20630: PPUSH
20631: LD_VAR 0 5
20635: PUSH
20636: LD_EXP 76
20640: PUSH
20641: LD_VAR 0 5
20645: ARRAY
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: LD_VAR 0 2
20659: PUSH
20660: LD_VAR 0 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL 27193 0 3
20673: ST_TO_ADDR
// result := true ;
20674: LD_ADDR_VAR 0 4
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// end ;
20682: LD_VAR 0 4
20686: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20687: LD_INT 0
20689: PPUSH
20690: PPUSH
20691: PPUSH
// if not unit in minersList then
20692: LD_VAR 0 1
20696: PUSH
20697: LD_EXP 75
20701: IN
20702: NOT
20703: IFFALSE 20707
// exit ;
20705: GO 21099
// index := GetElementIndex ( minersList , unit ) ;
20707: LD_ADDR_VAR 0 6
20711: PUSH
20712: LD_EXP 75
20716: PPUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL 26978 0 2
20726: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20727: LD_ADDR_VAR 0 5
20731: PUSH
20732: DOUBLE
20733: LD_EXP 76
20737: PUSH
20738: LD_VAR 0 6
20742: ARRAY
20743: INC
20744: ST_TO_ADDR
20745: LD_INT 1
20747: PUSH
20748: FOR_DOWNTO
20749: IFFALSE 20910
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20751: LD_EXP 76
20755: PUSH
20756: LD_VAR 0 6
20760: ARRAY
20761: PUSH
20762: LD_VAR 0 5
20766: ARRAY
20767: PUSH
20768: LD_INT 1
20770: ARRAY
20771: PUSH
20772: LD_VAR 0 2
20776: EQUAL
20777: PUSH
20778: LD_EXP 76
20782: PUSH
20783: LD_VAR 0 6
20787: ARRAY
20788: PUSH
20789: LD_VAR 0 5
20793: ARRAY
20794: PUSH
20795: LD_INT 2
20797: ARRAY
20798: PUSH
20799: LD_VAR 0 3
20803: EQUAL
20804: AND
20805: IFFALSE 20908
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20807: LD_EXP 76
20811: PUSH
20812: LD_VAR 0 6
20816: ARRAY
20817: PUSH
20818: LD_VAR 0 5
20822: ARRAY
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PPUSH
20828: LD_EXP 76
20832: PUSH
20833: LD_VAR 0 6
20837: ARRAY
20838: PUSH
20839: LD_VAR 0 5
20843: ARRAY
20844: PUSH
20845: LD_INT 2
20847: ARRAY
20848: PPUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL_OW 255
20858: PPUSH
20859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20863: LD_ADDR_EXP 76
20867: PUSH
20868: LD_EXP 76
20872: PPUSH
20873: LD_VAR 0 6
20877: PPUSH
20878: LD_EXP 76
20882: PUSH
20883: LD_VAR 0 6
20887: ARRAY
20888: PPUSH
20889: LD_VAR 0 5
20893: PPUSH
20894: CALL_OW 3
20898: PPUSH
20899: CALL_OW 1
20903: ST_TO_ADDR
// exit ;
20904: POP
20905: POP
20906: GO 21099
// end ; end ;
20908: GO 20748
20910: POP
20911: POP
// for i := minerMinesList [ index ] downto 1 do
20912: LD_ADDR_VAR 0 5
20916: PUSH
20917: DOUBLE
20918: LD_EXP 76
20922: PUSH
20923: LD_VAR 0 6
20927: ARRAY
20928: INC
20929: ST_TO_ADDR
20930: LD_INT 1
20932: PUSH
20933: FOR_DOWNTO
20934: IFFALSE 21097
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20936: LD_EXP 76
20940: PUSH
20941: LD_VAR 0 6
20945: ARRAY
20946: PUSH
20947: LD_VAR 0 5
20951: ARRAY
20952: PUSH
20953: LD_INT 1
20955: ARRAY
20956: PPUSH
20957: LD_EXP 76
20961: PUSH
20962: LD_VAR 0 6
20966: ARRAY
20967: PUSH
20968: LD_VAR 0 5
20972: ARRAY
20973: PUSH
20974: LD_INT 2
20976: ARRAY
20977: PPUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: LD_VAR 0 3
20987: PPUSH
20988: CALL_OW 298
20992: PUSH
20993: LD_INT 6
20995: LESS
20996: IFFALSE 21095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20998: LD_EXP 76
21002: PUSH
21003: LD_VAR 0 6
21007: ARRAY
21008: PUSH
21009: LD_VAR 0 5
21013: ARRAY
21014: PUSH
21015: LD_INT 1
21017: ARRAY
21018: PPUSH
21019: LD_EXP 76
21023: PUSH
21024: LD_VAR 0 6
21028: ARRAY
21029: PUSH
21030: LD_VAR 0 5
21034: ARRAY
21035: PUSH
21036: LD_INT 2
21038: ARRAY
21039: PPUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 255
21049: PPUSH
21050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21054: LD_ADDR_EXP 76
21058: PUSH
21059: LD_EXP 76
21063: PPUSH
21064: LD_VAR 0 6
21068: PPUSH
21069: LD_EXP 76
21073: PUSH
21074: LD_VAR 0 6
21078: ARRAY
21079: PPUSH
21080: LD_VAR 0 5
21084: PPUSH
21085: CALL_OW 3
21089: PPUSH
21090: CALL_OW 1
21094: ST_TO_ADDR
// end ; end ;
21095: GO 20933
21097: POP
21098: POP
// end ;
21099: LD_VAR 0 4
21103: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21104: LD_INT 0
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 264
21124: PUSH
21125: LD_INT 81
21127: EQUAL
21128: NOT
21129: PUSH
21130: LD_VAR 0 1
21134: PUSH
21135: LD_EXP 75
21139: IN
21140: NOT
21141: OR
21142: IFFALSE 21146
// exit ;
21144: GO 21468
// index := GetElementIndex ( minersList , unit ) ;
21146: LD_ADDR_VAR 0 6
21150: PUSH
21151: LD_EXP 75
21155: PPUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL 26978 0 2
21165: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_EXP 77
21175: PUSH
21176: LD_EXP 76
21180: PUSH
21181: LD_VAR 0 6
21185: ARRAY
21186: MINUS
21187: ST_TO_ADDR
// if not minesFreeAmount then
21188: LD_VAR 0 8
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21468
// tmp := [ ] ;
21197: LD_ADDR_VAR 0 7
21201: PUSH
21202: EMPTY
21203: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21204: LD_ADDR_VAR 0 5
21208: PUSH
21209: DOUBLE
21210: LD_INT 1
21212: DEC
21213: ST_TO_ADDR
21214: LD_VAR 0 8
21218: PUSH
21219: FOR_TO
21220: IFFALSE 21415
// begin _d := rand ( 0 , 5 ) ;
21222: LD_ADDR_VAR 0 11
21226: PUSH
21227: LD_INT 0
21229: PPUSH
21230: LD_INT 5
21232: PPUSH
21233: CALL_OW 12
21237: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21238: LD_ADDR_VAR 0 12
21242: PUSH
21243: LD_INT 2
21245: PPUSH
21246: LD_INT 6
21248: PPUSH
21249: CALL_OW 12
21253: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21254: LD_ADDR_VAR 0 9
21258: PUSH
21259: LD_VAR 0 2
21263: PPUSH
21264: LD_VAR 0 11
21268: PPUSH
21269: LD_VAR 0 12
21273: PPUSH
21274: CALL_OW 272
21278: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21279: LD_ADDR_VAR 0 10
21283: PUSH
21284: LD_VAR 0 3
21288: PPUSH
21289: LD_VAR 0 11
21293: PPUSH
21294: LD_VAR 0 12
21298: PPUSH
21299: CALL_OW 273
21303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21304: LD_VAR 0 9
21308: PPUSH
21309: LD_VAR 0 10
21313: PPUSH
21314: CALL_OW 488
21318: PUSH
21319: LD_VAR 0 9
21323: PUSH
21324: LD_VAR 0 10
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_VAR 0 7
21337: IN
21338: NOT
21339: AND
21340: PUSH
21341: LD_VAR 0 9
21345: PPUSH
21346: LD_VAR 0 10
21350: PPUSH
21351: CALL_OW 458
21355: NOT
21356: AND
21357: IFFALSE 21399
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21359: LD_ADDR_VAR 0 7
21363: PUSH
21364: LD_VAR 0 7
21368: PPUSH
21369: LD_VAR 0 7
21373: PUSH
21374: LD_INT 1
21376: PLUS
21377: PPUSH
21378: LD_VAR 0 9
21382: PUSH
21383: LD_VAR 0 10
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 1
21396: ST_TO_ADDR
21397: GO 21413
// i := i - 1 ;
21399: LD_ADDR_VAR 0 5
21403: PUSH
21404: LD_VAR 0 5
21408: PUSH
21409: LD_INT 1
21411: MINUS
21412: ST_TO_ADDR
// end ;
21413: GO 21219
21415: POP
21416: POP
// for i in tmp do
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: LD_VAR 0 7
21426: PUSH
21427: FOR_IN
21428: IFFALSE 21466
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21430: LD_VAR 0 1
21434: PPUSH
21435: LD_VAR 0 5
21439: PUSH
21440: LD_INT 1
21442: ARRAY
21443: PPUSH
21444: LD_VAR 0 5
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: PPUSH
21453: CALL 20412 0 3
21457: NOT
21458: IFFALSE 21464
// exit ;
21460: POP
21461: POP
21462: GO 21468
21464: GO 21427
21466: POP
21467: POP
// end ;
21468: LD_VAR 0 4
21472: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21473: LD_INT 0
21475: PPUSH
21476: PPUSH
21477: PPUSH
21478: PPUSH
21479: PPUSH
21480: PPUSH
21481: PPUSH
// if not GetClass ( unit ) = class_sniper then
21482: LD_VAR 0 1
21486: PPUSH
21487: CALL_OW 257
21491: PUSH
21492: LD_INT 5
21494: EQUAL
21495: NOT
21496: IFFALSE 21500
// exit ;
21498: GO 21888
// dist := 8 ;
21500: LD_ADDR_VAR 0 5
21504: PUSH
21505: LD_INT 8
21507: ST_TO_ADDR
// viewRange := 12 ;
21508: LD_ADDR_VAR 0 7
21512: PUSH
21513: LD_INT 12
21515: ST_TO_ADDR
// side := GetSide ( unit ) ;
21516: LD_ADDR_VAR 0 6
21520: PUSH
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 255
21530: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21531: LD_INT 61
21533: PPUSH
21534: LD_VAR 0 6
21538: PPUSH
21539: CALL_OW 321
21543: PUSH
21544: LD_INT 2
21546: EQUAL
21547: IFFALSE 21557
// viewRange := 16 ;
21549: LD_ADDR_VAR 0 7
21553: PUSH
21554: LD_INT 16
21556: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21557: LD_VAR 0 1
21561: PPUSH
21562: LD_VAR 0 2
21566: PPUSH
21567: LD_VAR 0 3
21571: PPUSH
21572: CALL_OW 297
21576: PUSH
21577: LD_VAR 0 5
21581: GREATER
21582: IFFALSE 21661
// begin ComMoveXY ( unit , x , y ) ;
21584: LD_VAR 0 1
21588: PPUSH
21589: LD_VAR 0 2
21593: PPUSH
21594: LD_VAR 0 3
21598: PPUSH
21599: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21603: LD_INT 35
21605: PPUSH
21606: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_VAR 0 2
21619: PPUSH
21620: LD_VAR 0 3
21624: PPUSH
21625: CALL 58241 0 3
21629: NOT
21630: IFFALSE 21634
// exit ;
21632: GO 21888
// until GetDistUnitXY ( unit , x , y ) < dist ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_VAR 0 2
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 297
21653: PUSH
21654: LD_VAR 0 5
21658: LESS
21659: IFFALSE 21603
// end ; ComTurnXY ( unit , x , y ) ;
21661: LD_VAR 0 1
21665: PPUSH
21666: LD_VAR 0 2
21670: PPUSH
21671: LD_VAR 0 3
21675: PPUSH
21676: CALL_OW 118
// wait ( 5 ) ;
21680: LD_INT 5
21682: PPUSH
21683: CALL_OW 67
// _d := GetDir ( unit ) ;
21687: LD_ADDR_VAR 0 10
21691: PUSH
21692: LD_VAR 0 1
21696: PPUSH
21697: CALL_OW 254
21701: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21702: LD_ADDR_VAR 0 8
21706: PUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 250
21716: PPUSH
21717: LD_VAR 0 10
21721: PPUSH
21722: LD_VAR 0 5
21726: PPUSH
21727: CALL_OW 272
21731: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21732: LD_ADDR_VAR 0 9
21736: PUSH
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 251
21746: PPUSH
21747: LD_VAR 0 10
21751: PPUSH
21752: LD_VAR 0 5
21756: PPUSH
21757: CALL_OW 273
21761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21762: LD_VAR 0 8
21766: PPUSH
21767: LD_VAR 0 9
21771: PPUSH
21772: CALL_OW 488
21776: NOT
21777: IFFALSE 21781
// exit ;
21779: GO 21888
// ComAnimCustom ( unit , 1 ) ;
21781: LD_VAR 0 1
21785: PPUSH
21786: LD_INT 1
21788: PPUSH
21789: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21793: LD_VAR 0 8
21797: PPUSH
21798: LD_VAR 0 9
21802: PPUSH
21803: LD_VAR 0 6
21807: PPUSH
21808: LD_VAR 0 7
21812: PPUSH
21813: CALL_OW 330
// repeat wait ( 1 ) ;
21817: LD_INT 1
21819: PPUSH
21820: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21824: LD_VAR 0 1
21828: PPUSH
21829: CALL_OW 316
21833: PUSH
21834: LD_VAR 0 1
21838: PPUSH
21839: CALL_OW 314
21843: OR
21844: PUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 302
21854: NOT
21855: OR
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 301
21866: OR
21867: IFFALSE 21817
// RemoveSeeing ( _x , _y , side ) ;
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_VAR 0 9
21878: PPUSH
21879: LD_VAR 0 6
21883: PPUSH
21884: CALL_OW 331
// end ; end_of_file
21888: LD_VAR 0 4
21892: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21893: LD_VAR 0 1
21897: PUSH
21898: LD_INT 200
21900: DOUBLE
21901: GREATEREQUAL
21902: IFFALSE 21910
21904: LD_INT 299
21906: DOUBLE
21907: LESSEQUAL
21908: IFTRUE 21912
21910: GO 21944
21912: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21913: LD_VAR 0 1
21917: PPUSH
21918: LD_VAR 0 2
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: LD_VAR 0 4
21932: PPUSH
21933: LD_VAR 0 5
21937: PPUSH
21938: CALL 17980 0 5
21942: GO 22021
21944: LD_INT 300
21946: DOUBLE
21947: GREATEREQUAL
21948: IFFALSE 21956
21950: LD_INT 399
21952: DOUBLE
21953: LESSEQUAL
21954: IFTRUE 21958
21956: GO 22020
21958: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21959: LD_VAR 0 1
21963: PPUSH
21964: LD_VAR 0 2
21968: PPUSH
21969: LD_VAR 0 3
21973: PPUSH
21974: LD_VAR 0 4
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: LD_VAR 0 6
21988: PPUSH
21989: LD_VAR 0 7
21993: PPUSH
21994: LD_VAR 0 8
21998: PPUSH
21999: LD_VAR 0 9
22003: PPUSH
22004: LD_VAR 0 10
22008: PPUSH
22009: LD_VAR 0 11
22013: PPUSH
22014: CALL 14313 0 11
22018: GO 22021
22020: POP
// end ;
22021: PPOPN 11
22023: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22024: LD_VAR 0 1
22028: PPUSH
22029: LD_VAR 0 2
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: LD_VAR 0 4
22043: PPUSH
22044: LD_VAR 0 5
22048: PPUSH
22049: CALL 17716 0 5
// end ; end_of_file
22053: PPOPN 5
22055: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22056: LD_INT 0
22058: PPUSH
22059: PPUSH
// if exist_mode then
22060: LD_VAR 0 2
22064: IFFALSE 22089
// unit := CreateCharacter ( prefix & ident ) else
22066: LD_ADDR_VAR 0 5
22070: PUSH
22071: LD_VAR 0 3
22075: PUSH
22076: LD_VAR 0 1
22080: STR
22081: PPUSH
22082: CALL_OW 34
22086: ST_TO_ADDR
22087: GO 22104
// unit := NewCharacter ( ident ) ;
22089: LD_ADDR_VAR 0 5
22093: PUSH
22094: LD_VAR 0 1
22098: PPUSH
22099: CALL_OW 25
22103: ST_TO_ADDR
// result := unit ;
22104: LD_ADDR_VAR 0 4
22108: PUSH
22109: LD_VAR 0 5
22113: ST_TO_ADDR
// end ;
22114: LD_VAR 0 4
22118: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
// if not side or not nation then
22123: LD_VAR 0 1
22127: NOT
22128: PUSH
22129: LD_VAR 0 2
22133: NOT
22134: OR
22135: IFFALSE 22139
// exit ;
22137: GO 22907
// case nation of nation_american :
22139: LD_VAR 0 2
22143: PUSH
22144: LD_INT 1
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22366
22152: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22153: LD_ADDR_VAR 0 4
22157: PUSH
22158: LD_INT 35
22160: PUSH
22161: LD_INT 45
22163: PUSH
22164: LD_INT 46
22166: PUSH
22167: LD_INT 47
22169: PUSH
22170: LD_INT 82
22172: PUSH
22173: LD_INT 83
22175: PUSH
22176: LD_INT 84
22178: PUSH
22179: LD_INT 85
22181: PUSH
22182: LD_INT 86
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 6
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 16
22199: PUSH
22200: LD_INT 7
22202: PUSH
22203: LD_INT 12
22205: PUSH
22206: LD_INT 13
22208: PUSH
22209: LD_INT 10
22211: PUSH
22212: LD_INT 14
22214: PUSH
22215: LD_INT 20
22217: PUSH
22218: LD_INT 21
22220: PUSH
22221: LD_INT 22
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 32
22229: PUSH
22230: LD_INT 27
22232: PUSH
22233: LD_INT 36
22235: PUSH
22236: LD_INT 69
22238: PUSH
22239: LD_INT 39
22241: PUSH
22242: LD_INT 34
22244: PUSH
22245: LD_INT 40
22247: PUSH
22248: LD_INT 48
22250: PUSH
22251: LD_INT 49
22253: PUSH
22254: LD_INT 50
22256: PUSH
22257: LD_INT 51
22259: PUSH
22260: LD_INT 52
22262: PUSH
22263: LD_INT 53
22265: PUSH
22266: LD_INT 54
22268: PUSH
22269: LD_INT 55
22271: PUSH
22272: LD_INT 56
22274: PUSH
22275: LD_INT 57
22277: PUSH
22278: LD_INT 58
22280: PUSH
22281: LD_INT 59
22283: PUSH
22284: LD_INT 60
22286: PUSH
22287: LD_INT 61
22289: PUSH
22290: LD_INT 62
22292: PUSH
22293: LD_INT 80
22295: PUSH
22296: LD_INT 82
22298: PUSH
22299: LD_INT 83
22301: PUSH
22302: LD_INT 84
22304: PUSH
22305: LD_INT 85
22307: PUSH
22308: LD_INT 86
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: ST_TO_ADDR
22364: GO 22831
22366: LD_INT 2
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22600
22374: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_INT 35
22382: PUSH
22383: LD_INT 45
22385: PUSH
22386: LD_INT 46
22388: PUSH
22389: LD_INT 47
22391: PUSH
22392: LD_INT 82
22394: PUSH
22395: LD_INT 83
22397: PUSH
22398: LD_INT 84
22400: PUSH
22401: LD_INT 85
22403: PUSH
22404: LD_INT 87
22406: PUSH
22407: LD_INT 70
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 15
22430: PUSH
22431: LD_INT 18
22433: PUSH
22434: LD_INT 7
22436: PUSH
22437: LD_INT 17
22439: PUSH
22440: LD_INT 8
22442: PUSH
22443: LD_INT 20
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_INT 72
22454: PUSH
22455: LD_INT 26
22457: PUSH
22458: LD_INT 69
22460: PUSH
22461: LD_INT 39
22463: PUSH
22464: LD_INT 40
22466: PUSH
22467: LD_INT 41
22469: PUSH
22470: LD_INT 42
22472: PUSH
22473: LD_INT 43
22475: PUSH
22476: LD_INT 48
22478: PUSH
22479: LD_INT 49
22481: PUSH
22482: LD_INT 50
22484: PUSH
22485: LD_INT 51
22487: PUSH
22488: LD_INT 52
22490: PUSH
22491: LD_INT 53
22493: PUSH
22494: LD_INT 54
22496: PUSH
22497: LD_INT 55
22499: PUSH
22500: LD_INT 56
22502: PUSH
22503: LD_INT 60
22505: PUSH
22506: LD_INT 61
22508: PUSH
22509: LD_INT 62
22511: PUSH
22512: LD_INT 66
22514: PUSH
22515: LD_INT 67
22517: PUSH
22518: LD_INT 68
22520: PUSH
22521: LD_INT 81
22523: PUSH
22524: LD_INT 82
22526: PUSH
22527: LD_INT 83
22529: PUSH
22530: LD_INT 84
22532: PUSH
22533: LD_INT 85
22535: PUSH
22536: LD_INT 87
22538: PUSH
22539: LD_INT 88
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
22598: GO 22831
22600: LD_INT 3
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22830
22608: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22609: LD_ADDR_VAR 0 4
22613: PUSH
22614: LD_INT 46
22616: PUSH
22617: LD_INT 47
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 82
22628: PUSH
22629: LD_INT 83
22631: PUSH
22632: LD_INT 84
22634: PUSH
22635: LD_INT 85
22637: PUSH
22638: LD_INT 86
22640: PUSH
22641: LD_INT 11
22643: PUSH
22644: LD_INT 9
22646: PUSH
22647: LD_INT 20
22649: PUSH
22650: LD_INT 19
22652: PUSH
22653: LD_INT 21
22655: PUSH
22656: LD_INT 24
22658: PUSH
22659: LD_INT 22
22661: PUSH
22662: LD_INT 25
22664: PUSH
22665: LD_INT 28
22667: PUSH
22668: LD_INT 29
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_INT 31
22676: PUSH
22677: LD_INT 37
22679: PUSH
22680: LD_INT 38
22682: PUSH
22683: LD_INT 32
22685: PUSH
22686: LD_INT 27
22688: PUSH
22689: LD_INT 33
22691: PUSH
22692: LD_INT 69
22694: PUSH
22695: LD_INT 39
22697: PUSH
22698: LD_INT 34
22700: PUSH
22701: LD_INT 40
22703: PUSH
22704: LD_INT 71
22706: PUSH
22707: LD_INT 23
22709: PUSH
22710: LD_INT 44
22712: PUSH
22713: LD_INT 48
22715: PUSH
22716: LD_INT 49
22718: PUSH
22719: LD_INT 50
22721: PUSH
22722: LD_INT 51
22724: PUSH
22725: LD_INT 52
22727: PUSH
22728: LD_INT 53
22730: PUSH
22731: LD_INT 54
22733: PUSH
22734: LD_INT 55
22736: PUSH
22737: LD_INT 56
22739: PUSH
22740: LD_INT 57
22742: PUSH
22743: LD_INT 58
22745: PUSH
22746: LD_INT 59
22748: PUSH
22749: LD_INT 63
22751: PUSH
22752: LD_INT 64
22754: PUSH
22755: LD_INT 65
22757: PUSH
22758: LD_INT 82
22760: PUSH
22761: LD_INT 83
22763: PUSH
22764: LD_INT 84
22766: PUSH
22767: LD_INT 85
22769: PUSH
22770: LD_INT 86
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: ST_TO_ADDR
22828: GO 22831
22830: POP
// if state > - 1 and state < 3 then
22831: LD_VAR 0 3
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: GREATER
22840: PUSH
22841: LD_VAR 0 3
22845: PUSH
22846: LD_INT 3
22848: LESS
22849: AND
22850: IFFALSE 22907
// for i in result do
22852: LD_ADDR_VAR 0 5
22856: PUSH
22857: LD_VAR 0 4
22861: PUSH
22862: FOR_IN
22863: IFFALSE 22905
// if GetTech ( i , side ) <> state then
22865: LD_VAR 0 5
22869: PPUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 321
22879: PUSH
22880: LD_VAR 0 3
22884: NONEQUAL
22885: IFFALSE 22903
// result := result diff i ;
22887: LD_ADDR_VAR 0 4
22891: PUSH
22892: LD_VAR 0 4
22896: PUSH
22897: LD_VAR 0 5
22901: DIFF
22902: ST_TO_ADDR
22903: GO 22862
22905: POP
22906: POP
// end ;
22907: LD_VAR 0 4
22911: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22912: LD_INT 0
22914: PPUSH
22915: PPUSH
22916: PPUSH
// result := true ;
22917: LD_ADDR_VAR 0 3
22921: PUSH
22922: LD_INT 1
22924: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22925: LD_ADDR_VAR 0 5
22929: PUSH
22930: LD_VAR 0 2
22934: PPUSH
22935: CALL_OW 480
22939: ST_TO_ADDR
// if not tmp then
22940: LD_VAR 0 5
22944: NOT
22945: IFFALSE 22949
// exit ;
22947: GO 22998
// for i in tmp do
22949: LD_ADDR_VAR 0 4
22953: PUSH
22954: LD_VAR 0 5
22958: PUSH
22959: FOR_IN
22960: IFFALSE 22996
// if GetTech ( i , side ) <> state_researched then
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 321
22976: PUSH
22977: LD_INT 2
22979: NONEQUAL
22980: IFFALSE 22994
// begin result := false ;
22982: LD_ADDR_VAR 0 3
22986: PUSH
22987: LD_INT 0
22989: ST_TO_ADDR
// exit ;
22990: POP
22991: POP
22992: GO 22998
// end ;
22994: GO 22959
22996: POP
22997: POP
// end ;
22998: LD_VAR 0 3
23002: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23003: LD_INT 0
23005: PPUSH
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
23014: PPUSH
23015: PPUSH
23016: PPUSH
23017: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23018: LD_VAR 0 1
23022: NOT
23023: PUSH
23024: LD_VAR 0 1
23028: PPUSH
23029: CALL_OW 257
23033: PUSH
23034: LD_INT 9
23036: NONEQUAL
23037: OR
23038: IFFALSE 23042
// exit ;
23040: GO 23615
// side := GetSide ( unit ) ;
23042: LD_ADDR_VAR 0 9
23046: PUSH
23047: LD_VAR 0 1
23051: PPUSH
23052: CALL_OW 255
23056: ST_TO_ADDR
// tech_space := tech_spacanom ;
23057: LD_ADDR_VAR 0 12
23061: PUSH
23062: LD_INT 29
23064: ST_TO_ADDR
// tech_time := tech_taurad ;
23065: LD_ADDR_VAR 0 13
23069: PUSH
23070: LD_INT 28
23072: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23073: LD_ADDR_VAR 0 11
23077: PUSH
23078: LD_VAR 0 1
23082: PPUSH
23083: CALL_OW 310
23087: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23088: LD_VAR 0 11
23092: PPUSH
23093: CALL_OW 247
23097: PUSH
23098: LD_INT 2
23100: EQUAL
23101: IFFALSE 23105
// exit ;
23103: GO 23615
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23105: LD_ADDR_VAR 0 8
23109: PUSH
23110: LD_INT 81
23112: PUSH
23113: LD_VAR 0 9
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 3
23124: PUSH
23125: LD_INT 21
23127: PUSH
23128: LD_INT 3
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PPUSH
23143: CALL_OW 69
23147: ST_TO_ADDR
// if not tmp then
23148: LD_VAR 0 8
23152: NOT
23153: IFFALSE 23157
// exit ;
23155: GO 23615
// if in_unit then
23157: LD_VAR 0 11
23161: IFFALSE 23185
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23163: LD_ADDR_VAR 0 10
23167: PUSH
23168: LD_VAR 0 8
23172: PPUSH
23173: LD_VAR 0 11
23177: PPUSH
23178: CALL_OW 74
23182: ST_TO_ADDR
23183: GO 23205
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23185: LD_ADDR_VAR 0 10
23189: PUSH
23190: LD_VAR 0 8
23194: PPUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 74
23204: ST_TO_ADDR
// if not enemy then
23205: LD_VAR 0 10
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23615
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23214: LD_VAR 0 11
23218: PUSH
23219: LD_VAR 0 11
23223: PPUSH
23224: LD_VAR 0 10
23228: PPUSH
23229: CALL_OW 296
23233: PUSH
23234: LD_INT 13
23236: GREATER
23237: AND
23238: PUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: LD_VAR 0 10
23248: PPUSH
23249: CALL_OW 296
23253: PUSH
23254: LD_INT 12
23256: GREATER
23257: OR
23258: IFFALSE 23262
// exit ;
23260: GO 23615
// missile := [ 1 ] ;
23262: LD_ADDR_VAR 0 14
23266: PUSH
23267: LD_INT 1
23269: PUSH
23270: EMPTY
23271: LIST
23272: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23273: LD_VAR 0 9
23277: PPUSH
23278: LD_VAR 0 12
23282: PPUSH
23283: CALL_OW 325
23287: IFFALSE 23316
// missile := Replace ( missile , missile + 1 , 2 ) ;
23289: LD_ADDR_VAR 0 14
23293: PUSH
23294: LD_VAR 0 14
23298: PPUSH
23299: LD_VAR 0 14
23303: PUSH
23304: LD_INT 1
23306: PLUS
23307: PPUSH
23308: LD_INT 2
23310: PPUSH
23311: CALL_OW 1
23315: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23316: LD_VAR 0 9
23320: PPUSH
23321: LD_VAR 0 13
23325: PPUSH
23326: CALL_OW 325
23330: PUSH
23331: LD_VAR 0 10
23335: PPUSH
23336: CALL_OW 255
23340: PPUSH
23341: LD_VAR 0 13
23345: PPUSH
23346: CALL_OW 325
23350: NOT
23351: AND
23352: IFFALSE 23381
// missile := Replace ( missile , missile + 1 , 3 ) ;
23354: LD_ADDR_VAR 0 14
23358: PUSH
23359: LD_VAR 0 14
23363: PPUSH
23364: LD_VAR 0 14
23368: PUSH
23369: LD_INT 1
23371: PLUS
23372: PPUSH
23373: LD_INT 3
23375: PPUSH
23376: CALL_OW 1
23380: ST_TO_ADDR
// if missile < 2 then
23381: LD_VAR 0 14
23385: PUSH
23386: LD_INT 2
23388: LESS
23389: IFFALSE 23393
// exit ;
23391: GO 23615
// x := GetX ( enemy ) ;
23393: LD_ADDR_VAR 0 4
23397: PUSH
23398: LD_VAR 0 10
23402: PPUSH
23403: CALL_OW 250
23407: ST_TO_ADDR
// y := GetY ( enemy ) ;
23408: LD_ADDR_VAR 0 5
23412: PUSH
23413: LD_VAR 0 10
23417: PPUSH
23418: CALL_OW 251
23422: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23423: LD_ADDR_VAR 0 6
23427: PUSH
23428: LD_VAR 0 4
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PPUSH
23437: LD_INT 1
23439: PPUSH
23440: CALL_OW 12
23444: PLUS
23445: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23446: LD_ADDR_VAR 0 7
23450: PUSH
23451: LD_VAR 0 5
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PPUSH
23460: LD_INT 1
23462: PPUSH
23463: CALL_OW 12
23467: PLUS
23468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23469: LD_VAR 0 6
23473: PPUSH
23474: LD_VAR 0 7
23478: PPUSH
23479: CALL_OW 488
23483: NOT
23484: IFFALSE 23506
// begin _x := x ;
23486: LD_ADDR_VAR 0 6
23490: PUSH
23491: LD_VAR 0 4
23495: ST_TO_ADDR
// _y := y ;
23496: LD_ADDR_VAR 0 7
23500: PUSH
23501: LD_VAR 0 5
23505: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: LD_INT 1
23513: PPUSH
23514: LD_VAR 0 14
23518: PPUSH
23519: CALL_OW 12
23523: ST_TO_ADDR
// case i of 1 :
23524: LD_VAR 0 3
23528: PUSH
23529: LD_INT 1
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23554
23537: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23538: LD_VAR 0 1
23542: PPUSH
23543: LD_VAR 0 10
23547: PPUSH
23548: CALL_OW 115
23552: GO 23615
23554: LD_INT 2
23556: DOUBLE
23557: EQUAL
23558: IFTRUE 23562
23560: GO 23584
23562: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23563: LD_VAR 0 1
23567: PPUSH
23568: LD_VAR 0 6
23572: PPUSH
23573: LD_VAR 0 7
23577: PPUSH
23578: CALL_OW 153
23582: GO 23615
23584: LD_INT 3
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23614
23592: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23593: LD_VAR 0 1
23597: PPUSH
23598: LD_VAR 0 6
23602: PPUSH
23603: LD_VAR 0 7
23607: PPUSH
23608: CALL_OW 154
23612: GO 23615
23614: POP
// end ;
23615: LD_VAR 0 2
23619: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23620: LD_INT 0
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
23627: PPUSH
// if not unit or not building then
23628: LD_VAR 0 1
23632: NOT
23633: PUSH
23634: LD_VAR 0 2
23638: NOT
23639: OR
23640: IFFALSE 23644
// exit ;
23642: GO 23802
// x := GetX ( building ) ;
23644: LD_ADDR_VAR 0 5
23648: PUSH
23649: LD_VAR 0 2
23653: PPUSH
23654: CALL_OW 250
23658: ST_TO_ADDR
// y := GetY ( building ) ;
23659: LD_ADDR_VAR 0 6
23663: PUSH
23664: LD_VAR 0 2
23668: PPUSH
23669: CALL_OW 251
23673: ST_TO_ADDR
// for i = 0 to 5 do
23674: LD_ADDR_VAR 0 4
23678: PUSH
23679: DOUBLE
23680: LD_INT 0
23682: DEC
23683: ST_TO_ADDR
23684: LD_INT 5
23686: PUSH
23687: FOR_TO
23688: IFFALSE 23800
// begin _x := ShiftX ( x , i , 3 ) ;
23690: LD_ADDR_VAR 0 7
23694: PUSH
23695: LD_VAR 0 5
23699: PPUSH
23700: LD_VAR 0 4
23704: PPUSH
23705: LD_INT 3
23707: PPUSH
23708: CALL_OW 272
23712: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23713: LD_ADDR_VAR 0 8
23717: PUSH
23718: LD_VAR 0 6
23722: PPUSH
23723: LD_VAR 0 4
23727: PPUSH
23728: LD_INT 3
23730: PPUSH
23731: CALL_OW 273
23735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23736: LD_VAR 0 7
23740: PPUSH
23741: LD_VAR 0 8
23745: PPUSH
23746: CALL_OW 488
23750: NOT
23751: IFFALSE 23755
// continue ;
23753: GO 23687
// if HexInfo ( _x , _y ) = 0 then
23755: LD_VAR 0 7
23759: PPUSH
23760: LD_VAR 0 8
23764: PPUSH
23765: CALL_OW 428
23769: PUSH
23770: LD_INT 0
23772: EQUAL
23773: IFFALSE 23798
// begin ComMoveXY ( unit , _x , _y ) ;
23775: LD_VAR 0 1
23779: PPUSH
23780: LD_VAR 0 7
23784: PPUSH
23785: LD_VAR 0 8
23789: PPUSH
23790: CALL_OW 111
// exit ;
23794: POP
23795: POP
23796: GO 23802
// end ; end ;
23798: GO 23687
23800: POP
23801: POP
// end ;
23802: LD_VAR 0 3
23806: RET
// export function ScanBase ( side , base_area ) ; begin
23807: LD_INT 0
23809: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23810: LD_ADDR_VAR 0 3
23814: PUSH
23815: LD_VAR 0 2
23819: PPUSH
23820: LD_INT 81
23822: PUSH
23823: LD_VAR 0 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PPUSH
23832: CALL_OW 70
23836: ST_TO_ADDR
// end ;
23837: LD_VAR 0 3
23841: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
23846: PPUSH
23847: PPUSH
// result := false ;
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 0
23855: ST_TO_ADDR
// side := GetSide ( unit ) ;
23856: LD_ADDR_VAR 0 3
23860: PUSH
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL_OW 255
23870: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23871: LD_ADDR_VAR 0 4
23875: PUSH
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 248
23885: ST_TO_ADDR
// case nat of 1 :
23886: LD_VAR 0 4
23890: PUSH
23891: LD_INT 1
23893: DOUBLE
23894: EQUAL
23895: IFTRUE 23899
23897: GO 23910
23899: POP
// tech := tech_lassight ; 2 :
23900: LD_ADDR_VAR 0 5
23904: PUSH
23905: LD_INT 12
23907: ST_TO_ADDR
23908: GO 23949
23910: LD_INT 2
23912: DOUBLE
23913: EQUAL
23914: IFTRUE 23918
23916: GO 23929
23918: POP
// tech := tech_mortar ; 3 :
23919: LD_ADDR_VAR 0 5
23923: PUSH
23924: LD_INT 41
23926: ST_TO_ADDR
23927: GO 23949
23929: LD_INT 3
23931: DOUBLE
23932: EQUAL
23933: IFTRUE 23937
23935: GO 23948
23937: POP
// tech := tech_bazooka ; end ;
23938: LD_ADDR_VAR 0 5
23942: PUSH
23943: LD_INT 44
23945: ST_TO_ADDR
23946: GO 23949
23948: POP
// if Researched ( side , tech ) then
23949: LD_VAR 0 3
23953: PPUSH
23954: LD_VAR 0 5
23958: PPUSH
23959: CALL_OW 325
23963: IFFALSE 23990
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23965: LD_ADDR_VAR 0 2
23969: PUSH
23970: LD_INT 5
23972: PUSH
23973: LD_INT 8
23975: PUSH
23976: LD_INT 9
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: LD_VAR 0 4
23988: ARRAY
23989: ST_TO_ADDR
// end ;
23990: LD_VAR 0 2
23994: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
23999: PPUSH
// if not mines then
24000: LD_VAR 0 2
24004: NOT
24005: IFFALSE 24009
// exit ;
24007: GO 24153
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24009: LD_ADDR_VAR 0 5
24013: PUSH
24014: LD_INT 81
24016: PUSH
24017: LD_VAR 0 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: LD_INT 21
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 69
24051: ST_TO_ADDR
// for i in mines do
24052: LD_ADDR_VAR 0 4
24056: PUSH
24057: LD_VAR 0 2
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24151
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24065: LD_VAR 0 4
24069: PUSH
24070: LD_INT 1
24072: ARRAY
24073: PPUSH
24074: LD_VAR 0 4
24078: PUSH
24079: LD_INT 2
24081: ARRAY
24082: PPUSH
24083: CALL_OW 458
24087: NOT
24088: IFFALSE 24092
// continue ;
24090: GO 24062
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24092: LD_VAR 0 4
24096: PUSH
24097: LD_INT 1
24099: ARRAY
24100: PPUSH
24101: LD_VAR 0 4
24105: PUSH
24106: LD_INT 2
24108: ARRAY
24109: PPUSH
24110: CALL_OW 428
24114: PUSH
24115: LD_VAR 0 5
24119: IN
24120: IFFALSE 24149
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24122: LD_VAR 0 4
24126: PUSH
24127: LD_INT 1
24129: ARRAY
24130: PPUSH
24131: LD_VAR 0 4
24135: PUSH
24136: LD_INT 2
24138: ARRAY
24139: PPUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 456
// end ;
24149: GO 24062
24151: POP
24152: POP
// end ;
24153: LD_VAR 0 3
24157: RET
// export function Count ( array ) ; var i ; begin
24158: LD_INT 0
24160: PPUSH
24161: PPUSH
// result := 0 ;
24162: LD_ADDR_VAR 0 2
24166: PUSH
24167: LD_INT 0
24169: ST_TO_ADDR
// for i in array do
24170: LD_ADDR_VAR 0 3
24174: PUSH
24175: LD_VAR 0 1
24179: PUSH
24180: FOR_IN
24181: IFFALSE 24205
// if i then
24183: LD_VAR 0 3
24187: IFFALSE 24203
// result := result + 1 ;
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_VAR 0 2
24198: PUSH
24199: LD_INT 1
24201: PLUS
24202: ST_TO_ADDR
24203: GO 24180
24205: POP
24206: POP
// end ;
24207: LD_VAR 0 2
24211: RET
// export function IsEmpty ( building ) ; begin
24212: LD_INT 0
24214: PPUSH
// if not building then
24215: LD_VAR 0 1
24219: NOT
24220: IFFALSE 24224
// exit ;
24222: GO 24267
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_VAR 0 1
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 255
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 58
24253: PUSH
24254: EMPTY
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PPUSH
24261: CALL_OW 69
24265: IN
24266: ST_TO_ADDR
// end ;
24267: LD_VAR 0 2
24271: RET
// export function IsNotFull ( building ) ; var places ; begin
24272: LD_INT 0
24274: PPUSH
24275: PPUSH
// if not building then
24276: LD_VAR 0 1
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24456
// result := false ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 0
24292: ST_TO_ADDR
// places := 0 ;
24293: LD_ADDR_VAR 0 3
24297: PUSH
24298: LD_INT 0
24300: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 266
24310: PUSH
24311: LD_INT 0
24313: DOUBLE
24314: EQUAL
24315: IFTRUE 24373
24317: LD_INT 1
24319: DOUBLE
24320: EQUAL
24321: IFTRUE 24373
24323: LD_INT 6
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24373
24329: LD_INT 7
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24373
24335: LD_INT 8
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24373
24341: LD_INT 4
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24373
24347: LD_INT 5
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24373
24353: LD_INT 2
24355: DOUBLE
24356: EQUAL
24357: IFTRUE 24373
24359: LD_INT 3
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24373
24365: LD_INT 35
24367: DOUBLE
24368: EQUAL
24369: IFTRUE 24373
24371: GO 24384
24373: POP
// places := 6 ; b_bunker , b_breastwork :
24374: LD_ADDR_VAR 0 3
24378: PUSH
24379: LD_INT 6
24381: ST_TO_ADDR
24382: GO 24429
24384: LD_INT 32
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24398
24390: LD_INT 31
24392: DOUBLE
24393: EQUAL
24394: IFTRUE 24398
24396: GO 24409
24398: POP
// places := 1 ; b_control_tower :
24399: LD_ADDR_VAR 0 3
24403: PUSH
24404: LD_INT 1
24406: ST_TO_ADDR
24407: GO 24429
24409: LD_INT 36
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24428
24417: POP
// places := 3 ; end ;
24418: LD_ADDR_VAR 0 3
24422: PUSH
24423: LD_INT 3
24425: ST_TO_ADDR
24426: GO 24429
24428: POP
// if places then
24429: LD_VAR 0 3
24433: IFFALSE 24456
// result := UnitsInside ( building ) < places ;
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 313
24449: PUSH
24450: LD_VAR 0 3
24454: LESS
24455: ST_TO_ADDR
// end ;
24456: LD_VAR 0 2
24460: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
24465: PPUSH
24466: PPUSH
// tmp := [ ] ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: EMPTY
24473: ST_TO_ADDR
// list := [ ] ;
24474: LD_ADDR_VAR 0 5
24478: PUSH
24479: EMPTY
24480: ST_TO_ADDR
// for i = 16 to 25 do
24481: LD_ADDR_VAR 0 4
24485: PUSH
24486: DOUBLE
24487: LD_INT 16
24489: DEC
24490: ST_TO_ADDR
24491: LD_INT 25
24493: PUSH
24494: FOR_TO
24495: IFFALSE 24568
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_INT 22
24509: PUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 255
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 91
24526: PUSH
24527: LD_VAR 0 1
24531: PUSH
24532: LD_INT 6
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 30
24542: PUSH
24543: LD_VAR 0 4
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: PPUSH
24560: CALL_OW 69
24564: ADD
24565: ST_TO_ADDR
24566: GO 24494
24568: POP
24569: POP
// for i = 1 to tmp do
24570: LD_ADDR_VAR 0 4
24574: PUSH
24575: DOUBLE
24576: LD_INT 1
24578: DEC
24579: ST_TO_ADDR
24580: LD_VAR 0 3
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24674
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24588: LD_ADDR_VAR 0 5
24592: PUSH
24593: LD_VAR 0 5
24597: PUSH
24598: LD_VAR 0 3
24602: PUSH
24603: LD_VAR 0 4
24607: ARRAY
24608: PPUSH
24609: CALL_OW 266
24613: PUSH
24614: LD_VAR 0 3
24618: PUSH
24619: LD_VAR 0 4
24623: ARRAY
24624: PPUSH
24625: CALL_OW 250
24629: PUSH
24630: LD_VAR 0 3
24634: PUSH
24635: LD_VAR 0 4
24639: ARRAY
24640: PPUSH
24641: CALL_OW 251
24645: PUSH
24646: LD_VAR 0 3
24650: PUSH
24651: LD_VAR 0 4
24655: ARRAY
24656: PPUSH
24657: CALL_OW 254
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: PUSH
24668: EMPTY
24669: LIST
24670: ADD
24671: ST_TO_ADDR
24672: GO 24585
24674: POP
24675: POP
// result := list ;
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: LD_VAR 0 5
24685: ST_TO_ADDR
// end ;
24686: LD_VAR 0 2
24690: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24691: LD_INT 0
24693: PPUSH
24694: PPUSH
24695: PPUSH
24696: PPUSH
24697: PPUSH
24698: PPUSH
24699: PPUSH
// if not factory then
24700: LD_VAR 0 1
24704: NOT
24705: IFFALSE 24709
// exit ;
24707: GO 25302
// if control = control_apeman then
24709: LD_VAR 0 4
24713: PUSH
24714: LD_INT 5
24716: EQUAL
24717: IFFALSE 24826
// begin tmp := UnitsInside ( factory ) ;
24719: LD_ADDR_VAR 0 8
24723: PUSH
24724: LD_VAR 0 1
24728: PPUSH
24729: CALL_OW 313
24733: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24734: LD_VAR 0 8
24738: PPUSH
24739: LD_INT 25
24741: PUSH
24742: LD_INT 12
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 72
24753: NOT
24754: IFFALSE 24764
// control := control_manual ;
24756: LD_ADDR_VAR 0 4
24760: PUSH
24761: LD_INT 1
24763: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24764: LD_ADDR_VAR 0 8
24768: PUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL 24461 0 1
24778: ST_TO_ADDR
// if tmp then
24779: LD_VAR 0 8
24783: IFFALSE 24826
// begin for i in tmp do
24785: LD_ADDR_VAR 0 7
24789: PUSH
24790: LD_VAR 0 8
24794: PUSH
24795: FOR_IN
24796: IFFALSE 24824
// if i [ 1 ] = b_ext_radio then
24798: LD_VAR 0 7
24802: PUSH
24803: LD_INT 1
24805: ARRAY
24806: PUSH
24807: LD_INT 22
24809: EQUAL
24810: IFFALSE 24822
// begin control := control_remote ;
24812: LD_ADDR_VAR 0 4
24816: PUSH
24817: LD_INT 2
24819: ST_TO_ADDR
// break ;
24820: GO 24824
// end ;
24822: GO 24795
24824: POP
24825: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24826: LD_VAR 0 1
24830: PPUSH
24831: LD_VAR 0 2
24835: PPUSH
24836: LD_VAR 0 3
24840: PPUSH
24841: LD_VAR 0 4
24845: PPUSH
24846: LD_VAR 0 5
24850: PPUSH
24851: CALL_OW 448
24855: IFFALSE 24890
// begin result := [ chassis , engine , control , weapon ] ;
24857: LD_ADDR_VAR 0 6
24861: PUSH
24862: LD_VAR 0 2
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: LD_VAR 0 4
24876: PUSH
24877: LD_VAR 0 5
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// exit ;
24888: GO 25302
// end ; _chassis := AvailableChassisList ( factory ) ;
24890: LD_ADDR_VAR 0 9
24894: PUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 475
24904: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24905: LD_ADDR_VAR 0 11
24909: PUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 476
24919: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24920: LD_ADDR_VAR 0 12
24924: PUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 477
24934: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24935: LD_ADDR_VAR 0 10
24939: PUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 478
24949: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24950: LD_VAR 0 9
24954: NOT
24955: PUSH
24956: LD_VAR 0 11
24960: NOT
24961: OR
24962: PUSH
24963: LD_VAR 0 12
24967: NOT
24968: OR
24969: PUSH
24970: LD_VAR 0 10
24974: NOT
24975: OR
24976: IFFALSE 25011
// begin result := [ chassis , engine , control , weapon ] ;
24978: LD_ADDR_VAR 0 6
24982: PUSH
24983: LD_VAR 0 2
24987: PUSH
24988: LD_VAR 0 3
24992: PUSH
24993: LD_VAR 0 4
24997: PUSH
24998: LD_VAR 0 5
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
// exit ;
25009: GO 25302
// end ; if not chassis in _chassis then
25011: LD_VAR 0 2
25015: PUSH
25016: LD_VAR 0 9
25020: IN
25021: NOT
25022: IFFALSE 25048
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25024: LD_ADDR_VAR 0 2
25028: PUSH
25029: LD_VAR 0 9
25033: PUSH
25034: LD_INT 1
25036: PPUSH
25037: LD_VAR 0 9
25041: PPUSH
25042: CALL_OW 12
25046: ARRAY
25047: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25048: LD_VAR 0 2
25052: PPUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: CALL 25307 0 2
25062: NOT
25063: IFFALSE 25122
// repeat engine := _engine [ 1 ] ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_VAR 0 11
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25079: LD_ADDR_VAR 0 11
25083: PUSH
25084: LD_VAR 0 11
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: CALL_OW 3
25096: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_VAR 0 3
25106: PPUSH
25107: CALL 25307 0 2
25111: PUSH
25112: LD_VAR 0 11
25116: PUSH
25117: EMPTY
25118: EQUAL
25119: OR
25120: IFFALSE 25065
// if not control in _control then
25122: LD_VAR 0 4
25126: PUSH
25127: LD_VAR 0 12
25131: IN
25132: NOT
25133: IFFALSE 25159
// control := _control [ rand ( 1 , _control ) ] ;
25135: LD_ADDR_VAR 0 4
25139: PUSH
25140: LD_VAR 0 12
25144: PUSH
25145: LD_INT 1
25147: PPUSH
25148: LD_VAR 0 12
25152: PPUSH
25153: CALL_OW 12
25157: ARRAY
25158: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_VAR 0 5
25168: PPUSH
25169: CALL 25527 0 2
25173: NOT
25174: IFFALSE 25233
// repeat weapon := _weapon [ 1 ] ;
25176: LD_ADDR_VAR 0 5
25180: PUSH
25181: LD_VAR 0 10
25185: PUSH
25186: LD_INT 1
25188: ARRAY
25189: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25190: LD_ADDR_VAR 0 10
25194: PUSH
25195: LD_VAR 0 10
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL_OW 3
25207: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25208: LD_VAR 0 2
25212: PPUSH
25213: LD_VAR 0 5
25217: PPUSH
25218: CALL 25527 0 2
25222: PUSH
25223: LD_VAR 0 10
25227: PUSH
25228: EMPTY
25229: EQUAL
25230: OR
25231: IFFALSE 25176
// result := [ ] ;
25233: LD_ADDR_VAR 0 6
25237: PUSH
25238: EMPTY
25239: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25240: LD_VAR 0 1
25244: PPUSH
25245: LD_VAR 0 2
25249: PPUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: LD_VAR 0 4
25259: PPUSH
25260: LD_VAR 0 5
25264: PPUSH
25265: CALL_OW 448
25269: IFFALSE 25302
// result := [ chassis , engine , control , weapon ] ;
25271: LD_ADDR_VAR 0 6
25275: PUSH
25276: LD_VAR 0 2
25280: PUSH
25281: LD_VAR 0 3
25285: PUSH
25286: LD_VAR 0 4
25290: PUSH
25291: LD_VAR 0 5
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: ST_TO_ADDR
// end ;
25302: LD_VAR 0 6
25306: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25307: LD_INT 0
25309: PPUSH
// if not chassis or not engine then
25310: LD_VAR 0 1
25314: NOT
25315: PUSH
25316: LD_VAR 0 2
25320: NOT
25321: OR
25322: IFFALSE 25326
// exit ;
25324: GO 25522
// case engine of engine_solar :
25326: LD_VAR 0 2
25330: PUSH
25331: LD_INT 2
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25377
25339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_INT 11
25347: PUSH
25348: LD_INT 12
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: LD_INT 14
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: ST_TO_ADDR
25375: GO 25506
25377: LD_INT 1
25379: DOUBLE
25380: EQUAL
25381: IFTRUE 25385
25383: GO 25447
25385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_INT 11
25393: PUSH
25394: LD_INT 12
25396: PUSH
25397: LD_INT 13
25399: PUSH
25400: LD_INT 14
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: LD_INT 4
25414: PUSH
25415: LD_INT 5
25417: PUSH
25418: LD_INT 21
25420: PUSH
25421: LD_INT 23
25423: PUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 24
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: ST_TO_ADDR
25445: GO 25506
25447: LD_INT 3
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25455
25453: GO 25505
25455: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_INT 13
25463: PUSH
25464: LD_INT 14
25466: PUSH
25467: LD_INT 2
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 4
25475: PUSH
25476: LD_INT 5
25478: PUSH
25479: LD_INT 21
25481: PUSH
25482: LD_INT 22
25484: PUSH
25485: LD_INT 23
25487: PUSH
25488: LD_INT 24
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
25503: GO 25506
25505: POP
// result := ( chassis in result ) ;
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_VAR 0 1
25515: PUSH
25516: LD_VAR 0 3
25520: IN
25521: ST_TO_ADDR
// end ;
25522: LD_VAR 0 3
25526: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25527: LD_INT 0
25529: PPUSH
// if not chassis or not weapon then
25530: LD_VAR 0 1
25534: NOT
25535: PUSH
25536: LD_VAR 0 2
25540: NOT
25541: OR
25542: IFFALSE 25546
// exit ;
25544: GO 26606
// case weapon of us_machine_gun :
25546: LD_VAR 0 2
25550: PUSH
25551: LD_INT 2
25553: DOUBLE
25554: EQUAL
25555: IFTRUE 25559
25557: GO 25589
25559: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 3
25573: PUSH
25574: LD_INT 4
25576: PUSH
25577: LD_INT 5
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: ST_TO_ADDR
25587: GO 26590
25589: LD_INT 3
25591: DOUBLE
25592: EQUAL
25593: IFTRUE 25597
25595: GO 25627
25597: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 3
25611: PUSH
25612: LD_INT 4
25614: PUSH
25615: LD_INT 5
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: ST_TO_ADDR
25625: GO 26590
25627: LD_INT 11
25629: DOUBLE
25630: EQUAL
25631: IFTRUE 25635
25633: GO 25665
25635: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: LD_INT 3
25649: PUSH
25650: LD_INT 4
25652: PUSH
25653: LD_INT 5
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
25663: GO 26590
25665: LD_INT 4
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25699
25673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 4
25687: PUSH
25688: LD_INT 5
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
25697: GO 26590
25699: LD_INT 5
25701: DOUBLE
25702: EQUAL
25703: IFTRUE 25707
25705: GO 25733
25707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: LD_INT 4
25721: PUSH
25722: LD_INT 5
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: ST_TO_ADDR
25731: GO 26590
25733: LD_INT 9
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25767
25741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25742: LD_ADDR_VAR 0 3
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 3
25752: PUSH
25753: LD_INT 4
25755: PUSH
25756: LD_INT 5
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: ST_TO_ADDR
25765: GO 26590
25767: LD_INT 7
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25775
25773: GO 25801
25775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 3
25786: PUSH
25787: LD_INT 4
25789: PUSH
25790: LD_INT 5
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: ST_TO_ADDR
25799: GO 26590
25801: LD_INT 12
25803: DOUBLE
25804: EQUAL
25805: IFTRUE 25809
25807: GO 25835
25809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25810: LD_ADDR_VAR 0 3
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 3
25820: PUSH
25821: LD_INT 4
25823: PUSH
25824: LD_INT 5
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: ST_TO_ADDR
25833: GO 26590
25835: LD_INT 13
25837: DOUBLE
25838: EQUAL
25839: IFTRUE 25843
25841: GO 25869
25843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25844: LD_ADDR_VAR 0 3
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 3
25854: PUSH
25855: LD_INT 4
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
25867: GO 26590
25869: LD_INT 14
25871: DOUBLE
25872: EQUAL
25873: IFTRUE 25877
25875: GO 25895
25877: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: LD_INT 4
25885: PUSH
25886: LD_INT 5
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: ST_TO_ADDR
25893: GO 26590
25895: LD_INT 6
25897: DOUBLE
25898: EQUAL
25899: IFTRUE 25903
25901: GO 25921
25903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25904: LD_ADDR_VAR 0 3
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: ST_TO_ADDR
25919: GO 26590
25921: LD_INT 10
25923: DOUBLE
25924: EQUAL
25925: IFTRUE 25929
25927: GO 25947
25929: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_INT 4
25937: PUSH
25938: LD_INT 5
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: ST_TO_ADDR
25945: GO 26590
25947: LD_INT 22
25949: DOUBLE
25950: EQUAL
25951: IFTRUE 25955
25953: GO 25981
25955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25956: LD_ADDR_VAR 0 3
25960: PUSH
25961: LD_INT 11
25963: PUSH
25964: LD_INT 12
25966: PUSH
25967: LD_INT 13
25969: PUSH
25970: LD_INT 14
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: ST_TO_ADDR
25979: GO 26590
25981: LD_INT 23
25983: DOUBLE
25984: EQUAL
25985: IFTRUE 25989
25987: GO 26015
25989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25990: LD_ADDR_VAR 0 3
25994: PUSH
25995: LD_INT 11
25997: PUSH
25998: LD_INT 12
26000: PUSH
26001: LD_INT 13
26003: PUSH
26004: LD_INT 14
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: ST_TO_ADDR
26013: GO 26590
26015: LD_INT 24
26017: DOUBLE
26018: EQUAL
26019: IFTRUE 26023
26021: GO 26049
26023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26024: LD_ADDR_VAR 0 3
26028: PUSH
26029: LD_INT 11
26031: PUSH
26032: LD_INT 12
26034: PUSH
26035: LD_INT 13
26037: PUSH
26038: LD_INT 14
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: ST_TO_ADDR
26047: GO 26590
26049: LD_INT 30
26051: DOUBLE
26052: EQUAL
26053: IFTRUE 26057
26055: GO 26083
26057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26058: LD_ADDR_VAR 0 3
26062: PUSH
26063: LD_INT 11
26065: PUSH
26066: LD_INT 12
26068: PUSH
26069: LD_INT 13
26071: PUSH
26072: LD_INT 14
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: ST_TO_ADDR
26081: GO 26590
26083: LD_INT 25
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26109
26091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 13
26099: PUSH
26100: LD_INT 14
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: ST_TO_ADDR
26107: GO 26590
26109: LD_INT 27
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26135
26117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26118: LD_ADDR_VAR 0 3
26122: PUSH
26123: LD_INT 13
26125: PUSH
26126: LD_INT 14
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: ST_TO_ADDR
26133: GO 26590
26135: LD_INT 92
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26169
26143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: LD_INT 11
26151: PUSH
26152: LD_INT 12
26154: PUSH
26155: LD_INT 13
26157: PUSH
26158: LD_INT 14
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: ST_TO_ADDR
26167: GO 26590
26169: LD_INT 28
26171: DOUBLE
26172: EQUAL
26173: IFTRUE 26177
26175: GO 26195
26177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_INT 13
26185: PUSH
26186: LD_INT 14
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: ST_TO_ADDR
26193: GO 26590
26195: LD_INT 29
26197: DOUBLE
26198: EQUAL
26199: IFTRUE 26203
26201: GO 26221
26203: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26204: LD_ADDR_VAR 0 3
26208: PUSH
26209: LD_INT 13
26211: PUSH
26212: LD_INT 14
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: ST_TO_ADDR
26219: GO 26590
26221: LD_INT 31
26223: DOUBLE
26224: EQUAL
26225: IFTRUE 26229
26227: GO 26247
26229: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26230: LD_ADDR_VAR 0 3
26234: PUSH
26235: LD_INT 13
26237: PUSH
26238: LD_INT 14
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: ST_TO_ADDR
26245: GO 26590
26247: LD_INT 26
26249: DOUBLE
26250: EQUAL
26251: IFTRUE 26255
26253: GO 26273
26255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26256: LD_ADDR_VAR 0 3
26260: PUSH
26261: LD_INT 13
26263: PUSH
26264: LD_INT 14
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: ST_TO_ADDR
26271: GO 26590
26273: LD_INT 42
26275: DOUBLE
26276: EQUAL
26277: IFTRUE 26281
26279: GO 26307
26281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26282: LD_ADDR_VAR 0 3
26286: PUSH
26287: LD_INT 21
26289: PUSH
26290: LD_INT 22
26292: PUSH
26293: LD_INT 23
26295: PUSH
26296: LD_INT 24
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
26305: GO 26590
26307: LD_INT 43
26309: DOUBLE
26310: EQUAL
26311: IFTRUE 26315
26313: GO 26341
26315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26316: LD_ADDR_VAR 0 3
26320: PUSH
26321: LD_INT 21
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_INT 23
26329: PUSH
26330: LD_INT 24
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: ST_TO_ADDR
26339: GO 26590
26341: LD_INT 44
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26375
26349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26350: LD_ADDR_VAR 0 3
26354: PUSH
26355: LD_INT 21
26357: PUSH
26358: LD_INT 22
26360: PUSH
26361: LD_INT 23
26363: PUSH
26364: LD_INT 24
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
26373: GO 26590
26375: LD_INT 45
26377: DOUBLE
26378: EQUAL
26379: IFTRUE 26383
26381: GO 26409
26383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26384: LD_ADDR_VAR 0 3
26388: PUSH
26389: LD_INT 21
26391: PUSH
26392: LD_INT 22
26394: PUSH
26395: LD_INT 23
26397: PUSH
26398: LD_INT 24
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
26407: GO 26590
26409: LD_INT 49
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26443
26417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_INT 21
26425: PUSH
26426: LD_INT 22
26428: PUSH
26429: LD_INT 23
26431: PUSH
26432: LD_INT 24
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
26441: GO 26590
26443: LD_INT 51
26445: DOUBLE
26446: EQUAL
26447: IFTRUE 26451
26449: GO 26477
26451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26452: LD_ADDR_VAR 0 3
26456: PUSH
26457: LD_INT 21
26459: PUSH
26460: LD_INT 22
26462: PUSH
26463: LD_INT 23
26465: PUSH
26466: LD_INT 24
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
26475: GO 26590
26477: LD_INT 52
26479: DOUBLE
26480: EQUAL
26481: IFTRUE 26485
26483: GO 26511
26485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26486: LD_ADDR_VAR 0 3
26490: PUSH
26491: LD_INT 21
26493: PUSH
26494: LD_INT 22
26496: PUSH
26497: LD_INT 23
26499: PUSH
26500: LD_INT 24
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: ST_TO_ADDR
26509: GO 26590
26511: LD_INT 53
26513: DOUBLE
26514: EQUAL
26515: IFTRUE 26519
26517: GO 26537
26519: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_INT 23
26527: PUSH
26528: LD_INT 24
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: ST_TO_ADDR
26535: GO 26590
26537: LD_INT 46
26539: DOUBLE
26540: EQUAL
26541: IFTRUE 26545
26543: GO 26563
26545: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26546: LD_ADDR_VAR 0 3
26550: PUSH
26551: LD_INT 23
26553: PUSH
26554: LD_INT 24
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: ST_TO_ADDR
26561: GO 26590
26563: LD_INT 47
26565: DOUBLE
26566: EQUAL
26567: IFTRUE 26571
26569: GO 26589
26571: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26572: LD_ADDR_VAR 0 3
26576: PUSH
26577: LD_INT 23
26579: PUSH
26580: LD_INT 24
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: ST_TO_ADDR
26587: GO 26590
26589: POP
// result := ( chassis in result ) ;
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_VAR 0 1
26599: PUSH
26600: LD_VAR 0 3
26604: IN
26605: ST_TO_ADDR
// end ;
26606: LD_VAR 0 3
26610: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26611: LD_INT 0
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
// result := array ;
26620: LD_ADDR_VAR 0 5
26624: PUSH
26625: LD_VAR 0 1
26629: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26630: LD_VAR 0 1
26634: NOT
26635: PUSH
26636: LD_VAR 0 2
26640: NOT
26641: OR
26642: PUSH
26643: LD_VAR 0 3
26647: NOT
26648: OR
26649: PUSH
26650: LD_VAR 0 2
26654: PUSH
26655: LD_VAR 0 1
26659: GREATER
26660: OR
26661: PUSH
26662: LD_VAR 0 3
26666: PUSH
26667: LD_VAR 0 1
26671: GREATER
26672: OR
26673: IFFALSE 26677
// exit ;
26675: GO 26973
// if direction then
26677: LD_VAR 0 4
26681: IFFALSE 26745
// begin d := 1 ;
26683: LD_ADDR_VAR 0 9
26687: PUSH
26688: LD_INT 1
26690: ST_TO_ADDR
// if i_from > i_to then
26691: LD_VAR 0 2
26695: PUSH
26696: LD_VAR 0 3
26700: GREATER
26701: IFFALSE 26727
// length := ( array - i_from ) + i_to else
26703: LD_ADDR_VAR 0 11
26707: PUSH
26708: LD_VAR 0 1
26712: PUSH
26713: LD_VAR 0 2
26717: MINUS
26718: PUSH
26719: LD_VAR 0 3
26723: PLUS
26724: ST_TO_ADDR
26725: GO 26743
// length := i_to - i_from ;
26727: LD_ADDR_VAR 0 11
26731: PUSH
26732: LD_VAR 0 3
26736: PUSH
26737: LD_VAR 0 2
26741: MINUS
26742: ST_TO_ADDR
// end else
26743: GO 26806
// begin d := - 1 ;
26745: LD_ADDR_VAR 0 9
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: ST_TO_ADDR
// if i_from > i_to then
26754: LD_VAR 0 2
26758: PUSH
26759: LD_VAR 0 3
26763: GREATER
26764: IFFALSE 26784
// length := i_from - i_to else
26766: LD_ADDR_VAR 0 11
26770: PUSH
26771: LD_VAR 0 2
26775: PUSH
26776: LD_VAR 0 3
26780: MINUS
26781: ST_TO_ADDR
26782: GO 26806
// length := ( array - i_to ) + i_from ;
26784: LD_ADDR_VAR 0 11
26788: PUSH
26789: LD_VAR 0 1
26793: PUSH
26794: LD_VAR 0 3
26798: MINUS
26799: PUSH
26800: LD_VAR 0 2
26804: PLUS
26805: ST_TO_ADDR
// end ; if not length then
26806: LD_VAR 0 11
26810: NOT
26811: IFFALSE 26815
// exit ;
26813: GO 26973
// tmp := array ;
26815: LD_ADDR_VAR 0 10
26819: PUSH
26820: LD_VAR 0 1
26824: ST_TO_ADDR
// for i = 1 to length do
26825: LD_ADDR_VAR 0 6
26829: PUSH
26830: DOUBLE
26831: LD_INT 1
26833: DEC
26834: ST_TO_ADDR
26835: LD_VAR 0 11
26839: PUSH
26840: FOR_TO
26841: IFFALSE 26961
// begin for j = 1 to array do
26843: LD_ADDR_VAR 0 7
26847: PUSH
26848: DOUBLE
26849: LD_INT 1
26851: DEC
26852: ST_TO_ADDR
26853: LD_VAR 0 1
26857: PUSH
26858: FOR_TO
26859: IFFALSE 26947
// begin k := j + d ;
26861: LD_ADDR_VAR 0 8
26865: PUSH
26866: LD_VAR 0 7
26870: PUSH
26871: LD_VAR 0 9
26875: PLUS
26876: ST_TO_ADDR
// if k > array then
26877: LD_VAR 0 8
26881: PUSH
26882: LD_VAR 0 1
26886: GREATER
26887: IFFALSE 26897
// k := 1 ;
26889: LD_ADDR_VAR 0 8
26893: PUSH
26894: LD_INT 1
26896: ST_TO_ADDR
// if not k then
26897: LD_VAR 0 8
26901: NOT
26902: IFFALSE 26914
// k := array ;
26904: LD_ADDR_VAR 0 8
26908: PUSH
26909: LD_VAR 0 1
26913: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26914: LD_ADDR_VAR 0 10
26918: PUSH
26919: LD_VAR 0 10
26923: PPUSH
26924: LD_VAR 0 8
26928: PPUSH
26929: LD_VAR 0 1
26933: PUSH
26934: LD_VAR 0 7
26938: ARRAY
26939: PPUSH
26940: CALL_OW 1
26944: ST_TO_ADDR
// end ;
26945: GO 26858
26947: POP
26948: POP
// array := tmp ;
26949: LD_ADDR_VAR 0 1
26953: PUSH
26954: LD_VAR 0 10
26958: ST_TO_ADDR
// end ;
26959: GO 26840
26961: POP
26962: POP
// result := array ;
26963: LD_ADDR_VAR 0 5
26967: PUSH
26968: LD_VAR 0 1
26972: ST_TO_ADDR
// end ;
26973: LD_VAR 0 5
26977: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26978: LD_INT 0
26980: PPUSH
26981: PPUSH
// result := 0 ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_INT 0
26989: ST_TO_ADDR
// if not array or not value in array then
26990: LD_VAR 0 1
26994: NOT
26995: PUSH
26996: LD_VAR 0 2
27000: PUSH
27001: LD_VAR 0 1
27005: IN
27006: NOT
27007: OR
27008: IFFALSE 27012
// exit ;
27010: GO 27066
// for i = 1 to array do
27012: LD_ADDR_VAR 0 4
27016: PUSH
27017: DOUBLE
27018: LD_INT 1
27020: DEC
27021: ST_TO_ADDR
27022: LD_VAR 0 1
27026: PUSH
27027: FOR_TO
27028: IFFALSE 27064
// if value = array [ i ] then
27030: LD_VAR 0 2
27034: PUSH
27035: LD_VAR 0 1
27039: PUSH
27040: LD_VAR 0 4
27044: ARRAY
27045: EQUAL
27046: IFFALSE 27062
// begin result := i ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 4
27057: ST_TO_ADDR
// exit ;
27058: POP
27059: POP
27060: GO 27066
// end ;
27062: GO 27027
27064: POP
27065: POP
// end ;
27066: LD_VAR 0 3
27070: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27071: LD_INT 0
27073: PPUSH
// vc_chassis := chassis ;
27074: LD_ADDR_OWVAR 37
27078: PUSH
27079: LD_VAR 0 1
27083: ST_TO_ADDR
// vc_engine := engine ;
27084: LD_ADDR_OWVAR 39
27088: PUSH
27089: LD_VAR 0 2
27093: ST_TO_ADDR
// vc_control := control ;
27094: LD_ADDR_OWVAR 38
27098: PUSH
27099: LD_VAR 0 3
27103: ST_TO_ADDR
// vc_weapon := weapon ;
27104: LD_ADDR_OWVAR 40
27108: PUSH
27109: LD_VAR 0 4
27113: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27114: LD_ADDR_OWVAR 41
27118: PUSH
27119: LD_VAR 0 5
27123: ST_TO_ADDR
// end ;
27124: LD_VAR 0 6
27128: RET
// export function WantPlant ( unit ) ; var task ; begin
27129: LD_INT 0
27131: PPUSH
27132: PPUSH
// result := false ;
27133: LD_ADDR_VAR 0 2
27137: PUSH
27138: LD_INT 0
27140: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 437
27155: ST_TO_ADDR
// if task then
27156: LD_VAR 0 3
27160: IFFALSE 27188
// if task [ 1 ] [ 1 ] = p then
27162: LD_VAR 0 3
27166: PUSH
27167: LD_INT 1
27169: ARRAY
27170: PUSH
27171: LD_INT 1
27173: ARRAY
27174: PUSH
27175: LD_STRING p
27177: EQUAL
27178: IFFALSE 27188
// result := true ;
27180: LD_ADDR_VAR 0 2
27184: PUSH
27185: LD_INT 1
27187: ST_TO_ADDR
// end ;
27188: LD_VAR 0 2
27192: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27193: LD_INT 0
27195: PPUSH
27196: PPUSH
27197: PPUSH
27198: PPUSH
// if pos < 1 then
27199: LD_VAR 0 2
27203: PUSH
27204: LD_INT 1
27206: LESS
27207: IFFALSE 27211
// exit ;
27209: GO 27514
// if pos = 1 then
27211: LD_VAR 0 2
27215: PUSH
27216: LD_INT 1
27218: EQUAL
27219: IFFALSE 27252
// result := Replace ( arr , pos [ 1 ] , value ) else
27221: LD_ADDR_VAR 0 4
27225: PUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_VAR 0 2
27235: PUSH
27236: LD_INT 1
27238: ARRAY
27239: PPUSH
27240: LD_VAR 0 3
27244: PPUSH
27245: CALL_OW 1
27249: ST_TO_ADDR
27250: GO 27514
// begin tmp := arr ;
27252: LD_ADDR_VAR 0 6
27256: PUSH
27257: LD_VAR 0 1
27261: ST_TO_ADDR
// s_arr := [ tmp ] ;
27262: LD_ADDR_VAR 0 7
27266: PUSH
27267: LD_VAR 0 6
27271: PUSH
27272: EMPTY
27273: LIST
27274: ST_TO_ADDR
// for i = 1 to pos - 1 do
27275: LD_ADDR_VAR 0 5
27279: PUSH
27280: DOUBLE
27281: LD_INT 1
27283: DEC
27284: ST_TO_ADDR
27285: LD_VAR 0 2
27289: PUSH
27290: LD_INT 1
27292: MINUS
27293: PUSH
27294: FOR_TO
27295: IFFALSE 27340
// begin tmp := tmp [ pos [ i ] ] ;
27297: LD_ADDR_VAR 0 6
27301: PUSH
27302: LD_VAR 0 6
27306: PUSH
27307: LD_VAR 0 2
27311: PUSH
27312: LD_VAR 0 5
27316: ARRAY
27317: ARRAY
27318: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27319: LD_ADDR_VAR 0 7
27323: PUSH
27324: LD_VAR 0 7
27328: PUSH
27329: LD_VAR 0 6
27333: PUSH
27334: EMPTY
27335: LIST
27336: ADD
27337: ST_TO_ADDR
// end ;
27338: GO 27294
27340: POP
27341: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27342: LD_ADDR_VAR 0 6
27346: PUSH
27347: LD_VAR 0 6
27351: PPUSH
27352: LD_VAR 0 2
27356: PUSH
27357: LD_VAR 0 2
27361: ARRAY
27362: PPUSH
27363: LD_VAR 0 3
27367: PPUSH
27368: CALL_OW 1
27372: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27373: LD_ADDR_VAR 0 7
27377: PUSH
27378: LD_VAR 0 7
27382: PPUSH
27383: LD_VAR 0 7
27387: PPUSH
27388: LD_VAR 0 6
27392: PPUSH
27393: CALL_OW 1
27397: ST_TO_ADDR
// for i = s_arr downto 2 do
27398: LD_ADDR_VAR 0 5
27402: PUSH
27403: DOUBLE
27404: LD_VAR 0 7
27408: INC
27409: ST_TO_ADDR
27410: LD_INT 2
27412: PUSH
27413: FOR_DOWNTO
27414: IFFALSE 27498
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27416: LD_ADDR_VAR 0 6
27420: PUSH
27421: LD_VAR 0 7
27425: PUSH
27426: LD_VAR 0 5
27430: PUSH
27431: LD_INT 1
27433: MINUS
27434: ARRAY
27435: PPUSH
27436: LD_VAR 0 2
27440: PUSH
27441: LD_VAR 0 5
27445: PUSH
27446: LD_INT 1
27448: MINUS
27449: ARRAY
27450: PPUSH
27451: LD_VAR 0 7
27455: PUSH
27456: LD_VAR 0 5
27460: ARRAY
27461: PPUSH
27462: CALL_OW 1
27466: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27467: LD_ADDR_VAR 0 7
27471: PUSH
27472: LD_VAR 0 7
27476: PPUSH
27477: LD_VAR 0 5
27481: PUSH
27482: LD_INT 1
27484: MINUS
27485: PPUSH
27486: LD_VAR 0 6
27490: PPUSH
27491: CALL_OW 1
27495: ST_TO_ADDR
// end ;
27496: GO 27413
27498: POP
27499: POP
// result := s_arr [ 1 ] ;
27500: LD_ADDR_VAR 0 4
27504: PUSH
27505: LD_VAR 0 7
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: ST_TO_ADDR
// end ; end ;
27514: LD_VAR 0 4
27518: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27519: LD_INT 0
27521: PPUSH
27522: PPUSH
// if not list then
27523: LD_VAR 0 1
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27623
// i := list [ pos1 ] ;
27532: LD_ADDR_VAR 0 5
27536: PUSH
27537: LD_VAR 0 1
27541: PUSH
27542: LD_VAR 0 2
27546: ARRAY
27547: ST_TO_ADDR
// if not i then
27548: LD_VAR 0 5
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 27623
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27557: LD_ADDR_VAR 0 1
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_VAR 0 1
27576: PUSH
27577: LD_VAR 0 3
27581: ARRAY
27582: PPUSH
27583: CALL_OW 1
27587: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27588: LD_ADDR_VAR 0 1
27592: PUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: LD_VAR 0 3
27602: PPUSH
27603: LD_VAR 0 5
27607: PPUSH
27608: CALL_OW 1
27612: ST_TO_ADDR
// result := list ;
27613: LD_ADDR_VAR 0 4
27617: PUSH
27618: LD_VAR 0 1
27622: ST_TO_ADDR
// end ;
27623: LD_VAR 0 4
27627: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27628: LD_INT 0
27630: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27631: LD_ADDR_VAR 0 5
27635: PUSH
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL_OW 250
27645: PPUSH
27646: LD_VAR 0 1
27650: PPUSH
27651: CALL_OW 251
27655: PPUSH
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_VAR 0 4
27670: PPUSH
27671: CALL 27681 0 5
27675: ST_TO_ADDR
// end ;
27676: LD_VAR 0 5
27680: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
// if not list then
27687: LD_VAR 0 3
27691: NOT
27692: IFFALSE 27696
// exit ;
27694: GO 28084
// result := [ ] ;
27696: LD_ADDR_VAR 0 6
27700: PUSH
27701: EMPTY
27702: ST_TO_ADDR
// for i in list do
27703: LD_ADDR_VAR 0 7
27707: PUSH
27708: LD_VAR 0 3
27712: PUSH
27713: FOR_IN
27714: IFFALSE 27916
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27716: LD_ADDR_VAR 0 9
27720: PUSH
27721: LD_VAR 0 7
27725: PPUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: LD_VAR 0 2
27735: PPUSH
27736: CALL_OW 297
27740: ST_TO_ADDR
// if not result then
27741: LD_VAR 0 6
27745: NOT
27746: IFFALSE 27772
// result := [ [ i , tmp ] ] else
27748: LD_ADDR_VAR 0 6
27752: PUSH
27753: LD_VAR 0 7
27757: PUSH
27758: LD_VAR 0 9
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: ST_TO_ADDR
27770: GO 27914
// begin if result [ result ] [ 2 ] < tmp then
27772: LD_VAR 0 6
27776: PUSH
27777: LD_VAR 0 6
27781: ARRAY
27782: PUSH
27783: LD_INT 2
27785: ARRAY
27786: PUSH
27787: LD_VAR 0 9
27791: LESS
27792: IFFALSE 27834
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27794: LD_ADDR_VAR 0 6
27798: PUSH
27799: LD_VAR 0 6
27803: PPUSH
27804: LD_VAR 0 6
27808: PUSH
27809: LD_INT 1
27811: PLUS
27812: PPUSH
27813: LD_VAR 0 7
27817: PUSH
27818: LD_VAR 0 9
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PPUSH
27827: CALL_OW 2
27831: ST_TO_ADDR
27832: GO 27914
// for j = 1 to result do
27834: LD_ADDR_VAR 0 8
27838: PUSH
27839: DOUBLE
27840: LD_INT 1
27842: DEC
27843: ST_TO_ADDR
27844: LD_VAR 0 6
27848: PUSH
27849: FOR_TO
27850: IFFALSE 27912
// begin if tmp < result [ j ] [ 2 ] then
27852: LD_VAR 0 9
27856: PUSH
27857: LD_VAR 0 6
27861: PUSH
27862: LD_VAR 0 8
27866: ARRAY
27867: PUSH
27868: LD_INT 2
27870: ARRAY
27871: LESS
27872: IFFALSE 27910
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27874: LD_ADDR_VAR 0 6
27878: PUSH
27879: LD_VAR 0 6
27883: PPUSH
27884: LD_VAR 0 8
27888: PPUSH
27889: LD_VAR 0 7
27893: PUSH
27894: LD_VAR 0 9
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PPUSH
27903: CALL_OW 2
27907: ST_TO_ADDR
// break ;
27908: GO 27912
// end ; end ;
27910: GO 27849
27912: POP
27913: POP
// end ; end ;
27914: GO 27713
27916: POP
27917: POP
// if result and not asc then
27918: LD_VAR 0 6
27922: PUSH
27923: LD_VAR 0 4
27927: NOT
27928: AND
27929: IFFALSE 28004
// begin tmp := result ;
27931: LD_ADDR_VAR 0 9
27935: PUSH
27936: LD_VAR 0 6
27940: ST_TO_ADDR
// for i = tmp downto 1 do
27941: LD_ADDR_VAR 0 7
27945: PUSH
27946: DOUBLE
27947: LD_VAR 0 9
27951: INC
27952: ST_TO_ADDR
27953: LD_INT 1
27955: PUSH
27956: FOR_DOWNTO
27957: IFFALSE 28002
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27959: LD_ADDR_VAR 0 6
27963: PUSH
27964: LD_VAR 0 6
27968: PPUSH
27969: LD_VAR 0 9
27973: PUSH
27974: LD_VAR 0 7
27978: MINUS
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PPUSH
27984: LD_VAR 0 9
27988: PUSH
27989: LD_VAR 0 7
27993: ARRAY
27994: PPUSH
27995: CALL_OW 1
27999: ST_TO_ADDR
28000: GO 27956
28002: POP
28003: POP
// end ; tmp := [ ] ;
28004: LD_ADDR_VAR 0 9
28008: PUSH
28009: EMPTY
28010: ST_TO_ADDR
// if mode then
28011: LD_VAR 0 5
28015: IFFALSE 28084
// begin for i = 1 to result do
28017: LD_ADDR_VAR 0 7
28021: PUSH
28022: DOUBLE
28023: LD_INT 1
28025: DEC
28026: ST_TO_ADDR
28027: LD_VAR 0 6
28031: PUSH
28032: FOR_TO
28033: IFFALSE 28072
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28035: LD_ADDR_VAR 0 9
28039: PUSH
28040: LD_VAR 0 9
28044: PPUSH
28045: LD_VAR 0 7
28049: PPUSH
28050: LD_VAR 0 6
28054: PUSH
28055: LD_VAR 0 7
28059: ARRAY
28060: PUSH
28061: LD_INT 1
28063: ARRAY
28064: PPUSH
28065: CALL_OW 1
28069: ST_TO_ADDR
28070: GO 28032
28072: POP
28073: POP
// result := tmp ;
28074: LD_ADDR_VAR 0 6
28078: PUSH
28079: LD_VAR 0 9
28083: ST_TO_ADDR
// end ; end ;
28084: LD_VAR 0 6
28088: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28097: LD_ADDR_VAR 0 5
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
// if not x or not y then
28119: LD_VAR 0 2
28123: NOT
28124: PUSH
28125: LD_VAR 0 3
28129: NOT
28130: OR
28131: IFFALSE 28135
// exit ;
28133: GO 29785
// if not range then
28135: LD_VAR 0 4
28139: NOT
28140: IFFALSE 28150
// range := 10 ;
28142: LD_ADDR_VAR 0 4
28146: PUSH
28147: LD_INT 10
28149: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28150: LD_ADDR_VAR 0 8
28154: PUSH
28155: LD_INT 81
28157: PUSH
28158: LD_VAR 0 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 92
28169: PUSH
28170: LD_VAR 0 2
28174: PUSH
28175: LD_VAR 0 3
28179: PUSH
28180: LD_VAR 0 4
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 3
28193: PUSH
28194: LD_INT 21
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: PPUSH
28213: CALL_OW 69
28217: ST_TO_ADDR
// if not tmp then
28218: LD_VAR 0 8
28222: NOT
28223: IFFALSE 28227
// exit ;
28225: GO 29785
// for i in tmp do
28227: LD_ADDR_VAR 0 6
28231: PUSH
28232: LD_VAR 0 8
28236: PUSH
28237: FOR_IN
28238: IFFALSE 29760
// begin points := [ 0 , 0 , 0 ] ;
28240: LD_ADDR_VAR 0 9
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// bpoints := 1 ;
28259: LD_ADDR_VAR 0 10
28263: PUSH
28264: LD_INT 1
28266: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28267: LD_VAR 0 6
28271: PPUSH
28272: CALL_OW 247
28276: PUSH
28277: LD_INT 1
28279: DOUBLE
28280: EQUAL
28281: IFTRUE 28285
28283: GO 28863
28285: POP
// begin if GetClass ( i ) = 1 then
28286: LD_VAR 0 6
28290: PPUSH
28291: CALL_OW 257
28295: PUSH
28296: LD_INT 1
28298: EQUAL
28299: IFFALSE 28320
// points := [ 10 , 5 , 3 ] ;
28301: LD_ADDR_VAR 0 9
28305: PUSH
28306: LD_INT 10
28308: PUSH
28309: LD_INT 5
28311: PUSH
28312: LD_INT 3
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28320: LD_VAR 0 6
28324: PPUSH
28325: CALL_OW 257
28329: PUSH
28330: LD_INT 2
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 4
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: IN
28344: IFFALSE 28365
// points := [ 3 , 2 , 1 ] ;
28346: LD_ADDR_VAR 0 9
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28365: LD_VAR 0 6
28369: PPUSH
28370: CALL_OW 257
28374: PUSH
28375: LD_INT 5
28377: EQUAL
28378: IFFALSE 28399
// points := [ 130 , 5 , 2 ] ;
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_INT 130
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28399: LD_VAR 0 6
28403: PPUSH
28404: CALL_OW 257
28408: PUSH
28409: LD_INT 8
28411: EQUAL
28412: IFFALSE 28433
// points := [ 35 , 35 , 30 ] ;
28414: LD_ADDR_VAR 0 9
28418: PUSH
28419: LD_INT 35
28421: PUSH
28422: LD_INT 35
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 257
28442: PUSH
28443: LD_INT 9
28445: EQUAL
28446: IFFALSE 28467
// points := [ 20 , 55 , 40 ] ;
28448: LD_ADDR_VAR 0 9
28452: PUSH
28453: LD_INT 20
28455: PUSH
28456: LD_INT 55
28458: PUSH
28459: LD_INT 40
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28467: LD_VAR 0 6
28471: PPUSH
28472: CALL_OW 257
28476: PUSH
28477: LD_INT 12
28479: PUSH
28480: LD_INT 16
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: IN
28487: IFFALSE 28508
// points := [ 5 , 3 , 2 ] ;
28489: LD_ADDR_VAR 0 9
28493: PUSH
28494: LD_INT 5
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28508: LD_VAR 0 6
28512: PPUSH
28513: CALL_OW 257
28517: PUSH
28518: LD_INT 17
28520: EQUAL
28521: IFFALSE 28542
// points := [ 100 , 50 , 75 ] ;
28523: LD_ADDR_VAR 0 9
28527: PUSH
28528: LD_INT 100
28530: PUSH
28531: LD_INT 50
28533: PUSH
28534: LD_INT 75
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28542: LD_VAR 0 6
28546: PPUSH
28547: CALL_OW 257
28551: PUSH
28552: LD_INT 15
28554: EQUAL
28555: IFFALSE 28576
// points := [ 10 , 5 , 3 ] ;
28557: LD_ADDR_VAR 0 9
28561: PUSH
28562: LD_INT 10
28564: PUSH
28565: LD_INT 5
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28576: LD_VAR 0 6
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 14
28588: EQUAL
28589: IFFALSE 28610
// points := [ 10 , 0 , 0 ] ;
28591: LD_ADDR_VAR 0 9
28595: PUSH
28596: LD_INT 10
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28610: LD_VAR 0 6
28614: PPUSH
28615: CALL_OW 257
28619: PUSH
28620: LD_INT 11
28622: EQUAL
28623: IFFALSE 28644
// points := [ 30 , 10 , 5 ] ;
28625: LD_ADDR_VAR 0 9
28629: PUSH
28630: LD_INT 30
28632: PUSH
28633: LD_INT 10
28635: PUSH
28636: LD_INT 5
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_INT 5
28651: PPUSH
28652: CALL_OW 321
28656: PUSH
28657: LD_INT 2
28659: EQUAL
28660: IFFALSE 28677
// bpoints := bpoints * 1.8 ;
28662: LD_ADDR_VAR 0 10
28666: PUSH
28667: LD_VAR 0 10
28671: PUSH
28672: LD_REAL  1.80000000000000E+0000
28675: MUL
28676: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28677: LD_VAR 0 6
28681: PPUSH
28682: CALL_OW 257
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: LD_INT 3
28695: PUSH
28696: LD_INT 4
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: IN
28705: PUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: LD_INT 51
28713: PPUSH
28714: CALL_OW 321
28718: PUSH
28719: LD_INT 2
28721: EQUAL
28722: AND
28723: IFFALSE 28740
// bpoints := bpoints * 1.2 ;
28725: LD_ADDR_VAR 0 10
28729: PUSH
28730: LD_VAR 0 10
28734: PUSH
28735: LD_REAL  1.20000000000000E+0000
28738: MUL
28739: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28740: LD_VAR 0 6
28744: PPUSH
28745: CALL_OW 257
28749: PUSH
28750: LD_INT 5
28752: PUSH
28753: LD_INT 7
28755: PUSH
28756: LD_INT 9
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: IN
28764: PUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: LD_INT 52
28772: PPUSH
28773: CALL_OW 321
28777: PUSH
28778: LD_INT 2
28780: EQUAL
28781: AND
28782: IFFALSE 28799
// bpoints := bpoints * 1.5 ;
28784: LD_ADDR_VAR 0 10
28788: PUSH
28789: LD_VAR 0 10
28793: PUSH
28794: LD_REAL  1.50000000000000E+0000
28797: MUL
28798: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28799: LD_VAR 0 1
28803: PPUSH
28804: LD_INT 66
28806: PPUSH
28807: CALL_OW 321
28811: PUSH
28812: LD_INT 2
28814: EQUAL
28815: IFFALSE 28832
// bpoints := bpoints * 1.1 ;
28817: LD_ADDR_VAR 0 10
28821: PUSH
28822: LD_VAR 0 10
28826: PUSH
28827: LD_REAL  1.10000000000000E+0000
28830: MUL
28831: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28832: LD_ADDR_VAR 0 10
28836: PUSH
28837: LD_VAR 0 10
28841: PUSH
28842: LD_VAR 0 6
28846: PPUSH
28847: LD_INT 1
28849: PPUSH
28850: CALL_OW 259
28854: PUSH
28855: LD_REAL  1.15000000000000E+0000
28858: MUL
28859: MUL
28860: ST_TO_ADDR
// end ; unit_vehicle :
28861: GO 29689
28863: LD_INT 2
28865: DOUBLE
28866: EQUAL
28867: IFTRUE 28871
28869: GO 29677
28871: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28872: LD_VAR 0 6
28876: PPUSH
28877: CALL_OW 264
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 42
28887: PUSH
28888: LD_INT 24
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: IN
28896: IFFALSE 28917
// points := [ 25 , 5 , 3 ] ;
28898: LD_ADDR_VAR 0 9
28902: PUSH
28903: LD_INT 25
28905: PUSH
28906: LD_INT 5
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28917: LD_VAR 0 6
28921: PPUSH
28922: CALL_OW 264
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: LD_INT 43
28932: PUSH
28933: LD_INT 25
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: IN
28941: IFFALSE 28962
// points := [ 40 , 15 , 5 ] ;
28943: LD_ADDR_VAR 0 9
28947: PUSH
28948: LD_INT 40
28950: PUSH
28951: LD_INT 15
28953: PUSH
28954: LD_INT 5
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28962: LD_VAR 0 6
28966: PPUSH
28967: CALL_OW 264
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: LD_INT 23
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: IN
28982: IFFALSE 29003
// points := [ 7 , 25 , 8 ] ;
28984: LD_ADDR_VAR 0 9
28988: PUSH
28989: LD_INT 7
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 8
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29003: LD_VAR 0 6
29007: PPUSH
29008: CALL_OW 264
29012: PUSH
29013: LD_INT 5
29015: PUSH
29016: LD_INT 27
29018: PUSH
29019: LD_INT 44
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: IN
29027: IFFALSE 29048
// points := [ 14 , 50 , 16 ] ;
29029: LD_ADDR_VAR 0 9
29033: PUSH
29034: LD_INT 14
29036: PUSH
29037: LD_INT 50
29039: PUSH
29040: LD_INT 16
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29048: LD_VAR 0 6
29052: PPUSH
29053: CALL_OW 264
29057: PUSH
29058: LD_INT 6
29060: PUSH
29061: LD_INT 46
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: IN
29068: IFFALSE 29089
// points := [ 32 , 120 , 70 ] ;
29070: LD_ADDR_VAR 0 9
29074: PUSH
29075: LD_INT 32
29077: PUSH
29078: LD_INT 120
29080: PUSH
29081: LD_INT 70
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29089: LD_VAR 0 6
29093: PPUSH
29094: CALL_OW 264
29098: PUSH
29099: LD_INT 7
29101: PUSH
29102: LD_INT 28
29104: PUSH
29105: LD_INT 45
29107: PUSH
29108: LD_INT 92
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: IN
29117: IFFALSE 29138
// points := [ 35 , 20 , 45 ] ;
29119: LD_ADDR_VAR 0 9
29123: PUSH
29124: LD_INT 35
29126: PUSH
29127: LD_INT 20
29129: PUSH
29130: LD_INT 45
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29138: LD_VAR 0 6
29142: PPUSH
29143: CALL_OW 264
29147: PUSH
29148: LD_INT 47
29150: PUSH
29151: EMPTY
29152: LIST
29153: IN
29154: IFFALSE 29175
// points := [ 67 , 45 , 75 ] ;
29156: LD_ADDR_VAR 0 9
29160: PUSH
29161: LD_INT 67
29163: PUSH
29164: LD_INT 45
29166: PUSH
29167: LD_INT 75
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29175: LD_VAR 0 6
29179: PPUSH
29180: CALL_OW 264
29184: PUSH
29185: LD_INT 26
29187: PUSH
29188: EMPTY
29189: LIST
29190: IN
29191: IFFALSE 29212
// points := [ 120 , 30 , 80 ] ;
29193: LD_ADDR_VAR 0 9
29197: PUSH
29198: LD_INT 120
29200: PUSH
29201: LD_INT 30
29203: PUSH
29204: LD_INT 80
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29212: LD_VAR 0 6
29216: PPUSH
29217: CALL_OW 264
29221: PUSH
29222: LD_INT 22
29224: PUSH
29225: EMPTY
29226: LIST
29227: IN
29228: IFFALSE 29249
// points := [ 40 , 1 , 1 ] ;
29230: LD_ADDR_VAR 0 9
29234: PUSH
29235: LD_INT 40
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29249: LD_VAR 0 6
29253: PPUSH
29254: CALL_OW 264
29258: PUSH
29259: LD_INT 29
29261: PUSH
29262: EMPTY
29263: LIST
29264: IN
29265: IFFALSE 29286
// points := [ 70 , 200 , 400 ] ;
29267: LD_ADDR_VAR 0 9
29271: PUSH
29272: LD_INT 70
29274: PUSH
29275: LD_INT 200
29277: PUSH
29278: LD_INT 400
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29286: LD_VAR 0 6
29290: PPUSH
29291: CALL_OW 264
29295: PUSH
29296: LD_INT 14
29298: PUSH
29299: LD_INT 53
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: IN
29306: IFFALSE 29327
// points := [ 40 , 10 , 20 ] ;
29308: LD_ADDR_VAR 0 9
29312: PUSH
29313: LD_INT 40
29315: PUSH
29316: LD_INT 10
29318: PUSH
29319: LD_INT 20
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29327: LD_VAR 0 6
29331: PPUSH
29332: CALL_OW 264
29336: PUSH
29337: LD_INT 9
29339: PUSH
29340: EMPTY
29341: LIST
29342: IN
29343: IFFALSE 29364
// points := [ 5 , 70 , 20 ] ;
29345: LD_ADDR_VAR 0 9
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: LD_INT 70
29355: PUSH
29356: LD_INT 20
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29364: LD_VAR 0 6
29368: PPUSH
29369: CALL_OW 264
29373: PUSH
29374: LD_INT 10
29376: PUSH
29377: EMPTY
29378: LIST
29379: IN
29380: IFFALSE 29401
// points := [ 35 , 110 , 70 ] ;
29382: LD_ADDR_VAR 0 9
29386: PUSH
29387: LD_INT 35
29389: PUSH
29390: LD_INT 110
29392: PUSH
29393: LD_INT 70
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29401: LD_VAR 0 6
29405: PPUSH
29406: CALL_OW 265
29410: PUSH
29411: LD_INT 25
29413: EQUAL
29414: IFFALSE 29435
// points := [ 80 , 65 , 100 ] ;
29416: LD_ADDR_VAR 0 9
29420: PUSH
29421: LD_INT 80
29423: PUSH
29424: LD_INT 65
29426: PUSH
29427: LD_INT 100
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29435: LD_VAR 0 6
29439: PPUSH
29440: CALL_OW 263
29444: PUSH
29445: LD_INT 1
29447: EQUAL
29448: IFFALSE 29483
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29450: LD_ADDR_VAR 0 10
29454: PUSH
29455: LD_VAR 0 10
29459: PUSH
29460: LD_VAR 0 6
29464: PPUSH
29465: CALL_OW 311
29469: PPUSH
29470: LD_INT 3
29472: PPUSH
29473: CALL_OW 259
29477: PUSH
29478: LD_INT 4
29480: MUL
29481: MUL
29482: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29483: LD_VAR 0 6
29487: PPUSH
29488: CALL_OW 263
29492: PUSH
29493: LD_INT 2
29495: EQUAL
29496: IFFALSE 29547
// begin j := IsControledBy ( i ) ;
29498: LD_ADDR_VAR 0 7
29502: PUSH
29503: LD_VAR 0 6
29507: PPUSH
29508: CALL_OW 312
29512: ST_TO_ADDR
// if j then
29513: LD_VAR 0 7
29517: IFFALSE 29547
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29519: LD_ADDR_VAR 0 10
29523: PUSH
29524: LD_VAR 0 10
29528: PUSH
29529: LD_VAR 0 7
29533: PPUSH
29534: LD_INT 3
29536: PPUSH
29537: CALL_OW 259
29541: PUSH
29542: LD_INT 3
29544: MUL
29545: MUL
29546: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29547: LD_VAR 0 6
29551: PPUSH
29552: CALL_OW 264
29556: PUSH
29557: LD_INT 5
29559: PUSH
29560: LD_INT 6
29562: PUSH
29563: LD_INT 46
29565: PUSH
29566: LD_INT 44
29568: PUSH
29569: LD_INT 47
29571: PUSH
29572: LD_INT 45
29574: PUSH
29575: LD_INT 28
29577: PUSH
29578: LD_INT 7
29580: PUSH
29581: LD_INT 27
29583: PUSH
29584: LD_INT 29
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: IN
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: LD_INT 52
29607: PPUSH
29608: CALL_OW 321
29612: PUSH
29613: LD_INT 2
29615: EQUAL
29616: AND
29617: IFFALSE 29634
// bpoints := bpoints * 1.2 ;
29619: LD_ADDR_VAR 0 10
29623: PUSH
29624: LD_VAR 0 10
29628: PUSH
29629: LD_REAL  1.20000000000000E+0000
29632: MUL
29633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29634: LD_VAR 0 6
29638: PPUSH
29639: CALL_OW 264
29643: PUSH
29644: LD_INT 6
29646: PUSH
29647: LD_INT 46
29649: PUSH
29650: LD_INT 47
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: IN
29658: IFFALSE 29675
// bpoints := bpoints * 1.2 ;
29660: LD_ADDR_VAR 0 10
29664: PUSH
29665: LD_VAR 0 10
29669: PUSH
29670: LD_REAL  1.20000000000000E+0000
29673: MUL
29674: ST_TO_ADDR
// end ; unit_building :
29675: GO 29689
29677: LD_INT 3
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29688
29685: POP
// ; end ;
29686: GO 29689
29688: POP
// for j = 1 to 3 do
29689: LD_ADDR_VAR 0 7
29693: PUSH
29694: DOUBLE
29695: LD_INT 1
29697: DEC
29698: ST_TO_ADDR
29699: LD_INT 3
29701: PUSH
29702: FOR_TO
29703: IFFALSE 29756
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29705: LD_ADDR_VAR 0 5
29709: PUSH
29710: LD_VAR 0 5
29714: PPUSH
29715: LD_VAR 0 7
29719: PPUSH
29720: LD_VAR 0 5
29724: PUSH
29725: LD_VAR 0 7
29729: ARRAY
29730: PUSH
29731: LD_VAR 0 9
29735: PUSH
29736: LD_VAR 0 7
29740: ARRAY
29741: PUSH
29742: LD_VAR 0 10
29746: MUL
29747: PLUS
29748: PPUSH
29749: CALL_OW 1
29753: ST_TO_ADDR
29754: GO 29702
29756: POP
29757: POP
// end ;
29758: GO 28237
29760: POP
29761: POP
// result := Replace ( result , 4 , tmp ) ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 5
29771: PPUSH
29772: LD_INT 4
29774: PPUSH
29775: LD_VAR 0 8
29779: PPUSH
29780: CALL_OW 1
29784: ST_TO_ADDR
// end ;
29785: LD_VAR 0 5
29789: RET
// export function DangerAtRange ( unit , range ) ; begin
29790: LD_INT 0
29792: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 255
29807: PPUSH
29808: LD_VAR 0 1
29812: PPUSH
29813: CALL_OW 250
29817: PPUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 251
29827: PPUSH
29828: LD_VAR 0 2
29832: PPUSH
29833: CALL 28089 0 4
29837: ST_TO_ADDR
// end ;
29838: LD_VAR 0 3
29842: RET
// export function DangerInArea ( side , area ) ; begin
29843: LD_INT 0
29845: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_INT 81
29858: PUSH
29859: LD_VAR 0 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: CALL_OW 70
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 3
29877: RET
// export function IsExtension ( b ) ; begin
29878: LD_INT 0
29880: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29881: LD_ADDR_VAR 0 2
29885: PUSH
29886: LD_VAR 0 1
29890: PUSH
29891: LD_INT 23
29893: PUSH
29894: LD_INT 20
29896: PUSH
29897: LD_INT 22
29899: PUSH
29900: LD_INT 17
29902: PUSH
29903: LD_INT 24
29905: PUSH
29906: LD_INT 21
29908: PUSH
29909: LD_INT 19
29911: PUSH
29912: LD_INT 16
29914: PUSH
29915: LD_INT 25
29917: PUSH
29918: LD_INT 18
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: IN
29933: ST_TO_ADDR
// end ;
29934: LD_VAR 0 2
29938: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29939: LD_INT 0
29941: PPUSH
29942: PPUSH
29943: PPUSH
// result := [ ] ;
29944: LD_ADDR_VAR 0 4
29948: PUSH
29949: EMPTY
29950: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29951: LD_ADDR_VAR 0 5
29955: PUSH
29956: LD_VAR 0 2
29960: PPUSH
29961: LD_INT 21
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 70
29975: ST_TO_ADDR
// if not tmp then
29976: LD_VAR 0 5
29980: NOT
29981: IFFALSE 29985
// exit ;
29983: GO 30049
// if checkLink then
29985: LD_VAR 0 3
29989: IFFALSE 30039
// begin for i in tmp do
29991: LD_ADDR_VAR 0 6
29995: PUSH
29996: LD_VAR 0 5
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30037
// if GetBase ( i ) <> base then
30004: LD_VAR 0 6
30008: PPUSH
30009: CALL_OW 274
30013: PUSH
30014: LD_VAR 0 1
30018: NONEQUAL
30019: IFFALSE 30035
// ComLinkToBase ( base , i ) ;
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_VAR 0 6
30030: PPUSH
30031: CALL_OW 169
30035: GO 30001
30037: POP
30038: POP
// end ; result := tmp ;
30039: LD_ADDR_VAR 0 4
30043: PUSH
30044: LD_VAR 0 5
30048: ST_TO_ADDR
// end ;
30049: LD_VAR 0 4
30053: RET
// export function ComComplete ( units , b ) ; var i ; begin
30054: LD_INT 0
30056: PPUSH
30057: PPUSH
// if not units then
30058: LD_VAR 0 1
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30157
// for i in units do
30067: LD_ADDR_VAR 0 4
30071: PUSH
30072: LD_VAR 0 1
30076: PUSH
30077: FOR_IN
30078: IFFALSE 30155
// if BuildingStatus ( b ) = bs_build then
30080: LD_VAR 0 2
30084: PPUSH
30085: CALL_OW 461
30089: PUSH
30090: LD_INT 1
30092: EQUAL
30093: IFFALSE 30153
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30095: LD_VAR 0 4
30099: PPUSH
30100: LD_STRING h
30102: PUSH
30103: LD_VAR 0 2
30107: PPUSH
30108: CALL_OW 250
30112: PUSH
30113: LD_VAR 0 2
30117: PPUSH
30118: CALL_OW 251
30122: PUSH
30123: LD_VAR 0 2
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: PPUSH
30149: CALL_OW 446
30153: GO 30077
30155: POP
30156: POP
// end ;
30157: LD_VAR 0 3
30161: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30162: LD_INT 0
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30170: LD_VAR 0 1
30174: NOT
30175: PUSH
30176: LD_VAR 0 1
30180: PPUSH
30181: CALL_OW 263
30185: PUSH
30186: LD_INT 2
30188: NONEQUAL
30189: OR
30190: IFFALSE 30194
// exit ;
30192: GO 30510
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30194: LD_ADDR_VAR 0 6
30198: PUSH
30199: LD_INT 22
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 255
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 30
30221: PUSH
30222: LD_INT 36
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 34
30231: PUSH
30232: LD_INT 31
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PPUSH
30248: CALL_OW 69
30252: ST_TO_ADDR
// if not tmp then
30253: LD_VAR 0 6
30257: NOT
30258: IFFALSE 30262
// exit ;
30260: GO 30510
// result := [ ] ;
30262: LD_ADDR_VAR 0 2
30266: PUSH
30267: EMPTY
30268: ST_TO_ADDR
// for i in tmp do
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_VAR 0 6
30278: PUSH
30279: FOR_IN
30280: IFFALSE 30351
// begin t := UnitsInside ( i ) ;
30282: LD_ADDR_VAR 0 4
30286: PUSH
30287: LD_VAR 0 3
30291: PPUSH
30292: CALL_OW 313
30296: ST_TO_ADDR
// if t then
30297: LD_VAR 0 4
30301: IFFALSE 30349
// for j in t do
30303: LD_ADDR_VAR 0 7
30307: PUSH
30308: LD_VAR 0 4
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30347
// result := Replace ( result , result + 1 , j ) ;
30316: LD_ADDR_VAR 0 2
30320: PUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: LD_VAR 0 2
30330: PUSH
30331: LD_INT 1
30333: PLUS
30334: PPUSH
30335: LD_VAR 0 7
30339: PPUSH
30340: CALL_OW 1
30344: ST_TO_ADDR
30345: GO 30313
30347: POP
30348: POP
// end ;
30349: GO 30279
30351: POP
30352: POP
// if not result then
30353: LD_VAR 0 2
30357: NOT
30358: IFFALSE 30362
// exit ;
30360: GO 30510
// mech := result [ 1 ] ;
30362: LD_ADDR_VAR 0 5
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: ST_TO_ADDR
// if result > 1 then
30376: LD_VAR 0 2
30380: PUSH
30381: LD_INT 1
30383: GREATER
30384: IFFALSE 30496
// begin for i = 2 to result do
30386: LD_ADDR_VAR 0 3
30390: PUSH
30391: DOUBLE
30392: LD_INT 2
30394: DEC
30395: ST_TO_ADDR
30396: LD_VAR 0 2
30400: PUSH
30401: FOR_TO
30402: IFFALSE 30494
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30404: LD_ADDR_VAR 0 4
30408: PUSH
30409: LD_VAR 0 2
30413: PUSH
30414: LD_VAR 0 3
30418: ARRAY
30419: PPUSH
30420: LD_INT 3
30422: PPUSH
30423: CALL_OW 259
30427: PUSH
30428: LD_VAR 0 2
30432: PUSH
30433: LD_VAR 0 3
30437: ARRAY
30438: PPUSH
30439: CALL_OW 432
30443: MINUS
30444: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30445: LD_VAR 0 4
30449: PUSH
30450: LD_VAR 0 5
30454: PPUSH
30455: LD_INT 3
30457: PPUSH
30458: CALL_OW 259
30462: PUSH
30463: LD_VAR 0 5
30467: PPUSH
30468: CALL_OW 432
30472: MINUS
30473: GREATEREQUAL
30474: IFFALSE 30492
// mech := result [ i ] ;
30476: LD_ADDR_VAR 0 5
30480: PUSH
30481: LD_VAR 0 2
30485: PUSH
30486: LD_VAR 0 3
30490: ARRAY
30491: ST_TO_ADDR
// end ;
30492: GO 30401
30494: POP
30495: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30496: LD_VAR 0 1
30500: PPUSH
30501: LD_VAR 0 5
30505: PPUSH
30506: CALL_OW 135
// end ;
30510: LD_VAR 0 2
30514: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30515: LD_INT 0
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
// result := [ ] ;
30530: LD_ADDR_VAR 0 7
30534: PUSH
30535: EMPTY
30536: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30537: LD_VAR 0 1
30541: PPUSH
30542: CALL_OW 266
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: IN
30557: NOT
30558: IFFALSE 30562
// exit ;
30560: GO 32196
// if name then
30562: LD_VAR 0 3
30566: IFFALSE 30582
// SetBName ( base_dep , name ) ;
30568: LD_VAR 0 1
30572: PPUSH
30573: LD_VAR 0 3
30577: PPUSH
30578: CALL_OW 500
// base := GetBase ( base_dep ) ;
30582: LD_ADDR_VAR 0 15
30586: PUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 274
30596: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30597: LD_ADDR_VAR 0 16
30601: PUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL_OW 255
30611: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30612: LD_ADDR_VAR 0 17
30616: PUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 248
30626: ST_TO_ADDR
// if sources then
30627: LD_VAR 0 5
30631: IFFALSE 30678
// for i = 1 to 3 do
30633: LD_ADDR_VAR 0 8
30637: PUSH
30638: DOUBLE
30639: LD_INT 1
30641: DEC
30642: ST_TO_ADDR
30643: LD_INT 3
30645: PUSH
30646: FOR_TO
30647: IFFALSE 30676
// AddResourceType ( base , i , sources [ i ] ) ;
30649: LD_VAR 0 15
30653: PPUSH
30654: LD_VAR 0 8
30658: PPUSH
30659: LD_VAR 0 5
30663: PUSH
30664: LD_VAR 0 8
30668: ARRAY
30669: PPUSH
30670: CALL_OW 276
30674: GO 30646
30676: POP
30677: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30678: LD_ADDR_VAR 0 18
30682: PUSH
30683: LD_VAR 0 15
30687: PPUSH
30688: LD_VAR 0 2
30692: PPUSH
30693: LD_INT 1
30695: PPUSH
30696: CALL 29939 0 3
30700: ST_TO_ADDR
// InitHc ;
30701: CALL_OW 19
// InitUc ;
30705: CALL_OW 18
// uc_side := side ;
30709: LD_ADDR_OWVAR 20
30713: PUSH
30714: LD_VAR 0 16
30718: ST_TO_ADDR
// uc_nation := nation ;
30719: LD_ADDR_OWVAR 21
30723: PUSH
30724: LD_VAR 0 17
30728: ST_TO_ADDR
// if buildings then
30729: LD_VAR 0 18
30733: IFFALSE 32055
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30735: LD_ADDR_VAR 0 19
30739: PUSH
30740: LD_VAR 0 18
30744: PPUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 30
30750: PUSH
30751: LD_INT 29
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 30
30760: PUSH
30761: LD_INT 30
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: PPUSH
30773: CALL_OW 72
30777: ST_TO_ADDR
// if tmp then
30778: LD_VAR 0 19
30782: IFFALSE 30830
// for i in tmp do
30784: LD_ADDR_VAR 0 8
30788: PUSH
30789: LD_VAR 0 19
30793: PUSH
30794: FOR_IN
30795: IFFALSE 30828
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30797: LD_VAR 0 8
30801: PPUSH
30802: CALL_OW 250
30806: PPUSH
30807: LD_VAR 0 8
30811: PPUSH
30812: CALL_OW 251
30816: PPUSH
30817: LD_VAR 0 16
30821: PPUSH
30822: CALL_OW 441
30826: GO 30794
30828: POP
30829: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30830: LD_VAR 0 18
30834: PPUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 30
30840: PUSH
30841: LD_INT 32
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 30
30850: PUSH
30851: LD_INT 33
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: PPUSH
30863: CALL_OW 72
30867: IFFALSE 30955
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30869: LD_ADDR_VAR 0 8
30873: PUSH
30874: LD_VAR 0 18
30878: PPUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 30
30884: PUSH
30885: LD_INT 32
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 30
30894: PUSH
30895: LD_INT 33
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 72
30911: PUSH
30912: FOR_IN
30913: IFFALSE 30953
// begin if not GetBWeapon ( i ) then
30915: LD_VAR 0 8
30919: PPUSH
30920: CALL_OW 269
30924: NOT
30925: IFFALSE 30951
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30927: LD_VAR 0 8
30931: PPUSH
30932: LD_VAR 0 8
30936: PPUSH
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL 32201 0 2
30946: PPUSH
30947: CALL_OW 431
// end ;
30951: GO 30912
30953: POP
30954: POP
// end ; for i = 1 to personel do
30955: LD_ADDR_VAR 0 8
30959: PUSH
30960: DOUBLE
30961: LD_INT 1
30963: DEC
30964: ST_TO_ADDR
30965: LD_VAR 0 6
30969: PUSH
30970: FOR_TO
30971: IFFALSE 32035
// begin if i > 4 then
30973: LD_VAR 0 8
30977: PUSH
30978: LD_INT 4
30980: GREATER
30981: IFFALSE 30985
// break ;
30983: GO 32035
// case i of 1 :
30985: LD_VAR 0 8
30989: PUSH
30990: LD_INT 1
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31078
30998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30999: LD_ADDR_VAR 0 12
31003: PUSH
31004: LD_VAR 0 18
31008: PPUSH
31009: LD_INT 22
31011: PUSH
31012: LD_VAR 0 16
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 58
31023: PUSH
31024: EMPTY
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: LD_INT 30
31032: PUSH
31033: LD_INT 32
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 30
31042: PUSH
31043: LD_INT 4
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 30
31052: PUSH
31053: LD_INT 5
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: PPUSH
31071: CALL_OW 72
31075: ST_TO_ADDR
31076: GO 31300
31078: LD_INT 2
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31148
31086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31087: LD_ADDR_VAR 0 12
31091: PUSH
31092: LD_VAR 0 18
31096: PPUSH
31097: LD_INT 22
31099: PUSH
31100: LD_VAR 0 16
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 30
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 30
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PPUSH
31141: CALL_OW 72
31145: ST_TO_ADDR
31146: GO 31300
31148: LD_INT 3
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31218
31156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31157: LD_ADDR_VAR 0 12
31161: PUSH
31162: LD_VAR 0 18
31166: PPUSH
31167: LD_INT 22
31169: PUSH
31170: LD_VAR 0 16
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 30
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 30
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PPUSH
31211: CALL_OW 72
31215: ST_TO_ADDR
31216: GO 31300
31218: LD_INT 4
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31299
31226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31227: LD_ADDR_VAR 0 12
31231: PUSH
31232: LD_VAR 0 18
31236: PPUSH
31237: LD_INT 22
31239: PUSH
31240: LD_VAR 0 16
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 30
31254: PUSH
31255: LD_INT 6
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 30
31264: PUSH
31265: LD_INT 7
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 8
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PPUSH
31292: CALL_OW 72
31296: ST_TO_ADDR
31297: GO 31300
31299: POP
// if i = 1 then
31300: LD_VAR 0 8
31304: PUSH
31305: LD_INT 1
31307: EQUAL
31308: IFFALSE 31419
// begin tmp := [ ] ;
31310: LD_ADDR_VAR 0 19
31314: PUSH
31315: EMPTY
31316: ST_TO_ADDR
// for j in f do
31317: LD_ADDR_VAR 0 9
31321: PUSH
31322: LD_VAR 0 12
31326: PUSH
31327: FOR_IN
31328: IFFALSE 31401
// if GetBType ( j ) = b_bunker then
31330: LD_VAR 0 9
31334: PPUSH
31335: CALL_OW 266
31339: PUSH
31340: LD_INT 32
31342: EQUAL
31343: IFFALSE 31370
// tmp := Insert ( tmp , 1 , j ) else
31345: LD_ADDR_VAR 0 19
31349: PUSH
31350: LD_VAR 0 19
31354: PPUSH
31355: LD_INT 1
31357: PPUSH
31358: LD_VAR 0 9
31362: PPUSH
31363: CALL_OW 2
31367: ST_TO_ADDR
31368: GO 31399
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31370: LD_ADDR_VAR 0 19
31374: PUSH
31375: LD_VAR 0 19
31379: PPUSH
31380: LD_VAR 0 19
31384: PUSH
31385: LD_INT 1
31387: PLUS
31388: PPUSH
31389: LD_VAR 0 9
31393: PPUSH
31394: CALL_OW 2
31398: ST_TO_ADDR
31399: GO 31327
31401: POP
31402: POP
// if tmp then
31403: LD_VAR 0 19
31407: IFFALSE 31419
// f := tmp ;
31409: LD_ADDR_VAR 0 12
31413: PUSH
31414: LD_VAR 0 19
31418: ST_TO_ADDR
// end ; x := personel [ i ] ;
31419: LD_ADDR_VAR 0 13
31423: PUSH
31424: LD_VAR 0 6
31428: PUSH
31429: LD_VAR 0 8
31433: ARRAY
31434: ST_TO_ADDR
// if x = - 1 then
31435: LD_VAR 0 13
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: EQUAL
31444: IFFALSE 31653
// begin for j in f do
31446: LD_ADDR_VAR 0 9
31450: PUSH
31451: LD_VAR 0 12
31455: PUSH
31456: FOR_IN
31457: IFFALSE 31649
// repeat InitHc ;
31459: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31463: LD_VAR 0 9
31467: PPUSH
31468: CALL_OW 266
31472: PUSH
31473: LD_INT 5
31475: EQUAL
31476: IFFALSE 31546
// begin if UnitsInside ( j ) < 3 then
31478: LD_VAR 0 9
31482: PPUSH
31483: CALL_OW 313
31487: PUSH
31488: LD_INT 3
31490: LESS
31491: IFFALSE 31527
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31493: LD_INT 0
31495: PPUSH
31496: LD_INT 5
31498: PUSH
31499: LD_INT 8
31501: PUSH
31502: LD_INT 9
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: PUSH
31510: LD_VAR 0 17
31514: ARRAY
31515: PPUSH
31516: LD_VAR 0 4
31520: PPUSH
31521: CALL_OW 380
31525: GO 31544
// PrepareHuman ( false , i , skill ) ;
31527: LD_INT 0
31529: PPUSH
31530: LD_VAR 0 8
31534: PPUSH
31535: LD_VAR 0 4
31539: PPUSH
31540: CALL_OW 380
// end else
31544: GO 31563
// PrepareHuman ( false , i , skill ) ;
31546: LD_INT 0
31548: PPUSH
31549: LD_VAR 0 8
31553: PPUSH
31554: LD_VAR 0 4
31558: PPUSH
31559: CALL_OW 380
// un := CreateHuman ;
31563: LD_ADDR_VAR 0 14
31567: PUSH
31568: CALL_OW 44
31572: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31573: LD_ADDR_VAR 0 7
31577: PUSH
31578: LD_VAR 0 7
31582: PPUSH
31583: LD_INT 1
31585: PPUSH
31586: LD_VAR 0 14
31590: PPUSH
31591: CALL_OW 2
31595: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31596: LD_VAR 0 14
31600: PPUSH
31601: LD_VAR 0 9
31605: PPUSH
31606: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31610: LD_VAR 0 9
31614: PPUSH
31615: CALL_OW 313
31619: PUSH
31620: LD_INT 6
31622: EQUAL
31623: PUSH
31624: LD_VAR 0 9
31628: PPUSH
31629: CALL_OW 266
31633: PUSH
31634: LD_INT 32
31636: PUSH
31637: LD_INT 31
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: IN
31644: OR
31645: IFFALSE 31459
31647: GO 31456
31649: POP
31650: POP
// end else
31651: GO 32033
// for j = 1 to x do
31653: LD_ADDR_VAR 0 9
31657: PUSH
31658: DOUBLE
31659: LD_INT 1
31661: DEC
31662: ST_TO_ADDR
31663: LD_VAR 0 13
31667: PUSH
31668: FOR_TO
31669: IFFALSE 32031
// begin InitHc ;
31671: CALL_OW 19
// if not f then
31675: LD_VAR 0 12
31679: NOT
31680: IFFALSE 31769
// begin PrepareHuman ( false , i , skill ) ;
31682: LD_INT 0
31684: PPUSH
31685: LD_VAR 0 8
31689: PPUSH
31690: LD_VAR 0 4
31694: PPUSH
31695: CALL_OW 380
// un := CreateHuman ;
31699: LD_ADDR_VAR 0 14
31703: PUSH
31704: CALL_OW 44
31708: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31709: LD_ADDR_VAR 0 7
31713: PUSH
31714: LD_VAR 0 7
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: LD_VAR 0 14
31726: PPUSH
31727: CALL_OW 2
31731: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31732: LD_VAR 0 14
31736: PPUSH
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 250
31746: PPUSH
31747: LD_VAR 0 1
31751: PPUSH
31752: CALL_OW 251
31756: PPUSH
31757: LD_INT 10
31759: PPUSH
31760: LD_INT 0
31762: PPUSH
31763: CALL_OW 50
// continue ;
31767: GO 31668
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31769: LD_VAR 0 12
31773: PUSH
31774: LD_INT 1
31776: ARRAY
31777: PPUSH
31778: CALL_OW 313
31782: PUSH
31783: LD_VAR 0 12
31787: PUSH
31788: LD_INT 1
31790: ARRAY
31791: PPUSH
31792: CALL_OW 266
31796: PUSH
31797: LD_INT 32
31799: PUSH
31800: LD_INT 31
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: IN
31807: AND
31808: PUSH
31809: LD_VAR 0 12
31813: PUSH
31814: LD_INT 1
31816: ARRAY
31817: PPUSH
31818: CALL_OW 313
31822: PUSH
31823: LD_INT 6
31825: EQUAL
31826: OR
31827: IFFALSE 31847
// f := Delete ( f , 1 ) ;
31829: LD_ADDR_VAR 0 12
31833: PUSH
31834: LD_VAR 0 12
31838: PPUSH
31839: LD_INT 1
31841: PPUSH
31842: CALL_OW 3
31846: ST_TO_ADDR
// if not f then
31847: LD_VAR 0 12
31851: NOT
31852: IFFALSE 31870
// begin x := x + 2 ;
31854: LD_ADDR_VAR 0 13
31858: PUSH
31859: LD_VAR 0 13
31863: PUSH
31864: LD_INT 2
31866: PLUS
31867: ST_TO_ADDR
// continue ;
31868: GO 31668
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31870: LD_VAR 0 12
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: PPUSH
31879: CALL_OW 266
31883: PUSH
31884: LD_INT 5
31886: EQUAL
31887: IFFALSE 31961
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31889: LD_VAR 0 12
31893: PUSH
31894: LD_INT 1
31896: ARRAY
31897: PPUSH
31898: CALL_OW 313
31902: PUSH
31903: LD_INT 3
31905: LESS
31906: IFFALSE 31942
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31908: LD_INT 0
31910: PPUSH
31911: LD_INT 5
31913: PUSH
31914: LD_INT 8
31916: PUSH
31917: LD_INT 9
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: PUSH
31925: LD_VAR 0 17
31929: ARRAY
31930: PPUSH
31931: LD_VAR 0 4
31935: PPUSH
31936: CALL_OW 380
31940: GO 31959
// PrepareHuman ( false , i , skill ) ;
31942: LD_INT 0
31944: PPUSH
31945: LD_VAR 0 8
31949: PPUSH
31950: LD_VAR 0 4
31954: PPUSH
31955: CALL_OW 380
// end else
31959: GO 31978
// PrepareHuman ( false , i , skill ) ;
31961: LD_INT 0
31963: PPUSH
31964: LD_VAR 0 8
31968: PPUSH
31969: LD_VAR 0 4
31973: PPUSH
31974: CALL_OW 380
// un := CreateHuman ;
31978: LD_ADDR_VAR 0 14
31982: PUSH
31983: CALL_OW 44
31987: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31988: LD_ADDR_VAR 0 7
31992: PUSH
31993: LD_VAR 0 7
31997: PPUSH
31998: LD_INT 1
32000: PPUSH
32001: LD_VAR 0 14
32005: PPUSH
32006: CALL_OW 2
32010: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32011: LD_VAR 0 14
32015: PPUSH
32016: LD_VAR 0 12
32020: PUSH
32021: LD_INT 1
32023: ARRAY
32024: PPUSH
32025: CALL_OW 52
// end ;
32029: GO 31668
32031: POP
32032: POP
// end ;
32033: GO 30970
32035: POP
32036: POP
// result := result ^ buildings ;
32037: LD_ADDR_VAR 0 7
32041: PUSH
32042: LD_VAR 0 7
32046: PUSH
32047: LD_VAR 0 18
32051: ADD
32052: ST_TO_ADDR
// end else
32053: GO 32196
// begin for i = 1 to personel do
32055: LD_ADDR_VAR 0 8
32059: PUSH
32060: DOUBLE
32061: LD_INT 1
32063: DEC
32064: ST_TO_ADDR
32065: LD_VAR 0 6
32069: PUSH
32070: FOR_TO
32071: IFFALSE 32194
// begin if i > 4 then
32073: LD_VAR 0 8
32077: PUSH
32078: LD_INT 4
32080: GREATER
32081: IFFALSE 32085
// break ;
32083: GO 32194
// x := personel [ i ] ;
32085: LD_ADDR_VAR 0 13
32089: PUSH
32090: LD_VAR 0 6
32094: PUSH
32095: LD_VAR 0 8
32099: ARRAY
32100: ST_TO_ADDR
// if x = - 1 then
32101: LD_VAR 0 13
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: EQUAL
32110: IFFALSE 32114
// continue ;
32112: GO 32070
// PrepareHuman ( false , i , skill ) ;
32114: LD_INT 0
32116: PPUSH
32117: LD_VAR 0 8
32121: PPUSH
32122: LD_VAR 0 4
32126: PPUSH
32127: CALL_OW 380
// un := CreateHuman ;
32131: LD_ADDR_VAR 0 14
32135: PUSH
32136: CALL_OW 44
32140: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32141: LD_VAR 0 14
32145: PPUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 250
32155: PPUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 251
32165: PPUSH
32166: LD_INT 10
32168: PPUSH
32169: LD_INT 0
32171: PPUSH
32172: CALL_OW 50
// result := result ^ un ;
32176: LD_ADDR_VAR 0 7
32180: PUSH
32181: LD_VAR 0 7
32185: PUSH
32186: LD_VAR 0 14
32190: ADD
32191: ST_TO_ADDR
// end ;
32192: GO 32070
32194: POP
32195: POP
// end ; end ;
32196: LD_VAR 0 7
32200: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32201: LD_INT 0
32203: PPUSH
32204: PPUSH
32205: PPUSH
32206: PPUSH
32207: PPUSH
32208: PPUSH
32209: PPUSH
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
// result := false ;
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_INT 0
32226: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32227: LD_VAR 0 1
32231: NOT
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 266
32242: PUSH
32243: LD_INT 32
32245: PUSH
32246: LD_INT 33
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: IN
32253: NOT
32254: OR
32255: IFFALSE 32259
// exit ;
32257: GO 33368
// nat := GetNation ( tower ) ;
32259: LD_ADDR_VAR 0 12
32263: PUSH
32264: LD_VAR 0 1
32268: PPUSH
32269: CALL_OW 248
32273: ST_TO_ADDR
// side := GetSide ( tower ) ;
32274: LD_ADDR_VAR 0 16
32278: PUSH
32279: LD_VAR 0 1
32283: PPUSH
32284: CALL_OW 255
32288: ST_TO_ADDR
// x := GetX ( tower ) ;
32289: LD_ADDR_VAR 0 10
32293: PUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 250
32303: ST_TO_ADDR
// y := GetY ( tower ) ;
32304: LD_ADDR_VAR 0 11
32308: PUSH
32309: LD_VAR 0 1
32313: PPUSH
32314: CALL_OW 251
32318: ST_TO_ADDR
// if not x or not y then
32319: LD_VAR 0 10
32323: NOT
32324: PUSH
32325: LD_VAR 0 11
32329: NOT
32330: OR
32331: IFFALSE 32335
// exit ;
32333: GO 33368
// weapon := 0 ;
32335: LD_ADDR_VAR 0 18
32339: PUSH
32340: LD_INT 0
32342: ST_TO_ADDR
// fac_list := [ ] ;
32343: LD_ADDR_VAR 0 17
32347: PUSH
32348: EMPTY
32349: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32350: LD_ADDR_VAR 0 6
32354: PUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 274
32364: PPUSH
32365: LD_VAR 0 2
32369: PPUSH
32370: LD_INT 0
32372: PPUSH
32373: CALL 29939 0 3
32377: PPUSH
32378: LD_INT 30
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PPUSH
32388: CALL_OW 72
32392: ST_TO_ADDR
// if not factories then
32393: LD_VAR 0 6
32397: NOT
32398: IFFALSE 32402
// exit ;
32400: GO 33368
// for i in factories do
32402: LD_ADDR_VAR 0 8
32406: PUSH
32407: LD_VAR 0 6
32411: PUSH
32412: FOR_IN
32413: IFFALSE 32438
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32415: LD_ADDR_VAR 0 17
32419: PUSH
32420: LD_VAR 0 17
32424: PUSH
32425: LD_VAR 0 8
32429: PPUSH
32430: CALL_OW 478
32434: UNION
32435: ST_TO_ADDR
32436: GO 32412
32438: POP
32439: POP
// if not fac_list then
32440: LD_VAR 0 17
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 33368
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32449: LD_ADDR_VAR 0 5
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: LD_INT 9
32462: PUSH
32463: LD_INT 10
32465: PUSH
32466: LD_INT 6
32468: PUSH
32469: LD_INT 7
32471: PUSH
32472: LD_INT 11
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 27
32486: PUSH
32487: LD_INT 28
32489: PUSH
32490: LD_INT 26
32492: PUSH
32493: LD_INT 30
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 43
32504: PUSH
32505: LD_INT 44
32507: PUSH
32508: LD_INT 46
32510: PUSH
32511: LD_INT 45
32513: PUSH
32514: LD_INT 47
32516: PUSH
32517: LD_INT 49
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: PUSH
32533: LD_VAR 0 12
32537: ARRAY
32538: ST_TO_ADDR
// list := list isect fac_list ;
32539: LD_ADDR_VAR 0 5
32543: PUSH
32544: LD_VAR 0 5
32548: PUSH
32549: LD_VAR 0 17
32553: ISECT
32554: ST_TO_ADDR
// if not list then
32555: LD_VAR 0 5
32559: NOT
32560: IFFALSE 32564
// exit ;
32562: GO 33368
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32564: LD_VAR 0 12
32568: PUSH
32569: LD_INT 3
32571: EQUAL
32572: PUSH
32573: LD_INT 49
32575: PUSH
32576: LD_VAR 0 5
32580: IN
32581: AND
32582: PUSH
32583: LD_INT 31
32585: PPUSH
32586: LD_VAR 0 16
32590: PPUSH
32591: CALL_OW 321
32595: PUSH
32596: LD_INT 2
32598: EQUAL
32599: AND
32600: IFFALSE 32660
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32602: LD_INT 22
32604: PUSH
32605: LD_VAR 0 16
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 35
32616: PUSH
32617: LD_INT 49
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 91
32626: PUSH
32627: LD_VAR 0 1
32631: PUSH
32632: LD_INT 10
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: PPUSH
32645: CALL_OW 69
32649: NOT
32650: IFFALSE 32660
// weapon := ru_time_lapser ;
32652: LD_ADDR_VAR 0 18
32656: PUSH
32657: LD_INT 49
32659: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32660: LD_VAR 0 12
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: IN
32675: PUSH
32676: LD_INT 11
32678: PUSH
32679: LD_VAR 0 5
32683: IN
32684: PUSH
32685: LD_INT 30
32687: PUSH
32688: LD_VAR 0 5
32692: IN
32693: OR
32694: AND
32695: PUSH
32696: LD_INT 6
32698: PPUSH
32699: LD_VAR 0 16
32703: PPUSH
32704: CALL_OW 321
32708: PUSH
32709: LD_INT 2
32711: EQUAL
32712: AND
32713: IFFALSE 32878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32715: LD_INT 22
32717: PUSH
32718: LD_VAR 0 16
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: PUSH
32730: LD_INT 35
32732: PUSH
32733: LD_INT 11
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 35
32742: PUSH
32743: LD_INT 30
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 91
32757: PUSH
32758: LD_VAR 0 1
32762: PUSH
32763: LD_INT 18
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: PPUSH
32776: CALL_OW 69
32780: NOT
32781: PUSH
32782: LD_INT 22
32784: PUSH
32785: LD_VAR 0 16
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: LD_INT 30
32799: PUSH
32800: LD_INT 32
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 30
32809: PUSH
32810: LD_INT 33
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 91
32824: PUSH
32825: LD_VAR 0 1
32829: PUSH
32830: LD_INT 12
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: PPUSH
32846: CALL_OW 69
32850: PUSH
32851: LD_INT 2
32853: GREATER
32854: AND
32855: IFFALSE 32878
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32857: LD_ADDR_VAR 0 18
32861: PUSH
32862: LD_INT 11
32864: PUSH
32865: LD_INT 30
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_VAR 0 12
32876: ARRAY
32877: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32878: LD_VAR 0 18
32882: NOT
32883: PUSH
32884: LD_INT 40
32886: PPUSH
32887: LD_VAR 0 16
32891: PPUSH
32892: CALL_OW 321
32896: PUSH
32897: LD_INT 2
32899: EQUAL
32900: AND
32901: PUSH
32902: LD_INT 7
32904: PUSH
32905: LD_VAR 0 5
32909: IN
32910: PUSH
32911: LD_INT 28
32913: PUSH
32914: LD_VAR 0 5
32918: IN
32919: OR
32920: PUSH
32921: LD_INT 45
32923: PUSH
32924: LD_VAR 0 5
32928: IN
32929: OR
32930: AND
32931: IFFALSE 33185
// begin hex := GetHexInfo ( x , y ) ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_VAR 0 10
32942: PPUSH
32943: LD_VAR 0 11
32947: PPUSH
32948: CALL_OW 546
32952: ST_TO_ADDR
// if hex [ 1 ] then
32953: LD_VAR 0 4
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: IFFALSE 32965
// exit ;
32963: GO 33368
// height := hex [ 2 ] ;
32965: LD_ADDR_VAR 0 15
32969: PUSH
32970: LD_VAR 0 4
32974: PUSH
32975: LD_INT 2
32977: ARRAY
32978: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32979: LD_ADDR_VAR 0 14
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 5
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// for i in tmp do
33002: LD_ADDR_VAR 0 8
33006: PUSH
33007: LD_VAR 0 14
33011: PUSH
33012: FOR_IN
33013: IFFALSE 33183
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33015: LD_ADDR_VAR 0 9
33019: PUSH
33020: LD_VAR 0 10
33024: PPUSH
33025: LD_VAR 0 8
33029: PPUSH
33030: LD_INT 5
33032: PPUSH
33033: CALL_OW 272
33037: PUSH
33038: LD_VAR 0 11
33042: PPUSH
33043: LD_VAR 0 8
33047: PPUSH
33048: LD_INT 5
33050: PPUSH
33051: CALL_OW 273
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33060: LD_VAR 0 9
33064: PUSH
33065: LD_INT 1
33067: ARRAY
33068: PPUSH
33069: LD_VAR 0 9
33073: PUSH
33074: LD_INT 2
33076: ARRAY
33077: PPUSH
33078: CALL_OW 488
33082: IFFALSE 33181
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33084: LD_ADDR_VAR 0 4
33088: PUSH
33089: LD_VAR 0 9
33093: PUSH
33094: LD_INT 1
33096: ARRAY
33097: PPUSH
33098: LD_VAR 0 9
33102: PUSH
33103: LD_INT 2
33105: ARRAY
33106: PPUSH
33107: CALL_OW 546
33111: ST_TO_ADDR
// if hex [ 1 ] then
33112: LD_VAR 0 4
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: IFFALSE 33124
// continue ;
33122: GO 33012
// h := hex [ 2 ] ;
33124: LD_ADDR_VAR 0 13
33128: PUSH
33129: LD_VAR 0 4
33133: PUSH
33134: LD_INT 2
33136: ARRAY
33137: ST_TO_ADDR
// if h + 7 < height then
33138: LD_VAR 0 13
33142: PUSH
33143: LD_INT 7
33145: PLUS
33146: PUSH
33147: LD_VAR 0 15
33151: LESS
33152: IFFALSE 33181
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33154: LD_ADDR_VAR 0 18
33158: PUSH
33159: LD_INT 7
33161: PUSH
33162: LD_INT 28
33164: PUSH
33165: LD_INT 45
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: PUSH
33173: LD_VAR 0 12
33177: ARRAY
33178: ST_TO_ADDR
// break ;
33179: GO 33183
// end ; end ; end ;
33181: GO 33012
33183: POP
33184: POP
// end ; if not weapon then
33185: LD_VAR 0 18
33189: NOT
33190: IFFALSE 33250
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33192: LD_ADDR_VAR 0 5
33196: PUSH
33197: LD_VAR 0 5
33201: PUSH
33202: LD_INT 11
33204: PUSH
33205: LD_INT 30
33207: PUSH
33208: LD_INT 49
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: DIFF
33216: ST_TO_ADDR
// if not list then
33217: LD_VAR 0 5
33221: NOT
33222: IFFALSE 33226
// exit ;
33224: GO 33368
// weapon := list [ rand ( 1 , list ) ] ;
33226: LD_ADDR_VAR 0 18
33230: PUSH
33231: LD_VAR 0 5
33235: PUSH
33236: LD_INT 1
33238: PPUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: CALL_OW 12
33248: ARRAY
33249: ST_TO_ADDR
// end ; if weapon then
33250: LD_VAR 0 18
33254: IFFALSE 33368
// begin tmp := CostOfWeapon ( weapon ) ;
33256: LD_ADDR_VAR 0 14
33260: PUSH
33261: LD_VAR 0 18
33265: PPUSH
33266: CALL_OW 451
33270: ST_TO_ADDR
// j := GetBase ( tower ) ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_VAR 0 1
33280: PPUSH
33281: CALL_OW 274
33285: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33286: LD_VAR 0 9
33290: PPUSH
33291: LD_INT 1
33293: PPUSH
33294: CALL_OW 275
33298: PUSH
33299: LD_VAR 0 14
33303: PUSH
33304: LD_INT 1
33306: ARRAY
33307: GREATEREQUAL
33308: PUSH
33309: LD_VAR 0 9
33313: PPUSH
33314: LD_INT 2
33316: PPUSH
33317: CALL_OW 275
33321: PUSH
33322: LD_VAR 0 14
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: GREATEREQUAL
33331: AND
33332: PUSH
33333: LD_VAR 0 9
33337: PPUSH
33338: LD_INT 3
33340: PPUSH
33341: CALL_OW 275
33345: PUSH
33346: LD_VAR 0 14
33350: PUSH
33351: LD_INT 3
33353: ARRAY
33354: GREATEREQUAL
33355: AND
33356: IFFALSE 33368
// result := weapon ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_VAR 0 18
33367: ST_TO_ADDR
// end ; end ;
33368: LD_VAR 0 3
33372: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33373: LD_INT 0
33375: PPUSH
33376: PPUSH
// result := true ;
33377: LD_ADDR_VAR 0 3
33381: PUSH
33382: LD_INT 1
33384: ST_TO_ADDR
// if array1 = array2 then
33385: LD_VAR 0 1
33389: PUSH
33390: LD_VAR 0 2
33394: EQUAL
33395: IFFALSE 33455
// begin for i = 1 to array1 do
33397: LD_ADDR_VAR 0 4
33401: PUSH
33402: DOUBLE
33403: LD_INT 1
33405: DEC
33406: ST_TO_ADDR
33407: LD_VAR 0 1
33411: PUSH
33412: FOR_TO
33413: IFFALSE 33451
// if array1 [ i ] <> array2 [ i ] then
33415: LD_VAR 0 1
33419: PUSH
33420: LD_VAR 0 4
33424: ARRAY
33425: PUSH
33426: LD_VAR 0 2
33430: PUSH
33431: LD_VAR 0 4
33435: ARRAY
33436: NONEQUAL
33437: IFFALSE 33449
// begin result := false ;
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 0
33446: ST_TO_ADDR
// break ;
33447: GO 33451
// end ;
33449: GO 33412
33451: POP
33452: POP
// end else
33453: GO 33463
// result := false ;
33455: LD_ADDR_VAR 0 3
33459: PUSH
33460: LD_INT 0
33462: ST_TO_ADDR
// end ;
33463: LD_VAR 0 3
33467: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
// if not array1 or not array2 then
33472: LD_VAR 0 1
33476: NOT
33477: PUSH
33478: LD_VAR 0 2
33482: NOT
33483: OR
33484: IFFALSE 33488
// exit ;
33486: GO 33552
// result := true ;
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 1
33495: ST_TO_ADDR
// for i = 1 to array1 do
33496: LD_ADDR_VAR 0 4
33500: PUSH
33501: DOUBLE
33502: LD_INT 1
33504: DEC
33505: ST_TO_ADDR
33506: LD_VAR 0 1
33510: PUSH
33511: FOR_TO
33512: IFFALSE 33550
// if array1 [ i ] <> array2 [ i ] then
33514: LD_VAR 0 1
33518: PUSH
33519: LD_VAR 0 4
33523: ARRAY
33524: PUSH
33525: LD_VAR 0 2
33529: PUSH
33530: LD_VAR 0 4
33534: ARRAY
33535: NONEQUAL
33536: IFFALSE 33548
// begin result := false ;
33538: LD_ADDR_VAR 0 3
33542: PUSH
33543: LD_INT 0
33545: ST_TO_ADDR
// break ;
33546: GO 33550
// end ;
33548: GO 33511
33550: POP
33551: POP
// end ;
33552: LD_VAR 0 3
33556: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33557: LD_INT 0
33559: PPUSH
33560: PPUSH
33561: PPUSH
// pom := GetBase ( fac ) ;
33562: LD_ADDR_VAR 0 5
33566: PUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL_OW 274
33576: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33577: LD_ADDR_VAR 0 4
33581: PUSH
33582: LD_VAR 0 2
33586: PUSH
33587: LD_INT 1
33589: ARRAY
33590: PPUSH
33591: LD_VAR 0 2
33595: PUSH
33596: LD_INT 2
33598: ARRAY
33599: PPUSH
33600: LD_VAR 0 2
33604: PUSH
33605: LD_INT 3
33607: ARRAY
33608: PPUSH
33609: LD_VAR 0 2
33613: PUSH
33614: LD_INT 4
33616: ARRAY
33617: PPUSH
33618: CALL_OW 449
33622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33623: LD_ADDR_VAR 0 3
33627: PUSH
33628: LD_VAR 0 5
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: CALL_OW 275
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: GREATEREQUAL
33650: PUSH
33651: LD_VAR 0 5
33655: PPUSH
33656: LD_INT 2
33658: PPUSH
33659: CALL_OW 275
33663: PUSH
33664: LD_VAR 0 4
33668: PUSH
33669: LD_INT 2
33671: ARRAY
33672: GREATEREQUAL
33673: AND
33674: PUSH
33675: LD_VAR 0 5
33679: PPUSH
33680: LD_INT 3
33682: PPUSH
33683: CALL_OW 275
33687: PUSH
33688: LD_VAR 0 4
33692: PUSH
33693: LD_INT 3
33695: ARRAY
33696: GREATEREQUAL
33697: AND
33698: ST_TO_ADDR
// end ;
33699: LD_VAR 0 3
33703: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33704: LD_INT 0
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
// pom := GetBase ( building ) ;
33710: LD_ADDR_VAR 0 3
33714: PUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 274
33724: ST_TO_ADDR
// if not pom then
33725: LD_VAR 0 3
33729: NOT
33730: IFFALSE 33734
// exit ;
33732: GO 33904
// btype := GetBType ( building ) ;
33734: LD_ADDR_VAR 0 5
33738: PUSH
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 266
33748: ST_TO_ADDR
// if btype = b_armoury then
33749: LD_VAR 0 5
33753: PUSH
33754: LD_INT 4
33756: EQUAL
33757: IFFALSE 33767
// btype := b_barracks ;
33759: LD_ADDR_VAR 0 5
33763: PUSH
33764: LD_INT 5
33766: ST_TO_ADDR
// if btype = b_depot then
33767: LD_VAR 0 5
33771: PUSH
33772: LD_INT 0
33774: EQUAL
33775: IFFALSE 33785
// btype := b_warehouse ;
33777: LD_ADDR_VAR 0 5
33781: PUSH
33782: LD_INT 1
33784: ST_TO_ADDR
// if btype = b_workshop then
33785: LD_VAR 0 5
33789: PUSH
33790: LD_INT 2
33792: EQUAL
33793: IFFALSE 33803
// btype := b_factory ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_INT 3
33802: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33803: LD_ADDR_VAR 0 4
33807: PUSH
33808: LD_VAR 0 5
33812: PPUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 248
33822: PPUSH
33823: CALL_OW 450
33827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33828: LD_ADDR_VAR 0 2
33832: PUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: LD_INT 1
33840: PPUSH
33841: CALL_OW 275
33845: PUSH
33846: LD_VAR 0 4
33850: PUSH
33851: LD_INT 1
33853: ARRAY
33854: GREATEREQUAL
33855: PUSH
33856: LD_VAR 0 3
33860: PPUSH
33861: LD_INT 2
33863: PPUSH
33864: CALL_OW 275
33868: PUSH
33869: LD_VAR 0 4
33873: PUSH
33874: LD_INT 2
33876: ARRAY
33877: GREATEREQUAL
33878: AND
33879: PUSH
33880: LD_VAR 0 3
33884: PPUSH
33885: LD_INT 3
33887: PPUSH
33888: CALL_OW 275
33892: PUSH
33893: LD_VAR 0 4
33897: PUSH
33898: LD_INT 3
33900: ARRAY
33901: GREATEREQUAL
33902: AND
33903: ST_TO_ADDR
// end ;
33904: LD_VAR 0 2
33908: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33909: LD_INT 0
33911: PPUSH
33912: PPUSH
33913: PPUSH
// pom := GetBase ( building ) ;
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: LD_VAR 0 1
33923: PPUSH
33924: CALL_OW 274
33928: ST_TO_ADDR
// if not pom then
33929: LD_VAR 0 4
33933: NOT
33934: IFFALSE 33938
// exit ;
33936: GO 34039
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 2
33947: PPUSH
33948: LD_VAR 0 1
33952: PPUSH
33953: CALL_OW 248
33957: PPUSH
33958: CALL_OW 450
33962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: LD_VAR 0 4
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 275
33980: PUSH
33981: LD_VAR 0 5
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: GREATEREQUAL
33990: PUSH
33991: LD_VAR 0 4
33995: PPUSH
33996: LD_INT 2
33998: PPUSH
33999: CALL_OW 275
34003: PUSH
34004: LD_VAR 0 5
34008: PUSH
34009: LD_INT 2
34011: ARRAY
34012: GREATEREQUAL
34013: AND
34014: PUSH
34015: LD_VAR 0 4
34019: PPUSH
34020: LD_INT 3
34022: PPUSH
34023: CALL_OW 275
34027: PUSH
34028: LD_VAR 0 5
34032: PUSH
34033: LD_INT 3
34035: ARRAY
34036: GREATEREQUAL
34037: AND
34038: ST_TO_ADDR
// end ;
34039: LD_VAR 0 3
34043: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34044: LD_INT 0
34046: PPUSH
34047: PPUSH
34048: PPUSH
34049: PPUSH
34050: PPUSH
34051: PPUSH
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
// result := false ;
34057: LD_ADDR_VAR 0 8
34061: PUSH
34062: LD_INT 0
34064: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34065: LD_VAR 0 5
34069: NOT
34070: PUSH
34071: LD_VAR 0 1
34075: NOT
34076: OR
34077: PUSH
34078: LD_VAR 0 2
34082: NOT
34083: OR
34084: PUSH
34085: LD_VAR 0 3
34089: NOT
34090: OR
34091: IFFALSE 34095
// exit ;
34093: GO 34909
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34095: LD_ADDR_VAR 0 14
34099: PUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: LD_VAR 0 2
34109: PPUSH
34110: LD_VAR 0 3
34114: PPUSH
34115: LD_VAR 0 4
34119: PPUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_INT 1
34127: ARRAY
34128: PPUSH
34129: CALL_OW 248
34133: PPUSH
34134: LD_INT 0
34136: PPUSH
34137: CALL 36142 0 6
34141: ST_TO_ADDR
// if not hexes then
34142: LD_VAR 0 14
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 34909
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34151: LD_ADDR_VAR 0 17
34155: PUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: LD_INT 22
34163: PUSH
34164: LD_VAR 0 13
34168: PPUSH
34169: CALL_OW 255
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 30
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL_OW 72
34214: ST_TO_ADDR
// for i = 1 to hexes do
34215: LD_ADDR_VAR 0 9
34219: PUSH
34220: DOUBLE
34221: LD_INT 1
34223: DEC
34224: ST_TO_ADDR
34225: LD_VAR 0 14
34229: PUSH
34230: FOR_TO
34231: IFFALSE 34907
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34233: LD_ADDR_VAR 0 13
34237: PUSH
34238: LD_VAR 0 14
34242: PUSH
34243: LD_VAR 0 9
34247: ARRAY
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PPUSH
34253: LD_VAR 0 14
34257: PUSH
34258: LD_VAR 0 9
34262: ARRAY
34263: PUSH
34264: LD_INT 2
34266: ARRAY
34267: PPUSH
34268: CALL_OW 428
34272: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34273: LD_VAR 0 14
34277: PUSH
34278: LD_VAR 0 9
34282: ARRAY
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: PPUSH
34288: LD_VAR 0 14
34292: PUSH
34293: LD_VAR 0 9
34297: ARRAY
34298: PUSH
34299: LD_INT 2
34301: ARRAY
34302: PPUSH
34303: CALL_OW 351
34307: PUSH
34308: LD_VAR 0 14
34312: PUSH
34313: LD_VAR 0 9
34317: ARRAY
34318: PUSH
34319: LD_INT 1
34321: ARRAY
34322: PPUSH
34323: LD_VAR 0 14
34327: PUSH
34328: LD_VAR 0 9
34332: ARRAY
34333: PUSH
34334: LD_INT 2
34336: ARRAY
34337: PPUSH
34338: CALL_OW 488
34342: NOT
34343: OR
34344: PUSH
34345: LD_VAR 0 13
34349: PPUSH
34350: CALL_OW 247
34354: PUSH
34355: LD_INT 3
34357: EQUAL
34358: OR
34359: IFFALSE 34365
// exit ;
34361: POP
34362: POP
34363: GO 34909
// if not tmp then
34365: LD_VAR 0 13
34369: NOT
34370: IFFALSE 34374
// continue ;
34372: GO 34230
// result := true ;
34374: LD_ADDR_VAR 0 8
34378: PUSH
34379: LD_INT 1
34381: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34382: LD_VAR 0 6
34386: PUSH
34387: LD_VAR 0 13
34391: PPUSH
34392: CALL_OW 247
34396: PUSH
34397: LD_INT 2
34399: EQUAL
34400: AND
34401: PUSH
34402: LD_VAR 0 13
34406: PPUSH
34407: CALL_OW 263
34411: PUSH
34412: LD_INT 1
34414: EQUAL
34415: AND
34416: IFFALSE 34580
// begin if IsDrivenBy ( tmp ) then
34418: LD_VAR 0 13
34422: PPUSH
34423: CALL_OW 311
34427: IFFALSE 34431
// continue ;
34429: GO 34230
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34431: LD_VAR 0 6
34435: PPUSH
34436: LD_INT 3
34438: PUSH
34439: LD_INT 60
34441: PUSH
34442: EMPTY
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: LD_INT 55
34454: PUSH
34455: EMPTY
34456: LIST
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PPUSH
34466: CALL_OW 72
34470: IFFALSE 34578
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34472: LD_ADDR_VAR 0 18
34476: PUSH
34477: LD_VAR 0 6
34481: PPUSH
34482: LD_INT 3
34484: PUSH
34485: LD_INT 60
34487: PUSH
34488: EMPTY
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 3
34497: PUSH
34498: LD_INT 55
34500: PUSH
34501: EMPTY
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL_OW 72
34516: PUSH
34517: LD_INT 1
34519: ARRAY
34520: ST_TO_ADDR
// if IsInUnit ( driver ) then
34521: LD_VAR 0 18
34525: PPUSH
34526: CALL_OW 310
34530: IFFALSE 34541
// ComExit ( driver ) ;
34532: LD_VAR 0 18
34536: PPUSH
34537: CALL 59830 0 1
// AddComEnterUnit ( driver , tmp ) ;
34541: LD_VAR 0 18
34545: PPUSH
34546: LD_VAR 0 13
34550: PPUSH
34551: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34555: LD_VAR 0 18
34559: PPUSH
34560: LD_VAR 0 7
34564: PPUSH
34565: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34569: LD_VAR 0 18
34573: PPUSH
34574: CALL_OW 181
// end ; continue ;
34578: GO 34230
// end ; if not cleaners or not tmp in cleaners then
34580: LD_VAR 0 6
34584: NOT
34585: PUSH
34586: LD_VAR 0 13
34590: PUSH
34591: LD_VAR 0 6
34595: IN
34596: NOT
34597: OR
34598: IFFALSE 34905
// begin if dep then
34600: LD_VAR 0 17
34604: IFFALSE 34740
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34606: LD_ADDR_VAR 0 16
34610: PUSH
34611: LD_VAR 0 17
34615: PUSH
34616: LD_INT 1
34618: ARRAY
34619: PPUSH
34620: CALL_OW 250
34624: PPUSH
34625: LD_VAR 0 17
34629: PUSH
34630: LD_INT 1
34632: ARRAY
34633: PPUSH
34634: CALL_OW 254
34638: PPUSH
34639: LD_INT 5
34641: PPUSH
34642: CALL_OW 272
34646: PUSH
34647: LD_VAR 0 17
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PPUSH
34656: CALL_OW 251
34660: PPUSH
34661: LD_VAR 0 17
34665: PUSH
34666: LD_INT 1
34668: ARRAY
34669: PPUSH
34670: CALL_OW 254
34674: PPUSH
34675: LD_INT 5
34677: PPUSH
34678: CALL_OW 273
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34687: LD_VAR 0 16
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 16
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: PPUSH
34705: CALL_OW 488
34709: IFFALSE 34740
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34711: LD_VAR 0 13
34715: PPUSH
34716: LD_VAR 0 16
34720: PUSH
34721: LD_INT 1
34723: ARRAY
34724: PPUSH
34725: LD_VAR 0 16
34729: PUSH
34730: LD_INT 2
34732: ARRAY
34733: PPUSH
34734: CALL_OW 111
// continue ;
34738: GO 34230
// end ; end ; r := GetDir ( tmp ) ;
34740: LD_ADDR_VAR 0 15
34744: PUSH
34745: LD_VAR 0 13
34749: PPUSH
34750: CALL_OW 254
34754: ST_TO_ADDR
// if r = 5 then
34755: LD_VAR 0 15
34759: PUSH
34760: LD_INT 5
34762: EQUAL
34763: IFFALSE 34773
// r := 0 ;
34765: LD_ADDR_VAR 0 15
34769: PUSH
34770: LD_INT 0
34772: ST_TO_ADDR
// for j = r to 5 do
34773: LD_ADDR_VAR 0 10
34777: PUSH
34778: DOUBLE
34779: LD_VAR 0 15
34783: DEC
34784: ST_TO_ADDR
34785: LD_INT 5
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34903
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34791: LD_ADDR_VAR 0 11
34795: PUSH
34796: LD_VAR 0 13
34800: PPUSH
34801: CALL_OW 250
34805: PPUSH
34806: LD_VAR 0 10
34810: PPUSH
34811: LD_INT 2
34813: PPUSH
34814: CALL_OW 272
34818: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34819: LD_ADDR_VAR 0 12
34823: PUSH
34824: LD_VAR 0 13
34828: PPUSH
34829: CALL_OW 251
34833: PPUSH
34834: LD_VAR 0 10
34838: PPUSH
34839: LD_INT 2
34841: PPUSH
34842: CALL_OW 273
34846: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34847: LD_VAR 0 11
34851: PPUSH
34852: LD_VAR 0 12
34856: PPUSH
34857: CALL_OW 488
34861: PUSH
34862: LD_VAR 0 11
34866: PPUSH
34867: LD_VAR 0 12
34871: PPUSH
34872: CALL_OW 428
34876: NOT
34877: AND
34878: IFFALSE 34901
// begin ComMoveXY ( tmp , _x , _y ) ;
34880: LD_VAR 0 13
34884: PPUSH
34885: LD_VAR 0 11
34889: PPUSH
34890: LD_VAR 0 12
34894: PPUSH
34895: CALL_OW 111
// break ;
34899: GO 34903
// end ; end ;
34901: GO 34788
34903: POP
34904: POP
// end ; end ;
34905: GO 34230
34907: POP
34908: POP
// end ;
34909: LD_VAR 0 8
34913: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34914: LD_INT 0
34916: PPUSH
// result := true ;
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_INT 1
34924: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34925: LD_VAR 0 2
34929: PUSH
34930: LD_INT 24
34932: DOUBLE
34933: EQUAL
34934: IFTRUE 34944
34936: LD_INT 33
34938: DOUBLE
34939: EQUAL
34940: IFTRUE 34944
34942: GO 34969
34944: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34945: LD_ADDR_VAR 0 3
34949: PUSH
34950: LD_INT 32
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 321
34962: PUSH
34963: LD_INT 2
34965: EQUAL
34966: ST_TO_ADDR
34967: GO 35285
34969: LD_INT 20
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 35002
34977: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34978: LD_ADDR_VAR 0 3
34982: PUSH
34983: LD_INT 6
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 321
34995: PUSH
34996: LD_INT 2
34998: EQUAL
34999: ST_TO_ADDR
35000: GO 35285
35002: LD_INT 22
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35016
35008: LD_INT 36
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35041
35016: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 15
35024: PPUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 321
35034: PUSH
35035: LD_INT 2
35037: EQUAL
35038: ST_TO_ADDR
35039: GO 35285
35041: LD_INT 30
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35074
35049: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 20
35057: PPUSH
35058: LD_VAR 0 1
35062: PPUSH
35063: CALL_OW 321
35067: PUSH
35068: LD_INT 2
35070: EQUAL
35071: ST_TO_ADDR
35072: GO 35285
35074: LD_INT 28
35076: DOUBLE
35077: EQUAL
35078: IFTRUE 35088
35080: LD_INT 21
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35113
35088: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 21
35096: PPUSH
35097: LD_VAR 0 1
35101: PPUSH
35102: CALL_OW 321
35106: PUSH
35107: LD_INT 2
35109: EQUAL
35110: ST_TO_ADDR
35111: GO 35285
35113: LD_INT 16
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35146
35121: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 84
35129: PPUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 321
35139: PUSH
35140: LD_INT 2
35142: EQUAL
35143: ST_TO_ADDR
35144: GO 35285
35146: LD_INT 19
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35160
35152: LD_INT 23
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35185
35160: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 83
35168: PPUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 321
35178: PUSH
35179: LD_INT 2
35181: EQUAL
35182: ST_TO_ADDR
35183: GO 35285
35185: LD_INT 17
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35218
35193: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 39
35201: PPUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: CALL_OW 321
35211: PUSH
35212: LD_INT 2
35214: EQUAL
35215: ST_TO_ADDR
35216: GO 35285
35218: LD_INT 18
35220: DOUBLE
35221: EQUAL
35222: IFTRUE 35226
35224: GO 35251
35226: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_INT 40
35234: PPUSH
35235: LD_VAR 0 1
35239: PPUSH
35240: CALL_OW 321
35244: PUSH
35245: LD_INT 2
35247: EQUAL
35248: ST_TO_ADDR
35249: GO 35285
35251: LD_INT 27
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35284
35259: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_INT 35
35267: PPUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 321
35277: PUSH
35278: LD_INT 2
35280: EQUAL
35281: ST_TO_ADDR
35282: GO 35285
35284: POP
// end ;
35285: LD_VAR 0 3
35289: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35290: LD_INT 0
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
// result := false ;
35303: LD_ADDR_VAR 0 6
35307: PUSH
35308: LD_INT 0
35310: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35311: LD_VAR 0 1
35315: NOT
35316: PUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 266
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: IN
35337: NOT
35338: OR
35339: PUSH
35340: LD_VAR 0 2
35344: NOT
35345: OR
35346: PUSH
35347: LD_VAR 0 5
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: LD_INT 5
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: IN
35378: NOT
35379: OR
35380: PUSH
35381: LD_VAR 0 3
35385: PPUSH
35386: LD_VAR 0 4
35390: PPUSH
35391: CALL_OW 488
35395: NOT
35396: OR
35397: IFFALSE 35401
// exit ;
35399: GO 36137
// side := GetSide ( depot ) ;
35401: LD_ADDR_VAR 0 9
35405: PUSH
35406: LD_VAR 0 1
35410: PPUSH
35411: CALL_OW 255
35415: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35416: LD_VAR 0 9
35420: PPUSH
35421: LD_VAR 0 2
35425: PPUSH
35426: CALL 34914 0 2
35430: NOT
35431: IFFALSE 35435
// exit ;
35433: GO 36137
// pom := GetBase ( depot ) ;
35435: LD_ADDR_VAR 0 10
35439: PUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 274
35449: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35450: LD_ADDR_VAR 0 11
35454: PUSH
35455: LD_VAR 0 2
35459: PPUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 248
35469: PPUSH
35470: CALL_OW 450
35474: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35475: LD_VAR 0 10
35479: PPUSH
35480: LD_INT 1
35482: PPUSH
35483: CALL_OW 275
35487: PUSH
35488: LD_VAR 0 11
35492: PUSH
35493: LD_INT 1
35495: ARRAY
35496: GREATEREQUAL
35497: PUSH
35498: LD_VAR 0 10
35502: PPUSH
35503: LD_INT 2
35505: PPUSH
35506: CALL_OW 275
35510: PUSH
35511: LD_VAR 0 11
35515: PUSH
35516: LD_INT 2
35518: ARRAY
35519: GREATEREQUAL
35520: AND
35521: PUSH
35522: LD_VAR 0 10
35526: PPUSH
35527: LD_INT 3
35529: PPUSH
35530: CALL_OW 275
35534: PUSH
35535: LD_VAR 0 11
35539: PUSH
35540: LD_INT 3
35542: ARRAY
35543: GREATEREQUAL
35544: AND
35545: NOT
35546: IFFALSE 35550
// exit ;
35548: GO 36137
// if GetBType ( depot ) = b_depot then
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 266
35559: PUSH
35560: LD_INT 0
35562: EQUAL
35563: IFFALSE 35575
// dist := 28 else
35565: LD_ADDR_VAR 0 14
35569: PUSH
35570: LD_INT 28
35572: ST_TO_ADDR
35573: GO 35583
// dist := 36 ;
35575: LD_ADDR_VAR 0 14
35579: PUSH
35580: LD_INT 36
35582: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35583: LD_VAR 0 1
35587: PPUSH
35588: LD_VAR 0 3
35592: PPUSH
35593: LD_VAR 0 4
35597: PPUSH
35598: CALL_OW 297
35602: PUSH
35603: LD_VAR 0 14
35607: GREATER
35608: IFFALSE 35612
// exit ;
35610: GO 36137
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35612: LD_ADDR_VAR 0 12
35616: PUSH
35617: LD_VAR 0 2
35621: PPUSH
35622: LD_VAR 0 3
35626: PPUSH
35627: LD_VAR 0 4
35631: PPUSH
35632: LD_VAR 0 5
35636: PPUSH
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 248
35646: PPUSH
35647: LD_INT 0
35649: PPUSH
35650: CALL 36142 0 6
35654: ST_TO_ADDR
// if not hexes then
35655: LD_VAR 0 12
35659: NOT
35660: IFFALSE 35664
// exit ;
35662: GO 36137
// hex := GetHexInfo ( x , y ) ;
35664: LD_ADDR_VAR 0 15
35668: PUSH
35669: LD_VAR 0 3
35673: PPUSH
35674: LD_VAR 0 4
35678: PPUSH
35679: CALL_OW 546
35683: ST_TO_ADDR
// if hex [ 1 ] then
35684: LD_VAR 0 15
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: IFFALSE 35696
// exit ;
35694: GO 36137
// height := hex [ 2 ] ;
35696: LD_ADDR_VAR 0 13
35700: PUSH
35701: LD_VAR 0 15
35705: PUSH
35706: LD_INT 2
35708: ARRAY
35709: ST_TO_ADDR
// for i = 1 to hexes do
35710: LD_ADDR_VAR 0 7
35714: PUSH
35715: DOUBLE
35716: LD_INT 1
35718: DEC
35719: ST_TO_ADDR
35720: LD_VAR 0 12
35724: PUSH
35725: FOR_TO
35726: IFFALSE 36056
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35728: LD_VAR 0 12
35732: PUSH
35733: LD_VAR 0 7
35737: ARRAY
35738: PUSH
35739: LD_INT 1
35741: ARRAY
35742: PPUSH
35743: LD_VAR 0 12
35747: PUSH
35748: LD_VAR 0 7
35752: ARRAY
35753: PUSH
35754: LD_INT 2
35756: ARRAY
35757: PPUSH
35758: CALL_OW 488
35762: NOT
35763: PUSH
35764: LD_VAR 0 12
35768: PUSH
35769: LD_VAR 0 7
35773: ARRAY
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: PPUSH
35779: LD_VAR 0 12
35783: PUSH
35784: LD_VAR 0 7
35788: ARRAY
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: PPUSH
35794: CALL_OW 428
35798: PUSH
35799: LD_INT 0
35801: GREATER
35802: OR
35803: PUSH
35804: LD_VAR 0 12
35808: PUSH
35809: LD_VAR 0 7
35813: ARRAY
35814: PUSH
35815: LD_INT 1
35817: ARRAY
35818: PPUSH
35819: LD_VAR 0 12
35823: PUSH
35824: LD_VAR 0 7
35828: ARRAY
35829: PUSH
35830: LD_INT 2
35832: ARRAY
35833: PPUSH
35834: CALL_OW 351
35838: OR
35839: IFFALSE 35845
// exit ;
35841: POP
35842: POP
35843: GO 36137
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35845: LD_ADDR_VAR 0 8
35849: PUSH
35850: LD_VAR 0 12
35854: PUSH
35855: LD_VAR 0 7
35859: ARRAY
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PPUSH
35865: LD_VAR 0 12
35869: PUSH
35870: LD_VAR 0 7
35874: ARRAY
35875: PUSH
35876: LD_INT 2
35878: ARRAY
35879: PPUSH
35880: CALL_OW 546
35884: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35885: LD_VAR 0 8
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PUSH
35894: LD_VAR 0 8
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PUSH
35903: LD_VAR 0 13
35907: PUSH
35908: LD_INT 2
35910: PLUS
35911: GREATER
35912: OR
35913: PUSH
35914: LD_VAR 0 8
35918: PUSH
35919: LD_INT 2
35921: ARRAY
35922: PUSH
35923: LD_VAR 0 13
35927: PUSH
35928: LD_INT 2
35930: MINUS
35931: LESS
35932: OR
35933: PUSH
35934: LD_VAR 0 8
35938: PUSH
35939: LD_INT 3
35941: ARRAY
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 8
35948: PUSH
35949: LD_INT 9
35951: PUSH
35952: LD_INT 10
35954: PUSH
35955: LD_INT 11
35957: PUSH
35958: LD_INT 12
35960: PUSH
35961: LD_INT 13
35963: PUSH
35964: LD_INT 16
35966: PUSH
35967: LD_INT 17
35969: PUSH
35970: LD_INT 18
35972: PUSH
35973: LD_INT 19
35975: PUSH
35976: LD_INT 20
35978: PUSH
35979: LD_INT 21
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: IN
35997: NOT
35998: OR
35999: PUSH
36000: LD_VAR 0 8
36004: PUSH
36005: LD_INT 5
36007: ARRAY
36008: NOT
36009: OR
36010: PUSH
36011: LD_VAR 0 8
36015: PUSH
36016: LD_INT 6
36018: ARRAY
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: LD_INT 7
36028: PUSH
36029: LD_INT 9
36031: PUSH
36032: LD_INT 10
36034: PUSH
36035: LD_INT 11
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: IN
36046: NOT
36047: OR
36048: IFFALSE 36054
// exit ;
36050: POP
36051: POP
36052: GO 36137
// end ;
36054: GO 35725
36056: POP
36057: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36058: LD_VAR 0 9
36062: PPUSH
36063: LD_VAR 0 3
36067: PPUSH
36068: LD_VAR 0 4
36072: PPUSH
36073: LD_INT 20
36075: PPUSH
36076: CALL 28089 0 4
36080: PUSH
36081: LD_INT 4
36083: ARRAY
36084: IFFALSE 36088
// exit ;
36086: GO 36137
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36088: LD_VAR 0 2
36092: PUSH
36093: LD_INT 29
36095: PUSH
36096: LD_INT 30
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: IN
36103: PUSH
36104: LD_VAR 0 3
36108: PPUSH
36109: LD_VAR 0 4
36113: PPUSH
36114: LD_VAR 0 9
36118: PPUSH
36119: CALL_OW 440
36123: NOT
36124: AND
36125: IFFALSE 36129
// exit ;
36127: GO 36137
// result := true ;
36129: LD_ADDR_VAR 0 6
36133: PUSH
36134: LD_INT 1
36136: ST_TO_ADDR
// end ;
36137: LD_VAR 0 6
36141: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36142: LD_INT 0
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
36165: PPUSH
36166: PPUSH
36167: PPUSH
36168: PPUSH
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
// result = [ ] ;
36202: LD_ADDR_VAR 0 7
36206: PUSH
36207: EMPTY
36208: ST_TO_ADDR
// temp_list = [ ] ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: EMPTY
36215: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36216: LD_VAR 0 4
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: LD_INT 4
36235: PUSH
36236: LD_INT 5
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: IN
36247: NOT
36248: PUSH
36249: LD_VAR 0 1
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: IN
36264: PUSH
36265: LD_VAR 0 5
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: IN
36284: NOT
36285: AND
36286: OR
36287: IFFALSE 36291
// exit ;
36289: GO 54682
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36291: LD_VAR 0 1
36295: PUSH
36296: LD_INT 6
36298: PUSH
36299: LD_INT 7
36301: PUSH
36302: LD_INT 8
36304: PUSH
36305: LD_INT 13
36307: PUSH
36308: LD_INT 12
36310: PUSH
36311: LD_INT 15
36313: PUSH
36314: LD_INT 11
36316: PUSH
36317: LD_INT 14
36319: PUSH
36320: LD_INT 10
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: IN
36334: IFFALSE 36344
// btype = b_lab ;
36336: LD_ADDR_VAR 0 1
36340: PUSH
36341: LD_INT 6
36343: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36344: LD_VAR 0 6
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: IN
36363: NOT
36364: PUSH
36365: LD_VAR 0 1
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: LD_INT 6
36384: PUSH
36385: LD_INT 36
36387: PUSH
36388: LD_INT 4
36390: PUSH
36391: LD_INT 5
36393: PUSH
36394: LD_INT 31
36396: PUSH
36397: LD_INT 32
36399: PUSH
36400: LD_INT 33
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: IN
36416: NOT
36417: PUSH
36418: LD_VAR 0 6
36422: PUSH
36423: LD_INT 1
36425: EQUAL
36426: AND
36427: OR
36428: PUSH
36429: LD_VAR 0 1
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: IN
36444: NOT
36445: PUSH
36446: LD_VAR 0 6
36450: PUSH
36451: LD_INT 2
36453: EQUAL
36454: AND
36455: OR
36456: IFFALSE 36466
// mode = 0 ;
36458: LD_ADDR_VAR 0 6
36462: PUSH
36463: LD_INT 0
36465: ST_TO_ADDR
// case mode of 0 :
36466: LD_VAR 0 6
36470: PUSH
36471: LD_INT 0
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 47932
36479: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36480: LD_ADDR_VAR 0 11
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 3
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36673: LD_ADDR_VAR 0 12
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: NEG
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: NEG
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36869: LD_ADDR_VAR 0 13
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: LD_INT 3
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: NEG
37041: PUSH
37042: LD_INT 3
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37068: LD_ADDR_VAR 0 14
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 3
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37264: LD_ADDR_VAR 0 15
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 3
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37457: LD_ADDR_VAR 0 16
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37650: LD_ADDR_VAR 0 17
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37880: LD_ADDR_VAR 0 18
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38110: LD_ADDR_VAR 0 19
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38340: LD_ADDR_VAR 0 20
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38570: LD_ADDR_VAR 0 21
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38800: LD_ADDR_VAR 0 22
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39030: LD_ADDR_VAR 0 23
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: LD_INT 3
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 3
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39310: LD_ADDR_VAR 0 24
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 3
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39586: LD_ADDR_VAR 0 25
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39860: LD_ADDR_VAR 0 26
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 3
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40136: LD_ADDR_VAR 0 27
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40416: LD_ADDR_VAR 0 28
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40698: LD_ADDR_VAR 0 29
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 3
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 3
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40977: LD_ADDR_VAR 0 30
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 3
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41255: LD_ADDR_VAR 0 31
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 3
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41533: LD_ADDR_VAR 0 32
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41811: LD_ADDR_VAR 0 33
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42090: LD_ADDR_VAR 0 34
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42370: LD_ADDR_VAR 0 35
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42482: LD_ADDR_VAR 0 36
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42594: LD_ADDR_VAR 0 37
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42706: LD_ADDR_VAR 0 38
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42818: LD_ADDR_VAR 0 39
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42930: LD_ADDR_VAR 0 40
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43042: LD_ADDR_VAR 0 41
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 3
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 3
43316: NEG
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43392: LD_ADDR_VAR 0 42
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 3
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 3
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 3
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: NEG
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 3
43701: NEG
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43742: LD_ADDR_VAR 0 43
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 3
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 3
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 3
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44090: LD_ADDR_VAR 0 44
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: LD_INT 3
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 3
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 3
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 3
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 3
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 3
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: NEG
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44440: LD_ADDR_VAR 0 45
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 3
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 3
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 3
44737: NEG
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 3
44749: NEG
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44790: LD_ADDR_VAR 0 46
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 3
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 3
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45138: LD_ADDR_VAR 0 47
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45289: LD_ADDR_VAR 0 48
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45436: LD_ADDR_VAR 0 49
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45580: LD_ADDR_VAR 0 50
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45724: LD_ADDR_VAR 0 51
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45871: LD_ADDR_VAR 0 52
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46022: LD_ADDR_VAR 0 53
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46252: LD_ADDR_VAR 0 54
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46482: LD_ADDR_VAR 0 55
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46712: LD_ADDR_VAR 0 56
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46942: LD_ADDR_VAR 0 57
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47172: LD_ADDR_VAR 0 58
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47402: LD_ADDR_VAR 0 59
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47490: LD_ADDR_VAR 0 60
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47578: LD_ADDR_VAR 0 61
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47666: LD_ADDR_VAR 0 62
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47754: LD_ADDR_VAR 0 63
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47842: LD_ADDR_VAR 0 64
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// end ; 1 :
47930: GO 53827
47932: LD_INT 1
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47940
47938: GO 50563
47940: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47941: LD_ADDR_VAR 0 11
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47985: LD_ADDR_VAR 0 12
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48026: LD_ADDR_VAR 0 13
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48066: LD_ADDR_VAR 0 14
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48107: LD_ADDR_VAR 0 15
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48151: LD_ADDR_VAR 0 16
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48197: LD_ADDR_VAR 0 17
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 3
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48241: LD_ADDR_VAR 0 18
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48282: LD_ADDR_VAR 0 19
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48322: LD_ADDR_VAR 0 20
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48363: LD_ADDR_VAR 0 21
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48407: LD_ADDR_VAR 0 22
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48453: LD_ADDR_VAR 0 23
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 4
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48497: LD_ADDR_VAR 0 24
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 4
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48538: LD_ADDR_VAR 0 25
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48578: LD_ADDR_VAR 0 26
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48619: LD_ADDR_VAR 0 27
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 4
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48663: LD_ADDR_VAR 0 28
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: LD_INT 3
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: LD_INT 4
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48709: LD_ADDR_VAR 0 29
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 4
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 5
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 5
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 6
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 6
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 5
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48864: LD_ADDR_VAR 0 30
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 4
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 4
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 4
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 5
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 5
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 5
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 6
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 6
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49007: LD_ADDR_VAR 0 31
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 4
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: LD_INT 4
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: LD_INT 4
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 5
49074: PUSH
49075: LD_INT 4
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 5
49084: PUSH
49085: LD_INT 5
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: LD_INT 5
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 6
49104: PUSH
49105: LD_INT 5
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 6
49114: PUSH
49115: LD_INT 6
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 5
49124: PUSH
49125: LD_INT 6
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49146: LD_ADDR_VAR 0 32
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 4
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 5
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 5
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 4
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 6
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 6
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 5
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49289: LD_ADDR_VAR 0 33
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 4
49341: NEG
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 4
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 4
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 5
49375: NEG
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 5
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 5
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 6
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 6
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49444: LD_ADDR_VAR 0 34
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: LD_INT 4
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 4
49499: NEG
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: NEG
49512: PUSH
49513: LD_INT 4
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 4
49523: NEG
49524: PUSH
49525: LD_INT 5
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 5
49535: NEG
49536: PUSH
49537: LD_INT 4
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 5
49547: NEG
49548: PUSH
49549: LD_INT 5
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 5
49559: NEG
49560: PUSH
49561: LD_INT 6
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 6
49571: NEG
49572: PUSH
49573: LD_INT 5
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 6
49583: NEG
49584: PUSH
49585: LD_INT 6
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49607: LD_ADDR_VAR 0 41
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49651: LD_ADDR_VAR 0 42
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49692: LD_ADDR_VAR 0 43
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49732: LD_ADDR_VAR 0 44
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49773: LD_ADDR_VAR 0 45
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49817: LD_ADDR_VAR 0 46
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49863: LD_ADDR_VAR 0 47
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49896: LD_ADDR_VAR 0 48
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49927: LD_ADDR_VAR 0 49
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49956: LD_ADDR_VAR 0 50
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49985: LD_ADDR_VAR 0 51
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50016: LD_ADDR_VAR 0 52
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50049: LD_ADDR_VAR 0 53
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50093: LD_ADDR_VAR 0 54
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50134: LD_ADDR_VAR 0 55
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50174: LD_ADDR_VAR 0 56
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50215: LD_ADDR_VAR 0 57
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50259: LD_ADDR_VAR 0 58
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50305: LD_ADDR_VAR 0 59
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50349: LD_ADDR_VAR 0 60
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50390: LD_ADDR_VAR 0 61
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50430: LD_ADDR_VAR 0 62
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50471: LD_ADDR_VAR 0 63
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50515: LD_ADDR_VAR 0 64
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// end ; 2 :
50561: GO 53827
50563: LD_INT 2
50565: DOUBLE
50566: EQUAL
50567: IFTRUE 50571
50569: GO 53826
50571: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50572: LD_ADDR_VAR 0 29
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 4
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 5
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 5
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 4
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 5
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 4
50702: PUSH
50703: LD_INT 4
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 4
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 4
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 5
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 4
50911: NEG
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 4
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 4
50934: NEG
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 4
50957: NEG
50958: PUSH
50959: LD_INT 4
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 4
50969: NEG
50970: PUSH
50971: LD_INT 5
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 4
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 5
51017: NEG
51018: PUSH
51019: LD_INT 4
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 5
51029: NEG
51030: PUSH
51031: LD_INT 5
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: NEG
51042: PUSH
51043: LD_INT 5
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 5
51053: NEG
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51110: LD_ADDR_VAR 0 30
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 4
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: PUSH
51138: LD_INT 4
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: LD_INT 5
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 5
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 4
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 5
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: LD_INT 5
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 4
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 4
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 5
51356: NEG
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 5
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 5
51379: NEG
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 4
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 4
51462: NEG
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 4
51474: NEG
51475: PUSH
51476: LD_INT 4
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 4
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 5
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 5
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: LD_INT 5
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51657: LD_ADDR_VAR 0 31
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 5
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 5
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 4
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 4
51859: NEG
51860: PUSH
51861: LD_INT 4
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 4
51871: NEG
51872: PUSH
51873: LD_INT 5
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: NEG
51884: PUSH
51885: LD_INT 4
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 5
51919: NEG
51920: PUSH
51921: LD_INT 4
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 5
51931: NEG
51932: PUSH
51933: LD_INT 5
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: LD_INT 5
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 5
51955: NEG
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 4
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 4
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 4
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 4
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 5
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 5
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52207: LD_ADDR_VAR 0 32
52211: PUSH
52212: LD_INT 4
52214: NEG
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 4
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 4
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 5
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 5
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 5
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: LD_INT 4
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 4
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: NEG
52389: PUSH
52390: LD_INT 4
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 4
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 4
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 5
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 4
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 4
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 5
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 3
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 5
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 4
52619: PUSH
52620: LD_INT 4
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 4
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: LD_INT 4
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 5
52649: PUSH
52650: LD_INT 5
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: LD_INT 5
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 5
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 5
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52754: LD_ADDR_VAR 0 33
52758: PUSH
52759: LD_INT 4
52761: NEG
52762: PUSH
52763: LD_INT 4
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 4
52773: NEG
52774: PUSH
52775: LD_INT 5
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 4
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 4
52809: NEG
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 5
52821: NEG
52822: PUSH
52823: LD_INT 4
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 5
52833: NEG
52834: PUSH
52835: LD_INT 5
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: LD_INT 5
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 5
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 4
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 4
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 4
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 5
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 5
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 4
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 4
53094: PUSH
53095: LD_INT 4
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: LD_INT 4
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 4
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: LD_INT 4
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 4
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 5
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 5
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 4
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 5
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53292: LD_ADDR_VAR 0 34
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 5
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 4
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 5
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 3
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 5
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 4
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 5
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 5
53524: PUSH
53525: LD_INT 5
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: LD_INT 5
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 5
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 4
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 4
53677: NEG
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 4
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 5
53733: NEG
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 5
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 5
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: ST_TO_ADDR
// end ; end ;
53824: GO 53827
53826: POP
// case btype of b_depot , b_warehouse :
53827: LD_VAR 0 1
53831: PUSH
53832: LD_INT 0
53834: DOUBLE
53835: EQUAL
53836: IFTRUE 53846
53838: LD_INT 1
53840: DOUBLE
53841: EQUAL
53842: IFTRUE 53846
53844: GO 54047
53846: POP
// case nation of nation_american :
53847: LD_VAR 0 5
53851: PUSH
53852: LD_INT 1
53854: DOUBLE
53855: EQUAL
53856: IFTRUE 53860
53858: GO 53916
53860: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53861: LD_ADDR_VAR 0 9
53865: PUSH
53866: LD_VAR 0 11
53870: PUSH
53871: LD_VAR 0 12
53875: PUSH
53876: LD_VAR 0 13
53880: PUSH
53881: LD_VAR 0 14
53885: PUSH
53886: LD_VAR 0 15
53890: PUSH
53891: LD_VAR 0 16
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: PUSH
53904: LD_VAR 0 4
53908: PUSH
53909: LD_INT 1
53911: PLUS
53912: ARRAY
53913: ST_TO_ADDR
53914: GO 54045
53916: LD_INT 2
53918: DOUBLE
53919: EQUAL
53920: IFTRUE 53924
53922: GO 53980
53924: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53925: LD_ADDR_VAR 0 9
53929: PUSH
53930: LD_VAR 0 17
53934: PUSH
53935: LD_VAR 0 18
53939: PUSH
53940: LD_VAR 0 19
53944: PUSH
53945: LD_VAR 0 20
53949: PUSH
53950: LD_VAR 0 21
53954: PUSH
53955: LD_VAR 0 22
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: PUSH
53968: LD_VAR 0 4
53972: PUSH
53973: LD_INT 1
53975: PLUS
53976: ARRAY
53977: ST_TO_ADDR
53978: GO 54045
53980: LD_INT 3
53982: DOUBLE
53983: EQUAL
53984: IFTRUE 53988
53986: GO 54044
53988: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53989: LD_ADDR_VAR 0 9
53993: PUSH
53994: LD_VAR 0 23
53998: PUSH
53999: LD_VAR 0 24
54003: PUSH
54004: LD_VAR 0 25
54008: PUSH
54009: LD_VAR 0 26
54013: PUSH
54014: LD_VAR 0 27
54018: PUSH
54019: LD_VAR 0 28
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: PUSH
54032: LD_VAR 0 4
54036: PUSH
54037: LD_INT 1
54039: PLUS
54040: ARRAY
54041: ST_TO_ADDR
54042: GO 54045
54044: POP
54045: GO 54600
54047: LD_INT 2
54049: DOUBLE
54050: EQUAL
54051: IFTRUE 54061
54053: LD_INT 3
54055: DOUBLE
54056: EQUAL
54057: IFTRUE 54061
54059: GO 54117
54061: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54062: LD_ADDR_VAR 0 9
54066: PUSH
54067: LD_VAR 0 29
54071: PUSH
54072: LD_VAR 0 30
54076: PUSH
54077: LD_VAR 0 31
54081: PUSH
54082: LD_VAR 0 32
54086: PUSH
54087: LD_VAR 0 33
54091: PUSH
54092: LD_VAR 0 34
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: PUSH
54105: LD_VAR 0 4
54109: PUSH
54110: LD_INT 1
54112: PLUS
54113: ARRAY
54114: ST_TO_ADDR
54115: GO 54600
54117: LD_INT 16
54119: DOUBLE
54120: EQUAL
54121: IFTRUE 54179
54123: LD_INT 17
54125: DOUBLE
54126: EQUAL
54127: IFTRUE 54179
54129: LD_INT 18
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54179
54135: LD_INT 19
54137: DOUBLE
54138: EQUAL
54139: IFTRUE 54179
54141: LD_INT 22
54143: DOUBLE
54144: EQUAL
54145: IFTRUE 54179
54147: LD_INT 20
54149: DOUBLE
54150: EQUAL
54151: IFTRUE 54179
54153: LD_INT 21
54155: DOUBLE
54156: EQUAL
54157: IFTRUE 54179
54159: LD_INT 23
54161: DOUBLE
54162: EQUAL
54163: IFTRUE 54179
54165: LD_INT 24
54167: DOUBLE
54168: EQUAL
54169: IFTRUE 54179
54171: LD_INT 25
54173: DOUBLE
54174: EQUAL
54175: IFTRUE 54179
54177: GO 54235
54179: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54180: LD_ADDR_VAR 0 9
54184: PUSH
54185: LD_VAR 0 35
54189: PUSH
54190: LD_VAR 0 36
54194: PUSH
54195: LD_VAR 0 37
54199: PUSH
54200: LD_VAR 0 38
54204: PUSH
54205: LD_VAR 0 39
54209: PUSH
54210: LD_VAR 0 40
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: PUSH
54223: LD_VAR 0 4
54227: PUSH
54228: LD_INT 1
54230: PLUS
54231: ARRAY
54232: ST_TO_ADDR
54233: GO 54600
54235: LD_INT 6
54237: DOUBLE
54238: EQUAL
54239: IFTRUE 54291
54241: LD_INT 7
54243: DOUBLE
54244: EQUAL
54245: IFTRUE 54291
54247: LD_INT 8
54249: DOUBLE
54250: EQUAL
54251: IFTRUE 54291
54253: LD_INT 13
54255: DOUBLE
54256: EQUAL
54257: IFTRUE 54291
54259: LD_INT 12
54261: DOUBLE
54262: EQUAL
54263: IFTRUE 54291
54265: LD_INT 15
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54291
54271: LD_INT 11
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54291
54277: LD_INT 14
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54291
54283: LD_INT 10
54285: DOUBLE
54286: EQUAL
54287: IFTRUE 54291
54289: GO 54347
54291: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54292: LD_ADDR_VAR 0 9
54296: PUSH
54297: LD_VAR 0 41
54301: PUSH
54302: LD_VAR 0 42
54306: PUSH
54307: LD_VAR 0 43
54311: PUSH
54312: LD_VAR 0 44
54316: PUSH
54317: LD_VAR 0 45
54321: PUSH
54322: LD_VAR 0 46
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: PUSH
54335: LD_VAR 0 4
54339: PUSH
54340: LD_INT 1
54342: PLUS
54343: ARRAY
54344: ST_TO_ADDR
54345: GO 54600
54347: LD_INT 36
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54355
54353: GO 54411
54355: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54356: LD_ADDR_VAR 0 9
54360: PUSH
54361: LD_VAR 0 47
54365: PUSH
54366: LD_VAR 0 48
54370: PUSH
54371: LD_VAR 0 49
54375: PUSH
54376: LD_VAR 0 50
54380: PUSH
54381: LD_VAR 0 51
54385: PUSH
54386: LD_VAR 0 52
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 4
54403: PUSH
54404: LD_INT 1
54406: PLUS
54407: ARRAY
54408: ST_TO_ADDR
54409: GO 54600
54411: LD_INT 4
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54437
54417: LD_INT 5
54419: DOUBLE
54420: EQUAL
54421: IFTRUE 54437
54423: LD_INT 34
54425: DOUBLE
54426: EQUAL
54427: IFTRUE 54437
54429: LD_INT 37
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54437
54435: GO 54493
54437: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54438: LD_ADDR_VAR 0 9
54442: PUSH
54443: LD_VAR 0 53
54447: PUSH
54448: LD_VAR 0 54
54452: PUSH
54453: LD_VAR 0 55
54457: PUSH
54458: LD_VAR 0 56
54462: PUSH
54463: LD_VAR 0 57
54467: PUSH
54468: LD_VAR 0 58
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: PUSH
54481: LD_VAR 0 4
54485: PUSH
54486: LD_INT 1
54488: PLUS
54489: ARRAY
54490: ST_TO_ADDR
54491: GO 54600
54493: LD_INT 31
54495: DOUBLE
54496: EQUAL
54497: IFTRUE 54543
54499: LD_INT 32
54501: DOUBLE
54502: EQUAL
54503: IFTRUE 54543
54505: LD_INT 33
54507: DOUBLE
54508: EQUAL
54509: IFTRUE 54543
54511: LD_INT 27
54513: DOUBLE
54514: EQUAL
54515: IFTRUE 54543
54517: LD_INT 26
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54543
54523: LD_INT 28
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54543
54529: LD_INT 29
54531: DOUBLE
54532: EQUAL
54533: IFTRUE 54543
54535: LD_INT 30
54537: DOUBLE
54538: EQUAL
54539: IFTRUE 54543
54541: GO 54599
54543: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54544: LD_ADDR_VAR 0 9
54548: PUSH
54549: LD_VAR 0 59
54553: PUSH
54554: LD_VAR 0 60
54558: PUSH
54559: LD_VAR 0 61
54563: PUSH
54564: LD_VAR 0 62
54568: PUSH
54569: LD_VAR 0 63
54573: PUSH
54574: LD_VAR 0 64
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: PUSH
54587: LD_VAR 0 4
54591: PUSH
54592: LD_INT 1
54594: PLUS
54595: ARRAY
54596: ST_TO_ADDR
54597: GO 54600
54599: POP
// temp_list2 = [ ] ;
54600: LD_ADDR_VAR 0 10
54604: PUSH
54605: EMPTY
54606: ST_TO_ADDR
// for i in temp_list do
54607: LD_ADDR_VAR 0 8
54611: PUSH
54612: LD_VAR 0 9
54616: PUSH
54617: FOR_IN
54618: IFFALSE 54670
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54620: LD_ADDR_VAR 0 10
54624: PUSH
54625: LD_VAR 0 10
54629: PUSH
54630: LD_VAR 0 8
54634: PUSH
54635: LD_INT 1
54637: ARRAY
54638: PUSH
54639: LD_VAR 0 2
54643: PLUS
54644: PUSH
54645: LD_VAR 0 8
54649: PUSH
54650: LD_INT 2
54652: ARRAY
54653: PUSH
54654: LD_VAR 0 3
54658: PLUS
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: ADD
54667: ST_TO_ADDR
54668: GO 54617
54670: POP
54671: POP
// result = temp_list2 ;
54672: LD_ADDR_VAR 0 7
54676: PUSH
54677: LD_VAR 0 10
54681: ST_TO_ADDR
// end ;
54682: LD_VAR 0 7
54686: RET
// export function EnemyInRange ( unit , dist ) ; begin
54687: LD_INT 0
54689: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54690: LD_ADDR_VAR 0 3
54694: PUSH
54695: LD_VAR 0 1
54699: PPUSH
54700: CALL_OW 255
54704: PPUSH
54705: LD_VAR 0 1
54709: PPUSH
54710: CALL_OW 250
54714: PPUSH
54715: LD_VAR 0 1
54719: PPUSH
54720: CALL_OW 251
54724: PPUSH
54725: LD_VAR 0 2
54729: PPUSH
54730: CALL 28089 0 4
54734: PUSH
54735: LD_INT 4
54737: ARRAY
54738: ST_TO_ADDR
// end ;
54739: LD_VAR 0 3
54743: RET
// export function PlayerSeeMe ( unit ) ; begin
54744: LD_INT 0
54746: PPUSH
// result := See ( your_side , unit ) ;
54747: LD_ADDR_VAR 0 2
54751: PUSH
54752: LD_OWVAR 2
54756: PPUSH
54757: LD_VAR 0 1
54761: PPUSH
54762: CALL_OW 292
54766: ST_TO_ADDR
// end ;
54767: LD_VAR 0 2
54771: RET
// export function ReverseDir ( unit ) ; begin
54772: LD_INT 0
54774: PPUSH
// if not unit then
54775: LD_VAR 0 1
54779: NOT
54780: IFFALSE 54784
// exit ;
54782: GO 54807
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54784: LD_ADDR_VAR 0 2
54788: PUSH
54789: LD_VAR 0 1
54793: PPUSH
54794: CALL_OW 254
54798: PUSH
54799: LD_INT 3
54801: PLUS
54802: PUSH
54803: LD_INT 6
54805: MOD
54806: ST_TO_ADDR
// end ;
54807: LD_VAR 0 2
54811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54812: LD_INT 0
54814: PPUSH
54815: PPUSH
54816: PPUSH
54817: PPUSH
54818: PPUSH
54819: PPUSH
// if not unit or not hexes then
54820: LD_VAR 0 1
54824: NOT
54825: PUSH
54826: LD_VAR 0 2
54830: NOT
54831: OR
54832: IFFALSE 54836
// exit ;
54834: GO 54959
// dist := 9999 ;
54836: LD_ADDR_VAR 0 5
54840: PUSH
54841: LD_INT 9999
54843: ST_TO_ADDR
// for i = 1 to hexes do
54844: LD_ADDR_VAR 0 4
54848: PUSH
54849: DOUBLE
54850: LD_INT 1
54852: DEC
54853: ST_TO_ADDR
54854: LD_VAR 0 2
54858: PUSH
54859: FOR_TO
54860: IFFALSE 54947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54862: LD_ADDR_VAR 0 6
54866: PUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: LD_VAR 0 2
54876: PUSH
54877: LD_VAR 0 4
54881: ARRAY
54882: PUSH
54883: LD_INT 1
54885: ARRAY
54886: PPUSH
54887: LD_VAR 0 2
54891: PUSH
54892: LD_VAR 0 4
54896: ARRAY
54897: PUSH
54898: LD_INT 2
54900: ARRAY
54901: PPUSH
54902: CALL_OW 297
54906: ST_TO_ADDR
// if tdist < dist then
54907: LD_VAR 0 6
54911: PUSH
54912: LD_VAR 0 5
54916: LESS
54917: IFFALSE 54945
// begin hex := hexes [ i ] ;
54919: LD_ADDR_VAR 0 8
54923: PUSH
54924: LD_VAR 0 2
54928: PUSH
54929: LD_VAR 0 4
54933: ARRAY
54934: ST_TO_ADDR
// dist := tdist ;
54935: LD_ADDR_VAR 0 5
54939: PUSH
54940: LD_VAR 0 6
54944: ST_TO_ADDR
// end ; end ;
54945: GO 54859
54947: POP
54948: POP
// result := hex ;
54949: LD_ADDR_VAR 0 3
54953: PUSH
54954: LD_VAR 0 8
54958: ST_TO_ADDR
// end ;
54959: LD_VAR 0 3
54963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54964: LD_INT 0
54966: PPUSH
54967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54968: LD_VAR 0 1
54972: NOT
54973: PUSH
54974: LD_VAR 0 1
54978: PUSH
54979: LD_INT 21
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 23
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PPUSH
55003: CALL_OW 69
55007: IN
55008: NOT
55009: OR
55010: IFFALSE 55014
// exit ;
55012: GO 55061
// for i = 1 to 3 do
55014: LD_ADDR_VAR 0 3
55018: PUSH
55019: DOUBLE
55020: LD_INT 1
55022: DEC
55023: ST_TO_ADDR
55024: LD_INT 3
55026: PUSH
55027: FOR_TO
55028: IFFALSE 55059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55030: LD_VAR 0 1
55034: PPUSH
55035: CALL_OW 250
55039: PPUSH
55040: LD_VAR 0 1
55044: PPUSH
55045: CALL_OW 251
55049: PPUSH
55050: LD_INT 1
55052: PPUSH
55053: CALL_OW 453
55057: GO 55027
55059: POP
55060: POP
// end ;
55061: LD_VAR 0 2
55065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55066: LD_INT 0
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55074: LD_VAR 0 1
55078: NOT
55079: PUSH
55080: LD_VAR 0 2
55084: NOT
55085: OR
55086: PUSH
55087: LD_VAR 0 1
55091: PPUSH
55092: CALL_OW 314
55096: OR
55097: IFFALSE 55101
// exit ;
55099: GO 55542
// x := GetX ( enemy_unit ) ;
55101: LD_ADDR_VAR 0 7
55105: PUSH
55106: LD_VAR 0 2
55110: PPUSH
55111: CALL_OW 250
55115: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55116: LD_ADDR_VAR 0 8
55120: PUSH
55121: LD_VAR 0 2
55125: PPUSH
55126: CALL_OW 251
55130: ST_TO_ADDR
// if not x or not y then
55131: LD_VAR 0 7
55135: NOT
55136: PUSH
55137: LD_VAR 0 8
55141: NOT
55142: OR
55143: IFFALSE 55147
// exit ;
55145: GO 55542
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55147: LD_ADDR_VAR 0 6
55151: PUSH
55152: LD_VAR 0 7
55156: PPUSH
55157: LD_INT 0
55159: PPUSH
55160: LD_INT 4
55162: PPUSH
55163: CALL_OW 272
55167: PUSH
55168: LD_VAR 0 8
55172: PPUSH
55173: LD_INT 0
55175: PPUSH
55176: LD_INT 4
55178: PPUSH
55179: CALL_OW 273
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_VAR 0 7
55192: PPUSH
55193: LD_INT 1
55195: PPUSH
55196: LD_INT 4
55198: PPUSH
55199: CALL_OW 272
55203: PUSH
55204: LD_VAR 0 8
55208: PPUSH
55209: LD_INT 1
55211: PPUSH
55212: LD_INT 4
55214: PPUSH
55215: CALL_OW 273
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_VAR 0 7
55228: PPUSH
55229: LD_INT 2
55231: PPUSH
55232: LD_INT 4
55234: PPUSH
55235: CALL_OW 272
55239: PUSH
55240: LD_VAR 0 8
55244: PPUSH
55245: LD_INT 2
55247: PPUSH
55248: LD_INT 4
55250: PPUSH
55251: CALL_OW 273
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_VAR 0 7
55264: PPUSH
55265: LD_INT 3
55267: PPUSH
55268: LD_INT 4
55270: PPUSH
55271: CALL_OW 272
55275: PUSH
55276: LD_VAR 0 8
55280: PPUSH
55281: LD_INT 3
55283: PPUSH
55284: LD_INT 4
55286: PPUSH
55287: CALL_OW 273
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_VAR 0 7
55300: PPUSH
55301: LD_INT 4
55303: PPUSH
55304: LD_INT 4
55306: PPUSH
55307: CALL_OW 272
55311: PUSH
55312: LD_VAR 0 8
55316: PPUSH
55317: LD_INT 4
55319: PPUSH
55320: LD_INT 4
55322: PPUSH
55323: CALL_OW 273
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_VAR 0 7
55336: PPUSH
55337: LD_INT 5
55339: PPUSH
55340: LD_INT 4
55342: PPUSH
55343: CALL_OW 272
55347: PUSH
55348: LD_VAR 0 8
55352: PPUSH
55353: LD_INT 5
55355: PPUSH
55356: LD_INT 4
55358: PPUSH
55359: CALL_OW 273
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// for i = tmp downto 1 do
55376: LD_ADDR_VAR 0 4
55380: PUSH
55381: DOUBLE
55382: LD_VAR 0 6
55386: INC
55387: ST_TO_ADDR
55388: LD_INT 1
55390: PUSH
55391: FOR_DOWNTO
55392: IFFALSE 55493
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55394: LD_VAR 0 6
55398: PUSH
55399: LD_VAR 0 4
55403: ARRAY
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: PPUSH
55409: LD_VAR 0 6
55413: PUSH
55414: LD_VAR 0 4
55418: ARRAY
55419: PUSH
55420: LD_INT 2
55422: ARRAY
55423: PPUSH
55424: CALL_OW 488
55428: NOT
55429: PUSH
55430: LD_VAR 0 6
55434: PUSH
55435: LD_VAR 0 4
55439: ARRAY
55440: PUSH
55441: LD_INT 1
55443: ARRAY
55444: PPUSH
55445: LD_VAR 0 6
55449: PUSH
55450: LD_VAR 0 4
55454: ARRAY
55455: PUSH
55456: LD_INT 2
55458: ARRAY
55459: PPUSH
55460: CALL_OW 428
55464: PUSH
55465: LD_INT 0
55467: NONEQUAL
55468: OR
55469: IFFALSE 55491
// tmp := Delete ( tmp , i ) ;
55471: LD_ADDR_VAR 0 6
55475: PUSH
55476: LD_VAR 0 6
55480: PPUSH
55481: LD_VAR 0 4
55485: PPUSH
55486: CALL_OW 3
55490: ST_TO_ADDR
55491: GO 55391
55493: POP
55494: POP
// j := GetClosestHex ( unit , tmp ) ;
55495: LD_ADDR_VAR 0 5
55499: PUSH
55500: LD_VAR 0 1
55504: PPUSH
55505: LD_VAR 0 6
55509: PPUSH
55510: CALL 54812 0 2
55514: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55515: LD_VAR 0 1
55519: PPUSH
55520: LD_VAR 0 5
55524: PUSH
55525: LD_INT 1
55527: ARRAY
55528: PPUSH
55529: LD_VAR 0 5
55533: PUSH
55534: LD_INT 2
55536: ARRAY
55537: PPUSH
55538: CALL_OW 111
// end ;
55542: LD_VAR 0 3
55546: RET
// export function PrepareApemanSoldier ( ) ; begin
55547: LD_INT 0
55549: PPUSH
// uc_nation := 0 ;
55550: LD_ADDR_OWVAR 21
55554: PUSH
55555: LD_INT 0
55557: ST_TO_ADDR
// hc_sex := sex_male ;
55558: LD_ADDR_OWVAR 27
55562: PUSH
55563: LD_INT 1
55565: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55566: LD_ADDR_OWVAR 28
55570: PUSH
55571: LD_INT 15
55573: ST_TO_ADDR
// hc_gallery :=  ;
55574: LD_ADDR_OWVAR 33
55578: PUSH
55579: LD_STRING 
55581: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55582: LD_ADDR_OWVAR 31
55586: PUSH
55587: LD_INT 0
55589: PPUSH
55590: LD_INT 3
55592: PPUSH
55593: CALL_OW 12
55597: PUSH
55598: LD_INT 0
55600: PPUSH
55601: LD_INT 3
55603: PPUSH
55604: CALL_OW 12
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: ST_TO_ADDR
// end ;
55621: LD_VAR 0 1
55625: RET
// export function PrepareApemanEngineer ( ) ; begin
55626: LD_INT 0
55628: PPUSH
// uc_nation := 0 ;
55629: LD_ADDR_OWVAR 21
55633: PUSH
55634: LD_INT 0
55636: ST_TO_ADDR
// hc_sex := sex_male ;
55637: LD_ADDR_OWVAR 27
55641: PUSH
55642: LD_INT 1
55644: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55645: LD_ADDR_OWVAR 28
55649: PUSH
55650: LD_INT 16
55652: ST_TO_ADDR
// hc_gallery :=  ;
55653: LD_ADDR_OWVAR 33
55657: PUSH
55658: LD_STRING 
55660: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55661: LD_ADDR_OWVAR 31
55665: PUSH
55666: LD_INT 0
55668: PPUSH
55669: LD_INT 3
55671: PPUSH
55672: CALL_OW 12
55676: PUSH
55677: LD_INT 0
55679: PPUSH
55680: LD_INT 3
55682: PPUSH
55683: CALL_OW 12
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// end ;
55700: LD_VAR 0 1
55704: RET
// export function PrepareApeman ( agressivity ) ; begin
55705: LD_INT 0
55707: PPUSH
// uc_side := 0 ;
55708: LD_ADDR_OWVAR 20
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// uc_nation := 0 ;
55716: LD_ADDR_OWVAR 21
55720: PUSH
55721: LD_INT 0
55723: ST_TO_ADDR
// hc_sex := sex_male ;
55724: LD_ADDR_OWVAR 27
55728: PUSH
55729: LD_INT 1
55731: ST_TO_ADDR
// hc_class := class_apeman ;
55732: LD_ADDR_OWVAR 28
55736: PUSH
55737: LD_INT 12
55739: ST_TO_ADDR
// hc_gallery :=  ;
55740: LD_ADDR_OWVAR 33
55744: PUSH
55745: LD_STRING 
55747: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55748: LD_ADDR_OWVAR 35
55752: PUSH
55753: LD_VAR 0 1
55757: NEG
55758: PPUSH
55759: LD_VAR 0 1
55763: PPUSH
55764: CALL_OW 12
55768: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55769: LD_ADDR_OWVAR 31
55773: PUSH
55774: LD_INT 0
55776: PPUSH
55777: LD_INT 3
55779: PPUSH
55780: CALL_OW 12
55784: PUSH
55785: LD_INT 0
55787: PPUSH
55788: LD_INT 3
55790: PPUSH
55791: CALL_OW 12
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// end ;
55808: LD_VAR 0 2
55812: RET
// export function PrepareTiger ( agressivity ) ; begin
55813: LD_INT 0
55815: PPUSH
// uc_side := 0 ;
55816: LD_ADDR_OWVAR 20
55820: PUSH
55821: LD_INT 0
55823: ST_TO_ADDR
// uc_nation := 0 ;
55824: LD_ADDR_OWVAR 21
55828: PUSH
55829: LD_INT 0
55831: ST_TO_ADDR
// hc_class := class_tiger ;
55832: LD_ADDR_OWVAR 28
55836: PUSH
55837: LD_INT 14
55839: ST_TO_ADDR
// hc_gallery :=  ;
55840: LD_ADDR_OWVAR 33
55844: PUSH
55845: LD_STRING 
55847: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55848: LD_ADDR_OWVAR 35
55852: PUSH
55853: LD_VAR 0 1
55857: NEG
55858: PPUSH
55859: LD_VAR 0 1
55863: PPUSH
55864: CALL_OW 12
55868: ST_TO_ADDR
// end ;
55869: LD_VAR 0 2
55873: RET
// export function PrepareEnchidna ( ) ; begin
55874: LD_INT 0
55876: PPUSH
// uc_side := 0 ;
55877: LD_ADDR_OWVAR 20
55881: PUSH
55882: LD_INT 0
55884: ST_TO_ADDR
// uc_nation := 0 ;
55885: LD_ADDR_OWVAR 21
55889: PUSH
55890: LD_INT 0
55892: ST_TO_ADDR
// hc_class := class_baggie ;
55893: LD_ADDR_OWVAR 28
55897: PUSH
55898: LD_INT 13
55900: ST_TO_ADDR
// hc_gallery :=  ;
55901: LD_ADDR_OWVAR 33
55905: PUSH
55906: LD_STRING 
55908: ST_TO_ADDR
// end ;
55909: LD_VAR 0 1
55913: RET
// export function PrepareFrog ( ) ; begin
55914: LD_INT 0
55916: PPUSH
// uc_side := 0 ;
55917: LD_ADDR_OWVAR 20
55921: PUSH
55922: LD_INT 0
55924: ST_TO_ADDR
// uc_nation := 0 ;
55925: LD_ADDR_OWVAR 21
55929: PUSH
55930: LD_INT 0
55932: ST_TO_ADDR
// hc_class := class_frog ;
55933: LD_ADDR_OWVAR 28
55937: PUSH
55938: LD_INT 19
55940: ST_TO_ADDR
// hc_gallery :=  ;
55941: LD_ADDR_OWVAR 33
55945: PUSH
55946: LD_STRING 
55948: ST_TO_ADDR
// end ;
55949: LD_VAR 0 1
55953: RET
// export function PrepareFish ( ) ; begin
55954: LD_INT 0
55956: PPUSH
// uc_side := 0 ;
55957: LD_ADDR_OWVAR 20
55961: PUSH
55962: LD_INT 0
55964: ST_TO_ADDR
// uc_nation := 0 ;
55965: LD_ADDR_OWVAR 21
55969: PUSH
55970: LD_INT 0
55972: ST_TO_ADDR
// hc_class := class_fish ;
55973: LD_ADDR_OWVAR 28
55977: PUSH
55978: LD_INT 20
55980: ST_TO_ADDR
// hc_gallery :=  ;
55981: LD_ADDR_OWVAR 33
55985: PUSH
55986: LD_STRING 
55988: ST_TO_ADDR
// end ;
55989: LD_VAR 0 1
55993: RET
// export function PrepareBird ( ) ; begin
55994: LD_INT 0
55996: PPUSH
// uc_side := 0 ;
55997: LD_ADDR_OWVAR 20
56001: PUSH
56002: LD_INT 0
56004: ST_TO_ADDR
// uc_nation := 0 ;
56005: LD_ADDR_OWVAR 21
56009: PUSH
56010: LD_INT 0
56012: ST_TO_ADDR
// hc_class := class_phororhacos ;
56013: LD_ADDR_OWVAR 28
56017: PUSH
56018: LD_INT 18
56020: ST_TO_ADDR
// hc_gallery :=  ;
56021: LD_ADDR_OWVAR 33
56025: PUSH
56026: LD_STRING 
56028: ST_TO_ADDR
// end ;
56029: LD_VAR 0 1
56033: RET
// export function PrepareHorse ( ) ; begin
56034: LD_INT 0
56036: PPUSH
// uc_side := 0 ;
56037: LD_ADDR_OWVAR 20
56041: PUSH
56042: LD_INT 0
56044: ST_TO_ADDR
// uc_nation := 0 ;
56045: LD_ADDR_OWVAR 21
56049: PUSH
56050: LD_INT 0
56052: ST_TO_ADDR
// hc_class := class_horse ;
56053: LD_ADDR_OWVAR 28
56057: PUSH
56058: LD_INT 21
56060: ST_TO_ADDR
// hc_gallery :=  ;
56061: LD_ADDR_OWVAR 33
56065: PUSH
56066: LD_STRING 
56068: ST_TO_ADDR
// end ;
56069: LD_VAR 0 1
56073: RET
// export function PrepareMastodont ( ) ; begin
56074: LD_INT 0
56076: PPUSH
// uc_side := 0 ;
56077: LD_ADDR_OWVAR 20
56081: PUSH
56082: LD_INT 0
56084: ST_TO_ADDR
// uc_nation := 0 ;
56085: LD_ADDR_OWVAR 21
56089: PUSH
56090: LD_INT 0
56092: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56093: LD_ADDR_OWVAR 37
56097: PUSH
56098: LD_INT 31
56100: ST_TO_ADDR
// vc_control := control_rider ;
56101: LD_ADDR_OWVAR 38
56105: PUSH
56106: LD_INT 4
56108: ST_TO_ADDR
// end ;
56109: LD_VAR 0 1
56113: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56114: LD_INT 0
56116: PPUSH
56117: PPUSH
56118: PPUSH
// uc_side = 0 ;
56119: LD_ADDR_OWVAR 20
56123: PUSH
56124: LD_INT 0
56126: ST_TO_ADDR
// uc_nation = 0 ;
56127: LD_ADDR_OWVAR 21
56131: PUSH
56132: LD_INT 0
56134: ST_TO_ADDR
// InitHc_All ( ) ;
56135: CALL_OW 584
// InitVc ;
56139: CALL_OW 20
// if mastodonts then
56143: LD_VAR 0 6
56147: IFFALSE 56214
// for i = 1 to mastodonts do
56149: LD_ADDR_VAR 0 11
56153: PUSH
56154: DOUBLE
56155: LD_INT 1
56157: DEC
56158: ST_TO_ADDR
56159: LD_VAR 0 6
56163: PUSH
56164: FOR_TO
56165: IFFALSE 56212
// begin vc_chassis := 31 ;
56167: LD_ADDR_OWVAR 37
56171: PUSH
56172: LD_INT 31
56174: ST_TO_ADDR
// vc_control := control_rider ;
56175: LD_ADDR_OWVAR 38
56179: PUSH
56180: LD_INT 4
56182: ST_TO_ADDR
// animal := CreateVehicle ;
56183: LD_ADDR_VAR 0 12
56187: PUSH
56188: CALL_OW 45
56192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56193: LD_VAR 0 12
56197: PPUSH
56198: LD_VAR 0 8
56202: PPUSH
56203: LD_INT 0
56205: PPUSH
56206: CALL 58349 0 3
// end ;
56210: GO 56164
56212: POP
56213: POP
// if horses then
56214: LD_VAR 0 5
56218: IFFALSE 56285
// for i = 1 to horses do
56220: LD_ADDR_VAR 0 11
56224: PUSH
56225: DOUBLE
56226: LD_INT 1
56228: DEC
56229: ST_TO_ADDR
56230: LD_VAR 0 5
56234: PUSH
56235: FOR_TO
56236: IFFALSE 56283
// begin hc_class := 21 ;
56238: LD_ADDR_OWVAR 28
56242: PUSH
56243: LD_INT 21
56245: ST_TO_ADDR
// hc_gallery :=  ;
56246: LD_ADDR_OWVAR 33
56250: PUSH
56251: LD_STRING 
56253: ST_TO_ADDR
// animal := CreateHuman ;
56254: LD_ADDR_VAR 0 12
56258: PUSH
56259: CALL_OW 44
56263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56264: LD_VAR 0 12
56268: PPUSH
56269: LD_VAR 0 8
56273: PPUSH
56274: LD_INT 0
56276: PPUSH
56277: CALL 58349 0 3
// end ;
56281: GO 56235
56283: POP
56284: POP
// if birds then
56285: LD_VAR 0 1
56289: IFFALSE 56356
// for i = 1 to birds do
56291: LD_ADDR_VAR 0 11
56295: PUSH
56296: DOUBLE
56297: LD_INT 1
56299: DEC
56300: ST_TO_ADDR
56301: LD_VAR 0 1
56305: PUSH
56306: FOR_TO
56307: IFFALSE 56354
// begin hc_class = 18 ;
56309: LD_ADDR_OWVAR 28
56313: PUSH
56314: LD_INT 18
56316: ST_TO_ADDR
// hc_gallery =  ;
56317: LD_ADDR_OWVAR 33
56321: PUSH
56322: LD_STRING 
56324: ST_TO_ADDR
// animal := CreateHuman ;
56325: LD_ADDR_VAR 0 12
56329: PUSH
56330: CALL_OW 44
56334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56335: LD_VAR 0 12
56339: PPUSH
56340: LD_VAR 0 8
56344: PPUSH
56345: LD_INT 0
56347: PPUSH
56348: CALL 58349 0 3
// end ;
56352: GO 56306
56354: POP
56355: POP
// if tigers then
56356: LD_VAR 0 2
56360: IFFALSE 56444
// for i = 1 to tigers do
56362: LD_ADDR_VAR 0 11
56366: PUSH
56367: DOUBLE
56368: LD_INT 1
56370: DEC
56371: ST_TO_ADDR
56372: LD_VAR 0 2
56376: PUSH
56377: FOR_TO
56378: IFFALSE 56442
// begin hc_class = class_tiger ;
56380: LD_ADDR_OWVAR 28
56384: PUSH
56385: LD_INT 14
56387: ST_TO_ADDR
// hc_gallery =  ;
56388: LD_ADDR_OWVAR 33
56392: PUSH
56393: LD_STRING 
56395: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56396: LD_ADDR_OWVAR 35
56400: PUSH
56401: LD_INT 7
56403: NEG
56404: PPUSH
56405: LD_INT 7
56407: PPUSH
56408: CALL_OW 12
56412: ST_TO_ADDR
// animal := CreateHuman ;
56413: LD_ADDR_VAR 0 12
56417: PUSH
56418: CALL_OW 44
56422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56423: LD_VAR 0 12
56427: PPUSH
56428: LD_VAR 0 8
56432: PPUSH
56433: LD_INT 0
56435: PPUSH
56436: CALL 58349 0 3
// end ;
56440: GO 56377
56442: POP
56443: POP
// if apemans then
56444: LD_VAR 0 3
56448: IFFALSE 56571
// for i = 1 to apemans do
56450: LD_ADDR_VAR 0 11
56454: PUSH
56455: DOUBLE
56456: LD_INT 1
56458: DEC
56459: ST_TO_ADDR
56460: LD_VAR 0 3
56464: PUSH
56465: FOR_TO
56466: IFFALSE 56569
// begin hc_class = class_apeman ;
56468: LD_ADDR_OWVAR 28
56472: PUSH
56473: LD_INT 12
56475: ST_TO_ADDR
// hc_gallery =  ;
56476: LD_ADDR_OWVAR 33
56480: PUSH
56481: LD_STRING 
56483: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56484: LD_ADDR_OWVAR 35
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PPUSH
56493: LD_INT 2
56495: PPUSH
56496: CALL_OW 12
56500: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56501: LD_ADDR_OWVAR 31
56505: PUSH
56506: LD_INT 1
56508: PPUSH
56509: LD_INT 3
56511: PPUSH
56512: CALL_OW 12
56516: PUSH
56517: LD_INT 1
56519: PPUSH
56520: LD_INT 3
56522: PPUSH
56523: CALL_OW 12
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// animal := CreateHuman ;
56540: LD_ADDR_VAR 0 12
56544: PUSH
56545: CALL_OW 44
56549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56550: LD_VAR 0 12
56554: PPUSH
56555: LD_VAR 0 8
56559: PPUSH
56560: LD_INT 0
56562: PPUSH
56563: CALL 58349 0 3
// end ;
56567: GO 56465
56569: POP
56570: POP
// if enchidnas then
56571: LD_VAR 0 4
56575: IFFALSE 56642
// for i = 1 to enchidnas do
56577: LD_ADDR_VAR 0 11
56581: PUSH
56582: DOUBLE
56583: LD_INT 1
56585: DEC
56586: ST_TO_ADDR
56587: LD_VAR 0 4
56591: PUSH
56592: FOR_TO
56593: IFFALSE 56640
// begin hc_class = 13 ;
56595: LD_ADDR_OWVAR 28
56599: PUSH
56600: LD_INT 13
56602: ST_TO_ADDR
// hc_gallery =  ;
56603: LD_ADDR_OWVAR 33
56607: PUSH
56608: LD_STRING 
56610: ST_TO_ADDR
// animal := CreateHuman ;
56611: LD_ADDR_VAR 0 12
56615: PUSH
56616: CALL_OW 44
56620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56621: LD_VAR 0 12
56625: PPUSH
56626: LD_VAR 0 8
56630: PPUSH
56631: LD_INT 0
56633: PPUSH
56634: CALL 58349 0 3
// end ;
56638: GO 56592
56640: POP
56641: POP
// if fishes then
56642: LD_VAR 0 7
56646: IFFALSE 56713
// for i = 1 to fishes do
56648: LD_ADDR_VAR 0 11
56652: PUSH
56653: DOUBLE
56654: LD_INT 1
56656: DEC
56657: ST_TO_ADDR
56658: LD_VAR 0 7
56662: PUSH
56663: FOR_TO
56664: IFFALSE 56711
// begin hc_class = 20 ;
56666: LD_ADDR_OWVAR 28
56670: PUSH
56671: LD_INT 20
56673: ST_TO_ADDR
// hc_gallery =  ;
56674: LD_ADDR_OWVAR 33
56678: PUSH
56679: LD_STRING 
56681: ST_TO_ADDR
// animal := CreateHuman ;
56682: LD_ADDR_VAR 0 12
56686: PUSH
56687: CALL_OW 44
56691: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56692: LD_VAR 0 12
56696: PPUSH
56697: LD_VAR 0 9
56701: PPUSH
56702: LD_INT 0
56704: PPUSH
56705: CALL 58349 0 3
// end ;
56709: GO 56663
56711: POP
56712: POP
// end ;
56713: LD_VAR 0 10
56717: RET
// export function WantHeal ( sci , unit ) ; begin
56718: LD_INT 0
56720: PPUSH
// if GetTaskList ( sci ) > 0 then
56721: LD_VAR 0 1
56725: PPUSH
56726: CALL_OW 437
56730: PUSH
56731: LD_INT 0
56733: GREATER
56734: IFFALSE 56804
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56736: LD_VAR 0 1
56740: PPUSH
56741: CALL_OW 437
56745: PUSH
56746: LD_INT 1
56748: ARRAY
56749: PUSH
56750: LD_INT 1
56752: ARRAY
56753: PUSH
56754: LD_STRING l
56756: EQUAL
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: CALL_OW 437
56767: PUSH
56768: LD_INT 1
56770: ARRAY
56771: PUSH
56772: LD_INT 4
56774: ARRAY
56775: PUSH
56776: LD_VAR 0 2
56780: EQUAL
56781: AND
56782: IFFALSE 56794
// result := true else
56784: LD_ADDR_VAR 0 3
56788: PUSH
56789: LD_INT 1
56791: ST_TO_ADDR
56792: GO 56802
// result := false ;
56794: LD_ADDR_VAR 0 3
56798: PUSH
56799: LD_INT 0
56801: ST_TO_ADDR
// end else
56802: GO 56812
// result := false ;
56804: LD_ADDR_VAR 0 3
56808: PUSH
56809: LD_INT 0
56811: ST_TO_ADDR
// end ;
56812: LD_VAR 0 3
56816: RET
// export function HealTarget ( sci ) ; begin
56817: LD_INT 0
56819: PPUSH
// if not sci then
56820: LD_VAR 0 1
56824: NOT
56825: IFFALSE 56829
// exit ;
56827: GO 56894
// result := 0 ;
56829: LD_ADDR_VAR 0 2
56833: PUSH
56834: LD_INT 0
56836: ST_TO_ADDR
// if GetTaskList ( sci ) then
56837: LD_VAR 0 1
56841: PPUSH
56842: CALL_OW 437
56846: IFFALSE 56894
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56848: LD_VAR 0 1
56852: PPUSH
56853: CALL_OW 437
56857: PUSH
56858: LD_INT 1
56860: ARRAY
56861: PUSH
56862: LD_INT 1
56864: ARRAY
56865: PUSH
56866: LD_STRING l
56868: EQUAL
56869: IFFALSE 56894
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56871: LD_ADDR_VAR 0 2
56875: PUSH
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 437
56885: PUSH
56886: LD_INT 1
56888: ARRAY
56889: PUSH
56890: LD_INT 4
56892: ARRAY
56893: ST_TO_ADDR
// end ;
56894: LD_VAR 0 2
56898: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56899: LD_INT 0
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
// if not base_units then
56905: LD_VAR 0 1
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 57001
// result := false ;
56914: LD_ADDR_VAR 0 2
56918: PUSH
56919: LD_INT 0
56921: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: LD_VAR 0 1
56931: PPUSH
56932: LD_INT 21
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PPUSH
56942: CALL_OW 72
56946: ST_TO_ADDR
// if not tmp then
56947: LD_VAR 0 5
56951: NOT
56952: IFFALSE 56956
// exit ;
56954: GO 57001
// for i in tmp do
56956: LD_ADDR_VAR 0 3
56960: PUSH
56961: LD_VAR 0 5
56965: PUSH
56966: FOR_IN
56967: IFFALSE 56999
// begin result := EnemyInRange ( i , 22 ) ;
56969: LD_ADDR_VAR 0 2
56973: PUSH
56974: LD_VAR 0 3
56978: PPUSH
56979: LD_INT 22
56981: PPUSH
56982: CALL 54687 0 2
56986: ST_TO_ADDR
// if result then
56987: LD_VAR 0 2
56991: IFFALSE 56997
// exit ;
56993: POP
56994: POP
56995: GO 57001
// end ;
56997: GO 56966
56999: POP
57000: POP
// end ;
57001: LD_VAR 0 2
57005: RET
// export function FilterByTag ( units , tag ) ; begin
57006: LD_INT 0
57008: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57009: LD_ADDR_VAR 0 3
57013: PUSH
57014: LD_VAR 0 1
57018: PPUSH
57019: LD_INT 120
57021: PUSH
57022: LD_VAR 0 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PPUSH
57031: CALL_OW 72
57035: ST_TO_ADDR
// end ;
57036: LD_VAR 0 3
57040: RET
// export function IsDriver ( un ) ; begin
57041: LD_INT 0
57043: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57044: LD_ADDR_VAR 0 2
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 55
57056: PUSH
57057: EMPTY
57058: LIST
57059: PPUSH
57060: CALL_OW 69
57064: IN
57065: ST_TO_ADDR
// end ;
57066: LD_VAR 0 2
57070: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57071: LD_INT 0
57073: PPUSH
57074: PPUSH
// list := [ ] ;
57075: LD_ADDR_VAR 0 5
57079: PUSH
57080: EMPTY
57081: ST_TO_ADDR
// case d of 0 :
57082: LD_VAR 0 3
57086: PUSH
57087: LD_INT 0
57089: DOUBLE
57090: EQUAL
57091: IFTRUE 57095
57093: GO 57228
57095: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57096: LD_ADDR_VAR 0 5
57100: PUSH
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 4
57108: MINUS
57109: PUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_INT 4
57117: MINUS
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: PUSH
57127: LD_VAR 0 1
57131: PUSH
57132: LD_INT 3
57134: MINUS
57135: PUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_VAR 0 1
57153: PUSH
57154: LD_INT 4
57156: PLUS
57157: PUSH
57158: LD_VAR 0 2
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: PUSH
57171: LD_VAR 0 1
57175: PUSH
57176: LD_INT 3
57178: PLUS
57179: PUSH
57180: LD_VAR 0 2
57184: PUSH
57185: LD_INT 3
57187: PLUS
57188: PUSH
57189: LD_INT 5
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: PUSH
57197: LD_VAR 0 1
57201: PUSH
57202: LD_VAR 0 2
57206: PUSH
57207: LD_INT 4
57209: PLUS
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// end ; 1 :
57226: GO 57926
57228: LD_INT 1
57230: DOUBLE
57231: EQUAL
57232: IFTRUE 57236
57234: GO 57369
57236: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57237: LD_ADDR_VAR 0 5
57241: PUSH
57242: LD_VAR 0 1
57246: PUSH
57247: LD_VAR 0 2
57251: PUSH
57252: LD_INT 4
57254: MINUS
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: PUSH
57264: LD_VAR 0 1
57268: PUSH
57269: LD_INT 3
57271: MINUS
57272: PUSH
57273: LD_VAR 0 2
57277: PUSH
57278: LD_INT 3
57280: MINUS
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: PUSH
57290: LD_VAR 0 1
57294: PUSH
57295: LD_INT 4
57297: MINUS
57298: PUSH
57299: LD_VAR 0 2
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: PUSH
57312: LD_VAR 0 1
57316: PUSH
57317: LD_VAR 0 2
57321: PUSH
57322: LD_INT 3
57324: PLUS
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: PUSH
57334: LD_VAR 0 1
57338: PUSH
57339: LD_INT 4
57341: PLUS
57342: PUSH
57343: LD_VAR 0 2
57347: PUSH
57348: LD_INT 4
57350: PLUS
57351: PUSH
57352: LD_INT 5
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// end ; 2 :
57367: GO 57926
57369: LD_INT 2
57371: DOUBLE
57372: EQUAL
57373: IFTRUE 57377
57375: GO 57506
57377: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57378: LD_ADDR_VAR 0 5
57382: PUSH
57383: LD_VAR 0 1
57387: PUSH
57388: LD_VAR 0 2
57392: PUSH
57393: LD_INT 3
57395: MINUS
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: PUSH
57405: LD_VAR 0 1
57409: PUSH
57410: LD_INT 4
57412: PLUS
57413: PUSH
57414: LD_VAR 0 2
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: PUSH
57427: LD_VAR 0 1
57431: PUSH
57432: LD_VAR 0 2
57436: PUSH
57437: LD_INT 4
57439: PLUS
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: PUSH
57449: LD_VAR 0 1
57453: PUSH
57454: LD_INT 3
57456: MINUS
57457: PUSH
57458: LD_VAR 0 2
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 1
57475: PUSH
57476: LD_INT 4
57478: MINUS
57479: PUSH
57480: LD_VAR 0 2
57484: PUSH
57485: LD_INT 4
57487: MINUS
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// end ; 3 :
57504: GO 57926
57506: LD_INT 3
57508: DOUBLE
57509: EQUAL
57510: IFTRUE 57514
57512: GO 57647
57514: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57515: LD_ADDR_VAR 0 5
57519: PUSH
57520: LD_VAR 0 1
57524: PUSH
57525: LD_INT 3
57527: PLUS
57528: PUSH
57529: LD_VAR 0 2
57533: PUSH
57534: LD_INT 4
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: PUSH
57542: LD_VAR 0 1
57546: PUSH
57547: LD_INT 4
57549: PLUS
57550: PUSH
57551: LD_VAR 0 2
57555: PUSH
57556: LD_INT 4
57558: PLUS
57559: PUSH
57560: LD_INT 5
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: PUSH
57568: LD_VAR 0 1
57572: PUSH
57573: LD_INT 4
57575: MINUS
57576: PUSH
57577: LD_VAR 0 2
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: PUSH
57590: LD_VAR 0 1
57594: PUSH
57595: LD_VAR 0 2
57599: PUSH
57600: LD_INT 4
57602: MINUS
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: PUSH
57612: LD_VAR 0 1
57616: PUSH
57617: LD_INT 3
57619: MINUS
57620: PUSH
57621: LD_VAR 0 2
57625: PUSH
57626: LD_INT 3
57628: MINUS
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: ST_TO_ADDR
// end ; 4 :
57645: GO 57926
57647: LD_INT 4
57649: DOUBLE
57650: EQUAL
57651: IFTRUE 57655
57653: GO 57788
57655: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57656: LD_ADDR_VAR 0 5
57660: PUSH
57661: LD_VAR 0 1
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_INT 4
57673: PLUS
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: LD_VAR 0 1
57687: PUSH
57688: LD_INT 3
57690: PLUS
57691: PUSH
57692: LD_VAR 0 2
57696: PUSH
57697: LD_INT 3
57699: PLUS
57700: PUSH
57701: LD_INT 5
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: PUSH
57709: LD_VAR 0 1
57713: PUSH
57714: LD_INT 4
57716: PLUS
57717: PUSH
57718: LD_VAR 0 2
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: PUSH
57731: LD_VAR 0 1
57735: PUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_INT 3
57743: MINUS
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: PUSH
57753: LD_VAR 0 1
57757: PUSH
57758: LD_INT 4
57760: MINUS
57761: PUSH
57762: LD_VAR 0 2
57766: PUSH
57767: LD_INT 4
57769: MINUS
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// end ; 5 :
57786: GO 57926
57788: LD_INT 5
57790: DOUBLE
57791: EQUAL
57792: IFTRUE 57796
57794: GO 57925
57796: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57797: LD_ADDR_VAR 0 5
57801: PUSH
57802: LD_VAR 0 1
57806: PUSH
57807: LD_INT 4
57809: MINUS
57810: PUSH
57811: LD_VAR 0 2
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: PUSH
57824: LD_VAR 0 1
57828: PUSH
57829: LD_VAR 0 2
57833: PUSH
57834: LD_INT 4
57836: MINUS
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: PUSH
57846: LD_VAR 0 1
57850: PUSH
57851: LD_INT 4
57853: PLUS
57854: PUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_INT 4
57862: PLUS
57863: PUSH
57864: LD_INT 5
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: PUSH
57872: LD_VAR 0 1
57876: PUSH
57877: LD_INT 3
57879: PLUS
57880: PUSH
57881: LD_VAR 0 2
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: PUSH
57894: LD_VAR 0 1
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_INT 3
57906: PLUS
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// end ; end ;
57923: GO 57926
57925: POP
// result := list ;
57926: LD_ADDR_VAR 0 4
57930: PUSH
57931: LD_VAR 0 5
57935: ST_TO_ADDR
// end ;
57936: LD_VAR 0 4
57940: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57941: LD_INT 0
57943: PPUSH
57944: PPUSH
57945: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57946: LD_VAR 0 1
57950: NOT
57951: PUSH
57952: LD_VAR 0 2
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: LD_INT 4
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: IN
57975: NOT
57976: OR
57977: IFFALSE 57981
// exit ;
57979: GO 58073
// tmp := [ ] ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: EMPTY
57987: ST_TO_ADDR
// for i in units do
57988: LD_ADDR_VAR 0 4
57992: PUSH
57993: LD_VAR 0 1
57997: PUSH
57998: FOR_IN
57999: IFFALSE 58042
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58001: LD_ADDR_VAR 0 5
58005: PUSH
58006: LD_VAR 0 5
58010: PPUSH
58011: LD_VAR 0 5
58015: PUSH
58016: LD_INT 1
58018: PLUS
58019: PPUSH
58020: LD_VAR 0 4
58024: PPUSH
58025: LD_VAR 0 2
58029: PPUSH
58030: CALL_OW 259
58034: PPUSH
58035: CALL_OW 2
58039: ST_TO_ADDR
58040: GO 57998
58042: POP
58043: POP
// if not tmp then
58044: LD_VAR 0 5
58048: NOT
58049: IFFALSE 58053
// exit ;
58051: GO 58073
// result := SortListByListDesc ( units , tmp ) ;
58053: LD_ADDR_VAR 0 3
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: LD_VAR 0 5
58067: PPUSH
58068: CALL_OW 77
58072: ST_TO_ADDR
// end ;
58073: LD_VAR 0 3
58077: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58078: LD_INT 0
58080: PPUSH
58081: PPUSH
58082: PPUSH
// result := false ;
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// x := GetX ( building ) ;
58091: LD_ADDR_VAR 0 4
58095: PUSH
58096: LD_VAR 0 2
58100: PPUSH
58101: CALL_OW 250
58105: ST_TO_ADDR
// y := GetY ( building ) ;
58106: LD_ADDR_VAR 0 5
58110: PUSH
58111: LD_VAR 0 2
58115: PPUSH
58116: CALL_OW 251
58120: ST_TO_ADDR
// if not building or not x or not y then
58121: LD_VAR 0 2
58125: NOT
58126: PUSH
58127: LD_VAR 0 4
58131: NOT
58132: OR
58133: PUSH
58134: LD_VAR 0 5
58138: NOT
58139: OR
58140: IFFALSE 58144
// exit ;
58142: GO 58236
// if GetTaskList ( unit ) then
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 437
58153: IFFALSE 58236
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58155: LD_STRING e
58157: PUSH
58158: LD_VAR 0 1
58162: PPUSH
58163: CALL_OW 437
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: EQUAL
58176: PUSH
58177: LD_VAR 0 4
58181: PUSH
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL_OW 437
58191: PUSH
58192: LD_INT 1
58194: ARRAY
58195: PUSH
58196: LD_INT 2
58198: ARRAY
58199: EQUAL
58200: AND
58201: PUSH
58202: LD_VAR 0 5
58206: PUSH
58207: LD_VAR 0 1
58211: PPUSH
58212: CALL_OW 437
58216: PUSH
58217: LD_INT 1
58219: ARRAY
58220: PUSH
58221: LD_INT 3
58223: ARRAY
58224: EQUAL
58225: AND
58226: IFFALSE 58236
// result := true end ;
58228: LD_ADDR_VAR 0 3
58232: PUSH
58233: LD_INT 1
58235: ST_TO_ADDR
// end ;
58236: LD_VAR 0 3
58240: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58241: LD_INT 0
58243: PPUSH
// result := false ;
58244: LD_ADDR_VAR 0 4
58248: PUSH
58249: LD_INT 0
58251: ST_TO_ADDR
// if GetTaskList ( unit ) then
58252: LD_VAR 0 1
58256: PPUSH
58257: CALL_OW 437
58261: IFFALSE 58344
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58263: LD_STRING M
58265: PUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 437
58275: PUSH
58276: LD_INT 1
58278: ARRAY
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: EQUAL
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_VAR 0 1
58294: PPUSH
58295: CALL_OW 437
58299: PUSH
58300: LD_INT 1
58302: ARRAY
58303: PUSH
58304: LD_INT 2
58306: ARRAY
58307: EQUAL
58308: AND
58309: PUSH
58310: LD_VAR 0 3
58314: PUSH
58315: LD_VAR 0 1
58319: PPUSH
58320: CALL_OW 437
58324: PUSH
58325: LD_INT 1
58327: ARRAY
58328: PUSH
58329: LD_INT 3
58331: ARRAY
58332: EQUAL
58333: AND
58334: IFFALSE 58344
// result := true ;
58336: LD_ADDR_VAR 0 4
58340: PUSH
58341: LD_INT 1
58343: ST_TO_ADDR
// end ; end ;
58344: LD_VAR 0 4
58348: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58349: LD_INT 0
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
// if not unit or not area then
58355: LD_VAR 0 1
58359: NOT
58360: PUSH
58361: LD_VAR 0 2
58365: NOT
58366: OR
58367: IFFALSE 58371
// exit ;
58369: GO 58535
// tmp := AreaToList ( area , i ) ;
58371: LD_ADDR_VAR 0 6
58375: PUSH
58376: LD_VAR 0 2
58380: PPUSH
58381: LD_VAR 0 5
58385: PPUSH
58386: CALL_OW 517
58390: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58391: LD_ADDR_VAR 0 5
58395: PUSH
58396: DOUBLE
58397: LD_INT 1
58399: DEC
58400: ST_TO_ADDR
58401: LD_VAR 0 6
58405: PUSH
58406: LD_INT 1
58408: ARRAY
58409: PUSH
58410: FOR_TO
58411: IFFALSE 58533
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58413: LD_ADDR_VAR 0 7
58417: PUSH
58418: LD_VAR 0 6
58422: PUSH
58423: LD_INT 1
58425: ARRAY
58426: PUSH
58427: LD_VAR 0 5
58431: ARRAY
58432: PUSH
58433: LD_VAR 0 6
58437: PUSH
58438: LD_INT 2
58440: ARRAY
58441: PUSH
58442: LD_VAR 0 5
58446: ARRAY
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58452: LD_VAR 0 7
58456: PUSH
58457: LD_INT 1
58459: ARRAY
58460: PPUSH
58461: LD_VAR 0 7
58465: PUSH
58466: LD_INT 2
58468: ARRAY
58469: PPUSH
58470: CALL_OW 428
58474: PUSH
58475: LD_INT 0
58477: EQUAL
58478: IFFALSE 58531
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58480: LD_VAR 0 1
58484: PPUSH
58485: LD_VAR 0 7
58489: PUSH
58490: LD_INT 1
58492: ARRAY
58493: PPUSH
58494: LD_VAR 0 7
58498: PUSH
58499: LD_INT 2
58501: ARRAY
58502: PPUSH
58503: LD_VAR 0 3
58507: PPUSH
58508: CALL_OW 48
// result := IsPlaced ( unit ) ;
58512: LD_ADDR_VAR 0 4
58516: PUSH
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 305
58526: ST_TO_ADDR
// exit ;
58527: POP
58528: POP
58529: GO 58535
// end ; end ;
58531: GO 58410
58533: POP
58534: POP
// end ;
58535: LD_VAR 0 4
58539: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58540: LD_INT 0
58542: PPUSH
58543: PPUSH
58544: PPUSH
// if not side or side > 8 then
58545: LD_VAR 0 1
58549: NOT
58550: PUSH
58551: LD_VAR 0 1
58555: PUSH
58556: LD_INT 8
58558: GREATER
58559: OR
58560: IFFALSE 58564
// exit ;
58562: GO 58751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58564: LD_ADDR_VAR 0 4
58568: PUSH
58569: LD_INT 22
58571: PUSH
58572: LD_VAR 0 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 21
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PPUSH
58595: CALL_OW 69
58599: ST_TO_ADDR
// if not tmp then
58600: LD_VAR 0 4
58604: NOT
58605: IFFALSE 58609
// exit ;
58607: GO 58751
// enable_addtolog := true ;
58609: LD_ADDR_OWVAR 81
58613: PUSH
58614: LD_INT 1
58616: ST_TO_ADDR
// AddToLog ( [ ) ;
58617: LD_STRING [
58619: PPUSH
58620: CALL_OW 561
// for i in tmp do
58624: LD_ADDR_VAR 0 3
58628: PUSH
58629: LD_VAR 0 4
58633: PUSH
58634: FOR_IN
58635: IFFALSE 58742
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58637: LD_STRING [
58639: PUSH
58640: LD_VAR 0 3
58644: PPUSH
58645: CALL_OW 266
58649: STR
58650: PUSH
58651: LD_STRING , 
58653: STR
58654: PUSH
58655: LD_VAR 0 3
58659: PPUSH
58660: CALL_OW 250
58664: STR
58665: PUSH
58666: LD_STRING , 
58668: STR
58669: PUSH
58670: LD_VAR 0 3
58674: PPUSH
58675: CALL_OW 251
58679: STR
58680: PUSH
58681: LD_STRING , 
58683: STR
58684: PUSH
58685: LD_VAR 0 3
58689: PPUSH
58690: CALL_OW 254
58694: STR
58695: PUSH
58696: LD_STRING , 
58698: STR
58699: PUSH
58700: LD_VAR 0 3
58704: PPUSH
58705: LD_INT 1
58707: PPUSH
58708: CALL_OW 268
58712: STR
58713: PUSH
58714: LD_STRING , 
58716: STR
58717: PUSH
58718: LD_VAR 0 3
58722: PPUSH
58723: LD_INT 2
58725: PPUSH
58726: CALL_OW 268
58730: STR
58731: PUSH
58732: LD_STRING ],
58734: STR
58735: PPUSH
58736: CALL_OW 561
// end ;
58740: GO 58634
58742: POP
58743: POP
// AddToLog ( ]; ) ;
58744: LD_STRING ];
58746: PPUSH
58747: CALL_OW 561
// end ;
58751: LD_VAR 0 2
58755: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58756: LD_INT 0
58758: PPUSH
58759: PPUSH
58760: PPUSH
58761: PPUSH
58762: PPUSH
// if not area or not rate or not max then
58763: LD_VAR 0 1
58767: NOT
58768: PUSH
58769: LD_VAR 0 2
58773: NOT
58774: OR
58775: PUSH
58776: LD_VAR 0 4
58780: NOT
58781: OR
58782: IFFALSE 58786
// exit ;
58784: GO 58975
// while 1 do
58786: LD_INT 1
58788: IFFALSE 58975
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58790: LD_ADDR_VAR 0 9
58794: PUSH
58795: LD_VAR 0 1
58799: PPUSH
58800: LD_INT 1
58802: PPUSH
58803: CALL_OW 287
58807: PUSH
58808: LD_INT 10
58810: MUL
58811: ST_TO_ADDR
// r := rate / 10 ;
58812: LD_ADDR_VAR 0 7
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: LD_INT 10
58824: DIVREAL
58825: ST_TO_ADDR
// time := 1 1$00 ;
58826: LD_ADDR_VAR 0 8
58830: PUSH
58831: LD_INT 2100
58833: ST_TO_ADDR
// if amount < min then
58834: LD_VAR 0 9
58838: PUSH
58839: LD_VAR 0 3
58843: LESS
58844: IFFALSE 58862
// r := r * 2 else
58846: LD_ADDR_VAR 0 7
58850: PUSH
58851: LD_VAR 0 7
58855: PUSH
58856: LD_INT 2
58858: MUL
58859: ST_TO_ADDR
58860: GO 58888
// if amount > max then
58862: LD_VAR 0 9
58866: PUSH
58867: LD_VAR 0 4
58871: GREATER
58872: IFFALSE 58888
// r := r / 2 ;
58874: LD_ADDR_VAR 0 7
58878: PUSH
58879: LD_VAR 0 7
58883: PUSH
58884: LD_INT 2
58886: DIVREAL
58887: ST_TO_ADDR
// time := time / r ;
58888: LD_ADDR_VAR 0 8
58892: PUSH
58893: LD_VAR 0 8
58897: PUSH
58898: LD_VAR 0 7
58902: DIVREAL
58903: ST_TO_ADDR
// if time < 0 then
58904: LD_VAR 0 8
58908: PUSH
58909: LD_INT 0
58911: LESS
58912: IFFALSE 58929
// time := time * - 1 ;
58914: LD_ADDR_VAR 0 8
58918: PUSH
58919: LD_VAR 0 8
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: MUL
58928: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58929: LD_VAR 0 8
58933: PUSH
58934: LD_INT 35
58936: PPUSH
58937: LD_INT 875
58939: PPUSH
58940: CALL_OW 12
58944: PLUS
58945: PPUSH
58946: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58950: LD_INT 1
58952: PPUSH
58953: LD_INT 5
58955: PPUSH
58956: CALL_OW 12
58960: PPUSH
58961: LD_VAR 0 1
58965: PPUSH
58966: LD_INT 1
58968: PPUSH
58969: CALL_OW 55
// end ;
58973: GO 58786
// end ;
58975: LD_VAR 0 5
58979: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58980: LD_INT 0
58982: PPUSH
58983: PPUSH
58984: PPUSH
58985: PPUSH
58986: PPUSH
58987: PPUSH
58988: PPUSH
58989: PPUSH
// if not turrets or not factories then
58990: LD_VAR 0 1
58994: NOT
58995: PUSH
58996: LD_VAR 0 2
59000: NOT
59001: OR
59002: IFFALSE 59006
// exit ;
59004: GO 59313
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59006: LD_ADDR_VAR 0 10
59010: PUSH
59011: LD_INT 5
59013: PUSH
59014: LD_INT 6
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 24
59048: PUSH
59049: LD_INT 25
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 23
59058: PUSH
59059: LD_INT 27
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 42
59072: PUSH
59073: LD_INT 43
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 44
59082: PUSH
59083: LD_INT 46
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 45
59092: PUSH
59093: LD_INT 47
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// result := [ ] ;
59110: LD_ADDR_VAR 0 3
59114: PUSH
59115: EMPTY
59116: ST_TO_ADDR
// for i in turrets do
59117: LD_ADDR_VAR 0 4
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: FOR_IN
59128: IFFALSE 59311
// begin nat := GetNation ( i ) ;
59130: LD_ADDR_VAR 0 7
59134: PUSH
59135: LD_VAR 0 4
59139: PPUSH
59140: CALL_OW 248
59144: ST_TO_ADDR
// weapon := 0 ;
59145: LD_ADDR_VAR 0 8
59149: PUSH
59150: LD_INT 0
59152: ST_TO_ADDR
// if not nat then
59153: LD_VAR 0 7
59157: NOT
59158: IFFALSE 59162
// continue ;
59160: GO 59127
// for j in list [ nat ] do
59162: LD_ADDR_VAR 0 5
59166: PUSH
59167: LD_VAR 0 10
59171: PUSH
59172: LD_VAR 0 7
59176: ARRAY
59177: PUSH
59178: FOR_IN
59179: IFFALSE 59220
// if GetBWeapon ( i ) = j [ 1 ] then
59181: LD_VAR 0 4
59185: PPUSH
59186: CALL_OW 269
59190: PUSH
59191: LD_VAR 0 5
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: EQUAL
59200: IFFALSE 59218
// begin weapon := j [ 2 ] ;
59202: LD_ADDR_VAR 0 8
59206: PUSH
59207: LD_VAR 0 5
59211: PUSH
59212: LD_INT 2
59214: ARRAY
59215: ST_TO_ADDR
// break ;
59216: GO 59220
// end ;
59218: GO 59178
59220: POP
59221: POP
// if not weapon then
59222: LD_VAR 0 8
59226: NOT
59227: IFFALSE 59231
// continue ;
59229: GO 59127
// for k in factories do
59231: LD_ADDR_VAR 0 6
59235: PUSH
59236: LD_VAR 0 2
59240: PUSH
59241: FOR_IN
59242: IFFALSE 59307
// begin weapons := AvailableWeaponList ( k ) ;
59244: LD_ADDR_VAR 0 9
59248: PUSH
59249: LD_VAR 0 6
59253: PPUSH
59254: CALL_OW 478
59258: ST_TO_ADDR
// if not weapons then
59259: LD_VAR 0 9
59263: NOT
59264: IFFALSE 59268
// continue ;
59266: GO 59241
// if weapon in weapons then
59268: LD_VAR 0 8
59272: PUSH
59273: LD_VAR 0 9
59277: IN
59278: IFFALSE 59305
// begin result := [ i , weapon ] ;
59280: LD_ADDR_VAR 0 3
59284: PUSH
59285: LD_VAR 0 4
59289: PUSH
59290: LD_VAR 0 8
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// exit ;
59299: POP
59300: POP
59301: POP
59302: POP
59303: GO 59313
// end ; end ;
59305: GO 59241
59307: POP
59308: POP
// end ;
59309: GO 59127
59311: POP
59312: POP
// end ;
59313: LD_VAR 0 3
59317: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59318: LD_INT 0
59320: PPUSH
// if not side or side > 8 then
59321: LD_VAR 0 3
59325: NOT
59326: PUSH
59327: LD_VAR 0 3
59331: PUSH
59332: LD_INT 8
59334: GREATER
59335: OR
59336: IFFALSE 59340
// exit ;
59338: GO 59399
// if not range then
59340: LD_VAR 0 4
59344: NOT
59345: IFFALSE 59356
// range := - 12 ;
59347: LD_ADDR_VAR 0 4
59351: PUSH
59352: LD_INT 12
59354: NEG
59355: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59356: LD_VAR 0 1
59360: PPUSH
59361: LD_VAR 0 2
59365: PPUSH
59366: LD_VAR 0 3
59370: PPUSH
59371: LD_VAR 0 4
59375: PPUSH
59376: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59380: LD_VAR 0 1
59384: PPUSH
59385: LD_VAR 0 2
59389: PPUSH
59390: LD_VAR 0 3
59394: PPUSH
59395: CALL_OW 331
// end ;
59399: LD_VAR 0 5
59403: RET
// export function Video ( mode ) ; begin
59404: LD_INT 0
59406: PPUSH
// ingame_video = mode ;
59407: LD_ADDR_OWVAR 52
59411: PUSH
59412: LD_VAR 0 1
59416: ST_TO_ADDR
// interface_hidden = mode ;
59417: LD_ADDR_OWVAR 54
59421: PUSH
59422: LD_VAR 0 1
59426: ST_TO_ADDR
// end ;
59427: LD_VAR 0 2
59431: RET
// export function Join ( array , element ) ; begin
59432: LD_INT 0
59434: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59435: LD_ADDR_VAR 0 3
59439: PUSH
59440: LD_VAR 0 1
59444: PPUSH
59445: LD_VAR 0 1
59449: PUSH
59450: LD_INT 1
59452: PLUS
59453: PPUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: CALL_OW 1
59463: ST_TO_ADDR
// end ;
59464: LD_VAR 0 3
59468: RET
// export function JoinUnion ( array , element ) ; begin
59469: LD_INT 0
59471: PPUSH
// result := array union element ;
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: LD_VAR 0 1
59481: PUSH
59482: LD_VAR 0 2
59486: UNION
59487: ST_TO_ADDR
// end ;
59488: LD_VAR 0 3
59492: RET
// export function GetBehemoths ( side ) ; begin
59493: LD_INT 0
59495: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59496: LD_ADDR_VAR 0 2
59500: PUSH
59501: LD_INT 22
59503: PUSH
59504: LD_VAR 0 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 31
59515: PUSH
59516: LD_INT 25
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PPUSH
59527: CALL_OW 69
59531: ST_TO_ADDR
// end ;
59532: LD_VAR 0 2
59536: RET
// export function Shuffle ( array ) ; var i , index ; begin
59537: LD_INT 0
59539: PPUSH
59540: PPUSH
59541: PPUSH
// result := [ ] ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: EMPTY
59548: ST_TO_ADDR
// if not array then
59549: LD_VAR 0 1
59553: NOT
59554: IFFALSE 59558
// exit ;
59556: GO 59657
// Randomize ;
59558: CALL_OW 10
// for i = array downto 1 do
59562: LD_ADDR_VAR 0 3
59566: PUSH
59567: DOUBLE
59568: LD_VAR 0 1
59572: INC
59573: ST_TO_ADDR
59574: LD_INT 1
59576: PUSH
59577: FOR_DOWNTO
59578: IFFALSE 59655
// begin index := rand ( 1 , array ) ;
59580: LD_ADDR_VAR 0 4
59584: PUSH
59585: LD_INT 1
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: CALL_OW 12
59597: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59598: LD_ADDR_VAR 0 2
59602: PUSH
59603: LD_VAR 0 2
59607: PPUSH
59608: LD_VAR 0 2
59612: PUSH
59613: LD_INT 1
59615: PLUS
59616: PPUSH
59617: LD_VAR 0 1
59621: PUSH
59622: LD_VAR 0 4
59626: ARRAY
59627: PPUSH
59628: CALL_OW 2
59632: ST_TO_ADDR
// array := Delete ( array , index ) ;
59633: LD_ADDR_VAR 0 1
59637: PUSH
59638: LD_VAR 0 1
59642: PPUSH
59643: LD_VAR 0 4
59647: PPUSH
59648: CALL_OW 3
59652: ST_TO_ADDR
// end ;
59653: GO 59577
59655: POP
59656: POP
// end ;
59657: LD_VAR 0 2
59661: RET
// export function GetBaseMaterials ( base ) ; begin
59662: LD_INT 0
59664: PPUSH
// result := [ 0 , 0 , 0 ] ;
59665: LD_ADDR_VAR 0 2
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// if not base then
59684: LD_VAR 0 1
59688: NOT
59689: IFFALSE 59693
// exit ;
59691: GO 59742
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59693: LD_ADDR_VAR 0 2
59697: PUSH
59698: LD_VAR 0 1
59702: PPUSH
59703: LD_INT 1
59705: PPUSH
59706: CALL_OW 275
59710: PUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: LD_INT 2
59718: PPUSH
59719: CALL_OW 275
59723: PUSH
59724: LD_VAR 0 1
59728: PPUSH
59729: LD_INT 3
59731: PPUSH
59732: CALL_OW 275
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// end ;
59742: LD_VAR 0 2
59746: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59747: LD_INT 0
59749: PPUSH
59750: PPUSH
// result := array ;
59751: LD_ADDR_VAR 0 3
59755: PUSH
59756: LD_VAR 0 1
59760: ST_TO_ADDR
// if size >= result then
59761: LD_VAR 0 2
59765: PUSH
59766: LD_VAR 0 3
59770: GREATEREQUAL
59771: IFFALSE 59775
// exit ;
59773: GO 59825
// if size then
59775: LD_VAR 0 2
59779: IFFALSE 59825
// for i := array downto size do
59781: LD_ADDR_VAR 0 4
59785: PUSH
59786: DOUBLE
59787: LD_VAR 0 1
59791: INC
59792: ST_TO_ADDR
59793: LD_VAR 0 2
59797: PUSH
59798: FOR_DOWNTO
59799: IFFALSE 59823
// result := Delete ( result , result ) ;
59801: LD_ADDR_VAR 0 3
59805: PUSH
59806: LD_VAR 0 3
59810: PPUSH
59811: LD_VAR 0 3
59815: PPUSH
59816: CALL_OW 3
59820: ST_TO_ADDR
59821: GO 59798
59823: POP
59824: POP
// end ;
59825: LD_VAR 0 3
59829: RET
// export function ComExit ( unit ) ; var tmp ; begin
59830: LD_INT 0
59832: PPUSH
59833: PPUSH
// if not IsInUnit ( unit ) then
59834: LD_VAR 0 1
59838: PPUSH
59839: CALL_OW 310
59843: NOT
59844: IFFALSE 59848
// exit ;
59846: GO 59908
// tmp := IsInUnit ( unit ) ;
59848: LD_ADDR_VAR 0 3
59852: PUSH
59853: LD_VAR 0 1
59857: PPUSH
59858: CALL_OW 310
59862: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59863: LD_VAR 0 3
59867: PPUSH
59868: CALL_OW 247
59872: PUSH
59873: LD_INT 2
59875: EQUAL
59876: IFFALSE 59889
// ComExitVehicle ( unit ) else
59878: LD_VAR 0 1
59882: PPUSH
59883: CALL_OW 121
59887: GO 59898
// ComExitBuilding ( unit ) ;
59889: LD_VAR 0 1
59893: PPUSH
59894: CALL_OW 122
// result := tmp ;
59898: LD_ADDR_VAR 0 2
59902: PUSH
59903: LD_VAR 0 3
59907: ST_TO_ADDR
// end ;
59908: LD_VAR 0 2
59912: RET
// export function ComExitAll ( units ) ; var i ; begin
59913: LD_INT 0
59915: PPUSH
59916: PPUSH
// if not units then
59917: LD_VAR 0 1
59921: NOT
59922: IFFALSE 59926
// exit ;
59924: GO 59952
// for i in units do
59926: LD_ADDR_VAR 0 3
59930: PUSH
59931: LD_VAR 0 1
59935: PUSH
59936: FOR_IN
59937: IFFALSE 59950
// ComExit ( i ) ;
59939: LD_VAR 0 3
59943: PPUSH
59944: CALL 59830 0 1
59948: GO 59936
59950: POP
59951: POP
// end ;
59952: LD_VAR 0 2
59956: RET
// export function ResetHc ; begin
59957: LD_INT 0
59959: PPUSH
// InitHc ;
59960: CALL_OW 19
// hc_importance := 0 ;
59964: LD_ADDR_OWVAR 32
59968: PUSH
59969: LD_INT 0
59971: ST_TO_ADDR
// end ;
59972: LD_VAR 0 1
59976: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59977: LD_INT 0
59979: PPUSH
59980: PPUSH
59981: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59982: LD_ADDR_VAR 0 6
59986: PUSH
59987: LD_VAR 0 1
59991: PUSH
59992: LD_VAR 0 3
59996: PLUS
59997: PUSH
59998: LD_INT 2
60000: DIV
60001: ST_TO_ADDR
// if _x < 0 then
60002: LD_VAR 0 6
60006: PUSH
60007: LD_INT 0
60009: LESS
60010: IFFALSE 60027
// _x := _x * - 1 ;
60012: LD_ADDR_VAR 0 6
60016: PUSH
60017: LD_VAR 0 6
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: MUL
60026: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60027: LD_ADDR_VAR 0 7
60031: PUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_VAR 0 4
60041: PLUS
60042: PUSH
60043: LD_INT 2
60045: DIV
60046: ST_TO_ADDR
// if _y < 0 then
60047: LD_VAR 0 7
60051: PUSH
60052: LD_INT 0
60054: LESS
60055: IFFALSE 60072
// _y := _y * - 1 ;
60057: LD_ADDR_VAR 0 7
60061: PUSH
60062: LD_VAR 0 7
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: MUL
60071: ST_TO_ADDR
// result := [ _x , _y ] ;
60072: LD_ADDR_VAR 0 5
60076: PUSH
60077: LD_VAR 0 6
60081: PUSH
60082: LD_VAR 0 7
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// end ;
60091: LD_VAR 0 5
60095: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60096: LD_INT 0
60098: PPUSH
60099: PPUSH
60100: PPUSH
60101: PPUSH
// task := GetTaskList ( unit ) ;
60102: LD_ADDR_VAR 0 7
60106: PUSH
60107: LD_VAR 0 1
60111: PPUSH
60112: CALL_OW 437
60116: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60117: LD_VAR 0 7
60121: NOT
60122: PUSH
60123: LD_VAR 0 1
60127: PPUSH
60128: LD_VAR 0 2
60132: PPUSH
60133: CALL_OW 308
60137: NOT
60138: AND
60139: IFFALSE 60143
// exit ;
60141: GO 60261
// if IsInArea ( unit , area ) then
60143: LD_VAR 0 1
60147: PPUSH
60148: LD_VAR 0 2
60152: PPUSH
60153: CALL_OW 308
60157: IFFALSE 60175
// begin ComMoveToArea ( unit , goAway ) ;
60159: LD_VAR 0 1
60163: PPUSH
60164: LD_VAR 0 3
60168: PPUSH
60169: CALL_OW 113
// exit ;
60173: GO 60261
// end ; if task [ 1 ] [ 1 ] <> M then
60175: LD_VAR 0 7
60179: PUSH
60180: LD_INT 1
60182: ARRAY
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PUSH
60188: LD_STRING M
60190: NONEQUAL
60191: IFFALSE 60195
// exit ;
60193: GO 60261
// x := task [ 1 ] [ 2 ] ;
60195: LD_ADDR_VAR 0 5
60199: PUSH
60200: LD_VAR 0 7
60204: PUSH
60205: LD_INT 1
60207: ARRAY
60208: PUSH
60209: LD_INT 2
60211: ARRAY
60212: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60213: LD_ADDR_VAR 0 6
60217: PUSH
60218: LD_VAR 0 7
60222: PUSH
60223: LD_INT 1
60225: ARRAY
60226: PUSH
60227: LD_INT 3
60229: ARRAY
60230: ST_TO_ADDR
// if InArea ( x , y , area ) then
60231: LD_VAR 0 5
60235: PPUSH
60236: LD_VAR 0 6
60240: PPUSH
60241: LD_VAR 0 2
60245: PPUSH
60246: CALL_OW 309
60250: IFFALSE 60261
// ComStop ( unit ) ;
60252: LD_VAR 0 1
60256: PPUSH
60257: CALL_OW 141
// end ;
60261: LD_VAR 0 4
60265: RET
// export function Abs ( value ) ; begin
60266: LD_INT 0
60268: PPUSH
// result := value ;
60269: LD_ADDR_VAR 0 2
60273: PUSH
60274: LD_VAR 0 1
60278: ST_TO_ADDR
// if value < 0 then
60279: LD_VAR 0 1
60283: PUSH
60284: LD_INT 0
60286: LESS
60287: IFFALSE 60304
// result := value * - 1 ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_VAR 0 1
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: MUL
60303: ST_TO_ADDR
// end ;
60304: LD_VAR 0 2
60308: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60309: LD_INT 0
60311: PPUSH
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
60318: PPUSH
// if not unit or not building then
60319: LD_VAR 0 1
60323: NOT
60324: PUSH
60325: LD_VAR 0 2
60329: NOT
60330: OR
60331: IFFALSE 60335
// exit ;
60333: GO 60561
// x := GetX ( building ) ;
60335: LD_ADDR_VAR 0 4
60339: PUSH
60340: LD_VAR 0 2
60344: PPUSH
60345: CALL_OW 250
60349: ST_TO_ADDR
// y := GetY ( building ) ;
60350: LD_ADDR_VAR 0 6
60354: PUSH
60355: LD_VAR 0 2
60359: PPUSH
60360: CALL_OW 251
60364: ST_TO_ADDR
// d := GetDir ( building ) ;
60365: LD_ADDR_VAR 0 8
60369: PUSH
60370: LD_VAR 0 2
60374: PPUSH
60375: CALL_OW 254
60379: ST_TO_ADDR
// r := 4 ;
60380: LD_ADDR_VAR 0 9
60384: PUSH
60385: LD_INT 4
60387: ST_TO_ADDR
// for i := 1 to 5 do
60388: LD_ADDR_VAR 0 10
60392: PUSH
60393: DOUBLE
60394: LD_INT 1
60396: DEC
60397: ST_TO_ADDR
60398: LD_INT 5
60400: PUSH
60401: FOR_TO
60402: IFFALSE 60559
// begin _x := ShiftX ( x , d , r + i ) ;
60404: LD_ADDR_VAR 0 5
60408: PUSH
60409: LD_VAR 0 4
60413: PPUSH
60414: LD_VAR 0 8
60418: PPUSH
60419: LD_VAR 0 9
60423: PUSH
60424: LD_VAR 0 10
60428: PLUS
60429: PPUSH
60430: CALL_OW 272
60434: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60435: LD_ADDR_VAR 0 7
60439: PUSH
60440: LD_VAR 0 6
60444: PPUSH
60445: LD_VAR 0 8
60449: PPUSH
60450: LD_VAR 0 9
60454: PUSH
60455: LD_VAR 0 10
60459: PLUS
60460: PPUSH
60461: CALL_OW 273
60465: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60466: LD_VAR 0 5
60470: PPUSH
60471: LD_VAR 0 7
60475: PPUSH
60476: CALL_OW 488
60480: PUSH
60481: LD_VAR 0 5
60485: PPUSH
60486: LD_VAR 0 7
60490: PPUSH
60491: CALL_OW 428
60495: PPUSH
60496: CALL_OW 247
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: IN
60511: NOT
60512: AND
60513: IFFALSE 60557
// begin ComMoveXY ( unit , _x , _y ) ;
60515: LD_VAR 0 1
60519: PPUSH
60520: LD_VAR 0 5
60524: PPUSH
60525: LD_VAR 0 7
60529: PPUSH
60530: CALL_OW 111
// result := [ _x , _y ] ;
60534: LD_ADDR_VAR 0 3
60538: PUSH
60539: LD_VAR 0 5
60543: PUSH
60544: LD_VAR 0 7
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: ST_TO_ADDR
// exit ;
60553: POP
60554: POP
60555: GO 60561
// end ; end ;
60557: GO 60401
60559: POP
60560: POP
// end ;
60561: LD_VAR 0 3
60565: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60566: LD_INT 0
60568: PPUSH
60569: PPUSH
60570: PPUSH
// result := 0 ;
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60579: LD_VAR 0 1
60583: PUSH
60584: LD_INT 0
60586: LESS
60587: PUSH
60588: LD_VAR 0 1
60592: PUSH
60593: LD_INT 8
60595: GREATER
60596: OR
60597: PUSH
60598: LD_VAR 0 2
60602: PUSH
60603: LD_INT 0
60605: LESS
60606: OR
60607: PUSH
60608: LD_VAR 0 2
60612: PUSH
60613: LD_INT 8
60615: GREATER
60616: OR
60617: IFFALSE 60621
// exit ;
60619: GO 60696
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60621: LD_ADDR_VAR 0 4
60625: PUSH
60626: LD_INT 22
60628: PUSH
60629: LD_VAR 0 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PPUSH
60638: CALL_OW 69
60642: PUSH
60643: FOR_IN
60644: IFFALSE 60694
// begin un := UnitShoot ( i ) ;
60646: LD_ADDR_VAR 0 5
60650: PUSH
60651: LD_VAR 0 4
60655: PPUSH
60656: CALL_OW 504
60660: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60661: LD_VAR 0 5
60665: PPUSH
60666: CALL_OW 255
60670: PUSH
60671: LD_VAR 0 1
60675: EQUAL
60676: IFFALSE 60692
// begin result := un ;
60678: LD_ADDR_VAR 0 3
60682: PUSH
60683: LD_VAR 0 5
60687: ST_TO_ADDR
// exit ;
60688: POP
60689: POP
60690: GO 60696
// end ; end ;
60692: GO 60643
60694: POP
60695: POP
// end ;
60696: LD_VAR 0 3
60700: RET
// export function GetCargoBay ( units ) ; begin
60701: LD_INT 0
60703: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60704: LD_ADDR_VAR 0 2
60708: PUSH
60709: LD_VAR 0 1
60713: PPUSH
60714: LD_INT 2
60716: PUSH
60717: LD_INT 34
60719: PUSH
60720: LD_INT 12
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 34
60729: PUSH
60730: LD_INT 51
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 34
60739: PUSH
60740: LD_INT 32
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 34
60749: PUSH
60750: LD_INT 89
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: PPUSH
60764: CALL_OW 72
60768: ST_TO_ADDR
// end ;
60769: LD_VAR 0 2
60773: RET
// export function Negate ( value ) ; begin
60774: LD_INT 0
60776: PPUSH
// result := not value ;
60777: LD_ADDR_VAR 0 2
60781: PUSH
60782: LD_VAR 0 1
60786: NOT
60787: ST_TO_ADDR
// end ;
60788: LD_VAR 0 2
60792: RET
// export function Inc ( value ) ; begin
60793: LD_INT 0
60795: PPUSH
// result := value + 1 ;
60796: LD_ADDR_VAR 0 2
60800: PUSH
60801: LD_VAR 0 1
60805: PUSH
60806: LD_INT 1
60808: PLUS
60809: ST_TO_ADDR
// end ;
60810: LD_VAR 0 2
60814: RET
// export function Dec ( value ) ; begin
60815: LD_INT 0
60817: PPUSH
// result := value - 1 ;
60818: LD_ADDR_VAR 0 2
60822: PUSH
60823: LD_VAR 0 1
60827: PUSH
60828: LD_INT 1
60830: MINUS
60831: ST_TO_ADDR
// end ;
60832: LD_VAR 0 2
60836: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60837: LD_INT 0
60839: PPUSH
60840: PPUSH
60841: PPUSH
60842: PPUSH
60843: PPUSH
60844: PPUSH
60845: PPUSH
60846: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60847: LD_VAR 0 1
60851: PPUSH
60852: LD_VAR 0 2
60856: PPUSH
60857: CALL_OW 488
60861: NOT
60862: PUSH
60863: LD_VAR 0 3
60867: PPUSH
60868: LD_VAR 0 4
60872: PPUSH
60873: CALL_OW 488
60877: NOT
60878: OR
60879: IFFALSE 60892
// begin result := - 1 ;
60881: LD_ADDR_VAR 0 5
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: ST_TO_ADDR
// exit ;
60890: GO 61127
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60892: LD_ADDR_VAR 0 12
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: LD_VAR 0 2
60906: PPUSH
60907: LD_VAR 0 3
60911: PPUSH
60912: LD_VAR 0 4
60916: PPUSH
60917: CALL 59977 0 4
60921: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60922: LD_ADDR_VAR 0 11
60926: PUSH
60927: LD_VAR 0 1
60931: PPUSH
60932: LD_VAR 0 2
60936: PPUSH
60937: LD_VAR 0 12
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PPUSH
60946: LD_VAR 0 12
60950: PUSH
60951: LD_INT 2
60953: ARRAY
60954: PPUSH
60955: CALL_OW 298
60959: ST_TO_ADDR
// distance := 9999 ;
60960: LD_ADDR_VAR 0 10
60964: PUSH
60965: LD_INT 9999
60967: ST_TO_ADDR
// for i := 0 to 5 do
60968: LD_ADDR_VAR 0 6
60972: PUSH
60973: DOUBLE
60974: LD_INT 0
60976: DEC
60977: ST_TO_ADDR
60978: LD_INT 5
60980: PUSH
60981: FOR_TO
60982: IFFALSE 61125
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60984: LD_ADDR_VAR 0 7
60988: PUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: LD_VAR 0 6
60998: PPUSH
60999: LD_VAR 0 11
61003: PPUSH
61004: CALL_OW 272
61008: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61009: LD_ADDR_VAR 0 8
61013: PUSH
61014: LD_VAR 0 2
61018: PPUSH
61019: LD_VAR 0 6
61023: PPUSH
61024: LD_VAR 0 11
61028: PPUSH
61029: CALL_OW 273
61033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61034: LD_VAR 0 7
61038: PPUSH
61039: LD_VAR 0 8
61043: PPUSH
61044: CALL_OW 488
61048: NOT
61049: IFFALSE 61053
// continue ;
61051: GO 60981
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61053: LD_ADDR_VAR 0 9
61057: PUSH
61058: LD_VAR 0 12
61062: PUSH
61063: LD_INT 1
61065: ARRAY
61066: PPUSH
61067: LD_VAR 0 12
61071: PUSH
61072: LD_INT 2
61074: ARRAY
61075: PPUSH
61076: LD_VAR 0 7
61080: PPUSH
61081: LD_VAR 0 8
61085: PPUSH
61086: CALL_OW 298
61090: ST_TO_ADDR
// if tmp < distance then
61091: LD_VAR 0 9
61095: PUSH
61096: LD_VAR 0 10
61100: LESS
61101: IFFALSE 61123
// begin result := i ;
61103: LD_ADDR_VAR 0 5
61107: PUSH
61108: LD_VAR 0 6
61112: ST_TO_ADDR
// distance := tmp ;
61113: LD_ADDR_VAR 0 10
61117: PUSH
61118: LD_VAR 0 9
61122: ST_TO_ADDR
// end ; end ;
61123: GO 60981
61125: POP
61126: POP
// end ;
61127: LD_VAR 0 5
61131: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61132: LD_INT 0
61134: PPUSH
61135: PPUSH
// if not driver or not IsInUnit ( driver ) then
61136: LD_VAR 0 1
61140: NOT
61141: PUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 310
61151: NOT
61152: OR
61153: IFFALSE 61157
// exit ;
61155: GO 61247
// vehicle := IsInUnit ( driver ) ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_VAR 0 1
61166: PPUSH
61167: CALL_OW 310
61171: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61172: LD_VAR 0 1
61176: PPUSH
61177: LD_STRING \
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: PUSH
61207: LD_STRING E
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_VAR 0 3
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PPUSH
61243: CALL_OW 446
// end ;
61247: LD_VAR 0 2
61251: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61252: LD_INT 0
61254: PPUSH
61255: PPUSH
// if not driver or not IsInUnit ( driver ) then
61256: LD_VAR 0 1
61260: NOT
61261: PUSH
61262: LD_VAR 0 1
61266: PPUSH
61267: CALL_OW 310
61271: NOT
61272: OR
61273: IFFALSE 61277
// exit ;
61275: GO 61367
// vehicle := IsInUnit ( driver ) ;
61277: LD_ADDR_VAR 0 3
61281: PUSH
61282: LD_VAR 0 1
61286: PPUSH
61287: CALL_OW 310
61291: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61292: LD_VAR 0 1
61296: PPUSH
61297: LD_STRING \
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: LD_STRING E
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_VAR 0 3
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PPUSH
61363: CALL_OW 447
// end ;
61367: LD_VAR 0 2
61371: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61372: LD_INT 0
61374: PPUSH
61375: PPUSH
61376: PPUSH
// tmp := [ ] ;
61377: LD_ADDR_VAR 0 5
61381: PUSH
61382: EMPTY
61383: ST_TO_ADDR
// for i in units do
61384: LD_ADDR_VAR 0 4
61388: PUSH
61389: LD_VAR 0 1
61393: PUSH
61394: FOR_IN
61395: IFFALSE 61433
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61397: LD_ADDR_VAR 0 5
61401: PUSH
61402: LD_VAR 0 5
61406: PPUSH
61407: LD_VAR 0 5
61411: PUSH
61412: LD_INT 1
61414: PLUS
61415: PPUSH
61416: LD_VAR 0 4
61420: PPUSH
61421: CALL_OW 256
61425: PPUSH
61426: CALL_OW 2
61430: ST_TO_ADDR
61431: GO 61394
61433: POP
61434: POP
// if not tmp then
61435: LD_VAR 0 5
61439: NOT
61440: IFFALSE 61444
// exit ;
61442: GO 61492
// if asc then
61444: LD_VAR 0 2
61448: IFFALSE 61472
// result := SortListByListAsc ( units , tmp ) else
61450: LD_ADDR_VAR 0 3
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: LD_VAR 0 5
61464: PPUSH
61465: CALL_OW 76
61469: ST_TO_ADDR
61470: GO 61492
// result := SortListByListDesc ( units , tmp ) ;
61472: LD_ADDR_VAR 0 3
61476: PUSH
61477: LD_VAR 0 1
61481: PPUSH
61482: LD_VAR 0 5
61486: PPUSH
61487: CALL_OW 77
61491: ST_TO_ADDR
// end ;
61492: LD_VAR 0 3
61496: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61497: LD_INT 0
61499: PPUSH
61500: PPUSH
// task := GetTaskList ( mech ) ;
61501: LD_ADDR_VAR 0 4
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: CALL_OW 437
61515: ST_TO_ADDR
// if not task then
61516: LD_VAR 0 4
61520: NOT
61521: IFFALSE 61525
// exit ;
61523: GO 61567
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61525: LD_ADDR_VAR 0 3
61529: PUSH
61530: LD_VAR 0 4
61534: PUSH
61535: LD_INT 1
61537: ARRAY
61538: PUSH
61539: LD_INT 1
61541: ARRAY
61542: PUSH
61543: LD_STRING r
61545: EQUAL
61546: PUSH
61547: LD_VAR 0 4
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_INT 4
61558: ARRAY
61559: PUSH
61560: LD_VAR 0 2
61564: EQUAL
61565: AND
61566: ST_TO_ADDR
// end ;
61567: LD_VAR 0 3
61571: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61572: LD_INT 0
61574: PPUSH
// SetDir ( unit , d ) ;
61575: LD_VAR 0 1
61579: PPUSH
61580: LD_VAR 0 4
61584: PPUSH
61585: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61589: LD_VAR 0 1
61593: PPUSH
61594: LD_VAR 0 2
61598: PPUSH
61599: LD_VAR 0 3
61603: PPUSH
61604: LD_VAR 0 5
61608: PPUSH
61609: CALL_OW 48
// end ;
61613: LD_VAR 0 6
61617: RET
// export function ToNaturalNumber ( number ) ; begin
61618: LD_INT 0
61620: PPUSH
// result := number div 1 ;
61621: LD_ADDR_VAR 0 2
61625: PUSH
61626: LD_VAR 0 1
61630: PUSH
61631: LD_INT 1
61633: DIV
61634: ST_TO_ADDR
// if number < 0 then
61635: LD_VAR 0 1
61639: PUSH
61640: LD_INT 0
61642: LESS
61643: IFFALSE 61653
// result := 0 ;
61645: LD_ADDR_VAR 0 2
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// end ;
61653: LD_VAR 0 2
61657: RET
// export function SortByClass ( units , class ) ; var un ; begin
61658: LD_INT 0
61660: PPUSH
61661: PPUSH
// if not units or not class then
61662: LD_VAR 0 1
61666: NOT
61667: PUSH
61668: LD_VAR 0 2
61672: NOT
61673: OR
61674: IFFALSE 61678
// exit ;
61676: GO 61773
// result := [ ] ;
61678: LD_ADDR_VAR 0 3
61682: PUSH
61683: EMPTY
61684: ST_TO_ADDR
// for un in units do
61685: LD_ADDR_VAR 0 4
61689: PUSH
61690: LD_VAR 0 1
61694: PUSH
61695: FOR_IN
61696: IFFALSE 61771
// if GetClass ( un ) = class then
61698: LD_VAR 0 4
61702: PPUSH
61703: CALL_OW 257
61707: PUSH
61708: LD_VAR 0 2
61712: EQUAL
61713: IFFALSE 61740
// result := Insert ( result , 1 , un ) else
61715: LD_ADDR_VAR 0 3
61719: PUSH
61720: LD_VAR 0 3
61724: PPUSH
61725: LD_INT 1
61727: PPUSH
61728: LD_VAR 0 4
61732: PPUSH
61733: CALL_OW 2
61737: ST_TO_ADDR
61738: GO 61769
// result := Replace ( result , result + 1 , un ) ;
61740: LD_ADDR_VAR 0 3
61744: PUSH
61745: LD_VAR 0 3
61749: PPUSH
61750: LD_VAR 0 3
61754: PUSH
61755: LD_INT 1
61757: PLUS
61758: PPUSH
61759: LD_VAR 0 4
61763: PPUSH
61764: CALL_OW 1
61768: ST_TO_ADDR
61769: GO 61695
61771: POP
61772: POP
// end ;
61773: LD_VAR 0 3
61777: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61778: LD_INT 0
61780: PPUSH
61781: PPUSH
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
// result := [ ] ;
61787: LD_ADDR_VAR 0 4
61791: PUSH
61792: EMPTY
61793: ST_TO_ADDR
// if x - r < 0 then
61794: LD_VAR 0 1
61798: PUSH
61799: LD_VAR 0 3
61803: MINUS
61804: PUSH
61805: LD_INT 0
61807: LESS
61808: IFFALSE 61820
// min_x := 0 else
61810: LD_ADDR_VAR 0 8
61814: PUSH
61815: LD_INT 0
61817: ST_TO_ADDR
61818: GO 61836
// min_x := x - r ;
61820: LD_ADDR_VAR 0 8
61824: PUSH
61825: LD_VAR 0 1
61829: PUSH
61830: LD_VAR 0 3
61834: MINUS
61835: ST_TO_ADDR
// if y - r < 0 then
61836: LD_VAR 0 2
61840: PUSH
61841: LD_VAR 0 3
61845: MINUS
61846: PUSH
61847: LD_INT 0
61849: LESS
61850: IFFALSE 61862
// min_y := 0 else
61852: LD_ADDR_VAR 0 7
61856: PUSH
61857: LD_INT 0
61859: ST_TO_ADDR
61860: GO 61878
// min_y := y - r ;
61862: LD_ADDR_VAR 0 7
61866: PUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 3
61876: MINUS
61877: ST_TO_ADDR
// max_x := x + r ;
61878: LD_ADDR_VAR 0 9
61882: PUSH
61883: LD_VAR 0 1
61887: PUSH
61888: LD_VAR 0 3
61892: PLUS
61893: ST_TO_ADDR
// max_y := y + r ;
61894: LD_ADDR_VAR 0 10
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_VAR 0 3
61908: PLUS
61909: ST_TO_ADDR
// for _x = min_x to max_x do
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: DOUBLE
61916: LD_VAR 0 8
61920: DEC
61921: ST_TO_ADDR
61922: LD_VAR 0 9
61926: PUSH
61927: FOR_TO
61928: IFFALSE 62029
// for _y = min_y to max_y do
61930: LD_ADDR_VAR 0 6
61934: PUSH
61935: DOUBLE
61936: LD_VAR 0 7
61940: DEC
61941: ST_TO_ADDR
61942: LD_VAR 0 10
61946: PUSH
61947: FOR_TO
61948: IFFALSE 62025
// begin if not ValidHex ( _x , _y ) then
61950: LD_VAR 0 5
61954: PPUSH
61955: LD_VAR 0 6
61959: PPUSH
61960: CALL_OW 488
61964: NOT
61965: IFFALSE 61969
// continue ;
61967: GO 61947
// if GetResourceTypeXY ( _x , _y ) then
61969: LD_VAR 0 5
61973: PPUSH
61974: LD_VAR 0 6
61978: PPUSH
61979: CALL_OW 283
61983: IFFALSE 62023
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61985: LD_ADDR_VAR 0 4
61989: PUSH
61990: LD_VAR 0 4
61994: PPUSH
61995: LD_VAR 0 4
61999: PUSH
62000: LD_INT 1
62002: PLUS
62003: PPUSH
62004: LD_VAR 0 5
62008: PUSH
62009: LD_VAR 0 6
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PPUSH
62018: CALL_OW 1
62022: ST_TO_ADDR
// end ;
62023: GO 61947
62025: POP
62026: POP
62027: GO 61927
62029: POP
62030: POP
// end ;
62031: LD_VAR 0 4
62035: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62036: LD_INT 0
62038: PPUSH
62039: PPUSH
62040: PPUSH
62041: PPUSH
62042: PPUSH
62043: PPUSH
62044: PPUSH
62045: PPUSH
// if not units then
62046: LD_VAR 0 1
62050: NOT
62051: IFFALSE 62055
// exit ;
62053: GO 62579
// result := UnitFilter ( units , [ f_ok ] ) ;
62055: LD_ADDR_VAR 0 3
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: LD_INT 50
62067: PUSH
62068: EMPTY
62069: LIST
62070: PPUSH
62071: CALL_OW 72
62075: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62076: LD_ADDR_VAR 0 8
62080: PUSH
62081: LD_VAR 0 1
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PPUSH
62090: CALL_OW 255
62094: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62095: LD_ADDR_VAR 0 10
62099: PUSH
62100: LD_INT 29
62102: PUSH
62103: LD_INT 91
62105: PUSH
62106: LD_INT 49
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// if not result then
62114: LD_VAR 0 3
62118: NOT
62119: IFFALSE 62123
// exit ;
62121: GO 62579
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62123: LD_ADDR_VAR 0 5
62127: PUSH
62128: LD_INT 81
62130: PUSH
62131: LD_VAR 0 8
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PPUSH
62140: CALL_OW 69
62144: ST_TO_ADDR
// for i in result do
62145: LD_ADDR_VAR 0 4
62149: PUSH
62150: LD_VAR 0 3
62154: PUSH
62155: FOR_IN
62156: IFFALSE 62577
// begin tag := GetTag ( i ) + 1 ;
62158: LD_ADDR_VAR 0 9
62162: PUSH
62163: LD_VAR 0 4
62167: PPUSH
62168: CALL_OW 110
62172: PUSH
62173: LD_INT 1
62175: PLUS
62176: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62177: LD_ADDR_VAR 0 7
62181: PUSH
62182: LD_VAR 0 4
62186: PPUSH
62187: CALL_OW 250
62191: PPUSH
62192: LD_VAR 0 4
62196: PPUSH
62197: CALL_OW 251
62201: PPUSH
62202: LD_INT 6
62204: PPUSH
62205: CALL 61778 0 3
62209: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62210: LD_VAR 0 4
62214: PPUSH
62215: CALL_OW 247
62219: PUSH
62220: LD_INT 2
62222: EQUAL
62223: PUSH
62224: LD_VAR 0 7
62228: AND
62229: PUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: CALL_OW 264
62239: PUSH
62240: LD_VAR 0 10
62244: IN
62245: NOT
62246: AND
62247: IFFALSE 62286
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62249: LD_VAR 0 4
62253: PPUSH
62254: LD_VAR 0 7
62258: PUSH
62259: LD_INT 1
62261: ARRAY
62262: PUSH
62263: LD_INT 1
62265: ARRAY
62266: PPUSH
62267: LD_VAR 0 7
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PUSH
62276: LD_INT 2
62278: ARRAY
62279: PPUSH
62280: CALL_OW 116
62284: GO 62575
// if path > tag then
62286: LD_VAR 0 2
62290: PUSH
62291: LD_VAR 0 9
62295: GREATER
62296: IFFALSE 62504
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62298: LD_ADDR_VAR 0 6
62302: PUSH
62303: LD_VAR 0 5
62307: PPUSH
62308: LD_INT 91
62310: PUSH
62311: LD_VAR 0 4
62315: PUSH
62316: LD_INT 8
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: PPUSH
62324: CALL_OW 72
62328: ST_TO_ADDR
// if nearEnemy then
62329: LD_VAR 0 6
62333: IFFALSE 62402
// begin if GetWeapon ( i ) = ru_time_lapser then
62335: LD_VAR 0 4
62339: PPUSH
62340: CALL_OW 264
62344: PUSH
62345: LD_INT 49
62347: EQUAL
62348: IFFALSE 62376
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62350: LD_VAR 0 4
62354: PPUSH
62355: LD_VAR 0 6
62359: PPUSH
62360: LD_VAR 0 4
62364: PPUSH
62365: CALL_OW 74
62369: PPUSH
62370: CALL_OW 112
62374: GO 62400
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62376: LD_VAR 0 4
62380: PPUSH
62381: LD_VAR 0 6
62385: PPUSH
62386: LD_VAR 0 4
62390: PPUSH
62391: CALL_OW 74
62395: PPUSH
62396: CALL_OW 115
// end else
62400: GO 62502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62402: LD_VAR 0 4
62406: PPUSH
62407: LD_VAR 0 2
62411: PUSH
62412: LD_VAR 0 9
62416: ARRAY
62417: PUSH
62418: LD_INT 1
62420: ARRAY
62421: PPUSH
62422: LD_VAR 0 2
62426: PUSH
62427: LD_VAR 0 9
62431: ARRAY
62432: PUSH
62433: LD_INT 2
62435: ARRAY
62436: PPUSH
62437: CALL_OW 297
62441: PUSH
62442: LD_INT 6
62444: GREATER
62445: IFFALSE 62488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62447: LD_VAR 0 4
62451: PPUSH
62452: LD_VAR 0 2
62456: PUSH
62457: LD_VAR 0 9
62461: ARRAY
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PPUSH
62467: LD_VAR 0 2
62471: PUSH
62472: LD_VAR 0 9
62476: ARRAY
62477: PUSH
62478: LD_INT 2
62480: ARRAY
62481: PPUSH
62482: CALL_OW 114
62486: GO 62502
// SetTag ( i , tag ) ;
62488: LD_VAR 0 4
62492: PPUSH
62493: LD_VAR 0 9
62497: PPUSH
62498: CALL_OW 109
// end else
62502: GO 62575
// if enemy then
62504: LD_VAR 0 5
62508: IFFALSE 62575
// begin if GetWeapon ( i ) = ru_time_lapser then
62510: LD_VAR 0 4
62514: PPUSH
62515: CALL_OW 264
62519: PUSH
62520: LD_INT 49
62522: EQUAL
62523: IFFALSE 62551
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62525: LD_VAR 0 4
62529: PPUSH
62530: LD_VAR 0 5
62534: PPUSH
62535: LD_VAR 0 4
62539: PPUSH
62540: CALL_OW 74
62544: PPUSH
62545: CALL_OW 112
62549: GO 62575
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62551: LD_VAR 0 4
62555: PPUSH
62556: LD_VAR 0 5
62560: PPUSH
62561: LD_VAR 0 4
62565: PPUSH
62566: CALL_OW 74
62570: PPUSH
62571: CALL_OW 115
// end ; end ;
62575: GO 62155
62577: POP
62578: POP
// end ;
62579: LD_VAR 0 3
62583: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62584: LD_INT 0
62586: PPUSH
62587: PPUSH
62588: PPUSH
// if not unit or IsInUnit ( unit ) then
62589: LD_VAR 0 1
62593: NOT
62594: PUSH
62595: LD_VAR 0 1
62599: PPUSH
62600: CALL_OW 310
62604: OR
62605: IFFALSE 62609
// exit ;
62607: GO 62700
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62609: LD_ADDR_VAR 0 4
62613: PUSH
62614: LD_VAR 0 1
62618: PPUSH
62619: CALL_OW 250
62623: PPUSH
62624: LD_VAR 0 2
62628: PPUSH
62629: LD_INT 1
62631: PPUSH
62632: CALL_OW 272
62636: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62637: LD_ADDR_VAR 0 5
62641: PUSH
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL_OW 251
62651: PPUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: LD_INT 1
62659: PPUSH
62660: CALL_OW 273
62664: ST_TO_ADDR
// if ValidHex ( x , y ) then
62665: LD_VAR 0 4
62669: PPUSH
62670: LD_VAR 0 5
62674: PPUSH
62675: CALL_OW 488
62679: IFFALSE 62700
// ComTurnXY ( unit , x , y ) ;
62681: LD_VAR 0 1
62685: PPUSH
62686: LD_VAR 0 4
62690: PPUSH
62691: LD_VAR 0 5
62695: PPUSH
62696: CALL_OW 118
// end ;
62700: LD_VAR 0 3
62704: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62705: LD_INT 0
62707: PPUSH
62708: PPUSH
// result := false ;
62709: LD_ADDR_VAR 0 3
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// if not units then
62717: LD_VAR 0 2
62721: NOT
62722: IFFALSE 62726
// exit ;
62724: GO 62771
// for i in units do
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_VAR 0 2
62735: PUSH
62736: FOR_IN
62737: IFFALSE 62769
// if See ( side , i ) then
62739: LD_VAR 0 1
62743: PPUSH
62744: LD_VAR 0 4
62748: PPUSH
62749: CALL_OW 292
62753: IFFALSE 62767
// begin result := true ;
62755: LD_ADDR_VAR 0 3
62759: PUSH
62760: LD_INT 1
62762: ST_TO_ADDR
// exit ;
62763: POP
62764: POP
62765: GO 62771
// end ;
62767: GO 62736
62769: POP
62770: POP
// end ;
62771: LD_VAR 0 3
62775: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62776: LD_INT 0
62778: PPUSH
62779: PPUSH
62780: PPUSH
62781: PPUSH
// if not unit or not points then
62782: LD_VAR 0 1
62786: NOT
62787: PUSH
62788: LD_VAR 0 2
62792: NOT
62793: OR
62794: IFFALSE 62798
// exit ;
62796: GO 62888
// dist := 99999 ;
62798: LD_ADDR_VAR 0 5
62802: PUSH
62803: LD_INT 99999
62805: ST_TO_ADDR
// for i in points do
62806: LD_ADDR_VAR 0 4
62810: PUSH
62811: LD_VAR 0 2
62815: PUSH
62816: FOR_IN
62817: IFFALSE 62886
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62819: LD_ADDR_VAR 0 6
62823: PUSH
62824: LD_VAR 0 1
62828: PPUSH
62829: LD_VAR 0 4
62833: PUSH
62834: LD_INT 1
62836: ARRAY
62837: PPUSH
62838: LD_VAR 0 4
62842: PUSH
62843: LD_INT 2
62845: ARRAY
62846: PPUSH
62847: CALL_OW 297
62851: ST_TO_ADDR
// if tmpDist < dist then
62852: LD_VAR 0 6
62856: PUSH
62857: LD_VAR 0 5
62861: LESS
62862: IFFALSE 62884
// begin result := i ;
62864: LD_ADDR_VAR 0 3
62868: PUSH
62869: LD_VAR 0 4
62873: ST_TO_ADDR
// dist := tmpDist ;
62874: LD_ADDR_VAR 0 5
62878: PUSH
62879: LD_VAR 0 6
62883: ST_TO_ADDR
// end ; end ;
62884: GO 62816
62886: POP
62887: POP
// end ;
62888: LD_VAR 0 3
62892: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62893: LD_INT 0
62895: PPUSH
// uc_side := side ;
62896: LD_ADDR_OWVAR 20
62900: PUSH
62901: LD_VAR 0 1
62905: ST_TO_ADDR
// uc_nation := 3 ;
62906: LD_ADDR_OWVAR 21
62910: PUSH
62911: LD_INT 3
62913: ST_TO_ADDR
// vc_chassis := 25 ;
62914: LD_ADDR_OWVAR 37
62918: PUSH
62919: LD_INT 25
62921: ST_TO_ADDR
// vc_engine := engine_siberite ;
62922: LD_ADDR_OWVAR 39
62926: PUSH
62927: LD_INT 3
62929: ST_TO_ADDR
// vc_control := control_computer ;
62930: LD_ADDR_OWVAR 38
62934: PUSH
62935: LD_INT 3
62937: ST_TO_ADDR
// vc_weapon := 59 ;
62938: LD_ADDR_OWVAR 40
62942: PUSH
62943: LD_INT 59
62945: ST_TO_ADDR
// result := CreateVehicle ;
62946: LD_ADDR_VAR 0 5
62950: PUSH
62951: CALL_OW 45
62955: ST_TO_ADDR
// SetDir ( result , d ) ;
62956: LD_VAR 0 5
62960: PPUSH
62961: LD_VAR 0 4
62965: PPUSH
62966: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62970: LD_VAR 0 5
62974: PPUSH
62975: LD_VAR 0 2
62979: PPUSH
62980: LD_VAR 0 3
62984: PPUSH
62985: LD_INT 0
62987: PPUSH
62988: CALL_OW 48
// end ;
62992: LD_VAR 0 5
62996: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62997: LD_INT 0
62999: PPUSH
63000: PPUSH
63001: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63002: LD_ADDR_VAR 0 2
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63025: LD_VAR 0 1
63029: NOT
63030: PUSH
63031: LD_VAR 0 1
63035: PPUSH
63036: CALL_OW 264
63040: PUSH
63041: LD_INT 12
63043: PUSH
63044: LD_INT 51
63046: PUSH
63047: LD_INT 32
63049: PUSH
63050: LD_INT 89
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: IN
63059: NOT
63060: OR
63061: IFFALSE 63065
// exit ;
63063: GO 63163
// for i := 1 to 3 do
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: DOUBLE
63071: LD_INT 1
63073: DEC
63074: ST_TO_ADDR
63075: LD_INT 3
63077: PUSH
63078: FOR_TO
63079: IFFALSE 63161
// begin tmp := GetCargo ( cargo , i ) ;
63081: LD_ADDR_VAR 0 4
63085: PUSH
63086: LD_VAR 0 1
63090: PPUSH
63091: LD_VAR 0 3
63095: PPUSH
63096: CALL_OW 289
63100: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63101: LD_ADDR_VAR 0 2
63105: PUSH
63106: LD_VAR 0 2
63110: PPUSH
63111: LD_VAR 0 3
63115: PPUSH
63116: LD_VAR 0 4
63120: PPUSH
63121: CALL_OW 1
63125: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 2
63135: PPUSH
63136: LD_INT 4
63138: PPUSH
63139: LD_VAR 0 2
63143: PUSH
63144: LD_INT 4
63146: ARRAY
63147: PUSH
63148: LD_VAR 0 4
63152: PLUS
63153: PPUSH
63154: CALL_OW 1
63158: ST_TO_ADDR
// end ;
63159: GO 63078
63161: POP
63162: POP
// end ;
63163: LD_VAR 0 2
63167: RET
// export function Length ( array ) ; begin
63168: LD_INT 0
63170: PPUSH
// result := array + 0 ;
63171: LD_ADDR_VAR 0 2
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: LD_INT 0
63183: PLUS
63184: ST_TO_ADDR
// end ;
63185: LD_VAR 0 2
63189: RET
// export function PrepareArray ( array ) ; begin
63190: LD_INT 0
63192: PPUSH
// result := array diff 0 ;
63193: LD_ADDR_VAR 0 2
63197: PUSH
63198: LD_VAR 0 1
63202: PUSH
63203: LD_INT 0
63205: DIFF
63206: ST_TO_ADDR
// if not result [ 1 ] then
63207: LD_VAR 0 2
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: NOT
63216: IFFALSE 63236
// result := Delete ( result , 1 ) ;
63218: LD_ADDR_VAR 0 2
63222: PUSH
63223: LD_VAR 0 2
63227: PPUSH
63228: LD_INT 1
63230: PPUSH
63231: CALL_OW 3
63235: ST_TO_ADDR
// end ; end_of_file
63236: LD_VAR 0 2
63240: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63241: LD_VAR 0 1
63245: PPUSH
63246: LD_VAR 0 2
63250: PPUSH
63251: LD_VAR 0 3
63255: PPUSH
63256: LD_VAR 0 4
63260: PPUSH
63261: LD_VAR 0 5
63265: PPUSH
63266: LD_VAR 0 6
63270: PPUSH
63271: CALL 2006 0 6
// end ;
63275: PPOPN 6
63277: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63278: LD_INT 0
63280: PPUSH
// begin if not units then
63281: LD_VAR 0 1
63285: NOT
63286: IFFALSE 63290
// exit ;
63288: GO 63290
// end ;
63290: PPOPN 7
63292: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63293: CALL 1977 0 0
// end ;
63297: PPOPN 1
63299: END
