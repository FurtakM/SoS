// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 83 0 0
// InitGlobalVariables ;
  18: CALL 56969 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 3 , 3 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 3
  60: PUSH
  61: LD_INT 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: LIST
  71: LIST
  72: LIST
  73: PPUSH
  74: CALL 395 0 3
// PrepareHunters ( ) ;
  78: CALL 241 0 0
// end ;
  82: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// if debug then
  94: LD_EXP 1
  98: IFFALSE 133
// begin FogOff ( 1 ) ;
 100: LD_INT 1
 102: PPUSH
 103: CALL_OW 344
// Difficulty := 2 ;
 107: LD_ADDR_OWVAR 67
 111: PUSH
 112: LD_INT 2
 114: ST_TO_ADDR
// hunterClass := 3 ;
 115: LD_ADDR_EXP 2
 119: PUSH
 120: LD_INT 3
 122: ST_TO_ADDR
// animalAmount := 2 ;
 123: LD_ADDR_EXP 4
 127: PUSH
 128: LD_INT 2
 130: ST_TO_ADDR
// end else
 131: GO 172
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 133: LD_ADDR_OWVAR 67
 137: PUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL_OW 426
 145: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 146: LD_ADDR_EXP 2
 150: PUSH
 151: LD_INT 2
 153: PPUSH
 154: CALL_OW 426
 158: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 159: LD_ADDR_EXP 4
 163: PUSH
 164: LD_INT 1
 166: PPUSH
 167: CALL_OW 426
 171: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 3
 176: PUSH
 177: LD_INT 4
 179: PUSH
 180: LD_INT 6
 182: PUSH
 183: LD_INT 8
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// export function PrepareHunters ; var i , un ; begin
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
 245: PPUSH
// for i := 1 to huntersAmount do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 3
 260: PUSH
 261: FOR_TO
 262: IFFALSE 388
// begin uc_side := i ;
 264: LD_ADDR_OWVAR 20
 268: PUSH
 269: LD_VAR 0 2
 273: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 3
 286: MOD
 287: PUSH
 288: LD_INT 1
 290: PLUS
 291: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 292: LD_INT 0
 294: PPUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 5
 300: PUSH
 301: LD_INT 11
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_EXP 2
 313: ARRAY
 314: PPUSH
 315: LD_INT 10
 317: PUSH
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: MUL
 326: MINUS
 327: PPUSH
 328: CALL_OW 380
// un := CreateHuman ;
 332: LD_ADDR_VAR 0 3
 336: PUSH
 337: CALL_OW 44
 341: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 342: LD_ADDR_EXP 6
 346: PUSH
 347: LD_EXP 6
 351: PPUSH
 352: LD_EXP 6
 356: PUSH
 357: LD_INT 1
 359: PLUS
 360: PPUSH
 361: LD_VAR 0 3
 365: PPUSH
 366: CALL_OW 1
 370: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 371: LD_VAR 0 3
 375: PPUSH
 376: LD_INT 3
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: CALL_OW 49
// end ;
 386: GO 261
 388: POP
 389: POP
// end ; end_of_file
 390: LD_VAR 0 1
 394: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
// uc_side = 0 ;
 402: LD_ADDR_OWVAR 20
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// uc_nation = 0 ;
 410: LD_ADDR_OWVAR 21
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 418: LD_ADDR_VAR 0 7
 422: PUSH
 423: LD_INT 12
 425: PUSH
 426: LD_INT 15
 428: PUSH
 429: LD_INT 13
 431: PUSH
 432: LD_INT 18
 434: PUSH
 435: LD_INT 14
 437: PUSH
 438: LD_EXP 91
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// waterClass := [ class_fish , class_frog ] ;
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: LD_INT 20
 458: PUSH
 459: LD_INT 19
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: ST_TO_ADDR
// InitHc_All ( ) ;
 466: CALL_OW 584
// for i := 1 to numbers - 2 do
 470: LD_ADDR_VAR 0 5
 474: PUSH
 475: DOUBLE
 476: LD_INT 1
 478: DEC
 479: ST_TO_ADDR
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 2
 487: MINUS
 488: PUSH
 489: FOR_TO
 490: IFFALSE 631
// begin if numbers [ i ] = 0 then
 492: LD_VAR 0 3
 496: PUSH
 497: LD_VAR 0 5
 501: ARRAY
 502: PUSH
 503: LD_INT 0
 505: EQUAL
 506: IFFALSE 510
// continue ;
 508: GO 489
// hc_class := classes [ i ] ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_VAR 0 7
 519: PUSH
 520: LD_VAR 0 5
 524: ARRAY
 525: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 526: LD_ADDR_OWVAR 29
 530: PUSH
 531: LD_INT 8
 533: PPUSH
 534: LD_INT 12
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 8
 544: PPUSH
 545: LD_INT 12
 547: PPUSH
 548: CALL_OW 12
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 557: LD_ADDR_OWVAR 35
 561: PUSH
 562: LD_INT 5
 564: NEG
 565: PPUSH
 566: LD_INT 5
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_OWVAR 67
 578: PUSH
 579: LD_INT 5
 581: MUL
 582: PLUS
 583: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 584: LD_ADDR_VAR 0 6
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_VAR 0 3
 598: PUSH
 599: LD_VAR 0 5
 603: ARRAY
 604: PUSH
 605: FOR_TO
 606: IFFALSE 627
// PlaceUnitArea ( CreateHuman , area , false ) ;
 608: CALL_OW 44
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
 625: GO 605
 627: POP
 628: POP
// end ;
 629: GO 489
 631: POP
 632: POP
// if not waterArea then
 633: LD_VAR 0 2
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 802
// hc_class := waterClass [ 1 ] ;
 642: LD_ADDR_OWVAR 28
 646: PUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 656: LD_ADDR_OWVAR 29
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 10
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// hc_agressivity := 0 ;
 671: LD_ADDR_OWVAR 35
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 679: LD_ADDR_VAR 0 6
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_VAR 0 3
 693: PUSH
 694: LD_INT 7
 696: ARRAY
 697: PUSH
 698: FOR_TO
 699: IFFALSE 720
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 701: CALL_OW 44
 705: PPUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 49
 718: GO 698
 720: POP
 721: POP
// hc_class := waterClass [ 2 ] ;
 722: LD_ADDR_OWVAR 28
 726: PUSH
 727: LD_VAR 0 8
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 736: LD_ADDR_OWVAR 29
 740: PUSH
 741: LD_INT 10
 743: PUSH
 744: LD_INT 10
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// hc_agressivity := 0 ;
 751: LD_ADDR_OWVAR 35
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// for j := 1 to numbers [ 8 ] do
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: DOUBLE
 765: LD_INT 1
 767: DEC
 768: ST_TO_ADDR
 769: LD_VAR 0 3
 773: PUSH
 774: LD_INT 8
 776: ARRAY
 777: PUSH
 778: FOR_TO
 779: IFFALSE 800
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 781: CALL_OW 44
 785: PPUSH
 786: LD_VAR 0 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
 798: GO 778
 800: POP
 801: POP
// end ; end_of_file
 802: LD_VAR 0 4
 806: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 807: LD_INT 22
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 25
 819: PUSH
 820: LD_INT 15
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: IFFALSE 941
 837: GO 839
 839: DISABLE
 840: LD_INT 0
 842: PPUSH
// begin enable ;
 843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 844: LD_ADDR_VAR 0 1
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 25
 861: PUSH
 862: LD_INT 15
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: PUSH
 878: FOR_IN
 879: IFFALSE 939
// if GetLives ( i ) < 1000 then
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 256
 890: PUSH
 891: LD_INT 1000
 893: LESS
 894: IFFALSE 937
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_VAR 0 1
 927: PPUSH
 928: CALL_OW 74
 932: PPUSH
 933: CALL_OW 115
 937: GO 878
 939: POP
 940: POP
// end ;
 941: PPOPN 1
 943: END
// every 3 do var i , enemy , x , y , d ;
 944: GO 946
 946: DISABLE
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
// begin enable ;
 954: ENABLE
// for i := 2 to huntersAmount do
 955: LD_ADDR_VAR 0 1
 959: PUSH
 960: DOUBLE
 961: LD_INT 2
 963: DEC
 964: ST_TO_ADDR
 965: LD_EXP 3
 969: PUSH
 970: FOR_TO
 971: IFFALSE 1310
// begin if not HasTask ( hunters [ i ] ) then
 973: LD_EXP 6
 977: PUSH
 978: LD_VAR 0 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 314
 988: NOT
 989: IFFALSE 1308
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: LD_INT 22
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PPUSH
1011: LD_EXP 6
1015: PUSH
1016: LD_VAR 0 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 74
1026: ST_TO_ADDR
// if not enemy then
1027: LD_VAR 0 2
1031: NOT
1032: IFFALSE 1036
// continue ;
1034: GO 970
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
1036: LD_EXP 6
1040: PUSH
1041: LD_VAR 0 1
1045: ARRAY
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: CALL_OW 296
1056: PUSH
1057: LD_INT 17
1059: LESS
1060: IFFALSE 1163
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
1062: LD_EXP 6
1066: PUSH
1067: LD_VAR 0 1
1071: ARRAY
1072: PPUSH
1073: CALL_OW 257
1077: PUSH
1078: LD_INT 11
1080: EQUAL
1081: IFFALSE 1141
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
1083: LD_VAR 0 2
1087: PPUSH
1088: CALL_OW 257
1092: PUSH
1093: LD_INT 19
1095: PUSH
1096: LD_INT 20
1098: PUSH
1099: LD_INT 13
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: IN
1107: IFFALSE 1126
// ComCarabine ( hunters [ i ] ) else
1109: LD_EXP 6
1113: PUSH
1114: LD_VAR 0 1
1118: ARRAY
1119: PPUSH
1120: CALL_OW 162
1124: GO 1141
// ComSabre ( hunters [ i ] ) ;
1126: LD_EXP 6
1130: PUSH
1131: LD_VAR 0 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1141: LD_EXP 6
1145: PUSH
1146: LD_VAR 0 1
1150: ARRAY
1151: PPUSH
1152: LD_VAR 0 2
1156: PPUSH
1157: CALL_OW 115
// end else
1161: GO 1308
// begin d := rand ( 0 , 5 ) ;
1163: LD_ADDR_VAR 0 5
1167: PUSH
1168: LD_INT 0
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 12
1178: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: LD_EXP 6
1188: PUSH
1189: LD_VAR 0 1
1193: ARRAY
1194: PPUSH
1195: CALL_OW 250
1199: PPUSH
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_INT 8
1207: PPUSH
1208: CALL_OW 272
1212: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_VAR 0 1
1227: ARRAY
1228: PPUSH
1229: CALL_OW 251
1233: PPUSH
1234: LD_VAR 0 5
1238: PPUSH
1239: LD_INT 8
1241: PPUSH
1242: CALL_OW 273
1246: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 488
1261: PUSH
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: CALL_OW 428
1276: PUSH
1277: LD_INT 0
1279: EQUAL
1280: AND
1281: IFFALSE 1308
// ComMoveXY ( hunters [ i ] , x , y ) ;
1283: LD_EXP 6
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_VAR 0 4
1303: PPUSH
1304: CALL_OW 111
// end ; end ; end ;
1308: GO 970
1310: POP
1311: POP
// end ; end_of_file
1312: PPOPN 5
1314: END
// on UnitGoesToRed ( un ) do var i ;
1315: LD_INT 0
1317: PPUSH
// begin if GetSide ( un ) = 1 then
1318: LD_VAR 0 1
1322: PPUSH
1323: CALL_OW 255
1327: PUSH
1328: LD_INT 1
1330: EQUAL
1331: IFFALSE 1340
// YouLost ( hunt2 ) ;
1333: LD_STRING hunt2
1335: PPUSH
1336: CALL_OW 104
// if GetSide ( un ) > 1 then
1340: LD_VAR 0 1
1344: PPUSH
1345: CALL_OW 255
1349: PUSH
1350: LD_INT 1
1352: GREATER
1353: IFFALSE 1406
// begin for i := 1 to 6 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: DOUBLE
1361: LD_INT 1
1363: DEC
1364: ST_TO_ADDR
1365: LD_INT 6
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1392
// begin wait ( 0 0$1 ) ;
1371: LD_INT 35
1373: PPUSH
1374: CALL_OW 67
// SetLives ( un , 249 ) ;
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 249
1385: PPUSH
1386: CALL_OW 234
// end ;
1390: GO 1368
1392: POP
1393: POP
// SetLives ( un , 1000 ) ;
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 1000
1401: PPUSH
1402: CALL_OW 234
// end ; end ;
1406: PPOPN 2
1408: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1409: LD_VAR 0 1
1413: PUSH
1414: LD_INT 1
1416: EQUAL
1417: PUSH
1418: LD_VAR 0 2
1422: PUSH
1423: LD_INT 1
1425: GREATER
1426: AND
1427: IFFALSE 1436
// YouLost ( hunt1 ) ;
1429: LD_STRING hunt1
1431: PPUSH
1432: CALL_OW 104
// end ;
1436: PPOPN 2
1438: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1439: LD_INT 0
1441: PPUSH
// begin point := 0 ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1450: LD_VAR 0 1
1454: PPUSH
1455: CALL_OW 257
1459: PUSH
1460: LD_INT 20
1462: DOUBLE
1463: EQUAL
1464: IFTRUE 1468
1466: GO 1479
1468: POP
// point := 10 ; class_horse :
1469: LD_ADDR_VAR 0 4
1473: PUSH
1474: LD_INT 10
1476: ST_TO_ADDR
1477: GO 1615
1479: LD_EXP 91
1483: DOUBLE
1484: EQUAL
1485: IFTRUE 1489
1487: GO 1500
1489: POP
// point := 10 ; class_baggie :
1490: LD_ADDR_VAR 0 4
1494: PUSH
1495: LD_INT 10
1497: ST_TO_ADDR
1498: GO 1615
1500: LD_INT 13
1502: DOUBLE
1503: EQUAL
1504: IFTRUE 1508
1506: GO 1519
1508: POP
// point := 5 ; class_phororhacos :
1509: LD_ADDR_VAR 0 4
1513: PUSH
1514: LD_INT 5
1516: ST_TO_ADDR
1517: GO 1615
1519: LD_INT 18
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1538
1527: POP
// point := 10 ; class_tiger :
1528: LD_ADDR_VAR 0 4
1532: PUSH
1533: LD_INT 10
1535: ST_TO_ADDR
1536: GO 1615
1538: LD_INT 14
1540: DOUBLE
1541: EQUAL
1542: IFTRUE 1546
1544: GO 1557
1546: POP
// point := 20 ; class_apeman :
1547: LD_ADDR_VAR 0 4
1551: PUSH
1552: LD_INT 20
1554: ST_TO_ADDR
1555: GO 1615
1557: LD_INT 12
1559: DOUBLE
1560: EQUAL
1561: IFTRUE 1565
1563: GO 1576
1565: POP
// point := 30 ; class_apeman_soldier :
1566: LD_ADDR_VAR 0 4
1570: PUSH
1571: LD_INT 30
1573: ST_TO_ADDR
1574: GO 1615
1576: LD_INT 15
1578: DOUBLE
1579: EQUAL
1580: IFTRUE 1584
1582: GO 1595
1584: POP
// point := 50 ; class_frog :
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: LD_INT 50
1592: ST_TO_ADDR
1593: GO 1615
1595: LD_INT 19
1597: DOUBLE
1598: EQUAL
1599: IFTRUE 1603
1601: GO 1614
1603: POP
// point := 10 ; end ;
1604: LD_ADDR_VAR 0 4
1608: PUSH
1609: LD_INT 10
1611: ST_TO_ADDR
1612: GO 1615
1614: POP
// if point then
1615: LD_VAR 0 4
1619: IFFALSE 1658
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1621: LD_ADDR_EXP 5
1625: PUSH
1626: LD_EXP 5
1630: PPUSH
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_EXP 5
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PUSH
1647: LD_VAR 0 4
1651: PLUS
1652: PPUSH
1653: CALL_OW 1
1657: ST_TO_ADDR
// end ;
1658: PPOPN 4
1660: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1661: LD_INT 22
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PPUSH
1671: CALL_OW 69
1675: PUSH
1676: LD_INT 10
1678: LESS
1679: IFFALSE 1793
1681: GO 1683
1683: DISABLE
// begin enable ;
1684: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 0 , 2 ) ] ) ;
1685: LD_INT 2
1687: PPUSH
1688: LD_INT 1
1690: PPUSH
1691: LD_INT 0
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: CALL_OW 12
1701: PUSH
1702: LD_INT 0
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: CALL_OW 12
1712: PUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 4
1718: PPUSH
1719: CALL_OW 12
1723: PUSH
1724: LD_INT 2
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: PUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: CALL_OW 12
1745: PUSH
1746: LD_INT 0
1748: PPUSH
1749: LD_INT 2
1751: PPUSH
1752: CALL_OW 12
1756: PUSH
1757: LD_INT 0
1759: PPUSH
1760: LD_INT 4
1762: PPUSH
1763: CALL_OW 12
1767: PUSH
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 2
1773: PPUSH
1774: CALL_OW 12
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PPUSH
1789: CALL 395 0 3
// end ;
1793: END
// every 0 0$1 do var i ;
1794: GO 1796
1796: DISABLE
1797: LD_INT 0
1799: PPUSH
// begin enable ;
1800: ENABLE
// display_strings := [ ] ;
1801: LD_ADDR_OWVAR 47
1805: PUSH
1806: EMPTY
1807: ST_TO_ADDR
// for i := 1 to huntersAmount do
1808: LD_ADDR_VAR 0 1
1812: PUSH
1813: DOUBLE
1814: LD_INT 1
1816: DEC
1817: ST_TO_ADDR
1818: LD_EXP 3
1822: PUSH
1823: FOR_TO
1824: IFFALSE 1958
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1826: LD_ADDR_OWVAR 47
1830: PUSH
1831: LD_OWVAR 47
1835: PUSH
1836: LD_STRING #player
1838: PUSH
1839: LD_VAR 0 1
1843: STR
1844: PUSH
1845: LD_VAR 0 1
1849: PUSH
1850: LD_EXP 5
1854: PUSH
1855: LD_VAR 0 1
1859: ARRAY
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: ADD
1866: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1867: LD_EXP 5
1871: PUSH
1872: LD_VAR 0 1
1876: ARRAY
1877: PUSH
1878: LD_INT 750
1880: PUSH
1881: LD_INT 1250
1883: PUSH
1884: LD_INT 2000
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_OWVAR 67
1896: ARRAY
1897: GREATEREQUAL
1898: IFFALSE 1956
// begin if i = 1 then
1900: LD_VAR 0 1
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: IFFALSE 1949
// begin DialogueOn ;
1910: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1914: LD_STRING ACH_HUNT
1916: PPUSH
1917: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1921: LD_ADDR_OWVAR 47
1925: PUSH
1926: LD_STRING #hunting-win
1928: PUSH
1929: EMPTY
1930: LIST
1931: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1932: LD_INT 175
1934: PPUSH
1935: CALL_OW 68
// YouWin ;
1939: CALL_OW 103
// DialogueOff ;
1943: CALL_OW 7
// end else
1947: GO 1956
// YouLost ( hunt3 ) ;
1949: LD_STRING hunt3
1951: PPUSH
1952: CALL_OW 104
// end ; end ;
1956: GO 1823
1958: POP
1959: POP
// end ; end_of_file end_of_file
1960: PPOPN 1
1962: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1963: LD_INT 0
1965: PPUSH
// if p2 = 100 then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 100
1973: EQUAL
1974: IFFALSE 2923
// begin if not StreamModeActive then
1976: LD_EXP 7
1980: NOT
1981: IFFALSE 1991
// StreamModeActive := true ;
1983: LD_ADDR_EXP 7
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if p3 = 0 then
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 0
1998: EQUAL
1999: IFFALSE 2005
// InitStreamMode ;
2001: CALL 3083 0 0
// if p3 = 1 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 1
2012: EQUAL
2013: IFFALSE 2023
// sRocket := true ;
2015: LD_ADDR_EXP 12
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// if p3 = 2 then
2023: LD_VAR 0 3
2027: PUSH
2028: LD_INT 2
2030: EQUAL
2031: IFFALSE 2041
// sSpeed := true ;
2033: LD_ADDR_EXP 11
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// if p3 = 3 then
2041: LD_VAR 0 3
2045: PUSH
2046: LD_INT 3
2048: EQUAL
2049: IFFALSE 2059
// sEngine := true ;
2051: LD_ADDR_EXP 13
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 4 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 4
2066: EQUAL
2067: IFFALSE 2077
// sSpec := true ;
2069: LD_ADDR_EXP 10
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// if p3 = 5 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 5
2084: EQUAL
2085: IFFALSE 2095
// sLevel := true ;
2087: LD_ADDR_EXP 14
2091: PUSH
2092: LD_INT 1
2094: ST_TO_ADDR
// if p3 = 6 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 6
2102: EQUAL
2103: IFFALSE 2113
// sArmoury := true ;
2105: LD_ADDR_EXP 15
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// if p3 = 7 then
2113: LD_VAR 0 3
2117: PUSH
2118: LD_INT 7
2120: EQUAL
2121: IFFALSE 2131
// sRadar := true ;
2123: LD_ADDR_EXP 16
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// if p3 = 8 then
2131: LD_VAR 0 3
2135: PUSH
2136: LD_INT 8
2138: EQUAL
2139: IFFALSE 2149
// sBunker := true ;
2141: LD_ADDR_EXP 17
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if p3 = 9 then
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 9
2156: EQUAL
2157: IFFALSE 2167
// sHack := true ;
2159: LD_ADDR_EXP 18
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// if p3 = 10 then
2167: LD_VAR 0 3
2171: PUSH
2172: LD_INT 10
2174: EQUAL
2175: IFFALSE 2185
// sFire := true ;
2177: LD_ADDR_EXP 19
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// if p3 = 11 then
2185: LD_VAR 0 3
2189: PUSH
2190: LD_INT 11
2192: EQUAL
2193: IFFALSE 2203
// sRefresh := true ;
2195: LD_ADDR_EXP 20
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// if p3 = 12 then
2203: LD_VAR 0 3
2207: PUSH
2208: LD_INT 12
2210: EQUAL
2211: IFFALSE 2221
// sExp := true ;
2213: LD_ADDR_EXP 21
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// if p3 = 13 then
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 13
2228: EQUAL
2229: IFFALSE 2239
// sDepot := true ;
2231: LD_ADDR_EXP 22
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// if p3 = 14 then
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 14
2246: EQUAL
2247: IFFALSE 2257
// sFlag := true ;
2249: LD_ADDR_EXP 23
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// if p3 = 15 then
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 15
2264: EQUAL
2265: IFFALSE 2275
// sKamikadze := true ;
2267: LD_ADDR_EXP 31
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// if p3 = 16 then
2275: LD_VAR 0 3
2279: PUSH
2280: LD_INT 16
2282: EQUAL
2283: IFFALSE 2293
// sTroll := true ;
2285: LD_ADDR_EXP 32
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// if p3 = 17 then
2293: LD_VAR 0 3
2297: PUSH
2298: LD_INT 17
2300: EQUAL
2301: IFFALSE 2311
// sSlow := true ;
2303: LD_ADDR_EXP 33
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// if p3 = 18 then
2311: LD_VAR 0 3
2315: PUSH
2316: LD_INT 18
2318: EQUAL
2319: IFFALSE 2329
// sLack := true ;
2321: LD_ADDR_EXP 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// if p3 = 19 then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 19
2336: EQUAL
2337: IFFALSE 2347
// sTank := true ;
2339: LD_ADDR_EXP 36
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// if p3 = 20 then
2347: LD_VAR 0 3
2351: PUSH
2352: LD_INT 20
2354: EQUAL
2355: IFFALSE 2365
// sRemote := true ;
2357: LD_ADDR_EXP 37
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// if p3 = 21 then
2365: LD_VAR 0 3
2369: PUSH
2370: LD_INT 21
2372: EQUAL
2373: IFFALSE 2383
// sPowell := true ;
2375: LD_ADDR_EXP 38
2379: PUSH
2380: LD_INT 1
2382: ST_TO_ADDR
// if p3 = 22 then
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 22
2390: EQUAL
2391: IFFALSE 2401
// sTeleport := true ;
2393: LD_ADDR_EXP 41
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// if p3 = 23 then
2401: LD_VAR 0 3
2405: PUSH
2406: LD_INT 23
2408: EQUAL
2409: IFFALSE 2419
// sOilTower := true ;
2411: LD_ADDR_EXP 43
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// if p3 = 24 then
2419: LD_VAR 0 3
2423: PUSH
2424: LD_INT 24
2426: EQUAL
2427: IFFALSE 2437
// sShovel := true ;
2429: LD_ADDR_EXP 44
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// if p3 = 25 then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 25
2444: EQUAL
2445: IFFALSE 2455
// sSheik := true ;
2447: LD_ADDR_EXP 45
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// if p3 = 26 then
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 26
2462: EQUAL
2463: IFFALSE 2473
// sEarthquake := true ;
2465: LD_ADDR_EXP 47
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// if p3 = 27 then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 27
2480: EQUAL
2481: IFFALSE 2491
// sAI := true ;
2483: LD_ADDR_EXP 48
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// if p3 = 28 then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 28
2498: EQUAL
2499: IFFALSE 2509
// sCargo := true ;
2501: LD_ADDR_EXP 51
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// if p3 = 29 then
2509: LD_VAR 0 3
2513: PUSH
2514: LD_INT 29
2516: EQUAL
2517: IFFALSE 2527
// sDLaser := true ;
2519: LD_ADDR_EXP 52
2523: PUSH
2524: LD_INT 1
2526: ST_TO_ADDR
// if p3 = 30 then
2527: LD_VAR 0 3
2531: PUSH
2532: LD_INT 30
2534: EQUAL
2535: IFFALSE 2545
// sExchange := true ;
2537: LD_ADDR_EXP 53
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// if p3 = 31 then
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 31
2552: EQUAL
2553: IFFALSE 2563
// sFac := true ;
2555: LD_ADDR_EXP 54
2559: PUSH
2560: LD_INT 1
2562: ST_TO_ADDR
// if p3 = 32 then
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 32
2570: EQUAL
2571: IFFALSE 2581
// sPower := true ;
2573: LD_ADDR_EXP 55
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// if p3 = 33 then
2581: LD_VAR 0 3
2585: PUSH
2586: LD_INT 33
2588: EQUAL
2589: IFFALSE 2599
// sRandom := true ;
2591: LD_ADDR_EXP 56
2595: PUSH
2596: LD_INT 1
2598: ST_TO_ADDR
// if p3 = 34 then
2599: LD_VAR 0 3
2603: PUSH
2604: LD_INT 34
2606: EQUAL
2607: IFFALSE 2617
// sShield := true ;
2609: LD_ADDR_EXP 57
2613: PUSH
2614: LD_INT 1
2616: ST_TO_ADDR
// if p3 = 35 then
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 35
2624: EQUAL
2625: IFFALSE 2635
// sTime := true ;
2627: LD_ADDR_EXP 58
2631: PUSH
2632: LD_INT 1
2634: ST_TO_ADDR
// if p3 = 36 then
2635: LD_VAR 0 3
2639: PUSH
2640: LD_INT 36
2642: EQUAL
2643: IFFALSE 2653
// sTools := true ;
2645: LD_ADDR_EXP 59
2649: PUSH
2650: LD_INT 1
2652: ST_TO_ADDR
// if p3 = 101 then
2653: LD_VAR 0 3
2657: PUSH
2658: LD_INT 101
2660: EQUAL
2661: IFFALSE 2671
// sSold := true ;
2663: LD_ADDR_EXP 24
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// if p3 = 102 then
2671: LD_VAR 0 3
2675: PUSH
2676: LD_INT 102
2678: EQUAL
2679: IFFALSE 2689
// sDiff := true ;
2681: LD_ADDR_EXP 25
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// if p3 = 103 then
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 103
2696: EQUAL
2697: IFFALSE 2707
// sFog := true ;
2699: LD_ADDR_EXP 28
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// if p3 = 104 then
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 104
2714: EQUAL
2715: IFFALSE 2725
// sReset := true ;
2717: LD_ADDR_EXP 29
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// if p3 = 105 then
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 105
2732: EQUAL
2733: IFFALSE 2743
// sSun := true ;
2735: LD_ADDR_EXP 30
2739: PUSH
2740: LD_INT 1
2742: ST_TO_ADDR
// if p3 = 106 then
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 106
2750: EQUAL
2751: IFFALSE 2761
// sTiger := true ;
2753: LD_ADDR_EXP 26
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// if p3 = 107 then
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 107
2768: EQUAL
2769: IFFALSE 2779
// sBomb := true ;
2771: LD_ADDR_EXP 27
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// if p3 = 108 then
2779: LD_VAR 0 3
2783: PUSH
2784: LD_INT 108
2786: EQUAL
2787: IFFALSE 2797
// sWound := true ;
2789: LD_ADDR_EXP 35
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// if p3 = 109 then
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 109
2804: EQUAL
2805: IFFALSE 2815
// sBetray := true ;
2807: LD_ADDR_EXP 39
2811: PUSH
2812: LD_INT 1
2814: ST_TO_ADDR
// if p3 = 110 then
2815: LD_VAR 0 3
2819: PUSH
2820: LD_INT 110
2822: EQUAL
2823: IFFALSE 2833
// sContamin := true ;
2825: LD_ADDR_EXP 40
2829: PUSH
2830: LD_INT 1
2832: ST_TO_ADDR
// if p3 = 111 then
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 111
2840: EQUAL
2841: IFFALSE 2851
// sOil := true ;
2843: LD_ADDR_EXP 42
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// if p3 = 112 then
2851: LD_VAR 0 3
2855: PUSH
2856: LD_INT 112
2858: EQUAL
2859: IFFALSE 2869
// sStu := true ;
2861: LD_ADDR_EXP 46
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// if p3 = 113 then
2869: LD_VAR 0 3
2873: PUSH
2874: LD_INT 113
2876: EQUAL
2877: IFFALSE 2887
// sBazooka := true ;
2879: LD_ADDR_EXP 49
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// if p3 = 114 then
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 114
2894: EQUAL
2895: IFFALSE 2905
// sMortar := true ;
2897: LD_ADDR_EXP 50
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// if p3 = 115 then
2905: LD_VAR 0 3
2909: PUSH
2910: LD_INT 115
2912: EQUAL
2913: IFFALSE 2923
// sRanger := true ;
2915: LD_ADDR_EXP 60
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// end ; if p2 = 101 then
2923: LD_VAR 0 2
2927: PUSH
2928: LD_INT 101
2930: EQUAL
2931: IFFALSE 3059
// begin case p3 of 1 :
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2953
2946: POP
// hHackUnlimitedResources ; 2 :
2947: CALL 14096 0 0
2951: GO 3059
2953: LD_INT 2
2955: DOUBLE
2956: EQUAL
2957: IFTRUE 2961
2959: GO 2968
2961: POP
// hHackSetLevel10 ; 3 :
2962: CALL 14229 0 0
2966: GO 3059
2968: LD_INT 3
2970: DOUBLE
2971: EQUAL
2972: IFTRUE 2976
2974: GO 2983
2976: POP
// hHackSetLevel10YourUnits ; 4 :
2977: CALL 14314 0 0
2981: GO 3059
2983: LD_INT 4
2985: DOUBLE
2986: EQUAL
2987: IFTRUE 2991
2989: GO 2998
2991: POP
// hHackInvincible ; 5 :
2992: CALL 14762 0 0
2996: GO 3059
2998: LD_INT 5
3000: DOUBLE
3001: EQUAL
3002: IFTRUE 3006
3004: GO 3013
3006: POP
// hHackInvisible ; 6 :
3007: CALL 14873 0 0
3011: GO 3059
3013: LD_INT 6
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3028
3021: POP
// hHackChangeYourSide ; 7 :
3022: CALL 14930 0 0
3026: GO 3059
3028: LD_INT 7
3030: DOUBLE
3031: EQUAL
3032: IFTRUE 3036
3034: GO 3043
3036: POP
// hHackChangeUnitSide ; 8 :
3037: CALL 14972 0 0
3041: GO 3059
3043: LD_INT 8
3045: DOUBLE
3046: EQUAL
3047: IFTRUE 3051
3049: GO 3058
3051: POP
// hHackFog ; end ;
3052: CALL 15073 0 0
3056: GO 3059
3058: POP
// end ; end ;
3059: LD_VAR 0 7
3063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3064: GO 3066
3066: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3067: LD_STRING initStreamRollete();
3069: PPUSH
3070: CALL_OW 559
// InitStreamMode ;
3074: CALL 3083 0 0
// DefineStreamItems ( ) ;
3078: CALL 3523 0 0
// end ;
3082: END
// function InitStreamMode ; begin
3083: LD_INT 0
3085: PPUSH
// streamModeActive := false ;
3086: LD_ADDR_EXP 7
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// normalCounter := 36 ;
3094: LD_ADDR_EXP 8
3098: PUSH
3099: LD_INT 36
3101: ST_TO_ADDR
// hardcoreCounter := 16 ;
3102: LD_ADDR_EXP 9
3106: PUSH
3107: LD_INT 16
3109: ST_TO_ADDR
// sRocket := false ;
3110: LD_ADDR_EXP 12
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sSpeed := false ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sEngine := false ;
3126: LD_ADDR_EXP 13
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sSpec := false ;
3134: LD_ADDR_EXP 10
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sLevel := false ;
3142: LD_ADDR_EXP 14
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sArmoury := false ;
3150: LD_ADDR_EXP 15
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sRadar := false ;
3158: LD_ADDR_EXP 16
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sBunker := false ;
3166: LD_ADDR_EXP 17
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sHack := false ;
3174: LD_ADDR_EXP 18
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sFire := false ;
3182: LD_ADDR_EXP 19
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sRefresh := false ;
3190: LD_ADDR_EXP 20
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sExp := false ;
3198: LD_ADDR_EXP 21
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sDepot := false ;
3206: LD_ADDR_EXP 22
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sFlag := false ;
3214: LD_ADDR_EXP 23
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sKamikadze := false ;
3222: LD_ADDR_EXP 31
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sTroll := false ;
3230: LD_ADDR_EXP 32
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sSlow := false ;
3238: LD_ADDR_EXP 33
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sLack := false ;
3246: LD_ADDR_EXP 34
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sTank := false ;
3254: LD_ADDR_EXP 36
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sRemote := false ;
3262: LD_ADDR_EXP 37
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sPowell := false ;
3270: LD_ADDR_EXP 38
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sTeleport := false ;
3278: LD_ADDR_EXP 41
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sOilTower := false ;
3286: LD_ADDR_EXP 43
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sShovel := false ;
3294: LD_ADDR_EXP 44
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sSheik := false ;
3302: LD_ADDR_EXP 45
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sEarthquake := false ;
3310: LD_ADDR_EXP 47
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sAI := false ;
3318: LD_ADDR_EXP 48
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sCargo := false ;
3326: LD_ADDR_EXP 51
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sDLaser := false ;
3334: LD_ADDR_EXP 52
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sExchange := false ;
3342: LD_ADDR_EXP 53
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sFac := false ;
3350: LD_ADDR_EXP 54
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sPower := false ;
3358: LD_ADDR_EXP 55
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sRandom := false ;
3366: LD_ADDR_EXP 56
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sShield := false ;
3374: LD_ADDR_EXP 57
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTime := false ;
3382: LD_ADDR_EXP 58
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sTools := false ;
3390: LD_ADDR_EXP 59
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sSold := false ;
3398: LD_ADDR_EXP 24
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sDiff := false ;
3406: LD_ADDR_EXP 25
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sFog := false ;
3414: LD_ADDR_EXP 28
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sReset := false ;
3422: LD_ADDR_EXP 29
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sSun := false ;
3430: LD_ADDR_EXP 30
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sTiger := false ;
3438: LD_ADDR_EXP 26
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sBomb := false ;
3446: LD_ADDR_EXP 27
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sWound := false ;
3454: LD_ADDR_EXP 35
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sBetray := false ;
3462: LD_ADDR_EXP 39
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sContamin := false ;
3470: LD_ADDR_EXP 40
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sOil := false ;
3478: LD_ADDR_EXP 42
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sStu := false ;
3486: LD_ADDR_EXP 46
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sBazooka := false ;
3494: LD_ADDR_EXP 49
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sMortar := false ;
3502: LD_ADDR_EXP 50
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// sRanger := false ;
3510: LD_ADDR_EXP 60
3514: PUSH
3515: LD_INT 0
3517: ST_TO_ADDR
// end ;
3518: LD_VAR 0 1
3522: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
3529: PPUSH
// result := [ ] ;
3530: LD_ADDR_VAR 0 1
3534: PUSH
3535: EMPTY
3536: ST_TO_ADDR
// if campaign_id = 1 then
3537: LD_OWVAR 69
3541: PUSH
3542: LD_INT 1
3544: EQUAL
3545: IFFALSE 6483
// begin case mission_number of 1 :
3547: LD_OWVAR 70
3551: PUSH
3552: LD_INT 1
3554: DOUBLE
3555: EQUAL
3556: IFTRUE 3560
3558: GO 3624
3560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3561: LD_ADDR_VAR 0 1
3565: PUSH
3566: LD_INT 2
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 11
3574: PUSH
3575: LD_INT 12
3577: PUSH
3578: LD_INT 15
3580: PUSH
3581: LD_INT 16
3583: PUSH
3584: LD_INT 22
3586: PUSH
3587: LD_INT 23
3589: PUSH
3590: LD_INT 26
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 101
3606: PUSH
3607: LD_INT 102
3609: PUSH
3610: LD_INT 106
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: LIST
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: ST_TO_ADDR
3622: GO 6481
3624: LD_INT 2
3626: DOUBLE
3627: EQUAL
3628: IFTRUE 3632
3630: GO 3704
3632: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3633: LD_ADDR_VAR 0 1
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: LD_INT 4
3643: PUSH
3644: LD_INT 11
3646: PUSH
3647: LD_INT 12
3649: PUSH
3650: LD_INT 15
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_INT 23
3661: PUSH
3662: LD_INT 26
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 101
3678: PUSH
3679: LD_INT 102
3681: PUSH
3682: LD_INT 105
3684: PUSH
3685: LD_INT 106
3687: PUSH
3688: LD_INT 108
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: ST_TO_ADDR
3702: GO 6481
3704: LD_INT 3
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3712
3710: GO 3788
3712: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3713: LD_ADDR_VAR 0 1
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: LD_INT 5
3726: PUSH
3727: LD_INT 11
3729: PUSH
3730: LD_INT 12
3732: PUSH
3733: LD_INT 15
3735: PUSH
3736: LD_INT 16
3738: PUSH
3739: LD_INT 22
3741: PUSH
3742: LD_INT 26
3744: PUSH
3745: LD_INT 36
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 101
3762: PUSH
3763: LD_INT 102
3765: PUSH
3766: LD_INT 105
3768: PUSH
3769: LD_INT 106
3771: PUSH
3772: LD_INT 108
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: ST_TO_ADDR
3786: GO 6481
3788: LD_INT 4
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3880
3796: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3797: LD_ADDR_VAR 0 1
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 8
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 12
3819: PUSH
3820: LD_INT 15
3822: PUSH
3823: LD_INT 16
3825: PUSH
3826: LD_INT 22
3828: PUSH
3829: LD_INT 23
3831: PUSH
3832: LD_INT 26
3834: PUSH
3835: LD_INT 36
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 101
3854: PUSH
3855: LD_INT 102
3857: PUSH
3858: LD_INT 105
3860: PUSH
3861: LD_INT 106
3863: PUSH
3864: LD_INT 108
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: ST_TO_ADDR
3878: GO 6481
3880: LD_INT 5
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 3988
3888: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3889: LD_ADDR_VAR 0 1
3893: PUSH
3894: LD_INT 2
3896: PUSH
3897: LD_INT 4
3899: PUSH
3900: LD_INT 5
3902: PUSH
3903: LD_INT 6
3905: PUSH
3906: LD_INT 8
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: LD_INT 12
3914: PUSH
3915: LD_INT 15
3917: PUSH
3918: LD_INT 16
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 23
3926: PUSH
3927: LD_INT 25
3929: PUSH
3930: LD_INT 26
3932: PUSH
3933: LD_INT 36
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 101
3954: PUSH
3955: LD_INT 102
3957: PUSH
3958: LD_INT 105
3960: PUSH
3961: LD_INT 106
3963: PUSH
3964: LD_INT 108
3966: PUSH
3967: LD_INT 109
3969: PUSH
3970: LD_INT 112
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: ST_TO_ADDR
3986: GO 6481
3988: LD_INT 6
3990: DOUBLE
3991: EQUAL
3992: IFTRUE 3996
3994: GO 4116
3996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3997: LD_ADDR_VAR 0 1
4001: PUSH
4002: LD_INT 2
4004: PUSH
4005: LD_INT 4
4007: PUSH
4008: LD_INT 5
4010: PUSH
4011: LD_INT 6
4013: PUSH
4014: LD_INT 8
4016: PUSH
4017: LD_INT 11
4019: PUSH
4020: LD_INT 12
4022: PUSH
4023: LD_INT 15
4025: PUSH
4026: LD_INT 16
4028: PUSH
4029: LD_INT 20
4031: PUSH
4032: LD_INT 21
4034: PUSH
4035: LD_INT 22
4037: PUSH
4038: LD_INT 23
4040: PUSH
4041: LD_INT 25
4043: PUSH
4044: LD_INT 26
4046: PUSH
4047: LD_INT 30
4049: PUSH
4050: LD_INT 31
4052: PUSH
4053: LD_INT 32
4055: PUSH
4056: LD_INT 36
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 101
4082: PUSH
4083: LD_INT 102
4085: PUSH
4086: LD_INT 105
4088: PUSH
4089: LD_INT 106
4091: PUSH
4092: LD_INT 108
4094: PUSH
4095: LD_INT 109
4097: PUSH
4098: LD_INT 112
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
4114: GO 6481
4116: LD_INT 7
4118: DOUBLE
4119: EQUAL
4120: IFTRUE 4124
4122: GO 4224
4124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4125: LD_ADDR_VAR 0 1
4129: PUSH
4130: LD_INT 2
4132: PUSH
4133: LD_INT 4
4135: PUSH
4136: LD_INT 5
4138: PUSH
4139: LD_INT 7
4141: PUSH
4142: LD_INT 11
4144: PUSH
4145: LD_INT 12
4147: PUSH
4148: LD_INT 15
4150: PUSH
4151: LD_INT 16
4153: PUSH
4154: LD_INT 20
4156: PUSH
4157: LD_INT 21
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 23
4165: PUSH
4166: LD_INT 25
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 101
4190: PUSH
4191: LD_INT 102
4193: PUSH
4194: LD_INT 103
4196: PUSH
4197: LD_INT 105
4199: PUSH
4200: LD_INT 106
4202: PUSH
4203: LD_INT 108
4205: PUSH
4206: LD_INT 112
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 6481
4224: LD_INT 8
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4360
4232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4233: LD_ADDR_VAR 0 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: LD_INT 6
4249: PUSH
4250: LD_INT 7
4252: PUSH
4253: LD_INT 8
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 12
4261: PUSH
4262: LD_INT 15
4264: PUSH
4265: LD_INT 16
4267: PUSH
4268: LD_INT 20
4270: PUSH
4271: LD_INT 21
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 23
4279: PUSH
4280: LD_INT 25
4282: PUSH
4283: LD_INT 26
4285: PUSH
4286: LD_INT 30
4288: PUSH
4289: LD_INT 31
4291: PUSH
4292: LD_INT 32
4294: PUSH
4295: LD_INT 36
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 101
4322: PUSH
4323: LD_INT 102
4325: PUSH
4326: LD_INT 103
4328: PUSH
4329: LD_INT 105
4331: PUSH
4332: LD_INT 106
4334: PUSH
4335: LD_INT 108
4337: PUSH
4338: LD_INT 109
4340: PUSH
4341: LD_INT 112
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: ST_TO_ADDR
4358: GO 6481
4360: LD_INT 9
4362: DOUBLE
4363: EQUAL
4364: IFTRUE 4368
4366: GO 4504
4368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: LD_INT 4
4379: PUSH
4380: LD_INT 5
4382: PUSH
4383: LD_INT 6
4385: PUSH
4386: LD_INT 7
4388: PUSH
4389: LD_INT 8
4391: PUSH
4392: LD_INT 11
4394: PUSH
4395: LD_INT 12
4397: PUSH
4398: LD_INT 15
4400: PUSH
4401: LD_INT 16
4403: PUSH
4404: LD_INT 20
4406: PUSH
4407: LD_INT 21
4409: PUSH
4410: LD_INT 22
4412: PUSH
4413: LD_INT 23
4415: PUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 26
4421: PUSH
4422: LD_INT 28
4424: PUSH
4425: LD_INT 30
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: LD_INT 36
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 101
4462: PUSH
4463: LD_INT 102
4465: PUSH
4466: LD_INT 103
4468: PUSH
4469: LD_INT 105
4471: PUSH
4472: LD_INT 106
4474: PUSH
4475: LD_INT 108
4477: PUSH
4478: LD_INT 109
4480: PUSH
4481: LD_INT 112
4483: PUSH
4484: LD_INT 114
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 6481
4504: LD_INT 10
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4696
4512: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4513: LD_ADDR_VAR 0 1
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: LD_INT 5
4526: PUSH
4527: LD_INT 6
4529: PUSH
4530: LD_INT 7
4532: PUSH
4533: LD_INT 8
4535: PUSH
4536: LD_INT 9
4538: PUSH
4539: LD_INT 10
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: LD_INT 12
4547: PUSH
4548: LD_INT 13
4550: PUSH
4551: LD_INT 14
4553: PUSH
4554: LD_INT 15
4556: PUSH
4557: LD_INT 16
4559: PUSH
4560: LD_INT 17
4562: PUSH
4563: LD_INT 18
4565: PUSH
4566: LD_INT 19
4568: PUSH
4569: LD_INT 20
4571: PUSH
4572: LD_INT 21
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 23
4580: PUSH
4581: LD_INT 24
4583: PUSH
4584: LD_INT 25
4586: PUSH
4587: LD_INT 26
4589: PUSH
4590: LD_INT 28
4592: PUSH
4593: LD_INT 30
4595: PUSH
4596: LD_INT 31
4598: PUSH
4599: LD_INT 32
4601: PUSH
4602: LD_INT 36
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 101
4638: PUSH
4639: LD_INT 102
4641: PUSH
4642: LD_INT 103
4644: PUSH
4645: LD_INT 104
4647: PUSH
4648: LD_INT 105
4650: PUSH
4651: LD_INT 106
4653: PUSH
4654: LD_INT 107
4656: PUSH
4657: LD_INT 108
4659: PUSH
4660: LD_INT 109
4662: PUSH
4663: LD_INT 110
4665: PUSH
4666: LD_INT 111
4668: PUSH
4669: LD_INT 112
4671: PUSH
4672: LD_INT 114
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 6481
4696: LD_INT 11
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4896
4704: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4705: LD_ADDR_VAR 0 1
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 4
4718: PUSH
4719: LD_INT 5
4721: PUSH
4722: LD_INT 6
4724: PUSH
4725: LD_INT 7
4727: PUSH
4728: LD_INT 8
4730: PUSH
4731: LD_INT 9
4733: PUSH
4734: LD_INT 10
4736: PUSH
4737: LD_INT 11
4739: PUSH
4740: LD_INT 12
4742: PUSH
4743: LD_INT 13
4745: PUSH
4746: LD_INT 14
4748: PUSH
4749: LD_INT 15
4751: PUSH
4752: LD_INT 16
4754: PUSH
4755: LD_INT 17
4757: PUSH
4758: LD_INT 18
4760: PUSH
4761: LD_INT 19
4763: PUSH
4764: LD_INT 20
4766: PUSH
4767: LD_INT 21
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 23
4775: PUSH
4776: LD_INT 24
4778: PUSH
4779: LD_INT 25
4781: PUSH
4782: LD_INT 26
4784: PUSH
4785: LD_INT 28
4787: PUSH
4788: LD_INT 30
4790: PUSH
4791: LD_INT 31
4793: PUSH
4794: LD_INT 32
4796: PUSH
4797: LD_INT 34
4799: PUSH
4800: LD_INT 36
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 101
4838: PUSH
4839: LD_INT 102
4841: PUSH
4842: LD_INT 103
4844: PUSH
4845: LD_INT 104
4847: PUSH
4848: LD_INT 105
4850: PUSH
4851: LD_INT 106
4853: PUSH
4854: LD_INT 107
4856: PUSH
4857: LD_INT 108
4859: PUSH
4860: LD_INT 109
4862: PUSH
4863: LD_INT 110
4865: PUSH
4866: LD_INT 111
4868: PUSH
4869: LD_INT 112
4871: PUSH
4872: LD_INT 114
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
4894: GO 6481
4896: LD_INT 12
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 5112
4904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4905: LD_ADDR_VAR 0 1
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: LD_INT 2
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 4
4921: PUSH
4922: LD_INT 5
4924: PUSH
4925: LD_INT 6
4927: PUSH
4928: LD_INT 7
4930: PUSH
4931: LD_INT 8
4933: PUSH
4934: LD_INT 9
4936: PUSH
4937: LD_INT 10
4939: PUSH
4940: LD_INT 11
4942: PUSH
4943: LD_INT 12
4945: PUSH
4946: LD_INT 13
4948: PUSH
4949: LD_INT 14
4951: PUSH
4952: LD_INT 15
4954: PUSH
4955: LD_INT 16
4957: PUSH
4958: LD_INT 17
4960: PUSH
4961: LD_INT 18
4963: PUSH
4964: LD_INT 19
4966: PUSH
4967: LD_INT 20
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: LD_INT 22
4975: PUSH
4976: LD_INT 23
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: LD_INT 25
4984: PUSH
4985: LD_INT 26
4987: PUSH
4988: LD_INT 27
4990: PUSH
4991: LD_INT 28
4993: PUSH
4994: LD_INT 30
4996: PUSH
4997: LD_INT 31
4999: PUSH
5000: LD_INT 32
5002: PUSH
5003: LD_INT 33
5005: PUSH
5006: LD_INT 34
5008: PUSH
5009: LD_INT 36
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 101
5050: PUSH
5051: LD_INT 102
5053: PUSH
5054: LD_INT 103
5056: PUSH
5057: LD_INT 104
5059: PUSH
5060: LD_INT 105
5062: PUSH
5063: LD_INT 106
5065: PUSH
5066: LD_INT 107
5068: PUSH
5069: LD_INT 108
5071: PUSH
5072: LD_INT 109
5074: PUSH
5075: LD_INT 110
5077: PUSH
5078: LD_INT 111
5080: PUSH
5081: LD_INT 112
5083: PUSH
5084: LD_INT 113
5086: PUSH
5087: LD_INT 114
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: ST_TO_ADDR
5110: GO 6481
5112: LD_INT 13
5114: DOUBLE
5115: EQUAL
5116: IFTRUE 5120
5118: GO 5316
5120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5121: LD_ADDR_VAR 0 1
5125: PUSH
5126: LD_INT 1
5128: PUSH
5129: LD_INT 2
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: LD_INT 4
5137: PUSH
5138: LD_INT 5
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 9
5146: PUSH
5147: LD_INT 10
5149: PUSH
5150: LD_INT 11
5152: PUSH
5153: LD_INT 12
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: LD_INT 15
5161: PUSH
5162: LD_INT 16
5164: PUSH
5165: LD_INT 17
5167: PUSH
5168: LD_INT 18
5170: PUSH
5171: LD_INT 19
5173: PUSH
5174: LD_INT 20
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 23
5185: PUSH
5186: LD_INT 24
5188: PUSH
5189: LD_INT 25
5191: PUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 27
5197: PUSH
5198: LD_INT 28
5200: PUSH
5201: LD_INT 30
5203: PUSH
5204: LD_INT 31
5206: PUSH
5207: LD_INT 32
5209: PUSH
5210: LD_INT 33
5212: PUSH
5213: LD_INT 34
5215: PUSH
5216: LD_INT 36
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 101
5254: PUSH
5255: LD_INT 102
5257: PUSH
5258: LD_INT 103
5260: PUSH
5261: LD_INT 104
5263: PUSH
5264: LD_INT 105
5266: PUSH
5267: LD_INT 106
5269: PUSH
5270: LD_INT 107
5272: PUSH
5273: LD_INT 108
5275: PUSH
5276: LD_INT 109
5278: PUSH
5279: LD_INT 110
5281: PUSH
5282: LD_INT 111
5284: PUSH
5285: LD_INT 112
5287: PUSH
5288: LD_INT 113
5290: PUSH
5291: LD_INT 114
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: ST_TO_ADDR
5314: GO 6481
5316: LD_INT 14
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5324
5322: GO 5536
5324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5325: LD_ADDR_VAR 0 1
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 2
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: LD_INT 4
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 6
5347: PUSH
5348: LD_INT 7
5350: PUSH
5351: LD_INT 8
5353: PUSH
5354: LD_INT 9
5356: PUSH
5357: LD_INT 10
5359: PUSH
5360: LD_INT 11
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: LD_INT 13
5368: PUSH
5369: LD_INT 14
5371: PUSH
5372: LD_INT 15
5374: PUSH
5375: LD_INT 16
5377: PUSH
5378: LD_INT 17
5380: PUSH
5381: LD_INT 18
5383: PUSH
5384: LD_INT 19
5386: PUSH
5387: LD_INT 20
5389: PUSH
5390: LD_INT 21
5392: PUSH
5393: LD_INT 22
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: LD_INT 24
5401: PUSH
5402: LD_INT 25
5404: PUSH
5405: LD_INT 26
5407: PUSH
5408: LD_INT 27
5410: PUSH
5411: LD_INT 28
5413: PUSH
5414: LD_INT 29
5416: PUSH
5417: LD_INT 30
5419: PUSH
5420: LD_INT 31
5422: PUSH
5423: LD_INT 32
5425: PUSH
5426: LD_INT 33
5428: PUSH
5429: LD_INT 34
5431: PUSH
5432: LD_INT 36
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 101
5474: PUSH
5475: LD_INT 102
5477: PUSH
5478: LD_INT 103
5480: PUSH
5481: LD_INT 104
5483: PUSH
5484: LD_INT 105
5486: PUSH
5487: LD_INT 106
5489: PUSH
5490: LD_INT 107
5492: PUSH
5493: LD_INT 108
5495: PUSH
5496: LD_INT 109
5498: PUSH
5499: LD_INT 110
5501: PUSH
5502: LD_INT 111
5504: PUSH
5505: LD_INT 112
5507: PUSH
5508: LD_INT 113
5510: PUSH
5511: LD_INT 114
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 6481
5536: LD_INT 15
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5756
5544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5545: LD_ADDR_VAR 0 1
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: LD_INT 2
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 4
5561: PUSH
5562: LD_INT 5
5564: PUSH
5565: LD_INT 6
5567: PUSH
5568: LD_INT 7
5570: PUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 9
5576: PUSH
5577: LD_INT 10
5579: PUSH
5580: LD_INT 11
5582: PUSH
5583: LD_INT 12
5585: PUSH
5586: LD_INT 13
5588: PUSH
5589: LD_INT 14
5591: PUSH
5592: LD_INT 15
5594: PUSH
5595: LD_INT 16
5597: PUSH
5598: LD_INT 17
5600: PUSH
5601: LD_INT 18
5603: PUSH
5604: LD_INT 19
5606: PUSH
5607: LD_INT 20
5609: PUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 26
5627: PUSH
5628: LD_INT 27
5630: PUSH
5631: LD_INT 28
5633: PUSH
5634: LD_INT 29
5636: PUSH
5637: LD_INT 30
5639: PUSH
5640: LD_INT 31
5642: PUSH
5643: LD_INT 32
5645: PUSH
5646: LD_INT 33
5648: PUSH
5649: LD_INT 34
5651: PUSH
5652: LD_INT 36
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 101
5694: PUSH
5695: LD_INT 102
5697: PUSH
5698: LD_INT 103
5700: PUSH
5701: LD_INT 104
5703: PUSH
5704: LD_INT 105
5706: PUSH
5707: LD_INT 106
5709: PUSH
5710: LD_INT 107
5712: PUSH
5713: LD_INT 108
5715: PUSH
5716: LD_INT 109
5718: PUSH
5719: LD_INT 110
5721: PUSH
5722: LD_INT 111
5724: PUSH
5725: LD_INT 112
5727: PUSH
5728: LD_INT 113
5730: PUSH
5731: LD_INT 114
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: ST_TO_ADDR
5754: GO 6481
5756: LD_INT 16
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5888
5764: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 4
5775: PUSH
5776: LD_INT 5
5778: PUSH
5779: LD_INT 7
5781: PUSH
5782: LD_INT 11
5784: PUSH
5785: LD_INT 12
5787: PUSH
5788: LD_INT 15
5790: PUSH
5791: LD_INT 16
5793: PUSH
5794: LD_INT 20
5796: PUSH
5797: LD_INT 21
5799: PUSH
5800: LD_INT 22
5802: PUSH
5803: LD_INT 23
5805: PUSH
5806: LD_INT 25
5808: PUSH
5809: LD_INT 26
5811: PUSH
5812: LD_INT 30
5814: PUSH
5815: LD_INT 31
5817: PUSH
5818: LD_INT 32
5820: PUSH
5821: LD_INT 33
5823: PUSH
5824: LD_INT 34
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 101
5850: PUSH
5851: LD_INT 102
5853: PUSH
5854: LD_INT 103
5856: PUSH
5857: LD_INT 106
5859: PUSH
5860: LD_INT 108
5862: PUSH
5863: LD_INT 112
5865: PUSH
5866: LD_INT 113
5868: PUSH
5869: LD_INT 114
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: ST_TO_ADDR
5886: GO 6481
5888: LD_INT 17
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5896
5894: GO 6108
5896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5897: LD_ADDR_VAR 0 1
5901: PUSH
5902: LD_INT 1
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: LD_INT 4
5913: PUSH
5914: LD_INT 5
5916: PUSH
5917: LD_INT 6
5919: PUSH
5920: LD_INT 7
5922: PUSH
5923: LD_INT 8
5925: PUSH
5926: LD_INT 9
5928: PUSH
5929: LD_INT 10
5931: PUSH
5932: LD_INT 11
5934: PUSH
5935: LD_INT 12
5937: PUSH
5938: LD_INT 13
5940: PUSH
5941: LD_INT 14
5943: PUSH
5944: LD_INT 15
5946: PUSH
5947: LD_INT 16
5949: PUSH
5950: LD_INT 17
5952: PUSH
5953: LD_INT 18
5955: PUSH
5956: LD_INT 19
5958: PUSH
5959: LD_INT 20
5961: PUSH
5962: LD_INT 21
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_INT 23
5970: PUSH
5971: LD_INT 24
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 26
5979: PUSH
5980: LD_INT 27
5982: PUSH
5983: LD_INT 28
5985: PUSH
5986: LD_INT 29
5988: PUSH
5989: LD_INT 30
5991: PUSH
5992: LD_INT 31
5994: PUSH
5995: LD_INT 32
5997: PUSH
5998: LD_INT 33
6000: PUSH
6001: LD_INT 34
6003: PUSH
6004: LD_INT 36
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 101
6046: PUSH
6047: LD_INT 102
6049: PUSH
6050: LD_INT 103
6052: PUSH
6053: LD_INT 104
6055: PUSH
6056: LD_INT 105
6058: PUSH
6059: LD_INT 106
6061: PUSH
6062: LD_INT 107
6064: PUSH
6065: LD_INT 108
6067: PUSH
6068: LD_INT 109
6070: PUSH
6071: LD_INT 110
6073: PUSH
6074: LD_INT 111
6076: PUSH
6077: LD_INT 112
6079: PUSH
6080: LD_INT 113
6082: PUSH
6083: LD_INT 114
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: ST_TO_ADDR
6106: GO 6481
6108: LD_INT 18
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6252
6116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6117: LD_ADDR_VAR 0 1
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 5
6130: PUSH
6131: LD_INT 7
6133: PUSH
6134: LD_INT 11
6136: PUSH
6137: LD_INT 12
6139: PUSH
6140: LD_INT 15
6142: PUSH
6143: LD_INT 16
6145: PUSH
6146: LD_INT 20
6148: PUSH
6149: LD_INT 21
6151: PUSH
6152: LD_INT 22
6154: PUSH
6155: LD_INT 23
6157: PUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 26
6163: PUSH
6164: LD_INT 30
6166: PUSH
6167: LD_INT 31
6169: PUSH
6170: LD_INT 32
6172: PUSH
6173: LD_INT 33
6175: PUSH
6176: LD_INT 34
6178: PUSH
6179: LD_INT 35
6181: PUSH
6182: LD_INT 36
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 101
6210: PUSH
6211: LD_INT 102
6213: PUSH
6214: LD_INT 103
6216: PUSH
6217: LD_INT 106
6219: PUSH
6220: LD_INT 108
6222: PUSH
6223: LD_INT 112
6225: PUSH
6226: LD_INT 113
6228: PUSH
6229: LD_INT 114
6231: PUSH
6232: LD_INT 115
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
6250: GO 6481
6252: LD_INT 19
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6480
6260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6261: LD_ADDR_VAR 0 1
6265: PUSH
6266: LD_INT 1
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: LD_INT 3
6274: PUSH
6275: LD_INT 4
6277: PUSH
6278: LD_INT 5
6280: PUSH
6281: LD_INT 6
6283: PUSH
6284: LD_INT 7
6286: PUSH
6287: LD_INT 8
6289: PUSH
6290: LD_INT 9
6292: PUSH
6293: LD_INT 10
6295: PUSH
6296: LD_INT 11
6298: PUSH
6299: LD_INT 12
6301: PUSH
6302: LD_INT 13
6304: PUSH
6305: LD_INT 14
6307: PUSH
6308: LD_INT 15
6310: PUSH
6311: LD_INT 16
6313: PUSH
6314: LD_INT 17
6316: PUSH
6317: LD_INT 18
6319: PUSH
6320: LD_INT 19
6322: PUSH
6323: LD_INT 20
6325: PUSH
6326: LD_INT 21
6328: PUSH
6329: LD_INT 22
6331: PUSH
6332: LD_INT 23
6334: PUSH
6335: LD_INT 24
6337: PUSH
6338: LD_INT 25
6340: PUSH
6341: LD_INT 26
6343: PUSH
6344: LD_INT 27
6346: PUSH
6347: LD_INT 28
6349: PUSH
6350: LD_INT 29
6352: PUSH
6353: LD_INT 30
6355: PUSH
6356: LD_INT 31
6358: PUSH
6359: LD_INT 32
6361: PUSH
6362: LD_INT 33
6364: PUSH
6365: LD_INT 34
6367: PUSH
6368: LD_INT 35
6370: PUSH
6371: LD_INT 36
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 101
6414: PUSH
6415: LD_INT 102
6417: PUSH
6418: LD_INT 103
6420: PUSH
6421: LD_INT 104
6423: PUSH
6424: LD_INT 105
6426: PUSH
6427: LD_INT 106
6429: PUSH
6430: LD_INT 107
6432: PUSH
6433: LD_INT 108
6435: PUSH
6436: LD_INT 109
6438: PUSH
6439: LD_INT 110
6441: PUSH
6442: LD_INT 111
6444: PUSH
6445: LD_INT 112
6447: PUSH
6448: LD_INT 113
6450: PUSH
6451: LD_INT 114
6453: PUSH
6454: LD_INT 115
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 6481
6480: POP
// end else
6481: GO 6700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6483: LD_ADDR_VAR 0 1
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: LD_INT 8
6511: PUSH
6512: LD_INT 9
6514: PUSH
6515: LD_INT 10
6517: PUSH
6518: LD_INT 11
6520: PUSH
6521: LD_INT 12
6523: PUSH
6524: LD_INT 13
6526: PUSH
6527: LD_INT 14
6529: PUSH
6530: LD_INT 15
6532: PUSH
6533: LD_INT 16
6535: PUSH
6536: LD_INT 17
6538: PUSH
6539: LD_INT 18
6541: PUSH
6542: LD_INT 19
6544: PUSH
6545: LD_INT 20
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 22
6553: PUSH
6554: LD_INT 23
6556: PUSH
6557: LD_INT 24
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 26
6565: PUSH
6566: LD_INT 27
6568: PUSH
6569: LD_INT 28
6571: PUSH
6572: LD_INT 29
6574: PUSH
6575: LD_INT 30
6577: PUSH
6578: LD_INT 31
6580: PUSH
6581: LD_INT 32
6583: PUSH
6584: LD_INT 33
6586: PUSH
6587: LD_INT 34
6589: PUSH
6590: LD_INT 35
6592: PUSH
6593: LD_INT 36
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 101
6636: PUSH
6637: LD_INT 102
6639: PUSH
6640: LD_INT 103
6642: PUSH
6643: LD_INT 104
6645: PUSH
6646: LD_INT 105
6648: PUSH
6649: LD_INT 106
6651: PUSH
6652: LD_INT 107
6654: PUSH
6655: LD_INT 108
6657: PUSH
6658: LD_INT 109
6660: PUSH
6661: LD_INT 110
6663: PUSH
6664: LD_INT 111
6666: PUSH
6667: LD_INT 112
6669: PUSH
6670: LD_INT 113
6672: PUSH
6673: LD_INT 114
6675: PUSH
6676: LD_INT 115
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: ST_TO_ADDR
// if result then
6700: LD_VAR 0 1
6704: IFFALSE 6993
// begin normal :=  ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: LD_STRING 
6713: ST_TO_ADDR
// hardcore :=  ;
6714: LD_ADDR_VAR 0 4
6718: PUSH
6719: LD_STRING 
6721: ST_TO_ADDR
// for i = 1 to normalCounter do
6722: LD_ADDR_VAR 0 5
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_EXP 8
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6839
// begin tmp := 0 ;
6740: LD_ADDR_VAR 0 2
6744: PUSH
6745: LD_STRING 0
6747: ST_TO_ADDR
// if result [ 1 ] then
6748: LD_VAR 0 1
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: IFFALSE 6821
// if result [ 1 ] [ 1 ] = i then
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: PUSH
6767: LD_INT 1
6769: ARRAY
6770: PUSH
6771: LD_VAR 0 5
6775: EQUAL
6776: IFFALSE 6821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: LD_VAR 0 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 1
6795: PUSH
6796: LD_INT 1
6798: ARRAY
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: CALL_OW 3
6807: PPUSH
6808: CALL_OW 1
6812: ST_TO_ADDR
// tmp := 1 ;
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: LD_STRING 1
6820: ST_TO_ADDR
// end ; normal := normal & tmp ;
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_VAR 0 3
6830: PUSH
6831: LD_VAR 0 2
6835: STR
6836: ST_TO_ADDR
// end ;
6837: GO 6737
6839: POP
6840: POP
// for i = 1 to hardcoreCounter do
6841: LD_ADDR_VAR 0 5
6845: PUSH
6846: DOUBLE
6847: LD_INT 1
6849: DEC
6850: ST_TO_ADDR
6851: LD_EXP 9
6855: PUSH
6856: FOR_TO
6857: IFFALSE 6962
// begin tmp := 0 ;
6859: LD_ADDR_VAR 0 2
6863: PUSH
6864: LD_STRING 0
6866: ST_TO_ADDR
// if result [ 2 ] then
6867: LD_VAR 0 1
6871: PUSH
6872: LD_INT 2
6874: ARRAY
6875: IFFALSE 6944
// if result [ 2 ] [ 1 ] = 100 + i then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PUSH
6890: LD_INT 100
6892: PUSH
6893: LD_VAR 0 5
6897: PLUS
6898: EQUAL
6899: IFFALSE 6944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_VAR 0 1
6910: PPUSH
6911: LD_INT 2
6913: PPUSH
6914: LD_VAR 0 1
6918: PUSH
6919: LD_INT 2
6921: ARRAY
6922: PPUSH
6923: LD_INT 1
6925: PPUSH
6926: CALL_OW 3
6930: PPUSH
6931: CALL_OW 1
6935: ST_TO_ADDR
// tmp := 1 ;
6936: LD_ADDR_VAR 0 2
6940: PUSH
6941: LD_STRING 1
6943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6944: LD_ADDR_VAR 0 4
6948: PUSH
6949: LD_VAR 0 4
6953: PUSH
6954: LD_VAR 0 2
6958: STR
6959: ST_TO_ADDR
// end ;
6960: GO 6856
6962: POP
6963: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6964: LD_STRING getStreamItemsFromMission("
6966: PUSH
6967: LD_VAR 0 3
6971: STR
6972: PUSH
6973: LD_STRING ","
6975: STR
6976: PUSH
6977: LD_VAR 0 4
6981: STR
6982: PUSH
6983: LD_STRING ")
6985: STR
6986: PPUSH
6987: CALL_OW 559
// end else
6991: GO 7000
// ToLua ( getStreamItemsFromMission("","") ) ;
6993: LD_STRING getStreamItemsFromMission("","")
6995: PPUSH
6996: CALL_OW 559
// end ;
7000: LD_VAR 0 1
7004: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7005: LD_EXP 7
7009: PUSH
7010: LD_EXP 12
7014: AND
7015: IFFALSE 7139
7017: GO 7019
7019: DISABLE
7020: LD_INT 0
7022: PPUSH
7023: PPUSH
// begin enable ;
7024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_OWVAR 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: LD_INT 34
7047: PUSH
7048: LD_INT 7
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 45
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 34
7067: PUSH
7068: LD_INT 28
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 34
7077: PUSH
7078: LD_INT 47
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: ST_TO_ADDR
// if not tmp then
7101: LD_VAR 0 2
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7139
// for i in tmp do
7110: LD_ADDR_VAR 0 1
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: FOR_IN
7121: IFFALSE 7137
// begin SetLives ( i , 0 ) ;
7123: LD_VAR 0 1
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: CALL_OW 234
// end ;
7135: GO 7120
7137: POP
7138: POP
// end ;
7139: PPOPN 2
7141: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7142: LD_EXP 7
7146: PUSH
7147: LD_EXP 13
7151: AND
7152: IFFALSE 7236
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_OWVAR 2
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 32
7181: PUSH
7182: LD_INT 3
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: ST_TO_ADDR
// if not tmp then
7198: LD_VAR 0 2
7202: NOT
7203: IFFALSE 7207
// exit ;
7205: GO 7236
// for i in tmp do
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_VAR 0 2
7216: PUSH
7217: FOR_IN
7218: IFFALSE 7234
// begin SetLives ( i , 0 ) ;
7220: LD_VAR 0 1
7224: PPUSH
7225: LD_INT 0
7227: PPUSH
7228: CALL_OW 234
// end ;
7232: GO 7217
7234: POP
7235: POP
// end ;
7236: PPOPN 2
7238: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7239: LD_EXP 7
7243: PUSH
7244: LD_EXP 10
7248: AND
7249: IFFALSE 7342
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
// begin enable ;
7257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7258: LD_ADDR_VAR 0 1
7262: PUSH
7263: LD_INT 22
7265: PUSH
7266: LD_OWVAR 2
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 5
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 9
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PUSH
7323: FOR_IN
7324: IFFALSE 7340
// begin SetClass ( i , 1 ) ;
7326: LD_VAR 0 1
7330: PPUSH
7331: LD_INT 1
7333: PPUSH
7334: CALL_OW 336
// end ;
7338: GO 7323
7340: POP
7341: POP
// end ;
7342: PPOPN 1
7344: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7345: LD_EXP 7
7349: PUSH
7350: LD_EXP 11
7354: AND
7355: PUSH
7356: LD_OWVAR 65
7360: PUSH
7361: LD_INT 7
7363: LESS
7364: AND
7365: IFFALSE 7379
7367: GO 7369
7369: DISABLE
// begin enable ;
7370: ENABLE
// game_speed := 7 ;
7371: LD_ADDR_OWVAR 65
7375: PUSH
7376: LD_INT 7
7378: ST_TO_ADDR
// end ;
7379: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7380: LD_EXP 7
7384: PUSH
7385: LD_EXP 14
7389: AND
7390: IFFALSE 7592
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 81
7407: PUSH
7408: LD_OWVAR 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 21
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 69
7435: ST_TO_ADDR
// if not tmp then
7436: LD_VAR 0 3
7440: NOT
7441: IFFALSE 7445
// exit ;
7443: GO 7592
// if tmp > 5 then
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 5
7452: GREATER
7453: IFFALSE 7465
// k := 5 else
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_INT 5
7462: ST_TO_ADDR
7463: GO 7475
// k := tmp ;
7465: LD_ADDR_VAR 0 2
7469: PUSH
7470: LD_VAR 0 3
7474: ST_TO_ADDR
// for i := 1 to k do
7475: LD_ADDR_VAR 0 1
7479: PUSH
7480: DOUBLE
7481: LD_INT 1
7483: DEC
7484: ST_TO_ADDR
7485: LD_VAR 0 2
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7590
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_VAR 0 1
7502: ARRAY
7503: PPUSH
7504: LD_VAR 0 1
7508: PUSH
7509: LD_INT 4
7511: MOD
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: PPUSH
7517: CALL_OW 259
7521: PUSH
7522: LD_INT 10
7524: LESS
7525: IFFALSE 7588
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7527: LD_VAR 0 3
7531: PUSH
7532: LD_VAR 0 1
7536: ARRAY
7537: PPUSH
7538: LD_VAR 0 1
7542: PUSH
7543: LD_INT 4
7545: MOD
7546: PUSH
7547: LD_INT 1
7549: PLUS
7550: PPUSH
7551: LD_VAR 0 3
7555: PUSH
7556: LD_VAR 0 1
7560: ARRAY
7561: PPUSH
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: MOD
7570: PUSH
7571: LD_INT 1
7573: PLUS
7574: PPUSH
7575: CALL_OW 259
7579: PUSH
7580: LD_INT 1
7582: PLUS
7583: PPUSH
7584: CALL_OW 237
7588: GO 7490
7590: POP
7591: POP
// end ;
7592: PPOPN 3
7594: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7595: LD_EXP 7
7599: PUSH
7600: LD_EXP 15
7604: AND
7605: IFFALSE 7625
7607: GO 7609
7609: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7610: LD_INT 4
7612: PPUSH
7613: LD_OWVAR 2
7617: PPUSH
7618: LD_INT 0
7620: PPUSH
7621: CALL_OW 324
7625: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7626: LD_EXP 7
7630: PUSH
7631: LD_EXP 44
7635: AND
7636: IFFALSE 7656
7638: GO 7640
7640: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7641: LD_INT 19
7643: PPUSH
7644: LD_OWVAR 2
7648: PPUSH
7649: LD_INT 0
7651: PPUSH
7652: CALL_OW 324
7656: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7657: LD_EXP 7
7661: PUSH
7662: LD_EXP 16
7666: AND
7667: IFFALSE 7769
7669: GO 7671
7671: DISABLE
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
// begin enable ;
7676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: LD_INT 22
7684: PUSH
7685: LD_OWVAR 2
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 2
7696: PUSH
7697: LD_INT 34
7699: PUSH
7700: LD_INT 11
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 34
7709: PUSH
7710: LD_INT 30
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// if not tmp then
7731: LD_VAR 0 2
7735: NOT
7736: IFFALSE 7740
// exit ;
7738: GO 7769
// for i in tmp do
7740: LD_ADDR_VAR 0 1
7744: PUSH
7745: LD_VAR 0 2
7749: PUSH
7750: FOR_IN
7751: IFFALSE 7767
// begin SetLives ( i , 0 ) ;
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_INT 0
7760: PPUSH
7761: CALL_OW 234
// end ;
7765: GO 7750
7767: POP
7768: POP
// end ;
7769: PPOPN 2
7771: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7772: LD_EXP 7
7776: PUSH
7777: LD_EXP 17
7781: AND
7782: IFFALSE 7802
7784: GO 7786
7786: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7787: LD_INT 32
7789: PPUSH
7790: LD_OWVAR 2
7794: PPUSH
7795: LD_INT 0
7797: PPUSH
7798: CALL_OW 324
7802: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7803: LD_EXP 7
7807: PUSH
7808: LD_EXP 18
7812: AND
7813: IFFALSE 7994
7815: GO 7817
7817: DISABLE
7818: LD_INT 0
7820: PPUSH
7821: PPUSH
7822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7823: LD_ADDR_VAR 0 2
7827: PUSH
7828: LD_INT 22
7830: PUSH
7831: LD_OWVAR 2
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 33
7842: PUSH
7843: LD_INT 3
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PPUSH
7854: CALL_OW 69
7858: ST_TO_ADDR
// if not tmp then
7859: LD_VAR 0 2
7863: NOT
7864: IFFALSE 7868
// exit ;
7866: GO 7994
// side := 0 ;
7868: LD_ADDR_VAR 0 3
7872: PUSH
7873: LD_INT 0
7875: ST_TO_ADDR
// for i := 1 to 8 do
7876: LD_ADDR_VAR 0 1
7880: PUSH
7881: DOUBLE
7882: LD_INT 1
7884: DEC
7885: ST_TO_ADDR
7886: LD_INT 8
7888: PUSH
7889: FOR_TO
7890: IFFALSE 7938
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7892: LD_OWVAR 2
7896: PUSH
7897: LD_VAR 0 1
7901: NONEQUAL
7902: PUSH
7903: LD_OWVAR 2
7907: PPUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 81
7917: PUSH
7918: LD_INT 2
7920: EQUAL
7921: AND
7922: IFFALSE 7936
// begin side := i ;
7924: LD_ADDR_VAR 0 3
7928: PUSH
7929: LD_VAR 0 1
7933: ST_TO_ADDR
// break ;
7934: GO 7938
// end ;
7936: GO 7889
7938: POP
7939: POP
// if not side then
7940: LD_VAR 0 3
7944: NOT
7945: IFFALSE 7949
// exit ;
7947: GO 7994
// for i := 1 to tmp do
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 2
7963: PUSH
7964: FOR_TO
7965: IFFALSE 7992
// if Prob ( 60 ) then
7967: LD_INT 60
7969: PPUSH
7970: CALL_OW 13
7974: IFFALSE 7990
// SetSide ( i , side ) ;
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_VAR 0 3
7985: PPUSH
7986: CALL_OW 235
7990: GO 7964
7992: POP
7993: POP
// end ;
7994: PPOPN 3
7996: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7997: LD_EXP 7
8001: PUSH
8002: LD_EXP 20
8006: AND
8007: IFFALSE 8126
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8015: LD_ADDR_VAR 0 1
8019: PUSH
8020: LD_INT 22
8022: PUSH
8023: LD_OWVAR 2
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: LD_INT 23
8047: PUSH
8048: LD_INT 0
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 69
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8124
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8072: LD_VAR 0 1
8076: PPUSH
8077: CALL_OW 257
8081: PUSH
8082: LD_INT 1
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: LD_INT 4
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: IN
8100: IFFALSE 8122
// SetClass ( un , rand ( 1 , 4 ) ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: LD_INT 4
8112: PPUSH
8113: CALL_OW 12
8117: PPUSH
8118: CALL_OW 336
8122: GO 8069
8124: POP
8125: POP
// end ;
8126: PPOPN 1
8128: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8129: LD_EXP 7
8133: PUSH
8134: LD_EXP 19
8138: AND
8139: IFFALSE 8218
8141: GO 8143
8143: DISABLE
8144: LD_INT 0
8146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_INT 22
8154: PUSH
8155: LD_OWVAR 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 3
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 69
8182: ST_TO_ADDR
// if not tmp then
8183: LD_VAR 0 1
8187: NOT
8188: IFFALSE 8192
// exit ;
8190: GO 8218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8192: LD_VAR 0 1
8196: PUSH
8197: LD_INT 1
8199: PPUSH
8200: LD_VAR 0 1
8204: PPUSH
8205: CALL_OW 12
8209: ARRAY
8210: PPUSH
8211: LD_INT 100
8213: PPUSH
8214: CALL_OW 234
// end ;
8218: PPOPN 1
8220: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8221: LD_EXP 7
8225: PUSH
8226: LD_EXP 21
8230: AND
8231: IFFALSE 8329
8233: GO 8235
8235: DISABLE
8236: LD_INT 0
8238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_OWVAR 2
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 21
8258: PUSH
8259: LD_INT 1
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 69
8274: ST_TO_ADDR
// if not tmp then
8275: LD_VAR 0 1
8279: NOT
8280: IFFALSE 8284
// exit ;
8282: GO 8329
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8284: LD_VAR 0 1
8288: PUSH
8289: LD_INT 1
8291: PPUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 12
8301: ARRAY
8302: PPUSH
8303: LD_INT 1
8305: PPUSH
8306: LD_INT 4
8308: PPUSH
8309: CALL_OW 12
8313: PPUSH
8314: LD_INT 3000
8316: PPUSH
8317: LD_INT 9000
8319: PPUSH
8320: CALL_OW 12
8324: PPUSH
8325: CALL_OW 492
// end ;
8329: PPOPN 1
8331: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8332: LD_EXP 7
8336: PUSH
8337: LD_EXP 22
8341: AND
8342: IFFALSE 8362
8344: GO 8346
8346: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8347: LD_INT 1
8349: PPUSH
8350: LD_OWVAR 2
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: CALL_OW 324
8362: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8363: LD_EXP 7
8367: PUSH
8368: LD_EXP 23
8372: AND
8373: IFFALSE 8456
8375: GO 8377
8377: DISABLE
8378: LD_INT 0
8380: PPUSH
8381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8382: LD_ADDR_VAR 0 2
8386: PUSH
8387: LD_INT 22
8389: PUSH
8390: LD_OWVAR 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// if not tmp then
8418: LD_VAR 0 2
8422: NOT
8423: IFFALSE 8427
// exit ;
8425: GO 8456
// for i in tmp do
8427: LD_ADDR_VAR 0 1
8431: PUSH
8432: LD_VAR 0 2
8436: PUSH
8437: FOR_IN
8438: IFFALSE 8454
// SetBLevel ( i , 10 ) ;
8440: LD_VAR 0 1
8444: PPUSH
8445: LD_INT 10
8447: PPUSH
8448: CALL_OW 241
8452: GO 8437
8454: POP
8455: POP
// end ;
8456: PPOPN 2
8458: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8459: LD_EXP 7
8463: PUSH
8464: LD_EXP 24
8468: AND
8469: IFFALSE 8580
8471: GO 8473
8473: DISABLE
8474: LD_INT 0
8476: PPUSH
8477: PPUSH
8478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_INT 22
8486: PUSH
8487: LD_OWVAR 2
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 25
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 69
8514: ST_TO_ADDR
// if not tmp then
8515: LD_VAR 0 3
8519: NOT
8520: IFFALSE 8524
// exit ;
8522: GO 8580
// un := tmp [ rand ( 1 , tmp ) ] ;
8524: LD_ADDR_VAR 0 2
8528: PUSH
8529: LD_VAR 0 3
8533: PUSH
8534: LD_INT 1
8536: PPUSH
8537: LD_VAR 0 3
8541: PPUSH
8542: CALL_OW 12
8546: ARRAY
8547: ST_TO_ADDR
// if Crawls ( un ) then
8548: LD_VAR 0 2
8552: PPUSH
8553: CALL_OW 318
8557: IFFALSE 8568
// ComWalk ( un ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8568: LD_VAR 0 2
8572: PPUSH
8573: LD_INT 5
8575: PPUSH
8576: CALL_OW 336
// end ;
8580: PPOPN 3
8582: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8583: LD_EXP 7
8587: PUSH
8588: LD_EXP 25
8592: AND
8593: PUSH
8594: LD_OWVAR 67
8598: PUSH
8599: LD_INT 3
8601: LESS
8602: AND
8603: IFFALSE 8622
8605: GO 8607
8607: DISABLE
// Difficulty := Difficulty + 1 ;
8608: LD_ADDR_OWVAR 67
8612: PUSH
8613: LD_OWVAR 67
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
8622: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8623: LD_EXP 7
8627: PUSH
8628: LD_EXP 26
8632: AND
8633: IFFALSE 8736
8635: GO 8637
8637: DISABLE
8638: LD_INT 0
8640: PPUSH
// begin for i := 1 to 5 do
8641: LD_ADDR_VAR 0 1
8645: PUSH
8646: DOUBLE
8647: LD_INT 1
8649: DEC
8650: ST_TO_ADDR
8651: LD_INT 5
8653: PUSH
8654: FOR_TO
8655: IFFALSE 8734
// begin uc_nation := nation_nature ;
8657: LD_ADDR_OWVAR 21
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// uc_side := 0 ;
8665: LD_ADDR_OWVAR 20
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8673: LD_ADDR_OWVAR 29
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: ST_TO_ADDR
// hc_agressivity := 20 ;
8688: LD_ADDR_OWVAR 35
8692: PUSH
8693: LD_INT 20
8695: ST_TO_ADDR
// hc_class := class_tiger ;
8696: LD_ADDR_OWVAR 28
8700: PUSH
8701: LD_INT 14
8703: ST_TO_ADDR
// hc_gallery :=  ;
8704: LD_ADDR_OWVAR 33
8708: PUSH
8709: LD_STRING 
8711: ST_TO_ADDR
// hc_name :=  ;
8712: LD_ADDR_OWVAR 26
8716: PUSH
8717: LD_STRING 
8719: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8720: CALL_OW 44
8724: PPUSH
8725: LD_INT 0
8727: PPUSH
8728: CALL_OW 51
// end ;
8732: GO 8654
8734: POP
8735: POP
// end ;
8736: PPOPN 1
8738: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8739: LD_EXP 7
8743: PUSH
8744: LD_EXP 27
8748: AND
8749: IFFALSE 8758
8751: GO 8753
8753: DISABLE
// StreamSibBomb ;
8754: CALL 8759 0 0
8758: END
// export function StreamSibBomb ; var i , x , y ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
// result := false ;
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// for i := 1 to 16 do
8773: LD_ADDR_VAR 0 2
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 16
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8986
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8789: LD_ADDR_VAR 0 3
8793: PUSH
8794: LD_INT 10
8796: PUSH
8797: LD_INT 20
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 40
8805: PUSH
8806: LD_INT 50
8808: PUSH
8809: LD_INT 60
8811: PUSH
8812: LD_INT 70
8814: PUSH
8815: LD_INT 80
8817: PUSH
8818: LD_INT 90
8820: PUSH
8821: LD_INT 100
8823: PUSH
8824: LD_INT 110
8826: PUSH
8827: LD_INT 120
8829: PUSH
8830: LD_INT 130
8832: PUSH
8833: LD_INT 140
8835: PUSH
8836: LD_INT 150
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 1
8858: PPUSH
8859: LD_INT 15
8861: PPUSH
8862: CALL_OW 12
8866: ARRAY
8867: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8868: LD_ADDR_VAR 0 4
8872: PUSH
8873: LD_INT 10
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 40
8884: PUSH
8885: LD_INT 50
8887: PUSH
8888: LD_INT 60
8890: PUSH
8891: LD_INT 70
8893: PUSH
8894: LD_INT 80
8896: PUSH
8897: LD_INT 90
8899: PUSH
8900: LD_INT 100
8902: PUSH
8903: LD_INT 110
8905: PUSH
8906: LD_INT 120
8908: PUSH
8909: LD_INT 130
8911: PUSH
8912: LD_INT 140
8914: PUSH
8915: LD_INT 150
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_INT 15
8940: PPUSH
8941: CALL_OW 12
8945: ARRAY
8946: ST_TO_ADDR
// if ValidHex ( x , y ) then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 488
8961: IFFALSE 8984
// begin result := [ x , y ] ;
8963: LD_ADDR_VAR 0 1
8967: PUSH
8968: LD_VAR 0 3
8972: PUSH
8973: LD_VAR 0 4
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: ST_TO_ADDR
// break ;
8982: GO 8986
// end ; end ;
8984: GO 8786
8986: POP
8987: POP
// if result then
8988: LD_VAR 0 1
8992: IFFALSE 9052
// begin ToLua ( playSibBomb() ) ;
8994: LD_STRING playSibBomb()
8996: PPUSH
8997: CALL_OW 559
// wait ( 0 0$14 ) ;
9001: LD_INT 490
9003: PPUSH
9004: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9008: LD_VAR 0 1
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 1
9021: PUSH
9022: LD_INT 2
9024: ARRAY
9025: PPUSH
9026: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9030: LD_VAR 0 1
9034: PUSH
9035: LD_INT 1
9037: ARRAY
9038: PPUSH
9039: LD_VAR 0 1
9043: PUSH
9044: LD_INT 2
9046: ARRAY
9047: PPUSH
9048: CALL_OW 429
// end ; end ;
9052: LD_VAR 0 1
9056: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9057: LD_EXP 7
9061: PUSH
9062: LD_EXP 29
9066: AND
9067: IFFALSE 9079
9069: GO 9071
9071: DISABLE
// YouLost (  ) ;
9072: LD_STRING 
9074: PPUSH
9075: CALL_OW 104
9079: END
// every 0 0$1 trigger StreamModeActive and sFog do
9080: LD_EXP 7
9084: PUSH
9085: LD_EXP 28
9089: AND
9090: IFFALSE 9104
9092: GO 9094
9094: DISABLE
// FogOff ( your_side ) ;
9095: LD_OWVAR 2
9099: PPUSH
9100: CALL_OW 344
9104: END
// every 0 0$1 trigger StreamModeActive and sSun do
9105: LD_EXP 7
9109: PUSH
9110: LD_EXP 30
9114: AND
9115: IFFALSE 9143
9117: GO 9119
9119: DISABLE
// begin solar_recharge_percent := 0 ;
9120: LD_ADDR_OWVAR 79
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9128: LD_INT 10500
9130: PPUSH
9131: CALL_OW 67
// solar_recharge_percent := 100 ;
9135: LD_ADDR_OWVAR 79
9139: PUSH
9140: LD_INT 100
9142: ST_TO_ADDR
// end ;
9143: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9144: LD_EXP 7
9148: PUSH
9149: LD_EXP 31
9153: AND
9154: IFFALSE 9393
9156: GO 9158
9158: DISABLE
9159: LD_INT 0
9161: PPUSH
9162: PPUSH
9163: PPUSH
// begin tmp := [ ] ;
9164: LD_ADDR_VAR 0 3
9168: PUSH
9169: EMPTY
9170: ST_TO_ADDR
// for i := 1 to 6 do
9171: LD_ADDR_VAR 0 1
9175: PUSH
9176: DOUBLE
9177: LD_INT 1
9179: DEC
9180: ST_TO_ADDR
9181: LD_INT 6
9183: PUSH
9184: FOR_TO
9185: IFFALSE 9290
// begin uc_nation := nation_nature ;
9187: LD_ADDR_OWVAR 21
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// uc_side := 0 ;
9195: LD_ADDR_OWVAR 20
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9203: LD_ADDR_OWVAR 29
9207: PUSH
9208: LD_INT 12
9210: PUSH
9211: LD_INT 12
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// hc_agressivity := 20 ;
9218: LD_ADDR_OWVAR 35
9222: PUSH
9223: LD_INT 20
9225: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9226: LD_ADDR_OWVAR 28
9230: PUSH
9231: LD_INT 17
9233: ST_TO_ADDR
// hc_gallery :=  ;
9234: LD_ADDR_OWVAR 33
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// hc_name :=  ;
9242: LD_ADDR_OWVAR 26
9246: PUSH
9247: LD_STRING 
9249: ST_TO_ADDR
// un := CreateHuman ;
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: CALL_OW 44
9259: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9260: LD_VAR 0 2
9264: PPUSH
9265: LD_INT 1
9267: PPUSH
9268: CALL_OW 51
// tmp := tmp ^ un ;
9272: LD_ADDR_VAR 0 3
9276: PUSH
9277: LD_VAR 0 3
9281: PUSH
9282: LD_VAR 0 2
9286: ADD
9287: ST_TO_ADDR
// end ;
9288: GO 9184
9290: POP
9291: POP
// repeat wait ( 0 0$1 ) ;
9292: LD_INT 35
9294: PPUSH
9295: CALL_OW 67
// for un in tmp do
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: LD_VAR 0 3
9308: PUSH
9309: FOR_IN
9310: IFFALSE 9384
// begin if IsDead ( un ) then
9312: LD_VAR 0 2
9316: PPUSH
9317: CALL_OW 301
9321: IFFALSE 9341
// begin tmp := tmp diff un ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_VAR 0 3
9332: PUSH
9333: LD_VAR 0 2
9337: DIFF
9338: ST_TO_ADDR
// continue ;
9339: GO 9309
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9341: LD_VAR 0 2
9345: PPUSH
9346: LD_INT 3
9348: PUSH
9349: LD_INT 22
9351: PUSH
9352: LD_INT 0
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: LD_VAR 0 2
9372: PPUSH
9373: CALL_OW 74
9377: PPUSH
9378: CALL_OW 115
// end ;
9382: GO 9309
9384: POP
9385: POP
// until not tmp ;
9386: LD_VAR 0 3
9390: NOT
9391: IFFALSE 9292
// end ;
9393: PPOPN 3
9395: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9396: LD_EXP 7
9400: PUSH
9401: LD_EXP 32
9405: AND
9406: IFFALSE 9460
9408: GO 9410
9410: DISABLE
// begin ToLua ( displayTroll(); ) ;
9411: LD_STRING displayTroll();
9413: PPUSH
9414: CALL_OW 559
// wait ( 3 3$00 ) ;
9418: LD_INT 6300
9420: PPUSH
9421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9425: LD_STRING hideTroll();
9427: PPUSH
9428: CALL_OW 559
// wait ( 1 1$00 ) ;
9432: LD_INT 2100
9434: PPUSH
9435: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9439: LD_STRING displayTroll();
9441: PPUSH
9442: CALL_OW 559
// wait ( 1 1$00 ) ;
9446: LD_INT 2100
9448: PPUSH
9449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9453: LD_STRING hideTroll();
9455: PPUSH
9456: CALL_OW 559
// end ;
9460: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9461: LD_EXP 7
9465: PUSH
9466: LD_EXP 33
9470: AND
9471: IFFALSE 9534
9473: GO 9475
9475: DISABLE
9476: LD_INT 0
9478: PPUSH
// begin p := 0 ;
9479: LD_ADDR_VAR 0 1
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// repeat game_speed := 1 ;
9487: LD_ADDR_OWVAR 65
9491: PUSH
9492: LD_INT 1
9494: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9495: LD_INT 35
9497: PPUSH
9498: CALL_OW 67
// p := p + 1 ;
9502: LD_ADDR_VAR 0 1
9506: PUSH
9507: LD_VAR 0 1
9511: PUSH
9512: LD_INT 1
9514: PLUS
9515: ST_TO_ADDR
// until p >= 60 ;
9516: LD_VAR 0 1
9520: PUSH
9521: LD_INT 60
9523: GREATEREQUAL
9524: IFFALSE 9487
// game_speed := 4 ;
9526: LD_ADDR_OWVAR 65
9530: PUSH
9531: LD_INT 4
9533: ST_TO_ADDR
// end ;
9534: PPOPN 1
9536: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9537: LD_EXP 7
9541: PUSH
9542: LD_EXP 34
9546: AND
9547: IFFALSE 9693
9549: GO 9551
9551: DISABLE
9552: LD_INT 0
9554: PPUSH
9555: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9556: LD_ADDR_VAR 0 1
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_OWVAR 2
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 30
9578: PUSH
9579: LD_INT 0
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 69
9609: ST_TO_ADDR
// if not depot then
9610: LD_VAR 0 1
9614: NOT
9615: IFFALSE 9619
// exit ;
9617: GO 9693
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9619: LD_ADDR_VAR 0 2
9623: PUSH
9624: LD_VAR 0 1
9628: PUSH
9629: LD_INT 1
9631: PPUSH
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL_OW 12
9641: ARRAY
9642: PPUSH
9643: CALL_OW 274
9647: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9648: LD_VAR 0 2
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9663: LD_VAR 0 2
9667: PPUSH
9668: LD_INT 2
9670: PPUSH
9671: LD_INT 0
9673: PPUSH
9674: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9678: LD_VAR 0 2
9682: PPUSH
9683: LD_INT 3
9685: PPUSH
9686: LD_INT 0
9688: PPUSH
9689: CALL_OW 277
// end ;
9693: PPOPN 2
9695: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9696: LD_EXP 7
9700: PUSH
9701: LD_EXP 35
9705: AND
9706: IFFALSE 9803
9708: GO 9710
9710: DISABLE
9711: LD_INT 0
9713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9714: LD_ADDR_VAR 0 1
9718: PUSH
9719: LD_INT 22
9721: PUSH
9722: LD_OWVAR 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 3
9743: PUSH
9744: LD_INT 23
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: ST_TO_ADDR
// if not tmp then
9768: LD_VAR 0 1
9772: NOT
9773: IFFALSE 9777
// exit ;
9775: GO 9803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9777: LD_VAR 0 1
9781: PUSH
9782: LD_INT 1
9784: PPUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 12
9794: ARRAY
9795: PPUSH
9796: LD_INT 200
9798: PPUSH
9799: CALL_OW 234
// end ;
9803: PPOPN 1
9805: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9806: LD_EXP 7
9810: PUSH
9811: LD_EXP 36
9815: AND
9816: IFFALSE 9895
9818: GO 9820
9820: DISABLE
9821: LD_INT 0
9823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9824: LD_ADDR_VAR 0 1
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_OWVAR 2
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 21
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// if not tmp then
9860: LD_VAR 0 1
9864: NOT
9865: IFFALSE 9869
// exit ;
9867: GO 9895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9869: LD_VAR 0 1
9873: PUSH
9874: LD_INT 1
9876: PPUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: CALL_OW 12
9886: ARRAY
9887: PPUSH
9888: LD_INT 60
9890: PPUSH
9891: CALL_OW 234
// end ;
9895: PPOPN 1
9897: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9898: LD_EXP 7
9902: PUSH
9903: LD_EXP 37
9907: AND
9908: IFFALSE 10007
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
9916: PPUSH
// begin enable ;
9917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9918: LD_ADDR_VAR 0 1
9922: PUSH
9923: LD_INT 22
9925: PUSH
9926: LD_OWVAR 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 61
9937: PUSH
9938: EMPTY
9939: LIST
9940: PUSH
9941: LD_INT 33
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 1
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 10007
// for i in tmp do
9970: LD_ADDR_VAR 0 2
9974: PUSH
9975: LD_VAR 0 1
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10005
// if IsControledBy ( i ) then
9983: LD_VAR 0 2
9987: PPUSH
9988: CALL_OW 312
9992: IFFALSE 10003
// ComUnlink ( i ) ;
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 136
10003: GO 9980
10005: POP
10006: POP
// end ;
10007: PPOPN 2
10009: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10010: LD_EXP 7
10014: PUSH
10015: LD_EXP 38
10019: AND
10020: IFFALSE 10160
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
// begin ToLua ( displayPowell(); ) ;
10029: LD_STRING displayPowell();
10031: PPUSH
10032: CALL_OW 559
// uc_side := 0 ;
10036: LD_ADDR_OWVAR 20
10040: PUSH
10041: LD_INT 0
10043: ST_TO_ADDR
// uc_nation := 2 ;
10044: LD_ADDR_OWVAR 21
10048: PUSH
10049: LD_INT 2
10051: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10052: LD_ADDR_OWVAR 37
10056: PUSH
10057: LD_INT 14
10059: ST_TO_ADDR
// vc_engine := engine_siberite ;
10060: LD_ADDR_OWVAR 39
10064: PUSH
10065: LD_INT 3
10067: ST_TO_ADDR
// vc_control := control_apeman ;
10068: LD_ADDR_OWVAR 38
10072: PUSH
10073: LD_INT 5
10075: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10076: LD_ADDR_OWVAR 40
10080: PUSH
10081: LD_INT 29
10083: ST_TO_ADDR
// un := CreateVehicle ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: CALL_OW 45
10093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10106: LD_INT 35
10108: PPUSH
10109: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10113: LD_VAR 0 2
10117: PPUSH
10118: LD_INT 22
10120: PUSH
10121: LD_OWVAR 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: PPUSH
10135: LD_VAR 0 2
10139: PPUSH
10140: CALL_OW 74
10144: PPUSH
10145: CALL_OW 115
// until IsDead ( un ) ;
10149: LD_VAR 0 2
10153: PPUSH
10154: CALL_OW 301
10158: IFFALSE 10106
// end ;
10160: PPOPN 2
10162: END
// every 0 0$1 trigger StreamModeActive and sStu do
10163: LD_EXP 7
10167: PUSH
10168: LD_EXP 46
10172: AND
10173: IFFALSE 10189
10175: GO 10177
10177: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10178: LD_STRING displayStucuk();
10180: PPUSH
10181: CALL_OW 559
// ResetFog ;
10185: CALL_OW 335
// end ;
10189: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10190: LD_EXP 7
10194: PUSH
10195: LD_EXP 39
10199: AND
10200: IFFALSE 10341
10202: GO 10204
10204: DISABLE
10205: LD_INT 0
10207: PPUSH
10208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10209: LD_ADDR_VAR 0 2
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_OWVAR 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 21
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PPUSH
10240: CALL_OW 69
10244: ST_TO_ADDR
// if not tmp then
10245: LD_VAR 0 2
10249: NOT
10250: IFFALSE 10254
// exit ;
10252: GO 10341
// un := tmp [ rand ( 1 , tmp ) ] ;
10254: LD_ADDR_VAR 0 1
10258: PUSH
10259: LD_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: CALL_OW 12
10276: ARRAY
10277: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_INT 0
10285: PPUSH
10286: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10290: LD_VAR 0 1
10294: PPUSH
10295: LD_OWVAR 3
10299: PUSH
10300: LD_VAR 0 1
10304: DIFF
10305: PPUSH
10306: LD_VAR 0 1
10310: PPUSH
10311: CALL_OW 74
10315: PPUSH
10316: CALL_OW 115
// wait ( 0 0$20 ) ;
10320: LD_INT 700
10322: PPUSH
10323: CALL_OW 67
// SetSide ( un , your_side ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_OWVAR 2
10336: PPUSH
10337: CALL_OW 235
// end ;
10341: PPOPN 2
10343: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10344: LD_EXP 7
10348: PUSH
10349: LD_EXP 40
10353: AND
10354: IFFALSE 10460
10356: GO 10358
10358: DISABLE
10359: LD_INT 0
10361: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10362: LD_ADDR_VAR 0 1
10366: PUSH
10367: LD_INT 22
10369: PUSH
10370: LD_OWVAR 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: LD_INT 30
10384: PUSH
10385: LD_INT 0
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 30
10394: PUSH
10395: LD_INT 1
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: ST_TO_ADDR
// if not depot then
10416: LD_VAR 0 1
10420: NOT
10421: IFFALSE 10425
// exit ;
10423: GO 10460
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10425: LD_VAR 0 1
10429: PUSH
10430: LD_INT 1
10432: ARRAY
10433: PPUSH
10434: CALL_OW 250
10438: PPUSH
10439: LD_VAR 0 1
10443: PUSH
10444: LD_INT 1
10446: ARRAY
10447: PPUSH
10448: CALL_OW 251
10452: PPUSH
10453: LD_INT 70
10455: PPUSH
10456: CALL_OW 495
// end ;
10460: PPOPN 1
10462: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10463: LD_EXP 7
10467: PUSH
10468: LD_EXP 41
10472: AND
10473: IFFALSE 10684
10475: GO 10477
10477: DISABLE
10478: LD_INT 0
10480: PPUSH
10481: PPUSH
10482: PPUSH
10483: PPUSH
10484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10485: LD_ADDR_VAR 0 5
10489: PUSH
10490: LD_INT 22
10492: PUSH
10493: LD_OWVAR 2
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 21
10504: PUSH
10505: LD_INT 1
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 69
10520: ST_TO_ADDR
// if not tmp then
10521: LD_VAR 0 5
10525: NOT
10526: IFFALSE 10530
// exit ;
10528: GO 10684
// for i in tmp do
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_VAR 0 5
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10682
// begin d := rand ( 0 , 5 ) ;
10543: LD_ADDR_VAR 0 4
10547: PUSH
10548: LD_INT 0
10550: PPUSH
10551: LD_INT 5
10553: PPUSH
10554: CALL_OW 12
10558: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10559: LD_ADDR_VAR 0 2
10563: PUSH
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 250
10573: PPUSH
10574: LD_VAR 0 4
10578: PPUSH
10579: LD_INT 3
10581: PPUSH
10582: LD_INT 12
10584: PPUSH
10585: CALL_OW 12
10589: PPUSH
10590: CALL_OW 272
10594: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10595: LD_ADDR_VAR 0 3
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 251
10609: PPUSH
10610: LD_VAR 0 4
10614: PPUSH
10615: LD_INT 3
10617: PPUSH
10618: LD_INT 12
10620: PPUSH
10621: CALL_OW 12
10625: PPUSH
10626: CALL_OW 273
10630: ST_TO_ADDR
// if ValidHex ( x , y ) then
10631: LD_VAR 0 2
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: CALL_OW 488
10645: IFFALSE 10680
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10647: LD_VAR 0 1
10651: PPUSH
10652: LD_VAR 0 2
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 3
10664: PPUSH
10665: LD_INT 6
10667: PPUSH
10668: CALL_OW 12
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 483
// end ;
10680: GO 10540
10682: POP
10683: POP
// end ;
10684: PPOPN 5
10686: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10687: LD_EXP 7
10691: PUSH
10692: LD_EXP 42
10696: AND
10697: IFFALSE 10791
10699: GO 10701
10701: DISABLE
10702: LD_INT 0
10704: PPUSH
10705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10706: LD_ADDR_VAR 0 2
10710: PUSH
10711: LD_INT 22
10713: PUSH
10714: LD_OWVAR 2
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: PPUSH
10748: CALL_OW 69
10752: ST_TO_ADDR
// if not tmp then
10753: LD_VAR 0 2
10757: NOT
10758: IFFALSE 10762
// exit ;
10760: GO 10791
// for i in tmp do
10762: LD_ADDR_VAR 0 1
10766: PUSH
10767: LD_VAR 0 2
10771: PUSH
10772: FOR_IN
10773: IFFALSE 10789
// SetFuel ( i , 0 ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_INT 0
10782: PPUSH
10783: CALL_OW 240
10787: GO 10772
10789: POP
10790: POP
// end ;
10791: PPOPN 2
10793: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10794: LD_EXP 7
10798: PUSH
10799: LD_EXP 43
10803: AND
10804: IFFALSE 10870
10806: GO 10808
10808: DISABLE
10809: LD_INT 0
10811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10812: LD_ADDR_VAR 0 1
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_OWVAR 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 29
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 69
10847: ST_TO_ADDR
// if not tmp then
10848: LD_VAR 0 1
10852: NOT
10853: IFFALSE 10857
// exit ;
10855: GO 10870
// DestroyUnit ( tmp [ 1 ] ) ;
10857: LD_VAR 0 1
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: CALL_OW 65
// end ;
10870: PPOPN 1
10872: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10873: LD_EXP 7
10877: PUSH
10878: LD_EXP 45
10882: AND
10883: IFFALSE 11012
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
// begin uc_side := 0 ;
10891: LD_ADDR_OWVAR 20
10895: PUSH
10896: LD_INT 0
10898: ST_TO_ADDR
// uc_nation := nation_arabian ;
10899: LD_ADDR_OWVAR 21
10903: PUSH
10904: LD_INT 2
10906: ST_TO_ADDR
// hc_gallery :=  ;
10907: LD_ADDR_OWVAR 33
10911: PUSH
10912: LD_STRING 
10914: ST_TO_ADDR
// hc_name :=  ;
10915: LD_ADDR_OWVAR 26
10919: PUSH
10920: LD_STRING 
10922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10923: LD_INT 1
10925: PPUSH
10926: LD_INT 11
10928: PPUSH
10929: LD_INT 10
10931: PPUSH
10932: CALL_OW 380
// un := CreateHuman ;
10936: LD_ADDR_VAR 0 1
10940: PUSH
10941: CALL_OW 44
10945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10946: LD_VAR 0 1
10950: PPUSH
10951: LD_INT 1
10953: PPUSH
10954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10958: LD_INT 35
10960: PPUSH
10961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_INT 22
10972: PUSH
10973: LD_OWVAR 2
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: PPUSH
10987: LD_VAR 0 1
10991: PPUSH
10992: CALL_OW 74
10996: PPUSH
10997: CALL_OW 115
// until IsDead ( un ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 301
11010: IFFALSE 10958
// end ;
11012: PPOPN 1
11014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11015: LD_EXP 7
11019: PUSH
11020: LD_EXP 47
11024: AND
11025: IFFALSE 11037
11027: GO 11029
11029: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11030: LD_STRING earthquake(getX(game), 0, 32)
11032: PPUSH
11033: CALL_OW 559
11037: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11038: LD_EXP 7
11042: PUSH
11043: LD_EXP 48
11047: AND
11048: IFFALSE 11139
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
// begin enable ;
11056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11057: LD_ADDR_VAR 0 1
11061: PUSH
11062: LD_INT 22
11064: PUSH
11065: LD_OWVAR 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 2
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 33
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: ST_TO_ADDR
// if not tmp then
11104: LD_VAR 0 1
11108: NOT
11109: IFFALSE 11113
// exit ;
11111: GO 11139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11113: LD_VAR 0 1
11117: PUSH
11118: LD_INT 1
11120: PPUSH
11121: LD_VAR 0 1
11125: PPUSH
11126: CALL_OW 12
11130: ARRAY
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 234
// end ;
11139: PPOPN 1
11141: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11142: LD_EXP 7
11146: PUSH
11147: LD_EXP 49
11151: AND
11152: IFFALSE 11293
11154: GO 11156
11156: DISABLE
11157: LD_INT 0
11159: PPUSH
11160: PPUSH
11161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11162: LD_ADDR_VAR 0 3
11166: PUSH
11167: LD_INT 22
11169: PUSH
11170: LD_OWVAR 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 25
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 69
11197: ST_TO_ADDR
// if not tmp then
11198: LD_VAR 0 3
11202: NOT
11203: IFFALSE 11207
// exit ;
11205: GO 11293
// un := tmp [ rand ( 1 , tmp ) ] ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_VAR 0 3
11216: PUSH
11217: LD_INT 1
11219: PPUSH
11220: LD_VAR 0 3
11224: PPUSH
11225: CALL_OW 12
11229: ARRAY
11230: ST_TO_ADDR
// if Crawls ( un ) then
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 318
11240: IFFALSE 11251
// ComWalk ( un ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 9
11258: PPUSH
11259: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11263: LD_INT 28
11265: PPUSH
11266: LD_OWVAR 2
11270: PPUSH
11271: LD_INT 2
11273: PPUSH
11274: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11278: LD_INT 29
11280: PPUSH
11281: LD_OWVAR 2
11285: PPUSH
11286: LD_INT 2
11288: PPUSH
11289: CALL_OW 322
// end ;
11293: PPOPN 3
11295: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11296: LD_EXP 7
11300: PUSH
11301: LD_EXP 50
11305: AND
11306: IFFALSE 11417
11308: GO 11310
11310: DISABLE
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
11315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_OWVAR 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 25
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// if not tmp then
11352: LD_VAR 0 3
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11417
// un := tmp [ rand ( 1 , tmp ) ] ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_VAR 0 3
11378: PPUSH
11379: CALL_OW 12
11383: ARRAY
11384: ST_TO_ADDR
// if Crawls ( un ) then
11385: LD_VAR 0 2
11389: PPUSH
11390: CALL_OW 318
11394: IFFALSE 11405
// ComWalk ( un ) ;
11396: LD_VAR 0 2
11400: PPUSH
11401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11405: LD_VAR 0 2
11409: PPUSH
11410: LD_INT 8
11412: PPUSH
11413: CALL_OW 336
// end ;
11417: PPOPN 3
11419: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11420: LD_EXP 7
11424: PUSH
11425: LD_EXP 51
11429: AND
11430: IFFALSE 11574
11432: GO 11434
11434: DISABLE
11435: LD_INT 0
11437: PPUSH
11438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_OWVAR 2
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 21
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 34
11471: PUSH
11472: LD_INT 12
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 34
11481: PUSH
11482: LD_INT 51
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 34
11491: PUSH
11492: LD_INT 32
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: ST_TO_ADDR
// if not tmp then
11515: LD_VAR 0 2
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11574
// for i in tmp do
11524: LD_ADDR_VAR 0 1
11528: PUSH
11529: LD_VAR 0 2
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11572
// if GetCargo ( i , mat_artifact ) = 0 then
11537: LD_VAR 0 1
11541: PPUSH
11542: LD_INT 4
11544: PPUSH
11545: CALL_OW 289
11549: PUSH
11550: LD_INT 0
11552: EQUAL
11553: IFFALSE 11570
// SetCargo ( i , mat_siberit , 100 ) ;
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_INT 3
11562: PPUSH
11563: LD_INT 100
11565: PPUSH
11566: CALL_OW 290
11570: GO 11534
11572: POP
11573: POP
// end ;
11574: PPOPN 2
11576: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11577: LD_EXP 7
11581: PUSH
11582: LD_EXP 52
11586: AND
11587: IFFALSE 11770
11589: GO 11591
11591: DISABLE
11592: LD_INT 0
11594: PPUSH
11595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11596: LD_ADDR_VAR 0 2
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_OWVAR 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 2
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11770
// for i := 1 to 2 do
11627: LD_ADDR_VAR 0 1
11631: PUSH
11632: DOUBLE
11633: LD_INT 1
11635: DEC
11636: ST_TO_ADDR
11637: LD_INT 2
11639: PUSH
11640: FOR_TO
11641: IFFALSE 11768
// begin uc_side := your_side ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_OWVAR 2
11652: ST_TO_ADDR
// uc_nation := nation_american ;
11653: LD_ADDR_OWVAR 21
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// vc_chassis := us_morphling ;
11661: LD_ADDR_OWVAR 37
11665: PUSH
11666: LD_INT 5
11668: ST_TO_ADDR
// vc_engine := engine_siberite ;
11669: LD_ADDR_OWVAR 39
11673: PUSH
11674: LD_INT 3
11676: ST_TO_ADDR
// vc_control := control_computer ;
11677: LD_ADDR_OWVAR 38
11681: PUSH
11682: LD_INT 3
11684: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11685: LD_ADDR_OWVAR 40
11689: PUSH
11690: LD_INT 10
11692: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 310
11706: NOT
11707: IFFALSE 11754
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11709: CALL_OW 45
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 250
11727: PPUSH
11728: LD_VAR 0 2
11732: PUSH
11733: LD_INT 1
11735: ARRAY
11736: PPUSH
11737: CALL_OW 251
11741: PPUSH
11742: LD_INT 12
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 50
11752: GO 11766
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11754: CALL_OW 45
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 51
// end ;
11766: GO 11640
11768: POP
11769: POP
// end ;
11770: PPOPN 2
11772: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11773: LD_EXP 7
11777: PUSH
11778: LD_EXP 53
11782: AND
11783: IFFALSE 12005
11785: GO 11787
11787: DISABLE
11788: LD_INT 0
11790: PPUSH
11791: PPUSH
11792: PPUSH
11793: PPUSH
11794: PPUSH
11795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11796: LD_ADDR_VAR 0 6
11800: PUSH
11801: LD_INT 22
11803: PUSH
11804: LD_OWVAR 2
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 21
11815: PUSH
11816: LD_INT 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 3
11825: PUSH
11826: LD_INT 23
11828: PUSH
11829: LD_INT 0
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: ST_TO_ADDR
// if not tmp then
11850: LD_VAR 0 6
11854: NOT
11855: IFFALSE 11859
// exit ;
11857: GO 12005
// s1 := rand ( 1 , 4 ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 1
11866: PPUSH
11867: LD_INT 4
11869: PPUSH
11870: CALL_OW 12
11874: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11875: LD_ADDR_VAR 0 4
11879: PUSH
11880: LD_VAR 0 6
11884: PUSH
11885: LD_INT 1
11887: ARRAY
11888: PPUSH
11889: LD_VAR 0 2
11893: PPUSH
11894: CALL_OW 259
11898: ST_TO_ADDR
// if s1 = 1 then
11899: LD_VAR 0 2
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 11927
// s2 := rand ( 2 , 4 ) else
11909: LD_ADDR_VAR 0 3
11913: PUSH
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 4
11919: PPUSH
11920: CALL_OW 12
11924: ST_TO_ADDR
11925: GO 11935
// s2 := 1 ;
11927: LD_ADDR_VAR 0 3
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11935: LD_ADDR_VAR 0 5
11939: PUSH
11940: LD_VAR 0 6
11944: PUSH
11945: LD_INT 1
11947: ARRAY
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: CALL_OW 259
11958: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11959: LD_VAR 0 6
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_VAR 0 2
11972: PPUSH
11973: LD_VAR 0 5
11977: PPUSH
11978: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11982: LD_VAR 0 6
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_VAR 0 4
12000: PPUSH
12001: CALL_OW 237
// end ;
12005: PPOPN 6
12007: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12008: LD_EXP 7
12012: PUSH
12013: LD_EXP 54
12017: AND
12018: IFFALSE 12097
12020: GO 12022
12022: DISABLE
12023: LD_INT 0
12025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12026: LD_ADDR_VAR 0 1
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_OWVAR 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: ST_TO_ADDR
// if not tmp then
12062: LD_VAR 0 1
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12071: LD_VAR 0 1
12075: PUSH
12076: LD_INT 1
12078: PPUSH
12079: LD_VAR 0 1
12083: PPUSH
12084: CALL_OW 12
12088: ARRAY
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 234
// end ;
12097: PPOPN 1
12099: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12100: LD_EXP 7
12104: PUSH
12105: LD_EXP 55
12109: AND
12110: IFFALSE 12222
12112: GO 12114
12114: DISABLE
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12119: LD_ADDR_VAR 0 2
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_OWVAR 2
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 30
12141: PUSH
12142: LD_INT 27
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 30
12151: PUSH
12152: LD_INT 26
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 30
12161: PUSH
12162: LD_INT 28
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 69
12183: ST_TO_ADDR
// if not tmp then
12184: LD_VAR 0 2
12188: NOT
12189: IFFALSE 12193
// exit ;
12191: GO 12222
// for i in tmp do
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_VAR 0 2
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12220
// SetLives ( i , 1 ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 234
12218: GO 12203
12220: POP
12221: POP
// end ;
12222: PPOPN 2
12224: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12225: LD_EXP 7
12229: PUSH
12230: LD_EXP 56
12234: AND
12235: IFFALSE 12509
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
12244: PPUSH
// begin i := rand ( 1 , 7 ) ;
12245: LD_ADDR_VAR 0 1
12249: PUSH
12250: LD_INT 1
12252: PPUSH
12253: LD_INT 7
12255: PPUSH
12256: CALL_OW 12
12260: ST_TO_ADDR
// case i of 1 :
12261: LD_VAR 0 1
12265: PUSH
12266: LD_INT 1
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12284
12274: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12275: LD_STRING earthquake(getX(game), 0, 32)
12277: PPUSH
12278: CALL_OW 559
12282: GO 12509
12284: LD_INT 2
12286: DOUBLE
12287: EQUAL
12288: IFTRUE 12292
12290: GO 12306
12292: POP
// begin ToLua ( displayStucuk(); ) ;
12293: LD_STRING displayStucuk();
12295: PPUSH
12296: CALL_OW 559
// ResetFog ;
12300: CALL_OW 335
// end ; 3 :
12304: GO 12509
12306: LD_INT 3
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12418
12314: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 22
12322: PUSH
12323: LD_OWVAR 2
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 69
12350: ST_TO_ADDR
// if not tmp then
12351: LD_VAR 0 2
12355: NOT
12356: IFFALSE 12360
// exit ;
12358: GO 12509
// un := tmp [ rand ( 1 , tmp ) ] ;
12360: LD_ADDR_VAR 0 3
12364: PUSH
12365: LD_VAR 0 2
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_VAR 0 2
12377: PPUSH
12378: CALL_OW 12
12382: ARRAY
12383: ST_TO_ADDR
// if Crawls ( un ) then
12384: LD_VAR 0 3
12388: PPUSH
12389: CALL_OW 318
12393: IFFALSE 12404
// ComWalk ( un ) ;
12395: LD_VAR 0 3
12399: PPUSH
12400: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 8
12411: PPUSH
12412: CALL_OW 336
// end ; 4 :
12416: GO 12509
12418: LD_INT 4
12420: DOUBLE
12421: EQUAL
12422: IFTRUE 12426
12424: GO 12487
12426: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_OWVAR 2
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 30
12446: PUSH
12447: LD_INT 29
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 69
12462: ST_TO_ADDR
// if not tmp then
12463: LD_VAR 0 2
12467: NOT
12468: IFFALSE 12472
// exit ;
12470: GO 12509
// DestroyUnit ( tmp [ 1 ] ) ;
12472: LD_VAR 0 2
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PPUSH
12481: CALL_OW 65
// end ; 5 .. 7 :
12485: GO 12509
12487: LD_INT 5
12489: DOUBLE
12490: GREATEREQUAL
12491: IFFALSE 12499
12493: LD_INT 7
12495: DOUBLE
12496: LESSEQUAL
12497: IFTRUE 12501
12499: GO 12508
12501: POP
// StreamSibBomb ; end ;
12502: CALL 8759 0 0
12506: GO 12509
12508: POP
// end ;
12509: PPOPN 3
12511: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12512: LD_EXP 7
12516: PUSH
12517: LD_EXP 57
12521: AND
12522: IFFALSE 12678
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
12530: PPUSH
12531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_INT 81
12539: PUSH
12540: LD_OWVAR 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 2
12551: PUSH
12552: LD_INT 21
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: ST_TO_ADDR
// if not tmp then
12586: LD_VAR 0 2
12590: NOT
12591: IFFALSE 12595
// exit ;
12593: GO 12678
// p := 0 ;
12595: LD_ADDR_VAR 0 3
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12603: LD_INT 35
12605: PPUSH
12606: CALL_OW 67
// p := p + 1 ;
12610: LD_ADDR_VAR 0 3
12614: PUSH
12615: LD_VAR 0 3
12619: PUSH
12620: LD_INT 1
12622: PLUS
12623: ST_TO_ADDR
// for i in tmp do
12624: LD_ADDR_VAR 0 1
12628: PUSH
12629: LD_VAR 0 2
12633: PUSH
12634: FOR_IN
12635: IFFALSE 12666
// if GetLives ( i ) < 1000 then
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 256
12646: PUSH
12647: LD_INT 1000
12649: LESS
12650: IFFALSE 12664
// SetLives ( i , 1000 ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 1000
12659: PPUSH
12660: CALL_OW 234
12664: GO 12634
12666: POP
12667: POP
// until p > 20 ;
12668: LD_VAR 0 3
12672: PUSH
12673: LD_INT 20
12675: GREATER
12676: IFFALSE 12603
// end ;
12678: PPOPN 3
12680: END
// every 0 0$1 trigger StreamModeActive and sTime do
12681: LD_EXP 7
12685: PUSH
12686: LD_EXP 58
12690: AND
12691: IFFALSE 12726
12693: GO 12695
12695: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12696: LD_INT 28
12698: PPUSH
12699: LD_OWVAR 2
12703: PPUSH
12704: LD_INT 2
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12711: LD_INT 30
12713: PPUSH
12714: LD_OWVAR 2
12718: PPUSH
12719: LD_INT 2
12721: PPUSH
12722: CALL_OW 322
// end ;
12726: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12727: LD_EXP 7
12731: PUSH
12732: LD_EXP 59
12736: AND
12737: IFFALSE 12858
12739: GO 12741
12741: DISABLE
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_OWVAR 2
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 21
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 3
12775: PUSH
12776: LD_INT 23
12778: PUSH
12779: LD_INT 0
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: ST_TO_ADDR
// if not tmp then
12800: LD_VAR 0 2
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12858
// for i in tmp do
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: LD_VAR 0 2
12818: PUSH
12819: FOR_IN
12820: IFFALSE 12856
// begin if Crawls ( i ) then
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 318
12831: IFFALSE 12842
// ComWalk ( i ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 138
// SetClass ( i , 2 ) ;
12842: LD_VAR 0 1
12846: PPUSH
12847: LD_INT 2
12849: PPUSH
12850: CALL_OW 336
// end ;
12854: GO 12819
12856: POP
12857: POP
// end ;
12858: PPOPN 2
12860: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12861: LD_EXP 7
12865: PUSH
12866: LD_EXP 60
12870: AND
12871: IFFALSE 13152
12873: GO 12875
12875: DISABLE
12876: LD_INT 0
12878: PPUSH
12879: PPUSH
12880: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12881: LD_OWVAR 2
12885: PPUSH
12886: LD_INT 9
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12899: LD_INT 9
12901: PPUSH
12902: LD_OWVAR 2
12906: PPUSH
12907: CALL_OW 343
// uc_side := 9 ;
12911: LD_ADDR_OWVAR 20
12915: PUSH
12916: LD_INT 9
12918: ST_TO_ADDR
// uc_nation := 2 ;
12919: LD_ADDR_OWVAR 21
12923: PUSH
12924: LD_INT 2
12926: ST_TO_ADDR
// hc_name := Dark Warrior ;
12927: LD_ADDR_OWVAR 26
12931: PUSH
12932: LD_STRING Dark Warrior
12934: ST_TO_ADDR
// hc_gallery :=  ;
12935: LD_ADDR_OWVAR 33
12939: PUSH
12940: LD_STRING 
12942: ST_TO_ADDR
// hc_noskilllimit := true ;
12943: LD_ADDR_OWVAR 76
12947: PUSH
12948: LD_INT 1
12950: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12951: LD_ADDR_OWVAR 31
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: LD_INT 30
12964: PUSH
12965: LD_INT 30
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: ST_TO_ADDR
// un := CreateHuman ;
12974: LD_ADDR_VAR 0 3
12978: PUSH
12979: CALL_OW 44
12983: ST_TO_ADDR
// hc_noskilllimit := false ;
12984: LD_ADDR_OWVAR 76
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 51
// p := 0 ;
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13012: LD_INT 35
13014: PPUSH
13015: CALL_OW 67
// p := p + 1 ;
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: LD_VAR 0 2
13028: PUSH
13029: LD_INT 1
13031: PLUS
13032: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13033: LD_VAR 0 3
13037: PPUSH
13038: CALL_OW 256
13042: PUSH
13043: LD_INT 1000
13045: LESS
13046: IFFALSE 13060
// SetLives ( un , 1000 ) ;
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1000
13055: PPUSH
13056: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 81
13067: PUSH
13068: LD_OWVAR 2
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 91
13079: PUSH
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 69
13101: PPUSH
13102: LD_VAR 0 3
13106: PPUSH
13107: CALL_OW 74
13111: PPUSH
13112: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13116: LD_VAR 0 2
13120: PUSH
13121: LD_INT 60
13123: GREATER
13124: PUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: CALL_OW 301
13134: OR
13135: IFFALSE 13012
// if un then
13137: LD_VAR 0 3
13141: IFFALSE 13152
// RemoveUnit ( un ) ;
13143: LD_VAR 0 3
13147: PPUSH
13148: CALL_OW 64
// end ;
13152: PPOPN 3
13154: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13155: LD_INT 0
13157: PPUSH
// case cmd of 301 :
13158: LD_VAR 0 1
13162: PUSH
13163: LD_INT 301
13165: DOUBLE
13166: EQUAL
13167: IFTRUE 13171
13169: GO 13203
13171: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13172: LD_VAR 0 6
13176: PPUSH
13177: LD_VAR 0 7
13181: PPUSH
13182: LD_VAR 0 8
13186: PPUSH
13187: LD_VAR 0 4
13191: PPUSH
13192: LD_VAR 0 5
13196: PPUSH
13197: CALL 14404 0 5
13201: GO 13324
13203: LD_INT 302
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13248
13211: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13212: LD_VAR 0 6
13216: PPUSH
13217: LD_VAR 0 7
13221: PPUSH
13222: LD_VAR 0 8
13226: PPUSH
13227: LD_VAR 0 9
13231: PPUSH
13232: LD_VAR 0 4
13236: PPUSH
13237: LD_VAR 0 5
13241: PPUSH
13242: CALL 14495 0 6
13246: GO 13324
13248: LD_INT 303
13250: DOUBLE
13251: EQUAL
13252: IFTRUE 13256
13254: GO 13293
13256: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13257: LD_VAR 0 6
13261: PPUSH
13262: LD_VAR 0 7
13266: PPUSH
13267: LD_VAR 0 8
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 4
13281: PPUSH
13282: LD_VAR 0 5
13286: PPUSH
13287: CALL 13329 0 6
13291: GO 13324
13293: LD_INT 304
13295: DOUBLE
13296: EQUAL
13297: IFTRUE 13301
13299: GO 13323
13301: POP
// hHackTeleport ( unit , x , y ) ; end ;
13302: LD_VAR 0 2
13306: PPUSH
13307: LD_VAR 0 4
13311: PPUSH
13312: LD_VAR 0 5
13316: PPUSH
13317: CALL 15088 0 3
13321: GO 13324
13323: POP
// end ;
13324: LD_VAR 0 12
13328: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13329: LD_INT 0
13331: PPUSH
13332: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13333: LD_VAR 0 1
13337: PUSH
13338: LD_INT 1
13340: LESS
13341: PUSH
13342: LD_VAR 0 1
13346: PUSH
13347: LD_INT 3
13349: GREATER
13350: OR
13351: PUSH
13352: LD_VAR 0 5
13356: PPUSH
13357: LD_VAR 0 6
13361: PPUSH
13362: CALL_OW 428
13366: OR
13367: IFFALSE 13371
// exit ;
13369: GO 14091
// uc_side := your_side ;
13371: LD_ADDR_OWVAR 20
13375: PUSH
13376: LD_OWVAR 2
13380: ST_TO_ADDR
// uc_nation := nation ;
13381: LD_ADDR_OWVAR 21
13385: PUSH
13386: LD_VAR 0 1
13390: ST_TO_ADDR
// bc_level = 1 ;
13391: LD_ADDR_OWVAR 43
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// case btype of 1 :
13399: LD_VAR 0 2
13403: PUSH
13404: LD_INT 1
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13423
13412: POP
// bc_type := b_depot ; 2 :
13413: LD_ADDR_OWVAR 42
13417: PUSH
13418: LD_INT 0
13420: ST_TO_ADDR
13421: GO 14035
13423: LD_INT 2
13425: DOUBLE
13426: EQUAL
13427: IFTRUE 13431
13429: GO 13442
13431: POP
// bc_type := b_warehouse ; 3 :
13432: LD_ADDR_OWVAR 42
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
13440: GO 14035
13442: LD_INT 3
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13461
13450: POP
// bc_type := b_lab ; 4 .. 9 :
13451: LD_ADDR_OWVAR 42
13455: PUSH
13456: LD_INT 6
13458: ST_TO_ADDR
13459: GO 14035
13461: LD_INT 4
13463: DOUBLE
13464: GREATEREQUAL
13465: IFFALSE 13473
13467: LD_INT 9
13469: DOUBLE
13470: LESSEQUAL
13471: IFTRUE 13475
13473: GO 13527
13475: POP
// begin bc_type := b_lab_half ;
13476: LD_ADDR_OWVAR 42
13480: PUSH
13481: LD_INT 7
13483: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13484: LD_ADDR_OWVAR 44
13488: PUSH
13489: LD_INT 10
13491: PUSH
13492: LD_INT 11
13494: PUSH
13495: LD_INT 12
13497: PUSH
13498: LD_INT 15
13500: PUSH
13501: LD_INT 14
13503: PUSH
13504: LD_INT 13
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 3
13522: MINUS
13523: ARRAY
13524: ST_TO_ADDR
// end ; 10 .. 13 :
13525: GO 14035
13527: LD_INT 10
13529: DOUBLE
13530: GREATEREQUAL
13531: IFFALSE 13539
13533: LD_INT 13
13535: DOUBLE
13536: LESSEQUAL
13537: IFTRUE 13541
13539: GO 13618
13541: POP
// begin bc_type := b_lab_full ;
13542: LD_ADDR_OWVAR 42
13546: PUSH
13547: LD_INT 8
13549: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13550: LD_ADDR_OWVAR 44
13554: PUSH
13555: LD_INT 10
13557: PUSH
13558: LD_INT 12
13560: PUSH
13561: LD_INT 14
13563: PUSH
13564: LD_INT 13
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 9
13580: MINUS
13581: ARRAY
13582: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13583: LD_ADDR_OWVAR 45
13587: PUSH
13588: LD_INT 11
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 12
13596: PUSH
13597: LD_INT 15
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: LD_VAR 0 2
13610: PUSH
13611: LD_INT 9
13613: MINUS
13614: ARRAY
13615: ST_TO_ADDR
// end ; 14 :
13616: GO 14035
13618: LD_INT 14
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13637
13626: POP
// bc_type := b_workshop ; 15 :
13627: LD_ADDR_OWVAR 42
13631: PUSH
13632: LD_INT 2
13634: ST_TO_ADDR
13635: GO 14035
13637: LD_INT 15
13639: DOUBLE
13640: EQUAL
13641: IFTRUE 13645
13643: GO 13656
13645: POP
// bc_type := b_factory ; 16 :
13646: LD_ADDR_OWVAR 42
13650: PUSH
13651: LD_INT 3
13653: ST_TO_ADDR
13654: GO 14035
13656: LD_INT 16
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13675
13664: POP
// bc_type := b_ext_gun ; 17 :
13665: LD_ADDR_OWVAR 42
13669: PUSH
13670: LD_INT 17
13672: ST_TO_ADDR
13673: GO 14035
13675: LD_INT 17
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13683
13681: GO 13711
13683: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13684: LD_ADDR_OWVAR 42
13688: PUSH
13689: LD_INT 19
13691: PUSH
13692: LD_INT 23
13694: PUSH
13695: LD_INT 19
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_VAR 0 1
13707: ARRAY
13708: ST_TO_ADDR
13709: GO 14035
13711: LD_INT 18
13713: DOUBLE
13714: EQUAL
13715: IFTRUE 13719
13717: GO 13730
13719: POP
// bc_type := b_ext_radar ; 19 :
13720: LD_ADDR_OWVAR 42
13724: PUSH
13725: LD_INT 20
13727: ST_TO_ADDR
13728: GO 14035
13730: LD_INT 19
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13749
13738: POP
// bc_type := b_ext_radio ; 20 :
13739: LD_ADDR_OWVAR 42
13743: PUSH
13744: LD_INT 22
13746: ST_TO_ADDR
13747: GO 14035
13749: LD_INT 20
13751: DOUBLE
13752: EQUAL
13753: IFTRUE 13757
13755: GO 13768
13757: POP
// bc_type := b_ext_siberium ; 21 :
13758: LD_ADDR_OWVAR 42
13762: PUSH
13763: LD_INT 21
13765: ST_TO_ADDR
13766: GO 14035
13768: LD_INT 21
13770: DOUBLE
13771: EQUAL
13772: IFTRUE 13776
13774: GO 13787
13776: POP
// bc_type := b_ext_computer ; 22 :
13777: LD_ADDR_OWVAR 42
13781: PUSH
13782: LD_INT 24
13784: ST_TO_ADDR
13785: GO 14035
13787: LD_INT 22
13789: DOUBLE
13790: EQUAL
13791: IFTRUE 13795
13793: GO 13806
13795: POP
// bc_type := b_ext_track ; 23 :
13796: LD_ADDR_OWVAR 42
13800: PUSH
13801: LD_INT 16
13803: ST_TO_ADDR
13804: GO 14035
13806: LD_INT 23
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13825
13814: POP
// bc_type := b_ext_laser ; 24 :
13815: LD_ADDR_OWVAR 42
13819: PUSH
13820: LD_INT 25
13822: ST_TO_ADDR
13823: GO 14035
13825: LD_INT 24
13827: DOUBLE
13828: EQUAL
13829: IFTRUE 13833
13831: GO 13844
13833: POP
// bc_type := b_control_tower ; 25 :
13834: LD_ADDR_OWVAR 42
13838: PUSH
13839: LD_INT 36
13841: ST_TO_ADDR
13842: GO 14035
13844: LD_INT 25
13846: DOUBLE
13847: EQUAL
13848: IFTRUE 13852
13850: GO 13863
13852: POP
// bc_type := b_breastwork ; 26 :
13853: LD_ADDR_OWVAR 42
13857: PUSH
13858: LD_INT 31
13860: ST_TO_ADDR
13861: GO 14035
13863: LD_INT 26
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13882
13871: POP
// bc_type := b_bunker ; 27 :
13872: LD_ADDR_OWVAR 42
13876: PUSH
13877: LD_INT 32
13879: ST_TO_ADDR
13880: GO 14035
13882: LD_INT 27
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13901
13890: POP
// bc_type := b_turret ; 28 :
13891: LD_ADDR_OWVAR 42
13895: PUSH
13896: LD_INT 33
13898: ST_TO_ADDR
13899: GO 14035
13901: LD_INT 28
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13920
13909: POP
// bc_type := b_armoury ; 29 :
13910: LD_ADDR_OWVAR 42
13914: PUSH
13915: LD_INT 4
13917: ST_TO_ADDR
13918: GO 14035
13920: LD_INT 29
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 13939
13928: POP
// bc_type := b_barracks ; 30 :
13929: LD_ADDR_OWVAR 42
13933: PUSH
13934: LD_INT 5
13936: ST_TO_ADDR
13937: GO 14035
13939: LD_INT 30
13941: DOUBLE
13942: EQUAL
13943: IFTRUE 13947
13945: GO 13958
13947: POP
// bc_type := b_solar_power ; 31 :
13948: LD_ADDR_OWVAR 42
13952: PUSH
13953: LD_INT 27
13955: ST_TO_ADDR
13956: GO 14035
13958: LD_INT 31
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 13977
13966: POP
// bc_type := b_oil_power ; 32 :
13967: LD_ADDR_OWVAR 42
13971: PUSH
13972: LD_INT 26
13974: ST_TO_ADDR
13975: GO 14035
13977: LD_INT 32
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 13996
13985: POP
// bc_type := b_siberite_power ; 33 :
13986: LD_ADDR_OWVAR 42
13990: PUSH
13991: LD_INT 28
13993: ST_TO_ADDR
13994: GO 14035
13996: LD_INT 33
13998: DOUBLE
13999: EQUAL
14000: IFTRUE 14004
14002: GO 14015
14004: POP
// bc_type := b_oil_mine ; 34 :
14005: LD_ADDR_OWVAR 42
14009: PUSH
14010: LD_INT 29
14012: ST_TO_ADDR
14013: GO 14035
14015: LD_INT 34
14017: DOUBLE
14018: EQUAL
14019: IFTRUE 14023
14021: GO 14034
14023: POP
// bc_type := b_siberite_mine ; end ;
14024: LD_ADDR_OWVAR 42
14028: PUSH
14029: LD_INT 30
14031: ST_TO_ADDR
14032: GO 14035
14034: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14035: LD_ADDR_VAR 0 8
14039: PUSH
14040: LD_VAR 0 5
14044: PPUSH
14045: LD_VAR 0 6
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: CALL_OW 47
14059: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14060: LD_OWVAR 42
14064: PUSH
14065: LD_INT 32
14067: PUSH
14068: LD_INT 33
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: IN
14075: IFFALSE 14091
// PlaceWeaponTurret ( b , weapon ) ;
14077: LD_VAR 0 8
14081: PPUSH
14082: LD_VAR 0 4
14086: PPUSH
14087: CALL_OW 431
// end ;
14091: LD_VAR 0 7
14095: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14102: LD_ADDR_VAR 0 4
14106: PUSH
14107: LD_INT 22
14109: PUSH
14110: LD_OWVAR 2
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: LD_INT 30
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 1
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 4
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14224
// for i in tmp do
14165: LD_ADDR_VAR 0 2
14169: PUSH
14170: LD_VAR 0 4
14174: PUSH
14175: FOR_IN
14176: IFFALSE 14222
// for j = 1 to 3 do
14178: LD_ADDR_VAR 0 3
14182: PUSH
14183: DOUBLE
14184: LD_INT 1
14186: DEC
14187: ST_TO_ADDR
14188: LD_INT 3
14190: PUSH
14191: FOR_TO
14192: IFFALSE 14218
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 274
14203: PPUSH
14204: LD_VAR 0 3
14208: PPUSH
14209: LD_INT 99999
14211: PPUSH
14212: CALL_OW 277
14216: GO 14191
14218: POP
14219: POP
14220: GO 14175
14222: POP
14223: POP
// end ;
14224: LD_VAR 0 1
14228: RET
// export function hHackSetLevel10 ; var i , j ; begin
14229: LD_INT 0
14231: PPUSH
14232: PPUSH
14233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14234: LD_ADDR_VAR 0 2
14238: PUSH
14239: LD_INT 21
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: PUSH
14254: FOR_IN
14255: IFFALSE 14307
// if IsSelected ( i ) then
14257: LD_VAR 0 2
14261: PPUSH
14262: CALL_OW 306
14266: IFFALSE 14305
// begin for j := 1 to 4 do
14268: LD_ADDR_VAR 0 3
14272: PUSH
14273: DOUBLE
14274: LD_INT 1
14276: DEC
14277: ST_TO_ADDR
14278: LD_INT 4
14280: PUSH
14281: FOR_TO
14282: IFFALSE 14303
// SetSkill ( i , j , 10 ) ;
14284: LD_VAR 0 2
14288: PPUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: LD_INT 10
14296: PPUSH
14297: CALL_OW 237
14301: GO 14281
14303: POP
14304: POP
// end ;
14305: GO 14254
14307: POP
14308: POP
// end ;
14309: LD_VAR 0 1
14313: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14314: LD_INT 0
14316: PPUSH
14317: PPUSH
14318: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_OWVAR 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PPUSH
14350: CALL_OW 69
14354: PUSH
14355: FOR_IN
14356: IFFALSE 14397
// begin for j := 1 to 4 do
14358: LD_ADDR_VAR 0 3
14362: PUSH
14363: DOUBLE
14364: LD_INT 1
14366: DEC
14367: ST_TO_ADDR
14368: LD_INT 4
14370: PUSH
14371: FOR_TO
14372: IFFALSE 14393
// SetSkill ( i , j , 10 ) ;
14374: LD_VAR 0 2
14378: PPUSH
14379: LD_VAR 0 3
14383: PPUSH
14384: LD_INT 10
14386: PPUSH
14387: CALL_OW 237
14391: GO 14371
14393: POP
14394: POP
// end ;
14395: GO 14355
14397: POP
14398: POP
// end ;
14399: LD_VAR 0 1
14403: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14404: LD_INT 0
14406: PPUSH
// uc_side := your_side ;
14407: LD_ADDR_OWVAR 20
14411: PUSH
14412: LD_OWVAR 2
14416: ST_TO_ADDR
// uc_nation := nation ;
14417: LD_ADDR_OWVAR 21
14421: PUSH
14422: LD_VAR 0 1
14426: ST_TO_ADDR
// InitHc ;
14427: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14431: LD_INT 0
14433: PPUSH
14434: LD_VAR 0 2
14438: PPUSH
14439: LD_VAR 0 3
14443: PPUSH
14444: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14448: LD_VAR 0 4
14452: PPUSH
14453: LD_VAR 0 5
14457: PPUSH
14458: CALL_OW 428
14462: PUSH
14463: LD_INT 0
14465: EQUAL
14466: IFFALSE 14490
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14468: CALL_OW 44
14472: PPUSH
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 48
// end ;
14490: LD_VAR 0 6
14494: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
// uc_side := your_side ;
14499: LD_ADDR_OWVAR 20
14503: PUSH
14504: LD_OWVAR 2
14508: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14509: LD_VAR 0 1
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: LD_INT 4
14525: PUSH
14526: LD_INT 5
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: IN
14536: IFFALSE 14548
// uc_nation := nation_american else
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
14546: GO 14591
// if chassis in [ 11 , 12 , 13 , 14 ] then
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 11
14555: PUSH
14556: LD_INT 12
14558: PUSH
14559: LD_INT 13
14561: PUSH
14562: LD_INT 14
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: IN
14571: IFFALSE 14583
// uc_nation := nation_arabian else
14573: LD_ADDR_OWVAR 21
14577: PUSH
14578: LD_INT 2
14580: ST_TO_ADDR
14581: GO 14591
// uc_nation := nation_russian ;
14583: LD_ADDR_OWVAR 21
14587: PUSH
14588: LD_INT 3
14590: ST_TO_ADDR
// vc_chassis := chassis ;
14591: LD_ADDR_OWVAR 37
14595: PUSH
14596: LD_VAR 0 1
14600: ST_TO_ADDR
// vc_engine := engine ;
14601: LD_ADDR_OWVAR 39
14605: PUSH
14606: LD_VAR 0 2
14610: ST_TO_ADDR
// vc_control := control ;
14611: LD_ADDR_OWVAR 38
14615: PUSH
14616: LD_VAR 0 3
14620: ST_TO_ADDR
// vc_weapon := weapon ;
14621: LD_ADDR_OWVAR 40
14625: PUSH
14626: LD_VAR 0 4
14630: ST_TO_ADDR
// un := CreateVehicle ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: CALL_OW 45
14640: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14641: LD_VAR 0 8
14645: PPUSH
14646: LD_INT 0
14648: PPUSH
14649: LD_INT 5
14651: PPUSH
14652: CALL_OW 12
14656: PPUSH
14657: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14661: LD_VAR 0 8
14665: PPUSH
14666: LD_VAR 0 5
14670: PPUSH
14671: LD_VAR 0 6
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 48
// end ;
14683: LD_VAR 0 7
14687: RET
// export hInvincible ; every 1 do
14688: GO 14690
14690: DISABLE
// hInvincible := [ ] ;
14691: LD_ADDR_EXP 61
14695: PUSH
14696: EMPTY
14697: ST_TO_ADDR
14698: END
// every 10 do var i ;
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
// begin enable ;
14705: ENABLE
// if not hInvincible then
14706: LD_EXP 61
14710: NOT
14711: IFFALSE 14715
// exit ;
14713: GO 14759
// for i in hInvincible do
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: LD_EXP 61
14724: PUSH
14725: FOR_IN
14726: IFFALSE 14757
// if GetLives ( i ) < 1000 then
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 256
14737: PUSH
14738: LD_INT 1000
14740: LESS
14741: IFFALSE 14755
// SetLives ( i , 1000 ) ;
14743: LD_VAR 0 1
14747: PPUSH
14748: LD_INT 1000
14750: PPUSH
14751: CALL_OW 234
14755: GO 14725
14757: POP
14758: POP
// end ;
14759: PPOPN 1
14761: END
// export function hHackInvincible ; var i ; begin
14762: LD_INT 0
14764: PPUSH
14765: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 21
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14866
// if IsSelected ( i ) then
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 306
14816: IFFALSE 14864
// begin if i in hInvincible then
14818: LD_VAR 0 2
14822: PUSH
14823: LD_EXP 61
14827: IN
14828: IFFALSE 14848
// hInvincible := hInvincible diff i else
14830: LD_ADDR_EXP 61
14834: PUSH
14835: LD_EXP 61
14839: PUSH
14840: LD_VAR 0 2
14844: DIFF
14845: ST_TO_ADDR
14846: GO 14864
// hInvincible := hInvincible union i ;
14848: LD_ADDR_EXP 61
14852: PUSH
14853: LD_EXP 61
14857: PUSH
14858: LD_VAR 0 2
14862: UNION
14863: ST_TO_ADDR
// end ;
14864: GO 14804
14866: POP
14867: POP
// end ;
14868: LD_VAR 0 1
14872: RET
// export function hHackInvisible ; var i , j ; begin
14873: LD_INT 0
14875: PPUSH
14876: PPUSH
14877: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: LD_INT 21
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: PUSH
14898: FOR_IN
14899: IFFALSE 14923
// if IsSelected ( i ) then
14901: LD_VAR 0 2
14905: PPUSH
14906: CALL_OW 306
14910: IFFALSE 14921
// ComForceInvisible ( i ) ;
14912: LD_VAR 0 2
14916: PPUSH
14917: CALL_OW 496
14921: GO 14898
14923: POP
14924: POP
// end ;
14925: LD_VAR 0 1
14929: RET
// export function hHackChangeYourSide ; begin
14930: LD_INT 0
14932: PPUSH
// if your_side = 8 then
14933: LD_OWVAR 2
14937: PUSH
14938: LD_INT 8
14940: EQUAL
14941: IFFALSE 14953
// your_side := 0 else
14943: LD_ADDR_OWVAR 2
14947: PUSH
14948: LD_INT 0
14950: ST_TO_ADDR
14951: GO 14967
// your_side := your_side + 1 ;
14953: LD_ADDR_OWVAR 2
14957: PUSH
14958: LD_OWVAR 2
14962: PUSH
14963: LD_INT 1
14965: PLUS
14966: ST_TO_ADDR
// end ;
14967: LD_VAR 0 1
14971: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
14976: PPUSH
// for i in all_units do
14977: LD_ADDR_VAR 0 2
14981: PUSH
14982: LD_OWVAR 3
14986: PUSH
14987: FOR_IN
14988: IFFALSE 15066
// if IsSelected ( i ) then
14990: LD_VAR 0 2
14994: PPUSH
14995: CALL_OW 306
14999: IFFALSE 15064
// begin j := GetSide ( i ) ;
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL_OW 255
15015: ST_TO_ADDR
// if j = 8 then
15016: LD_VAR 0 3
15020: PUSH
15021: LD_INT 8
15023: EQUAL
15024: IFFALSE 15036
// j := 0 else
15026: LD_ADDR_VAR 0 3
15030: PUSH
15031: LD_INT 0
15033: ST_TO_ADDR
15034: GO 15050
// j := j + 1 ;
15036: LD_ADDR_VAR 0 3
15040: PUSH
15041: LD_VAR 0 3
15045: PUSH
15046: LD_INT 1
15048: PLUS
15049: ST_TO_ADDR
// SetSide ( i , j ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_VAR 0 3
15059: PPUSH
15060: CALL_OW 235
// end ;
15064: GO 14987
15066: POP
15067: POP
// end ;
15068: LD_VAR 0 1
15072: RET
// export function hHackFog ; begin
15073: LD_INT 0
15075: PPUSH
// FogOff ( true ) ;
15076: LD_INT 1
15078: PPUSH
15079: CALL_OW 344
// end ;
15083: LD_VAR 0 1
15087: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15088: LD_INT 0
15090: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: LD_VAR 0 3
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 483
// CenterOnXY ( x , y ) ;
15116: LD_VAR 0 2
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: CALL_OW 84
// end ; end_of_file
15130: LD_VAR 0 4
15134: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15135: LD_INT 0
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 264
15150: PUSH
15151: LD_EXP 78
15155: EQUAL
15156: IFFALSE 15228
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15158: LD_INT 68
15160: PPUSH
15161: LD_VAR 0 1
15165: PPUSH
15166: CALL_OW 255
15170: PPUSH
15171: CALL_OW 321
15175: PUSH
15176: LD_INT 2
15178: EQUAL
15179: IFFALSE 15191
// eff := 70 else
15181: LD_ADDR_VAR 0 4
15185: PUSH
15186: LD_INT 70
15188: ST_TO_ADDR
15189: GO 15199
// eff := 30 ;
15191: LD_ADDR_VAR 0 4
15195: PUSH
15196: LD_INT 30
15198: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 250
15208: PPUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 251
15218: PPUSH
15219: LD_VAR 0 4
15223: PPUSH
15224: CALL_OW 495
// end ; end ;
15228: LD_VAR 0 2
15232: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15233: LD_INT 0
15235: PPUSH
// end ;
15236: LD_VAR 0 4
15240: RET
// export function SOS_Command ( cmd ) ; begin
15241: LD_INT 0
15243: PPUSH
// end ;
15244: LD_VAR 0 2
15248: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15249: LD_INT 0
15251: PPUSH
// if cmd = 121 then
15252: LD_VAR 0 1
15256: PUSH
15257: LD_INT 121
15259: EQUAL
15260: IFFALSE 15262
// end ;
15262: LD_VAR 0 6
15266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15267: LD_INT 0
15269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15270: LD_VAR 0 1
15274: PUSH
15275: LD_INT 250
15277: EQUAL
15278: PUSH
15279: LD_VAR 0 2
15283: PPUSH
15284: CALL_OW 264
15288: PUSH
15289: LD_EXP 81
15293: EQUAL
15294: AND
15295: IFFALSE 15316
// MinerPlaceMine ( unit , x , y ) ;
15297: LD_VAR 0 2
15301: PPUSH
15302: LD_VAR 0 4
15306: PPUSH
15307: LD_VAR 0 5
15311: PPUSH
15312: CALL 17665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15316: LD_VAR 0 1
15320: PUSH
15321: LD_INT 251
15323: EQUAL
15324: PUSH
15325: LD_VAR 0 2
15329: PPUSH
15330: CALL_OW 264
15334: PUSH
15335: LD_EXP 81
15339: EQUAL
15340: AND
15341: IFFALSE 15362
// MinerDetonateMine ( unit , x , y ) ;
15343: LD_VAR 0 2
15347: PPUSH
15348: LD_VAR 0 4
15352: PPUSH
15353: LD_VAR 0 5
15357: PPUSH
15358: CALL 17942 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15362: LD_VAR 0 1
15366: PUSH
15367: LD_INT 252
15369: EQUAL
15370: PUSH
15371: LD_VAR 0 2
15375: PPUSH
15376: CALL_OW 264
15380: PUSH
15381: LD_EXP 81
15385: EQUAL
15386: AND
15387: IFFALSE 15408
// MinerCreateMinefield ( unit , x , y ) ;
15389: LD_VAR 0 2
15393: PPUSH
15394: LD_VAR 0 4
15398: PPUSH
15399: LD_VAR 0 5
15403: PPUSH
15404: CALL 18359 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15408: LD_VAR 0 1
15412: PUSH
15413: LD_INT 253
15415: EQUAL
15416: PUSH
15417: LD_VAR 0 2
15421: PPUSH
15422: CALL_OW 257
15426: PUSH
15427: LD_INT 5
15429: EQUAL
15430: AND
15431: IFFALSE 15452
// ComBinocular ( unit , x , y ) ;
15433: LD_VAR 0 2
15437: PPUSH
15438: LD_VAR 0 4
15442: PPUSH
15443: LD_VAR 0 5
15447: PPUSH
15448: CALL 18730 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15452: LD_VAR 0 1
15456: PUSH
15457: LD_INT 254
15459: EQUAL
15460: PUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: CALL_OW 264
15470: PUSH
15471: LD_EXP 76
15475: EQUAL
15476: AND
15477: PUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: CALL_OW 263
15487: PUSH
15488: LD_INT 3
15490: EQUAL
15491: AND
15492: IFFALSE 15508
// HackDestroyVehicle ( unit , selectedUnit ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: CALL 17025 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15508: LD_VAR 0 1
15512: PUSH
15513: LD_INT 255
15515: EQUAL
15516: PUSH
15517: LD_VAR 0 2
15521: PPUSH
15522: CALL_OW 264
15526: PUSH
15527: LD_INT 14
15529: PUSH
15530: LD_INT 53
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: IN
15537: AND
15538: PUSH
15539: LD_VAR 0 4
15543: PPUSH
15544: LD_VAR 0 5
15548: PPUSH
15549: CALL_OW 488
15553: AND
15554: IFFALSE 15578
// CutTreeXYR ( unit , x , y , 12 ) ;
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: LD_VAR 0 5
15570: PPUSH
15571: LD_INT 12
15573: PPUSH
15574: CALL 15591 0 4
// end ;
15578: LD_VAR 0 6
15582: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
15583: LD_INT 0
15585: PPUSH
// end ;
15586: LD_VAR 0 4
15590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15591: LD_INT 0
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15602: LD_VAR 0 1
15606: NOT
15607: PUSH
15608: LD_VAR 0 2
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: CALL_OW 488
15622: NOT
15623: OR
15624: PUSH
15625: LD_VAR 0 4
15629: NOT
15630: OR
15631: IFFALSE 15635
// exit ;
15633: GO 15975
// list := [ ] ;
15635: LD_ADDR_VAR 0 13
15639: PUSH
15640: EMPTY
15641: ST_TO_ADDR
// if x - r < 0 then
15642: LD_VAR 0 2
15646: PUSH
15647: LD_VAR 0 4
15651: MINUS
15652: PUSH
15653: LD_INT 0
15655: LESS
15656: IFFALSE 15668
// min_x := 0 else
15658: LD_ADDR_VAR 0 7
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
15666: GO 15684
// min_x := x - r ;
15668: LD_ADDR_VAR 0 7
15672: PUSH
15673: LD_VAR 0 2
15677: PUSH
15678: LD_VAR 0 4
15682: MINUS
15683: ST_TO_ADDR
// if y - r < 0 then
15684: LD_VAR 0 3
15688: PUSH
15689: LD_VAR 0 4
15693: MINUS
15694: PUSH
15695: LD_INT 0
15697: LESS
15698: IFFALSE 15710
// min_y := 0 else
15700: LD_ADDR_VAR 0 8
15704: PUSH
15705: LD_INT 0
15707: ST_TO_ADDR
15708: GO 15726
// min_y := y - r ;
15710: LD_ADDR_VAR 0 8
15714: PUSH
15715: LD_VAR 0 3
15719: PUSH
15720: LD_VAR 0 4
15724: MINUS
15725: ST_TO_ADDR
// max_x := x + r ;
15726: LD_ADDR_VAR 0 9
15730: PUSH
15731: LD_VAR 0 2
15735: PUSH
15736: LD_VAR 0 4
15740: PLUS
15741: ST_TO_ADDR
// max_y := y + r ;
15742: LD_ADDR_VAR 0 10
15746: PUSH
15747: LD_VAR 0 3
15751: PUSH
15752: LD_VAR 0 4
15756: PLUS
15757: ST_TO_ADDR
// for _x = min_x to max_x do
15758: LD_ADDR_VAR 0 11
15762: PUSH
15763: DOUBLE
15764: LD_VAR 0 7
15768: DEC
15769: ST_TO_ADDR
15770: LD_VAR 0 9
15774: PUSH
15775: FOR_TO
15776: IFFALSE 15893
// for _y = min_y to max_y do
15778: LD_ADDR_VAR 0 12
15782: PUSH
15783: DOUBLE
15784: LD_VAR 0 8
15788: DEC
15789: ST_TO_ADDR
15790: LD_VAR 0 10
15794: PUSH
15795: FOR_TO
15796: IFFALSE 15889
// begin if not ValidHex ( _x , _y ) then
15798: LD_VAR 0 11
15802: PPUSH
15803: LD_VAR 0 12
15807: PPUSH
15808: CALL_OW 488
15812: NOT
15813: IFFALSE 15817
// continue ;
15815: GO 15795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15817: LD_VAR 0 11
15821: PPUSH
15822: LD_VAR 0 12
15826: PPUSH
15827: CALL_OW 351
15831: PUSH
15832: LD_VAR 0 11
15836: PPUSH
15837: LD_VAR 0 12
15841: PPUSH
15842: CALL_OW 554
15846: AND
15847: IFFALSE 15887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15849: LD_ADDR_VAR 0 13
15853: PUSH
15854: LD_VAR 0 13
15858: PPUSH
15859: LD_VAR 0 13
15863: PUSH
15864: LD_INT 1
15866: PLUS
15867: PPUSH
15868: LD_VAR 0 11
15872: PUSH
15873: LD_VAR 0 12
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 2
15886: ST_TO_ADDR
// end ;
15887: GO 15795
15889: POP
15890: POP
15891: GO 15775
15893: POP
15894: POP
// if not list then
15895: LD_VAR 0 13
15899: NOT
15900: IFFALSE 15904
// exit ;
15902: GO 15975
// for i in list do
15904: LD_ADDR_VAR 0 6
15908: PUSH
15909: LD_VAR 0 13
15913: PUSH
15914: FOR_IN
15915: IFFALSE 15973
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15917: LD_VAR 0 1
15921: PPUSH
15922: LD_STRING M
15924: PUSH
15925: LD_VAR 0 6
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PUSH
15934: LD_VAR 0 6
15938: PUSH
15939: LD_INT 2
15941: ARRAY
15942: PUSH
15943: LD_INT 0
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: LD_INT 0
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: PPUSH
15967: CALL_OW 447
15971: GO 15914
15973: POP
15974: POP
// end ;
15975: LD_VAR 0 5
15979: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15980: LD_EXP 64
15984: NOT
15985: IFFALSE 16035
15987: GO 15989
15989: DISABLE
// begin initHack := true ;
15990: LD_ADDR_EXP 64
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// hackTanks := [ ] ;
15998: LD_ADDR_EXP 65
16002: PUSH
16003: EMPTY
16004: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16005: LD_ADDR_EXP 66
16009: PUSH
16010: EMPTY
16011: ST_TO_ADDR
// hackLimit := 3 ;
16012: LD_ADDR_EXP 67
16016: PUSH
16017: LD_INT 3
16019: ST_TO_ADDR
// hackDist := 12 ;
16020: LD_ADDR_EXP 68
16024: PUSH
16025: LD_INT 12
16027: ST_TO_ADDR
// hackCounter := [ ] ;
16028: LD_ADDR_EXP 69
16032: PUSH
16033: EMPTY
16034: ST_TO_ADDR
// end ;
16035: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16036: LD_EXP 64
16040: PUSH
16041: LD_INT 34
16043: PUSH
16044: LD_EXP 76
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: AND
16058: IFFALSE 16313
16060: GO 16062
16062: DISABLE
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
// begin enable ;
16067: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16068: LD_ADDR_VAR 0 1
16072: PUSH
16073: LD_INT 34
16075: PUSH
16076: LD_EXP 76
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16311
// begin if not i in hackTanks then
16093: LD_VAR 0 1
16097: PUSH
16098: LD_EXP 65
16102: IN
16103: NOT
16104: IFFALSE 16187
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16106: LD_ADDR_EXP 65
16110: PUSH
16111: LD_EXP 65
16115: PPUSH
16116: LD_EXP 65
16120: PUSH
16121: LD_INT 1
16123: PLUS
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 1
16134: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16135: LD_ADDR_EXP 66
16139: PUSH
16140: LD_EXP 66
16144: PPUSH
16145: LD_EXP 66
16149: PUSH
16150: LD_INT 1
16152: PLUS
16153: PPUSH
16154: EMPTY
16155: PPUSH
16156: CALL_OW 1
16160: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16161: LD_ADDR_EXP 69
16165: PUSH
16166: LD_EXP 69
16170: PPUSH
16171: LD_EXP 69
16175: PUSH
16176: LD_INT 1
16178: PLUS
16179: PPUSH
16180: EMPTY
16181: PPUSH
16182: CALL_OW 1
16186: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 302
16196: NOT
16197: IFFALSE 16210
// begin HackUnlinkAll ( i ) ;
16199: LD_VAR 0 1
16203: PPUSH
16204: CALL 16316 0 1
// continue ;
16208: GO 16090
// end ; HackCheckCapturedStatus ( i ) ;
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL 16759 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16219: LD_ADDR_VAR 0 2
16223: PUSH
16224: LD_INT 81
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 255
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 33
16243: PUSH
16244: LD_INT 3
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 91
16253: PUSH
16254: LD_VAR 0 1
16258: PUSH
16259: LD_EXP 68
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 50
16271: PUSH
16272: EMPTY
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 69
16285: ST_TO_ADDR
// if not tmp then
16286: LD_VAR 0 2
16290: NOT
16291: IFFALSE 16295
// continue ;
16293: GO 16090
// HackLink ( i , tmp ) ;
16295: LD_VAR 0 1
16299: PPUSH
16300: LD_VAR 0 2
16304: PPUSH
16305: CALL 16452 0 2
// end ;
16309: GO 16090
16311: POP
16312: POP
// end ;
16313: PPOPN 2
16315: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16316: LD_INT 0
16318: PPUSH
16319: PPUSH
16320: PPUSH
// if not hack in hackTanks then
16321: LD_VAR 0 1
16325: PUSH
16326: LD_EXP 65
16330: IN
16331: NOT
16332: IFFALSE 16336
// exit ;
16334: GO 16447
// index := GetElementIndex ( hackTanks , hack ) ;
16336: LD_ADDR_VAR 0 4
16340: PUSH
16341: LD_EXP 65
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL 24044 0 2
16355: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16356: LD_EXP 66
16360: PUSH
16361: LD_VAR 0 4
16365: ARRAY
16366: IFFALSE 16447
// begin for i in hackTanksCaptured [ index ] do
16368: LD_ADDR_VAR 0 3
16372: PUSH
16373: LD_EXP 66
16377: PUSH
16378: LD_VAR 0 4
16382: ARRAY
16383: PUSH
16384: FOR_IN
16385: IFFALSE 16411
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16387: LD_VAR 0 3
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PPUSH
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 2
16403: ARRAY
16404: PPUSH
16405: CALL_OW 235
16409: GO 16384
16411: POP
16412: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16413: LD_ADDR_EXP 66
16417: PUSH
16418: LD_EXP 66
16422: PPUSH
16423: LD_VAR 0 4
16427: PPUSH
16428: EMPTY
16429: PPUSH
16430: CALL_OW 1
16434: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_INT 0
16442: PPUSH
16443: CALL_OW 505
// end ; end ;
16447: LD_VAR 0 2
16451: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
16456: PPUSH
// if not hack in hackTanks or not vehicles then
16457: LD_VAR 0 1
16461: PUSH
16462: LD_EXP 65
16466: IN
16467: NOT
16468: PUSH
16469: LD_VAR 0 2
16473: NOT
16474: OR
16475: IFFALSE 16479
// exit ;
16477: GO 16754
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16479: LD_ADDR_VAR 0 2
16483: PUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL 24694 0 4
16504: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16505: LD_ADDR_VAR 0 5
16509: PUSH
16510: LD_EXP 65
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL 24044 0 2
16524: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16525: LD_EXP 66
16529: PUSH
16530: LD_VAR 0 5
16534: ARRAY
16535: PUSH
16536: LD_EXP 67
16540: LESS
16541: IFFALSE 16730
// begin for i := 1 to vehicles do
16543: LD_ADDR_VAR 0 4
16547: PUSH
16548: DOUBLE
16549: LD_INT 1
16551: DEC
16552: ST_TO_ADDR
16553: LD_VAR 0 2
16557: PUSH
16558: FOR_TO
16559: IFFALSE 16728
// begin if hackTanksCaptured [ index ] = hackLimit then
16561: LD_EXP 66
16565: PUSH
16566: LD_VAR 0 5
16570: ARRAY
16571: PUSH
16572: LD_EXP 67
16576: EQUAL
16577: IFFALSE 16581
// break ;
16579: GO 16728
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16581: LD_ADDR_EXP 69
16585: PUSH
16586: LD_EXP 69
16590: PPUSH
16591: LD_VAR 0 5
16595: PPUSH
16596: LD_EXP 69
16600: PUSH
16601: LD_VAR 0 5
16605: ARRAY
16606: PUSH
16607: LD_INT 1
16609: PLUS
16610: PPUSH
16611: CALL_OW 1
16615: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16616: LD_ADDR_EXP 66
16620: PUSH
16621: LD_EXP 66
16625: PPUSH
16626: LD_VAR 0 5
16630: PUSH
16631: LD_EXP 66
16635: PUSH
16636: LD_VAR 0 5
16640: ARRAY
16641: PUSH
16642: LD_INT 1
16644: PLUS
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PPUSH
16650: LD_VAR 0 2
16654: PUSH
16655: LD_VAR 0 4
16659: ARRAY
16660: PUSH
16661: LD_VAR 0 2
16665: PUSH
16666: LD_VAR 0 4
16670: ARRAY
16671: PPUSH
16672: CALL_OW 255
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL 24259 0 3
16685: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16686: LD_VAR 0 2
16690: PUSH
16691: LD_VAR 0 4
16695: ARRAY
16696: PPUSH
16697: LD_VAR 0 1
16701: PPUSH
16702: CALL_OW 255
16706: PPUSH
16707: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16711: LD_VAR 0 2
16715: PUSH
16716: LD_VAR 0 4
16720: ARRAY
16721: PPUSH
16722: CALL_OW 141
// end ;
16726: GO 16558
16728: POP
16729: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_EXP 66
16739: PUSH
16740: LD_VAR 0 5
16744: ARRAY
16745: PUSH
16746: LD_INT 0
16748: PLUS
16749: PPUSH
16750: CALL_OW 505
// end ;
16754: LD_VAR 0 3
16758: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16759: LD_INT 0
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
// if not hack in hackTanks then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 65
16774: IN
16775: NOT
16776: IFFALSE 16780
// exit ;
16778: GO 17020
// index := GetElementIndex ( hackTanks , hack ) ;
16780: LD_ADDR_VAR 0 4
16784: PUSH
16785: LD_EXP 65
16789: PPUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL 24044 0 2
16799: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16800: LD_ADDR_VAR 0 3
16804: PUSH
16805: DOUBLE
16806: LD_EXP 66
16810: PUSH
16811: LD_VAR 0 4
16815: ARRAY
16816: INC
16817: ST_TO_ADDR
16818: LD_INT 1
16820: PUSH
16821: FOR_DOWNTO
16822: IFFALSE 16994
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16824: LD_ADDR_VAR 0 5
16828: PUSH
16829: LD_EXP 66
16833: PUSH
16834: LD_VAR 0 4
16838: ARRAY
16839: PUSH
16840: LD_VAR 0 3
16844: ARRAY
16845: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16846: LD_VAR 0 5
16850: PUSH
16851: LD_INT 1
16853: ARRAY
16854: PPUSH
16855: CALL_OW 302
16859: NOT
16860: PUSH
16861: LD_VAR 0 5
16865: PUSH
16866: LD_INT 1
16868: ARRAY
16869: PPUSH
16870: CALL_OW 255
16874: PUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 255
16884: NONEQUAL
16885: OR
16886: IFFALSE 16992
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16888: LD_VAR 0 5
16892: PUSH
16893: LD_INT 1
16895: ARRAY
16896: PPUSH
16897: CALL_OW 305
16901: PUSH
16902: LD_VAR 0 5
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: CALL_OW 255
16915: PUSH
16916: LD_VAR 0 1
16920: PPUSH
16921: CALL_OW 255
16925: EQUAL
16926: AND
16927: IFFALSE 16951
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16929: LD_VAR 0 5
16933: PUSH
16934: LD_INT 1
16936: ARRAY
16937: PPUSH
16938: LD_VAR 0 5
16942: PUSH
16943: LD_INT 2
16945: ARRAY
16946: PPUSH
16947: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16951: LD_ADDR_EXP 66
16955: PUSH
16956: LD_EXP 66
16960: PPUSH
16961: LD_VAR 0 4
16965: PPUSH
16966: LD_EXP 66
16970: PUSH
16971: LD_VAR 0 4
16975: ARRAY
16976: PPUSH
16977: LD_VAR 0 3
16981: PPUSH
16982: CALL_OW 3
16986: PPUSH
16987: CALL_OW 1
16991: ST_TO_ADDR
// end ; end ;
16992: GO 16821
16994: POP
16995: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_EXP 66
17005: PUSH
17006: LD_VAR 0 4
17010: ARRAY
17011: PUSH
17012: LD_INT 0
17014: PLUS
17015: PPUSH
17016: CALL_OW 505
// end ;
17020: LD_VAR 0 2
17024: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17025: LD_INT 0
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
// if not hack in hackTanks then
17031: LD_VAR 0 1
17035: PUSH
17036: LD_EXP 65
17040: IN
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17131
// index := GetElementIndex ( hackTanks , hack ) ;
17046: LD_ADDR_VAR 0 5
17050: PUSH
17051: LD_EXP 65
17055: PPUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL 24044 0 2
17065: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17066: LD_ADDR_VAR 0 4
17070: PUSH
17071: DOUBLE
17072: LD_INT 1
17074: DEC
17075: ST_TO_ADDR
17076: LD_EXP 66
17080: PUSH
17081: LD_VAR 0 5
17085: ARRAY
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17129
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17090: LD_EXP 66
17094: PUSH
17095: LD_VAR 0 5
17099: ARRAY
17100: PUSH
17101: LD_VAR 0 4
17105: ARRAY
17106: PUSH
17107: LD_INT 1
17109: ARRAY
17110: PUSH
17111: LD_VAR 0 2
17115: EQUAL
17116: IFFALSE 17127
// KillUnit ( vehicle ) ;
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL_OW 66
17127: GO 17087
17129: POP
17130: POP
// end ;
17131: LD_VAR 0 3
17135: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17136: LD_EXP 70
17140: NOT
17141: IFFALSE 17176
17143: GO 17145
17145: DISABLE
// begin initMiner := true ;
17146: LD_ADDR_EXP 70
17150: PUSH
17151: LD_INT 1
17153: ST_TO_ADDR
// minersList := [ ] ;
17154: LD_ADDR_EXP 71
17158: PUSH
17159: EMPTY
17160: ST_TO_ADDR
// minerMinesList := [ ] ;
17161: LD_ADDR_EXP 72
17165: PUSH
17166: EMPTY
17167: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17168: LD_ADDR_EXP 73
17172: PUSH
17173: LD_INT 5
17175: ST_TO_ADDR
// end ;
17176: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17177: LD_EXP 70
17181: PUSH
17182: LD_INT 34
17184: PUSH
17185: LD_EXP 81
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: AND
17199: IFFALSE 17662
17201: GO 17203
17203: DISABLE
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
// begin enable ;
17210: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17211: LD_ADDR_VAR 0 1
17215: PUSH
17216: LD_INT 34
17218: PUSH
17219: LD_EXP 81
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: FOR_IN
17234: IFFALSE 17306
// begin if not i in minersList then
17236: LD_VAR 0 1
17240: PUSH
17241: LD_EXP 71
17245: IN
17246: NOT
17247: IFFALSE 17304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17249: LD_ADDR_EXP 71
17253: PUSH
17254: LD_EXP 71
17258: PPUSH
17259: LD_EXP 71
17263: PUSH
17264: LD_INT 1
17266: PLUS
17267: PPUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 1
17277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17278: LD_ADDR_EXP 72
17282: PUSH
17283: LD_EXP 72
17287: PPUSH
17288: LD_EXP 72
17292: PUSH
17293: LD_INT 1
17295: PLUS
17296: PPUSH
17297: EMPTY
17298: PPUSH
17299: CALL_OW 1
17303: ST_TO_ADDR
// end end ;
17304: GO 17233
17306: POP
17307: POP
// for i := minerMinesList downto 1 do
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: DOUBLE
17314: LD_EXP 72
17318: INC
17319: ST_TO_ADDR
17320: LD_INT 1
17322: PUSH
17323: FOR_DOWNTO
17324: IFFALSE 17660
// begin if IsLive ( minersList [ i ] ) then
17326: LD_EXP 71
17330: PUSH
17331: LD_VAR 0 1
17335: ARRAY
17336: PPUSH
17337: CALL_OW 300
17341: IFFALSE 17369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17343: LD_EXP 71
17347: PUSH
17348: LD_VAR 0 1
17352: ARRAY
17353: PPUSH
17354: LD_EXP 72
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: PPUSH
17365: CALL_OW 505
// if not minerMinesList [ i ] then
17369: LD_EXP 72
17373: PUSH
17374: LD_VAR 0 1
17378: ARRAY
17379: NOT
17380: IFFALSE 17384
// continue ;
17382: GO 17323
// for j := minerMinesList [ i ] downto 1 do
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: DOUBLE
17390: LD_EXP 72
17394: PUSH
17395: LD_VAR 0 1
17399: ARRAY
17400: INC
17401: ST_TO_ADDR
17402: LD_INT 1
17404: PUSH
17405: FOR_DOWNTO
17406: IFFALSE 17656
// begin side := GetSide ( minersList [ i ] ) ;
17408: LD_ADDR_VAR 0 3
17412: PUSH
17413: LD_EXP 71
17417: PUSH
17418: LD_VAR 0 1
17422: ARRAY
17423: PPUSH
17424: CALL_OW 255
17428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17429: LD_ADDR_VAR 0 4
17433: PUSH
17434: LD_EXP 72
17438: PUSH
17439: LD_VAR 0 1
17443: ARRAY
17444: PUSH
17445: LD_VAR 0 2
17449: ARRAY
17450: PUSH
17451: LD_INT 1
17453: ARRAY
17454: PPUSH
17455: LD_EXP 72
17459: PUSH
17460: LD_VAR 0 1
17464: ARRAY
17465: PUSH
17466: LD_VAR 0 2
17470: ARRAY
17471: PUSH
17472: LD_INT 2
17474: ARRAY
17475: PPUSH
17476: CALL_OW 428
17480: ST_TO_ADDR
// if not tmp then
17481: LD_VAR 0 4
17485: NOT
17486: IFFALSE 17490
// continue ;
17488: GO 17405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17490: LD_VAR 0 4
17494: PUSH
17495: LD_INT 81
17497: PUSH
17498: LD_VAR 0 3
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: IN
17512: PUSH
17513: LD_EXP 72
17517: PUSH
17518: LD_VAR 0 1
17522: ARRAY
17523: PUSH
17524: LD_VAR 0 2
17528: ARRAY
17529: PUSH
17530: LD_INT 1
17532: ARRAY
17533: PPUSH
17534: LD_EXP 72
17538: PUSH
17539: LD_VAR 0 1
17543: ARRAY
17544: PUSH
17545: LD_VAR 0 2
17549: ARRAY
17550: PUSH
17551: LD_INT 2
17553: ARRAY
17554: PPUSH
17555: CALL_OW 458
17559: AND
17560: IFFALSE 17654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17562: LD_EXP 72
17566: PUSH
17567: LD_VAR 0 1
17571: ARRAY
17572: PUSH
17573: LD_VAR 0 2
17577: ARRAY
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PPUSH
17583: LD_EXP 72
17587: PUSH
17588: LD_VAR 0 1
17592: ARRAY
17593: PUSH
17594: LD_VAR 0 2
17598: ARRAY
17599: PUSH
17600: LD_INT 2
17602: ARRAY
17603: PPUSH
17604: LD_VAR 0 3
17608: PPUSH
17609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17613: LD_ADDR_EXP 72
17617: PUSH
17618: LD_EXP 72
17622: PPUSH
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_EXP 72
17632: PUSH
17633: LD_VAR 0 1
17637: ARRAY
17638: PPUSH
17639: LD_VAR 0 2
17643: PPUSH
17644: CALL_OW 3
17648: PPUSH
17649: CALL_OW 1
17653: ST_TO_ADDR
// end ; end ;
17654: GO 17405
17656: POP
17657: POP
// end ;
17658: GO 17323
17660: POP
17661: POP
// end ;
17662: PPOPN 4
17664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
// result := false ;
17669: LD_ADDR_VAR 0 4
17673: PUSH
17674: LD_INT 0
17676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17677: LD_VAR 0 1
17681: PPUSH
17682: CALL_OW 264
17686: PUSH
17687: LD_EXP 81
17691: EQUAL
17692: NOT
17693: IFFALSE 17697
// exit ;
17695: GO 17937
// index := GetElementIndex ( minersList , unit ) ;
17697: LD_ADDR_VAR 0 5
17701: PUSH
17702: LD_EXP 71
17706: PPUSH
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL 24044 0 2
17716: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17717: LD_EXP 72
17721: PUSH
17722: LD_VAR 0 5
17726: ARRAY
17727: PUSH
17728: LD_EXP 73
17732: GREATEREQUAL
17733: IFFALSE 17737
// exit ;
17735: GO 17937
// ComMoveXY ( unit , x , y ) ;
17737: LD_VAR 0 1
17741: PPUSH
17742: LD_VAR 0 2
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17756: LD_INT 35
17758: PPUSH
17759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17763: LD_VAR 0 1
17767: PPUSH
17768: LD_VAR 0 2
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: CALL 54441 0 3
17782: NOT
17783: PUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: CALL_OW 314
17793: AND
17794: IFFALSE 17798
// exit ;
17796: GO 17937
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17798: LD_VAR 0 2
17802: PPUSH
17803: LD_VAR 0 3
17807: PPUSH
17808: CALL_OW 428
17812: PUSH
17813: LD_VAR 0 1
17817: EQUAL
17818: PUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 314
17828: NOT
17829: AND
17830: IFFALSE 17756
// PlaySoundXY ( x , y , PlantMine ) ;
17832: LD_VAR 0 2
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_STRING PlantMine
17844: PPUSH
17845: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 255
17868: PPUSH
17869: LD_INT 0
17871: PPUSH
17872: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17876: LD_ADDR_EXP 72
17880: PUSH
17881: LD_EXP 72
17885: PPUSH
17886: LD_VAR 0 5
17890: PUSH
17891: LD_EXP 72
17895: PUSH
17896: LD_VAR 0 5
17900: ARRAY
17901: PUSH
17902: LD_INT 1
17904: PLUS
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PPUSH
17910: LD_VAR 0 2
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL 24259 0 3
17928: ST_TO_ADDR
// result := true ;
17929: LD_ADDR_VAR 0 4
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// end ;
17937: LD_VAR 0 4
17941: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17942: LD_INT 0
17944: PPUSH
17945: PPUSH
17946: PPUSH
// if not unit in minersList then
17947: LD_VAR 0 1
17951: PUSH
17952: LD_EXP 71
17956: IN
17957: NOT
17958: IFFALSE 17962
// exit ;
17960: GO 18354
// index := GetElementIndex ( minersList , unit ) ;
17962: LD_ADDR_VAR 0 6
17966: PUSH
17967: LD_EXP 71
17971: PPUSH
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL 24044 0 2
17981: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17982: LD_ADDR_VAR 0 5
17986: PUSH
17987: DOUBLE
17988: LD_EXP 72
17992: PUSH
17993: LD_VAR 0 6
17997: ARRAY
17998: INC
17999: ST_TO_ADDR
18000: LD_INT 1
18002: PUSH
18003: FOR_DOWNTO
18004: IFFALSE 18165
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18006: LD_EXP 72
18010: PUSH
18011: LD_VAR 0 6
18015: ARRAY
18016: PUSH
18017: LD_VAR 0 5
18021: ARRAY
18022: PUSH
18023: LD_INT 1
18025: ARRAY
18026: PUSH
18027: LD_VAR 0 2
18031: EQUAL
18032: PUSH
18033: LD_EXP 72
18037: PUSH
18038: LD_VAR 0 6
18042: ARRAY
18043: PUSH
18044: LD_VAR 0 5
18048: ARRAY
18049: PUSH
18050: LD_INT 2
18052: ARRAY
18053: PUSH
18054: LD_VAR 0 3
18058: EQUAL
18059: AND
18060: IFFALSE 18163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18062: LD_EXP 72
18066: PUSH
18067: LD_VAR 0 6
18071: ARRAY
18072: PUSH
18073: LD_VAR 0 5
18077: ARRAY
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: LD_EXP 72
18087: PUSH
18088: LD_VAR 0 6
18092: ARRAY
18093: PUSH
18094: LD_VAR 0 5
18098: ARRAY
18099: PUSH
18100: LD_INT 2
18102: ARRAY
18103: PPUSH
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 255
18113: PPUSH
18114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18118: LD_ADDR_EXP 72
18122: PUSH
18123: LD_EXP 72
18127: PPUSH
18128: LD_VAR 0 6
18132: PPUSH
18133: LD_EXP 72
18137: PUSH
18138: LD_VAR 0 6
18142: ARRAY
18143: PPUSH
18144: LD_VAR 0 5
18148: PPUSH
18149: CALL_OW 3
18153: PPUSH
18154: CALL_OW 1
18158: ST_TO_ADDR
// exit ;
18159: POP
18160: POP
18161: GO 18354
// end ; end ;
18163: GO 18003
18165: POP
18166: POP
// for i := minerMinesList [ index ] downto 1 do
18167: LD_ADDR_VAR 0 5
18171: PUSH
18172: DOUBLE
18173: LD_EXP 72
18177: PUSH
18178: LD_VAR 0 6
18182: ARRAY
18183: INC
18184: ST_TO_ADDR
18185: LD_INT 1
18187: PUSH
18188: FOR_DOWNTO
18189: IFFALSE 18352
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18191: LD_EXP 72
18195: PUSH
18196: LD_VAR 0 6
18200: ARRAY
18201: PUSH
18202: LD_VAR 0 5
18206: ARRAY
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: PPUSH
18212: LD_EXP 72
18216: PUSH
18217: LD_VAR 0 6
18221: ARRAY
18222: PUSH
18223: LD_VAR 0 5
18227: ARRAY
18228: PUSH
18229: LD_INT 2
18231: ARRAY
18232: PPUSH
18233: LD_VAR 0 2
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: CALL_OW 298
18247: PUSH
18248: LD_INT 6
18250: LESS
18251: IFFALSE 18350
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18253: LD_EXP 72
18257: PUSH
18258: LD_VAR 0 6
18262: ARRAY
18263: PUSH
18264: LD_VAR 0 5
18268: ARRAY
18269: PUSH
18270: LD_INT 1
18272: ARRAY
18273: PPUSH
18274: LD_EXP 72
18278: PUSH
18279: LD_VAR 0 6
18283: ARRAY
18284: PUSH
18285: LD_VAR 0 5
18289: ARRAY
18290: PUSH
18291: LD_INT 2
18293: ARRAY
18294: PPUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 255
18304: PPUSH
18305: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18309: LD_ADDR_EXP 72
18313: PUSH
18314: LD_EXP 72
18318: PPUSH
18319: LD_VAR 0 6
18323: PPUSH
18324: LD_EXP 72
18328: PUSH
18329: LD_VAR 0 6
18333: ARRAY
18334: PPUSH
18335: LD_VAR 0 5
18339: PPUSH
18340: CALL_OW 3
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// end ; end ;
18350: GO 18188
18352: POP
18353: POP
// end ;
18354: LD_VAR 0 4
18358: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 264
18379: PUSH
18380: LD_EXP 81
18384: EQUAL
18385: NOT
18386: PUSH
18387: LD_VAR 0 1
18391: PUSH
18392: LD_EXP 71
18396: IN
18397: NOT
18398: OR
18399: IFFALSE 18403
// exit ;
18401: GO 18725
// index := GetElementIndex ( minersList , unit ) ;
18403: LD_ADDR_VAR 0 6
18407: PUSH
18408: LD_EXP 71
18412: PPUSH
18413: LD_VAR 0 1
18417: PPUSH
18418: CALL 24044 0 2
18422: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18423: LD_ADDR_VAR 0 8
18427: PUSH
18428: LD_EXP 73
18432: PUSH
18433: LD_EXP 72
18437: PUSH
18438: LD_VAR 0 6
18442: ARRAY
18443: MINUS
18444: ST_TO_ADDR
// if not minesFreeAmount then
18445: LD_VAR 0 8
18449: NOT
18450: IFFALSE 18454
// exit ;
18452: GO 18725
// tmp := [ ] ;
18454: LD_ADDR_VAR 0 7
18458: PUSH
18459: EMPTY
18460: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18461: LD_ADDR_VAR 0 5
18465: PUSH
18466: DOUBLE
18467: LD_INT 1
18469: DEC
18470: ST_TO_ADDR
18471: LD_VAR 0 8
18475: PUSH
18476: FOR_TO
18477: IFFALSE 18672
// begin _d := rand ( 0 , 5 ) ;
18479: LD_ADDR_VAR 0 11
18483: PUSH
18484: LD_INT 0
18486: PPUSH
18487: LD_INT 5
18489: PPUSH
18490: CALL_OW 12
18494: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18495: LD_ADDR_VAR 0 12
18499: PUSH
18500: LD_INT 2
18502: PPUSH
18503: LD_INT 6
18505: PPUSH
18506: CALL_OW 12
18510: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18511: LD_ADDR_VAR 0 9
18515: PUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: LD_VAR 0 11
18525: PPUSH
18526: LD_VAR 0 12
18530: PPUSH
18531: CALL_OW 272
18535: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18536: LD_ADDR_VAR 0 10
18540: PUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_VAR 0 11
18550: PPUSH
18551: LD_VAR 0 12
18555: PPUSH
18556: CALL_OW 273
18560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18561: LD_VAR 0 9
18565: PPUSH
18566: LD_VAR 0 10
18570: PPUSH
18571: CALL_OW 488
18575: PUSH
18576: LD_VAR 0 9
18580: PUSH
18581: LD_VAR 0 10
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_VAR 0 7
18594: IN
18595: NOT
18596: AND
18597: PUSH
18598: LD_VAR 0 9
18602: PPUSH
18603: LD_VAR 0 10
18607: PPUSH
18608: CALL_OW 458
18612: NOT
18613: AND
18614: IFFALSE 18656
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18616: LD_ADDR_VAR 0 7
18620: PUSH
18621: LD_VAR 0 7
18625: PPUSH
18626: LD_VAR 0 7
18630: PUSH
18631: LD_INT 1
18633: PLUS
18634: PPUSH
18635: LD_VAR 0 9
18639: PUSH
18640: LD_VAR 0 10
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 1
18653: ST_TO_ADDR
18654: GO 18670
// i := i - 1 ;
18656: LD_ADDR_VAR 0 5
18660: PUSH
18661: LD_VAR 0 5
18665: PUSH
18666: LD_INT 1
18668: MINUS
18669: ST_TO_ADDR
// end ;
18670: GO 18476
18672: POP
18673: POP
// for i in tmp do
18674: LD_ADDR_VAR 0 5
18678: PUSH
18679: LD_VAR 0 7
18683: PUSH
18684: FOR_IN
18685: IFFALSE 18723
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_VAR 0 5
18696: PUSH
18697: LD_INT 1
18699: ARRAY
18700: PPUSH
18701: LD_VAR 0 5
18705: PUSH
18706: LD_INT 2
18708: ARRAY
18709: PPUSH
18710: CALL 17665 0 3
18714: NOT
18715: IFFALSE 18721
// exit ;
18717: POP
18718: POP
18719: GO 18725
18721: GO 18684
18723: POP
18724: POP
// end ;
18725: LD_VAR 0 4
18729: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18730: LD_INT 0
18732: PPUSH
18733: PPUSH
18734: PPUSH
18735: PPUSH
18736: PPUSH
18737: PPUSH
18738: PPUSH
// if not GetClass ( unit ) = class_sniper then
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 257
18748: PUSH
18749: LD_INT 5
18751: EQUAL
18752: NOT
18753: IFFALSE 18757
// exit ;
18755: GO 19145
// dist := 8 ;
18757: LD_ADDR_VAR 0 5
18761: PUSH
18762: LD_INT 8
18764: ST_TO_ADDR
// viewRange := 12 ;
18765: LD_ADDR_VAR 0 7
18769: PUSH
18770: LD_INT 12
18772: ST_TO_ADDR
// side := GetSide ( unit ) ;
18773: LD_ADDR_VAR 0 6
18777: PUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 255
18787: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18788: LD_INT 61
18790: PPUSH
18791: LD_VAR 0 6
18795: PPUSH
18796: CALL_OW 321
18800: PUSH
18801: LD_INT 2
18803: EQUAL
18804: IFFALSE 18814
// viewRange := 16 ;
18806: LD_ADDR_VAR 0 7
18810: PUSH
18811: LD_INT 16
18813: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18814: LD_VAR 0 1
18818: PPUSH
18819: LD_VAR 0 2
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: CALL_OW 297
18833: PUSH
18834: LD_VAR 0 5
18838: GREATER
18839: IFFALSE 18918
// begin ComMoveXY ( unit , x , y ) ;
18841: LD_VAR 0 1
18845: PPUSH
18846: LD_VAR 0 2
18850: PPUSH
18851: LD_VAR 0 3
18855: PPUSH
18856: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18860: LD_INT 35
18862: PPUSH
18863: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18867: LD_VAR 0 1
18871: PPUSH
18872: LD_VAR 0 2
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL 54441 0 3
18886: NOT
18887: IFFALSE 18891
// exit ;
18889: GO 19145
// until GetDistUnitXY ( unit , x , y ) < dist ;
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_VAR 0 2
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 297
18910: PUSH
18911: LD_VAR 0 5
18915: LESS
18916: IFFALSE 18860
// end ; ComTurnXY ( unit , x , y ) ;
18918: LD_VAR 0 1
18922: PPUSH
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: CALL_OW 118
// wait ( 5 ) ;
18937: LD_INT 5
18939: PPUSH
18940: CALL_OW 67
// _d := GetDir ( unit ) ;
18944: LD_ADDR_VAR 0 10
18948: PUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 254
18958: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18959: LD_ADDR_VAR 0 8
18963: PUSH
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 250
18973: PPUSH
18974: LD_VAR 0 10
18978: PPUSH
18979: LD_VAR 0 5
18983: PPUSH
18984: CALL_OW 272
18988: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18989: LD_ADDR_VAR 0 9
18993: PUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL_OW 251
19003: PPUSH
19004: LD_VAR 0 10
19008: PPUSH
19009: LD_VAR 0 5
19013: PPUSH
19014: CALL_OW 273
19018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19019: LD_VAR 0 8
19023: PPUSH
19024: LD_VAR 0 9
19028: PPUSH
19029: CALL_OW 488
19033: NOT
19034: IFFALSE 19038
// exit ;
19036: GO 19145
// ComAnimCustom ( unit , 1 ) ;
19038: LD_VAR 0 1
19042: PPUSH
19043: LD_INT 1
19045: PPUSH
19046: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19050: LD_VAR 0 8
19054: PPUSH
19055: LD_VAR 0 9
19059: PPUSH
19060: LD_VAR 0 6
19064: PPUSH
19065: LD_VAR 0 7
19069: PPUSH
19070: CALL_OW 330
// repeat wait ( 1 ) ;
19074: LD_INT 1
19076: PPUSH
19077: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 316
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 314
19100: OR
19101: PUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 302
19111: NOT
19112: OR
19113: PUSH
19114: LD_VAR 0 1
19118: PPUSH
19119: CALL_OW 301
19123: OR
19124: IFFALSE 19074
// RemoveSeeing ( _x , _y , side ) ;
19126: LD_VAR 0 8
19130: PPUSH
19131: LD_VAR 0 9
19135: PPUSH
19136: LD_VAR 0 6
19140: PPUSH
19141: CALL_OW 331
// end ; end_of_file
19145: LD_VAR 0 4
19149: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19150: LD_VAR 0 1
19154: PUSH
19155: LD_INT 200
19157: DOUBLE
19158: GREATEREQUAL
19159: IFFALSE 19167
19161: LD_INT 299
19163: DOUBLE
19164: LESSEQUAL
19165: IFTRUE 19169
19167: GO 19201
19169: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_VAR 0 2
19179: PPUSH
19180: LD_VAR 0 3
19184: PPUSH
19185: LD_VAR 0 4
19189: PPUSH
19190: LD_VAR 0 5
19194: PPUSH
19195: CALL 15267 0 5
19199: GO 19278
19201: LD_INT 300
19203: DOUBLE
19204: GREATEREQUAL
19205: IFFALSE 19213
19207: LD_INT 399
19209: DOUBLE
19210: LESSEQUAL
19211: IFTRUE 19215
19213: GO 19277
19215: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_VAR 0 5
19240: PPUSH
19241: LD_VAR 0 6
19245: PPUSH
19246: LD_VAR 0 7
19250: PPUSH
19251: LD_VAR 0 8
19255: PPUSH
19256: LD_VAR 0 9
19260: PPUSH
19261: LD_VAR 0 10
19265: PPUSH
19266: LD_VAR 0 11
19270: PPUSH
19271: CALL 13155 0 11
19275: GO 19278
19277: POP
// end ;
19278: PPOPN 11
19280: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19281: LD_VAR 0 1
19285: PPUSH
19286: LD_VAR 0 2
19290: PPUSH
19291: LD_VAR 0 3
19295: PPUSH
19296: LD_VAR 0 4
19300: PPUSH
19301: LD_VAR 0 5
19305: PPUSH
19306: CALL 15249 0 5
// end ; end_of_file
19310: PPOPN 5
19312: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
// if exist_mode then
19317: LD_VAR 0 2
19321: IFFALSE 19346
// unit := CreateCharacter ( prefix & ident ) else
19323: LD_ADDR_VAR 0 5
19327: PUSH
19328: LD_VAR 0 3
19332: PUSH
19333: LD_VAR 0 1
19337: STR
19338: PPUSH
19339: CALL_OW 34
19343: ST_TO_ADDR
19344: GO 19361
// unit := NewCharacter ( ident ) ;
19346: LD_ADDR_VAR 0 5
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: CALL_OW 25
19360: ST_TO_ADDR
// result := unit ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_VAR 0 5
19370: ST_TO_ADDR
// end ;
19371: LD_VAR 0 4
19375: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// if not side or not nation then
19380: LD_VAR 0 1
19384: NOT
19385: PUSH
19386: LD_VAR 0 2
19390: NOT
19391: OR
19392: IFFALSE 19396
// exit ;
19394: GO 20160
// case nation of nation_american :
19396: LD_VAR 0 2
19400: PUSH
19401: LD_INT 1
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19623
19409: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19410: LD_ADDR_VAR 0 4
19414: PUSH
19415: LD_INT 35
19417: PUSH
19418: LD_INT 45
19420: PUSH
19421: LD_INT 46
19423: PUSH
19424: LD_INT 47
19426: PUSH
19427: LD_INT 82
19429: PUSH
19430: LD_INT 83
19432: PUSH
19433: LD_INT 84
19435: PUSH
19436: LD_INT 85
19438: PUSH
19439: LD_INT 86
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 6
19450: PUSH
19451: LD_INT 15
19453: PUSH
19454: LD_INT 16
19456: PUSH
19457: LD_INT 7
19459: PUSH
19460: LD_INT 12
19462: PUSH
19463: LD_INT 13
19465: PUSH
19466: LD_INT 10
19468: PUSH
19469: LD_INT 14
19471: PUSH
19472: LD_INT 20
19474: PUSH
19475: LD_INT 21
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_INT 25
19483: PUSH
19484: LD_INT 32
19486: PUSH
19487: LD_INT 27
19489: PUSH
19490: LD_INT 36
19492: PUSH
19493: LD_INT 69
19495: PUSH
19496: LD_INT 39
19498: PUSH
19499: LD_INT 34
19501: PUSH
19502: LD_INT 40
19504: PUSH
19505: LD_INT 48
19507: PUSH
19508: LD_INT 49
19510: PUSH
19511: LD_INT 50
19513: PUSH
19514: LD_INT 51
19516: PUSH
19517: LD_INT 52
19519: PUSH
19520: LD_INT 53
19522: PUSH
19523: LD_INT 54
19525: PUSH
19526: LD_INT 55
19528: PUSH
19529: LD_INT 56
19531: PUSH
19532: LD_INT 57
19534: PUSH
19535: LD_INT 58
19537: PUSH
19538: LD_INT 59
19540: PUSH
19541: LD_INT 60
19543: PUSH
19544: LD_INT 61
19546: PUSH
19547: LD_INT 62
19549: PUSH
19550: LD_INT 80
19552: PUSH
19553: LD_INT 82
19555: PUSH
19556: LD_INT 83
19558: PUSH
19559: LD_INT 84
19561: PUSH
19562: LD_INT 85
19564: PUSH
19565: LD_INT 86
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: ST_TO_ADDR
19621: GO 20084
19623: LD_INT 2
19625: DOUBLE
19626: EQUAL
19627: IFTRUE 19631
19629: GO 19853
19631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19632: LD_ADDR_VAR 0 4
19636: PUSH
19637: LD_INT 35
19639: PUSH
19640: LD_INT 45
19642: PUSH
19643: LD_INT 46
19645: PUSH
19646: LD_INT 47
19648: PUSH
19649: LD_INT 82
19651: PUSH
19652: LD_INT 83
19654: PUSH
19655: LD_INT 84
19657: PUSH
19658: LD_INT 85
19660: PUSH
19661: LD_INT 87
19663: PUSH
19664: LD_INT 70
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: LD_INT 11
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: LD_INT 4
19678: PUSH
19679: LD_INT 5
19681: PUSH
19682: LD_INT 6
19684: PUSH
19685: LD_INT 15
19687: PUSH
19688: LD_INT 18
19690: PUSH
19691: LD_INT 7
19693: PUSH
19694: LD_INT 17
19696: PUSH
19697: LD_INT 8
19699: PUSH
19700: LD_INT 20
19702: PUSH
19703: LD_INT 21
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_INT 72
19711: PUSH
19712: LD_INT 26
19714: PUSH
19715: LD_INT 69
19717: PUSH
19718: LD_INT 39
19720: PUSH
19721: LD_INT 40
19723: PUSH
19724: LD_INT 41
19726: PUSH
19727: LD_INT 42
19729: PUSH
19730: LD_INT 43
19732: PUSH
19733: LD_INT 48
19735: PUSH
19736: LD_INT 49
19738: PUSH
19739: LD_INT 50
19741: PUSH
19742: LD_INT 51
19744: PUSH
19745: LD_INT 52
19747: PUSH
19748: LD_INT 53
19750: PUSH
19751: LD_INT 54
19753: PUSH
19754: LD_INT 55
19756: PUSH
19757: LD_INT 56
19759: PUSH
19760: LD_INT 60
19762: PUSH
19763: LD_INT 61
19765: PUSH
19766: LD_INT 62
19768: PUSH
19769: LD_INT 66
19771: PUSH
19772: LD_INT 67
19774: PUSH
19775: LD_INT 68
19777: PUSH
19778: LD_INT 81
19780: PUSH
19781: LD_INT 82
19783: PUSH
19784: LD_INT 83
19786: PUSH
19787: LD_INT 84
19789: PUSH
19790: LD_INT 85
19792: PUSH
19793: LD_INT 87
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: ST_TO_ADDR
19851: GO 20084
19853: LD_INT 3
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 20083
19861: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19862: LD_ADDR_VAR 0 4
19866: PUSH
19867: LD_INT 46
19869: PUSH
19870: LD_INT 47
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: LD_INT 82
19881: PUSH
19882: LD_INT 83
19884: PUSH
19885: LD_INT 84
19887: PUSH
19888: LD_INT 85
19890: PUSH
19891: LD_INT 86
19893: PUSH
19894: LD_INT 11
19896: PUSH
19897: LD_INT 9
19899: PUSH
19900: LD_INT 20
19902: PUSH
19903: LD_INT 19
19905: PUSH
19906: LD_INT 21
19908: PUSH
19909: LD_INT 24
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_INT 25
19917: PUSH
19918: LD_INT 28
19920: PUSH
19921: LD_INT 29
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: LD_INT 31
19929: PUSH
19930: LD_INT 37
19932: PUSH
19933: LD_INT 38
19935: PUSH
19936: LD_INT 32
19938: PUSH
19939: LD_INT 27
19941: PUSH
19942: LD_INT 33
19944: PUSH
19945: LD_INT 69
19947: PUSH
19948: LD_INT 39
19950: PUSH
19951: LD_INT 34
19953: PUSH
19954: LD_INT 40
19956: PUSH
19957: LD_INT 71
19959: PUSH
19960: LD_INT 23
19962: PUSH
19963: LD_INT 44
19965: PUSH
19966: LD_INT 48
19968: PUSH
19969: LD_INT 49
19971: PUSH
19972: LD_INT 50
19974: PUSH
19975: LD_INT 51
19977: PUSH
19978: LD_INT 52
19980: PUSH
19981: LD_INT 53
19983: PUSH
19984: LD_INT 54
19986: PUSH
19987: LD_INT 55
19989: PUSH
19990: LD_INT 56
19992: PUSH
19993: LD_INT 57
19995: PUSH
19996: LD_INT 58
19998: PUSH
19999: LD_INT 59
20001: PUSH
20002: LD_INT 63
20004: PUSH
20005: LD_INT 64
20007: PUSH
20008: LD_INT 65
20010: PUSH
20011: LD_INT 82
20013: PUSH
20014: LD_INT 83
20016: PUSH
20017: LD_INT 84
20019: PUSH
20020: LD_INT 85
20022: PUSH
20023: LD_INT 86
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: ST_TO_ADDR
20081: GO 20084
20083: POP
// if state > - 1 and state < 3 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: GREATER
20093: PUSH
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 3
20101: LESS
20102: AND
20103: IFFALSE 20160
// for i in result do
20105: LD_ADDR_VAR 0 5
20109: PUSH
20110: LD_VAR 0 4
20114: PUSH
20115: FOR_IN
20116: IFFALSE 20158
// if GetTech ( i , side ) <> state then
20118: LD_VAR 0 5
20122: PPUSH
20123: LD_VAR 0 1
20127: PPUSH
20128: CALL_OW 321
20132: PUSH
20133: LD_VAR 0 3
20137: NONEQUAL
20138: IFFALSE 20156
// result := result diff i ;
20140: LD_ADDR_VAR 0 4
20144: PUSH
20145: LD_VAR 0 4
20149: PUSH
20150: LD_VAR 0 5
20154: DIFF
20155: ST_TO_ADDR
20156: GO 20115
20158: POP
20159: POP
// end ;
20160: LD_VAR 0 4
20164: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20165: LD_INT 0
20167: PPUSH
20168: PPUSH
20169: PPUSH
// result := true ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20178: LD_ADDR_VAR 0 5
20182: PUSH
20183: LD_VAR 0 2
20187: PPUSH
20188: CALL_OW 480
20192: ST_TO_ADDR
// if not tmp then
20193: LD_VAR 0 5
20197: NOT
20198: IFFALSE 20202
// exit ;
20200: GO 20251
// for i in tmp do
20202: LD_ADDR_VAR 0 4
20206: PUSH
20207: LD_VAR 0 5
20211: PUSH
20212: FOR_IN
20213: IFFALSE 20249
// if GetTech ( i , side ) <> state_researched then
20215: LD_VAR 0 4
20219: PPUSH
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 321
20229: PUSH
20230: LD_INT 2
20232: NONEQUAL
20233: IFFALSE 20247
// begin result := false ;
20235: LD_ADDR_VAR 0 3
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// exit ;
20243: POP
20244: POP
20245: GO 20251
// end ;
20247: GO 20212
20249: POP
20250: POP
// end ;
20251: LD_VAR 0 3
20255: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20256: LD_INT 0
20258: PPUSH
20259: PPUSH
20260: PPUSH
20261: PPUSH
20262: PPUSH
20263: PPUSH
20264: PPUSH
20265: PPUSH
20266: PPUSH
20267: PPUSH
20268: PPUSH
20269: PPUSH
20270: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20271: LD_VAR 0 1
20275: NOT
20276: PUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 257
20286: PUSH
20287: LD_INT 9
20289: NONEQUAL
20290: OR
20291: IFFALSE 20295
// exit ;
20293: GO 20868
// side := GetSide ( unit ) ;
20295: LD_ADDR_VAR 0 9
20299: PUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 255
20309: ST_TO_ADDR
// tech_space := tech_spacanom ;
20310: LD_ADDR_VAR 0 12
20314: PUSH
20315: LD_INT 29
20317: ST_TO_ADDR
// tech_time := tech_taurad ;
20318: LD_ADDR_VAR 0 13
20322: PUSH
20323: LD_INT 28
20325: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20326: LD_ADDR_VAR 0 11
20330: PUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 310
20340: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20341: LD_VAR 0 11
20345: PPUSH
20346: CALL_OW 247
20350: PUSH
20351: LD_INT 2
20353: EQUAL
20354: IFFALSE 20358
// exit ;
20356: GO 20868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20358: LD_ADDR_VAR 0 8
20362: PUSH
20363: LD_INT 81
20365: PUSH
20366: LD_VAR 0 9
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 3
20377: PUSH
20378: LD_INT 21
20380: PUSH
20381: LD_INT 3
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PPUSH
20396: CALL_OW 69
20400: ST_TO_ADDR
// if not tmp then
20401: LD_VAR 0 8
20405: NOT
20406: IFFALSE 20410
// exit ;
20408: GO 20868
// if in_unit then
20410: LD_VAR 0 11
20414: IFFALSE 20438
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20416: LD_ADDR_VAR 0 10
20420: PUSH
20421: LD_VAR 0 8
20425: PPUSH
20426: LD_VAR 0 11
20430: PPUSH
20431: CALL_OW 74
20435: ST_TO_ADDR
20436: GO 20458
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20438: LD_ADDR_VAR 0 10
20442: PUSH
20443: LD_VAR 0 8
20447: PPUSH
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 74
20457: ST_TO_ADDR
// if not enemy then
20458: LD_VAR 0 10
20462: NOT
20463: IFFALSE 20467
// exit ;
20465: GO 20868
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20467: LD_VAR 0 11
20471: PUSH
20472: LD_VAR 0 11
20476: PPUSH
20477: LD_VAR 0 10
20481: PPUSH
20482: CALL_OW 296
20486: PUSH
20487: LD_INT 13
20489: GREATER
20490: AND
20491: PUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_VAR 0 10
20501: PPUSH
20502: CALL_OW 296
20506: PUSH
20507: LD_INT 12
20509: GREATER
20510: OR
20511: IFFALSE 20515
// exit ;
20513: GO 20868
// missile := [ 1 ] ;
20515: LD_ADDR_VAR 0 14
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20526: LD_VAR 0 9
20530: PPUSH
20531: LD_VAR 0 12
20535: PPUSH
20536: CALL_OW 325
20540: IFFALSE 20569
// missile := Insert ( missile , missile + 1 , 2 ) ;
20542: LD_ADDR_VAR 0 14
20546: PUSH
20547: LD_VAR 0 14
20551: PPUSH
20552: LD_VAR 0 14
20556: PUSH
20557: LD_INT 1
20559: PLUS
20560: PPUSH
20561: LD_INT 2
20563: PPUSH
20564: CALL_OW 2
20568: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20569: LD_VAR 0 9
20573: PPUSH
20574: LD_VAR 0 13
20578: PPUSH
20579: CALL_OW 325
20583: PUSH
20584: LD_VAR 0 10
20588: PPUSH
20589: CALL_OW 255
20593: PPUSH
20594: LD_VAR 0 13
20598: PPUSH
20599: CALL_OW 325
20603: NOT
20604: AND
20605: IFFALSE 20634
// missile := Insert ( missile , missile + 1 , 3 ) ;
20607: LD_ADDR_VAR 0 14
20611: PUSH
20612: LD_VAR 0 14
20616: PPUSH
20617: LD_VAR 0 14
20621: PUSH
20622: LD_INT 1
20624: PLUS
20625: PPUSH
20626: LD_INT 3
20628: PPUSH
20629: CALL_OW 2
20633: ST_TO_ADDR
// if missile < 2 then
20634: LD_VAR 0 14
20638: PUSH
20639: LD_INT 2
20641: LESS
20642: IFFALSE 20646
// exit ;
20644: GO 20868
// x := GetX ( enemy ) ;
20646: LD_ADDR_VAR 0 4
20650: PUSH
20651: LD_VAR 0 10
20655: PPUSH
20656: CALL_OW 250
20660: ST_TO_ADDR
// y := GetY ( enemy ) ;
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: LD_VAR 0 10
20670: PPUSH
20671: CALL_OW 251
20675: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20676: LD_ADDR_VAR 0 6
20680: PUSH
20681: LD_VAR 0 4
20685: PUSH
20686: LD_INT 1
20688: NEG
20689: PPUSH
20690: LD_INT 1
20692: PPUSH
20693: CALL_OW 12
20697: PLUS
20698: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20699: LD_ADDR_VAR 0 7
20703: PUSH
20704: LD_VAR 0 5
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PPUSH
20713: LD_INT 1
20715: PPUSH
20716: CALL_OW 12
20720: PLUS
20721: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20722: LD_VAR 0 6
20726: PPUSH
20727: LD_VAR 0 7
20731: PPUSH
20732: CALL_OW 488
20736: NOT
20737: IFFALSE 20759
// begin _x := x ;
20739: LD_ADDR_VAR 0 6
20743: PUSH
20744: LD_VAR 0 4
20748: ST_TO_ADDR
// _y := y ;
20749: LD_ADDR_VAR 0 7
20753: PUSH
20754: LD_VAR 0 5
20758: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_VAR 0 14
20771: PPUSH
20772: CALL_OW 12
20776: ST_TO_ADDR
// case i of 1 :
20777: LD_VAR 0 3
20781: PUSH
20782: LD_INT 1
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20807
20790: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20791: LD_VAR 0 1
20795: PPUSH
20796: LD_VAR 0 10
20800: PPUSH
20801: CALL_OW 115
20805: GO 20868
20807: LD_INT 2
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20837
20815: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_VAR 0 6
20825: PPUSH
20826: LD_VAR 0 7
20830: PPUSH
20831: CALL_OW 153
20835: GO 20868
20837: LD_INT 3
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20867
20845: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20846: LD_VAR 0 1
20850: PPUSH
20851: LD_VAR 0 6
20855: PPUSH
20856: LD_VAR 0 7
20860: PPUSH
20861: CALL_OW 154
20865: GO 20868
20867: POP
// end ;
20868: LD_VAR 0 2
20872: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
// if not unit or not building then
20881: LD_VAR 0 1
20885: NOT
20886: PUSH
20887: LD_VAR 0 2
20891: NOT
20892: OR
20893: IFFALSE 20897
// exit ;
20895: GO 21055
// x := GetX ( building ) ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_VAR 0 2
20906: PPUSH
20907: CALL_OW 250
20911: ST_TO_ADDR
// y := GetY ( building ) ;
20912: LD_ADDR_VAR 0 6
20916: PUSH
20917: LD_VAR 0 2
20921: PPUSH
20922: CALL_OW 251
20926: ST_TO_ADDR
// for i = 0 to 5 do
20927: LD_ADDR_VAR 0 4
20931: PUSH
20932: DOUBLE
20933: LD_INT 0
20935: DEC
20936: ST_TO_ADDR
20937: LD_INT 5
20939: PUSH
20940: FOR_TO
20941: IFFALSE 21053
// begin _x := ShiftX ( x , i , 3 ) ;
20943: LD_ADDR_VAR 0 7
20947: PUSH
20948: LD_VAR 0 5
20952: PPUSH
20953: LD_VAR 0 4
20957: PPUSH
20958: LD_INT 3
20960: PPUSH
20961: CALL_OW 272
20965: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20966: LD_ADDR_VAR 0 8
20970: PUSH
20971: LD_VAR 0 6
20975: PPUSH
20976: LD_VAR 0 4
20980: PPUSH
20981: LD_INT 3
20983: PPUSH
20984: CALL_OW 273
20988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20989: LD_VAR 0 7
20993: PPUSH
20994: LD_VAR 0 8
20998: PPUSH
20999: CALL_OW 488
21003: NOT
21004: IFFALSE 21008
// continue ;
21006: GO 20940
// if HexInfo ( _x , _y ) = 0 then
21008: LD_VAR 0 7
21012: PPUSH
21013: LD_VAR 0 8
21017: PPUSH
21018: CALL_OW 428
21022: PUSH
21023: LD_INT 0
21025: EQUAL
21026: IFFALSE 21051
// begin ComMoveXY ( unit , _x , _y ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_VAR 0 7
21037: PPUSH
21038: LD_VAR 0 8
21042: PPUSH
21043: CALL_OW 111
// exit ;
21047: POP
21048: POP
21049: GO 21055
// end ; end ;
21051: GO 20940
21053: POP
21054: POP
// end ;
21055: LD_VAR 0 3
21059: RET
// export function ScanBase ( side , base_area ) ; begin
21060: LD_INT 0
21062: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: LD_VAR 0 2
21072: PPUSH
21073: LD_INT 81
21075: PUSH
21076: LD_VAR 0 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 70
21089: ST_TO_ADDR
// end ;
21090: LD_VAR 0 3
21094: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
// result := false ;
21101: LD_ADDR_VAR 0 2
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// side := GetSide ( unit ) ;
21109: LD_ADDR_VAR 0 3
21113: PUSH
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 255
21123: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21124: LD_ADDR_VAR 0 4
21128: PUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 248
21138: ST_TO_ADDR
// case nat of 1 :
21139: LD_VAR 0 4
21143: PUSH
21144: LD_INT 1
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21163
21152: POP
// tech := tech_lassight ; 2 :
21153: LD_ADDR_VAR 0 5
21157: PUSH
21158: LD_INT 12
21160: ST_TO_ADDR
21161: GO 21202
21163: LD_INT 2
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21182
21171: POP
// tech := tech_mortar ; 3 :
21172: LD_ADDR_VAR 0 5
21176: PUSH
21177: LD_INT 41
21179: ST_TO_ADDR
21180: GO 21202
21182: LD_INT 3
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21201
21190: POP
// tech := tech_bazooka ; end ;
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: LD_INT 44
21198: ST_TO_ADDR
21199: GO 21202
21201: POP
// if Researched ( side , tech ) then
21202: LD_VAR 0 3
21206: PPUSH
21207: LD_VAR 0 5
21211: PPUSH
21212: CALL_OW 325
21216: IFFALSE 21243
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: LD_INT 5
21225: PUSH
21226: LD_INT 8
21228: PUSH
21229: LD_INT 9
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: LD_VAR 0 4
21241: ARRAY
21242: ST_TO_ADDR
// end ;
21243: LD_VAR 0 2
21247: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
// if not mines then
21253: LD_VAR 0 2
21257: NOT
21258: IFFALSE 21262
// exit ;
21260: GO 21406
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21262: LD_ADDR_VAR 0 5
21266: PUSH
21267: LD_INT 81
21269: PUSH
21270: LD_VAR 0 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 3
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 3
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 69
21304: ST_TO_ADDR
// for i in mines do
21305: LD_ADDR_VAR 0 4
21309: PUSH
21310: LD_VAR 0 2
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21404
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21318: LD_VAR 0 4
21322: PUSH
21323: LD_INT 1
21325: ARRAY
21326: PPUSH
21327: LD_VAR 0 4
21331: PUSH
21332: LD_INT 2
21334: ARRAY
21335: PPUSH
21336: CALL_OW 458
21340: NOT
21341: IFFALSE 21345
// continue ;
21343: GO 21315
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21345: LD_VAR 0 4
21349: PUSH
21350: LD_INT 1
21352: ARRAY
21353: PPUSH
21354: LD_VAR 0 4
21358: PUSH
21359: LD_INT 2
21361: ARRAY
21362: PPUSH
21363: CALL_OW 428
21367: PUSH
21368: LD_VAR 0 5
21372: IN
21373: IFFALSE 21402
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21375: LD_VAR 0 4
21379: PUSH
21380: LD_INT 1
21382: ARRAY
21383: PPUSH
21384: LD_VAR 0 4
21388: PUSH
21389: LD_INT 2
21391: ARRAY
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 456
// end ;
21402: GO 21315
21404: POP
21405: POP
// end ;
21406: LD_VAR 0 3
21410: RET
// export function Count ( array ) ; var i ; begin
21411: LD_INT 0
21413: PPUSH
21414: PPUSH
// result := 0 ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// for i in array do
21423: LD_ADDR_VAR 0 3
21427: PUSH
21428: LD_VAR 0 1
21432: PUSH
21433: FOR_IN
21434: IFFALSE 21458
// if i then
21436: LD_VAR 0 3
21440: IFFALSE 21456
// result := result + 1 ;
21442: LD_ADDR_VAR 0 2
21446: PUSH
21447: LD_VAR 0 2
21451: PUSH
21452: LD_INT 1
21454: PLUS
21455: ST_TO_ADDR
21456: GO 21433
21458: POP
21459: POP
// end ;
21460: LD_VAR 0 2
21464: RET
// export function IsEmpty ( building ) ; begin
21465: LD_INT 0
21467: PPUSH
// if not building then
21468: LD_VAR 0 1
21472: NOT
21473: IFFALSE 21477
// exit ;
21475: GO 21520
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_VAR 0 1
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 255
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 58
21506: PUSH
21507: EMPTY
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PPUSH
21514: CALL_OW 69
21518: IN
21519: ST_TO_ADDR
// end ;
21520: LD_VAR 0 2
21524: RET
// export function IsNotFull ( building ) ; begin
21525: LD_INT 0
21527: PPUSH
// if not building then
21528: LD_VAR 0 1
21532: NOT
21533: IFFALSE 21537
// exit ;
21535: GO 21556
// result := UnitsInside ( building ) < 6 ;
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 313
21551: PUSH
21552: LD_INT 6
21554: LESS
21555: ST_TO_ADDR
// end ;
21556: LD_VAR 0 2
21560: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21561: LD_INT 0
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// tmp := [ ] ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: EMPTY
21573: ST_TO_ADDR
// list := [ ] ;
21574: LD_ADDR_VAR 0 5
21578: PUSH
21579: EMPTY
21580: ST_TO_ADDR
// for i = 16 to 25 do
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: DOUBLE
21587: LD_INT 16
21589: DEC
21590: ST_TO_ADDR
21591: LD_INT 25
21593: PUSH
21594: FOR_TO
21595: IFFALSE 21668
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21597: LD_ADDR_VAR 0 3
21601: PUSH
21602: LD_VAR 0 3
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 255
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 91
21626: PUSH
21627: LD_VAR 0 1
21631: PUSH
21632: LD_INT 6
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 30
21642: PUSH
21643: LD_VAR 0 4
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: ADD
21665: ST_TO_ADDR
21666: GO 21594
21668: POP
21669: POP
// for i = 1 to tmp do
21670: LD_ADDR_VAR 0 4
21674: PUSH
21675: DOUBLE
21676: LD_INT 1
21678: DEC
21679: ST_TO_ADDR
21680: LD_VAR 0 3
21684: PUSH
21685: FOR_TO
21686: IFFALSE 21774
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21688: LD_ADDR_VAR 0 5
21692: PUSH
21693: LD_VAR 0 5
21697: PUSH
21698: LD_VAR 0 3
21702: PUSH
21703: LD_VAR 0 4
21707: ARRAY
21708: PPUSH
21709: CALL_OW 266
21713: PUSH
21714: LD_VAR 0 3
21718: PUSH
21719: LD_VAR 0 4
21723: ARRAY
21724: PPUSH
21725: CALL_OW 250
21729: PUSH
21730: LD_VAR 0 3
21734: PUSH
21735: LD_VAR 0 4
21739: ARRAY
21740: PPUSH
21741: CALL_OW 251
21745: PUSH
21746: LD_VAR 0 3
21750: PUSH
21751: LD_VAR 0 4
21755: ARRAY
21756: PPUSH
21757: CALL_OW 254
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: ADD
21771: ST_TO_ADDR
21772: GO 21685
21774: POP
21775: POP
// result := list ;
21776: LD_ADDR_VAR 0 2
21780: PUSH
21781: LD_VAR 0 5
21785: ST_TO_ADDR
// end ;
21786: LD_VAR 0 2
21790: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21791: LD_INT 0
21793: PPUSH
21794: PPUSH
21795: PPUSH
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
// if not factory then
21800: LD_VAR 0 1
21804: NOT
21805: IFFALSE 21809
// exit ;
21807: GO 22402
// if control = control_apeman then
21809: LD_VAR 0 4
21813: PUSH
21814: LD_INT 5
21816: EQUAL
21817: IFFALSE 21926
// begin tmp := UnitsInside ( factory ) ;
21819: LD_ADDR_VAR 0 8
21823: PUSH
21824: LD_VAR 0 1
21828: PPUSH
21829: CALL_OW 313
21833: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21834: LD_VAR 0 8
21838: PPUSH
21839: LD_INT 25
21841: PUSH
21842: LD_INT 12
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: CALL_OW 72
21853: NOT
21854: IFFALSE 21864
// control := control_manual ;
21856: LD_ADDR_VAR 0 4
21860: PUSH
21861: LD_INT 1
21863: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21864: LD_ADDR_VAR 0 8
21868: PUSH
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL 21561 0 1
21878: ST_TO_ADDR
// if tmp then
21879: LD_VAR 0 8
21883: IFFALSE 21926
// begin for i in tmp do
21885: LD_ADDR_VAR 0 7
21889: PUSH
21890: LD_VAR 0 8
21894: PUSH
21895: FOR_IN
21896: IFFALSE 21924
// if i [ 1 ] = b_ext_radio then
21898: LD_VAR 0 7
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PUSH
21907: LD_INT 22
21909: EQUAL
21910: IFFALSE 21922
// begin control := control_remote ;
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_INT 2
21919: ST_TO_ADDR
// break ;
21920: GO 21924
// end ;
21922: GO 21895
21924: POP
21925: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_VAR 0 2
21935: PPUSH
21936: LD_VAR 0 3
21940: PPUSH
21941: LD_VAR 0 4
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 448
21955: IFFALSE 21990
// begin result := [ chassis , engine , control , weapon ] ;
21957: LD_ADDR_VAR 0 6
21961: PUSH
21962: LD_VAR 0 2
21966: PUSH
21967: LD_VAR 0 3
21971: PUSH
21972: LD_VAR 0 4
21976: PUSH
21977: LD_VAR 0 5
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// exit ;
21988: GO 22402
// end ; _chassis := AvailableChassisList ( factory ) ;
21990: LD_ADDR_VAR 0 9
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 475
22004: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22005: LD_ADDR_VAR 0 11
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 476
22019: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22020: LD_ADDR_VAR 0 12
22024: PUSH
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 477
22034: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22035: LD_ADDR_VAR 0 10
22039: PUSH
22040: LD_VAR 0 1
22044: PPUSH
22045: CALL_OW 478
22049: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22050: LD_VAR 0 9
22054: NOT
22055: PUSH
22056: LD_VAR 0 11
22060: NOT
22061: OR
22062: PUSH
22063: LD_VAR 0 12
22067: NOT
22068: OR
22069: PUSH
22070: LD_VAR 0 10
22074: NOT
22075: OR
22076: IFFALSE 22111
// begin result := [ chassis , engine , control , weapon ] ;
22078: LD_ADDR_VAR 0 6
22082: PUSH
22083: LD_VAR 0 2
22087: PUSH
22088: LD_VAR 0 3
22092: PUSH
22093: LD_VAR 0 4
22097: PUSH
22098: LD_VAR 0 5
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: ST_TO_ADDR
// exit ;
22109: GO 22402
// end ; if not chassis in _chassis then
22111: LD_VAR 0 2
22115: PUSH
22116: LD_VAR 0 9
22120: IN
22121: NOT
22122: IFFALSE 22148
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: LD_VAR 0 9
22133: PUSH
22134: LD_INT 1
22136: PPUSH
22137: LD_VAR 0 9
22141: PPUSH
22142: CALL_OW 12
22146: ARRAY
22147: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22148: LD_VAR 0 2
22152: PPUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: CALL 22407 0 2
22162: NOT
22163: IFFALSE 22222
// repeat engine := _engine [ 1 ] ;
22165: LD_ADDR_VAR 0 3
22169: PUSH
22170: LD_VAR 0 11
22174: PUSH
22175: LD_INT 1
22177: ARRAY
22178: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22179: LD_ADDR_VAR 0 11
22183: PUSH
22184: LD_VAR 0 11
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: CALL_OW 3
22196: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22197: LD_VAR 0 2
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: CALL 22407 0 2
22211: PUSH
22212: LD_VAR 0 11
22216: PUSH
22217: EMPTY
22218: EQUAL
22219: OR
22220: IFFALSE 22165
// if not control in _control then
22222: LD_VAR 0 4
22226: PUSH
22227: LD_VAR 0 12
22231: IN
22232: NOT
22233: IFFALSE 22259
// control := _control [ rand ( 1 , _control ) ] ;
22235: LD_ADDR_VAR 0 4
22239: PUSH
22240: LD_VAR 0 12
22244: PUSH
22245: LD_INT 1
22247: PPUSH
22248: LD_VAR 0 12
22252: PPUSH
22253: CALL_OW 12
22257: ARRAY
22258: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22259: LD_VAR 0 2
22263: PPUSH
22264: LD_VAR 0 5
22268: PPUSH
22269: CALL 22627 0 2
22273: NOT
22274: IFFALSE 22333
// repeat weapon := _weapon [ 1 ] ;
22276: LD_ADDR_VAR 0 5
22280: PUSH
22281: LD_VAR 0 10
22285: PUSH
22286: LD_INT 1
22288: ARRAY
22289: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22290: LD_ADDR_VAR 0 10
22294: PUSH
22295: LD_VAR 0 10
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL_OW 3
22307: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22308: LD_VAR 0 2
22312: PPUSH
22313: LD_VAR 0 5
22317: PPUSH
22318: CALL 22627 0 2
22322: PUSH
22323: LD_VAR 0 10
22327: PUSH
22328: EMPTY
22329: EQUAL
22330: OR
22331: IFFALSE 22276
// result := [ ] ;
22333: LD_ADDR_VAR 0 6
22337: PUSH
22338: EMPTY
22339: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22340: LD_VAR 0 1
22344: PPUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: LD_VAR 0 4
22359: PPUSH
22360: LD_VAR 0 5
22364: PPUSH
22365: CALL_OW 448
22369: IFFALSE 22402
// result := [ chassis , engine , control , weapon ] ;
22371: LD_ADDR_VAR 0 6
22375: PUSH
22376: LD_VAR 0 2
22380: PUSH
22381: LD_VAR 0 3
22385: PUSH
22386: LD_VAR 0 4
22390: PUSH
22391: LD_VAR 0 5
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: ST_TO_ADDR
// end ;
22402: LD_VAR 0 6
22406: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22407: LD_INT 0
22409: PPUSH
// if not chassis or not engine then
22410: LD_VAR 0 1
22414: NOT
22415: PUSH
22416: LD_VAR 0 2
22420: NOT
22421: OR
22422: IFFALSE 22426
// exit ;
22424: GO 22622
// case engine of engine_solar :
22426: LD_VAR 0 2
22430: PUSH
22431: LD_INT 2
22433: DOUBLE
22434: EQUAL
22435: IFTRUE 22439
22437: GO 22477
22439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22440: LD_ADDR_VAR 0 3
22444: PUSH
22445: LD_INT 11
22447: PUSH
22448: LD_INT 12
22450: PUSH
22451: LD_INT 13
22453: PUSH
22454: LD_INT 14
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: ST_TO_ADDR
22475: GO 22606
22477: LD_INT 1
22479: DOUBLE
22480: EQUAL
22481: IFTRUE 22485
22483: GO 22547
22485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22486: LD_ADDR_VAR 0 3
22490: PUSH
22491: LD_INT 11
22493: PUSH
22494: LD_INT 12
22496: PUSH
22497: LD_INT 13
22499: PUSH
22500: LD_INT 14
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 4
22514: PUSH
22515: LD_INT 5
22517: PUSH
22518: LD_INT 21
22520: PUSH
22521: LD_INT 23
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_INT 24
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: ST_TO_ADDR
22545: GO 22606
22547: LD_INT 3
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22605
22555: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 13
22563: PUSH
22564: LD_INT 14
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: LD_INT 5
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 22
22584: PUSH
22585: LD_INT 23
22587: PUSH
22588: LD_INT 24
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 22606
22605: POP
// result := ( chassis in result ) ;
22606: LD_ADDR_VAR 0 3
22610: PUSH
22611: LD_VAR 0 1
22615: PUSH
22616: LD_VAR 0 3
22620: IN
22621: ST_TO_ADDR
// end ;
22622: LD_VAR 0 3
22626: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22627: LD_INT 0
22629: PPUSH
// if not chassis or not weapon then
22630: LD_VAR 0 1
22634: NOT
22635: PUSH
22636: LD_VAR 0 2
22640: NOT
22641: OR
22642: IFFALSE 22646
// exit ;
22644: GO 23672
// case weapon of us_machine_gun :
22646: LD_VAR 0 2
22650: PUSH
22651: LD_INT 2
22653: DOUBLE
22654: EQUAL
22655: IFTRUE 22659
22657: GO 22689
22659: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 3
22673: PUSH
22674: LD_INT 4
22676: PUSH
22677: LD_INT 5
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: ST_TO_ADDR
22687: GO 23656
22689: LD_INT 3
22691: DOUBLE
22692: EQUAL
22693: IFTRUE 22697
22695: GO 22727
22697: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 3
22711: PUSH
22712: LD_INT 4
22714: PUSH
22715: LD_INT 5
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: ST_TO_ADDR
22725: GO 23656
22727: LD_INT 11
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22765
22735: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22736: LD_ADDR_VAR 0 3
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: LD_INT 3
22749: PUSH
22750: LD_INT 4
22752: PUSH
22753: LD_INT 5
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23656
22765: LD_INT 4
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22799
22773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22774: LD_ADDR_VAR 0 3
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: LD_INT 4
22787: PUSH
22788: LD_INT 5
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: ST_TO_ADDR
22797: GO 23656
22799: LD_INT 5
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 22833
22807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22808: LD_ADDR_VAR 0 3
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: LD_INT 3
22818: PUSH
22819: LD_INT 4
22821: PUSH
22822: LD_INT 5
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: ST_TO_ADDR
22831: GO 23656
22833: LD_INT 9
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22867
22841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: LD_INT 4
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
22865: GO 23656
22867: LD_INT 7
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22875
22873: GO 22901
22875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 4
22889: PUSH
22890: LD_INT 5
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: ST_TO_ADDR
22899: GO 23656
22901: LD_INT 12
22903: DOUBLE
22904: EQUAL
22905: IFTRUE 22909
22907: GO 22935
22909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: LD_INT 4
22923: PUSH
22924: LD_INT 5
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: ST_TO_ADDR
22933: GO 23656
22935: LD_INT 13
22937: DOUBLE
22938: EQUAL
22939: IFTRUE 22943
22941: GO 22969
22943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22944: LD_ADDR_VAR 0 3
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 3
22954: PUSH
22955: LD_INT 4
22957: PUSH
22958: LD_INT 5
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: ST_TO_ADDR
22967: GO 23656
22969: LD_INT 14
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 22995
22977: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22978: LD_ADDR_VAR 0 3
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: ST_TO_ADDR
22993: GO 23656
22995: LD_INT 6
22997: DOUBLE
22998: EQUAL
22999: IFTRUE 23003
23001: GO 23021
23003: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: ST_TO_ADDR
23019: GO 23656
23021: LD_INT 10
23023: DOUBLE
23024: EQUAL
23025: IFTRUE 23029
23027: GO 23047
23029: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23030: LD_ADDR_VAR 0 3
23034: PUSH
23035: LD_INT 4
23037: PUSH
23038: LD_INT 5
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: ST_TO_ADDR
23045: GO 23656
23047: LD_INT 22
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23081
23055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23056: LD_ADDR_VAR 0 3
23060: PUSH
23061: LD_INT 11
23063: PUSH
23064: LD_INT 12
23066: PUSH
23067: LD_INT 13
23069: PUSH
23070: LD_INT 14
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: ST_TO_ADDR
23079: GO 23656
23081: LD_INT 23
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23115
23089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: LD_INT 11
23097: PUSH
23098: LD_INT 12
23100: PUSH
23101: LD_INT 13
23103: PUSH
23104: LD_INT 14
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: ST_TO_ADDR
23113: GO 23656
23115: LD_INT 24
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23149
23123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23124: LD_ADDR_VAR 0 3
23128: PUSH
23129: LD_INT 11
23131: PUSH
23132: LD_INT 12
23134: PUSH
23135: LD_INT 13
23137: PUSH
23138: LD_INT 14
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: ST_TO_ADDR
23147: GO 23656
23149: LD_INT 30
23151: DOUBLE
23152: EQUAL
23153: IFTRUE 23157
23155: GO 23183
23157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23158: LD_ADDR_VAR 0 3
23162: PUSH
23163: LD_INT 11
23165: PUSH
23166: LD_INT 12
23168: PUSH
23169: LD_INT 13
23171: PUSH
23172: LD_INT 14
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: ST_TO_ADDR
23181: GO 23656
23183: LD_INT 25
23185: DOUBLE
23186: EQUAL
23187: IFTRUE 23191
23189: GO 23209
23191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_INT 13
23199: PUSH
23200: LD_INT 14
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: ST_TO_ADDR
23207: GO 23656
23209: LD_INT 27
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23217
23215: GO 23235
23217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23218: LD_ADDR_VAR 0 3
23222: PUSH
23223: LD_INT 13
23225: PUSH
23226: LD_INT 14
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: ST_TO_ADDR
23233: GO 23656
23235: LD_INT 28
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23261
23243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_INT 13
23251: PUSH
23252: LD_INT 14
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
23259: GO 23656
23261: LD_INT 29
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23287
23269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23270: LD_ADDR_VAR 0 3
23274: PUSH
23275: LD_INT 13
23277: PUSH
23278: LD_INT 14
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: ST_TO_ADDR
23285: GO 23656
23287: LD_INT 31
23289: DOUBLE
23290: EQUAL
23291: IFTRUE 23295
23293: GO 23313
23295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_INT 13
23303: PUSH
23304: LD_INT 14
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: ST_TO_ADDR
23311: GO 23656
23313: LD_INT 26
23315: DOUBLE
23316: EQUAL
23317: IFTRUE 23321
23319: GO 23339
23321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23322: LD_ADDR_VAR 0 3
23326: PUSH
23327: LD_INT 13
23329: PUSH
23330: LD_INT 14
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: ST_TO_ADDR
23337: GO 23656
23339: LD_INT 42
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23373
23347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23348: LD_ADDR_VAR 0 3
23352: PUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 22
23358: PUSH
23359: LD_INT 23
23361: PUSH
23362: LD_INT 24
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23656
23373: LD_INT 43
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23407
23381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_INT 21
23389: PUSH
23390: LD_INT 22
23392: PUSH
23393: LD_INT 23
23395: PUSH
23396: LD_INT 24
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: ST_TO_ADDR
23405: GO 23656
23407: LD_INT 44
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23441
23415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_INT 21
23423: PUSH
23424: LD_INT 22
23426: PUSH
23427: LD_INT 23
23429: PUSH
23430: LD_INT 24
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: ST_TO_ADDR
23439: GO 23656
23441: LD_INT 45
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23475
23449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23450: LD_ADDR_VAR 0 3
23454: PUSH
23455: LD_INT 21
23457: PUSH
23458: LD_INT 22
23460: PUSH
23461: LD_INT 23
23463: PUSH
23464: LD_INT 24
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: ST_TO_ADDR
23473: GO 23656
23475: LD_INT 49
23477: DOUBLE
23478: EQUAL
23479: IFTRUE 23483
23481: GO 23509
23483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: LD_INT 21
23491: PUSH
23492: LD_INT 22
23494: PUSH
23495: LD_INT 23
23497: PUSH
23498: LD_INT 24
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: ST_TO_ADDR
23507: GO 23656
23509: LD_INT 51
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23517
23515: GO 23543
23517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: LD_INT 21
23525: PUSH
23526: LD_INT 22
23528: PUSH
23529: LD_INT 23
23531: PUSH
23532: LD_INT 24
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: ST_TO_ADDR
23541: GO 23656
23543: LD_INT 52
23545: DOUBLE
23546: EQUAL
23547: IFTRUE 23551
23549: GO 23577
23551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23552: LD_ADDR_VAR 0 3
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 24
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: ST_TO_ADDR
23575: GO 23656
23577: LD_INT 53
23579: DOUBLE
23580: EQUAL
23581: IFTRUE 23585
23583: GO 23603
23585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23586: LD_ADDR_VAR 0 3
23590: PUSH
23591: LD_INT 23
23593: PUSH
23594: LD_INT 24
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: ST_TO_ADDR
23601: GO 23656
23603: LD_INT 46
23605: DOUBLE
23606: EQUAL
23607: IFTRUE 23611
23609: GO 23629
23611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: LD_INT 23
23619: PUSH
23620: LD_INT 24
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: ST_TO_ADDR
23627: GO 23656
23629: LD_INT 47
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23655
23637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_INT 23
23645: PUSH
23646: LD_INT 24
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: ST_TO_ADDR
23653: GO 23656
23655: POP
// result := ( chassis in result ) ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: LD_VAR 0 1
23665: PUSH
23666: LD_VAR 0 3
23670: IN
23671: ST_TO_ADDR
// end ;
23672: LD_VAR 0 3
23676: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
// result := array ;
23686: LD_ADDR_VAR 0 5
23690: PUSH
23691: LD_VAR 0 1
23695: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23696: LD_VAR 0 1
23700: NOT
23701: PUSH
23702: LD_VAR 0 2
23706: NOT
23707: OR
23708: PUSH
23709: LD_VAR 0 3
23713: NOT
23714: OR
23715: PUSH
23716: LD_VAR 0 2
23720: PUSH
23721: LD_VAR 0 1
23725: GREATER
23726: OR
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_VAR 0 1
23737: GREATER
23738: OR
23739: IFFALSE 23743
// exit ;
23741: GO 24039
// if direction then
23743: LD_VAR 0 4
23747: IFFALSE 23811
// begin d := 1 ;
23749: LD_ADDR_VAR 0 9
23753: PUSH
23754: LD_INT 1
23756: ST_TO_ADDR
// if i_from > i_to then
23757: LD_VAR 0 2
23761: PUSH
23762: LD_VAR 0 3
23766: GREATER
23767: IFFALSE 23793
// length := ( array - i_from ) + i_to else
23769: LD_ADDR_VAR 0 11
23773: PUSH
23774: LD_VAR 0 1
23778: PUSH
23779: LD_VAR 0 2
23783: MINUS
23784: PUSH
23785: LD_VAR 0 3
23789: PLUS
23790: ST_TO_ADDR
23791: GO 23809
// length := i_to - i_from ;
23793: LD_ADDR_VAR 0 11
23797: PUSH
23798: LD_VAR 0 3
23802: PUSH
23803: LD_VAR 0 2
23807: MINUS
23808: ST_TO_ADDR
// end else
23809: GO 23872
// begin d := - 1 ;
23811: LD_ADDR_VAR 0 9
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: ST_TO_ADDR
// if i_from > i_to then
23820: LD_VAR 0 2
23824: PUSH
23825: LD_VAR 0 3
23829: GREATER
23830: IFFALSE 23850
// length := i_from - i_to else
23832: LD_ADDR_VAR 0 11
23836: PUSH
23837: LD_VAR 0 2
23841: PUSH
23842: LD_VAR 0 3
23846: MINUS
23847: ST_TO_ADDR
23848: GO 23872
// length := ( array - i_to ) + i_from ;
23850: LD_ADDR_VAR 0 11
23854: PUSH
23855: LD_VAR 0 1
23859: PUSH
23860: LD_VAR 0 3
23864: MINUS
23865: PUSH
23866: LD_VAR 0 2
23870: PLUS
23871: ST_TO_ADDR
// end ; if not length then
23872: LD_VAR 0 11
23876: NOT
23877: IFFALSE 23881
// exit ;
23879: GO 24039
// tmp := array ;
23881: LD_ADDR_VAR 0 10
23885: PUSH
23886: LD_VAR 0 1
23890: ST_TO_ADDR
// for i = 1 to length do
23891: LD_ADDR_VAR 0 6
23895: PUSH
23896: DOUBLE
23897: LD_INT 1
23899: DEC
23900: ST_TO_ADDR
23901: LD_VAR 0 11
23905: PUSH
23906: FOR_TO
23907: IFFALSE 24027
// begin for j = 1 to array do
23909: LD_ADDR_VAR 0 7
23913: PUSH
23914: DOUBLE
23915: LD_INT 1
23917: DEC
23918: ST_TO_ADDR
23919: LD_VAR 0 1
23923: PUSH
23924: FOR_TO
23925: IFFALSE 24013
// begin k := j + d ;
23927: LD_ADDR_VAR 0 8
23931: PUSH
23932: LD_VAR 0 7
23936: PUSH
23937: LD_VAR 0 9
23941: PLUS
23942: ST_TO_ADDR
// if k > array then
23943: LD_VAR 0 8
23947: PUSH
23948: LD_VAR 0 1
23952: GREATER
23953: IFFALSE 23963
// k := 1 ;
23955: LD_ADDR_VAR 0 8
23959: PUSH
23960: LD_INT 1
23962: ST_TO_ADDR
// if not k then
23963: LD_VAR 0 8
23967: NOT
23968: IFFALSE 23980
// k := array ;
23970: LD_ADDR_VAR 0 8
23974: PUSH
23975: LD_VAR 0 1
23979: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23980: LD_ADDR_VAR 0 10
23984: PUSH
23985: LD_VAR 0 10
23989: PPUSH
23990: LD_VAR 0 8
23994: PPUSH
23995: LD_VAR 0 1
23999: PUSH
24000: LD_VAR 0 7
24004: ARRAY
24005: PPUSH
24006: CALL_OW 1
24010: ST_TO_ADDR
// end ;
24011: GO 23924
24013: POP
24014: POP
// array := tmp ;
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 10
24024: ST_TO_ADDR
// end ;
24025: GO 23906
24027: POP
24028: POP
// result := array ;
24029: LD_ADDR_VAR 0 5
24033: PUSH
24034: LD_VAR 0 1
24038: ST_TO_ADDR
// end ;
24039: LD_VAR 0 5
24043: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
// result := 0 ;
24048: LD_ADDR_VAR 0 3
24052: PUSH
24053: LD_INT 0
24055: ST_TO_ADDR
// if not array or not value in array then
24056: LD_VAR 0 1
24060: NOT
24061: PUSH
24062: LD_VAR 0 2
24066: PUSH
24067: LD_VAR 0 1
24071: IN
24072: NOT
24073: OR
24074: IFFALSE 24078
// exit ;
24076: GO 24132
// for i = 1 to array do
24078: LD_ADDR_VAR 0 4
24082: PUSH
24083: DOUBLE
24084: LD_INT 1
24086: DEC
24087: ST_TO_ADDR
24088: LD_VAR 0 1
24092: PUSH
24093: FOR_TO
24094: IFFALSE 24130
// if value = array [ i ] then
24096: LD_VAR 0 2
24100: PUSH
24101: LD_VAR 0 1
24105: PUSH
24106: LD_VAR 0 4
24110: ARRAY
24111: EQUAL
24112: IFFALSE 24128
// begin result := i ;
24114: LD_ADDR_VAR 0 3
24118: PUSH
24119: LD_VAR 0 4
24123: ST_TO_ADDR
// exit ;
24124: POP
24125: POP
24126: GO 24132
// end ;
24128: GO 24093
24130: POP
24131: POP
// end ;
24132: LD_VAR 0 3
24136: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24137: LD_INT 0
24139: PPUSH
// vc_chassis := chassis ;
24140: LD_ADDR_OWVAR 37
24144: PUSH
24145: LD_VAR 0 1
24149: ST_TO_ADDR
// vc_engine := engine ;
24150: LD_ADDR_OWVAR 39
24154: PUSH
24155: LD_VAR 0 2
24159: ST_TO_ADDR
// vc_control := control ;
24160: LD_ADDR_OWVAR 38
24164: PUSH
24165: LD_VAR 0 3
24169: ST_TO_ADDR
// vc_weapon := weapon ;
24170: LD_ADDR_OWVAR 40
24174: PUSH
24175: LD_VAR 0 4
24179: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24180: LD_ADDR_OWVAR 41
24184: PUSH
24185: LD_VAR 0 5
24189: ST_TO_ADDR
// end ;
24190: LD_VAR 0 6
24194: RET
// export function WantPlant ( unit ) ; var task ; begin
24195: LD_INT 0
24197: PPUSH
24198: PPUSH
// result := false ;
24199: LD_ADDR_VAR 0 2
24203: PUSH
24204: LD_INT 0
24206: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL_OW 437
24221: ST_TO_ADDR
// if task then
24222: LD_VAR 0 3
24226: IFFALSE 24254
// if task [ 1 ] [ 1 ] = p then
24228: LD_VAR 0 3
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: PUSH
24241: LD_STRING p
24243: EQUAL
24244: IFFALSE 24254
// result := true ;
24246: LD_ADDR_VAR 0 2
24250: PUSH
24251: LD_INT 1
24253: ST_TO_ADDR
// end ;
24254: LD_VAR 0 2
24258: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24259: LD_INT 0
24261: PPUSH
24262: PPUSH
24263: PPUSH
24264: PPUSH
// if pos < 1 then
24265: LD_VAR 0 2
24269: PUSH
24270: LD_INT 1
24272: LESS
24273: IFFALSE 24277
// exit ;
24275: GO 24580
// if pos = 1 then
24277: LD_VAR 0 2
24281: PUSH
24282: LD_INT 1
24284: EQUAL
24285: IFFALSE 24318
// result := Replace ( arr , pos [ 1 ] , value ) else
24287: LD_ADDR_VAR 0 4
24291: PUSH
24292: LD_VAR 0 1
24296: PPUSH
24297: LD_VAR 0 2
24301: PUSH
24302: LD_INT 1
24304: ARRAY
24305: PPUSH
24306: LD_VAR 0 3
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
24316: GO 24580
// begin tmp := arr ;
24318: LD_ADDR_VAR 0 6
24322: PUSH
24323: LD_VAR 0 1
24327: ST_TO_ADDR
// s_arr := [ tmp ] ;
24328: LD_ADDR_VAR 0 7
24332: PUSH
24333: LD_VAR 0 6
24337: PUSH
24338: EMPTY
24339: LIST
24340: ST_TO_ADDR
// for i = 1 to pos - 1 do
24341: LD_ADDR_VAR 0 5
24345: PUSH
24346: DOUBLE
24347: LD_INT 1
24349: DEC
24350: ST_TO_ADDR
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: MINUS
24359: PUSH
24360: FOR_TO
24361: IFFALSE 24406
// begin tmp := tmp [ pos [ i ] ] ;
24363: LD_ADDR_VAR 0 6
24367: PUSH
24368: LD_VAR 0 6
24372: PUSH
24373: LD_VAR 0 2
24377: PUSH
24378: LD_VAR 0 5
24382: ARRAY
24383: ARRAY
24384: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24385: LD_ADDR_VAR 0 7
24389: PUSH
24390: LD_VAR 0 7
24394: PUSH
24395: LD_VAR 0 6
24399: PUSH
24400: EMPTY
24401: LIST
24402: ADD
24403: ST_TO_ADDR
// end ;
24404: GO 24360
24406: POP
24407: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24408: LD_ADDR_VAR 0 6
24412: PUSH
24413: LD_VAR 0 6
24417: PPUSH
24418: LD_VAR 0 2
24422: PUSH
24423: LD_VAR 0 2
24427: ARRAY
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 1
24438: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24439: LD_ADDR_VAR 0 7
24443: PUSH
24444: LD_VAR 0 7
24448: PPUSH
24449: LD_VAR 0 7
24453: PPUSH
24454: LD_VAR 0 6
24458: PPUSH
24459: CALL_OW 1
24463: ST_TO_ADDR
// for i = s_arr downto 2 do
24464: LD_ADDR_VAR 0 5
24468: PUSH
24469: DOUBLE
24470: LD_VAR 0 7
24474: INC
24475: ST_TO_ADDR
24476: LD_INT 2
24478: PUSH
24479: FOR_DOWNTO
24480: IFFALSE 24564
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24482: LD_ADDR_VAR 0 6
24486: PUSH
24487: LD_VAR 0 7
24491: PUSH
24492: LD_VAR 0 5
24496: PUSH
24497: LD_INT 1
24499: MINUS
24500: ARRAY
24501: PPUSH
24502: LD_VAR 0 2
24506: PUSH
24507: LD_VAR 0 5
24511: PUSH
24512: LD_INT 1
24514: MINUS
24515: ARRAY
24516: PPUSH
24517: LD_VAR 0 7
24521: PUSH
24522: LD_VAR 0 5
24526: ARRAY
24527: PPUSH
24528: CALL_OW 1
24532: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24533: LD_ADDR_VAR 0 7
24537: PUSH
24538: LD_VAR 0 7
24542: PPUSH
24543: LD_VAR 0 5
24547: PUSH
24548: LD_INT 1
24550: MINUS
24551: PPUSH
24552: LD_VAR 0 6
24556: PPUSH
24557: CALL_OW 1
24561: ST_TO_ADDR
// end ;
24562: GO 24479
24564: POP
24565: POP
// result := s_arr [ 1 ] ;
24566: LD_ADDR_VAR 0 4
24570: PUSH
24571: LD_VAR 0 7
24575: PUSH
24576: LD_INT 1
24578: ARRAY
24579: ST_TO_ADDR
// end ; end ;
24580: LD_VAR 0 4
24584: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
// if not list then
24589: LD_VAR 0 1
24593: NOT
24594: IFFALSE 24598
// exit ;
24596: GO 24689
// i := list [ pos1 ] ;
24598: LD_ADDR_VAR 0 5
24602: PUSH
24603: LD_VAR 0 1
24607: PUSH
24608: LD_VAR 0 2
24612: ARRAY
24613: ST_TO_ADDR
// if not i then
24614: LD_VAR 0 5
24618: NOT
24619: IFFALSE 24623
// exit ;
24621: GO 24689
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24623: LD_ADDR_VAR 0 1
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 1
24642: PUSH
24643: LD_VAR 0 3
24647: ARRAY
24648: PPUSH
24649: CALL_OW 1
24653: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24654: LD_ADDR_VAR 0 1
24658: PUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: LD_VAR 0 3
24668: PPUSH
24669: LD_VAR 0 5
24673: PPUSH
24674: CALL_OW 1
24678: ST_TO_ADDR
// result := list ;
24679: LD_ADDR_VAR 0 4
24683: PUSH
24684: LD_VAR 0 1
24688: ST_TO_ADDR
// end ;
24689: LD_VAR 0 4
24693: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24694: LD_INT 0
24696: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24697: LD_ADDR_VAR 0 5
24701: PUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 250
24711: PPUSH
24712: LD_VAR 0 1
24716: PPUSH
24717: CALL_OW 251
24721: PPUSH
24722: LD_VAR 0 2
24726: PPUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: LD_VAR 0 4
24736: PPUSH
24737: CALL 24747 0 5
24741: ST_TO_ADDR
// end ;
24742: LD_VAR 0 5
24746: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24747: LD_INT 0
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
// if not list then
24753: LD_VAR 0 3
24757: NOT
24758: IFFALSE 24762
// exit ;
24760: GO 25150
// result := [ ] ;
24762: LD_ADDR_VAR 0 6
24766: PUSH
24767: EMPTY
24768: ST_TO_ADDR
// for i in list do
24769: LD_ADDR_VAR 0 7
24773: PUSH
24774: LD_VAR 0 3
24778: PUSH
24779: FOR_IN
24780: IFFALSE 24982
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24782: LD_ADDR_VAR 0 9
24786: PUSH
24787: LD_VAR 0 7
24791: PPUSH
24792: LD_VAR 0 1
24796: PPUSH
24797: LD_VAR 0 2
24801: PPUSH
24802: CALL_OW 297
24806: ST_TO_ADDR
// if not result then
24807: LD_VAR 0 6
24811: NOT
24812: IFFALSE 24838
// result := [ [ i , tmp ] ] else
24814: LD_ADDR_VAR 0 6
24818: PUSH
24819: LD_VAR 0 7
24823: PUSH
24824: LD_VAR 0 9
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: ST_TO_ADDR
24836: GO 24980
// begin if result [ result ] [ 2 ] < tmp then
24838: LD_VAR 0 6
24842: PUSH
24843: LD_VAR 0 6
24847: ARRAY
24848: PUSH
24849: LD_INT 2
24851: ARRAY
24852: PUSH
24853: LD_VAR 0 9
24857: LESS
24858: IFFALSE 24900
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24860: LD_ADDR_VAR 0 6
24864: PUSH
24865: LD_VAR 0 6
24869: PPUSH
24870: LD_VAR 0 6
24874: PUSH
24875: LD_INT 1
24877: PLUS
24878: PPUSH
24879: LD_VAR 0 7
24883: PUSH
24884: LD_VAR 0 9
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 2
24897: ST_TO_ADDR
24898: GO 24980
// for j = 1 to result do
24900: LD_ADDR_VAR 0 8
24904: PUSH
24905: DOUBLE
24906: LD_INT 1
24908: DEC
24909: ST_TO_ADDR
24910: LD_VAR 0 6
24914: PUSH
24915: FOR_TO
24916: IFFALSE 24978
// begin if tmp < result [ j ] [ 2 ] then
24918: LD_VAR 0 9
24922: PUSH
24923: LD_VAR 0 6
24927: PUSH
24928: LD_VAR 0 8
24932: ARRAY
24933: PUSH
24934: LD_INT 2
24936: ARRAY
24937: LESS
24938: IFFALSE 24976
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24940: LD_ADDR_VAR 0 6
24944: PUSH
24945: LD_VAR 0 6
24949: PPUSH
24950: LD_VAR 0 8
24954: PPUSH
24955: LD_VAR 0 7
24959: PUSH
24960: LD_VAR 0 9
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 2
24973: ST_TO_ADDR
// break ;
24974: GO 24978
// end ; end ;
24976: GO 24915
24978: POP
24979: POP
// end ; end ;
24980: GO 24779
24982: POP
24983: POP
// if result and not asc then
24984: LD_VAR 0 6
24988: PUSH
24989: LD_VAR 0 4
24993: NOT
24994: AND
24995: IFFALSE 25070
// begin tmp := result ;
24997: LD_ADDR_VAR 0 9
25001: PUSH
25002: LD_VAR 0 6
25006: ST_TO_ADDR
// for i = tmp downto 1 do
25007: LD_ADDR_VAR 0 7
25011: PUSH
25012: DOUBLE
25013: LD_VAR 0 9
25017: INC
25018: ST_TO_ADDR
25019: LD_INT 1
25021: PUSH
25022: FOR_DOWNTO
25023: IFFALSE 25068
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25025: LD_ADDR_VAR 0 6
25029: PUSH
25030: LD_VAR 0 6
25034: PPUSH
25035: LD_VAR 0 9
25039: PUSH
25040: LD_VAR 0 7
25044: MINUS
25045: PUSH
25046: LD_INT 1
25048: PLUS
25049: PPUSH
25050: LD_VAR 0 9
25054: PUSH
25055: LD_VAR 0 7
25059: ARRAY
25060: PPUSH
25061: CALL_OW 1
25065: ST_TO_ADDR
25066: GO 25022
25068: POP
25069: POP
// end ; tmp := [ ] ;
25070: LD_ADDR_VAR 0 9
25074: PUSH
25075: EMPTY
25076: ST_TO_ADDR
// if mode then
25077: LD_VAR 0 5
25081: IFFALSE 25150
// begin for i = 1 to result do
25083: LD_ADDR_VAR 0 7
25087: PUSH
25088: DOUBLE
25089: LD_INT 1
25091: DEC
25092: ST_TO_ADDR
25093: LD_VAR 0 6
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25138
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25101: LD_ADDR_VAR 0 9
25105: PUSH
25106: LD_VAR 0 9
25110: PPUSH
25111: LD_VAR 0 7
25115: PPUSH
25116: LD_VAR 0 6
25120: PUSH
25121: LD_VAR 0 7
25125: ARRAY
25126: PUSH
25127: LD_INT 1
25129: ARRAY
25130: PPUSH
25131: CALL_OW 1
25135: ST_TO_ADDR
25136: GO 25098
25138: POP
25139: POP
// result := tmp ;
25140: LD_ADDR_VAR 0 6
25144: PUSH
25145: LD_VAR 0 9
25149: ST_TO_ADDR
// end ; end ;
25150: LD_VAR 0 6
25154: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25155: LD_INT 0
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25163: LD_ADDR_VAR 0 5
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: ST_TO_ADDR
// if not x or not y then
25185: LD_VAR 0 2
25189: NOT
25190: PUSH
25191: LD_VAR 0 3
25195: NOT
25196: OR
25197: IFFALSE 25201
// exit ;
25199: GO 26847
// if not range then
25201: LD_VAR 0 4
25205: NOT
25206: IFFALSE 25216
// range := 10 ;
25208: LD_ADDR_VAR 0 4
25212: PUSH
25213: LD_INT 10
25215: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25216: LD_ADDR_VAR 0 8
25220: PUSH
25221: LD_INT 81
25223: PUSH
25224: LD_VAR 0 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 92
25235: PUSH
25236: LD_VAR 0 2
25240: PUSH
25241: LD_VAR 0 3
25245: PUSH
25246: LD_VAR 0 4
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: LD_INT 21
25262: PUSH
25263: LD_INT 3
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 8
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 26847
// for i in tmp do
25293: LD_ADDR_VAR 0 6
25297: PUSH
25298: LD_VAR 0 8
25302: PUSH
25303: FOR_IN
25304: IFFALSE 26822
// begin points := [ 0 , 0 , 0 ] ;
25306: LD_ADDR_VAR 0 9
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// bpoints := 1 ;
25325: LD_ADDR_VAR 0 10
25329: PUSH
25330: LD_INT 1
25332: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25333: LD_VAR 0 6
25337: PPUSH
25338: CALL_OW 247
25342: PUSH
25343: LD_INT 1
25345: DOUBLE
25346: EQUAL
25347: IFTRUE 25351
25349: GO 25929
25351: POP
// begin if GetClass ( i ) = 1 then
25352: LD_VAR 0 6
25356: PPUSH
25357: CALL_OW 257
25361: PUSH
25362: LD_INT 1
25364: EQUAL
25365: IFFALSE 25386
// points := [ 10 , 5 , 3 ] ;
25367: LD_ADDR_VAR 0 9
25371: PUSH
25372: LD_INT 10
25374: PUSH
25375: LD_INT 5
25377: PUSH
25378: LD_INT 3
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25386: LD_VAR 0 6
25390: PPUSH
25391: CALL_OW 257
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 3
25401: PUSH
25402: LD_INT 4
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: IN
25410: IFFALSE 25431
// points := [ 3 , 2 , 1 ] ;
25412: LD_ADDR_VAR 0 9
25416: PUSH
25417: LD_INT 3
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25431: LD_VAR 0 6
25435: PPUSH
25436: CALL_OW 257
25440: PUSH
25441: LD_INT 5
25443: EQUAL
25444: IFFALSE 25465
// points := [ 130 , 5 , 2 ] ;
25446: LD_ADDR_VAR 0 9
25450: PUSH
25451: LD_INT 130
25453: PUSH
25454: LD_INT 5
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25465: LD_VAR 0 6
25469: PPUSH
25470: CALL_OW 257
25474: PUSH
25475: LD_INT 8
25477: EQUAL
25478: IFFALSE 25499
// points := [ 35 , 35 , 30 ] ;
25480: LD_ADDR_VAR 0 9
25484: PUSH
25485: LD_INT 35
25487: PUSH
25488: LD_INT 35
25490: PUSH
25491: LD_INT 30
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: LIST
25498: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25499: LD_VAR 0 6
25503: PPUSH
25504: CALL_OW 257
25508: PUSH
25509: LD_INT 9
25511: EQUAL
25512: IFFALSE 25533
// points := [ 20 , 55 , 40 ] ;
25514: LD_ADDR_VAR 0 9
25518: PUSH
25519: LD_INT 20
25521: PUSH
25522: LD_INT 55
25524: PUSH
25525: LD_INT 40
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25533: LD_VAR 0 6
25537: PPUSH
25538: CALL_OW 257
25542: PUSH
25543: LD_INT 12
25545: PUSH
25546: LD_INT 16
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: IN
25553: IFFALSE 25574
// points := [ 5 , 3 , 2 ] ;
25555: LD_ADDR_VAR 0 9
25559: PUSH
25560: LD_INT 5
25562: PUSH
25563: LD_INT 3
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25574: LD_VAR 0 6
25578: PPUSH
25579: CALL_OW 257
25583: PUSH
25584: LD_INT 17
25586: EQUAL
25587: IFFALSE 25608
// points := [ 100 , 50 , 75 ] ;
25589: LD_ADDR_VAR 0 9
25593: PUSH
25594: LD_INT 100
25596: PUSH
25597: LD_INT 50
25599: PUSH
25600: LD_INT 75
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25608: LD_VAR 0 6
25612: PPUSH
25613: CALL_OW 257
25617: PUSH
25618: LD_INT 15
25620: EQUAL
25621: IFFALSE 25642
// points := [ 10 , 5 , 3 ] ;
25623: LD_ADDR_VAR 0 9
25627: PUSH
25628: LD_INT 10
25630: PUSH
25631: LD_INT 5
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25642: LD_VAR 0 6
25646: PPUSH
25647: CALL_OW 257
25651: PUSH
25652: LD_INT 14
25654: EQUAL
25655: IFFALSE 25676
// points := [ 10 , 0 , 0 ] ;
25657: LD_ADDR_VAR 0 9
25661: PUSH
25662: LD_INT 10
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25676: LD_VAR 0 6
25680: PPUSH
25681: CALL_OW 257
25685: PUSH
25686: LD_INT 11
25688: EQUAL
25689: IFFALSE 25710
// points := [ 30 , 10 , 5 ] ;
25691: LD_ADDR_VAR 0 9
25695: PUSH
25696: LD_INT 30
25698: PUSH
25699: LD_INT 10
25701: PUSH
25702: LD_INT 5
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25710: LD_VAR 0 1
25714: PPUSH
25715: LD_INT 5
25717: PPUSH
25718: CALL_OW 321
25722: PUSH
25723: LD_INT 2
25725: EQUAL
25726: IFFALSE 25743
// bpoints := bpoints * 1.8 ;
25728: LD_ADDR_VAR 0 10
25732: PUSH
25733: LD_VAR 0 10
25737: PUSH
25738: LD_REAL  1.80000000000000E+0000
25741: MUL
25742: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25743: LD_VAR 0 6
25747: PPUSH
25748: CALL_OW 257
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: LD_INT 4
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: IN
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: LD_INT 51
25779: PPUSH
25780: CALL_OW 321
25784: PUSH
25785: LD_INT 2
25787: EQUAL
25788: AND
25789: IFFALSE 25806
// bpoints := bpoints * 1.2 ;
25791: LD_ADDR_VAR 0 10
25795: PUSH
25796: LD_VAR 0 10
25800: PUSH
25801: LD_REAL  1.20000000000000E+0000
25804: MUL
25805: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25806: LD_VAR 0 6
25810: PPUSH
25811: CALL_OW 257
25815: PUSH
25816: LD_INT 5
25818: PUSH
25819: LD_INT 7
25821: PUSH
25822: LD_INT 9
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: IN
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_INT 52
25838: PPUSH
25839: CALL_OW 321
25843: PUSH
25844: LD_INT 2
25846: EQUAL
25847: AND
25848: IFFALSE 25865
// bpoints := bpoints * 1.5 ;
25850: LD_ADDR_VAR 0 10
25854: PUSH
25855: LD_VAR 0 10
25859: PUSH
25860: LD_REAL  1.50000000000000E+0000
25863: MUL
25864: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25865: LD_VAR 0 1
25869: PPUSH
25870: LD_INT 66
25872: PPUSH
25873: CALL_OW 321
25877: PUSH
25878: LD_INT 2
25880: EQUAL
25881: IFFALSE 25898
// bpoints := bpoints * 1.1 ;
25883: LD_ADDR_VAR 0 10
25887: PUSH
25888: LD_VAR 0 10
25892: PUSH
25893: LD_REAL  1.10000000000000E+0000
25896: MUL
25897: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25898: LD_ADDR_VAR 0 10
25902: PUSH
25903: LD_VAR 0 10
25907: PUSH
25908: LD_VAR 0 6
25912: PPUSH
25913: LD_INT 1
25915: PPUSH
25916: CALL_OW 259
25920: PUSH
25921: LD_REAL  1.15000000000000E+0000
25924: MUL
25925: MUL
25926: ST_TO_ADDR
// end ; unit_vehicle :
25927: GO 26751
25929: LD_INT 2
25931: DOUBLE
25932: EQUAL
25933: IFTRUE 25937
25935: GO 26739
25937: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 264
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 42
25953: PUSH
25954: LD_INT 24
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: IN
25962: IFFALSE 25983
// points := [ 25 , 5 , 3 ] ;
25964: LD_ADDR_VAR 0 9
25968: PUSH
25969: LD_INT 25
25971: PUSH
25972: LD_INT 5
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25983: LD_VAR 0 6
25987: PPUSH
25988: CALL_OW 264
25992: PUSH
25993: LD_INT 4
25995: PUSH
25996: LD_INT 43
25998: PUSH
25999: LD_INT 25
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: LIST
26006: IN
26007: IFFALSE 26028
// points := [ 40 , 15 , 5 ] ;
26009: LD_ADDR_VAR 0 9
26013: PUSH
26014: LD_INT 40
26016: PUSH
26017: LD_INT 15
26019: PUSH
26020: LD_INT 5
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26028: LD_VAR 0 6
26032: PPUSH
26033: CALL_OW 264
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: LD_INT 23
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: IN
26048: IFFALSE 26069
// points := [ 7 , 25 , 8 ] ;
26050: LD_ADDR_VAR 0 9
26054: PUSH
26055: LD_INT 7
26057: PUSH
26058: LD_INT 25
26060: PUSH
26061: LD_INT 8
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26069: LD_VAR 0 6
26073: PPUSH
26074: CALL_OW 264
26078: PUSH
26079: LD_INT 5
26081: PUSH
26082: LD_INT 27
26084: PUSH
26085: LD_INT 44
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: LIST
26092: IN
26093: IFFALSE 26114
// points := [ 14 , 50 , 16 ] ;
26095: LD_ADDR_VAR 0 9
26099: PUSH
26100: LD_INT 14
26102: PUSH
26103: LD_INT 50
26105: PUSH
26106: LD_INT 16
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26114: LD_VAR 0 6
26118: PPUSH
26119: CALL_OW 264
26123: PUSH
26124: LD_INT 6
26126: PUSH
26127: LD_INT 46
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: IN
26134: IFFALSE 26155
// points := [ 32 , 120 , 70 ] ;
26136: LD_ADDR_VAR 0 9
26140: PUSH
26141: LD_INT 32
26143: PUSH
26144: LD_INT 120
26146: PUSH
26147: LD_INT 70
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26155: LD_VAR 0 6
26159: PPUSH
26160: CALL_OW 264
26164: PUSH
26165: LD_INT 7
26167: PUSH
26168: LD_INT 28
26170: PUSH
26171: LD_INT 45
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: IN
26179: IFFALSE 26200
// points := [ 35 , 20 , 45 ] ;
26181: LD_ADDR_VAR 0 9
26185: PUSH
26186: LD_INT 35
26188: PUSH
26189: LD_INT 20
26191: PUSH
26192: LD_INT 45
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: LIST
26199: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26200: LD_VAR 0 6
26204: PPUSH
26205: CALL_OW 264
26209: PUSH
26210: LD_INT 47
26212: PUSH
26213: EMPTY
26214: LIST
26215: IN
26216: IFFALSE 26237
// points := [ 67 , 45 , 75 ] ;
26218: LD_ADDR_VAR 0 9
26222: PUSH
26223: LD_INT 67
26225: PUSH
26226: LD_INT 45
26228: PUSH
26229: LD_INT 75
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26237: LD_VAR 0 6
26241: PPUSH
26242: CALL_OW 264
26246: PUSH
26247: LD_INT 26
26249: PUSH
26250: EMPTY
26251: LIST
26252: IN
26253: IFFALSE 26274
// points := [ 120 , 30 , 80 ] ;
26255: LD_ADDR_VAR 0 9
26259: PUSH
26260: LD_INT 120
26262: PUSH
26263: LD_INT 30
26265: PUSH
26266: LD_INT 80
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26274: LD_VAR 0 6
26278: PPUSH
26279: CALL_OW 264
26283: PUSH
26284: LD_INT 22
26286: PUSH
26287: EMPTY
26288: LIST
26289: IN
26290: IFFALSE 26311
// points := [ 40 , 1 , 1 ] ;
26292: LD_ADDR_VAR 0 9
26296: PUSH
26297: LD_INT 40
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26311: LD_VAR 0 6
26315: PPUSH
26316: CALL_OW 264
26320: PUSH
26321: LD_INT 29
26323: PUSH
26324: EMPTY
26325: LIST
26326: IN
26327: IFFALSE 26348
// points := [ 70 , 200 , 400 ] ;
26329: LD_ADDR_VAR 0 9
26333: PUSH
26334: LD_INT 70
26336: PUSH
26337: LD_INT 200
26339: PUSH
26340: LD_INT 400
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26348: LD_VAR 0 6
26352: PPUSH
26353: CALL_OW 264
26357: PUSH
26358: LD_INT 14
26360: PUSH
26361: LD_INT 53
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: IN
26368: IFFALSE 26389
// points := [ 40 , 10 , 20 ] ;
26370: LD_ADDR_VAR 0 9
26374: PUSH
26375: LD_INT 40
26377: PUSH
26378: LD_INT 10
26380: PUSH
26381: LD_INT 20
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26389: LD_VAR 0 6
26393: PPUSH
26394: CALL_OW 264
26398: PUSH
26399: LD_INT 9
26401: PUSH
26402: EMPTY
26403: LIST
26404: IN
26405: IFFALSE 26426
// points := [ 5 , 70 , 20 ] ;
26407: LD_ADDR_VAR 0 9
26411: PUSH
26412: LD_INT 5
26414: PUSH
26415: LD_INT 70
26417: PUSH
26418: LD_INT 20
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26426: LD_VAR 0 6
26430: PPUSH
26431: CALL_OW 264
26435: PUSH
26436: LD_INT 10
26438: PUSH
26439: EMPTY
26440: LIST
26441: IN
26442: IFFALSE 26463
// points := [ 35 , 110 , 70 ] ;
26444: LD_ADDR_VAR 0 9
26448: PUSH
26449: LD_INT 35
26451: PUSH
26452: LD_INT 110
26454: PUSH
26455: LD_INT 70
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26463: LD_VAR 0 6
26467: PPUSH
26468: CALL_OW 265
26472: PUSH
26473: LD_INT 25
26475: EQUAL
26476: IFFALSE 26497
// points := [ 80 , 65 , 100 ] ;
26478: LD_ADDR_VAR 0 9
26482: PUSH
26483: LD_INT 80
26485: PUSH
26486: LD_INT 65
26488: PUSH
26489: LD_INT 100
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26497: LD_VAR 0 6
26501: PPUSH
26502: CALL_OW 263
26506: PUSH
26507: LD_INT 1
26509: EQUAL
26510: IFFALSE 26545
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26512: LD_ADDR_VAR 0 10
26516: PUSH
26517: LD_VAR 0 10
26521: PUSH
26522: LD_VAR 0 6
26526: PPUSH
26527: CALL_OW 311
26531: PPUSH
26532: LD_INT 3
26534: PPUSH
26535: CALL_OW 259
26539: PUSH
26540: LD_INT 4
26542: MUL
26543: MUL
26544: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26545: LD_VAR 0 6
26549: PPUSH
26550: CALL_OW 263
26554: PUSH
26555: LD_INT 2
26557: EQUAL
26558: IFFALSE 26609
// begin j := IsControledBy ( i ) ;
26560: LD_ADDR_VAR 0 7
26564: PUSH
26565: LD_VAR 0 6
26569: PPUSH
26570: CALL_OW 312
26574: ST_TO_ADDR
// if j then
26575: LD_VAR 0 7
26579: IFFALSE 26609
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26581: LD_ADDR_VAR 0 10
26585: PUSH
26586: LD_VAR 0 10
26590: PUSH
26591: LD_VAR 0 7
26595: PPUSH
26596: LD_INT 3
26598: PPUSH
26599: CALL_OW 259
26603: PUSH
26604: LD_INT 3
26606: MUL
26607: MUL
26608: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26609: LD_VAR 0 6
26613: PPUSH
26614: CALL_OW 264
26618: PUSH
26619: LD_INT 5
26621: PUSH
26622: LD_INT 6
26624: PUSH
26625: LD_INT 46
26627: PUSH
26628: LD_INT 44
26630: PUSH
26631: LD_INT 47
26633: PUSH
26634: LD_INT 45
26636: PUSH
26637: LD_INT 28
26639: PUSH
26640: LD_INT 7
26642: PUSH
26643: LD_INT 27
26645: PUSH
26646: LD_INT 29
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: IN
26661: PUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: LD_INT 52
26669: PPUSH
26670: CALL_OW 321
26674: PUSH
26675: LD_INT 2
26677: EQUAL
26678: AND
26679: IFFALSE 26696
// bpoints := bpoints * 1.2 ;
26681: LD_ADDR_VAR 0 10
26685: PUSH
26686: LD_VAR 0 10
26690: PUSH
26691: LD_REAL  1.20000000000000E+0000
26694: MUL
26695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26696: LD_VAR 0 6
26700: PPUSH
26701: CALL_OW 264
26705: PUSH
26706: LD_INT 6
26708: PUSH
26709: LD_INT 46
26711: PUSH
26712: LD_INT 47
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: IN
26720: IFFALSE 26737
// bpoints := bpoints * 1.2 ;
26722: LD_ADDR_VAR 0 10
26726: PUSH
26727: LD_VAR 0 10
26731: PUSH
26732: LD_REAL  1.20000000000000E+0000
26735: MUL
26736: ST_TO_ADDR
// end ; unit_building :
26737: GO 26751
26739: LD_INT 3
26741: DOUBLE
26742: EQUAL
26743: IFTRUE 26747
26745: GO 26750
26747: POP
// ; end ;
26748: GO 26751
26750: POP
// for j = 1 to 3 do
26751: LD_ADDR_VAR 0 7
26755: PUSH
26756: DOUBLE
26757: LD_INT 1
26759: DEC
26760: ST_TO_ADDR
26761: LD_INT 3
26763: PUSH
26764: FOR_TO
26765: IFFALSE 26818
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26767: LD_ADDR_VAR 0 5
26771: PUSH
26772: LD_VAR 0 5
26776: PPUSH
26777: LD_VAR 0 7
26781: PPUSH
26782: LD_VAR 0 5
26786: PUSH
26787: LD_VAR 0 7
26791: ARRAY
26792: PUSH
26793: LD_VAR 0 9
26797: PUSH
26798: LD_VAR 0 7
26802: ARRAY
26803: PUSH
26804: LD_VAR 0 10
26808: MUL
26809: PLUS
26810: PPUSH
26811: CALL_OW 1
26815: ST_TO_ADDR
26816: GO 26764
26818: POP
26819: POP
// end ;
26820: GO 25303
26822: POP
26823: POP
// result := Replace ( result , 4 , tmp ) ;
26824: LD_ADDR_VAR 0 5
26828: PUSH
26829: LD_VAR 0 5
26833: PPUSH
26834: LD_INT 4
26836: PPUSH
26837: LD_VAR 0 8
26841: PPUSH
26842: CALL_OW 1
26846: ST_TO_ADDR
// end ;
26847: LD_VAR 0 5
26851: RET
// export function DangerAtRange ( unit , range ) ; begin
26852: LD_INT 0
26854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26855: LD_ADDR_VAR 0 3
26859: PUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 255
26869: PPUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 250
26879: PPUSH
26880: LD_VAR 0 1
26884: PPUSH
26885: CALL_OW 251
26889: PPUSH
26890: LD_VAR 0 2
26894: PPUSH
26895: CALL 25155 0 4
26899: ST_TO_ADDR
// end ;
26900: LD_VAR 0 3
26904: RET
// export function DangerInArea ( side , area ) ; begin
26905: LD_INT 0
26907: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_INT 81
26920: PUSH
26921: LD_VAR 0 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 70
26934: ST_TO_ADDR
// end ;
26935: LD_VAR 0 3
26939: RET
// export function IsExtension ( b ) ; begin
26940: LD_INT 0
26942: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26943: LD_ADDR_VAR 0 2
26947: PUSH
26948: LD_VAR 0 1
26952: PUSH
26953: LD_INT 23
26955: PUSH
26956: LD_INT 20
26958: PUSH
26959: LD_INT 22
26961: PUSH
26962: LD_INT 17
26964: PUSH
26965: LD_INT 24
26967: PUSH
26968: LD_INT 21
26970: PUSH
26971: LD_INT 19
26973: PUSH
26974: LD_INT 16
26976: PUSH
26977: LD_INT 25
26979: PUSH
26980: LD_INT 18
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: IN
26995: ST_TO_ADDR
// end ;
26996: LD_VAR 0 2
27000: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
27005: PPUSH
// result := [ ] ;
27006: LD_ADDR_VAR 0 4
27010: PUSH
27011: EMPTY
27012: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27013: LD_ADDR_VAR 0 5
27017: PUSH
27018: LD_VAR 0 2
27022: PPUSH
27023: LD_INT 21
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 70
27037: ST_TO_ADDR
// if not tmp then
27038: LD_VAR 0 5
27042: NOT
27043: IFFALSE 27047
// exit ;
27045: GO 27111
// if checkLink then
27047: LD_VAR 0 3
27051: IFFALSE 27101
// begin for i in tmp do
27053: LD_ADDR_VAR 0 6
27057: PUSH
27058: LD_VAR 0 5
27062: PUSH
27063: FOR_IN
27064: IFFALSE 27099
// if GetBase ( i ) <> base then
27066: LD_VAR 0 6
27070: PPUSH
27071: CALL_OW 274
27075: PUSH
27076: LD_VAR 0 1
27080: NONEQUAL
27081: IFFALSE 27097
// ComLinkToBase ( base , i ) ;
27083: LD_VAR 0 1
27087: PPUSH
27088: LD_VAR 0 6
27092: PPUSH
27093: CALL_OW 169
27097: GO 27063
27099: POP
27100: POP
// end ; result := tmp ;
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: LD_VAR 0 5
27110: ST_TO_ADDR
// end ;
27111: LD_VAR 0 4
27115: RET
// export function ComComplete ( units , b ) ; var i ; begin
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
// if not units then
27120: LD_VAR 0 1
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27219
// for i in units do
27129: LD_ADDR_VAR 0 4
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27217
// if BuildingStatus ( b ) = bs_build then
27142: LD_VAR 0 2
27146: PPUSH
27147: CALL_OW 461
27151: PUSH
27152: LD_INT 1
27154: EQUAL
27155: IFFALSE 27215
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27157: LD_VAR 0 4
27161: PPUSH
27162: LD_STRING h
27164: PUSH
27165: LD_VAR 0 2
27169: PPUSH
27170: CALL_OW 250
27174: PUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: CALL_OW 251
27184: PUSH
27185: LD_VAR 0 2
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: PPUSH
27211: CALL_OW 446
27215: GO 27139
27217: POP
27218: POP
// end ;
27219: LD_VAR 0 3
27223: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27224: LD_INT 0
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27232: LD_VAR 0 1
27236: NOT
27237: PUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 263
27247: PUSH
27248: LD_INT 2
27250: EQUAL
27251: NOT
27252: OR
27253: IFFALSE 27257
// exit ;
27255: GO 27573
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27257: LD_ADDR_VAR 0 6
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_VAR 0 1
27269: PPUSH
27270: CALL_OW 255
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 30
27284: PUSH
27285: LD_INT 36
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 34
27294: PUSH
27295: LD_INT 31
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PPUSH
27311: CALL_OW 69
27315: ST_TO_ADDR
// if not tmp then
27316: LD_VAR 0 6
27320: NOT
27321: IFFALSE 27325
// exit ;
27323: GO 27573
// result := [ ] ;
27325: LD_ADDR_VAR 0 2
27329: PUSH
27330: EMPTY
27331: ST_TO_ADDR
// for i in tmp do
27332: LD_ADDR_VAR 0 3
27336: PUSH
27337: LD_VAR 0 6
27341: PUSH
27342: FOR_IN
27343: IFFALSE 27414
// begin t := UnitsInside ( i ) ;
27345: LD_ADDR_VAR 0 4
27349: PUSH
27350: LD_VAR 0 3
27354: PPUSH
27355: CALL_OW 313
27359: ST_TO_ADDR
// if t then
27360: LD_VAR 0 4
27364: IFFALSE 27412
// for j in t do
27366: LD_ADDR_VAR 0 7
27370: PUSH
27371: LD_VAR 0 4
27375: PUSH
27376: FOR_IN
27377: IFFALSE 27410
// result := Insert ( result , result + 1 , j ) ;
27379: LD_ADDR_VAR 0 2
27383: PUSH
27384: LD_VAR 0 2
27388: PPUSH
27389: LD_VAR 0 2
27393: PUSH
27394: LD_INT 1
27396: PLUS
27397: PPUSH
27398: LD_VAR 0 7
27402: PPUSH
27403: CALL_OW 2
27407: ST_TO_ADDR
27408: GO 27376
27410: POP
27411: POP
// end ;
27412: GO 27342
27414: POP
27415: POP
// if not result then
27416: LD_VAR 0 2
27420: NOT
27421: IFFALSE 27425
// exit ;
27423: GO 27573
// mech := result [ 1 ] ;
27425: LD_ADDR_VAR 0 5
27429: PUSH
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: ST_TO_ADDR
// if result > 1 then
27439: LD_VAR 0 2
27443: PUSH
27444: LD_INT 1
27446: GREATER
27447: IFFALSE 27559
// for i = 2 to result do
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: DOUBLE
27455: LD_INT 2
27457: DEC
27458: ST_TO_ADDR
27459: LD_VAR 0 2
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27557
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27467: LD_ADDR_VAR 0 4
27471: PUSH
27472: LD_VAR 0 2
27476: PUSH
27477: LD_VAR 0 3
27481: ARRAY
27482: PPUSH
27483: LD_INT 3
27485: PPUSH
27486: CALL_OW 259
27490: PUSH
27491: LD_VAR 0 2
27495: PUSH
27496: LD_VAR 0 3
27500: ARRAY
27501: PPUSH
27502: CALL_OW 432
27506: MINUS
27507: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27508: LD_VAR 0 4
27512: PUSH
27513: LD_VAR 0 5
27517: PPUSH
27518: LD_INT 3
27520: PPUSH
27521: CALL_OW 259
27525: PUSH
27526: LD_VAR 0 5
27530: PPUSH
27531: CALL_OW 432
27535: MINUS
27536: GREATEREQUAL
27537: IFFALSE 27555
// mech := result [ i ] ;
27539: LD_ADDR_VAR 0 5
27543: PUSH
27544: LD_VAR 0 2
27548: PUSH
27549: LD_VAR 0 3
27553: ARRAY
27554: ST_TO_ADDR
// end ;
27555: GO 27464
27557: POP
27558: POP
// ComLinkTo ( vehicle , mech ) ;
27559: LD_VAR 0 1
27563: PPUSH
27564: LD_VAR 0 5
27568: PPUSH
27569: CALL_OW 135
// end ;
27573: LD_VAR 0 2
27577: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27578: LD_INT 0
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
// result := [ ] ;
27593: LD_ADDR_VAR 0 7
27597: PUSH
27598: EMPTY
27599: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 266
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: IN
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 29259
// if name then
27625: LD_VAR 0 3
27629: IFFALSE 27645
// SetBName ( base_dep , name ) ;
27631: LD_VAR 0 1
27635: PPUSH
27636: LD_VAR 0 3
27640: PPUSH
27641: CALL_OW 500
// base := GetBase ( base_dep ) ;
27645: LD_ADDR_VAR 0 15
27649: PUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 274
27659: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27660: LD_ADDR_VAR 0 16
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: CALL_OW 255
27674: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27675: LD_ADDR_VAR 0 17
27679: PUSH
27680: LD_VAR 0 1
27684: PPUSH
27685: CALL_OW 248
27689: ST_TO_ADDR
// if sources then
27690: LD_VAR 0 5
27694: IFFALSE 27741
// for i = 1 to 3 do
27696: LD_ADDR_VAR 0 8
27700: PUSH
27701: DOUBLE
27702: LD_INT 1
27704: DEC
27705: ST_TO_ADDR
27706: LD_INT 3
27708: PUSH
27709: FOR_TO
27710: IFFALSE 27739
// AddResourceType ( base , i , sources [ i ] ) ;
27712: LD_VAR 0 15
27716: PPUSH
27717: LD_VAR 0 8
27721: PPUSH
27722: LD_VAR 0 5
27726: PUSH
27727: LD_VAR 0 8
27731: ARRAY
27732: PPUSH
27733: CALL_OW 276
27737: GO 27709
27739: POP
27740: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27741: LD_ADDR_VAR 0 18
27745: PUSH
27746: LD_VAR 0 15
27750: PPUSH
27751: LD_VAR 0 2
27755: PPUSH
27756: LD_INT 1
27758: PPUSH
27759: CALL 27001 0 3
27763: ST_TO_ADDR
// InitHc ;
27764: CALL_OW 19
// InitUc ;
27768: CALL_OW 18
// uc_side := side ;
27772: LD_ADDR_OWVAR 20
27776: PUSH
27777: LD_VAR 0 16
27781: ST_TO_ADDR
// uc_nation := nation ;
27782: LD_ADDR_OWVAR 21
27786: PUSH
27787: LD_VAR 0 17
27791: ST_TO_ADDR
// if buildings then
27792: LD_VAR 0 18
27796: IFFALSE 29118
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27798: LD_ADDR_VAR 0 19
27802: PUSH
27803: LD_VAR 0 18
27807: PPUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 29
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 72
27840: ST_TO_ADDR
// if tmp then
27841: LD_VAR 0 19
27845: IFFALSE 27893
// for i in tmp do
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_VAR 0 19
27856: PUSH
27857: FOR_IN
27858: IFFALSE 27891
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27860: LD_VAR 0 8
27864: PPUSH
27865: CALL_OW 250
27869: PPUSH
27870: LD_VAR 0 8
27874: PPUSH
27875: CALL_OW 251
27879: PPUSH
27880: LD_VAR 0 16
27884: PPUSH
27885: CALL_OW 441
27889: GO 27857
27891: POP
27892: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27893: LD_VAR 0 18
27897: PPUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 32
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 30
27913: PUSH
27914: LD_INT 33
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 72
27930: IFFALSE 28018
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_VAR 0 18
27941: PPUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 30
27947: PUSH
27948: LD_INT 32
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 33
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 72
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28016
// begin if not GetBWeapon ( i ) then
27978: LD_VAR 0 8
27982: PPUSH
27983: CALL_OW 269
27987: NOT
27988: IFFALSE 28014
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27990: LD_VAR 0 8
27994: PPUSH
27995: LD_VAR 0 8
27999: PPUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL 29264 0 2
28009: PPUSH
28010: CALL_OW 431
// end ;
28014: GO 27975
28016: POP
28017: POP
// end ; for i = 1 to personel do
28018: LD_ADDR_VAR 0 8
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 6
28032: PUSH
28033: FOR_TO
28034: IFFALSE 29098
// begin if i > 4 then
28036: LD_VAR 0 8
28040: PUSH
28041: LD_INT 4
28043: GREATER
28044: IFFALSE 28048
// break ;
28046: GO 29098
// case i of 1 :
28048: LD_VAR 0 8
28052: PUSH
28053: LD_INT 1
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28141
28061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28062: LD_ADDR_VAR 0 12
28066: PUSH
28067: LD_VAR 0 18
28071: PPUSH
28072: LD_INT 22
28074: PUSH
28075: LD_VAR 0 16
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 58
28086: PUSH
28087: EMPTY
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 32
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 30
28105: PUSH
28106: LD_INT 4
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 30
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 72
28138: ST_TO_ADDR
28139: GO 28363
28141: LD_INT 2
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28211
28149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28150: LD_ADDR_VAR 0 12
28154: PUSH
28155: LD_VAR 0 18
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 16
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 30
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 30
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: ST_TO_ADDR
28209: GO 28363
28211: LD_INT 3
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28281
28219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28220: LD_ADDR_VAR 0 12
28224: PUSH
28225: LD_VAR 0 18
28229: PPUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 16
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 30
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 72
28278: ST_TO_ADDR
28279: GO 28363
28281: LD_INT 4
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28362
28289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28290: LD_ADDR_VAR 0 12
28294: PUSH
28295: LD_VAR 0 18
28299: PPUSH
28300: LD_INT 22
28302: PUSH
28303: LD_VAR 0 16
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_INT 6
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 8
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 72
28359: ST_TO_ADDR
28360: GO 28363
28362: POP
// if i = 1 then
28363: LD_VAR 0 8
28367: PUSH
28368: LD_INT 1
28370: EQUAL
28371: IFFALSE 28482
// begin tmp := [ ] ;
28373: LD_ADDR_VAR 0 19
28377: PUSH
28378: EMPTY
28379: ST_TO_ADDR
// for j in f do
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_VAR 0 12
28389: PUSH
28390: FOR_IN
28391: IFFALSE 28464
// if GetBType ( j ) = b_bunker then
28393: LD_VAR 0 9
28397: PPUSH
28398: CALL_OW 266
28402: PUSH
28403: LD_INT 32
28405: EQUAL
28406: IFFALSE 28433
// tmp := Insert ( tmp , 1 , j ) else
28408: LD_ADDR_VAR 0 19
28412: PUSH
28413: LD_VAR 0 19
28417: PPUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_VAR 0 9
28425: PPUSH
28426: CALL_OW 2
28430: ST_TO_ADDR
28431: GO 28462
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28433: LD_ADDR_VAR 0 19
28437: PUSH
28438: LD_VAR 0 19
28442: PPUSH
28443: LD_VAR 0 19
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 9
28456: PPUSH
28457: CALL_OW 2
28461: ST_TO_ADDR
28462: GO 28390
28464: POP
28465: POP
// if tmp then
28466: LD_VAR 0 19
28470: IFFALSE 28482
// f := tmp ;
28472: LD_ADDR_VAR 0 12
28476: PUSH
28477: LD_VAR 0 19
28481: ST_TO_ADDR
// end ; x := personel [ i ] ;
28482: LD_ADDR_VAR 0 13
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_VAR 0 8
28496: ARRAY
28497: ST_TO_ADDR
// if x = - 1 then
28498: LD_VAR 0 13
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: EQUAL
28507: IFFALSE 28716
// begin for j in f do
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_VAR 0 12
28518: PUSH
28519: FOR_IN
28520: IFFALSE 28712
// repeat InitHc ;
28522: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28526: LD_VAR 0 9
28530: PPUSH
28531: CALL_OW 266
28535: PUSH
28536: LD_INT 5
28538: EQUAL
28539: IFFALSE 28609
// begin if UnitsInside ( j ) < 3 then
28541: LD_VAR 0 9
28545: PPUSH
28546: CALL_OW 313
28550: PUSH
28551: LD_INT 3
28553: LESS
28554: IFFALSE 28590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28556: LD_INT 0
28558: PPUSH
28559: LD_INT 5
28561: PUSH
28562: LD_INT 8
28564: PUSH
28565: LD_INT 9
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: PUSH
28573: LD_VAR 0 17
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 4
28583: PPUSH
28584: CALL_OW 380
28588: GO 28607
// PrepareHuman ( false , i , skill ) ;
28590: LD_INT 0
28592: PPUSH
28593: LD_VAR 0 8
28597: PPUSH
28598: LD_VAR 0 4
28602: PPUSH
28603: CALL_OW 380
// end else
28607: GO 28626
// PrepareHuman ( false , i , skill ) ;
28609: LD_INT 0
28611: PPUSH
28612: LD_VAR 0 8
28616: PPUSH
28617: LD_VAR 0 4
28621: PPUSH
28622: CALL_OW 380
// un := CreateHuman ;
28626: LD_ADDR_VAR 0 14
28630: PUSH
28631: CALL_OW 44
28635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: LD_VAR 0 7
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: LD_VAR 0 14
28653: PPUSH
28654: CALL_OW 2
28658: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28659: LD_VAR 0 14
28663: PPUSH
28664: LD_VAR 0 9
28668: PPUSH
28669: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28673: LD_VAR 0 9
28677: PPUSH
28678: CALL_OW 313
28682: PUSH
28683: LD_INT 6
28685: EQUAL
28686: PUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: CALL_OW 266
28696: PUSH
28697: LD_INT 32
28699: PUSH
28700: LD_INT 31
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: IN
28707: OR
28708: IFFALSE 28522
28710: GO 28519
28712: POP
28713: POP
// end else
28714: GO 29096
// for j = 1 to x do
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_VAR 0 13
28730: PUSH
28731: FOR_TO
28732: IFFALSE 29094
// begin InitHc ;
28734: CALL_OW 19
// if not f then
28738: LD_VAR 0 12
28742: NOT
28743: IFFALSE 28832
// begin PrepareHuman ( false , i , skill ) ;
28745: LD_INT 0
28747: PPUSH
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 4
28757: PPUSH
28758: CALL_OW 380
// un := CreateHuman ;
28762: LD_ADDR_VAR 0 14
28766: PUSH
28767: CALL_OW 44
28771: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 14
28789: PPUSH
28790: CALL_OW 2
28794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28795: LD_VAR 0 14
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 250
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 251
28819: PPUSH
28820: LD_INT 10
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 50
// continue ;
28830: GO 28731
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 313
28845: PUSH
28846: LD_VAR 0 12
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 32
28862: PUSH
28863: LD_INT 31
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: IN
28870: AND
28871: PUSH
28872: LD_VAR 0 12
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 313
28885: PUSH
28886: LD_INT 6
28888: EQUAL
28889: OR
28890: IFFALSE 28910
// f := Delete ( f , 1 ) ;
28892: LD_ADDR_VAR 0 12
28896: PUSH
28897: LD_VAR 0 12
28901: PPUSH
28902: LD_INT 1
28904: PPUSH
28905: CALL_OW 3
28909: ST_TO_ADDR
// if not f then
28910: LD_VAR 0 12
28914: NOT
28915: IFFALSE 28933
// begin x := x + 2 ;
28917: LD_ADDR_VAR 0 13
28921: PUSH
28922: LD_VAR 0 13
28926: PUSH
28927: LD_INT 2
28929: PLUS
28930: ST_TO_ADDR
// continue ;
28931: GO 28731
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28933: LD_VAR 0 12
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 5
28949: EQUAL
28950: IFFALSE 29024
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28952: LD_VAR 0 12
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 313
28965: PUSH
28966: LD_INT 3
28968: LESS
28969: IFFALSE 29005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28971: LD_INT 0
28973: PPUSH
28974: LD_INT 5
28976: PUSH
28977: LD_INT 8
28979: PUSH
28980: LD_INT 9
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: LD_VAR 0 17
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 380
29003: GO 29022
// PrepareHuman ( false , i , skill ) ;
29005: LD_INT 0
29007: PPUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: LD_VAR 0 4
29017: PPUSH
29018: CALL_OW 380
// end else
29022: GO 29041
// PrepareHuman ( false , i , skill ) ;
29024: LD_INT 0
29026: PPUSH
29027: LD_VAR 0 8
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 380
// un := CreateHuman ;
29041: LD_ADDR_VAR 0 14
29045: PUSH
29046: CALL_OW 44
29050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: LD_VAR 0 7
29060: PPUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: CALL_OW 2
29073: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29074: LD_VAR 0 14
29078: PPUSH
29079: LD_VAR 0 12
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: CALL_OW 52
// end ;
29092: GO 28731
29094: POP
29095: POP
// end ;
29096: GO 28033
29098: POP
29099: POP
// result := result ^ buildings ;
29100: LD_ADDR_VAR 0 7
29104: PUSH
29105: LD_VAR 0 7
29109: PUSH
29110: LD_VAR 0 18
29114: ADD
29115: ST_TO_ADDR
// end else
29116: GO 29259
// begin for i = 1 to personel do
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: DOUBLE
29124: LD_INT 1
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 6
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29257
// begin if i > 4 then
29136: LD_VAR 0 8
29140: PUSH
29141: LD_INT 4
29143: GREATER
29144: IFFALSE 29148
// break ;
29146: GO 29257
// x := personel [ i ] ;
29148: LD_ADDR_VAR 0 13
29152: PUSH
29153: LD_VAR 0 6
29157: PUSH
29158: LD_VAR 0 8
29162: ARRAY
29163: ST_TO_ADDR
// if x = - 1 then
29164: LD_VAR 0 13
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: EQUAL
29173: IFFALSE 29177
// continue ;
29175: GO 29133
// PrepareHuman ( false , i , skill ) ;
29177: LD_INT 0
29179: PPUSH
29180: LD_VAR 0 8
29184: PPUSH
29185: LD_VAR 0 4
29189: PPUSH
29190: CALL_OW 380
// un := CreateHuman ;
29194: LD_ADDR_VAR 0 14
29198: PUSH
29199: CALL_OW 44
29203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29204: LD_VAR 0 14
29208: PPUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 250
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 251
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: LD_INT 0
29234: PPUSH
29235: CALL_OW 50
// result := result ^ un ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_VAR 0 7
29248: PUSH
29249: LD_VAR 0 14
29253: ADD
29254: ST_TO_ADDR
// end ;
29255: GO 29133
29257: POP
29258: POP
// end ; end ;
29259: LD_VAR 0 7
29263: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
// result := false ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29290: LD_VAR 0 1
29294: NOT
29295: PUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 266
29305: PUSH
29306: LD_INT 32
29308: PUSH
29309: LD_INT 33
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: IN
29316: NOT
29317: OR
29318: IFFALSE 29322
// exit ;
29320: GO 30461
// nat := GetNation ( tower ) ;
29322: LD_ADDR_VAR 0 12
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 248
29336: ST_TO_ADDR
// side := GetSide ( tower ) ;
29337: LD_ADDR_VAR 0 16
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 255
29351: ST_TO_ADDR
// x := GetX ( tower ) ;
29352: LD_ADDR_VAR 0 10
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 250
29366: ST_TO_ADDR
// y := GetY ( tower ) ;
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 251
29381: ST_TO_ADDR
// if not x or not y then
29382: LD_VAR 0 10
29386: NOT
29387: PUSH
29388: LD_VAR 0 11
29392: NOT
29393: OR
29394: IFFALSE 29398
// exit ;
29396: GO 30461
// weapon := 0 ;
29398: LD_ADDR_VAR 0 18
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// fac_list := [ ] ;
29406: LD_ADDR_VAR 0 17
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29413: LD_ADDR_VAR 0 6
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 274
29427: PPUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: LD_INT 0
29435: PPUSH
29436: CALL 27001 0 3
29440: PPUSH
29441: LD_INT 30
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 72
29455: ST_TO_ADDR
// if not factories then
29456: LD_VAR 0 6
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 30461
// for i in factories do
29465: LD_ADDR_VAR 0 8
29469: PUSH
29470: LD_VAR 0 6
29474: PUSH
29475: FOR_IN
29476: IFFALSE 29501
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29478: LD_ADDR_VAR 0 17
29482: PUSH
29483: LD_VAR 0 17
29487: PUSH
29488: LD_VAR 0 8
29492: PPUSH
29493: CALL_OW 478
29497: UNION
29498: ST_TO_ADDR
29499: GO 29475
29501: POP
29502: POP
// if not fac_list then
29503: LD_VAR 0 17
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 30461
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29512: LD_ADDR_VAR 0 5
29516: PUSH
29517: LD_INT 4
29519: PUSH
29520: LD_INT 5
29522: PUSH
29523: LD_INT 9
29525: PUSH
29526: LD_INT 10
29528: PUSH
29529: LD_INT 6
29531: PUSH
29532: LD_INT 7
29534: PUSH
29535: LD_INT 11
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 27
29549: PUSH
29550: LD_INT 28
29552: PUSH
29553: LD_INT 26
29555: PUSH
29556: LD_INT 30
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 43
29567: PUSH
29568: LD_INT 44
29570: PUSH
29571: LD_INT 46
29573: PUSH
29574: LD_INT 45
29576: PUSH
29577: LD_INT 47
29579: PUSH
29580: LD_INT 49
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: PUSH
29596: LD_VAR 0 12
29600: ARRAY
29601: ST_TO_ADDR
// for i in list do
29602: LD_ADDR_VAR 0 8
29606: PUSH
29607: LD_VAR 0 5
29611: PUSH
29612: FOR_IN
29613: IFFALSE 29646
// if not i in fac_list then
29615: LD_VAR 0 8
29619: PUSH
29620: LD_VAR 0 17
29624: IN
29625: NOT
29626: IFFALSE 29644
// list := list diff i ;
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: LD_VAR 0 5
29637: PUSH
29638: LD_VAR 0 8
29642: DIFF
29643: ST_TO_ADDR
29644: GO 29612
29646: POP
29647: POP
// if not list then
29648: LD_VAR 0 5
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 30461
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29657: LD_VAR 0 12
29661: PUSH
29662: LD_INT 3
29664: EQUAL
29665: PUSH
29666: LD_INT 49
29668: PUSH
29669: LD_VAR 0 5
29673: IN
29674: AND
29675: PUSH
29676: LD_INT 31
29678: PPUSH
29679: LD_VAR 0 16
29683: PPUSH
29684: CALL_OW 321
29688: PUSH
29689: LD_INT 2
29691: EQUAL
29692: AND
29693: IFFALSE 29753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29695: LD_INT 22
29697: PUSH
29698: LD_VAR 0 16
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 35
29709: PUSH
29710: LD_INT 49
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 91
29719: PUSH
29720: LD_VAR 0 1
29724: PUSH
29725: LD_INT 10
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: NOT
29743: IFFALSE 29753
// weapon := ru_time_lapser ;
29745: LD_ADDR_VAR 0 18
29749: PUSH
29750: LD_INT 49
29752: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29753: LD_VAR 0 12
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: IN
29768: PUSH
29769: LD_INT 11
29771: PUSH
29772: LD_VAR 0 5
29776: IN
29777: PUSH
29778: LD_INT 30
29780: PUSH
29781: LD_VAR 0 5
29785: IN
29786: OR
29787: AND
29788: PUSH
29789: LD_INT 6
29791: PPUSH
29792: LD_VAR 0 16
29796: PPUSH
29797: CALL_OW 321
29801: PUSH
29802: LD_INT 2
29804: EQUAL
29805: AND
29806: IFFALSE 29971
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29808: LD_INT 22
29810: PUSH
29811: LD_VAR 0 16
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 35
29825: PUSH
29826: LD_INT 11
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 35
29835: PUSH
29836: LD_INT 30
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 91
29850: PUSH
29851: LD_VAR 0 1
29855: PUSH
29856: LD_INT 18
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 69
29873: NOT
29874: PUSH
29875: LD_INT 22
29877: PUSH
29878: LD_VAR 0 16
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 30
29892: PUSH
29893: LD_INT 32
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 30
29902: PUSH
29903: LD_INT 33
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 91
29917: PUSH
29918: LD_VAR 0 1
29922: PUSH
29923: LD_INT 12
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: PUSH
29936: EMPTY
29937: LIST
29938: PPUSH
29939: CALL_OW 69
29943: PUSH
29944: LD_INT 2
29946: GREATER
29947: AND
29948: IFFALSE 29971
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29950: LD_ADDR_VAR 0 18
29954: PUSH
29955: LD_INT 11
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_VAR 0 12
29969: ARRAY
29970: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29971: LD_VAR 0 18
29975: NOT
29976: PUSH
29977: LD_INT 40
29979: PPUSH
29980: LD_VAR 0 16
29984: PPUSH
29985: CALL_OW 321
29989: PUSH
29990: LD_INT 2
29992: EQUAL
29993: AND
29994: PUSH
29995: LD_INT 7
29997: PUSH
29998: LD_VAR 0 5
30002: IN
30003: PUSH
30004: LD_INT 28
30006: PUSH
30007: LD_VAR 0 5
30011: IN
30012: OR
30013: PUSH
30014: LD_INT 45
30016: PUSH
30017: LD_VAR 0 5
30021: IN
30022: OR
30023: AND
30024: IFFALSE 30278
// begin hex := GetHexInfo ( x , y ) ;
30026: LD_ADDR_VAR 0 4
30030: PUSH
30031: LD_VAR 0 10
30035: PPUSH
30036: LD_VAR 0 11
30040: PPUSH
30041: CALL_OW 546
30045: ST_TO_ADDR
// if hex [ 1 ] then
30046: LD_VAR 0 4
30050: PUSH
30051: LD_INT 1
30053: ARRAY
30054: IFFALSE 30058
// exit ;
30056: GO 30461
// height := hex [ 2 ] ;
30058: LD_ADDR_VAR 0 15
30062: PUSH
30063: LD_VAR 0 4
30067: PUSH
30068: LD_INT 2
30070: ARRAY
30071: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30072: LD_ADDR_VAR 0 14
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
// for i in tmp do
30095: LD_ADDR_VAR 0 8
30099: PUSH
30100: LD_VAR 0 14
30104: PUSH
30105: FOR_IN
30106: IFFALSE 30276
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30108: LD_ADDR_VAR 0 9
30112: PUSH
30113: LD_VAR 0 10
30117: PPUSH
30118: LD_VAR 0 8
30122: PPUSH
30123: LD_INT 5
30125: PPUSH
30126: CALL_OW 272
30130: PUSH
30131: LD_VAR 0 11
30135: PPUSH
30136: LD_VAR 0 8
30140: PPUSH
30141: LD_INT 5
30143: PPUSH
30144: CALL_OW 273
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30153: LD_VAR 0 9
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: PPUSH
30162: LD_VAR 0 9
30166: PUSH
30167: LD_INT 2
30169: ARRAY
30170: PPUSH
30171: CALL_OW 488
30175: IFFALSE 30274
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30177: LD_ADDR_VAR 0 4
30181: PUSH
30182: LD_VAR 0 9
30186: PUSH
30187: LD_INT 1
30189: ARRAY
30190: PPUSH
30191: LD_VAR 0 9
30195: PUSH
30196: LD_INT 2
30198: ARRAY
30199: PPUSH
30200: CALL_OW 546
30204: ST_TO_ADDR
// if hex [ 1 ] then
30205: LD_VAR 0 4
30209: PUSH
30210: LD_INT 1
30212: ARRAY
30213: IFFALSE 30217
// continue ;
30215: GO 30105
// h := hex [ 2 ] ;
30217: LD_ADDR_VAR 0 13
30221: PUSH
30222: LD_VAR 0 4
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: ST_TO_ADDR
// if h + 7 < height then
30231: LD_VAR 0 13
30235: PUSH
30236: LD_INT 7
30238: PLUS
30239: PUSH
30240: LD_VAR 0 15
30244: LESS
30245: IFFALSE 30274
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30247: LD_ADDR_VAR 0 18
30251: PUSH
30252: LD_INT 7
30254: PUSH
30255: LD_INT 28
30257: PUSH
30258: LD_INT 45
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: LD_VAR 0 12
30270: ARRAY
30271: ST_TO_ADDR
// break ;
30272: GO 30276
// end ; end ; end ;
30274: GO 30105
30276: POP
30277: POP
// end ; if not weapon then
30278: LD_VAR 0 18
30282: NOT
30283: IFFALSE 30343
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30285: LD_ADDR_VAR 0 5
30289: PUSH
30290: LD_VAR 0 5
30294: PUSH
30295: LD_INT 11
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 49
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: DIFF
30309: ST_TO_ADDR
// if not list then
30310: LD_VAR 0 5
30314: NOT
30315: IFFALSE 30319
// exit ;
30317: GO 30461
// weapon := list [ rand ( 1 , list ) ] ;
30319: LD_ADDR_VAR 0 18
30323: PUSH
30324: LD_VAR 0 5
30328: PUSH
30329: LD_INT 1
30331: PPUSH
30332: LD_VAR 0 5
30336: PPUSH
30337: CALL_OW 12
30341: ARRAY
30342: ST_TO_ADDR
// end ; if weapon then
30343: LD_VAR 0 18
30347: IFFALSE 30461
// begin tmp := CostOfWeapon ( weapon ) ;
30349: LD_ADDR_VAR 0 14
30353: PUSH
30354: LD_VAR 0 18
30358: PPUSH
30359: CALL_OW 451
30363: ST_TO_ADDR
// j := GetBase ( tower ) ;
30364: LD_ADDR_VAR 0 9
30368: PUSH
30369: LD_VAR 0 1
30373: PPUSH
30374: CALL_OW 274
30378: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30379: LD_VAR 0 9
30383: PPUSH
30384: LD_INT 1
30386: PPUSH
30387: CALL_OW 275
30391: PUSH
30392: LD_VAR 0 14
30396: PUSH
30397: LD_INT 1
30399: ARRAY
30400: GREATEREQUAL
30401: PUSH
30402: LD_VAR 0 9
30406: PPUSH
30407: LD_INT 2
30409: PPUSH
30410: CALL_OW 275
30414: PUSH
30415: LD_VAR 0 14
30419: PUSH
30420: LD_INT 2
30422: ARRAY
30423: GREATEREQUAL
30424: AND
30425: PUSH
30426: LD_VAR 0 9
30430: PPUSH
30431: LD_INT 3
30433: PPUSH
30434: CALL_OW 275
30438: PUSH
30439: LD_VAR 0 14
30443: PUSH
30444: LD_INT 3
30446: ARRAY
30447: GREATEREQUAL
30448: AND
30449: IFFALSE 30461
// result := weapon ;
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_VAR 0 18
30460: ST_TO_ADDR
// end ; end ;
30461: LD_VAR 0 3
30465: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30466: LD_INT 0
30468: PPUSH
30469: PPUSH
// result := true ;
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_INT 1
30477: ST_TO_ADDR
// if array1 = array2 then
30478: LD_VAR 0 1
30482: PUSH
30483: LD_VAR 0 2
30487: EQUAL
30488: IFFALSE 30548
// begin for i = 1 to array1 do
30490: LD_ADDR_VAR 0 4
30494: PUSH
30495: DOUBLE
30496: LD_INT 1
30498: DEC
30499: ST_TO_ADDR
30500: LD_VAR 0 1
30504: PUSH
30505: FOR_TO
30506: IFFALSE 30544
// if array1 [ i ] <> array2 [ i ] then
30508: LD_VAR 0 1
30512: PUSH
30513: LD_VAR 0 4
30517: ARRAY
30518: PUSH
30519: LD_VAR 0 2
30523: PUSH
30524: LD_VAR 0 4
30528: ARRAY
30529: NONEQUAL
30530: IFFALSE 30542
// begin result := false ;
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_INT 0
30539: ST_TO_ADDR
// break ;
30540: GO 30544
// end ;
30542: GO 30505
30544: POP
30545: POP
// end else
30546: GO 30556
// result := false ;
30548: LD_ADDR_VAR 0 3
30552: PUSH
30553: LD_INT 0
30555: ST_TO_ADDR
// end ;
30556: LD_VAR 0 3
30560: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30561: LD_INT 0
30563: PPUSH
30564: PPUSH
// if not array1 or not array2 then
30565: LD_VAR 0 1
30569: NOT
30570: PUSH
30571: LD_VAR 0 2
30575: NOT
30576: OR
30577: IFFALSE 30581
// exit ;
30579: GO 30645
// result := true ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_INT 1
30588: ST_TO_ADDR
// for i = 1 to array1 do
30589: LD_ADDR_VAR 0 4
30593: PUSH
30594: DOUBLE
30595: LD_INT 1
30597: DEC
30598: ST_TO_ADDR
30599: LD_VAR 0 1
30603: PUSH
30604: FOR_TO
30605: IFFALSE 30643
// if array1 [ i ] <> array2 [ i ] then
30607: LD_VAR 0 1
30611: PUSH
30612: LD_VAR 0 4
30616: ARRAY
30617: PUSH
30618: LD_VAR 0 2
30622: PUSH
30623: LD_VAR 0 4
30627: ARRAY
30628: NONEQUAL
30629: IFFALSE 30641
// begin result := false ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 0
30638: ST_TO_ADDR
// break ;
30639: GO 30643
// end ;
30641: GO 30604
30643: POP
30644: POP
// end ;
30645: LD_VAR 0 3
30649: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30650: LD_INT 0
30652: PPUSH
30653: PPUSH
30654: PPUSH
// pom := GetBase ( fac ) ;
30655: LD_ADDR_VAR 0 5
30659: PUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: CALL_OW 274
30669: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30670: LD_ADDR_VAR 0 4
30674: PUSH
30675: LD_VAR 0 2
30679: PUSH
30680: LD_INT 1
30682: ARRAY
30683: PPUSH
30684: LD_VAR 0 2
30688: PUSH
30689: LD_INT 2
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 3
30700: ARRAY
30701: PPUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 4
30709: ARRAY
30710: PPUSH
30711: CALL_OW 449
30715: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30716: LD_ADDR_VAR 0 3
30720: PUSH
30721: LD_VAR 0 5
30725: PPUSH
30726: LD_INT 1
30728: PPUSH
30729: CALL_OW 275
30733: PUSH
30734: LD_VAR 0 4
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: GREATEREQUAL
30743: PUSH
30744: LD_VAR 0 5
30748: PPUSH
30749: LD_INT 2
30751: PPUSH
30752: CALL_OW 275
30756: PUSH
30757: LD_VAR 0 4
30761: PUSH
30762: LD_INT 2
30764: ARRAY
30765: GREATEREQUAL
30766: AND
30767: PUSH
30768: LD_VAR 0 5
30772: PPUSH
30773: LD_INT 3
30775: PPUSH
30776: CALL_OW 275
30780: PUSH
30781: LD_VAR 0 4
30785: PUSH
30786: LD_INT 3
30788: ARRAY
30789: GREATEREQUAL
30790: AND
30791: ST_TO_ADDR
// end ;
30792: LD_VAR 0 3
30796: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30797: LD_INT 0
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
// pom := GetBase ( building ) ;
30803: LD_ADDR_VAR 0 3
30807: PUSH
30808: LD_VAR 0 1
30812: PPUSH
30813: CALL_OW 274
30817: ST_TO_ADDR
// if not pom then
30818: LD_VAR 0 3
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 30997
// btype := GetBType ( building ) ;
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 266
30841: ST_TO_ADDR
// if btype = b_armoury then
30842: LD_VAR 0 5
30846: PUSH
30847: LD_INT 4
30849: EQUAL
30850: IFFALSE 30860
// btype := b_barracks ;
30852: LD_ADDR_VAR 0 5
30856: PUSH
30857: LD_INT 5
30859: ST_TO_ADDR
// if btype = b_depot then
30860: LD_VAR 0 5
30864: PUSH
30865: LD_INT 0
30867: EQUAL
30868: IFFALSE 30878
// btype := b_warehouse ;
30870: LD_ADDR_VAR 0 5
30874: PUSH
30875: LD_INT 1
30877: ST_TO_ADDR
// if btype = b_workshop then
30878: LD_VAR 0 5
30882: PUSH
30883: LD_INT 2
30885: EQUAL
30886: IFFALSE 30896
// btype := b_factory ;
30888: LD_ADDR_VAR 0 5
30892: PUSH
30893: LD_INT 3
30895: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30896: LD_ADDR_VAR 0 4
30900: PUSH
30901: LD_VAR 0 5
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 248
30915: PPUSH
30916: CALL_OW 450
30920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30921: LD_ADDR_VAR 0 2
30925: PUSH
30926: LD_VAR 0 3
30930: PPUSH
30931: LD_INT 1
30933: PPUSH
30934: CALL_OW 275
30938: PUSH
30939: LD_VAR 0 4
30943: PUSH
30944: LD_INT 1
30946: ARRAY
30947: GREATEREQUAL
30948: PUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_INT 2
30956: PPUSH
30957: CALL_OW 275
30961: PUSH
30962: LD_VAR 0 4
30966: PUSH
30967: LD_INT 2
30969: ARRAY
30970: GREATEREQUAL
30971: AND
30972: PUSH
30973: LD_VAR 0 3
30977: PPUSH
30978: LD_INT 3
30980: PPUSH
30981: CALL_OW 275
30985: PUSH
30986: LD_VAR 0 4
30990: PUSH
30991: LD_INT 3
30993: ARRAY
30994: GREATEREQUAL
30995: AND
30996: ST_TO_ADDR
// end ;
30997: LD_VAR 0 2
31001: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31002: LD_INT 0
31004: PPUSH
31005: PPUSH
31006: PPUSH
// pom := GetBase ( building ) ;
31007: LD_ADDR_VAR 0 4
31011: PUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 274
31021: ST_TO_ADDR
// if not pom then
31022: LD_VAR 0 4
31026: NOT
31027: IFFALSE 31031
// exit ;
31029: GO 31132
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_VAR 0 2
31040: PPUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 248
31050: PPUSH
31051: CALL_OW 450
31055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31056: LD_ADDR_VAR 0 3
31060: PUSH
31061: LD_VAR 0 4
31065: PPUSH
31066: LD_INT 1
31068: PPUSH
31069: CALL_OW 275
31073: PUSH
31074: LD_VAR 0 5
31078: PUSH
31079: LD_INT 1
31081: ARRAY
31082: GREATEREQUAL
31083: PUSH
31084: LD_VAR 0 4
31088: PPUSH
31089: LD_INT 2
31091: PPUSH
31092: CALL_OW 275
31096: PUSH
31097: LD_VAR 0 5
31101: PUSH
31102: LD_INT 2
31104: ARRAY
31105: GREATEREQUAL
31106: AND
31107: PUSH
31108: LD_VAR 0 4
31112: PPUSH
31113: LD_INT 3
31115: PPUSH
31116: CALL_OW 275
31120: PUSH
31121: LD_VAR 0 5
31125: PUSH
31126: LD_INT 3
31128: ARRAY
31129: GREATEREQUAL
31130: AND
31131: ST_TO_ADDR
// end ;
31132: LD_VAR 0 3
31136: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
31147: PPUSH
31148: PPUSH
31149: PPUSH
// result := false ;
31150: LD_ADDR_VAR 0 8
31154: PUSH
31155: LD_INT 0
31157: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31158: LD_VAR 0 5
31162: NOT
31163: PUSH
31164: LD_VAR 0 1
31168: NOT
31169: OR
31170: PUSH
31171: LD_VAR 0 2
31175: NOT
31176: OR
31177: PUSH
31178: LD_VAR 0 3
31182: NOT
31183: OR
31184: IFFALSE 31188
// exit ;
31186: GO 32002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31188: LD_ADDR_VAR 0 14
31192: PUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: LD_VAR 0 2
31202: PPUSH
31203: LD_VAR 0 3
31207: PPUSH
31208: LD_VAR 0 4
31212: PPUSH
31213: LD_VAR 0 5
31217: PUSH
31218: LD_INT 1
31220: ARRAY
31221: PPUSH
31222: CALL_OW 248
31226: PPUSH
31227: LD_INT 0
31229: PPUSH
31230: CALL 32839 0 6
31234: ST_TO_ADDR
// if not hexes then
31235: LD_VAR 0 14
31239: NOT
31240: IFFALSE 31244
// exit ;
31242: GO 32002
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31244: LD_ADDR_VAR 0 17
31248: PUSH
31249: LD_VAR 0 5
31253: PPUSH
31254: LD_INT 22
31256: PUSH
31257: LD_VAR 0 13
31261: PPUSH
31262: CALL_OW 255
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 72
31307: ST_TO_ADDR
// for i = 1 to hexes do
31308: LD_ADDR_VAR 0 9
31312: PUSH
31313: DOUBLE
31314: LD_INT 1
31316: DEC
31317: ST_TO_ADDR
31318: LD_VAR 0 14
31322: PUSH
31323: FOR_TO
31324: IFFALSE 32000
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31326: LD_ADDR_VAR 0 13
31330: PUSH
31331: LD_VAR 0 14
31335: PUSH
31336: LD_VAR 0 9
31340: ARRAY
31341: PUSH
31342: LD_INT 1
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 14
31350: PUSH
31351: LD_VAR 0 9
31355: ARRAY
31356: PUSH
31357: LD_INT 2
31359: ARRAY
31360: PPUSH
31361: CALL_OW 428
31365: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31366: LD_VAR 0 14
31370: PUSH
31371: LD_VAR 0 9
31375: ARRAY
31376: PUSH
31377: LD_INT 1
31379: ARRAY
31380: PPUSH
31381: LD_VAR 0 14
31385: PUSH
31386: LD_VAR 0 9
31390: ARRAY
31391: PUSH
31392: LD_INT 2
31394: ARRAY
31395: PPUSH
31396: CALL_OW 351
31400: PUSH
31401: LD_VAR 0 14
31405: PUSH
31406: LD_VAR 0 9
31410: ARRAY
31411: PUSH
31412: LD_INT 1
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 14
31420: PUSH
31421: LD_VAR 0 9
31425: ARRAY
31426: PUSH
31427: LD_INT 2
31429: ARRAY
31430: PPUSH
31431: CALL_OW 488
31435: NOT
31436: OR
31437: PUSH
31438: LD_VAR 0 13
31442: PPUSH
31443: CALL_OW 247
31447: PUSH
31448: LD_INT 3
31450: EQUAL
31451: OR
31452: IFFALSE 31458
// exit ;
31454: POP
31455: POP
31456: GO 32002
// if not tmp then
31458: LD_VAR 0 13
31462: NOT
31463: IFFALSE 31467
// continue ;
31465: GO 31323
// result := true ;
31467: LD_ADDR_VAR 0 8
31471: PUSH
31472: LD_INT 1
31474: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31475: LD_VAR 0 6
31479: PUSH
31480: LD_VAR 0 13
31484: PPUSH
31485: CALL_OW 247
31489: PUSH
31490: LD_INT 2
31492: EQUAL
31493: AND
31494: PUSH
31495: LD_VAR 0 13
31499: PPUSH
31500: CALL_OW 263
31504: PUSH
31505: LD_INT 1
31507: EQUAL
31508: AND
31509: IFFALSE 31673
// begin if IsDrivenBy ( tmp ) then
31511: LD_VAR 0 13
31515: PPUSH
31516: CALL_OW 311
31520: IFFALSE 31524
// continue ;
31522: GO 31323
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31524: LD_VAR 0 6
31528: PPUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 60
31534: PUSH
31535: EMPTY
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 55
31547: PUSH
31548: EMPTY
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PPUSH
31559: CALL_OW 72
31563: IFFALSE 31671
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31565: LD_ADDR_VAR 0 18
31569: PUSH
31570: LD_VAR 0 6
31574: PPUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 60
31580: PUSH
31581: EMPTY
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: LD_INT 55
31593: PUSH
31594: EMPTY
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PPUSH
31605: CALL_OW 72
31609: PUSH
31610: LD_INT 1
31612: ARRAY
31613: ST_TO_ADDR
// if IsInUnit ( driver ) then
31614: LD_VAR 0 18
31618: PPUSH
31619: CALL_OW 310
31623: IFFALSE 31634
// ComExit ( driver ) ;
31625: LD_VAR 0 18
31629: PPUSH
31630: CALL 56023 0 1
// AddComEnterUnit ( driver , tmp ) ;
31634: LD_VAR 0 18
31638: PPUSH
31639: LD_VAR 0 13
31643: PPUSH
31644: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31648: LD_VAR 0 18
31652: PPUSH
31653: LD_VAR 0 7
31657: PPUSH
31658: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31662: LD_VAR 0 18
31666: PPUSH
31667: CALL_OW 181
// end ; continue ;
31671: GO 31323
// end ; if not cleaners or not tmp in cleaners then
31673: LD_VAR 0 6
31677: NOT
31678: PUSH
31679: LD_VAR 0 13
31683: PUSH
31684: LD_VAR 0 6
31688: IN
31689: NOT
31690: OR
31691: IFFALSE 31998
// begin if dep then
31693: LD_VAR 0 17
31697: IFFALSE 31833
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31699: LD_ADDR_VAR 0 16
31703: PUSH
31704: LD_VAR 0 17
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: PPUSH
31713: CALL_OW 250
31717: PPUSH
31718: LD_VAR 0 17
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: PPUSH
31727: CALL_OW 254
31731: PPUSH
31732: LD_INT 5
31734: PPUSH
31735: CALL_OW 272
31739: PUSH
31740: LD_VAR 0 17
31744: PUSH
31745: LD_INT 1
31747: ARRAY
31748: PPUSH
31749: CALL_OW 251
31753: PPUSH
31754: LD_VAR 0 17
31758: PUSH
31759: LD_INT 1
31761: ARRAY
31762: PPUSH
31763: CALL_OW 254
31767: PPUSH
31768: LD_INT 5
31770: PPUSH
31771: CALL_OW 273
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31780: LD_VAR 0 16
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: PPUSH
31789: LD_VAR 0 16
31793: PUSH
31794: LD_INT 2
31796: ARRAY
31797: PPUSH
31798: CALL_OW 488
31802: IFFALSE 31833
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31804: LD_VAR 0 13
31808: PPUSH
31809: LD_VAR 0 16
31813: PUSH
31814: LD_INT 1
31816: ARRAY
31817: PPUSH
31818: LD_VAR 0 16
31822: PUSH
31823: LD_INT 2
31825: ARRAY
31826: PPUSH
31827: CALL_OW 111
// continue ;
31831: GO 31323
// end ; end ; r := GetDir ( tmp ) ;
31833: LD_ADDR_VAR 0 15
31837: PUSH
31838: LD_VAR 0 13
31842: PPUSH
31843: CALL_OW 254
31847: ST_TO_ADDR
// if r = 5 then
31848: LD_VAR 0 15
31852: PUSH
31853: LD_INT 5
31855: EQUAL
31856: IFFALSE 31866
// r := 0 ;
31858: LD_ADDR_VAR 0 15
31862: PUSH
31863: LD_INT 0
31865: ST_TO_ADDR
// for j = r to 5 do
31866: LD_ADDR_VAR 0 10
31870: PUSH
31871: DOUBLE
31872: LD_VAR 0 15
31876: DEC
31877: ST_TO_ADDR
31878: LD_INT 5
31880: PUSH
31881: FOR_TO
31882: IFFALSE 31996
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31884: LD_ADDR_VAR 0 11
31888: PUSH
31889: LD_VAR 0 13
31893: PPUSH
31894: CALL_OW 250
31898: PPUSH
31899: LD_VAR 0 10
31903: PPUSH
31904: LD_INT 2
31906: PPUSH
31907: CALL_OW 272
31911: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31912: LD_ADDR_VAR 0 12
31916: PUSH
31917: LD_VAR 0 13
31921: PPUSH
31922: CALL_OW 251
31926: PPUSH
31927: LD_VAR 0 10
31931: PPUSH
31932: LD_INT 2
31934: PPUSH
31935: CALL_OW 273
31939: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31940: LD_VAR 0 11
31944: PPUSH
31945: LD_VAR 0 12
31949: PPUSH
31950: CALL_OW 488
31954: PUSH
31955: LD_VAR 0 11
31959: PPUSH
31960: LD_VAR 0 12
31964: PPUSH
31965: CALL_OW 428
31969: NOT
31970: AND
31971: IFFALSE 31994
// begin ComMoveXY ( tmp , _x , _y ) ;
31973: LD_VAR 0 13
31977: PPUSH
31978: LD_VAR 0 11
31982: PPUSH
31983: LD_VAR 0 12
31987: PPUSH
31988: CALL_OW 111
// break ;
31992: GO 31996
// end ; end ;
31994: GO 31881
31996: POP
31997: POP
// end ; end ;
31998: GO 31323
32000: POP
32001: POP
// end ;
32002: LD_VAR 0 8
32006: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32007: LD_INT 0
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
// result := false ;
32019: LD_ADDR_VAR 0 6
32023: PUSH
32024: LD_INT 0
32026: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32027: LD_VAR 0 1
32031: NOT
32032: PUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 266
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: IN
32053: NOT
32054: OR
32055: PUSH
32056: LD_VAR 0 2
32060: NOT
32061: OR
32062: PUSH
32063: LD_VAR 0 5
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: LD_INT 5
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: IN
32094: NOT
32095: OR
32096: PUSH
32097: LD_VAR 0 3
32101: PPUSH
32102: LD_VAR 0 4
32106: PPUSH
32107: CALL_OW 488
32111: NOT
32112: OR
32113: IFFALSE 32117
// exit ;
32115: GO 32834
// pom := GetBase ( depot ) ;
32117: LD_ADDR_VAR 0 10
32121: PUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 274
32131: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32132: LD_ADDR_VAR 0 11
32136: PUSH
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 1
32146: PPUSH
32147: CALL_OW 248
32151: PPUSH
32152: CALL_OW 450
32156: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32157: LD_VAR 0 10
32161: PPUSH
32162: LD_INT 1
32164: PPUSH
32165: CALL_OW 275
32169: PUSH
32170: LD_VAR 0 11
32174: PUSH
32175: LD_INT 1
32177: ARRAY
32178: GREATEREQUAL
32179: PUSH
32180: LD_VAR 0 10
32184: PPUSH
32185: LD_INT 2
32187: PPUSH
32188: CALL_OW 275
32192: PUSH
32193: LD_VAR 0 11
32197: PUSH
32198: LD_INT 2
32200: ARRAY
32201: GREATEREQUAL
32202: AND
32203: PUSH
32204: LD_VAR 0 10
32208: PPUSH
32209: LD_INT 3
32211: PPUSH
32212: CALL_OW 275
32216: PUSH
32217: LD_VAR 0 11
32221: PUSH
32222: LD_INT 3
32224: ARRAY
32225: GREATEREQUAL
32226: AND
32227: NOT
32228: IFFALSE 32232
// exit ;
32230: GO 32834
// if GetBType ( depot ) = b_depot then
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 266
32241: PUSH
32242: LD_INT 0
32244: EQUAL
32245: IFFALSE 32257
// dist := 28 else
32247: LD_ADDR_VAR 0 14
32251: PUSH
32252: LD_INT 28
32254: ST_TO_ADDR
32255: GO 32265
// dist := 36 ;
32257: LD_ADDR_VAR 0 14
32261: PUSH
32262: LD_INT 36
32264: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32265: LD_VAR 0 1
32269: PPUSH
32270: LD_VAR 0 3
32274: PPUSH
32275: LD_VAR 0 4
32279: PPUSH
32280: CALL_OW 297
32284: PUSH
32285: LD_VAR 0 14
32289: GREATER
32290: IFFALSE 32294
// exit ;
32292: GO 32834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32294: LD_ADDR_VAR 0 12
32298: PUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_VAR 0 4
32313: PPUSH
32314: LD_VAR 0 5
32318: PPUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 248
32328: PPUSH
32329: LD_INT 0
32331: PPUSH
32332: CALL 32839 0 6
32336: ST_TO_ADDR
// if not hexes then
32337: LD_VAR 0 12
32341: NOT
32342: IFFALSE 32346
// exit ;
32344: GO 32834
// hex := GetHexInfo ( x , y ) ;
32346: LD_ADDR_VAR 0 15
32350: PUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: LD_VAR 0 4
32360: PPUSH
32361: CALL_OW 546
32365: ST_TO_ADDR
// if hex [ 1 ] then
32366: LD_VAR 0 15
32370: PUSH
32371: LD_INT 1
32373: ARRAY
32374: IFFALSE 32378
// exit ;
32376: GO 32834
// height := hex [ 2 ] ;
32378: LD_ADDR_VAR 0 13
32382: PUSH
32383: LD_VAR 0 15
32387: PUSH
32388: LD_INT 2
32390: ARRAY
32391: ST_TO_ADDR
// for i = 1 to hexes do
32392: LD_ADDR_VAR 0 7
32396: PUSH
32397: DOUBLE
32398: LD_INT 1
32400: DEC
32401: ST_TO_ADDR
32402: LD_VAR 0 12
32406: PUSH
32407: FOR_TO
32408: IFFALSE 32738
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32410: LD_VAR 0 12
32414: PUSH
32415: LD_VAR 0 7
32419: ARRAY
32420: PUSH
32421: LD_INT 1
32423: ARRAY
32424: PPUSH
32425: LD_VAR 0 12
32429: PUSH
32430: LD_VAR 0 7
32434: ARRAY
32435: PUSH
32436: LD_INT 2
32438: ARRAY
32439: PPUSH
32440: CALL_OW 488
32444: NOT
32445: PUSH
32446: LD_VAR 0 12
32450: PUSH
32451: LD_VAR 0 7
32455: ARRAY
32456: PUSH
32457: LD_INT 1
32459: ARRAY
32460: PPUSH
32461: LD_VAR 0 12
32465: PUSH
32466: LD_VAR 0 7
32470: ARRAY
32471: PUSH
32472: LD_INT 2
32474: ARRAY
32475: PPUSH
32476: CALL_OW 428
32480: PUSH
32481: LD_INT 0
32483: GREATER
32484: OR
32485: PUSH
32486: LD_VAR 0 12
32490: PUSH
32491: LD_VAR 0 7
32495: ARRAY
32496: PUSH
32497: LD_INT 1
32499: ARRAY
32500: PPUSH
32501: LD_VAR 0 12
32505: PUSH
32506: LD_VAR 0 7
32510: ARRAY
32511: PUSH
32512: LD_INT 2
32514: ARRAY
32515: PPUSH
32516: CALL_OW 351
32520: OR
32521: IFFALSE 32527
// exit ;
32523: POP
32524: POP
32525: GO 32834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32527: LD_ADDR_VAR 0 8
32531: PUSH
32532: LD_VAR 0 12
32536: PUSH
32537: LD_VAR 0 7
32541: ARRAY
32542: PUSH
32543: LD_INT 1
32545: ARRAY
32546: PPUSH
32547: LD_VAR 0 12
32551: PUSH
32552: LD_VAR 0 7
32556: ARRAY
32557: PUSH
32558: LD_INT 2
32560: ARRAY
32561: PPUSH
32562: CALL_OW 546
32566: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32567: LD_VAR 0 8
32571: PUSH
32572: LD_INT 1
32574: ARRAY
32575: PUSH
32576: LD_VAR 0 8
32580: PUSH
32581: LD_INT 2
32583: ARRAY
32584: PUSH
32585: LD_VAR 0 13
32589: PUSH
32590: LD_INT 2
32592: PLUS
32593: GREATER
32594: OR
32595: PUSH
32596: LD_VAR 0 8
32600: PUSH
32601: LD_INT 2
32603: ARRAY
32604: PUSH
32605: LD_VAR 0 13
32609: PUSH
32610: LD_INT 2
32612: MINUS
32613: LESS
32614: OR
32615: PUSH
32616: LD_VAR 0 8
32620: PUSH
32621: LD_INT 3
32623: ARRAY
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 8
32630: PUSH
32631: LD_INT 9
32633: PUSH
32634: LD_INT 10
32636: PUSH
32637: LD_INT 11
32639: PUSH
32640: LD_INT 12
32642: PUSH
32643: LD_INT 13
32645: PUSH
32646: LD_INT 16
32648: PUSH
32649: LD_INT 17
32651: PUSH
32652: LD_INT 18
32654: PUSH
32655: LD_INT 19
32657: PUSH
32658: LD_INT 20
32660: PUSH
32661: LD_INT 21
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: IN
32679: NOT
32680: OR
32681: PUSH
32682: LD_VAR 0 8
32686: PUSH
32687: LD_INT 5
32689: ARRAY
32690: NOT
32691: OR
32692: PUSH
32693: LD_VAR 0 8
32697: PUSH
32698: LD_INT 6
32700: ARRAY
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 7
32710: PUSH
32711: LD_INT 9
32713: PUSH
32714: LD_INT 10
32716: PUSH
32717: LD_INT 11
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: IN
32728: NOT
32729: OR
32730: IFFALSE 32736
// exit ;
32732: POP
32733: POP
32734: GO 32834
// end ;
32736: GO 32407
32738: POP
32739: POP
// side := GetSide ( depot ) ;
32740: LD_ADDR_VAR 0 9
32744: PUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 255
32754: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32755: LD_VAR 0 9
32759: PPUSH
32760: LD_VAR 0 3
32764: PPUSH
32765: LD_VAR 0 4
32769: PPUSH
32770: LD_INT 20
32772: PPUSH
32773: CALL 25155 0 4
32777: PUSH
32778: LD_INT 4
32780: ARRAY
32781: IFFALSE 32785
// exit ;
32783: GO 32834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32785: LD_VAR 0 2
32789: PUSH
32790: LD_INT 29
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: IN
32800: PUSH
32801: LD_VAR 0 3
32805: PPUSH
32806: LD_VAR 0 4
32810: PPUSH
32811: LD_VAR 0 9
32815: PPUSH
32816: CALL_OW 440
32820: NOT
32821: AND
32822: IFFALSE 32826
// exit ;
32824: GO 32834
// result := true ;
32826: LD_ADDR_VAR 0 6
32830: PUSH
32831: LD_INT 1
32833: ST_TO_ADDR
// end ;
32834: LD_VAR 0 6
32838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32839: LD_INT 0
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
32876: PPUSH
32877: PPUSH
32878: PPUSH
32879: PPUSH
32880: PPUSH
32881: PPUSH
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
32893: PPUSH
32894: PPUSH
32895: PPUSH
32896: PPUSH
32897: PPUSH
32898: PPUSH
// result = [ ] ;
32899: LD_ADDR_VAR 0 7
32903: PUSH
32904: EMPTY
32905: ST_TO_ADDR
// temp_list = [ ] ;
32906: LD_ADDR_VAR 0 9
32910: PUSH
32911: EMPTY
32912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32913: LD_VAR 0 4
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 4
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: IN
32944: NOT
32945: PUSH
32946: LD_VAR 0 1
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: IN
32961: PUSH
32962: LD_VAR 0 5
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: IN
32981: NOT
32982: AND
32983: OR
32984: IFFALSE 32988
// exit ;
32986: GO 51379
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32988: LD_VAR 0 1
32992: PUSH
32993: LD_INT 6
32995: PUSH
32996: LD_INT 7
32998: PUSH
32999: LD_INT 8
33001: PUSH
33002: LD_INT 13
33004: PUSH
33005: LD_INT 12
33007: PUSH
33008: LD_INT 15
33010: PUSH
33011: LD_INT 11
33013: PUSH
33014: LD_INT 14
33016: PUSH
33017: LD_INT 10
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33041
// btype = b_lab ;
33033: LD_ADDR_VAR 0 1
33037: PUSH
33038: LD_INT 6
33040: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33041: LD_VAR 0 6
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: IN
33060: NOT
33061: PUSH
33062: LD_VAR 0 1
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 6
33081: PUSH
33082: LD_INT 36
33084: PUSH
33085: LD_INT 4
33087: PUSH
33088: LD_INT 5
33090: PUSH
33091: LD_INT 31
33093: PUSH
33094: LD_INT 32
33096: PUSH
33097: LD_INT 33
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: IN
33113: NOT
33114: PUSH
33115: LD_VAR 0 6
33119: PUSH
33120: LD_INT 1
33122: EQUAL
33123: AND
33124: OR
33125: PUSH
33126: LD_VAR 0 1
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: IN
33141: NOT
33142: PUSH
33143: LD_VAR 0 6
33147: PUSH
33148: LD_INT 2
33150: EQUAL
33151: AND
33152: OR
33153: IFFALSE 33163
// mode = 0 ;
33155: LD_ADDR_VAR 0 6
33159: PUSH
33160: LD_INT 0
33162: ST_TO_ADDR
// case mode of 0 :
33163: LD_VAR 0 6
33167: PUSH
33168: LD_INT 0
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 44629
33176: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33177: LD_ADDR_VAR 0 11
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 2
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 3
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33370: LD_ADDR_VAR 0 12
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33566: LD_ADDR_VAR 0 13
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 3
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: LD_INT 3
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33765: LD_ADDR_VAR 0 14
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: NEG
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33961: LD_ADDR_VAR 0 15
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34154: LD_ADDR_VAR 0 16
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34347: LD_ADDR_VAR 0 17
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34577: LD_ADDR_VAR 0 18
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34807: LD_ADDR_VAR 0 19
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35037: LD_ADDR_VAR 0 20
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: LD_INT 2
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35267: LD_ADDR_VAR 0 21
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35497: LD_ADDR_VAR 0 22
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: NEG
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35727: LD_ADDR_VAR 0 23
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 2
35914: NEG
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 3
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36007: LD_ADDR_VAR 0 24
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: NEG
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 2
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36283: LD_ADDR_VAR 0 25
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36557: LD_ADDR_VAR 0 26
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36833: LD_ADDR_VAR 0 27
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: LD_INT 2
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 3
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37113: LD_ADDR_VAR 0 28
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37395: LD_ADDR_VAR 0 29
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 3
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 3
37639: NEG
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37674: LD_ADDR_VAR 0 30
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 3
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37952: LD_ADDR_VAR 0 31
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: LD_INT 3
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38230: LD_ADDR_VAR 0 32
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38508: LD_ADDR_VAR 0 33
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 3
38752: NEG
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38787: LD_ADDR_VAR 0 34
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39067: LD_ADDR_VAR 0 35
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39179: LD_ADDR_VAR 0 36
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39291: LD_ADDR_VAR 0 37
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39403: LD_ADDR_VAR 0 38
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39515: LD_ADDR_VAR 0 39
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39627: LD_ADDR_VAR 0 40
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39739: LD_ADDR_VAR 0 41
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 3
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 3
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40089: LD_ADDR_VAR 0 42
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 3
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 3
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 3
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: NEG
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: LD_INT 3
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40439: LD_ADDR_VAR 0 43
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 3
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 3
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 3
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: NEG
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40787: LD_ADDR_VAR 0 44
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 3
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: NEG
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: NEG
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: NEG
41097: PUSH
41098: LD_INT 3
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41137: LD_ADDR_VAR 0 45
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 3
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41487: LD_ADDR_VAR 0 46
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 3
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 3
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 3
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: NEG
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41835: LD_ADDR_VAR 0 47
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41986: LD_ADDR_VAR 0 48
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42133: LD_ADDR_VAR 0 49
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42277: LD_ADDR_VAR 0 50
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42421: LD_ADDR_VAR 0 51
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42568: LD_ADDR_VAR 0 52
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42719: LD_ADDR_VAR 0 53
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42949: LD_ADDR_VAR 0 54
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43179: LD_ADDR_VAR 0 55
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43409: LD_ADDR_VAR 0 56
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43639: LD_ADDR_VAR 0 57
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43869: LD_ADDR_VAR 0 58
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44099: LD_ADDR_VAR 0 59
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44187: LD_ADDR_VAR 0 60
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44275: LD_ADDR_VAR 0 61
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44363: LD_ADDR_VAR 0 62
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44451: LD_ADDR_VAR 0 63
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44539: LD_ADDR_VAR 0 64
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// end ; 1 :
44627: GO 50524
44629: LD_INT 1
44631: DOUBLE
44632: EQUAL
44633: IFTRUE 44637
44635: GO 47260
44637: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44638: LD_ADDR_VAR 0 11
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44682: LD_ADDR_VAR 0 12
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44723: LD_ADDR_VAR 0 13
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44763: LD_ADDR_VAR 0 14
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 3
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44804: LD_ADDR_VAR 0 15
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44848: LD_ADDR_VAR 0 16
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 3
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44894: LD_ADDR_VAR 0 17
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44938: LD_ADDR_VAR 0 18
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44979: LD_ADDR_VAR 0 19
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45019: LD_ADDR_VAR 0 20
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45060: LD_ADDR_VAR 0 21
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45104: LD_ADDR_VAR 0 22
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 3
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 3
45135: NEG
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45150: LD_ADDR_VAR 0 23
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 4
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45194: LD_ADDR_VAR 0 24
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 4
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45235: LD_ADDR_VAR 0 25
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 4
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 4
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45275: LD_ADDR_VAR 0 26
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45316: LD_ADDR_VAR 0 27
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 4
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45360: LD_ADDR_VAR 0 28
45364: PUSH
45365: LD_INT 3
45367: NEG
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: NEG
45380: PUSH
45381: LD_INT 4
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 4
45391: NEG
45392: PUSH
45393: LD_INT 3
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45406: LD_ADDR_VAR 0 29
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 4
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 4
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 3
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 5
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 5
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 4
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 6
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 6
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 5
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45561: LD_ADDR_VAR 0 30
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 4
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 5
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 5
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 5
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 6
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 6
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45704: LD_ADDR_VAR 0 31
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 4
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 4
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 4
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 5
45771: PUSH
45772: LD_INT 4
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 5
45781: PUSH
45782: LD_INT 5
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 4
45791: PUSH
45792: LD_INT 5
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 6
45801: PUSH
45802: LD_INT 5
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 6
45811: PUSH
45812: LD_INT 6
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 5
45821: PUSH
45822: LD_INT 6
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45843: LD_ADDR_VAR 0 32
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 4
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 4
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 5
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 4
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 6
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 6
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 5
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45986: LD_ADDR_VAR 0 33
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 4
46038: NEG
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 4
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 4
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 5
46072: NEG
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 5
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 5
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 6
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 6
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46141: LD_ADDR_VAR 0 34
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: LD_INT 4
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: NEG
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 4
46208: NEG
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: LD_INT 5
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 5
46232: NEG
46233: PUSH
46234: LD_INT 4
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 5
46244: NEG
46245: PUSH
46246: LD_INT 5
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 5
46256: NEG
46257: PUSH
46258: LD_INT 6
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 6
46268: NEG
46269: PUSH
46270: LD_INT 5
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 6
46280: NEG
46281: PUSH
46282: LD_INT 6
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46304: LD_ADDR_VAR 0 41
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46348: LD_ADDR_VAR 0 42
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46389: LD_ADDR_VAR 0 43
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46429: LD_ADDR_VAR 0 44
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46470: LD_ADDR_VAR 0 45
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46514: LD_ADDR_VAR 0 46
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46560: LD_ADDR_VAR 0 47
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46593: LD_ADDR_VAR 0 48
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46624: LD_ADDR_VAR 0 49
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46653: LD_ADDR_VAR 0 50
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46682: LD_ADDR_VAR 0 51
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46713: LD_ADDR_VAR 0 52
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46746: LD_ADDR_VAR 0 53
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46790: LD_ADDR_VAR 0 54
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 3
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46831: LD_ADDR_VAR 0 55
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46871: LD_ADDR_VAR 0 56
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46912: LD_ADDR_VAR 0 57
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46956: LD_ADDR_VAR 0 58
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47002: LD_ADDR_VAR 0 59
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47046: LD_ADDR_VAR 0 60
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47087: LD_ADDR_VAR 0 61
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47127: LD_ADDR_VAR 0 62
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47168: LD_ADDR_VAR 0 63
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47212: LD_ADDR_VAR 0 64
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// end ; 2 :
47258: GO 50524
47260: LD_INT 2
47262: DOUBLE
47263: EQUAL
47264: IFTRUE 47268
47266: GO 50523
47268: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47269: LD_ADDR_VAR 0 29
47273: PUSH
47274: LD_INT 4
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 4
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 5
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 5
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 5
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 3
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: LD_INT 4
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 4
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 4
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 4
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 4
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 5
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 5
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 4
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 5
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 4
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 4
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 4
47654: NEG
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 4
47666: NEG
47667: PUSH
47668: LD_INT 5
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 4
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 4
47702: NEG
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 5
47714: NEG
47715: PUSH
47716: LD_INT 4
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 5
47726: NEG
47727: PUSH
47728: LD_INT 5
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 5
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 5
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47807: LD_ADDR_VAR 0 30
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: LD_INT 4
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 5
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 5
47844: PUSH
47845: LD_INT 5
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: PUSH
47855: LD_INT 5
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 5
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: LD_INT 5
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 4
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 4
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 4
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 4
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 4
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 5
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 5
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 5
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 3
48099: NEG
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 4
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 4
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 4
48171: NEG
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 5
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 4
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 4
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 5
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 5
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48354: LD_ADDR_VAR 0 31
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 4
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 5
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 5
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 4
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 4
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 4
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 4
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: LD_INT 4
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 4
48568: NEG
48569: PUSH
48570: LD_INT 5
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: LD_INT 4
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 3
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 4
48604: NEG
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 5
48616: NEG
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 5
48628: NEG
48629: PUSH
48630: LD_INT 5
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 5
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 5
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 4
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 3
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 4
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 4
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 4
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 5
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 5
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 4
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 5
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48904: LD_ADDR_VAR 0 32
48908: PUSH
48909: LD_INT 4
48911: NEG
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 4
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 5
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 5
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 5
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: NEG
49026: PUSH
49027: LD_INT 4
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 4
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 4
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 4
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 4
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 5
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 4
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 3
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 4
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 5
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 5
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 4
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 4
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: LD_INT 4
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 4
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 5
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 5
49346: PUSH
49347: LD_INT 5
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 4
49356: PUSH
49357: LD_INT 5
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 4
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 5
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 5
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49451: LD_ADDR_VAR 0 33
49455: PUSH
49456: LD_INT 4
49458: NEG
49459: PUSH
49460: LD_INT 4
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 4
49470: NEG
49471: PUSH
49472: LD_INT 5
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 4
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 4
49506: NEG
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 5
49518: NEG
49519: PUSH
49520: LD_INT 4
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 5
49530: NEG
49531: PUSH
49532: LD_INT 5
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 5
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 5
49554: NEG
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 4
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 4
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 4
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 5
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 5
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 5
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 3
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 4
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 5
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 5
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 4
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49989: LD_ADDR_VAR 0 34
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 5
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 4
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 4
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 5
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 5
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 4
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 4
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 4
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 5
50211: PUSH
50212: LD_INT 4
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 5
50221: PUSH
50222: LD_INT 5
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 4
50231: PUSH
50232: LD_INT 5
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: LD_INT 4
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: LD_INT 3
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: LD_INT 5
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 4
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 4
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 4
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 5
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 5
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 5
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// end ; end ;
50521: GO 50524
50523: POP
// case btype of b_depot , b_warehouse :
50524: LD_VAR 0 1
50528: PUSH
50529: LD_INT 0
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50543
50535: LD_INT 1
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50543
50541: GO 50744
50543: POP
// case nation of nation_american :
50544: LD_VAR 0 5
50548: PUSH
50549: LD_INT 1
50551: DOUBLE
50552: EQUAL
50553: IFTRUE 50557
50555: GO 50613
50557: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50558: LD_ADDR_VAR 0 9
50562: PUSH
50563: LD_VAR 0 11
50567: PUSH
50568: LD_VAR 0 12
50572: PUSH
50573: LD_VAR 0 13
50577: PUSH
50578: LD_VAR 0 14
50582: PUSH
50583: LD_VAR 0 15
50587: PUSH
50588: LD_VAR 0 16
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: PUSH
50601: LD_VAR 0 4
50605: PUSH
50606: LD_INT 1
50608: PLUS
50609: ARRAY
50610: ST_TO_ADDR
50611: GO 50742
50613: LD_INT 2
50615: DOUBLE
50616: EQUAL
50617: IFTRUE 50621
50619: GO 50677
50621: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50622: LD_ADDR_VAR 0 9
50626: PUSH
50627: LD_VAR 0 17
50631: PUSH
50632: LD_VAR 0 18
50636: PUSH
50637: LD_VAR 0 19
50641: PUSH
50642: LD_VAR 0 20
50646: PUSH
50647: LD_VAR 0 21
50651: PUSH
50652: LD_VAR 0 22
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: PUSH
50665: LD_VAR 0 4
50669: PUSH
50670: LD_INT 1
50672: PLUS
50673: ARRAY
50674: ST_TO_ADDR
50675: GO 50742
50677: LD_INT 3
50679: DOUBLE
50680: EQUAL
50681: IFTRUE 50685
50683: GO 50741
50685: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50686: LD_ADDR_VAR 0 9
50690: PUSH
50691: LD_VAR 0 23
50695: PUSH
50696: LD_VAR 0 24
50700: PUSH
50701: LD_VAR 0 25
50705: PUSH
50706: LD_VAR 0 26
50710: PUSH
50711: LD_VAR 0 27
50715: PUSH
50716: LD_VAR 0 28
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: PUSH
50729: LD_VAR 0 4
50733: PUSH
50734: LD_INT 1
50736: PLUS
50737: ARRAY
50738: ST_TO_ADDR
50739: GO 50742
50741: POP
50742: GO 51297
50744: LD_INT 2
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50758
50750: LD_INT 3
50752: DOUBLE
50753: EQUAL
50754: IFTRUE 50758
50756: GO 50814
50758: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50759: LD_ADDR_VAR 0 9
50763: PUSH
50764: LD_VAR 0 29
50768: PUSH
50769: LD_VAR 0 30
50773: PUSH
50774: LD_VAR 0 31
50778: PUSH
50779: LD_VAR 0 32
50783: PUSH
50784: LD_VAR 0 33
50788: PUSH
50789: LD_VAR 0 34
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: PUSH
50802: LD_VAR 0 4
50806: PUSH
50807: LD_INT 1
50809: PLUS
50810: ARRAY
50811: ST_TO_ADDR
50812: GO 51297
50814: LD_INT 16
50816: DOUBLE
50817: EQUAL
50818: IFTRUE 50876
50820: LD_INT 17
50822: DOUBLE
50823: EQUAL
50824: IFTRUE 50876
50826: LD_INT 18
50828: DOUBLE
50829: EQUAL
50830: IFTRUE 50876
50832: LD_INT 19
50834: DOUBLE
50835: EQUAL
50836: IFTRUE 50876
50838: LD_INT 22
50840: DOUBLE
50841: EQUAL
50842: IFTRUE 50876
50844: LD_INT 20
50846: DOUBLE
50847: EQUAL
50848: IFTRUE 50876
50850: LD_INT 21
50852: DOUBLE
50853: EQUAL
50854: IFTRUE 50876
50856: LD_INT 23
50858: DOUBLE
50859: EQUAL
50860: IFTRUE 50876
50862: LD_INT 24
50864: DOUBLE
50865: EQUAL
50866: IFTRUE 50876
50868: LD_INT 25
50870: DOUBLE
50871: EQUAL
50872: IFTRUE 50876
50874: GO 50932
50876: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50877: LD_ADDR_VAR 0 9
50881: PUSH
50882: LD_VAR 0 35
50886: PUSH
50887: LD_VAR 0 36
50891: PUSH
50892: LD_VAR 0 37
50896: PUSH
50897: LD_VAR 0 38
50901: PUSH
50902: LD_VAR 0 39
50906: PUSH
50907: LD_VAR 0 40
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: LD_VAR 0 4
50924: PUSH
50925: LD_INT 1
50927: PLUS
50928: ARRAY
50929: ST_TO_ADDR
50930: GO 51297
50932: LD_INT 6
50934: DOUBLE
50935: EQUAL
50936: IFTRUE 50988
50938: LD_INT 7
50940: DOUBLE
50941: EQUAL
50942: IFTRUE 50988
50944: LD_INT 8
50946: DOUBLE
50947: EQUAL
50948: IFTRUE 50988
50950: LD_INT 13
50952: DOUBLE
50953: EQUAL
50954: IFTRUE 50988
50956: LD_INT 12
50958: DOUBLE
50959: EQUAL
50960: IFTRUE 50988
50962: LD_INT 15
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50988
50968: LD_INT 11
50970: DOUBLE
50971: EQUAL
50972: IFTRUE 50988
50974: LD_INT 14
50976: DOUBLE
50977: EQUAL
50978: IFTRUE 50988
50980: LD_INT 10
50982: DOUBLE
50983: EQUAL
50984: IFTRUE 50988
50986: GO 51044
50988: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50989: LD_ADDR_VAR 0 9
50993: PUSH
50994: LD_VAR 0 41
50998: PUSH
50999: LD_VAR 0 42
51003: PUSH
51004: LD_VAR 0 43
51008: PUSH
51009: LD_VAR 0 44
51013: PUSH
51014: LD_VAR 0 45
51018: PUSH
51019: LD_VAR 0 46
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: PUSH
51032: LD_VAR 0 4
51036: PUSH
51037: LD_INT 1
51039: PLUS
51040: ARRAY
51041: ST_TO_ADDR
51042: GO 51297
51044: LD_INT 36
51046: DOUBLE
51047: EQUAL
51048: IFTRUE 51052
51050: GO 51108
51052: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51053: LD_ADDR_VAR 0 9
51057: PUSH
51058: LD_VAR 0 47
51062: PUSH
51063: LD_VAR 0 48
51067: PUSH
51068: LD_VAR 0 49
51072: PUSH
51073: LD_VAR 0 50
51077: PUSH
51078: LD_VAR 0 51
51082: PUSH
51083: LD_VAR 0 52
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: PUSH
51096: LD_VAR 0 4
51100: PUSH
51101: LD_INT 1
51103: PLUS
51104: ARRAY
51105: ST_TO_ADDR
51106: GO 51297
51108: LD_INT 4
51110: DOUBLE
51111: EQUAL
51112: IFTRUE 51134
51114: LD_INT 5
51116: DOUBLE
51117: EQUAL
51118: IFTRUE 51134
51120: LD_INT 34
51122: DOUBLE
51123: EQUAL
51124: IFTRUE 51134
51126: LD_INT 37
51128: DOUBLE
51129: EQUAL
51130: IFTRUE 51134
51132: GO 51190
51134: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51135: LD_ADDR_VAR 0 9
51139: PUSH
51140: LD_VAR 0 53
51144: PUSH
51145: LD_VAR 0 54
51149: PUSH
51150: LD_VAR 0 55
51154: PUSH
51155: LD_VAR 0 56
51159: PUSH
51160: LD_VAR 0 57
51164: PUSH
51165: LD_VAR 0 58
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: PUSH
51178: LD_VAR 0 4
51182: PUSH
51183: LD_INT 1
51185: PLUS
51186: ARRAY
51187: ST_TO_ADDR
51188: GO 51297
51190: LD_INT 31
51192: DOUBLE
51193: EQUAL
51194: IFTRUE 51240
51196: LD_INT 32
51198: DOUBLE
51199: EQUAL
51200: IFTRUE 51240
51202: LD_INT 33
51204: DOUBLE
51205: EQUAL
51206: IFTRUE 51240
51208: LD_INT 27
51210: DOUBLE
51211: EQUAL
51212: IFTRUE 51240
51214: LD_INT 26
51216: DOUBLE
51217: EQUAL
51218: IFTRUE 51240
51220: LD_INT 28
51222: DOUBLE
51223: EQUAL
51224: IFTRUE 51240
51226: LD_INT 29
51228: DOUBLE
51229: EQUAL
51230: IFTRUE 51240
51232: LD_INT 30
51234: DOUBLE
51235: EQUAL
51236: IFTRUE 51240
51238: GO 51296
51240: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51241: LD_ADDR_VAR 0 9
51245: PUSH
51246: LD_VAR 0 59
51250: PUSH
51251: LD_VAR 0 60
51255: PUSH
51256: LD_VAR 0 61
51260: PUSH
51261: LD_VAR 0 62
51265: PUSH
51266: LD_VAR 0 63
51270: PUSH
51271: LD_VAR 0 64
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: PUSH
51284: LD_VAR 0 4
51288: PUSH
51289: LD_INT 1
51291: PLUS
51292: ARRAY
51293: ST_TO_ADDR
51294: GO 51297
51296: POP
// temp_list2 = [ ] ;
51297: LD_ADDR_VAR 0 10
51301: PUSH
51302: EMPTY
51303: ST_TO_ADDR
// for i in temp_list do
51304: LD_ADDR_VAR 0 8
51308: PUSH
51309: LD_VAR 0 9
51313: PUSH
51314: FOR_IN
51315: IFFALSE 51367
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51317: LD_ADDR_VAR 0 10
51321: PUSH
51322: LD_VAR 0 10
51326: PUSH
51327: LD_VAR 0 8
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: PUSH
51336: LD_VAR 0 2
51340: PLUS
51341: PUSH
51342: LD_VAR 0 8
51346: PUSH
51347: LD_INT 2
51349: ARRAY
51350: PUSH
51351: LD_VAR 0 3
51355: PLUS
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: ADD
51364: ST_TO_ADDR
51365: GO 51314
51367: POP
51368: POP
// result = temp_list2 ;
51369: LD_ADDR_VAR 0 7
51373: PUSH
51374: LD_VAR 0 10
51378: ST_TO_ADDR
// end ;
51379: LD_VAR 0 7
51383: RET
// export function EnemyInRange ( unit , dist ) ; begin
51384: LD_INT 0
51386: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51387: LD_ADDR_VAR 0 3
51391: PUSH
51392: LD_VAR 0 1
51396: PPUSH
51397: CALL_OW 255
51401: PPUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 250
51411: PPUSH
51412: LD_VAR 0 1
51416: PPUSH
51417: CALL_OW 251
51421: PPUSH
51422: LD_VAR 0 2
51426: PPUSH
51427: CALL 25155 0 4
51431: PUSH
51432: LD_INT 4
51434: ARRAY
51435: ST_TO_ADDR
// end ;
51436: LD_VAR 0 3
51440: RET
// export function PlayerSeeMe ( unit ) ; begin
51441: LD_INT 0
51443: PPUSH
// result := See ( your_side , unit ) ;
51444: LD_ADDR_VAR 0 2
51448: PUSH
51449: LD_OWVAR 2
51453: PPUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 292
51463: ST_TO_ADDR
// end ;
51464: LD_VAR 0 2
51468: RET
// export function ReverseDir ( unit ) ; begin
51469: LD_INT 0
51471: PPUSH
// if not unit then
51472: LD_VAR 0 1
51476: NOT
51477: IFFALSE 51481
// exit ;
51479: GO 51504
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51481: LD_ADDR_VAR 0 2
51485: PUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 254
51495: PUSH
51496: LD_INT 3
51498: PLUS
51499: PUSH
51500: LD_INT 6
51502: MOD
51503: ST_TO_ADDR
// end ;
51504: LD_VAR 0 2
51508: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51509: LD_INT 0
51511: PPUSH
51512: PPUSH
51513: PPUSH
51514: PPUSH
51515: PPUSH
// if not hexes then
51516: LD_VAR 0 2
51520: NOT
51521: IFFALSE 51525
// exit ;
51523: GO 51673
// dist := 9999 ;
51525: LD_ADDR_VAR 0 5
51529: PUSH
51530: LD_INT 9999
51532: ST_TO_ADDR
// for i = 1 to hexes do
51533: LD_ADDR_VAR 0 4
51537: PUSH
51538: DOUBLE
51539: LD_INT 1
51541: DEC
51542: ST_TO_ADDR
51543: LD_VAR 0 2
51547: PUSH
51548: FOR_TO
51549: IFFALSE 51661
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51551: LD_VAR 0 1
51555: PPUSH
51556: LD_VAR 0 2
51560: PUSH
51561: LD_VAR 0 4
51565: ARRAY
51566: PUSH
51567: LD_INT 1
51569: ARRAY
51570: PPUSH
51571: LD_VAR 0 2
51575: PUSH
51576: LD_VAR 0 4
51580: ARRAY
51581: PUSH
51582: LD_INT 2
51584: ARRAY
51585: PPUSH
51586: CALL_OW 297
51590: PUSH
51591: LD_VAR 0 5
51595: LESS
51596: IFFALSE 51659
// begin hex := hexes [ i ] ;
51598: LD_ADDR_VAR 0 7
51602: PUSH
51603: LD_VAR 0 2
51607: PUSH
51608: LD_VAR 0 4
51612: ARRAY
51613: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51614: LD_ADDR_VAR 0 5
51618: PUSH
51619: LD_VAR 0 1
51623: PPUSH
51624: LD_VAR 0 2
51628: PUSH
51629: LD_VAR 0 4
51633: ARRAY
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PPUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_VAR 0 4
51648: ARRAY
51649: PUSH
51650: LD_INT 2
51652: ARRAY
51653: PPUSH
51654: CALL_OW 297
51658: ST_TO_ADDR
// end ; end ;
51659: GO 51548
51661: POP
51662: POP
// result := hex ;
51663: LD_ADDR_VAR 0 3
51667: PUSH
51668: LD_VAR 0 7
51672: ST_TO_ADDR
// end ;
51673: LD_VAR 0 3
51677: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51678: LD_INT 0
51680: PPUSH
51681: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51682: LD_VAR 0 1
51686: NOT
51687: PUSH
51688: LD_VAR 0 1
51692: PUSH
51693: LD_INT 21
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 23
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PPUSH
51717: CALL_OW 69
51721: IN
51722: NOT
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 51775
// for i = 1 to 3 do
51728: LD_ADDR_VAR 0 3
51732: PUSH
51733: DOUBLE
51734: LD_INT 1
51736: DEC
51737: ST_TO_ADDR
51738: LD_INT 3
51740: PUSH
51741: FOR_TO
51742: IFFALSE 51773
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 250
51753: PPUSH
51754: LD_VAR 0 1
51758: PPUSH
51759: CALL_OW 251
51763: PPUSH
51764: LD_INT 1
51766: PPUSH
51767: CALL_OW 453
51771: GO 51741
51773: POP
51774: POP
// end ;
51775: LD_VAR 0 2
51779: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51780: LD_INT 0
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51788: LD_VAR 0 1
51792: NOT
51793: PUSH
51794: LD_VAR 0 2
51798: NOT
51799: OR
51800: PUSH
51801: LD_VAR 0 1
51805: PPUSH
51806: CALL_OW 314
51810: OR
51811: IFFALSE 51815
// exit ;
51813: GO 52256
// x := GetX ( enemy_unit ) ;
51815: LD_ADDR_VAR 0 7
51819: PUSH
51820: LD_VAR 0 2
51824: PPUSH
51825: CALL_OW 250
51829: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51830: LD_ADDR_VAR 0 8
51834: PUSH
51835: LD_VAR 0 2
51839: PPUSH
51840: CALL_OW 251
51844: ST_TO_ADDR
// if not x or not y then
51845: LD_VAR 0 7
51849: NOT
51850: PUSH
51851: LD_VAR 0 8
51855: NOT
51856: OR
51857: IFFALSE 51861
// exit ;
51859: GO 52256
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51861: LD_ADDR_VAR 0 6
51865: PUSH
51866: LD_VAR 0 7
51870: PPUSH
51871: LD_INT 0
51873: PPUSH
51874: LD_INT 4
51876: PPUSH
51877: CALL_OW 272
51881: PUSH
51882: LD_VAR 0 8
51886: PPUSH
51887: LD_INT 0
51889: PPUSH
51890: LD_INT 4
51892: PPUSH
51893: CALL_OW 273
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_VAR 0 7
51906: PPUSH
51907: LD_INT 1
51909: PPUSH
51910: LD_INT 4
51912: PPUSH
51913: CALL_OW 272
51917: PUSH
51918: LD_VAR 0 8
51922: PPUSH
51923: LD_INT 1
51925: PPUSH
51926: LD_INT 4
51928: PPUSH
51929: CALL_OW 273
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_VAR 0 7
51942: PPUSH
51943: LD_INT 2
51945: PPUSH
51946: LD_INT 4
51948: PPUSH
51949: CALL_OW 272
51953: PUSH
51954: LD_VAR 0 8
51958: PPUSH
51959: LD_INT 2
51961: PPUSH
51962: LD_INT 4
51964: PPUSH
51965: CALL_OW 273
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_VAR 0 7
51978: PPUSH
51979: LD_INT 3
51981: PPUSH
51982: LD_INT 4
51984: PPUSH
51985: CALL_OW 272
51989: PUSH
51990: LD_VAR 0 8
51994: PPUSH
51995: LD_INT 3
51997: PPUSH
51998: LD_INT 4
52000: PPUSH
52001: CALL_OW 273
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_VAR 0 7
52014: PPUSH
52015: LD_INT 4
52017: PPUSH
52018: LD_INT 4
52020: PPUSH
52021: CALL_OW 272
52025: PUSH
52026: LD_VAR 0 8
52030: PPUSH
52031: LD_INT 4
52033: PPUSH
52034: LD_INT 4
52036: PPUSH
52037: CALL_OW 273
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_VAR 0 7
52050: PPUSH
52051: LD_INT 5
52053: PPUSH
52054: LD_INT 4
52056: PPUSH
52057: CALL_OW 272
52061: PUSH
52062: LD_VAR 0 8
52066: PPUSH
52067: LD_INT 5
52069: PPUSH
52070: LD_INT 4
52072: PPUSH
52073: CALL_OW 273
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// for i = tmp downto 1 do
52090: LD_ADDR_VAR 0 4
52094: PUSH
52095: DOUBLE
52096: LD_VAR 0 6
52100: INC
52101: ST_TO_ADDR
52102: LD_INT 1
52104: PUSH
52105: FOR_DOWNTO
52106: IFFALSE 52207
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52108: LD_VAR 0 6
52112: PUSH
52113: LD_VAR 0 4
52117: ARRAY
52118: PUSH
52119: LD_INT 1
52121: ARRAY
52122: PPUSH
52123: LD_VAR 0 6
52127: PUSH
52128: LD_VAR 0 4
52132: ARRAY
52133: PUSH
52134: LD_INT 2
52136: ARRAY
52137: PPUSH
52138: CALL_OW 488
52142: NOT
52143: PUSH
52144: LD_VAR 0 6
52148: PUSH
52149: LD_VAR 0 4
52153: ARRAY
52154: PUSH
52155: LD_INT 1
52157: ARRAY
52158: PPUSH
52159: LD_VAR 0 6
52163: PUSH
52164: LD_VAR 0 4
52168: ARRAY
52169: PUSH
52170: LD_INT 2
52172: ARRAY
52173: PPUSH
52174: CALL_OW 428
52178: PUSH
52179: LD_INT 0
52181: NONEQUAL
52182: OR
52183: IFFALSE 52205
// tmp := Delete ( tmp , i ) ;
52185: LD_ADDR_VAR 0 6
52189: PUSH
52190: LD_VAR 0 6
52194: PPUSH
52195: LD_VAR 0 4
52199: PPUSH
52200: CALL_OW 3
52204: ST_TO_ADDR
52205: GO 52105
52207: POP
52208: POP
// j := GetClosestHex ( unit , tmp ) ;
52209: LD_ADDR_VAR 0 5
52213: PUSH
52214: LD_VAR 0 1
52218: PPUSH
52219: LD_VAR 0 6
52223: PPUSH
52224: CALL 51509 0 2
52228: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52229: LD_VAR 0 1
52233: PPUSH
52234: LD_VAR 0 5
52238: PUSH
52239: LD_INT 1
52241: ARRAY
52242: PPUSH
52243: LD_VAR 0 5
52247: PUSH
52248: LD_INT 2
52250: ARRAY
52251: PPUSH
52252: CALL_OW 111
// end ;
52256: LD_VAR 0 3
52260: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52261: LD_INT 0
52263: PPUSH
52264: PPUSH
52265: PPUSH
// uc_side = 0 ;
52266: LD_ADDR_OWVAR 20
52270: PUSH
52271: LD_INT 0
52273: ST_TO_ADDR
// uc_nation = 0 ;
52274: LD_ADDR_OWVAR 21
52278: PUSH
52279: LD_INT 0
52281: ST_TO_ADDR
// InitHc_All ( ) ;
52282: CALL_OW 584
// InitVc ;
52286: CALL_OW 20
// if mastodonts then
52290: LD_VAR 0 6
52294: IFFALSE 52361
// for i = 1 to mastodonts do
52296: LD_ADDR_VAR 0 11
52300: PUSH
52301: DOUBLE
52302: LD_INT 1
52304: DEC
52305: ST_TO_ADDR
52306: LD_VAR 0 6
52310: PUSH
52311: FOR_TO
52312: IFFALSE 52359
// begin vc_chassis := 31 ;
52314: LD_ADDR_OWVAR 37
52318: PUSH
52319: LD_INT 31
52321: ST_TO_ADDR
// vc_control := control_rider ;
52322: LD_ADDR_OWVAR 38
52326: PUSH
52327: LD_INT 4
52329: ST_TO_ADDR
// animal := CreateVehicle ;
52330: LD_ADDR_VAR 0 12
52334: PUSH
52335: CALL_OW 45
52339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52340: LD_VAR 0 12
52344: PPUSH
52345: LD_VAR 0 8
52349: PPUSH
52350: LD_INT 0
52352: PPUSH
52353: CALL 54549 0 3
// end ;
52357: GO 52311
52359: POP
52360: POP
// if horses then
52361: LD_VAR 0 5
52365: IFFALSE 52432
// for i = 1 to horses do
52367: LD_ADDR_VAR 0 11
52371: PUSH
52372: DOUBLE
52373: LD_INT 1
52375: DEC
52376: ST_TO_ADDR
52377: LD_VAR 0 5
52381: PUSH
52382: FOR_TO
52383: IFFALSE 52430
// begin hc_class := 21 ;
52385: LD_ADDR_OWVAR 28
52389: PUSH
52390: LD_INT 21
52392: ST_TO_ADDR
// hc_gallery :=  ;
52393: LD_ADDR_OWVAR 33
52397: PUSH
52398: LD_STRING 
52400: ST_TO_ADDR
// animal := CreateHuman ;
52401: LD_ADDR_VAR 0 12
52405: PUSH
52406: CALL_OW 44
52410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52411: LD_VAR 0 12
52415: PPUSH
52416: LD_VAR 0 8
52420: PPUSH
52421: LD_INT 0
52423: PPUSH
52424: CALL 54549 0 3
// end ;
52428: GO 52382
52430: POP
52431: POP
// if birds then
52432: LD_VAR 0 1
52436: IFFALSE 52503
// for i = 1 to birds do
52438: LD_ADDR_VAR 0 11
52442: PUSH
52443: DOUBLE
52444: LD_INT 1
52446: DEC
52447: ST_TO_ADDR
52448: LD_VAR 0 1
52452: PUSH
52453: FOR_TO
52454: IFFALSE 52501
// begin hc_class = 18 ;
52456: LD_ADDR_OWVAR 28
52460: PUSH
52461: LD_INT 18
52463: ST_TO_ADDR
// hc_gallery =  ;
52464: LD_ADDR_OWVAR 33
52468: PUSH
52469: LD_STRING 
52471: ST_TO_ADDR
// animal := CreateHuman ;
52472: LD_ADDR_VAR 0 12
52476: PUSH
52477: CALL_OW 44
52481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52482: LD_VAR 0 12
52486: PPUSH
52487: LD_VAR 0 8
52491: PPUSH
52492: LD_INT 0
52494: PPUSH
52495: CALL 54549 0 3
// end ;
52499: GO 52453
52501: POP
52502: POP
// if tigers then
52503: LD_VAR 0 2
52507: IFFALSE 52591
// for i = 1 to tigers do
52509: LD_ADDR_VAR 0 11
52513: PUSH
52514: DOUBLE
52515: LD_INT 1
52517: DEC
52518: ST_TO_ADDR
52519: LD_VAR 0 2
52523: PUSH
52524: FOR_TO
52525: IFFALSE 52589
// begin hc_class = class_tiger ;
52527: LD_ADDR_OWVAR 28
52531: PUSH
52532: LD_INT 14
52534: ST_TO_ADDR
// hc_gallery =  ;
52535: LD_ADDR_OWVAR 33
52539: PUSH
52540: LD_STRING 
52542: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52543: LD_ADDR_OWVAR 35
52547: PUSH
52548: LD_INT 7
52550: NEG
52551: PPUSH
52552: LD_INT 7
52554: PPUSH
52555: CALL_OW 12
52559: ST_TO_ADDR
// animal := CreateHuman ;
52560: LD_ADDR_VAR 0 12
52564: PUSH
52565: CALL_OW 44
52569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52570: LD_VAR 0 12
52574: PPUSH
52575: LD_VAR 0 8
52579: PPUSH
52580: LD_INT 0
52582: PPUSH
52583: CALL 54549 0 3
// end ;
52587: GO 52524
52589: POP
52590: POP
// if apemans then
52591: LD_VAR 0 3
52595: IFFALSE 52718
// for i = 1 to apemans do
52597: LD_ADDR_VAR 0 11
52601: PUSH
52602: DOUBLE
52603: LD_INT 1
52605: DEC
52606: ST_TO_ADDR
52607: LD_VAR 0 3
52611: PUSH
52612: FOR_TO
52613: IFFALSE 52716
// begin hc_class = class_apeman ;
52615: LD_ADDR_OWVAR 28
52619: PUSH
52620: LD_INT 12
52622: ST_TO_ADDR
// hc_gallery =  ;
52623: LD_ADDR_OWVAR 33
52627: PUSH
52628: LD_STRING 
52630: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52631: LD_ADDR_OWVAR 35
52635: PUSH
52636: LD_INT 5
52638: NEG
52639: PPUSH
52640: LD_INT 5
52642: PPUSH
52643: CALL_OW 12
52647: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52648: LD_ADDR_OWVAR 31
52652: PUSH
52653: LD_INT 1
52655: PPUSH
52656: LD_INT 3
52658: PPUSH
52659: CALL_OW 12
52663: PUSH
52664: LD_INT 1
52666: PPUSH
52667: LD_INT 3
52669: PPUSH
52670: CALL_OW 12
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// animal := CreateHuman ;
52687: LD_ADDR_VAR 0 12
52691: PUSH
52692: CALL_OW 44
52696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52697: LD_VAR 0 12
52701: PPUSH
52702: LD_VAR 0 8
52706: PPUSH
52707: LD_INT 0
52709: PPUSH
52710: CALL 54549 0 3
// end ;
52714: GO 52612
52716: POP
52717: POP
// if enchidnas then
52718: LD_VAR 0 4
52722: IFFALSE 52789
// for i = 1 to enchidnas do
52724: LD_ADDR_VAR 0 11
52728: PUSH
52729: DOUBLE
52730: LD_INT 1
52732: DEC
52733: ST_TO_ADDR
52734: LD_VAR 0 4
52738: PUSH
52739: FOR_TO
52740: IFFALSE 52787
// begin hc_class = 13 ;
52742: LD_ADDR_OWVAR 28
52746: PUSH
52747: LD_INT 13
52749: ST_TO_ADDR
// hc_gallery =  ;
52750: LD_ADDR_OWVAR 33
52754: PUSH
52755: LD_STRING 
52757: ST_TO_ADDR
// animal := CreateHuman ;
52758: LD_ADDR_VAR 0 12
52762: PUSH
52763: CALL_OW 44
52767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52768: LD_VAR 0 12
52772: PPUSH
52773: LD_VAR 0 8
52777: PPUSH
52778: LD_INT 0
52780: PPUSH
52781: CALL 54549 0 3
// end ;
52785: GO 52739
52787: POP
52788: POP
// if fishes then
52789: LD_VAR 0 7
52793: IFFALSE 52860
// for i = 1 to fishes do
52795: LD_ADDR_VAR 0 11
52799: PUSH
52800: DOUBLE
52801: LD_INT 1
52803: DEC
52804: ST_TO_ADDR
52805: LD_VAR 0 7
52809: PUSH
52810: FOR_TO
52811: IFFALSE 52858
// begin hc_class = 20 ;
52813: LD_ADDR_OWVAR 28
52817: PUSH
52818: LD_INT 20
52820: ST_TO_ADDR
// hc_gallery =  ;
52821: LD_ADDR_OWVAR 33
52825: PUSH
52826: LD_STRING 
52828: ST_TO_ADDR
// animal := CreateHuman ;
52829: LD_ADDR_VAR 0 12
52833: PUSH
52834: CALL_OW 44
52838: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52839: LD_VAR 0 12
52843: PPUSH
52844: LD_VAR 0 9
52848: PPUSH
52849: LD_INT 0
52851: PPUSH
52852: CALL 54549 0 3
// end ;
52856: GO 52810
52858: POP
52859: POP
// end ;
52860: LD_VAR 0 10
52864: RET
// export function WantHeal ( sci , unit ) ; begin
52865: LD_INT 0
52867: PPUSH
// if GetTaskList ( sci ) > 0 then
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 437
52877: PUSH
52878: LD_INT 0
52880: GREATER
52881: IFFALSE 52951
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52883: LD_VAR 0 1
52887: PPUSH
52888: CALL_OW 437
52892: PUSH
52893: LD_INT 1
52895: ARRAY
52896: PUSH
52897: LD_INT 1
52899: ARRAY
52900: PUSH
52901: LD_STRING l
52903: EQUAL
52904: PUSH
52905: LD_VAR 0 1
52909: PPUSH
52910: CALL_OW 437
52914: PUSH
52915: LD_INT 1
52917: ARRAY
52918: PUSH
52919: LD_INT 4
52921: ARRAY
52922: PUSH
52923: LD_VAR 0 2
52927: EQUAL
52928: AND
52929: IFFALSE 52941
// result := true else
52931: LD_ADDR_VAR 0 3
52935: PUSH
52936: LD_INT 1
52938: ST_TO_ADDR
52939: GO 52949
// result := false ;
52941: LD_ADDR_VAR 0 3
52945: PUSH
52946: LD_INT 0
52948: ST_TO_ADDR
// end else
52949: GO 52959
// result := false ;
52951: LD_ADDR_VAR 0 3
52955: PUSH
52956: LD_INT 0
52958: ST_TO_ADDR
// end ;
52959: LD_VAR 0 3
52963: RET
// export function HealTarget ( sci ) ; begin
52964: LD_INT 0
52966: PPUSH
// if not sci then
52967: LD_VAR 0 1
52971: NOT
52972: IFFALSE 52976
// exit ;
52974: GO 53041
// result := 0 ;
52976: LD_ADDR_VAR 0 2
52980: PUSH
52981: LD_INT 0
52983: ST_TO_ADDR
// if GetTaskList ( sci ) then
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 437
52993: IFFALSE 53041
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 437
53004: PUSH
53005: LD_INT 1
53007: ARRAY
53008: PUSH
53009: LD_INT 1
53011: ARRAY
53012: PUSH
53013: LD_STRING l
53015: EQUAL
53016: IFFALSE 53041
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53018: LD_ADDR_VAR 0 2
53022: PUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 437
53032: PUSH
53033: LD_INT 1
53035: ARRAY
53036: PUSH
53037: LD_INT 4
53039: ARRAY
53040: ST_TO_ADDR
// end ;
53041: LD_VAR 0 2
53045: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53046: LD_INT 0
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
// if not base_units then
53052: LD_VAR 0 1
53056: NOT
53057: IFFALSE 53061
// exit ;
53059: GO 53148
// result := false ;
53061: LD_ADDR_VAR 0 2
53065: PUSH
53066: LD_INT 0
53068: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53069: LD_ADDR_VAR 0 5
53073: PUSH
53074: LD_VAR 0 1
53078: PPUSH
53079: LD_INT 21
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PPUSH
53089: CALL_OW 72
53093: ST_TO_ADDR
// if not tmp then
53094: LD_VAR 0 5
53098: NOT
53099: IFFALSE 53103
// exit ;
53101: GO 53148
// for i in tmp do
53103: LD_ADDR_VAR 0 3
53107: PUSH
53108: LD_VAR 0 5
53112: PUSH
53113: FOR_IN
53114: IFFALSE 53146
// begin result := EnemyInRange ( i , 22 ) ;
53116: LD_ADDR_VAR 0 2
53120: PUSH
53121: LD_VAR 0 3
53125: PPUSH
53126: LD_INT 22
53128: PPUSH
53129: CALL 51384 0 2
53133: ST_TO_ADDR
// if result then
53134: LD_VAR 0 2
53138: IFFALSE 53144
// exit ;
53140: POP
53141: POP
53142: GO 53148
// end ;
53144: GO 53113
53146: POP
53147: POP
// end ;
53148: LD_VAR 0 2
53152: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53153: LD_INT 0
53155: PPUSH
53156: PPUSH
// if not units then
53157: LD_VAR 0 1
53161: NOT
53162: IFFALSE 53166
// exit ;
53164: GO 53236
// result := [ ] ;
53166: LD_ADDR_VAR 0 3
53170: PUSH
53171: EMPTY
53172: ST_TO_ADDR
// for i in units do
53173: LD_ADDR_VAR 0 4
53177: PUSH
53178: LD_VAR 0 1
53182: PUSH
53183: FOR_IN
53184: IFFALSE 53234
// if GetTag ( i ) = tag then
53186: LD_VAR 0 4
53190: PPUSH
53191: CALL_OW 110
53195: PUSH
53196: LD_VAR 0 2
53200: EQUAL
53201: IFFALSE 53232
// result := Insert ( result , result + 1 , i ) ;
53203: LD_ADDR_VAR 0 3
53207: PUSH
53208: LD_VAR 0 3
53212: PPUSH
53213: LD_VAR 0 3
53217: PUSH
53218: LD_INT 1
53220: PLUS
53221: PPUSH
53222: LD_VAR 0 4
53226: PPUSH
53227: CALL_OW 2
53231: ST_TO_ADDR
53232: GO 53183
53234: POP
53235: POP
// end ;
53236: LD_VAR 0 3
53240: RET
// export function IsDriver ( un ) ; begin
53241: LD_INT 0
53243: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53244: LD_ADDR_VAR 0 2
53248: PUSH
53249: LD_VAR 0 1
53253: PUSH
53254: LD_INT 55
53256: PUSH
53257: EMPTY
53258: LIST
53259: PPUSH
53260: CALL_OW 69
53264: IN
53265: ST_TO_ADDR
// end ;
53266: LD_VAR 0 2
53270: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53271: LD_INT 0
53273: PPUSH
53274: PPUSH
// list := [ ] ;
53275: LD_ADDR_VAR 0 5
53279: PUSH
53280: EMPTY
53281: ST_TO_ADDR
// case d of 0 :
53282: LD_VAR 0 3
53286: PUSH
53287: LD_INT 0
53289: DOUBLE
53290: EQUAL
53291: IFTRUE 53295
53293: GO 53428
53295: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53296: LD_ADDR_VAR 0 5
53300: PUSH
53301: LD_VAR 0 1
53305: PUSH
53306: LD_INT 4
53308: MINUS
53309: PUSH
53310: LD_VAR 0 2
53314: PUSH
53315: LD_INT 4
53317: MINUS
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: PUSH
53327: LD_VAR 0 1
53331: PUSH
53332: LD_INT 3
53334: MINUS
53335: PUSH
53336: LD_VAR 0 2
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: PUSH
53349: LD_VAR 0 1
53353: PUSH
53354: LD_INT 4
53356: PLUS
53357: PUSH
53358: LD_VAR 0 2
53362: PUSH
53363: LD_INT 4
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: PUSH
53371: LD_VAR 0 1
53375: PUSH
53376: LD_INT 3
53378: PLUS
53379: PUSH
53380: LD_VAR 0 2
53384: PUSH
53385: LD_INT 3
53387: PLUS
53388: PUSH
53389: LD_INT 5
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: PUSH
53397: LD_VAR 0 1
53401: PUSH
53402: LD_VAR 0 2
53406: PUSH
53407: LD_INT 4
53409: PLUS
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
// end ; 1 :
53426: GO 54126
53428: LD_INT 1
53430: DOUBLE
53431: EQUAL
53432: IFTRUE 53436
53434: GO 53569
53436: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53437: LD_ADDR_VAR 0 5
53441: PUSH
53442: LD_VAR 0 1
53446: PUSH
53447: LD_VAR 0 2
53451: PUSH
53452: LD_INT 4
53454: MINUS
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: PUSH
53464: LD_VAR 0 1
53468: PUSH
53469: LD_INT 3
53471: MINUS
53472: PUSH
53473: LD_VAR 0 2
53477: PUSH
53478: LD_INT 3
53480: MINUS
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: PUSH
53490: LD_VAR 0 1
53494: PUSH
53495: LD_INT 4
53497: MINUS
53498: PUSH
53499: LD_VAR 0 2
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: PUSH
53512: LD_VAR 0 1
53516: PUSH
53517: LD_VAR 0 2
53521: PUSH
53522: LD_INT 3
53524: PLUS
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: PUSH
53534: LD_VAR 0 1
53538: PUSH
53539: LD_INT 4
53541: PLUS
53542: PUSH
53543: LD_VAR 0 2
53547: PUSH
53548: LD_INT 4
53550: PLUS
53551: PUSH
53552: LD_INT 5
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// end ; 2 :
53567: GO 54126
53569: LD_INT 2
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53577
53575: GO 53706
53577: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53578: LD_ADDR_VAR 0 5
53582: PUSH
53583: LD_VAR 0 1
53587: PUSH
53588: LD_VAR 0 2
53592: PUSH
53593: LD_INT 3
53595: MINUS
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: PUSH
53605: LD_VAR 0 1
53609: PUSH
53610: LD_INT 4
53612: PLUS
53613: PUSH
53614: LD_VAR 0 2
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: LD_VAR 0 1
53631: PUSH
53632: LD_VAR 0 2
53636: PUSH
53637: LD_INT 4
53639: PLUS
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: PUSH
53649: LD_VAR 0 1
53653: PUSH
53654: LD_INT 3
53656: MINUS
53657: PUSH
53658: LD_VAR 0 2
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: PUSH
53671: LD_VAR 0 1
53675: PUSH
53676: LD_INT 4
53678: MINUS
53679: PUSH
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 4
53687: MINUS
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// end ; 3 :
53704: GO 54126
53706: LD_INT 3
53708: DOUBLE
53709: EQUAL
53710: IFTRUE 53714
53712: GO 53847
53714: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53715: LD_ADDR_VAR 0 5
53719: PUSH
53720: LD_VAR 0 1
53724: PUSH
53725: LD_INT 3
53727: PLUS
53728: PUSH
53729: LD_VAR 0 2
53733: PUSH
53734: LD_INT 4
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: PUSH
53742: LD_VAR 0 1
53746: PUSH
53747: LD_INT 4
53749: PLUS
53750: PUSH
53751: LD_VAR 0 2
53755: PUSH
53756: LD_INT 4
53758: PLUS
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: PUSH
53768: LD_VAR 0 1
53772: PUSH
53773: LD_INT 4
53775: MINUS
53776: PUSH
53777: LD_VAR 0 2
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: PUSH
53790: LD_VAR 0 1
53794: PUSH
53795: LD_VAR 0 2
53799: PUSH
53800: LD_INT 4
53802: MINUS
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: PUSH
53812: LD_VAR 0 1
53816: PUSH
53817: LD_INT 3
53819: MINUS
53820: PUSH
53821: LD_VAR 0 2
53825: PUSH
53826: LD_INT 3
53828: MINUS
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// end ; 4 :
53845: GO 54126
53847: LD_INT 4
53849: DOUBLE
53850: EQUAL
53851: IFTRUE 53855
53853: GO 53988
53855: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53856: LD_ADDR_VAR 0 5
53860: PUSH
53861: LD_VAR 0 1
53865: PUSH
53866: LD_VAR 0 2
53870: PUSH
53871: LD_INT 4
53873: PLUS
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: PUSH
53883: LD_VAR 0 1
53887: PUSH
53888: LD_INT 3
53890: PLUS
53891: PUSH
53892: LD_VAR 0 2
53896: PUSH
53897: LD_INT 3
53899: PLUS
53900: PUSH
53901: LD_INT 5
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: PUSH
53909: LD_VAR 0 1
53913: PUSH
53914: LD_INT 4
53916: PLUS
53917: PUSH
53918: LD_VAR 0 2
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: PUSH
53931: LD_VAR 0 1
53935: PUSH
53936: LD_VAR 0 2
53940: PUSH
53941: LD_INT 3
53943: MINUS
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: PUSH
53953: LD_VAR 0 1
53957: PUSH
53958: LD_INT 4
53960: MINUS
53961: PUSH
53962: LD_VAR 0 2
53966: PUSH
53967: LD_INT 4
53969: MINUS
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// end ; 5 :
53986: GO 54126
53988: LD_INT 5
53990: DOUBLE
53991: EQUAL
53992: IFTRUE 53996
53994: GO 54125
53996: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53997: LD_ADDR_VAR 0 5
54001: PUSH
54002: LD_VAR 0 1
54006: PUSH
54007: LD_INT 4
54009: MINUS
54010: PUSH
54011: LD_VAR 0 2
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: PUSH
54024: LD_VAR 0 1
54028: PUSH
54029: LD_VAR 0 2
54033: PUSH
54034: LD_INT 4
54036: MINUS
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: LD_VAR 0 1
54050: PUSH
54051: LD_INT 4
54053: PLUS
54054: PUSH
54055: LD_VAR 0 2
54059: PUSH
54060: LD_INT 4
54062: PLUS
54063: PUSH
54064: LD_INT 5
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PUSH
54072: LD_VAR 0 1
54076: PUSH
54077: LD_INT 3
54079: PLUS
54080: PUSH
54081: LD_VAR 0 2
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: PUSH
54094: LD_VAR 0 1
54098: PUSH
54099: LD_VAR 0 2
54103: PUSH
54104: LD_INT 3
54106: PLUS
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: ST_TO_ADDR
// end ; end ;
54123: GO 54126
54125: POP
// result := list ;
54126: LD_ADDR_VAR 0 4
54130: PUSH
54131: LD_VAR 0 5
54135: ST_TO_ADDR
// end ;
54136: LD_VAR 0 4
54140: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54141: LD_INT 0
54143: PPUSH
54144: PPUSH
54145: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54146: LD_VAR 0 1
54150: NOT
54151: PUSH
54152: LD_VAR 0 2
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: LD_INT 4
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: IN
54175: NOT
54176: OR
54177: IFFALSE 54181
// exit ;
54179: GO 54273
// tmp := [ ] ;
54181: LD_ADDR_VAR 0 5
54185: PUSH
54186: EMPTY
54187: ST_TO_ADDR
// for i in units do
54188: LD_ADDR_VAR 0 4
54192: PUSH
54193: LD_VAR 0 1
54197: PUSH
54198: FOR_IN
54199: IFFALSE 54242
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54201: LD_ADDR_VAR 0 5
54205: PUSH
54206: LD_VAR 0 5
54210: PPUSH
54211: LD_VAR 0 5
54215: PUSH
54216: LD_INT 1
54218: PLUS
54219: PPUSH
54220: LD_VAR 0 4
54224: PPUSH
54225: LD_VAR 0 2
54229: PPUSH
54230: CALL_OW 259
54234: PPUSH
54235: CALL_OW 2
54239: ST_TO_ADDR
54240: GO 54198
54242: POP
54243: POP
// if not tmp then
54244: LD_VAR 0 5
54248: NOT
54249: IFFALSE 54253
// exit ;
54251: GO 54273
// result := SortListByListDesc ( units , tmp ) ;
54253: LD_ADDR_VAR 0 3
54257: PUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: LD_VAR 0 5
54267: PPUSH
54268: CALL_OW 77
54272: ST_TO_ADDR
// end ;
54273: LD_VAR 0 3
54277: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54278: LD_INT 0
54280: PPUSH
54281: PPUSH
54282: PPUSH
// result := false ;
54283: LD_ADDR_VAR 0 3
54287: PUSH
54288: LD_INT 0
54290: ST_TO_ADDR
// x := GetX ( building ) ;
54291: LD_ADDR_VAR 0 4
54295: PUSH
54296: LD_VAR 0 2
54300: PPUSH
54301: CALL_OW 250
54305: ST_TO_ADDR
// y := GetY ( building ) ;
54306: LD_ADDR_VAR 0 5
54310: PUSH
54311: LD_VAR 0 2
54315: PPUSH
54316: CALL_OW 251
54320: ST_TO_ADDR
// if not building or not x or not y then
54321: LD_VAR 0 2
54325: NOT
54326: PUSH
54327: LD_VAR 0 4
54331: NOT
54332: OR
54333: PUSH
54334: LD_VAR 0 5
54338: NOT
54339: OR
54340: IFFALSE 54344
// exit ;
54342: GO 54436
// if GetTaskList ( unit ) then
54344: LD_VAR 0 1
54348: PPUSH
54349: CALL_OW 437
54353: IFFALSE 54436
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54355: LD_STRING e
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: CALL_OW 437
54367: PUSH
54368: LD_INT 1
54370: ARRAY
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: EQUAL
54376: PUSH
54377: LD_VAR 0 4
54381: PUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 437
54391: PUSH
54392: LD_INT 1
54394: ARRAY
54395: PUSH
54396: LD_INT 2
54398: ARRAY
54399: EQUAL
54400: AND
54401: PUSH
54402: LD_VAR 0 5
54406: PUSH
54407: LD_VAR 0 1
54411: PPUSH
54412: CALL_OW 437
54416: PUSH
54417: LD_INT 1
54419: ARRAY
54420: PUSH
54421: LD_INT 3
54423: ARRAY
54424: EQUAL
54425: AND
54426: IFFALSE 54436
// result := true end ;
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_INT 1
54435: ST_TO_ADDR
// end ;
54436: LD_VAR 0 3
54440: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54441: LD_INT 0
54443: PPUSH
// result := false ;
54444: LD_ADDR_VAR 0 4
54448: PUSH
54449: LD_INT 0
54451: ST_TO_ADDR
// if GetTaskList ( unit ) then
54452: LD_VAR 0 1
54456: PPUSH
54457: CALL_OW 437
54461: IFFALSE 54544
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54463: LD_STRING M
54465: PUSH
54466: LD_VAR 0 1
54470: PPUSH
54471: CALL_OW 437
54475: PUSH
54476: LD_INT 1
54478: ARRAY
54479: PUSH
54480: LD_INT 1
54482: ARRAY
54483: EQUAL
54484: PUSH
54485: LD_VAR 0 2
54489: PUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: CALL_OW 437
54499: PUSH
54500: LD_INT 1
54502: ARRAY
54503: PUSH
54504: LD_INT 2
54506: ARRAY
54507: EQUAL
54508: AND
54509: PUSH
54510: LD_VAR 0 3
54514: PUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 437
54524: PUSH
54525: LD_INT 1
54527: ARRAY
54528: PUSH
54529: LD_INT 3
54531: ARRAY
54532: EQUAL
54533: AND
54534: IFFALSE 54544
// result := true ;
54536: LD_ADDR_VAR 0 4
54540: PUSH
54541: LD_INT 1
54543: ST_TO_ADDR
// end ; end ;
54544: LD_VAR 0 4
54548: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54549: LD_INT 0
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
// if not unit or not area then
54555: LD_VAR 0 1
54559: NOT
54560: PUSH
54561: LD_VAR 0 2
54565: NOT
54566: OR
54567: IFFALSE 54571
// exit ;
54569: GO 54735
// tmp := AreaToList ( area , i ) ;
54571: LD_ADDR_VAR 0 6
54575: PUSH
54576: LD_VAR 0 2
54580: PPUSH
54581: LD_VAR 0 5
54585: PPUSH
54586: CALL_OW 517
54590: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54591: LD_ADDR_VAR 0 5
54595: PUSH
54596: DOUBLE
54597: LD_INT 1
54599: DEC
54600: ST_TO_ADDR
54601: LD_VAR 0 6
54605: PUSH
54606: LD_INT 1
54608: ARRAY
54609: PUSH
54610: FOR_TO
54611: IFFALSE 54733
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54613: LD_ADDR_VAR 0 7
54617: PUSH
54618: LD_VAR 0 6
54622: PUSH
54623: LD_INT 1
54625: ARRAY
54626: PUSH
54627: LD_VAR 0 5
54631: ARRAY
54632: PUSH
54633: LD_VAR 0 6
54637: PUSH
54638: LD_INT 2
54640: ARRAY
54641: PUSH
54642: LD_VAR 0 5
54646: ARRAY
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54652: LD_VAR 0 7
54656: PUSH
54657: LD_INT 1
54659: ARRAY
54660: PPUSH
54661: LD_VAR 0 7
54665: PUSH
54666: LD_INT 2
54668: ARRAY
54669: PPUSH
54670: CALL_OW 428
54674: PUSH
54675: LD_INT 0
54677: EQUAL
54678: IFFALSE 54731
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54680: LD_VAR 0 1
54684: PPUSH
54685: LD_VAR 0 7
54689: PUSH
54690: LD_INT 1
54692: ARRAY
54693: PPUSH
54694: LD_VAR 0 7
54698: PUSH
54699: LD_INT 2
54701: ARRAY
54702: PPUSH
54703: LD_VAR 0 3
54707: PPUSH
54708: CALL_OW 48
// result := IsPlaced ( unit ) ;
54712: LD_ADDR_VAR 0 4
54716: PUSH
54717: LD_VAR 0 1
54721: PPUSH
54722: CALL_OW 305
54726: ST_TO_ADDR
// exit ;
54727: POP
54728: POP
54729: GO 54735
// end ; end ;
54731: GO 54610
54733: POP
54734: POP
// end ;
54735: LD_VAR 0 4
54739: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54740: LD_INT 0
54742: PPUSH
54743: PPUSH
54744: PPUSH
// if not side or side > 8 then
54745: LD_VAR 0 1
54749: NOT
54750: PUSH
54751: LD_VAR 0 1
54755: PUSH
54756: LD_INT 8
54758: GREATER
54759: OR
54760: IFFALSE 54764
// exit ;
54762: GO 54951
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54764: LD_ADDR_VAR 0 4
54768: PUSH
54769: LD_INT 22
54771: PUSH
54772: LD_VAR 0 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 21
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PPUSH
54795: CALL_OW 69
54799: ST_TO_ADDR
// if not tmp then
54800: LD_VAR 0 4
54804: NOT
54805: IFFALSE 54809
// exit ;
54807: GO 54951
// enable_addtolog := true ;
54809: LD_ADDR_OWVAR 81
54813: PUSH
54814: LD_INT 1
54816: ST_TO_ADDR
// AddToLog ( [ ) ;
54817: LD_STRING [
54819: PPUSH
54820: CALL_OW 561
// for i in tmp do
54824: LD_ADDR_VAR 0 3
54828: PUSH
54829: LD_VAR 0 4
54833: PUSH
54834: FOR_IN
54835: IFFALSE 54942
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54837: LD_STRING [
54839: PUSH
54840: LD_VAR 0 3
54844: PPUSH
54845: CALL_OW 266
54849: STR
54850: PUSH
54851: LD_STRING , 
54853: STR
54854: PUSH
54855: LD_VAR 0 3
54859: PPUSH
54860: CALL_OW 250
54864: STR
54865: PUSH
54866: LD_STRING , 
54868: STR
54869: PUSH
54870: LD_VAR 0 3
54874: PPUSH
54875: CALL_OW 251
54879: STR
54880: PUSH
54881: LD_STRING , 
54883: STR
54884: PUSH
54885: LD_VAR 0 3
54889: PPUSH
54890: CALL_OW 254
54894: STR
54895: PUSH
54896: LD_STRING , 
54898: STR
54899: PUSH
54900: LD_VAR 0 3
54904: PPUSH
54905: LD_INT 1
54907: PPUSH
54908: CALL_OW 268
54912: STR
54913: PUSH
54914: LD_STRING , 
54916: STR
54917: PUSH
54918: LD_VAR 0 3
54922: PPUSH
54923: LD_INT 2
54925: PPUSH
54926: CALL_OW 268
54930: STR
54931: PUSH
54932: LD_STRING ],
54934: STR
54935: PPUSH
54936: CALL_OW 561
// end ;
54940: GO 54834
54942: POP
54943: POP
// AddToLog ( ]; ) ;
54944: LD_STRING ];
54946: PPUSH
54947: CALL_OW 561
// end ;
54951: LD_VAR 0 2
54955: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54956: LD_INT 0
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
// if not area or not rate or not max then
54963: LD_VAR 0 1
54967: NOT
54968: PUSH
54969: LD_VAR 0 2
54973: NOT
54974: OR
54975: PUSH
54976: LD_VAR 0 4
54980: NOT
54981: OR
54982: IFFALSE 54986
// exit ;
54984: GO 55178
// while 1 do
54986: LD_INT 1
54988: IFFALSE 55178
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54990: LD_ADDR_VAR 0 9
54994: PUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: LD_INT 1
55002: PPUSH
55003: CALL_OW 287
55007: PUSH
55008: LD_INT 10
55010: MUL
55011: ST_TO_ADDR
// r := rate / 10 ;
55012: LD_ADDR_VAR 0 7
55016: PUSH
55017: LD_VAR 0 2
55021: PUSH
55022: LD_INT 10
55024: DIVREAL
55025: ST_TO_ADDR
// time := 1 1$00 ;
55026: LD_ADDR_VAR 0 8
55030: PUSH
55031: LD_INT 2100
55033: ST_TO_ADDR
// if amount < min then
55034: LD_VAR 0 9
55038: PUSH
55039: LD_VAR 0 3
55043: LESS
55044: IFFALSE 55062
// r := r * 2 else
55046: LD_ADDR_VAR 0 7
55050: PUSH
55051: LD_VAR 0 7
55055: PUSH
55056: LD_INT 2
55058: MUL
55059: ST_TO_ADDR
55060: GO 55088
// if amount > max then
55062: LD_VAR 0 9
55066: PUSH
55067: LD_VAR 0 4
55071: GREATER
55072: IFFALSE 55088
// r := r / 2 ;
55074: LD_ADDR_VAR 0 7
55078: PUSH
55079: LD_VAR 0 7
55083: PUSH
55084: LD_INT 2
55086: DIVREAL
55087: ST_TO_ADDR
// time := time / r ;
55088: LD_ADDR_VAR 0 8
55092: PUSH
55093: LD_VAR 0 8
55097: PUSH
55098: LD_VAR 0 7
55102: DIVREAL
55103: ST_TO_ADDR
// if time < 0 then
55104: LD_VAR 0 8
55108: PUSH
55109: LD_INT 0
55111: LESS
55112: IFFALSE 55129
// time := time * - 1 ;
55114: LD_ADDR_VAR 0 8
55118: PUSH
55119: LD_VAR 0 8
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: MUL
55128: ST_TO_ADDR
// wait ( time ) ;
55129: LD_VAR 0 8
55133: PPUSH
55134: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55138: LD_INT 35
55140: PPUSH
55141: LD_INT 875
55143: PPUSH
55144: CALL_OW 12
55148: PPUSH
55149: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55153: LD_INT 1
55155: PPUSH
55156: LD_INT 5
55158: PPUSH
55159: CALL_OW 12
55163: PPUSH
55164: LD_VAR 0 1
55168: PPUSH
55169: LD_INT 1
55171: PPUSH
55172: CALL_OW 55
// end ;
55176: GO 54986
// end ;
55178: LD_VAR 0 5
55182: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55183: LD_INT 0
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
// if not turrets or not factories then
55193: LD_VAR 0 1
55197: NOT
55198: PUSH
55199: LD_VAR 0 2
55203: NOT
55204: OR
55205: IFFALSE 55209
// exit ;
55207: GO 55516
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55209: LD_ADDR_VAR 0 10
55213: PUSH
55214: LD_INT 5
55216: PUSH
55217: LD_INT 6
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 5
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 24
55251: PUSH
55252: LD_INT 25
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 23
55261: PUSH
55262: LD_INT 27
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 42
55275: PUSH
55276: LD_INT 43
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 44
55285: PUSH
55286: LD_INT 46
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 45
55295: PUSH
55296: LD_INT 47
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: LIST
55312: ST_TO_ADDR
// result := [ ] ;
55313: LD_ADDR_VAR 0 3
55317: PUSH
55318: EMPTY
55319: ST_TO_ADDR
// for i in turrets do
55320: LD_ADDR_VAR 0 4
55324: PUSH
55325: LD_VAR 0 1
55329: PUSH
55330: FOR_IN
55331: IFFALSE 55514
// begin nat := GetNation ( i ) ;
55333: LD_ADDR_VAR 0 7
55337: PUSH
55338: LD_VAR 0 4
55342: PPUSH
55343: CALL_OW 248
55347: ST_TO_ADDR
// weapon := 0 ;
55348: LD_ADDR_VAR 0 8
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
// if not nat then
55356: LD_VAR 0 7
55360: NOT
55361: IFFALSE 55365
// continue ;
55363: GO 55330
// for j in list [ nat ] do
55365: LD_ADDR_VAR 0 5
55369: PUSH
55370: LD_VAR 0 10
55374: PUSH
55375: LD_VAR 0 7
55379: ARRAY
55380: PUSH
55381: FOR_IN
55382: IFFALSE 55423
// if GetBWeapon ( i ) = j [ 1 ] then
55384: LD_VAR 0 4
55388: PPUSH
55389: CALL_OW 269
55393: PUSH
55394: LD_VAR 0 5
55398: PUSH
55399: LD_INT 1
55401: ARRAY
55402: EQUAL
55403: IFFALSE 55421
// begin weapon := j [ 2 ] ;
55405: LD_ADDR_VAR 0 8
55409: PUSH
55410: LD_VAR 0 5
55414: PUSH
55415: LD_INT 2
55417: ARRAY
55418: ST_TO_ADDR
// break ;
55419: GO 55423
// end ;
55421: GO 55381
55423: POP
55424: POP
// if not weapon then
55425: LD_VAR 0 8
55429: NOT
55430: IFFALSE 55434
// continue ;
55432: GO 55330
// for k in factories do
55434: LD_ADDR_VAR 0 6
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: FOR_IN
55445: IFFALSE 55510
// begin weapons := AvailableWeaponList ( k ) ;
55447: LD_ADDR_VAR 0 9
55451: PUSH
55452: LD_VAR 0 6
55456: PPUSH
55457: CALL_OW 478
55461: ST_TO_ADDR
// if not weapons then
55462: LD_VAR 0 9
55466: NOT
55467: IFFALSE 55471
// continue ;
55469: GO 55444
// if weapon in weapons then
55471: LD_VAR 0 8
55475: PUSH
55476: LD_VAR 0 9
55480: IN
55481: IFFALSE 55508
// begin result := [ i , weapon ] ;
55483: LD_ADDR_VAR 0 3
55487: PUSH
55488: LD_VAR 0 4
55492: PUSH
55493: LD_VAR 0 8
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// exit ;
55502: POP
55503: POP
55504: POP
55505: POP
55506: GO 55516
// end ; end ;
55508: GO 55444
55510: POP
55511: POP
// end ;
55512: GO 55330
55514: POP
55515: POP
// end ;
55516: LD_VAR 0 3
55520: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55521: LD_INT 0
55523: PPUSH
// if not side or side > 8 then
55524: LD_VAR 0 3
55528: NOT
55529: PUSH
55530: LD_VAR 0 3
55534: PUSH
55535: LD_INT 8
55537: GREATER
55538: OR
55539: IFFALSE 55543
// exit ;
55541: GO 55602
// if not range then
55543: LD_VAR 0 4
55547: NOT
55548: IFFALSE 55559
// range := - 12 ;
55550: LD_ADDR_VAR 0 4
55554: PUSH
55555: LD_INT 12
55557: NEG
55558: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55559: LD_VAR 0 1
55563: PPUSH
55564: LD_VAR 0 2
55568: PPUSH
55569: LD_VAR 0 3
55573: PPUSH
55574: LD_VAR 0 4
55578: PPUSH
55579: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55583: LD_VAR 0 1
55587: PPUSH
55588: LD_VAR 0 2
55592: PPUSH
55593: LD_VAR 0 3
55597: PPUSH
55598: CALL_OW 331
// end ;
55602: LD_VAR 0 5
55606: RET
// export function Video ( mode ) ; begin
55607: LD_INT 0
55609: PPUSH
// ingame_video = mode ;
55610: LD_ADDR_OWVAR 52
55614: PUSH
55615: LD_VAR 0 1
55619: ST_TO_ADDR
// interface_hidden = mode ;
55620: LD_ADDR_OWVAR 54
55624: PUSH
55625: LD_VAR 0 1
55629: ST_TO_ADDR
// end ;
55630: LD_VAR 0 2
55634: RET
// export function Join ( array , element ) ; begin
55635: LD_INT 0
55637: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55638: LD_ADDR_VAR 0 3
55642: PUSH
55643: LD_VAR 0 1
55647: PPUSH
55648: LD_VAR 0 1
55652: PUSH
55653: LD_INT 1
55655: PLUS
55656: PPUSH
55657: LD_VAR 0 2
55661: PPUSH
55662: CALL_OW 1
55666: ST_TO_ADDR
// end ;
55667: LD_VAR 0 3
55671: RET
// export function JoinUnion ( array , element ) ; begin
55672: LD_INT 0
55674: PPUSH
// result := array union element ;
55675: LD_ADDR_VAR 0 3
55679: PUSH
55680: LD_VAR 0 1
55684: PUSH
55685: LD_VAR 0 2
55689: UNION
55690: ST_TO_ADDR
// end ;
55691: LD_VAR 0 3
55695: RET
// export function GetBehemoths ( side ) ; begin
55696: LD_INT 0
55698: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55699: LD_ADDR_VAR 0 2
55703: PUSH
55704: LD_INT 22
55706: PUSH
55707: LD_VAR 0 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 31
55718: PUSH
55719: LD_INT 25
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PPUSH
55730: CALL_OW 69
55734: ST_TO_ADDR
// end ;
55735: LD_VAR 0 2
55739: RET
// export function Shuffle ( array ) ; var i , index ; begin
55740: LD_INT 0
55742: PPUSH
55743: PPUSH
55744: PPUSH
// result := [ ] ;
55745: LD_ADDR_VAR 0 2
55749: PUSH
55750: EMPTY
55751: ST_TO_ADDR
// if not array then
55752: LD_VAR 0 1
55756: NOT
55757: IFFALSE 55761
// exit ;
55759: GO 55860
// Randomize ;
55761: CALL_OW 10
// for i = array downto 1 do
55765: LD_ADDR_VAR 0 3
55769: PUSH
55770: DOUBLE
55771: LD_VAR 0 1
55775: INC
55776: ST_TO_ADDR
55777: LD_INT 1
55779: PUSH
55780: FOR_DOWNTO
55781: IFFALSE 55858
// begin index := rand ( 1 , array ) ;
55783: LD_ADDR_VAR 0 4
55787: PUSH
55788: LD_INT 1
55790: PPUSH
55791: LD_VAR 0 1
55795: PPUSH
55796: CALL_OW 12
55800: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55801: LD_ADDR_VAR 0 2
55805: PUSH
55806: LD_VAR 0 2
55810: PPUSH
55811: LD_VAR 0 2
55815: PUSH
55816: LD_INT 1
55818: PLUS
55819: PPUSH
55820: LD_VAR 0 1
55824: PUSH
55825: LD_VAR 0 4
55829: ARRAY
55830: PPUSH
55831: CALL_OW 2
55835: ST_TO_ADDR
// array := Delete ( array , index ) ;
55836: LD_ADDR_VAR 0 1
55840: PUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: LD_VAR 0 4
55850: PPUSH
55851: CALL_OW 3
55855: ST_TO_ADDR
// end ;
55856: GO 55780
55858: POP
55859: POP
// end ;
55860: LD_VAR 0 2
55864: RET
// export function GetBaseMaterials ( base ) ; begin
55865: LD_INT 0
55867: PPUSH
// result := [ 0 , 0 , 0 ] ;
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// if not base then
55887: LD_VAR 0 1
55891: NOT
55892: IFFALSE 55896
// exit ;
55894: GO 55945
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55896: LD_ADDR_VAR 0 2
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_INT 1
55908: PPUSH
55909: CALL_OW 275
55913: PUSH
55914: LD_VAR 0 1
55918: PPUSH
55919: LD_INT 2
55921: PPUSH
55922: CALL_OW 275
55926: PUSH
55927: LD_VAR 0 1
55931: PPUSH
55932: LD_INT 3
55934: PPUSH
55935: CALL_OW 275
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// end ;
55945: LD_VAR 0 2
55949: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55950: LD_INT 0
55952: PPUSH
55953: PPUSH
// result := array ;
55954: LD_ADDR_VAR 0 3
55958: PUSH
55959: LD_VAR 0 1
55963: ST_TO_ADDR
// if size > 0 then
55964: LD_VAR 0 2
55968: PUSH
55969: LD_INT 0
55971: GREATER
55972: IFFALSE 56018
// for i := array downto size do
55974: LD_ADDR_VAR 0 4
55978: PUSH
55979: DOUBLE
55980: LD_VAR 0 1
55984: INC
55985: ST_TO_ADDR
55986: LD_VAR 0 2
55990: PUSH
55991: FOR_DOWNTO
55992: IFFALSE 56016
// result := Delete ( result , result ) ;
55994: LD_ADDR_VAR 0 3
55998: PUSH
55999: LD_VAR 0 3
56003: PPUSH
56004: LD_VAR 0 3
56008: PPUSH
56009: CALL_OW 3
56013: ST_TO_ADDR
56014: GO 55991
56016: POP
56017: POP
// end ;
56018: LD_VAR 0 3
56022: RET
// export function ComExit ( unit ) ; var tmp ; begin
56023: LD_INT 0
56025: PPUSH
56026: PPUSH
// if not IsInUnit ( unit ) then
56027: LD_VAR 0 1
56031: PPUSH
56032: CALL_OW 310
56036: NOT
56037: IFFALSE 56041
// exit ;
56039: GO 56101
// tmp := IsInUnit ( unit ) ;
56041: LD_ADDR_VAR 0 3
56045: PUSH
56046: LD_VAR 0 1
56050: PPUSH
56051: CALL_OW 310
56055: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56056: LD_VAR 0 3
56060: PPUSH
56061: CALL_OW 247
56065: PUSH
56066: LD_INT 2
56068: EQUAL
56069: IFFALSE 56082
// ComExitVehicle ( unit ) else
56071: LD_VAR 0 1
56075: PPUSH
56076: CALL_OW 121
56080: GO 56091
// ComExitBuilding ( unit ) ;
56082: LD_VAR 0 1
56086: PPUSH
56087: CALL_OW 122
// result := tmp ;
56091: LD_ADDR_VAR 0 2
56095: PUSH
56096: LD_VAR 0 3
56100: ST_TO_ADDR
// end ;
56101: LD_VAR 0 2
56105: RET
// export function ComExitAll ( units ) ; var i ; begin
56106: LD_INT 0
56108: PPUSH
56109: PPUSH
// if not units then
56110: LD_VAR 0 1
56114: NOT
56115: IFFALSE 56119
// exit ;
56117: GO 56145
// for i in units do
56119: LD_ADDR_VAR 0 3
56123: PUSH
56124: LD_VAR 0 1
56128: PUSH
56129: FOR_IN
56130: IFFALSE 56143
// ComExit ( i ) ;
56132: LD_VAR 0 3
56136: PPUSH
56137: CALL 56023 0 1
56141: GO 56129
56143: POP
56144: POP
// end ;
56145: LD_VAR 0 2
56149: RET
// export function ResetHc ; begin
56150: LD_INT 0
56152: PPUSH
// InitHc ;
56153: CALL_OW 19
// hc_importance := 0 ;
56157: LD_ADDR_OWVAR 32
56161: PUSH
56162: LD_INT 0
56164: ST_TO_ADDR
// end ;
56165: LD_VAR 0 1
56169: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56170: LD_INT 0
56172: PPUSH
56173: PPUSH
56174: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56175: LD_ADDR_VAR 0 6
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_VAR 0 3
56189: PLUS
56190: PUSH
56191: LD_INT 2
56193: DIV
56194: ST_TO_ADDR
// if _x < 0 then
56195: LD_VAR 0 6
56199: PUSH
56200: LD_INT 0
56202: LESS
56203: IFFALSE 56220
// _x := _x * - 1 ;
56205: LD_ADDR_VAR 0 6
56209: PUSH
56210: LD_VAR 0 6
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: MUL
56219: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56220: LD_ADDR_VAR 0 7
56224: PUSH
56225: LD_VAR 0 2
56229: PUSH
56230: LD_VAR 0 4
56234: PLUS
56235: PUSH
56236: LD_INT 2
56238: DIV
56239: ST_TO_ADDR
// if _y < 0 then
56240: LD_VAR 0 7
56244: PUSH
56245: LD_INT 0
56247: LESS
56248: IFFALSE 56265
// _y := _y * - 1 ;
56250: LD_ADDR_VAR 0 7
56254: PUSH
56255: LD_VAR 0 7
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: MUL
56264: ST_TO_ADDR
// result := [ _x , _y ] ;
56265: LD_ADDR_VAR 0 5
56269: PUSH
56270: LD_VAR 0 6
56274: PUSH
56275: LD_VAR 0 7
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// end ;
56284: LD_VAR 0 5
56288: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56289: LD_INT 0
56291: PPUSH
56292: PPUSH
56293: PPUSH
56294: PPUSH
// task := GetTaskList ( unit ) ;
56295: LD_ADDR_VAR 0 7
56299: PUSH
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 437
56309: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56310: LD_VAR 0 7
56314: NOT
56315: PUSH
56316: LD_VAR 0 1
56320: PPUSH
56321: LD_VAR 0 2
56325: PPUSH
56326: CALL_OW 308
56330: NOT
56331: AND
56332: IFFALSE 56336
// exit ;
56334: GO 56454
// if IsInArea ( unit , area ) then
56336: LD_VAR 0 1
56340: PPUSH
56341: LD_VAR 0 2
56345: PPUSH
56346: CALL_OW 308
56350: IFFALSE 56368
// begin ComMoveToArea ( unit , goAway ) ;
56352: LD_VAR 0 1
56356: PPUSH
56357: LD_VAR 0 3
56361: PPUSH
56362: CALL_OW 113
// exit ;
56366: GO 56454
// end ; if task [ 1 ] [ 1 ] <> M then
56368: LD_VAR 0 7
56372: PUSH
56373: LD_INT 1
56375: ARRAY
56376: PUSH
56377: LD_INT 1
56379: ARRAY
56380: PUSH
56381: LD_STRING M
56383: NONEQUAL
56384: IFFALSE 56388
// exit ;
56386: GO 56454
// x := task [ 1 ] [ 2 ] ;
56388: LD_ADDR_VAR 0 5
56392: PUSH
56393: LD_VAR 0 7
56397: PUSH
56398: LD_INT 1
56400: ARRAY
56401: PUSH
56402: LD_INT 2
56404: ARRAY
56405: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56406: LD_ADDR_VAR 0 6
56410: PUSH
56411: LD_VAR 0 7
56415: PUSH
56416: LD_INT 1
56418: ARRAY
56419: PUSH
56420: LD_INT 3
56422: ARRAY
56423: ST_TO_ADDR
// if InArea ( x , y , area ) then
56424: LD_VAR 0 5
56428: PPUSH
56429: LD_VAR 0 6
56433: PPUSH
56434: LD_VAR 0 2
56438: PPUSH
56439: CALL_OW 309
56443: IFFALSE 56454
// ComStop ( unit ) ;
56445: LD_VAR 0 1
56449: PPUSH
56450: CALL_OW 141
// end ;
56454: LD_VAR 0 4
56458: RET
// export function Abs ( value ) ; begin
56459: LD_INT 0
56461: PPUSH
// result := value ;
56462: LD_ADDR_VAR 0 2
56466: PUSH
56467: LD_VAR 0 1
56471: ST_TO_ADDR
// if value < 0 then
56472: LD_VAR 0 1
56476: PUSH
56477: LD_INT 0
56479: LESS
56480: IFFALSE 56497
// result := value * - 1 ;
56482: LD_ADDR_VAR 0 2
56486: PUSH
56487: LD_VAR 0 1
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: MUL
56496: ST_TO_ADDR
// end ;
56497: LD_VAR 0 2
56501: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56502: LD_INT 0
56504: PPUSH
56505: PPUSH
56506: PPUSH
56507: PPUSH
56508: PPUSH
56509: PPUSH
56510: PPUSH
56511: PPUSH
// if not unit or not building then
56512: LD_VAR 0 1
56516: NOT
56517: PUSH
56518: LD_VAR 0 2
56522: NOT
56523: OR
56524: IFFALSE 56528
// exit ;
56526: GO 56754
// x := GetX ( building ) ;
56528: LD_ADDR_VAR 0 4
56532: PUSH
56533: LD_VAR 0 2
56537: PPUSH
56538: CALL_OW 250
56542: ST_TO_ADDR
// y := GetY ( building ) ;
56543: LD_ADDR_VAR 0 6
56547: PUSH
56548: LD_VAR 0 2
56552: PPUSH
56553: CALL_OW 251
56557: ST_TO_ADDR
// d := GetDir ( building ) ;
56558: LD_ADDR_VAR 0 8
56562: PUSH
56563: LD_VAR 0 2
56567: PPUSH
56568: CALL_OW 254
56572: ST_TO_ADDR
// r := 4 ;
56573: LD_ADDR_VAR 0 9
56577: PUSH
56578: LD_INT 4
56580: ST_TO_ADDR
// for i := 1 to 5 do
56581: LD_ADDR_VAR 0 10
56585: PUSH
56586: DOUBLE
56587: LD_INT 1
56589: DEC
56590: ST_TO_ADDR
56591: LD_INT 5
56593: PUSH
56594: FOR_TO
56595: IFFALSE 56752
// begin _x := ShiftX ( x , d , r + i ) ;
56597: LD_ADDR_VAR 0 5
56601: PUSH
56602: LD_VAR 0 4
56606: PPUSH
56607: LD_VAR 0 8
56611: PPUSH
56612: LD_VAR 0 9
56616: PUSH
56617: LD_VAR 0 10
56621: PLUS
56622: PPUSH
56623: CALL_OW 272
56627: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56628: LD_ADDR_VAR 0 7
56632: PUSH
56633: LD_VAR 0 6
56637: PPUSH
56638: LD_VAR 0 8
56642: PPUSH
56643: LD_VAR 0 9
56647: PUSH
56648: LD_VAR 0 10
56652: PLUS
56653: PPUSH
56654: CALL_OW 273
56658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56659: LD_VAR 0 5
56663: PPUSH
56664: LD_VAR 0 7
56668: PPUSH
56669: CALL_OW 488
56673: PUSH
56674: LD_VAR 0 5
56678: PPUSH
56679: LD_VAR 0 7
56683: PPUSH
56684: CALL_OW 428
56688: PPUSH
56689: CALL_OW 247
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: IN
56704: NOT
56705: AND
56706: IFFALSE 56750
// begin ComMoveXY ( unit , _x , _y ) ;
56708: LD_VAR 0 1
56712: PPUSH
56713: LD_VAR 0 5
56717: PPUSH
56718: LD_VAR 0 7
56722: PPUSH
56723: CALL_OW 111
// result := [ _x , _y ] ;
56727: LD_ADDR_VAR 0 3
56731: PUSH
56732: LD_VAR 0 5
56736: PUSH
56737: LD_VAR 0 7
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// exit ;
56746: POP
56747: POP
56748: GO 56754
// end ; end ;
56750: GO 56594
56752: POP
56753: POP
// end ;
56754: LD_VAR 0 3
56758: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56759: LD_INT 0
56761: PPUSH
56762: PPUSH
56763: PPUSH
// result := 0 ;
56764: LD_ADDR_VAR 0 3
56768: PUSH
56769: LD_INT 0
56771: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56772: LD_VAR 0 1
56776: PUSH
56777: LD_INT 0
56779: LESS
56780: PUSH
56781: LD_VAR 0 1
56785: PUSH
56786: LD_INT 8
56788: GREATER
56789: OR
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 0
56798: LESS
56799: OR
56800: PUSH
56801: LD_VAR 0 2
56805: PUSH
56806: LD_INT 8
56808: GREATER
56809: OR
56810: IFFALSE 56814
// exit ;
56812: GO 56889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56814: LD_ADDR_VAR 0 4
56818: PUSH
56819: LD_INT 22
56821: PUSH
56822: LD_VAR 0 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PPUSH
56831: CALL_OW 69
56835: PUSH
56836: FOR_IN
56837: IFFALSE 56887
// begin un := UnitShoot ( i ) ;
56839: LD_ADDR_VAR 0 5
56843: PUSH
56844: LD_VAR 0 4
56848: PPUSH
56849: CALL_OW 504
56853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56854: LD_VAR 0 5
56858: PPUSH
56859: CALL_OW 255
56863: PUSH
56864: LD_VAR 0 1
56868: EQUAL
56869: IFFALSE 56885
// begin result := un ;
56871: LD_ADDR_VAR 0 3
56875: PUSH
56876: LD_VAR 0 5
56880: ST_TO_ADDR
// exit ;
56881: POP
56882: POP
56883: GO 56889
// end ; end ;
56885: GO 56836
56887: POP
56888: POP
// end ;
56889: LD_VAR 0 3
56893: RET
// export function GetCargoBay ( units ) ; begin
56894: LD_INT 0
56896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56897: LD_ADDR_VAR 0 2
56901: PUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 34
56912: PUSH
56913: LD_INT 12
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 34
56922: PUSH
56923: LD_INT 51
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 34
56932: PUSH
56933: LD_INT 32
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 34
56942: PUSH
56943: LD_EXP 75
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: PPUSH
56959: CALL_OW 72
56963: ST_TO_ADDR
// end ; end_of_file
56964: LD_VAR 0 2
56968: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
56969: LD_INT 0
56971: PPUSH
// ar_miner := 81 ;
56972: LD_ADDR_EXP 81
56976: PUSH
56977: LD_INT 81
56979: ST_TO_ADDR
// ar_crane := 88 ;
56980: LD_ADDR_EXP 80
56984: PUSH
56985: LD_INT 88
56987: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
56988: LD_ADDR_EXP 75
56992: PUSH
56993: LD_INT 89
56995: ST_TO_ADDR
// us_hack := 99 ;
56996: LD_ADDR_EXP 76
57000: PUSH
57001: LD_INT 99
57003: ST_TO_ADDR
// us_artillery := 97 ;
57004: LD_ADDR_EXP 77
57008: PUSH
57009: LD_INT 97
57011: ST_TO_ADDR
// ar_bio_bomb := 91 ;
57012: LD_ADDR_EXP 78
57016: PUSH
57017: LD_INT 91
57019: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
57020: LD_ADDR_EXP 79
57024: PUSH
57025: LD_INT 92
57027: ST_TO_ADDR
// ru_radar := 98 ;
57028: LD_ADDR_EXP 74
57032: PUSH
57033: LD_INT 98
57035: ST_TO_ADDR
// tech_Artillery := 80 ;
57036: LD_ADDR_EXP 82
57040: PUSH
57041: LD_INT 80
57043: ST_TO_ADDR
// tech_RadMat := 81 ;
57044: LD_ADDR_EXP 83
57048: PUSH
57049: LD_INT 81
57051: ST_TO_ADDR
// tech_BasicTools := 82 ;
57052: LD_ADDR_EXP 84
57056: PUSH
57057: LD_INT 82
57059: ST_TO_ADDR
// tech_Cargo := 83 ;
57060: LD_ADDR_EXP 85
57064: PUSH
57065: LD_INT 83
57067: ST_TO_ADDR
// tech_Track := 84 ;
57068: LD_ADDR_EXP 86
57072: PUSH
57073: LD_INT 84
57075: ST_TO_ADDR
// tech_Crane := 85 ;
57076: LD_ADDR_EXP 87
57080: PUSH
57081: LD_INT 85
57083: ST_TO_ADDR
// tech_Bulldozer := 86 ;
57084: LD_ADDR_EXP 88
57088: PUSH
57089: LD_INT 86
57091: ST_TO_ADDR
// tech_Hovercraft := 87 ;
57092: LD_ADDR_EXP 89
57096: PUSH
57097: LD_INT 87
57099: ST_TO_ADDR
// class_mastodont := 31 ;
57100: LD_ADDR_EXP 90
57104: PUSH
57105: LD_INT 31
57107: ST_TO_ADDR
// class_horse := 21 ;
57108: LD_ADDR_EXP 91
57112: PUSH
57113: LD_INT 21
57115: ST_TO_ADDR
// end ;
57116: LD_VAR 0 1
57120: RET
// every 1 do
57121: GO 57123
57123: DISABLE
// InitGlobalVariables ; end_of_file
57124: CALL 56969 0 0
57128: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
57129: LD_VAR 0 1
57133: PPUSH
57134: LD_VAR 0 2
57138: PPUSH
57139: LD_VAR 0 3
57143: PPUSH
57144: LD_VAR 0 4
57148: PPUSH
57149: LD_VAR 0 5
57153: PPUSH
57154: LD_VAR 0 6
57158: PPUSH
57159: CALL 1963 0 6
// end ;
57163: PPOPN 6
57165: END
