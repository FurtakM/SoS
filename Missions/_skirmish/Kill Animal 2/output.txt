// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 77
// Start ;
  73: CALL 90 0 0
// Counter ;
  77: CALL 305 0 0
// PrepareNature ;
  81: CALL 552 0 0
// InitPlayers ;
  85: CALL 1127 0 0
// end ;
  89: END
// export level , test ; function Start ; begin
  90: LD_INT 0
  92: PPUSH
// case Query ( infos ) of 1 :
  93: LD_STRING infos
  95: PPUSH
  96: CALL_OW 97
 100: PUSH
 101: LD_INT 1
 103: DOUBLE
 104: EQUAL
 105: IFTRUE 109
 107: GO 112
 109: POP
// ; end ;
 110: GO 113
 112: POP
// case Query ( level ) of 1 :
 113: LD_STRING level
 115: PPUSH
 116: CALL_OW 97
 120: PUSH
 121: LD_INT 1
 123: DOUBLE
 124: EQUAL
 125: IFTRUE 129
 127: GO 140
 129: POP
// level := 1 ; 2 :
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_INT 1
 137: ST_TO_ADDR
 138: GO 179
 140: LD_INT 2
 142: DOUBLE
 143: EQUAL
 144: IFTRUE 148
 146: GO 159
 148: POP
// level := 2 ; 3 :
 149: LD_ADDR_EXP 1
 153: PUSH
 154: LD_INT 2
 156: ST_TO_ADDR
 157: GO 179
 159: LD_INT 3
 161: DOUBLE
 162: EQUAL
 163: IFTRUE 167
 165: GO 178
 167: POP
// level := 3 ; end ;
 168: LD_ADDR_EXP 1
 172: PUSH
 173: LD_INT 3
 175: ST_TO_ADDR
 176: GO 179
 178: POP
// case Query ( difficulty ) of 1 :
 179: LD_STRING difficulty
 181: PPUSH
 182: CALL_OW 97
 186: PUSH
 187: LD_INT 1
 189: DOUBLE
 190: EQUAL
 191: IFTRUE 195
 193: GO 206
 195: POP
// difficulty := 1 ; 2 :
 196: LD_ADDR_OWVAR 67
 200: PUSH
 201: LD_INT 1
 203: ST_TO_ADDR
 204: GO 245
 206: LD_INT 2
 208: DOUBLE
 209: EQUAL
 210: IFTRUE 214
 212: GO 225
 214: POP
// difficulty := 2 ; 3 :
 215: LD_ADDR_OWVAR 67
 219: PUSH
 220: LD_INT 2
 222: ST_TO_ADDR
 223: GO 245
 225: LD_INT 3
 227: DOUBLE
 228: EQUAL
 229: IFTRUE 233
 231: GO 244
 233: POP
// difficulty := 3 ; end ;
 234: LD_ADDR_OWVAR 67
 238: PUSH
 239: LD_INT 3
 241: ST_TO_ADDR
 242: GO 245
 244: POP
// case Query ( class ) of 1 :
 245: LD_STRING class
 247: PPUSH
 248: CALL_OW 97
 252: PUSH
 253: LD_INT 1
 255: DOUBLE
 256: EQUAL
 257: IFTRUE 261
 259: GO 272
 261: POP
// class_1 := class_soldier ; 2 :
 262: LD_ADDR_EXP 25
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
 270: GO 292
 272: LD_INT 2
 274: DOUBLE
 275: EQUAL
 276: IFTRUE 280
 278: GO 291
 280: POP
// class_1 := class_sniper ; end ;
 281: LD_ADDR_EXP 25
 285: PUSH
 286: LD_INT 5
 288: ST_TO_ADDR
 289: GO 292
 291: POP
// music_nat := 3 ;
 292: LD_ADDR_OWVAR 71
 296: PUSH
 297: LD_INT 3
 299: ST_TO_ADDR
// end ;
 300: LD_VAR 0 1
 304: RET
// export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 305: LD_INT 0
 307: PPUSH
// level := 3 ;
 308: LD_ADDR_EXP 1
 312: PUSH
 313: LD_INT 3
 315: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 316: LD_ADDR_EXP 3
 320: PUSH
 321: LD_INT 10
 323: PUSH
 324: LD_INT 15
 326: PUSH
 327: LD_INT 20
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: LD_EXP 1
 339: ARRAY
 340: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 341: LD_ADDR_EXP 4
 345: PUSH
 346: LD_INT 8
 348: PUSH
 349: LD_INT 12
 351: PUSH
 352: LD_INT 16
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: LD_EXP 1
 364: ARRAY
 365: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 366: LD_ADDR_EXP 5
 370: PUSH
 371: LD_INT 5
 373: PUSH
 374: LD_INT 10
 376: PUSH
 377: LD_INT 15
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_EXP 1
 389: ARRAY
 390: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 391: LD_ADDR_EXP 6
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 3
 401: PUSH
 402: LD_INT 5
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_EXP 1
 414: ARRAY
 415: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 416: LD_ADDR_EXP 7
 420: PUSH
 421: LD_INT 4
 423: PUSH
 424: LD_INT 7
 426: PUSH
 427: LD_INT 10
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_EXP 1
 439: ARRAY
 440: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 441: LD_ADDR_EXP 8
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: LD_INT 2
 451: PUSH
 452: LD_INT 3
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_EXP 1
 464: ARRAY
 465: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 466: LD_ADDR_EXP 16
 470: PUSH
 471: LD_INT 1
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_EXP 1
 489: ARRAY
 490: ST_TO_ADDR
// PE := 5 ;
 491: LD_ADDR_EXP 10
 495: PUSH
 496: LD_INT 5
 498: ST_TO_ADDR
// PB := 10 ;
 499: LD_ADDR_EXP 11
 503: PUSH
 504: LD_INT 10
 506: ST_TO_ADDR
// PT := 50 ;
 507: LD_ADDR_EXP 12
 511: PUSH
 512: LD_INT 50
 514: ST_TO_ADDR
// PF := 100 ;
 515: LD_ADDR_EXP 13
 519: PUSH
 520: LD_INT 100
 522: ST_TO_ADDR
// PH := 120 ;
 523: LD_ADDR_EXP 14
 527: PUSH
 528: LD_INT 120
 530: ST_TO_ADDR
// PM := 300 ;
 531: LD_ADDR_EXP 15
 535: PUSH
 536: LD_INT 300
 538: ST_TO_ADDR
// PA := 1000 ;
 539: LD_ADDR_EXP 16
 543: PUSH
 544: LD_INT 1000
 546: ST_TO_ADDR
// end ; end_of_file
 547: LD_VAR 0 1
 551: RET
// export function PrepareNature ; var i , animal ; begin
 552: LD_INT 0
 554: PPUSH
 555: PPUSH
 556: PPUSH
// uc_side = 0 ;
 557: LD_ADDR_OWVAR 20
 561: PUSH
 562: LD_INT 0
 564: ST_TO_ADDR
// uc_nation = 0 ;
 565: LD_ADDR_OWVAR 21
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// for i = 1 to B1 do
 573: LD_ADDR_VAR 0 2
 577: PUSH
 578: DOUBLE
 579: LD_INT 1
 581: DEC
 582: ST_TO_ADDR
 583: LD_EXP 4
 587: PUSH
 588: FOR_TO
 589: IFFALSE 642
// begin hc_class = 18 ;
 591: LD_ADDR_OWVAR 28
 595: PUSH
 596: LD_INT 18
 598: ST_TO_ADDR
// hc_gallery = sandnature ;
 599: LD_ADDR_OWVAR 33
 603: PUSH
 604: LD_STRING sandnature
 606: ST_TO_ADDR
// hc_face_number = 1 ;
 607: LD_ADDR_OWVAR 34
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// animal := CreateHuman ;
 615: LD_ADDR_VAR 0 3
 619: PUSH
 620: CALL_OW 44
 624: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 625: LD_VAR 0 3
 629: PPUSH
 630: LD_INT 10
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 588
 642: POP
 643: POP
// for i = 1 to T1 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_EXP 5
 658: PUSH
 659: FOR_TO
 660: IFFALSE 729
// begin hc_class = class_tiger ;
 662: LD_ADDR_OWVAR 28
 666: PUSH
 667: LD_INT 14
 669: ST_TO_ADDR
// hc_gallery = sandnature ;
 670: LD_ADDR_OWVAR 33
 674: PUSH
 675: LD_STRING sandnature
 677: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 678: LD_ADDR_OWVAR 35
 682: PUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_INT 50
 688: PPUSH
 689: CALL_OW 12
 693: ST_TO_ADDR
// hc_face_number = 3 ;
 694: LD_ADDR_OWVAR 34
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// animal := CreateHuman ;
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: CALL_OW 44
 711: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 712: LD_VAR 0 3
 716: PPUSH
 717: LD_INT 10
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 659
 729: POP
 730: POP
// for i = 1 to T1 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_EXP 5
 745: PUSH
 746: FOR_TO
 747: IFFALSE 808
// begin hc_class = 21 ;
 749: LD_ADDR_OWVAR 28
 753: PUSH
 754: LD_INT 21
 756: ST_TO_ADDR
// hc_gallery = sandnature ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING sandnature
 764: ST_TO_ADDR
// hc_agressivity = 0 ;
 765: LD_ADDR_OWVAR 35
 769: PUSH
 770: LD_INT 0
 772: ST_TO_ADDR
// hc_face_number = 5 ;
 773: LD_ADDR_OWVAR 34
 777: PUSH
 778: LD_INT 5
 780: ST_TO_ADDR
// animal := CreateHuman ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 10
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 746
 808: POP
 809: POP
// for i = 1 to E1 do
 810: LD_ADDR_VAR 0 2
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_EXP 3
 824: PUSH
 825: FOR_TO
 826: IFFALSE 879
// begin hc_class = 13 ;
 828: LD_ADDR_OWVAR 28
 832: PUSH
 833: LD_INT 13
 835: ST_TO_ADDR
// hc_gallery = sandnature ;
 836: LD_ADDR_OWVAR 33
 840: PUSH
 841: LD_STRING sandnature
 843: ST_TO_ADDR
// hc_face_number = 4 ;
 844: LD_ADDR_OWVAR 34
 848: PUSH
 849: LD_INT 4
 851: ST_TO_ADDR
// animal := CreateHuman ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: CALL_OW 44
 861: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 862: LD_VAR 0 3
 866: PPUSH
 867: LD_INT 10
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// end ;
 877: GO 825
 879: POP
 880: POP
// for i = 1 to F1 do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_EXP 6
 895: PUSH
 896: FOR_TO
 897: IFFALSE 950
// begin hc_class = 20 ;
 899: LD_ADDR_OWVAR 28
 903: PUSH
 904: LD_INT 20
 906: ST_TO_ADDR
// hc_gallery = sandnature ;
 907: LD_ADDR_OWVAR 33
 911: PUSH
 912: LD_STRING sandnature
 914: ST_TO_ADDR
// hc_face_number = 2 ;
 915: LD_ADDR_OWVAR 34
 919: PUSH
 920: LD_INT 2
 922: ST_TO_ADDR
// animal := CreateHuman ;
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: CALL_OW 44
 932: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 933: LD_VAR 0 3
 937: PPUSH
 938: LD_INT 9
 940: PPUSH
 941: LD_INT 0
 943: PPUSH
 944: CALL_OW 49
// end ;
 948: GO 896
 950: POP
 951: POP
// for i = 1 to M1 do
 952: LD_ADDR_VAR 0 2
 956: PUSH
 957: DOUBLE
 958: LD_INT 1
 960: DEC
 961: ST_TO_ADDR
 962: LD_EXP 8
 966: PUSH
 967: FOR_TO
 968: IFFALSE 1013
// begin vc_chassis := 31 ;
 970: LD_ADDR_OWVAR 37
 974: PUSH
 975: LD_INT 31
 977: ST_TO_ADDR
// vc_control := control_rider ;
 978: LD_ADDR_OWVAR 38
 982: PUSH
 983: LD_INT 4
 985: ST_TO_ADDR
// animal := CreateVehicle ;
 986: LD_ADDR_VAR 0 3
 990: PUSH
 991: CALL_OW 45
 995: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 996: LD_VAR 0 3
1000: PPUSH
1001: LD_INT 10
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 49
// end ;
1011: GO 967
1013: POP
1014: POP
// hc_gallery :=  ;
1015: LD_ADDR_OWVAR 33
1019: PUSH
1020: LD_STRING 
1022: ST_TO_ADDR
// hc_class := class_apeman ;
1023: LD_ADDR_OWVAR 28
1027: PUSH
1028: LD_INT 12
1030: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
1031: LD_ADDR_OWVAR 29
1035: PUSH
1036: LD_INT 15
1038: PUSH
1039: LD_INT 15
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
1046: LD_ADDR_OWVAR 31
1050: PUSH
1051: LD_INT 10
1053: PUSH
1054: LD_INT 10
1056: PUSH
1057: LD_INT 10
1059: PUSH
1060: LD_INT 10
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: ST_TO_ADDR
// hc_name := White Apeman ;
1069: LD_ADDR_OWVAR 26
1073: PUSH
1074: LD_STRING White Apeman
1076: ST_TO_ADDR
// for i = 1 to 3 do
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: DOUBLE
1083: LD_INT 1
1085: DEC
1086: ST_TO_ADDR
1087: LD_INT 3
1089: PUSH
1090: FOR_TO
1091: IFFALSE 1120
// begin animal := CreateHuman ;
1093: LD_ADDR_VAR 0 3
1097: PUSH
1098: CALL_OW 44
1102: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
1103: LD_VAR 0 3
1107: PPUSH
1108: LD_INT 11
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// end ;
1118: GO 1090
1120: POP
1121: POP
// end ; end_of_file
1122: LD_VAR 0 1
1126: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
1127: LD_INT 0
1129: PPUSH
// score_player := 0 ;
1130: LD_ADDR_EXP 28
1134: PUSH
1135: LD_INT 0
1137: ST_TO_ADDR
// score_enemy1 := 0 ;
1138: LD_ADDR_EXP 29
1142: PUSH
1143: LD_INT 0
1145: ST_TO_ADDR
// score_enemy2 := 0 ;
1146: LD_ADDR_EXP 30
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// score_enemy3 := 0 ;
1154: LD_ADDR_EXP 31
1158: PUSH
1159: LD_INT 0
1161: ST_TO_ADDR
// score_enemy4 := 0 ;
1162: LD_ADDR_EXP 32
1166: PUSH
1167: LD_INT 0
1169: ST_TO_ADDR
// score_enemy5 := 0 ;
1170: LD_ADDR_EXP 33
1174: PUSH
1175: LD_INT 0
1177: ST_TO_ADDR
// score_enemy6 := 0 ;
1178: LD_ADDR_EXP 34
1182: PUSH
1183: LD_INT 0
1185: ST_TO_ADDR
// score_enemy7 := 0 ;
1186: LD_ADDR_EXP 35
1190: PUSH
1191: LD_INT 0
1193: ST_TO_ADDR
// if difficulty > 1 then
1194: LD_OWVAR 67
1198: PUSH
1199: LD_INT 1
1201: GREATER
1202: IFFALSE 1214
// class_2 := class_sniper else
1204: LD_ADDR_EXP 26
1208: PUSH
1209: LD_INT 5
1211: ST_TO_ADDR
1212: GO 1222
// class_2 := class_soldier ;
1214: LD_ADDR_EXP 26
1218: PUSH
1219: LD_INT 1
1221: ST_TO_ADDR
// uc_side := 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// uc_nation := 1 ;
1230: LD_ADDR_OWVAR 21
1234: PUSH
1235: LD_INT 1
1237: ST_TO_ADDR
// hc_name :=  ;
1238: LD_ADDR_OWVAR 26
1242: PUSH
1243: LD_STRING 
1245: ST_TO_ADDR
// hc_sex := sex_male ;
1246: LD_ADDR_OWVAR 27
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1254: LD_ADDR_OWVAR 29
1258: PUSH
1259: LD_INT 12
1261: PUSH
1262: LD_INT 11
1264: PUSH
1265: LD_INT 10
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_OWVAR 67
1277: ARRAY
1278: PUSH
1279: LD_INT 10
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: ST_TO_ADDR
// hc_class := class_1 ;
1286: LD_ADDR_OWVAR 28
1290: PUSH
1291: LD_EXP 25
1295: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1296: LD_ADDR_OWVAR 31
1300: PUSH
1301: LD_INT 10
1303: PUSH
1304: LD_INT 7
1306: PUSH
1307: LD_INT 5
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_OWVAR 67
1319: ARRAY
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: LD_INT 0
1326: PUSH
1327: LD_INT 0
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// hc_gallery :=  ;
1336: LD_ADDR_OWVAR 33
1340: PUSH
1341: LD_STRING 
1343: ST_TO_ADDR
// player := CreateHuman ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: CALL_OW 44
1353: ST_TO_ADDR
// uc_side := 2 ;
1354: LD_ADDR_OWVAR 20
1358: PUSH
1359: LD_INT 2
1361: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_INT 5
1369: PUSH
1370: LD_INT 1
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 1
1379: PPUSH
1380: LD_INT 2
1382: PPUSH
1383: CALL_OW 12
1387: ARRAY
1388: ST_TO_ADDR
// hc_sex := sex_male ;
1389: LD_ADDR_OWVAR 27
1393: PUSH
1394: LD_INT 1
1396: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1397: LD_ADDR_OWVAR 29
1401: PUSH
1402: LD_INT 11
1404: PUSH
1405: LD_INT 12
1407: PUSH
1408: LD_INT 13
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: LD_OWVAR 67
1420: ARRAY
1421: PUSH
1422: LD_INT 10
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: ST_TO_ADDR
// hc_class := class_2 ;
1429: LD_ADDR_OWVAR 28
1433: PUSH
1434: LD_EXP 26
1438: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1439: LD_ADDR_OWVAR 31
1443: PUSH
1444: LD_INT 8
1446: PUSH
1447: LD_INT 9
1449: PUSH
1450: LD_INT 10
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: LD_OWVAR 67
1462: ARRAY
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: LD_INT 0
1469: PUSH
1470: LD_INT 0
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: ST_TO_ADDR
// hc_gallery :=  ;
1479: LD_ADDR_OWVAR 33
1483: PUSH
1484: LD_STRING 
1486: ST_TO_ADDR
// player_1 := CreateHuman ;
1487: LD_ADDR_EXP 17
1491: PUSH
1492: CALL_OW 44
1496: ST_TO_ADDR
// uc_side := 3 ;
1497: LD_ADDR_OWVAR 20
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// uc_nation := 1 ;
1505: LD_ADDR_OWVAR 21
1509: PUSH
1510: LD_INT 1
1512: ST_TO_ADDR
// hc_sex := sex_male ;
1513: LD_ADDR_OWVAR 27
1517: PUSH
1518: LD_INT 1
1520: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1521: LD_ADDR_OWVAR 29
1525: PUSH
1526: LD_INT 10
1528: PUSH
1529: LD_INT 11
1531: PUSH
1532: LD_INT 12
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_OWVAR 67
1544: ARRAY
1545: PUSH
1546: LD_INT 10
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_INT 5
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 2
1573: PPUSH
1574: CALL_OW 12
1578: ARRAY
1579: ST_TO_ADDR
// hc_class := class_2 ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_EXP 26
1589: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1590: LD_ADDR_OWVAR 31
1594: PUSH
1595: LD_INT 5
1597: PUSH
1598: LD_INT 7
1600: PUSH
1601: LD_INT 10
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_OWVAR 67
1613: ARRAY
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: LD_INT 0
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: ST_TO_ADDR
// hc_gallery :=  ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING 
1637: ST_TO_ADDR
// player_2 := CreateHuman ;
1638: LD_ADDR_EXP 18
1642: PUSH
1643: CALL_OW 44
1647: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1648: LD_ADDR_EXP 26
1652: PUSH
1653: LD_INT 5
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 1
1665: PPUSH
1666: LD_INT 2
1668: PPUSH
1669: CALL_OW 12
1673: ARRAY
1674: ST_TO_ADDR
// hc_class := class_2 ;
1675: LD_ADDR_OWVAR 28
1679: PUSH
1680: LD_EXP 26
1684: ST_TO_ADDR
// player_3 := CreateHuman ;
1685: LD_ADDR_EXP 20
1689: PUSH
1690: CALL_OW 44
1694: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1695: LD_ADDR_EXP 26
1699: PUSH
1700: LD_INT 5
1702: PUSH
1703: LD_INT 1
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 1
1712: PPUSH
1713: LD_INT 2
1715: PPUSH
1716: CALL_OW 12
1720: ARRAY
1721: ST_TO_ADDR
// hc_class := class_2 ;
1722: LD_ADDR_OWVAR 28
1726: PUSH
1727: LD_EXP 26
1731: ST_TO_ADDR
// player_4 := CreateHuman ;
1732: LD_ADDR_EXP 21
1736: PUSH
1737: CALL_OW 44
1741: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1742: LD_ADDR_EXP 26
1746: PUSH
1747: LD_INT 5
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 1
1759: PPUSH
1760: LD_INT 2
1762: PPUSH
1763: CALL_OW 12
1767: ARRAY
1768: ST_TO_ADDR
// hc_class := class_2 ;
1769: LD_ADDR_OWVAR 28
1773: PUSH
1774: LD_EXP 26
1778: ST_TO_ADDR
// player_5 := CreateHuman ;
1779: LD_ADDR_EXP 22
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1789: LD_ADDR_EXP 26
1793: PUSH
1794: LD_INT 5
1796: PUSH
1797: LD_INT 1
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 1
1806: PPUSH
1807: LD_INT 2
1809: PPUSH
1810: CALL_OW 12
1814: ARRAY
1815: ST_TO_ADDR
// hc_class := class_2 ;
1816: LD_ADDR_OWVAR 28
1820: PUSH
1821: LD_EXP 26
1825: ST_TO_ADDR
// player_6 := CreateHuman ;
1826: LD_ADDR_EXP 23
1830: PUSH
1831: CALL_OW 44
1835: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1836: LD_ADDR_EXP 26
1840: PUSH
1841: LD_INT 5
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_INT 2
1856: PPUSH
1857: CALL_OW 12
1861: ARRAY
1862: ST_TO_ADDR
// hc_class := class_2 ;
1863: LD_ADDR_OWVAR 28
1867: PUSH
1868: LD_EXP 26
1872: ST_TO_ADDR
// player_7 := CreateHuman ;
1873: LD_ADDR_EXP 24
1877: PUSH
1878: CALL_OW 44
1882: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1883: LD_EXP 17
1887: PPUSH
1888: LD_INT 1
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1898: LD_EXP 18
1902: PPUSH
1903: LD_INT 2
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1913: LD_EXP 19
1917: PPUSH
1918: LD_INT 4
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1928: LD_EXP 20
1932: PPUSH
1933: LD_INT 3
1935: PPUSH
1936: LD_INT 0
1938: PPUSH
1939: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1943: LD_EXP 21
1947: PPUSH
1948: LD_INT 5
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1958: LD_EXP 22
1962: PPUSH
1963: LD_INT 6
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1973: LD_EXP 23
1977: PPUSH
1978: LD_INT 7
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1988: LD_EXP 24
1992: PPUSH
1993: LD_INT 8
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 49
// CenterNowOnUnits ( player ) ;
2003: LD_EXP 19
2007: PPUSH
2008: CALL_OW 87
// end ;
2012: LD_VAR 0 1
2016: RET
// every 0 0$01 trigger player do var i , un , tab ;
2017: LD_EXP 19
2021: IFFALSE 2350
2023: GO 2025
2025: DISABLE
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// begin enable ;
2031: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: LD_EXP 17
2041: PUSH
2042: LD_EXP 18
2046: PUSH
2047: LD_EXP 20
2051: PUSH
2052: LD_EXP 21
2056: PUSH
2057: LD_EXP 22
2061: PUSH
2062: LD_EXP 23
2066: PUSH
2067: LD_EXP 24
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: LD_VAR 0 3
2090: PPUSH
2091: LD_INT 24
2093: PUSH
2094: LD_INT 250
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PPUSH
2101: CALL_OW 72
2105: ST_TO_ADDR
// for i = 1 to un do
2106: LD_ADDR_VAR 0 1
2110: PUSH
2111: DOUBLE
2112: LD_INT 1
2114: DEC
2115: ST_TO_ADDR
2116: LD_VAR 0 2
2120: PUSH
2121: FOR_TO
2122: IFFALSE 2348
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
2124: LD_VAR 0 2
2128: PUSH
2129: LD_VAR 0 1
2133: ARRAY
2134: PPUSH
2135: CALL_OW 300
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_VAR 0 1
2149: ARRAY
2150: PPUSH
2151: CALL_OW 314
2155: NOT
2156: AND
2157: IFFALSE 2346
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
2159: LD_INT 22
2161: PUSH
2162: LD_INT 0
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 69
2173: PPUSH
2174: LD_VAR 0 2
2178: PUSH
2179: LD_VAR 0 1
2183: ARRAY
2184: PPUSH
2185: CALL_OW 74
2189: PPUSH
2190: LD_VAR 0 2
2194: PUSH
2195: LD_VAR 0 1
2199: ARRAY
2200: PPUSH
2201: CALL_OW 296
2205: PUSH
2206: LD_INT 8
2208: GREATER
2209: IFFALSE 2300
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2211: LD_VAR 0 2
2215: PUSH
2216: LD_VAR 0 1
2220: ARRAY
2221: PPUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 0
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PPUSH
2232: CALL_OW 69
2236: PPUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_VAR 0 1
2246: ARRAY
2247: PPUSH
2248: CALL_OW 74
2252: PPUSH
2253: CALL_OW 250
2257: PPUSH
2258: LD_INT 22
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: PPUSH
2273: LD_VAR 0 2
2277: PUSH
2278: LD_VAR 0 1
2282: ARRAY
2283: PPUSH
2284: CALL_OW 74
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: CALL_OW 111
2298: GO 2346
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2300: LD_VAR 0 2
2304: PUSH
2305: LD_VAR 0 1
2309: ARRAY
2310: PPUSH
2311: LD_INT 22
2313: PUSH
2314: LD_INT 0
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: CALL_OW 69
2325: PPUSH
2326: LD_VAR 0 2
2330: PUSH
2331: LD_VAR 0 1
2335: ARRAY
2336: PPUSH
2337: CALL_OW 74
2341: PPUSH
2342: CALL_OW 115
// end ;
2346: GO 2121
2348: POP
2349: POP
// end ; end_of_file
2350: PPOPN 3
2352: END
// on UnitGoesToRed ( un ) do var score , players , play ;
2353: LD_INT 0
2355: PPUSH
2356: PPUSH
2357: PPUSH
// begin if un = player then
2358: LD_VAR 0 1
2362: PUSH
2363: LD_EXP 19
2367: EQUAL
2368: IFFALSE 2377
// YouLost ( hunt2 ) ;
2370: LD_STRING hunt2
2372: PPUSH
2373: CALL_OW 104
// players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: LD_EXP 19
2386: PUSH
2387: LD_EXP 17
2391: PUSH
2392: LD_EXP 18
2396: PUSH
2397: LD_EXP 20
2401: PUSH
2402: LD_EXP 21
2406: PUSH
2407: LD_EXP 22
2411: PUSH
2412: LD_EXP 23
2416: PUSH
2417: LD_EXP 24
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: ST_TO_ADDR
// if GetSide ( un ) = 0 then
2432: LD_VAR 0 1
2436: PPUSH
2437: CALL_OW 255
2441: PUSH
2442: LD_INT 0
2444: EQUAL
2445: IFFALSE 2891
// begin play := UnitShoot ( un ) ;
2447: LD_ADDR_VAR 0 4
2451: PUSH
2452: LD_VAR 0 1
2456: PPUSH
2457: CALL_OW 504
2461: ST_TO_ADDR
// if play = 0 then
2462: LD_VAR 0 4
2466: PUSH
2467: LD_INT 0
2469: EQUAL
2470: IFFALSE 2492
// play := NearestUnitToUnit ( players , un ) ;
2472: LD_ADDR_VAR 0 4
2476: PUSH
2477: LD_VAR 0 3
2481: PPUSH
2482: LD_VAR 0 1
2486: PPUSH
2487: CALL_OW 74
2491: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 257
2501: PUSH
2502: LD_INT 18
2504: DOUBLE
2505: EQUAL
2506: IFTRUE 2510
2508: GO 2523
2510: POP
// score := PB ; class_tiger :
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: LD_EXP 11
2520: ST_TO_ADDR
2521: GO 2629
2523: LD_INT 14
2525: DOUBLE
2526: EQUAL
2527: IFTRUE 2531
2529: GO 2544
2531: POP
// score := PT ; class_fish :
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: LD_EXP 12
2541: ST_TO_ADDR
2542: GO 2629
2544: LD_INT 20
2546: DOUBLE
2547: EQUAL
2548: IFTRUE 2552
2550: GO 2565
2552: POP
// score := PF ; 21 :
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_EXP 13
2562: ST_TO_ADDR
2563: GO 2629
2565: LD_INT 21
2567: DOUBLE
2568: EQUAL
2569: IFTRUE 2573
2571: GO 2586
2573: POP
// score := PH ; 13 :
2574: LD_ADDR_VAR 0 2
2578: PUSH
2579: LD_EXP 14
2583: ST_TO_ADDR
2584: GO 2629
2586: LD_INT 13
2588: DOUBLE
2589: EQUAL
2590: IFTRUE 2594
2592: GO 2607
2594: POP
// score := PE ; class_apeman :
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: LD_EXP 10
2604: ST_TO_ADDR
2605: GO 2629
2607: LD_INT 12
2609: DOUBLE
2610: EQUAL
2611: IFTRUE 2615
2613: GO 2628
2615: POP
// score := PA ; end ;
2616: LD_ADDR_VAR 0 2
2620: PUSH
2621: LD_EXP 16
2625: ST_TO_ADDR
2626: GO 2629
2628: POP
// if GetChassis ( un ) = 31 then
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 265
2638: PUSH
2639: LD_INT 31
2641: EQUAL
2642: IFFALSE 2654
// score := PM ;
2644: LD_ADDR_VAR 0 2
2648: PUSH
2649: LD_EXP 15
2653: ST_TO_ADDR
// if play = player then
2654: LD_VAR 0 4
2658: PUSH
2659: LD_EXP 19
2663: EQUAL
2664: IFFALSE 2682
// score_player := score_player + score ;
2666: LD_ADDR_EXP 28
2670: PUSH
2671: LD_EXP 28
2675: PUSH
2676: LD_VAR 0 2
2680: PLUS
2681: ST_TO_ADDR
// if play = player_1 then
2682: LD_VAR 0 4
2686: PUSH
2687: LD_EXP 17
2691: EQUAL
2692: IFFALSE 2710
// score_enemy1 := score_enemy1 + score ;
2694: LD_ADDR_EXP 29
2698: PUSH
2699: LD_EXP 29
2703: PUSH
2704: LD_VAR 0 2
2708: PLUS
2709: ST_TO_ADDR
// if play = player_2 then
2710: LD_VAR 0 4
2714: PUSH
2715: LD_EXP 18
2719: EQUAL
2720: IFFALSE 2738
// score_enemy2 := score_enemy2 + score ;
2722: LD_ADDR_EXP 30
2726: PUSH
2727: LD_EXP 30
2731: PUSH
2732: LD_VAR 0 2
2736: PLUS
2737: ST_TO_ADDR
// if play = player_3 then
2738: LD_VAR 0 4
2742: PUSH
2743: LD_EXP 20
2747: EQUAL
2748: IFFALSE 2766
// score_enemy3 := score_enemy3 + score ;
2750: LD_ADDR_EXP 31
2754: PUSH
2755: LD_EXP 31
2759: PUSH
2760: LD_VAR 0 2
2764: PLUS
2765: ST_TO_ADDR
// if play = player_4 then
2766: LD_VAR 0 4
2770: PUSH
2771: LD_EXP 21
2775: EQUAL
2776: IFFALSE 2794
// score_enemy4 := score_enemy4 + score ;
2778: LD_ADDR_EXP 32
2782: PUSH
2783: LD_EXP 32
2787: PUSH
2788: LD_VAR 0 2
2792: PLUS
2793: ST_TO_ADDR
// if play = player_5 then
2794: LD_VAR 0 4
2798: PUSH
2799: LD_EXP 22
2803: EQUAL
2804: IFFALSE 2822
// score_enemy5 := score_enemy5 + score ;
2806: LD_ADDR_EXP 33
2810: PUSH
2811: LD_EXP 33
2815: PUSH
2816: LD_VAR 0 2
2820: PLUS
2821: ST_TO_ADDR
// if play = player_6 then
2822: LD_VAR 0 4
2826: PUSH
2827: LD_EXP 23
2831: EQUAL
2832: IFFALSE 2850
// score_enemy6 := score_enemy6 + score ;
2834: LD_ADDR_EXP 34
2838: PUSH
2839: LD_EXP 34
2843: PUSH
2844: LD_VAR 0 2
2848: PLUS
2849: ST_TO_ADDR
// if play = player_7 then
2850: LD_VAR 0 4
2854: PUSH
2855: LD_EXP 24
2859: EQUAL
2860: IFFALSE 2878
// score_enemy7 := score_enemy7 + score ;
2862: LD_ADDR_EXP 35
2866: PUSH
2867: LD_EXP 35
2871: PUSH
2872: LD_VAR 0 2
2876: PLUS
2877: ST_TO_ADDR
// SetTag ( un , - 100 ) ;
2878: LD_VAR 0 1
2882: PPUSH
2883: LD_INT 100
2885: NEG
2886: PPUSH
2887: CALL_OW 109
// end ; end ;
2891: PPOPN 4
2893: END
// on UnitDestroyed ( un ) do var score , players , play ;
2894: LD_INT 0
2896: PPUSH
2897: PPUSH
2898: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2899: LD_ADDR_VAR 0 3
2903: PUSH
2904: LD_EXP 19
2908: PUSH
2909: LD_EXP 17
2913: PUSH
2914: LD_EXP 18
2918: PUSH
2919: LD_EXP 20
2923: PUSH
2924: LD_EXP 21
2928: PUSH
2929: LD_EXP 22
2933: PUSH
2934: LD_EXP 23
2938: PUSH
2939: LD_EXP 24
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL_OW 255
2963: PUSH
2964: LD_INT 0
2966: EQUAL
2967: PUSH
2968: LD_VAR 0 1
2972: PPUSH
2973: CALL_OW 110
2977: PUSH
2978: LD_INT 100
2980: NEG
2981: NONEQUAL
2982: AND
2983: IFFALSE 3416
// begin play := UnitShoot ( un ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_VAR 0 1
2994: PPUSH
2995: CALL_OW 504
2999: ST_TO_ADDR
// if play = 0 then
3000: LD_VAR 0 4
3004: PUSH
3005: LD_INT 0
3007: EQUAL
3008: IFFALSE 3030
// play := NearestUnitToUnit ( players , un ) ;
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_VAR 0 3
3019: PPUSH
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 74
3029: ST_TO_ADDR
// case GetClass ( un ) of 18 :
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 257
3039: PUSH
3040: LD_INT 18
3042: DOUBLE
3043: EQUAL
3044: IFTRUE 3048
3046: GO 3061
3048: POP
// score := PB ; class_tiger :
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_EXP 11
3058: ST_TO_ADDR
3059: GO 3167
3061: LD_INT 14
3063: DOUBLE
3064: EQUAL
3065: IFTRUE 3069
3067: GO 3082
3069: POP
// score := PT ; class_fish :
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: LD_EXP 12
3079: ST_TO_ADDR
3080: GO 3167
3082: LD_INT 20
3084: DOUBLE
3085: EQUAL
3086: IFTRUE 3090
3088: GO 3103
3090: POP
// score := PF ; 21 :
3091: LD_ADDR_VAR 0 2
3095: PUSH
3096: LD_EXP 13
3100: ST_TO_ADDR
3101: GO 3167
3103: LD_INT 21
3105: DOUBLE
3106: EQUAL
3107: IFTRUE 3111
3109: GO 3124
3111: POP
// score := PH ; 13 :
3112: LD_ADDR_VAR 0 2
3116: PUSH
3117: LD_EXP 14
3121: ST_TO_ADDR
3122: GO 3167
3124: LD_INT 13
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3145
3132: POP
// score := PE ; class_apeman :
3133: LD_ADDR_VAR 0 2
3137: PUSH
3138: LD_EXP 10
3142: ST_TO_ADDR
3143: GO 3167
3145: LD_INT 12
3147: DOUBLE
3148: EQUAL
3149: IFTRUE 3153
3151: GO 3166
3153: POP
// score := PA ; end ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_EXP 16
3163: ST_TO_ADDR
3164: GO 3167
3166: POP
// if GetChassis ( un ) = 31 then
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 265
3176: PUSH
3177: LD_INT 31
3179: EQUAL
3180: IFFALSE 3192
// score := PM ;
3182: LD_ADDR_VAR 0 2
3186: PUSH
3187: LD_EXP 15
3191: ST_TO_ADDR
// if play = player then
3192: LD_VAR 0 4
3196: PUSH
3197: LD_EXP 19
3201: EQUAL
3202: IFFALSE 3220
// score_player := score_player + score ;
3204: LD_ADDR_EXP 28
3208: PUSH
3209: LD_EXP 28
3213: PUSH
3214: LD_VAR 0 2
3218: PLUS
3219: ST_TO_ADDR
// if play = player_1 then
3220: LD_VAR 0 4
3224: PUSH
3225: LD_EXP 17
3229: EQUAL
3230: IFFALSE 3248
// score_enemy1 := score_enemy1 + score ;
3232: LD_ADDR_EXP 29
3236: PUSH
3237: LD_EXP 29
3241: PUSH
3242: LD_VAR 0 2
3246: PLUS
3247: ST_TO_ADDR
// if play = player_2 then
3248: LD_VAR 0 4
3252: PUSH
3253: LD_EXP 18
3257: EQUAL
3258: IFFALSE 3276
// score_enemy2 := score_enemy2 + score ;
3260: LD_ADDR_EXP 30
3264: PUSH
3265: LD_EXP 30
3269: PUSH
3270: LD_VAR 0 2
3274: PLUS
3275: ST_TO_ADDR
// if play = player_3 then
3276: LD_VAR 0 4
3280: PUSH
3281: LD_EXP 20
3285: EQUAL
3286: IFFALSE 3304
// score_enemy3 := score_enemy3 + score ;
3288: LD_ADDR_EXP 31
3292: PUSH
3293: LD_EXP 31
3297: PUSH
3298: LD_VAR 0 2
3302: PLUS
3303: ST_TO_ADDR
// if play = player_4 then
3304: LD_VAR 0 4
3308: PUSH
3309: LD_EXP 21
3313: EQUAL
3314: IFFALSE 3332
// score_enemy4 := score_enemy4 + score ;
3316: LD_ADDR_EXP 32
3320: PUSH
3321: LD_EXP 32
3325: PUSH
3326: LD_VAR 0 2
3330: PLUS
3331: ST_TO_ADDR
// if play = player_5 then
3332: LD_VAR 0 4
3336: PUSH
3337: LD_EXP 22
3341: EQUAL
3342: IFFALSE 3360
// score_enemy5 := score_enemy5 + score ;
3344: LD_ADDR_EXP 33
3348: PUSH
3349: LD_EXP 33
3353: PUSH
3354: LD_VAR 0 2
3358: PLUS
3359: ST_TO_ADDR
// if play = player_6 then
3360: LD_VAR 0 4
3364: PUSH
3365: LD_EXP 23
3369: EQUAL
3370: IFFALSE 3388
// score_enemy6 := score_enemy6 + score ;
3372: LD_ADDR_EXP 34
3376: PUSH
3377: LD_EXP 34
3381: PUSH
3382: LD_VAR 0 2
3386: PLUS
3387: ST_TO_ADDR
// if play = player_7 then
3388: LD_VAR 0 4
3392: PUSH
3393: LD_EXP 24
3397: EQUAL
3398: IFFALSE 3416
// score_enemy7 := score_enemy7 + score ;
3400: LD_ADDR_EXP 35
3404: PUSH
3405: LD_EXP 35
3409: PUSH
3410: LD_VAR 0 2
3414: PLUS
3415: ST_TO_ADDR
// end ; end ;
3416: PPOPN 4
3418: END
// every 0 0$0.1 do
3419: GO 3421
3421: DISABLE
// begin enable ;
3422: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
3423: LD_ADDR_OWVAR 47
3427: PUSH
3428: LD_STRING #player1
3430: PUSH
3431: LD_EXP 28
3435: PUSH
3436: LD_STRING #player2
3438: PUSH
3439: LD_EXP 29
3443: PUSH
3444: LD_STRING #player3
3446: PUSH
3447: LD_EXP 30
3451: PUSH
3452: LD_STRING #player4
3454: PUSH
3455: LD_EXP 31
3459: PUSH
3460: LD_STRING #player5
3462: PUSH
3463: LD_EXP 32
3467: PUSH
3468: LD_STRING #player6
3470: PUSH
3471: LD_EXP 33
3475: PUSH
3476: LD_STRING #player7
3478: PUSH
3479: LD_EXP 34
3483: PUSH
3484: LD_STRING #player8
3486: PUSH
3487: LD_EXP 35
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: ST_TO_ADDR
// end ;
3510: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
3511: LD_VAR 0 1
3515: PUSH
3516: LD_OWVAR 2
3520: EQUAL
3521: PUSH
3522: LD_VAR 0 2
3526: PUSH
3527: LD_INT 0
3529: GREATER
3530: AND
3531: IFFALSE 3540
// YouLost ( hunt1 ) ;
3533: LD_STRING hunt1
3535: PPUSH
3536: CALL_OW 104
// end ;
3540: PPOPN 2
3542: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) < 2 do
3543: LD_INT 22
3545: PUSH
3546: LD_INT 0
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PPUSH
3553: CALL_OW 69
3557: PUSH
3558: LD_INT 2
3560: LESS
3561: IFFALSE 3670
3563: GO 3565
3565: DISABLE
// begin Wait ( 0 0$03 ) ;
3566: LD_INT 105
3568: PPUSH
3569: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
3573: LD_EXP 28
3577: PUSH
3578: LD_EXP 29
3582: GREATER
3583: PUSH
3584: LD_EXP 28
3588: PUSH
3589: LD_EXP 30
3593: GREATER
3594: AND
3595: PUSH
3596: LD_EXP 28
3600: PUSH
3601: LD_EXP 31
3605: GREATER
3606: AND
3607: PUSH
3608: LD_EXP 28
3612: PUSH
3613: LD_EXP 32
3617: GREATER
3618: AND
3619: PUSH
3620: LD_EXP 28
3624: PUSH
3625: LD_EXP 33
3629: GREATER
3630: AND
3631: PUSH
3632: LD_EXP 28
3636: PUSH
3637: LD_EXP 34
3641: GREATER
3642: AND
3643: PUSH
3644: LD_EXP 28
3648: PUSH
3649: LD_EXP 35
3653: GREATER
3654: AND
3655: IFFALSE 3663
// YouWin else
3657: CALL_OW 103
3661: GO 3670
// YouLost ( hunt3 ) ;
3663: LD_STRING hunt3
3665: PPUSH
3666: CALL_OW 104
// end ;
3670: END
